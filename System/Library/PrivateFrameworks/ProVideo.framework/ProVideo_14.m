void sub_1B2E5C1A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1020C407E778586);
  _Unwind_Resume(a1);
}

uint64_t PCDirectedGraph<OZLocking *>::~PCDirectedGraph(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void OZScene::addLockDependencyGraphForSceneNode(int a1, uint64_t a2, char *lpsrc)
{
  char *v5;
  char *v6;
  const void *v7;
  OZLocking *v8;
  OZLocking *v9;
  OZLocking *v10;
  OZLocking *v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = lpsrc + 1000;
  v6 = (char *)*((_QWORD *)lpsrc + 126);
  if (v6 == lpsrc + 1000)
    goto LABEL_7;
  do
  {
    v7 = (const void *)*((_QWORD *)v6 + 2);
    if (v7)
    {
      if (v8)
      {
        v9 = v8;
        OZLocking::reset(v8);
        v13 = 0;
        v14 = 0;
        v12 = &v13;
        (*(void (**)(OZLocking *, _QWORD, uint64_t, _QWORD ***))(*(_QWORD *)v9 + 48))(v9, 0, a2, &v12);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13);
      }
    }
    v6 = (char *)*((_QWORD *)v6 + 1);
  }
  while (v6 != v5);
  if (lpsrc)
  {
LABEL_7:
    if (v10)
    {
      v11 = v10;
      OZLocking::reset(v10);
      v13 = 0;
      v14 = 0;
      v12 = &v13;
      (*(void (**)(OZLocking *, _QWORD, uint64_t, _QWORD ***))(*(_QWORD *)v11 + 48))(v11, 0, a2, &v12);
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13);
    }
  }
}

void sub_1B2E5C33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void OZScene::willAcquireLockingGroup(OZScene *this)
{
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 40));
}

void OZScene::didReleaseLockingGroup(OZScene *this)
{
  PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 40));
}

PCSharedCount *PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>@<X0>(OZScene **a1@<X0>, int *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZSceneCamera *v6;

  v6 = (OZSceneCamera *)operator new();
  OZSceneCamera::OZSceneCamera(v6, *a1, *a2);
  a3->var0 = (PC_Sp_counted_base *)v6;
  return PCSharedCount::PCSharedCount(a3 + 1, (OZSceneCamera *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
}

void sub_1B2E5C3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40287C748ELL);
  _Unwind_Resume(a1);
}

void OZScene::render(OZScene *this, OZRenderParams *a2)
{
  PCException *exception;
  PCString v3;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v3, "function deprecated");
  PCException::PCException(exception, &v3);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2E5C458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZScene::end_descendants(OZScene *this)
{
  return (uint64_t)this + 1200;
}

void std::__tree<OZGuide>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<OZGuide>::destroy(a1, *a2);
    std::__tree<OZGuide>::destroy(a1, a2[1]);
    (*(void (**)(_QWORD *))a2[4])(a2 + 4);
    operator delete(a2);
  }
}

void PCRenderModel::PCRenderModel(PCRenderModel *this, const PCRenderModel *a2)
{
  CGColorSpace *v4;
  CGColorSpace *v5;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (CGColorSpace *)*((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  v5 = (CGColorSpace *)*((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v5;
  if (v5)
    PCCFRefTraits<CGColorSpace *>::retain(v5);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
}

void sub_1B2E5C544(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<PCMutex>::shared_ptr[abi:ne180100]<PCMutex,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6593670;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2E5C5B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCMutex *,std::shared_ptr<PCMutex>::__shared_ptr_default_delete<PCMutex,PCMutex>,std::allocator<PCMutex>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PCMutex *,std::shared_ptr<PCMutex>::__shared_ptr_default_delete<PCMutex,PCMutex>,std::allocator<PCMutex>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

_QWORD *OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t *OZObject::iterator_t<OZProjectNode,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

_QWORD *OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::increment(_QWORD *result, OZSceneNode *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  OZSoloNodeValidator *v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  OZSoloNodeValidator *v17;
  _QWORD *v18;

  v2 = result;
  v3 = result + 2;
  v4 = *result;
  if (*result == result[2])
    goto LABEL_17;
  v5 = *(OZSoloNodeValidator **)(v4 + 16);
  v6 = OZSoloNodeValidator::recurseInto(v5, a2);
  if ((*(unsigned int (**)(OZSoloNodeValidator *))(*(_QWORD *)v5 + 1056))(v5))
    v7 = !v6;
  else
    v7 = 1;
  if (!v7)
  {
    v9 = *v2;
    v17 = v5;
    v18 = &v17;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v2 + 4), &v17, (uint64_t)&std::piecewise_construct, &v18)[3] = v9;
    result = (_QWORD *)(*(uint64_t (**)(OZSoloNodeValidator *))(*(_QWORD *)v5 + 1104))(v5);
    *v2 = result;
    *((_BYTE *)v2 + 24) = 1;
    return result;
  }
  if (((*(unsigned int (**)(OZSoloNodeValidator *))(*(_QWORD *)v5 + 960))(v5) & v6) == 1)
  {
    v8 = *v2;
    v17 = v5;
    v18 = &v17;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v2 + 4), &v17, (uint64_t)&std::piecewise_construct, &v18)[3] = v8;
    result = (_QWORD *)(*(uint64_t (**)(OZSoloNodeValidator *))(*(_QWORD *)v5 + 1024))(v5);
    *v2 = result;
    return result;
  }
  v10 = *(_QWORD **)(*v2 + 8);
  result = (_QWORD *)*((_QWORD *)v5 + 120);
  if (!result || v10 == (_QWORD *)*v3)
  {
    *v2 = v10;
    return result;
  }
  v11 = *result;
  if (*((_BYTE *)v2 + 24))
    v12 = *(uint64_t (**)(void))(v11 + 1112);
  else
    v12 = *(uint64_t (**)(void))(v11 + 1032);
  result = (_QWORD *)v12();
  if (v10 != result)
  {
LABEL_16:
    v4 = *v2;
LABEL_17:
    *v2 = *(_QWORD *)(v4 + 8);
    return result;
  }
  if (*((_BYTE *)v2 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 120) + 960))(*((_QWORD *)v5 + 120)),
        (result & v6) == 1))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 120) + 1024))(*((_QWORD *)v5 + 120));
    *v2 = result;
    *((_BYTE *)v2 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v2 + 24) = 0;
    while (1)
    {
      v5 = (OZSoloNodeValidator *)*((_QWORD *)v5 + 120);
      if (!v5)
        break;
      v18 = v5;
      v13 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v2 + 4, &v18);
      v14 = v13 + 3;
      if (!v13)
        v14 = v3;
      v15 = *v14;
      *v2 = v15;
      result = (_QWORD *)*((_QWORD *)v5 + 120);
      if (result)
      {
        v16 = *(_QWORD **)(v15 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v16 == result && v16 != (_QWORD *)*v3)
          continue;
      }
      goto LABEL_16;
    }
  }
  return result;
}

BOOL OZSoloNodeValidator::recurseInto(OZSoloNodeValidator *this, OZSceneNode *a2)
{
}

uint64_t *OZObject::iterator_t<OZAudioLayer,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t std::__tree<unsigned int>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v4, v12);
    else
      v13 = 0;
    __p = v13;
    v15 = &v13[32 * v10];
    v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    v16 = &v15[32 * a2];
    std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15)
      v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
}

void sub_1B2E5CDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1B2E5D0A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

void std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[18];
    if (v4)
    {
      a2[19] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *std::__tree<OZTimeMarker>::find<OZTimeMarker>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = OZTimeMarker::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || OZTimeMarker::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t *std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(uint64_t **a1, uint64_t a2, const OZTimeMarker *a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<OZTimeMarker>::__construct_node<OZTimeMarker const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!OZTimeMarker::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!OZTimeMarker::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

OZTimeMarker *std::__tree<OZTimeMarker>::__construct_node<OZTimeMarker const&>@<X0>(uint64_t a1@<X0>, const OZTimeMarker *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  OZTimeMarker *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = OZTimeMarker::OZTimeMarker((OZTimeMarker *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2E5D31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<OZTimeMarker,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<OZTimeMarker,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<OZTimeMarker,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<OZTimeMarker,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void (***v2)(_QWORD);

  v2 = *(void (****)(_QWORD))a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      (*v2[4])(v2 + 4);
    operator delete(v2);
  }
}

_DWORD *std::__tree<std::__value_type<PCHash128,PCMutexRef>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCMutexRef>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCMutexRef>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    v9 = *a4;
    v7[8] = **a4;
    v7[9] = v9[1];
    v7[10] = v9[2];
    v7[11] = v9[3];
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v12 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v7;
}

PCSharedCount *PCPtr<OZSceneCamera>::PCPtr<LiCamera>(PCSharedCount *a1, const PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  PCSharedCount v6;

  var0 = a2->var0;
  if (a2->var0)
  a1->var0 = var0;
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B2E5D4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
  {
    v3 = *(_QWORD *)(v3 + 8);
    *result = v3;
  }
  switch(*((_DWORD *)result + 10))
  {
    case 0:
      v4 = *(_QWORD **)(v3 + 16);
      if (((*(uint64_t (**)(_QWORD *))(*v4 + 960))(v4) & 1) == 0
        && ((*(uint64_t (**)(_QWORD *))(*v4 + 1056))(v4) & 1) == 0
        && !v4[124]
        && !v4[127])
      {
        result = (_QWORD *)v4[120];
        if (result)
        {
          v25 = *(_QWORD **)(*v1 + 8);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
          if (v25 == result && v25 != (_QWORD *)*v2)
            goto LABEL_24;
        }
        goto LABEL_30;
      }
      v5 = *v1;
      v28 = v4;
      v29 = &v28;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 6), &v28, (uint64_t)&std::piecewise_construct, &v29)[3] = v5;
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
        *v1 = (*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1056))(v4);
      if ((_DWORD)result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
        *v1 = result;
        v6 = 1;
        goto LABEL_49;
      }
      if (v4[124])
        goto LABEL_34;
      if (v4[127])
        goto LABEL_46;
      return result;
    case 1:
      v7 = *(_QWORD **)(v3 + 8);
      v28 = *(_QWORD **)(v3 + 16);
      v4 = v28;
      v8 = result + 6;
      v29 = &v28;
      result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(result + 6), &v28, (uint64_t)&std::piecewise_construct, &v29);
      result[3] = v3;
      if (v4[124])
      {
LABEL_34:
        v17 = v4[123];
        goto LABEL_35;
      }
      if (v4[127])
      {
LABEL_46:
        v23 = v4[126];
        goto LABEL_47;
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1112))(v4[120]);
      if (v7 != result || v7 == (_QWORD *)*v2)
        goto LABEL_30;
      v9 = (_QWORD *)v4[120];
      if (v9[124])
        goto LABEL_61;
      if (!v9[127])
      {
        *((_DWORD *)v1 + 10) = 0;
        goto LABEL_68;
      }
      goto LABEL_65;
    case 2:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[3] + 16) + 248))(*(_QWORD *)(result[3] + 16));
      v4 = result;
      v10 = *(_QWORD **)(v1[3] + 8);
      v1[3] = v10;
      if (v10 != result + 122)
        goto LABEL_24;
      v11 = (_QWORD *)result[126];
      v1[4] = v11;
      if (v11 != result + 125)
        goto LABEL_48;
LABEL_31:
      *((_DWORD *)v1 + 10) = 0;
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
        *v1 = result;
        return result;
      }
      v29 = v4;
      v8 = v1 + 6;
      result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
      v18 = result + 3;
      if (!result)
        v18 = v2;
      v19 = (_QWORD *)*v18;
      *v1 = *v18;
      v20 = (_QWORD *)v1[2];
      if (v19 == v20)
        return result;
      v21 = (_QWORD *)v19[1];
      result = (_QWORD *)v4[120];
      if (result)
        v22 = v21 == v20;
      else
        v22 = 1;
      if (v22)
      {
        *v1 = v21;
        return result;
      }
      v24 = *result;
      if ((v4[128] & 8) == 0)
      {
        result = (_QWORD *)(*(uint64_t (**)(void))(v24 + 1032))();
        if (v21 == result)
        {
          do
          {
LABEL_24:
            v4 = (_QWORD *)v4[120];
            if (!v4)
              return result;
            v29 = v4;
            v13 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
            v14 = v13 + 3;
            if (!v13)
              v14 = v2;
            v15 = *v14;
            *v1 = v15;
            result = (_QWORD *)v4[120];
            if (!result)
              break;
            v16 = *(_QWORD **)(v15 + 8);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
            if (v16 != result)
              break;
          }
          while (v16 != (_QWORD *)*v2);
        }
LABEL_30:
        *v1 = *(_QWORD *)(*v1 + 8);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(v24 + 1112))();
      if (v21 != result)
      {
        *((_DWORD *)v1 + 10) = 1;
        goto LABEL_30;
      }
      v9 = (_QWORD *)v4[120];
      if (v9[124])
      {
LABEL_61:
        v29 = v9;
        result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        v26 = result + 3;
        if (!result)
          v26 = v2;
        *v1 = *v26;
        v17 = v9[123];
LABEL_35:
        v1[3] = v17;
        v6 = 2;
LABEL_49:
        *((_DWORD *)v1 + 10) = v6;
        return result;
      }
      if (v9[127])
      {
LABEL_65:
        v29 = v9;
        result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        v27 = result + 3;
        if (!result)
          v27 = v2;
        *v1 = *v27;
        v23 = v9[126];
LABEL_47:
        v1[4] = v23;
LABEL_48:
        v6 = 3;
        goto LABEL_49;
      }
LABEL_68:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 960))(v9);
      if (!(_DWORD)result)
        goto LABEL_24;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
      *v1 = result;
      *((_DWORD *)v1 + 10) = 0;
      return result;
    case 3:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[4] + 16) + 320))(*(_QWORD *)(result[4] + 16));
      v4 = result;
      v12 = *(_QWORD **)(v1[4] + 8);
      v1[4] = v12;
      if (v12 != result + 125)
        goto LABEL_24;
      goto LABEL_31;
    default:
      v4 = 0;
      goto LABEL_24;
  }
}

void PCDirectedGraph<OZLocking *>::findStronglyConnectedComponents(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  _QWORD *i;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11[3];
  uint64_t *v12;
  _QWORD v13[2];
  _QWORD **v14;
  _QWORD *v15[2];
  _OWORD v16[3];
  _QWORD **v17;
  _QWORD *v18[2];
  int v19;

  v19 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17 = v18;
  memset(v16, 0, sizeof(v16));
  v15[0] = 0;
  v15[1] = 0;
  v13[1] = 0;
  v14 = v15;
  v12 = v13;
  v13[0] = 0;
  v1 = a1 + 1;
  v2 = *a1;
  if (*a1 == (uint64_t *)(a1 + 1))
  {
    v9 = 0;
  }
  else
  {
    do
    {
      v10 = v2[4];
      std::set<OZLocking *>::set[abi:ne180100](v11, (uint64_t)(v2 + 5));
      for (i = v15[0]; i; i = (_QWORD *)*i)
      {
        v5 = i[4];
        if (v10 >= v5)
        {
          if (v5 >= v10)
            goto LABEL_8;
          ++i;
        }
      }
      PCDirectedGraph<OZLocking *>::dfs(a1, v10, &v19, (uint64_t)&v17, v16, (uint64_t)&v14, &v12);
LABEL_8:
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
      v6 = (uint64_t *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != (uint64_t *)v1);
    v9 = (_QWORD *)v13[0];
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v9);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
  std::deque<unsigned long>::~deque[abi:ne180100](v16);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v17, v18[0]);
}

void sub_1B2E5DAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  _QWORD *v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD *);
  v15 = va_arg(va2, _QWORD);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v5, a4);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v10);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va1, v14);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v6 - 64, *(_QWORD **)(v6 - 56));
  _Unwind_Resume(a1);
}

void PCDirectedGraph<OZLocking *>::dfs(uint64_t **a1, uint64_t a2, int *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t **a7)
{
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  _QWORD *v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void *__p;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;

  v64 = a2;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, &v64, (uint64_t *)&v64);
  std::deque<OZLocking *>::push_back(a5, &v64);
  v13 = *a3 + 1;
  *a3 = v13;
  __p = &v64;
  *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 10) = v13;
  v14 = *a3;
  __p = &v64;
  *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)a6, &v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 10) = v14;
  v59 = (uint64_t *)a1;
  __p = &v64;
  v15 = std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a1, &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
  v16 = (uint64_t *)v15[5];
  v17 = v15 + 6;
  if (v16 == v15 + 6)
    goto LABEL_26;
  do
  {
    v18 = v16[4];
    v63 = v18;
    v19 = *(_QWORD **)(a6 + 8);
    if (!v19)
    {
LABEL_7:
      PCDirectedGraph<OZLocking *>::dfs(v59);
      __p = &v64;
      v21 = std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
      __p = &v63;
      v22 = a7;
      goto LABEL_8;
    }
    while (1)
    {
      v20 = v19[4];
      if (v18 >= v20)
        break;
LABEL_6:
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_7;
    }
    if (v20 < v18)
    {
      ++v19;
      goto LABEL_6;
    }
    v28 = *(_QWORD **)(a4 + 8);
    if (!v28)
      goto LABEL_12;
    while (2)
    {
      v29 = v28[4];
      if (v18 < v29)
      {
LABEL_23:
        v28 = (_QWORD *)*v28;
        if (!v28)
          goto LABEL_12;
        continue;
      }
      break;
    }
    if (v29 < v18)
    {
      ++v28;
      goto LABEL_23;
    }
    __p = &v64;
    v21 = std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
    __p = &v63;
    v22 = (uint64_t **)a6;
LABEL_8:
    v23 = *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(v22, &v63, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 10);
    if (v23 >= *((_DWORD *)v21 + 10))
      v24 = *((_DWORD *)v21 + 10);
    else
      v24 = v23;
    __p = &v64;
    *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 10) = v24;
LABEL_12:
    v25 = (uint64_t *)v16[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        v26 = (uint64_t *)v16[2];
        v27 = *v26 == (_QWORD)v16;
        v16 = v26;
      }
      while (!v27);
    }
    v16 = v26;
  }
  while (v26 != v17);
LABEL_26:
  __p = &v64;
  v30 = *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 10);
  __p = &v64;
  if (v30 == *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)a6, &v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 10))
  {
    __p = 0;
    v61 = 0;
    v62 = 0;
    while (1)
    {
      v31 = a5[5] + a5[4] - 1;
      v32 = *(_QWORD *)(a5[1] + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8));
      v33 = v31 & 0x1FF;
      v34 = *(_QWORD *)(v32 + 8 * v33);
      v35 = v61;
      if (v34 == v64)
        break;
      if (v61 >= v62)
      {
        v37 = ((char *)v61 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v37 + 1) >> 61)
          goto LABEL_68;
        v38 = ((char *)v62 - (_BYTE *)__p) >> 2;
        if (v38 <= v37 + 1)
          v38 = v37 + 1;
        if ((unint64_t)((char *)v62 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v62, v39);
          v34 = *(_QWORD *)(v32 + 8 * v33);
        }
        else
        {
          v40 = 0;
        }
        v41 = (uint64_t *)&v40[8 * v37];
        *v41 = v34;
        v36 = v41 + 1;
        v43 = (char *)__p;
        v42 = (char *)v61;
        if (v61 != __p)
        {
          do
          {
            v44 = *((_QWORD *)v42 - 1);
            v42 -= 8;
            *--v41 = v44;
          }
          while (v42 != v43);
          v42 = (char *)__p;
        }
        __p = v41;
        v61 = v36;
        v62 = (uint64_t *)&v40[8 * v39];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v61 = v34;
        v36 = v35 + 1;
      }
      v61 = v36;
      v45 = a5[5] + a5[4] - 1;
      std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)(*(_QWORD *)(a5[1] + ((v45 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v45 & 0x1FF)));
      --a5[5];
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](a5, 1);
    }
    if (v61 >= v62)
    {
      v47 = ((char *)v61 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
LABEL_68:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v48 = ((char *)v62 - (_BYTE *)__p) >> 2;
      if (v48 <= v47 + 1)
        v48 = v47 + 1;
      if ((unint64_t)((char *)v62 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
      {
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v62, v49);
        v34 = v64;
      }
      else
      {
        v50 = 0;
      }
      v51 = (uint64_t *)&v50[8 * v47];
      v52 = &v50[8 * v49];
      *v51 = v34;
      v46 = v51 + 1;
      v54 = (char *)__p;
      v53 = (char *)v61;
      if (v61 != __p)
      {
        do
        {
          v55 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *--v51 = v55;
        }
        while (v53 != v54);
        v53 = (char *)__p;
      }
      __p = v51;
      v61 = v46;
      v62 = (uint64_t *)v52;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v61 = v34;
      v46 = v35 + 1;
    }
    v61 = v46;
    std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, &v64);
    --a5[5];
    std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](a5, 1);
    v56 = v59 + 3;
    v57 = v59[4];
    if (v57 >= v59[5])
    {
      v58 = std::vector<std::vector<OZLocking *>>::__push_back_slow_path<std::vector<OZLocking *> const&>(v56, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)v56, (uint64_t)&__p);
      v58 = v57 + 24;
    }
    v59[4] = v58;
    if (__p)
    {
      v61 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B2E5DFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<OZLocking *>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<OZLocking *>::insert[abi:ne180100]<std::__tree_const_iterator<OZLocking *,std::__tree_node<OZLocking *,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1B2E5E054(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<OZLocking *>::insert[abi:ne180100]<std::__tree_const_iterator<OZLocking *,std::__tree_node<OZLocking *,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<OZLocking *>::__emplace_hint_unique_key_args<OZLocking *,OZLocking * const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<OZLocking *>::__emplace_hint_unique_key_args<OZLocking *,OZLocking * const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<OZLocking *>::__find_equal<OZLocking *>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<OZLocking *>::__find_equal<OZLocking *>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::deque<OZLocking *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZLocking *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZLocking *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2E5E668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B2E5E6FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<OZLocking *>>::__push_back_slow_path<std::vector<OZLocking *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<OZLocking *>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2E5E804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<OZLocking *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void OZLayeredMaterialSequenceFolder::OZLayeredMaterialSequenceFolder(OZLayeredMaterialSequenceFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(_QWORD *)v4 = &off_1E6593700;
  *(_QWORD *)(v4 + 16) = &unk_1E65939D8;
  *(_QWORD *)(v4 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B2E5E9AC(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZLayeredMaterialSequenceFolder::OZLayeredMaterialSequenceFolder(OZLayeredMaterialSequenceFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZLayeredMaterialSequenceFolder_Factory *v6;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, 0);
  *(_QWORD *)v6 = &off_1E6593700;
  *((_QWORD *)v6 + 2) = &unk_1E65939D8;
  *((_QWORD *)v6 + 7) &= ~0x10000uLL;
  *((_QWORD *)this + 1) = OZLayeredMaterialSequenceFolder_Factory::getInstance(v6);
  (*(void (**)(OZLayeredMaterialSequenceFolder *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2E5EA20(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterialSequenceFolder_Factory::getInstance(OZLayeredMaterialSequenceFolder_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLayeredMaterialSequenceFolder_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLayeredMaterialSequenceFolder_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLayeredMaterialSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLayeredMaterialSequenceFolder_Factory::_instance;
}

uint64_t OZLayeredMaterialSequenceFolder::clone(const OZChannelBase *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v2, this, 0);
  *(_QWORD *)v2 = &off_1E6593700;
  *(_QWORD *)(v2 + 16) = &unk_1E65939D8;
  return v2;
}

void sub_1B2E5EAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZLayeredMaterialSequenceFolder::~OZLayeredMaterialSequenceFolder(OZLayeredMaterialSequenceFolder *this)
{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZLayeredMaterialSequenceFolder::~OZLayeredMaterialSequenceFolder(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);
  JUMPOUT(0x1B5E29170);
}

_QWORD *OZLayeredMaterialSequenceFolder::deleteLayerSequenceFolders(_QWORD *this)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD **v3;
  _QWORD *v4;

  v1 = this[14];
  if (v1)
  {
    v2 = *(_QWORD ***)v1;
    v3 = *(_QWORD ***)(v1 + 8);
    if (*(_QWORD ***)v1 != v3)
    {
      v4 = this;
      do
      {
        this = *v2;
        if (*v2)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        ++v2;
      }
      while (v2 != v3);
      v1 = v4[14];
      v2 = *(_QWORD ***)v1;
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return this;
}

uint64_t *`non-virtual thunk to'OZLayeredMaterialSequenceFolder::markFactoriesForSerialization(OZLayeredMaterialSequenceFolder *this, PCSerializerWriteStream *a2)
{
  return OZChannelFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2);
}

uint64_t `non-virtual thunk to'OZLayeredMaterialSequenceFolder::parseElement(OZLayeredMaterialSequenceFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelFolder::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZLayeredMaterialSequenceFolder::writeHeader(OZLayeredMaterialSequenceFolder *this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZLayeredMaterialSequenceScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 110);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 32);
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
    (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 160))(a2, 112, *((_QWORD *)this + 7));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(*((OZFactory **)this + 1), v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZLayeredMaterialSequenceFolder::writeHeader(OZLayeredMaterialSequenceFolder *this, PCSerializerWriteStream *a2)
{
  return OZLayeredMaterialSequenceFolder::writeHeader((OZLayeredMaterialSequenceFolder *)((char *)this - 16), a2);
}

void std::__call_once_param<std::tuple<OZLayeredMaterialSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLayeredMaterialSequenceFolder_Factory *v0;

  v0 = (OZLayeredMaterialSequenceFolder_Factory *)operator new();
  OZLayeredMaterialSequenceFolder_Factory::OZLayeredMaterialSequenceFolder_Factory(v0);
  OZLayeredMaterialSequenceFolder_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E5ED10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZLayeredMaterialSequenceFolder_Factory::OZLayeredMaterialSequenceFolder_Factory(OZLayeredMaterialSequenceFolder_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B3056CC0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6593A48;
  *((_QWORD *)this + 16) = &unk_1E6593B18;
}

void sub_1B2E5EDB0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZLayeredMaterialSequenceFolder *OZLayeredMaterialSequenceFolder_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZLayeredMaterialSequenceFolder *v6;

  v6 = (OZLayeredMaterialSequenceFolder *)operator new();
  OZLayeredMaterialSequenceFolder::OZLayeredMaterialSequenceFolder(v6, this, a2, a3);
  return v6;
}

void sub_1B2E5EE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterialSequenceFolder_Factory::createCopy(OZLayeredMaterialSequenceFolder_Factory *this, OZFactoryBase *a2)
{
  uint64_t v3;
  const OZChannelBase *v4;

  v3 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v3, v4, 0);
  *(_QWORD *)v3 = &off_1E6593700;
  *(_QWORD *)(v3 + 16) = &unk_1E65939D8;
  return v3;
}

void sub_1B2E5EEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterialSequenceFolder_Factory::createChannelCopy(OZLayeredMaterialSequenceFolder_Factory *this, OZChannelBase *a2)
{
  uint64_t v3;
  const OZChannelBase *v4;

  v3 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v3, v4, 0);
  *(_QWORD *)v3 = &off_1E6593700;
  *(_QWORD *)(v3 + 16) = &unk_1E65939D8;
  return v3;
}

void sub_1B2E5EF60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZHeMatteNormalCompositeNode::OZHeMatteNormalCompositeNode(OZHeMatteNormalCompositeNode *this)
{
  _QWORD *v1;

  HgcMatteNormalComposite::HgcMatteNormalComposite(this);
  *v1 = off_1E6593B70;
}

void OZHeMatteNormalCompositeNode::~OZHeMatteNormalCompositeNode(HGNode *this)
{
  void *v1;

  HgcMatteNormalComposite::~HgcMatteNormalComposite(this);
  HGObject::operator delete(v1);
}

void OZHeMatteInt8::OZHeMatteInt8(OZHeMatteInt8 *this)
{
  _QWORD *v1;

  HgcMatteInt8::HgcMatteInt8(this);
  *v1 = off_1E6593DC0;
}

void OZHeMatteInt8::~OZHeMatteInt8(HGNode *this)
{
  void *v1;

  HgcMatteInt8::~HgcMatteInt8(this);
  HGObject::operator delete(v1);
}

void OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  PCString v11;
  PCString v12;

  Instance = (OZFactory *)OZChannelMaterialLayerMap_Factory::getInstance(this);
  OZChannelImageWithOptions::OZChannelImageWithOptions(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E6594040;
  *((_QWORD *)this + 2) = &unk_1E6594398;
  PCURL::PCURL((PCURL *)&v12, CFSTR("Material Bump Map Type Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Material Bump Map Type Selection"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 1584), 0, &v12, &v11, (OZChannelFolder *)this, 0xCu, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Map Transform Label"));
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840), &v12, (OZChannelFolder *)this, 7u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Map Invert Label"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5744), 0, &v12, (OZChannelFolder *)this, 8u, 2u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Material Wrap Around Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Material Wrap Around"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896), 0, &v12, &v11, (OZChannelFolder *)this, 9u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Map White Level"));
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6152), 1.0, &v12, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Map Black Level"));
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6304), 0.0, &v12, (OZChannelFolder *)this, 0xBu, 0, 0, 0);
  PCString::~PCString(&v12);
  OZChannelMaterialLayerMap::init(this);
}

void sub_1B2E5F574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelImageWithOptions *v12;
  OZChannelEnum *v13;
  OZChannelMaterialMapTransform *v14;
  OZChannelBool *v15;
  OZChannelEnum *v16;
  OZChannel *v17;
  OZChannel *v18;
  OZChannel *v19;

  v19 = v17;
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  _Unwind_Resume(a1);
}

void sub_1B2E5F614(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E5F5F4);
}

void sub_1B2E5F624()
{
  JUMPOUT(0x1B2E5F5F4);
}

void sub_1B2E5F62C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E5F5FCLL);
}

void sub_1B2E5F63C()
{
  JUMPOUT(0x1B2E5F5FCLL);
}

void sub_1B2E5F644(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E5F604);
}

void sub_1B2E5F664()
{
  JUMPOUT(0x1B2E5F604);
}

uint64_t OZChannelMaterialLayerMap_Factory::getInstance(OZChannelMaterialLayerMap_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelMaterialLayerMap_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelMaterialLayerMap_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialLayerMap_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialLayerMap_Factory::_instance;
}

OZChannelBase *OZChannelMaterialLayerMap::init(OZChannelMaterialLayerMap *this)
{
  OZChannelBase *v2;
  OZChannelBase *v3;
  OZLayeredMaterial *LayeredMaterial;
  OZChannelBase *result;

  v2 = (OZChannelBase *)((char *)this + 136);
  v3 = (OZChannelBase *)((char *)this + 624);
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelMaterialLayerMap *)((char *)this + 624));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 320), 0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 320), 100.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 6152), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 6152), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 6304), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 6304), 1.0);
  OZChannelBase::setFlag(v3, 2, 0);
  LayeredMaterial = (OZLayeredMaterial *)GetLayeredMaterial((OZChannelBase *)this);
  OZChannelMaterialLayerMap::setImageChannelOffsetChannel(this, LayeredMaterial);
  result = OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1584), 2, 0);
  if (*(_BYTE *)(theApp + 81))
    return OZChannelBase::setFlag(v2, 0x400000, 0);
  return result;
}

void OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZChannelImageWithOptions::OZChannelImageWithOptions(this, a2, a3, a4);
  *v5 = &off_1E6594040;
  v5[2] = &unk_1E6594398;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Bump Map Type Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Bump Map Type Selection"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 1584), 0, &v7, &v6, (OZChannelFolder *)this, 0xCu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Transform Label"));
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840), &v7, (OZChannelFolder *)this, 7u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Invert Label"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5744), 0, &v7, (OZChannelFolder *)this, 8u, 2u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Wrap Around Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Wrap Around"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896), 0, &v7, &v6, (OZChannelFolder *)this, 9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map White Level"));
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6152), 1.0, &v7, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Black Level"));
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6304), 0.0, &v7, (OZChannelFolder *)this, 0xBu, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannelMaterialLayerMap::init(this);
}

void sub_1B2E5FA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelImageWithOptions *v12;
  OZChannelEnum *v13;
  OZChannelMaterialMapTransform *v14;
  OZChannelBool *v15;
  OZChannelEnum *v16;
  OZChannel *v17;
  OZChannel *v18;
  OZChannel *v19;

  v19 = v17;
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  _Unwind_Resume(a1);
}

void sub_1B2E5FAF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E5FAD4);
}

void sub_1B2E5FB04()
{
  JUMPOUT(0x1B2E5FAD4);
}

void sub_1B2E5FB0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E5FADCLL);
}

void sub_1B2E5FB1C()
{
  JUMPOUT(0x1B2E5FADCLL);
}

void sub_1B2E5FB24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E5FAE4);
}

void sub_1B2E5FB44()
{
  JUMPOUT(0x1B2E5FAE4);
}

void OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this, const OZChannelMaterialLayerMap *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelImageWithOptions::OZChannelImageWithOptions(this, a2, a3);
  *v5 = &off_1E6594040;
  v5[2] = &unk_1E6594398;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 198), (const OZChannelMaterialLayerMap *)((char *)a2 + 1584), (OZChannelFolder *)this);
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840), (const OZChannelMaterialLayerMap *)((char *)a2 + 1840), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5744), (const OZChannelBase *)((char *)a2 + 5744), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896), (const OZChannelMaterialLayerMap *)((char *)a2 + 5896), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 6152), (const OZChannelBase *)((char *)a2 + 6152), (OZChannelFolder *)this);
  *((_QWORD *)this + 769) = &off_1E6551358;
  *((_QWORD *)this + 771) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 6304), (const OZChannelBase *)((char *)a2 + 6304), (OZChannelFolder *)this);
  *((_QWORD *)this + 788) = &off_1E6551358;
  *((_QWORD *)this + 790) = &unk_1E65516B8;
  (*(void (**)(OZChannelMaterialLayerMap *, const OZChannelMaterialLayerMap *, uint64_t))(*(_QWORD *)this
                                                                                                  + 232))(this, a2, 1);
}

void sub_1B2E5FC68(_Unwind_Exception *a1)
{
  OZChannelImageWithOptions *v1;
  OZChannelEnum *v2;
  OZChannelMaterialMapTransform *v3;
  OZChannelBool *v4;
  OZChannelEnum *v5;
  OZChannel *v6;
  OZChannel *v7;

  OZChannel::~OZChannel(v7);
  OZChannel::~OZChannel(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelBool::~OZChannelBool(v4);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v1);
  _Unwind_Resume(a1);
}

void sub_1B2E5FCCC()
{
  JUMPOUT(0x1B2E5FCB4);
}

void sub_1B2E5FCD4()
{
  JUMPOUT(0x1B2E5FCBCLL);
}

OZChannelMaterialLayerMap *OZChannelMaterialLayerMap::clone(OZChannelMaterialLayerMap *this)
{
  OZChannelMaterialLayerMap *v2;

  v2 = (OZChannelMaterialLayerMap *)operator new();
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(v2, this, 0);
  return v2;
}

void sub_1B2E5FD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

void *GetLayeredMaterial(OZChannelBase *a1)
{
  void *result;

  result = (void *)OZChannelBase::getObjectManipulator(a1);
  if (result)
  return result;
}

uint64_t OZChannelMaterialLayerMap::copy(OZChannelMaterialLayerMap *this, const OZChannelBase *a2, uint64_t a3)
{
  char v3;
  const OZChannelBase *v4;
  OZLayeredMaterial *LayeredMaterial;

  v3 = a3;
  v4 = a2;
  OZChannelImageWithOptions::copy(this, a2, a3);
  if (v4)
  OZChannelEnum::copy((PCString *)this + 198, (const OZChannelBase *)((char *)v4 + 1584), v3);
  OZChannelMaterialMapTransform::copy((OZChannelMaterialLayerMap *)((char *)this + 1840), (const OZChannelBase *)((char *)v4 + 1840), v3);
  OZChannel::copy((OZChannel *)((char *)this + 5744), (const OZChannelBase *)((char *)v4 + 5744), v3);
  OZChannelEnum::copy((PCString *)this + 737, (const OZChannelBase *)((char *)v4 + 5896), v3);
  OZChannel::copy((OZChannel *)((char *)this + 6152), (const OZChannelBase *)((char *)v4 + 6152), v3);
  OZChannel::copy((OZChannel *)((char *)this + 6304), (const OZChannelBase *)((char *)v4 + 6304), v3);
  LayeredMaterial = (OZLayeredMaterial *)GetLayeredMaterial((OZChannelBase *)this);
  return OZChannelMaterialLayerMap::setImageChannelOffsetChannel(this, LayeredMaterial);
}

uint64_t OZChannelMaterialLayerMap::setImageChannelOffsetChannel(OZChannelMaterialLayerMap *this, OZLayeredMaterial *a2)
{
  int ValueAsInt;
  OZChannel2D *v5;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1968), MEMORY[0x1E0CA2E68], 0.0);
  if (a2 && ValueAsInt)
    v5 = (OZLayeredMaterial *)((char *)a2 + 2720);
  else
    v5 = (OZChannel2D *)(*(uint64_t (**)(OZChannelMaterialLayerMap *))(*(_QWORD *)this + 832))(this);
  return OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, v5);
}

uint64_t OZChannelMaterialLayerMap::parseEnd(OZChannelMaterialLayerMap *this, PCSerializerReadStream *a2)
{
  uint64_t v3;
  OZLayeredMaterial *LayeredMaterial;

  v3 = OZChannelImageWithOptions::parseEnd((OZChannelFolder *)this, a2);
  LayeredMaterial = (OZLayeredMaterial *)GetLayeredMaterial((OZChannelBase *)this);
  OZChannelMaterialLayerMap::setImageChannelOffsetChannel(this, LayeredMaterial);
  if (*(_BYTE *)(theApp + 81))
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 0x400000, 0);
  return v3;
}

uint64_t `non-virtual thunk to'OZChannelMaterialLayerMap::parseEnd(OZChannelMaterialLayerMap *this, PCSerializerReadStream *a2)
{
  return OZChannelMaterialLayerMap::parseEnd((OZChannelMaterialLayerMap *)((char *)this - 16), a2);
}

uint64_t OZChannelMaterialLayerMap::willSetSharedTransform(OZChannelMaterialLayerMap *this, double a2, OZLayeredMaterial *a3)
{
  OZChannel2D *v5;

  if (a2 != 1.0 || a3 == 0)
    v5 = (OZChannel2D *)(*(uint64_t (**)(OZChannelMaterialLayerMap *, OZLayeredMaterial *))(*(_QWORD *)this + 832))(this, a3);
  else
    v5 = (OZLayeredMaterial *)((char *)a3 + 2720);
  return OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, v5);
}

uint64_t OZChannelMaterialLayerMap::getOffset(OZChannelMaterialLayerMap *this)
{
  return (uint64_t)this + 2992;
}

void `non-virtual thunk to'OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this)
{
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap((OZChannelMaterialLayerMap *)((char *)this - 16));
}

{
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap((OZChannelMaterialLayerMap *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZChannelMaterialLayerMap_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelMaterialLayerMap_Factory *v0;

  v0 = (OZChannelMaterialLayerMap_Factory *)operator new();
  OZChannelMaterialLayerMap_Factory::OZChannelMaterialLayerMap_Factory(v0);
  OZChannelMaterialLayerMap_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E6000C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialLayerMap_Factory::OZChannelMaterialLayerMap_Factory(OZChannelMaterialLayerMap_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DE40;
  v4 = xmmword_1B355E6C0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6594408;
  *((_QWORD *)this + 16) = &unk_1E65944D8;
}

void sub_1B2E600AC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelMaterialLayerMap *OZChannelMaterialLayerMap_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelMaterialLayerMap *v6;

  v6 = (OZChannelMaterialLayerMap *)operator new();
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(v6, this, a2, a3);
  return v6;
}

void sub_1B2E6011C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

OZChannelMaterialLayerMap *OZChannelMaterialLayerMap_Factory::createCopy(OZChannelMaterialLayerMap_Factory *this, OZFactoryBase *a2)
{
  OZChannelMaterialLayerMap *v3;
  const OZChannelMaterialLayerMap *v4;

  v3 = (OZChannelMaterialLayerMap *)operator new();
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(v3, v4, 0);
  return v3;
}

void sub_1B2E601A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

OZChannelMaterialLayerMap *OZChannelMaterialLayerMap_Factory::createChannelCopy(OZChannelMaterialLayerMap_Factory *this, OZChannelBase *a2)
{
  OZChannelMaterialLayerMap *v3;
  const OZChannelMaterialLayerMap *v4;

  v3 = (OZChannelMaterialLayerMap *)operator new();
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(v3, v4, 0);
  return v3;
}

void sub_1B2E60234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

void *OZRotoshape::addVertex(OZRotoshape *this, CMTime *a2, double a3, double a4)
{
  CMTime v5;

  v5 = *a2;
  return OZShape::addVertex((OZRotoshape *)((char *)this + 18976), &v5, a3, a4);
}

uint64_t OZRotoshape::addVertices(uint64_t a1, CMTime *a2, double **a3)
{
  CMTime v4;

  v4 = *a2;
  return OZShape::addVertices(a1 + 18976, &v4, a3);
}

uint64_t OZRotoshape::deleteAll(OZRotoshape *this)
{
  return OZShape::deleteAll((OZRotoshape *)((char *)this + 18976));
}

CGColorSpace **OZRotoshape::closeCurve(OZRotoshape *this)
{
  char *v2;
  OZScene *v3;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v2 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v3 = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v2 + 272))(v2);
    OZScene::getCurrentTime(v3, (__n128 *)&v5);
  }
  return OZShape::closeCurve((OZRotoshape *)((char *)this + 18976), &v5);
}

CGColorSpace **OZRotoshape::finishCurve(OZRotoshape *this)
{
  char *v2;
  OZScene *v3;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v2 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v3 = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v2 + 272))(v2);
    OZScene::getCurrentTime(v3, (__n128 *)&v5);
  }
  return OZMoShape::finishCurve((OZRotoshape *)((char *)this + 18976), &v5);
}

uint64_t OZRotoshape::setInterpolation(OZRotoshape *this, unsigned int a2)
{
  return OZShape::setInterpolation((OZRotoshape *)((char *)this + 18976), a2);
}

uint64_t OZMaterialGenericSubstanceIF::selection(OZMaterialGenericSubstanceIF *this)
{
  OZChannel *v1;

  v1 = (OZChannel *)(*(uint64_t (**)(OZMaterialGenericSubstanceIF *))(*(_QWORD *)this + 72))(this);
  return OZChannel::getValueAsInt(v1, MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t OZMaterialGenericSubstanceIF::getColor(OZMaterialGenericSubstanceIF *this, const CMTime *a2, PCColor *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(OZMaterialGenericSubstanceIF *))(*(_QWORD *)this + 32))(this);
  return (*(uint64_t (**)(uint64_t, const CMTime *, PCColor *, double))(*(_QWORD *)v5 + 824))(v5, a2, a3, 0.0);
}

uint64_t OZGetNewFontID(const __CFString *a1)
{
  uint64_t v2;

  v2 = OZGetNewFontID(__CFString const*)::ID++;
  if (CFStringCompare(a1, CFSTR("MarkerFelt-Wide"), 0)
    && CFStringCompare(a1, CFSTR("AmericanTypewriter"), 0)
    && CFStringCompare(a1, CFSTR("Cracked"), 0)
    && CFStringCompare(a1, CFSTR("PortagoITCTT"), 0)
    && CFStringCompare(a1, CFSTR("BodoniOrnamentsITCTT"), 0)
    && CFStringCompare(a1, CFSTR("Webdings"), 0)
    && CFStringCompare(a1, CFSTR("Wingdings-Regular"), 0))
  {
    CFStringCompare(a1, CFSTR("ACaslonPro-Regular"), 0);
  }
  return v2;
}

void OZFontManagerBase::OZFontManagerBase(OZFontManagerBase *this)
{
  *(_QWORD *)this = off_1E6594578;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 64), 1);
  *((_QWORD *)this + 8) = &unk_1E64E2000;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
}

void sub_1B2E605AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  PCString **v4;
  void **v5;
  void *v7;

  v5 = v3;
  std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(v2, *v4);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void OZFontManagerBase::~OZFontManagerBase(OZFontManagerBase *this)
{
  uint64_t SystemFonts;
  const PCString *v3;
  __CFString *v4;
  OZFontFamily *var0;
  __CFString *v6;
  __CFString *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  PCString v13;
  OZFontFamily *v14;

  *(_QWORD *)this = off_1E6594578;
  SystemFonts = OZFontManagerBase::getSystemFonts(this);
  if (SystemFonts)
  {
    v3 = *(const PCString **)(SystemFonts + 16);
    v4 = (__CFString *)(SystemFonts + 24);
    if (v3 != (const PCString *)(SystemFonts + 24))
    {
      do
      {
        PCString::PCString(&v13, v3 + 4);
        var0 = (OZFontFamily *)v3[5].var0;
        v14 = var0;
        if (var0)
        {
          OZFontFamily::~OZFontFamily(var0);
          MEMORY[0x1B5E29170]();
        }
        v14 = 0;
        PCString::~PCString(&v13);
        v6 = v3[1].var0;
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (__CFString *)v6->isa;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = v3[2].var0;
            v8 = v7->isa == v3;
            v3 = (const PCString *)v7;
          }
          while (!v8);
        }
        v3 = (const PCString *)v7;
      }
      while (v7 != v4);
    }
  }
  v9 = (uint64_t *)*((_QWORD *)this + 1);
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  while (v9 != v10)
  {
    v11 = *v9;
    if (*v9)
    {
      std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(v11 + 16, *(PCString **)(v11 + 24));
      PCString::~PCString((PCString *)(v11 + 8));
      PCString::~PCString((PCString *)v11);
      MEMORY[0x1B5E29170]();
    }
    ++v9;
  }
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 64));
  std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 40, *((PCString **)this + 6));
  v12 = (void *)*((_QWORD *)this + 1);
  if (v12)
  {
    *((_QWORD *)this + 2) = v12;
    operator delete(v12);
  }
}

uint64_t OZFontManagerBase::getSystemFonts(OZFontManagerBase *this)
{
  PCMutex *v2;
  uint64_t v3;

  v2 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  v3 = *((_QWORD *)this + 4);
  PCMutex::unlock(v2);
  return v3;
}

uint64_t OZFontManagerBase::addFontFace(uint64_t a1, uint64_t *a2)
{
  PCMutex *v4;
  uint64_t *v5;
  PCString *v7;

  v4 = (PCMutex *)(a1 + 64);
  PCMutex::lock((PCMutex *)(a1 + 64));
  v7 = (PCString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  v5 = std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((PCString *)(a1 + 40), v7, (uint64_t)&std::piecewise_construct, (const PCString **)&v7);
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v5 + 5, a2);
  return PCMutex::unlock(v4);
}

void sub_1B2E607F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZFontManagerBase::purgeCachedFonts(OZFontManagerBase *this)
{
  PCMutex *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;

  v2 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = (uint64_t **)((char *)this + 40);
  v3 = v5;
  if (v5 != (uint64_t *)(v4 + 1))
  {
    do
    {
      v6 = v3[6];
      if (v6 && !*(_QWORD *)(v6 + 8))
      {
        v8 = std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::erase(v4, (uint64_t)v3);
      }
      else
      {
        v7 = (uint64_t *)v3[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v3[2];
            v9 = *v8 == (_QWORD)v3;
            v3 = v8;
          }
          while (!v9);
        }
      }
      v3 = v8;
    }
    while (v8 != (uint64_t *)(v4 + 1));
  }
  return PCMutex::unlock(v2);
}

void sub_1B2E608BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZFontManagerBase::getFontFace@<X0>(const PCString *this@<X0>, PCString *a2@<X1>, __CFString **a3@<X8>)
{
  PCMutex *v6;
  const PCString *v7;
  __CFString *var0;
  unint64_t *p_info;
  unint64_t v10;

  v6 = (PCMutex *)&this[8];
  PCMutex::lock((PCMutex *)&this[8]);
  v7 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(this + 5, a2);
  if (&this[6] == v7)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    var0 = v7[6].var0;
    *a3 = v7[5].var0;
    a3[1] = var0;
    if (var0)
    {
      p_info = (unint64_t *)&var0->info;
      do
        v10 = __ldxr(p_info);
      while (__stxr(v10 + 1, p_info));
    }
  }
  return PCMutex::unlock(v6);
}

void sub_1B2E60968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZFontManager::getInstance(OZFontManager *this)
{
  if (OZFontManager::getInstance(void)::once != -1)
    dispatch_once(&OZFontManager::getInstance(void)::once, &__block_literal_global_77);
  return OZFontManager::_instance;
}

uint64_t ___ZN13OZFontManager11getInstanceEv_block_invoke()
{
  OZFontManager *v0;

  v0 = (OZFontManager *)operator new();
  OZFontManager::OZFontManager(v0);
  OZFontManager::_instance = (uint64_t)v0;
  return (*(uint64_t (**)(OZFontManager *))(*(_QWORD *)v0 + 16))(v0);
}

void sub_1B2E60A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40C08B20B1);
  _Unwind_Resume(a1);
}

void OZFontManager::OZFontManager(OZFontManager *this)
{
  uint64_t v2;

  OZFontManagerBase::OZFontManagerBase(this);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 160), 0);
  *(_QWORD *)this = &off_1E6594610;
  *((_QWORD *)this + 20) = &unk_1E6594668;
}

void sub_1B2E60A70(_Unwind_Exception *a1)
{
  OZFontManagerBase *v1;

  OZFontManagerBase::~OZFontManagerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFontManager::cleanup(OZFontManager *this)
{
  uint64_t result;

  result = OZFontManager::_instance;
  if (OZFontManager::_instance)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)OZFontManager::_instance + 8))(OZFontManager::_instance);
  OZFontManager::_instance = 0;
  return result;
}

PCString *OZFontManager::getDefaultFontKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "OZFontManager::kDefaultFont");
}

PCString *OZFontManager::getDefaultFontSizeKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "OZFontManager::kDefaultFontSize");
}

void OZFontManager::~OZFontManager(OZFontManager *this)
{
  PCSingleton::~PCSingleton((OZFontManager *)((char *)this + 160));
  OZFontManagerBase::~OZFontManagerBase(this);
}

{
  PCSingleton::~PCSingleton((OZFontManager *)((char *)this + 160));
  OZFontManagerBase::~OZFontManagerBase(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFontManager::~OZFontManager(OZFontManager *this)
{
  OZFontManagerBase *v1;

  v1 = (OZFontManager *)((char *)this - 160);
  PCSingleton::~PCSingleton(this);
  OZFontManagerBase::~OZFontManagerBase(v1);
}

{
  OZFontManagerBase *v1;

  v1 = (OZFontManager *)((char *)this - 160);
  PCSingleton::~PCSingleton(this);
  OZFontManagerBase::~OZFontManagerBase(v1);
  JUMPOUT(0x1B5E29170);
}

void std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(a1, a2[1].var0);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a2[5]);
    PCString::~PCString(a2 + 4);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(PCString *a1, PCString *this, uint64_t a3, const PCString **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  const PCString *v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, &v9, this);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(uint64_t a1@<X0>, const PCString **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  PCString *v6;

  v5 = a1 + 8;
  v6 = (PCString *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, *a2);
  v6[5].var0 = 0;
  v6[6].var0 = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2E60CE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCString *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCString *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&__p[5]);
    PCString::~PCString(__p + 4);
  }
  if (__p)
    operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a2 + 40);
  PCString::~PCString((PCString *)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

void OZViewerState::OZViewerState(OZViewerState *this)
{
  PC_Sp_counted_base **v2;
  _QWORD *v3;
  uint64_t i;
  OZPreferenceManager *v5;
  OZPreferenceManager *v6;
  _BOOL8 DynamicResolution;
  int v8;
  char CompensateAspectRatio;
  LiSimpleCamera *v10;
  uint64_t v11;
  OZPreferenceManager *v12;
  OZPreferenceManager *OSCOptions;
  int v14;
  OZPreferenceManager *v15;
  OZPreferenceManager *OverlayOptions;
  int v17;
  OZPreferenceManager *v18;
  OZPreferenceManager *ShowToolInfo;
  int v20;
  OZPreferenceManager *v21;
  _QWORD v22[3];

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *(_QWORD *)this = &off_1E65946D0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 12) = 0;
  v2 = (PC_Sp_counted_base **)((char *)this + 96);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 13);
  *((_QWORD *)this + 14) = 0;
  v3 = (_QWORD *)((char *)this + 112);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  for (i = 0; i != 96; i += 16)
  {
    *(_QWORD *)((char *)this + i + 128) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)((char *)this + i + 136));
  }
  *((_QWORD *)this + 28) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 29);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *(_QWORD *)((char *)this + 260) = 0;
  *((_DWORD *)this + 8) = 0;
  if (*(_BYTE *)(theApp + 80))
  {
    *((_BYTE *)this + 36) = 0;
    *((_DWORD *)this + 10) = 0;
    *((_BYTE *)this + 48) = 0;
LABEL_6:
    *((_DWORD *)this + 13) = 0;
LABEL_7:
    *((_DWORD *)this + 14) = 0;
LABEL_8:
    CompensateAspectRatio = 1;
    *((_BYTE *)this + 60) = 1;
    goto LABEL_9;
  }
  v6 = (OZPreferenceManager *)OZPreferenceManager::Instance(v5);
  DynamicResolution = OZPreferenceManager::getDynamicResolution(v6);
  v8 = *(unsigned __int8 *)(theApp + 80);
  *((_BYTE *)this + 36) = DynamicResolution;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 48) = 0;
  if (v8)
    goto LABEL_6;
  v12 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)DynamicResolution);
  OSCOptions = (OZPreferenceManager *)OZPreferenceManager::getOSCOptions(v12);
  v14 = *(unsigned __int8 *)(theApp + 80);
  *((_DWORD *)this + 13) = (_DWORD)OSCOptions;
  if (v14)
    goto LABEL_7;
  v15 = (OZPreferenceManager *)OZPreferenceManager::Instance(OSCOptions);
  OverlayOptions = (OZPreferenceManager *)OZPreferenceManager::getOverlayOptions(v15);
  v17 = *(unsigned __int8 *)(theApp + 80);
  *((_DWORD *)this + 14) = (_DWORD)OverlayOptions;
  if (v17)
    goto LABEL_8;
  v18 = (OZPreferenceManager *)OZPreferenceManager::Instance(OverlayOptions);
  ShowToolInfo = (OZPreferenceManager *)OZPreferenceManager::getShowToolInfo(v18);
  v20 = *(unsigned __int8 *)(theApp + 80);
  *((_BYTE *)this + 60) = (_BYTE)ShowToolInfo;
  if (v20)
  {
    CompensateAspectRatio = 1;
  }
  else
  {
    v21 = (OZPreferenceManager *)OZPreferenceManager::Instance(ShowToolInfo);
    CompensateAspectRatio = OZPreferenceManager::getCompensateAspectRatio(v21);
  }
LABEL_9:
  *((_BYTE *)this + 61) = CompensateAspectRatio;
  *((_QWORD *)this + 8) = 0x200000002;
  *((_DWORD *)this + 18) = 256;
  *((_BYTE *)this + 76) = 0;
  *(_DWORD *)((char *)this + 77) = 16843009;
  *((_BYTE *)this + 81) = 0;
  v10 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v10);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)this + 14, v10);
  v11 = *v3;
  if (!*v3)
    throw_PCNullPointerException(1);
  v22[0] = 0;
  v22[1] = 0;
  v22[2] = 0x408F400000000000;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 448))(v11, v22);
  if (!*v3)
    throw_PCNullPointerException(1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 640))(*v3, 1);
  if (!*v3)
    throw_PCNullPointerException(1);
  (*(void (**)(_QWORD, double))(*(_QWORD *)*v3 + 512))(*v3, 45.0);
  PCPtr<LiImageSource>::operator=<TXTextureDecal>(v2, (const PCSharedCount *)this + 14);
  *((_QWORD *)this + 30) = 0x100000001;
  *((_WORD *)this + 128) = 0;
  *((_BYTE *)this + 258) = 0;
  *(_QWORD *)((char *)this + 260) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_WORD *)this + 44) = 256;
}

void sub_1B2E61020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9)
{
  uint64_t v9;
  uint64_t v10;
  PCSharedCount *v11;
  PCSharedCount *v12;
  PCString *v13;
  _QWORD **v14;
  uint64_t i;

  PCString::~PCString(v13);
  PCSharedCount::~PCSharedCount(v12);
  for (i = 216; i != 120; i -= 16)
    PCSharedCount::~PCSharedCount((PCSharedCount *)(v10 + i));
  PCSharedCount::~PCSharedCount(v11);
  PCSharedCount::~PCSharedCount(a9);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v9, *v14);
  _Unwind_Resume(a1);
}

void OZViewerState::OZViewerState(OZViewerState *this, const OZViewerState *a2)
{
  PC_Sp_counted_base **v4;
  _QWORD *v5;
  uint64_t i;
  LiSimpleCamera *v7;
  uint64_t v8;
  _QWORD v9[3];

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *(_QWORD *)this = &off_1E65946D0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 12) = 0;
  v4 = (PC_Sp_counted_base **)((char *)this + 96);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 13);
  *((_QWORD *)this + 14) = 0;
  v5 = (_QWORD *)((char *)this + 112);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  for (i = 0; i != 96; i += 16)
  {
    *(_QWORD *)((char *)this + i + 128) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)((char *)this + i + 136));
  }
  *((_QWORD *)this + 28) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 29);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *(_QWORD *)((char *)this + 260) = 0;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)((char *)this + 52) = *(_QWORD *)((char *)a2 + 52);
  *((_WORD *)this + 30) = *((_WORD *)a2 + 30);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_WORD *)this + 40) = *((_WORD *)a2 + 40);
  v7 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v7);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)this + 14, v7);
  v8 = *v5;
  if (!*v5)
    throw_PCNullPointerException(1);
  v9[0] = 0;
  v9[1] = 0;
  v9[2] = 0x408F400000000000;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 448))(v8, v9);
  if (!*v5)
    throw_PCNullPointerException(1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 640))(*v5, 1);
  if (!*v5)
    throw_PCNullPointerException(1);
  (*(void (**)(_QWORD, double))(*(_QWORD *)*v5 + 512))(*v5, 45.0);
  PCPtr<LiImageSource>::operator=<TXTextureDecal>(v4, (const PCSharedCount *)this + 14);
  *((_QWORD *)this + 30) = 0x100000001;
  *((_WORD *)this + 128) = 0;
  *((_BYTE *)this + 258) = 0;
  *(_QWORD *)((char *)this + 260) = *(_QWORD *)((char *)a2 + 260);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_WORD *)this + 44) = *((_WORD *)a2 + 44);
}

void sub_1B2E612E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11)
{
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  PCSharedCount *v14;
  PCString *v15;
  uint64_t i;

  PCString::~PCString(v15);
  PCSharedCount::~PCSharedCount(v14);
  for (i = 216; i != 120; i -= 16)
    PCSharedCount::~PCSharedCount((PCSharedCount *)(v13 + i));
  PCSharedCount::~PCSharedCount(a10);
  PCSharedCount::~PCSharedCount(a11);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *v12);
  _Unwind_Resume(a1);
}

_QWORD *OZViewerState::getPanZoomSettings(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v14;
  int v15;
  int *v16;

  v15 = a2;
  v3 = (_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    goto LABEL_11;
  v4 = (_QWORD *)(a1 + 16);
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = (_QWORD *)v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == v3 || *((_DWORD *)v4 + 8) > a2)
  {
LABEL_11:
    v16 = &v15;
    v8 = std::__tree<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::__map_value_compare<OZViewCameraType,std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::less<OZViewCameraType>,true>,std::allocator<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>>>::__emplace_unique_key_args<OZViewCameraType,std::piecewise_construct_t const&,std::tuple<OZViewCameraType const&>,std::tuple<>>((uint64_t **)(a1 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16);
    v8[5] = (uint64_t *)0x3FF0000000000000;
    *((_DWORD *)v8 + 12) = 2;
    *((_DWORD *)v8 + 17) = 0;
    *(_OWORD *)((char *)v8 + 52) = v14;
    *((_BYTE *)v8 + 72) = 1;
    v9 = *v3;
    if (!*v3)
      goto LABEL_21;
    v4 = v3;
    do
    {
      v10 = *(_DWORD *)(v9 + 32);
      v11 = v10 < v15;
      if (v10 >= v15)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (!v11)
        v4 = (_QWORD *)v9;
      v9 = *v12;
    }
    while (*v12);
    if (v4 == v3 || v15 < *((_DWORD *)v4 + 8))
LABEL_21:
      v4 = v3;
  }
  return v4 + 5;
}

uint64_t OZOrthoCamera::OZOrthoCamera(uint64_t a1, int a2, _OWORD *a3)
{
  *(_QWORD *)(a1 + 520) = &off_1E65EB048;
  *(_QWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 536) = 1;
  LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)a1, (uint64_t *)&off_1E6594AA0);
  *(_QWORD *)a1 = &unk_1E6594748;
  *(_QWORD *)(a1 + 520) = &unk_1E6594A80;
  *(_QWORD *)(a1 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = a2;
  *(_OWORD *)(a1 + 504) = *a3;
  LiSimpleCamera::setCameraModel(a1, 1);
  (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 512))(a1, 0.0);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 288))(a1, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 768))(a1);
  return a1;
}

void sub_1B2E61570(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 520) = v2 + 16;
  *(_BYTE *)(v1 + 536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 528));
  _Unwind_Resume(a1);
}

uint64_t OZViewerState::writeHeader(OZViewerState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZViewerStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 83);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 9, *((unsigned int *)this + 21));
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZViewerState::writeBody(OZViewerState *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const PCSharedCount *v27;
  uint64_t v28;
  double *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  LiSimpleCamera *v36;
  PCSharedCount v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  PCString v43;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZViewerStateScope);
  v4 = *((unsigned int *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned __int8 *)this + 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 52);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((unsigned int *)this + 10);
  if (v6 <= 1)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  v7 = *((unsigned int *)this + 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v8 = *((unsigned int *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v9 = *((unsigned __int8 *)this + 61);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v10 = *((unsigned __int8 *)this + 75);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *((unsigned __int8 *)this + 76);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v12 = *((unsigned __int8 *)this + 77);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v13 = *((unsigned __int8 *)this + 78);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v14 = *((unsigned __int8 *)this + 79);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 26);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v15 = *((unsigned __int8 *)this + 80);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 27);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v16 = *((unsigned __int8 *)this + 81);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 28);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v17 = *((unsigned __int8 *)this + 88);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v18 = *((unsigned int *)this + 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v19 = *((unsigned int *)this + 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v20 = *((unsigned __int8 *)this + 72);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v20);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v21 = *((unsigned __int8 *)this + 73);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 22);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v21);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v22 = *((unsigned __int8 *)this + 74);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 23);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v22);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v23 = *((unsigned int *)this + 60);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 29);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v23);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::PCString(&v43, (const PCString *)this + 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 30);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v43);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v43);
  v24 = *((unsigned __int8 *)this + 258);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 53);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v24);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v41 = (float64x2_t)0x3FF0000000000000uLL;
  v42 = 0uLL;
  v38 = 0.0;
  v39 = 0.0;
  v40 = 0.0;
  v25 = *((_QWORD *)this + 14);
  if (!v25)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v25 + 472))(v25, &v41);
  v26 = *((_QWORD *)this + 14);
  if (!v26)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v26 + 440))(v26, &v38);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v41, (float64x2_t)xmmword_1B304EED0), (int32x4_t)vceqzq_f64(v42))))) & 1) != 0|| v38 != 0.0|| v39 != 0.0|| v40 != 1000.0)
  {
    writeCamera(a2, *((LiSimpleCamera **)this + 14), 1);
  }
  v27 = (const PCSharedCount *)((char *)this + 128);
  v28 = -6;
  do
  {
    PCPtr<OZOrthoCamera>::PCPtr<LiSimpleCamera>((PCSharedCount *)&v36, v27);
    if (v36 && (*(unsigned int (**)(LiSimpleCamera *))(*(_QWORD *)v36 + 784))(v36))
      writeCamera(a2, v36, (v28 + 8));
    PCSharedCount::~PCSharedCount(&v37);
    v27 += 2;
  }
  while (!__CFADD__(v28++, 1));
  v30 = (double *)*((_QWORD *)this + 1);
  v31 = (char *)this + 16;
  if (v30 != (double *)v31)
  {
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 45);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 46, *((unsigned int *)v30 + 8));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 47, v30[5]);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 49, v30[7]);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 50, v30[8]);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 48, *((unsigned int *)v30 + 12));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 51, *((unsigned __int8 *)v30 + 72));
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v32 = (char *)*((_QWORD *)v30 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(char **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (char *)*((_QWORD *)v30 + 2);
          v34 = *(_QWORD *)v33 == (_QWORD)v30;
          v30 = (double *)v33;
        }
        while (!v34);
      }
      v30 = (double *)v33;
    }
    while (v33 != v31);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2E61DB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t writeCamera(PCSerializerWriteStream *a1, LiSimpleCamera *a2, uint64_t a3)
{
  double v6;
  double v7;
  _QWORD v9[2];
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  v10 = 1.0;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  (*(void (**)(LiSimpleCamera *, double *))(*(_QWORD *)a2 + 440))(a2, &v14);
  (*(void (**)(LiSimpleCamera *, double *))(*(_QWORD *)a2 + 472))(a2, &v10);
  (*(void (**)(_QWORD *__return_ptr, LiSimpleCamera *))(*(_QWORD *)a2 + 272))(v9, a2);
  v7 = *(double *)v9;
  v6 = *(double *)&v9[1];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a1 + 16))(a1, 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 32, a3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a1 + 16))(a1, 33);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 34, v14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 35, v15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 36, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a1 + 16))(a1, 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 38, v10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 39, v11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 40, v12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 41, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a1 + 16))(a1, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 43, v7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a1 + 184))(a1, 44, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a1 + 24))(a1);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a1 + 224))(a1);
}

uint64_t OZViewerState::parseBegin(OZViewerState *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZViewerStateScope);
  return 1;
}

uint64_t OZViewerState::parseEnd(OZViewerState *this, PCSerializerReadStream *a2)
{
  if (*((_BYTE *)this + 256) && !*((_QWORD *)this + 28) && PCString::empty((PCString *)this + 31))
    *((_BYTE *)this + 256) = 0;
  PCPtr<LiImageSource>::reset((_QWORD *)this + 28);
  return 1;
}

uint64_t OZViewerState::parseElement(OZViewerState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  _QWORD *PanZoomSettings;
  char *v7;
  _QWORD *v8;
  int v9;
  int v10;
  char *v11;
  PCShared_base *v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  BOOL *v17;
  OZPreferenceManager *v18;
  OZPreferenceManager *v19;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      PanZoomSettings = OZViewerState::getPanZoomSettings((uint64_t)this, 0);
      goto LABEL_20;
    case 2:
      v8 = OZViewerState::getPanZoomSettings((uint64_t)this, 0);
      LODWORD(v23) = 0;
      (*(void (**)(PCStreamElement *, __int128 *))(*(_QWORD *)a3 + 24))(a3, &v23);
      v9 = v23;
      goto LABEL_43;
    case 3:
      LODWORD(v23) = 0;
      (*(void (**)(PCStreamElement *, __int128 *))(*(_QWORD *)a3 + 32))(a3, &v23);
      v10 = v23;
      if ((int)v23 >= 2)
        v10 = 2;
      *((_DWORD *)this + 8) = v10;
      return 0;
    case 4:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 24))(a3, (char *)this + 40);
      return 0;
    case 5:
      v11 = (char *)this + 56;
      goto LABEL_24;
    case 6:
      v11 = (char *)this + 52;
      goto LABEL_24;
    case 7:
      v7 = (char *)this + 61;
      goto LABEL_46;
    case 8:
      v7 = (char *)this + 78;
      goto LABEL_46;
    case 9:
      v7 = (char *)this + 75;
      goto LABEL_46;
    case 0xA:
      v7 = (char *)this + 76;
      goto LABEL_46;
    case 0xB:
      v7 = (char *)this + 77;
      goto LABEL_46;
    case 0xC:
      PanZoomSettings = OZViewerState::getPanZoomSettings((uint64_t)this, 0) + 2;
      goto LABEL_20;
    case 0xD:
      PanZoomSettings = OZViewerState::getPanZoomSettings((uint64_t)this, 0) + 3;
LABEL_20:
      (*(void (**)(PCStreamElement *, _QWORD *))(*(_QWORD *)a3 + 64))(a3, PanZoomSettings);
      return 0;
    case 0xE:
      v7 = (char *)(OZViewerState::getPanZoomSettings((uint64_t)this, 0) + 4);
      goto LABEL_46;
    case 0x10:
      v7 = (char *)this + 88;
      goto LABEL_46;
    case 0x11:
      LODWORD(v23) = 0;
      (*(void (**)(PCStreamElement *, __int128 *))(*(_QWORD *)a3 + 32))(a3, &v23);
      *((_DWORD *)this + 16) = v23;
      return 0;
    case 0x14:
      v11 = (char *)this + 68;
LABEL_24:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, v11);
      return 0;
    case 0x15:
      v7 = (char *)this + 72;
      goto LABEL_46;
    case 0x16:
      v7 = (char *)this + 73;
      goto LABEL_46;
    case 0x17:
      v7 = (char *)this + 74;
      goto LABEL_46;
    case 0x1A:
      v7 = (char *)this + 79;
      goto LABEL_46;
    case 0x1B:
      v7 = (char *)this + 80;
      goto LABEL_46;
    case 0x1C:
      v7 = (char *)this + 81;
      goto LABEL_46;
    case 0x1D:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 240);
      if (*((_DWORD *)this + 60) >= 0xBu)
        *((_DWORD *)this + 60) = 0;
      *((_BYTE *)this + 256) = 1;
      return 0;
    case 0x1E:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 16))(a3, (char *)this + 248);
      return 0;
    case 0x1F:
      v26 = 0;
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 32, (uint64_t)&v26);
      if ((v26 - 2) > 5)
      {
        if (v26 == 1)
        {
          v21 = (_QWORD *)((char *)this + 224);
          PCPtr<LiImageSource>::operator=<TXTextureDecal>((PC_Sp_counted_base **)this + 28, (const PCSharedCount *)this + 14);
          v22 = *((_QWORD *)this + 28);
          if (!v22)
            throw_PCNullPointerException(1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 640))(v22, 1);
          if (!*v21)
            throw_PCNullPointerException(1);
          (*(void (**)(_QWORD, double))(*(_QWORD *)*v21 + 512))(*v21, 45.0);
        }
      }
      else
      {
        v12 = (PCShared_base *)operator new();
        v23 = 0uLL;
        OZOrthoCamera::OZOrthoCamera((uint64_t)v12, v26, &v23);
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)this + 28, v12);
        PCPtr<LiSimpleCamera>::operator=<LiCamera>((_QWORD *)this + 2 * (v26 - 2) + 16, (const void **)this + 28);
      }
      return 0;
    case 0x21:
      v23 = 0uLL;
      v24 = 0;
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 34, (uint64_t)&v23);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 35, (uint64_t)&v23 + 8);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 36, (uint64_t)&v24);
      v13 = *((_QWORD *)this + 28);
      if (!v13)
        return 0;
      v14 = *(void (**)(void))(*(_QWORD *)v13 + 448);
      goto LABEL_41;
    case 0x25:
      v23 = 0x3FF0000000000000uLL;
      v24 = 0;
      v25 = 0;
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 38, (uint64_t)&v23);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 39, (uint64_t)&v23 + 8);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 40, (uint64_t)&v24);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 41, (uint64_t)&v25);
      v15 = *((_QWORD *)this + 28);
      if (!v15)
        return 0;
      v14 = *(void (**)(void))(*(_QWORD *)v15 + 480);
      goto LABEL_41;
    case 0x2A:
      v23 = 0uLL;
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 43, (uint64_t)&v23);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 44, (uint64_t)&v23 + 8);
      v16 = *((_QWORD *)this + 28);
      if (!v16)
        return 0;
      v14 = *(void (**)(void))(*(_QWORD *)v16 + 288);
LABEL_41:
      v14();
      break;
    case 0x2D:
      LODWORD(v23) = 0;
      v26 = 0;
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 46, (uint64_t)&v23);
      v8 = OZViewerState::getPanZoomSettings((uint64_t)this, v23);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 47, (uint64_t)v8);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 49, (uint64_t)(v8 + 2));
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 50, (uint64_t)(v8 + 3));
      PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 48, (uint64_t)&v26);
      PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 51, (uint64_t)(v8 + 4));
      v9 = v26;
LABEL_43:
      *((_DWORD *)v8 + 2) = v9;
      return 0;
    case 0x34:
      v17 = (BOOL *)this + 36;
      v18 = (OZPreferenceManager *)(*(uint64_t (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, (char *)this + 36);
      v19 = (OZPreferenceManager *)OZPreferenceManager::Instance(v18);
      OZPreferenceManager::adjustDynamicResolution(v19, v17);
      return 0;
    case 0x35:
      v7 = (char *)this + 258;
LABEL_46:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, v7);
      break;
    default:
      return 0;
  }
  return 0;
}

void sub_1B2E62570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40AC1445C7);
  _Unwind_Resume(a1);
}

_QWORD *PCPtr<LiSimpleCamera>::operator=<LiCamera>(_QWORD *a1, const void **a2)
{
  void *v4;
  const PCSharedCount *v5;
  PCSharedCount *v6;
  PCSharedCount v8;
  PCSharedCount v9;

  if (!*a2)
  {
    *a1 = 0;
    goto LABEL_5;
  }
  *a1 = v4;
  if (!v4)
  {
LABEL_5:
    v6 = &v9;
    PCSharedCount::PCSharedCount(&v9);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v9);
    goto LABEL_6;
  }
  v5 = (const PCSharedCount *)(a2 + 1);
  v6 = &v8;
  PCSharedCount::PCSharedCount(&v8, v5);
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v8);
LABEL_6:
  PCSharedCount::~PCSharedCount(v6);
  return a1;
}

void sub_1B2E6262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a9);
  _Unwind_Resume(a1);
}

void OZViewerState::~OZViewerState(OZViewerState *this)
{
  OZViewerState::~OZViewerState(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSharedCount *v2;
  uint64_t i;

  *(_QWORD *)this = &off_1E65946D0;
  v2 = (PCSharedCount *)((char *)this + 232);
  PCString::~PCString((PCString *)this + 31);
  PCSharedCount::~PCSharedCount(v2);
  for (i = 216; i != 120; i -= 16)
    PCSharedCount::~PCSharedCount((PCSharedCount *)((char *)this + i));
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 15);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void OZOrthoCamera::~OZOrthoCamera(OZOrthoCamera *this)
{
  uint64_t v1;

  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1E6594AA0);
  *(_QWORD *)(v1 + 520) = &off_1E65EB048;
  *(_BYTE *)(v1 + 536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 528));
}

{
  uint64_t v1;

  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1E6594AA0);
  *(_QWORD *)(v1 + 520) = &off_1E65EB048;
  *(_BYTE *)(v1 + 536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZOrthoCamera::resetRotation(OZOrthoCamera *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;

  switch(*((_DWORD *)this + 124))
  {
    case 2:
      v8 = xmmword_1B355E7B0;
      goto LABEL_5;
    case 3:
      v8 = xmmword_1B355E790;
LABEL_5:
      v9 = xmmword_1B355E7A0;
      goto LABEL_11;
    case 4:
      *((_QWORD *)this + 60) = 0;
      *((_QWORD *)this + 61) = 0;
      v10 = xmmword_1B355E780;
      goto LABEL_8;
    case 5:
      *((_QWORD *)this + 60) = 0;
      *((_QWORD *)this + 61) = 0;
      v10 = xmmword_1B355DB50;
LABEL_8:
      *((_OWORD *)this + 29) = v10;
      break;
    case 6:
      *((_QWORD *)this + 60) = 0;
      *((_QWORD *)this + 61) = 0;
      *((_QWORD *)this + 58) = 0x3FF0000000000000;
      *((_QWORD *)this + 59) = 0;
      break;
    case 7:
      v8 = xmmword_1B304EED0;
      v9 = xmmword_1B355E770;
LABEL_11:
      *((_OWORD *)this + 29) = v9;
      *((_OWORD *)this + 30) = v8;
      break;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZOrthoCamera.h");
      pcAbortImpl();
  }
  return (*(uint64_t (**)(OZOrthoCamera *, char *))(*(_QWORD *)this + 480))(this, (char *)this + 464);
}

uint64_t OZOrthoCamera::reset(OZOrthoCamera *this)
{
  _QWORD v3[3];

  (*(void (**)(OZOrthoCamera *, uint64_t))(*(_QWORD *)this + 640))(this, 1);
  (*(void (**)(OZOrthoCamera *, double))(*(_QWORD *)this + 512))(this, 0.0);
  (*(void (**)(OZOrthoCamera *))(*(_QWORD *)this + 768))(this);
  memset(v3, 0, sizeof(v3));
  (*(void (**)(OZOrthoCamera *, _QWORD *))(*(_QWORD *)this + 448))(this, v3);
  return (*(uint64_t (**)(OZOrthoCamera *, char *))(*(_QWORD *)this + 288))(this, (char *)this + 504);
}

BOOL OZOrthoCamera::isModified(OZOrthoCamera *this)
{
  uint64_t v3;
  _QWORD v4[3];
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = 1.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  memset(v4, 0, sizeof(v4));
  (*(void (**)(OZOrthoCamera *, double *))(*(_QWORD *)this + 472))(this, &v5);
  (*(void (**)(OZOrthoCamera *, _QWORD *))(*(_QWORD *)this + 440))(this, v4);
  (*(void (**)(uint64_t *__return_ptr, OZOrthoCamera *))(*(_QWORD *)this + 272))(&v3, this);
  return *((double *)this + 58) != v5
      || *((double *)this + 59) != v6
      || *((double *)this + 60) != v7
      || *((double *)this + 61) != v8;
}

void `virtual thunk to'OZOrthoCamera::~OZOrthoCamera(OZOrthoCamera *this)
{
  uint64_t v1;

  LiSimpleCamera::~LiSimpleCamera((OZOrthoCamera *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (const PCString *)&off_1E6594AA0);
  *(_QWORD *)(v1 + 520) = &off_1E65EB048;
  *(_BYTE *)(v1 + 536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 528));
}

{
  OZOrthoCamera::~OZOrthoCamera((OZOrthoCamera *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t **std::__tree<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::__map_value_compare<OZViewCameraType,std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::less<OZViewCameraType>,true>,std::allocator<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>>>::__emplace_unique_key_args<OZViewCameraType,std::piecewise_construct_t const&,std::tuple<OZViewCameraType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x50uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0x3FF0000000000000;
    v11[12] = 2;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_BYTE *)v11 + 72) = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

PCSharedCount *PCPtr<OZOrthoCamera>::PCPtr<LiSimpleCamera>(PCSharedCount *a1, const PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  PCSharedCount v6;

  var0 = a2->var0;
  if (a2->var0)
  a1->var0 = var0;
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B2E62B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void OZPreferenceManager::OZPreferenceManager(OZPreferenceManager *this)
{
  _QWORD *v1;
  int *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  char v14;
  char v15;
  char v16;
  int v17;
  char v18;
  OZChannelBase *v19;
  const PCString *v20;
  PCString *v21;
  PCString v22;
  _BYTE v23[48];

  PCSingleton::PCSingleton(this, 0);
  *v1 = &off_1E65952E8;
  v2 = (int *)(v1 + 1);
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)(v1 + 1));
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v4, "setObject:forKey:", CFSTR("200"), CFSTR("OZPreferenceManager::NumUndoLevels"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::DisplayTimecode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1"), CFSTR("OZPreferenceManager::FirstFrameNumber"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("10"), CFSTR("OZPreferenceManager::DefaultProjectDuration"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::IsDefaultProjectDurInFrames"));
  objc_msgSend(v4, "setObject:forKey:", &unk_1E66492B8, CFSTR("OZPreferenceManager::DefaultProjectFrameRate"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("720"), CFSTR("OZPreferenceManager::DefaultProjectWidth"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("480"), CFSTR("OZPreferenceManager::DefaultProjectHeight"));
  objc_msgSend(v4, "setObject:forKey:", &unk_1E66492D0, CFSTR("OZPreferenceManager::TimeDisplayMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("10"), CFSTR("OZPreferenceManager::DefaultStillDuration"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::IsDefaultStillDurInFrames"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::useProjectDurForStills"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1"), CFSTR("OZPreferenceManager::LargeStills"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::showTooltips"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::CacheFootageFlag"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0.2"), CFSTR("OZPreferenceManager::DropPaletteDelay"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::DropAtTime"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::AudioSyncMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1"), CFSTR("OZPreferenceManager::AudioScrubLoopingFlag"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1"), CFSTR("OZPreferenceManager::TimeViewUpdateMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1"), CFSTR("OZPreferenceManager::TimelineThumbnailMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::PreviewBackground"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::InfoBarShowColor"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::InfoBarShowCoordinates"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::InfoBarShowFrameRate"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::InfoBarColorMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::LimitFrameRate"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("16"), CFSTR("OZPreferenceManager::CheckerSize"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0.75"), CFSTR("OZPreferenceManager::FullViewOpacity"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("80"), CFSTR("OZPreferenceManager::GridSpacing"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0.93"), CFSTR("OZPreferenceManager::SafeZonesActionPercentage"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0.9"), CFSTR("OZPreferenceManager::SafeZonesTitlePercentage"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("16"), CFSTR("OZPreferenceManager::CheckerSize"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("3"), CFSTR("OZPreferenceManager::SnapTo"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::ViewMode"));
  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), 30);
  v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), 12);
  v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), 125440);
  objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("OZPreferenceManager::OSCOptions"));
  objc_msgSend(v4, "setObject:forKey:", v6, CFSTR("OZPreferenceManager::OverlayOptions"));
  objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("OZPreferenceManager::OverlayOptions2"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::ShowToolInfo"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::CompensateAspectRatio"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::Renderer"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::BitDepth"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("10"), CFSTR("OZPreferenceManager::PrefetchAmount"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("80"), CFSTR("OZPreferenceManager::CachePercentage"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::PreloadFootage"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::UseOffscreenContext"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::FieldRenderingMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::Use2DRenderer"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::ReflectionEnabled"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::AbortSlowRenders"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("None"), CFSTR("OZPreferenceManager::VideoOutputComponent"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::VideoOutputDuringPlayback"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::VideoOutputDynamic"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1"), CFSTR("OZPreferenceManager::VideoOutputEnabled"));
  objc_msgSend(v4, "setObject:forKey:", &stru_1E65EDDA0, CFSTR("OZPreferenceManager::3rdPartyPath"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::LibraryCreateIcons"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::LibraryFolderDisplay"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::LibraryClickToPlay"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::RemoveUnusedMedia"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::LayersPreviewColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::LayersOpacityColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::LayersBlendColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::LayersDisplayMasks"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::LayersDisplayBehaviors"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::LayersDisplayEffects"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1.8"), CFSTR("OZPreferenceManager::LayersVerticalZoom"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaPreviewColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaTypeColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaDurationColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaInUseColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaFrameSizeColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaCompressorColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaDepthColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaFrameRateColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaDataRateColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaAudioRateColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaAudioFormatColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaFileSizeColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaFileCreatedColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::MediaFileModifiedColumn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1.8"), CFSTR("OZPreferenceManager::MediaVerticalZoom"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::TimelineDisplayVideo"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::TimelineDisplayAudio"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::TimelineDisplayKeyframes"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::TimelineDisplayMasks"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::TimelineDisplayBehaviors"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::TimelineDisplayEffects"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1.555555555"), CFSTR("OZPreferenceManager::TimelineVideoVerticalZoom"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1.555555555"), CFSTR("OZPreferenceManager::TimelineAudioVerticalZoom"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::CurveEditorAutoZoom"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::CurveEditorSnapping"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::CurveEditorDisplayAudioWaveform"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::CurveEditorSnapshotChannels"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::LockKeyframesIntime"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::AllowSubframKeyframing"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::AudioEditorScrubbingCheck"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::AudioEditorRegionCheck"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::AudioEditorShowPanningCheck"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::AudioEditorShowVolumeCheck"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("1"), CFSTR("OZPreferenceManager::PlayMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::AudioMuted"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::Autosave"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("15"), CFSTR("OZPreferenceManager::AutosaveInterval"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("40"), CFSTR("OZPreferenceManager::AutosaveCopiesPerProject"));
  objc_msgSend(v4, "setObject:forKey:", OZPreferenceManager::getDefaultFreezeCacheVaultPath((OZPreferenceManager *)objc_msgSend(v4, "setObject:forKey:", CFSTR("25"), CFSTR("OZPreferenceManager::AutosaveMaxProjects"))), CFSTR("OZPreferenceManager::FreezeCacheVaultPath"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::RotoshapeIsFillEnabled"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::RotoshapeIsOutlineEnabled"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::RotoshapeMaskColor"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::RotoshapeRoundness"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("100"), CFSTR("OZPreferenceManager::RotoshapeCurvature"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("10"), CFSTR("OZPreferenceManager::RotoshapeOutlineWidth"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::RotomaskBlendMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::RotomaskFeather"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::RotomaskRoundness"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("100"), CFSTR("OZPreferenceManager::RotomaskCurvature"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::IsRecordingWriteOn"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::IsSmoothing"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("10"), CFSTR("OZPreferenceManager::StrokeWidth"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("Width"), CFSTR("OZPreferenceManager::ApplyPenPressureTo"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("Nothing"), CFSTR("OZPreferenceManager::ApplyPenSpeedTo"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::GroundPlaneVisible"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("80"), CFSTR("OZPreferenceManager::GroundPlaneSpacing"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::DefaultGroupType"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::InsetViewMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0.3"), CFSTR("OZPreferenceManager::InsetViewSize"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::TaskListAutocloses"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::SometimesSelectParentGroup"));
  if (!objc_msgSend(v3, "objectForKey:", CFSTR("OZPreferenceManager::TextSpellCheckMode")))
    objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::TextSpellCheckMode"));
  if (!objc_msgSend(v3, "objectForKey:", CFSTR("OZPreferenceManager::TextGrammarCheckMode")))
    objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::TextGrammarCheckMode"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::UseHeliumInCanvas"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::UseTexturedCanvas"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::DynamicResolution"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("MAYBE"), CFSTR("OZPreferenceManager::OverrideDynamicResolution"));
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)v23);
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", PVPerfStats::FrameStats::GetSize((PVPerfStats::FrameStats *)v23)), CFSTR("OZPreferenceManager::RenderingTechnology"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::NumberOfCores"));
  if (LiRenderingTechnology::getDefocusIntersections((LiRenderingTechnology *)v23))
    v8 = CFSTR("YES");
  else
    v8 = CFSTR("NO");
  objc_msgSend(v4, "setObject:forKey:", v8, CFSTR("OZPreferenceManager::DefocusIntersections"));
  if (LiRenderingTechnology::getRasterizeEdges((LiRenderingTechnology *)v23))
    v9 = CFSTR("YES");
  else
    v9 = CFSTR("NO");
  objc_msgSend(v4, "setObject:forKey:", v9, CFSTR("OZPreferenceManager::RasterizeEdges"));
  if (LiRenderingTechnology::getEnableMetalRendering((LiRenderingTechnology *)v23))
    v10 = CFSTR("YES");
  else
    v10 = CFSTR("NO");
  objc_msgSend(v4, "setObject:forKey:", v10, CFSTR("OZPreferenceManager::EnableMetalRendering"));
  if (LiRenderingTechnology::getEnableHgc2Shaders((LiRenderingTechnology *)v23))
    v11 = CFSTR("YES");
  else
    v11 = CFSTR("NO");
  objc_msgSend(v4, "setObject:forKey:", v11, CFSTR("EnableHgc2Shaders"));
  if (LiRenderingTechnology::getDebugShaders((LiRenderingTechnology *)v23))
    v12 = CFSTR("YES");
  else
    v12 = CFSTR("NO");
  objc_msgSend(v4, "setObject:forKey:", v12, CFSTR("OZPreferenceManager::DebugShaders"));
  if (LiRenderingTechnology::getPrintShaders((LiRenderingTechnology *)v23))
    v13 = CFSTR("YES");
  else
    v13 = CFSTR("NO");
  objc_msgSend(v4, "setObject:forKey:", v13, CFSTR("OZPreferenceManager::PrintShaders"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::EnableMetalOSCs"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::TemplatesSkipPreviews"));
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0), CFSTR("NSProHighlightFPOPreference"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("0"), CFSTR("OZPreferenceManager::TextureResolution"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("OZPreferenceManager::CompressMaterials"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::HasConvertedAutosaves"));
  objc_msgSend(v4, "setObject:forKey:", &stru_1E65EDDA0, CFSTR("OZPreferenceManager::LastNavigatedImportDirectory"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("NO"), CFSTR("OZPreferenceManager::HMDOutput"));
  objc_msgSend(v4, "setObject:forKey:", CFSTR("YES"), CFSTR("ANIMAL_STYLE"));
  objc_msgSend(v3, "registerDefaults:", v4);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "addSuiteNamed:", CFSTR("com.apple.proapps"));
  v22.var0 = 0;
  PCString::set(&v22, CFSTR("OZPreferenceManager::RasterizeEdges"));
  v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setRasterizeEdges((uint64_t)v2, v14);
  PCString::~PCString(&v22);
  v22.var0 = 0;
  PCString::set(&v22, CFSTR("OZPreferenceManager::EnableMetalRendering"));
  v15 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setEnableMetalRendering((uint64_t)v2, v15);
  PCString::~PCString(&v22);
  v22.var0 = 0;
  PCString::set(&v22, CFSTR("EnableHgc2Shaders"));
  v16 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setEnableHgc2Shaders((uint64_t)v2, v16);
  PCString::~PCString(&v22);
  v22.var0 = 0;
  PCString::set(&v22, CFSTR("OZPreferenceManager::CPURendering"));
  v17 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setFlagAtIndex(v2, 1, v17);
  PCString::~PCString(&v22);
  v22.var0 = 0;
  PCString::set(&v22, CFSTR("OZPreferenceManager::DebugShaders"));
  v18 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setDebugShaders((uint64_t)v2, v18);
  PCString::~PCString(&v22);
  v22.var0 = 0;
  PCString::set(&v22, CFSTR("OZPreferenceManager::PrintShaders"));
  v19 = (OZChannelBase *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  PCString::~PCString(&v22);
  LiRenderingTechnology::setPrintShaders((uint64_t)v2, (char)v19);
  OZChannelBase::setRangeName(v19, v20);
  v21 = (PCString *)theApp;
  PCURL::PCURL((PCURL *)&v22, CFSTR("/Library/Application Support/Final Cut Pro"));
  PCString::set(v21 + 13, &v22);
  PCString::~PCString(&v22);
}

void sub_1B2E63D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCSingleton *v10;

  PCString::~PCString(&a10);
  PCSingleton::~PCSingleton(v10);
  _Unwind_Resume(a1);
}

uint64_t OZPreferenceManager::getDefaultFreezeCacheVaultPath(OZPreferenceManager *this)
{
  return objc_msgSend(-[NSArray objectAtIndex:](NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1), "objectAtIndex:", 0), "stringByAppendingPathComponent:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
}

const __CFString *OZPreferenceManager::getContentPath(OZPreferenceManager *this)
{
  return CFSTR("/Library/Application Support/Final Cut Pro");
}

void OZPreferenceManager::~OZPreferenceManager(OZPreferenceManager *this)
{
  *(_QWORD *)this = &off_1E65952E8;
  PCSingleton::~PCSingleton(this);
}

{
  OZPreferenceManager::~OZPreferenceManager(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZPreferenceManager::Instance(OZPreferenceManager *this)
{
  if (OZPreferenceManager::Instance(void)::once != -1)
    dispatch_once(&OZPreferenceManager::Instance(void)::once, &__block_literal_global_78);
  return OZPreferenceManager::_instance;
}

void ___ZN19OZPreferenceManager8InstanceEv_block_invoke()
{
  OZPreferenceManager *v0;

  v0 = (OZPreferenceManager *)operator new();
  OZPreferenceManager::OZPreferenceManager(v0);
  OZPreferenceManager::_instance = (uint64_t)v0;
}

void sub_1B2E63EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4094CEE6C2);
  _Unwind_Resume(a1);
}

double OZPreferenceManager::getFirstFrameNumber(OZPreferenceManager *this)
{
  float v1;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::FirstFrameNumber"));
  return v1;
}

double OZPreferenceManager::getDefaultProjectDurInFrames(OZPreferenceManager *this, double a2)
{
  double v2;
  float v3;
  double v4;
  int v5;
  double v6;

  v2 = ceil(a2 + -0.01);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::DefaultProjectDuration"));
  v4 = v3;
  v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::IsDefaultProjectDurInFrames"));
  v6 = 1.0;
  if (!v5)
    v6 = v2;
  return v6 * v4;
}

uint64_t OZPreferenceManager::getDefaultProjectWidth(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::DefaultProjectWidth"));
}

uint64_t OZPreferenceManager::getDefaultProjectHeight(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::DefaultProjectHeight"));
}

uint64_t OZPreferenceManager::getUseProjectDurationForStills(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::useProjectDurForStills"));
}

CMTime *OZPreferenceManager::getDefaultStillDuration@<X0>(const CMTime *a1@<X1>, uint64_t a2@<X8>)
{
  float v5;
  double v6;
  CMTime *result;
  CMTime v8;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::DefaultStillDuration"));
  v6 = v5;
  result = (CMTime *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::IsDefaultStillDurInFrames"));
  if ((_DWORD)result)
  {
    *(_OWORD *)a2 = *(_OWORD *)&a1->value;
    *(_QWORD *)(a2 + 16) = a1->epoch;
    *(_QWORD *)a2 = (uint64_t)(v6 * (double)*(uint64_t *)a2);
  }
  else
  {
    result = PC_CMTimeMakeWithSecondsRoundToNearest(a1->timescale, &v8, v6);
    *(CMTime *)a2 = v8;
  }
  return result;
}

uint64_t OZPreferenceManager::getRemoveUnusedMedia(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::RemoveUnusedMedia"));
}

uint64_t OZPreferenceManager::getSafeZonesTitlePercentage(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::SafeZonesTitlePercentage"));
}

uint64_t OZPreferenceManager::getOSCOptions(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::OSCOptions"));
}

uint64_t OZPreferenceManager::getOverlayOptions(OZPreferenceManager *this)
{
  void *v1;
  int v2;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v2 = objc_msgSend(v1, "integerForKey:", CFSTR("OZPreferenceManager::OverlayOptions"));
  return objc_msgSend(v1, "integerForKey:", CFSTR("OZPreferenceManager::OverlayOptions2")) | v2;
}

uint64_t OZPreferenceManager::getShowToolInfo(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::ShowToolInfo"));
}

uint64_t OZPreferenceManager::getCompensateAspectRatio(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::CompensateAspectRatio"));
}

uint64_t OZPreferenceManager::setCompensateAspectRatio(OZPreferenceManager *this, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "setBool:forKey:", a2, CFSTR("OZPreferenceManager::CompensateAspectRatio"));
}

uint64_t OZPreferenceManager::getCachePercentage(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::CachePercentage"));
}

void OZPreferenceManager::getContentPath(OZPreferenceManager *this, PCString *a2)
{
  PCString::set(a2, "/Library/Application Support/Final Cut Pro");
}

uint64_t OZPreferenceManager::getLayersPreviewColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::LayersPreviewColumn"));
}

uint64_t OZPreferenceManager::getLayersOpacityColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::LayersOpacityColumn"));
}

uint64_t OZPreferenceManager::getLayersBlendColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::LayersBlendColumn"));
}

uint64_t OZPreferenceManager::getLayersDisplayMasks(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::LayersDisplayMasks"));
}

uint64_t OZPreferenceManager::getLayersDisplayBehaviors(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::LayersDisplayBehaviors"));
}

uint64_t OZPreferenceManager::getLayersDisplayEffects(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::LayersDisplayEffects"));
}

double OZPreferenceManager::getLayersVerticalZoom(OZPreferenceManager *this)
{
  float v1;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::LayersVerticalZoom"));
  return v1;
}

uint64_t OZPreferenceManager::getMediaPreviewColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaPreviewColumn"));
}

uint64_t OZPreferenceManager::getMediaTypeColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaTypeColumn"));
}

uint64_t OZPreferenceManager::getMediaDurationColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaDurationColumn"));
}

uint64_t OZPreferenceManager::getMediaInUseColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaInUseColumn"));
}

uint64_t OZPreferenceManager::getMediaFrameSizeColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaFrameSizeColumn"));
}

uint64_t OZPreferenceManager::getMediaCompressorColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaCompressorColumn"));
}

uint64_t OZPreferenceManager::getMediaDepthColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaDepthColumn"));
}

uint64_t OZPreferenceManager::getMediaFrameRateColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaFrameRateColumn"));
}

uint64_t OZPreferenceManager::getMediaDataRateColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaDataRateColumn"));
}

uint64_t OZPreferenceManager::getMediaAudioRateColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaAudioRateColumn"));
}

uint64_t OZPreferenceManager::getMediaAudioFormatColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaAudioFormatColumn"));
}

uint64_t OZPreferenceManager::getMediaFileSizeColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaFileSizeColumn"));
}

uint64_t OZPreferenceManager::getMediaFileCreatedColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaFileCreatedColumn"));
}

uint64_t OZPreferenceManager::getMediaFileModifiedColumn(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::MediaFileModifiedColumn"));
}

double OZPreferenceManager::getMediaVerticalZoom(OZPreferenceManager *this)
{
  float v1;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::MediaVerticalZoom"));
  return v1;
}

uint64_t OZPreferenceManager::getTimelineDisplayVideo(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::TimelineDisplayVideo"));
}

uint64_t OZPreferenceManager::getTimelineDisplayAudio(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::TimelineDisplayAudio"));
}

uint64_t OZPreferenceManager::getTimelineDisplayKeyframes(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::TimelineDisplayKeyframes"));
}

uint64_t OZPreferenceManager::getTimelineDisplayMasks(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::TimelineDisplayMasks"));
}

uint64_t OZPreferenceManager::getTimelineDisplayBehaviors(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::TimelineDisplayBehaviors"));
}

uint64_t OZPreferenceManager::getTimelineDisplayEffects(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::TimelineDisplayEffects"));
}

double OZPreferenceManager::getTimelineVideoVerticalZoom(OZPreferenceManager *this)
{
  float v1;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::TimelineVideoVerticalZoom"));
  return v1;
}

double OZPreferenceManager::getTimelineAudioVerticalZoom(OZPreferenceManager *this)
{
  float v1;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "floatForKey:", CFSTR("OZPreferenceManager::TimelineAudioVerticalZoom"));
  return v1;
}

uint64_t OZPreferenceManager::getRecordWhilePlayback(OZPreferenceManager *this)
{
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("OZPreferenceManager::RecordWhilePlayback")))
  {
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::RecordWhilePlayback"));
  }
  else
  {
    return 1;
  }
}

uint64_t OZPreferenceManager::getRecordingOptions(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::RecordingOptions"));
}

uint64_t OZPreferenceManager::getStrokeApplyPenPressureTo(OZPreferenceManager *this)
{
  void *v1;
  void *ApplyPenPropertyToValues;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("OZPreferenceManager::ApplyPenPressureTo"));
  ApplyPenPropertyToValues = (void *)getApplyPenPropertyToValues();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  result = objc_msgSend(ApplyPenPropertyToValues, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v4 = result;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    while (2)
    {
      v7 = 0;
      v8 = v5 + v4;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(ApplyPenPropertyToValues);
        if ((objc_msgSend(v1, "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7)) & 1) != 0)
          return (v5 + v7);
        ++v7;
      }
      while (v4 != v7);
      result = objc_msgSend(ApplyPenPropertyToValues, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v4 = result;
      v5 = v8;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t getApplyPenPropertyToValues(void)
{
  unsigned __int8 v0;

  {
    getApplyPenPropertyToValues(void)::result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("Nothing"), CFSTR("Width"), CFSTR("Opacity"), CFSTR("Spacing"), CFSTR("Angle"), CFSTR("Jitter"), 0);
  }
  return getApplyPenPropertyToValues(void)::result;
}

void sub_1B2E648E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OZPreferenceManager::getStrokeApplyPenSpeedTo(OZPreferenceManager *this)
{
  void *v1;
  void *ApplyPenPropertyToValues;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("OZPreferenceManager::ApplyPenSpeedTo"));
  ApplyPenPropertyToValues = (void *)getApplyPenPropertyToValues();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  result = objc_msgSend(ApplyPenPropertyToValues, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v4 = result;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    while (2)
    {
      v7 = 0;
      v8 = v5 + v4;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(ApplyPenPropertyToValues);
        if ((objc_msgSend(v1, "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7)) & 1) != 0)
          return (v5 + v7);
        ++v7;
      }
      while (v4 != v7);
      result = objc_msgSend(ApplyPenPropertyToValues, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v4 = result;
      v5 = v8;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t OZPreferenceManager::isGroundPlaneVisible(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::GroundPlaneVisible"));
}

uint64_t OZPreferenceManager::getGroundPlaneSpacing(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::GroundPlaneSpacing"));
}

uint64_t OZPreferenceManager::getDefaultGroupType(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::DefaultGroupType"));
}

__n128 OZPreferenceManager::getRenderingTechnology@<Q0>(OZPreferenceManager *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)((char *)this + 40);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

BOOL OZPreferenceManager::getDynamicResolution(OZPreferenceManager *this)
{
  OZPreferenceManager *v1;
  BOOL v3;

  v1 = (OZPreferenceManager *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("OZPreferenceManager::DynamicResolution"));
  v3 = (char)v1;
  OZPreferenceManager::adjustDynamicResolution(v1, &v3);
  return v3;
}

uint64_t OZPreferenceManager::adjustDynamicResolution(OZPreferenceManager *this, BOOL *a2)
{
  void *v3;
  uint64_t result;

  v3 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "stringForKey:", CFSTR("OZPreferenceManager::OverrideDynamicResolution"));
  if (!objc_msgSend(v3, "caseInsensitiveCompare:", CFSTR("YES")))
    *a2 = 1;
  result = objc_msgSend(v3, "caseInsensitiveCompare:", CFSTR("NO"));
  if (!result)
    *a2 = 0;
  return result;
}

uint64_t OZPreferenceManager::getTextureResolution(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("OZPreferenceManager::TextureResolution"));
}

void OZExportSettings::OZExportSettings(OZExportSettings *this)
{
  __int128 v1;

  *(_QWORD *)this = &off_1E6595340;
  *(_OWORD *)((char *)this + 8) = xmmword_1B355E860;
  *((_QWORD *)this + 3) = 0x300000003;
  *((_BYTE *)this + 32) = 1;
  *(_QWORD *)((char *)this + 36) = 0x60000000ALL;
  *((_WORD *)this + 22) = 257;
  *((_BYTE *)this + 46) = 1;
  *(_QWORD *)&v1 = 0x200000002;
  *((_QWORD *)&v1 + 1) = 0x200000002;
  *((_OWORD *)this + 3) = xmmword_1B355E870;
  *((_OWORD *)this + 4) = v1;
}

void OZExportSettings::~OZExportSettings(OZExportSettings *this)
{
  JUMPOUT(0x1B5E29170);
}

void OZExportSettings::OZExportSettings(OZExportSettings *this, const OZExportSettings *a2)
{
  *(_QWORD *)this = &off_1E6595340;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)((char *)this + 36) = *(_QWORD *)((char *)a2 + 36);
  *((_WORD *)this + 22) = *((_WORD *)a2 + 22);
  *((_BYTE *)this + 46) = *((_BYTE *)a2 + 46);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
}

BOOL OZExportSettings::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
      && *(unsigned __int8 *)(a1 + 45) == *(unsigned __int8 *)(a2 + 45)
      && *(unsigned __int8 *)(a1 + 46) == *(unsigned __int8 *)(a2 + 46)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
      && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76);
}

BOOL OZExportSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return !OZExportSettings::operator==(a1, a2);
}

uint64_t OZExportSettings::getRenderQuality(OZExportSettings *this)
{
  uint64_t result;
  int v3;

  if (*((_DWORD *)this + 9) == 10)
    return 10;
  result = *((unsigned int *)this + 10);
  v3 = *((unsigned __int8 *)this + 44);
  if (v3 != ((_DWORD)result == 6)
    || *((_BYTE *)this + 45) != ((_DWORD)result != 0)
    || *((unsigned __int8 *)this + 46) != v3)
  {
    return 8;
  }
  return result;
}

uint64_t OZExportSettings::setRenderQuality(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  if (a2 != 8)
  {
    *(_DWORD *)(result + 40) = a2;
    *(_BYTE *)(result + 44) = a2 > 5;
    *(_BYTE *)(result + 45) = a2 > 1;
    *(_BYTE *)(result + 46) = a2 > 5;
  }
  return result;
}

uint64_t OZExportSettings::writeHeader(OZExportSettings *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZExportSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 33);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void OZExportSettings::writeBody(OZExportSettings *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  PCString v23;
  PCSharedCount v24;
  _BYTE v25[88];
  _BYTE v26[88];

  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v26);
  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v25);
  PCSharedCount::PCSharedCount(&v24);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v23);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZExportSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 100);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v4 = *((unsigned int *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned int *)this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((unsigned int *)this + 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v7 = *((unsigned int *)this + 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 22);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v8 = *((unsigned int *)this + 7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 23);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v9 = *((unsigned __int8 *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v10 = *((unsigned int *)this + 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *((unsigned int *)this + 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v12 = *((unsigned __int8 *)this + 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v13 = *((unsigned __int8 *)this + 45);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v14 = *((unsigned __int8 *)this + 46);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v15 = *((unsigned int *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v16 = *((unsigned int *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v17 = *((unsigned int *)this + 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v18 = *((unsigned int *)this + 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 40);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v19 = *((unsigned int *)this + 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 41);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v20 = *((unsigned int *)this + 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v20);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v21 = *((unsigned int *)this + 18);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v21);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v22 = *((unsigned int *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v22);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  PCString::~PCString(&v23);
  PCString::~PCString((PCString *)&v24);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v25);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v26);
}

void sub_1B2E65388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  PCString::~PCString(&a10);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a11);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a22);
  _Unwind_Resume(a1);
}

uint64_t OZExportSettings::parseBegin(OZExportSettings *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZExportSettingsScope);
  return 1;
}

uint64_t OZExportSettings::parseEnd(OZExportSettings *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZExportSettings::parseElement(OZExportSettings *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;

  v4 = *((_DWORD *)a3 + 2);
  switch(v4)
  {
    case 5:
      v5 = (char *)this + 12;
      goto LABEL_26;
    case 6:
    case 7:
    case 8:
    case 9:
    case 18:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return 1;
    case 10:
      v5 = (char *)this + 16;
      goto LABEL_26;
    case 11:
      v5 = (char *)this + 20;
      goto LABEL_26;
    case 12:
      v6 = (char *)this + 32;
      goto LABEL_13;
    case 13:
      v5 = (char *)this + 36;
      goto LABEL_26;
    case 14:
      v5 = (char *)this + 40;
      goto LABEL_26;
    case 15:
      v6 = (char *)this + 44;
      goto LABEL_13;
    case 16:
      v6 = (char *)this + 45;
      goto LABEL_13;
    case 17:
      v6 = (char *)this + 46;
LABEL_13:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, v6);
      return 1;
    case 19:
      v5 = (char *)this + 48;
      goto LABEL_26;
    case 20:
      v5 = (char *)this + 52;
      goto LABEL_26;
    case 21:
      v5 = (char *)this + 56;
      goto LABEL_26;
    case 22:
      v7 = (char *)this + 24;
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 24);
      v8 = *((_DWORD *)this + 6);
      goto LABEL_19;
    case 23:
      v7 = (char *)this + 28;
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 28);
      v8 = *((_DWORD *)this + 7);
LABEL_19:
      if (v8 >= 0xF)
        *(_DWORD *)v7 = 3;
      return 1;
    case 40:
      v5 = (char *)this + 60;
      goto LABEL_26;
    case 41:
      v5 = (char *)this + 64;
      goto LABEL_26;
    case 42:
      v5 = (char *)this + 68;
      goto LABEL_26;
    case 43:
      v5 = (char *)this + 72;
      goto LABEL_26;
    case 44:
      v5 = (char *)this + 76;
      goto LABEL_26;
    default:
      if (v4 != 100)
        return 1;
      v5 = (char *)this + 8;
LABEL_26:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, v5);
      return 1;
  }
}

unint64_t OZObjectManipulator::isEnabled(OZObjectManipulator *this, int a2, int a3)
{
  OZChannelBase *v5;

  v5 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return OZChannelBase::isEnabled(v5, a2, a3);
}

uint64_t OZObjectManipulator::enable(OZObjectManipulator *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 104))(v3, 1, a2);
}

uint64_t OZObjectManipulator::disable(OZObjectManipulator *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 104))(v3, 0, a2);
}

uint64_t OZObjectManipulator::isHidden(OZObjectManipulator *this)
{
  return (*(unsigned __int8 *)((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this) + 56) >> 1) & 1;
}

uint64_t OZObjectManipulator::isLocked(OZObjectManipulator *this, char a2)
{
  OZChannelBase *v3;

  v3 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return OZChannelBase::isLocked(v3, a2);
}

unint64_t OZObjectManipulator::isAnyAncestorLocked(OZObjectManipulator *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return OZChannelBase::isAnyAncestorLocked(v1);
}

uint64_t OZObjectManipulator::lock(OZObjectManipulator *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 96))(v1, 1, 1);
}

uint64_t OZObjectManipulator::unlock(OZObjectManipulator *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1 + 96))(v1, 0, 1);
}

uint64_t OZObjectManipulator::canDelete(OZObjectManipulator *this)
{
  return (*(unsigned int (**)(OZObjectManipulator *, uint64_t))(*(_QWORD *)this + 56))(this, 1) ^ 1;
}

unint64_t OZObjectManipulator::isActiveAtTime(OZObjectManipulator *this, CMTime *a2, int a3, int a4, int a5)
{
  OZChannelBase *v10;
  OZChannelBase *v11;
  unint64_t result;
  uint64_t v13;
  OZSceneSettings *v14;
  __n128 v15;
  CMTimeEpoch v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  __n128 v20;
  CMTimeEpoch v21;
  CMTime time2;
  CMTime time1;

  v10 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  v11 = v10;
  if (!a5 || (result = OZChannelBase::isEnabled(v10, a3, a4), (_DWORD)result))
  {
    v13 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this);
    if (!v13)
      return 1;
    v14 = (OZSceneSettings *)(v13 + 336);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), &v20);
    v17 = *a2;
    *(__n128 *)&time1.value = v20;
    time1.epoch = v21;
    PC_CMTimeFloorToSampleDuration(&v17, &time1, (uint64_t)&time2);
    *a2 = time2;
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v11->var0 + 89))(&v17, v11);
    OZSceneSettings::getFrameDuration(v14, &v15);
    time1 = v17;
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2) > 0)
      return 0;
    time1 = v17;
    time2 = v18;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
    *(__n128 *)&time1.value = v20;
    time1.epoch = v21;
    *(__n128 *)&time2.value = v15;
    time2.epoch = v16;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    time1 = *a2;
    time2 = v19;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      if ((v18.flags & 1) == 0)
        return 0;
      return (v18.flags >> 4) & 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

unint64_t OZObjectManipulator::isActiveInTimeRange(OZObjectManipulator *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  OZChannelBase *v10;
  OZChannelBase *v11;
  unint64_t result;
  uint64_t v13;
  double RangeEnclosingWholeFrames;
  CMTime v15[2];
  CMTime v16[2];
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTime time1;

  v10 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  v11 = v10;
  if (!a5 || (result = OZChannelBase::isEnabled(v10, a3, a4), (_DWORD)result))
  {
    if ((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this))
    {
      memset(&v17, 0, sizeof(v17));
      v13 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), (__n128 *)&v17);
      RangeEnclosingWholeFrames = PCTimeRange::getRangeEnclosingWholeFrames(a2, &v17, (uint64_t)v16);
      (*((void (**)(CMTime *__return_ptr, OZChannelBase *, double))v11->var0 + 89))(v15, v11, RangeEnclosingWholeFrames);
      v21 = v15[0];
      time1 = v15[0];
      time2 = v15[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
      v19 = v16[0];
      time1 = v16[0];
      time2 = v16[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
      time1 = v18;
      time2 = v21;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        return 0;
      }
      else
      {
        time1 = v19;
        time2 = v20;
        return CMTimeCompare(&time1, &time2) < 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t OZObjectManipulator::getName(OZObjectManipulator *this)
{
  return (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this) + 32;
}

uint64_t OZObjectManipulator::getInternalName(OZObjectManipulator *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  if (*(_QWORD *)(v1 + 40))
    return *(_QWORD *)(v1 + 40);
  else
    return v1 + 32;
}

void OZObjectManipulator::setName(OZObjectManipulator *this, const PCString *a2, int a3)
{
  OZChannelBase *v5;
  PCString v6;

  v5 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  if (a3)
  {
    PCURL::PCURL((PCURL *)&v6, CFSTR("Undo Name Change"));
    (*((void (**)(OZChannelBase *, PCString *))v5->var0 + 43))(v5, &v6);
    PCString::~PCString(&v6);
  }
  OZChannelBase::setName(v5, a2, 0);
}

void sub_1B2E65B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZObjectManipulator::appendCopyToName(OZObjectManipulator *this)
{
  OZChannelBase *v2;
  int v3;
  uint64_t v4;
  const void *v5;
  PCString v6;
  PCString v7;
  PCString v8;

  v2 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  {
    PCURL::PCURL((PCURL *)&v8, CFSTR("Object Name Copy"));
    PCString::PCString(&v7, "%@");
    v3 = PCString::find(&v8, &v7);
    PCString::~PCString(&v7);
    PCString::erase(&v8, v3, 2u);
    PCString::PCString(&v7, &v2->var4);
    if ((PCString::find(&v7, &v8) & 0x80000000) != 0)
    {
      v4 = localizedString((uint64_t)CFSTR("Object Name Copy"), 0);
      v5 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithValidatedFormat:validFormatSpecifiers:error:", v4, CFSTR("%@"), 0, PCString::ns_str(&v7));
      PCURL::PCURL((PCURL *)&v6, v5);
      OZChannelBase::setName(v2, &v6, 0);
      PCString::~PCString(&v6);
    }
    PCString::~PCString(&v7);
    PCString::~PCString(&v8);
  }
}

void sub_1B2E65C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t OZObjectManipulator::getSourceOperationMask(OZObjectManipulator *this, OZChannelBase *a2, int a3)
{
  unsigned int v3;

  if (a3)
    v3 = 9;
  else
    v3 = 1;
  if (a2)
    return v3;
  else
    return 0;
}

void OZObjectManipulator::getPasteEntry(OZObjectManipulator *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZObjectManipulator.mm");
  pcAbortImpl();
}

uint64_t sub_1B2E65D30()
{
  return 0;
}

void OZObjectManipulator::allowDrag(OZObjectManipulator *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6)
{
  void *v9;
  void *v10;

  *a5 = 0;
  if (lpsrc)
  {
    if (v9)
    {
      if ((*(_BYTE *)a6 & 1) != 0)
      {
        v10 = v9;
        if ((*((unsigned int (**)(OZChannelBase *, void *))a3->var0 + 33))(a3, v9))
        {
          if ((*((unsigned int (**)(OZChannelBase *, void *))a3->var0 + 34))(a3, v10))
          {
            *a5 = 1;
            *a6 = 1;
          }
        }
      }
    }
  }
}

uint64_t OZObjectManipulator::prepareForDragOperation()
{
  return 1;
}

uint64_t OZObjectManipulator::performDragOperation(OZObjectManipulator *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  uint64_t result;
  uint64_t v12;
  OZScene *v13;
  __n128 CurrentTime;
  uint64_t v15;
  __n128 v16;

  if (!lpsrc)
    return 0;
  if (result)
  {
    v12 = result;
    result = (*((uint64_t (**)(OZChannelBase *, uint64_t))a3->var0 + 33))(a3, result);
    if ((_DWORD)result)
    {
      PCSharedCount::PCSharedCount((PCSharedCount *)&v16);
      (*((void (**)(OZChannelBase *, __n128 *))a3->var0 + 43))(a3, &v16);
      PCString::~PCString((PCString *)&v16);
      if ((a7 & 2) != 0)
      {
        v13 = (OZScene *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this);
        CurrentTime = OZScene::getCurrentTime(v13, &v16);
        (*((void (**)(OZChannelBase *, __n128 *, uint64_t, __n128))a3->var0 + 38))(a3, &v16, v12, CurrentTime);
      }
      else
      {
        (*((void (**)(OZChannelBase *, uint64_t))a3->var0 + 58))(a3, 1);
        (*((void (**)(OZChannelBase *, uint64_t))a3->var0 + 39))(a3, v12);
      }
      (*(void (**)(OZObjectManipulator *))(*(_QWORD *)this + 424))(this);
      v15 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this);
      OZDocument::postNotification(*(OZDocument **)(v15 + 1584), 8);
      return 1;
    }
  }
  return result;
}

void sub_1B2E65F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZObjectManipulator::addToUndo(OZObjectManipulator *this, const PCString *a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 232))(this);
  if (result)
  {
    v5 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 232))(this);
    return (*(uint64_t (**)(uint64_t, const PCString *, _QWORD))(*(_QWORD *)(v5 + 16) + 176))(v5 + 16, a2, 0);
  }
  return result;
}

OZChannelBase *OZObjectManipulator::getChannelFromRefAndVersion(OZObjectManipulator *this, OZChannelRef *a2, double a3)
{
  uint64_t v5;
  OZChannelBase *v6;

  v5 = (*(uint64_t (**)(OZObjectManipulator *, double))(*(_QWORD *)this + 216))(this, a3);
  if (!a2 || !v5)
    return 0;
  v6 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 216))(this);
  return OZChannelRef::getChannel(a2, v6);
}

BOOL OZObjectManipulator::shouldRenumberChannel(OZObjectManipulator *this, OZChannelBase *a2)
{
  return a2->var3 >> 4 > 0x270;
}

int8x8_t *OZObjectManipulator::dirty(OZObjectManipulator *this)
{
  int8x8_t *result;
  OZScene *v3;
  uint64_t v4;
  unsigned int v5;
  int8x8_t *v6;
  int8x8_t *v7;
  int8x8_t *v8;
  int8x8_t *v9;
  BOOL v10;

  (*(void (**)(OZObjectManipulator *))(*(_QWORD *)this + 432))(this);
  result = (int8x8_t *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this);
  if (result)
  {
    v3 = (OZScene *)result;
    v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 256))(this);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
    result = (int8x8_t *)OZScene::getDependantNodes(v3, v5);
    if (result)
    {
      v6 = result + 1;
      v7 = (int8x8_t *)*result;
      if ((int8x8_t *)*result != &result[1])
      {
        do
        {
          result = (int8x8_t *)OZScene::getObject(v3, v7[3].u32[1]);
          if (result
            && *(_QWORD *)&vorr_s8(result[2], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[2].i8, *(int8x16_t *)result[2].i8, 8uLL)))
          {
            result = (int8x8_t *)(*(uint64_t (**)(int8x8_t *))(*(_QWORD *)result + 424))(result);
          }
          v8 = (int8x8_t *)v7[1];
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = (int8x8_t *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (int8x8_t *)v7[2];
              v10 = *v9 == (_QWORD)v7;
              v7 = v9;
            }
            while (!v10);
          }
          v7 = v9;
        }
        while (v9 != v6);
      }
    }
  }
  return result;
}

double OZObjectManipulator::invalidateStaticHash(OZObjectManipulator *this)
{
  double result;
  OZScene *v3;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if ((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this))
  {
    v3 = (OZScene *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)this + 264))(this);
    return OZScene::invalidateStaticHash(v3);
  }
  return result;
}

_OWORD *OZObjectManipulator::getStaticHash(_OWORD *a1, const void *a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int8x8_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v6 = (uint64_t *)operator new(0x18uLL);
  v6[1] = (uint64_t)a3;
  v6[2] = (uint64_t)a1;
  v7 = *a3;
  *v6 = (uint64_t)*a3;
  v7[1] = (uint64_t)v6;
  *a3 = v6;
  a3[2] = (uint64_t *)((char *)a3[2] + 1);
  if ((*(unsigned int (**)(_OWORD *))(*(_QWORD *)a1 + 456))(a1))
  {
    (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
    (*(void (**)(_OWORD *, const void *, uint64_t **))(*(_QWORD *)a1 + 440))(a1, a2, a3);
    if (!v8)
      __cxa_bad_cast();
    a1[1] = *(_OWORD *)PCHashWriteStream::getHash(v8)->i8;
  }
  v9 = *a3;
  v10 = **a3;
  *(_QWORD *)(v10 + 8) = (*a3)[1];
  *(_QWORD *)v9[1] = v10;
  a3[2] = (uint64_t *)((char *)a3[2] - 1);
  operator delete(v9);
  return a1 + 1;
}

_QWORD *OZObjectManipulator::getHashForState@<X0>(_OWORD *a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t *v10;
  uint64_t *v11;
  int *StaticHash;
  int8x8_t *v13;
  int8x8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  int v19[6];
  uint64_t *v20[3];

  v10 = (uint64_t *)operator new(0x18uLL);
  v10[1] = (uint64_t)a4;
  v10[2] = (uint64_t)a1;
  v11 = *a4;
  *v10 = (uint64_t)*a4;
  v11[1] = (uint64_t)v10;
  *a4 = v10;
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
  std::list<OZObjectManipulator *>::list(v20, 10);
  *(_OWORD *)v19 = *(_OWORD *)OZRenderParams::getHash(a3);
  StaticHash = (int *)OZObjectManipulator::getStaticHash(a1, a2, v20);
  PCHash128::operator+=(v19, StaticHash);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v18);
  if (!v13)
    __cxa_bad_cast();
  v14 = v13;
  (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(_OWORD *, const void *, OZRenderParams *, uint64_t **))(*(_QWORD *)a1 + 448))(a1, a2, a3, a4);
  PCHashWriteStream::getHash(v14);
  v15 = *a4;
  v16 = **a4;
  *(_QWORD *)(v16 + 8) = (*a4)[1];
  *(_QWORD *)v15[1] = v16;
  a4[2] = (uint64_t *)((char *)a4[2] - 1);
  operator delete(v15);
  *a5 = *(_OWORD *)PCHashWriteStream::getHash(v14)->i8;
  return std::__list_imp<unsigned int>::clear(v20);
}

void sub_1B2E6637C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL OZObjectManipulator::isInObjectList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  if (*(_QWORD *)(a2 + 8) != a2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    while (*(_QWORD *)(v2 + 16) != a1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == a2)
      {
        v2 = a2;
        return v2 != a2;
      }
    }
  }
  return v2 != a2;
}

uint64_t OZObjectManipulator::setNameOfMaterial(OZObjectManipulator *this, const PCString *a2, OZMaterialBase *a3)
{
  return (*(uint64_t (**)(char *, const PCString *, _QWORD))(*((_QWORD *)a3 + 2) + 120))((char *)a3 + 16, a2, 0);
}

void OZChannelFontBase::checkAndConvertToSystemFont(OZChannelFontBase *this@<X0>, PCString *a2@<X1>, CGFloat a3@<D0>, PCString *a4@<X8>)
{
  __CFString *v8;
  CTFontRef v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  const __CFString *v13;

  if (!-[__CFString hasPrefix:]((id)PCString::ns_str(a2), "hasPrefix:", CFSTR(".SF")))
  {
    v10 = objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithName:size:", PCString::ns_str(a2), 72.0);
    if (!v10 && !-[__CFString hasPrefix:]((id)PCString::ns_str(a2), "hasPrefix:", CFSTR(".SF")))
    {
      *((_DWORD *)this + 166) = 3;
      goto LABEL_10;
    }
    *((_DWORD *)this + 166) = 2;
    v11 = (void *)v10;
LABEL_8:
    v13 = (const __CFString *)objc_msgSend(v11, "fontName");
    a4->var0 = 0;
    PCString::set(a4, v13);
    return;
  }
  v8 = PCString::cf_str(a2);
  v9 = OZCreateFontWithName(v8, a3, 0);
  if (!v9)
  {
    v12 = PCString::cf_str(a2);
    v11 = (void *)objc_msgSend(MEMORY[0x1E0CEA5E8], "systemFontOfSize:weight:", a3, OZGetSystemFontWeightFromName(v12));
    goto LABEL_8;
  }
  *((_DWORD *)this + 166) = 2;
  CFRelease(v9);
LABEL_10:
  PCString::PCString(a4, a2);
}

void OZProjectNode::OZProjectNode(OZProjectNode *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v6;
  OZChannelBase *v7;
  uint64_t NextUniqueID;
  OZChannelBase *v9;
  OZChannelBase *v10;
  PCString v11;
  PCString v12[2];

  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *v5 = &off_1E6595620;
  v5[2] = &unk_1E6595AF0;
  v5[6] = &unk_1E6595D48;
  PCString::PCString(v12, "DAR Subobject");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1096), v12, (OZChannelFolder *)((char *)this + 448), 0x64u, 0xAu, 0);
  PCString::~PCString(v12);
  PCURL::PCURL((PCURL *)v12, CFSTR("Channel Project Build In Enable"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1224), 1, v12, (OZChannelFolder *)((char *)this + 448), 0x65u, 0, 0, 0);
  PCString::~PCString(v12);
  PCURL::PCURL((PCURL *)v12, CFSTR("Channel Project Build Out Enable"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1376), 1, v12, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0, 0);
  PCString::~PCString(v12);
  PCURL::PCURL((PCURL *)v12, CFSTR("Channel Project HDR White Level"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1528), 0.75, v12, (OZChannelFolder *)((char *)this + 320), 0x67u, 0, 0, 0);
  PCString::~PCString(v12);
  *((_BYTE *)this + 1680) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 56), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1528), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 1528), 0.5);
  OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)this + 20));
  v6 = theApp;
  *(_OWORD *)&v12[0].var0 = xmmword_1B355DD90;
  PCURL::PCURL((PCURL *)&v11, CFSTR("Rig Widget Short Desc"));
  NextUniqueID = OZChannelBase::getNextUniqueID(v7);
  *((_QWORD *)this + 136) = OZApplication::createSceneNode(v6, (unsigned int *)v12, (uint64_t)&v11, NextUniqueID);
  PCString::~PCString(&v11);
  v9 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 136) + 640))(*((_QWORD *)this + 136));
  OZChannelBase::setNameUnset(v9, 0);
  v10 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 136) + 640))(*((_QWORD *)this + 136));
  OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 1096), v10);
  (*(void (**)(_QWORD, OZProjectNode *))(**((_QWORD **)this + 136) + 256))(*((_QWORD *)this + 136), this);
}

void sub_1B2E66778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZSceneNode *v11;
  OZChannelFolder *v12;
  OZChannelBool *v13;
  OZChannelBool *v14;
  OZChannelPercent *v15;

  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  OZSceneNode::~OZSceneNode(v11);
  _Unwind_Resume(a1);
}

void OZProjectNode::OZProjectNode(OZProjectNode *this, OZProjectNode *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  OZChannelFolder *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OZChannelBase *v11;
  uint64_t NextUniqueID;
  OZChannelBase *v13;
  OZChannelBase *v14;
  PCString v15;
  __int128 v16;

  OZSceneNode::OZSceneNode(this, a2, a3);
  *(_QWORD *)v5 = &off_1E6595620;
  *(_QWORD *)(v5 + 16) = &unk_1E6595AF0;
  *(_QWORD *)(v5 + 48) = &unk_1E6595D48;
  v6 = (OZChannelFolder *)(v5 + 1096);
  v7 = (OZChannelFolder *)(v5 + 448);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1096), (const OZChannelFolder *)((char *)a2 + 1096), (OZChannelFolder *)(v5 + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1224), (const OZChannelBase *)((char *)a2 + 1224), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1376), (const OZChannelBase *)((char *)a2 + 1376), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1528), (const OZChannelBase *)((char *)a2 + 1528), (OZChannelFolder *)((char *)this + 320));
  *((_BYTE *)this + 1680) = *((_BYTE *)a2 + 1680);
  OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)this + 20));
  v8 = *((_QWORD *)a2 + 136);
  if (v8)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 24))(*(_QWORD *)(v8 + 8));
    *((_QWORD *)this + 136) = v9;
  }
  else
  {
    v10 = theApp;
    v16 = xmmword_1B355DD90;
    PCURL::PCURL((PCURL *)&v15, CFSTR("Rig Widget Short Desc"));
    NextUniqueID = OZChannelBase::getNextUniqueID(v11);
    *((_QWORD *)this + 136) = OZApplication::createSceneNode(v10, (unsigned int *)&v16, (uint64_t)&v15, NextUniqueID);
    PCString::~PCString(&v15);
    v9 = *((_QWORD *)this + 136);
  }
  v13 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 640))(v9);
  OZChannelBase::setNameUnset(v13, 0);
  v14 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 136) + 640))(*((_QWORD *)this + 136));
  OZChannelFolder::push_front(v6, v14);
  (*(void (**)(_QWORD, OZProjectNode *))(**((_QWORD **)this + 136) + 256))(*((_QWORD *)this + 136), this);
}

void sub_1B2E669C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSceneNode *v10;
  OZChannelFolder *v11;
  OZChannelBool *v12;
  OZChannelBool *v13;
  OZChannelPercent *v14;

  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZProjectNode::~OZProjectNode(OZProjectNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6595620;
  *((_QWORD *)this + 2) = &unk_1E6595AF0;
  *((_QWORD *)this + 6) = &unk_1E6595D48;
  v2 = *((_QWORD *)this + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 136) = 0;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1528));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1376));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1224));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1096));
  OZSceneNode::~OZSceneNode(this);
}

{
  OZProjectNode::~OZProjectNode(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZProjectNode::~OZProjectNode(OZProjectNode *this)
{
  OZProjectNode::~OZProjectNode((OZProjectNode *)((char *)this - 16));
}

{
  OZProjectNode::~OZProjectNode((OZProjectNode *)((char *)this - 48));
}

{
  OZProjectNode::~OZProjectNode((OZProjectNode *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZProjectNode::~OZProjectNode((OZProjectNode *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZProjectNode::create(OZProjectNode *this, const PCString *a2)
{
  __int128 v3;

  v3 = xmmword_1B355CF20;
  return OZApplication::createSceneNode(theApp, (unsigned int *)&v3, (uint64_t)this, (uint64_t)a2);
}

uint64_t OZProjectNode::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  uint64_t v6;
  OZChannelBase *v7;
  uint64_t NextUniqueID;
  OZChannelBase *v9;
  PCString v10;
  __int128 v11;

  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  *(_BYTE *)(a1 + 1680) = *((_BYTE *)v4 + 1680);
  if (*(_QWORD *)(a1 + 1088))
    return OZRigWidget::operator=(*(_QWORD *)(a1 + 1088), *((_QWORD *)v4 + 136));
  v6 = theApp;
  v11 = xmmword_1B355DD90;
  PCURL::PCURL((PCURL *)&v10, CFSTR("Rig Widget Short Desc"));
  NextUniqueID = OZChannelBase::getNextUniqueID(v7);
  *(_QWORD *)(a1 + 1088) = OZApplication::createSceneNode(v6, (unsigned int *)&v11, (uint64_t)&v10, NextUniqueID);
  PCString::~PCString(&v10);
  v9 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1088) + 640))(*(_QWORD *)(a1 + 1088));
  OZChannelFolder::push_front((OZChannelFolder *)(a1 + 1096), v9);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1088) + 256))(*(_QWORD *)(a1 + 1088), a1);
}

void sub_1B2E66C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZChannelBase *OZProjectNode::didCreateCopyForCopyOnWrite(OZChannelBase *this)
{
  __CFString *var10;
  OZChannelBase *v2;
  OZChannelBase *updated;
  __CFString *v4;
  unsigned int NextUniqueID;

  var10 = this[9].var10;
  if (var10)
  {
    v2 = this;
    this = (OZChannelBase *)LODWORD(this->var10);
    if (this >= LODWORD(var10[2].data))
    {
      updated = OZChannelBase::updateIDGenerator(this);
      v4 = v2[9].var10;
      NextUniqueID = OZChannelBase::getNextUniqueID(updated);
      return OZChannelBase::setID((OZChannelBase *)&v4[1].length, NextUniqueID);
    }
  }
  return this;
}

void OZProjectNode::didAddToScene(OZProjectNode *this, OZScene *a2)
{
  OZSceneNode *v4;

  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 448), (OZChannelBase *)((char *)a2 + 752));
  v4 = (OZSceneNode *)*((_QWORD *)this + 136);
  if (v4)
    OZScene::registerNode(a2, v4);
}

OZObjectManipulator ***OZProjectNode::willRemoveFromScene(OZObjectManipulator ***this, OZScene *a2)
{
  *((_QWORD *)a2 + 100) = 0;
  if (!*((_BYTE *)this + 1680))
    return OZScene::unregisterNode(a2, (OZSceneNode *)this[136]);
  return this;
}

uint64_t OZProjectNode::didFinishLoadingIntoScene(OZProjectNode *this)
{
  uint64_t result;

  OZSceneNode::didFinishLoadingIntoScene(this);
  result = *((_QWORD *)this + 136);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result);
  *((_BYTE *)this + 1680) = 0;
  return result;
}

uint64_t `non-virtual thunk to'OZProjectNode::didFinishLoadingIntoScene(OZProjectNode *this)
{
  uint64_t result;

  OZSceneNode::didFinishLoadingIntoScene((OZProjectNode *)((char *)this - 16));
  result = *((_QWORD *)this + 134);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result);
  *((_BYTE *)this + 1664) = 0;
  return result;
}

uint64_t OZProjectNode::didFinishLoadingIntoMotionEffect(OZProjectNode *this)
{
  uint64_t result;

  OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)this);
  result = *((_QWORD *)this + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 856))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZProjectNode::didFinishLoadingIntoMotionEffect(OZProjectNode *this)
{
  uint64_t result;

  OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)this - 16);
  result = *((_QWORD *)this + 134);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 856))(result);
  return result;
}

uint64_t OZProjectNode::getSourceOperationMask(OZProjectNode *this, OZChannelBase *a2, int a3)
{
  uint64_t v6;
  OZChannelBase *v7;

  v6 = (*(uint64_t (**)(OZProjectNode *))(*(_QWORD *)this + 272))(this) + 752;
  v7 = a2;
  do
    v7 = (OZChannelBase *)v7->var6;
  while ((OZChannelBase *)v6 != v7 && v7 != 0);
  if ((OZChannelBase *)v6 == v7)
    return 2;
  else
    return OZSceneNode::getSourceOperationMask(this, a2, a3);
}

uint64_t `non-virtual thunk to'OZProjectNode::getSourceOperationMask(OZProjectNode *this, OZChannelBase *a2, int a3)
{
  return OZProjectNode::getSourceOperationMask((OZProjectNode *)((char *)this - 16), a2, a3);
}

uint64_t OZProjectNode::allowDrag(uint64_t this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a5 = 0;
  if (lpsrc)
  {
    v10 = this;
    if (this)
    {
      if (*a6 - 1 <= 2)
      {
        v11 = this;
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v10);
        v12 = this + 752;
        do
          v11 = *(_QWORD *)(v11 + 48);
        while (v12 != v11 && v11 != 0);
        if (v12 == v11)
        {
          if (*a6 - 2 < 2
            || *a6 == 1
            && (a3->var7 & 0x1000) != 0
            && (this = (*((uint64_t (**)(OZChannelBase *))a3->var0 + 15))(a3), (this & 1) == 0))
          {
            *a5 = a4 & 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'OZProjectNode::allowDrag(OZProjectNode *this, OZFactoryBase *a2, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  return OZProjectNode::allowDrag((uint64_t)this - 16, a2, a3, a4, a5, a6);
}

uint64_t OZProjectNode::prepareForDragOperation()
{
  return 1;
}

uint64_t `non-virtual thunk to'OZProjectNode::prepareForDragOperation()
{
  return 1;
}

uint64_t OZProjectNode::performDragOperation(OZProjectNode *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, int a5, unsigned int a6, unsigned int a7, const CMTime *a8)
{
  uint64_t result;
  OZChannelBase *v11;
  OZChannelFolder *v12;
  OZChannelFolder *var6;
  OZChannelFolder *v14;
  const OZChannelBase *v15;
  OZChannelFolder *v16;

  if (!lpsrc)
    return 0;
  if (!result)
    return result;
  v11 = (OZChannelBase *)result;
  v12 = *(OZChannelFolder **)(result + 48);
  if (a5 == 1)
  {
    if ((a3->var7 & 0x1000) != 0)
    {
      OZChannelFolder::removeDescendant(v12, v11);
      v14 = v16;
      v15 = 0;
      goto LABEL_12;
    }
    return 0;
  }
  var6 = a3->var6;
  if (a5 != 2)
  {
    if (a5 == 3)
    {
      OZChannelFolder::removeDescendant(*(OZChannelFolder **)(result + 48), (OZChannelBase *)result);
      v14 = var6;
      v15 = a3;
LABEL_12:
      OZChannelFolder::insertDescendantAfter(v14, v15, v11);
      return 1;
    }
    return 0;
  }
  OZChannelFolder::removeDescendant(*(OZChannelFolder **)(result + 48), (OZChannelBase *)result);
  OZChannelFolder::insertDescendantBefore(var6, a3, v11);
  return 1;
}

uint64_t OZProjectNode::writeBody(OZProjectNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a4)
  {
    v10 = *((_QWORD *)this + 136);
    if (v10)
    {
      if (!OZChannelBase::testFlag((OZChannelBase *)(v10 + 56), 8))
      {
        TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZProjectNodeScope);
        v11 = (_QWORD *)*((_QWORD *)this + 136);
        v12 = v11[6];
        v11 += 6;
        (*(void (**)(_QWORD *, PCSerializerWriteStream *, _QWORD))(v12 + 16))(v11, a2, 0);
        (*(void (**)(_QWORD *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*v11 + 24))(v11, a2, 0, 1, 1);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        PCSerializerWriteStream::popScope((uint64_t)a2);
      }
    }
  }
  return OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'OZProjectNode::writeBody(OZProjectNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZProjectNode::writeBody((OZProjectNode *)((char *)this - 48), a2, a3, a4, a5);
}

OZFactory *OZProjectNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  OZFactory *result;

  OZSceneNode::markFactoriesForSerialization(this, a2);
  result = this[136];
  if (result)
    return (OZFactory *)(*(uint64_t (**)(OZFactory *, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)result + 456))(result, a2, a3);
  return result;
}

OZFactory *`non-virtual thunk to'OZProjectNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  OZFactory *result;

  OZSceneNode::markFactoriesForSerialization(this - 6, a2);
  result = this[130];
  if (result)
    return (OZFactory *)(*(uint64_t (**)(OZFactory *, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)result + 456))(result, a2, a3);
  return result;
}

uint64_t OZProjectNode::parseBegin(OZProjectNode *this, PCSerializerReadStream *a2)
{
  OZChannelFolder *v4;
  OZChannelBase *v5;
  OZScene *v6;
  OZScene *v7;
  uint64_t v8;

  v4 = (OZChannelFolder *)((char *)this + 1096);
  v5 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 136) + 640))(*((_QWORD *)this + 136));
  OZChannelFolder::removeDescendant(v4, v5);
  v6 = (OZScene *)(*(uint64_t (**)(OZProjectNode *))(*(_QWORD *)this + 272))(this);
  if (v6)
  {
    v7 = v6;
    OZScene::unregisterNode(v6, *((OZSceneNode **)this + 136));
    OZScene::removeAllDependencies(v7, *((OZSceneNode **)this + 136));
  }
  v8 = *((_QWORD *)this + 136);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 136) = 0;
  *((_BYTE *)this + 1680) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZProjectNodeScope);
  return OZSceneNode::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'OZProjectNode::parseBegin(OZProjectNode *this, PCSerializerReadStream *a2)
{
  return OZProjectNode::parseBegin((OZProjectNode *)((char *)this - 48), a2);
}

uint64_t `non-virtual thunk to'OZProjectNode::parseEnd(OZProjectNode *this, PCSerializerReadStream *a2)
{
  return OZSceneNode::parseEnd((OZProjectNode *)((char *)this - 48), a2);
}

uint64_t OZProjectNode::parseElement(OZProjectNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  const void *v6;
  void *v7;
  void *v8;
  OZScene *v9;
  uint64_t v10;
  void *v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  uint64_t v14;
  unsigned int v16[2];
  PCSharedCount v17;

  PCSharedCount::PCSharedCount(&v17);
  *(_QWORD *)v16 = 0;
  if (*((_DWORD *)a3 + 2) == 62)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v16);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v17);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v16[1]);
    v6 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v16[0]);
    if (v6)
    {
      if (v7)
      {
        v8 = v7;
        v9 = (OZScene *)(*(uint64_t (**)(OZProjectNode *))(*(_QWORD *)this + 272))(this);
        v10 = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v8 + 168))(v8, &v17, v16[1]);
        *((_QWORD *)this + 136) = v11;
        v12 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)v11 + 640))(v11);
        OZChannelBase::setNameUnset(v12, 0);
        v13 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
        OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 1096), v13);
        (*(void (**)(uint64_t, OZProjectNode *))(*(_QWORD *)v10 + 256))(v10, this);
        if (v9)
        {
          OZScene::registerNode(v9, (OZSceneNode *)v10);
          OZScene::addAllDependencies((uint64_t)v9, (OZSceneNode *)v10);
        }
        PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v10 + 48));
      }
    }
  }
  v14 = OZSceneNode::parseElement((OZTimeMarkerSet **)this, a2, a3);
  PCString::~PCString((PCString *)&v17);
  return v14;
}

void sub_1B2E674A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZProjectNode::parseElement(OZProjectNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZProjectNode::parseElement((OZProjectNode *)((char *)this - 48), a2, a3);
}

void OZProjectNode::getHDRWhiteLevel(OZProjectNode *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1528), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t OZRigWidget::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  int v6;

  OZSceneNode::operator=(a1, a2);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
  OZChannelFolder::operator=(a1 + 1096);
  v4 = *(_OWORD *)(a2 + 1224);
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
  *(_OWORD *)(a1 + 1224) = v4;
  OZChannelBase::operator=(a1 + 1248, a2 + 1248);
  OZChannelFolder::operator=(a1 + 1400);
  if (a1 == a2)
  {
    v6 = *(_DWORD *)(a2 + 1576);
    *(_WORD *)(a1 + 1580) = *(_WORD *)(a2 + 1580);
    *(_DWORD *)(a1 + 1576) = v6;
  }
  else
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(a1 + 1528), *(char **)(a2 + 1528), *(_QWORD *)(a2 + 1536), (uint64_t)(*(_QWORD *)(a2 + 1536) - *(_QWORD *)(a2 + 1528)) >> 3);
    std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>((uint64_t *)(a1 + 1552), *(_QWORD *)(a2 + 1560), a2 + 1552);
    v5 = *(_DWORD *)(a2 + 1576);
    *(_WORD *)(a1 + 1580) = *(_WORD *)(a2 + 1580);
    *(_DWORD *)(a1 + 1576) = v5;
    std::list<OZRigEditModeEntry>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>((uint64_t *)(a1 + 1584), *(_QWORD *)(a2 + 1592), a2 + 1584);
  }
  return a1;
}

uint64_t *std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return std::list<unsigned int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>((uint64_t)a1, a1, a2, a3);
  else
    return std::list<std::pair<CMTime,double>>::erase((uint64_t)a1, i, a1);
}

uint64_t *std::list<unsigned int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = *(_DWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B2E676CC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B2E676EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::list<OZRigEditModeEntry>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      OZRigEditModeEntry::operator=((std::string *)(v6 + 2), (const std::string *)(v4 + 16));
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>((uint64_t)a1, a1, v4, a3);
  else
    return (uint64_t *)std::list<OZRigEditModeEntry>::erase((uint64_t)a1, (void **)v6, (void **)a1);
}

uint64_t *std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>(a1, 0, 0, a3 + 16);
    v9 = v8;
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>(a1, v12, 0, v10 + 16);
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B2E6785C(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(v1);
  __cxa_rethrow();
}

void sub_1B2E67870(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void **std::list<OZRigEditModeEntry>::erase(uint64_t a1, void **a2, void **a3)
{
  void **v4;
  _QWORD **v6;
  _QWORD *v7;
  void **v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = (_QWORD **)*a3;
    v7 = *a2;
    v7[1] = *((_QWORD *)*a3 + 1);
    *v6[1] = v7;
    do
    {
      v8 = (void **)v4[1];
      --*(_QWORD *)(a1 + 16);
      OZChannelRef::~OZChannelRef(v4 + 2);
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

_QWORD *std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x30uLL);
  *v7 = a2;
  v7[1] = a3;
  OZRigEditModeEntry::OZRigEditModeEntry(v7 + 2, a4);
  return v7;
}

void sub_1B2E67948(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(void **a1)
{
  void **v2;

  do
  {
    v2 = (void **)*a1;
    OZChannelRef::~OZChannelRef(a1 + 2);
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChanObjectManipRef_Factory::getInstance(this);
  OZChanObjectRef::OZChanObjectRef(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E6595DB8;
  *((_QWORD *)this + 2) = &unk_1E6596138;
  *((_BYTE *)this + 154) = 0;
  *((_QWORD *)this + 7) |= 0x1000010000uLL;
  *((_WORD *)this + 76) = 1;
}

uint64_t OZChanObjectManipRef_Factory::getInstance(OZChanObjectManipRef_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChanObjectManipRef_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChanObjectManipRef_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanObjectManipRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanObjectManipRef_Factory::_instance;
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t v6;

  OZChanObjectRef::OZChanObjectRef(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v6 = &off_1E6595DB8;
  *(_QWORD *)(v6 + 16) = &unk_1E6596138;
  *(_BYTE *)(v6 + 154) = 0;
  *(_QWORD *)(v6 + 56) |= 0x1000010000uLL;
  *(_WORD *)(v6 + 152) = 1;
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChanObjectRef::OZChanObjectRef(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E6595DB8;
  *(_QWORD *)(v4 + 16) = &unk_1E6596138;
  *(_BYTE *)(v4 + 154) = 0;
  *(_QWORD *)(v4 + 56) |= 0x1000010000uLL;
  *(_WORD *)(v4 + 152) = 1;
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  uint64_t v4;

  OZChanObjectRef::OZChanObjectRef(this, a2, a3);
  *(_QWORD *)v4 = &off_1E6595DB8;
  *(_QWORD *)(v4 + 16) = &unk_1E6596138;
  *(_BYTE *)(v4 + 154) = 0;
  *(_WORD *)(v4 + 152) = a2[1].var5;
  *(_BYTE *)(v4 + 154) = BYTE2(a2[1].var5);
}

void `non-virtual thunk to'OZChanObjectManipRef::~OZChanObjectManipRef(OZChanObjectManipRef *this)
{
  OZChanObjectRef::~OZChanObjectRef((OZChanObjectManipRef *)((char *)this - 16));
}

{
  OZChanObjectRef::~OZChanObjectRef((OZChanObjectManipRef *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChanObjectManipRef::~OZChanObjectManipRef(OZChanObjectManipRef *this)
{
  OZChanObjectRef::~OZChanObjectRef(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChanObjectManipRef::clone(OZChanObjectManipRef *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChanObjectRef::OZChanObjectRef((OZChanObjectRef *)v2, (const OZChannelBase *)this, 0);
  *(_QWORD *)v2 = &off_1E6595DB8;
  *(_QWORD *)(v2 + 16) = &unk_1E6596138;
  *(_BYTE *)(v2 + 152) = *((_BYTE *)this + 152);
  *(_WORD *)(v2 + 153) = *(_WORD *)((char *)this + 153);
  return v2;
}

void sub_1B2E67C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectManipRef::getObjectID(OZChannel *this)
{
  return OZChannel::getValueAsUint(this, MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t OZChanObjectManipRef::setObjectID(OZChannelBase *this, unsigned int a2, uint64_t a3)
{
  uint64_t ObjectManipulator;
  __n128 v7;
  OZScene *v8;
  uint64_t Object;
  __n128 v10;
  double v11;
  uint64_t result;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator
    || (v8 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator),
        !a2)
    || !v8)
  {
    v11 = 0.0;
    v7.n128_u64[0] = 0;
    result = (*((uint64_t (**)(OZChannelBase *, _QWORD, uint64_t, __n128))this->var0 + 89))(this, MEMORY[0x1E0CA2E68], a3, v7);
LABEL_7:
    if (!BYTE1(this[1].var5))
      return result;
    return OZChannel::setDefaultValue((OZChannel *)this, v11);
  }
  Object = OZScene::getObject(v8, a2);
  if ((*((unsigned int (**)(OZChannelBase *, uint64_t))this->var0 + 109))(this, Object))
  {
    v11 = (double)a2;
    v10.n128_f64[0] = (double)a2;
    result = (*((uint64_t (**)(OZChannelBase *, _QWORD, uint64_t, __n128))this->var0 + 89))(this, MEMORY[0x1E0CA2E68], a3, v10);
    goto LABEL_7;
  }
  result = (*((uint64_t (**)(OZChannelBase *, _QWORD))this->var0 + 92))(this, MEMORY[0x1E0CA2E68]);
  if (BYTE1(this[1].var5))
  {
    v11 = (double)a2;
    return OZChannel::setDefaultValue((OZChannel *)this, v11);
  }
  return result;
}

uint64_t OZChanObjectManipRef::getObject(OZChannelBase *this)
{
  uint64_t ObjectManipulator;
  uint64_t v3;
  OZScene *v4;
  unsigned int ValueAsUint;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator)
    return 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
  if (!v3)
    return 0;
  v4 = (OZScene *)v3;
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)this, MEMORY[0x1E0CA2E68], 0.0);
  return OZScene::getObject(v4, ValueAsUint);
}

uint64_t OZChanObjectManipRef::setObject(OZChanObjectManipRef *this, OZObjectManipulator *a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
    a2 = (OZObjectManipulator *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  }
  return (*(uint64_t (**)(OZChanObjectManipRef *, OZObjectManipulator *, uint64_t))(*(_QWORD *)this + 864))(this, a2, a3);
}

uint64_t OZChanObjectManipRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  uint64_t ObjectManipulator;
  uint64_t v5;
  uint64_t v7;

  if (!a2)
    return 0;
  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v5 = ObjectManipulator
     ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator)
     : 0;
  if (v5 != (*(uint64_t (**)(const OZObjectManipulator *))(*(_QWORD *)a2 + 264))(a2))
    return 0;
  v7 = OZChannelBase::getObjectManipulator(this);
  if (v7)
    return (*(uint64_t (**)(uint64_t, OZChannelBase *, const OZObjectManipulator *))(*(_QWORD *)v7 + 408))(v7, this, a2);
  else
    return 1;
}

uint64_t OZChanObjectManipRef::setAlwaysUpdateDefaultValue(uint64_t this, char a2)
{
  *(_BYTE *)(this + 153) = a2;
  return this;
}

void std::__call_once_param<std::tuple<OZChanObjectManipRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChanObjectManipRef_Factory *v0;

  v0 = (OZChanObjectManipRef_Factory *)operator new();
  OZChanObjectManipRef_Factory::OZChanObjectManipRef_Factory(v0);
  OZChanObjectManipRef_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E67EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanObjectManipRef_Factory::OZChanObjectManipRef_Factory(OZChanObjectManipRef_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555B00;
  v4 = xmmword_1B355E8F0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65961A8;
  *((_QWORD *)this + 16) = &unk_1E6596278;
}

void sub_1B2E67F9C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectManipRef_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = operator new();
  OZChanObjectRef::OZChanObjectRef((OZChanObjectRef *)v6, this, a2, a3);
  *(_QWORD *)v6 = &off_1E6595DB8;
  *(_QWORD *)(v6 + 16) = &unk_1E6596138;
  *(_BYTE *)(v6 + 154) = 0;
  *(_QWORD *)(v6 + 56) |= 0x1000010000uLL;
  *(_WORD *)(v6 + 152) = 1;
  return v6;
}

void sub_1B2E68040(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectManipRef_Factory::createCopy(OZChanObjectManipRef_Factory *this, OZFactoryBase *a2)
{
  uint64_t v3;
  char *v4;

  v3 = operator new();
  OZChanObjectRef::OZChanObjectRef((OZChanObjectRef *)v3, (const OZChannelBase *)v4, 0);
  *(_QWORD *)v3 = &off_1E6595DB8;
  *(_QWORD *)(v3 + 16) = &unk_1E6596138;
  *(_BYTE *)(v3 + 152) = v4[152];
  *(_WORD *)(v3 + 153) = *(_WORD *)(v4 + 153);
  return v3;
}

void sub_1B2E680F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectManipRef_Factory::createChannelCopy(OZChanObjectManipRef_Factory *this, OZChannelBase *a2)
{
  uint64_t v3;
  char *v4;

  v3 = operator new();
  OZChanObjectRef::OZChanObjectRef((OZChanObjectRef *)v3, (const OZChannelBase *)v4, 0);
  *(_QWORD *)v3 = &off_1E6595DB8;
  *(_QWORD *)(v3 + 16) = &unk_1E6596138;
  *(_BYTE *)(v3 + 152) = v4[152];
  *(_WORD *)(v3 + 153) = *(_WORD *)(v4 + 153);
  return v3;
}

void sub_1B2E681A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

_DWORD *OZPlaybackEngine::OZPlaybackEngine(_DWORD *result, int a2)
{
  *result = a2;
  result[1] = 0;
  return result;
}

double OZPlaybackEngine::OZPlaybackEngine(_QWORD *a1, double *a2)
{
  double result;

  result = *a2;
  *a1 = *(_QWORD *)a2;
  return result;
}

double OZPlaybackEngine::operator=(double *a1, double *a2)
{
  double result;

  if (a1 != a2)
  {
    result = *a2;
    *a1 = *a2;
  }
  return result;
}

BOOL OZPlaybackEngine::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void OZRenderParams::OZRenderParams(OZRenderParams *this)
{
  OZRenderState *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  PCColor *v6;
  int *v7;
  __int128 v8;
  __int128 v9;
  CGColorSpace *v10;
  PCRenderModel *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  OZPreferenceManager *v18;
  OZPreferenceManager *v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  v2 = OZRenderState::OZRenderState((OZRenderState *)this);
  LOBYTE(v2[1].var0.var0) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)&v2[1].var5);
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 392));
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 408));
  *((_BYTE *)this + 424) = 1;
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 54) = v3;
  *((_QWORD *)this + 55) = v4;
  *((_QWORD *)this + 56) = v3;
  *((_QWORD *)this + 57) = v4;
  *(_QWORD *)&v5 = 0x200000002;
  *((_QWORD *)&v5 + 1) = 0x200000002;
  *((_OWORD *)this + 29) = v5;
  *((_DWORD *)this + 120) = 16842752;
  *((_DWORD *)this + 123) = 0;
  *((_BYTE *)this + 496) = 0;
  *((_DWORD *)this + 121) = 0;
  *((_BYTE *)this + 488) = 0;
  *((_DWORD *)this + 125) = 6;
  *((_QWORD *)this + 63) = 0x3FF0000000000000;
  *((_DWORD *)this + 128) = 16842752;
  *((_WORD *)this + 258) = 1;
  v7 = PCColor::CLEAR(v6);
  v8 = *(_OWORD *)v7;
  v9 = *((_OWORD *)v7 + 2);
  *(_OWORD *)((char *)this + 536) = *((_OWORD *)v7 + 1);
  *(_OWORD *)((char *)this + 552) = v9;
  *(_OWORD *)((char *)this + 520) = v8;
  v10 = (CGColorSpace *)*((_QWORD *)v7 + 6);
  *((_QWORD *)this + 71) = v10;
  if (v10)
    PCCFRefTraits<CGColorSpace *>::retain(v10);
  *((_DWORD *)this + 144) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 75) = 0xBFF0000000000000;
  *((_QWORD *)this + 76) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 79) = 0xBFF0000000000000;
  *((_QWORD *)this + 80) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 648) = xmmword_1B30503B0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_QWORD *)this + 85) = 0xBFF0000000000000;
  *((_QWORD *)this + 86) = 0xBFF0000000000000;
  *((_BYTE *)this + 696) = 0;
  *((_DWORD *)this + 175) = 0;
  PCColorDescription::PCColorDescription((PCColorDescription *)((char *)this + 704));
  *((_BYTE *)this + 728) = 1;
  *((float *)this + 184) = PCRenderModel::getDefaultBlendingGamma(v11);
  PCColorDescription::PCColorDescription((PCColorDescription *)this + 31);
  *((_BYTE *)this + 768) = 1;
  *((_DWORD *)this + 194) = 0;
  *((_BYTE *)this + 780) = 0;
  *((_DWORD *)this + 201) = 0;
  *((_OWORD *)this + 49) = 0u;
  *((_BYTE *)this + 800) = 0;
  *((_QWORD *)this + 116) = 0x3FF0000000000000;
  *((_QWORD *)this + 111) = 0x3FF0000000000000;
  *((_QWORD *)this + 106) = 0x3FF0000000000000;
  *((_QWORD *)this + 101) = 0x3FF0000000000000;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_BYTE *)this + 936) = 0;
  *(_QWORD *)((char *)this + 940) = 0;
  *(_OWORD *)((char *)this + 952) = 0u;
  v12 = (__int128 *)MEMORY[0x1E0CA2E18];
  v13 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 968) = *MEMORY[0x1E0CA2E18];
  v14 = *((_QWORD *)v12 + 2);
  *((_QWORD *)this + 123) = v14;
  *((_QWORD *)this + 124) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_QWORD *)this + 125) = (char *)this + 1008;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *((_QWORD *)this + 128) = (char *)this + 1032;
  *((_OWORD *)this + 66) = 0u;
  *((_QWORD *)this + 131) = (char *)this + 1056;
  *((_QWORD *)this + 134) = 0x3FF0000000000000;
  *((_QWORD *)this + 135) = 0;
  *((_OWORD *)this + 68) = v13;
  *((_QWORD *)this + 138) = v14;
  *(_OWORD *)((char *)this + 1112) = v13;
  *((_QWORD *)this + 141) = v14;
  *((_OWORD *)this + 71) = v13;
  *((_QWORD *)this + 144) = v14;
  v15 = *((_QWORD *)v12 + 2);
  *((_QWORD *)this + 147) = v15;
  v16 = *v12;
  *(_OWORD *)((char *)this + 1160) = *v12;
  *((_QWORD *)this + 150) = v15;
  *((_OWORD *)this + 74) = v16;
  *((_DWORD *)this + 302) = 0;
  *((_WORD *)this + 606) = 1;
  *((_WORD *)this + 616) = 0;
  *((_OWORD *)this + 76) = 0u;
  v17 = operator new();
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_BYTE *)(v17 + 104) = 1;
  *(_QWORD *)(v17 + 88) = &unk_1E6596308;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)v17 = &unk_1E65962D8;
  *(_QWORD *)(v17 + 8) = v17 + 16;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = &unk_1E64FC250;
  *(_QWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  *(_BYTE *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 64) = v17 + 72;
  *((_QWORD *)this + 155) = v17;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 156, (PCShared_base *)(v17 + 88));
  *((_QWORD *)this + 157) = 0x3FF0000000000000;
  *((_QWORD *)this + 158) = 0x3FF0000000000000;
  *((_BYTE *)this + 1272) = 0;
  *((_QWORD *)this + 160) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 161);
  *((_QWORD *)this + 162) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 163);
  *((_WORD *)this + 656) = 1;
  v18 = LiRenderingTechnology::LiRenderingTechnology((OZRenderParams *)((char *)this + 1316));
  *((_QWORD *)this + 171) = &unk_1E64FC250;
  *((_BYTE *)this + 1392) = 0;
  *((_QWORD *)this + 173) = 0;
  *((_QWORD *)this + 172) = 0;
  *((_BYTE *)this + 1400) = 0;
  *((_QWORD *)this + 176) = 0;
  *(_DWORD *)((char *)this + 1415) = 0;
  if (*(_BYTE *)(theApp + 81))
  {
    LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)&v21);
  }
  else
  {
    v19 = (OZPreferenceManager *)OZPreferenceManager::Instance(v18);
    OZPreferenceManager::getRenderingTechnology(v19, (uint64_t)&v21);
  }
  v20 = v22[0];
  *(_OWORD *)((char *)this + 1316) = v21;
  *(_OWORD *)((char *)this + 1332) = v20;
  *(_OWORD *)((char *)this + 1346) = *(_OWORD *)((char *)v22 + 14);
}

void sub_1B2E685A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CGColorSpace **a11, CGColorSpace **a12)
{
  CGColorSpace **v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  PCSharedCount *v16;
  PCSharedCount *v17;
  PCSharedCount *v18;
  _QWORD **v19;
  _QWORD **v20;

  if (*v14)
    (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(v12 + 171));
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  PCSharedCount::~PCSharedCount(v16);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v12 + 152));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v12 + 131), *v20);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v15, *v19);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v12 + 125), *v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(v12 + 99);
  PCCFRef<CGColorSpace *>::~PCCFRef(v12 + 98);
  PCCFRef<CGColorSpace *>::~PCCFRef(a11);
  PCCFRef<CGColorSpace *>::~PCCFRef(a12);
  PCCFRef<CGColorSpace *>::~PCCFRef(v12 + 71);
  PCCFRef<CGColorSpace *>::~PCCFRef(v12 + 43);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v12 + 38));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v12 + 36));
  _Unwind_Resume(a1);
}

double OZRenderParams::setWidth(OZRenderParams *this, int a2)
{
  double result;

  *((_DWORD *)this + 81) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setHeight(OZRenderParams *this, int a2)
{
  double result;

  *((_DWORD *)this + 82) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setDepth(OZRenderParams *this, int a2)
{
  double result;

  *((_DWORD *)this + 83) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setImageType(uint64_t a1, int a2)
{
  double result;

  *(_DWORD *)(a1 + 320) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

double OZRenderParams::setNumChannels(OZRenderParams *this, int a2)
{
  double result;

  *((_DWORD *)this + 84) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::deleteControl(OZRenderParams *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 34);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 34) = 0;
  return result;
}

char *OZRenderParams::getHash(OZRenderParams *this)
{
  char *v1;

  v1 = (char *)this + 392;
  if (!(*((_DWORD *)this + 99) | *((_DWORD *)this + 98) | *((_DWORD *)this + 100) | *((_DWORD *)this + 101)))
    OZRenderParams::calcHash(this);
  return v1;
}

uint64_t OZRenderParams::calcHash(OZRenderParams *this)
{
  PCHashWriteStream *v2;

  v2 = (PCHashWriteStream *)operator new();
  PCHashWriteStream::PCHashWriteStream(v2);
  (*(void (**)(PCHashWriteStream *, OZRenderParams *))(*(_QWORD *)v2 + 112))(v2, this);
  *(_OWORD *)((char *)this + 392) = *(_OWORD *)PCHashWriteStream::getHash((int8x8_t *)v2)->i8;
  if (!(*((_DWORD *)this + 103) | *((_DWORD *)this + 102) | *((_DWORD *)this + 104) | *((_DWORD *)this + 105)))
  {
    (*(void (**)(PCHashWriteStream *))(*(_QWORD *)v2 + 40))(v2);
    OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)v2);
    *(_OWORD *)((char *)this + 408) = *(_OWORD *)PCHashWriteStream::getHash((int8x8_t *)v2)->i8;
  }
  PCHash128::operator+=((int *)this + 98, (int *)this + 102);
  (*(void (**)(PCHashWriteStream *))(*(_QWORD *)v2 + 32))(v2);
  return (*(uint64_t (**)(PCHashWriteStream *))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1B2E68888(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1091C40E2C1B576);
  _Unwind_Resume(a1);
}

_DWORD *OZRenderParams::getHashWithoutTime@<X0>(_DWORD *this@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  PCHashWriteStream *v8;

  v3 = this[102];
  v4 = this[103];
  v5 = this[104];
  v6 = this[105];
  if (!(v4 | v3 | v5 | v6))
  {
    v7 = (uint64_t)this;
    v8 = (PCHashWriteStream *)operator new();
    PCHashWriteStream::PCHashWriteStream(v8);
    OZChannelBase::setRangeName((OZChannelBase *)v7, (const PCString *)v8);
    (*(void (**)(PCHashWriteStream *))(*(_QWORD *)v8 + 32))(v8);
    *(_OWORD *)(v7 + 408) = *(_OWORD *)PCHashWriteStream::getHash((int8x8_t *)v8)->i8;
    this = (_DWORD *)(*(uint64_t (**)(PCHashWriteStream *))(*(_QWORD *)v8 + 8))(v8);
    v3 = *(_DWORD *)(v7 + 408);
    v4 = *(_DWORD *)(v7 + 412);
    v5 = *(_DWORD *)(v7 + 416);
    v6 = *(_DWORD *)(v7 + 420);
  }
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return this;
}

void sub_1B2E6896C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1091C40E2C1B576);
  _Unwind_Resume(a1);
}

float64x2_t OZRenderParams::getRenderBounds@<Q0>(OZRenderParams *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t result;
  __int128 v3;
  uint64_t v4;
  uint64x2_t v5;

  if (*((double *)this + 75) <= 0.0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)((char *)this + 324);
    v5.i64[0] = v4;
    v5.i64[1] = HIDWORD(v4);
    result = vcvtq_f64_u64(v5);
    *(float64x2_t *)(a2 + 16) = result;
  }
  else
  {
    result = *(float64x2_t *)((char *)this + 584);
    v3 = *(_OWORD *)((char *)this + 600);
    *(float64x2_t *)a2 = result;
    *(_OWORD *)(a2 + 16) = v3;
  }
  return result;
}

float64x2_t OZRenderParams::getRenderGate@<Q0>(OZRenderParams *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t result;
  __int128 v3;
  uint64_t v4;
  uint64x2_t v5;

  if (*((double *)this + 79) <= 0.0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)((char *)this + 324);
    v5.i64[0] = v4;
    v5.i64[1] = HIDWORD(v4);
    result = vcvtq_f64_u64(v5);
    *(float64x2_t *)(a2 + 16) = result;
  }
  else
  {
    result = *(float64x2_t *)((char *)this + 616);
    v3 = *(_OWORD *)((char *)this + 632);
    *(float64x2_t *)a2 = result;
    *(_OWORD *)(a2 + 16) = v3;
  }
  return result;
}

void OZRenderParams::getPixelTransform(OZRenderParams *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t i;
  _OWORD *v5;
  __int128 v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  uint64x2_t v10;
  float64x2_t v11;
  double v12;
  _QWORD *v13;
  PCShared_base *v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  _QWORD *v22;
  PCSharedCount v23;
  float64x2_t v24;
  float64x2_t v25;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (*((_BYTE *)this + 936))
  {
    v3 = (char *)this + 808;
    if ((OZRenderParams *)((char *)this + 808) != (OZRenderParams *)a2)
    {
      for (i = 0; i != 128; i += 32)
      {
        v5 = (_OWORD *)(a2 + i);
        v6 = *(_OWORD *)&v3[i + 16];
        *v5 = *(_OWORD *)&v3[i];
        v5[1] = v6;
      }
    }
  }
  else
  {
    v7.f64[0] = *((float64_t *)this + 79);
    if (v7.f64[0] <= 0.0)
    {
      v9 = *(_QWORD *)((char *)this + 324);
      v10.i64[0] = v9;
      v10.i64[1] = HIDWORD(v9);
      v7 = vcvtq_f64_u64(v10);
      v8 = 0uLL;
    }
    else
    {
      v8 = *(float64x2_t *)((char *)this + 616);
      v7.f64[1] = *((float64_t *)this + 80);
    }
    v11 = *(float64x2_t *)((char *)this + 24);
    v24 = vmulq_f64(v8, v11);
    v25 = vmulq_f64(v7, v11);
    v12 = *((double *)this + 5);
    v13 = (_QWORD *)*((_QWORD *)this + 160);
    v22 = v13;
    v20 = v24.f64[0];
    v21 = v25.f64[0];
    if (v13)
      v14 = (PCShared_base *)((char *)v13 + *(_QWORD *)(*v13 - 24));
    else
      v14 = 0;
    PCSharedCount::PCSharedCount(&v23, v14);
    if (v22)
    {
      v15 = v12 / (*(double (**)(_QWORD *))(*v22 + 688))(v22);
      v24.f64[0] = v15 * v20;
      v25.f64[0] = v15 * v21;
      (*(void (**)(_QWORD *, float64x2_t *, uint64_t))(*v22 + 296))(v22, &v24, a2);
      v16 = 1.0 / v15;
      if (1.0 / v15 != 1.0)
      {
        v17 = vmulq_n_f64(*(float64x2_t *)a2, v16);
        v18 = vmulq_n_f64(*(float64x2_t *)(a2 + 16), v16);
        *(float64x2_t *)a2 = v17;
        *(float64x2_t *)(a2 + 16) = v18;
      }
      v19 = 1.0 / v12;
      if (1.0 / v12 != 1.0)
      {
        *(double *)a2 = v19 * *(double *)a2;
        *(double *)(a2 + 32) = v19 * *(double *)(a2 + 32);
        *(double *)(a2 + 64) = v19 * *(double *)(a2 + 64);
        *(double *)(a2 + 96) = v19 * *(double *)(a2 + 96);
      }
    }
    PCSharedCount::~PCSharedCount(&v23);
  }
}

void sub_1B2E68BC4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

__n128 OZRenderParams::getResolution@<Q0>(OZRenderParams *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 24);
  *a2 = result;
  return result;
}

BOOL OZRenderParams::hasROI(OZRenderParams *this)
{
  return *((_DWORD *)this + 164) > 0;
}

float64_t OZRenderParams::getROI@<D0>(OZRenderParams *this@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  unint64_t v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v17;
  uint64_t v19;

  if (*((int *)this + 164) < 1)
  {
    OZRenderParams::getPixelTransform(this, (uint64_t)&v19);
    v5.f64[0] = *((float64_t *)this + 75);
    if (v5.f64[0] <= 0.0)
    {
      LODWORD(v5.f64[0]) = *((_DWORD *)this + 81);
      *(double *)&v7 = (double)*(unint64_t *)&v5.f64[0];
      LODWORD(v5.f64[0]) = *((_DWORD *)this + 82);
      v8 = (double)*(unint64_t *)&v5.f64[0];
      v6.f64[0] = 0.0;
      v5 = (float64x2_t)v7;
      v6.f64[1] = v8;
    }
    else
    {
      v6.f64[0] = *((float64_t *)this + 73);
      v5.f64[1] = *((float64_t *)this + 74);
      v6.f64[1] = *((float64_t *)this + 76);
    }
    v9 = *(float64x2_t *)((char *)this + 24);
    v10 = vmulq_f64(v5, v9);
    v11 = vmulq_f64(v6, v9);
    v9.f64[0] = v11.f64[0];
    v9.f64[1] = v10.f64[1];
    v4 = vaddq_f64(v10, v11);
    __asm { FMOV            V1.2D, #0.5 }
    v17 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
    *(int32x2_t *)&v9.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v9, _Q1), v17))));
    *(int32x2_t *)&v4.f64[0] = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v4, _Q1), v17)))), *(int32x2_t *)&v9.f64[0]);
    a2->f64[0] = v9.f64[0];
    a2->f64[1] = v4.f64[0];
  }
  else
  {
    v4 = *(float64x2_t *)((char *)this + 648);
    *a2 = v4;
  }
  return v4.f64[0];
}

uint64_t OZRenderParams::layoutElementAtSize(uint64_t a1, uint64_t a2, int *a3)
{
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t result;
  double v27;
  __int128 v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  __int128 v42;

  v40 = 0.0;
  v41 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v42 = _Q0;
  (*(void (**)(uint64_t, double *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v40, a1);
  v10 = *(double *)&v42;
  if (*(double *)&v42 < 0.0)
    return 0;
  v11 = *((double *)&v42 + 1);
  if (*((double *)&v42 + 1) < 0.0)
    return 0;
  v12 = 0;
  v13 = *a3;
  *(_DWORD *)(a1 + 324) = *a3;
  v14 = a3[1];
  *(_DWORD *)(a1 + 328) = v14;
  *(_QWORD *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 656) = v13;
  *(_DWORD *)(a1 + 660) = v14;
  v15 = (double)*a3 / v10;
  if (v15 > (double)a3[1] / v11)
    v15 = (double)a3[1] / v11;
  *(double *)(a1 + 432) = v15;
  *(double *)(a1 + 440) = v15;
  *(double *)(a1 + 448) = v15;
  *(double *)(a1 + 456) = v15;
  *(double *)(a1 + 24) = v15;
  *(double *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 392) = 0uLL;
  *(_OWORD *)(a1 + 408) = 0uLL;
  v16 = v40 - (v10 * 0.5 + v40);
  v17 = v41 - (v11 * 0.5 + v41);
  v18 = v15 * v16;
  v19 = v15 * v17;
  v20 = v10 * v15;
  v21 = v11 * v15;
  v22 = v18 + (double)v13 * 0.5 + 0.0;
  v23 = v19 + (double)v14 * 0.5 + 0.0;
  *(double *)(a1 + 664) = v22;
  *(double *)(a1 + 672) = v23;
  *(double *)(a1 + 680) = v20;
  *(double *)(a1 + 688) = v21;
  v30 = 0;
  v28 = 0uLL;
  v32 = 0;
  v34 = 0uLL;
  v38 = 0;
  v39 = 0x3FF0000000000000;
  v36 = 0;
  v37 = 0;
  v27 = v20 / v10;
  v29 = v22 - v16 * v20 / v10;
  v31 = v21 / v11;
  v33 = v23 - v17 * v21 / v11;
  v35 = xmmword_1B304EED0;
  do
  {
    v24 = (_OWORD *)(a1 + 808 + v12);
    v25 = *(__int128 *)((char *)&v28 + v12 + 8);
    *v24 = *(_OWORD *)((char *)&v27 + v12);
    v24[1] = v25;
    v12 += 32;
  }
  while (v12 != 128);
  result = 1;
  *(_BYTE *)(a1 + 936) = 1;
  return result;
}

double OZRenderParams::setImageAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  PCImageAttributes::operator=(a1 + 320, a2);
  v3 = *(_QWORD *)(a1 + 384);
  if (PGGetPerThreadContext() == v3)
    v4 = 0;
  else
    v4 = v3;
  *(_QWORD *)(a1 + 384) = v4;
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

PGContext *OZRenderParams::setImageContext(OZRenderParams *this, PGContext *a2)
{
  PGContext *result;
  PGContext *v5;

  result = (PGContext *)PGGetPerThreadContext();
  if (result == a2)
    v5 = 0;
  else
    v5 = a2;
  *((_QWORD *)this + 48) = v5;
  return result;
}

uint64_t OZRenderParams::getImageContext(OZRenderParams *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 48);
  if (!result)
    return PGGetPerThreadContext();
  return result;
}

CGColorSpace **OZRenderParams::setWorkingColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  CGColorSpace **result;
  CGColorSpace *v5;

  result = PCCFRef<CGColorSpace *>::operator=(this + 88, &a2->_pcColorDesc._colorSpaceRef._obj);
  v5 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 180) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[89] = v5;
  *((_BYTE *)this + 728) = a2->_isPremultiplied;
  return result;
}

uint64_t OZRenderParams::getWorkingColorDescription(OZRenderParams *this)
{
  return (uint64_t)this + 704;
}

CGColorSpace **OZRenderParams::setWorkingColorDescriptionFromRenderNode(uint64_t a1, uint64_t a2, int a3)
{
  CGColorSpace *v6[4];
  CGColorSpace *v7[2];
  int v8;
  char v9;

  (*(void (**)(CGColorSpace **__return_ptr, uint64_t))(*(_QWORD *)a2 + 64))(v6, a2);
  FxColorDescription::FxColorDescription((uint64_t)v7, (uint64_t)v6, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef(v6);
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(a1 + 704), v7);
  *(CGColorSpace **)(a1 + 712) = v7[1];
  *(_DWORD *)(a1 + 720) = v8;
  *(_BYTE *)(a1 + 728) = v9;
  return PCCFRef<CGColorSpace *>::~PCCFRef(v7);
}

void sub_1B2E68FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZRenderParams::isDynamicRangeTrackingRender(FxColorDescription *this)
{
  FxColorDescription *v1;

  v1 = this + 22;
  if ((FxColorDescription::isSDR(this + 22) & 1) != 0)
    return 1;
  else
    return FxColorDescription::isHDR(v1);
}

uint64_t OZRenderParams::setWorkingColorSpace(FxColorDescription *this, CGColorSpace *a2)
{
  return FxColorDescription::setCGColorSpace(this + 22, a2);
}

uint64_t OZRenderParams::getWorkingColorSpace(FxColorDescription *this)
{
  return FxColorDescription::getCGColorSpace(this + 22);
}

BOOL OZRenderParams::hasWorkingColorSpace(FxColorDescription *this)
{
  return FxColorDescription::getCGColorSpace(this + 22) != 0;
}

uint64_t OZRenderParams::getWorkingGamut(OZRenderParams *this)
{
  return *((unsigned int *)this + 194);
}

uint64_t OZRenderParams::wantsHLGToPQPostProcessingStep(OZRenderParams *this)
{
  return *((unsigned __int8 *)this + 780);
}

uint64_t OZRenderParams::setWorkingGamut(uint64_t result, int a2)
{
  *(_DWORD *)(result + 776) = a2;
  return result;
}

CGColorSpace **OZRenderParams::setOutputColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  CGColorSpace **result;
  CGColorSpace *v5;

  result = PCCFRef<CGColorSpace *>::operator=(this + 93, &a2->_pcColorDesc._colorSpaceRef._obj);
  v5 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 190) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[94] = v5;
  *((_BYTE *)this + 768) = a2->_isPremultiplied;
  return result;
}

char *OZRenderParams::getOutputColorDescription(OZRenderParams *this)
{
  char *v2;

  v2 = (char *)this + 744;
  if (FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 744)))
    return v2;
  else
    return (char *)this + 704;
}

uint64_t OZRenderParams::setRenderIsForHDR_Deprecated(uint64_t this, char a2)
{
  *(_BYTE *)(this + 800) = a2;
  return this;
}

uint64_t OZRenderParams::isRenderForHDR_Deprecated(OZRenderParams *this)
{
  return *((unsigned __int8 *)this + 800);
}

uint64_t OZRenderParams::setStillImageInverseToneMapOperator_Deprecated(uint64_t result, int a2)
{
  *(_DWORD *)(result + 804) = a2;
  return result;
}

uint64_t OZRenderParams::getStillImageInverseToneMapOperator_Deprecated(OZRenderParams *this)
{
  return *((unsigned int *)this + 201);
}

uint64_t OZRenderParams::setBlendingGamma(uint64_t this, float a2)
{
  *(float *)(this + 736) = a2;
  return this;
}

float OZRenderParams::getBlendingGamma(OZRenderParams *this)
{
  return *((float *)this + 184);
}

double OZRenderParams::setState(OZRenderParams *this, const OZRenderState *a2)
{
  double var1;
  double var2;
  double result;

  OZRenderState::operator=((uint64_t)this, (__int128 *)&a2->var0.var0);
  var1 = a2->var1;
  var2 = a2->var2;
  *((double *)this + 54) = var1;
  *((double *)this + 55) = var2;
  *((double *)this + 56) = var1;
  *((double *)this + 57) = var2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setResolution(_OWORD *a1, _OWORD *a2)
{
  double result;

  a1[27] = *a2;
  a1[28] = *a2;
  *(_OWORD *)((char *)a1 + 24) = *a2;
  result = 0.0;
  *(_OWORD *)((char *)a1 + 392) = 0u;
  *(_OWORD *)((char *)a1 + 408) = 0u;
  return result;
}

double OZRenderParams::setResolutionDynamic(uint64_t a1, __int128 *a2)
{
  __int128 v2;

  v2 = *a2;
  *(_OWORD *)(a1 + 448) = *a2;
  if (*(_BYTE *)(a1 + 424))
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 448);
    *(_QWORD *)&v2 = 0;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
  }
  return *(double *)&v2;
}

double OZRenderParams::setRenderQuality(uint64_t a1, int a2)
{
  double result;

  *(_DWORD *)(a1 + 464) = a2;
  *(_DWORD *)(a1 + 468) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getRenderQuality(OZRenderParams *this)
{
  uint64_t v1;

  v1 = 468;
  if (!*((_BYTE *)this + 424))
    v1 = 464;
  return *(unsigned int *)((char *)this + v1);
}

double OZRenderParams::setTextRenderQuality(uint64_t a1, int a2)
{
  double result;

  *(_DWORD *)(a1 + 472) = a2;
  *(_DWORD *)(a1 + 476) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getTextRenderQuality(OZRenderParams *this)
{
  uint64_t v1;

  v1 = 476;
  if (!*((_BYTE *)this + 424))
    v1 = 472;
  return *(unsigned int *)((char *)this + v1);
}

double OZRenderParams::setDoHighQualityResampling(OZRenderParams *this, char a2)
{
  double result;

  *((_BYTE *)this + 480) = a2;
  *((_BYTE *)this + 481) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getDoHighQualityResampling(OZRenderParams *this)
{
  uint64_t v1;

  v1 = 480;
  if (*((_BYTE *)this + 424))
    v1 = 481;
  return *((unsigned __int8 *)this + v1);
}

double OZRenderParams::setDoShapeAntialiasing(OZRenderParams *this, char a2)
{
  double result;

  *((_BYTE *)this + 482) = a2;
  *((_BYTE *)this + 483) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getDoShapeAntialiasing(OZRenderParams *this)
{
  uint64_t v1;

  v1 = 482;
  if (*((_BYTE *)this + 424))
    v1 = 483;
  return *((unsigned __int8 *)this + v1);
}

double OZRenderParams::setDo3DIntersectionAntialiasing(OZRenderParams *this, char a2)
{
  double result;

  *((_BYTE *)this + 484) = a2;
  *((_BYTE *)this + 485) = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getDo3DIntersectionAntialiasing(OZRenderParams *this)
{
  uint64_t v1;

  v1 = 484;
  if (*((_BYTE *)this + 424))
    v1 = 485;
  return *((unsigned __int8 *)this + v1);
}

BOOL OZRenderParams::getReducedResolutionMedia(OZRenderParams *this)
{
  return *((_BYTE *)this + 424) && *((_BYTE *)this + 486) != 0;
}

uint64_t OZRenderParams::setReducedResolutionOverride(uint64_t this, char a2)
{
  *(_BYTE *)(this + 487) = a2;
  return this;
}

BOOL OZRenderParams::getReducedResolutionOverride(OZRenderParams *this)
{
  return *((_BYTE *)this + 424) && *((_BYTE *)this + 487) != 0;
}

_QWORD *OZRenderParams::setDestinationDevice(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>((_QWORD *)(a1 + 288), a2);
}

_QWORD *OZRenderParams::setRenderDevice(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>((_QWORD *)(a1 + 304), a2);
}

uint64_t OZRenderParams::getRenderGPU@<X0>(uint64_t this@<X0>, void (****a2)(HGGPUComputeDevice *__hidden this)@<X8>)
{
  void (***v2)(HGGPUComputeDevice *__hidden);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *(void (****)(HGGPUComputeDevice *__hidden))(this + 304);
  if (v2 && *v2 == off_1E6523A60)
  {
    v3 = *(_QWORD *)(this + 312);
    *a2 = v2;
    a2[1] = (void (***)(HGGPUComputeDevice *__hidden))v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void OZRenderParams::SharedInfo::~SharedInfo(OZRenderParams::SharedInfo *this)
{
  *(_QWORD *)this = &unk_1E65962D8;
  *((_QWORD *)this + 11) = &unk_1E6596308;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 32);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  *((_QWORD *)this + 11) = &off_1E65EB048;
  *((_BYTE *)this + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 12);
}

{
  *(_QWORD *)this = &unk_1E65962D8;
  *((_QWORD *)this + 11) = &unk_1E6596308;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 32);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  *((_QWORD *)this + 11) = &off_1E65EB048;
  *((_BYTE *)this + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 12);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZRenderParams::SharedInfo::~SharedInfo(OZRenderParams::SharedInfo *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_1E65962D8;
  *((_QWORD *)v1 + 11) = &unk_1E6596308;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 64), *((_QWORD **)v1 + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(v1 + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 8), *((_QWORD **)v1 + 2));
  *((_QWORD *)v1 + 11) = &off_1E65EB048;
  v1[104] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 12);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_1E65962D8;
  *((_QWORD *)v1 + 11) = &unk_1E6596308;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 64), *((_QWORD **)v1 + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(v1 + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 8), *((_QWORD **)v1 + 2));
  *((_QWORD *)v1 + 11) = &off_1E65EB048;
  v1[104] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 12);
  JUMPOUT(0x1B5E29170);
}

__n128 OZRotoshape::makeShapeRenderState@<Q0>(OZRotoshape *this@<X0>, const OZRenderState *a2@<X1>, CGColorSpaceRef space@<X2>, float a4@<S0>, uint64_t a5@<X8>)
{
  uint64_t v8;
  __n128 result;

  v8 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a5 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(v8 + 16);
  *(_WORD *)(a5 + 24) = 0;
  *(_BYTE *)(a5 + 26) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a5 + 32) = _Q0;
  *(_DWORD *)(a5 + 48) = 2;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)(a5 + 80), space);
  *(float *)(a5 + 88) = a4;
  *(_OWORD *)a5 = *(_OWORD *)&a2->var0.var0;
  *(_QWORD *)(a5 + 16) = a2->var0.var3;
  *(_BYTE *)(a5 + 24) = a2->var10;
  *(_BYTE *)(a5 + 26) = a2->var16;
  result = *(__n128 *)&a2->var1;
  *(__n128 *)(a5 + 32) = result;
  *(_DWORD *)(a5 + 48) = 1;
  return result;
}

void OZRotoshapeRender::OZRotoshapeRender(OZRotoshapeRender *this, OZRotoshape *a2, const OZRenderParams *a3)
{
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  LiGroup *v8;
  uint64_t v9;
  uint64_t v10;
  PCSharedCount v11;
  _BYTE v12[72];
  CMTime v13;
  CGColorSpace *v14;
  _BYTE v15[64];
  _QWORD v16[20];
  _QWORD v17[10];
  _BYTE v18[208];
  PCString v19;
  PCSharedCount v20;

  *((_QWORD *)this + 184) = &off_1E65EB048;
  *((_QWORD *)this + 185) = 0;
  *((_BYTE *)this + 1488) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E6596438);
  *(_QWORD *)this = &off_1E6596350;
  *((_QWORD *)this + 184) = &unk_1E6596418;
  *((_QWORD *)this + 2) = a2;
  OZRenderParams::OZRenderParams((OZRotoshapeRender *)((char *)this + 24), a3);
  *((_QWORD *)this + 181) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 182);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
  BlendingGamma = OZRenderParams::getBlendingGamma(a3);
  OZRotoshape::makeShapeRenderState(a2, (const OZRenderState *)a3, WorkingColorSpace, BlendingGamma, (uint64_t)&v13);
  *((_BYTE *)this + 1464) = OZShape::shouldDrawOnlyParticles((uint64_t)a2 + 18976, &v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  OZChannelBase::setRangeName((OZChannelBase *)a3, &v19);
  v8 = (LiGroup *)operator new();
  LiGroup::LiGroup(v8);
  v13.value = (CMTimeValue)v8;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v13.timescale, (LiGroup *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  LiGraphBuilder::LiGraphBuilder(v18, &v13, &v19);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v13.timescale);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v15);
  v17[9] = v18;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v13, a3);
  v9 = *((_QWORD *)a2 + 4732);
  if (v9)
  {
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v12, (OZImageNode *)(v9 + 6528), (OZRenderParams *)&v13);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, CMTime *, _BYTE *, _QWORD))(*(_QWORD *)v9 + 1928))(&v10, v9, &v13, v15, 0);
    *((_QWORD *)this + 181) = v10;
    PCSharedCount::PCSharedCount(&v20, &v11);
    PCSharedCount::operator=((uint64_t *)this + 182, (uint64_t *)&v20);
    PCSharedCount::~PCSharedCount(&v20);
    PCSharedCount::~PCSharedCount(&v11);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v12);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v13);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v17);
  std::__list_imp<unsigned int>::clear(v16);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v18);
}

void sub_1B2E697FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  OZRenderParams *v4;
  PCSharedCount *v5;
  PCSharedCount *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v8 - 72));
  PCSharedCount::~PCSharedCount(v6);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x6C8]);
  std::__list_imp<unsigned int>::clear(&STACK[0x628]);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x718]);
  PCSharedCount::~PCSharedCount(v5);
  OZRenderParams::~OZRenderParams(v4);
  OZChannelBase::setRangeName((OZChannelBase *)v3, (const PCString *)&off_1E6596438);
  *(_QWORD *)(v3 + 1472) = v7 + 16;
  *(_BYTE *)(v3 + 1488) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v3 + 1480));
  _Unwind_Resume(a1);
}

uint64_t OZRotoshapeRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 1464))
  {
    v3 = *(_QWORD *)(a1 + 1448);
    if (!v3)
      throw_PCNullPointerException(1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2, a3);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 232))(*(_QWORD *)(a1 + 16), a3, a1 + 24);
    return 1;
  }
}

uint64_t OZRotoshapeRender::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 1464))
    return 0;
  v2 = *(_QWORD *)(a1 + 1448);
  if (!v2)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 112))(v2, a2);
}

uint64_t OZRotoshapeRender::pixelTransformSupport(OZRotoshapeRender *this, const LiRenderParameters *a2)
{
  if (*((_BYTE *)a2 + 144))
    return 0;
  else
    return 6;
}

CGColorSpace **OZRotoshapeRender::getHelium@<X0>(OZRotoshapeRender *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  OZRotoshape *v5;
  FxColorDescription *v6;
  LiImageSource *v8;
  uint64_t DoShapeAntialiasing;

  v5 = (OZRotoshape *)*((_QWORD *)this + 2);
  v6 = (FxColorDescription *)((char *)this + 24);
  if (*((_BYTE *)this + 1464))
  {
    OZRotoshape::prepForGetHelium(*((OZRotoshape **)this + 2), a2, v6);
    v8 = (LiImageSource *)*((_QWORD *)this + 181);
    if (!v8)
      throw_PCNullPointerException(1);
    return (CGColorSpace **)LiImageSource::getHeliumPublic(a3, v8, a2);
  }
  else
  {
    DoShapeAntialiasing = OZRenderParams::getDoShapeAntialiasing((OZRotoshapeRender *)((char *)this + 24));
    return OZRotoshape::getHelium(v5, (const OZRenderState *)v6, a2, v6, DoShapeAntialiasing, (HGHWMultiBlend **)a3);
  }
}

CGColorSpace **OZRotoshape::prepForGetHelium(OZRotoshape *this, LiAgent *a2, FxColorDescription *a3)
{
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  OZScene **v7;
  OZMoShape *v8;
  OZShapeRenderParams *CurrentRenderParams;
  _OWORD v11[5];
  CGColorSpaceRef v12;
  int v13;
  _BYTE v14[8];
  _OWORD v15[5];
  CGColorSpaceRef space;
  int v17;

  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a3);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a3);
  OZRotoshape::makeShapeRenderState(this, (const OZRenderState *)a3, WorkingColorSpace, BlendingGamma, (uint64_t)v15);
  v7 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v14, v7);
  v11[2] = v15[2];
  v11[3] = v15[3];
  v11[4] = v15[4];
  v11[0] = v15[0];
  v11[1] = v15[1];
  v12 = space;
  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v8 = (OZRotoshape *)((char *)this + 18976);
  v13 = v17;
  CurrentRenderParams = (OZShapeRenderParams *)OZShape::getCurrentRenderParams((uint64_t)v8, (uint64_t)v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
  OZMoShape::validateChannels(v8, (const CMTime *)v15, CurrentRenderParams, 0, 1);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v14);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&space);
}

void sub_1B2E69B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CGColorSpace *a33)
{
  CGColorSpace **v33;

  PCCFRef<CGColorSpace *>::~PCCFRef(v33);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a22);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  _Unwind_Resume(a1);
}

CGColorSpace **OZRotoshape::getHelium@<X0>(OZRotoshape *this@<X0>, const OZRenderState *a2@<X1>, LiAgent *a3@<X2>, FxColorDescription *a4@<X4>, uint64_t a5@<X3>, HGHWMultiBlend **a6@<X8>)
{
  CGColorSpace **result;
  uint64_t RequestedColorDescription;
  CGColorSpace *v11;
  CGColorSpace *RequestedColorSpace;
  CGColorSpace *v13;
  CGColorSpace *WorkingColorSpace;
  HGHWMultiBlend *v15;
  CGColorSpace *v16;
  CGColorSpace *v17;
  int v18;
  PCToneMapMethod v19;
  BOOL v20;
  FxColorDescription space;

  result = OZRotoshape::_getHeliumInternal(this, a2, a3, a4, a5, a6);
  if (*a6)
  {
    PCColorDescription::PCColorDescription(&space._pcColorDesc);
    space._isPremultiplied = 1;
    if (LiAgent::isDynamicRangeTrackingRender((FxColorDescription **)a3))
    {
      RequestedColorDescription = LiAgent::getRequestedColorDescription(a3);
      FxColorDescription::FxColorDescription((uint64_t)&v17, RequestedColorDescription, 0);
      v11 = v17;
      if (space._pcColorDesc._colorSpaceRef._obj)
      {
        if (space._pcColorDesc._colorSpaceRef._obj != v17)
        {
          PCCFRefTraits<CGColorSpace *>::release(space._pcColorDesc._colorSpaceRef._obj);
          v11 = v17;
        }
      }
      space._pcColorDesc._colorSpaceRef._obj = v11;
      v17 = 0;
      space._pcColorDesc._dynamicRange = v18;
      space._pcColorDesc._toneMapMethod = v19;
      space._isPremultiplied = v20;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
    }
    else
    {
      RequestedColorSpace = (CGColorSpace *)LiAgent::getRequestedColorSpace(a3);
      FxMakeLegacyColorDescription(RequestedColorSpace, 1, (uint64_t)&v17);
      v13 = v17;
      if (space._pcColorDesc._colorSpaceRef._obj && space._pcColorDesc._colorSpaceRef._obj != v17)
      {
        PCCFRefTraits<CGColorSpace *>::release(space._pcColorDesc._colorSpaceRef._obj);
        v13 = v17;
      }
      space._pcColorDesc._colorSpaceRef._obj = v13;
      v17 = 0;
      space._pcColorDesc._dynamicRange = v18;
      space._pcColorDesc._toneMapMethod = v19;
      space._isPremultiplied = v20;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
      if (OZRenderParams::isRenderForHDR_Deprecated((OZRenderParams *)a4))
      {
        WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
        FxApplySDRToHDR((uint64_t)a6, WorkingColorSpace, 1, (uint64_t *)&v17);
        v15 = *a6;
        v16 = v17;
        if (*a6 == v17)
        {
          if (v15)
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v15 + 24))(v15);
        }
        else
        {
          if (v15)
          {
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v15 + 24))(v15);
            v16 = v17;
          }
          *a6 = v16;
        }
      }
    }
    LiAgent::setActualColorDescription((CGColorSpace **)a3, &space);
    return PCCFRef<CGColorSpace *>::~PCCFRef(&space._pcColorDesc._colorSpaceRef._obj);
  }
  return result;
}

void sub_1B2E69D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  va_list va;

  va_start(va, a5);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  if (*v5)
    (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
  _Unwind_Resume(a1);
}

void OZRotoshape::getBorderSize(OZRotoshape *this, const OZRenderState *a2, double *a3, double *a4)
{
  OZScene **v8;
  __int128 v9;
  int64_t var3;
  BOOL var10;
  BOOL var16;
  __int128 v13;
  int v14;
  CGColorSpace *v15;
  _BYTE v16[8];

  v8 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v16, v8);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v9);
  v9 = *(_OWORD *)&a2->var0.var0;
  var3 = a2->var0.var3;
  var10 = a2->var10;
  var16 = a2->var16;
  v13 = *(_OWORD *)&a2->var1;
  v14 = 1;
  OZShape::getBorderSize((uint64_t)this + 18976, (uint64_t)&v9, a3, a4);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v16);
}

void sub_1B2E69E74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)(v2 - 40));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRotoshape::getBorderSize(OZRotoshape *this, const OZRenderState *a2, double *a3, double *a4)
{
  OZRotoshape::getBorderSize((OZRotoshape *)((char *)this - 200), a2, a3, a4);
}

CGColorSpace **OZRotoshape::setLithiumTransform(OZRotoshape *this, LiSceneObject *a2, OZRenderState *a3)
{
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  _BOOL4 shouldDrawOnlyParticles;
  CGColorSpace **result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  __int128 v19[8];
  _OWORD v20[5];
  _OWORD v21[3];

  OZElement::setLithiumTransform((OZElement *)((char *)this + 200), a2, a3);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a3);
  OZRotoshape::makeShapeRenderState(this, a3, WorkingColorSpace, BlendingGamma, (uint64_t)v20);
  shouldDrawOnlyParticles = OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, (CMTime *)v20);
  result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v21);
  if (shouldDrawOnlyParticles)
  {
    v10 = *(_OWORD *)((char *)a2 + 88);
    v20[4] = *(_OWORD *)((char *)a2 + 72);
    v21[0] = v10;
    v11 = *(_OWORD *)((char *)a2 + 120);
    v21[1] = *(_OWORD *)((char *)a2 + 104);
    v21[2] = v11;
    v12 = *(_OWORD *)((char *)a2 + 24);
    v20[0] = *(_OWORD *)((char *)a2 + 8);
    v20[1] = v12;
    v13 = *(_OWORD *)((char *)a2 + 56);
    v20[2] = *(_OWORD *)((char *)a2 + 40);
    v20[3] = v13;
    (*(void (**)(_QWORD, LiSceneObject *, OZRenderState *))(**((_QWORD **)this + 4732) + 1912))(*((_QWORD *)this + 4732), a2, a3);
    v14 = *(_OWORD *)((char *)a2 + 88);
    v19[4] = *(_OWORD *)((char *)a2 + 72);
    v19[5] = v14;
    v15 = *(_OWORD *)((char *)a2 + 120);
    v19[6] = *(_OWORD *)((char *)a2 + 104);
    v19[7] = v15;
    v16 = *(_OWORD *)((char *)a2 + 24);
    v19[0] = *(_OWORD *)((char *)a2 + 8);
    v19[1] = v16;
    v17 = *(_OWORD *)((char *)a2 + 56);
    v19[2] = *(_OWORD *)((char *)a2 + 40);
    v19[3] = v17;
    PCMatrix44Tmpl<double>::operator*((uint64_t)v20, v19, (uint64_t)v18);
    return (CGColorSpace **)(*(uint64_t (**)(LiSceneObject *, _BYTE *))(*(_QWORD *)a2 + 16))(a2, v18);
  }
  return result;
}

void sub_1B2E69FD0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

CGColorSpace **`non-virtual thunk to'OZRotoshape::setLithiumTransform(OZRotoshape *this, LiSceneObject *a2, OZRenderState *a3)
{
  return OZRotoshape::setLithiumTransform((OZRotoshape *)((char *)this - 200), a2, a3);
}

uint64_t OZRotoshape::isPrecomposed(OZRotoshape *this, const CMTime *a2)
{
  char *v4;

  if (((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 860) + 496))((char *)this + 6880, 1) & 1) != 0)
    return 1;
  v4 = (char *)this + 200;
  if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 416))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *))(*(_QWORD *)v4 + 1864))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *, const CMTime *))(*(_QWORD *)v4 + 1592))((char *)this + 200, a2) & 1) != 0
    || ((*(uint64_t (**)(OZRotoshape *))(*(_QWORD *)this + 384))(this) & 1) != 0
    || ((*(uint64_t (**)(OZRotoshape *))(*(_QWORD *)this + 392))(this) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(OZRotoshape *))(*(_QWORD *)this + 400))(this);
  }
}

uint64_t `non-virtual thunk to'OZRotoshape::isPrecomposed(OZRotoshape *this, const CMTime *a2)
{
  return OZRotoshape::isPrecomposed((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::shouldPrecompose(OZRotoshape *this, OZRenderState *a2)
{
  uint64_t v4;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  BOOL var10;
  BOOL var16;
  __int128 v9;
  int v10;
  CGColorSpace *v11;

  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  var0 = a2->var0;
  var10 = a2->var10;
  var16 = a2->var16;
  v9 = *(_OWORD *)&a2->var1;
  v10 = 1;
  if (OZShape::shouldDrawFillAndParticles((uint64_t)this + 18976, (CMTime *)&var0)
    || OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, (CMTime *)&var0)
    && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4733) + 64))(*((_QWORD *)this + 4733)) & 1) != 0)
  {
    v4 = (*(uint64_t (**)(OZRotoshape *, OZRenderState *))(*(_QWORD *)this + 104))(this, a2);
  }
  else
  {
    v4 = 0;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  return v4;
}

void sub_1B2E6A1B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::areEffectsAppliedInScreenSpace(OZRotoshape *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4733);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::areEffectsAppliedInScreenSpace(OZRotoshape *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3892);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

double OZRotoshape::castShadowMaxScale(OZRotoshape *this, const OZRenderParams *a2)
{
  int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = (*(uint64_t (**)(OZRotoshape *, __int128 *))(*(_QWORD *)this + 104))(this, &v6);
  result = 1.0;
  if (v4)
    return OZElement::castShadowMaxScale((OZElement *)((char *)this + 200), a2);
  return result;
}

double `non-virtual thunk to'OZRotoshape::castShadowMaxScale(OZRotoshape *this, const OZRenderParams *a2)
{
  int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = (*(uint64_t (**)(char *, __int128 *))(*((_QWORD *)this - 25) + 104))((char *)this - 200, &v6);
  result = 1.0;
  if (v4)
    return OZElement::castShadowMaxScale((OZElement *)this, a2);
  return result;
}

uint64_t OZRotoshape::doesTransformFromLocalToScreenSpace(OZRotoshape *this, OZRenderState *a2)
{
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  _BOOL4 shouldDrawOnlyParticles;
  CMTime v8[3];
  CGColorSpace *v9;
  OZRenderState v10;

  OZRenderState::OZRenderState(&v10, a2);
  if ((OZRotoshape::shouldPrecompose(this, &v10) & 1) != 0)
    return 1;
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a2);
  OZRotoshape::makeShapeRenderState(this, a2, WorkingColorSpace, BlendingGamma, (uint64_t)v8);
  shouldDrawOnlyParticles = OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, v8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
  if (shouldDrawOnlyParticles)
    return (*(uint64_t (**)(_QWORD, OZRenderState *))(**((_QWORD **)this + 4732) + 2216))(*((_QWORD *)this + 4732), a2);
  else
    return OZElement::doesTransformFromLocalToScreenSpace((uint64_t)this + 200);
}

void sub_1B2E6A380(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::doesTransformFromLocalToScreenSpace(OZRotoshape *this, OZRenderState *a2)
{
  return OZRotoshape::doesTransformFromLocalToScreenSpace((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::setGeodeProperties3D(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t result;

  OZElement::setGeodeProperties3D(a1 + 200, a2, a3, a4);
  v6 = *(_QWORD *)(a1 + 37864);
  if (v6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    if ((_DWORD)result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  }
  else
  {
    result = 0;
  }
  a4[556] = result;
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::setGeodeProperties3D(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return OZRotoshape::setGeodeProperties3D(a1 - 200, a2, a3, a4);
}

CGColorSpace **OZRotoshape::buildRenderGraph(OZRotoshape *this, FxColorDescription *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  _BOOL4 shouldDrawOnlyParticles;
  int shouldPrecompose;
  uint64_t i;
  _BYTE *v13;
  __int128 v14;
  _BYTE v16[128];
  _BYTE v17[64];
  _QWORD v18[3];
  char v19;
  uint64_t v20;
  OZRenderState v21;
  CMTime v22[3];
  CGColorSpace *v23;

  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a2);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a2);
  OZRotoshape::makeShapeRenderState(this, (const OZRenderState *)a2, WorkingColorSpace, BlendingGamma, (uint64_t)v22);
  shouldDrawOnlyParticles = OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, v22);
  OZRenderState::OZRenderState(&v21, (const OZRenderState *)a2);
  shouldPrecompose = OZRotoshape::shouldPrecompose(this, &v21);
  if (((shouldPrecompose | !shouldDrawOnlyParticles) & 1) == 0)
    shouldPrecompose = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4733) + 64))(*((_QWORD *)this + 4733));
  if (shouldPrecompose)
    LiGraphBuilder::partitionWorld((uint64_t)a3);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v17, a4);
  LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)v16);
  for (i = 0; i != 128; i += 32)
  {
    v13 = &v17[i];
    v14 = *(_OWORD *)&v16[i + 16];
    *((_OWORD *)v13 + 6) = *(_OWORD *)&v16[i];
    *((_OWORD *)v13 + 7) = v14;
  }
  if (shouldDrawOnlyParticles
    && (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4733) + 64))(*((_QWORD *)this + 4733)))
  {
    v19 = 0;
  }
  OZElement::buildRenderGraph((OZElement *)((char *)this + 200), (CMTime *)a2, a3, (const OZRenderGraphState *)v17);
  if (shouldPrecompose)
    LiGraphBuilder::partitionWorld((uint64_t)a3);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v20);
  std::__list_imp<unsigned int>::clear(v18);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v23);
}

void sub_1B2E6A578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a54);
  std::__list_imp<unsigned int>::clear(&a34);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v54 - 80));
  _Unwind_Resume(a1);
}

CGColorSpace **`non-virtual thunk to'OZRotoshape::buildRenderGraph(OZRotoshape *this, FxColorDescription *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  return OZRotoshape::buildRenderGraph((OZRotoshape *)((char *)this - 200), a2, a3, a4);
}

{
  return OZRotoshape::buildRenderGraph((OZRotoshape *)((char *)this - 6728), a2, a3, a4);
}

void OZRotoshape::makeRenderImageSource(OZRotoshape *this@<X0>, OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  LiGroup *v8;
  LiGroup *v9;
  uint64_t i;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  OZImageNode *v14;
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  _BOOL4 shouldDrawFillAndParticles;
  OZRotoshapeRender *v18;
  LiGeode *v19;
  OZRotoshapeRender *v20;
  PCSharedCount v21;
  PCSharedCount v22;
  PCSharedCount v23;
  PCSharedCount v24;
  _BYTE v25[72];
  CMTime v26[3];
  CGColorSpace *v27;
  OZRenderState v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  PCSharedCount v39;
  PCSharedCount v40;
  LiGroup *v41;
  PCSharedCount v42[7];
  _QWORD v43[3];
  char v44;
  _QWORD v45[10];
  PCSharedCount v46[26];
  PCString v47;
  OZRenderState v48;

  OZRenderState::OZRenderState(&v48, a2);
  if ((OZRotoshape::shouldPrecompose(this, &v48) & 1) != 0)
  {
    OZChannelBase::setRangeName((OZChannelBase *)a2, &v47);
    v8 = (LiGroup *)operator new();
    LiGroup::LiGroup(v8);
    v41 = v8;
    PCSharedCount::PCSharedCount(v42, (LiGroup *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    LiGraphBuilder::LiGraphBuilder(v46, &v41, &v47);
    PCSharedCount::~PCSharedCount(v42);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v41, a3);
    v45[9] = v46;
    v9 = (LiGroup *)operator new();
    LiGroup::LiGroup(v9);
    v39.var0 = (PC_Sp_counted_base *)v9;
    PCSharedCount::PCSharedCount(&v40, (LiGroup *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
    if (!v9)
      throw_PCNullPointerException(1);
    *((_DWORD *)v39.var0 + 130) = *((_DWORD *)this + 70);
    (*(void (**)(LiGroup *, uint64_t))(*(_QWORD *)v9 + 192))(v9, 1);
    v38 = 0x3FF0000000000000;
    v35 = 0x3FF0000000000000;
    v32 = 0x3FF0000000000000;
    v29 = 0x3FF0000000000000;
    v30 = 0u;
    v31 = 0u;
    v33 = 0u;
    v34 = 0u;
    v36 = 0u;
    v37 = 0u;
    OZRenderState::OZRenderState(&v28, a2);
    v28.var4 = 1;
    (*(void (**)(char *, uint64_t *, OZRenderState *))(*((_QWORD *)this + 25) + 1256))((char *)this + 200, &v29, &v28);
    PCMatrix44Tmpl<double>::operator*((uint64_t)a3 + 96, (__int128 *)&v29, (uint64_t)v26);
    for (i = 0; i != 128; i += 32)
    {
      v11 = (_OWORD *)((char *)&v29 + i);
      v12 = *(_OWORD *)((char *)&v26[0].epoch + i);
      *v11 = *(_OWORD *)((char *)&v26[0].value + i);
      v11[1] = v12;
    }
    if (!v39.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, uint64_t *))(*(_QWORD *)v39.var0 + 16))(v39.var0, &v29);
    (*(void (**)(char *, OZRenderState *, LiGroup **))(*((_QWORD *)this + 25) + 2064))((char *)this + 200, a2, &v41);
    v44 = 1;
    LiGraphBuilder::addGroupAndMakeCurrent(v46, &v39);
    v13 = *((_QWORD *)this + 4732);
    if (v13)
      v14 = (OZImageNode *)(v13 + 6528);
    else
      v14 = 0;
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v25, v14, (OZRenderParams *)a2);
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
    BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a2);
    OZRotoshape::makeShapeRenderState(this, a2, WorkingColorSpace, BlendingGamma, (uint64_t)v26);
    shouldDrawFillAndParticles = OZShape::shouldDrawFillAndParticles((uint64_t)this + 18976, v26);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v27);
    if (shouldDrawFillAndParticles)
    {
      v18 = (OZRotoshapeRender *)operator new();
      OZRotoshapeRender::OZRotoshapeRender(v18, this, (const OZRenderParams *)a2);
      v26[0].value = (CMTimeValue)v18;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v26[0].timescale, (OZRotoshapeRender *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24)));
      v19 = (LiGeode *)operator new();
      LiGeode::LiGeode(v19, (LiImageSource *)v26[0].value);
      v23.var0 = (PC_Sp_counted_base *)v19;
      PCSharedCount::PCSharedCount(&v24, (LiGeode *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
      if (v19)
        (*(void (**)(uint64_t, LiGeode *, char *, OZRenderState *))(*(_QWORD *)v13 + 2112))(v13, v19, (char *)a3 + 224, a2);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28696), MEMORY[0x1E0CA2E68], 0.0))
      {
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v21, &v23);
        LiGraphBuilder::add2d(v46, &v21);
        PCSharedCount::~PCSharedCount(&v22);
        (*(void (**)(uint64_t, OZRenderState *, PCSharedCount *, LiGroup **))(*(_QWORD *)v13 + 2016))(v13, a2, v46, &v41);
      }
      else
      {
        (*(void (**)(uint64_t, OZRenderState *, PCSharedCount *, LiGroup **))(*(_QWORD *)v13 + 2016))(v13, a2, v46, &v41);
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v21, &v23);
        LiGraphBuilder::add2d(v46, &v21);
        PCSharedCount::~PCSharedCount(&v22);
      }
      PCSharedCount::~PCSharedCount(&v24);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v26[0].timescale);
    }
    else
    {
      (*(void (**)(uint64_t, OZRenderState *, PCSharedCount *, LiGroup **))(*(_QWORD *)v13 + 2016))(v13, a2, v46, &v41);
    }
    LiGraphBuilder::endInsertingIntoGroup((LiGraphBuilder *)v46);
    LiGraphBuilder::render(v46, (PCSharedCount *)v26);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a4, (const PCSharedCount *)v26);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v26[0].timescale);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v25);
    PCSharedCount::~PCSharedCount(&v40);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v45);
    std::__list_imp<unsigned int>::clear(v43);
    LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v46);
  }
  else
  {
    v20 = (OZRotoshapeRender *)operator new();
    OZRotoshapeRender::OZRotoshapeRender(v20, this, (const OZRenderParams *)a2);
    a4->var0 = (PC_Sp_counted_base *)v20;
    PCSharedCount::PCSharedCount(a4 + 1, (OZRotoshapeRender *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
  }
}

void sub_1B2E6AA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  PCSharedCount *v6;
  PCSharedCount *v7;
  PCSharedCount *v8;
  PCSharedCount *v9;
  va_list va;

  va_start(va, a6);
  PCSharedCount::~PCSharedCount(v7 + 1);
  PCSharedCount::~PCSharedCount(v9);
  PCSharedCount::~PCSharedCount(v8);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)va);
  PCSharedCount::~PCSharedCount(v6);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x368]);
  std::__list_imp<unsigned int>::clear(&STACK[0x2C8]);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x3B8]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRotoshape::makeRenderImageSource(OZRotoshape *this@<X0>, OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  OZRotoshape::makeRenderImageSource((OZRotoshape *)((char *)this - 200), a2, a3, a4);
}

{
  OZRotoshape::makeRenderImageSource((OZRotoshape *)((char *)this - 6728), a2, a3, a4);
}

void OZRotoshape::getOriginalBounds(Li3DEngineScene *a1, __int128 *a2, uint64_t a3)
{
  __int128 v11;
  OZScene **v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  int v19;
  CGColorSpace *v20;
  _BYTE v21[8];
  void *v22;
  double Seconds;
  __int128 v24;
  __int128 v25;
  CMTime time;

  time = *(CMTime *)a3;
  Seconds = CMTimeGetSeconds(&time);
  v22 = &unk_1E64FC1E8;
  v24 = 0uLL;
  __asm { FMOV            V1.2D, #-1.0 }
  v25 = _Q1;
  if (OZValueCache<OZBoundsCacheItem>::find((uint64_t)a1 + 38128, (uint64_t)&v22, Seconds))
  {
    if (a2)
    {
      v11 = v25;
      *a2 = v24;
      a2[1] = v11;
    }
  }
  else
  {
    v12 = (OZScene **)Li3DEngineScene::sceneManager(a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v21, v12);
    OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v14);
    v14 = *(_OWORD *)a3;
    v15 = *(_QWORD *)(a3 + 16);
    v16 = *(_BYTE *)(a3 + 202);
    v17 = *(_BYTE *)(a3 + 220);
    v18 = *(_OWORD *)(a3 + 24);
    v19 = 1;
    OZMoShape::getOriginalBounds((uint64_t)a1 + 18976, (uint64_t)a2, &v14);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v20);
    if (a2)
    {
      v13 = a2[1];
      v24 = *a2;
      v25 = v13;
      OZValueCache<OZBoundsCacheItem>::add((uint64_t)a1 + 38128, (uint64_t)&v22);
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v21);
  }
}

void sub_1B2E6AD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRotoshape::getOriginalBounds(uint64_t a1, __int128 *a2, uint64_t a3)
{
  OZRotoshape::getOriginalBounds((Li3DEngineScene *)(a1 - 200), a2, a3);
}

CGColorSpace **OZRotoshape::getUIBounds(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  char v9;
  char v10;
  __int128 v11;
  int v12;
  CGColorSpace *v13;

  v5 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v7);
  v7 = *a3;
  v8 = *((_QWORD *)a3 + 2);
  v9 = *((_BYTE *)a3 + 202);
  v10 = *((_BYTE *)a3 + 220);
  v11 = *(__int128 *)((char *)a3 + 24);
  v12 = 1;
  OZMoShape::getUIBounds(v5, a2, (uint64_t)&v7);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
}

void sub_1B2E6AE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

CGColorSpace **`non-virtual thunk to'OZRotoshape::getUIBounds(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return OZRotoshape::getUIBounds(a1 - 200, a2, a3);
}

CGColorSpace **OZRotoshape::getOriginalBoundsNoLock(uint64_t a1, float64x2_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;
  int v14;
  CGColorSpace *v15;

  v7 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v9);
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 2);
  v11 = *((_BYTE *)a3 + 202);
  v12 = *((_BYTE *)a3 + 220);
  v13 = *(__int128 *)((char *)a3 + 24);
  v14 = 1;
  OZMoShape::getShapeBounds(v7, a2, (uint64_t)&v9, a4);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
}

void sub_1B2E6AED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::getProjectedBounds(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  CMTime v13;
  _BYTE v14[24];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v13);
  v13 = *(CMTime *)a4;
  v14[0] = *(_BYTE *)(a4 + 202);
  v14[2] = *(_BYTE *)(a4 + 220);
  *(_OWORD *)&v14[8] = *(_OWORD *)(a4 + 24);
  LODWORD(v15) = 1;
  LODWORD(v8) = OZShape::shouldDrawOnlyParticles(v8, &v13);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v17);
  if (!(_DWORD)v8)
    return OZElement::getProjectedBounds((OZElement *)(a1 + 200), a2, a3, a4);
  v20 = 0x3FF0000000000000;
  v17 = 0x3FF0000000000000;
  *(_QWORD *)&v14[16] = 0x3FF0000000000000;
  v13.value = 0x3FF0000000000000;
  *(_OWORD *)&v13.timescale = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v18 = 0u;
  v19 = 0u;
  v10 = *(_QWORD *)(a1 + 200);
  v9 = a1 + 200;
  (*(void (**)(uint64_t, CMTime *, uint64_t))(v10 + 1256))(v9, &v13, a4);
  v11 = PCMatrix44Tmpl<double>::leftMult((uint64_t)&v13, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, CMTime *, uint64_t, double))(**(_QWORD **)(v9 + 37664) + 56))(*(_QWORD *)(v9 + 37664), a2, &v13, a4, v11);
}

void sub_1B2E6B00C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::getProjectedBounds(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  return OZRotoshape::getProjectedBounds(a1 - 200, a2, a3, a4);
}

double OZRotoshape::calcHashForState(uint64_t a1, void *lpsrc, uint64_t a3, uint64_t **a4, int a5)
{
  void *v10;

  if (!v10)
    __cxa_bad_cast();
  (*(void (**)(void *, _QWORD))(*(_QWORD *)v10 + 56))(v10, *(unsigned int *)(a3 + 332));
  return OZSceneNode::calcHashForState(a1 + 200, lpsrc, (CMTime *)a3, a4, a5);
}

double `non-virtual thunk to'OZRotoshape::calcHashForState(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4, int a5)
{
  return OZRotoshape::calcHashForState(a1 - 200, a2, a3, a4, a5);
}

double OZRotoshape::calcHashForStateSelfOnly(OZRotoshape *this, PCSerializerWriteStream *lpsrc, CMTime *a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  uint64_t v8;
  double result;
  CMTime v10;

  if (!v6)
    __cxa_bad_cast();
  v7 = v6;
  v10 = *a3;
  (*(void (**)(char *, PCSerializerWriteStream *, CMTime *))(*((_QWORD *)this + 580) + 448))((char *)this + 4640, lpsrc, &v10);
  v10 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 6752), lpsrc, &v10);
  v10 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 1032), lpsrc, &v10);
  v8 = *((_QWORD *)this + 88) & 0x8000;
  (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)lpsrc + 72))(lpsrc, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v10 = *a3;
  OZMoShape::calcHashForState((OZRotoshape *)((char *)this + 18976), lpsrc, &v10);
  *(_OWORD *)&v10.value = *(_OWORD *)PCHashWriteStream::getHash(v7)->i8;
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v7, (__n128 *)&v10).n128_u64[0];
  return result;
}

CGColorSpace **OZRotoshape::_getHeliumInternal@<X0>(OZRotoshape *this@<X0>, const OZRenderState *a2@<X1>, LiAgent *a3@<X2>, FxColorDescription *a4@<X4>, uint64_t a5@<X3>, HGHWMultiBlend **a6@<X8>)
{
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t i;
  _OWORD *v20;
  __int128 v21;
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  unsigned int RenderQuality;
  int v25;
  char v26;
  double v27;
  float v28;
  CGColorSpace *v29;
  OZScene **v30;
  int HeliumParameters;
  uint64_t v33;
  _BYTE v34[1328];
  HGBitmapLoader *v35;
  CMTime v36;
  BOOL v37;
  double v38;
  double v39;
  int v40;
  uint64_t HeliumRenderer;
  LiAgent *v42;
  FxColorDescription *v43;
  CGColorSpace *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[8];

  v12 = (__int128 *)*((_QWORD *)a3 + 20);
  v13 = v12[3];
  v15 = *v12;
  v14 = v12[1];
  v55[2] = v12[2];
  v55[3] = v13;
  v55[0] = v15;
  v55[1] = v14;
  v16 = v12[7];
  v18 = v12[4];
  v17 = v12[5];
  v55[6] = v12[6];
  v55[7] = v16;
  v55[4] = v18;
  v55[5] = v17;
  v54 = 0x3FF0000000000000;
  v51 = 0x3FF0000000000000;
  v48 = 0x3FF0000000000000;
  v45 = 0x3FF0000000000000;
  v46 = 0u;
  v47 = 0u;
  v49 = 0u;
  v50 = 0u;
  v52 = 0u;
  v53 = 0u;
  LiAgent::getInversePixelTransform(a3, 0.0, (uint64_t)v34);
  for (i = 0; i != 128; i += 32)
  {
    v20 = (_OWORD *)((char *)&v45 + i);
    v21 = *(_OWORD *)&v34[i + 16];
    *v20 = *(_OWORD *)&v34[i];
    v20[1] = v21;
  }
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a4);
  OZRotoshape::makeShapeRenderState(this, a2, WorkingColorSpace, BlendingGamma, (uint64_t)&v36);
  HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a3);
  v37 = *(_DWORD *)(*(_QWORD *)LiAgent::getRenderDevice((LiRenderParameters **)a3) + 8) == 0;
  v42 = a3;
  v43 = a4;
  RenderQuality = OZRenderParams::getRenderQuality((OZRenderParams *)a4);
  if (RenderQuality > 6)
    v25 = 2;
  else
    v25 = *(_DWORD *)&asc_1B355E980[4 * RenderQuality];
  v40 = v25;
  if (OZRenderParams::getReducedResolutionMedia((OZRenderParams *)a4))
    goto LABEL_7;
  v27 = v38;
  if (v38 > v39)
    v27 = v39;
  v28 = v27;
  if (v28 <= 0.3)
  {
    v26 = 2;
    goto LABEL_15;
  }
  if (v28 < 1.0 && v28 > 0.3)
  {
LABEL_7:
    v26 = 1;
LABEL_15:
    v40 <<= v26;
  }
  v29 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
  LiAgent::setActualColorSpace(a3, v29);
  OZMoShape::getHelium((uint64_t)this + 18976, (uint64_t)&v36, (uint64_t)v55, (uint64_t)&v45, a5, &v35);
  if (v35)
  {
    *a6 = v35;
  }
  else
  {
    OZShapeRenderParams::OZShapeRenderParams((OZShapeRenderParams *)v34);
    v30 = (OZScene **)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v33, v30);
    HeliumParameters = OZShape::getHeliumParameters((uint64_t)this + 18976, (uint64_t)&v36, (double *)v55, (uint64_t)&v45, a5, (uint64_t)v34);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v33);
    if (HeliumParameters)
      OZShape::getHeliumRender((uint64_t)this + 18976, &v36, (double *)v55, &v45, (uint64_t)v34, a6);
    else
      *a6 = 0;
    OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)v34);
    if (v35)
      (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v35 + 24))(v35);
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v44);
}

void sub_1B2E6B4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)va);
  if (STACK[0x538])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x538] + 24))(STACK[0x538]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x590]);
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::reloadResources(OZRotoshape *this, PGContext *a2)
{
  return OZShape::reloadResources((OZRotoshape *)((char *)this + 18976));
}

uint64_t `non-virtual thunk to'OZRotoshape::reloadResources(OZRotoshape *this, PGContext *a2)
{
  return OZShape::reloadResources((OZRotoshape *)((char *)this + 18776));
}

void OZRotoshape::buildLighting(OZRotoshape *this, LiGeode *a2, const LiLightSet *a3, FxColorDescription *a4)
{
  char *v8;
  CGColorSpace *WorkingColorSpace;
  float BlendingGamma;
  int shouldDrawParticles;
  uint64_t v12;
  CMTime v13[3];
  CGColorSpace *v14;

  v8 = (char *)this + 18976;
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a4);
  OZRotoshape::makeShapeRenderState(this, (const OZRenderState *)a4, WorkingColorSpace, BlendingGamma, (uint64_t)v13);
  shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)v8, v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  v12 = *((_QWORD *)this + 4733);
  if (!v12 || (shouldDrawParticles & (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12) & 1) == 0)
    OZElement::buildLighting((OZElement *)((char *)this + 200), a2, a3, (const OZRenderParams *)a4);
}

void sub_1B2E6B618(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRotoshape::buildLighting(OZRotoshape *this, LiGeode *a2, const LiLightSet *a3, FxColorDescription *a4)
{
  OZRotoshape::buildLighting((OZRotoshape *)((char *)this - 200), a2, a3, a4);
}

_QWORD *OZRotoshape::buildMaterials@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *result;

  result = OZElement::buildMaterials((OZElement *)(a1 + 200), a2, a3, a4, a5);
  if (*(_BYTE *)(a5 + 101))
  {
    result = (_QWORD *)OZRenderParams::getRenderQuality((OZRenderParams *)a2);
    *(_BYTE *)(a5 + 104) = (_DWORD)result == 6;
  }
  return result;
}

void sub_1B2E6B678(_Unwind_Exception *a1)
{
  LiMaterialProperties *v1;

  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'OZRotoshape::buildMaterials@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return OZRotoshape::buildMaterials(a1 - 200, a2, a3, a4, a5);
}

uint64_t OZRotoshape::openMedia(OZRotoshape *this)
{
  return OZMoShape::openMedia((OZRotoshape *)((char *)this + 18976));
}

uint64_t `non-virtual thunk to'OZRotoshape::openMedia(OZRotoshape *this)
{
  return OZMoShape::openMedia((OZRotoshape *)((char *)this + 18776));
}

uint64_t OZRotoshape::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin(a1 + 200, a2, a3, a4, a5);
  return OZMoShape::prerollBegin(a1 + 18976);
}

uint64_t `non-virtual thunk to'OZRotoshape::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin(a1, a2, a3, a4, a5);
  return OZMoShape::prerollBegin(a1 + 18776);
}

uint64_t OZRotoshape::prerollEnd(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3);
  return OZMoShape::prerollEnd((uint64_t)this + 18976);
}

uint64_t `non-virtual thunk to'OZRotoshape::prerollEnd(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  return OZMoShape::prerollEnd((uint64_t)this + 18776);
}

uint64_t OZRotoshape::setRate(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);
  return OZMoShape::setRate((uint64_t)this + 18976);
}

uint64_t `non-virtual thunk to'OZRotoshape::setRate(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  return OZMoShape::setRate((uint64_t)this + 18776);
}

uint64_t OZRotoshape::scheduleTokens(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD v11[3];
  void **v12;

  memset(v11, 0, sizeof(v11));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v11, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 200) + 184))(a1 + 200, a2, v11, a4);
  OZSceneNode::scheduleTokens(a1 + 200, a2, (uint64_t)v11, a4, a5);
  v9 = OZMoShape::scheduleTokens(a1 + 18976);
  v12 = (void **)v11;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  return v9;
}

void sub_1B2E6B960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::scheduleTokens(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  return OZRotoshape::scheduleTokens(a1 - 200, a2, a3, a4, a5);
}

uint64_t OZRotoshape::hintTokensWillImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v9, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 200) + 184))(a1 + 200, a2, v9, a4);
  OZSceneNode::hintTokensWillImage(a1 + 200, a2, (uint64_t)v9, a4);
  v7 = OZMoShape::hintTokensWillImage(a1 + 18976);
  v10 = (void **)v9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v7;
}

void sub_1B2E6BA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::hintTokensWillImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  return OZRotoshape::hintTokensWillImage(a1 - 200, a2, a3, a4);
}

uint64_t OZRotoshape::getTokensImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  uint64_t TokensImage;
  _QWORD v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v9, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(a1 + 200) + 184))(a1 + 200, a2, v9, a4);
  OZSceneNode::getTokensImage(a1 + 200, a2, (uint64_t)v9, a4);
  TokensImage = OZMoShape::getTokensImage(a1 + 18976);
  v10 = (void **)v9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  return TokensImage;
}

void sub_1B2E6BB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::getTokensImage(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  return OZRotoshape::getTokensImage(a1 - 200, a2, a3, a4);
}

uint64_t OZRotoshape::pruneTokensAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v7;
  CMTime v8;

  v8 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this + 200, &v8, a3);
  v7 = *a2;
  return OZMoShape::pruneTokensAtTime((OZRotoshape *)((char *)this + 18976), &v7, a3);
}

uint64_t `non-virtual thunk to'OZRotoshape::pruneTokensAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v7;
  CMTime v8;

  v8 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v8, a3);
  v7 = *a2;
  return OZMoShape::pruneTokensAtTime((OZRotoshape *)((char *)this + 18776), &v7, a3);
}

uint64_t OZRotoshape::pruneTokensExceptAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v7;
  CMTime v8;

  v8 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this + 200, &v8, a3);
  v7 = *a2;
  return OZMoShape::pruneTokensExceptAtTime((OZRotoshape *)((char *)this + 18976), &v7, a3);
}

uint64_t `non-virtual thunk to'OZRotoshape::pruneTokensExceptAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v7;
  CMTime v8;

  v8 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v8, a3);
  v7 = *a2;
  return OZMoShape::pruneTokensExceptAtTime((OZRotoshape *)((char *)this + 18776), &v7, a3);
}

uint64_t OZRotoshape::pruneAllTokens(OZRotoshape *this, const char *a2)
{
  OZSceneNode::pruneAllTokens((uint64_t)this + 200, a2);
  return OZMoShape::pruneAllTokens((OZRotoshape *)((char *)this + 18976), a2);
}

uint64_t `non-virtual thunk to'OZRotoshape::pruneAllTokens(OZRotoshape *this, const char *a2)
{
  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  return OZMoShape::pruneAllTokens((OZRotoshape *)((char *)this + 18776), a2);
}

void OZRotoshapeRender::~OZRotoshapeRender(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E6596350;
  this[184].var0 = (PC_Sp_counted_base *)&unk_1E6596418;
  PCSharedCount::~PCSharedCount(this + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[3]);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E6596438);
  this[184].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[186].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[185].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E6596350;
  this[184].var0 = (PC_Sp_counted_base *)&unk_1E6596418;
  PCSharedCount::~PCSharedCount(this + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[3]);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E6596438);
  this[184].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[186].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[185].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZRotoshapeRender::~OZRotoshapeRender(OZRotoshapeRender *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6596350;
  v1[184].var0 = (PC_Sp_counted_base *)&unk_1E6596418;
  PCSharedCount::~PCSharedCount(v1 + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[3]);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E6596438);
  v1[184].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[186].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[185].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E6596350;
  v1[184].var0 = (PC_Sp_counted_base *)&unk_1E6596418;
  PCSharedCount::~PCSharedCount(v1 + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[3]);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E6596438);
  v1[184].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[186].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[185].var0);
  JUMPOUT(0x1B5E29170);
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  PCSharedCount *v7;

  OZChannelObjectRootBase::OZChannelObjectRootBase(this, a2, a3, a4, a5, a6);
  v7->var0 = (PC_Sp_counted_base *)&off_1E65965E0;
  v7[2].var0 = (PC_Sp_counted_base *)&unk_1E6596978;
  v7[28].var0 = (PC_Sp_counted_base *)&v7[28];
  v7[29].var0 = (PC_Sp_counted_base *)&v7[28];
  v7[30].var0 = 0;
  PCSharedCount::PCSharedCount(v7 + 31);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
}

void sub_1B2E6BFC4(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  _QWORD *v2;

  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelObjectRoot_Factory::getInstance(this);
  OZChannelObjectRootBase::OZChannelObjectRootBase(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65965E0;
  *((_QWORD *)this + 2) = &unk_1E6596978;
  *((_QWORD *)this + 28) = (char *)this + 224;
  *((_QWORD *)this + 29) = (char *)this + 224;
  *((_QWORD *)this + 30) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
}

void sub_1B2E6C06C(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  _QWORD *v2;

  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot_Factory::getInstance(OZChannelObjectRoot_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelObjectRoot_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelObjectRoot_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelObjectRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelObjectRoot_Factory::_instance;
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, const OZTimeMarkerSet **a2, OZChannelFolder *a3)
{
  PCSharedCount *v5;
  OZTimeMarkerSet *v6;

  OZChannelObjectRootBase::OZChannelObjectRootBase(this, (const OZChannelObjectRootBase *)a2, a3);
  v5->var0 = (PC_Sp_counted_base *)&off_1E65965E0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E6596978;
  v5[28].var0 = (PC_Sp_counted_base *)&v5[28];
  v5[29].var0 = (PC_Sp_counted_base *)&v5[28];
  v5[30].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 31);
  *((_QWORD *)this + 26) = 0;
  if (a2[27])
  {
    v6 = (OZTimeMarkerSet *)operator new();
    OZTimeMarkerSet::OZTimeMarkerSet(v6, a2[27]);
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 27) = v6;
}

void sub_1B2E6C188(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  _QWORD *v2;
  PCString *v3;
  uint64_t v4;

  MEMORY[0x1B5E29170](v4, 0x10A1C40A4A8B666);
  PCString::~PCString(v3);
  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCSharedCount *v5;

  OZChannelObjectRootBase::OZChannelObjectRootBase(this, a2, a3, a4);
  v5->var0 = (PC_Sp_counted_base *)&off_1E65965E0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E6596978;
  v5[28].var0 = (PC_Sp_counted_base *)&v5[28];
  v5[29].var0 = (PC_Sp_counted_base *)&v5[28];
  v5[30].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 31);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
}

void sub_1B2E6C230(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  _QWORD *v2;

  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::~OZChannelObjectRoot(PCString *this)
{
  __CFString *var0;

  this->var0 = (__CFString *)&off_1E65965E0;
  this[2].var0 = (__CFString *)&unk_1E6596978;
  var0 = this[27].var0;
  if (var0)
    (*((void (**)(__CFString *))var0->isa + 1))(var0);
  this[27].var0 = 0;
  PCString::~PCString(this + 31);
  std::__list_imp<unsigned int>::clear(&this[28].var0);
  OZChannelObjectRootBase::~OZChannelObjectRootBase((OZChannelObjectRootBase *)this);
}

{
  OZChannelObjectRoot::~OZChannelObjectRoot(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelObjectRoot::~OZChannelObjectRoot(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
}

{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
  JUMPOUT(0x1B5E29170);
}

OZChannelObjectRoot *OZChannelObjectRoot::clone(const OZTimeMarkerSet **this)
{
  OZChannelObjectRoot *v2;

  v2 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v2, this, 0);
  return v2;
}

void sub_1B2E6C348(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::compare(OZChannelObjectRoot *this, const OZChannelBase *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;

  if (!lpsrc)
    return 0;
  if (result)
  {
    v4 = result;
    if (*((_QWORD *)this + 26) == *(_QWORD *)(result + 208)
      && OZChannelObjectRootBase::compare(this, (const OZChannelBase *)result))
    {
      v5 = (_QWORD *)*((_QWORD *)this + 27);
      v6 = *(_QWORD *)(v4 + 216);
      if (v5)
      {
        if (v6 && v5[3] == *(_QWORD *)(v6 + 24))
        {
          v7 = (_QWORD *)v5[1];
          v8 = v5 + 2;
          if (v7 != v5 + 2)
          {
            v9 = *(_QWORD **)(v6 + 8);
            while (OZTimeMarker::operator==((uint64_t)(v7 + 4), (uint64_t)(v9 + 4)))
            {
              v10 = (_QWORD *)v7[1];
              v11 = v7;
              if (v10)
              {
                do
                {
                  v7 = v10;
                  v10 = (_QWORD *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  v7 = (_QWORD *)v11[2];
                  v12 = *v7 == (_QWORD)v11;
                  v11 = v7;
                }
                while (!v12);
              }
              v13 = (_QWORD *)v9[1];
              if (v13)
              {
                do
                {
                  v14 = v13;
                  v13 = (_QWORD *)*v13;
                }
                while (v13);
              }
              else
              {
                do
                {
                  v14 = (_QWORD *)v9[2];
                  v12 = *v14 == (_QWORD)v9;
                  v9 = v14;
                }
                while (!v12);
              }
              result = 1;
              v9 = v14;
              if (v7 == v8)
                return result;
            }
            return 0;
          }
          return 1;
        }
      }
      else if (!v6)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void OZChannelObjectRoot::copy(OZChannelObjectRoot *this, const OZChannelBase *a2)
{
  const OZTimeMarkerSet **v4;
  const OZTimeMarkerSet **v5;
  uint64_t v6;
  OZTimeMarkerSet *v7;

  OZChannelObjectRootBase::copy(this, a2);
  if (a2)
  {
    if (v4)
    {
      v5 = v4;
      v6 = *((_QWORD *)this + 27);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      *((_QWORD *)this + 27) = 0;
      if (v5[27])
      {
        v7 = (OZTimeMarkerSet *)operator new();
        OZTimeMarkerSet::OZTimeMarkerSet(v7, v5[27]);
      }
      else
      {
        v7 = 0;
      }
      *((_QWORD *)this + 27) = v7;
    }
  }
}

void sub_1B2E6C54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::recomputeTimeRangeFromChildren(OZChannelBase *this, int a2, int a3, char a4, BOOL a5, BOOL a6)
{
  const void *ObjectManipulator;
  BOOL v13;
  void **var0;
  const void **v15;
  const void **v16;
  OZChannelObjectRoot *v17;
  OZChannelObjectRoot *v18;
  OZChannelFolder *var6;
  OZChannelObjectRoot *v20;
  __int128 v22;
  CMTimeEpoch v23;
  CMTime v24;
  CMTime time2;
  CMTime time1;

  ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator)
  else
    v13 = 1;
  if ((OZChannelBase::isLocked(this, 1) & 1) == 0
    && !OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x10000)
    && !OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x40000))
  {
    var0 = this[1].var0;
    if (var0)
    {
      v16 = (const void **)*var0;
      v15 = (const void **)var0[1];
      if (*var0 != v15)
      {
        *(_OWORD *)&v24.value = *MEMORY[0x1E0CA2E30];
        v24.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
        do
        {
          if (*v16)
          {
            if (v17)
            {
              v18 = v17;
              if (a2)
                OZChannelObjectRoot::recomputeTimeRangeFromChildren(v17, 1, 0, v13 & a4, a5, a6);
              v22 = *((_OWORD *)v18 + 8);
              v23 = *((_QWORD *)v18 + 18);
              time1 = v24;
              time2 = *(CMTime *)((char *)v18 + 128);
              if (CMTimeCompare(&time1, &time2) >= 1)
              {
                *(_OWORD *)&v24.value = v22;
                v24.epoch = v23;
              }
            }
          }
          ++v16;
        }
        while (v16 != v15);
      }
    }
  }
  if (a3)
  {
    var6 = this->var6;
    if (var6)
    {
      if (v20)
        OZChannelObjectRoot::recomputeTimeRangeFromChildren(v20, 0, 1, 0, a5, a6);
    }
  }
  return 0;
}

uint64_t OZChannelObjectRoot::resetTimeIndependentFlagIfNeeded(OZChannelObjectRoot *this, int a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  const void ***v8;
  const void **v9;
  const void **v10;
  char v11;
  CMTime *v12;
  void *v13;
  _BYTE *v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime time2;
  CMTime time1;

  result = OZChannelBase::isLocked((OZChannelBase *)this, 1);
  if ((result & 1) != 0)
    return result;
  if (!a3)
    goto LABEL_5;
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 704))(v7, 0, 1);
LABEL_5:
    if (!a2)
      return result;
  }
  v8 = (const void ***)*((_QWORD *)this + 14);
  if (!v8 || (v9 = *v8, v10 = v8[1], *v8 == v10))
  {
    result = OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x10000);
    if ((_DWORD)result)
      return (uint64_t)OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x10000);
  }
  else
  {
    v11 = 0;
    v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
    v12 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      if (*v9)
      {
        if (v13)
        {
          (*(void (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v13 + 704))(v13, 1, 0);
          if (*v9)
          {
            if (v14)
            {
              if ((v14[56] & 2) == 0)
              {
                (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v14 + 712))(&v16);
                time1 = v17;
                time2 = *v12;
                if (CMTimeCompare(&time1, &time2) >= 1)
                {
                  time2 = v16;
                  time1 = v19;
                  if (CMTimeCompare(&time1, &time2) >= 1)
                    v19 = v16;
                  time1 = v16;
                  time2 = v17;
                  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v15);
                  time1 = v18;
                  time2 = v15;
                  if (CMTimeCompare(&time1, &time2) < 0)
                  {
                    time1 = v16;
                    time2 = v17;
                    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
                  }
                  v11 = 1;
                }
              }
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
    if ((v11 & 1) == 0)
      goto LABEL_24;
    v16 = *(CMTime *)((char *)this + 152);
    time1 = v19;
    result = CMTimeCompare(&v16, &time1);
    if (!(_DWORD)result)
    {
      v16 = *(CMTime *)((char *)this + 152);
      time1 = *(CMTime *)((char *)this + 176);
      PC_CMTimeSaferAdd(&v16, &time1, (uint64_t)&time2);
      v16 = time2;
      time1 = v18;
      result = CMTimeCompare(&v16, &time1);
      if (!(_DWORD)result)
      {
LABEL_24:
        result = OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x10000);
        if ((_DWORD)result)
          return (uint64_t)OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x10000);
      }
    }
  }
  return result;
}

uint64_t OZChannelObjectRoot::setTimeMarkers(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  (*(void (**)(_QWORD *, uint64_t))(*a1 + 464))(a1, 1);
  result = a1[27];
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  a1[27] = a2;
  return result;
}

_QWORD *OZChannelObjectRoot::addBehavior(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[28];
  a1 += 28;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

_QWORD *OZChannelObjectRoot::insertBehaviorAfter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *i;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v5 = a1 + 28;
  if (a3)
  {
    for (i = (uint64_t *)a1[29]; i != v5; i = (uint64_t *)i[1])
    {
      if (i[2] == a3)
      {
        if (v5 != i)
          v5 = (uint64_t *)i[1];
        break;
      }
    }
    result = operator new(0x18uLL);
    result[2] = a2;
    v9 = *v5;
    *(_QWORD *)(v9 + 8) = result;
    *result = v9;
    *v5 = (uint64_t)result;
    result[1] = v5;
  }
  else
  {
    result = operator new(0x18uLL);
    result[1] = v5;
    result[2] = a2;
    v8 = *v5;
    *result = *v5;
    *(_QWORD *)(v8 + 8) = result;
    *v5 = (uint64_t)result;
  }
  ++a1[30];
  return result;
}

void OZChannelObjectRoot::removeBehavior(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;

  v2 = a1 + 28;
  for (i = (uint64_t *)a1[29]; i != v2; i = (uint64_t *)i[1])
  {
    if (i[2] == a2)
    {
      if (v2 != i)
      {
        v4 = *i;
        *(_QWORD *)(v4 + 8) = i[1];
        *(_QWORD *)i[1] = v4;
        --a1[30];
        operator delete(i);
      }
      return;
    }
  }
}

void OZChannelObjectRoot::renumberIDs(OZChannelBase *a1, uint64_t **a2, int a3)
{
  unsigned int var3;
  uint64_t **v6;
  unsigned int NextUniqueID;
  unsigned int v8;
  unsigned int v9;
  _QWORD **v10;
  _QWORD *v11[2];
  unsigned int *v12;

  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  var3 = a1->var3;
  v9 = var3;
  if (a2)
    v6 = a2;
  else
    v6 = (uint64_t **)&v10;
  if (var3 >> 4 > 0x270)
  {
    NextUniqueID = OZChannelBase::getNextUniqueID(a1);
    OZChannelBase::setID(a1, NextUniqueID);
    v8 = a1->var3;
    v12 = &v9;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v6, &v9, (uint64_t)&std::piecewise_construct, &v12)+ 8) = v8;
  }
  enumerateIDs(v6, a1);
  if (a3)
    updateReferenceIDsRecursive(v6, (uint64_t)a1);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v10, v11[0]);
}

void sub_1B2E6CCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t **enumerateIDs(uint64_t **result, OZChannelBase *a2)
{
  void **var0;
  uint64_t **v3;
  OZChannelBase **v4;
  uint64_t **v5;
  OZChannelBase *v6;
  unsigned int var3;
  unsigned int NextUniqueID;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;

  var0 = a2[1].var0;
  if (var0)
  {
    v3 = result;
    result = (uint64_t **)OZChannelBase::getObjectManipulator(a2);
    v4 = (OZChannelBase **)*var0;
    if (*var0 != var0[1])
    {
      v5 = result;
      do
      {
        v6 = *v4;
        var3 = (*v4)->var3;
        v10 = var3;
        if (!v5 && var3 >> 4 > 0x270)
          goto LABEL_8;
        if (!v5)
          goto LABEL_10;
        result = (uint64_t **)((uint64_t (*)(uint64_t **, OZChannelBase *))(*v5)[44])(v5, v6);
        v6 = *v4;
        if ((_DWORD)result)
        {
LABEL_8:
          NextUniqueID = OZChannelBase::getNextUniqueID((OZChannelBase *)result);
          OZChannelBase::setID(v6, NextUniqueID);
          v9 = (*v4)->var3;
          v11 = &v10;
          result = (uint64_t **)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v3, &v10, (uint64_t)&std::piecewise_construct, &v11);
          *((_DWORD *)result + 8) = v9;
          v6 = *v4;
        }
        if (v6)
        {
LABEL_10:
          if (result)
            result = (uint64_t **)enumerateIDs(v3, result);
        }
        ++v4;
      }
      while (v4 != var0[1]);
    }
  }
  return result;
}

_QWORD *updateReferenceIDsRecursive(_QWORD *result, uint64_t a2)
{
  const void ***v2;
  const void **v3;
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  OZChannelBase *v7;
  OZChannel *v8;
  uint64_t ObjectManipulator;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  _QWORD *v17;
  OZChannelBase *v18;
  uint64_t v19;

  v2 = *(const void ****)(a2 + 112);
  if (v2)
  {
    v3 = *v2;
    if (*v2 != v2[1])
    {
      v4 = result;
      v5 = result + 1;
      do
      {
        v6 = *v3;
        if (*v3)
        {
          if (!v7)
            goto LABEL_25;
          v8 = (OZChannel *)v7;
          ObjectManipulator = OZChannelBase::getObjectManipulator(v7);
          if (ObjectManipulator)
          {
            v10 = 0;
            if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)ObjectManipulator + 56))(ObjectManipulator, 0))
            {
              (*((void (**)(OZChannel *, _QWORD, _QWORD))v8->var0 + 12))(v8, 0, 0);
              v10 = 1;
            }
          }
          else
          {
            v10 = 0;
          }
          result = (_QWORD *)OZChanObjectManipRef::getObjectID(v8);
          v12 = *v5;
          if (*v5)
          {
            v13 = v5;
            do
            {
              v14 = *(_DWORD *)(v12 + 28);
              v15 = v14 >= result;
              if (v14 >= result)
                v16 = (uint64_t *)v12;
              else
                v16 = (uint64_t *)(v12 + 8);
              if (v15)
                v13 = (_QWORD *)v12;
              v12 = *v16;
            }
            while (*v16);
            if (v13 != v5 && result >= *((_DWORD *)v13 + 7))
            {
              LODWORD(v11) = *((_DWORD *)v13 + 8);
              result = (_QWORD *)(*((uint64_t (**)(OZChannel *, _QWORD, _QWORD, double))v8->var0 + 89))(v8, MEMORY[0x1E0CA2E68], 0, (double)v11);
            }
          }
          if (v10)
            result = (_QWORD *)(*((uint64_t (**)(OZChannel *, uint64_t, _QWORD))v8->var0 + 12))(v8, 1, 0);
          v6 = *v3;
          if (*v3)
          {
LABEL_25:
            if (result)
            {
              v17 = result;
              if (v18)
              {
                v19 = OZChannelBase::getObjectManipulator(v18);
                result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 360))(v19, v4);
              }
              else
              {
                result = (_QWORD *)updateReferenceIDsRecursive(v4, v17);
              }
            }
          }
        }
        ++v3;
      }
      while (v3 != v2[1]);
    }
  }
  return result;
}

_QWORD *OZChannelObjectRoot::updateReferenceIDs(_QWORD *result, _QWORD *a2)
{
  if (a2)
    return updateReferenceIDsRecursive(a2, (uint64_t)result);
  return result;
}

void *OZChannelObjectRoot::findNodeRefDescendant(OZChannelObjectRoot *this, OZSceneNode *a2, OZChannelFolder *a3)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  char *v8;
  const void *v9;
  void *v10;
  void *v11;
  OZChannelFolder *v12;
  uint64_t NodeRefDescendant;

  v3 = (const void ***)*((_QWORD *)a3 + 14);
  if (!v3)
    return 0;
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  if (a2)
    v8 = (char *)a2 + 16;
  else
    v8 = 0;
  while (1)
  {
    v9 = *v4;
    if (*v4)
    {
      if (!v10)
        goto LABEL_18;
      v11 = v10;
      if (((*(uint64_t (**)(void *, char *))(*(_QWORD *)v10 + 872))(v10, v8) & 1) != 0)
        return v11;
      v9 = *v4;
      if (*v4)
      {
LABEL_18:
        if (v12)
        {
          NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant(this, a2, v12);
          if (NodeRefDescendant)
            return (void *)NodeRefDescendant;
        }
      }
    }
    if (++v4 == v5)
      return 0;
  }
}

OZChannelBehavior *OZChannelObjectRoot::rootUndoWillReplace(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  OZChannelBehavior *result;

  result = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)a2, a2);
  if (result)
    return (OZChannelBehavior *)(*(uint64_t (**)(OZChannelBehavior *, OZChannelBase *))(*(_QWORD *)result
                                                                                                + 888))(result, a2);
  return result;
}

OZChannelBehavior *OZChannelObjectRoot::rootUndoDidReplace(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  OZChannelBehavior *result;

  result = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)a2, a2);
  if (result)
    return (OZChannelBehavior *)(*(uint64_t (**)(OZChannelBehavior *, OZChannelBase *))(*(_QWORD *)result
                                                                                                + 896))(result, a2);
  return result;
}

void OZChannelObjectRoot::willModifyChannel(OZChannelObjectRoot *this, OZChannelBase *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OZDocument **v8;

  v5 = (*(uint64_t (**)(OZChannelObjectRoot *))(*(_QWORD *)this + 840))(this);
  if (v5)
  {
    v6 = v5;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 264))(v5);
    if (v7)
    {
      v8 = (OZDocument **)v7;
      if (!*(_BYTE *)(v7 + 1576))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 424))(v6);
        OZScene::willModifyChannel(v8, a2, a3);
      }
    }
  }
}

uint64_t OZChannelObjectRoot::checkSolo(OZChannelBase *this)
{
  uint64_t result;
  OZScene *v2;

  result = OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    v2 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
    return v2 && OZScene::testFlag(v2, 32);
  }
  return result;
}

uint64_t OZChannelObjectRoot::shouldAddKeypointAt0(OZChannelObjectRoot *this, const CMTime *a2)
{
  uint64_t ObjectManipulator;
  int32_t v5;
  uint64_t result;
  OZScene *v7;
  CMTime v8;
  CMTime time1;

  ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
  time1 = *(CMTime *)((char *)this + 152);
  v8 = *a2;
  v5 = CMTimeCompare(&time1, &v8);
  result = 0;
  if (v5 && ObjectManipulator)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
    if (result)
    {
      v7 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
      return !OZScene::testFlag(v7, 128);
    }
  }
  return result;
}

uint64_t OZChannelObjectRoot::isChannelAffectedByBehaviors(OZChannelObjectRoot *this, OZChannelBase *a2, OZChannelBase *a3)
{
  return OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)a2, a3);
}

uint64_t OZChannelObjectRoot::isChannelAffectedBySelectedBehaviors(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v7 = (uint64_t)&v7;
  v8 = &v7;
  v9 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(a2, &v7, 1);
  v2 = 0;
  v3 = v8;
  if (v9 && v8 != &v7)
  {
    do
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3[2] + 480))(v3[2]);
      v2 = v4;
      v3 = (uint64_t *)v3[1];
      if (v3 == &v7)
        v5 = 1;
      else
        v5 = v4;
    }
    while ((v5 & 1) == 0);
  }
  std::__list_imp<unsigned int>::clear(&v7);
  return v2;
}

void sub_1B2E6D3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::isChannelRigged(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  return OZRigWidget::IsChannelRigged((OZRigWidget *)a2, a2);
}

BOOL OZChannelObjectRoot::isObjectSelected(OZChannelBase *this)
{
  const void *ObjectManipulator;
  const void *v3;
  uint64_t v4;
  OZChannelBase *v5;

  ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator)
    return OZChannelObjectRootBase::isObjectSelected(this);
  v3 = ObjectManipulator;
  v4 = (*(uint64_t (**)(const void *))(*(_QWORD *)v3 + 232))(v3);
  v5 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 640))(v4);
  return OZChannelBase::testFlag(v5, 1);
}

uint64_t OZChannelObjectRoot::getDefaultParameterColorSpaceID(OZChannelBase *this)
{
  uint64_t ObjectManipulator;
  uint64_t v2;
  OZScene *v3;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator)
    return 3;
  v2 = ObjectManipulator;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator))
    return 3;
  v3 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
  OZScene::getComputedWorkingGamut(v3);
  return PCGetUIColorSpaceID();
}

uint64_t OZChannelObjectRoot::getWorkingGamut(OZChannelBase *this)
{
  uint64_t ObjectManipulator;
  uint64_t v2;
  OZScene *v3;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator)
    return 0;
  v2 = ObjectManipulator;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator))
    return 0;
  v3 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
  return OZScene::getComputedWorkingGamut(v3);
}

void OZChannelObjectRoot::getFrameDuration(OZChannelBase *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t ObjectManipulator;
  uint64_t v4;
  uint64_t v5;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator
    && (v4 = ObjectManipulator,
        (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator)))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), a2);
  }
  else
  {
    CMTimeMake((CMTime *)a2, 1, 30);
  }
}

void OZChannelObjectRoot::adjustToFrameDuration(OZChannelObjectRoot *this, const CMTime *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  PCString v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  OZChannelObjectRootBase::adjustToFrameDuration(this, a2);
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 8);
    v6 = (uint64_t **)operator new();
    OZTimeMarkerSet::OZTimeMarkerSet((OZTimeMarkerSet *)v6);
    if (v5 != (_QWORD *)(v4 + 16))
    {
      do
      {
        OZTimeMarker::OZTimeMarker((OZTimeMarker *)&v17, (const OZTimeMarker *)(v5 + 4));
        v13 = v18;
        v14 = v19;
        operator*((__int128 *)&a2->value, (uint64_t)&v13, (uint64_t)&v15);
        v18 = v15;
        v19 = v16;
        v13 = v20;
        v14 = v21;
        operator*((__int128 *)&a2->value, (uint64_t)&v13, (uint64_t)&v11);
        v20 = v11;
        v21 = v12;
        std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(v6 + 1, (uint64_t)&v17, (const OZTimeMarker *)&v17);
        OZTimeMarker::~OZTimeMarker(&v17);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)(v4 + 16));
    }
    (*(void (**)(OZChannelObjectRoot *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
    v10 = *((_QWORD *)this + 27);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *((_QWORD *)this + 27) = v6;
  }
}

void sub_1B2E6D6C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::getCurrentTime(OZChannelBase *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t ObjectManipulator;
  uint64_t v8;
  OZScene *v9;
  __n128 CurrentTime;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;

  v6 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v6 + 16);
  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator)
  {
    v8 = ObjectManipulator;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator))
    {
      v9 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 264))(v8);
      CurrentTime = OZScene::getCurrentTime(v9, &v14);
      if ((a2 & 1) != 0)
      {
        *(__n128 *)a3 = v14;
        v11 = v15;
      }
      else
      {
        (*((void (**)(__int128 *__return_ptr, OZChannelBase *, __n128 *, __n128))this->var0 + 41))(&v12, this, &v14, CurrentTime);
        *(_OWORD *)a3 = v12;
        v11 = v13;
      }
      *(_QWORD *)(a3 + 16) = v11;
    }
  }
}

__n128 OZChannelObjectRoot::getGlobalTimeRange@<Q0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t ObjectManipulator;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v3 = MEMORY[0x1E0CA2E68];
  v4 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator)
  {
    v8 = ObjectManipulator;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator))
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 264))(v8);
      if (v9 + 1352 != a2)
      {
        v10 = *(_OWORD *)(v9 + 1352);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(v9 + 1368);
        *(_OWORD *)a2 = v10;
        result = *(__n128 *)(v9 + 1376);
        *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 + 1392);
        *(__n128 *)(a2 + 24) = result;
      }
    }
  }
  return result;
}

uint64_t OZChannelObjectRoot::wasChannelModified(OZChannelBase *this, OZChannelBase *a2, BOOL *a3)
{
  uint64_t ObjectManipulator;
  uint64_t v6;
  uint64_t v7;
  OZNotificationManager *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  OZChannelBase *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  OZChannelBase *Channel;
  OZChannelBase *ChannelRootBase;
  const void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v23 = (uint64_t)&v23;
  v24 = &v23;
  v25 = 0;
  if (a3)
    *a3 = 0;
  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v6 = ObjectManipulator;
  if (!ObjectManipulator)
    goto LABEL_25;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator))
    goto LABEL_25;
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 264))(v6) + 1584);
  if (!v7)
    goto LABEL_25;
  v8 = *(OZNotificationManager **)(v7 + 168);
  v9 = (uint64_t *)(v7 + 296);
  if (v8)
    v10 = (uint64_t *)((char *)v8 + 48);
  else
    v10 = v9;
  if (v8 && OZNotificationManager::wasChannelModified(v8, a2))
  {
    v11 = 1;
    goto LABEL_26;
  }
  if (!OZChannel::isChannelAffectedByBehaviors((OZChannel *)a2, 1))
    goto LABEL_25;
  std::__list_imp<unsigned int>::clear(&v23);
  OZBehavior::GetBehaviorsAffectingChannel(a2, &v23, 1);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 264))(v6) + 920;
  do
  {
    v13 = (OZChannelBase *)v12;
    v12 = *(_QWORD *)(v12 + 48);
  }
  while (v12);
  v14 = *v10;
  if (v10[1] == *v10)
  {
LABEL_25:
    v11 = 0;
    goto LABEL_26;
  }
  v15 = 0;
  v16 = 0;
  while (1)
  {
    Channel = OZChannelRef::getChannel((OZChannelRef *)(v14 + 24 * v15), v13);
    ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(Channel);
    v19 = (const void *)OZChannelBase::getObjectManipulator(ChannelRootBase);
    if (v19)
    {
      v21 = v24;
      if (v20)
      {
        if (v24 != &v23)
        {
          while ((void *)v21[2] != v20)
          {
            v21 = (uint64_t *)v21[1];
            if (v21 == &v23)
              goto LABEL_24;
          }
          if (v21 != &v23)
            break;
        }
      }
    }
LABEL_24:
    v14 = *v10;
    v15 = ++v16;
    if (0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3) <= v16)
      goto LABEL_25;
  }
  v11 = 1;
  if (a3)
    *a3 = 1;
LABEL_26:
  std::__list_imp<unsigned int>::clear(&v23);
  return v11;
}

void sub_1B2E6DA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::writeBody(OZChannelObjectRoot *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootScope);
  v10 = *((_QWORD *)this + 27);
  if (v10)
  {
    (*(void (**)(_QWORD, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)v10 + 16))(*((_QWORD *)this + 27), a2, a3);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2, a3, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZChannelObjectRootBase::writeBody(this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'OZChannelObjectRoot::writeBody(OZChannelObjectRoot *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelObjectRoot::writeBody((OZChannelObjectRoot *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelObjectRoot::serializeSelfOnly(OZChannelObjectRoot *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  uint64_t v6;

  OZChannelObjectRootBase::serializeSelfOnly(this, a2);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootScope);
  v6 = *((_QWORD *)this + 27);
  if (v6)
  {
    (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2, a3);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, a3, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZChannelObjectRoot::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRootBase::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelObjectRootScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelObjectRoot::parseBegin(OZChannelObjectRoot *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRootBase::parseBegin((OZChannelFolder *)((char *)this - 16), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelObjectRootScope);
  return 1;
}

uint64_t OZChannelObjectRoot::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRootBase::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelObjectRoot::parseEnd(OZChannelObjectRoot *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRootBase::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  return 1;
}

uint64_t OZChannelObjectRoot::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZTimeMarkerSet *v6;
  _QWORD *v7;
  _QWORD *v8;
  OZTimeMarkerSet *v9;

  OZChannelObjectRootBase::parseElement((OZChannelObjectRootBase *)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 72)
  {
    v6 = this[27];
    if (v6)
    {
      v8 = (_QWORD *)*((_QWORD *)v6 + 2);
      v7 = (_QWORD *)((char *)v6 + 16);
      std::__tree<OZGuide>::destroy((uint64_t)(v7 - 1), v8);
      *(v7 - 1) = v7;
      *v7 = 0;
      v7[1] = 0;
      v9 = this[27];
    }
    else
    {
      v9 = (OZTimeMarkerSet *)operator new();
      OZTimeMarkerSet::OZTimeMarkerSet(v9);
      this[27] = v9;
    }
    PCSerializerReadStream::pushHandler(a2, v9);
  }
  return 1;
}

void sub_1B2E6DCE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelObjectRoot::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelObjectRoot::parseElement(this - 2, a2, a3);
  return 1;
}

void std::__call_once_param<std::tuple<OZChannelObjectRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelObjectRoot_Factory *v0;

  v0 = (OZChannelObjectRoot_Factory *)operator new();
  OZChannelObjectRoot_Factory::OZChannelObjectRoot_Factory(v0);
  OZChannelObjectRoot_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E6DD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot_Factory::OZChannelObjectRoot_Factory(OZChannelObjectRoot_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555990;
  v4 = xmmword_1B355E9A0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65969E8;
  *((_QWORD *)this + 16) = &unk_1E6596AB8;
}

void sub_1B2E6DE08(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelObjectRoot_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelObjectRoot *v6;

  v6 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v6, this, a2, a3);
  return v6;
}

void sub_1B2E6DE78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelObjectRoot_Factory::createCopy(OZChannelObjectRoot_Factory *this, OZFactoryBase *a2)
{
  OZChannelObjectRoot *v3;
  const OZTimeMarkerSet **v4;

  v3 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v3, v4, 0);
  return v3;
}

void sub_1B2E6DF04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelObjectRoot_Factory::createChannelCopy(OZChannelObjectRoot_Factory *this, OZChannelBase *a2)
{
  OZChannelObjectRoot *v3;
  const OZTimeMarkerSet **v4;

  v3 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v3, v4, 0);
  return v3;
}

void sub_1B2E6DF90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

OZChannelBase *OZMaterialSubstanceLayerSequenceFolder::init(OZChannelBase *this)
{
  OZChannelBase *v1;
  OZChannelBase *v2;

  v1 = this;
  v2 = (OZChannelBase *)((char *)this + 1136);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 1136), 0, 0);
  v1 = (OZChannelBase *)((char *)v1 + 128);
  OZChannelBase::enable(v1, 0, 0);
  OZChannelBase::resetFlag(v2, 16, 0);
  OZChannelBase::setFlag(v2, 0x100000000, 0);
  OZChannelBase::saveStateAsDefault(v2);
  OZChannelBase::resetFlag(v1, 16, 0);
  OZChannelBase::setFlag(v1, 0x100000000, 0);
  return OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v1);
}

void OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(this, a2, a3, a4);
  *v5 = &unk_1E6596B10;
  v5[2] = &unk_1E6596E18;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Plastic Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 128), 0.8, 0.8, 0.8, &v6, (OZChannelFolder *)this, 1u, 2u, 5u);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Generic Alpha"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1136), 1.0, &v6, (OZChannelFolder *)this, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Map Position Label"));
  OZChannelPosition::OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288), 0.0, 0.0, &v6, (OZChannelFolder *)this, 3u, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Map Scale Label"));
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992), 1.0, 1.0, &v6, (OZChannelFolder *)this, 4u, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Map Rotation Label"));
  OZChannelRotation3D::OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432), 0.0, 0.0, 0.0, &v6, (OZChannelFolder *)this, 5u, 2u, 4u, 0, 0);
  PCString::~PCString(&v6);
  OZMaterialSubstanceLayerSequenceFolder::init((OZChannelBase *)this);
}

void sub_1B2E6E24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelColorNoAlpha *v11;
  OZChannelPercent *v12;
  OZChannelPosition *v13;
  OZChannel2D *v14;
  OZChannelRotation3D *v15;
  OZChannelRotation3D *v16;

  v16 = v15;
  OZChannelRotation3D::~OZChannelRotation3D(v16);
  OZChannel2D::~OZChannel2D(v14);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2E6E2BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2E6E29CLL);
}

void sub_1B2E6E2CC()
{
  JUMPOUT(0x1B2E6E29CLL);
}

void sub_1B2E6E2D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2E6E2A4);
}

void sub_1B2E6E2E4()
{
  JUMPOUT(0x1B2E6E2A4);
}

void sub_1B2E6E2EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2E6E2ACLL);
}

void sub_1B2E6E2FC()
{
  JUMPOUT(0x1B2E6E2ACLL);
}

void OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  PCString v11;

  Instance = (OZFactory *)OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(this);
  OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &unk_1E6596B10;
  *((_QWORD *)this + 2) = &unk_1E6596E18;
  PCURL::PCURL((PCURL *)&v11, CFSTR("Material Plastic Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 128), 0.8, 0.8, 0.8, &v11, (OZChannelFolder *)this, 1u, 2u, 5u);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Material Generic Alpha"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1136), 1.0, &v11, (OZChannelFolder *)this, 2u, 2u, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Map Position Label"));
  OZChannelPosition::OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288), 0.0, 0.0, &v11, (OZChannelFolder *)this, 3u, 2u, 2u, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Map Scale Label"));
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992), 1.0, 1.0, &v11, (OZChannelFolder *)this, 4u, 2u, 2u, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Map Rotation Label"));
  OZChannelRotation3D::OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432), 0.0, 0.0, 0.0, &v11, (OZChannelFolder *)this, 5u, 2u, 4u, 0, 0);
  PCString::~PCString(&v11);
  OZMaterialSubstanceLayerSequenceFolder::init((OZChannelBase *)this);
}

void sub_1B2E6E538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelColorNoAlpha *v11;
  OZChannelPercent *v12;
  OZChannelPosition *v13;
  OZChannel2D *v14;
  OZChannelRotation3D *v15;
  OZChannelRotation3D *v16;

  v16 = v15;
  OZChannelRotation3D::~OZChannelRotation3D(v16);
  OZChannel2D::~OZChannel2D(v14);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void sub_1B2E6E5A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2E6E588);
}

void sub_1B2E6E5B8()
{
  JUMPOUT(0x1B2E6E588);
}

void sub_1B2E6E5C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2E6E590);
}

void sub_1B2E6E5D0()
{
  JUMPOUT(0x1B2E6E590);
}

void sub_1B2E6E5D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2E6E598);
}

void sub_1B2E6E5E8()
{
  JUMPOUT(0x1B2E6E598);
}

uint64_t OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(OZMaterialSubstanceLayerSequenceFolder_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMaterialSubstanceLayerSequenceFolder_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMaterialSubstanceLayerSequenceFolder_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMaterialSubstanceLayerSequenceFolder_Factory::_instance;
}

void OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this, const OZMaterialSubstanceLayerSequenceFolder *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(this, (const OZChannelBase *)a2, a3);
  *v5 = &unk_1E6596B10;
  v5[2] = &unk_1E6596E18;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)(v5 + 16), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1136), (const OZChannelBase *)((char *)a2 + 1136), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 1288), (OZChannelFolder *)this);
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 1992), (OZChannelFolder *)this);
  OZChannelRotation3D::OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 2432), (OZChannelFolder *)this);
}

void sub_1B2E6E700(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelColorNoAlpha *v2;
  OZChannelPercent *v3;
  OZChannelPosition *v4;
  OZChannel2D *v5;

  OZChannel2D::~OZChannel2D(v5);
  OZChannelPosition::~OZChannelPosition(v4);
  OZChannelPercent::~OZChannelPercent(v3);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this)
{
  OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder(this);
  JUMPOUT(0x1B5E29170);
}

{
  *(_QWORD *)this = &unk_1E6596B10;
  *((_QWORD *)this + 2) = &unk_1E6596E18;
  OZChannelRotation3D::~OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432));
  OZChannel2D::~OZChannel2D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992));
  OZChannelPosition::~OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1136));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 128));
  OZChannelObjectRootBase::~OZChannelObjectRootBase(this);
}

void OZMaterialSubstanceLayerSequenceFolder::getImagePosition(uint64_t a1, const CMTime *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1424), a2, a4);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1576), a2, a4);
  *a3 = v9;
  a3[1] = v10;
}

void OZMaterialSubstanceLayerSequenceFolder::getImageScale(OZChannel *a1, const CMTime *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    OZChannel::getValueAsDouble(a1 + 14, a2, a4);
    v9 = v8;
    OZChannel::getValueAsDouble(a1 + 15, a2, a4);
    *a3 = v9;
    a3[1] = v10;
  }
}

void OZMaterialSubstanceLayerSequenceFolder::getImageRotation(uint64_t a1, const CMTime *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2568), a2, a4);
  *a3 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2720), a2, a4);
  a3[1] = v9;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2872), a2, a4);
  a3[2] = v10;
}

uint64_t OZMaterialSubstanceLayerSequenceFolder::translationChannel(OZMaterialSubstanceLayerSequenceFolder *this)
{
  return (uint64_t)this + 1288;
}

uint64_t OZMaterialSubstanceLayerSequenceFolder::scaleChannel(OZMaterialSubstanceLayerSequenceFolder *this)
{
  return (uint64_t)this + 1992;
}

uint64_t OZMaterialSubstanceLayerSequenceFolder::rotationChannel(OZMaterialSubstanceLayerSequenceFolder *this)
{
  return (uint64_t)this + 2432;
}

void `non-virtual thunk to'OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this)
{
  OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder((OZMaterialSubstanceLayerSequenceFolder *)((char *)this - 16));
}

{
  OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder((OZMaterialSubstanceLayerSequenceFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMaterialSubstanceLayerSequenceFolder_Factory *v0;

  v0 = (OZMaterialSubstanceLayerSequenceFolder_Factory *)operator new();
  OZMaterialSubstanceLayerSequenceFolder_Factory::OZMaterialSubstanceLayerSequenceFolder_Factory(v0);
  OZMaterialSubstanceLayerSequenceFolder_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E6E928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayerSequenceFolder_Factory::OZMaterialSubstanceLayerSequenceFolder_Factory(OZMaterialSubstanceLayerSequenceFolder_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054230;
  v4 = xmmword_1B355E9F0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6596E88;
  *((_QWORD *)this + 16) = &unk_1E6596F58;
}

void sub_1B2E6E9C8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZMaterialSubstanceLayerSequenceFolder *OZMaterialSubstanceLayerSequenceFolder_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZMaterialSubstanceLayerSequenceFolder *v6;

  v6 = (OZMaterialSubstanceLayerSequenceFolder *)operator new();
  OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(v6, this, a2, a3);
  return v6;
}

void sub_1B2E6EA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

OZMaterialSubstanceLayerSequenceFolder *OZMaterialSubstanceLayerSequenceFolder_Factory::createCopy(OZMaterialSubstanceLayerSequenceFolder_Factory *this, OZFactoryBase *a2)
{
  OZMaterialSubstanceLayerSequenceFolder *v3;
  const OZMaterialSubstanceLayerSequenceFolder *v4;

  v3 = (OZMaterialSubstanceLayerSequenceFolder *)operator new();
  OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(v3, v4, 0);
  return v3;
}

void sub_1B2E6EAC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

OZMaterialSubstanceLayerSequenceFolder *OZMaterialSubstanceLayerSequenceFolder_Factory::createChannelCopy(OZMaterialSubstanceLayerSequenceFolder_Factory *this, OZChannelBase *a2)
{
  OZMaterialSubstanceLayerSequenceFolder *v3;
  const OZMaterialSubstanceLayerSequenceFolder *v4;

  v3 = (OZMaterialSubstanceLayerSequenceFolder *)operator new();
  OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(v3, v4, 0);
  return v3;
}

void sub_1B2E6EB50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

void OZTimeMarker::OZTimeMarker(OZTimeMarker *this)
{
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)this = &off_1E6596FB0;
  v2 = MEMORY[0x1E0CA2E68];
  v3 = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 3) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)((char *)this + 8) = v3;
  *((_OWORD *)this + 2) = *(_OWORD *)v2;
  *((_QWORD *)this + 6) = *(_QWORD *)(v2 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8);
  *((_QWORD *)this + 9) = 1;
}

void sub_1B2E6EC48(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZTimeMarker::OZTimeMarker(OZTimeMarker *this, const OZTimeMarker *a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)this = &off_1E6596FB0;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v4;
  v5 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)this + 2) = v5;
  PCString::PCString((PCString *)this + 7, (const PCString *)a2 + 7);
  PCString::PCString((PCString *)this + 8, (const PCString *)a2 + 8);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
}

void sub_1B2E6ECD8(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZTimeMarker::~OZTimeMarker(PCString *this)
{
  PCString *v1;

  this->var0 = (__CFString *)&off_1E6596FB0;
  v1 = this + 7;
  PCString::~PCString(this + 8);
  PCString::~PCString(v1);
}

{
  PCString *v1;

  this->var0 = (__CFString *)&off_1E6596FB0;
  v1 = this + 7;
  PCString::~PCString(this + 8);
  PCString::~PCString(v1);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZTimeMarker::operator<(uint64_t a1, uint64_t a2)
{
  CMTime v3;
  CMTime time1;

  time1 = *(CMTime *)(a1 + 8);
  v3 = *(CMTime *)(a2 + 8);
  return CMTimeCompare(&time1, &v3) >> 31;
}

BOOL OZTimeMarker::operator==(uint64_t a1, uint64_t a2)
{
  CMTime v5;
  CMTime time1;

  time1 = *(CMTime *)(a1 + 8);
  v5 = *(CMTime *)(a2 + 8);
  if (CMTimeCompare(&time1, &v5))
    return 0;
  time1 = *(CMTime *)(a1 + 32);
  v5 = *(CMTime *)(a2 + 32);
  return !CMTimeCompare(&time1, &v5)
      && !PCString::compare((PCString *)(a1 + 56), (const PCString *)(a2 + 56))
      && !PCString::compare((PCString *)(a1 + 64), (const PCString *)(a2 + 64))
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76);
}

PCSharedCount *OZTimeMarker::getLabel(OZTimeMarker *this)
{
  unsigned __int8 v1;
  PCSharedCount *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  PCString v10;

  switch(*((_DWORD *)this + 19))
  {
    case 3:
      if ((v1 & 1) == 0
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel, &dword_1B2737000);
      }
      v2 = &OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel))
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Marker Build In Mandatory"));
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel, &v10);
        goto LABEL_24;
      }
      break;
    case 4:
      if ((v6 & 1) == 0
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel, &dword_1B2737000);
      }
      v2 = &OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel))
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Marker Build In Optional"));
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel, &v10);
        goto LABEL_24;
      }
      break;
    case 5:
      if ((v4 & 1) == 0
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel, &dword_1B2737000);
      }
      v2 = &OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel))
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Marker Build Out Mandatory"));
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel, &v10);
        goto LABEL_24;
      }
      break;
    case 6:
      if ((v5 & 1) == 0
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel, &dword_1B2737000);
      }
      v2 = &OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel))
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Marker Build Out Optional"));
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel, &v10);
        goto LABEL_24;
      }
      break;
    case 7:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sLoopEndLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sLoopEndLabel, &dword_1B2737000);
      }
      v2 = &OZTimeMarker::getLabel(void)const::sLoopEndLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sLoopEndLabel))
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Marker Project Loop End"));
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sLoopEndLabel, &v10);
        goto LABEL_24;
      }
      break;
    case 8:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sPosterFrameLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sPosterFrameLabel, &dword_1B2737000);
      }
      v2 = &OZTimeMarker::getLabel(void)const::sPosterFrameLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sPosterFrameLabel))
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Marker Project Poster Frame"));
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sPosterFrameLabel, &v10);
        goto LABEL_24;
      }
      break;
    case 9:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sTextEditLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sTextEditLabel, &dword_1B2737000);
      }
      v2 = &OZTimeMarker::getLabel(void)const::sTextEditLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sTextEditLabel))
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Marker Text Edit"));
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sTextEditLabel, &v10);
LABEL_24:
        PCString::~PCString(&v10);
      }
      break;
    default:
      v2 = (PCSharedCount *)((char *)this + 56);
      break;
  }
  return v2;
}

void sub_1B2E6F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  _Unwind_Resume(a1);
}

uint64_t OZTimeMarker::writeHeader(OZTimeMarker *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 73);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimeMarker::writeBody(OZTimeMarker *this, PCSerializerWriteStream *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  PCString v8;
  PCString v9;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;
  CMTime time2;
  CMTime time1;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerScope);
  v12 = *((_QWORD *)this + 3);
  v11 = *(_OWORD *)((char *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  time1 = *(CMTime *)((char *)this + 32);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    time1 = *(CMTime *)((char *)this + 8);
    time2 = *(CMTime *)((char *)this + 32);
    v4 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)v10);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 16))(a2, 2, v4);
    (*(void (**)(PCSerializerWriteStream *, _BYTE *))(*(_QWORD *)a2 + 112))(a2, v10);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  if (!PCString::empty((PCString *)this + 7) && !*((_DWORD *)this + 19))
  {
    PCString::PCString(&v9, (const PCString *)this + 7);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v9);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v9);
  }
  if (!PCString::empty((PCString *)this + 8))
  {
    PCString::PCString(&v8, (const PCString *)this + 8);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v8);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v8);
  }
  v5 = *((unsigned int *)this + 18);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((unsigned int *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2E6F6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

uint64_t OZTimeMarker::parseBegin(OZTimeMarker *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTimeMarkerScope);
  return 1;
}

uint64_t OZTimeMarker::parseEnd(OZTimeMarker *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTimeMarker::parseElement(OZTimeMarker *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  CMTimeEpoch epoch;
  char *v6;
  int value;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  double v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        v14.value = 0;
        (*(void (**)(PCStreamElement *, CMTime *))(*(_QWORD *)a3 + 64))(a3, &v14);
        v15 = *(CMTime *)((char *)a2 + 112);
        operator*(&v15, &v16, *(Float64 *)&v14.value);
      }
      else
      {
        (*(void (**)(PCStreamElement *, CMTime *))(*(_QWORD *)a3 + 88))(a3, &v16);
      }
      *(CMTime *)((char *)this + 8) = v16;
      break;
    case 2:
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        v12 = 0.0;
        (*(void (**)(PCStreamElement *, double *))(*(_QWORD *)a3 + 64))(a3, &v12);
        v10 = *(CMTime *)((char *)a2 + 112);
        operator*(&v10, &v11, v12 + -1.0);
        *(_OWORD *)&v9.value = *((_OWORD *)a2 + 7);
        v9.epoch = *((_QWORD *)a2 + 16);
        v16 = v11;
        v15 = *(CMTime *)((char *)this + 8);
        PC_CMTimeSaferSubtract(&v16, &v15, (uint64_t)&v13);
        v16 = v13;
        v15 = v9;
        PC_CMTimeSaferAdd(&v16, &v15, (uint64_t)&v14);
        *((_OWORD *)this + 2) = *(_OWORD *)&v14.value;
        epoch = v14.epoch;
      }
      else
      {
        (*(void (**)(PCStreamElement *, CMTime *))(*(_QWORD *)a3 + 88))(a3, &v14);
        v15 = *(CMTime *)((char *)this + 8);
        v16 = v14;
        PC_CMTimeSaferSubtract(&v16, &v15, (uint64_t)&v13);
        *((_OWORD *)this + 2) = *(_OWORD *)&v13.value;
        epoch = v13.epoch;
      }
      *((_QWORD *)this + 6) = epoch;
      break;
    case 3:
      v6 = (char *)this + 56;
      goto LABEL_8;
    case 4:
      v6 = (char *)this + 64;
LABEL_8:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 16))(a3, v6);
      break;
    case 5:
      LODWORD(v16.value) = 0;
      (*(void (**)(PCStreamElement *, CMTime *))(*(_QWORD *)a3 + 24))(a3, &v16);
      *((_DWORD *)this + 18) = v16.value;
      break;
    case 6:
      LODWORD(v15.value) = 0;
      (*(void (**)(PCStreamElement *, CMTime *))(*(_QWORD *)a3 + 24))(a3, &v15);
      value = v15.value;
      *((_DWORD *)this + 19) = v15.value;
      if (value == 1)
      {
        *((_DWORD *)this + 19) = 0;
        PCURL::PCURL((PCURL *)&v16, CFSTR("Marker DVD Menu Loop Label"));
        PCString::set((PCString *)this + 7, (const PCString *)&v16);
        PCString::~PCString((PCString *)&v16);
        value = *((_DWORD *)this + 19);
      }
      if (value == 2)
      {
        *((_DWORD *)this + 19) = 0;
        PCURL::PCURL((PCURL *)&v16, CFSTR("Marker DVD Alpha Transition Label"));
        PCString::set((PCString *)this + 7, (const PCString *)&v16);
        PCString::~PCString((PCString *)&v16);
      }
      break;
    default:
      return 0;
  }
  return 0;
}

void sub_1B2E6F9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 48));
  _Unwind_Resume(a1);
}

void OZTimeMarkerSet::OZTimeMarkerSet(OZTimeMarkerSet *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E6597008;
  *((_QWORD *)this + 1) = (char *)this + 16;
}

uint64_t *std::set<OZTimeMarker>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<OZTimeMarker>::insert[abi:ne180100]<std::__tree_const_iterator<OZTimeMarker,std::__tree_node<OZTimeMarker,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1B2E6FA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<OZGuide>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void OZTimeMarkerSet::OZTimeMarkerSet(OZTimeMarkerSet *this, const OZTimeMarkerSet *a2)
{
  std::set<OZTimeMarker>::set[abi:ne180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
  *(_QWORD *)this = &off_1E6597008;
}

char *OZTimeMarkerSet::findNextMarker(OZTimeMarkerSet *this, CMTime *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  CMTime v8;

  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  v8 = *a2;
  if (v2 != (char *)this + 16)
  {
    while (!ozTimeLessThanOffset::operator()(&v8, (uint64_t)(v2 + 32)))
    {
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
      if (v5 == v3)
        return v3;
    }
  }
  return v2;
}

uint64_t OZTimeMarkerSet::writeHeader(OZTimeMarkerSet *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerSetScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 72);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimeMarkerSet::writeBody(OZTimeMarkerSet *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  OZTimeMarkerSet *v6;
  OZTimeMarkerSet *v7;
  OZTimeMarkerSet *v8;
  BOOL v9;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerSetScope);
  v6 = (OZTimeMarkerSet *)*((_QWORD *)this + 1);
  if (v6 != (OZTimeMarkerSet *)((char *)this + 16))
  {
    do
    {
      (*(void (**)(_QWORD *, PCSerializerWriteStream *, uint64_t))(*((_QWORD *)v6 + 4) + 16))((_QWORD *)v6 + 4, a2, a3);
      (*(void (**)(_QWORD *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v6 + 4) + 24))((_QWORD *)v6 + 4, a2, a3, 1, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v7 = (OZTimeMarkerSet *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(OZTimeMarkerSet **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (OZTimeMarkerSet *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (OZTimeMarkerSet *)((char *)this + 16));
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimeMarkerSet::parseBegin(OZTimeMarkerSet *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTimeMarkerSetScope);
  return 0;
}

uint64_t OZTimeMarkerSet::parseEnd(uint64_t **this, PCSerializerReadStream *a2)
{
  if (OZTimeMarkerSet::_reading)
  {
    std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(this + 1, OZTimeMarkerSet::_reading, (const OZTimeMarker *)OZTimeMarkerSet::_reading);
    if (OZTimeMarkerSet::_reading)
      (*(void (**)(uint64_t))(*(_QWORD *)OZTimeMarkerSet::_reading + 8))(OZTimeMarkerSet::_reading);
  }
  OZTimeMarkerSet::_reading = 0;
  return 0;
}

uint64_t OZTimeMarkerSet::parseElement(uint64_t **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZTimeMarker *v4;

  if (*((_DWORD *)a3 + 2) == 73)
  {
    if (OZTimeMarkerSet::_reading)
    {
      std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(this + 1, OZTimeMarkerSet::_reading, (const OZTimeMarker *)OZTimeMarkerSet::_reading);
      v4 = (OZTimeMarker *)OZTimeMarkerSet::_reading;
    }
    else
    {
      v4 = (OZTimeMarker *)operator new();
      OZTimeMarker::OZTimeMarker(v4);
      OZTimeMarkerSet::_reading = (uint64_t)v4;
    }
    PCSerializerReadStream::pushHandler(a2, v4);
  }
  return 0;
}

void sub_1B2E6FD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E1CD183DLL);
  _Unwind_Resume(a1);
}

void OZTimeMarkerSet::~OZTimeMarkerSet(OZTimeMarkerSet *this)
{
  std::__tree<OZGuide>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  std::__tree<OZGuide>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x1B5E29170);
}

uint64_t *std::set<OZTimeMarker>::insert[abi:ne180100]<std::__tree_const_iterator<OZTimeMarker,std::__tree_node<OZTimeMarker,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<OZTimeMarker>::__emplace_hint_unique_key_args<OZTimeMarker,OZTimeMarker const&>(v5, v6, (uint64_t)(v4 + 4), (const OZTimeMarker *)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<OZTimeMarker>::__emplace_hint_unique_key_args<OZTimeMarker,OZTimeMarker const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, const OZTimeMarker *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<OZTimeMarker>::__construct_node<OZTimeMarker const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t **v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  CMTime v20;
  CMTime time1;

  v9 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2)
  {
    time1 = *(CMTime *)(a5 + 8);
    v20 = *(CMTime *)(a2 + 5);
    if ((CMTimeCompare(&time1, &v20) & 0x80000000) == 0)
    {
      time1 = *(CMTime *)(a2 + 5);
      v20 = *(CMTime *)(a5 + 8);
      if ((CMTimeCompare(&time1, &v20) & 0x80000000) == 0)
      {
        *a3 = a2;
        *a4 = (uint64_t)a2;
        return a4;
      }
      a4 = a2 + 1;
      v13 = a2[1];
      if (v13)
      {
        v14 = (uint64_t *)a2[1];
        do
        {
          v15 = (uint64_t **)v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        v18 = a2;
        do
        {
          v15 = (uint64_t **)v18[2];
          v17 = *v15 == v18;
          v18 = (uint64_t *)v15;
        }
        while (!v17);
      }
      if (v15 == v9)
        goto LABEL_27;
      time1 = *(CMTime *)(a5 + 8);
      v20 = *(CMTime *)(v15 + 5);
      if (CMTimeCompare(&time1, &v20) < 0)
      {
        v13 = *a4;
LABEL_27:
        if (v13)
        {
          *a3 = (uint64_t *)v15;
          return (uint64_t *)v15;
        }
        else
        {
          *a3 = a2;
        }
        return a4;
      }
      return std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>((uint64_t)a1, a3, a5);
    }
  }
  if (*a1 == a2)
  {
    v12 = a2;
  }
  else
  {
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    time1 = *(CMTime *)(v12 + 5);
    v20 = *(CMTime *)(a5 + 8);
    if ((CMTimeCompare(&time1, &v20) & 0x80000000) == 0)
      return std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>((uint64_t)a1, a3, a5);
  }
  if (*a2)
  {
    *a3 = v12;
    return v12 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

BOOL ozTimeLessThanOffset::operator()(CMTime *a1, uint64_t a2)
{
  CMTime v5;
  CMTime time1;

  v5 = *(CMTime *)(a2 + 8);
  time1 = *a1;
  if ((CMTimeCompare(&time1, &v5) & 0x80000000) == 0)
    return 0;
  v5 = *(CMTime *)(a2 + 8);
  time1 = *a1;
  return CMTimeCompare(&time1, &v5) != 0;
}

void OZRenderState::OZRenderState(OZRenderState *this)
{
  __int128 v2;

  v2 = *MEMORY[0x1E0CA2E68];
  this->var0.var3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&this->var0.var0 = v2;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&this->var1 = _Q0;
  this->var3 = 1.0;
  this->var4 = 0;
  this->var5 = 0;
  this->var6 = 0;
  this->var7.var0[3][3] = 1.0;
  this->var7.var0[2][2] = 1.0;
  this->var7.var0[1][1] = 1.0;
  this->var7.var0[0][0] = 1.0;
  *(_OWORD *)&this->var7.var0[0][1] = 0u;
  *(_OWORD *)&this->var7.var0[0][3] = 0u;
  *(_OWORD *)&this->var7.var0[1][2] = 0u;
  *(_OWORD *)&this->var7.var0[2][0] = 0u;
  *(_OWORD *)&this->var7.var0[2][3] = 0u;
  *(_OWORD *)&this->var7.var0[3][1] = 0u;
  this->var8 = 1;
  this->var14 = 0;
  this->var13 = 0;
  *(_DWORD *)&this->var9 = 0;
  this->var15 = 3;
  this->var16 = 0;
  this->var17 = 0;
  *(_WORD *)&this->var18 = 257;
  this->var20 = 1;
  *(_DWORD *)&this->var21 = 0;
  *(_DWORD *)&this->var25 = 1;
  this->var29 = 3;
  OZRenderState::TransformSet::TransformSet((OZRenderState::TransformSet *)&this->var30);
  this->var31 = 0;
}

void OZRenderState::OZRenderState(OZRenderState *this, const OZRenderState *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)&a2->var0.var0;
  this->var0.var3 = a2->var0.var3;
  *(_OWORD *)&this->var0.var0 = v2;
  *(_OWORD *)&this->var1 = *(_OWORD *)&a2->var1;
  this->var3 = a2->var3;
  this->var4 = a2->var4;
  this->var5 = a2->var5;
  this->var6 = a2->var6;
  v3 = *(_OWORD *)&a2->var7.var0[0][0];
  v4 = *(_OWORD *)&a2->var7.var0[0][2];
  v5 = *(_OWORD *)&a2->var7.var0[1][0];
  *(_OWORD *)&this->var7.var0[1][2] = *(_OWORD *)&a2->var7.var0[1][2];
  *(_OWORD *)&this->var7.var0[1][0] = v5;
  *(_OWORD *)&this->var7.var0[0][2] = v4;
  *(_OWORD *)&this->var7.var0[0][0] = v3;
  v6 = *(_OWORD *)&a2->var7.var0[2][0];
  v7 = *(_OWORD *)&a2->var7.var0[2][2];
  v8 = *(_OWORD *)&a2->var7.var0[3][0];
  *(_OWORD *)&this->var7.var0[3][2] = *(_OWORD *)&a2->var7.var0[3][2];
  *(_OWORD *)&this->var7.var0[3][0] = v8;
  *(_OWORD *)&this->var7.var0[2][2] = v7;
  *(_OWORD *)&this->var7.var0[2][0] = v6;
  *(_DWORD *)&this->var8 = *(_DWORD *)&a2->var8;
  *(_WORD *)&this->var12 = *(_WORD *)&a2->var12;
  this->var14 = a2->var14;
  this->var15 = a2->var15;
  this->var16 = a2->var16;
  this->var17 = a2->var17;
  *(_QWORD *)&this->var18 = *(_QWORD *)&a2->var18;
  *(_WORD *)&this->var26 = *(_WORD *)&a2->var26;
  this->var28 = a2->var28;
  this->var29 = a2->var29;
  this->var30.var0 = a2->var30.var0;
  this->var31 = a2->var31;
}

double OZRenderState::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  if (a2 != (__int128 *)a1)
  {
    v3 = 0;
    v4 = (uint64_t)a2 + 72;
    v5 = a1 + 72;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v5 + i) = *(_QWORD *)(v4 + i);
      ++v3;
      v5 += 32;
      v4 += 32;
    }
    while (v3 != 4);
  }
  *(_DWORD *)(a1 + 200) = *((_DWORD *)a2 + 50);
  *(_WORD *)(a1 + 204) = *((_WORD *)a2 + 102);
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_DWORD *)(a1 + 216) = *((_DWORD *)a2 + 54);
  *(_BYTE *)(a1 + 220) = *((_BYTE *)a2 + 220);
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  result = *((double *)a2 + 29);
  *(double *)(a1 + 232) = result;
  *(_WORD *)(a1 + 240) = *((_WORD *)a2 + 120);
  *(_BYTE *)(a1 + 242) = *((_BYTE *)a2 + 242);
  *(_DWORD *)(a1 + 244) = *((_DWORD *)a2 + 61);
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
  return result;
}

uint64_t *OZRenderState::TransformSet::pivot(uint64_t *this, int a2)
{
  uint64_t v2;

  v2 = *this | 7;
  if (!a2)
    v2 = *this & 0x3FF8;
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::rotation(uint64_t *this, int a2)
{
  uint64_t v2;

  v2 = *this | 0x38;
  if (!a2)
    v2 = *this & 0x3FC7;
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::scale(uint64_t *this, int a2)
{
  uint64_t v2;

  v2 = *this | 0x1C0;
  if (!a2)
    v2 = *this & 0x3E3F;
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::shear(uint64_t *this, int a2)
{
  uint64_t v2;

  v2 = *this | 0x600;
  if (!a2)
    v2 = *this & 0x39FF;
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::translation(uint64_t *this, int a2)
{
  uint64_t v2;

  v2 = *this | 0x3800;
  if (!a2)
    v2 = *this & 0x7FF;
  *this = v2;
  return this;
}

double OZRenderState::setEyeMatrix(OZRenderState *this, const LiCamera *a2)
{
  PCMatrix44Tmpl<double> *p_var7;
  uint64_t i;
  _OWORD *v6;
  __int128 v7;
  __n128 v8;
  double v9;
  double v10;
  _QWORD v12[16];

  this->var6 = 1;
  (*(void (**)(_QWORD *__return_ptr, const LiCamera *))(*(_QWORD *)a2 + 16))(v12, a2);
  p_var7 = &this->var7;
  if (v12 != (_QWORD *)p_var7)
  {
    for (i = 0; i != 16; i += 4)
    {
      v6 = (_OWORD *)((char *)p_var7 + i * 8);
      v7 = *(_OWORD *)&v12[i + 2];
      *v6 = *(_OWORD *)&v12[i];
      v6[1] = v7;
    }
  }
  if (!(*(unsigned int (**)(const LiCamera *))(*(_QWORD *)a2 + 632))(a2))
  {
    v9 = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 320))(a2);
    v8.n128_f64[0] = PCMatrix44Tmpl<double>::rightTranslate((double *)p_var7, 0.0, 0.0, -v9);
  }
  v10 = (*(double (**)(const LiCamera *, __n128))(*(_QWORD *)a2 + 488))(a2, v8);
  return PCMatrix44Tmpl<double>::rightScale((double *)p_var7, v10, v10, v10);
}

OZRenderState::TransformSet *OZRenderState::TransformSet::TransformSet(OZRenderState::TransformSet *this)
{
  OZRenderState::TransformSet *v3;
  int v4;

  *(_QWORD *)this = 0;
  v3 = this;
  v4 = 0;
  std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v3, 0xEuLL);
  return this;
}

void OZBehavior::OZBehavior(OZBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZBehavior *)((char *)this + 32));
  *(_QWORD *)this = &off_1E65970C0;
  *((_QWORD *)this + 2) = &unk_1E6597340;
  *((_QWORD *)this + 6) = &unk_1E6597598;
  OZChannelBehaviorRoot::OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56), a3, 0, a4, 0);
  OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  *((_QWORD *)this + 41) = 0;
  *((_WORD *)this + 160) = 0;
}

void sub_1B2E70658(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZChannelBehaviorRoot *v2;
  uint64_t v4;

  OZChannelBehaviorRoot::~OZChannelBehaviorRoot(v2);
  *(_QWORD *)(v1 + 16) = &unk_1E6588EA0;
  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v1 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZBehavior::OZBehavior(OZBehavior *this, const OZBehavior *a2, char a3)
{
  uint64_t v6;
  OZChannelBase *v7;
  unsigned int NextUniqueID;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZBehavior *)((char *)this + 32));
  *(_QWORD *)this = &off_1E65970C0;
  *((_QWORD *)this + 2) = &unk_1E6597340;
  *((_QWORD *)this + 6) = &unk_1E6597598;
  OZChannelBehaviorRoot::OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56), (const OZTimeMarkerSet **)a2 + 7, 0);
  v7 = (OZChannelBase *)OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  *((_QWORD *)this + 41) = 0;
  *((_WORD *)this + 160) = 0;
  if ((a3 & 2) != 0)
  {
    NextUniqueID = OZChannelBase::getNextUniqueID(v7);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 56), NextUniqueID);
  }
}

void sub_1B2E7074C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = &unk_1E6588EA0;
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v1 + 24) = 0;
  }
  _Unwind_Resume(exception_object);
}

void OZBehavior::~OZBehavior(OZBehavior *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65970C0;
  *((_QWORD *)this + 2) = &unk_1E6597340;
  *((_QWORD *)this + 6) = &unk_1E6597598;
  OZChannelBehaviorRoot::~OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56));
  *((_QWORD *)this + 2) = &unk_1E6588EA0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *((_QWORD *)this + 3) = 0;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65970C0;
  *((_QWORD *)this + 2) = &unk_1E6597340;
  *((_QWORD *)this + 6) = &unk_1E6597598;
  OZChannelBehaviorRoot::~OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56));
  *((_QWORD *)this + 2) = &unk_1E6588EA0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *((_QWORD *)this + 3) = 0;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65970C0;
  *((_QWORD *)this + 2) = &unk_1E6597340;
  *((_QWORD *)this + 6) = &unk_1E6597598;
  OZChannelBehaviorRoot::~OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56));
  *((_QWORD *)this + 2) = &unk_1E6588EA0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *((_QWORD *)this + 3) = 0;
  }
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZBehavior::~OZBehavior(OZBehavior *this)
{
  uint64_t v2;

  *((_QWORD *)this - 2) = &off_1E65970C0;
  *(_QWORD *)this = &unk_1E6597340;
  *((_QWORD *)this + 4) = &unk_1E6597598;
  OZChannelBehaviorRoot::~OZChannelBehaviorRoot((OZBehavior *)((char *)this + 40));
  *(_QWORD *)this = &unk_1E6588EA0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;

  *((_QWORD *)this - 6) = &off_1E65970C0;
  *((_QWORD *)this - 4) = &unk_1E6597340;
  *(_QWORD *)this = &unk_1E6597598;
  OZChannelBehaviorRoot::~OZChannelBehaviorRoot((OZBehavior *)((char *)this + 8));
  *((_QWORD *)this - 4) = &unk_1E6588EA0;
  v2 = *((_QWORD *)this - 3);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *((_QWORD *)this - 3) = 0;
  }
}

{
  OZBehavior::~OZBehavior((OZBehavior *)((char *)this - 16));
}

{
  OZBehavior::~OZBehavior((OZBehavior *)((char *)this - 48));
}

uint64_t OZBehavior::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  result = OZChannelBehaviorRoot::operator=(a1 + 56, a2 + 56);
  *(_BYTE *)(a1 + 320) = 0;
  return result;
}

uint64_t OZBehavior::isActiveAtTime(OZBehavior *this, CMTime *a2, uint64_t a3, BOOL a4, int a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  CMTime *v10;
  CMTimeValue v11;
  CMTimeFlags v12;
  __int128 v13;
  CMTimeEpoch v14;
  __n128 v15;
  CMTimeEpoch v16;
  CMTime v17;
  CMTime v18;
  CMTime time2;
  CMTime time1;
  CMTime v21;
  CMTimeValue v22;
  CMTimeScale v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a5
    || (result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, a3, 1), (_DWORD)result))
  {
    v8 = *((_QWORD *)this + 41);
    if (v8 && (*(_BYTE *)(v8 + 1024) & 2) != 0)
    {
      return 0;
    }
    else
    {
      v15 = 0uLL;
      v16 = 0;
      v9 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this);
      v10 = (CMTime *)MEMORY[0x1E0CA2E68];
      if (v9)
      {
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), &v15);
      }
      else
      {
        v15 = *(__n128 *)MEMORY[0x1E0CA2E68];
        v16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      }
      v21 = *a2;
      *(__n128 *)&time1.value = v15;
      time1.epoch = v16;
      PC_CMTimeFloorToSampleDuration(&v21, &time1, (uint64_t)&time2);
      *a2 = time2;
      v11 = *((_QWORD *)this + 29);
      v21.epoch = *((_QWORD *)this + 28);
      v22 = v11;
      v12 = *((_DWORD *)this + 61);
      v23 = *((_DWORD *)this + 60);
      *(_OWORD *)&v21.value = *((_OWORD *)this + 13);
      v13 = *((_OWORD *)this + 13);
      v14 = *((_QWORD *)this + 31);
      *(_OWORD *)&time1.value = v13;
      time1.epoch = v21.epoch;
      time2 = *a2;
      if (CMTimeCompare(&time1, &time2) > 0)
        goto LABEL_10;
      time1 = v21;
      time2.value = v22;
      time2.timescale = v23;
      time2.flags = v12;
      time2.epoch = v14;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
      time1 = v18;
      *(__n128 *)&time2.value = v15;
      time2.epoch = v16;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
      time1 = *a2;
      time2 = v17;
      if (CMTimeCompare(&time1, &time2) <= 0 || (v12 & 1) != 0 && (v12 & 0x10) != 0)
      {
        return 1;
      }
      else
      {
LABEL_10:
        time1.value = v22;
        time1.timescale = v23;
        time1.flags = v12;
        time1.epoch = v14;
        time2 = *v10;
        return CMTimeCompare(&time1, &time2) < 1;
      }
    }
  }
  return result;
}

__n128 OZBehavior::getFrameDuration@<Q0>(OZBehavior *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  v3 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this);
  if (v3)
  {
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), a2).n128_u64[0];
  }
  else
  {
    v5 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v5 + 16);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZBehavior::isActiveAtTime(OZBehavior *this, CMTime *a2, uint64_t a3, BOOL a4, int a5)
{
  return OZBehavior::isActiveAtTime((OZBehavior *)((char *)this - 16), a2, a3, 0, a5);
}

uint64_t OZBehavior::isActiveInTimeRange(OZBehavior *this, const PCTimeRange *a2, uint64_t a3, BOOL a4, int a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  CMTime *v10;
  CMTime v11;
  CMTime v12[2];
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime time2;
  CMTime time1;

  if (!a5
    || (result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, a3, 1), (_DWORD)result))
  {
    v8 = *((_QWORD *)this + 41);
    if (v8 && (*(_BYTE *)(v8 + 1024) & 2) != 0)
    {
      return 0;
    }
    else
    {
      memset(&v13, 0, sizeof(v13));
      v9 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this);
      v10 = (CMTime *)MEMORY[0x1E0CA2E68];
      if (v9)
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v13);
      else
        v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      PCTimeRange::getRangeEnclosingWholeFrames(a2, &v13, (uint64_t)v12);
      *(_OWORD *)&v11.value = *(_OWORD *)((char *)this + 232);
      v11.epoch = *((_QWORD *)this + 31);
      v17 = *(CMTime *)((char *)this + 208);
      time1 = *(CMTime *)((char *)this + 208);
      time2 = *(CMTime *)((char *)this + 232);
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
      v15 = v12[0];
      time1 = v12[0];
      time2 = v12[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v14);
      time1 = v14;
      time2 = v17;
      if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v15, time2 = v16, CMTimeCompare(&time1, &time2) >= 1))
      {
        time1 = v11;
        time2 = *v10;
        return CMTimeCompare(&time1, &time2) < 1;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'OZBehavior::isActiveInTimeRange(OZBehavior *this, const PCTimeRange *a2, uint64_t a3, BOOL a4, int a5)
{
  return OZBehavior::isActiveInTimeRange((OZBehavior *)((char *)this - 16), a2, a3, 0, a5);
}

uint64_t OZBehavior::getSceneNode(OZBehavior *this)
{
  return *((_QWORD *)this + 41);
}

{
  return *((_QWORD *)this + 41);
}

uint64_t `non-virtual thunk to'OZBehavior::getSceneNode(OZBehavior *this)
{
  return *((_QWORD *)this + 39);
}

uint64_t OZBehavior::getScene(OZBehavior *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 41);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZBehavior::getScene(OZBehavior *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 39);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  return result;
}

uint64_t OZBehavior::getSourceOperationMask(OZBehavior *this, OZChannelBase *a2, int a3)
{
  uint64_t v4;

  if ((OZChannelBase *)((char *)this + 56) == a2 && (v4 = *((_QWORD *)this + 41)) != 0)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 552))(*((_QWORD *)this + 41));
  else
    return OZObjectManipulator::getSourceOperationMask((OZBehavior *)((char *)this + 16), a2, a3);
}

uint64_t `non-virtual thunk to'OZBehavior::getSourceOperationMask(OZBehavior *this, OZChannelBase *a2, int a3)
{
  return OZBehavior::getSourceOperationMask((OZBehavior *)((char *)this - 16), a2, a3);
}

void OZBehavior::getPasteEntry(OZBehavior *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Behaviors/OZBehavior.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2E70F34()
{
  return 0;
}

void `non-virtual thunk to'OZBehavior::getPasteEntry(OZBehavior *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Behaviors/OZBehavior.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2E70F7C()
{
  return 0;
}

char *OZBehavior::allowDrag(char *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  char *v13;
  OZSceneNode *v14;
  uint64_t v15;

  v13 = this;
  if (lpsrc)
  {
    *a5 = 0;
    if (this && (_DWORD)a7 == 1 && *a6 == 1)
    {
      if (v13 + 56 == (char *)a3)
      {
        v14 = (OZSceneNode *)this;
        v15 = (*(uint64_t (**)(char *))(*(_QWORD *)this + 272))(this);
        this = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v13 + 336))(v13);
        if ((char *)v15 == this)
        {
          this = (char *)OZChannelObjectRoot::findNodeRefDescendant((OZChannelObjectRoot *)a3, v14, (OZChannelFolder *)a3);
          if (this)
          {
            *a6 = 1;
            *a5 = a4 & 8;
          }
        }
      }
      return this;
    }
    if (v13 + 56 != (char *)a3)
      return this;
    if (this)
      return this;
  }
  else
  {
    *a5 = 0;
    if (this + 56 != (char *)a3)
      return this;
  }
  this = (char *)*((_QWORD *)v13 + 41);
  if (this && (*a6 | 2) == 3)
    return (char *)(*(uint64_t (**)(char *, OZFactoryBase *, OZChannelBase *, uint64_t, unsigned int *, unsigned int *, uint64_t))(*(_QWORD *)this + 568))(this, lpsrc, a3, a4, a5, a6, a7);
  return this;
}

char *`non-virtual thunk to'OZBehavior::allowDrag(OZBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  return OZBehavior::allowDrag((char *)this - 16, a2, a3, a4, a5, a6, a7);
}

uint64_t OZBehavior::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a1 + 56 == a3 && (v4 = *(_QWORD *)(a1 + 328)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 576))(v4);
  else
    return 0;
}

uint64_t `non-virtual thunk to'OZBehavior::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a1 + 40 == a3 && (v4 = *(_QWORD *)(a1 + 312)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 576))(v4);
  else
    return 0;
}

uint64_t OZBehavior::performDragOperation(OZBehavior *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  OZSceneNode *v16;
  unsigned int *v17;
  void *NodeRefDescendant;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t result;
  PCSharedCount v24;

  if (lpsrc)
  {
    if ((_DWORD)a6 == 1 && (_DWORD)a5 == 1)
    {
      v17 = (unsigned int *)v16;
      if (v16)
      {
        NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant((OZBehavior *)((char *)this + 56), v16, (OZChannelFolder *)((char *)this + 56));
        if ((OZChannelBase *)((char *)this + 56) == a3)
        {
          v19 = NodeRefDescendant;
          v20 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 272))(v17);
          if (v20 == (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this) && v19 != 0)
          {
            PCSharedCount::PCSharedCount(&v24);
            (*(void (**)(void *, PCSharedCount *))(*(_QWORD *)v19 + 344))(v19, &v24);
            PCString::~PCString((PCString *)&v24);
            (*(void (**)(OZBehavior *))(*(_QWORD *)this + 352))(this);
            (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v19 + 864))(v19, v17[20], 0);
            if ((*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this))
            {
              v22 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this);
              OZDocument::postNotification(*(OZDocument **)(v22 + 1584), 8);
            }
            return 1;
          }
        }
        return 0;
      }
    }
  }
  if ((OZChannelBase *)((char *)this + 56) != a3)
    return 0;
  result = *((_QWORD *)this + 41);
  if (result)
    return (*(uint64_t (**)(uint64_t, OZFactoryBase *, OZChannelBase *, uint64_t, uint64_t, uint64_t, uint64_t, const CMTime *))(*(_QWORD *)result + 584))(result, lpsrc, a3, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B2E71324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZBehavior::performDragOperation(OZBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZBehavior::performDragOperation((OZBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZBehavior::deleteThis(OZBehavior *this, OZChannelBase *a2)
{
  uint64_t v3;

  if ((OZChannelBase *)((char *)this + 56) == a2 && (v3 = *((_QWORD *)this + 41)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 608))(v3);
  else
    return 0;
}

uint64_t `non-virtual thunk to'OZBehavior::deleteThis(OZBehavior *this, OZChannelBase *a2)
{
  uint64_t v3;

  if ((OZChannelBase *)((char *)this + 40) == a2 && (v3 = *((_QWORD *)this + 39)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 608))(v3);
  else
    return 0;
}

uint64_t OZBehavior::copy(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZBehavior::copy(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZBehavior::paste(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZBehavior::paste(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZBehavior::rename(OZBehavior *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZBehavior::rename(OZBehavior *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

BOOL OZBehavior::isSelected(OZBehavior *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 56), 1);
}

BOOL `non-virtual thunk to'OZBehavior::isSelected(OZBehavior *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 40), 1);
}

OZChannelBase *OZBehavior::select(OZBehavior *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 1, 0);
}

OZChannelBase *`non-virtual thunk to'OZBehavior::select(OZBehavior *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 40), 1, 0);
}

OZChannelBase *OZBehavior::deselect(OZBehavior *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)((char *)this + 56);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 1, 0);
  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

OZChannelBase *`non-virtual thunk to'OZBehavior::deselect(OZBehavior *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)((char *)this + 40);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 40), 1, 0);
  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

uint64_t OZBehavior::isAnyParentSelected(OZBehavior *this)
{
  uint64_t v2;
  OZChannelBase *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 41);
  if (!v2)
    return 0;
  v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 640))(v2);
  v4 = 1;
  if (!OZChannelBase::testFlag(v3, 1))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 704))(*((_QWORD *)this + 41));
  return v4;
}

uint64_t `non-virtual thunk to'OZBehavior::isAnyParentSelected(OZBehavior *this)
{
  return OZBehavior::isAnyParentSelected((OZBehavior *)((char *)this - 16));
}

int8x8_t *OZBehavior::dirty(OZBehavior *this)
{
  int8x8_t *result;

  OZObjectManipulator::dirty((OZBehavior *)((char *)this + 16));
  result = (int8x8_t *)*((_QWORD *)this + 41);
  if (result)
  {
    if (vorr_s8(result[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[4].i8, *(int8x16_t *)result[4].i8, 8uLL)))
    {
      return (int8x8_t *)(*(uint64_t (**)(int8x8_t *))(*(_QWORD *)result + 496))(result);
    }
  }
  return result;
}

int8x8_t *`non-virtual thunk to'OZBehavior::dirty(OZBehavior *this)
{
  return OZBehavior::dirty((OZBehavior *)((char *)this - 16));
}

double OZBehavior::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char *Node;
  _OWORD *v12;
  int *StaticHash;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  double result;
  uint64_t *v18;
  _QWORD *v19[2];
  __n128 v20;

  if (!v6)
    __cxa_bad_cast();
  v7 = v6;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v6 + 40))(v6);
  (*(void (**)(uint64_t, void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 568))(a1, lpsrc, 0, 0, 1);
  v20 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  v8 = *(_QWORD *)(a1 + 328);
  if (v8 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8))
  {
    v9 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 272))(*(_QWORD *)(a1 + 328));
    v19[0] = 0;
    v19[1] = 0;
    v18 = (uint64_t *)v19;
    OZScene::getImmediatelyReferencedNodes(v9, *(_DWORD *)(a1 + 80), &v18);
    v10 = v18;
    if (v18 != (uint64_t *)v19)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v9, *((_DWORD *)v10 + 7));
        if (Node)
        {
          v12 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
          {
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v12, lpsrc, a3);
            PCHash128::operator+=((int *)&v20, StaticHash);
          }
        }
        v14 = (uint64_t *)v10[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v10[2];
            v16 = *v15 == (_QWORD)v10;
            v10 = v15;
          }
          while (!v16);
        }
        v10 = v15;
      }
      while (v15 != (uint64_t *)v19);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v18, v19[0]);
  }
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v7, &v20).n128_u64[0];
  return result;
}

void sub_1B2E716C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZBehavior::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZBehavior::calcStaticHash(a1 - 16, a2, a3);
}

double OZBehavior::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4)
{
  int8x8_t *v8;
  int8x8_t *v9;
  uint64_t v10;
  double v11;
  __n128 TimeOffset;
  uint64_t v13;
  uint64_t **v14;
  CMTimeValue value;
  char *Node;
  _OWORD *v17;
  CMTime *v18;
  CMTime *v19;
  BOOL v20;
  double result;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  _BYTE v25[24];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  CMTimeEpoch epoch;
  CMTime v30;
  CMTime v31;

  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v28 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(a1, &v28, 1, 1, 1);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 48))(lpsrc, v10);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v31 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 56), (PCSerializerWriteStream *)lpsrc, &v31);
  v27 = *(_QWORD *)(a1 + 224);
  v26 = *(_OWORD *)(a1 + 208);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, __int128 *))(*(_QWORD *)lpsrc + 112))(lpsrc, &v26);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v31 = *(CMTime *)(a1 + 208);
  v30 = *(CMTime *)(a1 + 232);
  v11 = PC_CMTimeSaferAdd(&v31, &v30, (uint64_t)v25);
  (*(void (**)(void *, _QWORD, double))(*(_QWORD *)lpsrc + 16))(lpsrc, 0, v11);
  (*(void (**)(void *, _BYTE *))(*(_QWORD *)lpsrc + 112))(lpsrc, v25);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)(a1 + 56), &v24);
  (*(void (**)(void *, _QWORD, __n128))(*(_QWORD *)lpsrc + 16))(lpsrc, 0, TimeOffset);
  (*(void (**)(void *, __n128 *))(*(_QWORD *)lpsrc + 112))(lpsrc, &v24);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v31 = *a3;
  (*(void (**)(void *, CMTime *))(*(_QWORD *)lpsrc + 112))(lpsrc, &v31);
  v23 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  v13 = *(_QWORD *)(a1 + 328);
  if (v13 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 272))(v13))
  {
    v14 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 272))(*(_QWORD *)(a1 + 328));
    *(_QWORD *)&v30.timescale = 0;
    v30.epoch = 0;
    v30.value = (CMTimeValue)&v30.timescale;
    OZScene::getImmediatelyReferencedNodes(v14, *(_DWORD *)(a1 + 80), (uint64_t **)&v30);
    value = v30.value;
    if ((CMTimeScale *)v30.value != &v30.timescale)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v14, *(_DWORD *)(value + 28));
        if (Node)
        {
          v17 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v17, lpsrc, (OZRenderParams *)a3, a4, &v22);
            PCHash128::operator+=((int *)&v23, (int *)&v22);
          }
        }
        v18 = *(CMTime **)(value + 8);
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (CMTime *)v18->value;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = *(CMTime **)(value + 16);
            v20 = v19->value == value;
            value = (CMTimeValue)v19;
          }
          while (!v20);
        }
        value = (CMTimeValue)v19;
      }
      while (v19 != (CMTime *)&v30.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v30, *(_QWORD **)&v30.timescale);
  }
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v9, &v23).n128_u64[0];
  return result;
}

void sub_1B2E71A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZBehavior::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZBehavior::calcHashForState(a1 - 16, a2, a3, a4);
}

unint64_t OZBehavior::canAddToSceneNode(OZBehavior *this, OZSceneNode *a2)
{
  return OZBehavior::CanAddToSceneNode((unsigned int *)(*((_QWORD *)this + 1) + 8), (uint64_t)a2);
}

unint64_t OZBehavior::CanAddToSceneNode(unsigned int *a1, uint64_t a2)
{
  const void *Factory;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v11;
  unint64_t v13;
  int32x4_t v14;

  Factory = (const void *)OZFactories::findFactory(*(_QWORD *)(theApp + 32), a1);
  v5 = v4[32];
  v6 = v4[33];
  v7 = v4[34];
  v8 = v4[35];
  if (!(v6 | v5 | v7 | v8))
    return 1;
  v11 = v5 == 1940067709 && v6 == -2144595497 && v7 == -1993998333 && v8 == -1821964494;
  if (v11 && (OZSceneNode::isDescendantOf360Group(a2) & 1) != 0)
    return 0;
  v13 = *(_QWORD *)(a2 + 8);
  v14.i64[0] = __PAIR64__(v6, v5);
  v14.i64[1] = __PAIR64__(v8, v7);
  return OZFactory::isKindOfClass(v13, &v14);
}

uint64_t OZBehavior::IsChannelAffectedByBehaviors(OZBehavior *this, const OZChannelBase *a2)
{
  OZChannel *v3;
  const void **v4;
  const void *v5;
  _QWORD *v6;
  OZSimulationCurveNode *v7;
  uint64_t v8;
  _QWORD *v9;
  char IsChannelAffectedByBehaviors;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  const void **v15;
  const void **v16;

  if ((*((_BYTE *)this + 57) & 0x10) != 0)
  {
    if (!v9 || *v9 == v9[1])
    {
      IsChannelAffectedByBehaviors = 0;
    }
    else
    {
      IsChannelAffectedByBehaviors = 0;
      v11 = *v9 + 8;
      do
      {
        if (!OZChannelBase::testFlag(*(OZChannelBase **)(v11 - 8), 2))
          IsChannelAffectedByBehaviors = OZBehavior::IsChannelAffectedByBehaviors(*(OZBehavior **)(v11 - 8), a2, v12);
        v13 = v11 == v9[1];
        v11 += 8;
        v13 = !v13 && (IsChannelAffectedByBehaviors & 1) == 0;
      }
      while (v13);
    }
    return IsChannelAffectedByBehaviors & 1;
  }
  else
  {
    if (v3)
    {
      OZChannel::enumerateCurveProcessingNodes(v3, &v15);
      v4 = v15;
      if (v15 == v16)
      {
        v8 = 0;
        if (!v15)
          return v8;
        goto LABEL_29;
      }
      while (1)
      {
        v5 = *v4;
        if (*v4)
        {
          if (v6)
          {
            if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6[1] + 16) + 24))(v6[1] + 16, 0, 1) & 1) != 0)break;
          }
          if ((_DWORD)a2)
          {
            if (v7)
            {
              if ((OZSimulationCurveNode::anyAffectingBehaviors(v7) & 1) != 0)
                break;
            }
          }
        }
        if (++v4 == v16)
        {
          v8 = 0;
          goto LABEL_28;
        }
      }
      v8 = 1;
LABEL_28:
      v4 = v15;
      if (v15)
      {
LABEL_29:
        v16 = v4;
        operator delete(v4);
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_1B2E71CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZBehavior::GetBehaviorsAffectingChannel(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  OZChannel *v5;
  const void **v6;
  const void **v7;
  const void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *j;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  OZChannelBase ***v21;
  OZChannelBase **i;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const void **v26;
  const void **v27;

  if ((a1[57] & 0x10) != 0)
  {
    if (v21)
    {
      for (i = *v21; i != v21[1]; ++i)
      {
        if (!(_DWORD)a3 || !OZChannelBase::testFlag(*i, 2))
          OZBehavior::GetBehaviorsAffectingChannel(*i, a2, a3);
      }
    }
  }
  else
  {
    if (v5)
    {
      OZChannel::enumerateCurveProcessingNodes(v5, &v26);
      v6 = v26;
      v7 = v27;
      if (v26 != v27)
      {
        do
        {
          v8 = *v6;
          if (*v6)
          {
            if (v9)
            {
              v10 = v9[1];
              for (j = (_QWORD *)a2[1]; j != a2; j = (_QWORD *)j[1])
              {
                if (j[2] == v10)
                {
                  if (j != a2)
                    goto LABEL_12;
                  break;
                }
              }
              v12 = operator new(0x18uLL);
              v12[1] = a2;
              v12[2] = v10;
              v13 = (_QWORD *)*a2;
              *v12 = *a2;
              v13[1] = v12;
              *a2 = v12;
              ++a2[2];
            }
LABEL_12:
            if (v14)
            {
              v23 = (uint64_t)&v23;
              v24 = &v23;
              v25 = 0;
              if ((_DWORD)a3)
                OZSimulationCurveNode::getVisibleAffectingBehaviors((uint64_t)v14, &v23);
              else
                OZSimulationCurveNode::getAllAffectingBehaviors((uint64_t)v14, &v23);
              v15 = v24;
              if (v24 != &v23)
              {
                v16 = (_QWORD *)*a2;
                v17 = a2[2];
                do
                {
                  v18 = (_QWORD *)a2[1];
                  v19 = v15[2];
                  while (v18 != a2)
                  {
                    if (v18[2] == v19)
                    {
                      if (v18 != a2)
                        goto LABEL_24;
                      break;
                    }
                    v18 = (_QWORD *)v18[1];
                  }
                  v20 = operator new(0x18uLL);
                  v20[1] = a2;
                  v20[2] = v19;
                  *v20 = v16;
                  v16[1] = v20;
                  *a2 = v20;
                  ++v17;
                  v16 = v20;
                  a2[2] = v17;
LABEL_24:
                  v15 = (uint64_t *)v15[1];
                }
                while (v15 != &v23);
              }
              std::__list_imp<unsigned int>::clear(&v23);
              v7 = v27;
            }
          }
          ++v6;
        }
        while (v6 != v7);
        v6 = v26;
      }
      if (v6)
      {
        v27 = v6;
        operator delete(v6);
      }
    }
  }
}

void sub_1B2E71F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZBehavior::isUltimatelyAffectedBy(uint64_t a1, OZChannelBase *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _BYTE *v10;
  uint64_t *i;
  OZChannelBase *v12;
  uint64_t Object;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  OZChannelBase *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v6 = a1 + 16;
  if (OZObjectManipulator::isInObjectList(a1 + 16, a3))
    return 0;
  v8 = operator new(0x18uLL);
  v8[1] = a3;
  v8[2] = v6;
  v9 = *(uint64_t **)a3;
  *v8 = *(_QWORD *)a3;
  v9[1] = (uint64_t)v8;
  *(_QWORD *)a3 = v8;
  ++*(_QWORD *)(a3 + 16);
  if (v6 == OZChannelBase::getObjectManipulator(a2))
    return 1;
  v10 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  if ((OZBehavior::IsChanAAffectedByChanB(v10, a2, a3) & 1) != 0)
    return 1;
  v24 = (uint64_t)&v24;
  v25 = &v24;
  v26 = 0;
  v21 = (uint64_t)&v21;
  v22 = &v21;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 520))(a1, &v21);
  for (i = v22; i != &v21; i = (uint64_t *)i[1])
  {
    v12 = (OZChannelBase *)i[2];
    Object = OZChanObjectManipRef::getObject(v12);
    (*(void (**)(uint64_t, OZChannelBase *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 528))(a1, v12, Object, &v24);
  }
  v14 = v25;
  if (v25 != &v24)
  {
    v15 = v25;
    do
    {
      v16 = v15[2];
      if ((OZChannelBase *)v16 == a2)
      {
LABEL_17:
        v7 = 1;
        goto LABEL_22;
      }
      if ((*(_BYTE *)(v16 + 57) & 0x10) != 0)
      {
        v17 = a2;
        while (1)
        {
          v17 = (OZChannelBase *)v17->var6;
          if (!v17)
            break;
          if (v17 == (OZChannelBase *)v16)
            goto LABEL_17;
        }
      }
      v15 = (uint64_t *)v15[1];
    }
    while (v15 != &v24);
    while (v14 != &v24)
    {
      if ((OZBehavior::IsChanAAffectedByChanB((_BYTE *)v14[2], a2, a3) & 1) != 0)
        goto LABEL_17;
      v14 = (uint64_t *)v14[1];
    }
  }
  v18 = *(uint64_t **)a3;
  v19 = **(_QWORD **)a3;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(*(_QWORD *)a3 + 8);
  *(_QWORD *)v18[1] = v19;
  --*(_QWORD *)(a3 + 16);
  operator delete(v18);
  v7 = 0;
LABEL_22:
  std::__list_imp<unsigned int>::clear(&v21);
  std::__list_imp<unsigned int>::clear(&v24);
  return v7;
}

void sub_1B2E7212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<unsigned int>::clear(&a9);
  std::__list_imp<unsigned int>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t OZBehavior::IsChanAAffectedByChanB(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD v13[3];

  if (a1 == a2)
    return 1;
  if ((a2[57] & 0x10) == 0)
  {
    std::list<OZObjectManipulator *>::list(v13, a3);
    v10 = (uint64_t)&v10;
    v11 = &v10;
    v12 = 0;
    OZBehavior::GetBehaviorsAffectingChannel(a1, &v10, 0);
    v6 = v11;
    if (v11 != &v10)
    {
      while ((OZBehavior::isUltimatelyAffectedBy(v6[2], a2, (uint64_t)v13) & 1) == 0)
      {
        v6 = (uint64_t *)v6[1];
        if (v6 == &v10)
          goto LABEL_6;
      }
      std::__list_imp<unsigned int>::clear(&v10);
      std::__list_imp<unsigned int>::clear(v13);
      return 1;
    }
LABEL_6:
    std::__list_imp<unsigned int>::clear(&v10);
    std::__list_imp<unsigned int>::clear(v13);
    return 0;
  }
  if (!v7)
    return 0;
  v8 = (_QWORD *)*v7;
  if (*v7 == v7[1])
    return 0;
  do
  {
    result = OZBehavior::IsChanAAffectedByChanB(a1, *v8, a3);
    if ((result & 1) != 0)
      break;
    ++v8;
  }
  while (v8 != (_QWORD *)v7[1]);
  return result;
}

void sub_1B2E72274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<unsigned int>::clear(&a9);
  std::__list_imp<unsigned int>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t OZBehavior::isUltimatelyAffectedBy(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (OZObjectManipulator::isInObjectList(a1 + 16, a3))
    return 0;
  if ((a2[57] & 0x10) == 0)
  {
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 536))(a1, v7, a3);
  }
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (*v8 == v8[1])
    return 0;
  do
  {
    result = OZBehavior::isUltimatelyAffectedBy(a1, *v9, a3);
    if ((result & 1) != 0)
      break;
    ++v9;
  }
  while (v9 != (_QWORD *)v8[1]);
  return result;
}

double OZBehavior::getSceneFrameRate(OZBehavior *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this);
  if (v1)
    return *(double *)(v1 + 368);
  else
    return 0.0;
}

__n128 OZBehavior::getNaturalDuration@<Q0>(OZBehavior *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  if ((*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v4 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)this + 336))(this);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), a2).n128_u64[0];
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'OZBehavior::getNaturalDuration@<D0>(OZBehavior *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = OZBehavior::getNaturalDuration((OZBehavior *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

uint64_t OZBehavior::isEnabledAndUseBehaviors(OZBehavior *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 41);
  if (v1 && (*(_BYTE *)(v1 + 1024) & 2) != 0)
    return 0;
  else
    return (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, 0, 1);
}

uint64_t OZBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZChannelObjectRoot *v4;

  v4 = (OZChannelObjectRoot *)(this + 7);
  if (!OZChannelBase::testFlag((OZChannelBase *)(this + 7), 8))
    OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  return OZChannelObjectRoot::markChannelFactoriesForSerialization(v4, a2);
}

uint64_t `non-virtual thunk to'OZBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZBehavior::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZBehaviorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 69);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 88);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 20));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZBehavior::writeHeader(this - 6, a2);
}

uint64_t OZBehavior::writeBody(OZBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZBehaviorScope);
  OZChannelObjectRoot::writeBody((OZBehavior *)((char *)this + 56), a2, 0, 1, a5);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZBehavior::writeBody(OZBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZBehavior::writeBody((OZBehavior *)((char *)this - 48), a2, 0, 0, a5);
}

uint64_t OZBehavior::parseBegin(OZBehavior *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZBehaviorScope);
  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 56), a2);
}

uint64_t `non-virtual thunk to'OZBehavior::parseBegin(OZBehavior *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZBehaviorScope);
  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 8), a2);
}

uint64_t OZBehavior::parseEnd(OZBehavior *this, PCSerializerReadStream *a2)
{
  OZChannelFolder *v3;

  v3 = (OZChannelFolder *)((char *)this + 56);
  (*(void (**)(OZBehavior *))(*(_QWORD *)this + 88))(this);
  return OZChannelObjectRoot::parseEnd(v3, a2);
}

uint64_t `non-virtual thunk to'OZBehavior::parseEnd(OZBehavior *this, PCSerializerReadStream *a2)
{
  char *v3;

  v3 = (char *)this - 48;
  (*(void (**)(char *))(*((_QWORD *)this - 6) + 88))((char *)this - 48);
  return OZChannelObjectRoot::parseEnd((OZChannelFolder *)(v3 + 56), a2);
}

uint64_t OZBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v6;
  PCSharedCount v8;

  PCSharedCount::PCSharedCount(&v8);
  v6 = OZChannelObjectRoot::parseElement(this + 7, a2, a3);
  PCString::~PCString((PCString *)&v8);
  return v6;
}

void sub_1B2E726F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZBehavior::parseElement(this - 6, a2, a3);
}

void sub_1B2E72794(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t OZEffect_Base::areEffectsAppliedInScreenSpace(OZEffect_Base *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

void OZEffect::OZEffect(OZEffect *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v8;
  _QWORD *v9;

  OZImageNode::OZImageNode(this);
  *v8 = off_1E6597CE0;
  v8[3] = 0;
  v8[4] = &unk_1E6589FB8;
  v8[5] = a2;
  v8[6] = &unk_1E65953C8;
  v9 = v8 + 6;
  v8[7] = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v8 + 8));
  *(_QWORD *)this = &off_1E6597638;
  *((_QWORD *)this + 4) = &unk_1E6597960;
  *((_QWORD *)this + 6) = &unk_1E65979C0;
  *((_QWORD *)this + 10) = &unk_1E6597C18;
  OZChannelObjectRoot::OZChannelObjectRoot((OZEffect *)((char *)this + 88), a3, 0, a4, 0);
  *((_QWORD *)this + 43) = 0x4014000000000000;
  *((_BYTE *)this + 352) = 0;
  *((_QWORD *)this + 37) = v9;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 45) = 0;
}

void sub_1B2E7288C(_Unwind_Exception *a1, const PCString *a2)
{
  OZChannelBase *v2;
  unint64_t var7;

  v2->var6 = (OZChannelFolder *)&unk_1E6588EA0;
  var7 = v2->var7;
  if (var7)
  {
    *(_QWORD *)(var7 + 8) = 0;
    v2->var7 = 0;
  }
  OZChannelBase::setRangeName(v2, a2);
  _Unwind_Resume(a1);
}

void OZEffect::OZEffect(OZEffect *this, const OZEffect *a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  OZChannelBase *v8;
  unsigned int NextUniqueID;

  OZImageNode::OZImageNode(this);
  *v6 = off_1E6597CE0;
  v6[3] = 0;
  v6[4] = &unk_1E6589FB8;
  v6[5] = *((_QWORD *)a2 + 5);
  v6[6] = &unk_1E65953C8;
  v7 = v6 + 6;
  v6[7] = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v6 + 8));
  *(_QWORD *)this = &off_1E6597638;
  *((_QWORD *)this + 4) = &unk_1E6597960;
  *((_QWORD *)this + 6) = &unk_1E65979C0;
  *((_QWORD *)this + 10) = &unk_1E6597C18;
  v8 = (OZChannelBase *)OZChannelObjectRoot::OZChannelObjectRoot((OZEffect *)((char *)this + 88), (const OZEffect *)((char *)a2 + 88), 0);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *((_BYTE *)this + 352) = *((_BYTE *)a2 + 352);
  *((_QWORD *)this + 37) = v7;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 45) = 0;
  if ((a3 & 2) != 0)
  {
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 88), NextUniqueID);
  }
}

void sub_1B2E729AC(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  OZChannelObjectRoot *v2;
  const PCString *v4;
  unint64_t var7;

  OZChannelObjectRoot::~OZChannelObjectRoot(v2);
  v1->var6 = (OZChannelFolder *)&unk_1E6588EA0;
  var7 = v1->var7;
  if (var7)
  {
    *(_QWORD *)(var7 + 8) = 0;
    v1->var7 = 0;
  }
  OZChannelBase::setRangeName(v1, v4);
  _Unwind_Resume(a1);
}

void OZEffect::~OZEffect(OZChannelBase *this)
{
  const PCString *v2;
  unint64_t var7;

  this->var0 = (void **)&off_1E6597638;
  this->var4.var0 = (__CFString *)&unk_1E6597960;
  this->var6 = (OZChannelFolder *)&unk_1E65979C0;
  this->var10 = (__CFString *)&unk_1E6597C18;
  OZChannelObjectRoot::~OZChannelObjectRoot((OZChannelObjectRoot *)&this->var11);
  this->var6 = (OZChannelFolder *)&unk_1E6588EA0;
  var7 = this->var7;
  if (var7)
  {
    *(_QWORD *)(var7 + 8) = 0;
    this->var7 = 0;
  }
  OZChannelBase::setRangeName(this, v2);
}

{
  OZEffect::~OZEffect(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZEffect::~OZEffect(OZEffect *this)
{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 32));
}

{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 48));
}

{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 80));
}

{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 32));
  JUMPOUT(0x1B5E29170);
}

{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 80));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZEffect::isEnabled(OZEffect *this, int a2, int a3)
{
  int isEnabled;

  isEnabled = OZObjectManipulator::isEnabled((OZEffect *)((char *)this + 48), a2, a3);
  return isEnabled & (*(unsigned int (**)(OZEffect *))(*(_QWORD *)this + 264))(this);
}

uint64_t `non-virtual thunk to'OZEffect::isEnabled(OZEffect *this, int a2, int a3)
{
  int isEnabled;

  isEnabled = OZObjectManipulator::isEnabled(this, a2, a3);
  return isEnabled & (*(unsigned int (**)(char *))(*((_QWORD *)this - 6) + 264))((char *)this - 48);
}

uint64_t OZEffect::isConnectionValid(OZEffect *this)
{
  return 1;
}

uint64_t OZEffect::isActiveAtTime(OZEffect *this, CMTime *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v8;
  OZSceneSettings *v9;
  CMTimeValue v10;
  CMTimeFlags v11;
  CMTimeEpoch v12;
  __n128 v13;
  CMTimeEpoch v14;
  CMTime v15;
  __n128 v16;
  CMTimeEpoch v17;
  CMTime time2;
  CMTime time1;
  CMTime v20;
  CMTimeValue v21;
  CMTimeScale v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a5
    || (result = (*(uint64_t (**)(OZEffect *, uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, a3, a4),
        (_DWORD)result))
  {
    v8 = *((_QWORD *)this + 45);
    if (!v8 || (*(_BYTE *)(v8 + 1024) & 1) == 0)
    {
      result = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 296))(this);
      if (!result)
        return result;
      v9 = (OZSceneSettings *)(result + 336);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(result + 336), &v16);
      v20 = *a2;
      *(__n128 *)&time1.value = v16;
      time1.epoch = v17;
      PC_CMTimeFloorToSampleDuration(&v20, &time1, (uint64_t)&time2);
      *a2 = time2;
      *(_OWORD *)&v20.value = *((_OWORD *)this + 15);
      v10 = *((_QWORD *)this + 33);
      v20.epoch = *((_QWORD *)this + 32);
      v21 = v10;
      v22 = *((_DWORD *)this + 68);
      v11 = *((_DWORD *)this + 69);
      v12 = *((_QWORD *)this + 35);
      OZSceneSettings::getFrameDuration(v9, &v13);
      time1 = v20;
      time2 = *a2;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        time1 = v20;
        time2.value = v21;
        time2.timescale = v22;
        time2.flags = v11;
        time2.epoch = v12;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
        *(__n128 *)&time1.value = v16;
        time1.epoch = v17;
        *(__n128 *)&time2.value = v13;
        time2.epoch = v14;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
        time1 = *a2;
        time2 = v15;
        if (CMTimeCompare(&time1, &time2) < 1)
          return 1;
        if ((v11 & 1) != 0)
          return (v11 >> 4) & 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'OZEffect::isActiveAtTime(OZEffect *this, CMTime *a2, uint64_t a3, uint64_t a4, int a5)
{
  return OZEffect::isActiveAtTime((OZEffect *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZEffect::isActiveInTimeRange(OZEffect *this, const PCTimeRange *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  CMTime v10[2];
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime time2;
  CMTime time1;

  if (!a5
    || (result = (*(uint64_t (**)(OZEffect *, uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, a3, a4),
        (_DWORD)result))
  {
    v8 = *((_QWORD *)this + 45);
    if (v8 && (*(_BYTE *)(v8 + 1024) & 1) != 0)
      return 0;
    memset(&v11, 0, sizeof(v11));
    v9 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 296))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v11);
    PCTimeRange::getRangeEnclosingWholeFrames(a2, &v11, (uint64_t)v10);
    v15 = *(CMTime *)((_BYTE *)this + 10);
    time1 = *(CMTime *)((_BYTE *)this + 10);
    time2 = *(CMTime *)((_BYTE *)this + 11);
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v14);
    v13 = v10[0];
    time1 = v10[0];
    time2 = v10[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v12);
    time1 = v12;
    time2 = v15;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      return 0;
    }
    else
    {
      time1 = v13;
      time2 = v14;
      return CMTimeCompare(&time1, &time2) < 1;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'OZEffect::isActiveInTimeRange(OZEffect *this, const PCTimeRange *a2, uint64_t a3, uint64_t a4, int a5)
{
  return OZEffect::isActiveInTimeRange((OZEffect *)((char *)this - 48), a2, a3, a4, a5);
}

__n128 OZEffect::getBounds(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = result;
  }
  return result;
}

uint64_t OZEffect::getResolution(OZEffect *this, double *a2, double *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, double *, double *))(*(_QWORD *)result + 112))(result, a2, a3);
  *a2 = 1.0;
  *a3 = 1.0;
  return result;
}

void OZEffect::getHelium(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t OZEffect::getSceneNode(OZEffect *this)
{
  return *((_QWORD *)this + 45);
}

uint64_t `non-virtual thunk to'OZEffect::getSceneNode(OZEffect *this)
{
  return *((_QWORD *)this + 39);
}

uint64_t OZEffect::getSceneNodeConst(OZEffect *this)
{
  return *((_QWORD *)this + 45);
}

uint64_t OZEffect::getWorkingColorDescription@<X0>(OZEffect *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 256))(this);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 288))(v3);
  else
    return FxGetDefaultWorkingColorDescription(a2);
}

float OZEffect::getBlendingGamma(OZEffect *this)
{
  uint64_t v1;
  float result;

  v1 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 256))(this);
  if (!v1)
    return PCRenderModel::getDefaultBlendingGamma(0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 296))(v1);
  return result;
}

uint64_t OZEffect::getDimensions(OZEffect *this, float *a2, float *a3, const OZRenderState *a4)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, float *, float *, const OZRenderState *))(*(_QWORD *)result + 96))(result, a2, a3, a4);
  *a2 = 0.0;
  *a3 = 0.0;
  return result;
}

uint64_t OZEffect::getSourceOperationMask(OZEffect *this, OZChannelBase *a2, int a3)
{
  uint64_t v4;

  if ((OZChannelBase *)((char *)this + 88) == a2 && (v4 = *((_QWORD *)this + 45)) != 0)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 552))(*((_QWORD *)this + 45));
  else
    return OZObjectManipulator::getSourceOperationMask((OZEffect *)((char *)this + 48), a2, a3);
}

uint64_t `non-virtual thunk to'OZEffect::getSourceOperationMask(OZEffect *this, OZChannelBase *a2, int a3)
{
  return OZEffect::getSourceOperationMask((OZEffect *)((char *)this - 48), a2, a3);
}

void OZEffect::getPasteEntry(OZEffect *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/OZEffect.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2E730A4()
{
  return 0;
}

void `non-virtual thunk to'OZEffect::getPasteEntry(OZEffect *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/OZEffect.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2E730EC()
{
  return 0;
}

OZEffect *OZEffect::allowDrag(OZEffect **this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  OZEffect *result;
  OZSceneNode *v15;
  uint64_t v16;

  if (lpsrc)
  {
    *a5 = 0;
    if (result && (_DWORD)a7 == 1 && *a6 == 1)
    {
      if (this + 11 == (OZEffect **)a3)
      {
        v15 = result;
        v16 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)result + 272))(result);
        result = (OZEffect *)(*((uint64_t (**)(OZEffect **))*this + 37))(this);
        if ((OZEffect *)v16 == result)
        {
          result = (OZEffect *)OZChannelObjectRoot::findNodeRefDescendant((OZChannelObjectRoot *)a3, v15, (OZChannelFolder *)a3);
          if (result)
          {
            *a6 = 1;
            *a5 = a4 & 8;
          }
        }
      }
      return result;
    }
  }
  else
  {
    *a5 = 0;
  }
  if (this + 11 == (OZEffect **)a3
    || (result = (OZEffect *)OZChannelBase::getChannelRootBase(a3), result == (OZEffect *)(this + 11)))
  {
    if (!lpsrc
    {
      result = this[45];
      if (result)
      {
        if ((*a6 | 2) == 3)
          return (OZEffect *)(*(uint64_t (**)(OZEffect *, OZFactoryBase *, OZChannelBase *, uint64_t, unsigned int *, unsigned int *, uint64_t))(*(_QWORD *)result + 568))(result, lpsrc, a3, a4, a5, a6, a7);
      }
    }
  }
  return result;
}

OZEffect *`non-virtual thunk to'OZEffect::allowDrag(OZEffect **this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  return OZEffect::allowDrag(this - 6, a2, a3, a4, a5, a6, a7);
}

uint64_t OZEffect::prepareForDragOperation(uint64_t a1, uint64_t a2, OZChannelBase *this, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  if (((OZChannelBase *)(a1 + 88) == this || OZChannelBase::getChannelRootBase(this) == (void *)(a1 + 88))
    && (v10 = *(_QWORD *)(a1 + 360)) != 0)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, OZChannelBase *, uint64_t, uint64_t))(*(_QWORD *)v10 + 576))(v10, a2, this, a4, a5);
  }
  else
  {
    return 0;
  }
}

uint64_t `non-virtual thunk to'OZEffect::prepareForDragOperation(uint64_t a1, uint64_t a2, OZChannelBase *a3, uint64_t a4, uint64_t a5)
{
  return OZEffect::prepareForDragOperation(a1 - 48, a2, a3, a4, a5);
}

uint64_t OZEffect::performDragOperation(OZEffect *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  OZSceneNode *v16;
  unsigned int *v17;
  void *NodeRefDescendant;
  void *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  PCSharedCount v24;

  if (lpsrc)
  {
    if ((_DWORD)a6 == 1 && (_DWORD)a5 == 1)
    {
      v17 = (unsigned int *)v16;
      if (v16)
      {
        NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant((OZEffect *)((char *)this + 88), v16, (OZChannelFolder *)((char *)this + 88));
        if ((OZChannelBase *)((char *)this + 88) == a3)
        {
          v19 = NodeRefDescendant;
          v20 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 272))(v17);
          if (v20 == (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 296))(this) && v19 != 0)
          {
            result = (*(uint64_t (**)(void *, unsigned int *))(*(_QWORD *)v19 + 872))(v19, v17 + 4);
            if ((_DWORD)result)
            {
              PCSharedCount::PCSharedCount(&v24);
              (*(void (**)(void *, PCSharedCount *))(*(_QWORD *)v19 + 344))(v19, &v24);
              PCString::~PCString((PCString *)&v24);
              (*(void (**)(OZEffect *))(*(_QWORD *)this + 320))(this);
              (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v19 + 864))(v19, v17[20], 0);
              if ((*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 296))(this))
              {
                v23 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 296))(this);
                OZDocument::postNotification(*(OZDocument **)(v23 + 1584), 8);
              }
              return 1;
            }
            return result;
          }
        }
        return 0;
      }
    }
  }
  if ((OZChannelBase *)((char *)this + 88) != a3 && OZChannelBase::getChannelRootBase(a3) != (char *)this + 88)
    return 0;
  result = *((_QWORD *)this + 45);
  if (result)
    return (*(uint64_t (**)(uint64_t, OZFactoryBase *, OZChannelBase *, uint64_t, uint64_t, uint64_t, uint64_t, const CMTime *))(*(_QWORD *)result + 584))(result, lpsrc, a3, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B2E7350C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZEffect::performDragOperation(OZEffect *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZEffect::performDragOperation((OZEffect *)((char *)this - 48), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZEffect::deleteThis(OZEffect *this, OZChannelBase *a2)
{
  uint64_t v3;

  if ((OZChannelBase *)((char *)this + 88) == a2 && (v3 = *((_QWORD *)this + 45)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 608))(v3);
  else
    return 0;
}

uint64_t `non-virtual thunk to'OZEffect::deleteThis(OZEffect *this, OZChannelBase *a2)
{
  uint64_t v3;

  if ((OZChannelBase *)((char *)this + 40) == a2 && (v3 = *((_QWORD *)this + 39)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 608))(v3);
  else
    return 0;
}

uint64_t OZEffect::copy(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZEffect::copy(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZEffect::paste(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZEffect::paste(OZEffect *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZEffect::rename(OZEffect *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZEffect::rename(OZEffect *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

BOOL OZEffect::isSelected(OZEffect *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 88), 1);
}

BOOL `non-virtual thunk to'OZEffect::isSelected(OZEffect *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 40), 1);
}

OZChannelBase *OZEffect::select(OZEffect *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 88), 1, 0);
}

OZChannelBase *`non-virtual thunk to'OZEffect::select(OZEffect *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 40), 1, 0);
}

OZChannelBase *OZEffect::deselect(OZEffect *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)((char *)this + 88);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 88), 1, 0);
  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

OZChannelBase *`non-virtual thunk to'OZEffect::deselect(OZEffect *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)((char *)this + 40);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 40), 1, 0);
  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

uint64_t OZEffect::isAnyParentSelected(OZEffect *this)
{
  uint64_t v2;
  OZChannelBase *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 45);
  if (!v2)
    return 0;
  v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 640))(v2);
  v4 = 1;
  if (!OZChannelBase::testFlag(v3, 1))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 45) + 704))(*((_QWORD *)this + 45));
  return v4;
}

uint64_t `non-virtual thunk to'OZEffect::isAnyParentSelected(OZEffect *this)
{
  return OZEffect::isAnyParentSelected((OZEffect *)((char *)this - 48));
}

uint64_t OZEffect::canAddToSceneNode(OZEffect *this, OZSceneNode *a2)
{
  unint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = *(_QWORD *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2) + 8);
  if (!v2)
    return 0;
  v12 = xmmword_1B355DB10;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v12) & 1) != 0)
    return 0;
  v11 = xmmword_1B355DCE0;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v11) & 1) != 0)
    return 0;
  v10 = xmmword_1B355E420;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v10) & 1) != 0)
    return 0;
  v9 = xmmword_1B355EAE0;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v9) & 1) != 0)
    return 0;
  v8 = xmmword_1B355EAF0;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v8) & 1) != 0)
    return 0;
  v7 = xmmword_1B355CF40;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v7) & 1) != 0)
    return 0;
  v6 = xmmword_1B355DD10;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v6) & 1) != 0)
    return 0;
  v5 = xmmword_1B355CF30;
  if ((OZFactory::isKindOfClass(v2, (int32x4_t *)&v5) & 1) != 0)
    return 0;
  v4 = xmmword_1B3053B20;
  return OZFactory::isKindOfClass(v2, (int32x4_t *)&v4) ^ 1;
}

uint64_t OZEffect::getScene(OZEffect *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 45);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZEffect::getScene(OZEffect *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 39);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  return result;
}

int8x8_t *OZEffect::dirty(OZEffect *this)
{
  int8x8_t *result;

  OZObjectManipulator::dirty((OZEffect *)((char *)this + 48));
  result = (int8x8_t *)*((_QWORD *)this + 45);
  if (result)
  {
    if (vorr_s8(result[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[4].i8, *(int8x16_t *)result[4].i8, 8uLL)))
    {
      return (int8x8_t *)(*(uint64_t (**)(int8x8_t *))(*(_QWORD *)result + 496))(result);
    }
  }
  return result;
}

int8x8_t *`non-virtual thunk to'OZEffect::dirty(OZEffect *this)
{
  return OZEffect::dirty((OZEffect *)((char *)this - 48));
}

__n128 OZEffect::getNaturalDuration@<Q0>(OZEffect *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  if ((*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 296))(this))
  {
    v4 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 296))(this);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), a2).n128_u64[0];
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'OZEffect::getNaturalDuration@<D0>(OZEffect *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = OZEffect::getNaturalDuration((OZEffect *)((char *)this - 48), a2).n128_u64[0];
  return result;
}

double OZEffect::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char *Node;
  _OWORD *v12;
  int *StaticHash;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  int *StaticHashWithoutEffects;
  double result;
  uint64_t *v23;
  _QWORD *v24[2];
  __n128 v25;

  if (!v6)
    __cxa_bad_cast();
  v7 = v6;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v6 + 40))(v6);
  (*(void (**)(uint64_t, void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 544))(a1, lpsrc, 0, 0, 1);
  v25 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  v8 = *(_QWORD *)(a1 + 360);
  if (v8 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8))
  {
    v9 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 272))(*(_QWORD *)(a1 + 360));
    v24[0] = 0;
    v24[1] = 0;
    v23 = (uint64_t *)v24;
    OZScene::getImmediatelyReferencedNodes(v9, *(_DWORD *)(a1 + 112), &v23);
    v10 = v23;
    if (v23 != (uint64_t *)v24)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v9, *((_DWORD *)v10 + 7));
        if (Node)
        {
          v12 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
          {
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v12, lpsrc, a3);
            PCHash128::operator+=((int *)&v25, StaticHash);
          }
        }
        v14 = (uint64_t *)v10[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v10[2];
            v16 = *v15 == (_QWORD)v10;
            v10 = v15;
          }
          while (!v16);
        }
        v10 = v15;
      }
      while (v15 != (uint64_t *)v24);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v23, v24[0]);
  }
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
  {
    v18 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 104))(v17);
    if (*(_QWORD *)(a1 + 24))
    {
      if (v18)
      {
        v19 = *(_QWORD *)(a1 + 360);
        v20 = (_OWORD *)(v19 + 16);
        if (!v19)
          v20 = 0;
        if (v18 != v20)
        {
          StaticHashWithoutEffects = (int *)OZObjectManipulator::getStaticHash(v18, lpsrc, a3);
LABEL_24:
          PCHash128::operator+=((int *)&v25, StaticHashWithoutEffects);
          goto LABEL_25;
        }
        if (v19)
        {
          StaticHashWithoutEffects = (int *)OZSceneNode::getStaticHashWithoutEffects(*(int8x8_t **)(a1 + 360), lpsrc, (uint64_t)a3);
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v7, &v25).n128_u64[0];
  return result;
}

void sub_1B2E73AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZEffect::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZEffect::calcStaticHash(a1 - 48, a2, a3);
}

double OZEffect::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4)
{
  int8x8_t *v8;
  int8x8_t *v9;
  uint64_t v10;
  __n128 TimeOffset;
  uint64_t v12;
  uint64_t **v13;
  CMTimeValue value;
  char *Node;
  _OWORD *v16;
  CMTime *v17;
  CMTime *v18;
  BOOL v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  double result;
  __int128 v25;
  __n128 v26;
  __n128 v27;
  CMTime v28;
  __int128 v29;
  CMTimeEpoch epoch;

  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v29 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, &v29, 1, 1, 1);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 48))(lpsrc, v10);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v28 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 88), (PCSerializerWriteStream *)lpsrc, &v28);
  TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)(a1 + 88), &v27);
  (*(void (**)(void *, _QWORD, __n128))(*(_QWORD *)lpsrc + 16))(lpsrc, 0, TimeOffset);
  (*(void (**)(void *, __n128 *))(*(_QWORD *)lpsrc + 112))(lpsrc, &v27);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v26 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  v12 = *(_QWORD *)(a1 + 360);
  if (v12 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 272))(v12))
  {
    v13 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 272))(*(_QWORD *)(a1 + 360));
    *(_QWORD *)&v28.timescale = 0;
    v28.epoch = 0;
    v28.value = (CMTimeValue)&v28.timescale;
    OZScene::getImmediatelyReferencedNodes(v13, *(_DWORD *)(a1 + 112), (uint64_t **)&v28);
    value = v28.value;
    if ((CMTimeScale *)v28.value != &v28.timescale)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v13, *(_DWORD *)(value + 28));
        if (Node)
        {
          v16 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v16, lpsrc, (OZRenderParams *)a3, a4, &v25);
            PCHash128::operator+=((int *)&v26, (int *)&v25);
          }
        }
        v17 = *(CMTime **)(value + 8);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (CMTime *)v17->value;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = *(CMTime **)(value + 16);
            v19 = v18->value == value;
            value = (CMTimeValue)v18;
          }
          while (!v19);
        }
        value = (CMTimeValue)v18;
      }
      while (v18 != (CMTime *)&v28.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v28, *(_QWORD **)&v28.timescale);
  }
  v20 = *(_QWORD *)(a1 + 24);
  if (v20)
  {
    v21 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 104))(v20);
    if (*(_QWORD *)(a1 + 24))
    {
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 360);
        v23 = (_OWORD *)(v22 + 16);
        if (!v22)
          v23 = 0;
        if (v21 != v23)
        {
          OZObjectManipulator::getHashForState(v21, lpsrc, (OZRenderParams *)a3, a4, &v28);
LABEL_24:
          PCHash128::operator+=((int *)&v26, (int *)&v28);
          goto LABEL_25;
        }
        if (v22)
        {
          OZSceneNode::getHashForStateWithoutEffects(*(OZCacheManager **)(a1 + 360), lpsrc, (OZRenderParams *)a3, (uint64_t)a4, &v28);
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v9, &v26).n128_u64[0];
  return result;
}

void sub_1B2E73DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZEffect::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZEffect::calcHashForState(a1 - 48, a2, a3, a4);
}

uint64_t OZEffect::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZChannelObjectRoot *v4;

  v4 = (OZChannelObjectRoot *)(this + 11);
  if (!OZChannelBase::testFlag((OZChannelBase *)(this + 11), 8))
    OZFactory::setNeedsSaving(this[5], (const OZFactory *)1);
  return OZChannelObjectRoot::markChannelFactoriesForSerialization(v4, a2);
}

uint64_t `non-virtual thunk to'OZEffect::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZEffect::markFactoriesForSerialization(this - 10, a2);
}

uint64_t OZEffect::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;
  OZFactory *v6;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZEffectScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 68);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 120);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 28));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(this[5], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  if ((*((unsigned int (**)(OZFactory **))*this + 73))(this))
  {
    if (this[16])
      v6 = this[16];
    else
      v6 = (OZFactory *)(this + 15);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, OZFactory *))(*(_QWORD *)a2 + 200))(a2, 118, v6);
  }
  (*((void (**)(OZFactory **))*this + 79))(this);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 184))(a2, 116);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZEffect::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZEffect::writeHeader(this - 10, a2);
}

uint64_t OZEffect::writeBody(OZEffect *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZEffectScope);
  OZChannelObjectRoot::writeBody((OZEffect *)((char *)this + 88), a2, 0, 1, a5);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZEffect::writeBody(OZEffect *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZEffect::writeBody((OZEffect *)((char *)this - 80), a2, 0, 0, a5);
}

uint64_t OZEffect::parseBegin(OZEffect *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZEffectScope);
  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 88), a2);
}

uint64_t `non-virtual thunk to'OZEffect::parseBegin(OZEffect *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZEffectScope);
  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 8), a2);
}

uint64_t OZEffect::parseEnd(OZEffect *this, PCSerializerReadStream *a2)
{
  OZChannelFolder *v3;

  v3 = (OZChannelFolder *)((char *)this + 88);
  (*(void (**)(OZEffect *))(*(_QWORD *)this + 200))(this);
  return OZChannelObjectRoot::parseEnd(v3, a2);
}

uint64_t `non-virtual thunk to'OZEffect::parseEnd(OZEffect *this, PCSerializerReadStream *a2)
{
  char *v3;

  v3 = (char *)this - 80;
  (*(void (**)(char *))(*((_QWORD *)this - 10) + 200))((char *)this - 80);
  return OZChannelObjectRoot::parseEnd((OZChannelFolder *)(v3 + 88), a2);
}

uint64_t OZEffect::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelObjectRoot::parseElement(this + 11, a2, a3);
}

uint64_t `non-virtual thunk to'OZEffect::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelObjectRoot::parseElement(this + 1, a2, a3);
}

double OZEffect::globalToLocalTime@<D0>(OZEffect *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::globalToLocalTime((OZEffect *)((char *)this + 88), a2, a3);
}

double OZEffect::localToGlobalTime@<D0>(OZEffect *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::localToGlobalTime((OZEffect *)((char *)this + 88), a2, a3);
}

uint64_t OZEffect::canBeAppliedToChildren(OZEffect *this, CMTime *a2)
{
  uint64_t result;
  CMTime v4;

  v4 = *a2;
  result = (*(uint64_t (**)(OZEffect *, CMTime *))(*(_QWORD *)this + 664))(this, &v4);
  if ((_DWORD)result)
    return (*(uint64_t (**)(OZEffect *))(*(_QWORD *)this + 672))(this);
  return result;
}

_QWORD *OZEffect::getHashForStateRN@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 + 48), a2, a3, a4, a5);
}

_OWORD *OZEffect::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 + 48), a2, a3);
}

OZChannelBase *OZEffect::finishInitializing(OZEffect *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 88));
}

uint64_t OZEffect::getSerializer(OZEffect *this)
{
  return (uint64_t)this + 80;
}

uint64_t OZEffect::getInstanceID(OZEffect *this)
{
  return *((unsigned int *)this + 28);
}

void OZEffect::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 88), a2, a3);
}

_QWORD *OZEffect::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 88), a2);
}

__n128 OZEffect::getTimeExtent@<Q0>(OZEffect *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *((_OWORD *)this + 15);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 32);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 35);
  result = *(__n128 *)((char *)this + 264);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t OZEffect::setVersion(uint64_t this, double a2)
{
  *(double *)(this + 344) = a2;
  return this;
}

double OZEffect::getVersion(OZEffect *this)
{
  return *((double *)this + 43);
}

void OZEffect::createNewLithiumNode(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

uint64_t `non-virtual thunk to'OZEffect::getImageNode(OZEffect *this)
{
  return (uint64_t)this - 48;
}

_QWORD *std::list<OZSimulationBehavior *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B2E74238(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

char *OZChannelMaterialMapTransform::init(OZChannelMaterialMapTransform *this)
{
  int v3[2];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 4);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1992), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2144), 0.01);
  v4 = 2;
  *(_QWORD *)v3 = 0x100000000;
  return OZChannelEnum::setTags((OZChannelMaterialMapTransform *)((char *)this + 896), (char *)v3, 3);
}

void OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v6;
  PCString v7;
  PCString v8;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5);
  *v6 = &off_1E6597DB8;
  v6[2] = &unk_1E6598098;
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Transform Source Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Transform Source Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 128), 0, &v8, &v7, (OZChannelFolder *)this, 3u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Transform Mode Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Transform Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384), 0, &v8, &v7, (OZChannelFolder *)this, 2u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Placement Mode Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Placement Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640), 0, &v8, &v7, (OZChannelFolder *)this, 4u, 65546, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Placement Mode Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Placement Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896), 0, &v8, &v7, (OZChannelFolder *)this, 8u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Position Label"));
  OZChannelPosition::OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152), 0.0, 0.0, &v8, (OZChannelFolder *)this, 5u, 0, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Scale Label"));
  OZChannelMaterialMapScale::OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856), 1.0, 1.0, &v8, (OZChannelFolder *)this, 6u, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Rotation Label"));
  OZChannelRotation3D::OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040), 0.0, 0.0, 0.0, &v8, (OZChannelFolder *)this, 7u, 0, 4u, 0, 0);
  PCString::~PCString(&v8);
  OZChannelMaterialMapTransform::init(this);
}

void sub_1B2E7461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelEnum *v13;
  OZChannelEnum *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;
  OZChannelRotation3D *v17;
  OZChannelPosition *v18;
  OZChannelMaterialMapScale *v19;
  OZChannelRotation3D *v20;

  v20 = v17;
  OZChannelRotation3D::~OZChannelRotation3D(v20);
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(v19);
  OZChannelPosition::~OZChannelPosition(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B2E746DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E746BCLL);
}

void sub_1B2E746FC()
{
  JUMPOUT(0x1B2E746BCLL);
}

void sub_1B2E74704(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E746C4);
}

void sub_1B2E74724()
{
  JUMPOUT(0x1B2E746C4);
}

void sub_1B2E7472C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E746CCLL);
}

void sub_1B2E7474C()
{
  JUMPOUT(0x1B2E746CCLL);
}

void OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  PCString v13;
  PCString v14;

  Instance = (OZFactory *)OZChannelMaterialMapTransform_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, a6);
  *(_QWORD *)this = &off_1E6597DB8;
  *((_QWORD *)this + 2) = &unk_1E6598098;
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Map Transform Source Enum"));
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Map Transform Source Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 128), 0, &v14, &v13, (OZChannelFolder *)this, 3u, 0x10000, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Map Transform Mode Enum"));
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Map Transform Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384), 0, &v14, &v13, (OZChannelFolder *)this, 2u, 0x10000, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Map Placement Mode Enum"));
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Map Placement Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640), 0, &v14, &v13, (OZChannelFolder *)this, 4u, 65546, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Map Placement Mode Enum"));
  PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Map Placement Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896), 0, &v14, &v13, (OZChannelFolder *)this, 8u, 0x10000, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Map Position Label"));
  OZChannelPosition::OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152), 0.0, 0.0, &v14, (OZChannelFolder *)this, 5u, 0, 2u, 0, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Map Scale Label"));
  OZChannelMaterialMapScale::OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856), 1.0, 1.0, &v14, (OZChannelFolder *)this, 6u, 0);
  PCString::~PCString(&v14);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Map Rotation Label"));
  OZChannelRotation3D::OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040), 0.0, 0.0, 0.0, &v14, (OZChannelFolder *)this, 7u, 0, 4u, 0, 0);
  PCString::~PCString(&v14);
  OZChannelMaterialMapTransform::init(this);
}

void sub_1B2E74AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelEnum *v13;
  OZChannelEnum *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;
  OZChannelRotation3D *v17;
  OZChannelPosition *v18;
  OZChannelMaterialMapScale *v19;
  OZChannelRotation3D *v20;

  v20 = v17;
  OZChannelRotation3D::~OZChannelRotation3D(v20);
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(v19);
  OZChannelPosition::~OZChannelPosition(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B2E74B78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E74B58);
}

void sub_1B2E74B98()
{
  JUMPOUT(0x1B2E74B58);
}

void sub_1B2E74BA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E74B60);
}

void sub_1B2E74BC0()
{
  JUMPOUT(0x1B2E74B60);
}

void sub_1B2E74BC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E74B68);
}

void sub_1B2E74BE8()
{
  JUMPOUT(0x1B2E74B68);
}

uint64_t OZChannelMaterialMapTransform_Factory::getInstance(OZChannelMaterialMapTransform_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelMaterialMapTransform_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelMaterialMapTransform_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialMapTransform_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialMapTransform_Factory::_instance;
}

void OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *v5 = &off_1E6597DB8;
  v5[2] = &unk_1E6598098;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 16), (const OZChannelEnum *)&a2[1].var2, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384), (const OZChannelEnum *)&a2[3].var6, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640), (const OZChannelEnum *)&a2[5].var10, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896), (const OZChannelEnum *)&a2[8], (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152), (const OZChannelPosition *)&a2[10].var4, (OZChannelFolder *)this);
  OZChannelMaterialMapScale::OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856), (const OZChannelMaterialMapScale *)&a2[16].var8, (OZChannelFolder *)this);
  OZChannelRotation3D::OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040), (const OZChannelRotation3D *)&a2[27].var2, (OZChannelFolder *)this);
  *((_QWORD *)this + 487) = a2[34].var11;
  (*(void (**)(OZChannelMaterialMapTransform *, const OZChannelBase *, uint64_t))(*(_QWORD *)this + 232))(this, a2, 1);
}

void sub_1B2E74D58(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannelEnum *v2;
  OZChannelEnum *v3;
  OZChannelEnum *v4;
  OZChannelEnum *v5;
  OZChannelPosition *v6;
  OZChannelMaterialMapScale *v7;
  OZChannelRotation3D *v8;

  OZChannelRotation3D::~OZChannelRotation3D(v8);
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(v7);
  OZChannelPosition::~OZChannelPosition(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void sub_1B2E74DC4()
{
  JUMPOUT(0x1B2E74DA4);
}

void sub_1B2E74DCC()
{
  JUMPOUT(0x1B2E74DACLL);
}

void sub_1B2E74DD4()
{
  JUMPOUT(0x1B2E74DB4);
}

OZChannelMaterialMapTransform *OZChannelMaterialMapTransform::clone(const OZChannelBase *this)
{
  OZChannelMaterialMapTransform *v2;

  v2 = (OZChannelMaterialMapTransform *)operator new();
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(v2, this, 0);
  return v2;
}

void sub_1B2E74E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform::copy(OZChannelMaterialMapTransform *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZChannelFolder::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannelEnum::copy((PCString *)this + 16, (const OZChannelBase *)((char *)v4 + 128), a3);
  OZChannelEnum::copy((PCString *)this + 48, (const OZChannelBase *)((char *)v4 + 384), a3);
  OZChannelEnum::copy((PCString *)this + 112, v4 + 8, a3);
  OZChannelPosition::copy((OZChannelMaterialMapTransform *)((char *)this + 1152), (const OZChannelBase *)((char *)v4 + 1152), a3);
  OZChannelMaterialMapScale::copy((OZChannelMaterialMapTransform *)((char *)this + 1856), (const OZChannelBase *)((char *)v4 + 1856), a3);
  OZChannelRotation3D::copy((OZChannelMaterialMapTransform *)((char *)this + 3040), (const OZChannelBase *)((char *)v4 + 3040), a3);
}

uint64_t OZChannelMaterialMapTransform::parseEnd(OZChannelMaterialMapTransform *this, PCSerializerReadStream *a2)
{
  uint64_t v3;
  const CMTime *v4;
  int ValueAsUint;
  double v6;

  v3 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 640), 2))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 640), 10, 0);
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 640), MEMORY[0x1E0CA2E68], 0.0);
    v6 = 2.0;
    if (ValueAsUint == 1)
      v6 = 0.0;
    if (!ValueAsUint)
      v6 = 1.0;
    OZChannel::setValue((OZChannel *)((char *)this + 896), v4, v6, 0);
  }
  return v3;
}

uint64_t `non-virtual thunk to'OZChannelMaterialMapTransform::parseEnd(OZChannelMaterialMapTransform *this, PCSerializerReadStream *a2)
{
  return OZChannelMaterialMapTransform::parseEnd((OZChannelMaterialMapTransform *)((char *)this - 16), a2);
}

void OZChannelMaterialMapTransform::getPreviewScale(OZChannelMaterialMapTransform *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  int ValueAsInt;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)a3 = _Q0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2296), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1992), a2, 0.0);
  v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2144), a2, 0.0);
  v15 = v14;
  if (ValueAsInt)
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 18, a2, 0.0);
    v17 = v16;
    OZChannel::getValueAsDouble((OZChannel *)this + 19, a2, 0.0);
    v18 = *((double *)this + 487);
    v13 = v17 * (v13 * v18);
    v15 = v19 * (v15 * v18);
  }
  *(double *)a3 = v13;
  *(double *)(a3 + 8) = v15;
}

uint64_t OZChannelMaterialMapTransform::willSetScaleWithFontSize(OZChannelMaterialMapTransform *this, const CMTime *a2, int a3, double a4)
{
  OZChannel *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __n128 v13;
  uint64_t (*v14)(char *, __n128);
  char *v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v8 = (OZChannel *)((char *)this + 2448);
  *((double *)this + 487) = a4
                          / (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 2448), MEMORY[0x1E0CA2E68], 0.0);
  if (a3)
  {
    OZChannel::setValue(v8, MEMORY[0x1E0CA2E68], a4, 0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1992), a2, 0.0);
    v10 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2144), a2, 0.0);
    v12 = v11;
    OZChannelMaterialMapScale::setBasisScale((OZChannelMaterialMapTransform *)((char *)this + 1856), v10, v11);
    (*(void (**)(char *, double))(*((_QWORD *)this + 249) + 776))((char *)this + 1992, 1.0 / v10);
    v13.n128_f64[0] = 1.0 / v12;
    v14 = *(uint64_t (**)(char *, __n128))(*((_QWORD *)this + 268) + 776);
    v15 = (char *)this + 2144;
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1288), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1440), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1992), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2144), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)this + 18, a2, 0.0);
    v17 = v16;
    OZChannel::getValueAsDouble((OZChannel *)this + 19, a2, 0.0);
    v19 = v18;
    (*(void (**)(char *, double))(*((_QWORD *)this + 249) + 776))((char *)this + 1992, v17 * *((double *)this + 487));
    (*(void (**)(char *, double))(*((_QWORD *)this + 268) + 776))((char *)this + 2144, v19 * *((double *)this + 487));
    (*(void (**)(char *, double))(*((_QWORD *)this + 161) + 776))((char *)this + 1288, *((double *)this + 487));
    v13.n128_u64[0] = *((_QWORD *)this + 487);
    v14 = *(uint64_t (**)(char *, __n128))(*((_QWORD *)this + 180) + 776);
    v15 = (char *)this + 1440;
  }
  return v14(v15, v13);
}

OZChannelBase *OZChannelMaterialMapTransform::updateLocalTransformChannelsVisibility(OZChannelMaterialMapTransform *this)
{
  int ValueAsInt;
  OZChannelBase *v3;
  OZChannelBase *v4;
  OZChannelBase *v5;
  OZChannelBase *v6;
  OZChannelBase *v7;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 128), MEMORY[0x1E0CA2E68], 0.0);
  v3 = (OZChannelBase *)((char *)this + 1152);
  v4 = (OZChannelBase *)((char *)this + 1856);
  v5 = (OZChannelBase *)((char *)this + 3040);
  v6 = (OZChannelBase *)((char *)this + 384);
  v7 = (OZChannelBase *)((char *)this + 896);
  if (ValueAsInt)
  {
    OZChannelBase::setFlag(v3, 0x400000, 0);
    OZChannelBase::setFlag(v4, 0x400000, 0);
    OZChannelBase::setFlag(v5, 0x400000, 0);
    OZChannelBase::setFlag(v6, 0x400000, 0);
    return OZChannelBase::setFlag(v7, 0x400000, 0);
  }
  else
  {
    OZChannelBase::resetFlag(v3, 0x400000, 0);
    OZChannelBase::resetFlag(v4, 0x400000, 0);
    OZChannelBase::resetFlag(v5, 0x400000, 0);
    OZChannelBase::resetFlag(v6, 0x400000, 0);
    return OZChannelBase::resetFlag(v7, 0x400000, 0);
  }
}

OZChannelBase *SetSaveWhenAtDefaultStateFlagOnDescendants(OZChannelBase *result)
{
  void **var0;
  OZChannelBase **v2;
  OZChannelBase **v3;
  OZChannelBase *v4;
  OZChannelFolder *v5;

  var0 = result[1].var0;
  v2 = (OZChannelBase **)*var0;
  v3 = (OZChannelBase **)var0[1];
  if (*var0 != v3)
  {
    do
    {
      v4 = *v2;
      result = OZChannelBase::setFlag(*v2, 0x100000000, 0);
      if ((v4->var7 & 0x1000) != 0)
      {
        result = (OZChannelBase *)SetSaveWhenAtDefaultStateFlagOnDescendants(v5);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

OZChannelBase *OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault(OZChannelBase *this)
{
  (*((void (**)(OZChannelBase *))this->var0 + 17))(this);
  OZChannelBase::setFlag(this, 0x100000000, 0);
  return SetSaveWhenAtDefaultStateFlagOnDescendants(this);
}

void `non-virtual thunk to'OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this)
{
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZChannelMaterialMapTransform *)((char *)this - 16));
}

{
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZChannelMaterialMapTransform *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZChannelMaterialMapTransform_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelMaterialMapTransform_Factory *v0;

  v0 = (OZChannelMaterialMapTransform_Factory *)operator new();
  OZChannelMaterialMapTransform_Factory::OZChannelMaterialMapTransform_Factory(v0);
  OZChannelMaterialMapTransform_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E7547C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform_Factory::OZChannelMaterialMapTransform_Factory(OZChannelMaterialMapTransform_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B3055240;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6598108;
  *((_QWORD *)this + 16) = &unk_1E65981D8;
}

void sub_1B2E7551C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelMaterialMapTransform *OZChannelMaterialMapTransform_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelMaterialMapTransform *v6;

  v6 = (OZChannelMaterialMapTransform *)operator new();
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(v6, this, a2, a3, 0);
  return v6;
}

void sub_1B2E75590(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

OZChannelMaterialMapTransform *OZChannelMaterialMapTransform_Factory::createCopy(OZChannelMaterialMapTransform_Factory *this, OZFactoryBase *a2)
{
  OZChannelMaterialMapTransform *v3;
  const OZChannelBase *v4;

  v3 = (OZChannelMaterialMapTransform *)operator new();
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(v3, v4, 0);
  return v3;
}

void sub_1B2E7561C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

OZChannelMaterialMapTransform *OZChannelMaterialMapTransform_Factory::createChannelCopy(OZChannelMaterialMapTransform_Factory *this, OZChannelBase *a2)
{
  OZChannelMaterialMapTransform *v3;
  const OZChannelBase *v4;

  v3 = (OZChannelMaterialMapTransform *)operator new();
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform(v3, v4, 0);
  return v3;
}

void sub_1B2E756A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404627C67DLL);
  _Unwind_Resume(a1);
}

void OZPublishSettings::OZPublishSettings(OZPublishSettings *this, OZScene *a2)
{
  PCString v4;

  *(_QWORD *)this = &off_1E6598230;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  PCString::PCString(&v4, "Published Folder");
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZPublishSettings *)((char *)this + 32), &v4, 0, 1u, 8u);
  PCString::~PCString(&v4);
  *((_QWORD *)this + 20) = a2;
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
}

void sub_1B2E75760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  PCString::~PCString(&a10);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 16) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void OZPublishSettings::copyPublishedParameters(OZPublishSettings *this, const OZPublishSettings *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char **v5;
  char *v6;
  uint64_t v7;
  _OWORD *v8;
  std::string *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v2 = (uint64_t *)*((_QWORD *)a2 + 1);
  v3 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (v2 != v3)
  {
    v5 = (char **)((char *)this + 8);
    v6 = (char *)this + 24;
    do
    {
      v7 = *v2;
      v8 = (_OWORD *)operator new();
      *v8 = 0u;
      v8[1] = 0u;
      OZChannelRef::OZChannelRef((OZChannelRef *)((char *)v8 + 8));
      *(_DWORD *)v8 = *(_DWORD *)v7;
      OZChannelRef::operator=(v9, (const std::string *)(v7 + 8));
      v11 = (_QWORD *)*((_QWORD *)this + 2);
      v10 = *((_QWORD *)this + 3);
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - *v5) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v14 = v10 - (_QWORD)*v5;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = v8;
        v12 = v18 + 8;
        v20 = (char *)*((_QWORD *)this + 1);
        v19 = (char *)*((_QWORD *)this + 2);
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = *v5;
        }
        *((_QWORD *)this + 1) = v18;
        *((_QWORD *)this + 2) = v12;
        *((_QWORD *)this + 3) = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *((_QWORD *)this + 2) = v12;
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_1B2E758DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void OZPublishSettings::OZPublishSettings(OZPublishSettings *this, const OZPublishSettings *a2, OZScene *a3)
{
  *(_QWORD *)this = &off_1E6598230;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZPublishSettings *)((char *)this + 32), (const OZPublishSettings *)((char *)a2 + 32), 0);
  *((_QWORD *)this + 20) = a3;
  *((_WORD *)this + 84) = *((_WORD *)a2 + 84);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_QWORD *)this + 24) = 0;
  OZPublishSettings::copyPublishedParameters(this, a2);
}

void sub_1B2E75990(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZChannelVaryingFolder *v2;
  uint64_t v3;
  void **v4;
  _QWORD **v5;
  void *v7;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v3, *v5);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v2);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void OZPublishSettings::~OZPublishSettings(OZPublishSettings *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E6598230;
  OZPublishSettings::clearAll(this);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 176, *((_QWORD **)this + 23));
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZPublishSettings *)((char *)this + 32));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  OZPublishSettings::~OZPublishSettings(this);
  JUMPOUT(0x1B5E29170);
}

void OZPublishSettings::clearAll(OZPublishSettings *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        OZChannelRef::~OZChannelRef((void **)(v4 + 8));
        MEMORY[0x1B5E29170](v4, 0x1012C40849EBCB1);
      }
      *v2++ = 0;
    }
    while (v2 != v3);
    v2 = (uint64_t *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 2) = v2;
  OZChannelBase::reset((OZChannelBase *)((char *)this + 32), 0);
}

void OZPublishSettings::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char **v6;
  uint64_t v7;
  _OWORD *v8;
  std::string *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  OZPublishSettings::clearAll((OZPublishSettings *)a1);
  OZChannelVaryingFolder::copy((OZChannelFolder *)(a1 + 32), (const OZChannelBase *)(a2 + 32));
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  if (v4 != v5)
  {
    v6 = (char **)(a1 + 8);
    do
    {
      v7 = *v4;
      v8 = (_OWORD *)operator new();
      *v8 = 0u;
      v8[1] = 0u;
      OZChannelRef::OZChannelRef((OZChannelRef *)((char *)v8 + 8));
      *(_DWORD *)v8 = *(_DWORD *)v7;
      OZChannelRef::operator=(v9, (const std::string *)(v7 + 8));
      v11 = *(_QWORD **)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - *v6) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v14 = v10 - (_QWORD)*v6;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 24, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = v8;
        v12 = v18 + 8;
        v20 = *(char **)(a1 + 8);
        v19 = *(char **)(a1 + 16);
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = *v6;
        }
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a1 + 16) = v12;
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1B2E75C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

uint64_t OZPublishSettings::addChannel(OZPublishSettings *this, OZChannelBase *a2)
{
  uint64_t v4;
  OZChannelBase *v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 18);
  if (v4)
    v5 = *(OZChannelBase **)(*(_QWORD *)(v4 + 8) - 8);
  else
    v5 = 0;
  result = OZPublishSettings::isChannelPublished(this, a2);
  if ((result & 1) == 0)
    return (uint64_t)OZPublishSettings::addChannelRec(this, a2, v5);
  return result;
}

uint64_t OZPublishSettings::isChannelPublished(OZPublishSettings *this, OZChannelBase *a2)
{
  OZChannelBase *v2;
  uint64_t v3;
  uint64_t v4;
  const OZChannelBase *ChannelRootBase;
  const OZChannelBase *v6;
  unsigned int var3;
  char v8;
  OZChannelFolder *v9;
  uint64_t v10;
  OZChannelFolder *v11;
  uint64_t result;
  void *v13[3];

  v2 = a2;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
  if (v2)
  {
    v6 = ChannelRootBase;
    var3 = ChannelRootBase->var3;
    v8 = 1;
    while (v2 != (OZChannelBase *)v6->var6)
    {
      if (v8 & 1 | (v9 == 0)
        || (v11 = v9, !OZChannelFolder::testFoldFlag(v9, 0x20000))
      {
        OZChannelRef::OZChannelRef((OZChannelRef *)v13, v2, v6);
        if (v3 != v4)
        {
          v10 = v3;
          while (**(_DWORD **)v10 != var3
               || !OZChannelRef::operator==((unsigned __int8 *)(*(_QWORD *)v10 + 8), (unsigned __int8 *)v13))
          {
            v10 += 8;
            if (v10 == v4)
              goto LABEL_10;
          }
          OZChannelRef::~OZChannelRef(v13);
          return 1;
        }
LABEL_10:
        OZChannelRef::~OZChannelRef(v13);
      }
      v8 = 0;
      result = 0;
      v2 = (OZChannelBase *)v2->var6;
      if (!v2)
        return result;
    }
  }
  return 0;
}

void sub_1B2E75E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZPublishSettings::addChannelRec(OZPublishSettings *this, OZChannelBase *a2, OZChannelBase *a3)
{
  OZChannelFolder *v6;
  const OZChannelFolder *v7;
  OZChannelFolder *v8;
  OZChannelBase ***v9;
  OZChannelBase **i;
  OZChannelBase *v11;
  _OWORD *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  const OZChannelBase *ChannelRootBase;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  OZChannelBase ***v25;
  OZChannelBase **v26;
  OZChannelUint32 *v27;
  const OZChannelBase *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  OZPublishSettings *v34;
  OZChannelFolder *v35;
  int HighestChanID;
  std::string v38;

  if (a2
  {
    v25 = (OZChannelBase ***)*((_QWORD *)v8 + 14);
    if (!v25)
      return 0;
    v26 = *v25;
    if (*v25 == v25[1])
    {
      return 0;
    }
    else
    {
      v27 = 0;
      do
      {
        v28 = *v26;
        if (((*v26)->var7 & 2) == 0 && (OZPublishSettings::isChannelPublished(this, *v26) & 1) == 0)
        {
          a3 = (OZChannelBase *)OZPublishSettings::addChannelRec(this, v28, a3);
          v27 = (OZChannelUint32 *)a3;
        }
        ++v26;
      }
      while (v26 != v25[1]);
    }
  }
  else
  {
    if ((*((unsigned int (**)(OZChannelBase *))a2->var0 + 15))(a2))
    {
      for (i = *v9; i != v9[1]; ++i)
      {
        v11 = *i;
        OZPublishSettings::removeChannelRec(this, v11);
      }
    }
    v12 = (_OWORD *)operator new();
    *v12 = 0u;
    v12[1] = 0u;
    OZChannelRef::OZChannelRef((OZChannelRef *)((char *)v12 + 8));
    v14 = *((_QWORD *)this + 1);
    v15 = *((_QWORD *)this + 2);
    v13 = (char **)((char *)this + 8);
    ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
    *(_DWORD *)v12 = ChannelRootBase->var3;
    OZChannelRef::OZChannelRef((OZChannelRef *)&v38, a2, ChannelRootBase);
    OZChannelRef::operator=((std::string *)((char *)v12 + 8), &v38);
    OZChannelRef::~OZChannelRef((void **)&v38.__r_.__value_.__l.__data_);
    v17 = *((_QWORD *)this + 3);
    v18 = (_QWORD *)*((_QWORD *)this + 2);
    if ((unint64_t)v18 >= v17)
    {
      v20 = ((char *)v18 - *v13) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v21 = v17 - (_QWORD)*v13;
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 24, v23);
      else
        v24 = 0;
      v29 = &v24[8 * v20];
      v30 = &v24[8 * v23];
      *(_QWORD *)v29 = v12;
      v19 = v29 + 8;
      v32 = (char *)*((_QWORD *)this + 1);
      v31 = (char *)*((_QWORD *)this + 2);
      if (v31 != v32)
      {
        do
        {
          v33 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          *((_QWORD *)v29 - 1) = v33;
          v29 -= 8;
        }
        while (v31 != v32);
        v31 = *v13;
      }
      *((_QWORD *)this + 1) = v29;
      *((_QWORD *)this + 2) = v19;
      *((_QWORD *)this + 3) = v30;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v18 = v12;
      v19 = v18 + 1;
    }
    *((_QWORD *)this + 2) = v19;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v38);
    OZPublishSettings::publishedNameForChannel(v34, a2, (PCString *)&v38);
    v35 = (OZChannelFolder *)((char *)this + 32);
    HighestChanID = OZPublishSettings::getHighestChanID(this, (OZChannelFolder *)((char *)this + 32));
    v27 = (OZChannelUint32 *)operator new();
    OZChannelUint32::OZChannelUint32(v27, (const PCString *)&v38, 0, HighestChanID + 1, 0, 0, 0);
    OZChannelFolder::insertDescendantAfter(v35, a3, (OZChannelBase *)v27);
    (*((void (**)(OZChannelUint32 *, _QWORD))v27->var0 + 60))(v27, 0);
    OZChannel::setDefaultValue((OZChannel *)v27, (double)(unint64_t)((v15 - v14) >> 3));
    (*((void (**)(OZChannelUint32 *, _QWORD))v27->var0 + 35))(v27, 0);
    PCString::~PCString((PCString *)&v38);
  }
  return v27;
}

void sub_1B2E76120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL OZPublishSettings::TreatTargetFolderAsUnit(OZChannelFolder *this, const OZChannelFolder *a2)
{
  return ((*(uint64_t (**)(OZChannelFolder *, const OZChannelFolder *))(*(_QWORD *)this + 120))(this, a2) & 1) != 0
}

void OZPublishSettings::publishedNameForChannel(OZPublishSettings *this, OZChannelBase *a2, PCString *a3)
{
  OZChannelFolder *var6;
  const void *ObjectManipulator;
  OZImageElement *v7;
  OZImageElement *v8;
  const PCString *Name;
  PCString v10;
  PCString v11;
  PCString v12;

  PCString::set(a3, &a2->var4);
  if ((*(unsigned int (**)(OZChannelFolder *))(*(_QWORD *)a2->var6 + 120))(a2->var6))
  {
    PCURL::PCURL((PCURL *)&v10, CFSTR("Publish Channel Separator"));
    PCString::PCString(&v11, a3);
    PCString::append(&v11, &v10);
    var6 = a2->var6;
    PCString::PCString(&v12, &v11);
    PCString::append(&v12, (const PCString *)var6 + 4);
    PCString::set(a3, &v12);
    PCString::~PCString(&v12);
    PCString::~PCString(&v11);
    PCString::~PCString(&v10);
  }
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a2);
    if (ObjectManipulator)
    {
      if (v7)
      {
        v8 = v7;
        if (OZImageElement::isDropZone(v7))
        {
          Name = (const PCString *)OZObjectManipulator::getName((OZImageElement *)((char *)v8 + 16));
          PCString::set(a3, Name);
        }
      }
    }
  }
}

void sub_1B2E7634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  PCString::~PCString(&a11);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZPublishSettings::removeChannelRec(OZPublishSettings *this, OZChannelBase *a2)
{
  OZChannelFolder *v4;
  const OZChannelFolder *v5;
  OZChannelFolder *v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  const OZChannelBase *ChannelRootBase;
  unsigned int var3;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  OZChannelFolder *var6;
  OZChannelFolder *v15;
  OZChannelBase *v16;
  const OZChannelBase ***v17;
  const OZChannelBase **i;
  const OZChannelBase *v19;
  uint64_t v20;
  uint64_t v21;
  OZChannelBase *ProxyChannelForTarget;
  void **var0;
  char *j;
  OZChannelBase *v25;
  const OZChannelBase *v26;
  void *v27[3];

  if (a2
  {
    v17 = (const OZChannelBase ***)*((_QWORD *)v6 + 14);
    if (v17)
    {
      for (i = *v17; i != v17[1]; ++i)
      {
        v19 = *i;
        OZPublishSettings::removeChannelRec(this, v19);
      }
    }
  }
  else
  {
    v7 = (unsigned __int8 **)*((_QWORD *)this + 1);
    v8 = (unsigned __int8 **)*((_QWORD *)this + 2);
    ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(a2);
    var3 = ChannelRootBase->var3;
    OZChannelRef::OZChannelRef((OZChannelRef *)v27, a2, ChannelRootBase);
    if (v7 == v8)
    {
LABEL_9:
      var6 = a2->var6;
      if (var6 && (*(unsigned int (**)(OZChannelFolder *))(*(_QWORD *)var6 + 120))(var6))
      {
        v15 = a2->var6;
        v16 = v15
        ProxyChannelForTarget = OZPublishSettings::getProxyChannelForTarget(this, v16);
        if (ProxyChannelForTarget)
        {
          var0 = v16[1].var0;
          for (j = (char *)var0[1]; j != *var0; j -= 8)
          {
            v26 = (const OZChannelBase *)*((_QWORD *)j - 1);
            v25 = (OZChannelBase *)v26;
            if (v26 != a2 && !OZChannelBase::testFlag(v25, 2))
              OZPublishSettings::addChannelRec(this, v25, ProxyChannelForTarget);
          }
          OZPublishSettings::removeChannelRec(this, v16);
        }
      }
    }
    else
    {
      v11 = 0;
      v12 = -(uint64_t)v7;
      while (1)
      {
        v13 = *v7;
        if (*(_DWORD *)*v7 == var3 && OZChannelRef::operator==(v13 + 8, (unsigned __int8 *)v27))
          break;
        ++v7;
        ++v11;
        v12 -= 8;
        if (v7 == v8)
          goto LABEL_9;
      }
      v20 = *((_QWORD *)this + 2);
      v21 = v20 - (8 - v12);
      if (v20 != 8 - v12)
        memmove((void *)-v12, (const void *)(8 - v12), v20 - (8 - v12));
      *((_QWORD *)this + 2) = v21 - v12;
      OZChannelRef::~OZChannelRef((void **)v13 + 1);
      MEMORY[0x1B5E29170](v13, 0x1012C40849EBCB1);
      OZPublishSettings::removeProxyChannelWithValue((OZChannelFolder *)this, (OZChannelFolder *)((char *)this + 32), v11);
    }
    OZChannelRef::~OZChannelRef(v27);
  }
}

void sub_1B2E765A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

OZChannelFolder *OZPublishSettings::removeProxyChannelWithValue(OZChannelFolder *this, OZChannelFolder *a2, unsigned int a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZPublishSettings *v6;
  OZChannelBase *v7;
  const CMTime *v8;
  OZChannelBase *v9;
  OZChannel *v10;
  OZChannel *v11;
  unsigned int ValueAsInt;
  OZChannelFolder *v13;

  v3 = (OZChannelBase ***)*((_QWORD *)a2 + 14);
  if (v3)
  {
    v4 = *v3;
    if (*v3 != v3[1])
    {
      v6 = (OZPublishSettings *)this;
      v7 = 0;
      v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
      while (1)
      {
        v9 = v7;
        v7 = *v4;
        if (((*v4)->var7 & 0x1000) != 0 && ((*((uint64_t (**)(OZChannelBase *))v7->var0 + 15))(*v4) & 1) == 0)
          break;
        if (!v10)
          goto LABEL_11;
        v11 = v10;
        ValueAsInt = OZChannel::getValueAsInt(v10, v8, 0.0);
        if (ValueAsInt != a3)
        {
          if (ValueAsInt > a3)
          {
            OZChannel::setDefaultValue(v11, (double)(ValueAsInt - 1));
            (*((void (**)(OZChannel *, _QWORD))v11->var0 + 35))(v11, 0);
          }
          goto LABEL_11;
        }
LABEL_12:
        if (++v4 == v3[1])
        {
          this = a2;
          if (v7)
          {
            OZChannelFolder::removeDescendant(a2, v7);
            return (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 1))(v7);
          }
          return this;
        }
      }
      OZPublishSettings::removeProxyChannelWithValue(v6, v13, a3);
LABEL_11:
      v7 = v9;
      goto LABEL_12;
    }
  }
  return this;
}

OZChannelBase *OZPublishSettings::getProxyChannelForTarget(OZPublishSettings *this, OZChannelBase *a2)
{
  OZChannelBase *ChannelWithValue;
  const OZChannelBase *ChannelRootBase;
  unsigned int var3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v10[3];

  ChannelWithValue = a2;
  if (a2
    && ((a2->var7 & 0x1000) == 0 || (OZChannelFolder::hasDescendant((OZChannelFolder *)((char *)this + 32), a2) & 1) == 0))
  {
    ChannelRootBase = (const OZChannelBase *)OZChannelBase::getChannelRootBase(ChannelWithValue);
    var3 = ChannelRootBase->var3;
    OZChannelRef::OZChannelRef((OZChannelRef *)v10, ChannelWithValue, ChannelRootBase);
    v6 = *((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
    if (v6 == v7)
    {
LABEL_9:
      ChannelWithValue = 0;
    }
    else
    {
      v8 = 0;
      while (var3 != **(_DWORD **)v6
           || !OZChannelRef::operator==((unsigned __int8 *)v10, (unsigned __int8 *)(*(_QWORD *)v6 + 8)))
      {
        v6 += 8;
        ++v8;
        if (v6 == v7)
          goto LABEL_9;
      }
      ChannelWithValue = (OZChannelBase *)OZPublishSettings::findChannelWithValue(this, (OZChannelFolder *)((char *)this + 32), v8);
    }
    OZChannelRef::~OZChannelRef(v10);
  }
  return ChannelWithValue;
}

void sub_1B2E76814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t OZPublishSettings::getHighestChanID(OZPublishSettings *this, OZChannelFolder *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  OZChannelFolder *v8;
  unsigned int HighestChanID;

  v2 = *((_QWORD *)a2 + 14);
  if (!v2)
    return 0;
  v3 = *(_QWORD **)v2;
  if (*(_QWORD *)v2 == *(_QWORD *)(v2 + 8))
    return 0;
  LODWORD(v5) = 0;
  do
  {
    v6 = (_BYTE *)*v3;
    v7 = *(_DWORD *)(*v3 + 24);
    if (v7 <= v5)
      v5 = v5;
    else
      v5 = v7;
    if ((v6[57] & 0x10) != 0 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 120))(*v3) & 1) == 0)
    {
      HighestChanID = OZPublishSettings::getHighestChanID(this, v8);
      if (HighestChanID <= v5)
        v5 = v5;
      else
        v5 = HighestChanID;
    }
    ++v3;
  }
  while (v3 != *(_QWORD **)(v2 + 8));
  return v5;
}

OZChannelBase *OZPublishSettings::getChannelAtIndex(OZPublishSettings *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t Object;
  OZChannelBase *v5;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    return 0;
  v3 = *(unsigned int **)(v2 + 8 * a2);
  Object = OZScene::getObject(*((OZScene **)this + 20), *v3);
  if (!Object)
    return 0;
  v5 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Object + 216))(Object);
  return OZChannelRef::getChannel((OZChannelRef *)(v3 + 2), v5);
}

OZChannelBase *OZPublishSettings::getTargetChannelForProxy(OZPublishSettings *this, OZChannelBase *a2)
{
  int hasDescendant;
  unsigned int ValueAsInt;

  hasDescendant = OZChannelFolder::hasDescendant((OZChannelFolder *)((char *)this + 32), a2);
  if (!a2
    || !hasDescendant
  {
    return a2;
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)a2, MEMORY[0x1E0CA2E68], 0.0);
  return OZPublishSettings::getChannelAtIndex(this, ValueAsInt);
}

OZChannel *OZPublishSettings::findChannelWithValue(OZPublishSettings *this, OZChannelFolder *a2, unsigned int a3)
{
  _QWORD **v3;
  _QWORD *v4;
  const CMTime *v7;
  const void *v8;
  OZChannel *v9;
  OZChannel *v10;
  OZChannelFolder *v11;
  uint64_t ChannelWithValue;

  v3 = (_QWORD **)*((_QWORD *)a2 + 14);
  if (v3)
  {
    v4 = *v3;
    if (*v3 != v3[1])
    {
      v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v8 = (const void *)*v4;
        if ((*(_BYTE *)(*v4 + 57) & 0x10) != 0
          && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 120))(*v4) & 1) == 0)
        {
          ChannelWithValue = OZPublishSettings::findChannelWithValue(this, v11, a3);
          if (ChannelWithValue)
            return (OZChannel *)ChannelWithValue;
        }
        else
        {
          if (v9)
          {
            v10 = v9;
            if (OZChannel::getValueAsInt(v9, v7, 0.0) == a3)
              return v10;
          }
        }
        ++v4;
      }
      while (v4 != v3[1]);
    }
  }
  return 0;
}

char *OZPublishSettings::cleanUpMissingChannels(char *this)
{
  unsigned int **v1;
  uint64_t v2;
  unsigned int v3;
  OZChannelFolder *v4;
  unsigned int *v5;
  uint64_t Object;
  OZChannelBase *v7;
  unsigned int **v8;
  int64_t v9;

  v1 = (unsigned int **)*((_QWORD *)this + 1);
  if (v1 != *((unsigned int ***)this + 2))
  {
    v2 = (uint64_t)this;
    v3 = 0;
    v4 = (OZChannelFolder *)(this + 32);
    do
    {
      v5 = *v1;
      Object = OZScene::getObject(*(OZScene **)(v2 + 160), **v1);
      if (Object
        && (v7 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Object + 216))(Object),
            (this = (char *)OZChannelRef::getChannel((OZChannelRef *)(v5 + 2), v7)) != 0))
      {
        ++v3;
        ++v1;
      }
      else
      {
        v8 = *(unsigned int ***)(v2 + 16);
        v9 = (char *)v8 - (char *)(v1 + 1);
        if (v8 != v1 + 1)
          memmove(v1, v1 + 1, (char *)v8 - (char *)(v1 + 1));
        *(_QWORD *)(v2 + 16) = (char *)v1 + v9;
        OZChannelRef::~OZChannelRef((void **)v5 + 1);
        MEMORY[0x1B5E29170](v5, 0x1012C40849EBCB1);
        this = (char *)OZPublishSettings::removeProxyChannelWithValue((OZChannelFolder *)v2, v4, v3);
      }
    }
    while (v1 != *(unsigned int ***)(v2 + 16));
  }
  return this;
}

uint64_t OZPublishSettings::writeHeader(OZPublishSettings *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZPublishSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 34);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZPublishSettings::writeBody(OZPublishSettings *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  uint64_t v7;
  char *v8;
  int v9;
  unsigned int *v10;
  uint64_t Object;
  OZChannelBase *v12;
  BOOL v13;
  OZChannelBase ***v14;
  OZChannelBase **v15;
  OZChannelBase **v16;
  const CMTime *v17;
  OZChannelBase *v18;
  BOOL v19;
  char v20;
  OZChannel *v21;
  OZChannel *v22;
  unsigned int ValueAsInt;
  unsigned int *v24;
  const char *v25;
  _QWORD v27[2];
  PCString v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZPublishSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, 2);
  v4 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = (unsigned int **)*((_QWORD *)this + 1);
  v5 = (unsigned int **)*((_QWORD *)this + 2);
  if (v5 != v6)
  {
    v27[1] = v27;
    MEMORY[0x1E0C80A78](v4);
    v8 = (char *)v27 - v7;
    v9 = 0;
    do
    {
      v10 = *v6;
      Object = OZScene::getObject(*((OZScene **)this + 20), **v6);
      v13 = 0;
      if (Object)
      {
        v12 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Object + 216))(Object);
        if (OZChannelRef::getChannel((OZChannelRef *)(v10 + 2), v12))
          v13 = 1;
      }
      v8[v9] = v13;
      ++v6;
      ++v9;
    }
    while (v6 != v5);
    v14 = (OZChannelBase ***)*((_QWORD *)this + 18);
    if (v14)
    {
      v15 = *v14;
      v16 = v14[1];
      if (*v14 != v16)
      {
        v17 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          v18 = *v15;
          v19 = OZChannelBase::testFlag(*v15, 8);
          if (v18)
            v20 = v19;
          else
            v20 = 1;
          if ((v20 & 1) == 0)
          {
            if (v21)
            {
              v22 = v21;
              ValueAsInt = OZChannel::getValueAsInt(v21, v17, 0.0);
              if (v8[ValueAsInt])
              {
                v24 = *(unsigned int **)(*((_QWORD *)this + 1) + 8 * ValueAsInt);
                v25 = (const char *)(v24 + 2);
                if (*((char *)v24 + 31) < 0)
                  v25 = *(const char **)v25;
                PCString::PCString(&v28, v25);
                (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
                (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 2, *v24);
                (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 1, &v28);
                (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 3, &v22->var4);
                (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
                PCString::~PCString(&v28);
              }
            }
          }
          ++v15;
        }
        while (v15 != v16);
      }
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2E76E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t OZPublishSettings::parseBegin(OZPublishSettings *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZPublishSettingsScope);
  OZChannelVaryingFolder::parseBegin((OZChannelFolder *)((char *)this + 32), a2);
  OZPublishSettings::clearAll(this);
  *((_BYTE *)this + 169) = 1;
  return 1;
}

uint64_t OZPublishSettings::parseEnd(OZPublishSettings *this, PCSerializerReadStream *a2)
{
  OZChannelVaryingFolder::parseEnd((OZChannelFolder *)((char *)this + 32), a2);
  return 1;
}

uint64_t OZPublishSettings::parseElement(OZPublishSettings *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  int HighestChanID;
  OZChannelUint32 *v8;
  _OWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  std::string v25;
  PCSharedCount v26;
  int v27;
  PCSharedCount v28;
  int v29;

  v29 = 0;
  PCSharedCount::PCSharedCount(&v28);
  v27 = 0;
  PCSharedCount::PCSharedCount(&v26);
  OZChannelFolder::parseElement((OZChannelFolder *)((char *)this + 32), a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 1)
  {
    (*(void (**)(PCStreamElement *, int *))(*(_QWORD *)a3 + 32))(a3, &v29);
  }
  else if (v6 == 2)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v27);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v28);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)&v26))
    {
      HighestChanID = OZPublishSettings::getHighestChanID(this, (OZChannelFolder *)((char *)this + 32));
      v8 = (OZChannelUint32 *)operator new();
      OZChannelUint32::OZChannelUint32(v8, (const PCString *)&v26, 0, HighestChanID + 1, 0, 0, 0);
      OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 32), (OZChannelBase *)v8);
      (*((void (**)(OZChannelUint32 *, _QWORD))v8->var0 + 60))(v8, 0);
      OZChannel::setDefaultValue((OZChannel *)v8, (double)(unint64_t)((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
      (*((void (**)(OZChannelUint32 *, _QWORD))v8->var0 + 35))(v8, 0);
    }
    v9 = (_OWORD *)operator new();
    *v9 = 0u;
    v9[1] = 0u;
    OZChannelRef::OZChannelRef((OZChannelRef *)((char *)v9 + 8));
    *(_DWORD *)v9 = v27;
    OZChannelRef::OZChannelRef((OZChannelRef *)&v25, (PCString *)&v28);
    OZChannelRef::operator=((std::string *)((char *)v9 + 8), &v25);
    OZChannelRef::~OZChannelRef((void **)&v25.__r_.__value_.__l.__data_);
    v10 = *((_QWORD *)this + 3);
    v11 = (_QWORD *)*((_QWORD *)this + 2);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *((_QWORD *)this + 1);
      v14 = ((uint64_t)v11 - v13) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v15 = v10 - v13;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 24, v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v12 = v19 + 8;
      v22 = (char *)*((_QWORD *)this + 1);
      v21 = (char *)*((_QWORD *)this + 2);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = (char *)*((_QWORD *)this + 1);
      }
      *((_QWORD *)this + 1) = v19;
      *((_QWORD *)this + 2) = v12;
      *((_QWORD *)this + 3) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    *((_QWORD *)this + 2) = v12;
  }
  PCString::~PCString((PCString *)&v26);
  PCString::~PCString((PCString *)&v28);
  return 1;
}

void sub_1B2E77198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, PCString a15)
{
  uint64_t v15;

  MEMORY[0x1B5E29170](v15, 0x10E1C409BAC03F7);
  PCString::~PCString(&a13);
  PCString::~PCString(&a15);
  _Unwind_Resume(a1);
}

char *OZPublishSettings::didFinishLoadingIntoScene(OZPublishSettings *this)
{
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 32), 8, 1);
  return OZPublishSettings::cleanUpMissingChannels((char *)this);
}

void OZInspectorState::OZInspectorState(OZInspectorState *this)
{
  PCString *v1;
  PCString v2;
  PCString v3;
  PCString v4;
  const PCString *v5;

  *(_QWORD *)this = &off_1E65982C0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  v1 = (PCString *)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  PCString::PCString(&v4, "./1/100");
  PCString::PCString(&v3, "./1/200");
  v5 = &v4;
  *((_BYTE *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v1, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 40) = 1;
  v5 = &v3;
  *((_BYTE *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v1, &v3, (uint64_t)&std::piecewise_construct, &v5)+ 40) = 1;
  PCString::PCString(&v2, "./1/344");
  v5 = &v2;
  *((_BYTE *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v1, &v2, (uint64_t)&std::piecewise_construct, &v5)+ 40) = 1;
  PCString::~PCString(&v2);
  PCString::~PCString(&v3);
  PCString::~PCString(&v4);
}

void sub_1B2E77360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  uint64_t v12;
  PCString **v13;

  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(v12, *v13);
  _Unwind_Resume(a1);
}

void OZInspectorState::OZInspectorState(OZInspectorState *this, const OZInspectorState *a2)
{
  *(_QWORD *)this = &off_1E65982C0;
  std::map<PCString,BOOL>::map[abi:ne180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
}

uint64_t OZInspectorState::writeHeader(uint64_t this, PCSerializerWriteStream *a2)
{
  if (*(_QWORD *)(this + 24))
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZInspectorScope);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 85);
    return PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  return this;
}

void OZInspectorState::writeBody(OZInspectorState *this, PCSerializerWriteStream *a2)
{
  OZInspectorState *v4;
  OZInspectorState *v5;
  OZInspectorState *v6;
  BOOL v7;
  PCString v8;
  PCString v9;

  PCString::PCString(&v9, "./1/100");
  PCString::PCString(&v8, "./1/200");
  if (*((_QWORD *)this + 3))
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZInspectorScope);
    v4 = (OZInspectorState *)*((_QWORD *)this + 1);
    if (v4 != (OZInspectorState *)((char *)this + 16))
    {
      do
      {
        if (*((_BYTE *)v4 + 40)
          || PCString::compare((PCString *)v4 + 4, &v9)
          && PCString::compare((PCString *)v4 + 4, &v8))
        {
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
          (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 200))(a2, 1, (uint64_t)v4 + 32);
          (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 2, *((unsigned __int8 *)v4 + 40));
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        }
        v5 = (OZInspectorState *)*((_QWORD *)v4 + 1);
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = *(OZInspectorState **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (OZInspectorState *)*((_QWORD *)v4 + 2);
            v7 = *(_QWORD *)v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        v4 = v6;
      }
      while (v6 != (OZInspectorState *)((char *)this + 16));
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
}

void sub_1B2E7758C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZInspectorState::parseBegin(OZInspectorState *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZInspectorScope);
  return 1;
}

uint64_t OZInspectorState::parseEnd(OZInspectorState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZInspectorState::parseElement(PCString *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  char v5;
  char v7;
  PCSharedCount v8;
  PCSharedCount *v9;

  PCSharedCount::PCSharedCount(&v8);
  v7 = 0;
  if (*((_DWORD *)a3 + 2) == 1)
  {
    (*(void (**)(PCStreamElement *, uint64_t, PCSharedCount *))(*(_QWORD *)a3 + 96))(a3, 1, &v8);
    (*(void (**)(PCStreamElement *, uint64_t, char *))(*(_QWORD *)a3 + 152))(a3, 2, &v7);
    v5 = v7;
    v9 = &v8;
    *((_BYTE *)std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(this + 1, (PCString *)&v8, (uint64_t)&std::piecewise_construct, (const PCString **)&v9)+ 40) = v5;
  }
  PCString::~PCString((PCString *)&v8);
  return 0;
}

void sub_1B2E7768C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZInspectorState::~OZInspectorState(PCString **this)
{
  *this = (PCString *)&off_1E65982C0;
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  *this = (PCString *)&off_1E65982C0;
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1B5E29170);
}

uint64_t *std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(PCString *a1, PCString *this, uint64_t a3, const PCString **a4)
{
  const PCString *v6;
  uint64_t *var0;
  uint64_t **v8;
  uint64_t *v10[3];
  const PCString *v11;

  v6 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, &v11, this);
  var0 = (uint64_t *)v6->var0;
  if (!v6->var0)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v10[0]);
    var0 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return var0;
}

void std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(uint64_t a1@<X0>, const PCString **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  PCString *v6;

  v5 = a1 + 8;
  v6 = (PCString *)operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, *a2);
  LOBYTE(v6[5].var0) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2E77818(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::map<PCString,BOOL>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<PCString,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<PCString,BOOL>,std::__tree_node<std::__value_type<PCString,BOOL>,void *> *,long>>>(a1, *(PCString **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1B2E7786C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(v1, *(PCString **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<PCString,BOOL>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<PCString,BOOL>,std::__tree_node<std::__value_type<PCString,BOOL>,void *> *,long>>>(uint64_t *result, PCString *a2, _QWORD *a3)
{
  PCString *v4;
  PCString *v5;
  PCString *v6;
  __CFString *var0;
  __CFString *v8;
  BOOL v9;

  if (a2 != (PCString *)a3)
  {
    v4 = a2;
    v5 = (PCString *)result;
    v6 = (PCString *)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString const,BOOL> const&>(v5, v6, v4 + 4, (uint64_t)&v4[4]);
      var0 = v4[1].var0;
      if (var0)
      {
        do
        {
          v8 = var0;
          var0 = (__CFString *)var0->isa;
        }
        while (var0);
      }
      else
      {
        do
        {
          v8 = v4[2].var0;
          v9 = v8->isa == v4;
          v4 = (PCString *)v8;
        }
        while (!v9);
      }
      v4 = (PCString *)v8;
    }
    while (v8 != (__CFString *)a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString const,BOOL> const&>(PCString *a1, PCString *a2, PCString *a3, uint64_t a4)
{
  const PCString *v6;
  uint64_t *var0;
  uint64_t **v8;
  uint64_t *v10[3];
  __CFString *v11;
  const PCString *v12;

  v6 = std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__find_equal<PCString>(a1, a2, &v12, &v11, a3);
  var0 = (uint64_t *)v6->var0;
  if (!v6->var0)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::pair<PCString const,BOOL> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v8, v10[0]);
    var0 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return var0;
}

void std::__tree<std::__value_type<PCString,BOOL>,std::__map_value_compare<PCString,std::__value_type<PCString,BOOL>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,BOOL>>>::__construct_node<std::pair<PCString const,BOOL> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  PCString *v6;

  v5 = a1 + 8;
  v6 = (PCString *)operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, (const PCString *)a2);
  LOBYTE(v6[5].var0) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2E779F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t OZGuide::writeHeader(OZGuide *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 76);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZGuide::writeBody(OZGuide *this, PCSerializerWriteStream *a2)
{
  float v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideScope);
  v4 = *((float *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, float))(*(_QWORD *)a2 + 80))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned __int8 *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t OZGuide::parseBegin(OZGuide *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGuideScope);
  return 1;
}

uint64_t OZGuide::parseEnd(OZGuide *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZGuide::parseElement(OZGuide *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v3;
  char *v4;
  uint64_t v5;

  v3 = *((_DWORD *)a3 + 2);
  if (v3 == 2)
  {
    v4 = (char *)this + 12;
    v5 = 9;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    v4 = (char *)this + 8;
    v5 = 7;
LABEL_5:
    (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 8 * v5))(a3, v4);
  }
  return 0;
}

void OZGuideSet::OZGuideSet(OZGuideSet *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E6598330;
  *((_QWORD *)this + 1) = (char *)this + 16;
}

uint64_t OZGuideSet::writeHeader(OZGuideSet *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideSetScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 75);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZGuideSet::writeBody(OZGuideSet *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  OZGuideSet *v6;
  OZGuideSet *v7;
  OZGuideSet *v8;
  BOOL v9;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGuideSetScope);
  v6 = (OZGuideSet *)*((_QWORD *)this + 1);
  if (v6 != (OZGuideSet *)((char *)this + 16))
  {
    do
    {
      (*(void (**)(_QWORD *, PCSerializerWriteStream *, uint64_t))(*((_QWORD *)v6 + 4) + 16))((_QWORD *)v6 + 4, a2, a3);
      (*(void (**)(_QWORD *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v6 + 4) + 24))((_QWORD *)v6 + 4, a2, a3, 1, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v7 = (OZGuideSet *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(OZGuideSet **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (OZGuideSet *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (OZGuideSet *)((char *)this + 16));
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZGuideSet::parseBegin(OZGuideSet *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGuideSetScope);
  return 0;
}

uint64_t OZGuideSet::parseEnd(uint64_t **this, PCSerializerReadStream *a2)
{
  if (OZGuideSet::_reading)
  {
    std::__tree<OZGuide>::__emplace_unique_key_args<OZGuide,OZGuide const&>(this + 1, OZGuideSet::_reading, OZGuideSet::_reading);
    if (OZGuideSet::_reading)
      (*(void (**)(uint64_t))(*(_QWORD *)OZGuideSet::_reading + 8))(OZGuideSet::_reading);
  }
  OZGuideSet::_reading = 0;
  return 0;
}

uint64_t OZGuideSet::parseElement(uint64_t **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v4;

  if (*((_DWORD *)a3 + 2) == 76)
  {
    if (OZGuideSet::_reading)
    {
      std::__tree<OZGuide>::__emplace_unique_key_args<OZGuide,OZGuide const&>(this + 1, OZGuideSet::_reading, OZGuideSet::_reading);
      v4 = OZGuideSet::_reading;
    }
    else
    {
      v4 = operator new();
      *(_QWORD *)v4 = &off_1E6598388;
      *(_DWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 12) = 0;
      OZGuideSet::_reading = v4;
    }
    PCSerializerReadStream::pushHandler(a2, (PCSerializer *)v4);
  }
  return 0;
}

void OZGuide::~OZGuide(OZGuide *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t *std::__tree<OZGuide>::__find_equal<OZGuide>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  float v6;
  uint64_t *v7;
  int v8;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *(float *)(a3 + 8);
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = *((unsigned __int8 *)v4 + 44);
        if ((!*(_BYTE *)(a3 + 12) || v8) && (!*(_BYTE *)(a3 + 12) && v8 || v6 >= *((float *)v7 + 10)))
          break;
        v4 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_18;
      }
      if ((*(_BYTE *)(a3 + 12) || !v8) && (*(_BYTE *)(a3 + 12) && !v8 || *((float *)v7 + 10) >= v6))
        break;
      result = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = result;
  }
LABEL_18:
  *a2 = v7;
  return result;
}

_QWORD *std::__tree<OZGuide>::__emplace_unique_key_args<OZGuide,OZGuide const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<OZGuide>::__find_equal<OZGuide>((uint64_t)a1, &v9, a2);
  v6 = (_QWORD *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = &off_1E6598388;
    *((_DWORD *)v6 + 10) = *(_DWORD *)(a3 + 8);
    *((_BYTE *)v6 + 44) = *(_BYTE *)(a3 + 12);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t OZChannelImageWithOptions::getOffset(OZChannelImageWithOptions *this)
{
  return (uint64_t)this + 624;
}

void OZRig::OZRig(OZRig *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *v5 = &off_1E6598488;
  v5[2] = &unk_1E6598950;
  v5[6] = &unk_1E6598BA8;
  PCString::PCString(&v6, "Channel Widgets");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1088), &v6, (OZChannelFolder *)((char *)this + 56), 0x64u, 2u, 0);
  PCString::~PCString(&v6);
  *((_QWORD *)this + 152) = (char *)this + 1216;
  *((_QWORD *)this + 153) = (char *)this + 1216;
  *((_QWORD *)this + 154) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
}

void sub_1B2E77F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSceneNode *v10;
  OZChannelFolder *v11;
  _QWORD *v12;

  std::__list_imp<unsigned int>::clear(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZRig::OZRig(OZRig *this, const OZRig *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  const void *v8;
  char *v9;
  char *v10;
  OZChannelBase *v11;

  OZSceneNode::OZSceneNode(this, a2, a3);
  *(_QWORD *)v6 = &off_1E6598488;
  *(_QWORD *)(v6 + 16) = &unk_1E6598950;
  *(_QWORD *)(v6 + 48) = &unk_1E6598BA8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 1088), (const OZChannelFolder *)((char *)a2 + 1088), (OZChannelFolder *)(v6 + 56));
  *((_QWORD *)this + 152) = (char *)this + 1216;
  *((_QWORD *)this + 153) = (char *)this + 1216;
  *((_QWORD *)this + 154) = 0;
  if ((a3 & 1) == 0)
  {
    v7 = (char *)a2 + 1216;
    if ((const OZRig *)((char *)a2 + 1216) != *((const OZRig **)a2 + 153))
    {
      do
      {
        v8 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v7 + 16)
                                                                                            + 8)
                                                                              + 24))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 8), *(_QWORD *)(*(_QWORD *)v7 + 16), a3);
        if (v8)
        {
          if (v9)
          {
            v10 = v9;
            if ((a3 & 8) == 0)
            {
              OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v9 + 16));
              v11 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v10 + 640))(v10);
              OZChannelBase::setNameUnset(v11, 1);
            }
            (*(void (**)(OZRig *, char *, _QWORD))(*(_QWORD *)this + 984))(this, v10, 0);
          }
        }
        v7 = *(char **)v7;
      }
      while (v7 != *((char **)a2 + 153));
    }
  }
}

void sub_1B2E78100(_Unwind_Exception *a1)
{
  OZSceneNode *v1;

  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void OZRig::~OZRig(OZRig *this)
{
  uint64_t i;
  uint64_t *v3;
  OZSceneNode *v4;
  uint64_t v5;
  OZChannelBase *v6;
  OZScene *v7;

  *(_QWORD *)this = &off_1E6598488;
  *((_QWORD *)this + 2) = &unk_1E6598950;
  *((_QWORD *)this + 6) = &unk_1E6598BA8;
  for (i = *((_QWORD *)this + 154); i; i = *((_QWORD *)this + 154))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 153);
    v4 = (OZSceneNode *)v3[2];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    *((_QWORD *)this + 154) = i - 1;
    operator delete(v3);
    v6 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v4 + 640))(v4);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1088), v6);
    (*(void (**)(OZSceneNode *, _QWORD))(*(_QWORD *)v4 + 256))(v4, 0);
    v7 = (OZScene *)*((_QWORD *)this + 121);
    if (v7)
    {
      OZScene::unregisterNode(v7, v4);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v4);
    }
    (*(void (**)(OZSceneNode *))(*(_QWORD *)v4 + 8))(v4);
  }
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 152);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1088));
  OZSceneNode::~OZSceneNode(this);
}

{
  OZRig::~OZRig(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZRig::~OZRig(OZRig *this)
{
  OZRig::~OZRig((OZRig *)((char *)this - 16));
}

{
  OZRig::~OZRig((OZRig *)((char *)this - 48));
}

{
  OZRig::~OZRig((OZRig *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRig::~OZRig((OZRig *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

BOOL OZRig::hasDescendants(OZRig *this)
{
  return *((_QWORD *)this + 154) != 0;
}

uint64_t OZRig::numberOfDescendants(OZRig *this)
{
  return *((unsigned int *)this + 308);
}

uint64_t OZRig::getDescendantAtIndex(OZRig *this, int a2)
{
  char *v2;
  char *v3;
  _BOOL4 v4;
  int v6;
  BOOL v8;
  uint64_t v9;

  v2 = (char *)this + 1216;
  v3 = (char *)*((_QWORD *)this + 153);
  v4 = v3 != (char *)this + 1216;
  if (v3 != (char *)this + 1216 && a2 != 0)
  {
    v6 = a2 - 1;
    do
    {
      v3 = (char *)*((_QWORD *)v3 + 1);
      v8 = v6-- != 0;
      v4 = v3 != v2;
    }
    while (v3 != v2 && v8);
  }
  if (!v4)
    return 0;
  v9 = *((_QWORD *)v3 + 2);
  if (v9)
    return v9 + 16;
  else
    return 0;
}

uint64_t OZRig::addDescendantAfter(OZRig *this, OZSceneNode *lpsrc, OZSceneNode *a3)
{
  OZSceneNode *v5;
  void *v6;
  char *v7;
  uint64_t i;
  char v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  OZChannelBase *v15;
  const OZChannelBase *v16;
  OZChannelBase *v17;
  OZScene *v18;

  if (lpsrc)
  {
    if (a3)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_9;
LABEL_3:
  if (!v6)
  {
LABEL_10:
    v9 = 1;
    goto LABEL_14;
  }
  v7 = (char *)this + 1216;
  for (i = *((_QWORD *)this + 153); (char *)i != v7; i = *(_QWORD *)(i + 8))
  {
    if (*(OZSceneNode **)(i + 16) == a3)
    {
      if ((char *)i != v7)
      {
        v10 = *(uint64_t **)(i + 8);
        v11 = operator new(0x18uLL);
        v11[2] = v5;
        v12 = *v10;
        *(_QWORD *)(v12 + 8) = v11;
        *v11 = v12;
        *v10 = (uint64_t)v11;
        v11[1] = v10;
        ++*((_QWORD *)this + 154);
        goto LABEL_16;
      }
      break;
    }
  }
  v9 = 0;
LABEL_14:
  v13 = operator new(0x18uLL);
  v14 = (_QWORD *)*((_QWORD *)this + 153);
  *v13 = (char *)this + 1216;
  v13[1] = v14;
  v13[2] = v5;
  *v14 = v13;
  *((_QWORD *)this + 153) = v13;
  ++*((_QWORD *)this + 154);
  if ((v9 & 1) != 0)
  {
    v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v5 + 640))(v5);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 1088), v15);
  }
  else
  {
LABEL_16:
    v16 = (const OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 640))(v6);
    v17 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v5 + 640))(v5);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 1088), v16, v17);
  }
  (*(void (**)(OZSceneNode *, OZRig *))(*(_QWORD *)v5 + 256))(v5, this);
  v18 = (OZScene *)*((_QWORD *)this + 121);
  if (v18)
  {
    OZScene::registerNode(v18, v5);
    OZScene::addAllDependencies(*((_QWORD *)this + 121), v5);
  }
  return (*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 496))(this);
}

uint64_t OZRig::addDescendantBefore(OZRig *this, OZSceneNode *lpsrc, OZSceneNode *a3)
{
  OZSceneNode *v5;
  uint64_t *v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  const OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  OZScene *v13;

  if (lpsrc)
  {
    if (a3)
      goto LABEL_3;
LABEL_9:
    v6 = (uint64_t *)((char *)this + 1216);
    goto LABEL_11;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v6 = (uint64_t *)((char *)this + 1216);
  {
    for (i = *((_QWORD *)this + 153); (uint64_t *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        v6 = (uint64_t *)i;
        break;
      }
    }
  }
LABEL_11:
  v8 = operator new(0x18uLL);
  v8[2] = v5;
  v9 = *v6;
  *(_QWORD *)(v9 + 8) = v8;
  *v8 = v9;
  *v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((_QWORD *)this + 154);
  if (a3)
  {
    v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
    v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v5 + 640))(v5);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 1088), v10, v11);
  }
  else
  {
    v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v5 + 640))(v5);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1088), v12);
  }
  (*(void (**)(OZSceneNode *, OZRig *))(*(_QWORD *)v5 + 256))(v5, this);
  v13 = (OZScene *)*((_QWORD *)this + 121);
  if (v13)
  {
    OZScene::registerNode(v13, v5);
    OZScene::addAllDependencies(*((_QWORD *)this + 121), v5);
  }
  return (*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 496))(this);
}

OZChannelFolder *OZRig::removeDescendant(OZRig *this, OZSceneNode *lpsrc)
{
  OZSceneNode *v4;
  char *v5;
  uint64_t *i;
  uint64_t v7;
  OZScene *v8;
  OZScene *v9;
  OZChannelBase *v10;

  if (lpsrc)
  else
    v4 = 0;
  v5 = (char *)this + 1216;
  for (i = (uint64_t *)*((_QWORD *)this + 153); i != (uint64_t *)v5; i = (uint64_t *)i[1])
  {
    if ((OZSceneNode *)i[2] == v4)
    {
      if (i != (uint64_t *)v5)
      {
        (*(void (**)(OZSceneNode *, _QWORD))(*(_QWORD *)v4 + 256))(v4, 0);
        v7 = *i;
        *(_QWORD *)(v7 + 8) = i[1];
        *(_QWORD *)i[1] = v7;
        --*((_QWORD *)this + 154);
        operator delete(i);
        (*(void (**)(OZRig *))(*(_QWORD *)this + 496))(this);
        if ((*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 272))(this))
        {
          v8 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 272))(this);
          OZScene::unregisterNode(v8, v4);
          v9 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 272))(this);
          OZScene::removeAllDependencies(v9, v4);
        }
      }
      break;
    }
  }
  v10 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 640))(lpsrc);
  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1088), v10);
}

uint64_t OZRig::begin_descendants(OZRig *this)
{
  return *((_QWORD *)this + 153);
}

uint64_t OZRig::end_descendants(OZRig *this)
{
  return (uint64_t)this + 1216;
}

uint64_t OZRig::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a4)
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZRigScope);
    v10 = (*((uint64_t (**)(unsigned int **))*this + 128))(this);
    v11 = (*((uint64_t (**)(unsigned int **))*this + 129))(this);
    if (v10 != v11)
    {
      v12 = v11;
      do
      {
        v13 = *(_QWORD *)(v10 + 16);
        if (!OZChannelBase::testFlag((OZChannelBase *)(v13 + 56), 8))
        {
          v15 = *(_QWORD *)(v13 + 48);
          v14 = v13 + 48;
          (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(v15 + 16))(v14, a2, 0);
          (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a2, 0, 1, 1);
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        }
        v10 = *(_QWORD *)(v10 + 8);
      }
      while (v10 != v12);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  return OZSceneNode::writeBody(this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'OZRig::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZRig::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZRig::parseBegin(OZRig *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRigScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZRig::parseBegin(OZRig *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseBegin((OZRig *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRigScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZRig::parseEnd(OZRig *this, PCSerializerReadStream *a2)
{
  return OZSceneNode::parseEnd((OZRig *)((char *)this - 48), a2);
}

uint64_t OZRig::parseElement(OZRig *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  const void *v6;
  void *v7;
  const void *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  OZScene *v14;
  uint64_t v15;
  unsigned int v17[2];
  PCSharedCount v18;

  OZSceneNode::parseElement((OZTimeMarkerSet **)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 62)
  {
    PCSharedCount::PCSharedCount(&v18);
    *(_QWORD *)v17 = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v17);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v18);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v17[1]);
    v6 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v17[0]);
    if (v6)
    {
      if (v7)
      {
        v8 = (const void *)(*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v7 + 168))(v7, &v18, v17[1]);
        if (v8)
        else
          v9 = 0;
        OZChannelBase::setID((OZChannelBase *)(v9 + 56), v17[1]);
        (*(void (**)(char *, OZRig *))(*(_QWORD *)v9 + 256))(v9, this);
        v10 = operator new(0x18uLL);
        v10[1] = (char *)this + 1216;
        v10[2] = v9;
        v11 = *((_QWORD *)this + 152);
        *v10 = v11;
        *(_QWORD *)(v11 + 8) = v10;
        *((_QWORD *)this + 152) = v10;
        ++*((_QWORD *)this + 154);
        v12 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 640))(v9);
        OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1088), v12);
        v13 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 640))(v9);
        OZChannelBase::resetFlag(v13, 64, 0);
        v14 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 272))(this);
        v15 = (uint64_t)v14;
        if (v14)
        {
          OZScene::registerNode(v14, (OZSceneNode *)v9);
          OZScene::addAllDependencies(v15, (OZSceneNode *)v9);
        }
        PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v9 + 48));
      }
    }
    PCString::~PCString((PCString *)&v18);
  }
  return 1;
}

void sub_1B2E78AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRig::parseElement(OZRig *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZRig::parseElement((OZRig *)((char *)this - 48), a2, a3);
  return 1;
}

void OZRig::allowDrag(OZRig *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  void *v14;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t i;
  void *v19;
  const OZChannelBase *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;

  *a5 = 0;
  if (lpsrc)
  {
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = *((_QWORD *)lpsrc + 1);
  v28 = xmmword_1B3555750;
  if (OZFactory::isKindOfClass(v16, (int32x4_t *)&v28)
    && (OZChannelBase *)(*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 640))(this) == a3)
  {
    if (*a6 == 1 && OZRigWidget::CanRigChannel((unint64_t)v19, v20))
    {
      *((_DWORD *)this + 310) = 3;
      *a5 = a4 & 1;
      v21 = 1;
LABEL_36:
      *a6 = v21;
    }
  }
  else
  {
    if (!v15)
    {
      OZSceneNode::allowDrag(this, lpsrc, a3, a4, a5, a6, a7);
      return;
    }
    v17 = (char *)this + 1216;
    for (i = *((_QWORD *)this + 153); ; i = *(_QWORD *)(i + 8))
    {
      if ((char *)i == v17)
        goto LABEL_17;
      if (*(void **)(i + 16) == v15)
        break;
    }
    if ((char *)i == v17 || (OZChannelBase *)(*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 640))(this) != a3)
    {
LABEL_17:
      if (!(*(uint64_t (**)(void *))(*(_QWORD *)v15 + 272))(v15)
        || (v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 272))(v15),
            v22 == (*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 272))(this)))
      {
        v23 = *((_QWORD *)this + 153);
        if ((char *)v23 == v17)
          goto LABEL_33;
        v27 = a4;
        v24 = 0;
        v25 = -1;
        v26 = -1;
        do
        {
          if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 16) + 640))(*(_QWORD *)(v23 + 16)) == a3)
            v25 = v24;
          if (*(void **)(v23 + 16) == v14)
            v26 = v24;
          if ((v26 & 0x8000000000000000) == 0 && (v25 & 0x8000000000000000) == 0)
            break;
          ++v24;
          v23 = *(_QWORD *)(v23 + 8);
        }
        while ((char *)v23 != v17);
        if (v26 != v25 && ((v25 | v26) & 0x8000000000000000) == 0)
        {
          *a5 = v27 & 2;
          if (v26 <= v25)
            v21 = 3;
          else
            v21 = 2;
          goto LABEL_36;
        }
        LOBYTE(a4) = v27;
        if (v25 < 0)
        {
LABEL_33:
          if ((OZChannelBase *)(*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 640))(this) != a3)
            return;
        }
        *a5 = a4 & 1;
      }
    }
  }
}

void `non-virtual thunk to'OZRig::allowDrag(OZRig *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZRig::allowDrag((OZRig *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

uint64_t `non-virtual thunk to'OZRig::prepareForDragOperation()
{
  return OZSceneNode::prepareForDragOperation();
}

uint64_t OZRig::performDragOperation(OZRig *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  uint64_t v16;
  OZScene *v17;
  OZDocument *v18;
  OZChannelBase *v19;
  _QWORD *v20;
  uint64_t v21;
  const void *v22;
  OZRigWidget *Widget;
  OZRigWidget *v24;
  int v25;
  OZObjectManipulator *v26;
  const PCString *v27;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  PCString v33;

  v16 = (*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 272))(this);
  v17 = (OZScene *)v16;
  if (v16)
    v18 = *(OZDocument **)(v16 + 1584);
  else
    v18 = 0;
  if (!*((_BYTE *)this + 1244))
  {
    if (!*((_BYTE *)this + 1245))
      return OZSceneNode::performDragOperation(this, a2, a3, a4, a5, a6, a7, a8);
    v21 = v20[120];
    if (v21)
    {
      if (!*((_DWORD *)this + 312))
      {
        PCURL::PCURL((PCURL *)&v33, CFSTR("Undo Reorder"));
        (*(void (**)(_QWORD *, PCString *, uint64_t))(v20[2] + 176))(v20 + 2, &v33, 3);
        PCString::~PCString(&v33);
      }
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 1000))(v21, v20);
    }
    else
    {
      PCURL::PCURL((PCURL *)&v33, CFSTR("Undo Drop"));
      (*(void (**)(char *, PCString *, uint64_t))(*((_QWORD *)this + 2) + 176))((char *)this + 16, &v33, 3);
      PCString::~PCString(&v33);
    }
    v29 = (_QWORD *)*((_QWORD *)this + 153);
    if (v29 != (_QWORD *)((char *)this + 1216))
    {
      v30 = v29 + 2;
      if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v29[2] + 640))(v29[2]) == a3)
      {
        v31 = 0;
LABEL_37:
        if (a5 == 3)
          v31 = *v30;
        goto LABEL_39;
      }
      while (1)
      {
        v29 = (_QWORD *)v29[1];
        if (v29 == (_QWORD *)((char *)this + 1216))
          break;
        v31 = *v30;
        v30 = v29 + 2;
        if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v29[2] + 640))(v29[2]) == a3)
          goto LABEL_37;
      }
    }
    v31 = 0;
LABEL_39:
    (*(void (**)(OZRig *, _QWORD *, uint64_t))(*(_QWORD *)this + 984))(this, v20, v31);
    v32 = *((_DWORD *)this + 312) + 1;
    *((_DWORD *)this + 312) = v32;
    if (v32 == a6)
    {
      (*(void (**)(OZRig *))(*(_QWORD *)this + 496))(this);
      if (v18)
        OZDocument::postNotification(v18, 16);
    }
    return 1;
  }
  if (a2)
  else
    v19 = 0;
  if (*((_DWORD *)this + 312))
  {
    v22 = *(const void **)(*((_QWORD *)this + 153) + 16);
    if (!v22)
    {
      v24 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    if (v18)
    {
      PCURL::PCURL((PCURL *)&v33, CFSTR("Undo Add Widget to Rig"));
      OZChannelBase::setRangeName((OZChannelBase *)v18, &v33);
      PCString::~PCString(&v33);
    }
    Widget = OZRig::createWidget(this, (const PCString *)*((unsigned int *)this + 310));
  }
  v24 = Widget;
LABEL_21:
  OZRigWidget::addChannel(v24, v19, 0);
  v25 = *((_DWORD *)this + 312) + 1;
  *((_DWORD *)this + 312) = v25;
  if (v25 == a6)
  {
    (*(void (**)(OZRig *))(*(_QWORD *)this + 496))(this);
    if (v17)
    {
      if (v18)
      {
        if (v24)
          v26 = (OZRigWidget *)((char *)v24 + 16);
        else
          v26 = 0;
        OZScene::selectObject(v17, v26, 0, 0);
        OZDocument::postNotification(v18, 48);
        OZChannelBase::setRangeName((OZChannelBase *)v18, v27);
      }
    }
  }
  return 1;
}

void sub_1B2E79138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZRigWidget *OZRig::createWidget(OZRig *this, const PCString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  OZRigWidget *v12;
  PCString v14;
  PCSharedCount v15;

  PCSharedCount::PCSharedCount(&v15);
  switch((int)a2)
  {
    case 1:
      PCURL::PCURL((PCURL *)&v14, CFSTR("Widget Type Checkbox"));
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      v11 = "Rig Checkbox";
      break;
    case 2:
      PCURL::PCURL((PCURL *)&v14, CFSTR("Widget Type Pop Up"));
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      v11 = "Rig Pop-Up";
      break;
    case 3:
      PCURL::PCURL((PCURL *)&v14, CFSTR("Widget Type Slider"));
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      v11 = "Rig Slider";
      break;
    case 4:
      PCURL::PCURL((PCURL *)&v14, CFSTR("Widget Type Aspect Ratio"));
      PCString::set((PCString *)&v15, &v14);
      PCString::~PCString(&v14);
      v11 = 0;
      break;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", v4, v5, v6, v7, v8, v9, v10, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRig.cpp");
      pcAbortImpl();
  }
  v12 = OZRigWidget::create((OZRigWidget *)&v15, a2, 0);
  OZRig::addWidget(this, v12);
  PCURL::PCURL((PCURL *)&v14, CFSTR("Undo Add Widget to Rig"));
  (*(void (**)(uint64_t, PCString *, uint64_t))(*((_QWORD *)v12 + 2) + 176))((uint64_t)v12 + 16, &v14, 1);
  PCString::~PCString(&v14);
  OZChannelBase::setRangeName((OZChannelBase *)"Rig", (const PCString *)v11);
  PCString::~PCString((PCString *)&v15);
  return v12;
}

void sub_1B2E79348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRig::performDragOperation(OZRig *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZRig::performDragOperation((OZRig *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *OZRig::addWidget(OZRig *this, OZRigWidget *a2)
{
  OZChannelFolder *v4;
  OZChannelBase *v5;
  OZScene *v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;

  v4 = (OZChannelFolder *)((char *)this + 1088);
  v5 = (OZChannelBase *)(*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)a2 + 640))(a2);
  OZChannelFolder::push_front(v4, v5);
  (*(void (**)(OZRigWidget *, OZRig *))(*(_QWORD *)a2 + 256))(a2, this);
  v6 = (OZScene *)(*(uint64_t (**)(OZRig *))(*(_QWORD *)this + 272))(this);
  if (v6)
  {
    v7 = (uint64_t)v6;
    OZScene::registerNode(v6, a2);
    OZScene::addAllDependencies(v7, a2);
    OZDocument::postNotification(*(OZDocument **)(v7 + 1584), 16);
    (*(void (**)(OZRigWidget *, uint64_t))(*(_QWORD *)a2 + 280))(a2, v7);
  }
  result = operator new(0x18uLL);
  v9 = (_QWORD *)*((_QWORD *)this + 153);
  *result = (char *)this + 1216;
  result[1] = v9;
  result[2] = a2;
  *v9 = result;
  *((_QWORD *)this + 153) = result;
  ++*((_QWORD *)this + 154);
  return result;
}

void OZLiCachingDelegate::OZLiCachingDelegate(OZLiCachingDelegate *this)
{
  *(_QWORD *)this = &unk_1E6598CD0;
  PCSingleton::PCSingleton((OZLiCachingDelegate *)((char *)this + 8), 0);
  *(_QWORD *)this = &off_1E6598C18;
  *((_QWORD *)this + 1) = &unk_1E6598C68;
  LiSetCachingDelegate((uint64_t)this);
}

void sub_1B2E79530(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLiCachingDelegate::instance(OZLiCachingDelegate *this)
{
  unsigned __int8 v1;
  OZLiCachingDelegate *v3;

  {
    v3 = (OZLiCachingDelegate *)operator new();
    OZLiCachingDelegate::OZLiCachingDelegate(v3);
    OZLiCachingDelegate::instance(void)::inst = (uint64_t)v3;
  }
  return OZLiCachingDelegate::instance(void)::inst;
}

void sub_1B2E795B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x81C40803F642BLL);
  _Unwind_Resume(a1);
}

BOOL OZLiCachingDelegate::addTexture(int a1, ProGL::TextureHandle *a2, int a3, PCHash128 *a4)
{
  OZCacheManager *v7;
  PGTextureCache *v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  PGCreateTextureFromPGLTexture((void (**)(_anonymous_namespace_ **))a2, &v14);
  v8 = (PGTextureCache *)OZCacheManager::Instance(v7);
  v9 = OZCacheManager::addTexture(v8, &v14, (__int128 *)a2 + 1, a3, a4);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1B2E7969C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL OZLiCachingDelegate::getTextureForKey(OZCacheManager *a1, int a2, const PCHash128 *a3, uint64_t a4)
{
  PGTextureCache *v7;
  PGTexture *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v16;
  PGTexture *v17;
  std::__shared_weak_count *v18;

  v7 = (PGTextureCache *)OZCacheManager::Instance(a1);
  OZCacheManager::getTextureForKey(v7, a2, a3, (_BYTE *)(a4 + 16), &v17);
  v8 = v17;
  if (v17)
  {
    PGTexture::getPGLTexture((uint64_t)v17, &v16);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a4, &v16);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v8 != 0;
}

void sub_1B2E79794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZLiCachingDelegate::disableLimits(OZLiCachingDelegate *this)
{
  PGTextureCache *v1;

  v1 = (PGTextureCache *)PGTextureCache::instance(this);
  PGTextureCache::disableLimits(v1);
}

void OZLiCachingDelegate::enableLimits(OZLiCachingDelegate *this)
{
  PGTextureCache *v1;

  v1 = (PGTextureCache *)PGTextureCache::instance(this);
  PGTextureCache::enableLimits(v1);
}

void OZLiCachingDelegate::addBitmap(OZCacheManager *a1, _QWORD *a2, PCHash128 *a3, double a4)
{
  id v7;

  OZCacheManager::Instance(a1);
  OZCacheManager::addImage(a2, a3, &v7, a4);
  ProCore_Impl::PCNSRefImpl::release(&v7);
}

void OZLiCachingDelegate::getBitmapForKey(OZLiCachingDelegate *this@<X0>, const PCHash128 *a2@<X1>, _QWORD *a3@<X8>)
{
  OZCacheManager::Instance(this);
  OZCacheManager::getImageForKey(a2, a3);
}

void OZLiCachingDelegate::~OZLiCachingDelegate(OZLiCachingDelegate *this)
{
  PCSingleton::~PCSingleton((OZLiCachingDelegate *)((char *)this + 8));
}

{
  PCSingleton::~PCSingleton((OZLiCachingDelegate *)((char *)this + 8));
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZLiCachingDelegate::~OZLiCachingDelegate(OZLiCachingDelegate *this)
{
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t AbsoluteNSURL(NSString *a1, NSString *a2)
{
  NSString *v3;

  v3 = a1;
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", a1), "path"), "characterAtIndex:", 0) != 47)v3 = -[NSString stringByAppendingPathComponent:](a2, "stringByAppendingPathComponent:", v3);
  return objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v3);
}

id LoadSCNSceneFromFile(NSURL *a1)
{
  id result;
  void *v2;
  void *v3;
  uint64_t v4;

  result = (id)objc_msgSend(MEMORY[0x1E0CD5A18], "sceneSourceWithURL:options:", a1, 0);
  if (result)
  {
    v2 = result;
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    objc_msgSend(v3, "setObject:forKey:", v4, *MEMORY[0x1E0CD5B90]);
    objc_msgSend(v3, "setObject:forKey:", *MEMORY[0x1E0CD5B80], *MEMORY[0x1E0CD5B78]);
    return (id)objc_msgSend(v2, "sceneWithOptions:error:", v3, 0);
  }
  return result;
}

OZ3DEngineSceneFileImplUSDZ *New3DEngineSceneFileImpl(OZ3DEngineSceneFile *a1, const __CFURL **this)
{
  int v4;
  int v5;
  int v6;
  int v7;
  OZ3DEngineSceneFileImplUSDZ *v8;
  void (**v9)(OZ3DEngineSceneFileImplSCN *__hidden);
  PCString v11;
  PCString v12;

  PCURL::getExtension(this, (PCURL *)&v12);
  PCString::PCString(&v11, "usdz");
  v4 = PCString::caseInsensitiveCompare(&v12, &v11);
  PCString::~PCString(&v11);
  if (!v4)
  {
    v8 = (OZ3DEngineSceneFileImplUSDZ *)operator new();
    OZ3DEngineSceneFileImplUSDZ::OZ3DEngineSceneFileImplUSDZ(v8, a1, (const PCURL *)this);
    goto LABEL_10;
  }
  PCString::PCString(&v11, "scn");
  v5 = PCString::caseInsensitiveCompare(&v12, &v11);
  PCString::~PCString(&v11);
  if (!v5)
  {
    v8 = (OZ3DEngineSceneFileImplUSDZ *)operator new();
    OZ3DEngineSceneFileImpl::OZ3DEngineSceneFileImpl(v8, a1, (const PCURL *)this);
    v9 = &off_1E6598F28;
LABEL_9:
    *(_QWORD *)v8 = v9;
    goto LABEL_10;
  }
  PCString::PCString(&v11, "arface");
  v6 = PCString::caseInsensitiveCompare(&v12, &v11);
  PCString::~PCString(&v11);
  if (!v6)
  {
    v8 = (OZ3DEngineSceneFileImplUSDZ *)operator new();
    OZ3DEngineSceneFileImpl::OZ3DEngineSceneFileImpl(v8, a1, (const PCURL *)this);
    v9 = &off_1E6598FD0;
    goto LABEL_9;
  }
  PCString::PCString(&v11, "obj");
  v7 = PCString::caseInsensitiveCompare(&v12, &v11);
  PCString::~PCString(&v11);
  if (v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = (OZ3DEngineSceneFileImplUSDZ *)operator new();
    OZ3DEngineSceneFileImpl::OZ3DEngineSceneFileImpl(v8, a1, (const PCURL *)this);
    *(_QWORD *)v8 = &off_1E6598DD8;
    *((_OWORD *)v8 + 22) = 0u;
    *((_OWORD *)v8 + 23) = 0u;
    *((_OWORD *)v8 + 24) = 0u;
  }
LABEL_10:
  PCString::~PCString(&v12);
  return v8;
}

void sub_1B2E79C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  MEMORY[0x1B5E29170](v10, 0x10E1C400C931945);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneFile::willDoCollectOperation(OZ3DEngineSceneFile *this, NSString *a2)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  OZ3DEngineSceneFileImplUSDZ *v5;

  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  if ((*(unsigned int (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 64))(FileImpl))
  {
    v5 = OZ3DEngineSceneFile::getFileImpl(this);
    (*(void (**)(OZ3DEngineSceneFileImplUSDZ *, NSString *))(*(_QWORD *)v5 + 104))(v5, a2);
  }
  return 1;
}

uint64_t OZ3DEngineSceneFile::didDoCollectOperation(OZ3DEngineSceneFile *this, OZCopyFootageInfo *a2)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  uint64_t result;
  OZ3DEngineSceneFileImplUSDZ *v6;

  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  result = (*(uint64_t (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 64))(FileImpl);
  if ((_DWORD)result)
  {
    v6 = OZ3DEngineSceneFile::getFileImpl(this);
    return (*(uint64_t (**)(OZ3DEngineSceneFileImplUSDZ *, OZCopyFootageInfo *))(*(_QWORD *)v6 + 112))(v6, a2);
  }
  return result;
}

uint64_t OZ3DEngineSceneFile::getFilePathForCollectOperation(OZ3DEngineSceneFile *this)
{
  return (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1264))(this);
}

uint64_t OZ3DEngineSceneFile::clearLoadedFile(OZ3DEngineSceneFile *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 216);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 216) = 0;
  return result;
}

uint64_t OZ3DEngineSceneFile::openMedia(OZ3DEngineSceneFile *this)
{
  uint64_t result;
  OZ3DEngineSceneFileImpl *FileImpl;
  char v4;
  OZ3DEngineSceneFileImpl *v5;
  char v6;
  const __CFURL **v7;
  PCString v8;

  if (*((_BYTE *)this + 1560))
    return 0;
  if (*((_QWORD *)this + 193))
  {
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    OZ3DEngineSceneFileImpl::readFile(FileImpl);
    v4 = *((_DWORD *)OZ3DEngineSceneFile::getFileImpl(this) + 64) != 1;
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, v4);
  }
  if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this)
    && *((_QWORD *)this + 194))
  {
    v5 = OZ3DEngineSceneFile::getFileImpl(this);
    OZ3DEngineSceneFileImpl::readFile(v5);
    v6 = *((_DWORD *)OZ3DEngineSceneFile::getFileImpl(this) + 64) != 1;
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, v6);
  }
  v7 = (const __CFURL **)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1408))(this);
  if (v7)
  {
    PCURL::getAsFileSystemString(v7, &v8);
    PCString::set((PCString *)this + 196, &v8);
    PCString::~PCString(&v8);
  }
  LODWORD(result) = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this);
  if ((result & 1) == 0)
    *((_BYTE *)this + 1560) = 1;
  return result;
}

void sub_1B2E79E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneFileImpl::readFile(OZ3DEngineSceneFileImpl *this)
{
  PCMutex *v2;
  int v3;
  int v4;

  v2 = (PCMutex *)((char *)this + 280);
  PCMutex::lock((PCMutex *)((char *)this + 280));
  if (!*((_DWORD *)this + 64))
  {
    v3 = (*(uint64_t (**)(OZ3DEngineSceneFileImpl *))(*(_QWORD *)this + 136))(this);
    if (v3)
      v4 = 1;
    else
      v4 = 2;
    if (*((_DWORD *)this + 64) != v4)
    {
      *((_DWORD *)this + 64) = v4;
      if (v3)
        OZ3DEngineSceneFile::didReadSceneFile(*((OZ3DEngineSceneFile **)this + 33), 1);
    }
  }
  return PCMutex::unlock(v2);
}

void sub_1B2E79F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneFile::isSceneFileValid(OZ3DEngineSceneFile *this, NSString *a2)
{
  uint64_t result;

  if ((objc_msgSend((id)-[OZ3DEngineSceneFile pathExtension](this, "pathExtension"), "isEqualToString:", CFSTR("arface")) & 1) == 0)
  {
    result = (uint64_t)LoadSCNSceneFromFile((NSURL *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", this));
    if (!result)
      return result;

  }
  return 1;
}

uint64_t OZ3DEngineSceneFile::get3DScene(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImpl *FileImpl;

  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  OZ3DEngineSceneFileImpl::readFile(FileImpl);
  return (uint64_t)FileImpl + 8;
}

OZ3DEngineSceneFileImplUSDZ *OZ3DEngineSceneFile::getBounds(OZ3DEngineSceneFile *a1, double *a2, __int128 *a3)
{
  OZ3DEngineSceneFileImplUSDZ *result;
  double v7;
  double v8;
  double v9;
  double v10;
  __int128 *v11;
  double v12;
  double v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[6];

  result = (OZ3DEngineSceneFileImplUSDZ *)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)a1 + 1432))(a1);
  if ((result & 1) != 0)
  {
    v7 = 0.0;
    v8 = -1.0;
    v9 = -1.0;
    v10 = 0.0;
    if (!a2)
      return result;
LABEL_11:
    *a2 = v7;
    a2[1] = v10;
    a2[2] = v8;
    a2[3] = v9;
    return result;
  }
  result = OZ3DEngineSceneFile::getFileImpl(a1);
  if (result)
  {
    if (*((_BYTE *)a3 + 202))
      v11 = (__int128 *)MEMORY[0x1E0CA2E68];
    else
      v11 = a3;
    v14 = *v11;
    v15 = *((_QWORD *)v11 + 2);
    result = (OZ3DEngineSceneFileImplUSDZ *)(*(_QWORD *(**)(_QWORD *__return_ptr, OZ3DEngineSceneFileImplUSDZ *, __int128 *))(*(_QWORD *)result + 128))(v16, result, &v14);
    v7 = *(double *)v16;
    v12 = *(double *)&v16[1];
    v10 = *(double *)&v16[2];
    v13 = *(double *)&v16[3];
  }
  else
  {
    v10 = 1.0;
    v13 = -1.0;
    v12 = -1.0;
    v7 = 1.0;
  }
  v8 = v12 - v7;
  v9 = v13 - v10;
  if (a2)
    goto LABEL_11;
  return result;
}

OZ3DEngineSceneFileImplUSDZ *`non-virtual thunk to'OZ3DEngineSceneFile::getBounds(uint64_t a1, double *a2, __int128 *a3)
{
  return OZ3DEngineSceneFile::getBounds((OZ3DEngineSceneFile *)(a1 - 1576), a2, a3);
}

double OZ3DEngineSceneFile::getPreviewBounds(uint64_t a1, double *a2)
{
  double result;
  double v4;
  double v5;
  double v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1576))(a1);
  v4 = a2[2];
  result = a2[3];
  if (v4 <= result)
  {
    if (v4 < result)
    {
      *a2 = result / v4 * *a2;
      a2[2] = result;
      v4 = result;
    }
  }
  else
  {
    a2[1] = v4 / result * a2[1];
    a2[3] = v4;
    result = v4;
  }
  if (v4 < 1.0 && v4 > 0.0)
  {
    v5 = (double)(int)vcvtmd_s64_f64(v4 + 0.5 + 0.0000001);
    *a2 = v5 / v4 * *a2;
    a2[2] = v5;
  }
  if (result < 1.0 && result > 0.0)
  {
    v6 = (double)(int)vcvtmd_s64_f64(result + 0.5 + 0.0000001);
    result = v6 / result * a2[1];
    a2[1] = result;
    a2[3] = v6;
  }
  return result;
}

double `non-virtual thunk to'OZ3DEngineSceneFile::getPreviewBounds(uint64_t a1, double *a2)
{
  return OZ3DEngineSceneFile::getPreviewBounds(a1 - 1576, a2);
}

float OZ3DEngineSceneFile::getDimensions(OZ3DEngineSceneFile *this, float *a2, float *a3, const OZRenderState *a4)
{
  double v11;
  float v12;
  float result;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  (*(void (**)(OZ3DEngineSceneFile *, _QWORD *, const OZRenderState *))(*(_QWORD *)this + 1576))(this, v14, a4);
  v11 = *((double *)&v15 + 1);
  v12 = *(double *)&v15;
  *a2 = v12;
  result = v11;
  *a3 = result;
  return result;
}

float `non-virtual thunk to'OZ3DEngineSceneFile::getDimensions(OZ3DEngineSceneFile *this, float *a2, float *a3, const OZRenderState *a4)
{
  double v11;
  float v12;
  float result;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  (*(void (**)(char *, _QWORD *, const OZRenderState *))(*((_QWORD *)this - 197) + 1576))((char *)this - 1576, v14, a4);
  v11 = *((double *)&v15 + 1);
  v12 = *(double *)&v15;
  *a2 = v12;
  result = v11;
  *a3 = result;
  return result;
}

void OZ3DEngineSceneFile::getHeliumGraph(OZ3DEngineCore **a1@<X0>, _QWORD *a2@<X1>, FxColorDescription *a3@<X3>, uint64_t a4@<X4>, HGXForm **a5@<X8>)
{
  float BlendingGamma;
  uint64_t RenderNodeList;
  LiHe3DEngineNode *v12;
  PCColorSpaceCache *CGColorSpace;
  OZ3DEngineSceneFileImpl *FileImpl;
  std::recursive_mutex *v15;
  Li3DEngineObjectDataBase *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  PC_Sp_counted_base *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  LiSimpleCamera *v31;
  OZScene *v32;
  CGImage *EnvironmentMap;
  OZScene *v34;
  double EnvironmentMapIntensity;
  int v36;
  HGXForm *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  __n128 v45;
  uint64_t v46;
  char v47;
  _BYTE __dst[128];
  PCSharedCount v49;
  PCSharedCount v50;
  _QWORD v51[16];
  PCSharedCount v52;
  PCSharedCount v53;
  __n128 v54;
  PCSharedCount v55;
  PCSharedCount v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _BYTE v76[160];
  void *__src;
  _BYTE v78[24];
  PCSharedCount v79;
  void *v80;
  int v81;
  uint64_t v82;
  CGColorSpace *v83;
  std::__shared_weak_count *v84;

  LiRenderingTechnology::getLogLithium((LiRenderingTechnology *)((char *)a2 + 1316));
  FxColorDescription::setDynamicRange(a3, 0);
  BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a2);
  RenderNodeList = HGRenderJob::GetRenderNodeList((HGRenderJob *)a2);
  LiRenderParameters::LiRenderParameters(v78, a3, RenderNodeList, BlendingGamma);
  LiAgent::LiAgent(v76, v78, a4, 0);
  v12 = (LiHe3DEngineNode *)HGObject::operator new(0x2C0uLL);
  LiHe3DEngineNode::LiHe3DEngineNode(v12);
  CGColorSpace = (PCColorSpaceCache *)FxColorDescription::getCGColorSpace(a3);
  *((_QWORD *)v12 + 86) = CGColorSpace;
  *((_QWORD *)v12 + 87) = PCColorSpaceCache::cgRec709Linear(CGColorSpace);
  FileImpl = OZ3DEngineSceneFile::getFileImpl((OZ3DEngineSceneFile *)a1);
  OZ3DEngineSceneFileImpl::readFile(FileImpl);
  v15 = (std::recursive_mutex *)((char *)FileImpl + 8);
  std::recursive_mutex::lock(v15);
  v16 = (Li3DEngineObjectDataBase *)operator new();
  v66 = 0;
  v65 = 0;
  v64 = 1065353216;
  v67 = 1065353216;
  v69 = 0;
  v68 = 0;
  v72 = 0;
  v71 = 0;
  v70 = 1065353216;
  v73 = 1065353216;
  v17 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(v16);
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v17[3];
  v45.n128_u64[1] = 0;
  v46 = 0;
  v45.n128_u64[0] = (unint64_t)&unk_1E64FC250;
  v47 = 0;
  Li3DEngineObjectData::Li3DEngineObjectData((uint64_t)v16, (uint64_t)v15, (__int128 *)&v64, 0, 0, 0, (uint64_t)&v45, 1.0, v18, v19, v20, v21, 1.0);
  std::shared_ptr<Li3DEngineObjectData>::shared_ptr[abi:ne180100]<Li3DEngineObjectData,void>(&v74, (uint64_t)v16);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v45);
  v62 = xmmword_1B304F270;
  v63 = xmmword_1B304F270;
  v61 = xmmword_1B304F270;
  v59 = *(_OWORD *)a2;
  v60 = a2[2];
  OZ3DEngineSceneFile::getSceneVolume((OZ3DEngineSceneFile *)a1, &v61, &v59);
  v22 = v74;
  v23 = v62;
  *(_OWORD *)(v74 + 120) = v61;
  *(_OWORD *)(v22 + 136) = v23;
  *(_OWORD *)(v22 + 152) = v63;
  v24 = operator new();
  v25 = (PC_Sp_counted_base *)v24;
  v57 = v74;
  v58 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  Li3DEngineObject::Li3DEngineObject(v24, &v57);
  v28 = v58;
  if (v58)
  {
    v29 = (unint64_t *)&v58->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v55.var0 = v25;
  PCSharedCount::PCSharedCount(&v56, (PCShared_base *)((char *)v25 + *(_QWORD *)(*(_QWORD *)v25 - 24)));
  LiHe3DEngineNode::setScene((uint64_t)v12, &v55);
  PCSharedCount::~PCSharedCount(&v56);
  OZRenderParams::getROI((OZRenderParams *)a2, (float64x2_t *)&v45);
  v54 = v45;
  LiHe3DEngineNode::setROI((__n128 *)v12, &v54);
  v31 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v31);
  v52.var0 = (PC_Sp_counted_base *)v31;
  PCSharedCount::PCSharedCount(&v53, (LiSimpleCamera *)((char *)v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)));
  if (!v52.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v52.var0 + 168))(v52.var0, a2[160]);
  if (!v52.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v52.var0 + 384))(v52.var0, 0);
  if (!v52.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v52.var0 + 424))(v51);
  if (!v52.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, _QWORD *))(*(_QWORD *)v52.var0 + 432))(v52.var0, v51);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v49, &v52);
  LiHe3DEngineNode::setCamera((uint64_t)v12, &v49, 1);
  PCSharedCount::~PCSharedCount(&v50);
  memmove(__dst, __src, 0x80uLL);
  LiHe3DEngineNode::setPixelTransform((uint64_t)v12, (uint64_t)__dst);
  EnvironmentMap = OZ3DEngineCore::getEnvironmentMap(a1[121], v32);
  LiHe3DEngineNode::setEnvironmentMap((uint64_t)v12, EnvironmentMap);
  EnvironmentMapIntensity = OZ3DEngineCore::getEnvironmentMapIntensity(a1[121], v34);
  LiHe3DEngineNode::setEnvironmentMapIntensity((uint64_t)v12, EnvironmentMapIntensity);
  *a5 = 0;
  OZRenderParams::getROI((OZRenderParams *)a2, (float64x2_t *)&v45);
  v36 = v45.n128_i32[3];
  HGTransform::HGTransform((HGTransform *)&v45);
  HGTransform::LoadIdentity((HGTransform *)&v45);
  HGTransform::Scale((HGTransform *)&v45, 1.0, -1.0, 1.0);
  HGTransform::Translate((HGTransform *)&v45, 0.0, (float)v36, 0.0);
  v37 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v37);
  (*(void (**)(HGXForm *, __n128 *))(*(_QWORD *)v37 + 576))(v37, &v45);
  (*(void (**)(HGXForm *, _QWORD, LiHe3DEngineNode *))(*(_QWORD *)v37 + 120))(v37, 0, v12);
  *a5 = v37;
  (*(void (**)(HGXForm *))(*(_QWORD *)v37 + 16))(v37);
  (*(void (**)(HGXForm *))(*(_QWORD *)v37 + 24))(v37);
  HGTransform::~HGTransform((HGTransform *)&v45);
  PCSharedCount::~PCSharedCount(&v53);
  v38 = v75;
  if (v75)
  {
    v39 = (unint64_t *)&v75->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::recursive_mutex::unlock(v15);
  (*(void (**)(LiHe3DEngineNode *))(*(_QWORD *)v12 + 24))(v12);
  LiAgent::~LiAgent((LiAgent *)v76);
  v41 = v84;
  if (v84)
  {
    v42 = (unint64_t *)&v84->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v83);
  v80 = &unk_1E64FC2F8;
  if (v81 < 0)
    v44 = 1;
  else
    v44 = v81;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v80, 0, v44);
  if (v82)
    MEMORY[0x1B5E2914C](v82, 0x1000C8077774924);
  v82 = 0;
  v81 = 0;
  PCSharedCount::~PCSharedCount(&v79);
}

void sub_1B2E7A7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::recursive_mutex *v10;
  void *v11;
  PCSharedCount *v12;

  HGObject::operator delete(v11);
  HGTransform::~HGTransform((HGTransform *)&a9);
  PCSharedCount::~PCSharedCount(v12);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x278]);
  std::recursive_mutex::unlock(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  LiAgent::~LiAgent((LiAgent *)&STACK[0x288]);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x458]);
  _Unwind_Resume(a1);
}

double OZ3DEngineSceneFile::getSceneVolume(OZ3DEngineSceneFile *a1, _OWORD *a2, __int128 *a3)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  double result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  __int128 v11;

  FileImpl = OZ3DEngineSceneFile::getFileImpl(a1);
  if (FileImpl)
  {
    v8 = *a3;
    v9 = *((_QWORD *)a3 + 2);
    (*(void (**)(_OWORD *__return_ptr, OZ3DEngineSceneFileImplUSDZ *, __int128 *))(*(_QWORD *)FileImpl + 128))(v10, FileImpl, &v8);
    v7 = v10[1];
    *a2 = v10[0];
    a2[1] = v7;
    result = *(double *)&v11;
    a2[2] = v11;
  }
  return result;
}

void `non-virtual thunk to'OZ3DEngineSceneFile::getHeliumGraph(uint64_t a1@<X0>, _QWORD *a2@<X1>, FxColorDescription *a3@<X3>, uint64_t a4@<X4>, HGXForm **a5@<X8>)
{
  OZ3DEngineSceneFile::getHeliumGraph((OZ3DEngineCore **)(a1 - 1576), a2, a3, a4, a5);
}

void OZ3DEngineSceneFileImpl::OZ3DEngineSceneFileImpl(OZ3DEngineSceneFileImpl *this, OZ3DEngineSceneFile *a2, const PCURL *a3)
{
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)this = off_1E6598D10;
  Li3DEngineScene::Li3DEngineScene((OZ3DEngineSceneFileImpl *)((char *)this + 8));
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  PCURL::PCURL((OZ3DEngineSceneFileImpl *)((char *)this + 192), a3);
  *(_OWORD *)((char *)this + 200) = xmmword_1B304F7C0;
  *((_QWORD *)this + 31) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 232) = xmmword_1B304F7C0;
  *(_OWORD *)((char *)this + 216) = xmmword_1B304F7C0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = a2;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 34);
  PCMutex::PCMutex((PCMutex *)((char *)this + 280), 1);
  *((_QWORD *)this + 35) = &unk_1E64E2000;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  *((_QWORD *)this + 22) = v6;
  v7 = (_QWORD *)operator new();
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((_QWORD *)this + 23) = v7;
}

void sub_1B2E7AB18(_Unwind_Exception *a1)
{
  Li3DEngineScene *v1;
  PCURL *v2;
  PCString *v3;

  PCString::~PCString(v3);
  PCURL::~PCURL(v2);
  Li3DEngineScene::~Li3DEngineScene(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(OZ3DEngineSceneFileImpl *this)
{
  std::recursive_mutex *v2;
  uint64_t v3;
  void **v4;
  void **v5;

  *(_QWORD *)this = off_1E6598D10;
  v2 = (std::recursive_mutex *)((char *)this + 8);
  Li3DEngineScene::set((OZ3DEngineSceneFileImpl *)((char *)this + 8), 0);
  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    v5 = (void **)*((_QWORD *)this + 22);
    std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1B5E29170](v3, 0x20C40960023A9);
  }
  *((_QWORD *)this + 22) = 0;
  v4 = (void **)*((_QWORD *)this + 23);
  if (v4)
  {
    if (*v4)
      operator delete(*v4);
    MEMORY[0x1B5E29170](v4, 0x1010C40113C0ABBLL);
  }
  *((_QWORD *)this + 23) = 0;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 280));
  PCString::~PCString((PCString *)this + 34);
  PCURL::~PCURL((OZ3DEngineSceneFileImpl *)((char *)this + 192));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 152, *((PCSharedCount **)this + 20));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 15);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 88, *((id **)this + 12));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 9);
  std::recursive_mutex::~recursive_mutex(v2);
}

void OZ3DEngineSceneFileImpl::setURL(uint64_t **this, const __CFURL **a2)
{
  const void **v4;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;

  v4 = (const void **)(this + 24);
  if (!CFEqual(*a2, this[24]))
  {
    PCURL::operator=(v4, a2);
    ((void (*)(uint64_t **))(*this)[2])(this);
    Li3DEngineScene::set((Li3DEngineScene *)(this + 1), 0);
    v5 = this[22];
    v7 = *v5;
    for (i = v5[1]; i != v7; PCURL::~PCURL((PCURL *)(i - 8)))
      ;
    v5[1] = v7;
    this[23][1] = 0;
    if (*((_DWORD *)this + 64))
      *((_DWORD *)this + 64) = 0;
  }
}

double OZ3DEngineSceneFileImpl::getOriginalFileDurationInSeconds(OZ3DEngineSceneFileImpl *this)
{
  std::recursive_mutex *v2;
  void *Representation;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;

  OZ3DEngineSceneFileImpl::readFile(this);
  v2 = (std::recursive_mutex *)((char *)this + 8);
  std::recursive_mutex::lock(v2);
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)v2);
  v4 = Representation;
  if (Representation)
  {
    v5 = (void *)objc_msgSend(Representation, "attributeForKey:", *MEMORY[0x1E0CD5B70]);
    v6 = (void *)objc_msgSend(v4, "attributeForKey:", *MEMORY[0x1E0CD5B98]);
    objc_msgSend(v5, "doubleValue");
    v8 = v7;
    objc_msgSend(v6, "doubleValue");
    v10 = v8 - v9;
  }
  else
  {
    v10 = 1.0;
  }
  std::recursive_mutex::unlock(v2);
  return v10;
}

void sub_1B2E7ADB8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneFileImpl::getNumPolygons(OZ3DEngineSceneFileImpl *this)
{
  std::recursive_mutex *v2;
  void *Representation;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  OZ3DEngineSceneFileImpl::readFile(this);
  v2 = (std::recursive_mutex *)((char *)this + 8);
  std::recursive_mutex::lock(v2);
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)v2);
  if (Representation
    && (v4 = (void *)objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "childNodesPassingTest:", &__block_literal_global_79), v21 = 0u, v22 = 0u, v19 = 0u, v20 = 0u, (v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16)) != 0))
  {
    v6 = 0;
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v10 = (void *)objc_msgSend((id)objc_msgSend(v9, "geometry", 0), "geometryElements");
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
        if (v11)
        {
          v12 = *(_QWORD *)v16;
          do
          {
            for (j = 0; j != v11; ++j)
            {
              if (*(_QWORD *)v16 != v12)
                objc_enumerationMutation(v10);
              v6 = v6
                 + objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * j), "primitiveCount");
            }
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
          }
          while (v11);
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  std::recursive_mutex::unlock(v2);
  return v6;
}

void sub_1B2E7AF9C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL ___ZN23OZ3DEngineSceneFileImpl14getNumPolygonsEv_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

_QWORD *OZ3DEngineSceneFileImpl::getAssociatedFileURLs@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;

  OZ3DEngineSceneFileImpl::readFile((OZ3DEngineSceneFileImpl *)this);
  v4 = this[22];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<PCURL>::__init_with_size[abi:ne180100]<PCURL*,PCURL*>(a2, *v4, v4[1], (v4[1] - *v4) >> 3);
}

void OZ3DEngineSceneFile::didReadSceneFile(OZ3DEngineSceneFile *this, int a2)
{
  int v3;
  OZChannelBase *v4;
  double OriginalFileDurationInSeconds;
  uint64_t v6;
  OZChannelObjectRootBase *v7;
  OZScene *v8;
  OZ3DEngineSceneElement **v9;
  unint64_t v10;
  __n128 v11;
  CMTimeEpoch v12;
  CMTime v13;
  CMTime v14;

  if (a2)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 216) + 48))(*((_QWORD *)this + 216));
    v4 = (OZChannelBase *)((char *)this + 1600);
    if (v3)
      OZChannelBase::resetFlag(v4, 2, 1);
    else
      OZChannelBase::setFlag(v4, 2, 1);
    OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this);
    if (fabs(OriginalFileDurationInSeconds) >= 0.0000001)
    {
      CMTimeMakeWithSeconds(&v14, OriginalFileDurationInSeconds, 60);
    }
    else
    {
      v6 = *((_QWORD *)this + 121);
      if (v6
        || OZApplication::getCurrentDoc((OZApplication *)theApp)
        && (v6 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0)
      {
        v11 = 0uLL;
        v12 = 0;
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v11);
        *(__n128 *)&v14.value = v11;
        v14.epoch = v12;
      }
    }
    v11 = *(__n128 *)MEMORY[0x1E0CA2E68];
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v13 = v14;
    v7 = (OZChannelObjectRootBase *)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 640))(this);
    OZChannelObjectRootBase::setTimeExtent(v7, (const PCTimeRange *)&v11, objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread") ^ 1);
  }
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this))
  {
    v8 = (OZScene *)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this);
    OZScene::recalcDependencies(v8);
  }
  OZ3DEngineSceneFile::get3DEngineSceneElements(this, (void **)&v11);
  v10 = v11.n128_u64[1];
  v9 = (OZ3DEngineSceneElement **)v11.n128_u64[0];
  if (v11.n128_u64[0] != v11.n128_u64[1])
  {
    do
      OZ3DEngineSceneElement::didReadSceneFile(*v9++);
    while (v9 != (OZ3DEngineSceneElement **)v10);
    v9 = (OZ3DEngineSceneElement **)v11.n128_u64[0];
  }
  if (v9)
  {
    v11.n128_u64[1] = (unint64_t)v9;
    operator delete(v9);
  }
}

void sub_1B2E7B1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double getSceneBoundingBox@<D0>(SCNScene *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float v9[3];
  float v10[3];

  *(_OWORD *)(a2 + 16) = xmmword_1B304F270;
  *(_OWORD *)(a2 + 32) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  -[SCNNode getBoundingBoxMin:max:](-[SCNScene rootNode](a1, "rootNode"), "getBoundingBoxMin:max:", v10, v9);
  result = v10[0];
  v4 = v9[0];
  v5 = v10[1];
  v6 = v9[1];
  v7 = v10[2];
  v8 = v9[2];
  *(double *)a2 = v10[0];
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  *(double *)(a2 + 24) = v6;
  *(double *)(a2 + 32) = v7;
  *(double *)(a2 + 40) = v8;
  return result;
}

uint64_t OZ3DEngineSceneFileImpl::setSCNScenePointerFromFile(const __CFURL **this)
{
  Li3DEngineScene *v2;
  __CFString *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  SCNScene *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float v16[3];
  PCString v17;
  float v18;

  v2 = (Li3DEngineScene *)(this + 1);
  Li3DEngineScene::set((Li3DEngineScene *)(this + 1), 0);
  PCURL::getAsFileSystemString(this + 24, &v17);
  v3 = (__CFString *)PCString::ns_str(&v17);
  PCString::~PCString(&v17);
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v3))
  {
    v4 = (void *)MEMORY[0x1E0C99E98];
    v5 = (uint64_t)v3;
    goto LABEL_7;
  }
  v6 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v7 = -[__CFString rangeOfString:](v3, "rangeOfString:", CFSTR("Motion.app"));
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  result = -[__CFString stringByReplacingCharactersInRange:withString:](v3, "stringByReplacingCharactersInRange:withString:", 0, v7 + v8, objc_msgSend(v6, "bundlePath"));
  if (result)
  {
    v5 = result;
    v4 = (void *)MEMORY[0x1E0C99E98];
LABEL_7:
    result = (uint64_t)LoadSCNSceneFromFile((NSURL *)objc_msgSend(v4, "fileURLWithPath:", v5));
    if (result)
    {
      v10 = (SCNScene *)result;
      objc_msgSend((id)objc_msgSend((id)result, "rootNode"), "getBoundingBoxMin:max:", &v17, v16);
      v11 = v16[0];
      v12 = *((float *)&v17.var0 + 1);
      v13 = v16[1];
      v14 = v18;
      v15 = v16[2];
      *((double *)this + 26) = *(float *)&v17.var0;
      *((double *)this + 27) = v11;
      *((double *)this + 28) = v12;
      *((double *)this + 29) = v13;
      *((double *)this + 30) = v14;
      *((double *)this + 31) = v15;
      Li3DEngineScene::set(v2, v10);
      postProcessLoadedSCNScene((std::recursive_mutex *)v2);
      (*((void (**)(const __CFURL **))*this + 15))(this);
      return 1;
    }
  }
  return result;
}

void sub_1B2E7B3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

void postProcessLoadedSCNScene(std::recursive_mutex *a1)
{
  void *Representation;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  id *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::recursive_mutex::lock(a1);
  v14 = (id *)a1;
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)a1);
  objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "setName:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3A28], "UUID"), "UUIDString"));
  v3 = (void *)objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "childNodesPassingTest:", &__block_literal_global_45);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v20;
    v6 = *MEMORY[0x1E0CD5B18];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v9 = (void *)objc_msgSend((id)objc_msgSend(v8, "geometry"), "materials");
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
        if (v10)
        {
          v11 = *(_QWORD *)v16;
          do
          {
            for (j = 0; j != v10; ++j)
            {
              if (*(_QWORD *)v16 != v11)
                objc_enumerationMutation(v9);
              v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * j);
              objc_msgSend(v13, "setLitPerPixel:", 1);
              objc_msgSend(v13, "setLightingModelName:", v6);
            }
            v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
          }
          while (v10);
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v4);
  }
  Li3DEngineScene::didLoad_NoLock(v14);
  std::recursive_mutex::unlock((std::recursive_mutex *)v14);
}

void sub_1B2E7B5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10)
{
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

__darwin_time_t OZ3DEngineSceneFileImpl::getModificationDate(const __CFURL **this)
{
  char *v2;
  int v3;
  __darwin_time_t tv_sec;
  const __CFURL *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  int v10;
  __darwin_time_t v11;
  PCString v13;
  stat v14;

  PCURL::getFilename(this + 24, &v13);
  v2 = PCString::createUTF8Str(&v13);
  PCString::~PCString(&v13);
  v3 = stat(v2, &v14);
  free(v2);
  if (v3)
    tv_sec = 0;
  else
    tv_sec = v14.st_mtimespec.tv_sec;
  v5 = this[22];
  if (v5)
  {
    v6 = *(_QWORD *)v5;
    if (*((_QWORD *)this[22] + 1) != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        PCURL::getFilename((const __CFURL **)(v6 + v7), &v13);
        v9 = PCString::createUTF8Str(&v13);
        PCString::~PCString(&v13);
        v10 = stat(v9, &v14);
        free(v9);
        v11 = v14.st_mtimespec.tv_sec;
        if (v14.st_mtimespec.tv_sec <= tv_sec)
          v11 = tv_sec;
        if (!v10)
          tv_sec = v11;
        ++v8;
        v6 = *(_QWORD *)this[22];
        v7 += 8;
      }
      while (v8 < (*((_QWORD *)this[22] + 1) - v6) >> 3);
    }
  }
  return tv_sec;
}

void sub_1B2E7B710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

__n128 OZ3DEngineSceneFileImpl::getBoundingBox@<Q0>(OZ3DEngineSceneFileImpl *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __n128 result;

  v3 = *((_OWORD *)this + 14);
  *(_OWORD *)a2 = *((_OWORD *)this + 13);
  *(_OWORD *)(a2 + 16) = v3;
  result = *((__n128 *)this + 15);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t OZ3DEngineSceneFileImpl::updateAssociatedResourcesAvailable(OZ3DEngineSceneFileImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  PCString v12;
  void *__p;
  unint64_t v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  if (*((_QWORD *)this + 22))
  {
    v2 = objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v3 = **((_QWORD **)this + 22);
    if (*(_QWORD *)(*((_QWORD *)this + 22) + 8) != v3)
    {
      v4 = (void *)v2;
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = (void *)MEMORY[0x1E0C99E98];
        PCURL::getAsURLString((const __CFURL **)(v3 + v5), (PCURL *)&v12);
        v8 = (void *)objc_msgSend(v7, "URLWithString:", PCString::ns_str(&v12));
        PCString::~PCString(&v12);
        LOBYTE(v12.var0) = 0;
        LOBYTE(v12.var0) = objc_msgSend(v4, "fileExistsAtPath:", objc_msgSend(v8, "path", v12.var0));
        std::vector<BOOL>::push_back((uint64_t)&__p, &v12);
        ++v6;
        v3 = **((_QWORD **)this + 22);
        v5 += 8;
      }
      while (v6 < (*(_QWORD *)(*((_QWORD *)this + 22) + 8) - v3) >> 3);
    }
  }
  v9 = (void **)*((_QWORD *)this + 23);
  if ((void *)v14 == v9[1])
  {
    if ((std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(__p, 0, (uint64_t)__p + 8 * (v14 >> 6), v14 & 0x3F, *v9) & 1) != 0)
    {
      v10 = 0;
      goto LABEL_10;
    }
    v9 = (void **)*((_QWORD *)this + 23);
  }
  std::vector<BOOL>::operator=(v9, (uint64_t)&__p);
  v10 = 1;
LABEL_10:
  if (__p)
    operator delete(__p);
  return v10;
}

void sub_1B2E7B884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZ3DEngineSceneFileImplOBJ::~OZ3DEngineSceneFileImplOBJ(id *this)
{
  *this = &off_1E6598DD8;

  this[44] = 0;
  this[45] = 0;

  this[46] = 0;
  this[47] = 0;

  this[49] = 0;
  this[48] = 0;
  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl((OZ3DEngineSceneFileImpl *)this);
}

{
  OZ3DEngineSceneFileImplOBJ::~OZ3DEngineSceneFileImplOBJ(this);
  JUMPOUT(0x1B5E29170);
}

void OZ3DEngineSceneFileImplOBJ::dirty(id *this)
{

  this[44] = 0;
  this[45] = 0;

  this[46] = 0;
  this[47] = 0;

  this[49] = 0;
  this[48] = 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsLights(OZ3DEngineSceneFileImplOBJ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsAnimation(OZ3DEngineSceneFileImplOBJ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsLinkedTextures(OZ3DEngineSceneFileImplOBJ *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplOBJ::hasNaturalDuration(OZ3DEngineSceneFileImplOBJ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplOBJ::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplOBJ *this)
{
  return 1;
}

NSString *OZ3DEngineSceneFileImplOBJ::willDoCollectOperation(id *this, NSString *a2)
{

  this[49] = a2;
  return a2;
}

uint64_t OZ3DEngineSceneFileImplOBJ::processLinesInOBJorMTLFile(int a1, const __CFURL **this, int a3, const __CFURL **a4, uint64_t a5)
{
  const __CFString *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  uint64_t v21;
  __CFString *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  PCString v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  PCURL::getAsFileSystemString(this, &v28);
  v23 = (__CFString *)PCString::ns_str(&v28);
  PCString::~PCString(&v28);
  PCURL::getAsFileSystemString(a4, &v28);
  v7 = PCString::ns_str(&v28);
  PCString::~PCString(&v28);
  if (a3)
    v8 = (__CFString *)v7;
  else
    v8 = v23;
  v21 = -[__CFString stringByDeletingLastPathComponent](v8, "stringByDeletingLastPathComponent");
  v28.var0 = 0;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfFile:encoding:error:", v23, 1, &v28);
  if (!v9)
    return 0;
  v10 = (void *)objc_msgSend(v9, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet"));
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (!v11)
    return 1;
  v12 = 0;
  v13 = 0;
  v14 = *(_QWORD *)v25;
LABEL_7:
  v15 = 0;
  while (1)
  {
    if (*(_QWORD *)v25 != v14)
      objc_enumerationMutation(v10);
    v16 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v15);
    v17 = objc_msgSend(v16, "length");
    v18 = objc_msgSend(v16, "rangeOfString:", CFSTR("#"));
    if (v18 != 0x7FFFFFFFFFFFFFFFLL)
      v16 = (void *)objc_msgSend(v16, "substringToIndex:", v18);
    v19 = (void *)objc_msgSend(v16, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet", v18));
    if (objc_msgSend(v19, "length"))
    {
      result = std::function<BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(a5, v21, -[__CFString lastPathComponent](v23, "lastPathComponent"), v12 + (int)v15, v13, (uint64_t)v19);
      if (!(_DWORD)result)
        return result;
    }
    v13 += v17 + 1;
    if (v11 == ++v15)
    {
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      v12 += v15;
      result = 1;
      if (v11)
        goto LABEL_7;
      return result;
    }
  }
}

void sub_1B2E7BC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,PCString a22)
{
  PCString::~PCString(&a22);
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v11 = a3;
  v9 = a5;
  v10 = a4;
  v8 = a6;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, int *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(OZ3DEngineSceneFileImplOBJ *this, int a2)
{
  int v2;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  PCURL **v10;
  PCURL *v11;
  PCURL *v12;
  const __CFURL **v13;
  const __CFURL **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __CFString *v18;
  const __CFURL **v20;
  const __CFURL **v21;
  uint64_t v22;
  uint64_t v23;
  const __CFURL *v24;
  unsigned __int8 v25;
  PCString v26;
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  v25 = a2;
  v4 = (uint64_t *)*((_QWORD *)this + 22);
  v6 = *v4;
  for (i = v4[1]; i != v6; PCURL::~PCURL((PCURL *)(i - 8)))
    ;
  v4[1] = v6;
  PCURL::PCURL((PCURL *)&v24, (OZ3DEngineSceneFileImplOBJ *)((char *)this + 192));

  *((_QWORD *)this + 47) = objc_opt_new();
  *((_QWORD *)this + 48) = objc_opt_new();

  *((_QWORD *)this + 44) = objc_opt_new();
  *((_QWORD *)this + 45) = objc_opt_new();

  v7 = objc_opt_new();
  *((_QWORD *)this + 46) = v7;
  v23 = 0;
  v29[0] = &off_1E6599180;
  v29[1] = this;
  v30 = v29;
  OZ3DEngineSceneFileImplOBJ::processLinesInOBJorMTLFile(v7, &v24, 0, &v24, (uint64_t)v29);
  v8 = v30;
  if (v30 == v29)
  {
    v9 = 4;
    v8 = v29;
    goto LABEL_8;
  }
  if (v30)
  {
    v9 = 5;
LABEL_8:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v10 = (PCURL **)*((_QWORD *)this + 22);
  v11 = *v10;
  v12 = v10[1];
  if (*v10 == v12)
    goto LABEL_19;
  do
  {
    std::vector<PCURL>::push_back[abi:ne180100]((uint64_t *)&v20, v11);
    v11 = (PCURL *)((char *)v11 + 8);
  }
  while (v11 != v12);
  v13 = v20;
  v14 = v21;
  if (v20 == v21)
    goto LABEL_19;
  do
  {
    v28 = 0;
    v15 = operator new(0x28uLL);
    *v15 = &off_1E6599210;
    v15[1] = this;
    v15[2] = &v25;
    v15[3] = (char *)&v23 + 4;
    v15[4] = &v23;
    v28 = v15;
    OZ3DEngineSceneFileImplOBJ::processLinesInOBJorMTLFile((int)v15, v13, 1, &v24, (uint64_t)v27);
    v16 = v28;
    if (v28 == v27)
    {
      v16 = v27;
      v17 = 4;
    }
    else
    {
      if (!v28)
        goto LABEL_17;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_17:
    ++v13;
  }
  while (v13 != v14);
  v2 = v25;
LABEL_19:
  if (v2 && HIDWORD(v23) == (_DWORD)v23 && (int)v23 >= 1)
  {
    PCURL::getAsFileSystemString(&v24, &v26);
    v18 = (__CFString *)PCString::ns_str(&v26);
    PCString::~PCString(&v26);
    -[__CFString lastPathComponent](v18, "lastPathComponent");
  }
  v26.var0 = (__CFString *)&v20;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  PCURL::~PCURL((PCURL *)&v24);
  return 1;
}

void sub_1B2E7BF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, PCString a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a15.var0 = (__CFString *)&a9;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  PCURL::~PCURL((PCURL *)&a13);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFileImplUSDZ::OZ3DEngineSceneFileImplUSDZ(OZ3DEngineSceneFileImplUSDZ *this, OZ3DEngineSceneFile *a2, const PCURL *a3)
{
  uint64_t v4;

  OZ3DEngineSceneFileImpl::OZ3DEngineSceneFileImpl(this, a2, a3);
  *(_QWORD *)v4 = &off_1E6598E80;
  *(_WORD *)(v4 + 356) = 0;
  *(_QWORD *)(v4 + 360) = 0;
  PCMutex::PCMutex((PCMutex *)(v4 + 368), 1);
  *((_QWORD *)this + 46) = &unk_1E64E2000;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 55) = (char *)this + 448;
}

void sub_1B2E7C05C(_Unwind_Exception *a1)
{
  OZ3DEngineSceneFileImpl *v1;

  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFileImplUSDZ::~OZ3DEngineSceneFileImplUSDZ(OZ3DEngineSceneFileImplUSDZ *this)
{
  *(_QWORD *)this = &off_1E6598E80;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 440, *((_QWORD **)this + 56));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 368));
  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(this);
}

{
  OZ3DEngineSceneFileImplUSDZ::~OZ3DEngineSceneFileImplUSDZ(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsLights(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsAnimation(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsLinkedTextures(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 0;
}

BOOL OZ3DEngineSceneFileImplUSDZ::hasNaturalDuration(OZ3DEngineSceneFileImplUSDZ *this)
{
  return fabs((*(double (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)this + 96))(this)) >= 0.0000001;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplUSDZ *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplUSDZ::populateAssociatedURLs(OZ3DEngineSceneFileImplUSDZ *this)
{
  _QWORD *v2;

  if (!*((_QWORD *)this + 22))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    *((_QWORD *)this + 22) = v2;
  }
  return 1;
}

void OZ3DEngineSceneFileImplSCN::~OZ3DEngineSceneFileImplSCN(OZ3DEngineSceneFileImplSCN *this)
{
  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsLights(OZ3DEngineSceneFileImplSCN *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsAnimation(OZ3DEngineSceneFileImplSCN *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsLinkedTextures(OZ3DEngineSceneFileImplSCN *this)
{
  return 0;
}

BOOL OZ3DEngineSceneFileImplSCN::hasNaturalDuration(OZ3DEngineSceneFileImplSCN *this)
{
  return fabs((*(double (**)(OZ3DEngineSceneFileImplSCN *))(*(_QWORD *)this + 96))(this)) >= 0.0000001;
}

uint64_t OZ3DEngineSceneFileImplSCN::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplSCN *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplSCN::populateAssociatedURLs(OZ3DEngineSceneFileImplSCN *this)
{
  _QWORD *v2;

  if (!*((_QWORD *)this + 22))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    *((_QWORD *)this + 22) = v2;
  }
  return 1;
}

void OZ3DEngineSceneFileImplARFace::~OZ3DEngineSceneFileImplARFace(OZ3DEngineSceneFileImplARFace *this)
{
  OZ3DEngineSceneFileImpl::~OZ3DEngineSceneFileImpl(this);
  JUMPOUT(0x1B5E29170);
}

BOOL OZ3DEngineSceneFileImplARFace::setSCNScenePointerFromFile(OZ3DEngineSceneFileImplARFace *this)
{
  Li3DEngineScene *v1;
  SCNScene *v2;
  id v3;

  v1 = (OZ3DEngineSceneFileImplARFace *)((char *)this + 8);
  Li3DEngineScene::set((OZ3DEngineSceneFileImplARFace *)((char *)this + 8), 0);
  v2 = (SCNScene *)objc_alloc_init(MEMORY[0x1E0CD5A10]);
  v3 = objc_alloc_init(MEMORY[0x1E0CD59D0]);
  -[SCNNode addChildNode:](-[SCNScene rootNode](v2, "rootNode"), "addChildNode:", v3);

  if (v2)
  {
    Li3DEngineScene::set(v1, v2);
    postProcessLoadedSCNScene((std::recursive_mutex *)v1);
  }
  return v2 != 0;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsLights(OZ3DEngineSceneFileImplARFace *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsAnimation(OZ3DEngineSceneFileImplARFace *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsLinkedTextures(OZ3DEngineSceneFileImplARFace *this)
{
  return 0;
}

double OZ3DEngineSceneFileImplARFace::getOriginalFileDurationInSeconds(OZ3DEngineSceneFileImplARFace *this)
{
  return -1.0;
}

uint64_t OZ3DEngineSceneFileImplARFace::hasNaturalDuration(OZ3DEngineSceneFileImplARFace *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplARFace::supportsRewritingFilePathsOnCollect(OZ3DEngineSceneFileImplARFace *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFileImplARFace::populateAssociatedURLs(OZ3DEngineSceneFileImplARFace *this)
{
  _QWORD *v2;

  if (!*((_QWORD *)this + 22))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    *((_QWORD *)this + 22) = v2;
  }
  return 1;
}

PCMutex *OZ3DEngineSceneFileImplUSDZ::getBoundingBox@<X0>(PCMutex *this@<X0>, CMTime *a2@<X1>, double *a3@<X8>)
{
  PCMutex *v3;
  double Seconds;
  int v6;
  char *v7;
  char *opaque;
  int v9;
  BOOL v10;
  char **v11;
  unint64_t v12;
  void *v13;
  _OWORD *v14;
  void *i;
  void *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unint64_t v21;
  unint64_t j;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  float64x2_t v28;
  float64x2_t *v29;
  uint64_t k;
  uint64_t v31;
  unint64_t *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  __int128 v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  uint64_t m;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unsigned int *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  int v91;
  unsigned int *v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int *v97;
  int *v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  __int128 *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t n;
  void *v135;
  __int128 v136;
  __int128 v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  uint64_t ii;
  void *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  float v149;
  double *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  double *v154;
  unint64_t v155;
  PCMutex *v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void *__p[3];
  void *v170[3];
  void *v171[3];
  int32x4_t v172;
  int32x4_t v173;
  double v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  void *v181[3];
  int v182;
  PCMutex *v183;
  char v184;
  CMTime time;
  void *v186[2];
  _OWORD v187[7];
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  _OWORD v192[4];
  char v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _BYTE v197[31];
  double *v198;
  _BYTE v199[128];
  char v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _BYTE v204[31];
  double *v205;
  _BYTE v206[128];
  _OWORD v207[8];
  uint64_t v208;

  v3 = this;
  v208 = *MEMORY[0x1E0C80C00];
  if (this[4]._Mutex.__opaque[52] || this[4]._Mutex.__opaque[53])
  {
    time = *a2;
    Seconds = CMTimeGetSeconds(&time);
    v183 = (PCMutex *)((char *)v3 + 368);
    PCMutex::lock((PCMutex *)((char *)v3 + 368));
    v184 = 1;
    v6 = (int)(Seconds / 0.0166666667);
    v182 = v6;
    v7 = *(char **)v3[6]._Mutex.__opaque;
    if (!v7)
      goto LABEL_13;
    opaque = v3[6]._Mutex.__opaque;
    do
    {
      v9 = *((_DWORD *)v7 + 8);
      v10 = v9 < v6;
      if (v9 >= v6)
        v11 = (char **)v7;
      else
        v11 = (char **)(v7 + 8);
      if (!v10)
        opaque = v7;
      v7 = *v11;
    }
    while (*v11);
    if (opaque != v3[6]._Mutex.__opaque && *((_DWORD *)opaque + 8) <= v6)
    {
      v151 = *(_OWORD *)(opaque + 56);
      *(_OWORD *)a3 = *(_OWORD *)(opaque + 40);
      *((_OWORD *)a3 + 1) = v151;
      *((_OWORD *)a3 + 2) = *(_OWORD *)(opaque + 72);
      return (PCMutex *)PCMutex::unlock((PCMutex *)((char *)v3 + 368));
    }
    else
    {
LABEL_13:
      memset(v181, 0, sizeof(v181));
      v180 = 0u;
      v179 = 0u;
      v178 = 0u;
      v177 = 0u;
      v176 = 0u;
      v175 = 0u;
      v174 = Seconds;
      v172 = vdupq_n_s32(0xF149F2CA);
      v173 = vdupq_n_s32(0x7149F2CAu);
      v156 = v3;
      v154 = a3;
      if (v3[4]._Mutex.__opaque[52])
      {
        *(_QWORD *)&v175 = objc_msgSend((id)objc_msgSend(v3[5]._vptr$PCMutex, "childObjectsOfClass:", objc_opt_class()), "objectAtIndexedSubscript:", 0);
        v12 = objc_msgSend((id)objc_msgSend((id)v175, "jointBindTransforms"), "elementCount");
        *((_QWORD *)&v175 + 1) = objc_msgSend((id)v175, "jointPaths");
        std::vector<simd_float4x4>::resize((uint64_t)&v176, v12);
        v13 = (void *)objc_msgSend((id)v175, "jointBindTransforms");
        objc_msgSend(v13, "getFloat4x4Array:maxCount:", (_QWORD)v176, v12);
        v14 = (_OWORD *)MEMORY[0x1E0C83FF0];
        v159 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
        v160 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
        v157 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
        v158 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
        for (i = (void *)v175; i; i = (void *)objc_msgSend(i, "parent"))
        {
          v16 = (void *)objc_msgSend(i, "transform");
          if (v16)
          {
            objc_msgSend(v16, "localTransformAtTime:", Seconds);
            v21 = 0;
            v188 = v160;
            v189 = v159;
            v190 = v158;
            v191 = v157;
            do
            {
              v207[v21 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)((char *)&v188 + v21 * 4))), v18, *(float32x2_t *)&v188.f32[v21], 1), v19, *(float32x4_t *)((char *)&v188 + v21 * 4), 2), v20, *(float32x4_t *)((char *)&v188 + v21 * 4), 3);
              v21 += 4;
            }
            while (v21 != 16);
            v159 = (float32x4_t)v207[1];
            v160 = (float32x4_t)v207[0];
            v157 = (float32x4_t)v207[3];
            v158 = (float32x4_t)v207[2];
          }
        }
        for (j = 0; j < objc_msgSend((id)objc_msgSend(v3[5]._vptr$PCMutex, "animations"), "count"); ++j)
        {
          objc_msgSend((id)objc_msgSend(v3[5]._vptr$PCMutex, "animations"), "objectAtIndexedSubscript:", j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v155 = j;
            v23 = (void *)objc_msgSend((id)objc_msgSend(v156[5]._vptr$PCMutex, "animations"), "objectAtIndexedSubscript:", j);
            if (v23)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                *(_QWORD *)&v179 = objc_msgSend(v23, "jointPaths");
                v24 = objc_msgSend((id)v179, "count");
                v25 = (void *)objc_msgSend(v23, "translations");
                v26 = (void *)objc_msgSend(v23, "rotations");
                v27 = (void *)objc_msgSend(v23, "scales");
                _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2Em(v171, v24);
                std::vector<simd_quatd>::vector(v170, v24);
                _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2Em(__p, v24);
                objc_msgSend(v27, "getDouble3Array:maxCount:atTime:", v171[0], v24, Seconds);
                objc_msgSend(v26, "getDoubleQuaternionArray:maxCount:atTime:", v170[0], v24, Seconds);
                objc_msgSend(v25, "getDouble3Array:maxCount:atTime:", __p[0], v24, Seconds);
                std::vector<simd_float4x4>::resize((uint64_t)&v179 + 8, v24);
                v29 = (float64x2_t *)MEMORY[0x1E0C83FD8];
                if (v24)
                {
                  for (k = 0; k != v24; ++k)
                  {
                    v31 = 0;
                    v32 = (unint64_t *)((char *)v171[0] + 32 * k);
                    v33 = (float64x2_t *)((char *)v170[0] + 32 * k);
                    v35 = *v33;
                    v34 = v33[1];
                    v36 = vmuld_n_f64(v35.f64[0], v35.f64[0]);
                    v37 = vmuld_lane_f64(v35.f64[1], v35, 1);
                    v38 = vmuld_n_f64(v34.f64[0], v34.f64[0]);
                    v39 = vmuld_lane_f64(v34.f64[1], v34, 1);
                    v44.f64[0] = v39 + v36 - v37 - v38;
                    v40 = vmuld_lane_f64(v35.f64[0], v35, 1);
                    v41 = vmuld_lane_f64(v34.f64[0], v34, 1);
                    v42 = vmuld_n_f64(v33->f64[0], v34.f64[0]);
                    v43 = vmuld_lane_f64(v33->f64[1], v34, 1);
                    v44.f64[1] = v40 + v41 + v40 + v41;
                    v45.f64[1] = 0.0;
                    v45.f64[0] = v42 - v43 + v42 - v43;
                    v47.f64[0] = v40 - v41 + v40 - v41;
                    v46 = vmuld_lane_f64(v34.f64[0], *v33, 1);
                    v34.f64[0] = vmuld_lane_f64(v33->f64[0], v34, 1);
                    v47.f64[1] = v39 + v37 - v38 - v36;
                    v48.f64[1] = 0.0;
                    v48.f64[0] = v46 + v34.f64[0] + v46 + v34.f64[0];
                    v49.f64[0] = v42 + v43 + v42 + v43;
                    v49.f64[1] = v46 - v34.f64[0] + v46 - v34.f64[0];
                    v50.f64[1] = 0.0;
                    v50.f64[0] = v38 + v39 - v36 - v37;
                    *(_QWORD *)&v51 = 0;
                    *((_QWORD *)&v51 + 1) = v32[1];
                    *(_QWORD *)&v28.f64[0] = v32[2];
                    v53 = *v29;
                    v52 = v29[1];
                    v55 = v29[2];
                    v54 = v29[3];
                    v57 = v29[4];
                    v56 = v29[5];
                    v58 = (float64x2_t *)((char *)__p[0] + 32 * k);
                    v60 = *v58;
                    v59 = v58[1];
                    *(_OWORD *)v186 = *v32;
                    v187[0] = 0u;
                    v187[1] = v51;
                    memset(&v187[2], 0, 32);
                    v187[4] = v28;
                    v187[5] = 0u;
                    v187[6] = xmmword_1B304EEE0;
                    do
                    {
                      v62 = *(float64x2_t *)&v186[v31];
                      v61 = *(float64x2_t *)&v186[v31 + 2];
                      v28 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v62.f64[0]), v48, v62, 1), v50, v61.f64[0]), (float64x2_t)xmmword_1B304EEE0, v61, 1);
                      v63 = (float64x2_t *)((char *)&v188 + v31 * 8);
                      *v63 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v62.f64[0]), v47, v62, 1), v49, v61.f64[0]), (float64x2_t)0, v61, 1);
                      v63[1] = v28;
                      v31 += 4;
                    }
                    while (v31 != 16);
                    v64 = 0;
                    memset(v207, 0, sizeof(v207));
                    v59.f64[1] = 1.0;
                    do
                    {
                      v66 = *(float64x2_t *)((char *)&v188 + v64 * 16);
                      v65 = *(float64x2_t *)((char *)&v188 + v64 * 16 + 16);
                      v67 = (float64x2_t *)&v207[v64];
                      *v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v66.f64[0]), v55, v66, 1), v57, v65.f64[0]), v60, v65, 1);
                      v67[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v66.f64[0]), v54, v66, 1), v56, v65.f64[0]), v59, v65, 1);
                      v64 += 2;
                    }
                    while (v64 != 8);
                    for (m = 0; m != 4; ++m)
                      v192[m] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v207[2 * m]), (float64x2_t)v207[2 * m + 1]);
                    v69 = v192[1];
                    v70 = v192[2];
                    v71 = v192[3];
                    v72 = (_OWORD *)(*((_QWORD *)&v179 + 1) + (k << 6));
                    *v72 = v192[0];
                    v72[1] = v69;
                    v72[2] = v70;
                    v72[3] = v71;
                  }
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (v170[0])
                {
                  v170[1] = v170[0];
                  operator delete(v170[0]);
                }
                if (v171[0])
                {
                  v171[1] = v171[0];
                  operator delete(v171[0]);
                }
              }
            }
            v74 = *((_QWORD *)&v179 + 1);
            v73 = v180;
            v75 = (void *)v179;
            v76 = (uint64_t)(v180 - *((_QWORD *)&v179 + 1)) >> 6;
            std::vector<simd_float4x4>::resize((uint64_t)v181, v76);
            v186[1] = 0;
            v186[0] = 0;
            *(_QWORD *)&v187[0] = 0;
            if (v73 == v74)
            {
              v82 = 0;
              v92 = 0;
              v96 = 0;
            }
            else
            {
              v77 = 0;
              if (v76 <= 1)
                v78 = 1;
              else
                v78 = v76;
              do
              {
                v79 = objc_msgSend((id)objc_msgSend(v75, "objectAtIndexedSubscript:", v77), "stringByDeletingLastPathComponent");
                v80 = 0;
                while (v77 == v80
                     || (objc_msgSend((id)objc_msgSend(v75, "objectAtIndexedSubscript:", v80), "isEqualToString:", v79) & 1) == 0)
                {
                  if (v78 == ++v80)
                  {
                    LODWORD(v80) = -1;
                    break;
                  }
                }
                v81 = (char *)v186[1];
                if (v186[1] >= (void *)*(_QWORD *)&v187[0])
                {
                  v83 = (char *)v186[0];
                  v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v186[1] - (char *)v186[0]) >> 2);
                  v85 = v84 + 1;
                  if (v84 + 1 > 0x1555555555555555)
                    std::vector<double>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v187[0] - (unint64_t)v186[0]) >> 2) > v85)
                    v85 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v187[0] - (unint64_t)v186[0]) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v187[0] - (unint64_t)v186[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v86 = 0x1555555555555555;
                  else
                    v86 = v85;
                  if (v86)
                  {
                    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Vec3f>>((uint64_t)v187, v86);
                    v81 = (char *)v186[1];
                    v83 = (char *)v186[0];
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v88 = &v87[12 * v84];
                  *(_DWORD *)v88 = v77;
                  *((_DWORD *)v88 + 1) = v80;
                  *((_DWORD *)v88 + 2) = 0;
                  v89 = v88;
                  if (v81 != v83)
                  {
                    do
                    {
                      v90 = *(_QWORD *)(v81 - 12);
                      v81 -= 12;
                      v91 = *((_DWORD *)v81 + 2);
                      *(_QWORD *)(v89 - 12) = v90;
                      v89 -= 12;
                      *((_DWORD *)v89 + 2) = v91;
                    }
                    while (v81 != v83);
                    v83 = (char *)v186[0];
                  }
                  v82 = (unsigned int *)(v88 + 12);
                  v186[0] = v89;
                  v186[1] = v88 + 12;
                  *(_QWORD *)&v187[0] = &v87[12 * v86];
                  if (v83)
                    operator delete(v83);
                }
                else
                {
                  *(_DWORD *)v186[1] = v77;
                  *((_DWORD *)v81 + 1) = v80;
                  v82 = (unsigned int *)(v81 + 12);
                  *((_DWORD *)v81 + 2) = 0;
                }
                v186[1] = v82;
                ++v77;
              }
              while (v77 != v78);
              v92 = (unsigned int *)v186[0];
              v93 = (unsigned int *)v186[0];
              if (v186[0] == v82)
              {
                v96 = 0;
                v92 = v82;
              }
              else
              {
                do
                {
                  v93[2] = 0;
                  v94 = v93[1];
                  if ((v94 & 0x80000000) == 0)
                  {
                    v95 = 0;
                    do
                    {
                      LODWORD(v94) = v92[3 * v94 + 1];
                      ++v95;
                    }
                    while ((v94 & 0x80000000) == 0);
                    v93[2] = v95;
                  }
                  v93 += 3;
                }
                while (v93 != v82);
                v96 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v82 - v92));
              }
            }
            std::__introsort<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *,false>((uint64_t)v92, (unint64_t)v82, v96, 1);
            v97 = (int *)v186[0];
            v98 = (int *)v186[1];
            if (v186[0] != v186[1])
            {
              do
              {
                if (v97[2] < 1)
                {
                  v115 = *v97;
                  v116 = (__int128 *)(*((_QWORD *)&v179 + 1) + (v115 << 6));
                  v117 = (char *)v181[0] + 64 * v115;
                  v118 = *v116;
                  v119 = v116[1];
                  v120 = v116[3];
                  v117[2] = v116[2];
                  v117[3] = v120;
                  *v117 = v118;
                  v117[1] = v119;
                }
                else
                {
                  v99 = 0;
                  v100 = *v97;
                  v101 = (char *)v181[0];
                  v102 = (float32x4_t *)((char *)v181[0] + 64 * (uint64_t)v97[1]);
                  v103 = *v102;
                  v104 = v102[1];
                  v105 = v102[2];
                  v106 = v102[3];
                  v107 = (float32x4_t *)(*((_QWORD *)&v179 + 1) + (v100 << 6));
                  v108 = v107[1];
                  v109 = v107[2];
                  v110 = v107[3];
                  v188 = *v107;
                  v189 = v108;
                  v190 = v109;
                  v191 = v110;
                  do
                  {
                    v207[v99 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v103, COERCE_FLOAT(*(_OWORD *)((char *)&v188 + v99 * 4))), v104, *(float32x2_t *)&v188.f32[v99], 1), v105, *(float32x4_t *)((char *)&v188 + v99 * 4), 2), v106, *(float32x4_t *)((char *)&v188 + v99 * 4), 3);
                    v99 += 4;
                  }
                  while (v99 != 16);
                  v111 = v207[1];
                  v112 = v207[2];
                  v113 = v207[3];
                  v114 = &v101[64 * v100];
                  *(_OWORD *)v114 = v207[0];
                  *((_OWORD *)v114 + 1) = v111;
                  *((_OWORD *)v114 + 2) = v112;
                  *((_OWORD *)v114 + 3) = v113;
                }
                v97 += 3;
              }
              while (v97 != v98);
              v97 = (int *)v186[0];
            }
            if (v97)
            {
              v186[1] = v97;
              operator delete(v97);
            }
            v121 = (char *)v181[0];
            if (v181[1] != v181[0])
            {
              v122 = 0;
              do
              {
                v123 = 0;
                v124 = (float32x4_t *)&v121[64 * v122];
                v125 = v124[1];
                v126 = v124[2];
                v127 = v124[3];
                v188 = *v124;
                v189 = v125;
                v190 = v126;
                v191 = v127;
                do
                {
                  v207[v123 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v160, COERCE_FLOAT(*(_OWORD *)((char *)&v188 + v123 * 4))), v159, *(float32x2_t *)&v188.f32[v123], 1), v158, *(float32x4_t *)((char *)&v188 + v123 * 4), 2), v157, *(float32x4_t *)((char *)&v188 + v123 * 4), 3);
                  v123 += 4;
                }
                while (v123 != 16);
                v128 = (float32x4_t)v207[1];
                v129 = (float32x4_t)v207[2];
                v130 = (float32x4_t)v207[3];
                *v124 = (float32x4_t)v207[0];
                v124[1] = v128;
                v124[2] = v129;
                v124[3] = v130;
                ++v122;
                v121 = (char *)v181[0];
              }
              while (v122 < ((char *)v181[1] - (char *)v181[0]) >> 6);
            }
            std::vector<simd_float4x4>::__assign_with_size[abi:ne180100]<simd_float4x4*,simd_float4x4*>((char *)&v177 + 8, (char *)v176, *((uint64_t *)&v176 + 1), (uint64_t)(*((_QWORD *)&v176 + 1) - v176) >> 6);
            v167 = 0u;
            v168 = 0u;
            v165 = 0u;
            v166 = 0u;
            v131 = v156[5]._vptr$PCMutex;
            v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v165, v206, 16);
            j = v155;
            if (v132)
            {
              v133 = *(_QWORD *)v166;
              do
              {
                for (n = 0; n != v132; ++n)
                {
                  if (*(_QWORD *)v166 != v133)
                    objc_enumerationMutation(v131);
                  v135 = *(void **)(*((_QWORD *)&v165 + 1) + 8 * n);
                  v136 = v14[1];
                  *(_OWORD *)((char *)v207 + 15) = *v14;
                  *(_OWORD *)((char *)&v207[1] + 15) = v136;
                  v137 = v14[3];
                  *(_OWORD *)((char *)&v207[2] + 15) = v14[2];
                  *(_OWORD *)((char *)&v207[3] + 15) = v137;
                  v200 = 1;
                  v203 = v207[2];
                  *(_OWORD *)v204 = v207[3];
                  *(_OWORD *)&v204[15] = v137;
                  v201 = v207[0];
                  v202 = v207[1];
                  v205 = &v174;
                  getBounds(v135, (uint64_t)&v200, (__int128 *)v172.i8);
                }
                v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v165, v206, 16);
              }
              while (v132);
            }
          }
          v3 = v156;
        }
      }
      else if (v3[4]._Mutex.__opaque[53])
      {
        v163 = 0u;
        v164 = 0u;
        v161 = 0u;
        v162 = 0u;
        v138 = v3[5]._vptr$PCMutex;
        v139 = objc_msgSend(v138, "countByEnumeratingWithState:objects:count:", &v161, v199, 16);
        if (v139)
        {
          v140 = *(_QWORD *)v162;
          v141 = (_OWORD *)MEMORY[0x1E0C83FF0];
          do
          {
            for (ii = 0; ii != v139; ++ii)
            {
              if (*(_QWORD *)v162 != v140)
                objc_enumerationMutation(v138);
              v143 = *(void **)(*((_QWORD *)&v161 + 1) + 8 * ii);
              v144 = v141[1];
              *(_OWORD *)((char *)v207 + 15) = *v141;
              *(_OWORD *)((char *)&v207[1] + 15) = v144;
              v145 = v141[3];
              *(_OWORD *)((char *)&v207[2] + 15) = v141[2];
              *(_OWORD *)((char *)&v207[3] + 15) = v145;
              v193 = 0;
              v196 = v207[2];
              *(_OWORD *)v197 = v207[3];
              *(_OWORD *)&v197[15] = v145;
              v194 = v207[0];
              v195 = v207[1];
              v198 = &v174;
              getBounds(v143, (uint64_t)&v193, (__int128 *)v172.i8);
            }
            v139 = objc_msgSend(v138, "countByEnumeratingWithState:objects:count:", &v161, v199, 16);
            v3 = v156;
          }
          while (v139);
        }
      }
      v146 = *(uint64_t *)((char *)v173.i64 + 4);
      v147 = v172.i64[0];
      v148 = *(float *)v173.i32;
      v149 = *(float *)&v172.i32[2];
      *(_QWORD *)&v207[0] = &v182;
      v150 = (double *)std::__tree<std::__value_type<int,PCBox<double>>,std::__map_value_compare<int,std::__value_type<int,PCBox<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCBox<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v3[6]._Mutex, &v182, (uint64_t)&std::piecewise_construct, (_DWORD **)v207);
      v150[5] = v148;
      v150[6] = *(float *)&v147;
      v150[7] = *(float *)&v146;
      v150[8] = *((float *)&v147 + 1);
      v150[9] = *((float *)&v146 + 1);
      v150[10] = v149;
      if (v181[0])
      {
        v181[1] = v181[0];
        operator delete(v181[0]);
      }
      if (*((_QWORD *)&v179 + 1))
      {
        *(_QWORD *)&v180 = *((_QWORD *)&v179 + 1);
        operator delete(*((void **)&v179 + 1));
      }
      if (*((_QWORD *)&v177 + 1))
      {
        *(_QWORD *)&v178 = *((_QWORD *)&v177 + 1);
        operator delete(*((void **)&v177 + 1));
      }
      if ((_QWORD)v176)
      {
        *((_QWORD *)&v176 + 1) = v176;
        operator delete((void *)v176);
      }
      this = v183;
      if (v183 && v184)
        this = (PCMutex *)PCMutex::unlock(v183);
      *v154 = v148;
      v154[1] = *(float *)&v147;
      v154[2] = *(float *)&v146;
      v154[3] = *((float *)&v147 + 1);
      v154[4] = *((float *)&v146 + 1);
      v154[5] = v149;
    }
  }
  else
  {
    v152 = *(_OWORD *)&this[3]._Mutex.__sig;
    v153 = *(_OWORD *)&this[3]._Mutex.__opaque[8];
    *(_OWORD *)a3 = *(_OWORD *)&this[2]._Mutex.__opaque[48];
    *((_OWORD *)a3 + 1) = v152;
    *((_OWORD *)a3 + 2) = v153;
  }
  return this;
}

void sub_1B2E7CFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  SceneInfo::~SceneInfo((SceneInfo *)&a58);
  PCConsoleLock::~PCConsoleLock((PCMutex **)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void std::vector<simd_float4x4>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (a2 << 6);
  }
  else
  {
    std::vector<simd_float4x4>::__append((void **)a1, a2 - v2);
  }
}

void *getBounds(void *a1, uint64_t a2, __int128 *a3)
{
  void *v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  int32x4_t v29;
  __int32 v30;
  int32x4_t v31;
  float *v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  uint64_t i;
  void *v42;
  uint64_t v43;
  void *v44;
  BOOL v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t StringInArray;
  uint64_t v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  int32x4_t v56;
  int32x4_t v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  __int32 v63;
  int32x4_t v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  int32x4_t v69;
  float *v70;
  float v71;
  int32x4_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  float *v76;
  float v77;
  float v78;
  void *result;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  simd_float4x4 *v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  simd_float4x4 *v97;
  float32x4_t *v98;
  simd_float4x4 *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  float32x4_t *v104;
  BOOL v105;
  float32x4_t v106;
  int j;
  float *v108;
  float v109;
  float v110;
  float *v111;
  uint64_t v112;
  __int128 v113;
  float v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  int32x4_t v126;
  uint64_t v127;
  void *v128;
  int32x4_t v129;
  float32x4_t v130;
  int32x4_t v131;
  __int128 v132;
  int32x4_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  float32x4_t v137;
  __int128 v138;
  int32x4_t v139;
  int32x4_t v140;
  float32x4_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int32x4_t v145;
  int32x4_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[3];
  void *v152[3];
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  void *__p[3];
  simd_float4x4 v158;
  _OWORD v159[6];
  _BYTE v160[128];
  uint64_t v161;
  simd_float4x4 v162;

  v161 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(a1, "transform");
  if (v6)
  {
    objc_msgSend(v6, "localTransformAtTime:", **(double **)(a2 + 80));
    v7 = 0;
    v8 = *(float32x4_t *)(a2 + 16);
    v9 = *(float32x4_t *)(a2 + 32);
    v10 = *(float32x4_t *)(a2 + 48);
    v11 = *(float32x4_t *)(a2 + 64);
    v158.columns[0] = v12;
    v158.columns[1] = v13;
    v158.columns[2] = v14;
    v158.columns[3] = v15;
    do
    {
      *(float32x4_t *)((char *)&v153 + v7 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(_OWORD *)&v158.columns[v7])), v9, *(float32x2_t *)v158.columns[v7].f32, 1), v10, (float32x4_t)v158.columns[v7], 2), v11, (float32x4_t)v158.columns[v7], 3);
      ++v7;
    }
    while (v7 != 4);
    v16 = v154;
    v17 = v155;
    v18 = v156;
    *(float32x4_t *)(a2 + 16) = v153;
    *(float32x4_t *)(a2 + 32) = v16;
    *(float32x4_t *)(a2 + 48) = v17;
    *(float32x4_t *)(a2 + 64) = v18;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v19 = objc_msgSend(a1, "vertexCount");
    v20 = (void *)objc_msgSend(a1, "vertexBuffers");
    v21 = (void *)objc_msgSend(a1, "vertexDescriptor");
    v22 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v20, "objectAtIndexedSubscript:", objc_msgSend((id)objc_msgSend(v21, "attributeNamed:", *MEMORY[0x1E0CC7760]), "bufferIndex")), "map"), "bytes");
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEEC2Em(__p, v19);
    if (v19)
    {
      v23 = 0;
      v24 = vdupq_n_s32(0xF149F2CA);
      v25 = vdupq_n_s32(0x7149F2CAu);
      v129 = v25;
      v25.i32[0] = 1.0;
      do
      {
        v26 = 0;
        v27 = v22 + 12 * v23;
        *(_QWORD *)&v28 = *(_QWORD *)v27;
        DWORD2(v28) = *(_DWORD *)(v27 + 8);
        HIDWORD(v28) = 1.0;
        v29 = v129;
        do
        {
          v30 = v29.i32[3];
          v31 = v24;
          v144 = v28;
          v32 = (float *)((unint64_t)&v146 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
          v33 = *(float *)((unint64_t)&v144 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
          v34 = (float *)((unint64_t)&v145 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
          v145 = v29;
          v35 = *v34;
          if (*v34 >= v33)
            v35 = v33;
          *v34 = v35;
          v29 = v145;
          v29.i32[3] = v30;
          v146 = v31;
          v36 = *v32;
          if (v33 >= *v32)
            v36 = v33;
          *v32 = v36;
          v24 = v146;
          v24.i32[3] = v31.i32[3];
          ++v26;
        }
        while (v26 != 3);
        v129 = v29;
        *((_OWORD *)__p[0] + v23++) = v28;
      }
      while (v23 != v19);
    }
    else
    {
      v25 = vdupq_n_s32(0x7149F2CAu);
      v129 = v25;
      v24 = vdupq_n_s32(0xF149F2CA);
    }
    v126 = v24;
    v37 = (void *)objc_msgSend(a1, "componentConformingToProtocol:", &unk_1EF0B6680, *(double *)v25.i64);
    if (!v37)
      goto LABEL_36;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_36;
    v128 = (void *)objc_msgSend(v37, "jointPaths");
    if (!v128 || !objc_msgSend(v128, "count"))
    {
      v40 = (void *)objc_msgSend(v37, "skeleton");
      if (v40)
        v128 = (void *)objc_msgSend(v40, "jointPaths");
    }
    objc_msgSend(v37, "geometryBindTransform");
    for (i = 0; i != 4; ++i)
      v158.columns[i] = (simd_float4)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v153 + 2 * i)), *((float64x2_t *)&v153 + 2 * i + 1));
    if (v128 && *(_BYTE *)a2)
    {
      v121 = (float32x4_t)v158.columns[1];
      v122 = (float32x4_t)v158.columns[0];
      v119 = (float32x4_t)v158.columns[3];
      v120 = (float32x4_t)v158.columns[2];
      v42 = (void *)objc_msgSend(a1, "vertexAttributeDataForAttributeNamed:", *MEMORY[0x1E0CC7738]);
      v43 = objc_msgSend(a1, "vertexAttributeDataForAttributeNamed:", *MEMORY[0x1E0CC7740]);
      v44 = (void *)v43;
      if (v42)
        v45 = v43 == 0;
      else
        v45 = 1;
      if (!v45)
      {
        v46 = objc_msgSend(v42, "format");
        v127 = objc_msgSend(v42, "dataStart");
        v125 = objc_msgSend(v44, "dataStart");
        std::vector<unsigned long>::vector(v152, objc_msgSend(v128, "count"));
        v116 = v19;
        std::vector<unsigned long>::vector(v151, objc_msgSend(v128, "count"));
        v47 = 0;
        v48 = v46 & 0xFFF;
        while (v47 < objc_msgSend(v128, "count"))
        {
          StringInArray = findStringInArray((void *)objc_msgSend(v128, "objectAtIndexedSubscript:", v47), *(void **)(*(_QWORD *)(a2 + 80) + 72));
          *((_QWORD *)v152[0] + v47) = StringInArray;
          if (*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8))
          {
            v50 = findStringInArray((void *)objc_msgSend(v128, "objectAtIndexedSubscript:", v47), (void *)objc_msgSend(*(id *)(*(_QWORD *)(a2 + 80) + 8), "jointPaths"));
            *((_QWORD *)v151[0] + v47) = v50;
          }
          ++v47;
        }
        if (v116)
        {
          v123 = 0;
          v118 = *(_QWORD **)(a2 + 80);
          v88 = (simd_float4x4 *)MEMORY[0x1E0C83FF0];
          v117 = v48;
          do
          {
            if (v48)
            {
              v89 = 0;
              v90 = v123 * v48;
              v91 = 0uLL;
              do
              {
                v130 = v91;
                v92 = *(unsigned __int16 *)(v127 + 2 * (v89 + v90));
                v93 = objc_msgSend(v128, "count");
                v91 = v130;
                if (v93 > v92 && *(float *)(v125 + 4 * (v89 + v90)) != 0.0)
                {
                  v124 = *(float *)(v125 + 4 * (v89 + v90));
                  v94 = *((_QWORD *)v151[0] + v92);
                  v95 = v118[6];
                  v96 = v118[7] - v95;
                  v97 = (simd_float4x4 *)(v95 + (v94 << 6));
                  v98 = (float32x4_t *)v88;
                  if (v94 >= v96 >> 6)
                    v99 = v88;
                  else
                    v99 = v97;
                  v100 = *((_QWORD *)v152[0] + v92);
                  v101 = v118[13];
                  v102 = (v118[14] - v101) >> 6;
                  v162 = __invert_f4(*v99);
                  v103 = 0;
                  v158 = v162;
                  do
                  {
                    *(float32x4_t *)((char *)&v153 + v103 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, COERCE_FLOAT(*(_OWORD *)&v158.columns[v103])), v121, *(float32x2_t *)v158.columns[v103].f32, 1), v120, (float32x4_t)v158.columns[v103], 2), v119, (float32x4_t)v158.columns[v103], 3);
                    ++v103;
                  }
                  while (v103 != 4);
                  v104 = (float32x4_t *)(v101 + (v100 << 6));
                  v105 = v100 >= v102;
                  v88 = (simd_float4x4 *)v98;
                  if (v105)
                    v104 = v98;
                  v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v153, COERCE_FLOAT(*((_OWORD *)__p[0] + v123))), v154, *(float32x2_t *)((char *)__p[0] + 16 * v123), 1), v155, *((float32x4_t *)__p[0] + v123), 2), v156, *((float32x4_t *)__p[0] + v123), 3);
                  v91 = vaddq_f32(v130, vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v104, v106.f32[0]), v104[1], *(float32x2_t *)v106.f32, 1), v104[2], v106, 2), v104[3], v106, 3), v124));
                  v48 = v117;
                }
                ++v89;
              }
              while (v89 != v48);
            }
            else
            {
              v91 = 0uLL;
            }
            for (j = 0; j != 3; ++j)
            {
              v141 = v91;
              v108 = (float *)((unint64_t)&v143 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
              v109 = *(float *)((unint64_t)&v141 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
              v143 = a3[1];
              v110 = *v108;
              if (*v108 >= v109)
                v110 = v109;
              *v108 = v110;
              v111 = (float *)((unint64_t)&v142 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
              v112 = v143;
              *((_DWORD *)a3 + 6) = DWORD2(v143);
              v113 = *a3;
              *((_QWORD *)a3 + 2) = v112;
              v142 = v113;
              v114 = *v111;
              if (v109 >= *v111)
                v114 = v109;
              *v111 = v114;
              v115 = v142;
              *((_DWORD *)a3 + 2) = DWORD2(v142);
              *(_QWORD *)a3 = v115;
            }
            ++v123;
          }
          while (v123 != v116);
        }
        if (v151[0])
        {
          v151[1] = v151[0];
          operator delete(v151[0]);
        }
        if (v152[0])
        {
          v152[1] = v152[0];
          operator delete(v152[0]);
        }
      }
    }
    else
    {
LABEL_36:
      v51 = 0;
      v52 = *(float32x4_t *)(a2 + 16);
      v53 = *(float32x4_t *)(a2 + 32);
      LODWORD(v38) = v129.i32[1];
      LODWORD(v39) = v126.i32[1];
      v54 = *(float32x4_t *)(a2 + 48);
      v55 = *(_OWORD *)(a2 + 64);
      v56 = vdupq_n_s32(0xF149F2CA);
      v57 = vdupq_n_s32(0x7149F2CAu);
      do
      {
        v58 = 0;
        v59 = *(float *)v129.i32;
        if ((v51 & 1) == 0)
          v59 = *(float *)v126.i32;
        if ((v51 & 2) != 0)
          v60 = *(float *)&v129.i32[1];
        else
          v60 = *(float *)&v126.i32[1];
        if ((v51 & 4) != 0)
          v61 = *(float *)&v129.i32[2];
        else
          v61 = *(float *)&v126.i32[2];
        v62 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v52, v59), v53, v60), v54, v61);
        do
        {
          v63 = v57.i32[3];
          v64 = v56;
          v138 = v55;
          v65 = (float *)((unint64_t)&v139 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          v66 = *(float *)((unint64_t)&v138 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          v137 = v62;
          v67 = v66 + *(float *)((unint64_t)&v137 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          v139 = v57;
          v68 = *v65;
          if (*v65 >= v67)
            v68 = v67;
          *v65 = v68;
          v69 = v139;
          v57 = v139;
          v57.i32[3] = v63;
          v70 = (float *)((unint64_t)&v140 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
          v140 = v64;
          v71 = *v70;
          if (v67 >= *v70)
            v71 = v67;
          *v70 = v71;
          v72 = v140;
          v56 = v140;
          v56.i32[3] = v64.i32[3];
          ++v58;
        }
        while (v58 != 3);
        ++v51;
      }
      while (v51 != 8);
      v73 = 0;
      v75 = *a3;
      v74 = a3[1];
      do
      {
        v134 = v74;
        v76 = (float *)((unint64_t)&v131 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        v77 = *(float *)((unint64_t)&v134 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        v133 = v69;
        if (*(float *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3))) < v77)
          v77 = *(float *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        v136 = v38;
        *(float *)((unint64_t)&v136 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3))) = v77;
        v38 = v136;
        v132 = v75;
        v78 = *(float *)((unint64_t)&v132 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
        v131 = v72;
        if (v78 < *v76)
          v78 = *v76;
        v135 = v39;
        *(float *)((unint64_t)&v135 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3))) = v78;
        v39 = v135;
        ++v73;
      }
      while (v73 != 3);
      *((_DWORD *)a3 + 2) = DWORD2(v135);
      *(_QWORD *)a3 = v39;
      *((_DWORD *)a3 + 6) = DWORD2(v38);
      *((_QWORD *)a3 + 2) = v38;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  result = (void *)objc_msgSend(a1, "children");
  if (result)
  {
    result = (void *)objc_msgSend(result, "objects");
    v80 = result;
    if (result)
    {
      v149 = 0u;
      v150 = 0u;
      v147 = 0u;
      v148 = 0u;
      result = (void *)objc_msgSend(result, "countByEnumeratingWithState:objects:count:", &v147, v160, 16);
      v81 = result;
      if (result)
      {
        v82 = *(_QWORD *)v148;
        do
        {
          v83 = 0;
          do
          {
            if (*(_QWORD *)v148 != v82)
              objc_enumerationMutation(v80);
            v84 = *(_QWORD *)(*((_QWORD *)&v147 + 1) + 8 * (_QWORD)v83);
            v85 = *(_OWORD *)(a2 + 48);
            v159[2] = *(_OWORD *)(a2 + 32);
            v159[3] = v85;
            v86 = *(_OWORD *)(a2 + 80);
            v159[4] = *(_OWORD *)(a2 + 64);
            v159[5] = v86;
            v87 = *(_OWORD *)(a2 + 16);
            v159[0] = *(_OWORD *)a2;
            v159[1] = v87;
            getBounds(v84, v159, a3);
            v83 = (char *)v83 + 1;
          }
          while (v81 != v83);
          result = (void *)objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v147, v160, 16);
          v81 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

void sub_1B2E7D99C(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void SceneInfo::~SceneInfo(SceneInfo *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
}

uint64_t OZ3DEngineSceneFileImplUSDZ::postReadMedia(OZ3DEngineSceneFileImplUSDZ *this)
{
  uint64_t v2;
  uint64_t result;
  void *v4;

  v2 = *((_QWORD *)this + 24);
  *((_WORD *)this + 178) = 0;
  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CC7780]), "initWithURL:", v2);
  *((_QWORD *)this + 45) = result;
  if (result)
  {
    result = objc_msgSend((id)result, "count");
    if (result)
    {
      v4 = (void *)objc_msgSend(*((id *)this + 45), "childObjectsOfClass:", objc_opt_class());
      if (v4)
      {
        if (objc_msgSend(v4, "count"))
          *((_BYTE *)this + 356) = 1;
      }
      result = 1;
      *((_BYTE *)this + 357) = 1;
    }
  }
  return result;
}

BOOL ___ZL25postProcessLoadedSCNSceneP15Li3DEngineScene_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v8 + 8))
        {
          v113 = *(_DWORD *)(v8 + 8);
          v107 = *(_QWORD *)v8;
          v45 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)v8 = v45;
          *(_DWORD *)(a2 - 4) = v113;
          *(_QWORD *)(a2 - 12) = v107;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)v8, (uint64_t *)(v8 + 12), (uint64_t *)(a2 - 12));
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v8, v8 + 12, v8 + 24, a2 - 12);
      case 5:
        v46 = (uint64_t *)(v8 + 12);
        v47 = (uint64_t *)(v8 + 24);
        v48 = (uint64_t *)(v8 + 36);
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v8, v8 + 12, v8 + 24, v8 + 36);
        if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v8 + 44))
        {
          v49 = *v48;
          v50 = *(_DWORD *)(v8 + 44);
          v51 = *(_DWORD *)(a2 - 4);
          *v48 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v8 + 44) = v51;
          *(_DWORD *)(a2 - 4) = v50;
          *(_QWORD *)(a2 - 12) = v49;
          if (*(_DWORD *)(v8 + 44) < *(_DWORD *)(v8 + 32))
          {
            v52 = *(_DWORD *)(v8 + 32);
            v53 = *v47;
            *v47 = *v48;
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 44);
            *v48 = v53;
            *(_DWORD *)(v8 + 44) = v52;
            if (*(_DWORD *)(v8 + 32) < *(_DWORD *)(v8 + 20))
            {
              v54 = *(_DWORD *)(v8 + 20);
              v55 = *v46;
              *v46 = *v47;
              *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 32);
              *v47 = v55;
              *(_DWORD *)(v8 + 32) = v54;
              if (*(_DWORD *)(v8 + 20) < *(_DWORD *)(v8 + 8))
              {
                v114 = *(_DWORD *)(v8 + 8);
                v108 = *(_QWORD *)v8;
                *(_QWORD *)v8 = *v46;
                *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 20);
                *v46 = v108;
                *(_DWORD *)(v8 + 20) = v114;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v56 = v8 + 12;
          v58 = v8 == a2 || v56 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = v8;
              do
              {
                v61 = *(_DWORD *)(v60 + 20);
                v62 = *(_DWORD *)(v60 + 8);
                v60 = v56;
                if (v61 < v62)
                {
                  v63 = *(_QWORD *)v56;
                  v64 = v59;
                  while (1)
                  {
                    v65 = v8 + v64;
                    *(_QWORD *)(v65 + 12) = *(_QWORD *)(v8 + v64);
                    *(_DWORD *)(v65 + 20) = *(_DWORD *)(v8 + v64 + 8);
                    if (!v64)
                      break;
                    v64 -= 12;
                    if (v61 >= *(_DWORD *)(v65 - 4))
                    {
                      v66 = v8 + v64 + 12;
                      goto LABEL_80;
                    }
                  }
                  v66 = v8;
LABEL_80:
                  *(_QWORD *)v66 = v63;
                  *(_DWORD *)(v66 + 8) = v61;
                }
                v56 = v60 + 12;
                v59 += 12;
              }
              while (v60 + 12 != a2);
            }
          }
          else if (!v58)
          {
            do
            {
              v99 = *(_DWORD *)(v7 + 20);
              v100 = *(_DWORD *)(v7 + 8);
              v7 = v56;
              if (v99 < v100)
              {
                v101 = *(_QWORD *)v56;
                do
                {
                  v102 = v56;
                  v103 = *(_QWORD *)(v56 - 12);
                  v56 -= 12;
                  *(_QWORD *)v102 = v103;
                  *(_DWORD *)(v102 + 8) = *(_DWORD *)(v102 - 4);
                }
                while (v99 < *(_DWORD *)(v102 - 16));
                *(_QWORD *)v56 = v101;
                *(_DWORD *)(v56 + 8) = v99;
              }
              v56 = v7 + 12;
            }
            while (v7 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (unint64_t)(v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 12 * v70;
                if (2 * v69 + 2 < v10)
                {
                  v72 = *(_DWORD *)(v8 + 12 * v70 + 8);
                  v73 = *(_DWORD *)(v71 + 20);
                  v71 += 12 * (v72 < v73);
                  if (v72 < v73)
                    v70 = 2 * v69 + 2;
                }
                v74 = *(_DWORD *)(v8 + 12 * v69 + 8);
                if (*(_DWORD *)(v71 + 8) >= v74)
                {
                  v75 = v8 + 12 * v69;
                  v76 = *(_QWORD *)v75;
                  do
                  {
                    result = v75;
                    v75 = v71;
                    v77 = *(_QWORD *)v71;
                    *(_DWORD *)(result + 8) = *(_DWORD *)(v75 + 8);
                    *(_QWORD *)result = v77;
                    if (v67 < v70)
                      break;
                    result = (2 * v70) | 1;
                    v71 = v8 + 12 * result;
                    v78 = 2 * v70 + 2;
                    if (v78 < v10)
                    {
                      v79 = *(_DWORD *)(v8 + 12 * result + 8);
                      v80 = *(_DWORD *)(v71 + 20);
                      v71 += 12 * (v79 < v80);
                      if (v79 < v80)
                        result = v78;
                    }
                    v70 = result;
                  }
                  while (*(_DWORD *)(v71 + 8) >= v74);
                  *(_QWORD *)v75 = v76;
                  *(_DWORD *)(v75 + 8) = v74;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v81 = v9 / 0xCuLL;
            do
            {
              v82 = 0;
              v115 = *(_DWORD *)(v8 + 8);
              v109 = *(_QWORD *)v8;
              v83 = v8;
              do
              {
                v84 = v82 + 1;
                v85 = v83 + 12 * (v82 + 1);
                v86 = (2 * v82) | 1;
                v87 = 2 * v82 + 2;
                if (v87 < v81)
                {
                  v88 = *(_DWORD *)(v83 + 12 * v84 + 8);
                  v89 = *(_DWORD *)(v85 + 20);
                  v85 += 12 * (v88 < v89);
                  if (v88 < v89)
                    v86 = v87;
                }
                v90 = *(_QWORD *)v85;
                *(_DWORD *)(v83 + 8) = *(_DWORD *)(v85 + 8);
                *(_QWORD *)v83 = v90;
                v83 = v85;
                v82 = v86;
              }
              while (v86 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
              a2 -= 12;
              if (v85 == a2)
              {
                *(_DWORD *)(v85 + 8) = v115;
                *(_QWORD *)v85 = v109;
              }
              else
              {
                v91 = *(_QWORD *)a2;
                *(_DWORD *)(v85 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v85 = v91;
                *(_DWORD *)(a2 + 8) = v115;
                *(_QWORD *)a2 = v109;
                v92 = v85 - v8 + 12;
                if (v92 >= 13)
                {
                  v93 = (v92 / 0xCuLL - 2) >> 1;
                  v94 = *(_DWORD *)(v85 + 8);
                  if (*(_DWORD *)(v8 + 12 * v93 + 8) < v94)
                  {
                    v95 = *(_QWORD *)v85;
                    do
                    {
                      v96 = v85;
                      v85 = v8 + 12 * v93;
                      v97 = *(_QWORD *)v85;
                      *(_DWORD *)(v96 + 8) = *(_DWORD *)(v85 + 8);
                      *(_QWORD *)v96 = v97;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v8 + 12 * v93 + 8) < v94);
                    *(_QWORD *)v85 = v95;
                    *(_DWORD *)(v85 + 8) = v94;
                  }
                }
              }
            }
            while (v81-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 12 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x601)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)(v7 + 12 * v11), (uint64_t *)v7, (uint64_t *)(a2 - 12));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)v7, (uint64_t *)(v7 + 12 * v11), (uint64_t *)(a2 - 12));
          v13 = 3 * v11;
          v14 = (uint64_t *)(v7 + 12 * v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)(v7 + 12), v14, (uint64_t *)(a2 - 24));
          v15 = (uint64_t *)(v7 + 12 + 4 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)(v7 + 24), v15, (uint64_t *)(a2 - 36));
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v14, (uint64_t *)v12, v15);
          v110 = *(_DWORD *)(v7 + 8);
          v104 = *(_QWORD *)v7;
          v16 = *(_DWORD *)(v12 + 8);
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_DWORD *)(v7 + 8) = v16;
          *(_DWORD *)(v12 + 8) = v110;
          *(_QWORD *)v12 = v104;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_DWORD *)(v7 + 8);
          if (*(_DWORD *)(v7 - 4) < v17)
            goto LABEL_12;
          if (v17 >= *(_DWORD *)(a2 - 4))
          {
            v35 = v7 + 12;
            do
            {
              v8 = v35;
              if (v35 >= a2)
                break;
              v36 = *(_DWORD *)(v35 + 8);
              v35 += 12;
            }
            while (v17 >= v36);
          }
          else
          {
            v33 = v7;
            do
            {
              v8 = v33 + 12;
              v34 = *(_DWORD *)(v33 + 20);
              v33 += 12;
            }
            while (v17 >= v34);
          }
          v37 = a2;
          if (v8 < a2)
          {
            v38 = a2;
            do
            {
              v37 = v38 - 12;
              v39 = *(_DWORD *)(v38 - 4);
              v38 -= 12;
            }
            while (v17 < v39);
          }
          v40 = *(_QWORD *)v7;
          while (v8 < v37)
          {
            v112 = *(_DWORD *)(v8 + 8);
            v106 = *(_QWORD *)v8;
            v41 = *(_QWORD *)v37;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v37 + 8);
            *(_QWORD *)v8 = v41;
            *(_DWORD *)(v37 + 8) = v112;
            *(_QWORD *)v37 = v106;
            do
            {
              v42 = *(_DWORD *)(v8 + 20);
              v8 += 12;
            }
            while (v17 >= v42);
            do
            {
              v43 = *(_DWORD *)(v37 - 4);
              v37 -= 12;
            }
            while (v17 < v43);
          }
          if (v8 - 12 != v7)
          {
            v44 = *(_QWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
            *(_QWORD *)v7 = v44;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 12) = v40;
          *(_DWORD *)(v8 - 4) = v17;
          continue;
        }
        v17 = *(_DWORD *)(v7 + 8);
LABEL_12:
        v18 = 0;
        v19 = *(_QWORD *)v7;
        do
        {
          v20 = *(_DWORD *)(v7 + v18 + 20);
          v18 += 12;
        }
        while (v20 < v17);
        v21 = v7 + v18;
        v22 = a2;
        if (v18 == 12)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 12;
            v26 = *(_DWORD *)(v25 - 4);
            v25 -= 12;
            if (v26 < v17)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 12;
            v24 = *(_DWORD *)(v22 - 4);
            v22 -= 12;
          }
          while (v24 >= v17);
        }
LABEL_22:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v111 = *(_DWORD *)(v8 + 8);
            v105 = *(_QWORD *)v8;
            v28 = *(_QWORD *)v27;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v27 + 8);
            *(_QWORD *)v8 = v28;
            *(_DWORD *)(v27 + 8) = v111;
            *(_QWORD *)v27 = v105;
            do
            {
              v29 = *(_DWORD *)(v8 + 20);
              v8 += 12;
            }
            while (v29 < v17);
            do
            {
              v30 = *(_DWORD *)(v27 - 4);
              v27 -= 12;
            }
            while (v30 >= v17);
          }
          while (v8 < v27);
        }
        if (v8 - 12 != v7)
        {
          v31 = *(_QWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
          *(_QWORD *)v7 = v31;
        }
        *(_QWORD *)(v8 - 12) = v19;
        *(_DWORD *)(v8 - 4) = v17;
        if (v21 < v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *,false>(v7, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v7, v8 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 12;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a3 + 2);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      v8 = *((_DWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_DWORD *)a3 + 2) = v8;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        v11 = *((_DWORD *)result + 2);
        v12 = *result;
        v13 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v13;
        *a2 = v12;
        *((_DWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_DWORD *)result + 2);
      v15 = *result;
      v16 = *((_DWORD *)a2 + 2);
      *result = *a2;
      *((_DWORD *)result + 2) = v16;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v14;
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2))
        return result;
      v5 = *((_DWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_DWORD *)result + 2);
      v6 = *result;
      v7 = *((_DWORD *)a3 + 2);
      *result = *a3;
      *((_DWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_DWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 8))
      {
        v6 = *(_DWORD *)(a1 + 8);
        v7 = *(_QWORD *)a1;
        v8 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      v18 = (uint64_t *)(a1 + 12);
      v19 = (uint64_t *)(a1 + 24);
      v20 = (uint64_t *)(a1 + 36);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(a1, a1 + 12, a1 + 24, a1 + 36);
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 44))
      {
        v21 = *(_DWORD *)(a1 + 44);
        v22 = *v20;
        v23 = *(_DWORD *)(a2 - 4);
        *v20 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 44) = v23;
        *(_QWORD *)(a2 - 12) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        if (*(_DWORD *)(a1 + 44) < *(_DWORD *)(a1 + 32))
        {
          v24 = *(_DWORD *)(a1 + 32);
          v25 = *v19;
          *v19 = *v20;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          *v20 = v25;
          *(_DWORD *)(a1 + 44) = v24;
          if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 20))
          {
            v26 = *(_DWORD *)(a1 + 20);
            v27 = *v18;
            *v18 = *v19;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *v19 = v27;
            *(_DWORD *)(a1 + 32) = v26;
            if (*(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 8))
            {
              v28 = *(_DWORD *)(a1 + 8);
              v29 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *v18;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              *v18 = v29;
              *(_DWORD *)(a1 + 20) = v28;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v10 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_QWORD *)(v16 + 36) = *(_QWORD *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24)
          break;
        v15 -= 12;
        if (v13 >= *(_DWORD *)(v16 + 20))
        {
          v17 = a1 + v15 + 36;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 12 == a2;
    }
    v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,buildHierarchy(NSArray<NSString *> *,std::vector<simd_float4x4> const&,std::vector<simd_float4x4>&)::$_0 &,TopSortElement *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    v9 = *(_DWORD *)(a3 + 8);
    v10 = *(_QWORD *)a3;
    v11 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v11;
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      v12 = *(_DWORD *)(a2 + 8);
      v13 = *(_QWORD *)a2;
      v14 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v14;
      *(_QWORD *)a3 = v13;
      *(_DWORD *)(a3 + 8) = v12;
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)a2 = v16;
        *(_DWORD *)(a2 + 8) = v15;
      }
    }
  }
  return result;
}

uint64_t findStringInArray(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 999999;
  if (objc_msgSend(a2, "count"))
  {
    v5 = 0;
    while ((objc_msgSend(a1, "isEqualToString:", objc_msgSend(a2, "objectAtIndexedSubscript:", v5)) & 1) == 0)
    {
      if (++v5 >= (unint64_t)objc_msgSend(a2, "count"))
        return v4;
    }
    return v5;
  }
  return v4;
}

_QWORD *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B2E7E8A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B2E7E91C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<Li3DEngineObjectData>::shared_ptr[abi:ne180100]<Li3DEngineObjectData,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6599108;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2E7E990(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<Li3DEngineObjectData *,std::shared_ptr<Li3DEngineObjectData>::__shared_ptr_default_delete<Li3DEngineObjectData,Li3DEngineObjectData>,std::allocator<Li3DEngineObjectData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<Li3DEngineObjectData *,std::shared_ptr<Li3DEngineObjectData>::__shared_ptr_default_delete<Li3DEngineObjectData,Li3DEngineObjectData>,std::allocator<Li3DEngineObjectData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::vector<PCURL>::__init_with_size[abi:ne180100]<PCURL*,PCURL*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCURL>,PCURL*,PCURL*,PCURL*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2E7EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PCURL>,PCURL*,PCURL*,PCURL*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      PCURL::PCURL((PCURL *)(a4 + v7), (const PCURL *)(a2 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2E7EAE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      PCURL::~PCURL((PCURL *)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

void std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::~__func()
{
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6599180;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6599180;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(uint64_t a1, NSString **a2, uint64_t a3, unsigned int *a4, unsigned int *a5, id *a6)
{
  NSString *v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __CFString *v18;
  unsigned int v19;
  unint64_t v20;
  __CFString *v21;
  uint64_t result;
  void *v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  char v28[8];

  v6 = *a2;
  v7 = *a4;
  v8 = *a5;
  v9 = *a6;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (void *)objc_msgSend(*a6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet"));
  if (!objc_msgSend(v11, "count"))
  {
    objc_msgSend(v9, "length");
    return 1;
  }
  v12 = (void *)objc_msgSend(v11, "objectAtIndexedSubscript:", 0);
  v13 = objc_msgSend(v9, "length");
  if (!v12)
    return 1;
  v14 = v13;
  if (!objc_msgSend(v12, "isEqualToString:", CFSTR("mtllib")))
    return 1;
  v15 = objc_msgSend(v11, "count");
  if (v15 < 2)
    return 0;
  v16 = v15;
  v26 = v14;
  v27 = v7;
  v17 = v15 - 1;
  v18 = &stru_1E65EDDA0;
  v19 = 2;
  v20 = 1;
  do
  {
    v21 = (__CFString *)-[__CFString stringByAppendingString:](v18, "stringByAppendingString:", objc_msgSend(v11, "objectAtIndexedSubscript:", v20));
    v18 = v21;
    if (v17 > v20)
      v18 = (__CFString *)-[__CFString stringByAppendingString:](v21, "stringByAppendingString:", CFSTR(" "));
    v20 = v19;
  }
  while (v16 > v19++);
  if (!v18)
    return 0;
  result = -[__CFString length](v18, "length");
  if (result)
  {
    v24 = (void *)objc_msgSend((id)AbsoluteNSURL(&v18->isa, v6), "URLByStandardizingPath");
    objc_msgSend(*(id *)(v10 + 376), "setObject:forKeyedSubscript:", objc_msgSend(v24, "path"), v18);
    PCURL::PCURL((PCURL *)v28, v24);
    std::vector<PCURL>::push_back[abi:ne180100](*(uint64_t **)(v10 + 176), (PCURL *)v28);
    objc_msgSend(*(id *)(v10 + 352), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v27));
    v25 = (void *)objc_opt_new();
    objc_msgSend(v25, "setLineByteOffset:", v8);
    objc_msgSend(v25, "setNextLineByteOffset:", v8 + v26 + 1);
    objc_msgSend(*(id *)(v10 + 360), "setObject:forKey:", v25, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v27));

    PCURL::~PCURL((PCURL *)v28);
    return 1;
  }
  return result;
}

void sub_1B2E7EE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_0>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target_type()
{
}

void std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::~__func()
{
  JUMPOUT(0x1B5E29170);
}

__n128 std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E6599210;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6599210;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::operator()(uint64_t a1, NSString **a2, uint64_t *a3, unsigned int *a4, uint64_t a5, id *a6)
{
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t result;
  NSString *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[8];

  v7 = *a2;
  v8 = *a3;
  v9 = *a4;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (void *)objc_msgSend(*a6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet"));
  if (objc_msgSend(v11, "count"))
    v12 = (void *)objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", 0), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\\"), CFSTR("/"));
  else
    v12 = 0;
  if ((unint64_t)objc_msgSend(v11, "count") < 2)
  {
    v13 = 0;
    if (!v12)
      goto LABEL_24;
  }
  else
  {
    v13 = (void *)objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", 1), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\\"), CFSTR("/"));
    if (!v12)
      goto LABEL_24;
  }
  if ((objc_msgSend(v12, "hasPrefix:", CFSTR("map_")) & 1) == 0
    && (objc_msgSend(v12, "hasPrefix:", CFSTR("disp")) & 1) == 0
    && (objc_msgSend(v12, "hasPrefix:", CFSTR("decal")) & 1) == 0
    && (objc_msgSend(v12, "hasPrefix:", CFSTR("bump")) & 1) == 0
    && !objc_msgSend(v12, "hasPrefix:", CFSTR("refl")))
  {
LABEL_24:
    if (!v13 || !objc_msgSend(v13, "hasPrefix:", CFSTR("spectral")))
      return 1;
    if ((unint64_t)objc_msgSend(v11, "count") >= 2)
    {
      result = objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1);
      if (!result)
        return result;
      v20 = (void *)result;
      if ((objc_msgSend((id)objc_msgSend((id)result, "pathExtension"), "isEqualToString:", CFSTR("rfl")) & 1) != 0)
      {
LABEL_31:
        result = objc_msgSend(v20, "length");
        if (!result)
          return result;
        v21 = (void *)objc_msgSend(*(id *)(v10 + 384), "objectForKeyedSubscript:", v8);
        if (!v21)
        {
          v21 = (void *)objc_opt_new();
          objc_msgSend(*(id *)(v10 + 384), "setObject:forKeyedSubscript:", v21, v8);

        }
        v22 = (void *)objc_msgSend((id)AbsoluteNSURL((NSString *)v20, v7), "URLByStandardizingPath");
        v23 = objc_msgSend(v22, "path");
        if (**(_BYTE **)(a1 + 16))
        {
          ++**(_DWORD **)(a1 + 24);
          if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v23) & 1) == 0)
            ++**(_DWORD **)(a1 + 32);
        }
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v23, v20);
        PCURL::PCURL((PCURL *)v24, v22);
        std::vector<PCURL>::push_back[abi:ne180100](*(uint64_t **)(v10 + 176), (PCURL *)v24);
        v19 = (void *)objc_msgSend(*(id *)(v10 + 368), "objectForKeyedSubscript:", v8);
        if (!v19)
        {
          v19 = (void *)objc_opt_new();
          objc_msgSend(*(id *)(v10 + 368), "setObject:forKeyedSubscript:", v19, v8);

        }
        goto LABEL_23;
      }
      if ((unint64_t)objc_msgSend(v11, "count") >= 3)
      {
        result = objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 2);
        v20 = (void *)result;
        if (!result)
          return result;
        goto LABEL_31;
      }
    }
    return 0;
  }
  if ((unint64_t)objc_msgSend(v11, "count") < 2)
    return 0;
  result = objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\\"), CFSTR("/"));
  if (result)
  {
    v15 = (NSString *)result;
    result = objc_msgSend((id)result, "length");
    if (result)
    {
      v16 = (void *)objc_msgSend(*(id *)(v10 + 384), "objectForKeyedSubscript:", v8);
      if (!v16)
      {
        v16 = (void *)objc_opt_new();
        objc_msgSend(*(id *)(v10 + 384), "setObject:forKeyedSubscript:", v16, v8);

      }
      v17 = (void *)objc_msgSend((id)AbsoluteNSURL(v15, v7), "URLByStandardizingPath");
      v18 = objc_msgSend(v17, "path");
      if (**(_BYTE **)(a1 + 16))
      {
        ++**(_DWORD **)(a1 + 24);
        if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v18) & 1) == 0)
          ++**(_DWORD **)(a1 + 32);
      }
      objc_msgSend(v16, "setObject:forKeyedSubscript:", v18, v15);
      PCURL::PCURL((PCURL *)v24, v17);
      std::vector<PCURL>::push_back[abi:ne180100](*(uint64_t **)(v10 + 176), (PCURL *)v24);
      v19 = (void *)objc_msgSend(*(id *)(v10 + 368), "objectForKeyedSubscript:", v8);
      if (!v19)
      {
        v19 = (void *)objc_opt_new();
        objc_msgSend(*(id *)(v10 + 368), "setObject:forKeyedSubscript:", v19, v8);

      }
LABEL_23:
      objc_msgSend(v19, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v9));
      PCURL::~PCURL((PCURL *)v24);
      return 1;
    }
  }
  return result;
}

void sub_1B2E7F390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1,std::allocator<OZ3DEngineSceneFileImplOBJ::populateAssociatedURLs(BOOL)::$_1>,BOOL ()(NSString *,NSString *,unsigned int,unsigned int,NSString *)>::target_type()
{
}

void std::vector<simd_float4x4>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 6;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[64 * v10];
    v15 = &v13[64 * v12];
    bzero(v14, a2 << 6);
    v16 = &v14[64 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 4);
        v20 = *((_OWORD *)v17 - 3);
        v21 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 4) = v19;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1B2E7F560(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<simd_quatd>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1B2E7F5D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<simd_float4x4>::__assign_with_size[abi:ne180100]<simd_float4x4*,simd_float4x4*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 6)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    if (v8 >> 5 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<TXLineMetrics>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 6;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t **std::__tree<std::__value_type<int,PCBox<double>>,std::__map_value_compare<int,std::__value_type<int,PCBox<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCBox<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = xmmword_1B304F270;
    *(_OWORD *)(v11 + 56) = xmmword_1B304F270;
    *(_OWORD *)(v11 + 40) = xmmword_1B304F270;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

OZChannelRef *OZRigEditModeEntry::OZRigEditModeEntry(OZChannelRef *a1, const std::string *a2)
{
  std::string *v4;

  OZChannelRef::OZChannelRef(a1);
  OZChannelRef::operator=(v4, a2);
  *((_QWORD *)a1 + 3) = a2[1].__r_.__value_.__l.__data_;
  return a1;
}

void sub_1B2E7F800(_Unwind_Exception *a1)
{
  void **v1;

  OZChannelRef::~OZChannelRef(v1);
  _Unwind_Resume(a1);
}

std::string *OZRigEditModeEntry::operator=(std::string *a1, const std::string *a2)
{
  OZChannelRef::operator=(a1, a2);
  a1[1].__r_.__value_.__r.__words[0] = a2[1].__r_.__value_.__r.__words[0];
  return a1;
}

void OZRigWidget::OZRigWidget(OZRigWidget *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *v6;
  OZChannelImpl *Instance;
  PCString v8;

  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *v5 = &off_1E6599290;
  v5[2] = &unk_1E6599768;
  v5[6] = &unk_1E65999C0;
  v5[136] = 0;
  PCURL::PCURL((PCURL *)&v8, CFSTR("Rig Widget Options Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1096), &v8, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0);
  PCString::~PCString(&v8);
  *((_QWORD *)this + 155) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  v6 = (OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *)PCString::PCString(&v8, "Hidden");
  Instance = (OZChannelImpl *)OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(v6);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 1248), 0, &v8, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, Instance, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Rig Widget Snapshots"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1400), &v8, (OZChannelFolder *)((char *)this + 448), 0x65u, 2u, 0);
  PCString::~PCString(&v8);
  *((_QWORD *)this + 193) = 0;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((_QWORD *)this + 194) = (char *)this + 1552;
  *((_QWORD *)this + 195) = (char *)this + 1552;
  *((_QWORD *)this + 196) = 0;
  *((_DWORD *)this + 394) = 1;
  *((_BYTE *)this + 1581) = 0;
  *((_QWORD *)this + 198) = (char *)this + 1584;
  *((_QWORD *)this + 199) = (char *)this + 1584;
  *((_QWORD *)this + 200) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1096), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1096));
}

void sub_1B2E7F9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSceneNode *v10;
  OZChannelFolder *v11;
  OZChannel *v12;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZRigWidget::OZRigWidget(OZRigWidget *this, const OZRigWidget *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSceneNode::OZSceneNode(this, a2, a3);
  *(_QWORD *)v5 = &off_1E6599290;
  *(_QWORD *)(v5 + 16) = &unk_1E6599768;
  *(_QWORD *)(v5 + 48) = &unk_1E65999C0;
  v6 = (OZChannelFolder *)(v5 + 448);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1096), (const OZChannelFolder *)((char *)a2 + 1096), (OZChannelFolder *)(v5 + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1248), (const OZChannelBase *)((char *)a2 + 1248), v6);
  *((_QWORD *)this + 156) = &off_1E6551AF8;
  *((_QWORD *)this + 158) = &unk_1E6551E58;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1400), (const OZChannelFolder *)((char *)a2 + 1400), v6);
  *((_QWORD *)this + 193) = 0;
  *(_OWORD *)((char *)this + 1528) = 0u;
  std::list<unsigned int>::list((_QWORD *)this + 194, (uint64_t)a2 + 1552);
  *((_DWORD *)this + 394) = *((_DWORD *)a2 + 394);
  *((_BYTE *)this + 1580) = 0;
  *((_BYTE *)this + 1581) = *((_BYTE *)a2 + 1581);
  *((_QWORD *)this + 198) = (char *)this + 1584;
  *((_QWORD *)this + 199) = (char *)this + 1584;
  *((_QWORD *)this + 200) = 0;
  *((_QWORD *)this + 136) = 0;
  *((_QWORD *)this + 153) = 0;
  *((_QWORD *)this + 155) = 0;
  *((_QWORD *)this + 154) = 0;
  if (*((_QWORD *)a2 + 136))
    OZRigWidget::copyWidget(this, a2);
}

void sub_1B2E7FBB4(_Unwind_Exception *a1)
{
  OZSceneNode *v1;
  OZChannelFolder *v2;
  OZChannel *v3;
  OZChannelFolder *v4;
  _QWORD *v5;
  void **v6;
  void **v7;
  void *v9;

  std::__list_imp<OZRigEditModeEntry>::clear(v6);
  std::__list_imp<unsigned int>::clear(v5);
  v9 = *v7;
  if (*v7)
  {
    *((_QWORD *)v1 + 192) = v9;
    operator delete(v9);
  }
  OZChannelFolder::~OZChannelFolder(v4);
  OZChannel::~OZChannel(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void OZRigWidget::copyWidget(OZRigWidget *this, const OZRigWidget *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  const void *v8;
  OZChannelBase *v9;
  uint64_t v10;
  const void *v11;
  OZChannelBase *v12;
  const OZRigSnapshot **v13;
  const OZRigSnapshot **v14;
  char **v15;
  const OZRigSnapshot *v16;
  OZRigSnapshot *v17;
  OZRigSnapshot **v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  OZRigSnapshot **v26;
  char *v27;
  char *v28;
  OZRigSnapshot *v29;

  v4 = *((_QWORD *)a2 + 153);
  if (v4)
  {
    v5 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
    if (v5)
    *((_QWORD *)this + 153) = v5;
    v6 = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 154) + 248))(*((_QWORD *)a2 + 154));
    if (v6)
    *((_QWORD *)this + 154) = v6;
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1096), *((OZChannelBase **)this + 153));
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1096), *((OZChannelBase **)this + 154));
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 153) + 504))(*((_QWORD *)this + 153), 0, 0);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 154) + 504))(*((_QWORD *)this + 154), 0, 0);
  }
  v7 = *((_QWORD *)a2 + 155);
  if (v7)
  {
    v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 248))(v7);
    if (v8)
    else
      v9 = 0;
    *((_QWORD *)this + 155) = v9;
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1096), v9);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 155) + 504))(*((_QWORD *)this + 155), 0, 0);
  }
  v10 = *((_QWORD *)a2 + 136);
  if (v10)
  {
    v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 248))(v10);
    v12 = v11
    *((_QWORD *)this + 136) = v12;
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 448), v12);
    if (*((_DWORD *)this + 394) != 3)
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 136) + 504))(*((_QWORD *)this + 136), 0, 0);
  }
  OZChannelBase::operator=((uint64_t)this + 1248, (uint64_t)a2 + 1248);
  *((_BYTE *)this + 1581) = *((_BYTE *)a2 + 1581);
  v13 = (const OZRigSnapshot **)*((_QWORD *)a2 + 191);
  v14 = (const OZRigSnapshot **)*((_QWORD *)a2 + 192);
  if (v13 != v14)
  {
    v15 = (char **)((char *)this + 1528);
    do
    {
      v16 = *v13;
      v17 = (OZRigSnapshot *)operator new();
      OZRigSnapshot::OZRigSnapshot(v17, v16, (OZChannelFolder *)((char *)this + 1400));
      v18 = (OZRigSnapshot **)*((_QWORD *)this + 192);
      v19 = *((_QWORD *)this + 193);
      if ((unint64_t)v18 >= v19)
      {
        v21 = ((char *)v18 - *v15) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v22 = v19 - (_QWORD)*v15;
        v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1544, v24);
        else
          v25 = 0;
        v26 = (OZRigSnapshot **)&v25[8 * v21];
        *v26 = v17;
        v20 = v26 + 1;
        v27 = (char *)*((_QWORD *)this + 192);
        v28 = (char *)*((_QWORD *)this + 191);
        if (v27 != v28)
        {
          do
          {
            v29 = (OZRigSnapshot *)*((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v26 = v29;
          }
          while (v27 != v28);
          v27 = *v15;
        }
        *((_QWORD *)this + 191) = v26;
        *((_QWORD *)this + 192) = v20;
        *((_QWORD *)this + 193) = &v25[8 * v24];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v18 = v17;
        v20 = v18 + 1;
      }
      *((_QWORD *)this + 192) = v20;
      ++v13;
    }
    while (v13 != v14);
  }
}

void sub_1B2E7FF00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B2143EACLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::~OZRigWidget(OZRigWidget *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *(_QWORD *)this = &off_1E6599290;
  *((_QWORD *)this + 2) = &unk_1E6599768;
  *((_QWORD *)this + 6) = &unk_1E65999C0;
  v2 = *((_QWORD *)this + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 136) = 0;
  v3 = *((_QWORD *)this + 153);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 153) = 0;
  v4 = *((_QWORD *)this + 154);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 154) = 0;
  v5 = *((_QWORD *)this + 155);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 155) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 191);
  v7 = (_QWORD *)*((_QWORD *)this + 192);
  while (v6 != v7)
  {
    if (*v6)
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 8))(*v6);
    *v6++ = 0;
  }
  std::__list_imp<OZRigEditModeEntry>::clear((void **)this + 198);
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 194);
  v8 = (void *)*((_QWORD *)this + 191);
  if (v8)
  {
    *((_QWORD *)this + 192) = v8;
    operator delete(v8);
  }
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1400));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1248));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1096));
  OZSceneNode::~OZSceneNode(this);
}

{
  OZRigWidget::~OZRigWidget(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZRigWidget::~OZRigWidget(OZRigWidget *this)
{
  OZRigWidget::~OZRigWidget((OZRigWidget *)((char *)this - 16));
}

{
  OZRigWidget::~OZRigWidget((OZRigWidget *)((char *)this - 48));
}

{
  OZRigWidget::~OZRigWidget((OZRigWidget *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRigWidget::~OZRigWidget((OZRigWidget *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

OZRigWidget *OZRigWidget::create(OZRigWidget *this, const PCString *a2, uint64_t a3)
{
  int v3;
  OZRigWidget *SceneNode;
  __int128 v6;

  v3 = (int)a2;
  v6 = xmmword_1B3053B20;
  SceneNode = (OZRigWidget *)OZApplication::createSceneNode(theApp, (unsigned int *)&v6, (uint64_t)this, a3);
  OZRigWidget::setWidgetType(SceneNode, v3);
  return SceneNode;
}

uint64_t OZRigWidget::setWidgetType(OZRigWidget *this, int a2)
{
  uint64_t v4;
  char **v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  const void *v9;
  PCString *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  char **v26;
  const CMTime *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  PCString v75;
  PCString v76;
  PCString v77;
  PCString v78;

  *((_DWORD *)this + 394) = a2;
  OZRigWidget::createValueChannelForType(this, a2);
  switch(a2)
  {
    case 3:
      v11 = operator new();
      OZRigSnapshot::OZRigSnapshot((OZRigSnapshot *)v11, (OZChannelFolder *)((char *)this + 1400), 1u);
      OZChannel::setValue((OZChannel *)(v11 + 136), MEMORY[0x1E0CA2E68], 0.0, 0);
      v5 = (char **)((char *)this + 1528);
      v12 = (uint64_t *)*((_QWORD *)this + 192);
      v13 = *((_QWORD *)this + 193);
      if ((unint64_t)v12 >= v13)
      {
        v15 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          goto LABEL_90;
        v16 = v13 - (_QWORD)*v5;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1544, v18);
        else
          v19 = 0;
        v42 = (uint64_t *)&v19[8 * v15];
        v43 = &v19[8 * v18];
        *v42 = v11;
        v14 = v42 + 1;
        v44 = (char *)*((_QWORD *)this + 192);
        v45 = (char *)*((_QWORD *)this + 191);
        if (v44 != v45)
        {
          do
          {
            v46 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *--v42 = v46;
          }
          while (v44 != v45);
          v44 = *v5;
        }
        *((_QWORD *)this + 191) = v42;
        *((_QWORD *)this + 192) = v14;
        *((_QWORD *)this + 193) = v43;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v12 = v11;
        v14 = v12 + 1;
      }
      *((_QWORD *)this + 192) = v14;
      v47 = operator new();
      OZRigSnapshot::OZRigSnapshot((OZRigSnapshot *)v47, (OZChannelFolder *)((char *)this + 1400), 2u);
      OZChannel::setValue((OZChannel *)(v47 + 136), MEMORY[0x1E0CA2E68], 1.0, 0);
      v48 = (uint64_t *)*((_QWORD *)this + 192);
      v49 = *((_QWORD *)this + 193);
      if ((unint64_t)v48 < v49)
      {
LABEL_68:
        *v48 = v47;
        v61 = v48 + 1;
LABEL_87:
        *((_QWORD *)this + 192) = v61;
        return OZChannel::setValue((OZChannel *)((char *)this + 1248), MEMORY[0x1E0CA2E68], 1.0, 0);
      }
      v50 = ((char *)v48 - *v5) >> 3;
      if (!((unint64_t)(v50 + 1) >> 61))
      {
        v51 = v49 - (_QWORD)*v5;
        v52 = v51 >> 2;
        if (v51 >> 2 <= (unint64_t)(v50 + 1))
          v52 = v50 + 1;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1544, v53);
        else
          v54 = 0;
        v67 = (uint64_t *)&v54[8 * v50];
        v68 = &v54[8 * v53];
        *v67 = v47;
        v61 = v67 + 1;
        v69 = (char *)*((_QWORD *)this + 192);
        v70 = (char *)*((_QWORD *)this + 191);
        if (v69 == v70)
          goto LABEL_85;
        do
        {
          v71 = *((_QWORD *)v69 - 1);
          v69 -= 8;
          *--v67 = v71;
        }
        while (v69 != v70);
        goto LABEL_84;
      }
      goto LABEL_90;
    case 2:
      PCURL::PCURL((PCURL *)&v78, CFSTR("Rig Widget Initial Entry"));
      v9 = (const void *)*((_QWORD *)this + 136);
      if (v9)
      else
        v10 = 0;
      v25 = 0;
      v26 = (char **)((char *)this + 1528);
      v27 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v28 = operator new();
        v29 = v25 + 1;
        OZRigSnapshot::OZRigSnapshot((OZRigSnapshot *)v28, (OZChannelFolder *)((char *)this + 1400), v25 + 1);
        OZChannel::setValue((OZChannel *)(v28 + 136), v27, (double)v25, 0);
        v30 = (uint64_t *)*((_QWORD *)this + 192);
        v31 = *((_QWORD *)this + 193);
        if ((unint64_t)v30 >= v31)
        {
          v33 = ((char *)v30 - *v26) >> 3;
          if ((unint64_t)(v33 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v34 = v31 - (_QWORD)*v26;
          v35 = v34 >> 2;
          if (v34 >> 2 <= (unint64_t)(v33 + 1))
            v35 = v33 + 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1544, v36);
          else
            v37 = 0;
          v38 = (uint64_t *)&v37[8 * v33];
          *v38 = v28;
          v32 = v38 + 1;
          v39 = (char *)*((_QWORD *)this + 192);
          v40 = (char *)*((_QWORD *)this + 191);
          if (v39 != v40)
          {
            do
            {
              v41 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              *--v38 = v41;
            }
            while (v39 != v40);
            v39 = *v26;
          }
          *((_QWORD *)this + 191) = v38;
          *((_QWORD *)this + 192) = v32;
          *((_QWORD *)this + 193) = &v37[8 * v36];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v30 = v28;
          v32 = v30 + 1;
        }
        *((_QWORD *)this + 192) = v32;
        PCString::PCString(&v77, &v78);
        PCString::append(&v77, " ");
        PCString::format((PCString *)(v25 + 1), &v75);
        PCString::PCString(&v76, &v77);
        PCString::append(&v76, &v75);
        PCString::set(&v77, &v76);
        PCString::~PCString(&v76);
        PCString::~PCString(&v75);
        OZChannelEnumWithList::addString(v10, &v77, v25);
        PCString::~PCString(&v77);
        ++v25;
      }
      while (v29 != 3);
      PCString::~PCString(&v78);
      break;
    case 1:
      v4 = operator new();
      OZRigSnapshot::OZRigSnapshot((OZRigSnapshot *)v4, (OZChannelFolder *)((char *)this + 1400), 1u);
      OZChannel::setValue((OZChannel *)(v4 + 136), MEMORY[0x1E0CA2E68], 0.0, 0);
      v5 = (char **)((char *)this + 1528);
      v6 = (uint64_t *)*((_QWORD *)this + 192);
      v7 = *((_QWORD *)this + 193);
      if ((unint64_t)v6 >= v7)
      {
        v20 = ((char *)v6 - *v5) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          goto LABEL_90;
        v21 = v7 - (_QWORD)*v5;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1544, v23);
        else
          v24 = 0;
        v55 = (uint64_t *)&v24[8 * v20];
        v56 = &v24[8 * v23];
        *v55 = v4;
        v8 = v55 + 1;
        v57 = (char *)*((_QWORD *)this + 192);
        v58 = (char *)*((_QWORD *)this + 191);
        if (v57 != v58)
        {
          do
          {
            v59 = *((_QWORD *)v57 - 1);
            v57 -= 8;
            *--v55 = v59;
          }
          while (v57 != v58);
          v57 = *v5;
        }
        *((_QWORD *)this + 191) = v55;
        *((_QWORD *)this + 192) = v8;
        *((_QWORD *)this + 193) = v56;
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v6 = v4;
        v8 = v6 + 1;
      }
      *((_QWORD *)this + 192) = v8;
      v47 = operator new();
      OZRigSnapshot::OZRigSnapshot((OZRigSnapshot *)v47, (OZChannelFolder *)((char *)this + 1400), 2u);
      OZChannel::setValue((OZChannel *)(v47 + 136), MEMORY[0x1E0CA2E68], 1.0, 0);
      v48 = (uint64_t *)*((_QWORD *)this + 192);
      v60 = *((_QWORD *)this + 193);
      if ((unint64_t)v48 < v60)
        goto LABEL_68;
      v62 = ((char *)v48 - *v5) >> 3;
      if (!((unint64_t)(v62 + 1) >> 61))
      {
        v63 = v60 - (_QWORD)*v5;
        v64 = v63 >> 2;
        if (v63 >> 2 <= (unint64_t)(v62 + 1))
          v64 = v62 + 1;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1544, v65);
        else
          v66 = 0;
        v67 = (uint64_t *)&v66[8 * v62];
        v68 = &v66[8 * v65];
        *v67 = v47;
        v61 = v67 + 1;
        v69 = (char *)*((_QWORD *)this + 192);
        v72 = (char *)*((_QWORD *)this + 191);
        if (v69 == v72)
          goto LABEL_85;
        do
        {
          v73 = *((_QWORD *)v69 - 1);
          v69 -= 8;
          *--v67 = v73;
        }
        while (v69 != v72);
LABEL_84:
        v69 = *v5;
LABEL_85:
        *((_QWORD *)this + 191) = v67;
        *((_QWORD *)this + 192) = v61;
        *((_QWORD *)this + 193) = v68;
        if (v69)
          operator delete(v69);
        goto LABEL_87;
      }
LABEL_90:
      std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  return OZChannel::setValue((OZChannel *)((char *)this + 1248), MEMORY[0x1E0CA2E68], 1.0, 0);
}

void sub_1B2E80750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12, PCString a13, PCString a14)
{
  uint64_t v14;

  MEMORY[0x1B5E29170](v14, 0x10F1C40B2143EACLL);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::operator=(uint64_t a1, const void *a2)
{
  const OZRigWidget *v4;
  const OZRigWidget *v5;
  uint64_t v6;
  uint64_t v7;
  OZChannelBase *v8;
  uint64_t v9;
  uint64_t v10;
  OZChannelBase *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;

  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 1088);
  if (v6)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 888))(a1, *(_QWORD *)(a1 + 1088));
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 448), *(OZChannelBase **)(a1 + 1088));
    v7 = *(_QWORD *)(a1 + 1088);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *(_QWORD *)(a1 + 1088) = 0;
  }
  v8 = *(OZChannelBase **)(a1 + 1224);
  if (v8)
  {
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 1096), v8);
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 1096), *(OZChannelBase **)(a1 + 1232));
    v9 = *(_QWORD *)(a1 + 1224);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(a1 + 1224) = 0;
    v10 = *(_QWORD *)(a1 + 1232);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *(_QWORD *)(a1 + 1232) = 0;
  }
  v11 = *(OZChannelBase **)(a1 + 1240);
  if (v11)
  {
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 1096), v11);
    v12 = *(_QWORD *)(a1 + 1240);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *(_QWORD *)(a1 + 1240) = 0;
  }
  v13 = *(_QWORD **)(a1 + 1528);
  v14 = *(_QWORD **)(a1 + 1536);
  if (v13 != v14)
  {
    do
    {
      if (*v13)
        (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 8))(*v13);
      *v13++ = 0;
    }
    while (v13 != v14);
    v13 = *(_QWORD **)(a1 + 1528);
  }
  *(_QWORD *)(a1 + 1536) = v13;
  OZRigWidget::copyWidget((OZRigWidget *)a1, v5);
  result = OZChannel::setValue((OZChannel *)(a1 + 1248), MEMORY[0x1E0CA2E68], 0.0, 0);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 1088))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  }
  return result;
}

uint64_t OZRigWidget::deleteThis(OZRigWidget *this, OZChannelBase *a2)
{
  uint64_t v4;
  OZChannelBase **v5;
  uint64_t *v6;
  const void *Object;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  PCString v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v4 = (*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this);
  v14 = (uint64_t)&v14;
  v15 = &v14;
  v16 = 0;
  if (v4)
  {
    v5 = (OZChannelBase **)v4;
    if ((OZChannelBase *)(*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 640))(this) == a2
      && (OZChannelBase::isObjectRef(v5[198]) & 1) == 0
      && (OZChannelBase::isObjectRef(v5[198]) & 1) == 0
      && &v14 != (uint64_t *)((char *)this + 1552))
    {
      std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>(&v14, *((_QWORD *)this + 195), (uint64_t)this + 1552);
    }
    v6 = v15;
    if (v16 && v15 != &v14)
    {
      do
      {
        Object = (const void *)OZScene::getObject((OZScene *)v5, *((_DWORD *)v6 + 4));
        if (Object)
        {
          if (v8)
          {
            v9 = v8;
            PCSharedCount::PCSharedCount((PCSharedCount *)&v13);
            (*(void (**)(_QWORD *, PCString *, uint64_t))(v9[2] + 176))(v9 + 2, &v13, 2);
            PCString::~PCString(&v13);
            v10 = (*(uint64_t (**)(_QWORD *))(*v9 + 312))(v9);
            (*(void (**)(_QWORD *, uint64_t))(*v9 + 432))(v9, v10);
          }
        }
        v6 = (uint64_t *)v6[1];
      }
      while (v6 != &v14);
    }
  }
  v11 = OZSceneNode::deleteThis(this, a2);
  std::__list_imp<unsigned int>::clear(&v14);
  return v11;
}

void sub_1B2E80B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRigWidget::deleteThis(OZRigWidget *this, OZChannelBase *a2)
{
  return OZRigWidget::deleteThis((OZRigWidget *)((char *)this - 16), a2);
}

uint64_t OZRigWidget::writeBody(OZRigWidget *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZRigWidgetScope);
  v10 = *((unsigned int *)this + 394);
  if ((_DWORD)v10 != 4)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 700);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v10);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 191);
  v12 = (uint64_t *)*((_QWORD *)this + 192);
  while (v11 != v12)
  {
    v13 = *v11++;
    v14 = *(unsigned int *)(v13 + 32);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 701);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v14);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZRigWidget::writeBody(OZRigWidget *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZRigWidget::writeBody((OZRigWidget *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZRigWidget::parseBegin(OZRigWidget *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZSceneNode::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRigWidgetScope);
  return v3;
}

uint64_t `non-virtual thunk to'OZRigWidget::parseBegin(OZRigWidget *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZSceneNode::parseBegin((OZRigWidget *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRigWidgetScope);
  return v3;
}

uint64_t OZRigWidget::parseElement(OZRigWidget *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  unsigned int v7;
  OZRigSnapshot *v8;
  OZRigSnapshot **v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  OZRigSnapshot **v18;
  char *v19;
  char *v20;
  char *v21;
  OZRigSnapshot *v22;
  unsigned int v24;
  unsigned int v25;

  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 701)
  {
    v24 = 0;
    if (PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v24))
    {
      v8 = (OZRigSnapshot *)operator new();
      OZRigSnapshot::OZRigSnapshot(v8, (OZChannelFolder *)((char *)this + 1400), v24);
      v9 = (OZRigSnapshot **)*((_QWORD *)this + 192);
      v10 = *((_QWORD *)this + 193);
      if ((unint64_t)v9 >= v10)
      {
        v12 = *((_QWORD *)this + 191);
        v13 = ((uint64_t)v9 - v12) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v14 = v10 - v12;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1544, v16);
        else
          v17 = 0;
        v18 = (OZRigSnapshot **)&v17[8 * v13];
        v19 = &v17[8 * v16];
        *v18 = v8;
        v11 = v18 + 1;
        v20 = (char *)*((_QWORD *)this + 192);
        v21 = (char *)*((_QWORD *)this + 191);
        if (v20 != v21)
        {
          do
          {
            v22 = (OZRigSnapshot *)*((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v18 = v22;
          }
          while (v20 != v21);
          v20 = (char *)*((_QWORD *)this + 191);
        }
        *((_QWORD *)this + 191) = v18;
        *((_QWORD *)this + 192) = v11;
        *((_QWORD *)this + 193) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v9 = v8;
        v11 = v9 + 1;
      }
      *((_QWORD *)this + 192) = v11;
    }
  }
  else if (v6 == 700)
  {
    v25 = 0;
    if (PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v25))
    {
      v7 = v25;
      *((_DWORD *)this + 394) = v25;
      if (v7 != 4)
        OZRigWidget::createValueChannelForType(this, v7);
    }
  }
  OZSceneNode::parseElement((OZTimeMarkerSet **)this, a2, a3);
  return 1;
}

void sub_1B2E80E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40B2143EACLL);
  _Unwind_Resume(a1);
}

void OZRigWidget::createValueChannelForType(OZRigWidget *this, int a2)
{
  const PCString *Name;
  OZChannelBool *v5;
  OZRigWidget::OZRigWidget_valueDoubleImpl *v6;
  OZRigWidget::OZRigWidget_valueDoubleInfo *Instance;
  OZChannelInfo *v8;
  OZChannelDouble *v9;
  OZRigWidget::OZRigWidget_pSliderMinChanImpl *v10;
  OZChannelImpl *v11;
  OZChannelDouble *v12;
  OZRigWidget::OZRigWidget_pSliderMaxChanImpl *v13;
  OZChannelImpl *v14;
  OZChannelEnumWithList *v15;
  OZChannelEnum *v16;
  OZRigWidget::OZRigWidget_valueAspectRatioImpl *v17;
  OZRigWidget::OZRigWidget_valueAspectRatioInfo *v18;
  OZChannelInfo *v19;
  OZChannelBase *v20;
  PCString v21;
  PCSharedCount v22;
  PCString v23;

  Name = (const PCString *)OZObjectManipulator::getName((OZRigWidget *)((char *)this + 16));
  PCString::PCString(&v23, Name);
  switch(a2)
  {
    case 1:
      v5 = (OZChannelBool *)operator new();
      OZChannelBool::OZChannelBool(v5, 0, &v23, 0, 0x64u, 0, 0, 0);
      *((_QWORD *)this + 136) = v5;
      (*((void (**)(OZChannelBool *, _QWORD, _QWORD))v5->var0 + 63))(v5, 0, 0);
      break;
    case 2:
      v15 = (OZChannelEnumWithList *)operator new();
      PCSharedCount::PCSharedCount(&v22);
      OZChannelEnumWithList::OZChannelEnumWithList(v15, 0, (const PCString *)&v22, &v23, 0, 0x64u, 0);
      PCString::~PCString((PCString *)&v22);
      *((_QWORD *)this + 136) = v15;
      (*(void (**)(OZChannelEnumWithList *, _QWORD, _QWORD))(*(_QWORD *)v15 + 504))(v15, 0, 0);
      v16 = (OZChannelEnum *)operator new();
      PCURL::PCURL((PCURL *)&v22, CFSTR("Rig Widget Initial Value Enum"));
      PCURL::PCURL((PCURL *)&v21, CFSTR("Rig Widget Initial Value"));
      OZChannelEnum::OZChannelEnum(v16, (const PCString *)&v22, &v21, (OZChannelFolder *)((char *)this + 1096), 0x6Au, 0, 0, 0);
      *((_QWORD *)this + 155) = v16;
      PCString::~PCString(&v21);
      PCString::~PCString((PCString *)&v22);
      OZChannelBase::setFlag(*((OZChannelBase **)this + 155), 0x1000000000, 1);
      break;
    case 3:
      v6 = (OZRigWidget::OZRigWidget_valueDoubleImpl *)operator new();
      Instance = (OZRigWidget::OZRigWidget_valueDoubleInfo *)OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(v6);
      v8 = (OZChannelInfo *)OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(Instance);
      OZChannelDouble::OZChannelDouble(v6, 0.0, &v23, 0, 0x64u, 0, (OZChannelImpl *)Instance, v8);
      OZChannelBase::setFlag((OZChannelBase *)v6, 256, 0);
      *((_QWORD *)this + 136) = v6;
      v9 = (OZChannelDouble *)operator new();
      PCURL::PCURL((PCURL *)&v22, CFSTR("Rig Widget Slider Min"));
      v11 = (OZChannelImpl *)OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(v10);
      OZChannelDouble::OZChannelDouble(v9, 0.0, (const PCString *)&v22, (OZChannelFolder *)((char *)this + 1096), 0x68u, 0, v11, 0);
      *((_QWORD *)this + 153) = v9;
      PCString::~PCString((PCString *)&v22);
      OZChannelBase::setFlag(*((OZChannelBase **)this + 153), 0x1000000000, 1);
      v12 = (OZChannelDouble *)operator new();
      PCURL::PCURL((PCURL *)&v22, CFSTR("Rig Widget Slider Max"));
      v14 = (OZChannelImpl *)OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(v13);
      OZChannelDouble::OZChannelDouble(v12, 100.0, (const PCString *)&v22, (OZChannelFolder *)((char *)this + 1096), 0x69u, 0, v14, 0);
      *((_QWORD *)this + 154) = v12;
      PCString::~PCString((PCString *)&v22);
      OZChannelBase::setFlag(*((OZChannelBase **)this + 154), 0x1000000000, 1);
      OZChannelBase::setParameterCtlrClassName(*((OZChannelBase **)this + 153), CFSTR("OZRigSliderMinCtlr"));
      OZChannelBase::setParameterCtlrClassName(*((OZChannelBase **)this + 154), CFSTR("OZRigSliderMaxCtlr"));
      break;
    case 4:
      v17 = (OZRigWidget::OZRigWidget_valueAspectRatioImpl *)operator new();
      v18 = (OZRigWidget::OZRigWidget_valueAspectRatioInfo *)OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(v17);
      v19 = (OZChannelInfo *)OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(v18);
      OZChannelDouble::OZChannelDouble(v17, 1.77777778, &v23, 0, 0x64u, 0, (OZChannelImpl *)v18, v19);
      *((_QWORD *)this + 136) = v17;
      break;
    default:
      break;
  }
  v20 = (OZChannelBase *)*((_QWORD *)this + 136);
  if (v20)
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 448), v20);
  PCString::~PCString(&v23);
}

void sub_1B2E81244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRigWidget::parseElement(OZRigWidget *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZRigWidget::parseElement((OZRigWidget *)((char *)this - 48), a2, a3);
  return 1;
}

uint64_t OZRigWidget::parseEnd(OZChannel **this, PCSerializerReadStream *a2)
{
  const CMTime *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  OZChannel *v9;

  if (*((_DWORD *)this + 394) == 3)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble(this[153], MEMORY[0x1E0CA2E68], 0.0);
    v6 = v5;
    OZChannel::getValueAsDouble(this[154], v4, 0.0);
    v8 = v7;
    OZChannel::setOffset(this[136], v6);
    OZChannel::setScale(this[136], v8 - v6);
    OZChannelBase::setFlag((OZChannelBase *)this[136], 256, 1);
  }
  v9 = this[136];
  if (v9)
    (*((void (**)(OZChannel *, uint64_t, uint64_t))v9->var0 + 13))(v9, 1, 1);
  return OZSceneNode::parseEnd((OZSceneNode *)this, a2);
}

uint64_t `non-virtual thunk to'OZRigWidget::parseEnd(OZChannel **this, PCSerializerReadStream *a2)
{
  return OZRigWidget::parseEnd(this - 6, a2);
}

void OZRigWidget::allowDrag(void **this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  unint64_t v14;
  void *v15;
  const OZChannelBase *v16;
  __int128 v17;

  *a5 = 0;
  v14 = *((_QWORD *)a2 + 1);
  v17 = xmmword_1B3555750;
  if (OZFactory::isKindOfClass(v14, (int32x4_t *)&v17)
    && (OZChannelBase *)(*((uint64_t (**)(void **))*this + 80))(this) == a3)
  {
    if (OZRigWidget::CanRigChannel((unint64_t)v15, v16)
      && v15 != this[136]
      && v15 != this[153]
      && v15 != this[154]
      && v15 != this[155])
    {
      *a5 = a4 & 1;
      *a6 = 1;
    }
  }
  else
  {
    OZSceneNode::allowDrag((OZSceneNode *)this, a2, a3, a4, a5, a6, a7);
  }
}

unint64_t OZRigWidget::CanRigChannel(unint64_t this, const OZChannelBase *a2)
{
  OZRigWidget *v2;
  const OZChannelBase *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t ObjectManipulator;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int isKindOfClass;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (this)
  {
    v2 = (OZRigWidget *)this;
    this = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
    if (this)
    {
      v4 = this;
      v5 = *((_QWORD *)v2 + 1);
      if ((OZRigWidget::IsChannelRigged(v2, v3) & 1) != 0 || OZChannelBase::testFlag((OZChannelBase *)v2, 8))
        return 0;
      v19 = xmmword_1B3555760;
      if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v19) & 1) != 0
        || (v18 = xmmword_1B3054CD0, this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v18), (_DWORD)this))
      {
        v17 = xmmword_1B3555AA0;
        if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v17) & 1) != 0)
          return 0;
        ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)v2);
        this = (*(uint64_t (**)(uint64_t, OZRigWidget *))(*(_QWORD *)ObjectManipulator + 416))(ObjectManipulator, v2);
        if (!(_DWORD)this)
          return this;
        v16 = xmmword_1B3555A00;
        if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v16) & 1) != 0)
          return 0;
        v15 = xmmword_1B3555A10;
        if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v15) & 1) != 0)
          return 0;
        v14 = xmmword_1B3555A20;
        if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v14) & 1) != 0)
          return 0;
        v13 = xmmword_1B35559F0;
        if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v13) & 1) != 0)
          return 0;
        v7 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 256))(v4) + 8);
        v20 = xmmword_1B3053B30;
        if ((OZFactory::isKindOfClass(v7, (int32x4_t *)&v20) & 1) != 0)
          return 0;
        while (1)
        {
          v2 = (OZRigWidget *)*((_QWORD *)v2 + 6);
          if (!v2)
            break;
          v8 = *((_QWORD *)v2 + 1);
          v12 = xmmword_1B3555990;
          if ((OZFactory::isKindOfClass(v8, (int32x4_t *)&v12) & 1) != 0)
            break;
          v9 = *((_QWORD *)v2 + 1);
          v11 = xmmword_1B3555AF0;
          isKindOfClass = OZFactory::isKindOfClass(v9, (int32x4_t *)&v11);
          this = 0;
          if (isKindOfClass)
            return this;
        }
        return 1;
      }
    }
  }
  return this;
}

void `non-virtual thunk to'OZRigWidget::allowDrag(void **this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZRigWidget::allowDrag(this - 2, a2, a3, a4, a5, a6, a7);
}

void OZRigWidget::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRigWidget.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2E816FC()
{
  return 0;
}

void `non-virtual thunk to'OZRigWidget::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRigWidget.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2E81744()
{
  return 0;
}

uint64_t OZRigWidget::performDragOperation(OZRigWidget *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  OZChannelBase *v16;
  uint64_t v18;

  if (lpsrc)
  else
    v16 = 0;
  if ((OZChannelBase *)(*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 640))(this) != a3 || v16 == 0)
    return OZSceneNode::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  OZRigWidget::addChannel(this, v16, 0);
  (*(void (**)(OZRigWidget *))(*(_QWORD *)this + 496))(this);
  v18 = (*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this);
  OZDocument::postNotification(*(OZDocument **)(v18 + 1584), 16);
  return 1;
}

void OZRigWidget::addChannel(OZRigWidget *this, OZChannelBase *a2, const OZChannelBase *a3)
{
  OZChannelBase *v6;
  uint64_t ObjectManipulator;
  uint64_t v8;
  const PCString *v9;
  OZRigBehavior *Behavior;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t *v16;
  uint64_t *v17;
  double v18;
  const CMTime *v19;
  uint64_t v20;
  double v21;
  unsigned int v22;
  const OZChannelBase *v23;
  __int128 v24;

  v6 = *(OZChannelBase **)((*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this) + 1584);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Rig Widget Undo Add Channel"));
  OZChannelBase::setRangeName(v6, (const PCString *)&v24);
  PCString::~PCString((PCString *)&v24);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Rig Widget Undo Add Channel"));
  (*(void (**)(char *, __int128 *, _QWORD))(*((_QWORD *)this + 2) + 176))((char *)this + 16, &v24, 0);
  PCString::~PCString((PCString *)&v24);
  ObjectManipulator = OZChannelBase::getObjectManipulator(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Rig Widget Undo Add Channel"));
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)(v8 + 16) + 176))(v8 + 16, &v24, 0);
  PCString::~PCString((PCString *)&v24);
  OZChannelBase::setRangeName(v6, v9);
  v24 = xmmword_1B3053B30;
  Behavior = (OZRigBehavior *)OZApplication::createBehavior(theApp, (unsigned int *)&v24);
  v11 = *((_DWORD *)Behavior + 20);
  v12 = operator new(0x18uLL);
  v12[4] = v11;
  v13 = *((_QWORD *)this + 194);
  *(_QWORD *)v12 = v13;
  *((_QWORD *)v12 + 1) = (char *)this + 1552;
  *(_QWORD *)(v13 + 8) = v12;
  *((_QWORD *)this + 194) = v12;
  ++*((_QWORD *)this + 196);
  v14 = (*(double (**)(OZRigBehavior *, OZChannelBase *))(*(_QWORD *)Behavior + 224))(Behavior, a2);
  OZRigBehavior::setWidget(Behavior, this, v14);
  OZChannel::getValueAsDouble(*((OZChannel **)this + 136), MEMORY[0x1E0CA2E68], 0.0);
  v16 = (uint64_t *)*((_QWORD *)this + 191);
  v17 = (uint64_t *)*((_QWORD *)this + 192);
  if (v16 != v17)
  {
    v18 = v15;
    v19 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v20 = *v16++;
      OZChannel::getValueAsDouble((OZChannel *)(v20 + 136), v19, 0.0);
      v22 = *(_DWORD *)(v20 + 32);
      if (vabdd_f64(v18, v21) >= 0.0000001)
        v23 = a3;
      else
        v23 = 0;
      OZRigBehavior::createDefaultSnapshot(Behavior, v22, v23);
    }
    while (v16 != v17);
  }
}

void sub_1B2E81A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRigWidget::performDragOperation(OZRigWidget *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZRigWidget::performDragOperation((OZRigWidget *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

OZScene *OZRigWidget::dirty(OZRigWidget *this)
{
  OZScene *result;
  uint64_t v3;
  OZScene *v4;
  OZScene *v5;
  uint64_t v6;

  OZSceneNode::dirty(this);
  result = (OZScene *)(*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this);
  if (result)
  {
    v3 = *((_QWORD *)this + 195);
    if ((OZRigWidget *)v3 != (OZRigWidget *)((char *)this + 1552))
    {
      v4 = result;
      do
      {
        result = (OZScene *)OZScene::getObject(v4, *(_DWORD *)(v3 + 16));
        if (result)
        {
          if (result)
          {
            v5 = result;
            (*(void (**)(OZScene *))(*(_QWORD *)result + 352))(result);
            result = (OZScene *)(*(uint64_t (**)(OZScene *))(*(_QWORD *)v5 + 320))(v5);
            if (result)
            {
              v6 = (*(uint64_t (**)(OZScene *))(*(_QWORD *)v5 + 320))(v5);
              result = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 496))(v6);
            }
          }
        }
        v3 = *(_QWORD *)(v3 + 8);
      }
      while ((OZRigWidget *)v3 != (OZRigWidget *)((char *)this + 1552));
    }
  }
  return result;
}

OZScene *`non-virtual thunk to'OZRigWidget::dirty(OZRigWidget *this)
{
  return OZRigWidget::dirty((OZRigWidget *)((char *)this - 16));
}

uint64_t OZRigWidget::didAddToScene(OZRigWidget *this, OZScene *a2)
{
  uint64_t result;

  OZSceneNode::didAddToScene(this, a2);
  result = *((_QWORD *)this + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, 1, 1);
  return result;
}

uint64_t OZRigWidget::willRemoveFromScene(OZChannelBase *this, OZScene *a2)
{
  uint64_t result;
  const PCString *v5;

  result = OZSceneNode::willRemoveFromScene((uint64_t)this, (uint64_t)a2);
  if (*(OZChannelBase **)(*((_QWORD *)a2 + 198) + 288) == this)
    return OZChannelBase::setRangeName(this, v5);
  return result;
}

void OZRigWidget::didUndoLastChange(OZRigWidget *this)
{
  uint64_t v2;

  OZSceneNode::didUndoLastChange((uint64_t)this);
  v2 = (*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this);
  OZDocument::postNotification(*(OZDocument **)(v2 + 1584), 0x80000);
}

void OZRigWidget::setName(OZRigWidget *this, const PCString *a2, int a3)
{
  uint64_t v6;
  PCSharedCount v7;

  OZObjectManipulator::setName((OZRigWidget *)((char *)this + 16), a2, a3);
  if (a3)
  {
    v6 = *((_QWORD *)this + 136);
    PCSharedCount::PCSharedCount(&v7);
    (*(void (**)(uint64_t, PCSharedCount *))(*(_QWORD *)v6 + 344))(v6, &v7);
    PCString::~PCString((PCString *)&v7);
  }
  OZChannelBase::setName(*((OZChannelBase **)this + 136), a2, 0);
}

void sub_1B2E81CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRigWidget::setName(OZRigWidget *this, const PCString *a2, int a3)
{
  OZRigWidget::setName((OZRigWidget *)((char *)this - 16), a2, a3);
}

BOOL OZRigWidget::canRigChannel(const OZChannelBase **this, OZChannelBase *a2)
{
  OZChannelBase *v4;

  v4 = (OZChannelBase *)((uint64_t (*)(const OZChannelBase **))(*this)[5].var10)(this);
  return !OZChannelBase::isDescendantOf(a2, v4) || this[136] == a2;
}

BOOL `non-virtual thunk to'OZRigWidget::canRigChannel(OZRigWidget *this, OZChannelBase *a2)
{
  OZChannelBase *v4;

  v4 = (OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this - 2) + 640))((char *)this - 16);
  return !OZChannelBase::isDescendantOf(a2, v4) || *((OZChannelBase **)this + 134) == a2;
}

void OZRigWidget::getIconName(OZRigWidget *this@<X0>, PCURL *a2@<X8>)
{
  unsigned int v4;

  PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconColor-RigSlider"));
  v4 = *((_DWORD *)this + 394) - 1;
  if (v4 < 3)
    PCString::set((PCString *)a2, off_1E6599D68[v4]);
}

void sub_1B2E81DC0(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZRigWidget::getIconNameBW(OZRigWidget *this@<X0>, PCURL *a2@<X8>)
{
  unsigned int v4;

  PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconGrey-RigSlider"));
  v4 = *((_DWORD *)this + 394) - 1;
  if (v4 < 3)
    PCString::set((PCString *)a2, off_1E6599D80[v4]);
}

void sub_1B2E81E28(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::getIconID(OZRigWidget *this)
{
  int v1;
  unsigned int v2;

  v1 = *((_DWORD *)this + 394);
  if (v1 == 2)
    v2 = 33;
  else
    v2 = 32;
  if (v1 == 1)
    return 34;
  else
    return v2;
}

void OZRigWidget::getSnapshotIDsForValue(OZRigWidget *this, double a2, unsigned int *a3, unsigned int *a4, double *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  const CMTime *v17;
  uint64_t v18;
  double v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  double v23;
  uint64_t *v24;
  const CMTime *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const CMTime *v32;
  uint64_t v33;
  double v34;
  BOOL v36;
  double v37;
  double v38;
  const CMTime *v39;
  double v40;
  double v41;
  double v42;
  unsigned int v43;
  double v44;
  const CMTime *v45;
  double v46;
  double v47;
  double v48;
  double __y;

  *a3 = 0;
  *a4 = 0;
  *a5 = 0.0;
  switch(*((_DWORD *)this + 394))
  {
    case 1:
      __y = 0.0;
      modf(a2, &__y);
      v14 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 191) + 8 * __y) + 32);
      goto LABEL_38;
    case 2:
      v15 = (uint64_t *)*((_QWORD *)this + 191);
      v16 = (uint64_t *)*((_QWORD *)this + 192);
      if (v15 == v16)
        return;
      v17 = (const CMTime *)MEMORY[0x1E0CA2E68];
      while (1)
      {
        v18 = *v15;
        OZChannel::getValueAsDouble((OZChannel *)(*v15 + 136), v17, 0.0);
        if (vabdd_f64(v19, a2) < 0.0000001)
          break;
        if (++v15 == v16)
          return;
      }
LABEL_28:
      v14 = *(_DWORD *)(v18 + 32);
      goto LABEL_38;
    case 3:
      v20 = (uint64_t *)*((_QWORD *)this + 191);
      v21 = (uint64_t *)*((_QWORD *)this + 192);
      if (v20 == v21)
        return;
      v22 = *v20;
      OZChannel::getValueAsDouble((OZChannel *)(*v20 + 136), MEMORY[0x1E0CA2E68], 0.0);
      if (v23 >= a2)
      {
        v26 = 0;
LABEL_30:
        if (!v26)
          goto LABEL_34;
        goto LABEL_31;
      }
      v24 = v20 + 1;
      v25 = (const CMTime *)MEMORY[0x1E0CA2E68];
      while (1)
      {
        v26 = v22;
        if (v24 == v21)
          break;
        v27 = *v24++;
        v22 = v27;
        OZChannel::getValueAsDouble((OZChannel *)(v27 + 136), v25, 0.0);
        if (v28 >= a2)
          goto LABEL_30;
      }
      v22 = 0;
      if (!v26)
        goto LABEL_34;
LABEL_31:
      if (!v22)
      {
        v14 = *(_DWORD *)(v26 + 32);
        goto LABEL_38;
      }
LABEL_34:
      if (v22)
      {
        if (v26
          && (OZChannel::getValueAsDouble((OZChannel *)(v22 + 136), MEMORY[0x1E0CA2E68], 0.0),
              vabdd_f64(v38, a2) >= 0.0000001))
        {
          v45 = (const CMTime *)MEMORY[0x1E0CA2E68];
          OZChannel::getValueAsDouble((OZChannel *)(v26 + 136), MEMORY[0x1E0CA2E68], 0.0);
          v47 = v46;
          OZChannel::getValueAsDouble((OZChannel *)(v22 + 136), v45, 0.0);
          v44 = OZRigSnapshot::applyInterpolation((OZRigSnapshot *)v26, (a2 - v47) / (v48 - v47));
          *a3 = *(_DWORD *)(v26 + 32);
          v43 = *(_DWORD *)(v22 + 32);
LABEL_42:
          *a4 = v43;
          *a5 = v44;
        }
        else
        {
          v14 = *(_DWORD *)(v22 + 32);
LABEL_38:
          *a3 = v14;
          *a5 = 0.0;
        }
      }
      return;
    case 4:
      v29 = *((_QWORD *)this + 191);
      v30 = *((_QWORD *)this + 192);
      if (v29 == v30)
        return;
      v18 = 0;
      v31 = v29 + 8;
      v32 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v33 = v18;
        v18 = *(_QWORD *)(v31 - 8);
        OZChannel::getValueAsDouble((OZChannel *)(v18 + 136), v32, 0.0);
        v36 = v34 >= a2 && v33 != 0 || v31 == v30;
        v31 += 8;
      }
      while (!v36);
      if (!v18)
        return;
      if (!v33)
        goto LABEL_28;
      OZChannel::getValueAsDouble((OZChannel *)(v18 + 136), MEMORY[0x1E0CA2E68], 0.0);
      if (vabdd_f64(v37, a2) < 0.0000001)
        goto LABEL_28;
      v39 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::getValueAsDouble((OZChannel *)(v33 + 136), MEMORY[0x1E0CA2E68], 0.0);
      v41 = v40;
      OZChannel::getValueAsDouble((OZChannel *)(v18 + 136), v39, 0.0);
      *a3 = *(_DWORD *)(v33 + 32);
      v43 = *(_DWORD *)(v18 + 32);
      v44 = (a2 - v41) / (v42 - v41);
      goto LABEL_42;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a9, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRigWidget.cpp");
      pcAbortImpl();
  }
}

uint64_t OZRigWidget::getCurrentSnapshot(OZChannel **this)
{
  double v2;

  OZChannel::getValueAsDouble(this[136], MEMORY[0x1E0CA2E68], 0.0);
  return OZRigWidget::getSnapshotForValue((OZRigWidget *)this, v2, 0.0000001);
}

uint64_t OZRigWidget::getSnapshotForValue(OZRigWidget *this, double a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  const CMTime *v7;
  uint64_t v8;
  double v9;

  v3 = (uint64_t *)*((_QWORD *)this + 191);
  v4 = (uint64_t *)*((_QWORD *)this + 192);
  if (v3 == v4)
    return 0;
  v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    v8 = *v3;
    OZChannel::getValueAsDouble((OZChannel *)(*v3 + 136), v7, 0.0);
    if (vabdd_f64(v9, a2) < a3)
      break;
    if (++v3 == v4)
      return 0;
  }
  return v8;
}

uint64_t OZRigWidget::numberOfSnapshots(OZRigWidget *this)
{
  return (*((_QWORD *)this + 192) - *((_QWORD *)this + 191)) >> 3;
}

uint64_t OZRigWidget::doPassThrough(OZRigWidget *this, const CMTime *a2)
{
  uint64_t result;
  uint64_t *i;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1248), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result)
  {
    for (i = (uint64_t *)*((_QWORD *)this + 191); ; ++i)
    {
      if (i == *((uint64_t **)this + 192))
        return 0;
      v6 = *i;
      if (*(_DWORD *)(*i + 32) == (_DWORD)result)
        break;
    }
    OZChannel::getValueAsDouble(*((OZChannel **)this + 136), a2, 0.0);
    v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)(v6 + 136), MEMORY[0x1E0CA2E68], 0.0);
    return vabdd_f64(v9, v8) < 0.0000001;
  }
  return result;
}

void OZRigWidget::getCurrentSnapshotIDs(OZChannel **this, const CMTime *a2, unsigned int *a3, unsigned int *a4, double *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;

  OZChannel::getValueAsDouble(this[136], a2, 0.0);
  OZRigWidget::getSnapshotIDsForValue((OZRigWidget *)this, v13, a3, a4, a5, v9, v10, v11, v12);
}

void OZRigWidget::willSetActiveSnapshot(OZRigWidget *this)
{
  OZChannelBase *v2;
  uint64_t v3;
  uint64_t v4;
  OZScene *v5;
  const void *Object;
  OZSingleChannelBehavior *v7;
  uint64_t ChanBase;
  uint64_t v9;
  PCSharedCount v10;

  v2 = (OZChannelBase *)((char *)this + 1248);
  PCSharedCount::PCSharedCount(&v10);
  OZChannelBase::addToUndo(v2, (const PCString *)&v10);
  PCString::~PCString((PCString *)&v10);
  *((_BYTE *)this + 1580) = 1;
  v3 = (*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this);
  if (v3)
  {
    v4 = *((_QWORD *)this + 195);
    if ((OZRigWidget *)v4 != (OZRigWidget *)((char *)this + 1552))
    {
      v5 = (OZScene *)v3;
      do
      {
        Object = (const void *)OZScene::getObject(v5, *(_DWORD *)(v4 + 16));
        if (Object)
        {
          if (v7)
          {
            ChanBase = OZSingleChannelBehavior::getChanBase(v7);
            if (ChanBase)
            {
              v9 = ChanBase;
              PCSharedCount::PCSharedCount(&v10);
              (*(void (**)(uint64_t, PCSharedCount *))(*(_QWORD *)v9 + 344))(v9, &v10);
              PCString::~PCString((PCString *)&v10);
            }
          }
        }
        v4 = *(_QWORD *)(v4 + 8);
      }
      while ((OZRigWidget *)v4 != (OZRigWidget *)((char *)this + 1552));
    }
  }
}

void sub_1B2E8245C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZRigWidget::setActiveSnapshot(OZRigWidget *this, unsigned int a2, int a3)
{
  OZChannel *v6;
  int ValueAsInt;
  int v8;
  int i;
  uint64_t v10;
  OZScene *v11;
  OZChannelBase *v12;
  char *v13;
  uint64_t v14;
  int v15;
  const void *Object;
  OZRigBehavior *v17;
  OZRigBehavior *v18;
  uint64_t v19;
  const void *v20;
  OZSingleChannelBehavior *v21;
  OZSingleChannelBehavior *v22;
  OZChannelBase *ChanBase;
  const void *ObjectManipulator;
  void *v25;
  int v26;

  v6 = (OZChannel *)((char *)this + 1248);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1248), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt != a2)
  {
    v8 = ValueAsInt;
    if (!OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1400), ValueAsInt))
      v8 = 0;
    i = *((unsigned __int8 *)this + 1580);
    if (!*((_BYTE *)this + 1580))
      OZRigWidget::willSetActiveSnapshot(this);
    OZChannel::setValue(v6, MEMORY[0x1E0CA2E68], (double)a2, 0);
    v10 = (*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this);
    if (v10)
    {
      v11 = (OZScene *)v10;
      v12 = *(OZChannelBase **)(v10 + 1504);
      if (v12)
        OZChannelBase::setRangeName(v12, (const PCString *)1);
      v13 = (char *)this + 1552;
      v14 = *((_QWORD *)this + 195);
      if ((OZRigWidget *)v14 != (OZRigWidget *)((char *)this + 1552))
      {
        v26 = i;
        if (v8)
          v15 = a3;
        else
          v15 = 0;
        do
        {
          Object = (const void *)OZScene::getObject(v11, *(_DWORD *)(v14 + 16));
          if (Object)
          {
            if (v17)
            {
              v18 = v17;
              if (v15)
                OZRigBehavior::copyTargetToSnapshot(v17, v8);
              if (a2)
                OZRigBehavior::copySnapshotToTarget(v18, a2);
            }
          }
          v14 = *(_QWORD *)(v14 + 8);
        }
        while ((char *)v14 != v13);
        v19 = *((_QWORD *)this + 195);
        for (i = v26; (char *)v19 != v13; v19 = *(_QWORD *)(v19 + 8))
        {
          v20 = (const void *)OZScene::getObject(v11, *(_DWORD *)(v19 + 16));
          if (v20)
          {
            if (v21)
            {
              v22 = v21;
              ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(v21);
              ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(ChanBase);
              if (ObjectManipulator)
              {
                if (v25)
                  (*(void (**)(void *, OZSingleChannelBehavior *))(*(_QWORD *)v25 + 240))(v25, v22);
              }
            }
          }
        }
      }
      if (!i)
        *((_BYTE *)this + 1580) = 0;
    }
  }
}

_QWORD *OZRigWidget::registerRigBehavior(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 80);
  v4 = result + 194;
  v5 = result[195];
  if ((_QWORD *)v5 == result + 194)
  {
LABEL_13:
    result = operator new(0x18uLL);
    *((_DWORD *)result + 4) = v3;
    v7 = *v4;
    *(_QWORD *)(v7 + 8) = result;
    *result = v7;
    *v4 = (uint64_t)result;
    result[1] = v4;
    ++v2[196];
    return result;
  }
  v6 = result[195];
  while (*(_DWORD *)(v6 + 16) != v3)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if ((uint64_t *)v6 == v4)
      goto LABEL_10;
  }
  if (v4 == (uint64_t *)v6)
  {
LABEL_10:
    while ((uint64_t *)v5 != v4)
    {
      if (*(_DWORD *)(v5 + 16) > v3)
      {
        v4 = (uint64_t *)v5;
        goto LABEL_13;
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    goto LABEL_13;
  }
  return result;
}

void OZRigWidget::unregisterRigBehavior(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 194;
  v3 = (_QWORD *)a1[195];
  if (v3 != a1 + 194)
  {
    while (*((_DWORD *)v3 + 4) != *(_DWORD *)(a2 + 80))
    {
      v3 = (_QWORD *)v3[1];
      if (v3 == v2)
        return;
    }
    if (v2 != v3)
    {
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = v3[1];
      *(_QWORD *)v3[1] = v4;
      --a1[196];
      operator delete(v3);
    }
  }
}

OZScene *OZRigWidget::getRiggedNodeIDs(_QWORD *a1, uint64_t **a2)
{
  OZScene *result;
  uint64_t v5;
  OZScene *v6;
  unsigned int v7;

  result = (OZScene *)(*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  if (result)
  {
    v5 = a1[195];
    if ((_QWORD *)v5 != a1 + 194)
    {
      v6 = result;
      do
      {
        result = (OZScene *)OZScene::getObject(v6, *(_DWORD *)(v5 + 16));
        if (result)
        {
          if (result)
          {
            result = (OZScene *)OZSingleChannelBehavior::getAffectedObject(result);
            if (result)
            {
              result = (OZScene *)(*(uint64_t (**)(OZScene *))(*(_QWORD *)result + 232))(result);
              if (result)
              {
                v7 = *((_DWORD *)result + 20);
                result = (OZScene *)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, &v7, &v7);
              }
            }
          }
        }
        v5 = *(_QWORD *)(v5 + 8);
      }
      while ((_QWORD *)v5 != a1 + 194);
    }
  }
  return result;
}

void OZRigWidget::willModifyChannel(OZRigWidget *this, const OZChannelBase *a2)
{
  OZChannelFolder *var6;
  const OZChannelBase *v5;
  char *v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  void *v10[3];
  uint64_t v11;

  var6 = a2->var6;
  v5 = a2;
  if (var6)
  {
    if ((*(unsigned int (**)(OZChannelFolder *))(*(_QWORD *)var6 + 120))(a2->var6))
      v5 = (const OZChannelBase *)var6;
    else
      v5 = a2;
  }
  if ((a2->var7 & 2) == 0
    && OZRigWidget::CanRigChannel((unint64_t)v5, a2)
    && *((const OZChannelBase **)this + 136) != a2)
  {
    OZChannelRef::OZChannelRef((OZChannelRef *)v10, v5, 0);
    v11 = 0;
    v6 = (char *)this + 1584;
    for (i = *((_QWORD *)this + 199); (char *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (OZChannelRef::operator==((unsigned __int8 *)(i + 16), (unsigned __int8 *)v10))
      {
        if (v6 != (char *)i)
          goto LABEL_14;
        break;
      }
    }
    v11 = (*((uint64_t (**)(const OZChannelBase *))v5->var0 + 31))(v5);
    v8 = std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>((uint64_t)this + 1584, 0, 0, (uint64_t)v10);
    v8[1] = v6;
    v9 = *((_QWORD *)this + 198);
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    *((_QWORD *)this + 198) = v8;
    ++*((_QWORD *)this + 200);
LABEL_14:
    OZChannelRef::~OZChannelRef(v10);
  }
}

void sub_1B2E82940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  OZChannelRef::~OZChannelRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::IsChannelRigged(OZRigWidget *this, const OZChannelBase *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  const OZChannelBase *v5;
  OZRigWidget ***v6;
  OZRigWidget **v7;
  uint64_t IsChannelRigged;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;

  if ((*((_BYTE *)this + 57) & 0x10) != 0)
  {
    if (v6)
    {
      v7 = *v6;
      if (*v6 != v6[1])
      {
        do
        {
          IsChannelRigged = OZRigWidget::IsChannelRigged(*v7, v5);
          if ((IsChannelRigged & 1) != 0)
            break;
          ++v7;
        }
        while (v7 != v6[1]);
        return IsChannelRigged;
      }
    }
    return 0;
  }
  v10 = (uint64_t)&v10;
  v11 = &v10;
  v12 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(this, &v10, 1);
  v2 = v11;
  if (v11 == &v10)
  {
LABEL_5:
    std::__list_imp<unsigned int>::clear(&v10);
    return 0;
  }
  while (1)
  {
    v3 = (_QWORD *)v2[2];
    v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v3 + 344))(v3) + 8);
    v13 = xmmword_1B3053B30;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v13))
      break;
    v2 = (uint64_t *)v2[1];
    if (v2 == &v10)
      goto LABEL_5;
  }
  IsChannelRigged = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v3[2] + 24))(v3 + 2, 0, 1);
  std::__list_imp<unsigned int>::clear(&v10);
  return IsChannelRigged;
}

void sub_1B2E82A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *OZRigWidget::copyTargetChansToActiveSnapshot(OZRigWidget *this)
{
  OZScene *v2;
  int ValueAsInt;
  void *result;
  BOOL v5;
  uint64_t i;

  v2 = (OZScene *)(*(uint64_t (**)(OZRigWidget *))(*(_QWORD *)this + 272))(this);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1248), MEMORY[0x1E0CA2E68], 0.0);
  result = (void *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1400), ValueAsInt);
  if (!result)
    ValueAsInt = 0;
  if (ValueAsInt)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    for (i = *((_QWORD *)this + 195); (OZRigWidget *)i != (OZRigWidget *)((char *)this + 1552); i = *(_QWORD *)(i + 8))
    {
      result = (void *)OZScene::getObject(v2, *(_DWORD *)(i + 16));
      if (result)
      {
        if (result)
          result = (void *)OZRigBehavior::copyTargetToSnapshot((OZRigBehavior *)result, ValueAsInt);
      }
    }
  }
  return result;
}

uint64_t OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::OZRigWidget_activeSnapshotIDChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::OZRigWidget_activeSnapshotIDChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::_OZRigWidget_activeSnapshotIDChan;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *v0;

  if (!OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::_OZRigWidget_activeSnapshotIDChan)
  {
    v0 = (OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *)operator new();
    OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::OZRigWidget_activeSnapshotIDChanImpl(v0);
    OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::_OZRigWidget_activeSnapshotIDChan = (uint64_t)v0;
  }
}

void sub_1B2E82C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl::OZRigWidget_activeSnapshotIDChanImpl(OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_activeSnapshotIDChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6599A30;
  *((_QWORD *)this + 5) = &unk_1E6599A50;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E82CC0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelUint32::OZChannelUint32(OZChannelUint32 *this, unsigned int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelUint32_FactoryBase;
  OZChannelUint32 *v17;
  OZChannelUint32 *OZChannelUint32Info;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelUint32_FactoryBase = (OZFactory *)getOZChannelUint32_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint32_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E6551AF8;
  this->var2 = (void **)&unk_1E6551E58;
  OZChannelUint32Info = (OZChannelUint32 *)OZChannelUint32::createOZChannelUint32Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
    this->var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
  }
  this->var16 = var17;
  OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B2E82DE8(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<OZRigEditModeEntry>::clear(void **a1)
{
  _QWORD **v2;
  void **v3;
  _QWORD *v4;
  void **v5;

  if (a1[2])
  {
    v2 = (_QWORD **)*a1;
    v3 = (void **)a1[1];
    v4 = *v3;
    v4[1] = *((_QWORD *)*a1 + 1);
    *v2[1] = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (void **)v3[1];
        OZChannelRef::~OZChannelRef(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(OZRigWidget::OZRigWidget_valueDoubleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::OZRigWidget_valueDoubleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::OZRigWidget_valueDoubleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueDoubleImpl::_OZRigWidget_valueDouble;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueDoubleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget::OZRigWidget_valueDoubleImpl *v0;

  if (!OZRigWidget::OZRigWidget_valueDoubleImpl::_OZRigWidget_valueDouble)
  {
    v0 = (OZRigWidget::OZRigWidget_valueDoubleImpl *)operator new();
    OZRigWidget::OZRigWidget_valueDoubleImpl::OZRigWidget_valueDoubleImpl(v0);
    OZRigWidget::OZRigWidget_valueDoubleImpl::_OZRigWidget_valueDouble = (uint64_t)v0;
  }
}

void sub_1B2E82F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_valueDoubleImpl *OZRigWidget::OZRigWidget_valueDoubleImpl::OZRigWidget_valueDoubleImpl(OZRigWidget::OZRigWidget_valueDoubleImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_valueDoubleImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6599AA8;
  *((_QWORD *)this + 5) = &unk_1E6599AC8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E82FC0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(OZRigWidget::OZRigWidget_valueDoubleInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::OZRigWidget_valueDoubleInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::OZRigWidget_valueDoubleInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueDoubleInfo::_OZRigWidget_valueDoubleInfo;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueDoubleInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget::OZRigWidget_valueDoubleInfo *v0;

  if (!OZRigWidget::OZRigWidget_valueDoubleInfo::_OZRigWidget_valueDoubleInfo)
  {
    v0 = (OZRigWidget::OZRigWidget_valueDoubleInfo *)operator new();
    OZRigWidget::OZRigWidget_valueDoubleInfo::OZRigWidget_valueDoubleInfo(v0);
    OZRigWidget::OZRigWidget_valueDoubleInfo::_OZRigWidget_valueDoubleInfo = (uint64_t)v0;
  }
}

void sub_1B2E8308C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_valueDoubleInfo *OZRigWidget::OZRigWidget_valueDoubleInfo::OZRigWidget_valueDoubleInfo(OZRigWidget::OZRigWidget_valueDoubleInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.1, 0.01, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_valueDoubleInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6599B20;
  *((_QWORD *)this + 10) = &unk_1E6599B40;
  return this;
}

void sub_1B2E83140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(OZRigWidget::OZRigWidget_pSliderMinChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::OZRigWidget_pSliderMinChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::OZRigWidget_pSliderMinChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_pSliderMinChanImpl::_OZRigWidget_pSliderMinChan;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_pSliderMinChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget::OZRigWidget_pSliderMinChanImpl *v0;

  if (!OZRigWidget::OZRigWidget_pSliderMinChanImpl::_OZRigWidget_pSliderMinChan)
  {
    v0 = (OZRigWidget::OZRigWidget_pSliderMinChanImpl *)operator new();
    OZRigWidget::OZRigWidget_pSliderMinChanImpl::OZRigWidget_pSliderMinChanImpl(v0);
    OZRigWidget::OZRigWidget_pSliderMinChanImpl::_OZRigWidget_pSliderMinChan = (uint64_t)v0;
  }
}

void sub_1B2E8320C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_pSliderMinChanImpl *OZRigWidget::OZRigWidget_pSliderMinChanImpl::OZRigWidget_pSliderMinChanImpl(OZRigWidget::OZRigWidget_pSliderMinChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_pSliderMinChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6599B98;
  *((_QWORD *)this + 5) = &unk_1E6599BB8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 99.9);
  return this;
}

void sub_1B2E832C0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(OZRigWidget::OZRigWidget_pSliderMaxChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::OZRigWidget_pSliderMaxChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::OZRigWidget_pSliderMaxChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_pSliderMaxChanImpl::_OZRigWidget_pSliderMaxChan;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_pSliderMaxChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget::OZRigWidget_pSliderMaxChanImpl *v0;

  if (!OZRigWidget::OZRigWidget_pSliderMaxChanImpl::_OZRigWidget_pSliderMaxChan)
  {
    v0 = (OZRigWidget::OZRigWidget_pSliderMaxChanImpl *)operator new();
    OZRigWidget::OZRigWidget_pSliderMaxChanImpl::OZRigWidget_pSliderMaxChanImpl(v0);
    OZRigWidget::OZRigWidget_pSliderMaxChanImpl::_OZRigWidget_pSliderMaxChan = (uint64_t)v0;
  }
}

void sub_1B2E8338C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_pSliderMaxChanImpl *OZRigWidget::OZRigWidget_pSliderMaxChanImpl::OZRigWidget_pSliderMaxChanImpl(OZRigWidget::OZRigWidget_pSliderMaxChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 100.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 100.0, 0, 1);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_pSliderMaxChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6599C10;
  *((_QWORD *)this + 5) = &unk_1E6599C30;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.1);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E83450(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(OZRigWidget::OZRigWidget_valueAspectRatioImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::OZRigWidget_valueAspectRatioImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::OZRigWidget_valueAspectRatioImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueAspectRatioImpl::_OZRigWidget_valueAspectRatio;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget::OZRigWidget_valueAspectRatioImpl *v0;

  if (!OZRigWidget::OZRigWidget_valueAspectRatioImpl::_OZRigWidget_valueAspectRatio)
  {
    v0 = (OZRigWidget::OZRigWidget_valueAspectRatioImpl *)operator new();
    OZRigWidget::OZRigWidget_valueAspectRatioImpl::OZRigWidget_valueAspectRatioImpl(v0);
    OZRigWidget::OZRigWidget_valueAspectRatioImpl::_OZRigWidget_valueAspectRatio = (uint64_t)v0;
  }
}

void sub_1B2E8351C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_valueAspectRatioImpl *OZRigWidget::OZRigWidget_valueAspectRatioImpl::OZRigWidget_valueAspectRatioImpl(OZRigWidget::OZRigWidget_valueAspectRatioImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.77777778);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.77777778, 0, 1);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_valueAspectRatioImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6599C88;
  *((_QWORD *)this + 5) = &unk_1E6599CA8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.1);
  OZChannelImpl::setMax((OZChannelImpl *)this, 10.0);
  return this;
}

void sub_1B2E835DC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(OZRigWidget::OZRigWidget_valueAspectRatioInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::OZRigWidget_valueAspectRatioInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::OZRigWidget_valueAspectRatioInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget::OZRigWidget_valueAspectRatioInfo::_OZRigWidget_valueAspectRatioInfo;
}

void std::__call_once_param<std::tuple<OZRigWidget::OZRigWidget_valueAspectRatioInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget::OZRigWidget_valueAspectRatioInfo *v0;

  if (!OZRigWidget::OZRigWidget_valueAspectRatioInfo::_OZRigWidget_valueAspectRatioInfo)
  {
    v0 = (OZRigWidget::OZRigWidget_valueAspectRatioInfo *)operator new();
    OZRigWidget::OZRigWidget_valueAspectRatioInfo::OZRigWidget_valueAspectRatioInfo(v0);
    OZRigWidget::OZRigWidget_valueAspectRatioInfo::_OZRigWidget_valueAspectRatioInfo = (uint64_t)v0;
  }
}

void sub_1B2E836A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZRigWidget::OZRigWidget_valueAspectRatioInfo *OZRigWidget::OZRigWidget_valueAspectRatioInfo::OZRigWidget_valueAspectRatioInfo(OZRigWidget::OZRigWidget_valueAspectRatioInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.1, 2.0, 0.1, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZRigWidget::OZRigWidget_valueAspectRatioInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6599D00;
  *((_QWORD *)this + 10) = &unk_1E6599D20;
  return this;
}

void sub_1B2E83758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

_QWORD *std::list<unsigned int>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B2E83800(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile::OZ3DEngineSceneFile(OZ3DEngineSceneFile *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;

  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(_QWORD *)this = &off_1E6599DA8;
  *((_QWORD *)this + 2) = &unk_1E659A3F0;
  *((_QWORD *)this + 6) = &unk_1E659A648;
  *((_QWORD *)this + 197) = &unk_1E659A6A0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("3D Scene File Inspector Linked Textures"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), &v6, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0);
  PCString::~PCString(&v6);
  *((_QWORD *)this + 216) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1600), 8, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1600), 0x800000);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1600), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1600));
}

void sub_1B2E838FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSceneNodeFile *v10;
  OZChannelBase *v11;
  const PCString *v13;

  PCString::~PCString(&a10);
  OZChannelBase::setRangeName(v11, v13);
  OZSceneNodeFile::~OZSceneNodeFile(v10);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile::OZ3DEngineSceneFile(OZ3DEngineSceneFile *this, OZ3DEngineSceneFile *a2, char a3)
{
  uint64_t v5;

  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(_QWORD *)this = &off_1E6599DA8;
  *((_QWORD *)this + 2) = &unk_1E659A3F0;
  *((_QWORD *)this + 6) = &unk_1E659A648;
  *((_QWORD *)this + 197) = &unk_1E659A6A0;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), (const OZChannelFolder *)((char *)a2 + 1600), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 216) = 0;
}

void sub_1B2E839B8(_Unwind_Exception *a1, const PCString *a2)
{
  OZSceneNodeFile *v2;
  OZChannelBase *v3;

  OZChannelBase::setRangeName(v3, a2);
  OZSceneNodeFile::~OZSceneNodeFile(v2);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile::~OZ3DEngineSceneFile(OZ3DEngineSceneFile *this)
{
  OZChannelBase *v2;
  uint64_t v3;
  const PCString *v4;

  *(_QWORD *)this = &off_1E6599DA8;
  *((_QWORD *)this + 2) = &unk_1E659A3F0;
  *((_QWORD *)this + 6) = &unk_1E659A648;
  v2 = (OZChannelBase *)((char *)this + 1576);
  *((_QWORD *)this + 197) = &unk_1E659A6A0;
  v3 = *((_QWORD *)this + 216);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 216) = 0;
  }
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1600));
  OZChannelBase::setRangeName(v2, v4);
  OZSceneNodeFile::~OZSceneNodeFile(this);
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DEngineSceneFile::~OZ3DEngineSceneFile(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 16));
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 48));
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 1576));
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEngineSceneFile::~OZ3DEngineSceneFile((OZ3DEngineSceneFile *)((char *)this - 1576));
  JUMPOUT(0x1B5E29170);
}

OZ3DEngineSceneFileImplUSDZ *OZ3DEngineSceneFile::getFileImpl(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *result;
  const __CFURL **v3;

  result = (OZ3DEngineSceneFileImplUSDZ *)*((_QWORD *)this + 216);
  if (!result)
  {
    if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1408))(this))
    {
      v3 = (const __CFURL **)(*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1408))(this);
      result = New3DEngineSceneFileImpl(this, v3);
      *((_QWORD *)this + 216) = result;
    }
    else
    {
      return (OZ3DEngineSceneFileImplUSDZ *)*((_QWORD *)this + 216);
    }
  }
  return result;
}

void OZ3DEngineSceneFile::getKindName(OZ3DEngineSceneFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this))
    PCSharedCount::PCSharedCount(a2);
  else
    PCURL::PCURL((PCURL *)a2, CFSTR("Media Info 3D Object"));
}

void OZ3DEngineSceneFile::getCodecName(OZ3DEngineSceneFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  int v4;
  const __CFString *v5;
  int v6;
  PCString v7;
  PCString v8;

  if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(_QWORD *)this + 1232))(&v7, this);
    PCURL::getExtension((const __CFURL **)&v7, (PCURL *)&v8);
    PCURL::~PCURL((PCURL *)&v7);
    PCString::PCString(&v7, "usdz");
    v4 = PCString::caseInsensitiveCompare(&v8, &v7);
    PCString::~PCString(&v7);
    v5 = CFSTR("Media Info USDZ Object File");
    if (v4)
    {
      PCString::PCString(&v7, "obj");
      v6 = PCString::caseInsensitiveCompare(&v8, &v7);
      PCString::~PCString(&v7);
      if (!v6)
        v5 = CFSTR("Media Info Wavefront Object File");
    }
    PCURL::PCURL((PCURL *)a2, v5);
    PCString::~PCString(&v8);
  }
}

void sub_1B2E83CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2E83D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCURL::~PCURL((PCURL *)&a9);
  JUMPOUT(0x1B2E83D00);
}

double OZ3DEngineSceneFile::getUserFrameRate(OZ3DEngineSceneFile *this)
{
  return *(double *)(*((_QWORD *)this + 121) + 368);
}

uint64_t OZ3DEngineSceneFile::getFrameRate(OZ3DEngineSceneFile *this)
{
  return (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1296))(this);
}

uint64_t OZ3DEngineSceneFile::getFrames(OZ3DEngineSceneFile *this)
{
  uint64_t result;
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  double OriginalFileDurationInSeconds;

  if (((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this) & 1) != 0)
    return 1;
  result = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this);
  if (result)
  {
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    if (!FileImpl
      || !(*(unsigned int (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 56))(FileImpl))
    {
      return 1;
    }
    OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this);
    return (OriginalFileDurationInSeconds
                        * (*(double (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1328))(this));
  }
  return result;
}

Float64 OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  Float64 result;
  uint64_t v4;
  CMTime time;

  if (!OZ3DEngineSceneFile::getFileImpl(this))
    return 0.0;
  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  result = (*(double (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 96))(FileImpl);
  if (fabs(result) < 0.0000001)
  {
    v4 = *((_QWORD *)this + 121);
    if (v4)
    {
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&time);
      return CMTimeGetSeconds(&time);
    }
  }
  return result;
}

uint64_t OZ3DEngineSceneFile::getDurationInFrames(OZ3DEngineSceneFile *this)
{
  uint64_t result;
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  double OriginalFileDurationInSeconds;

  if (((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this) & 1) != 0)
    return 1;
  result = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this);
  if (result)
  {
    if (!OZ3DEngineSceneFile::getFileImpl(this))
      return 1;
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    if (!(*(unsigned int (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 56))(FileImpl))
      return 1;
    OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this);
    return (OriginalFileDurationInSeconds
                        * (*(double (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1328))(this));
  }
  return result;
}

Float64 OZ3DEngineSceneFile::getMaximumDuration(OZ3DEngineSceneFile *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 121);
  if (OZ3DEngineSceneFile::getFileImpl(this))
    return OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(this) * *(double *)(v2 + 368);
  else
    return 1.0;
}

double OZ3DEngineSceneFile::getPixelAspectRatio(OZ3DEngineSceneFile *this)
{
  return 1.0;
}

uint64_t OZ3DEngineSceneFile::getNumPolygons(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImpl *FileImpl;

  if (((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this) & 1) != 0
    || !OZ3DEngineSceneFile::getFileImpl(this))
  {
    return 0;
  }
  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  return OZ3DEngineSceneFileImpl::getNumPolygons(FileImpl);
}

uint64_t OZ3DEngineSceneFile::setAbsoluteFileURL(OZ3DEngineSceneFile *this, PCURL *a2)
{
  uint64_t v4;
  OZ3DEngineSceneFileImplUSDZ *FileImpl;

  v4 = OZSceneNodeFile::setAbsoluteFileURL(this, a2);
  if ((_DWORD)v4 && OZ3DEngineSceneFile::getFileImpl(this))
  {
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    (*(void (**)(OZ3DEngineSceneFileImplUSDZ *, PCURL *))(*(_QWORD *)FileImpl + 24))(FileImpl, a2);
  }
  return v4;
}

uint64_t OZ3DEngineSceneFile::updateModifiedDate(OZ3DEngineSceneFile *this)
{
  uint64_t result;
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  int v4;

  result = (uint64_t)OZ3DEngineSceneFile::getFileImpl(this);
  if (result)
  {
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    v4 = (*(uint64_t (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 72))(FileImpl);
    if (*((_DWORD *)this + 384) == v4)
    {
      return 0;
    }
    else
    {
      *((_DWORD *)this + 384) = v4;
      return 1;
    }
  }
  return result;
}

OZ3DEngineSceneFileImplUSDZ *OZ3DEngineSceneFile::updateAssociatedResourcesAvailable(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *result;
  OZ3DEngineSceneFileImplUSDZ *FileImpl;

  result = OZ3DEngineSceneFile::getFileImpl(this);
  if (result)
  {
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    return (OZ3DEngineSceneFileImplUSDZ *)(*(uint64_t (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 80))(FileImpl);
  }
  return result;
}

uint64_t OZ3DEngineSceneFile::updateMissingFile(const __CFURL ***this)
{
  uint64_t result;
  PCString v3;

  if (OZ3DEngineSceneFile::getFileImpl((OZ3DEngineSceneFile *)this) || !this[193])
  {
    result = ((uint64_t (*)(const __CFURL ***))(*this)[179])(this);
    if ((_DWORD)result)
    {
      OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
      return 0;
    }
  }
  else
  {
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, 1);
    PCURL::getAsURLString(this[193], (PCURL *)&v3);
    PCString::set((PCString *)this + 196, &v3);
    PCString::~PCString(&v3);
    return 1;
  }
  return result;
}

void sub_1B2E840E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneFile::hasVideo()
{
  return 0;
}

uint64_t OZ3DEngineSceneFile::numAudioTracks(OZ3DEngineSceneFile *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneFile::supportsAnimation(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;

  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  return (*(uint64_t (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 40))(FileImpl);
}

uint64_t OZ3DEngineSceneFile::getAssociatedFileURLs(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;

  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  return (*(uint64_t (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 88))(FileImpl);
}

OZ3DEngineSceneFileImplUSDZ *OZ3DEngineSceneFile::dirty(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *result;
  OZ3DEngineSceneFileImplUSDZ *FileImpl;

  result = OZ3DEngineSceneFile::getFileImpl(this);
  if (result)
  {
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    return (OZ3DEngineSceneFileImplUSDZ *)(*(uint64_t (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 16))(FileImpl);
  }
  return result;
}

OZ3DEngineSceneFileImplUSDZ *`non-virtual thunk to'OZ3DEngineSceneFile::dirty(OZ3DEngineSceneFile *this)
{
  return OZ3DEngineSceneFile::dirty((OZ3DEngineSceneFile *)((char *)this - 16));
}

void OZ3DEngineSceneFile::get3DEngineSceneElements(OZ3DEngineSceneFile *this@<X0>, void **a2@<X8>)
{
  OZScene *v3;
  _QWORD *DependantNodes;
  _QWORD *v6;
  _QWORD *v7;
  void *Node;
  void *v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (OZScene *)*((_QWORD *)this + 121);
  if (v3)
  {
    DependantNodes = (_QWORD *)OZScene::getDependantNodes(v3, *((_DWORD *)this + 20));
    if (DependantNodes)
    {
      v6 = DependantNodes + 1;
      v7 = (_QWORD *)*DependantNodes;
      if ((_QWORD *)*DependantNodes != DependantNodes + 1)
      {
        do
        {
          Node = OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v7 + 7));
          if (Node)
          {
            if (v9)
            {
              v10 = v9;
              v12 = a2[1];
              v11 = (unint64_t)a2[2];
              if ((unint64_t)v12 >= v11)
              {
                v14 = ((char *)v12 - (_BYTE *)*a2) >> 3;
                if ((unint64_t)(v14 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v15 = v11 - (_QWORD)*a2;
                v16 = v15 >> 2;
                if (v15 >> 2 <= (unint64_t)(v14 + 1))
                  v16 = v14 + 1;
                if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
                  v17 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v17 = v16;
                if (v17)
                  v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v17);
                else
                  v18 = 0;
                v19 = &v18[8 * v14];
                *(_QWORD *)v19 = v10;
                v13 = v19 + 8;
                v21 = (char *)*a2;
                v20 = (char *)a2[1];
                if (v20 != *a2)
                {
                  do
                  {
                    v22 = *((_QWORD *)v20 - 1);
                    v20 -= 8;
                    *((_QWORD *)v19 - 1) = v22;
                    v19 -= 8;
                  }
                  while (v20 != v21);
                  v20 = (char *)*a2;
                }
                *a2 = v19;
                a2[1] = v13;
                a2[2] = &v18[8 * v17];
                if (v20)
                  operator delete(v20);
              }
              else
              {
                *v12 = v9;
                v13 = v12 + 1;
              }
              a2[1] = v13;
            }
          }
          v23 = (_QWORD *)v7[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v7[2];
              v25 = *v24 == (_QWORD)v7;
              v7 = v24;
            }
            while (!v25);
          }
          v7 = v24;
        }
        while (v24 != v6);
      }
    }
  }
}

void sub_1B2E8432C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneFile::didFinishLoadingIntoScene(OZ3DEngineSceneFile *this)
{
  return OZSceneNodeFile::didFinishLoadingIntoScene((OZ3DEngineSceneFile *)((char *)this - 16));
}

uint64_t OZ3DEngineSceneFile::getNaturalDurationFlags(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;

  FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
  if ((*(unsigned int (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 56))(FileImpl))
    return 1;
  else
    return 6;
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneFile::getNaturalDurationFlags(OZ3DEngineSceneFile *this)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;

  FileImpl = OZ3DEngineSceneFile::getFileImpl((OZ3DEngineSceneFile *)((char *)this - 16));
  if ((*(unsigned int (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 56))(FileImpl))
    return 1;
  else
    return 6;
}

double OZ3DEngineSceneFile::getNaturalDuration@<D0>(OZ3DEngineSceneFile *this@<X0>, __n128 *a2@<X8>)
{
  OZ3DEngineSceneFileImplUSDZ *FileImpl;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this))
  {
    FileImpl = OZ3DEngineSceneFile::getFileImpl(this);
    if (!(*(unsigned int (**)(OZ3DEngineSceneFileImplUSDZ *))(*(_QWORD *)FileImpl + 56))(FileImpl))
    {
      v8 = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this);
      v5.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), a2).n128_u64[0];
      return v5.n128_f64[0];
    }
    v5 = *(__n128 *)((char *)this + 232);
    *a2 = v5;
    v6 = *((_QWORD *)this + 31);
  }
  else
  {
    v7 = MEMORY[0x1E0CA2E68];
    v5 = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    v6 = *(_QWORD *)(v7 + 16);
  }
  a2[1].n128_u64[0] = v6;
  return v5.n128_f64[0];
}

double `non-virtual thunk to'OZ3DEngineSceneFile::getNaturalDuration@<D0>(OZ3DEngineSceneFile *this@<X0>, __n128 *a2@<X8>)
{
  return OZ3DEngineSceneFile::getNaturalDuration((OZ3DEngineSceneFile *)((char *)this - 16), a2);
}

double OZ3DEngineSceneFile::get3DFileTime@<D0>(OZ3DEngineSceneFile *this@<X0>, const CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v5;
  double result;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  __int128 v10;
  CMTimeEpoch v11;

  v5 = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 640))(this);
  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v5 + 712))(&v7);
  *a3 = *a2;
  v8 = v7;
  v9 = *a2;
  PC_CMTimeSaferAdd(&v9, &v8, (uint64_t)&v10);
  result = *(double *)&v10;
  *(_OWORD *)&a3->value = v10;
  a3->epoch = v11;
  return result;
}

uint64_t OZ3DEngineSceneFile::writeBody(OZ3DEngineSceneFile *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, int a5)
{
  const __CFURL **v10;
  PCString *v11;
  PCXMLWriteStream *v12;
  const __CFURL **URL;
  CFURLRef *v14;
  __CFString *v15;
  const __CFArray *ArrayBySeparatingStrings;
  __CFString *v17;
  const __CFArray *v18;
  int Count;
  int v20;
  int v21;
  uint64_t v22;
  CFIndex v23;
  const __CFString *ValueAtIndex;
  const __CFString *v25;
  const __CFString *v26;
  int v27;
  uint64_t v28;
  const void *v29;
  const __CFURL **v30;
  PCString *v31;
  const __CFURL **v32;
  __CFString *v33;
  const __CFArray *v34;
  __CFString *v35;
  const __CFArray *v36;
  int v37;
  _BOOL4 v38;
  const __CFURL **v39;
  char v40;
  CFIndex v41;
  uint64_t v42;
  uint64_t v43;
  const __CFString *v44;
  const __CFString *v45;
  CFComparisonResult v46;
  int v48;
  int v49;
  _BOOL4 v51;
  unsigned int v52;
  int v53;
  BOOL v54[4];
  char v55;
  PCString v56;
  char v57[8];
  char v58[8];
  PCString v59;
  PCSharedCount v60;
  PCString v61;
  PCSharedCount v62;
  PCString v63;
  PCString v64;
  PCString v65;
  PCString v66;
  char v67[8];

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZ3DEngineSceneFileScope);
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this))
    v51 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this)
                               + 1584)
                   + 160) != 0;
  else
    v51 = 0;
  v53 = a4;
  *(_DWORD *)v54 = a5;
  v52 = a3;
  if ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this)
    && !*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this) + 1584)
                  + 320))
  {
    if ((*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this)
      && (v10 = (const __CFURL **)*((_QWORD *)this + 193)) != 0)
    {
      PCURL::getAsURLString(v10, (PCURL *)v67);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, char *))(*(_QWORD *)a2 + 104))(a2, v67);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v11 = (PCString *)v67;
    }
    else
    {
      (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(_QWORD *)this + 1272))(&v66, this);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v66);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v11 = &v66;
    }
    PCString::~PCString(v11);
    v55 = 1;
  }
  else
  {
    v55 = 0;
  }
  if (v12 && ((*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this) & 1) == 0)
  {
    URL = (const __CFURL **)PCXMLWriteStream::getURL(v12);
    PCURL::getAsFileSystemString(URL, &v65);
    (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(_QWORD *)this + 1264))(&v64, this);
    v14 = (CFURLRef *)PCXMLWriteStream::getURL(v12);
    PCURL::getContainingFolderAsURLString(v14, (PCURL *)&v63);
    v15 = PCString::cf_str(&v65);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v15, CFSTR("/"));
    v17 = PCString::cf_str(&v64);
    v18 = CFStringCreateArrayBySeparatingStrings(0, v17, CFSTR("/"));
    Count = CFArrayGetCount(ArrayBySeparatingStrings);
    v20 = CFArrayGetCount(v18);
    v21 = v20;
    if (Count >= v20)
      v22 = v20;
    else
      v22 = Count;
    if ((int)v22 >= 1)
    {
      v23 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v23);
        v25 = (const __CFString *)CFArrayGetValueAtIndex(v18, v23);
        if (CFStringCompare(ValueAtIndex, v25, 1uLL))
          break;
        if (v22 == ++v23)
          goto LABEL_23;
      }
      LODWORD(v22) = v23;
      if (!(_DWORD)v23)
        goto LABEL_34;
LABEL_23:
      if ((_DWORD)v22 != 1
        || (v26 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0), CFStringGetLength(v26)))
      {
        PCSharedCount::PCSharedCount(&v62);
        if (~(_DWORD)v22 + Count >= 1)
        {
          v27 = Count - v22;
          do
          {
            PCString::append((PCString *)&v62, "../");
            --v27;
          }
          while (v27 > 1);
        }
        if ((int)v22 < v21)
        {
          v28 = 0;
          do
          {
            v29 = CFArrayGetValueAtIndex(v18, v22 + v28);
            PCURL::PCURL((PCURL *)&v61, v29);
            PCString::append((PCString *)&v62, &v61);
            PCString::~PCString(&v61);
            if (v21 - 1 > (int)v22 + (int)v28)
              PCString::append((PCString *)&v62, "/");
            ++v28;
          }
          while ((int)v22 + (int)v28 < v21);
        }
        PCURL::PCURL((PCURL *)&v61, (const PCString *)&v62, 0);
        PCSharedCount::PCSharedCount(&v60);
        PCURL::getAsURLString((const __CFURL **)&v61, (PCURL *)&v59);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v59);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        PCString::~PCString(&v59);
        PCString::~PCString((PCString *)&v60);
        PCURL::~PCURL((PCURL *)&v61);
        PCString::~PCString((PCString *)&v62);
      }
    }
LABEL_34:
    CFRelease(ArrayBySeparatingStrings);
    CFRelease(v18);
    PCString::~PCString(&v63);
    PCString::~PCString(&v64);
    PCString::~PCString(&v65);
  }
  if ((v55 & 1) != 0)
    return OZSceneNode::writeBody((unsigned int **)this, a2, v52, v53, *(unsigned int *)v54);
  if (!(*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this))
  {
    (*(void (**)(PCString *__return_ptr, OZ3DEngineSceneFile *))(*(_QWORD *)this + 1272))(&v65, this);
    if (v12)
    {
      v32 = (const __CFURL **)PCXMLWriteStream::getURL(v12);
      PCURL::getAsURLString(v32, (PCURL *)&v64);
      v33 = PCString::cf_str(&v64);
      v34 = CFStringCreateArrayBySeparatingStrings(0, v33, CFSTR("/"));
      v35 = PCString::cf_str(&v65);
      v36 = CFStringCreateArrayBySeparatingStrings(0, v35, CFSTR("/"));
      v37 = CFArrayGetCount(v34);
      if ((int)CFArrayGetCount(v36) >= v37)
      {
        if (v37 < 2)
        {
          v38 = 0;
        }
        else
        {
          v41 = 0;
          v42 = v37 - 1;
          if (v42 <= 1)
            v42 = 1;
          v43 = v42 - 1;
          do
          {
            v44 = (const __CFString *)CFArrayGetValueAtIndex(v34, v41);
            v45 = (const __CFString *)CFArrayGetValueAtIndex(v36, v41);
            v46 = CFStringCompare(v44, v45, 1uLL);
            v38 = v46 != kCFCompareEqualTo;
            if (v46)
              break;
          }
          while (v43 != v41++);
        }
      }
      else
      {
        v38 = 1;
      }
      CFRelease(v34);
      CFRelease(v36);
      PCString::~PCString(&v64);
    }
    else
    {
      v38 = 0;
    }
    PCString::PCString(&v64, "Contents/LibraryContent");
    if (*((_BYTE *)this + 1540))
    {
      v48 = PCString::find(&v65, &v64);
      v49 = v51;
      if (v48 >= 0)
        v49 = 1;
      if (((v38 | v49) & 1) == 0)
        goto LABEL_64;
    }
    else if (!v51 && !v38)
    {
LABEL_64:
      PCString::~PCString(&v64);
      v31 = &v65;
      goto LABEL_65;
    }
    PCString::PCString(&v56, &v65);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v56);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v56);
    goto LABEL_64;
  }
  v30 = (const __CFURL **)*((_QWORD *)this + 194);
  if (v30)
  {
    PCURL::getAsURLString(v30, (PCURL *)v58);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(_QWORD *)a2 + 104))(a2, v58);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    v31 = (PCString *)v58;
LABEL_65:
    PCString::~PCString(v31);
    return OZSceneNode::writeBody((unsigned int **)this, a2, v52, v53, *(unsigned int *)v54);
  }
  v39 = (const __CFURL **)*((_QWORD *)this + 193);
  v40 = !v51;
  if (!v39)
    v40 = 1;
  if ((v40 & 1) == 0)
  {
    PCURL::getAsURLString(v39, (PCURL *)v57);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(_QWORD *)a2 + 104))(a2, v57);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    v31 = (PCString *)v57;
    goto LABEL_65;
  }
  return OZSceneNode::writeBody((unsigned int **)this, a2, v52, v53, *(unsigned int *)v54);
}

void sub_1B2E84BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,PCString a22,PCString a23,PCString a24,PCString a25,PCString a26,PCString a27,PCString a28)
{
  PCString::~PCString(&a23);
  PCURL::~PCURL((PCURL *)&a24);
  PCString::~PCString(&a25);
  PCString::~PCString(&a26);
  PCString::~PCString(&a27);
  PCString::~PCString(&a28);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneFile::writeBody(OZ3DEngineSceneFile *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, int a5)
{
  return OZ3DEngineSceneFile::writeBody((OZ3DEngineSceneFile *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZ3DEngineSceneFile::parseBegin(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZ3DEngineSceneFileScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneFile::parseBegin(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseBegin((OZ3DEngineSceneFile *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZ3DEngineSceneFileScope);
  return 1;
}

uint64_t OZ3DEngineSceneFile::parseEnd(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneFile::parseEnd(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseEnd((OZ3DEngineSceneFile *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZ3DEngineSceneFile::parseElement(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  char v10;
  PCXMLReadStream *v11;
  PCXMLReadStream *v12;
  __CFString *v13;
  CFStringRef v14;
  int v15;
  CFURLRef *URL;
  CFURLRef PathComponent;
  const __CFURL *v18;
  CFURLRef v19;
  char v20;
  char v21;
  char v22;
  PCString v24;
  _BYTE v25[8];
  PCSharedCount v26;

  PCSharedCount::PCSharedCount(&v26);
  v6 = (*(uint64_t (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 272))(this);
  v8 = v6 && (v7 = *(_QWORD *)(v6 + 1584)) != 0 && *(_BYTE *)(v7 + 160) != 0;
  *((_BYTE *)this + 1540) = 1;
  OZSceneNode::parseElement((OZTimeMarkerSet **)this, a2, a3);
  v9 = *((_DWORD *)a3 + 2);
  if (v9 != 2)
  {
    if (v9 == 1
      && (*((_BYTE *)this + 1541)
       || (*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this))
      && PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26))
    {
      PCURL::PCURL((PCURL *)v25, (const PCString *)&v26, 0);
      if ((*(unsigned int (**)(OZ3DEngineSceneFile *, _BYTE *))(*(_QWORD *)this + 1400))(this, v25))
      {
        *((_BYTE *)this + 1541) = 0;
        if (*((_BYTE *)this + 1540))
          v10 = 1;
        else
          v10 = v8;
        if ((v10 & 1) == 0)
          (*(void (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 104))(this);
      }
      PCURL::~PCURL((PCURL *)v25);
    }
    goto LABEL_33;
  }
  if (!*((_BYTE *)this + 1541)
    && !(*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this))
  {
    goto LABEL_33;
  }
  if (!v11)
    goto LABEL_33;
  v12 = v11;
  if (!PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26))
    goto LABEL_33;
  v13 = PCString::cf_str((PCString *)&v26);
  v14 = CFURLCreateStringByReplacingPercentEscapes(0, v13, &stru_1E65EDDA0);
  PCURL::PCURL((PCURL *)&v24, v14);
  PCURL::PCURL((PCURL *)v25, &v24, 0);
  PCString::~PCString(&v24);
  v15 = (*(uint64_t (**)(OZ3DEngineSceneFile *, _BYTE *))(*(_QWORD *)this + 1416))(this, v25);
  PCURL::~PCURL((PCURL *)v25);
  if (!(*(unsigned int (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 1432))(this)
    || !*(_QWORD *)PCXMLReadStream::getURL(v12))
  {
    if (!v15)
      goto LABEL_33;
    goto LABEL_28;
  }
  URL = (CFURLRef *)PCXMLReadStream::getURL(v12);
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *URL);
  v18 = (const __CFURL *)MEMORY[0x1B5E27FAC](0, v14, 0, 0, PathComponent);
  v19 = CFURLCopyAbsoluteURL(v18);
  PCURL::PCURL((PCURL *)v25, v19);
  v20 = (*(uint64_t (**)(OZ3DEngineSceneFile *, _BYTE *))(*(_QWORD *)this + 1400))(this, v25);
  if (*((_BYTE *)this + 1540))
    v20 = (*(uint64_t (**)(OZ3DEngineSceneFile *, _BYTE *))(*(_QWORD *)this + 1416))(this, v25);
  v21 = v20;
  CFRelease(v14);
  CFRelease(PathComponent);
  CFRelease(v18);
  CFRelease(v19);
  PCURL::~PCURL((PCURL *)v25);
  if ((v21 & 1) != 0)
  {
LABEL_28:
    *((_BYTE *)this + 1541) = 0;
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
    if (*((_BYTE *)this + 1540))
      v22 = 1;
    else
      v22 = v8;
    if ((v22 & 1) == 0)
      (*(void (**)(OZ3DEngineSceneFile *))(*(_QWORD *)this + 104))(this);
  }
LABEL_33:
  PCString::~PCString((PCString *)&v26);
  return 1;
}

void sub_1B2E85070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneFile::parseElement(OZ3DEngineSceneFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZ3DEngineSceneFile::parseElement((OZ3DEngineSceneFile *)((char *)this - 48), a2, a3);
  return 1;
}

uint64_t OZ3DEngineSceneFile::getLayers(OZ3DEngineSceneFile *this)
{
  return 1;
}

uint64_t OZ3DEngineSceneFile::getAudioTracks(OZ3DEngineSceneFile *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneFile::getWorkingColorDescription@<X0>(OZ3DEngineSceneFile *this@<X0>, uint64_t a2@<X8>)
{
  return OZSceneNode::getWorkingColorDescription((OZ3DEngineSceneFile *)((char *)this - 1576), a2);
}

float `non-virtual thunk to'OZ3DEngineSceneFile::getBlendingGamma(OZ3DEngineSceneFile *this)
{
  return OZSceneNode::getBlendingGamma((OZ3DEngineSceneFile *)((char *)this - 1576));
}

void OZRigWidgetAspectRatio::OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZRigWidget *v4;

  OZRigWidget::OZRigWidget(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E659A7B0;
  *((_QWORD *)v4 + 2) = &unk_1E659AC88;
  *((_QWORD *)v4 + 6) = &unk_1E659AEE0;
  OZRigWidget::setWidgetType(v4, 4);
}

void sub_1B2E8515C(_Unwind_Exception *a1)
{
  OZRigWidget *v1;

  OZRigWidget::~OZRigWidget(v1);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio::OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this, const OZRigWidgetAspectRatio *a2, char a3)
{
  _QWORD *v3;

  OZRigWidget::OZRigWidget(this, a2, a3);
  *v3 = &off_1E659A7B0;
  v3[2] = &unk_1E659AC88;
  v3[6] = &unk_1E659AEE0;
}

void `non-virtual thunk to'OZRigWidgetAspectRatio::~OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this)
{
  OZRigWidget::~OZRigWidget((OZRigWidgetAspectRatio *)((char *)this - 16));
}

{
  OZRigWidget::~OZRigWidget((OZRigWidgetAspectRatio *)((char *)this - 48));
}

{
  OZRigWidget::~OZRigWidget((OZRigWidgetAspectRatio *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRigWidget::~OZRigWidget((OZRigWidgetAspectRatio *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

void OZRigWidgetAspectRatio::~OZRigWidgetAspectRatio(OZRigWidgetAspectRatio *this)
{
  OZRigWidget::~OZRigWidget(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZRigWidgetAspectRatio::parseEnd(OZRigWidgetAspectRatio *this, PCSerializerReadStream *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  const CMTime *v6;
  uint64_t v7;
  double v8;
  PCString v10;

  v4 = (uint64_t *)*((_QWORD *)this + 191);
  v5 = (uint64_t *)*((_QWORD *)this + 192);
  if (v4 != v5)
  {
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v7 = *v4;
      OZChannel::getValueAsDouble((OZChannel *)(*v4 + 136), v6, 0.0);
      OZRigWidgetAspectRatio::GetNameForAspectRatio(v8, &v10);
      OZChannelBase::setName((OZChannelBase *)(v7 + 8), &v10, 0);
      PCString::~PCString(&v10);
      ++v4;
    }
    while (v4 != v5);
  }
  return OZRigWidget::parseEnd((OZChannel **)this, a2);
}

void sub_1B2E852C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio::GetNameForAspectRatio(double a1@<D0>, PCString *a2@<X8>)
{
  unsigned __int8 v5;
  uint64_t i;
  __CFString *v7;
  char *v8;
  PCString v9;
  PCString v10;

  if ((v5 & 1) == 0
  {
    OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[0] = 0x3FF5555555555555;
    PCURL::PCURL((PCURL *)&unk_1ED4D9340, CFSTR("Rig Aspect Ratio 4:3"));
    qword_1ED4D9348 = 0x3FF8000000000000;
    PCURL::PCURL((PCURL *)&unk_1ED4D9350, CFSTR("Rig Aspect Ratio 3:2"));
    qword_1ED4D9358 = 0x3FFC71C71C71C71CLL;
    PCURL::PCURL((PCURL *)&unk_1ED4D9360, CFSTR("Rig Aspect Ratio 16:9"));
    qword_1ED4D9368 = 0x3FFD22C3F35BA784;
    PCURL::PCURL((PCURL *)&unk_1ED4D9370, CFSTR("Rig Aspect Ratio 1.8:1"));
    qword_1ED4D9378 = 0x3FF0000000000000;
    PCURL::PCURL((PCURL *)&unk_1ED4D9380, CFSTR("Rig Aspect Ratio 1:1"));
    qword_1ED4D9388 = 0x3FE2000000000000;
    PCURL::PCURL((PCURL *)&unk_1ED4D9390, CFSTR("Rig Aspect Ratio 9:16"));
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_1B2737000);
  }
  for (i = 0; i != 12; i += 2)
  {
    if (vabdd_f64(a1, *(double *)&OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[i]) < 0.01)
    {
      PCString::PCString(a2, (const PCString *)&OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[i + 1]);
      return;
    }
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Rig Aspect Ratio Custom Format"));
  v7 = PCString::cf_str(&v9);
  PCURL::PCURL((PCURL *)&v10, v7);
  PCString::~PCString(&v9);
  v8 = PCString::createVerifiedFormatString(&v10, "%f");
  if (v8)
  {
    PCString::sprintf(a2, v8, *(_QWORD *)&a1);
    free(v8);
  }
  PCString::~PCString(&v10);
}

void sub_1B2E8555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12)
{
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRigWidgetAspectRatio::parseEnd(OZRigWidgetAspectRatio *this, PCSerializerReadStream *a2)
{
  return OZRigWidgetAspectRatio::parseEnd((OZRigWidgetAspectRatio *)((char *)this - 48), a2);
}

uint64_t OZRigWidgetAspectRatio::didFinishLoadingIntoMotionEffect(OZRigWidgetAspectRatio *this)
{
  OZRigWidget::copyTargetChansToActiveSnapshot(this);
  return OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)this);
}

uint64_t `non-virtual thunk to'OZRigWidgetAspectRatio::didFinishLoadingIntoMotionEffect(OZRigWidgetAspectRatio *this)
{
  char *v1;

  v1 = (char *)this - 16;
  OZRigWidget::copyTargetChansToActiveSnapshot((OZRigWidgetAspectRatio *)((char *)this - 16));
  return OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)v1);
}

void OZRigWidgetAspectRatio::setTargetDisplayAspectRatio(OZRigWidgetAspectRatio *this, double a2, int a3)
{
  uint64_t CurrentSnapshot;
  unsigned int v6;

  (*(void (**)(_QWORD, _QWORD, _QWORD, double))(**((_QWORD **)this + 136) + 712))(*((_QWORD *)this + 136), MEMORY[0x1E0CA2E68], 0, a2);
  CurrentSnapshot = OZRigWidget::getCurrentSnapshot((OZChannel **)this);
  if (CurrentSnapshot)
    v6 = *(_DWORD *)(CurrentSnapshot + 32);
  else
    v6 = 0;
  OZRigWidget::setActiveSnapshot(this, v6, a3);
}

void __cxx_global_array_dtor_1()
{
  uint64_t i;

  for (i = 0xBu; i != -1; i -= 2)
    PCString::~PCString((PCString *)&OZRigWidgetAspectRatio::GetNameForAspectRatio(double)::gRatioToNameMap[i]);
}

void OZRigSnapshot::OZRigSnapshot(OZRigSnapshot *this, OZChannelFolder *a2, unsigned int a3)
{
  OZChannelFolder *v6;
  OZRigSnapshot::OZRigSnapshot_valueChanImpl *v7;
  OZChannelImpl *Instance;
  OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *v9;
  OZChannelImpl *v10;
  PCString v11;
  PCString v12;

  *(_QWORD *)this = &off_1E659AF50;
  v6 = (OZChannelFolder *)((char *)this + 8);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Rig Snapshot Root"));
  OZChannelFolder::OZChannelFolder(v6, &v12, a2, a3, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Rig Snapshot Value"));
  Instance = (OZChannelImpl *)OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(v7);
  OZChannelDouble::OZChannelDouble((OZRigSnapshot *)((char *)this + 136), 0.0, &v12, v6, 1u, 0, Instance, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Rig Snapshot Interpolation Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Rig Snapshot Interpolation"));
  v10 = (OZChannelImpl *)OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(v9);
  OZChannelEnum::OZChannelEnum((OZRigSnapshot *)((char *)this + 288), 1u, &v12, &v11, v6, 2u, 0, v10, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
}

void sub_1B2E8580C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannel *v13;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void OZRigSnapshot::OZRigSnapshot(OZRigSnapshot *this, const OZRigSnapshot *a2, OZChannelFolder *a3)
{
  OZChannel *v5;
  OZChannelFolder *v6;

  *(_QWORD *)this = &off_1E659AF50;
  v5 = (OZChannel *)((char *)this + 136);
  v6 = (OZChannelFolder *)((char *)this + 8);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8), (const OZChannelFolder *)((char *)a2 + 8), a3);
  OZChannel::OZChannel(v5, (const OZChannelBase *)((char *)a2 + 136), v6);
  *((_QWORD *)this + 17) = &off_1E6551358;
  *((_QWORD *)this + 19) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZRigSnapshot *)((char *)this + 288), (const OZRigSnapshot *)((char *)a2 + 288), v6);
}

void sub_1B2E858F8(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannel *v2;

  OZChannel::~OZChannel(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZRigSnapshot::~OZRigSnapshot(OZRigSnapshot *this)
{
  OZChannelBase *v2;
  OZChannelFolder *v3;

  *(_QWORD *)this = &off_1E659AF50;
  v2 = (OZChannelBase *)((char *)this + 8);
  v3 = (OZChannelFolder *)*((_QWORD *)this + 7);
  if (v3)
    OZChannelFolder::removeDescendant(v3, v2);
  OZChannelEnum::~OZChannelEnum((OZRigSnapshot *)((char *)this + 288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 136));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)v2);
}

{
  OZRigSnapshot::~OZRigSnapshot(this);
  JUMPOUT(0x1B5E29170);
}

double OZRigSnapshot::applyInterpolation(OZRigSnapshot *this, double a2)
{
  double v3;
  int ValueAsInt;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;

  v3 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 288), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt)
  {
    if (ValueAsInt == 2)
    {
      v13 = 0.0;
      PCMath::easeInOut(&v13, a2, 0.5, 0.5, 0.0, 1.0, 0, v6);
      return v13;
    }
    else
    {
      if (ValueAsInt != 1)
      {
        PCPrint("File %s, line %d should not have been reached:\n\t", v5, (uint64_t)v6, v7, v8, v9, v10, v11, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZRigSnapshot.cpp");
        pcAbortImpl();
      }
      return a2;
    }
  }
  return v3;
}

uint64_t OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(OZRigSnapshot::OZRigSnapshot_valueChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::OZRigSnapshot_valueChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::OZRigSnapshot_valueChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigSnapshot::OZRigSnapshot_valueChanImpl::_OZRigSnapshot_valueChan;
}

void std::__call_once_param<std::tuple<OZRigSnapshot::OZRigSnapshot_valueChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigSnapshot::OZRigSnapshot_valueChanImpl *v0;

  if (!OZRigSnapshot::OZRigSnapshot_valueChanImpl::_OZRigSnapshot_valueChan)
  {
    v0 = (OZRigSnapshot::OZRigSnapshot_valueChanImpl *)operator new();
    OZRigSnapshot::OZRigSnapshot_valueChanImpl::OZRigSnapshot_valueChanImpl(v0);
    OZRigSnapshot::OZRigSnapshot_valueChanImpl::_OZRigSnapshot_valueChan = (uint64_t)v0;
  }
}

void sub_1B2E85AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZRigSnapshot::OZRigSnapshot_valueChanImpl *OZRigSnapshot::OZRigSnapshot_valueChanImpl::OZRigSnapshot_valueChanImpl(OZRigSnapshot::OZRigSnapshot_valueChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZRigSnapshot::OZRigSnapshot_valueChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659AF80;
  *((_QWORD *)this + 5) = &unk_1E659AFA0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E85BB0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::OZRigSnapshot_interpolationChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::OZRigSnapshot_interpolationChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::_OZRigSnapshot_interpolationChan;
}

void std::__call_once_param<std::tuple<OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *v0;

  if (!OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::_OZRigSnapshot_interpolationChan)
  {
    v0 = (OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *)operator new();
    OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::OZRigSnapshot_interpolationChanImpl(v0);
    OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::_OZRigSnapshot_interpolationChan = (uint64_t)v0;
  }
}

void sub_1B2E85C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *OZRigSnapshot::OZRigSnapshot_interpolationChanImpl::OZRigSnapshot_interpolationChanImpl(OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((OZRigSnapshot::OZRigSnapshot_interpolationChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659AFF8;
  *((_QWORD *)this + 5) = &unk_1E659B018;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E85D2C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

double FaceTextureDOD@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1B355F220;
  return result;
}

uint64_t ApplyMetalTextureToNode(void *a1, _QWORD *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_msgSend((id)objc_msgSend(a1, "geometry"), "firstMaterial");
  objc_msgSend(v5, "setLightingModelName:", a3);
  objc_msgSend((id)objc_msgSend(v5, "specular"), "setIntensity:", 0.2);
  objc_msgSend((id)objc_msgSend(v5, "diffuse"), "setContents:", *a2);
  objc_msgSend(v5, "setLitPerPixel:", 1);
  return objc_msgSend(v5, "setDoubleSided:", 1);
}

void ImageSourceTransformPairs(OZChannelBase *this@<X1>, OZChannelImageWithOptions ***a2@<X0>, uint64_t *a3@<X8>)
{
  OZChannelImageWithOptions **v3;
  OZChannelImageWithOptions **v4;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  PCSharedCount v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      MakeImageSourceTransformPair(*v3, this, (uint64_t)&v15);
      v7 = a3[1];
      if (v7 >= a3[2])
      {
        v14 = std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__push_back_slow_path<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>(a3, (uint64_t)&v15);
      }
      else
      {
        *(_QWORD *)v7 = v15;
        PCSharedCount::PCSharedCount((PCSharedCount *)(v7 + 8), &v16);
        v8 = v20;
        v10 = v17;
        v9 = v18;
        *(_OWORD *)(v7 + 48) = v19;
        *(_OWORD *)(v7 + 64) = v8;
        *(_OWORD *)(v7 + 16) = v10;
        *(_OWORD *)(v7 + 32) = v9;
        v11 = v21;
        v12 = v22;
        v13 = v24;
        *(_OWORD *)(v7 + 112) = v23;
        *(_OWORD *)(v7 + 128) = v13;
        *(_OWORD *)(v7 + 80) = v11;
        *(_OWORD *)(v7 + 96) = v12;
        v14 = v7 + 144;
        a3[1] = v7 + 144;
      }
      a3[1] = v14;
      PCSharedCount::~PCSharedCount(&v16);
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1B2E866B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  PCSharedCount *v9;

  PCSharedCount::~PCSharedCount(v9);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void MakeImageSourceTransformPair(OZChannelImageWithOptions *a1@<X0>, OZChannelBase *this@<X1>, uint64_t a3@<X8>)
{
  LiGroup *v6;
  const void *ImageNode;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CMTime v12;
  uint64_t v13;
  PCSharedCount v14;
  LiGroup *v15;
  PCSharedCount v16[177];
  _BYTE v17[64];
  _QWORD v18[20];
  _QWORD v19[10];
  _BYTE v20[208];
  PCString v21;

  OZChannelBase::setRangeName(this, &v21);
  v6 = (LiGroup *)operator new();
  LiGroup::LiGroup(v6);
  v15 = v6;
  PCSharedCount::PCSharedCount(v16, (LiGroup *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  LiGraphBuilder::LiGraphBuilder(v20, &v15, &v21);
  PCSharedCount::~PCSharedCount(v16);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v17);
  v19[9] = v20;
  ImageNode = OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)a1 + 136));
  OZRenderParams::OZRenderParams((OZRenderParams *)&v15, (const OZRenderParams *)this);
  (*(void (**)(uint64_t *__return_ptr, const void *, LiGroup **, _BYTE *, uint64_t))(*(_QWORD *)ImageNode
                                                                                            + 152))(&v13, ImageNode, &v15, v17, 1);
  *(_OWORD *)&v12.value = *(_OWORD *)&this->var0;
  v12.epoch = (CMTimeEpoch)this->var2;
  OZChannel::getValueAsDouble((OZChannel *)a1 + 5, &v12, 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)a1 + 6, &v12, 0.0);
  v11 = v10;
  *(_QWORD *)a3 = v13;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 8), &v14);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = v9;
  *(_OWORD *)(a3 + 48) = xmmword_1B304EEE0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = v11;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_QWORD *)(a3 + 136) = 0x3FF0000000000000;
  PCSharedCount::~PCSharedCount(&v14);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v15);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v19);
  std::__list_imp<unsigned int>::clear(v18);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v20);
}

void sub_1B2E86890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  PCSharedCount v7;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7.var0 = va_arg(va1, PC_Sp_counted_base *);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x6A0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x600]);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x6F0]);
  _Unwind_Resume(a1);
}

uint64_t HGNodeForImageSourceTransformPair@<X0>(LiAgent *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, HGNode **a4@<X8>)
{
  HGXForm *v7;
  HGNode *v8;
  HGTransform *v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[24];
  float64x2_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  LiAgent::getHelium(this, *(LiImageSource **)a2, a4);
  v7 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v7);
  (*(void (**)(HGXForm *, _QWORD, HGNode *))(*(_QWORD *)v7 + 120))(v7, 0, *a4);
  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  *(_QWORD *)&v13[16] = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v12 = 0u;
  *(_OWORD *)v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v18 = 0u;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v11, (float64x2_t)COERCE_UNSIGNED_INT64((double)*(int *)(a3 + 8) * 0.5), 0.0 - (double)*(int *)(a3 + 12) * 0.5, 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v11, (double *)(a2 + 16));
  *(float64x2_t *)&v13[8] = vnegq_f64(*(float64x2_t *)&v13[8]);
  v14 = vnegq_f64(v14);
  PGHelium::convertPCMatrix44((__int128 *)&v11, &v10);
  (*(void (**)(HGXForm *, HGTransform *))(*(_QWORD *)v7 + 576))(v7, v10);
  v8 = *a4;
  if (*a4 != (HGNode *)v7)
  {
    if (v8)
      (*(void (**)(HGNode *))(*(_QWORD *)v8 + 24))(v8);
    *a4 = (HGNode *)v7;
    (*(void (**)(HGXForm *))(*(_QWORD *)v7 + 16))(v7);
  }
  if (v10)
    (*(void (**)(HGTransform *))(*(_QWORD *)v10 + 24))(v10);
  return (*(uint64_t (**)(HGXForm *))(*(_QWORD *)v7 + 24))(v7);
}

void sub_1B2E86A74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__push_back_slow_path<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  PCSharedCount *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v21[2];
  PCSharedCount *v22;
  char *v23;
  uint64_t *v24;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xE38E38E38E38E3)
    v9 = 0x1C71C71C71C71C7;
  else
    v9 = v5;
  v24 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (PCSharedCount *)&v10[144 * v4];
  v21[0] = v10;
  v21[1] = v11;
  v22 = v11;
  v23 = &v10[144 * v9];
  v11->var0 = *(PC_Sp_counted_base **)a2;
  PCSharedCount::PCSharedCount(v11 + 1, (const PCSharedCount *)(a2 + 8));
  v12 = &v10[144 * v4];
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v12 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v12 + 2) = v15;
  *((_OWORD *)v12 + 3) = v13;
  *((_OWORD *)v12 + 4) = v14;
  v16 = *(_OWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 96);
  v18 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v12 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v12 + 8) = v18;
  *((_OWORD *)v12 + 5) = v16;
  *((_OWORD *)v12 + 6) = v17;
  v22 += 18;
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__swap_out_circular_buffer(a1, v21);
  v19 = a1[1];
  std::__split_buffer<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::~__split_buffer((uint64_t)v21);
  return v19;
}

void sub_1B2E86C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>,std::reverse_iterator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(a7 + v11 - 144) = *(_QWORD *)(a3 + v11 - 144);
      PCSharedCount::PCSharedCount((PCSharedCount *)(a7 + v11 - 136), (const PCSharedCount *)(a3 + v11 - 136));
      v13 = *(_OWORD *)(a3 + v11 - 128);
      v14 = *(_OWORD *)(a3 + v11 - 112);
      v15 = *(_OWORD *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 96) = *(_OWORD *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 80) = v15;
      *(_OWORD *)(v12 - 128) = v13;
      *(_OWORD *)(v12 - 112) = v14;
      v16 = *(_OWORD *)(a3 + v11 - 64);
      v17 = *(_OWORD *)(a3 + v11 - 48);
      v18 = *(_OWORD *)(a3 + v11 - 16);
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(a3 + v11 - 32);
      *(_OWORD *)(v12 - 16) = v18;
      *(_OWORD *)(v12 - 64) = v16;
      *(_OWORD *)(v12 - 48) = v17;
      v11 -= 144;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B2E86D50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 8;
    do
    {
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v4 + v2));
      v2 += 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    PCSharedCount::~PCSharedCount((PCSharedCount *)(i - 136));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void OZRigBehavior::OZRigBehavior(OZRigBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  __n128 v6;
  PCString v7;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E659B070;
  v5[2] = &unk_1E659B3B8;
  v5[6] = &unk_1E659B610;
  v5[42] = &unk_1E659B668;
  v5[67] = &unk_1E659B690;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 112));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Rig Behavior Widget Ref"));
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZRigBehavior *)((char *)this + 1000), &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Rig Behavior Snapshots"));
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZRigBehavior *)((char *)this + 1208), &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 2u);
  PCString::~PCString(&v7);
  *((_WORD *)this + 668) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  v6 = (__n128)xmmword_1B3053B20;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1000, &v6);
  *((_BYTE *)this + 1201) = 0;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1000, 0);
  *((_BYTE *)this + 888) = 0;
}

void sub_1B2E86F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  OZSingleChannelBehavior *v12;
  std::mutex *v13;
  OZChanObjectRefWithPicker *v14;

  PCString::~PCString(&a12);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v14);
  PCSharedMutex::~PCSharedMutex(v13);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v12);
  _Unwind_Resume(a1);
}

void OZRigBehavior::OZRigBehavior(OZRigBehavior *this, const OZRigBehavior *a2, char a3)
{
  _QWORD *v5;
  __int128 v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *v5 = &off_1E659B070;
  v5[2] = &unk_1E659B3B8;
  v5[6] = &unk_1E659B610;
  v5[42] = &unk_1E659B668;
  v5[67] = &unk_1E659B690;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 112));
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZRigBehavior *)((char *)this + 1000), (const OZRigBehavior *)((char *)a2 + 1000), (OZChannelFolder *)((char *)this + 56));
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZRigBehavior *)((char *)this + 1208), (const OZRigBehavior *)((char *)a2 + 1208), (OZChannelFolder *)((char *)this + 56));
  *((_WORD *)this + 668) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  v6 = xmmword_1B3053B20;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1000, (__n128 *)&v6);
  *((_BYTE *)this + 1201) = 0;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1000, 0);
  OZRigBehavior::copy(this, a2);
  *((_BYTE *)this + 888) = 0;
}

void sub_1B2E8706C(_Unwind_Exception *a1)
{
  OZSingleChannelBehavior *v1;
  std::mutex *v2;
  OZChanObjectRefWithPicker *v3;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v3);
  PCSharedMutex::~PCSharedMutex(v2);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

uint64_t OZRigBehavior::copy(OZRigBehavior *this, const OZBehavior *lpsrc)
{
  uint64_t result;
  uint64_t v4;

  if (result)
  {
    v4 = result;
    OZChanObjectRefWithPicker::operator=((uint64_t)this + 1000, result + 1000);
    result = OZChannelFolder::operator=((uint64_t)this + 1208);
    *((_BYTE *)this + 1336) = *(_BYTE *)(v4 + 1336);
  }
  return result;
}

void OZRigBehavior::~OZRigBehavior(std::mutex *this)
{
  this->__m_.__sig = (uint64_t)&off_1E659B070;
  *(_QWORD *)&this->__m_.__opaque[8] = &unk_1E659B3B8;
  *(_QWORD *)&this->__m_.__opaque[40] = &unk_1E659B610;
  *(_QWORD *)&this[5].__m_.__opaque[8] = &unk_1E659B668;
  *(_QWORD *)&this[8].__m_.__opaque[16] = &unk_1E659B690;
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelVaryingFolder *)&this[18].__m_.__opaque[48]);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanObjectRefWithPicker *)&this[15].__m_.__opaque[32]);
  PCSharedMutex::~PCSharedMutex(this + 14);
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)this);
}

{
  OZRigBehavior::~OZRigBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZRigBehavior::~OZRigBehavior(OZRigBehavior *this)
{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 16));
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 48));
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 336));
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 536));
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZRigBehavior::~OZRigBehavior((std::mutex *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZRigBehavior::parseBegin(OZRigBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v2;
  BOOL v3;

  v2 = *((_DWORD *)a2 + 26);
  if (v2 < 5 || (v2 == 5 ? (v3 = *((_DWORD *)a2 + 27) > 0xCu) : (v3 = 1), !v3))
    *((_BYTE *)this + 1336) = 1;
  return OZSingleChannelBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'OZRigBehavior::parseBegin(OZRigBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v2;
  BOOL v3;

  v2 = *((_DWORD *)a2 + 26);
  if (v2 < 5 || (v2 == 5 ? (v3 = *((_DWORD *)a2 + 27) > 0xCu) : (v3 = 1), !v3))
    *((_BYTE *)this + 1288) = 1;
  return OZSingleChannelBehavior::parseBegin((OZRigBehavior *)((char *)this - 48), a2);
}

OZChannelBase *OZRigBehavior::didFinishLoadingIntoScene(OZRigBehavior *this)
{
  char *v2;
  void *Widget;
  OZChannelBase *result;
  uint64_t v5;
  OZChannelBase *v6;

  v2 = (char *)this + 16;
  OZRigBehavior::registerWithWidget(this);
  OZRigBehavior::adjustToSnapshotCount(this);
  if (*((_BYTE *)this + 1336))
  {
    OZRigBehavior::adjustTo2DChannelsPromotedTo3D(this);
    *((_BYTE *)this + 1336) = 0;
  }
  Widget = OZRigBehavior::getWidget(this);
  result = (OZChannelBase *)(*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 2) + 24))(v2, 0, 1);
  if ((Widget != 0) != (_DWORD)result)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = (OZChannelBase *)((char *)this + 56);
    if (Widget)
    {
      (*(void (**)(char *, uint64_t))(v5 + 32))(v2, 1);
      return OZChannelBase::resetFlag(v6, 8, 1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 40))(v2, 1);
      return OZChannelBase::setFlag(v6, 8, 1);
    }
  }
  return result;
}

_QWORD *OZRigBehavior::registerWithWidget(OZRigBehavior *this)
{
  _QWORD *result;

  result = (_QWORD *)OZSingleChannelBehavior::getChanBase(this);
  if (result)
  {
    result = OZRigBehavior::getWidget(this);
    if (result)
      return OZRigWidget::registerRigBehavior(result, (uint64_t)this);
  }
  return result;
}

void OZRigBehavior::adjustToSnapshotCount(OZRigBehavior *this)
{
  OZRigWidget *Widget;
  int v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;

  Widget = (OZRigWidget *)OZRigBehavior::getWidget(this);
  if (OZSingleChannelBehavior::getChanBase(this) && Widget)
  {
    v3 = OZRigWidget::numberOfSnapshots(Widget);
    v4 = (_QWORD *)*((_QWORD *)this + 165);
    if (v4)
      v4 = (_QWORD *)((v4[1] - *v4) >> 3);
    if (v3 != (_DWORD)v4)
    {
      v5 = (uint64_t *)*((_QWORD *)Widget + 191);
      for (i = (uint64_t *)*((_QWORD *)Widget + 192); v5 != i; ++v5)
      {
        v7 = *v5;
        if (!OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), *(_DWORD *)(*v5 + 32)))
          OZRigBehavior::createDefaultSnapshotHelper(this, *(_DWORD *)(v7 + 32), 0);
      }
      OZRigBehavior::sortSnapshotChannels(this);
    }
  }
}

void OZRigBehavior::adjustTo2DChannelsPromotedTo3D(OZRigBehavior *this)
{
  uint64_t ChanBase;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const OZChannelBase *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  const OZChannelBase **v20;
  const OZChannelBase **v21;
  const OZChannelBase *v22;
  OZChannelBase *DefaultSnapshotHelper;
  double v24;
  const OZChannelBase **v25;
  const OZChannelBase **v26;
  uint64_t v27;

  ChanBase = OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase)
  {
    v3 = *((_QWORD *)this + 165);
    if (v3)
    {
      v4 = *(uint64_t **)v3;
      v5 = *(_QWORD *)(v3 + 8);
      v6 = v5 - *(_QWORD *)v3;
      if ((v6 & 0x7FFFFFFF8) != 0)
      {
        v7 = (const OZChannelBase *)ChanBase;
        v8 = *v4;
        v9 = *(_DWORD **)(ChanBase + 8);
        v11 = v9[2];
        v10 = v9[3];
        v13 = v9[4];
        v12 = v9[5];
        v14 = v11 == 291593097 && v10 == -876591041;
        v15 = v14 && v13 == -1188129301;
        v16 = v15 && v12 == 209773980;
        if (v16
          && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v8 + 8) + 8), (int32x4_t)xmmword_1B3555850)))) & 1) == 0|| (v11 == 1608349850 ? (v17 = v10 == -1900789225) : (v17 = 0), v17 ? (v18 = v13 == -1416984716) : (v18 = 0), v18 ? (v19 = v12 == -1370552087) : (v19 = 0), v19&& (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v8 + 8) + 8), (int32x4_t)xmmword_1B3555800)))) & 1) == 0))
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&v25, v4, v5, v6 >> 3);
          OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 1208), 1);
          v20 = v25;
          v21 = v26;
          if (v25 != v26)
          {
            do
            {
              v22 = *v20;
              DefaultSnapshotHelper = OZRigBehavior::createDefaultSnapshotHelper(this, (*v20)->var3, v7);
              v24 = OZRigBehavior::copyValues(this, v22, DefaultSnapshotHelper);
              (*((void (**)(const OZChannelBase *, double))v22->var0 + 1))(v22, v24);
              ++v20;
            }
            while (v20 != v21);
            v20 = v25;
          }
          if (v20)
          {
            v26 = v20;
            operator delete(v20);
          }
        }
      }
    }
  }
}

void sub_1B2E8763C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *OZRigBehavior::getWidget(OZRigBehavior *this)
{
  void *result;

  result = (void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1000));
  if (result)
  return result;
}

OZChannelBase *`non-virtual thunk to'OZRigBehavior::didFinishLoadingIntoScene(OZRigBehavior *this)
{
  return OZRigBehavior::didFinishLoadingIntoScene((OZRigBehavior *)((char *)this - 16));
}

_QWORD *OZRigBehavior::didAddToNode(OZRigBehavior *this, OZSceneNode *a2)
{
  OZSingleChannelBehavior::didAddToNode(this, a2);
  return OZRigBehavior::registerWithWidget(this);
}

void OZRigBehavior::willRemove(OZRigBehavior *this)
{
  OZRigBehavior::unregisterWithWidget(this);
  OZSingleChannelBehavior::willRemove((PCString *)this);
}

void OZRigBehavior::unregisterWithWidget(OZRigBehavior *this)
{
  _QWORD *Widget;

  Widget = OZRigBehavior::getWidget(this);
  if (Widget)
    OZRigWidget::unregisterRigBehavior(Widget, (uint64_t)this);
}

_QWORD *OZRigBehavior::didAddSceneNodeToScene(OZRigBehavior *this, OZScene *a2)
{
  OZSingleChannelBehavior::didAddSceneNodeToScene(this, a2);
  return OZRigBehavior::registerWithWidget(this);
}

uint64_t OZRigBehavior::willRemoveSceneNodeFromScene(OZRigBehavior *this, OZScene *a2)
{
  OZRigBehavior::unregisterWithWidget(this);
  return OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);
}

void OZRigBehavior::willDeleteObject(OZRigBehavior *this, OZObjectManipulator *a2)
{
  _QWORD *Widget;

  if ((OZObjectManipulator *)OZSingleChannelBehavior::getAffectedObject(this) == a2)
  {
    Widget = OZRigBehavior::getWidget(this);
    if (Widget)
      OZRigWidget::unregisterRigBehavior(Widget, (uint64_t)this);
  }
  OZSingleChannelBehavior::willDeleteObject(this, a2);
}

OZObjectManipulator *OZRigBehavior::didUndoDeleteOfObject(OZRigBehavior *this, OZObjectManipulator *a2)
{
  OZObjectManipulator *result;

  OZSingleChannelBehavior::didUndoDeleteOfObject(this, a2);
  result = (OZObjectManipulator *)OZSingleChannelBehavior::getAffectedObject(this);
  if (result == a2)
    return (OZObjectManipulator *)OZRigBehavior::registerWithWidget(this);
  return result;
}

void OZRigBehavior::willDeleteMaterialLayer(OZRigBehavior *this, OZChannelBase *a2)
{
  OZChannelBase *ChanBase;

  ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase && OZChannelBase::isDescendantOf(ChanBase, a2))
    OZRigBehavior::unregisterWithWidget(this);
  OZSingleChannelBehavior::willDeleteMaterialLayer(this, a2);
}

void OZRigBehavior::willDeleteChannel(OZRigBehavior *this, OZChannelBase *a2)
{
  OZChannelBase *ChanBase;
  _QWORD *Widget;

  ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (ChanBase)
  {
    if (ChanBase == a2)
    {
      Widget = OZRigBehavior::getWidget(this);
      if (Widget)
        OZRigWidget::unregisterRigBehavior(Widget, (uint64_t)this);
    }
  }
  OZSingleChannelBehavior::willDeleteChannel((PCString *)this, a2);
}

OZChannelBase *OZRigBehavior::didUndoDeleteChannel(unsigned __int8 **this, OZChannelBase *a2)
{
  OZChannelBase *result;

  OZSingleChannelBehavior::didUndoDeleteChannel(this, a2);
  result = (OZChannelBase *)OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this);
  if (result)
  {
    if (result == a2)
      return (OZChannelBase *)OZRigBehavior::registerWithWidget((OZRigBehavior *)this);
  }
  return result;
}

uint64_t OZRigBehavior::willUndoReorder(uint64_t this)
{
  *(_BYTE *)(this + 1337) = 1;
  return this;
}

uint64_t OZRigBehavior::didUndoReorder(uint64_t this)
{
  *(_BYTE *)(this + 1337) = 0;
  return this;
}

void OZRigBehavior::getEvalDepChansForRef(int a1, int a2, void *lpsrc, uint64_t *a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (lpsrc)
  {
    if (v5)
    {
      v6 = v5[136];
      v7 = operator new(0x18uLL);
      v7[1] = a4;
      v7[2] = v6;
      v8 = *a4;
      *v7 = *a4;
      *(_QWORD *)(v8 + 8) = v7;
      *a4 = (uint64_t)v7;
      ++a4[2];
    }
  }
}

__n128 OZRigBehavior::getTimeExtent@<Q0>(OZRigBehavior *this@<X0>, uint64_t a2@<X8>)
{
  const void *AffectedObject;
  const void *v5;
  void *v6;
  void *v7;
  void (*v8)(void);
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  AffectedObject = (const void *)OZSingleChannelBehavior::getAffectedObject(this);
  if (AffectedObject)
  {
    v5 = AffectedObject;
    if (!v6)
    {
      if (v7)
      {
        v8 = *(void (**)(void))(*(_QWORD *)v7 + 608);
      }
      else
      {
        if (v12)
          v8 = *(void (**)(void))(*(_QWORD *)v12 + 592);
        else
          v8 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(const void *))(*(_QWORD *)v5 + 216))(v5)
                                + 712);
      }
      goto LABEL_7;
    }
LABEL_6:
    v8 = *(void (**)(void))(*(_QWORD *)v6 + 1128);
LABEL_7:
    v8();
    return result;
  }
  v6 = (void *)(*(uint64_t (**)(OZRigBehavior *))(*(_QWORD *)this + 328))(this);
  if (v6)
    goto LABEL_6;
  v10 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(a2 + 16) = v11;
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = v11;
  return result;
}

_QWORD **OZRigBehavior::calcStaticHash(OZRigBehavior *a1, void *a2, uint64_t **a3)
{
  _QWORD **result;

  OZBehavior::calcStaticHash((uint64_t)a1, a2, a3);
  result = (_QWORD **)OZRigBehavior::getWidget(a1);
  if (result)
    return (_QWORD **)(*(uint64_t (**)(_QWORD *, void *, uint64_t, _QWORD, uint64_t))(*result[136] + 408))(result[136], a2, 1, 0, 1);
  return result;
}

_QWORD **`non-virtual thunk to'OZRigBehavior::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZRigBehavior::calcStaticHash((OZRigBehavior *)(a1 - 16), a2, a3);
}

_QWORD *OZRigBehavior::calcHashForState(OZRigBehavior *a1, void *a2, CMTime *a3, uint64_t **a4)
{
  _QWORD *result;
  uint64_t v8;
  __int128 v9;
  CMTimeEpoch epoch;

  OZBehavior::calcHashForState((uint64_t)a1, a2, a3, a4);
  result = OZRigBehavior::getWidget(a1);
  if (result)
  {
    v8 = result[136];
    v9 = *(_OWORD *)&a3->value;
    epoch = a3->epoch;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, void *, __int128 *))(*(_QWORD *)v8 + 448))(v8, a2, &v9);
  }
  return result;
}

_QWORD *`non-virtual thunk to'OZRigBehavior::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZRigBehavior::calcHashForState((OZRigBehavior *)(a1 - 16), a2, a3, a4);
}

void OZRigBehavior::cacheCurrentSnapshotID(OZRigBehavior *this, const CMTime *a2)
{
  std::mutex *v4;
  OZRigWidget *Widget;
  OZChannel **v6;

  v4 = (std::mutex *)((char *)this + 896);
  PCSharedMutex::lock((std::mutex *)this + 14);
  Widget = (OZRigWidget *)OZRigBehavior::getWidget(this);
  v6 = (OZChannel **)Widget;
  if (Widget)
  {
    *((_BYTE *)this + 880) = OZRigWidget::doPassThrough(Widget, a2);
    OZRigWidget::getCurrentSnapshotIDs(v6, a2, (unsigned int *)this + 216, (unsigned int *)this + 217, (double *)this + 109);
    *((_BYTE *)this + 888) = 1;
  }
  PCSharedMutex::unlock(v4);
}

void sub_1B2E87BB8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZRigBehavior::clearCurrentSnapshotIDCache(std::mutex *this)
{
  std::mutex *v2;

  v2 = this + 14;
  PCSharedMutex::lock(this + 14);
  this[13].__m_.__opaque[48] = 0;
  PCSharedMutex::unlock(v2);
}

double OZRigBehavior::solveNode(std::mutex *this, int a2, const CMTime *a3, double a4, double a5)
{
  OZChannel **Widget;
  _QWORD *v10;
  OZChannel **v11;
  int v12;
  int v13;
  double v14;
  int v15;
  double v17;
  unsigned int v18[2];
  CMTime v19;

  Widget = (OZChannel **)OZRigBehavior::getWidget((OZRigBehavior *)this);
  if (Widget)
  {
    v10 = *(_QWORD **)&this[20].__m_.__opaque[32];
    if (v10)
    {
      if (((v10[1] - *v10) & 0x7FFFFFFF8) != 0)
      {
        v11 = Widget;
        PCSharedMutex::lock_shared(this + 14);
        if (this[13].__m_.__opaque[48])
        {
          v12 = *(_DWORD *)&this[13].__m_.__opaque[24];
          v13 = *(_DWORD *)&this[13].__m_.__opaque[28];
          v14 = *(double *)&this[13].__m_.__opaque[32];
          v15 = this[13].__m_.__opaque[40];
          PCSharedMutex::unlock_shared(this + 14);
          memset(&v19, 0, sizeof(v19));
          (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*(_QWORD *)&this[5].__m_.__opaque[48]
                                                                                             + 32)
                                                                               + 336))(&v19, *(_QWORD *)(*(_QWORD *)&this[5].__m_.__opaque[48] + 32), a3);
          if (!v15)
          {
            v18[0] = v13;
            v18[1] = v12;
            v17 = v14;
            return OZRigBehavior::getRiggedValue((OZRigBehavior *)this, a2, v12, v13, v14, &v19);
          }
        }
        else
        {
          PCSharedMutex::unlock_shared(this + 14);
          memset(&v19, 0, sizeof(v19));
          (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*(_QWORD *)&this[5].__m_.__opaque[48]
                                                                                             + 32)
                                                                               + 336))(&v19, *(_QWORD *)(*(_QWORD *)&this[5].__m_.__opaque[48] + 32), a3);
          if ((OZRigWidget::doPassThrough((OZRigWidget *)v11, a3) & 1) == 0)
          {
            v17 = 0.0;
            *(_QWORD *)v18 = 0;
            OZRigWidget::getCurrentSnapshotIDs(v11, &v19, &v18[1], v18, &v17);
            v13 = v18[0];
            v12 = v18[1];
            v14 = v17;
            return OZRigBehavior::getRiggedValue((OZRigBehavior *)this, a2, v12, v13, v14, &v19);
          }
        }
      }
    }
  }
  return a5;
}

double OZRigBehavior::getRiggedValue(OZRigBehavior *this, int a2, int a3, int a4, double a5, const CMTime *a6)
{
  __n128 TimeOffset;
  OZChannelFolder *v13;
  _BYTE *Descendant;
  _BYTE *v15;
  double v16;
  OZChannel *v17;
  uint64_t v18;
  const void *v19;
  OZChannel *v20;
  OZChannelFolder *v21;
  const void *v22;
  OZChannelFolder *v23;
  OZChannelFolder *v24;
  const void *v25;
  uint64_t v26;
  OZChannel *v27;
  unint64_t var1;
  double v29;
  double v31;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CMTime v37;
  __n128 v38;
  CMTimeEpoch v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime v43;

  memset(&v41, 0, sizeof(v41));
  TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v38);
  (*(void (**)(CMTime *__return_ptr, __n128))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 320))(&v37, TimeOffset);
  *(__n128 *)&v43.value = v38;
  v43.epoch = v39;
  v42 = v37;
  PC_CMTimeSaferSubtract(&v43, &v42, (uint64_t)&v40);
  v43 = *a6;
  v42 = v40;
  PC_CMTimeSaferAdd(&v43, &v42, (uint64_t)&v41);
  v13 = (OZChannelFolder *)((char *)this + 1208);
  Descendant = (_BYTE *)OZChannelFolder::getDescendant(v13, a3);
  v15 = Descendant;
  if (a5 != 0.0)
  {
    v18 = OZChannelFolder::getDescendant(v13, a4);
    v16 = 0.0;
    if (!v15)
      return v16;
    v19 = (const void *)v18;
    if (!v18)
      return v16;
    if ((v15[57] & 0x10) != 0)
    {
      v25 = (const void *)OZChannelFolder::getDescendant(v23, a2);
      if (v25)
      else
        v20 = 0;
      v26 = OZChannelFolder::getDescendant(v24, a2);
      if (!v26)
      {
        v27 = 0;
LABEL_18:
        var1 = (unint64_t)v20->var1;
        v36 = xmmword_1B3555A50;
        if ((OZFactory::isKindOfClass(var1, (int32x4_t *)&v36) & 1) == 0)
        {
          v35 = xmmword_1B35558F0;
          if ((OZFactory::isKindOfClass(var1, (int32x4_t *)&v35) & 1) == 0)
          {
            v34 = xmmword_1B355E8F0;
            if (!OZFactory::isKindOfClass(var1, (int32x4_t *)&v34))
            {
              OZChannel::getValueAsDouble(v20, &v41, 0.0);
              v32 = v31;
              OZChannel::getValueAsDouble(v27, &v41, 0.0);
              return v32 + (v33 - v32) * a5;
            }
          }
        }
        v17 = v20;
        goto LABEL_22;
      }
      v19 = (const void *)v26;
    }
    else
    {
    }
    goto LABEL_18;
  }
  v16 = 0.0;
  if (Descendant)
  {
    if ((Descendant[57] & 0x10) == 0)
    {
LABEL_22:
      OZChannel::getValueAsDouble(v17, &v41, 0.0);
      return v29;
    }
    v22 = (const void *)OZChannelFolder::getDescendant(v21, a2);
    if (v22)
    {
      if (v17)
        goto LABEL_22;
    }
  }
  return v16;
}

double `non-virtual thunk to'OZRigBehavior::solveNode(OZRigBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  return OZRigBehavior::solveNode((std::mutex *)((char *)this - 536), a2, a3, a4, a5);
}

BOOL OZRigBehavior::canAddToChannelAfterMismatch(OZRigBehavior *this, OZChannelBase *a2)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*((_BYTE *)this + 1337))
    return 0;
  v5 = (*(uint64_t (**)(OZRigBehavior *))(*(_QWORD *)this + 336))(this);
  if (!v5)
    return 1;
  if (!*(_BYTE *)(v5 + 1576))
    return 1;
  v6 = (uint64_t *)*((_QWORD *)this + 165);
  if (!v6)
    return 1;
  v7 = *v6;
  if (((*(_QWORD *)(*((_QWORD *)this + 165) + 8) - v7) & 0x7FFFFFFF8) == 0)
    return 1;
  v8 = *(_BYTE **)v7;
  if (a2->var1 != *(OZFactory **)(*(_QWORD *)v7 + 8))
    return 0;
  if ((v8[57] & 0x10) == 0 || (a2->var7 & 0x1000) == 0)
    return 1;
  v11 = (_QWORD *)v9[14];
  if (v11)
    v11 = (_QWORD *)((v11[1] - *v11) >> 3);
  v12 = (_QWORD *)v10[14];
  if (v12)
    v12 = (_QWORD *)((v12[1] - *v12) >> 3);
  return (_DWORD)v11 == (_DWORD)v12;
}

uint64_t OZRigBehavior::setWidget(OZRigBehavior *this, OZRigWidget *a2, double a3)
{
  LODWORD(a3) = *((_DWORD *)a2 + 20);
  return OZChannel::setValue((OZChannel *)((char *)this + 1000), MEMORY[0x1E0CA2E68], (double)*(unint64_t *)&a3, 0);
}

OZChannelBase *OZRigBehavior::createDefaultSnapshotHelper(OZRigBehavior *this, unsigned int a2, const OZChannelBase *a3)
{
  const OZChannelBase *ChanBase;
  OZChannelBase *v6;

  ChanBase = a3;
  if (!a3)
    ChanBase = (const OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  v6 = (OZChannelBase *)(*((uint64_t (**)(const OZChannelBase *))ChanBase->var0 + 31))(ChanBase);
  OZChannelBase::setFlags(v6, ChanBase->var7 & 0xFFFFFFFFFFFFFFFELL);
  OZChannelBase::setID(v6, a2);
  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 1208), v6);
  return v6;
}

const OZChannelBase *OZRigBehavior::copyTargetToSnapshot(OZRigBehavior *this, int a2)
{
  OZChannelBase *Descendant;
  const OZChannelBase *result;
  const OZChannelBase *v5;

  Descendant = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), a2);
  result = (const OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (result)
  {
    if (Descendant)
    {
      v5 = result;
      OZRigBehavior::copyScales(this, result, Descendant);
      return (const OZChannelBase *)(*((uint64_t (**)(OZChannelBase *, const OZChannelBase *))Descendant->var0
                                     + 32))(Descendant, v5);
    }
  }
  return result;
}

OZChannelInfo *OZRigBehavior::copyScales(OZRigBehavior *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  _QWORD *v4;
  OZChannel *v5;
  _QWORD *v7;
  OZChannelInfo *result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  if ((a2->var7 & 0x1000) != 0)
  {
    v9 = (uint64_t *)v7[14];
    if (v9)
    {
      v10 = (uint64_t *)*((_QWORD *)result + 14);
      v11 = *v9;
      v12 = v9[1];
      v13 = *v10;
      v14 = v10[1];
      v15 = v11 == v12 || v13 == v14;
      if (!v15)
      {
        v16 = v11 + 8;
        v17 = v13 + 8;
        do
        {
          result = (OZChannelInfo *)OZRigBehavior::copyScales(this, *(const OZChannelBase **)(v16 - 8), *(OZChannelBase **)(v17 - 8));
          if (v16 == v12)
            break;
          v16 += 8;
          v15 = v17 == v14;
          v17 += 8;
        }
        while (!v15);
      }
    }
  }
  else
  {
    if (a3)
    else
      v5 = 0;
    return OZChannel::setScale(v5, *(double *)(v4[16] + 40));
  }
  return result;
}

double OZRigBehavior::copySnapshotToTarget(OZRigBehavior *this, int a2)
{
  const OZChannelBase *Descendant;
  OZChannelBase *ChanBase;
  double result;

  Descendant = (const OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), a2);
  ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
  if (Descendant)
  {
    if (ChanBase)
      return OZRigBehavior::copyValues(this, Descendant, ChanBase);
  }
  return result;
}

double OZRigBehavior::copyValues(OZRigBehavior *this, const OZChannelBase *a2, OZChannelBase *a3)
{
  OZChannel *v4;
  OZChannel *v5;
  _QWORD *v7;
  _QWORD *v8;
  double result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  const void *CurveInterface;
  void *v20;
  void *v21;
  uint8x8_t v22;

  if ((a2->var7 & 0x1000) != 0)
  {
    v10 = (uint64_t *)v7[14];
    if (v10)
    {
      v11 = (uint64_t *)v8[14];
      v12 = *v10;
      v13 = v10[1];
      v14 = *v11;
      v15 = v11[1];
      v16 = v12 == v13 || v14 == v15;
      if (!v16)
      {
        v17 = v12 + 8;
        v18 = v14 + 8;
        do
        {
          OZRigBehavior::copyValues(this, *(const OZChannelBase **)(v17 - 8), *(OZChannelBase **)(v18 - 8));
          if (v17 == v13)
            break;
          v17 += 8;
          v16 = v18 == v15;
          v18 += 8;
        }
        while (!v16);
      }
    }
  }
  else
  {
    if (a3)
    else
      v5 = 0;
    CurveInterface = (const void *)OZChannel::getCurveInterface(v4);
    if (CurveInterface)
    else
      v20 = 0;
    v21 = (void *)OZChannel::getCurveInterface(v5);
    if (v21)
    *(_QWORD *)&result = OZCurve::operator=((uint64_t)v21, (uint64_t)v20, v22).n128_u64[0];
  }
  return result;
}

uint64_t OZRigBehavior::doesCreateAnimation(OZRigBehavior *this)
{
  uint64_t result;
  _QWORD **Widget;

  result = (uint64_t)OZRigBehavior::getWidget(this);
  if (result)
  {
    Widget = (_QWORD **)OZRigBehavior::getWidget(this);
    if (((*(uint64_t (**)(_QWORD *))(*Widget[136] + 560))(Widget[136]) & 1) != 0)
      return 1;
    else
      return (*(uint64_t (**)(char *))(*((_QWORD *)this + 151) + 560))((char *)this + 1208);
  }
  return result;
}

_QWORD *OZRigBehavior::DuplicateAffectingRigBehaviors(OZRigBehavior *this, OZObjectManipulator *a2, OZObjectManipulator *a3)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  int32x4_t *i;
  _QWORD *v10;
  unint64_t v11;
  OZSingleChannelBehavior *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void *v16;
  _QWORD *v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  int32x4_t v21;
  PCString v22;

  v5 = *(_QWORD *)((*(uint64_t (**)(OZRigBehavior *, OZObjectManipulator *, OZObjectManipulator *))(*(_QWORD *)this + 256))(this, a2, a3)+ 8);
  v21 = (int32x4_t)xmmword_1B355CFE0;
  if ((OZFactory::isKindOfClass(v5, &v21) & 1) != 0
    || (v6 = *(_QWORD *)((*(uint64_t (**)(OZRigBehavior *))(*(_QWORD *)this + 256))(this) + 8),
        v21 = (int32x4_t)xmmword_1B355CFF0,
        result = (_QWORD *)OZFactory::isKindOfClass(v6, &v21),
        (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(OZRigBehavior *))(*(_QWORD *)this + 232))(this);
    if (result)
    {
      v8 = result;
      std::list<OZBehavior *>::list(&v21, (uint64_t)(result + 125));
      for (i = (int32x4_t *)v21.i64[1]; i != &v21; i = (int32x4_t *)i->i64[1])
      {
        v10 = (_QWORD *)i[1].i64[0];
        v11 = v10[1];
        v19 = xmmword_1B3053B30;
        if (OZFactory::isKindOfClass(v11, (int32x4_t *)&v19))
        {
          if (((*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v10[2] + 24))(v10 + 2, 0, 1) & 1) != 0)
          {
            if ((OZRigBehavior *)OZSingleChannelBehavior::getAffectedObject(v12) == this)
            {
              *((_QWORD *)&v19 + 1) = 0;
              v20 = 0;
              *(_QWORD *)&v19 = (char *)&v19 + 8;
              v18 = 0;
              v13 = (*(uint64_t (**)(OZRigBehavior *))(*(_QWORD *)this + 256))(this);
              v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
              v14 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
              v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
              v22.var0 = (__CFString *)&v18;
              *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)&v19, &v18, (uint64_t)&std::piecewise_construct, (unsigned int **)&v22)+ 8) = v15;
              v16 = (const void *)(*(uint64_t (**)(_QWORD *, OZSingleChannelBehavior *, uint64_t))(**((_QWORD **)v12 + 1) + 24))(*((_QWORD **)v12 + 1), v12, 2);
              if (v16)
              else
                v17 = 0;
              (*(void (**)(_QWORD *, __int128 *))(*v17 + 552))(v17, &v19);
              (*(void (**)(_QWORD *, _QWORD *))(*v17 + 776))(v17, v8);
              PCURL::PCURL((PCURL *)&v22, CFSTR("Undo Duplicate"));
              (*(void (**)(_QWORD *, PCString *, uint64_t))(v17[2] + 176))(v17 + 2, &v22, 1);
              PCString::~PCString(&v22);
              std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v19, *((_QWORD **)&v19 + 1));
            }
          }
        }
      }
      return std::__list_imp<unsigned int>::clear(&v21);
    }
  }
  return result;
}

void sub_1B2E88874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  PCString::~PCString((PCString *)(v5 - 88));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v9);
  std::__list_imp<unsigned int>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t OZRigBehavior::addToSceneNode(OZRigBehavior *this, OZSceneNode *a2)
{
  return OZSceneNode::insertBehaviorBefore(a2, this, 0);
}

uint64_t OZRigBehavior::getChannelForSnapshot(OZRigBehavior *this, int a2)
{
  return OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 1208), a2);
}

void OZRigBehavior::sortSnapshotChannels(OZRigBehavior *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  OZChannelFolder *v5;
  OZChannelBase **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL (*v11)(const OZChannelBase *, const OZChannelBase *);

  v2 = *((_QWORD *)this + 165);
  v9 = 0;
  v10 = 0;
  v8 = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&v8, *(const void **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3);
  v3 = 126 - 2 * __clz(v9 - v8);
  v11 = chanIDLessThan;
  if (v9 == v8)
    v4 = 0;
  else
    v4 = v3;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,false>((uint64_t)v8, v9, (uint64_t (**)(uint64_t, uint64_t))&v11, v4, 1);
  v5 = (OZChannelFolder *)((char *)this + 1208);
  OZChannelFolder::removeAllDescendants((OZChannelFolder *)((char *)this + 1208), 1);
  v6 = (OZChannelBase **)v8;
  v7 = v9;
  if (v8 != v9)
  {
    do
      OZChannelFolder::push_back(v5, *v6++);
    while (v6 != (OZChannelBase **)v7);
    v6 = (OZChannelBase **)v8;
  }
  if (v6)
  {
    v9 = (uint64_t *)v6;
    operator delete(v6);
  }
}

void sub_1B2E889A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL chanIDLessThan(const OZChannelBase *a1, const OZChannelBase *a2)
{
  return a1->var3 < a2->var3;
}

uint64_t OZSingleChannelBehavior::scbIsEvalCyclic(OZSingleChannelBehavior *this)
{
  return (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 640))(this);
}

uint64_t `non-virtual thunk to'OZSingleChannelBehavior::scbIsEvalCyclic(OZSingleChannelBehavior *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 67) + 640))((char *)this - 536);
}

uint64_t `non-virtual thunk to'OZSingleChannelBehavior::getBehavior(OZSingleChannelBehavior *this)
{
  return (uint64_t)this - 536;
}

_QWORD *std::list<OZBehavior *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B2E88A84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,OZChannelBase**>((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v12 + 8) = *(_QWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v11, *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 8); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*a3)(v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(_QWORD, _QWORD))*a4)(*a2, *a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = *a1;
  if (((*a3)(*a1, *(a2 - 1)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    v11 = *v7;
    *v7 = *v4;
    *v4 = v11;
    do
    {
      v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OZChannelBase **,BOOL (*&)(OZChannelBase const*,OZChannelBase const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**,OZChannelBase**>(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != (char *)a3)
    {
      v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(_QWORD *)a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 8;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v16);
        if (v17 == v19)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v17;
          *(_QWORD *)v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              v16 = 2 * v11 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))*a2)(*v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v14;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(_QWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(OZChannelBase const*,OZChannelBase const*),OZChannelBase**>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = (*a3)(*v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = (*a3)(*v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

void OZLinkChannelExpression::OZLinkChannelExpression(OZLinkChannelExpression *this, OZLinkBehavior *a2, const OZChannelRef *a3, int a4)
{
  *(_QWORD *)this = &off_1E659B708;
  *((_QWORD *)this + 1) = a2;
  OZChannelRef::OZChannelRef((std::string *)((char *)this + 16), a3);
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 64));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 88));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 112));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (a4)
    OZLinkChannelExpression::createParamChannels(this);
}

void sub_1B2E899AC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;

  OZChannelRef::~OZChannelRef(v4);
  OZChannelRef::~OZChannelRef(v3);
  OZChannelRef::~OZChannelRef(v2);
  OZChannelRef::~OZChannelRef(v1);
  _Unwind_Resume(a1);
}

void OZLinkChannelExpression::createParamChannels(OZLinkChannelExpression *this)
{
  const PCString *SourceChannel;
  OZChannelDouble *v3;
  PCString *v4;
  unsigned int NextUniqueID;
  OZChannelRef *Ref;
  OZChannelDouble *v7;
  PCString *v8;
  unsigned int v9;
  OZChannelRef *v10;
  OZChannelDouble *v11;
  PCString *v12;
  unsigned int v13;
  OZChannelRef *v14;
  PCString v15;
  PCString v16;
  PCString v17;
  PCString v18;
  PCSharedCount v19;

  PCSharedCount::PCSharedCount(&v19);
  SourceChannel = (const PCString *)OZLinkChannelExpression::getSourceChannel(this);
  if (SourceChannel)
    PCString::set((PCString *)&v19, SourceChannel + 4);
  else
    PCString::set((PCString *)&v19, "source");
  v3 = (OZChannelDouble *)operator new();
  PCString::PCString(&v16, " ");
  PCString::PCString(&v17, (const PCString *)&v19);
  PCString::append(&v17, &v16);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Link Behavior Value Offset"));
  PCString::PCString(&v18, &v17);
  v4 = PCString::append(&v18, &v15);
  NextUniqueID = OZChannelBase::getNextUniqueID((OZChannelBase *)v4);
  OZChannelDouble::OZChannelDouble(v3, &v18, 0, NextUniqueID, 0, 0, 0);
  PCString::~PCString(&v18);
  PCString::~PCString(&v15);
  PCString::~PCString(&v17);
  PCString::~PCString(&v16);
  *((_QWORD *)this + 5) = v3;
  OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, (OZChannelBase *)v3, 1);
  Ref = OZChannelBase::getRef((OZChannelBase *)v3, 1);
  OZChannelRef::operator=((std::string *)((char *)this + 64), (const std::string *)Ref);
  OZChannelRef::~OZChannelRef((void **)Ref);
  MEMORY[0x1B5E29170]();
  v7 = (OZChannelDouble *)operator new();
  PCString::PCString(&v16, " ");
  PCString::PCString(&v17, (const PCString *)&v19);
  PCString::append(&v17, &v16);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Link Behavior Value Range Min"));
  PCString::PCString(&v18, &v17);
  v8 = PCString::append(&v18, &v15);
  v9 = OZChannelBase::getNextUniqueID((OZChannelBase *)v8);
  OZChannelDouble::OZChannelDouble(v7, &v18, 0, v9, 0, 0, 0);
  PCString::~PCString(&v18);
  PCString::~PCString(&v15);
  PCString::~PCString(&v17);
  PCString::~PCString(&v16);
  *((_QWORD *)this + 6) = v7;
  OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, (OZChannelBase *)v7, 1);
  v10 = OZChannelBase::getRef((OZChannelBase *)v7, 1);
  OZChannelRef::operator=((std::string *)((char *)this + 88), (const std::string *)v10);
  OZChannelRef::~OZChannelRef((void **)v10);
  MEMORY[0x1B5E29170]();
  v11 = (OZChannelDouble *)operator new();
  PCString::PCString(&v16, " ");
  PCString::PCString(&v17, (const PCString *)&v19);
  PCString::append(&v17, &v16);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Link Behavior Value Range Max"));
  PCString::PCString(&v18, &v17);
  v12 = PCString::append(&v18, &v15);
  v13 = OZChannelBase::getNextUniqueID((OZChannelBase *)v12);
  OZChannelDouble::OZChannelDouble(v11, &v18, 0, v13, 0, 0, 0);
  PCString::~PCString(&v18);
  PCString::~PCString(&v15);
  PCString::~PCString(&v17);
  PCString::~PCString(&v16);
  *((_QWORD *)this + 7) = v11;
  OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, (OZChannelBase *)v11, 1);
  v14 = OZChannelBase::getRef((OZChannelBase *)v11, 1);
  OZChannelRef::operator=((std::string *)((char *)this + 112), (const std::string *)v14);
  OZChannelRef::~OZChannelRef((void **)v14);
  MEMORY[0x1B5E29170]();
  PCString::~PCString((PCString *)&v19);
}

void sub_1B2E89D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12, PCString a13, PCString a14)
{
  uint64_t v14;

  PCString::~PCString(&a13);
  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  PCString::~PCString(&a11);
  MEMORY[0x1B5E29170](v14, 0x10E1C409BAC03F7);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void OZLinkChannelExpression::OZLinkChannelExpression(OZLinkChannelExpression *this, const OZLinkChannelExpression *a2, OZLinkBehavior *a3)
{
  *(_QWORD *)this = &off_1E659B708;
  *((_QWORD *)this + 1) = a3;
  OZChannelRef::OZChannelRef((std::string *)((char *)this + 16), (const OZLinkChannelExpression *)((char *)a2 + 16));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 64));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 88));
  OZChannelRef::OZChannelRef((OZLinkChannelExpression *)((char *)this + 112));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  OZLinkChannelExpression::copyParamChannels(this, a2);
}

void sub_1B2E89EC4(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;

  OZChannelRef::~OZChannelRef(v4);
  OZChannelRef::~OZChannelRef(v3);
  OZChannelRef::~OZChannelRef(v2);
  OZChannelRef::~OZChannelRef(v1);
  _Unwind_Resume(a1);
}

std::string *OZLinkChannelExpression::copyParamChannels(OZLinkChannelExpression *this, const OZLinkChannelExpression *a2)
{
  OZChannel *v4;
  OZChannelRef *Ref;
  OZChannel *v6;
  OZChannelRef *v7;
  OZChannel *v8;
  OZChannelRef *v9;

  if (*((_QWORD *)a2 + 5))
  {
    v4 = (OZChannel *)operator new();
    OZChannel::OZChannel(v4, *((const OZChannelBase **)a2 + 5), 0);
    v4->var0 = (void **)&off_1E6551358;
    v4->var2 = (void **)&unk_1E65516B8;
    *((_QWORD *)this + 5) = v4;
    OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, (OZChannelBase *)v4, 1);
    Ref = OZChannelBase::getRef((OZChannelBase *)v4, 1);
    OZChannelRef::operator=((std::string *)((char *)this + 64), (const std::string *)Ref);
    OZChannelRef::~OZChannelRef((void **)Ref);
    MEMORY[0x1B5E29170]();
  }
  else
  {
    OZChannelRef::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 64));
  }
  if (*((_QWORD *)a2 + 6))
  {
    v6 = (OZChannel *)operator new();
    OZChannel::OZChannel(v6, *((const OZChannelBase **)a2 + 6), 0);
    v6->var0 = (void **)&off_1E6551358;
    v6->var2 = (void **)&unk_1E65516B8;
    *((_QWORD *)this + 6) = v6;
    OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, (OZChannelBase *)v6, 1);
    v7 = OZChannelBase::getRef((OZChannelBase *)v6, 1);
    OZChannelRef::operator=((std::string *)((char *)this + 88), (const std::string *)v7);
    OZChannelRef::~OZChannelRef((void **)v7);
    MEMORY[0x1B5E29170]();
  }
  else
  {
    OZChannelRef::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 88));
  }
  if (*((_QWORD *)a2 + 7))
  {
    v8 = (OZChannel *)operator new();
    OZChannel::OZChannel(v8, *((const OZChannelBase **)a2 + 7), 0);
    v8->var0 = (void **)&off_1E6551358;
    v8->var2 = (void **)&unk_1E65516B8;
    *((_QWORD *)this + 7) = v8;
    OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, (OZChannelBase *)v8, 1);
    v9 = OZChannelBase::getRef((OZChannelBase *)v8, 1);
    OZChannelRef::operator=((std::string *)((char *)this + 112), (const std::string *)v9);
    OZChannelRef::~OZChannelRef((void **)v9);
    JUMPOUT(0x1B5E29170);
  }
  return OZChannelRef::operator=((std::string *)((char *)this + 112), (const std::string *)((char *)a2 + 112));
}

void sub_1B2E8A11C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZLinkChannelExpression::~OZLinkChannelExpression(OZLinkChannelExpression *this)
{
  uint64_t **v2;

  *(_QWORD *)this = &off_1E659B708;
  v2 = (uint64_t **)*((_QWORD *)this + 1);
  if (v2)
    OZLinkBehavior::deleteExpressionParamChannels(v2, (unint64_t)this, 0);
  OZChannelRef::~OZChannelRef((void **)this + 14);
  OZChannelRef::~OZChannelRef((void **)this + 11);
  OZChannelRef::~OZChannelRef((void **)this + 8);
  OZChannelRef::~OZChannelRef((void **)this + 2);
}

{
  OZLinkChannelExpression::~OZLinkChannelExpression(this);
  JUMPOUT(0x1B5E29170);
}

void OZLinkChannelExpression::getParamChannelRefs(uint64_t a1, void **a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;

  if (a2)
  {
    v4 = a1 + 64;
    v6 = (uint64_t)(a2 + 2);
    v5 = (unint64_t)a2[2];
    v7 = a2[1];
    if ((unint64_t)v7 >= v5)
    {
      v9 = ((char *)v7 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        goto LABEL_52;
      v10 = v5 - (_QWORD)*a2;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = v4;
      v8 = v14 + 8;
      v17 = (char *)*a2;
      v16 = (char *)a2[1];
      if (v16 != *a2)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)*a2;
      }
      *a2 = v14;
      a2[1] = v8;
      a2[2] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v7 = v4;
      v8 = v7 + 1;
    }
    a2[1] = v8;
    v19 = a1 + 88;
    v20 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v20)
    {
      v22 = ((char *)v8 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_52;
      v23 = v20 - (_QWORD)*a2;
      v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v25);
      else
        v26 = 0;
      v27 = &v26[8 * v22];
      v28 = &v26[8 * v25];
      *(_QWORD *)v27 = v19;
      v21 = v27 + 8;
      v30 = (char *)*a2;
      v29 = (char *)a2[1];
      if (v29 != *a2)
      {
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v27 - 1) = v31;
          v27 -= 8;
        }
        while (v29 != v30);
        v29 = (char *)*a2;
      }
      *a2 = v27;
      a2[1] = v21;
      a2[2] = v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v8 = v19;
      v21 = v8 + 1;
    }
    a2[1] = v21;
    v32 = a1 + 112;
    v33 = (unint64_t)a2[2];
    if ((unint64_t)v21 < v33)
    {
      *v21 = v32;
      v34 = v21 + 1;
LABEL_50:
      a2[1] = v34;
      return;
    }
    v35 = ((char *)v21 - (_BYTE *)*a2) >> 3;
    if (!((unint64_t)(v35 + 1) >> 61))
    {
      v36 = v33 - (_QWORD)*a2;
      v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1))
        v37 = v35 + 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v38);
      else
        v39 = 0;
      v40 = &v39[8 * v35];
      v41 = &v39[8 * v38];
      *(_QWORD *)v40 = v32;
      v34 = v40 + 8;
      v43 = (char *)*a2;
      v42 = (char *)a2[1];
      if (v42 != *a2)
      {
        do
        {
          v44 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *((_QWORD *)v40 - 1) = v44;
          v40 -= 8;
        }
        while (v42 != v43);
        v42 = (char *)*a2;
      }
      *a2 = v40;
      a2[1] = v34;
      a2[2] = v41;
      if (v42)
        operator delete(v42);
      goto LABEL_50;
    }
LABEL_52:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
}

uint64_t OZLinkChannelExpression::resolveChannelRefs(OZLinkChannelExpression *this)
{
  uint64_t result;
  uint64_t v3;
  OZChannelBase *v4;
  const void *Channel;
  uint64_t v6;
  OZChannelBase *v7;
  const void *v8;
  uint64_t v9;
  OZChannelBase *v10;
  const void *v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  OZChannelBase *v14;

  result = *((_QWORD *)this + 1);
  if (result)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 312))(result);
    Channel = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 64), v4);
    if (Channel)
    *((_QWORD *)this + 5) = Channel;
    v6 = *((_QWORD *)this + 6);
    v7 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 312))(*((_QWORD *)this + 1));
    v8 = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 88), v7);
    if (v8)
    *((_QWORD *)this + 6) = v8;
    v9 = *((_QWORD *)this + 7);
    v10 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 312))(*((_QWORD *)this + 1));
    v11 = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 112), v10);
    if (v11)
    *((_QWORD *)this + 7) = v11;
    if (!v3)
    {
      v12 = (OZChannelBase *)*((_QWORD *)this + 5);
      if (v12)
        OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, v12, 0);
    }
    if (!v6)
    {
      v13 = (OZChannelBase *)*((_QWORD *)this + 6);
      if (v13)
        OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, v13, 0);
    }
    if (!v9)
    {
      v14 = (OZChannelBase *)*((_QWORD *)this + 7);
      if (v14)
        OZLinkBehavior::addExpressionParamChannel(*((uint64_t ***)this + 1), this, v14, 0);
    }
    return *((_QWORD *)this + 5) && *((_QWORD *)this + 6) && *((_QWORD *)this + 7) != 0;
  }
  return result;
}

void *OZLinkChannelExpression::getSourceChannel(OZLinkChannelExpression *this)
{
  uint64_t Object;
  OZChannelBase *v3;
  OZChannelBase *Channel;

  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 336))(*((_QWORD *)this + 1))
    && OZChanObjectManipRef::getObject((OZChannelBase *)(*((_QWORD *)this + 1) + 1064))
    && (Object = OZChanObjectManipRef::getObject((OZChannelBase *)(*((_QWORD *)this + 1) + 1064)),
        v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Object + 216))(Object),
        (Channel = OZChannelRef::getChannel((OZLinkChannelExpression *)((char *)this + 16), v3)) != 0))
  {
  }
  else
  {
    return 0;
  }
}

void OZLinkChannelExpression::fixParamChannelNames(OZChannelBase **this)
{
  const PCString *SourceChannel;
  OZChannelBase *v3;
  OZChannelBase *v4;
  OZChannelBase *v5;
  PCString v6;
  PCString v7;
  PCString v8;
  PCString v9;
  PCSharedCount v10;

  PCSharedCount::PCSharedCount(&v10);
  SourceChannel = (const PCString *)OZLinkChannelExpression::getSourceChannel((OZLinkChannelExpression *)this);
  if (SourceChannel)
    PCString::set((PCString *)&v10, SourceChannel + 4);
  else
    PCString::set((PCString *)&v10, "source");
  v3 = this[5];
  if (v3)
  {
    PCString::PCString(&v7, " ");
    PCString::PCString(&v8, (const PCString *)&v10);
    PCString::append(&v8, &v7);
    PCURL::PCURL((PCURL *)&v6, CFSTR("Link Behavior Value Offset"));
    PCString::PCString(&v9, &v8);
    PCString::append(&v9, &v6);
    OZChannelBase::setName(v3, &v9, 0);
    PCString::~PCString(&v9);
    PCString::~PCString(&v6);
    PCString::~PCString(&v8);
    PCString::~PCString(&v7);
  }
  v4 = this[6];
  if (v4)
  {
    PCString::PCString(&v7, " ");
    PCString::PCString(&v8, (const PCString *)&v10);
    PCString::append(&v8, &v7);
    PCURL::PCURL((PCURL *)&v6, CFSTR("Link Behavior Value Range Min"));
    PCString::PCString(&v9, &v8);
    PCString::append(&v9, &v6);
    OZChannelBase::setName(v4, &v9, 0);
    PCString::~PCString(&v9);
    PCString::~PCString(&v6);
    PCString::~PCString(&v8);
    PCString::~PCString(&v7);
  }
  v5 = this[7];
  if (v5)
  {
    PCString::PCString(&v7, " ");
    PCString::PCString(&v8, (const PCString *)&v10);
    PCString::append(&v8, &v7);
    PCURL::PCURL((PCURL *)&v6, CFSTR("Link Behavior Value Range Max"));
    PCString::PCString(&v9, &v8);
    PCString::append(&v9, &v6);
    OZChannelBase::setName(v5, &v9, 0);
    PCString::~PCString(&v9);
    PCString::~PCString(&v6);
    PCString::~PCString(&v8);
    PCString::~PCString(&v7);
  }
  PCString::~PCString((PCString *)&v10);
}

void sub_1B2E8A844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a13);
  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  PCString::~PCString(&a11);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t OZLinkChannelExpression::operator=(uint64_t a1, uint64_t a2)
{
  OZLinkChannelExpression::copy(a1, a2);
  return a1;
}

std::string *OZLinkChannelExpression::copy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  OZChannelRef::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  OZChannelRef::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  OZChannelRef::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  return OZChannelRef::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
}

double OZLinkChannelExpression::getSourceSliderRange(OZLinkChannelExpression *this)
{
  _QWORD *SourceChannel;

  SourceChannel = OZLinkChannelExpression::getSourceChannel(this);
  if (SourceChannel)
    return (*(double (**)(_QWORD *))(*SourceChannel + 808))(SourceChannel)
         - *(double *)(SourceChannel[16] + 16);
  else
    return 0.0;
}

_QWORD *OZLinkChannelExpression::getSourceValueRange(OZLinkChannelExpression *this)
{
  _QWORD *result;
  _QWORD *v2;
  uint64_t v3;

  result = OZLinkChannelExpression::getSourceChannel(this);
  if (result)
  {
    v2 = result;
    v3 = 0;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(result[14] + 8) + 256))(*(_QWORD *)(result[14] + 8), &v3);
    v3 = 0;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v2[14] + 8) + 264))(*(_QWORD *)(v2[14] + 8), &v3);
  }
  return result;
}

OZChannel *OZLinkChannelExpression::syncChannelRanges(OZLinkChannelExpression *this, int a2)
{
  OZChannel *result;
  OZChannel *v5;
  double v6;
  OZChannel *v7;
  double v8;
  OZChannel *v9;
  double v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;
  double v14;
  double v15;
  OZChannel *v16;
  double v17;
  OZChannel *v18;
  OZChannel *v19;
  double v20;
  double v21;
  OZChannel *v22;
  double v23;
  OZChannel *v24;
  double v25;
  int32x4_t v26;
  double v27;

  result = (OZChannel *)OZLinkChannelExpression::getSourceChannel(this);
  if (result)
  {
    v5 = result;
    OZLinkBehavior::getSourceChannelUUID(*((OZLinkBehavior **)this + 1), 1, (uint64_t)&v26);
    result = (OZChannel *)*((_QWORD *)this + 5);
    if (result)
    {
      if (*((_QWORD *)this + 6) && *((_QWORD *)this + 7))
      {
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v26, (int32x4_t)xmmword_1B3555880)))) & 1) != 0)
        {
          v6 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
          v7 = (OZChannel *)*((_QWORD *)this + 5);
          if (v6 >= 3.40282347e38)
          {
            OZChannel::setSliderMin(*((OZChannel **)this + 5), -100.0);
            v11 = (OZChannel *)*((_QWORD *)this + 5);
            v10 = 100.0;
          }
          else
          {
            v8 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
            OZChannel::setSliderMin(v7, -v8);
            v9 = (OZChannel *)*((_QWORD *)this + 5);
            (*((void (**)(OZChannel *))v5->var0 + 101))(v5);
            v11 = v9;
          }
        }
        else
        {
          OZChannel::setSliderMin(result, -6.28318531);
          v11 = (OZChannel *)*((_QWORD *)this + 5);
          v10 = 6.28318531;
        }
        OZChannel::setSliderMax(v11, v10);
        OZChannel::setDefaultValue(*((OZChannel **)this + 5), 0.0);
        OZChannel::setScale(*((OZChannel **)this + 5), *((double *)v5->var16 + 5));
        OZChannel::setCoarseDelta(*((OZChannel **)this + 5), *((double *)v5->var16 + 4));
        OZChannel::setFineDelta(*((OZChannel **)this + 5), *((double *)v5->var16 + 3));
        OZLinkChannelExpression::syncAutoShrinkScaleOffset(this);
        v12 = (OZChannel *)*((_QWORD *)this + 6);
        v27 = 0.0;
        (*(void (**)(_QWORD, double *))(**((_QWORD **)v5->var14 + 1) + 264))(*((_QWORD *)v5->var14 + 1), &v27);
        OZChannel::setMin(v12, v27);
        v13 = (OZChannel *)*((_QWORD *)this + 6);
        v27 = 0.0;
        (*(void (**)(_QWORD, double *))(**((_QWORD **)v5->var14 + 1) + 256))(*((_QWORD *)v5->var14 + 1), &v27);
        OZChannel::setMax(v13, v27);
        v14 = *((double *)v5->var16 + 2);
        if (v14 <= 1.17549435e-38)
          v14 = -100.0;
        OZChannel::setSliderMin(*((OZChannel **)this + 6), v14);
        v15 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
        v16 = (OZChannel *)*((_QWORD *)this + 6);
        if (v15 >= 3.40282347e38)
          v17 = 100.0;
        else
          (*((void (**)(OZChannel *))v5->var0 + 101))(v5);
        OZChannel::setSliderMax(v16, v17);
        OZChannel::setDefaultValue(*((OZChannel **)this + 6), *(double *)(*(_QWORD *)(*((_QWORD *)this + 6) + 128) + 16));
        OZChannel::setScale(*((OZChannel **)this + 6), *((double *)v5->var16 + 5));
        v18 = (OZChannel *)*((_QWORD *)this + 7);
        v27 = 0.0;
        (*(void (**)(_QWORD, double *))(**((_QWORD **)v5->var14 + 1) + 264))(*((_QWORD *)v5->var14 + 1), &v27);
        OZChannel::setMin(v18, v27);
        v19 = (OZChannel *)*((_QWORD *)this + 7);
        v27 = 0.0;
        (*(void (**)(_QWORD, double *))(**((_QWORD **)v5->var14 + 1) + 256))(*((_QWORD *)v5->var14 + 1), &v27);
        OZChannel::setMax(v19, v27);
        v20 = *((double *)v5->var16 + 2);
        if (v20 <= 1.17549435e-38)
          v20 = -100.0;
        OZChannel::setSliderMin(*((OZChannel **)this + 7), v20);
        v21 = (*((double (**)(OZChannel *))v5->var0 + 101))(v5);
        v22 = (OZChannel *)*((_QWORD *)this + 7);
        if (v21 >= 3.40282347e38)
          v23 = 100.0;
        else
          (*((void (**)(OZChannel *))v5->var0 + 101))(v5);
        OZChannel::setSliderMax(v22, v23);
        v24 = (OZChannel *)*((_QWORD *)this + 7);
        v25 = (*((double (**)(OZChannel *))v24->var0 + 101))(v24);
        OZChannel::setDefaultValue(v24, v25);
        result = (OZChannel *)OZChannel::setScale(*((OZChannel **)this + 7), *((double *)v5->var16 + 5));
        if (a2)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 288))(*((_QWORD *)this + 5), 0);
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 288))(*((_QWORD *)this + 6), 0);
          return (OZChannel *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 7) + 288))(*((_QWORD *)this + 7), 0);
        }
      }
    }
  }
  return result;
}

OZChannelInfo *OZLinkChannelExpression::syncAutoShrinkScaleOffset(OZLinkChannelExpression *this)
{
  OZChannelInfo *result;
  OZChannelInfo *v3;
  unint64_t v4;
  __int128 v5;

  result = (OZChannelInfo *)OZChanObjectManipRef::getObject((OZChannelBase *)(*((_QWORD *)this + 1) + 1064));
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)((*(uint64_t (**)(OZChannelInfo *))(*(_QWORD *)result + 256))(result) + 8);
    v5 = xmmword_1B30541C0;
    result = (OZChannelInfo *)OZFactory::isKindOfClass(v4, (int32x4_t *)&v5);
    if ((_DWORD)result)
    {
      result = (OZChannelInfo *)OZLinkChannelExpression::getSourceChannel(this);
      if ((OZChannelInfo *)((char *)v3 + 61248) == result)
      {
        OZChannel::setMin(*((OZChannel **)this + 5), 0.0);
        return OZChannel::setSliderMax(*((OZChannel **)this + 5), 1.0);
      }
    }
  }
  return result;
}

void *OZLinkChannelExpression::sourceIsBool(OZLinkChannelExpression *this)
{
  void *result;

  result = OZLinkChannelExpression::getSourceChannel(this);
  if (result)
  return result;
}

void *OZLinkChannelExpression::sourceIsEnum(OZLinkChannelExpression *this)
{
  void *result;

  result = OZLinkChannelExpression::getSourceChannel(this);
  if (result)
  return result;
}

BOOL OZLinkChannelExpression::isWithinLimits(OZLinkBehavior **this, const CMTime *a2)
{
  BOOL v3;
  double v4;

  v4 = 0.0;
  v3 = 1;
  OZLinkChannelExpression::solve(this, 0.0, a2, &v4, &v3);
  return v3;
}

void OZLinkChannelExpression::solve(OZLinkBehavior **this, double a2, const CMTime *a3, double *a4, BOOL *a5)
{
  double v10;
  double v11;
  OZChannel *SourceChannel;
  OZChannel *v13;
  const CMTime *v14;
  double v15;
  int ValueAsInt;
  double v17;
  double v18;
  OZChannel *v19;
  double v20;
  OZChannel *v21;
  double v22;
  OZChannel *v23;
  double v24;
  OZChannel *v25;
  double v26;
  BOOL v27;
  OZChannel *v28;
  OZChannel *v29;
  double v30;
  double v31;
  OZChannel *v32;
  double v33;
  OZChannel *v34;
  double v35;
  double v36;
  double InternalScale;
  double v38;
  double v39;
  int v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  OZChannel *v45;
  double v46;

  if (!a4)
    return;
  OZLinkBehavior::getMixFactor(this[1], a3);
  v11 = v10;
  if (v10 > -0.0000001 && v10 < 0.0000001)
  {
    if (a5)
      *a5 = 1;
LABEL_9:
    *a4 = a2;
    return;
  }
  SourceChannel = (OZChannel *)OZLinkChannelExpression::getSourceChannel((OZLinkChannelExpression *)this);
  if (!SourceChannel)
    goto LABEL_9;
  v13 = SourceChannel;
  if ((OZLinkChannelExpression::sourceIsBool((OZLinkChannelExpression *)this) & 1) != 0
    || OZLinkChannelExpression::sourceIsEnum((OZLinkChannelExpression *)this))
  {
    goto LABEL_9;
  }
  v14 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v15 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 2776), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::getValueAsDouble(v13, a3, 0.0);
  v18 = v17;
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 2520), v14, 0.0))
    goto LABEL_46;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 2520), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 1u:
      goto LABEL_23;
    case 2u:
      v19 = (OZChannel *)this[7];
      if (v19)
        OZChannel::getValueAsDouble(v19, a3, 0.0);
      else
        v20 = 1.0;
      v27 = v18 <= v20;
      if (v18 > v20 && ValueAsInt == 1)
        goto LABEL_37;
      goto LABEL_45;
    case 3u:
      v21 = (OZChannel *)this[7];
      if (v21)
        OZChannel::getValueAsDouble(v21, a3, 0.0);
      else
        v22 = 1.0;
      if (v18 > v22)
      {
        if (ValueAsInt != 1)
          goto LABEL_55;
LABEL_37:
        v28 = (OZChannel *)this[7];
        if (v28)
        {
LABEL_38:
          OZChannel::getValueAsDouble(v28, a3, 0.0);
          v18 = v31;
          goto LABEL_46;
        }
        v18 = 1.0;
        goto LABEL_46;
      }
LABEL_23:
      v25 = (OZChannel *)this[6];
      if (v25)
        OZChannel::getValueAsDouble(v25, a3, 0.0);
      else
        v26 = 0.0;
      v27 = v18 >= v26;
      if (v18 < v26 && ValueAsInt == 1)
      {
LABEL_28:
        v28 = (OZChannel *)this[6];
        if (!v28)
        {
          v18 = 0.0;
          goto LABEL_46;
        }
        goto LABEL_38;
      }
LABEL_45:
      if (v27)
      {
LABEL_46:
        v34 = (OZChannel *)this[5];
        if (v34)
        {
          OZChannel::getValueAsDouble(v34, a3, 0.0);
          v15 = v35;
        }
        v36 = v18 + v15;
        InternalScale = OZLinkBehavior::getInternalScale(this[1]);
        OZChannel::getValueAsDouble((OZChannel *)((char *)this[1] + 1808), a3, 0.0);
        v39 = v36 * (InternalScale * v38);
        v40 = OZChannel::getValueAsInt((OZChannel *)((char *)this[1] + 1552), MEMORY[0x1E0CA2E68], 0.0);
        v41 = v39 * a2;
        v42 = v39 + a2;
        if (v40)
          v42 = v39;
        if (v40 != 1)
          v41 = v42;
        a2 = (1.0 - v11) * a2 + v11 * v41;
        v43 = 1;
        goto LABEL_53;
      }
LABEL_55:
      v43 = 0;
LABEL_53:
      *a4 = a2;
      if (a5)
        *a5 = v43;
      return;
    case 4u:
      v23 = (OZChannel *)this[7];
      if (v23)
        OZChannel::getValueAsDouble(v23, a3, 0.0);
      else
        v24 = 1.0;
      if (v18 > v24)
        goto LABEL_46;
      v29 = (OZChannel *)this[6];
      if (v29)
        OZChannel::getValueAsDouble(v29, a3, 0.0);
      else
        v30 = 0.0;
      v27 = v18 < v30;
      if (v18 < v30 || ValueAsInt != 1)
        goto LABEL_45;
      v32 = (OZChannel *)this[7];
      if (v32)
        OZChannel::getValueAsDouble(v32, a3, 0.0);
      else
        v33 = 1.0;
      v44 = v33 - v18;
      v45 = (OZChannel *)this[6];
      if (v45)
        OZChannel::getValueAsDouble(v45, a3, 0.0);
      else
        v46 = 0.0;
      if (v44 < v18 - v46)
        goto LABEL_37;
      goto LABEL_28;
    default:
      goto LABEL_46;
  }
}

void OZ3DEngineCore::getMotionLights(CMTime *a1@<X1>, OZChannel *a2@<X2>, OZElement *a3@<X3>, uint64_t a4@<X8>)
{
  OZChannel *v8;
  int ValueAsInt;
  OZChannelFolder *var6;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    v8 = a2;
    while (1)
    {
      ValueAsInt = OZChannel::getValueAsInt(v8 + 56, a1, 0.0);
      if (ValueAsInt == 1)
        break;
      if (ValueAsInt == 2)
      {
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)a4 = &unk_1E64FC250;
        *(_BYTE *)(a4 + 24) = 0;
        return;
      }
      var6 = v8[6].var6;
      if (var6)
      {
        if (v8)
          continue;
      }
      break;
    }
  }
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = &unk_1E64FC250;
  *(_BYTE *)(a4 + 24) = 0;
  v12 = *((_DWORD *)a3 + 3);
  if (v12 <= 0)
    v13 = 0;
  else
    v13 = (2 * v12) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a4, v12, v13);
  if (*((int *)a3 + 3) >= 1)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      LiLight::operator=(*(_QWORD *)(a4 + 16) + v14, *((_QWORD *)a3 + 2) + v14);
      ++v15;
      v14 += 944;
    }
    while (v15 < *((int *)a3 + 3));
  }
  *(_BYTE *)(a4 + 24) = *((_BYTE *)a3 + 24);
}

void sub_1B2E8B368(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineCore::buildRenderGraph(uint64_t a1, const OZRenderParams *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4, uint64_t a5, CMTime *a6, OZChannel *a7, uint64_t a8)
{
  unsigned __int8 v13;
  OZChannelFolder *var6;
  void *v15;
  _BOOL4 v16;
  OZChannel *v17;
  int v18;
  CMTimeValue value;
  LiGroup *v20;
  PCMutex *Current;
  CMTime v24;
  char v25;
  _BYTE v26[64];
  uint64_t v27[20];
  _BYTE v28[44];
  __int128 v29;
  int v30;

  if ((v13 & 1) == 0
  {
    MEMORY[0x1B5E28F6C](&OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4840], &OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m, &dword_1B2737000);
  }
  std::recursive_mutex::lock(&OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
  var6 = a7[6].var6;
  v16 = var6
  v17 = a7;
  while (1)
  {
    v17 = (OZChannel *)v17[6].var6;
    if (!v17)
      break;
    {
      LODWORD(v17) = 0;
      break;
    }
    if ((*((unsigned int (**)(OZChannel *))v17->var0 + 52))(v17))
    {
      LODWORD(v17) = 1;
      break;
    }
  }
  v18 = (*((uint64_t (**)(OZChannel *, _QWORD))a7->var0 + 207))(a7, MEMORY[0x1E0CA2E68]);
  LiGraphBuilder::getCurrentInsertionGroup(a3, (PCSharedCount *)&v24);
  value = v24.value;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v24.timescale);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v26, a4);
  if (value && *(_BYTE *)(*(uint64_t (**)(CMTimeValue))(*(_QWORD *)value + 248))(value))
  {
    v28[40] = 1;
    v29 = *(_OWORD *)((*(uint64_t (**)(CMTimeValue))(*(_QWORD *)value + 248))(value) + 4);
    v30 = *(_DWORD *)((*(uint64_t (**)(CMTimeValue))(*(_QWORD *)value + 248))(value) + 20);
  }
  if (v18 | v17 & v16)
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)&v24, a2);
    v25 = 0;
    LiGraphBuilder::partitionWorld((uint64_t)a3);
    OZElement::buildRenderGraph((OZElement *)a7, &v24, a3, (const OZRenderGraphState *)v26);
    LiGraphBuilder::partitionWorld((uint64_t)a3);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v24);
  }
  else
  {
    v20 = (LiGroup *)operator new();
    LiGroup::LiGroup(v20);
    v24.value = (CMTimeValue)v20;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v24.timescale, (LiGroup *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
    if (!v24.value)
      throw_PCNullPointerException(1);
    *(_DWORD *)(v24.value + 520) = a7->var10;
    Current = LiGraphBuilder::addGroupAndMakeCurrent((PCSharedCount *)a3, (const PCSharedCount *)&v24);
    OZ3DEngineCore::build3DEngineRenderGraph((uint64_t)Current, (uint64_t)a2, (uint64_t)a3, (uint64_t)v26, a5, a6, a7, a8);
    LiGraphBuilder::endInsertingIntoGroup(a3);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v24.timescale);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v28);
  std::__list_imp<unsigned int>::clear(v27);
  std::recursive_mutex::unlock(&OZ3DEngineCore::buildRenderGraph(OZRenderParams &,LiGraphBuilder *,OZRenderGraphState const&,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
}

void sub_1B2E8B670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OZ3DEngineCore::build3DEngineRenderGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CMTime *a6, OZChannel *a7, uint64_t a8)
{
  OZTransformNode *v15;
  const void *v16;
  OZTransformNode *v17;
  uint64_t i;
  float32x4_t v19;
  float64x2_t *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  int WorkingGamut;
  _QWORD *v26;
  PCShared_base *v27;
  int v28;
  Float64 Seconds;
  double v30;
  int32x2_t *v31;
  int32x2_t *v32;
  int32x2_t v33;
  __int128 v34;
  OZScene *v35;
  CGImageRef CustomEnvironmentMap;
  double *v37;
  char *v38;
  char *v39;
  double *v40;
  OZChannelFolder *var6;
  char *v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  OZScene *v47;
  uint64_t j;
  float32x4_t v49;
  float64x2_t *v50;
  int v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  CMTimeValue *v58;
  CMTimeValue v59;
  _BYTE *v60;
  uint64_t v61;
  CMTimeEpoch *v62;
  CMTimeEpoch v63;
  double *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  _BOOL4 PreserveTransparency;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  double *v78;
  std::__shared_weak_count *v79;
  int32x2_t v80;
  int32x2_t v81;
  double *v82;
  std::__shared_weak_count *v83;
  void *lpsrc;
  PCSharedCount v85;
  CMTime v86;
  CMTime time;
  CMTime v88;
  _OWORD v89[4];
  CMTime v90;
  float64x2_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[48];
  __int128 v100;
  __int128 v101;
  _BYTE v102[48];
  OZRenderState v103;

  OZRenderState::OZRenderState(&v103, (const OZRenderState *)a2);
  *(_QWORD *)&v102[40] = 0x3FF0000000000000;
  *(_QWORD *)v102 = 0x3FF0000000000000;
  *(_QWORD *)&v99[40] = 0x3FF0000000000000;
  *(_QWORD *)v99 = 0x3FF0000000000000;
  memset(&v99[8], 0, 32);
  v100 = 0u;
  v101 = 0u;
  memset(&v102[8], 0, 32);
  if ((OZChannel *)v103.var5 == a7)
  {
    LiGraphBuilder::getCurrentLocalToWorld((LiGraphBuilder *)a3, (uint64_t)&v91);
    v101 = v95;
    *(_OWORD *)v102 = v96;
    *(_OWORD *)&v102[16] = v97;
    *(_OWORD *)&v102[32] = v98;
    *(float64x2_t *)v99 = v91;
    *(_OWORD *)&v99[16] = v92;
    *(_OWORD *)&v99[32] = v93;
    v100 = v94;
  }
  else
  {
    v15 = (OZTransformNode *)a7;
    while (v15)
    {
      v16 = (const void *)*((_QWORD *)v15 + 120);
      if (!v16)
        break;
      if (!v17)
        break;
      v15 = v17;
      if ((*(unsigned int (**)(OZTransformNode *))(*(_QWORD *)v17 + 1632))(v17))
      {
        v103.var5 = v15;
        v103.var8 = 0;
        break;
      }
    }
    v103.var9 = 1;
    (*((void (**)(OZChannel *, _BYTE *, OZRenderState *))a7->var0 + 157))(a7, v99, &v103);
  }
  for (i = 0; i != 4; ++i)
  {
    v19 = *(float32x4_t *)(a5 + 16 * i);
    v20 = (float64x2_t *)((char *)&v90 + 32 * i);
    *v20 = vcvtq_f64_f32(*(float32x2_t *)v19.f32);
    v20[1] = vcvt_hight_f64_f32(v19);
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)v99, (__int128 *)&v90.value, (uint64_t)&v91);
  v101 = v95;
  *(_OWORD *)v102 = v96;
  *(_OWORD *)&v102[16] = v97;
  *(_OWORD *)&v102[32] = v98;
  *(float64x2_t *)v99 = v91;
  *(_OWORD *)&v99[16] = v92;
  *(_OWORD *)&v99[32] = v93;
  v100 = v94;
  if (*(_QWORD *)(a2 + 1296))
    v21 = *(_QWORD *)(a2 + 1296);
  else
    v21 = *(_QWORD *)(a2 + 1280);
  v22 = (*(double (**)(uint64_t))(*(_QWORD *)v21 + 688))(v21);
  v23 = 0;
  *(double *)&v99[24] = v22 * *(double *)&v99[24];
  do
  {
    v89[v23] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v99[32 * v23]), *(float64x2_t *)&v99[32 * v23 + 16]);
    ++v23;
  }
  while (v23 != 4);
  if (*(_BYTE *)(a2 + 242))
  {
    v24 = (*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7);
    WorkingGamut = OZRenderParams::getWorkingGamut((OZRenderParams *)a2);
    v26 = *(_QWORD **)(a2 + 1296);
    if (!v26)
      v26 = *(_QWORD **)(a2 + 1280);
    v103.var0.var0 = (int64_t)v26;
    if (v26)
      v27 = (PCShared_base *)((char *)v26 + *(_QWORD *)(*v26 - 24));
    else
      v27 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v103.var0.var1, v27);
    LiGraphBuilder::prepare3DEngine((PCMutex *)a3, WorkingGamut, (const PCSharedCount *)&v103, *(_DWORD *)(v24 + 344), *(_DWORD *)(v24 + 348), 0);
  }
  else
  {
    v28 = OZRenderParams::getWorkingGamut((OZRenderParams *)a2);
    v103.var0.var0 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v103.var0.var1);
    LiGraphBuilder::prepare3DEngine((PCMutex *)a3, v28, (const PCSharedCount *)&v103, 0, 0, 0);
  }
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v103.var0.var1);
  v88 = *(CMTime *)a2;
  time = v88;
  Seconds = CMTimeGetSeconds(&time);
  v86 = *a6;
  v30 = CMTimeGetSeconds(&v86);
  LiGraphBuilder::get3DEngineGeode((const PCSharedCount *)a3, (PCSharedCount *)&v103);
  if (!v103.var0.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v103.var0.var0 + 160))(&lpsrc);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v103.var0.var1);
  if (lpsrc)
  {
    v32 = v31;
    if (v31)
    {
      v33 = vcvt_s32_f32(vcvt_f32_u32(*(uint32x2_t *)(a2 + 324)));
      v31[25] = 0;
      v31[26] = v33;
      if (*(_BYTE *)(a2 + 202))
      {
        OZRenderParams::getResolution((OZRenderParams *)a2, (__n128 *)&v103);
        v34 = *(_OWORD *)&v103.var0.var0;
      }
      else
      {
        OZRenderParams::getPixelTransform((OZRenderParams *)a2, (uint64_t)&v103);
        memset(v99, 0, 24);
        v91 = 0uLL;
        *(_QWORD *)&v92 = 0;
        getScaleTranslate((float64x2_t *)&v103, (uint64_t)v99, &v91);
        v34 = *(_OWORD *)v99;
      }
      *(_OWORD *)v32[33].i8 = v34;
      *(Float64 *)&v32[35] = Seconds;
      v35 = (OZScene *)(*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7);
      CustomEnvironmentMap = (CGImageRef)OZScene::getCustomEnvironmentMap(v35);
      if (!CustomEnvironmentMap)
      {
        v37 = (double *)(*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7);
        if (v37[73] / 100.0 <= 0.0)
          CustomEnvironmentMap = 0;
        else
          CustomEnvironmentMap = OZ3DEngineCore::getCachedEnvironmentMap((OZ3DEngineCore *)v37);
      }
      v32[36] = (int32x2_t)CustomEnvironmentMap;
      *(double *)&v32[37] = *(double *)((*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7) + 584) / 100.0;
    }
  }
  else
  {
    v32 = 0;
  }
  OZ3DEngineCore::getMotionLights(&v88, a7, (OZElement *)(a3 + 112), (uint64_t)&v91);
  if (a7
  {
    v39 = v38;
    (*(void (**)(double **__return_ptr, char *, uint64_t, uint64_t, _OWORD *, float64x2_t *, _QWORD, _QWORD, _QWORD, double, float, float, float, float, float))(*(_QWORD *)v38 + 2272))(&v82, v38, a8, a2, v89, &v91, *(unsigned __int8 *)(a4 + 264), *(unsigned __int8 *)(a4 + 258), *(unsigned int *)(a4 + 260), v30, *(float *)(a4 + 268), *(float *)(a4 + 272), *(float *)(a4 + 276), *(float *)(a4 + 280), *(float *)(a4 + 284));
    v40 = v82;
  }
  else
  {
    v40 = 0;
    v39 = 0;
    v82 = 0;
    v83 = 0;
  }
  *((_BYTE *)v40 + 568) = OZChannel::getValueAsInt((OZChannel *)(v39 + 24080), MEMORY[0x1E0CA2E68], 0.0) != 0;
  var6 = a7[6].var6;
  if (var6)
  {
    if (v42)
    {
      if ((OZChannelBase::isEnabled((OZChannelBase *)(v42 + 20744), 1, 1) & 1) == 0)
      {
        OZRenderParams::getFFInputNode((_QWORD *)a2, 1u, &v81);
        v43 = v32[29];
        v44 = v81;
        if (*(_QWORD *)&v43 != *(_QWORD *)&v81)
        {
          if (v43)
          {
            (*(void (**)(int32x2_t))(**(_QWORD **)&v43 + 24))(v43);
            v44 = v81;
          }
          v32[29] = v44;
          if (!*(_QWORD *)&v44)
          {
LABEL_52:
            OZRenderParams::getFFInputNode((_QWORD *)a2, 2u, &v80);
            v45 = v32[28];
            v46 = v80;
            if (*(_QWORD *)&v45 != *(_QWORD *)&v80)
            {
              if (v45)
              {
                (*(void (**)(int32x2_t))(**(_QWORD **)&v45 + 24))(v45);
                v46 = v80;
              }
              v32[28] = v46;
              if (!*(_QWORD *)&v46)
                goto LABEL_59;
              (*(void (**)(int32x2_t))(**(_QWORD **)&v46 + 16))(v46);
              v45 = v80;
            }
            if (v45)
              (*(void (**)(int32x2_t))(**(_QWORD **)&v45 + 24))(v45);
LABEL_59:
            v47 = (OZScene *)(*((uint64_t (**)(OZChannel *))a7->var0 + 34))(a7);
            OZScene::setARFrameForObject(v47, (Li3DEngineImageSource *)v32);
            goto LABEL_60;
          }
          (*(void (**)(int32x2_t))(**(_QWORD **)&v44 + 16))(v44);
          v43 = v81;
        }
        if (v43)
          (*(void (**)(int32x2_t))(**(_QWORD **)&v43 + 24))(v43);
        goto LABEL_52;
      }
    }
  }
LABEL_60:
  *(_OWORD *)&v99[16] = xmmword_1B304F270;
  *(_OWORD *)&v99[32] = xmmword_1B304F270;
  *(_OWORD *)v99 = xmmword_1B304F270;
  (*((void (**)(OZChannel *, _BYTE *, uint64_t))a7->var0 + 170))(a7, v99, a2);
  for (j = 0; j != 4; ++j)
  {
    v49 = *(float32x4_t *)(a5 + 16 * j);
    v50 = (float64x2_t *)((char *)&v103 + 32 * j);
    *v50 = vcvtq_f64_f32(*(float32x2_t *)v49.f32);
    v50[1] = vcvt_hight_f64_f32(v49);
  }
  PCMatrix44Tmpl<double>::invert((double *)&v103.var0.var0, (double *)&v103.var0.var0, 0.0);
  v51 = 0;
  v52 = -1.0;
  v53 = 1.0;
  v54 = 1.0;
  v55 = -1.0;
  v56 = 1.0;
  v57 = -1.0;
  do
  {
    v58 = (CMTimeValue *)&v99[8];
    if ((v51 & 1) != 0)
      v58 = (CMTimeValue *)v99;
    v59 = *v58;
    v60 = &v99[24];
    if ((v51 & 2) != 0)
      v60 = &v99[16];
    v61 = *(_QWORD *)v60;
    v62 = (CMTimeEpoch *)&v99[40];
    if ((v51 & 4) != 0)
      v62 = (CMTimeEpoch *)&v99[32];
    v63 = *v62;
    v90.value = v59;
    *(_QWORD *)&v90.timescale = v61;
    v90.epoch = v63;
    PCMatrix44Tmpl<double>::transform<double>((double *)&v103.var0.var0, (double *)&v90.value, (double *)&v90.value);
    if (v51)
    {
      if (v53 >= *(double *)&v90.value)
        v53 = *(double *)&v90.value;
      if (v52 <= *(double *)&v90.value)
        v52 = *(double *)&v90.value;
      if (v54 >= *(double *)&v90.timescale)
        v54 = *(double *)&v90.timescale;
      if (v55 <= *(double *)&v90.timescale)
        v55 = *(double *)&v90.timescale;
      if (v56 >= *(double *)&v90.epoch)
        v56 = *(double *)&v90.epoch;
      if (v57 <= *(double *)&v90.epoch)
        v57 = *(double *)&v90.epoch;
    }
    else
    {
      v55 = *(double *)&v90.timescale;
      v57 = *(double *)&v90.epoch;
      v52 = *(double *)&v90.value;
      v53 = *(double *)&v90.value;
      v54 = *(double *)&v90.timescale;
      v56 = *(double *)&v90.epoch;
    }
    ++v51;
  }
  while (v51 != 8);
  v64 = v82;
  v82[15] = v53;
  v64[16] = v52;
  v64[17] = v54;
  v64[18] = v55;
  v64[19] = v56;
  v64[20] = v57;
  v65 = operator new();
  v66 = (_QWORD *)v65;
  v78 = v82;
  v79 = v83;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v68 = __ldxr(p_shared_owners);
    while (__stxr(v68 + 1, p_shared_owners));
  }
  Li3DEngineObject::Li3DEngineObject(v65, &v78);
  v69 = v79;
  if (v79)
  {
    v70 = (unint64_t *)&v79->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v90.value = (CMTimeValue)v66;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v90.timescale, (PCShared_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
  v72 = OZRenderParams::getWorkingGamut((OZRenderParams *)a2);
  LiGraphBuilder::add3DEngine((PCMutex *)a3, &v90, v72);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v90.timescale);
  v90 = *(CMTime *)a2;
  PreserveTransparency = OZElement::getPreserveTransparency((OZElement *)a7, &v90);
  v90 = *(CMTime *)a2;
  if ((*((unsigned int (**)(OZChannel *, CMTime *))a7->var0 + 197))(a7, &v90))
    v74 = 1;
  else
    v74 = PreserveTransparency;
  if (v74 == 1)
    LiGraphBuilder::partitionWorld(a3);
  v75 = v83;
  if (v83)
  {
    v76 = (unint64_t *)&v83->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v91);
  PCSharedCount::~PCSharedCount(&v85);
}

void sub_1B2E8BFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void OZ3DEngineCore::makeRenderImageSource(uint64_t a1@<X1>, const OZRenderGraphState *a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, CMTime *a5@<X5>, OZChannel *a6@<X6>, uint64_t a7@<X7>, PCSharedCount *a8@<X8>)
{
  unsigned __int8 v15;
  LiGroup *v16;
  LiGraphBuilder *v17;
  LiGraphBuilder *v18;
  const LiGraphBuilder *v19;
  uint64_t v25;
  uint32x2_t v26;
  uint64_t v27;
  float64x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  __n128 v32;
  uint64_t v34;
  PCSharedCount v35;
  PCSharedCount v36;
  PCSharedCount v37;
  float64x2_t v38;
  float64x2_t v39;
  PCString v40;
  OZChannel *v41;
  _BYTE v42[64];
  _QWORD v43[20];
  _QWORD v44[10];
  LiGraphBuilder *v45;
  PCSharedCount v46;
  PCSharedCount v47[2];

  if ((v15 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &OZ3DEngineCore::makeRenderImageSource(OZRenderParams const&,OZRenderGraphState const&,BOOL,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m, &dword_1B2737000);
  }
  std::mutex::lock(&OZ3DEngineCore::makeRenderImageSource(OZRenderParams const&,OZRenderGraphState const&,BOOL,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
  v16 = (LiGroup *)operator new();
  LiGroup::LiGroup(v16);
  v46.var0 = (PC_Sp_counted_base *)v16;
  PCSharedCount::PCSharedCount(v47, (LiGroup *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  v45 = 0;
  if (a3)
  {
    OZChannelBase::setRangeName((OZChannelBase *)a1, &v40);
    v17 = (LiGraphBuilder *)operator new();
    LiGraphBuilder::LiGraphBuilder(v17, &v46, &v40);
    v18 = 0;
  }
  else
  {
    v19 = (const LiGraphBuilder *)*((_QWORD *)a2 + 37);
    if (v19)
    {
      v18 = 0;
    }
    else
    {
      v18 = (LiGraphBuilder *)(*((uint64_t (**)(OZChannel *, uint64_t))a6->var0 + 248))(a6, a1);
      v45 = v18;
      v19 = v18;
    }
    v17 = (LiGraphBuilder *)operator new();
    LiGraphBuilder::LiGraphBuilder(v17, v19);
    LiGraphBuilder::addGroupAndMakeCurrent((PCSharedCount *)v17, &v46);
    LiGraphBuilder::setLights((uint64_t)v17, (uint64_t)a2 + 224);
  }
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v42, a2);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v40, (const OZRenderParams *)a1);
  v44[9] = v17;
  v38 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v39 = _Q0;
  if (a3)
  {
    v41 = a6;
    v25 = (*((uint64_t (**)(OZChannel *, float64x2_t *, PCString *))a6->var0 + 185))(a6, &v38, &v40);
  }
  else
  {
    v26 = *(uint32x2_t *)(a1 + 324);
    if (*(_QWORD *)(a1 + 1296))
      v27 = *(_QWORD *)(a1 + 1296);
    else
      v27 = *(_QWORD *)(a1 + 1280);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 688))(v27);
    if (*(_BYTE *)(a1 + 202))
    {
      v25 = (*((uint64_t (**)(OZChannel *, float64x2_t *, PCString *))a6->var0 + 185))(a6, &v38, &v40);
    }
    else
    {
      v29 = vcvt_f32_u32(v26);
      v28.f64[1] = fmin(v28.f64[0], 1.0);
      v30 = vcvt_f32_f64(vmaxnmq_f64(v28, (float64x2_t)xmmword_1B355F270));
      v31.i32[0] = vmul_f32(v29, v30).u32[0];
      v31.i32[1] = vdiv_f32(v29, v30).i32[1];
      v38 = vcvtq_f64_f32(vmul_f32(v31, (float32x2_t)0xBF000000BF000000));
      v39 = vcvtq_f64_f32(v31);
    }
  }
  OZ3DEngineCore::build3DEngineRenderGraph(v25, (uint64_t)&v40, (uint64_t)v17, (uint64_t)v42, a4, a5, a6, a7);
  LiGraphBuilder::render2d((const PCSharedCount *)v17, &v36);
  if (!v36.var0)
    throw_PCNullPointerException(1);
  v32 = LiRenderer::setBoundary((uint64_t)v36.var0, (uint64_t)&v38);
  if (a3)
  {
    (*((void (**)(uint64_t *__return_ptr, OZChannel *, uint64_t, uint64_t, __n128))a6->var0 + 261))(&v34, a6, a1, 1, v32);
    if (!v36.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)v36.var0 + 184))(v36.var0, v34);
    PCSharedCount::~PCSharedCount(&v35);
  }
  LiGraphBuilder::~LiGraphBuilder(v17);
  MEMORY[0x1B5E29170]();
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a8, &v36);
  PCSharedCount::~PCSharedCount(&v37);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v40);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v44);
  std::__list_imp<unsigned int>::clear(v43);
  v45 = 0;
  if (v18)
  {
    LiGraphBuilder::~LiGraphBuilder(v18);
    MEMORY[0x1B5E29170]();
  }
  PCSharedCount::~PCSharedCount(v47);
  std::mutex::unlock(&OZ3DEngineCore::makeRenderImageSource(OZRenderParams const&,OZRenderGraphState const&,BOOL,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
}

void sub_1B2E8C4B4(_Unwind_Exception *a1, uint64_t a2, PCSharedCount *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  PCSharedCount v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8.var0 = va_arg(va1, PC_Sp_counted_base *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x6C0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x620]);
  std::unique_ptr<LiGraphBuilder>::reset[abi:ne180100]((LiGraphBuilder **)(v6 - 128), 0);
  PCSharedCount::~PCSharedCount(a3);
  std::mutex::unlock(&OZ3DEngineCore::makeRenderImageSource(OZRenderParams const&,OZRenderGraphState const&,BOOL,PCMatrix44Tmpl<float> const&,CMTime const&,OZElement *,Li3DEngineScene *)::m);
  _Unwind_Resume(a1);
}

CGImageRef OZ3DEngineCore::getEnvironmentMap(OZ3DEngineCore *this, OZScene *a2)
{
  if (*((double *)this + 73) / 100.0 <= 0.0)
    return 0;
  else
    return OZ3DEngineCore::getCachedEnvironmentMap(this);
}

double OZ3DEngineCore::getEnvironmentMapIntensity(OZ3DEngineCore *this, OZScene *a2)
{
  return *((double *)this + 73) / 100.0;
}

CGImageRef OZ3DEngineCore::getCachedEnvironmentMap(OZ3DEngineCore *this)
{
  CGImageRef v1;
  void *v2;
  const __CFString *v3;
  const __CFURL *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  PCImage *v9;
  std::__shared_weak_count *v10;

  v1 = (CGImageRef)OZ3DEngineCore::getCachedEnvironmentMap(void)::environmentMap;
  if (!OZ3DEngineCore::getCachedEnvironmentMap(void)::environmentMap)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.ProVideoiOS"));
    if (!v2)
      v2 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.iMovie.ProVideoiOS"));
    v3 = CFStringCreateWithCString(0, (const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "resourcePath"), "stringByAppendingPathComponent:", CFSTR("SCNDefaultLighting.hdr")), "UTF8String"), 0x600u);
    v4 = CFURLCreateWithFileSystemPath(0, v3, kCFURLPOSIXPathStyle, 0);
    CFRelease(v3);
    PCLoadBitmap(v4, (uint64_t *)&v9);
    CFRelease(v4);
    if (v9)
      v1 = CreateCGImageFromPCBitmap(&v9, 16);
    else
      v1 = 0;
    v5 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    OZ3DEngineCore::getCachedEnvironmentMap(void)::environmentMap = (uint64_t)v1;
  }
  return v1;
}

void sub_1B2E8C6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

float OZMaterialLayerBase::calcTextureScale(OZMaterialLayerBase *this)
{
  OZPreferenceManager *v1;
  PCInfo *TextureResolution;
  float result;

  v1 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  TextureResolution = (PCInfo *)OZPreferenceManager::getTextureResolution(v1);
  if (!(_DWORD)TextureResolution)
  {
    if (PCInfo::texturesShouldUseQuarterRes(TextureResolution))
      LODWORD(TextureResolution) = 3;
    else
      LODWORD(TextureResolution) = 1;
  }
  result = 1.0;
  if ((_DWORD)TextureResolution == 2)
    result = 0.5;
  if ((_DWORD)TextureResolution == 3)
    return 0.25;
  return result;
}

OZChannelBase *OZMaterialLayerBase::initBase(OZMaterialLayerBase *this)
{
  OZMaterialLayerBase::setLayerTypeStrings(this);
  OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
  OZMaterialLayerBase::showHideLayerSubtypeChannel(this);
  (*(void (**)(OZMaterialLayerBase *))(*(_QWORD *)this + 128))(this);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)this, CFSTR("TXMaterialLayerFolderGroupController"));
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)this, CFSTR("TXMaterialLayerFolderLabelController"));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 655360);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 648), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 648), 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 936), 0x100000000, 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 936), CFSTR("OZMaterialLayerSubtypeEnumController"));
  return OZChannelBase::setFlag((OZChannelBase *)this, 128, 0);
}

void OZChannelStringEnum::~OZChannelStringEnum(PCString *this)
{
  PCString *v2;

  this->var0 = (__CFString *)off_1E659C5E0;
  this[2].var0 = (__CFString *)&unk_1E659C950;
  PCString::~PCString(this + 35);
  v2 = this + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  OZChannelEnum::~OZChannelEnum(this);
}

{
  PCString *v2;

  this->var0 = (__CFString *)off_1E659C5E0;
  this[2].var0 = (__CFString *)&unk_1E659C950;
  PCString::~PCString(this + 35);
  v2 = this + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  OZChannelEnum::~OZChannelEnum(this);
  MEMORY[0x1B5E29170]();
}

void OZMaterialLayerBase::OZMaterialLayerBase(OZMaterialLayerBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;
  PCString v7;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(_QWORD *)v5 = off_1E659B740;
  *(_QWORD *)(v5 + 16) = &unk_1E659BAE0;
  *(_BYTE *)(v5 + 128) = 0;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Layer Selection Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Layer Selection"));
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 136), &v7, &v6, (OZChannelFolder *)this, 1u, 0xAu, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Layer Subselection Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Layer Subselection"));
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 392), &v7, &v6, (OZChannelFolder *)this, 2u, 0xAu, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Layer Selection Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Layer Selection"));
  OZChannelStringEnum::OZChannelStringEnum((OZMaterialLayerBase *)((char *)this + 648), &v7, &v6, (OZChannelFolder *)this, 3u, 2u);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Layer Subselection Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Layer Subselection"));
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 936), &v7, &v6, (OZChannelFolder *)this, 4u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 150) = 0;
  *((_QWORD *)this + 149) = (char *)this + 1200;
  *((_DWORD *)this + 304) = 0;
  OZMaterialLayerBase::initBase(this);
}

void sub_1B2E8CADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;
  OZChannelEnum *v11;
  OZChannelEnum *v12;
  PCString *v13;
  OZChannelEnum *v14;
  uint64_t v15;
  PCSpinLock *v16;
  _QWORD **v17;
  _QWORD **v18;
  OZChannelEnum *v19;

  v18 = v17;
  v19 = v14;
  PCSpinLock::~PCSpinLock(v16);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v15, *v18);
  OZChannelEnum::~OZChannelEnum(v19);
  OZChannelStringEnum::~OZChannelStringEnum(v13);
  OZChannelEnum::~OZChannelEnum(v12);
  OZChannelEnum::~OZChannelEnum(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void sub_1B2E8CBA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2E8CB94);
}

void sub_1B2E8CBC4()
{
  JUMPOUT(0x1B2E8CB94);
}

void OZMaterialLayerBase::OZMaterialLayerBase(OZMaterialLayerBase *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *(_QWORD *)v5 = off_1E659B740;
  *(_QWORD *)(v5 + 16) = &unk_1E659BAE0;
  *(_BYTE *)(v5 + 128) = 0;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 136), (const OZChannelEnum *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 392), (const OZChannelEnum *)&a2[3].var7, (OZChannelFolder *)this);
  OZChannelStringEnum::OZChannelStringEnum((OZMaterialLayerBase *)((char *)this + 648), (const OZChannelStringEnum *)&a2[5].var11, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZMaterialLayerBase *)((char *)this + 936), (const OZChannelEnum *)&a2[8].var5, (OZChannelFolder *)this);
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 150) = 0;
  *((_QWORD *)this + 149) = (char *)this + 1200;
  *((_DWORD *)this + 304) = 0;
  OZChannelBase::setFlag((OZChannelBase *)this, 128, 0);
}

void sub_1B2E8CCA0(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannelEnum *v2;
  OZChannelEnum *v3;
  PCString *v4;
  _QWORD **v5;
  OZChannelEnum *v6;
  uint64_t v7;
  PCSpinLock *v8;
  PCSpinLock *v9;
  _QWORD **v10;

  v9 = v8;
  v10 = v5;
  PCSpinLock::~PCSpinLock(v9);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v7, *v10);
  OZChannelEnum::~OZChannelEnum(v6);
  OZChannelStringEnum::~OZChannelStringEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZMaterialLayerBase::setLayerTypeStrings(OZMaterialLayerBase *this)
{
  uint64_t v2;
  const void *v3;
  PCString *v4;
  PCString v5;

  v2 = (*(uint64_t (**)(OZMaterialLayerBase *))(*(_QWORD *)this + 864))(this);
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = (PCString *)((char *)this + 648);
    OZChannelEnum::clearStrings(v4);
    PCURL::PCURL((PCURL *)&v5, v3);
    OZChannelStringEnum::setStrings(v4, &v5, 1);
    PCString::~PCString(&v5);
  }
}

void sub_1B2E8CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialLayerBase::setLayerSubtypeStrings(PCString *this)
{
  uint64_t v2;
  const void *v3;
  PCString v5;

  v2 = ((uint64_t (*)(PCString *))this->var0[27].info)(this);
  if (v2)
  {
    v3 = (const void *)v2;
    OZChannelEnum::clearStrings(this + 117);
    PCURL::PCURL((PCURL *)&v5, v3);
    OZChannelEnum::setStrings(this + 117, &v5, 1);
    PCString::~PCString(&v5);
    ((void (*)(PCString *__return_ptr, PCString *))this->var0[27].data)(&v5, this);
    OZChannelEnum::setImages((OZChannelEnum *)&this[117], &v5);
    PCString::~PCString(&v5);
  }
  return ((uint64_t (*)(PCString *))this->var0[24].data)(this);
}

void sub_1B2E8CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZChannelBase *OZMaterialLayerBase::showHideLayerSubtypeChannel(OZMaterialLayerBase *this)
{
  uint64_t v2;
  OZChannelBase *v3;

  v2 = (*(uint64_t (**)(OZMaterialLayerBase *))(*(_QWORD *)this + 872))(this);
  v3 = (OZChannelBase *)((char *)this + 936);
  if (v2)
    return OZChannelBase::resetFlag(v3, 0x400000, 0);
  else
    return OZChannelBase::setFlag(v3, 0x400000, 0);
}

void OZMaterialLayerBase::~OZMaterialLayerBase(OZMaterialLayerBase *this)
{
  void **v2;

  *(_QWORD *)this = off_1E659B740;
  *((_QWORD *)this + 2) = &unk_1E659BAE0;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 304);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy((uint64_t)this + 1192, *((_QWORD **)this + 150));
  OZChannelEnum::~OZChannelEnum((OZMaterialLayerBase *)((char *)this + 936));
  *((_QWORD *)this + 81) = off_1E659C5E0;
  *((_QWORD *)this + 83) = &unk_1E659C950;
  PCString::~PCString((PCString *)this + 116);
  v2 = (void **)((char *)this + 904);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZChannelEnum::~OZChannelEnum((PCString *)this + 81);
  OZChannelEnum::~OZChannelEnum((OZMaterialLayerBase *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((OZMaterialLayerBase *)((char *)this + 136));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

void OZMaterialLayerBase::collectInternalTexturesFromLayeredMaterial(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

char *OZMaterialLayerBase::removeThisFromBehaviors(OZChannelBase *this)
{
  char *result;
  const void *v3;
  char *v4;
  uint64_t i;

  result = (char *)OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    v3 = (const void *)*((_QWORD *)result + 158);
    if (v3)
    {
      if (result
      {
        v4 = result + 1000;
        for (i = *((_QWORD *)result + 126); (char *)i != v4; i = *(_QWORD *)(i + 8))
          result = (char *)(*(uint64_t (**)(_QWORD, OZChannelBase *))(**(_QWORD **)(i + 16) + 160))(*(_QWORD *)(i + 16), this);
      }
    }
  }
  return result;
}

uint64_t OZMaterialLayerBase::parseEnd(OZMaterialLayerBase *this, PCSerializerReadStream *a2)
{
  uint64_t v3;
  const CMTime *v4;
  int ValueAsInt;
  int v6;

  v3 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 392), 2))
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 648), v4, (double)ValueAsInt, 0);
    v6 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 392), v4, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 936), v4, (double)v6, 0);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 10, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 392), 10, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 648), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 648), 0x400000, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 936), 0x400000, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 936), 2, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x80000);
  OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
  OZMaterialLayerBase::showHideLayerSubtypeChannel(this);
  OZChannelBase::setFlag((OZChannelBase *)this, 128, 0);
  return v3;
}

uint64_t `non-virtual thunk to'OZMaterialLayerBase::parseEnd(OZMaterialLayerBase *this, PCSerializerReadStream *a2)
{
  return OZMaterialLayerBase::parseEnd((OZMaterialLayerBase *)((char *)this - 16), a2);
}

uint64_t OZMaterialLayerBase::getDefaultSublayerType(OZMaterialLayerBase *this)
{
  return 0;
}

OZChannelBase *OZMaterialLayerBase::setLayerType(OZMaterialLayerBase *this, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int ValueAsInt;
  int v7;

  v4 = (char *)this + 648;
  v5 = MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(char *, uint64_t, _QWORD, double))(*((_QWORD *)this + 81) + 712))(v4, v5, 0, (double)(int)a2);
  if (ValueAsInt != (_DWORD)a2)
  {
    v7 = (*(uint64_t (**)(OZMaterialLayerBase *, uint64_t))(*(_QWORD *)this + 904))(this, a2);
    (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)this + 117) + 712))((char *)this + 936, MEMORY[0x1E0CA2E68], 0, (double)v7);
    OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
  }
  return OZMaterialLayerBase::showHideLayerSubtypeChannel(this);
}

OZChannelObjectRootBase *OZMaterialLayerBase::markFactoriesForSerialization(OZFactory **this, OZChannelFolder *a2)
{
  PCSerializerWriteStream *v4;

  OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  return OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization((OZChannelObjectRootBase *)this, a2, v4);
}

OZChannelObjectRootBase *`non-virtual thunk to'OZMaterialLayerBase::markFactoriesForSerialization(OZFactory **this, OZChannelFolder *a2)
{
  OZChannelObjectRootBase *v3;
  PCSerializerWriteStream *v4;

  v3 = (OZChannelObjectRootBase *)(this - 2);
  OZFactory::setNeedsSaving(*(this - 1), (const OZFactory *)1);
  return OZChannelObjectRootBase::markVaryingFolderFactoriesForSerialization(v3, a2, v4);
}

uint64_t OZMaterialLayerBase::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  OZFactory *var1;
  const OZFactory *v7;

  var1 = this->var1;
  v7 = (const OZFactory *)OZFactory::fileRefID(var1, a2);
  OZFactory::setFileRefID(var1, v7);
  return OZChannelBase::writeHeader(this, a2, a3);
}

uint64_t `non-virtual thunk to'OZMaterialLayerBase::writeHeader(OZMaterialLayerBase *this, OZFactory *a2, int a3)
{
  return OZMaterialLayerBase::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t OZMaterialLayerBase::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  OZChannelBase::writeFlags((uint64_t)this, a2, 1);
  return OZChannelFolder::writeBody(this, a2, 0, a4, 0);
}

uint64_t `non-virtual thunk to'OZMaterialLayerBase::writeBody(OZMaterialLayerBase *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  OZChannelFolder *v6;

  v6 = (OZChannelFolder *)((char *)this - 16);
  OZChannelBase::writeFlags((uint64_t)this - 16, a2, 1);
  return OZChannelFolder::writeBody(v6, a2, 0, a4, 0);
}

BOOL OZMaterialLayerBase::allowsAssignment(OZMaterialLayerBase *this, const OZChannelBase *a2)
{
  OZFactory *var1;
  uint64_t v4;
  _BOOL8 result;
  int32x4_t v6;

  result = 0;
  if (a2)
  {
    var1 = a2->var1;
    if (var1)
    {
      v4 = *((_QWORD *)this + 1);
      if (v4)
      {
        v6 = *(int32x4_t *)(v4 + 8);
        if ((OZFactory::isKindOfClass((unint64_t)var1, &v6) & 1) != 0)
          return 1;
      }
    }
  }
  return result;
}

OZChannelBase *OZMaterialLayerBase::channelValueWillBeSet(OZChannelBase *this, OZChannel *a2, const CMTime *a3, double a4)
{
  OZChannelBase *v6;
  OZChannel *v7;
  OZChannelMaterialLayerMap *v8;
  uint64_t ObjectManipulator;
  OZLayeredMaterial *v10;
  OZChannel *v11;
  OZChannelBase *v12;
  uint64_t v13;
  const PCString *v14;

  v6 = this;
  v7 = a2;
  while (1)
  {
    v7 = (OZChannel *)v7->var6;
    if (!v7)
      break;
    if (this)
    {
      v8 = (OZChannelMaterialLayerMap *)this;
      if (&this[17].var8 == (unint64_t *)a2)
      {
        ObjectManipulator = OZChannelBase::getObjectManipulator(v6);
        if (ObjectManipulator)
          v10 = (OZLayeredMaterial *)(ObjectManipulator - 16);
        else
          v10 = 0;
        this = (OZChannelBase *)OZChannelMaterialLayerMap::willSetSharedTransform(v8, a4, v10);
      }
      break;
    }
  }
  v11 = a2;
  while (1)
  {
    v11 = (OZChannel *)v11->var6;
    if (!v11)
      break;
    if (this)
    {
      v12 = this;
      if (&this[1].var2 == (void ***)a2)
      {
        v13 = OZChannelBase::getObjectManipulator(v6);
        if (v13)
          v14 = (const PCString *)(v13 - 16);
        else
          v14 = 0;
        return (OZChannelBase *)OZChannelBase::setRangeName(v12, v14);
      }
      return this;
    }
  }
  return this;
}

uint64_t OZMaterialLayerBase::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  OZChannelFolder::resetToDefault(this, a2);
  return OZMaterialLayerBase::setLayerSubtypeStrings((PCString *)this);
}

OZMaterialLayerSequenceFolder *OZMaterialLayerBase::makeMaterialLayerSequenceChannelFolder(OZMaterialLayerBase *this)
{
  OZMaterialLayerSequenceFolder *v2;
  OZChannelDouble *v3;
  PCString v5;

  v2 = (OZMaterialLayerSequenceFolder *)operator new();
  OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(v2, (const PCString *)this + 4, 0, *((_DWORD *)this + 6), 0);
  v3 = (OZChannelDouble *)operator new();
  PCString::PCString(&v5, "No Sequence Channels");
  OZChannelDouble::OZChannelDouble(v3, &v5, (OZChannelFolder *)v2, 0x270Eu, 0, 0, 0);
  PCString::~PCString(&v5);
  (*(void (**)(OZChannelDouble *, _QWORD, _QWORD))(*(_QWORD *)v3 + 104))(v3, 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)v3, 0x8000, 0);
  return v2;
}

void sub_1B2E8D5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialLayerBase::getSequenceChannels(OZChannelBase *this)
{
  uint64_t ObjectManipulator;
  uint64_t v3;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator)
    v3 = ObjectManipulator - 16;
  else
    v3 = 0;
  return OZLayeredMaterial::getSequenceChannelsForMaterialLayer(v3, (uint64_t)this);
}

void OZMaterialLayerBase::getTextureTokensLock(OZMaterialLayerBase *this@<X0>, os_unfair_lock_s **a2@<X8>)
{
  os_unfair_lock_s *v2;

  v2 = (os_unfair_lock_s *)((char *)this + 1216);
  *a2 = v2;
  PCSpinLock::lock(v2);
}

_QWORD *OZMaterialLayerBase::findToken@<X0>(OZMaterialLayerBase *this@<X0>, const PCHash128 *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)this + 1192, a2);
  if ((_QWORD *)((char *)this + 1200) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = result[7];
    *a3 = result[6];
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void OZMaterialLayerBase::addToken(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = (uint64_t **)(a1 + 1192);
  v10 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,LiTextureStoreToken>>(v3, (const PCHash128 *)&v10, (uint64_t)&v10);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B2E8D74C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AddGradientToMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  const CMTime *v27;
  _QWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t SamplerInfo;
  char v33;
  BOOL v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  _QWORD *v48;
  OZCacheManager *Hash;
  PGTextureCache *v50;
  float64x2_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  OZCacheManager *v59;
  PGTextureCache *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  OZGradientGroupShader *v69;
  const void *v70;
  void *v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  GLuint Name;
  OZCacheManager *v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  PGTextureCache *v88;
  int v89;
  int v90;
  uint64_t v91;
  double v97;
  float64x2_t v98;
  float64x2_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  long double v106;
  double v107;
  double v108;
  double v109;
  float64x2_t v110;
  double v111;
  char v112;
  uint64_t v113;
  LiImageSource *v114;
  LiSolidSource *v115;
  LiFixedSize *v116;
  LiImageTransform *v117;
  uint64_t i;
  char *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  PGHelium *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  HGRenderer *v139;
  int64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  OZCacheManager *v149;
  __int128 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  PGTextureCache *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char v180;
  int v181;
  int v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  int ValueAsInt;
  LiMaterialSamplerInfo *v191;
  double v192;
  __int16 v193;
  __int16 v194;
  uint64_t v195;
  _QWORD *v196;
  _OWORD v197[2];
  float64x2_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  __int128 v201;
  void *lpsrc;
  std::__shared_weak_count *v203;
  _OWORD v204[3];
  uint64_t v205;
  __int128 v206;
  _BYTE v207[24];
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  CGColorSpace *v216;
  std::__shared_weak_count *v217;
  _OWORD v218[2];
  uint64_t v219[3];
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  LiImageTransform *v228;
  PCSharedCount v229;
  LiFixedSize *v230;
  PCSharedCount v231;
  __n128 *v232;
  PCSharedCount v233;
  __int128 v234;
  CMTimeEpoch epoch;
  CMTime v236;
  LiImageSource *v237;
  PCSharedCount v238;
  float64x2_t v239;
  PGTexture *v240[2];
  __int128 v241;
  _BYTE v242[40];
  int v243;
  char v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  _BYTE v255[48];
  float64x2_t v256;
  __int128 v257;
  uint64_t v258;
  _BYTE v259[4000];
  int8x8_t v260[523];

  v9 = MEMORY[0x1E0C80A78](a1);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v195 = v17;
  v19 = v18;
  v20 = v10;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v27 = (const CMTime *)v9;
  v260[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v254 = 0x3FF0000000000000;
  v251 = 0x3FF0000000000000;
  v248 = 0x3FF0000000000000;
  v245 = 0x3FF0000000000000;
  v246 = 0u;
  v247 = 0u;
  v249 = 0u;
  v250 = 0u;
  v252 = 0u;
  v253 = 0u;
  v28 = (_QWORD *)(v10 + 576);
  v29 = *(_DWORD *)(v10 + 588);
  if (*(_DWORD *)(v10 + 584) <= v29)
    v30 = (2 * (v29 + 1)) | 1;
  else
    v30 = *(_DWORD *)(v10 + 584);
  v196 = v28;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v28, v29 + 1, v30);
  v31 = *(_QWORD *)(v20 + 592) + 152 * *(int *)(v20 + 588);
  *(_QWORD *)(v31 - 152) = *(_QWORD *)(v19 + 80);
  ProShade::Value::set(v31 - 144, (const PCString *)3, 7, &v245);
  SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v20, *(const ProShade::SamplerNode **)(v19 + 16));
  v243 = *(_DWORD *)(SamplerInfo + 324);
  v244 = *(_BYTE *)(SamplerInfo + 328);
  v33 = *(_BYTE *)(SamplerInfo + 329);
  v193 = *(_WORD *)(SamplerInfo + 330);
  v194 = *(_WORD *)(SamplerInfo + 338);
  v34 = v12 != 0;
  ProGL::GL::GL((ProGL::GL *)v242);
  if (OZChannel::getValueAsInt((OZChannel *)(v16 + 800), v27, 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 1192), v27, 0.0);
    v36 = v35;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 1344), v27, 0.0);
    v38 = v37;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 1896), v27, 0.0);
    v40 = v39;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 2048), v27, 0.0);
    v42 = sqrt((v40 - v36) * (v40 - v36) + (v41 - v38) * (v41 - v38));
    v43 = *(double *)(v14 + 24);
    v44 = 512.0 / v42;
    v45 = v42 <= 512.0;
    if (v42 <= 512.0)
      v44 = 1.0;
    v192 = v44;
    v46 = v42 + 512.0;
    if (v45)
      v47 = v46;
    else
      v47 = 1024.0;
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v260);
    PCString::PCString((PCString *)v255, "OZMaterialLayer::gradient2d");
    v48 = v196;
    PCHashWriteStream::writeValue(v260, (PCString *)v255);
    PCString::~PCString((PCString *)v255);
    OZChannelGradient::getGradientHash(v16);
    PCHashWriteStream::writeValue(v260, (const PCHash128 *)v255);
    Hash = (OZCacheManager *)PCHashWriteStream::getHash(v260);
    v241 = *(_OWORD *)Hash;
    v50 = (PGTextureCache *)OZCacheManager::Instance(Hash);
    OZCacheManager::getTextureForKey(v50, (HGGPUComputeDevice **)v26, (const PCHash128 *)&v241, 0, v240);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v239);
    if (v240[0])
    {
      PGTexture::getPGLTexture((uint64_t)v240[0], v255);
      v51 = *(float64x2_t *)v255;
      *(_QWORD *)&v255[8] = 0;
      *(_QWORD *)v255 = 0;
      v52 = *(std::__shared_weak_count **)&v239.f64[1];
      v239 = v51;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = *(std::__shared_weak_count **)&v255[8];
      if (*(_QWORD *)&v255[8])
      {
        v56 = (unint64_t *)(*(_QWORD *)&v255[8] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    else
    {
      v68 = operator new();
      OZGradientSource::OZGradientSource((OZGradientSource *)v68);
      v237 = (LiImageSource *)v68;
      PCSharedCount::PCSharedCount(&v238, (PCShared_base *)(v68 + *(_QWORD *)(*(_QWORD *)v68 - 24)));
      if (!v68)
        throw_PCNullPointerException(1);
      *(int64x2_t *)((char *)v237 + 40) = vdupq_n_s64(0x4080000000000000uLL);
      *(double *)(v68 + 56) = v47;
      *(_QWORD *)(v68 + 64) = 0x4080000000000000;
      v69 = (OZGradientGroupShader *)operator new();
      OZGradientGroupShader::OZGradientGroupShader(v69, (OZChannelGradientExtras *)v16, a9, 1.0);
      v236 = *v27;
      OZGradientGroupShader::update(v69, &v236);
      v70 = (const void *)*((_QWORD *)v69 + 3);
      if (v70)
      else
        v71 = 0;
      v113 = operator new();
      OZGradientRadial::OZGradientRadial(v113, (uint64_t)v71);
      v234 = *(_OWORD *)&v27->value;
      epoch = v27->epoch;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v113 + 24))(v113, &v234);
      v114 = v237;
      if (!v237)
        throw_PCNullPointerException(1);
      *((_QWORD *)v237 + 9) = v113;
      *((_DWORD *)v114 + 20) = 1;
      OZGradientGroupShader::~OZGradientGroupShader(v69);
      MEMORY[0x1B5E29170]();
      v115 = (LiSolidSource *)operator new();
      LiSolidSource::LiSolidSource(v115);
      v232 = (__n128 *)v115;
      PCSharedCount::PCSharedCount(&v233, (LiSolidSource *)((char *)v115 + *(_QWORD *)(*(_QWORD *)v115 - 24)));
      PCWorkingColor::WHITE(a9, (PCWorkingColor *)v255);
      if (!v115)
        throw_PCNullPointerException(1);
      PCWorkingColor::operator=(v232 + 1, (__n128 *)v255);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v255[16]);
      v116 = (LiFixedSize *)operator new();
      LiFixedSize::LiFixedSize(v116);
      v230 = v116;
      PCSharedCount::PCSharedCount(&v231, (LiFixedSize *)((char *)v116 + *(_QWORD *)(*(_QWORD *)v116 - 24)));
      if (!v116)
        throw_PCNullPointerException(1);
      (*(void (**)(LiFixedSize *, __n128 *))(*(_QWORD *)v230 + 168))(v116, v232);
      *(_OWORD *)((char *)v230 + 36) = xmmword_1B355F220;
      v117 = (LiImageTransform *)operator new();
      LiImageTransform::LiImageTransform(v117);
      v228 = v117;
      PCSharedCount::PCSharedCount(&v229, (LiImageTransform *)((char *)v117 + *(_QWORD *)(*(_QWORD *)v117 - 24)));
      v227 = 0x3FF0000000000000;
      v224 = 0x3FF0000000000000;
      v221 = 0x3FF0000000000000;
      v219[0] = 0x3FF0000000000000;
      *(_OWORD *)&v219[1] = 0u;
      v220 = 0u;
      v222 = 0u;
      v223 = 0u;
      v225 = 0u;
      v226 = 0u;
      if (!v117)
        throw_PCNullPointerException(1);
      for (i = 0; i != 16; i += 4)
      {
        v119 = (char *)v117 + i * 8;
        *(_OWORD *)(v119 + 40) = *(_OWORD *)&v219[i];
        *(_OWORD *)(v119 + 56) = *(_OWORD *)&v219[i + 2];
      }
      (*(void (**)(LiImageTransform *, LiFixedSize *))(*(_QWORD *)v117 + 168))(v117, v230);
      if (!v237)
        throw_PCNullPointerException(1);
      (*(void (**)(LiImageSource *, LiImageTransform *))(*(_QWORD *)v237 + 168))(v237, v228);
      FxColorDescription::FxColorDescription((uint64_t)v218, a9, 0, &kPCNoToneMapMethod, 1);
      v120 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v255 = *(_QWORD *)v26;
      *(_QWORD *)&v255[8] = v120;
      if (v120)
      {
        v121 = (unint64_t *)(v120 + 8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      LiRenderParameters::LiRenderParameters(&v206, v218, v255, v22);
      v123 = *(std::__shared_weak_count **)&v255[8];
      if (*(_QWORD *)&v255[8])
      {
        v124 = (unint64_t *)(*(_QWORD *)&v255[8] + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      LiAgent::LiAgent((LiAgent *)v255, (const LiRenderParameters *)&v206, 1);
      if (!v237)
        throw_PCNullPointerException(1);
      LiImageSource::getHeliumPublic(&v205, v237, (LiAgent *)v255);
      v126 = LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)v204);
      PGHelium::Instance(v126);
      v133 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)&v197[0] = *(_QWORD *)v26;
      *((_QWORD *)&v197[0] + 1) = v133;
      if (v133)
      {
        v134 = (unint64_t *)(v133 + 8);
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      PGHelium::acquireRenderer(v197, v127, v128, v129, v130, v131, v132, &lpsrc);
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v197[0] + 1);
      if (*((_QWORD *)&v197[0] + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v197[0] + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      v139 = (HGRenderer *)lpsrc;
      if (lpsrc)
      v201 = xmmword_1B355F220;
      PGHelium::renderNodeToTexture(v139, &v205, (uint64_t)&v201, 13, a9, (HGGLBlendingInfo *)v204, 0, &v199);
      ProGL::TextureHandle::getName((HGGLBlendingInfo **)(v199 + 64));
      v140.i64[0] = (int)v201;
      v140.i64[1] = SDWORD1(v201);
      v141 = vcvtq_f64_s64(v140);
      v140.i64[0] = SDWORD2(v201);
      v140.i64[1] = SHIDWORD(v201);
      v197[0] = v141;
      v197[1] = vcvtq_f64_s64(v140);
      LiSolidUtils::createRedTexture((PCWorkingColorVector *)&v198);
      v142 = v198;
      v198 = 0uLL;
      v143 = *(std::__shared_weak_count **)&v239.f64[1];
      v239 = v142;
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v146 = *(std::__shared_weak_count **)&v198.f64[1];
      if (*(_QWORD *)&v198.f64[1])
      {
        v147 = (unint64_t *)(*(_QWORD *)&v198.f64[1] + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      PGCreateTextureFromPGLTexture((void (**)(_anonymous_namespace_ **))&v239, v197);
      v150 = v197[0];
      v197[0] = 0uLL;
      v151 = (std::__shared_weak_count *)v240[1];
      *(_OWORD *)v240 = v150;
      if (v151)
      {
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = (std::__shared_weak_count *)*((_QWORD *)&v197[0] + 1);
      if (*((_QWORD *)&v197[0] + 1))
      {
        v155 = (unint64_t *)(*((_QWORD *)&v197[0] + 1) + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = (PGTextureCache *)OZCacheManager::Instance(v149);
      OZCacheManager::addTexture(v157, (uint64_t *)v240, (HGGPUComputeDevice **)v26, (PCHash128 *)&v241);
      v158 = v200;
      if (v200)
      {
        v159 = (unint64_t *)&v200->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      v161 = v203;
      if (v203)
      {
        v162 = (unint64_t *)&v203->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      if (v205)
        (*(void (**)(uint64_t))(*(_QWORD *)v205 + 24))(v205);
      LiAgent::~LiAgent((LiAgent *)v255);
      v164 = v217;
      if (v217)
      {
        v165 = (unint64_t *)&v217->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v216);
      *(_QWORD *)&v207[16] = &unk_1E64FC2F8;
      if ((int)v208 < 0)
        v167 = 1;
      else
        v167 = v208;
      PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v207[16], 0, v167);
      if (*((_QWORD *)&v208 + 1))
        MEMORY[0x1B5E2914C](*((_QWORD *)&v208 + 1), 0x1000C8077774924);
      *((_QWORD *)&v208 + 1) = 0;
      LODWORD(v208) = 0;
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v207[8]);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v218);
      PCSharedCount::~PCSharedCount(&v229);
      PCSharedCount::~PCSharedCount(&v231);
      PCSharedCount::~PCSharedCount(&v233);
      PCSharedCount::~PCSharedCount(&v238);
      v48 = v196;
    }
    v51.f64[0] = 0.0 - v36;
    *(_QWORD *)&v259[32] = 0x3FF0000000000000;
    v258 = 0x3FF0000000000000;
    *(_QWORD *)&v255[40] = 0x3FF0000000000000;
    *(_QWORD *)v255 = 0x3FF0000000000000;
    memset(&v255[8], 0, 32);
    v256 = 0u;
    v257 = 0u;
    memset(v259, 0, 32);
    PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v255, v51, v43 * 0.5 - v38, 0.0);
    if (v192 != 1.0)
    {
      *(float64x2_t *)v255 = vmulq_n_f64(*(float64x2_t *)v255, v192);
      *(float64x2_t *)&v255[16] = vmulq_n_f64(*(float64x2_t *)&v255[16], v192);
      *(float64x2_t *)&v255[32] = vmulq_n_f64(*(float64x2_t *)&v255[32], v192);
      v256 = vmulq_n_f64(v256, v192);
    }
    v168 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v168)
      v169 = (2 * (v168 + 1)) | 1;
    else
      v169 = *(_DWORD *)(v20 + 584);
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v48, v168 + 1, v169);
    v170 = *(_QWORD *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(_QWORD *)(v170 - 152) = *(_QWORD *)(v195 + 16);
    ProShade::Value::set(v170 - 144, (const PCString *)3, 7, v255);
    v171 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v171)
      v172 = (2 * (v171 + 1)) | 1;
    else
      v172 = *(_DWORD *)(v20 + 584);
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v48, v171 + 1, v172);
    v173 = *(_QWORD *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(_QWORD *)(v173 - 152) = *(_QWORD *)(v19 + 48);
    v206 = 0uLL;
    *(int64x2_t *)v207 = vdupq_n_s64(0x4090000000000000uLL);
    ProShade::Value::set(v173 - 144, (const PCString *)3, 4, &v206);
    ProShade::SamplerNode::setWrapMode(*(_QWORD *)(v19 + 16), 3);
    v206 = 0x3FF0000000000000uLL;
    *(_OWORD *)&v207[8] = xmmword_1B355F280;
    v208 = xmmword_1B304EED0;
    *(_QWORD *)v207 = 0;
    v209 = 0x4080000000000000;
    v210 = 0;
    v211 = 0;
    v212 = 0x3FF0000000000000;
    v213 = 0u;
    v214 = 0u;
    v215 = 0x3FF0000000000000;
    LiMaterial::setTexture((LiMaterial *)v20, v19, (uint64_t *)&v239, (uint64_t)&v206);
    v174 = *(std::__shared_weak_count **)&v239.f64[1];
    if (*(_QWORD *)&v239.f64[1])
    {
      v175 = (unint64_t *)(*(_QWORD *)&v239.f64[1] + 8);
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    v177 = (std::__shared_weak_count *)v240[1];
    if (v240[1])
    {
      v178 = (unint64_t *)((char *)v240[1] + 8);
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v260);
    v112 = 0;
    v180 = 0;
    v34 = 0;
    v33 = 1;
  }
  else
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v260);
    (*(void (**)(uint64_t, int8x8_t *, const CMTime *))(*(_QWORD *)v16 + 448))(v16, v260, v27);
    v58 = v196;
    v59 = (OZCacheManager *)PCHashWriteStream::getHash(v260);
    v206 = *(_OWORD *)v59;
    v60 = (PGTextureCache *)OZCacheManager::Instance(v59);
    OZCacheManager::getTextureForKey(v60, (HGGPUComputeDevice **)v26, (const PCHash128 *)&v206, 0, v219);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v204);
    if (v219[0])
    {
      PGTexture::getPGLTexture(v219[0], v255);
      v61 = *(_OWORD *)v255;
      *(_QWORD *)&v255[8] = 0;
      *(_QWORD *)v255 = 0;
      v62 = (std::__shared_weak_count *)*((_QWORD *)&v204[0] + 1);
      v204[0] = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = *(std::__shared_weak_count **)&v255[8];
      if (*(_QWORD *)&v255[8])
      {
        v66 = (unint64_t *)(*(_QWORD *)&v255[8] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
    }
    else
    {
      OZChannelGradient::getGradient((uint64_t **)v16, v27, 1, a9, (uint64_t)v255, 0x100u, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
      ProGL::createTexture((ProGL *)v242, v218);
      v72 = v218[0];
      v218[0] = 0uLL;
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v204[0] + 1);
      v204[0] = v72;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v218[0] + 1);
      if (*((_QWORD *)&v218[0] + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v218[0] + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)v204);
      glBindTexture(0xDE1u, Name);
      ProGL::TextureHandle::texImage2D((OZChannelBase **)v204, (ProGL::GL *)v242, 0xDE1u, 0, 6408, 256, 1, 0, 0x1908u, 0x1406u, 0);
      glTexParameteri(0xDE1u, 0x2801u, 9987);
      glTexParameterf(0xDE1u, 0x84FEu, 8.0);
      glTexParameteri(0xDE1u, 0x2802u, 33071);
      glTexParameteri(0xDE1u, 0x2803u, 33071);
      ProGL::TextureHandle::texImage2D((OZChannelBase **)v204, (ProGL::GL *)v242, 0xDE1u, 0, 6408, 256, 1, 0, 0x1908u, 0x1406u, v255);
      glFlush();
      PGCreateTextureFromPGLTexture((void (**)(_anonymous_namespace_ **))v204, v218);
      v81 = v218[0];
      v218[0] = 0uLL;
      v82 = (std::__shared_weak_count *)v219[1];
      *(_OWORD *)v219 = v81;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v218[0] + 1);
      if (*((_QWORD *)&v218[0] + 1))
      {
        v86 = (unint64_t *)(*((_QWORD *)&v218[0] + 1) + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = (PGTextureCache *)OZCacheManager::Instance(v80);
      OZCacheManager::addTexture(v88, v219, (HGGPUComputeDevice **)v26, (PCHash128 *)&v206);
      v58 = v196;
    }
    *(_QWORD *)&v259[32] = 0x3FF0000000000000;
    v258 = 0x3FF0000000000000;
    *(_QWORD *)&v255[40] = 0x3FF0000000000000;
    *(_QWORD *)v255 = 0x3FF0000000000000;
    memset(&v255[8], 0, 32);
    v256 = 0u;
    v257 = 0u;
    memset(v259, 0, 32);
    LiMaterial::setTexture((LiMaterial *)v20, v19, (uint64_t *)v204, (uint64_t)v255);
    v89 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v89)
      v90 = (2 * (v89 + 1)) | 1;
    else
      v90 = *(_DWORD *)(v20 + 584);
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v58, v89 + 1, v90);
    v91 = *(_QWORD *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(_QWORD *)(v91 - 152) = *(_QWORD *)(v19 + 48);
    *(_QWORD *)&v255[8] = 0;
    *(_QWORD *)v255 = 0;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)&v255[16] = _Q0;
    ProShade::Value::set(v91 - 144, (const PCString *)3, 4, v255);
    *(_QWORD *)&v259[32] = 0x3FF0000000000000;
    v258 = 0x3FF0000000000000;
    *(_QWORD *)&v255[40] = 0x3FF0000000000000;
    *(_QWORD *)v255 = 0x3FF0000000000000;
    memset(&v255[8], 0, 32);
    v256 = 0u;
    v257 = 0u;
    memset(v259, 0, 32);
    if (OZChannel::getValueAsInt((OZChannel *)(v16 + 2984), MEMORY[0x1E0CA2E68], 0.0) == 1)
    {
      v97 = 1.0 / v24;
      v98 = *(float64x2_t *)v255;
      if (1.0 / v24 == 1.0)
      {
        v99 = *(float64x2_t *)&v255[16];
      }
      else
      {
        v98 = vmulq_n_f64(*(float64x2_t *)v255, v97);
        v99 = vmulq_n_f64(*(float64x2_t *)&v255[16], v97);
      }
      *(float64x2_t *)v255 = vaddq_f64(*(float64x2_t *)&v259[8], v98);
      *(float64x2_t *)&v255[16] = vaddq_f64(*(float64x2_t *)&v259[24], v99);
      v112 = 1;
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 1192), v27, 0.0);
      v101 = v100;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 1344), v27, 0.0);
      v103 = v102;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 1896), v27, 0.0);
      v105 = v104;
      OZChannel::getValueAsDouble((OZChannel *)(v16 + 2048), v27, 0.0);
      v106 = v105 - v101;
      v108 = v107 - v103;
      v109 = -atan2(v107 - v103, v106);
      v110.f64[0] = -v101;
      PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v255, v110, -v103, 0.0);
      PCMatrix44Tmpl<double>::leftRotate((double *)v255, 2, v109);
      v111 = 1.0 / sqrt(v106 * v106 + v108 * v108);
      v112 = 0;
      if (v111 != 1.0)
      {
        *(float64x2_t *)v255 = vmulq_n_f64(*(float64x2_t *)v255, v111);
        *(float64x2_t *)&v255[16] = vmulq_n_f64(*(float64x2_t *)&v255[16], v111);
      }
    }
    v181 = *(_DWORD *)(v20 + 588);
    if (*(_DWORD *)(v20 + 584) <= v181)
      v182 = (2 * (v181 + 1)) | 1;
    else
      v182 = *(_DWORD *)(v20 + 584);
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(v58, v181 + 1, v182);
    v183 = *(_QWORD *)(v20 + 592) + 152 * *(int *)(v20 + 588);
    *(_QWORD *)(v183 - 152) = *(_QWORD *)(v195 + 16);
    ProShade::Value::set(v183 - 144, (const PCString *)3, 7, v255);
    ProShade::SamplerNode::setWrapMode(*(_QWORD *)(v19 + 16), 3);
    v184 = (std::__shared_weak_count *)*((_QWORD *)&v204[0] + 1);
    if (*((_QWORD *)&v204[0] + 1))
    {
      v185 = (unint64_t *)(*((_QWORD *)&v204[0] + 1) + 8);
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v187 = (std::__shared_weak_count *)v219[1];
    if (v219[1])
    {
      v188 = (unint64_t *)(v219[1] + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v260);
    v180 = 1;
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v16 + 2728), MEMORY[0x1E0CA2E68], 0.0);
  v191 = LiMaterial::obtainSamplerInfo((LiMaterial *)v20, *(const ProShade::SamplerNode **)(v19 + 16));
  *((_WORD *)v191 + 158) = 1;
  *((_BYTE *)v191 + 318) = v112;
  *((_BYTE *)v191 + 319) = 0;
  *((_DWORD *)v191 + 80) = 3;
  *((_DWORD *)v191 + 81) = v243;
  *((_BYTE *)v191 + 328) = v244;
  *((_BYTE *)v191 + 329) = v33;
  *((_WORD *)v191 + 165) = v193;
  *((_DWORD *)v191 + 83) = ValueAsInt == 1;
  *((_BYTE *)v191 + 336) = v180;
  *((_BYTE *)v191 + 337) = v34;
  *((_BYTE *)v191 + 338) = v194;
  *((_BYTE *)v191 + 312) = 1;
  ProGL::GL::~GL((ProGL::GL *)v242);
}

void sub_1B2E8EAB8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x13E8]);
  ProGL::GL::~GL((ProGL::GL *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1B2E8ED54()
{
  JUMPOUT(0x1B2E8ED4CLL);
}

void AddTextureToMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t SamplerInfo;
  __int16 v19;
  char v20;
  int v21;
  int v22;
  int v23;
  char v24;
  char v25;
  int v26;
  const ProShade::SamplerNode *v27;
  LiMaterialSamplerInfo *v28;
  int v29;
  OZImageNode *ImageNode;
  OZImageNode *v31;
  int ValueAsInt;
  __int128 v33;
  int v34;
  OZMaterialLayerBase *v35;
  float v36;
  char v37;
  PCColorSpaceCache *WorkingColorSpace;
  PCColorSpaceHandle *v39;
  OZCacheManager *Hash;
  PGTextureCache *v41;
  OZChannel *v42;
  int v43;
  int v44;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  PC_Sp_counted_base *var0;
  unint64_t *v55;
  unint64_t v56;
  float32x4_t v57;
  signed int os_unfair_lock_opaque;
  int v59;
  uint64_t v60;
  OZMaterialStatistics *v61;
  PC_Sp_counted_base *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  signed int v66;
  int v67;
  uint64_t v68;
  signed int v69;
  int v70;
  uint64_t v71;
  LiMaterialSamplerInfo *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  PCSharedCount *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  PCSharedCount v90;
  PCSharedCount v91;
  __int128 v92;
  _BYTE v93[48];
  __int128 v94;
  __int128 v95;
  _BYTE v96[48];
  _QWORD v97[2];
  __int128 v98;
  PC_Sp_counted_base *v99;
  PCSharedCount v100;
  PGTexture *v101;
  std::__shared_weak_count *v102;
  void (***v103)(HGGPUComputeDevice *__hidden);
  std::__shared_weak_count *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __n128 v116;
  _QWORD v117[3];
  _BYTE v118[72];
  FxColorDescription v119[12];
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  CMTime v124;
  __int16 v125;
  char v126;
  __int16 v127;
  char v128;
  PCSharedCount v129[2];
  float64x2_t v130;
  __n128 v131[260];
  _QWORD v132[523];

  v9 = MEMORY[0x1E0C80A78](a1);
  v80 = v10;
  v81 = v11;
  v82 = v12;
  v14 = v13;
  v83 = v15;
  v87 = v16;
  v132[520] = *MEMORY[0x1E0C80C00];
  v84 = *(PCSharedCount **)(v9 + 16);
  v79 = *(_QWORD *)(v9 + 24);
  v88 = v9;
  v17 = *(os_unfair_lock_s **)v9;
  SamplerInfo = LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)v9, *(const ProShade::SamplerNode **)(v13 + 16));
  v19 = *(_WORD *)(SamplerInfo + 317);
  v20 = *(_BYTE *)(SamplerInfo + 319);
  v21 = *(_DWORD *)(SamplerInfo + 320);
  v22 = *(_DWORD *)(SamplerInfo + 324);
  v23 = *(unsigned __int8 *)(SamplerInfo + 328);
  v128 = *(_BYTE *)(SamplerInfo + 331);
  v127 = *(_WORD *)(SamplerInfo + 329);
  v85 = *(_DWORD *)(SamplerInfo + 332);
  v24 = *(_BYTE *)(SamplerInfo + 336);
  v25 = *(_BYTE *)(SamplerInfo + 337);
  v26 = *(unsigned __int8 *)(SamplerInfo + 338);
  v89 = v14;
  v27 = *(const ProShade::SamplerNode **)(v14 + 16);
  v126 = v128;
  v125 = v127;
  v28 = LiMaterial::obtainSamplerInfo((LiMaterial *)v17, v27);
  *((_BYTE *)v28 + 316) = 0;
  *(_WORD *)((char *)v28 + 317) = v19;
  *((_BYTE *)v28 + 319) = v20;
  *((_DWORD *)v28 + 80) = v21;
  v29 = v22;
  *((_DWORD *)v28 + 81) = v22;
  *((_BYTE *)v28 + 328) = v23;
  *(_WORD *)((char *)v28 + 329) = v125;
  *((_BYTE *)v28 + 331) = v126;
  *((_DWORD *)v28 + 83) = v85;
  *((_BYTE *)v28 + 336) = v24;
  *((_BYTE *)v28 + 337) = v25;
  v86 = v26;
  *((_BYTE *)v28 + 338) = v26;
  *((_BYTE *)v28 + 312) = 1;
  ImageNode = (OZImageNode *)OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(v87 + 136));
  if (ImageNode)
  {
    v31 = ImageNode;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v87 + 1968), MEMORY[0x1E0CA2E68], 0.0);
    v33 = *(_OWORD *)&v84->var0;
    v124.epoch = (CMTimeEpoch)v84[2].var0;
    *(_OWORD *)&v124.value = v33;
    v122 = 0uLL;
    v123 = 0;
    OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)v87, &v124, &v122);
    OZRenderParams::OZRenderParams((OZRenderParams *)v119, (const OZRenderParams *)v84);
    *(__n128 *)&v119[0]._pcColorDesc._colorSpaceRef._obj = v122;
    v121 = 0;
    *(_QWORD *)&v119[0]._pcColorDesc._toneMapMethod._gain = v123;
    v120 = 0;
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v118, v31, (OZRenderParams *)v119);
    v34 = v29;
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v132);
    v117[0] = v117;
    v117[1] = v117;
    v117[2] = 0;
    (*(void (**)(__n128 *__return_ptr, OZImageNode *, _QWORD *, FxColorDescription *, _QWORD *))(*(_QWORD *)v31 + 48))(&v116, v31, v132, v119, v117);
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v131);
    PCHashWriteStream::setHash(v131, &v116);
    v35 = (OZMaterialLayerBase *)OZRenderParams::setReducedResolutionOverride((uint64_t)v119, 1);
    v36 = OZMaterialLayerBase::calcTextureScale(v35);
    PCHashWriteStream::writeValue((int8x8_t *)v131, v36);
    v37 = OZChannel::getValueAsInt((OZChannel *)(v87 + 5744), &v124, 0.0) != 0;
    PCHashWriteStream::writeValue((int8x8_t *)v131, v37);
    if (v29)
    {
      PCHashWriteStream::writeValue((int8x8_t *)v131, v29);
      PCHashWriteStream::writeValue((int8x8_t *)v131, v23 != 0);
    }
    WorkingColorSpace = (PCColorSpaceCache *)OZRenderParams::getWorkingColorSpace(v119);
    if (v29)
    {
      if (v23)
        v39 = (PCColorSpaceHandle *)PCColorSpaceCache::cgsRGB(WorkingColorSpace);
      else
        v39 = 0;
    }
    else if (v86)
    {
      v39 = 0;
    }
    else
    {
      v39 = WorkingColorSpace;
    }
    PCColorSpaceHandle::getMD5(v39, (PCWorkingColorVector *)&v105);
    PCHashWriteStream::writeValue((int8x8_t *)v131, (const PCHash128 *)&v105);
    PCHashWriteStream::writeValue((int8x8_t *)v131, BYTE2(v84[25].var0));
    Hash = (OZCacheManager *)PCHashWriteStream::getHash((int8x8_t *)v131);
    v115 = *(_OWORD *)Hash;
    v41 = (PGTextureCache *)OZCacheManager::Instance(Hash);
    v114 = 0x3FF0000000000000;
    v111 = 0x3FF0000000000000;
    v108 = 0x3FF0000000000000;
    v105 = 0x3FF0000000000000;
    v106 = 0u;
    v107 = 0u;
    v109 = 0u;
    v110 = 0u;
    v112 = 0u;
    v113 = 0u;
    OZRenderParams::getRenderGPU(*(_QWORD *)(v88 + 16), &v103);
    OZCacheManager::getTextureForKey(v41, (HGGPUComputeDevice **)&v103, (const PCHash128 *)&v115, &v105, &v101);
    v99 = 0;
    PCSharedCount::PCSharedCount(&v100);
    if (!v101)
    {
      (*(void (**)(_BYTE *__return_ptr, OZImageNode *, FxColorDescription *, uint64_t, _QWORD))(*(_QWORD *)v31 + 176))(v93, v31, v119, v79, 0);
      v99 = *(PC_Sp_counted_base **)v93;
      PCSharedCount::PCSharedCount(v129, (const PCSharedCount *)&v93[8]);
      PCSharedCount::operator=((uint64_t *)&v100, (uint64_t *)v129);
      PCSharedCount::~PCSharedCount(v129);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v93[8]);
    }
    if (ValueAsInt)
      v42 = (OZChannel *)(v83 + 896);
    else
      v42 = (OZChannel *)(v87 + 2736);
    v43 = OZChannel::getValueAsInt(v42, MEMORY[0x1E0CA2E68], 0.0);
    v44 = OZChannel::getValueAsInt((OZChannel *)(v87 + 1328), &v124, 0.0);
    v97[0] = 0;
    v97[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v98 = _Q0;
    (*(void (**)(OZImageNode *, _QWORD *, FxColorDescription *))(*(_QWORD *)v31 + 88))(v31, v97, v119);
    *(_QWORD *)&v96[40] = 0x3FF0000000000000;
    *(_QWORD *)v96 = 0x3FF0000000000000;
    *(_QWORD *)&v93[40] = 0x3FF0000000000000;
    *(_QWORD *)v93 = 0x3FF0000000000000;
    memset(&v93[8], 0, 32);
    v94 = 0u;
    v95 = 0u;
    memset(&v96[8], 0, 32);
    if (v93 != (_BYTE *)v82)
    {
      v50 = *(_OWORD *)(v82 + 80);
      v95 = *(_OWORD *)(v82 + 64);
      *(_OWORD *)v96 = v50;
      v51 = *(_OWORD *)(v82 + 112);
      *(_OWORD *)&v96[16] = *(_OWORD *)(v82 + 96);
      *(_OWORD *)&v96[32] = v51;
      v52 = *(_OWORD *)(v82 + 16);
      *(_OWORD *)v93 = *(_OWORD *)v82;
      *(_OWORD *)&v93[16] = v52;
      v53 = *(_OWORD *)(v82 + 48);
      *(_OWORD *)&v93[32] = *(_OWORD *)(v82 + 32);
      v94 = v53;
    }
    if (v101)
    {
      PGTexture::getPGLTexture((uint64_t)v101, v129);
      LiMaterial::setTexture((LiMaterial *)v17, v89, (uint64_t *)v129, (uint64_t)&v105);
      var0 = v129[1].var0;
      if (v129[1].var0)
      {
        v55 = (unint64_t *)((char *)v129[1].var0 + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 16))(var0);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)var0);
        }
      }
      v92 = xmmword_1B35579A0;
      PGTexture::getTexCoords((uint64_t)v101, (float32x4_t *)&v92);
      v57 = (float32x4_t)v92;
      os_unfair_lock_opaque = v17[147]._os_unfair_lock_opaque;
      if ((signed int)v17[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
        v59 = (2 * (os_unfair_lock_opaque + 1)) | 1;
      else
        v59 = v17[146]._os_unfair_lock_opaque;
      PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v17[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v59);
      v60 = *(_QWORD *)&v17[148]._os_unfair_lock_opaque + 152 * (int)v17[147]._os_unfair_lock_opaque;
      *(_QWORD *)(v60 - 152) = *(_QWORD *)(v89 + 48);
      *(float64x2_t *)&v129[0].var0 = vcvtq_f64_f32(*(float32x2_t *)v57.f32);
      v130 = vcvtq_f64_f32(*(float32x2_t *)&v57.u32[2]);
      ProShade::Value::set(v60 - 144, (const PCString *)3, 4, v129);
      v61 = *(OZMaterialStatistics **)(v88 + 128);
      PGTexture::getPGLTexture((uint64_t)v101, v129);
      OZMaterialStatistics::registerTexture(v61, (const ProGL::TextureHandle *)v129);
      v62 = v129[1].var0;
      if (v129[1].var0)
      {
        v63 = (unint64_t *)((char *)v129[1].var0 + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v62 + 16))(v62);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v62);
        }
      }
    }
    else
    {
      v90.var0 = v99;
      PCSharedCount::PCSharedCount(&v91, &v100);
      LiMaterial::setTexture((LiMaterial *)v17, v89, &v90, v39, &v115, v36);
      PCSharedCount::~PCSharedCount(&v91);
    }
    v65 = *(_QWORD *)(v89 + 16);
    if (!v65)
      throw_PCNullPointerException(1);
    ProShade::SamplerNode::setWrapMode(v65, v44);
    v66 = v17[147]._os_unfair_lock_opaque;
    if ((signed int)v17[146]._os_unfair_lock_opaque <= v66)
      v67 = (2 * (v66 + 1)) | 1;
    else
      v67 = v17[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v17[144]._os_unfair_lock_opaque, v66 + 1, v67);
    v68 = *(_QWORD *)&v17[148]._os_unfair_lock_opaque + 152 * (int)v17[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v68 - 152) = *(_QWORD *)(v89 + 80);
    ProShade::Value::set(v68 - 144, (const PCString *)3, 7, &v105);
    v69 = v17[147]._os_unfair_lock_opaque;
    if ((signed int)v17[146]._os_unfair_lock_opaque <= v69)
      v70 = (2 * (v69 + 1)) | 1;
    else
      v70 = v17[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v17[144]._os_unfair_lock_opaque, v69 + 1, v70);
    v71 = *(_QWORD *)&v17[148]._os_unfair_lock_opaque + 152 * (int)v17[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v71 - 152) = *(_QWORD *)(v81 + 16);
    ProShade::Value::set(v71 - 144, (const PCString *)3, 7, v93);
    v72 = LiMaterial::obtainSamplerInfo((LiMaterial *)v17, *(const ProShade::SamplerNode **)(v89 + 16));
    *((_BYTE *)v72 + 316) = 1;
    *((_BYTE *)v72 + 317) = v43 != 2;
    *((_BYTE *)v72 + 318) = v43 == 0;
    *((_BYTE *)v72 + 319) = v37;
    *((_DWORD *)v72 + 80) = v44;
    *((_DWORD *)v72 + 81) = v34;
    *((_BYTE *)v72 + 328) = v23;
    *((_BYTE *)v72 + 331) = v128;
    *(_WORD *)((char *)v72 + 329) = v127;
    *((_DWORD *)v72 + 83) = v80;
    *((_BYTE *)v72 + 336) = v24;
    *((_BYTE *)v72 + 337) = a9 != 0;
    *((_BYTE *)v72 + 338) = v86;
    *((_BYTE *)v72 + 312) = 1;
    PCSharedCount::~PCSharedCount(&v100);
    v73 = v102;
    if (v102)
    {
      p_shared_owners = (unint64_t *)&v102->__shared_owners_;
      do
        v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = v104;
    if (v104)
    {
      v77 = (unint64_t *)&v104->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v131);
    std::__list_imp<unsigned int>::clear(v117);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v132);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v118);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v119);
  }
}

void sub_1B2E8F584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  PCSharedCount *v71;

  PCSharedCount::~PCSharedCount(v71);
  PCSharedCount::~PCSharedCount(a15);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x858]);
  std::__list_imp<unsigned int>::clear(&a71);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x1898]);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x208]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x250]);
  _Unwind_Resume(a1);
}

__n128 MaterialTextureTransformer::composeTextureMatrix@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 result;
  uint64_t i;
  uint64_t v6;
  __int128 v7;
  uint64_t j;
  uint64_t v14;
  __int128 v15;
  double v16[2];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  if (a1 != a3)
  {
    for (i = 0; i != 128; i += 32)
    {
      v6 = a3 + i;
      result = *(__n128 *)(a1 + i);
      v7 = *(_OWORD *)(a1 + i + 16);
      *(__n128 *)v6 = result;
      *(_OWORD *)(v6 + 16) = v7;
    }
  }
  if (a2 == 1)
  {
    v27 = 0x3FF0000000000000;
    v24 = 0x3FF0000000000000;
    v21 = 0x3FF0000000000000;
    v18 = 0x3FF0000000000000;
    v19 = 0u;
    v20 = 0u;
    v22 = 0u;
    v23 = 0u;
    v25 = 0u;
    v26 = 0u;
    v16[0] = 0.0;
    v16[1] = 0.0;
    __asm { FMOV            V0.2D, #1.0 }
    v17 = _Q0;
    PCMatrix44Tmpl<double>::rotate((uint64_t)&v18, v16, 0, 3.14159265);
    PCMatrix44Tmpl<double>::operator*(a3, (__int128 *)&v18, (uint64_t)v16);
    if (v16 != (double *)a3)
    {
      for (j = 0; j != 16; j += 4)
      {
        v14 = a3 + j * 8;
        result = *(__n128 *)&v16[j];
        v15 = *(_OWORD *)&v16[j + 2];
        *(__n128 *)v14 = result;
        *(_OWORD *)(v14 + 16) = v15;
      }
    }
  }
  return result;
}

void OZMaterialStatistics::registerTexture(OZMaterialStatistics *this, const ProGL::TextureHandle *a2)
{
  uint64_t v2;
  HGGLBlendingInfo **v3;
  HGGLBlendingInfo **v4;
  uint64_t v5;
  int Name;
  int8x8_t *Hash;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  PCException *exception;
  PCString v13;
  int8x8_t v14[521];

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = v2;
  v14[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v14);
  Name = ProGL::TextureHandle::getName(v4);
  PCHashWriteStream::writeValue(v14, Name);
  Hash = PCHashWriteStream::getHash(v14);
  if (!std::__tree<PCHash128>::__count_unique<PCHash128>(v5 + 16, (const PCHash128 *)Hash))
  {
    std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)(v5 + 16), (const PCHash128 *)Hash, Hash);
    v8 = *(_DWORD *)(v5 + 8) + (int)((double)(unint64_t)ProGL::TextureHandle::getSize(v4) * 0.000000953674316);
    ++*(_DWORD *)(v5 + 4);
    *(_DWORD *)(v5 + 8) = v8;
    if (v8 >= *(_DWORD *)(v5 + 12))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"OZMaterialStatistics(#textures:", 31);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", megs:", 7);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")  maxAvail:", 12);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v13, "exceeded texture memory available");
      PCException::PCException(exception, &v13);
    }
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v14);
}

void sub_1B2E8F958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a10);
  _Unwind_Resume(a1);
}

double MaterialTextureTransformer::composeTextureTransform@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double result;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, (float64x2_t)COERCE_UNSIGNED_INT64(-*a1), -a1[1], 0.0);
  PCMatrix44Tmpl<double>::leftRotate((double *)a3, 2, -a4);
  *(_QWORD *)&result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, 1.0 / *a2, 1.0 / a2[1], 1.0);
  return result;
}

void MaterialTextureTransformer::composeTextureTransform(CMTime *this@<X0>, const CMTime *a2@<X1>, const OZChannel2D *a3@<X2>, const OZChannelRotation3D *a4@<X3>, uint64_t a5@<X8>)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18[2];
  double v19[2];

  OZChannel::getValueAsDouble((OZChannel *)&a2[5].epoch, this, 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)&a2[12], this, 0.0);
  v19[0] = v12;
  v19[1] = v13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 440), this, 0.0);
  v15 = v14;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a4 + 136), this, 0.0);
  v18[0] = v16;
  OZChannel::getValueAsDouble((OZChannel *)((char *)a4 + 288), this, 0.0);
  v18[1] = v17;
  MaterialTextureTransformer::composeTextureTransform(v19, v18, a5, v15);
}

double MaterialTextureTransformer::decomposeTextureTransform(__int128 *a1, double *a2, double *a3, float64x2_t *a4)
{
  double v13;
  double v14;
  double v15;
  double result;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  float64x2_t v31[3];
  int v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  memset(v31, 0, sizeof(v31));
  v32 = 4;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  PCMatrix44Tmpl<double>::getTransformation(a1, (uint64_t)v31);
  __asm { FMOV            V1.2D, #1.0 }
  *a4 = vdivq_f64(_Q1, *(float64x2_t *)((char *)&v31[1] + 8));
  v13 = -*(double *)&v34;
  *a3 = -*(double *)&v34;
  v30 = 0x3FF0000000000000;
  v27 = 0x3FF0000000000000;
  v24 = 0x3FF0000000000000;
  v21 = 0x3FF0000000000000;
  v22 = 0u;
  v23 = 0u;
  v25 = 0u;
  v26 = 0u;
  v28 = 0u;
  v29 = 0u;
  v15 = a4->f64[0];
  v14 = a4->f64[1];
  if (a4->f64[0] != 1.0)
  {
    v21 = *(_QWORD *)&a4->f64[0];
    *(double *)&v22 = v15 * 0.0;
    *((double *)&v22 + 1) = v15 * 0.0;
    *(double *)&v23 = v15 * 0.0;
  }
  if (v14 != 1.0)
  {
    *((double *)&v23 + 1) = v14 * 0.0;
    v24 = *(_QWORD *)&v14;
    *(double *)&v25 = v14 * 0.0;
    *((double *)&v25 + 1) = v14 * 0.0;
  }
  PCMatrix44Tmpl<double>::leftRotate((double *)&v21, 2, v13);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v21, a1, (uint64_t)&v18);
  result = -v19;
  v17 = -v20;
  *a2 = -v19;
  a2[1] = v17;
  return result;
}

uint64_t MaterialTextureTransformer::setTextureTransformChannels(CMTime *a1, __int128 *a2, OZChannel2D *a3, uint64_t a4, OZChannel2D *a5)
{
  float64x2_t v10;
  uint64_t v11;
  double v12[2];

  v12[0] = 0.0;
  v12[1] = 0.0;
  v11 = 0;
  v10 = 0uLL;
  MaterialTextureTransformer::decomposeTextureTransform(a2, v12, (double *)&v11, &v10);
  return MaterialTextureTransformer::setTextureTransformChannels(a1, v12, (double *)&v11, v10.f64, a3, a4, a5);
}

uint64_t MaterialTextureTransformer::setTextureTransformChannels(CMTime *a1, double *a2, double *a3, double *a4, OZChannel2D *this, uint64_t a6, OZChannel2D *a7)
{
  OZChannel2D::setValue(this, a1, *a2, a2[1], 0);
  (*(void (**)(uint64_t, CMTime *, _QWORD, double))(*(_QWORD *)(a6 + 440) + 712))(a6 + 440, a1, 0, *a3);
  return OZChannel2D::setValue(a7, a1, *a4, a4[1], 0);
}

void MaterialTextureTransformer::composeTextureTransform(const CMTime *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, uint64_t a10, _BYTE *a11, unsigned int *a12)
{
  uint64_t v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v31;
  double v33;
  double v35;
  const CMTime *v37;
  unsigned int ValueAsInt;
  int v39;
  _BOOL4 v40;
  double v41;
  double v42;
  OZChannel *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v51;
  double v54;
  const CMTime *v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t i;
  _OWORD *v72;
  __int128 v73;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79[2];
  double v80[2];
  _BYTE v81[136];

  v18 = a2;
  if (!OZChannel::getValueAsInt((OZChannel *)(a2 + 128), MEMORY[0x1E0CA2E68], 0.0))
  {
    v20 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 1288), a1, 0.0);
    v22 = v44;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 1440), a1, 0.0);
    v24 = v45;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 3480), a1, 0.0);
    v26 = v46;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 1992), a1, 0.0);
    v48 = v47;
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 2144), a1, 0.0);
    if (v49 >= 0.0 || v49 <= -0.001)
      v51 = v49;
    else
      v51 = -0.001;
    if (v49 >= 0.0 && v49 < 0.001)
      v33 = 0.001;
    else
      v33 = v51;
    if (v48 >= 0.0 || v48 <= -0.001)
      v54 = v48;
    else
      v54 = -0.001;
    if (v48 >= 0.0 && v48 < 0.001)
      v54 = 0.001;
    v77 = v54;
    v56 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v18 + 384), MEMORY[0x1E0CA2E68], 0.0);
    v57 = OZChannel::getValueAsInt((OZChannel *)(v18 + 2296), v56, 0.0);
    v40 = v57 != 0;
    v76 = 0.0;
    v41 = 0.0;
    if (!v57)
      goto LABEL_54;
    v41 = (double)(int)OZChannel::getValueAsInt((OZChannel *)(v18 + 2448), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(v18 + 2736), a1, 0.0);
    v76 = v58;
    v43 = (OZChannel *)(v18 + 2888);
    goto LABEL_53;
  }
  if (!a3)
  {
    v75 = 0.0;
    v40 = 0;
    v24 = 0.0;
    v22 = 0.0;
    v26 = 0.0;
    v76 = 0.0;
    v77 = 1.0;
    v20 = 0.0;
    v33 = 1.0;
    goto LABEL_57;
  }
  v20 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 2856), a1, 0.0);
  v22 = v21;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 3008), a1, 0.0);
  v24 = v23;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 5048), a1, 0.0);
  v26 = v25;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 3560), a1, 0.0);
  v28 = v27;
  OZChannel::getValueAsDouble((OZChannel *)(a3 + 3712), a1, 0.0);
  if (v29 >= 0.0 || v29 <= -0.001)
    v31 = v29;
  else
    v31 = -0.001;
  if (v29 >= 0.0 && v29 < 0.001)
    v33 = 0.001;
  else
    v33 = v31;
  if (v28 >= 0.0 || v28 <= -0.001)
    v35 = v28;
  else
    v35 = -0.001;
  v18 = a3 + 1568;
  if (v28 >= 0.0 && v28 < 0.001)
    v35 = 0.001;
  v77 = v35;
  v37 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a3 + 1952), MEMORY[0x1E0CA2E68], 0.0);
  v39 = OZChannel::getValueAsInt((OZChannel *)(a3 + 3864), v37, 0.0);
  v40 = v39 != 0;
  v76 = 0.0;
  v41 = 0.0;
  if (v39)
  {
    v41 = (double)(int)OZChannel::getValueAsInt((OZChannel *)(a3 + 4016), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a3 + 4304), a1, 0.0);
    v76 = v42;
    v43 = (OZChannel *)(a3 + 4456);
LABEL_53:
    OZChannel::getValueAsDouble(v43, a1, 0.0);
    v20 = v59;
  }
LABEL_54:
  OZChannelMaterialMapTransform::getPreviewScale((OZChannelMaterialMapTransform *)v18, a1, (uint64_t)v81);
  v75 = v41;
  if (ValueAsInt <= 1)
    *a12 = ValueAsInt;
LABEL_57:
  v60 = 0.0;
  v61 = 0.0;
  v62 = 0.0;
  if (a5 && a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a5 + 136), a1, (double)a8);
    v61 = v63;
    OZChannel::getValueAsDouble((OZChannel *)(a5 + 288), a1, (double)a8);
    v60 = 0.0;
    v62 = v64;
  }
  v78 = v61;
  if (a7 && a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a7 + 136), a1, (double)a8);
    OZChannel::getValueAsDouble((OZChannel *)(a7 + 288), a1, (double)a8);
    OZChannel::getValueAsDouble((OZChannel *)(a7 + 440), a1, (double)a8);
    v60 = v65;
  }
  v66 = 1.0;
  v67 = 1.0;
  if (a6 && a4)
  {
    v68 = v60;
    OZChannel::getValueAsDouble((OZChannel *)(a6 + 136), a1, (double)a8);
    v67 = v69;
    OZChannel::getValueAsDouble((OZChannel *)(a6 + 288), a1, (double)a8);
    v60 = v68;
  }
  if (v40)
  {
    v70 = a9 / v75 * v76 * v77;
    v33 = a9 / v75 * v20 * v33;
    v22 = a9 / v75 * v22;
    v24 = a9 / v75 * v24;
  }
  else
  {
    v70 = v77;
  }
  v80[0] = v78 + v22;
  v80[1] = v62 + v24;
  v79[0] = v67 * v70;
  v79[1] = v66 * v33;
  MaterialTextureTransformer::composeTextureTransform(v80, v79, (uint64_t)v81, v26 + v60);
  if (v81 != a11)
  {
    for (i = 0; i != 128; i += 32)
    {
      v72 = &a11[i];
      v73 = *(_OWORD *)&v81[i + 16];
      *v72 = *(_OWORD *)&v81[i];
      v72[1] = v73;
    }
  }
}

void OZMaterialStatistics::OZMaterialStatistics(OZMaterialStatistics *this)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
}

uint64_t OZChannelEnumWithList_Factory::getInstance(OZChannelEnumWithList_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelEnumWithList_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelEnumWithList_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumWithList_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumWithList_Factory::_instance;
}

void OZChannelEnumWithList::OZChannelEnumWithList(OZChannelEnumWithList *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  OZChannelEnumWithList_Factory *v8;

  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, 0, 0);
  *(_QWORD *)v8 = &off_1E659BB50;
  *((_QWORD *)v8 + 2) = &unk_1E659BEC0;
  *((_QWORD *)this + 1) = OZChannelEnumWithList_Factory::getInstance(v8);
}

void sub_1B2E9028C(_Unwind_Exception *a1)
{
  PCString *v1;

  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumWithList::clone(OZChannelEnumWithList *this)
{
  OZChannelEnum *v2;

  v2 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v2, this, 0);
  *(_QWORD *)v2 = &off_1E659BB50;
  *((_QWORD *)v2 + 2) = &unk_1E659BEC0;
  return v2;
}

void sub_1B2E90300(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList::writeBody(OZChannel *this, PCSerializerWriteStream *a2, int a3)
{
  std::mutex *StringTablesMapLock;
  uint64_t StringTablesMap;
  void **var0;
  uint64_t v9;
  uint64_t v10;
  void **var2;
  void **v12;
  void **v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelEnumWithListScope);
  OZChannel::writeBody(this, a2, a3);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  StringTablesMapLock = (std::mutex *)OZChannelEnum::getStringTablesMapLock((OZChannelEnum *)this);
  PCSharedMutex::lock_shared(StringTablesMapLock);
  StringTablesMap = OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
  var0 = this[1].var0;
  if (var0 != (void **)(StringTablesMap + 8) && &v15 != (uint64_t *)(var0 + 5))
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&v15, (PCString *)var0[5], (PCString *)var0[6], ((_BYTE *)var0[6] - (_BYTE *)var0[5]) >> 3);
  PCSharedMutex::unlock_shared(StringTablesMapLock);
  v9 = v15;
  v10 = v16;
  if (v15 != v16)
  {
    var2 = this[1].var2;
    v12 = *(void ***)&this[1].var3;
    if (var2 != v12)
    {
      v13 = (void **)((char *)var2 + 4);
      do
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 170);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 200))(a2, 1, v9);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, 2, *((unsigned int *)v13 - 1));
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        v9 += 8;
        if (v9 == v10)
          break;
        v14 = v13 == v12;
        v13 = (void **)((char *)v13 + 4);
      }
      while (!v14);
    }
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  v18 = (void **)&v15;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_1B2E90490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::mutex *v12;

  PCSharedMutex::unlock_shared(v12);
  a12 = &a9;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZChannelEnumWithList::writeBody(OZChannelEnumWithList *this, PCSerializerWriteStream *a2, int a3)
{
  OZChannelEnumWithList::writeBody((OZChannel *)((char *)this - 16), a2, a3);
}

uint64_t OZChannelEnumWithList::parseBegin(PCString *this, PCSerializerReadStream *a2)
{
  OZChannelEnum::clearStrings(this);
  this[22].var0 = this[21].var0;
  OZChannel::parseBegin((OZChannel *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelEnumWithListScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelEnumWithList::parseBegin(PCString *this, PCSerializerReadStream *a2)
{
  OZChannelEnumWithList::parseBegin(this - 2, a2);
  return 1;
}

uint64_t OZChannelEnumWithList::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  double DefaultValue;
  __int32 *var2;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;

  DefaultValue = OZChannel::getDefaultValue(this);
  var2 = (__int32 *)this[1].var2;
  v6 = *(__int32 **)&this[1].var3;
  if (var2 != v6)
  {
    v7 = wmemchr(var2, (int)DefaultValue, v6 - var2);
    if (v7)
      v8 = v7;
    else
      v8 = v6;
    if (v6 == v8)
      OZChannel::setDefaultValue(this, (double)*(int *)this[1].var2);
  }
  return OZChannel::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZChannelEnumWithList::parseEnd(OZChannelEnumWithList *this, PCSerializerReadStream *a2)
{
  return OZChannelEnumWithList::parseEnd((OZChannel *)((char *)this - 16), a2);
}

uint64_t OZChannelEnumWithList::parseElement(OZChannelEnumWithList *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  std::mutex *StringTablesMapLock;
  uint64_t StringTablesMap;
  uint64_t v8;
  std::mutex *v9;
  const PCString *v10;
  PCString *v11;
  PCString *v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  PCString v26;
  uint64_t v27;
  uint64_t v28[3];
  int v29;
  PCSharedCount v30;
  void **v31;

  OZChannel::parseElement((OZChannel *)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 170)
  {
    PCSharedCount::PCSharedCount(&v30);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v30))
    {
      v29 = 0;
      if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v29))
      {
        memset(v28, 0, sizeof(v28));
        StringTablesMapLock = (std::mutex *)OZChannelEnum::getStringTablesMapLock(this);
        PCSharedMutex::lock_shared(StringTablesMapLock);
        StringTablesMap = OZChannelEnum::getStringTablesMap(this);
        v8 = *((_QWORD *)this + 19);
        if (v8 != StringTablesMap + 8 && v28 != (uint64_t *)(v8 + 40))
          std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)v28, *(PCString **)(v8 + 40), *(PCString **)(v8 + 48), (uint64_t)(*(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40)) >> 3);
        PCSharedMutex::unlock_shared(StringTablesMapLock);
        if (!PCString::empty((PCString *)this + 20))
          PCString::append((PCString *)this + 20, ";");
        PCString::append((PCString *)this + 20, (const PCString *)&v30);
        std::vector<PCString>::push_back[abi:ne180100](v28, (PCString *)&v30);
        v9 = (std::mutex *)OZChannelEnum::getStringTablesMapLock(this);
        PCSharedMutex::lock(v9);
        v10 = (const PCString *)OZChannelEnum::getStringTablesMap(this);
        *((_QWORD *)this + 19) = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(v10, (PCString *)this + 20);
        if (*((_QWORD *)this + 19) == OZChannelEnum::getStringTablesMap(this) + 8)
        {
          v11 = (PCString *)OZChannelEnum::getStringTablesMap(this);
          v12 = (PCString *)OZChannelEnum::getStringTablesMap(this);
          std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v26, (const PCString *)this + 20, v28);
          *((_QWORD *)this + 19) = std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v11, v12 + 1, &v26, (uint64_t)&v26);
          v31 = (void **)&v27;
          std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v31);
          PCString::~PCString(&v26);
        }
        PCSharedMutex::unlock(v9);
        v13 = *((_QWORD *)this + 23);
        v14 = (char *)*((_QWORD *)this + 22);
        if ((unint64_t)v14 >= v13)
        {
          v16 = (char *)*((_QWORD *)this + 21);
          v17 = (v14 - v16) >> 2;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v18 = v13 - (_QWORD)v16;
          v19 = (uint64_t)(v13 - (_QWORD)v16) >> 1;
          if (v19 <= v17 + 1)
            v19 = v17 + 1;
          if (v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 184, v20);
            v16 = (char *)*((_QWORD *)this + 21);
            v14 = (char *)*((_QWORD *)this + 22);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          v23 = &v21[4 * v20];
          *(_DWORD *)v22 = v29;
          v15 = v22 + 4;
          while (v14 != v16)
          {
            v24 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          *((_QWORD *)this + 21) = v22;
          *((_QWORD *)this + 22) = v15;
          *((_QWORD *)this + 23) = v23;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v14 = v29;
          v15 = v14 + 4;
        }
        *((_QWORD *)this + 22) = v15;
        v26.var0 = (__CFString *)v28;
        std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      }
    }
    PCString::~PCString((PCString *)&v30);
  }
  return 1;
}

void sub_1B2E90858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17)
{
  std::mutex *v17;

  std::pair<PCString,std::vector<PCString>>::~pair((PCString *)&a9);
  PCSharedMutex::unlock(v17);
  a9 = &a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  PCString::~PCString(&a17);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelEnumWithList::parseElement(OZChannelEnumWithList *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelEnumWithList::parseElement((OZChannelEnumWithList *)((char *)this - 16), a2, a3);
  return 1;
}

uint64_t OZChannelEnumWithList::configureWithState(OZChannelEnumWithList *this, const __CFData *a2)
{
  const void *v4;
  OZChannelBase *v5;
  __int32 ValueAsInt;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;

  v4 = (const void *)(*(uint64_t (**)(OZChannelEnumWithList *))(*(_QWORD *)this + 248))(this);
  if (v4)
  else
    v5 = 0;
  OZChannelBase::configureWithState(v5, a2);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)v5, MEMORY[0x1E0CA2E68], 0.0);
  v7 = (__int32 *)*((_QWORD *)this + 22);
  v8 = wmemchr(*((__int32 **)this + 21), ValueAsInt, ((uint64_t)v7 - *((_QWORD *)this + 21)) >> 2);
  if (v8)
    v9 = v8;
  else
    v9 = v7;
  if (v7 != v9)
  {
    (*(void (**)(OZChannelEnumWithList *, _QWORD, _QWORD, double))(*(_QWORD *)this + 712))(this, MEMORY[0x1E0CA2E68], 0, (double)ValueAsInt);
    OZChannelBase::setFlags((OZChannelBase *)this, v5->var7);
LABEL_10:
    (*((void (**)(OZChannelBase *))v5->var0 + 1))(v5);
    return 1;
  }
  if (v5)
    goto LABEL_10;
  return 1;
}

void OZChannelEnumWithList::addString(PCString *this, PCString *a2, int a3)
{
  std::mutex *StringTablesMapLock;
  uint64_t StringTablesMap;
  __CFString *var0;
  std::mutex *v10;
  const PCString *v11;
  PCString *v12;
  PCString *v13;
  __CFString *v14;
  char *v15;
  __CFString *v16;
  __CFString *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  __CFString *v23;
  __CFString *v24;
  int v25;
  PCString v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  StringTablesMapLock = (std::mutex *)OZChannelEnum::getStringTablesMapLock((OZChannelEnum *)this);
  PCSharedMutex::lock_shared(StringTablesMapLock);
  StringTablesMap = OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
  var0 = this[19].var0;
  if (var0 != (__CFString *)(StringTablesMap + 8) && &v28 != &var0[1].info)
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>((uint64_t)&v28, (PCString *)var0[1].info, (PCString *)var0[1].data, (uint64_t)&var0[1].data[-var0[1].info] >> 3);
  PCSharedMutex::unlock_shared(StringTablesMapLock);
  if (!PCString::empty(this + 20))
    PCString::append(this + 20, ";");
  PCString::append(this + 20, a2);
  std::vector<PCString>::push_back[abi:ne180100](&v28, a2);
  v10 = (std::mutex *)OZChannelEnum::getStringTablesMapLock((OZChannelEnum *)this);
  PCSharedMutex::lock(v10);
  v11 = (const PCString *)OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
  this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(v11, this + 20);
  if (this[19].var0 == (__CFString *)(OZChannelEnum::getStringTablesMap((OZChannelEnum *)this) + 8))
  {
    v12 = (PCString *)OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
    v13 = (PCString *)OZChannelEnum::getStringTablesMap((OZChannelEnum *)this);
    std::pair<PCString,std::vector<PCString>>::pair[abi:ne180100]<PCString,std::vector<PCString>&,0>(&v26, this + 20, &v28);
    this[19].var0 = (__CFString *)std::__tree<std::__value_type<PCString,std::vector<PCString>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::vector<PCString>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::vector<PCString>>>>::__emplace_hint_unique_key_args<PCString,std::pair<PCString,std::vector<PCString>>>(v12, v13 + 1, &v26, (uint64_t)&v26);
    v31 = (void **)&v27;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v31);
    PCString::~PCString(&v26);
  }
  PCSharedMutex::unlock(v10);
  OZChannel::setSliderMax((OZChannel *)this, (double)(unint64_t)(((v29 - v28) >> 3) - 1));
  v14 = this[23].var0;
  v15 = (char *)this[22].var0;
  if (v15 >= (char *)v14)
  {
    v17 = this[21].var0;
    v18 = (v15 - (char *)v17) >> 2;
    if ((unint64_t)(v18 + 1) >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v19 = (char *)v14 - (char *)v17;
    v20 = ((char *)v14 - (char *)v17) >> 1;
    if (v20 <= v18 + 1)
      v20 = v18 + 1;
    if (v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
    {
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this[23], v21);
      v17 = this[21].var0;
      v15 = (char *)this[22].var0;
    }
    else
    {
      v22 = 0;
    }
    v23 = (__CFString *)&v22[4 * v18];
    v24 = (__CFString *)&v22[4 * v21];
    LODWORD(v23->isa) = a3;
    v16 = (__CFString *)((char *)&v23->isa + 4);
    while (v15 != (char *)v17)
    {
      v25 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      HIDWORD(v23[-1].length) = v25;
      v23 = (__CFString *)((char *)v23 - 4);
    }
    this[21].var0 = v23;
    this[22].var0 = v16;
    this[23].var0 = v24;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_DWORD *)v15 = a3;
    v16 = (__CFString *)(v15 + 4);
  }
  this[22].var0 = v16;
  ++LODWORD(this[27].var0);
  v26.var0 = (__CFString *)&v28;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_1B2E90C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::pair<PCString,std::vector<PCString>>::~pair(&a9);
  PCSharedMutex::unlock(v13);
  a9.var0 = (__CFString *)&a13;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumWithList_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelEnumWithList_Factory *v0;

  v0 = (OZChannelEnumWithList_Factory *)operator new();
  OZChannelEnumWithList_Factory::OZChannelEnumWithList_Factory(v0);
  OZChannelEnumWithList_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E90CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumWithList_Factory::OZChannelEnumWithList_Factory(OZChannelEnumWithList_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B35558F0;
  v4 = xmmword_1B355DC00;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E659BF30;
  *((_QWORD *)this + 16) = &unk_1E659C000;
}

void sub_1B2E90D9C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannel *OZChannelEnumWithList_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannel *v6;

  v6 = (OZChannel *)operator new();
  OZChannelEnum::OZChannelEnum(v6, this, a2, a3, 0, 0);
  v6->var0 = (void **)&off_1E659BB50;
  v6->var2 = (void **)&unk_1E659BEC0;
  return v6;
}

void sub_1B2E90E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumWithList_Factory::createCopy(OZChannelEnumWithList_Factory *this, OZFactoryBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E659BB50;
  *((_QWORD *)v3 + 2) = &unk_1E659BEC0;
  return v3;
}

void sub_1B2E90EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumWithList_Factory::createChannelCopy(OZChannelEnumWithList_Factory *this, OZChannelBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E659BB50;
  *((_QWORD *)v3 + 2) = &unk_1E659BEC0;
  return v3;
}

void sub_1B2E90F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZProjectPanelState::OZProjectPanelState(OZProjectPanelState *this)
{
  OZPreferenceManager *v2;

  *(_QWORD *)this = &off_1E659C058;
  v2 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  *((_BYTE *)this + 8) = OZPreferenceManager::getLayersPreviewColumn(v2);
  *((_BYTE *)this + 9) = OZPreferenceManager::getLayersOpacityColumn(v2);
  *((_BYTE *)this + 10) = OZPreferenceManager::getLayersBlendColumn(v2);
  *((_BYTE *)this + 11) = OZPreferenceManager::getLayersDisplayMasks(v2);
  *((_BYTE *)this + 12) = OZPreferenceManager::getLayersDisplayBehaviors(v2);
  *((_BYTE *)this + 13) = OZPreferenceManager::getLayersDisplayEffects(v2);
  *((double *)this + 2) = OZPreferenceManager::getLayersVerticalZoom(v2);
  *((_BYTE *)this + 24) = OZPreferenceManager::getMediaPreviewColumn(v2);
  *((_BYTE *)this + 25) = OZPreferenceManager::getMediaTypeColumn(v2);
  *((_BYTE *)this + 26) = OZPreferenceManager::getMediaDurationColumn(v2);
  *((_BYTE *)this + 27) = OZPreferenceManager::getMediaInUseColumn(v2);
  *((_BYTE *)this + 28) = OZPreferenceManager::getMediaFrameSizeColumn(v2);
  *((_BYTE *)this + 29) = OZPreferenceManager::getMediaCompressorColumn(v2);
  *((_BYTE *)this + 30) = OZPreferenceManager::getMediaDepthColumn(v2);
  *((_BYTE *)this + 31) = OZPreferenceManager::getMediaFrameRateColumn(v2);
  *((_BYTE *)this + 32) = OZPreferenceManager::getMediaDataRateColumn(v2);
  *((_BYTE *)this + 33) = OZPreferenceManager::getMediaAudioRateColumn(v2);
  *((_BYTE *)this + 34) = OZPreferenceManager::getMediaAudioFormatColumn(v2);
  *((_BYTE *)this + 35) = OZPreferenceManager::getMediaFileSizeColumn(v2);
  *((_BYTE *)this + 36) = OZPreferenceManager::getMediaFileCreatedColumn(v2);
  *((_BYTE *)this + 37) = OZPreferenceManager::getMediaFileModifiedColumn(v2);
  *((double *)this + 5) = OZPreferenceManager::getMediaVerticalZoom(v2);
}

double OZProjectPanelState::OZProjectPanelState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = &off_1E659C058;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t OZProjectPanelState::writeHeader(OZProjectPanelState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZProjectPanelStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 80);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZProjectPanelState::writeBody(OZProjectPanelState *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZProjectPanelStateScope);
  v4 = *((unsigned __int8 *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned __int8 *)this + 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((unsigned __int8 *)this + 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v7 = *((unsigned __int8 *)this + 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v8 = *((unsigned __int8 *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v9 = *((unsigned __int8 *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v10 = *((double *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *((unsigned __int8 *)this + 24);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 30);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v12 = *((unsigned __int8 *)this + 25);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v13 = *((unsigned __int8 *)this + 26);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v14 = *((unsigned __int8 *)this + 27);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v15 = *((unsigned __int8 *)this + 28);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 33);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v16 = *((unsigned __int8 *)this + 29);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v17 = *((unsigned __int8 *)this + 30);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 35);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v18 = *((unsigned __int8 *)this + 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v19 = *((unsigned __int8 *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v20 = *((unsigned __int8 *)this + 33);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 38);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v20);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v21 = *((unsigned __int8 *)this + 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 39);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v21);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v22 = *((unsigned __int8 *)this + 35);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 40);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v22);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v23 = *((unsigned __int8 *)this + 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 41);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v23);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v24 = *((unsigned __int8 *)this + 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v24);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v25 = *((double *)this + 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v25);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZProjectPanelState::parseBegin(OZProjectPanelState *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZProjectPanelStateScope);
  return 1;
}

uint64_t OZProjectPanelState::parseEnd(OZProjectPanelState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZProjectPanelState::parseElement(OZProjectPanelState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  char *v3;
  uint64_t v4;

  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      v3 = (char *)this + 11;
      goto LABEL_25;
    case 2:
      v3 = (char *)this + 12;
      goto LABEL_25;
    case 3:
      v3 = (char *)this + 13;
      goto LABEL_25;
    case 4:
      v3 = (char *)this + 16;
      goto LABEL_7;
    case 5:
      v3 = (char *)this + 40;
LABEL_7:
      v4 = 8;
      goto LABEL_26;
    case 0xA:
      v3 = (char *)this + 8;
      goto LABEL_25;
    case 0xB:
      v3 = (char *)this + 9;
      goto LABEL_25;
    case 0xC:
      v3 = (char *)this + 10;
      goto LABEL_25;
    case 0x1E:
      v3 = (char *)this + 24;
      goto LABEL_25;
    case 0x1F:
      v3 = (char *)this + 25;
      goto LABEL_25;
    case 0x20:
      v3 = (char *)this + 26;
      goto LABEL_25;
    case 0x21:
      v3 = (char *)this + 28;
      goto LABEL_25;
    case 0x22:
      v3 = (char *)this + 29;
      goto LABEL_25;
    case 0x23:
      v3 = (char *)this + 30;
      goto LABEL_25;
    case 0x24:
      v3 = (char *)this + 31;
      goto LABEL_25;
    case 0x25:
      v3 = (char *)this + 32;
      goto LABEL_25;
    case 0x26:
      v3 = (char *)this + 33;
      goto LABEL_25;
    case 0x27:
      v3 = (char *)this + 34;
      goto LABEL_25;
    case 0x28:
      v3 = (char *)this + 35;
      goto LABEL_25;
    case 0x29:
      v3 = (char *)this + 36;
      goto LABEL_25;
    case 0x2A:
      v3 = (char *)this + 37;
      goto LABEL_25;
    case 0x2B:
      v3 = (char *)this + 27;
LABEL_25:
      v4 = 9;
LABEL_26:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 8 * v4))(a3, v3);
      break;
    default:
      return 0;
  }
  return 0;
}

void OZProjectPanelState::~OZProjectPanelState(OZProjectPanelState *this)
{
  JUMPOUT(0x1B5E29170);
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChanSceneNodeRef_Factory::getInstance(this);
  OZChanObjectManipRef::OZChanObjectManipRef(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E659C0C8;
  *((_QWORD *)this + 2) = &unk_1E659C448;
  *(_WORD *)((char *)this + 155) = 0;
}

uint64_t OZChanSceneNodeRef_Factory::getInstance(OZChanSceneNodeRef_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChanSceneNodeRef_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChanSceneNodeRef_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanSceneNodeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanSceneNodeRef_Factory::_instance;
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t v6;

  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v6 = &off_1E659C0C8;
  *(_QWORD *)(v6 + 16) = &unk_1E659C448;
  *(_WORD *)(v6 + 155) = 0;
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E659C0C8;
  *(_QWORD *)(v4 + 16) = &unk_1E659C448;
  *(_WORD *)(v4 + 155) = 0;
}

void OZChanSceneNodeRef::OZChanSceneNodeRef(OZChanSceneNodeRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  uint64_t v4;

  OZChanObjectManipRef::OZChanObjectManipRef(this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v4 = &off_1E659C0C8;
  *(_QWORD *)(v4 + 16) = &unk_1E659C448;
  *(_WORD *)(v4 + 155) = *(_WORD *)((char *)a2 + 155);
  OZChanSceneNodeRef::setDependency((OZChannelBase *)v4);
}

void sub_1B2E91C88(_Unwind_Exception *a1)
{
  OZChanObjectManipRef *v1;

  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanSceneNodeRef::setDependency(OZChannelBase *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int ObjectID;

  result = OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 256))(v3);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    if (v4)
    {
      v6 = result;
      result = OZChanObjectManipRef::getObjectID((OZChannel *)this);
      if ((_DWORD)result)
      {
        ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)this);
        return OZScene::addNodeDependency(v4, ObjectID, v6);
      }
    }
  }
  return result;
}

void `non-virtual thunk to'OZChanSceneNodeRef::~OZChanSceneNodeRef(OZChanSceneNodeRef *this)
{
  OZChanObjectManipRef::~OZChanObjectManipRef((OZChanSceneNodeRef *)((char *)this - 16));
}

{
  OZChanObjectManipRef::~OZChanObjectManipRef((OZChanSceneNodeRef *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChanSceneNodeRef::~OZChanSceneNodeRef(OZChanSceneNodeRef *this)
{
  OZChanObjectManipRef::~OZChanObjectManipRef(this);
  JUMPOUT(0x1B5E29170);
}

OZChanSceneNodeRef *OZChanSceneNodeRef::clone(OZChanSceneNodeRef *this)
{
  OZChanSceneNodeRef *v2;

  v2 = (OZChanSceneNodeRef *)operator new();
  OZChanSceneNodeRef::OZChanSceneNodeRef(v2, this, 0);
  return v2;
}

void sub_1B2E91DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanSceneNodeRef::removeDependency(OZChannelBase *this)
{
  const void *result;
  uint64_t v3;
  OZScene *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int ObjectID;

  result = (const void *)OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    v3 = (uint64_t)result;
    v4 = (OZScene *)(*(uint64_t (**)(const void *))(*(_QWORD *)result + 264))(result);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 256))(v3);
    result = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    if (v4)
    {
      v6 = result;
      result = (const void *)OZChanObjectManipRef::getObjectID((OZChannel *)this);
      if ((_DWORD)result)
      {
        ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)this);
        return OZScene::removeNodeDependency(v4, ObjectID, v6);
      }
    }
  }
  return result;
}

uint64_t OZChanSceneNodeRef::copy(OZChanSceneNodeRef *this, const OZChannelBase *a2, char a3)
{
  char *v6;

  OZChanSceneNodeRef::removeDependency((OZChannelBase *)this);
  if (a2)
  {
    if (v6)
      *(_WORD *)((char *)this + 155) = *(_WORD *)(v6 + 155);
  }
  OZChannel::copy((OZChannel *)this, a2, a3);
  return OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
}

uint64_t OZChanSceneNodeRef::assign(OZChanSceneNodeRef *this, const OZChannelBase *a2)
{
  char *v4;

  OZChanSceneNodeRef::removeDependency((OZChannelBase *)this);
  if (a2)
  {
    if (v4)
      *(_WORD *)((char *)this + 155) = *(_WORD *)(v4 + 155);
  }
  OZChannel::assign((OZChannel *)this, a2);
  return OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
}

uint64_t OZChanSceneNodeRef::setValue(OZChannelBase *this, const CMTime *a2, double a3, char a4)
{
  OZChanSceneNodeRef::removeDependency(this);
  OZChannel::setValue((OZChannel *)this, MEMORY[0x1E0CA2E68], a3, a4);
  return OZChanSceneNodeRef::setDependency(this);
}

uint64_t OZChanSceneNodeRef::operator=(uint64_t a1, uint64_t a2)
{
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)a1);
  *(_WORD *)(a1 + 155) = *(_WORD *)(a2 + 155);
  OZChannelBase::operator=(a1, a2);
  OZChanSceneNodeRef::setDependency((OZChannelBase *)a1);
  return a1;
}

void *OZChanSceneNodeRef::getNode(OZChannelBase *this)
{
  uint64_t ObjectManipulator;
  uint64_t v3;
  OZScene *v4;
  unsigned int ObjectID;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator)
    return 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
  if (!v3)
    return 0;
  v4 = (OZScene *)v3;
  ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)this);
  return OZScene::getNode(v4, ObjectID);
}

uint64_t OZChanSceneNodeRef::setNode(OZChanSceneNodeRef *this, OZSceneNode *a2)
{
  if (a2)
    a2 = (OZSceneNode *)*((unsigned int *)a2 + 20);
  return (*(uint64_t (**)(OZChanSceneNodeRef *, OZSceneNode *, _QWORD))(*(_QWORD *)this + 864))(this, a2, 0);
}

uint64_t OZChanSceneNodeRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  uint64_t v4;
  uint64_t ObjectManipulator;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v15;
  _QWORD *v16[2];

  if (!OZChanObjectManipRef::canReferenceObject(this, a2))
    return 0;
  v4 = (*(uint64_t (**)(const OZObjectManipulator *))(*(_QWORD *)a2 + 232))(a2);
  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v6 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator);
  v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 272))(v6);
  if ((_DWORD *)v4 != v6 || (v8 = BYTE4(this[1].var5), BYTE4(this[1].var5)))
  {
    v8 = 1;
    if (!BYTE3(this[1].var5))
    {
      if (v7)
      {
        v16[0] = 0;
        v16[1] = 0;
        v15 = (uint64_t *)v16;
        v9 = v6[20];
        OZScene::getReferencedNodes(v7, *(_DWORD *)(v4 + 80), &v15);
        v10 = v15;
        if (v15 != (uint64_t *)v16)
        {
          while (*((_DWORD *)v10 + 7) != v9)
          {
            v11 = (uint64_t *)v10[1];
            if (v11)
            {
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v12 = (uint64_t *)v10[2];
                v13 = *v12 == (_QWORD)v10;
                v10 = v12;
              }
              while (!v13);
            }
            v10 = v12;
            if (v12 == (uint64_t *)v16)
              goto LABEL_14;
          }
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v15, v16[0]);
          return 0;
        }
LABEL_14:
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v15, v16[0]);
        return 1;
      }
    }
  }
  return v8;
}

void sub_1B2E92184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t OZChanSceneNodeRef::setAllowsCyclicDependencies(uint64_t this, char a2)
{
  *(_BYTE *)(this + 155) = a2;
  return this;
}

uint64_t OZChanSceneNodeRef::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  OZChanSceneNodeRef::removeDependency(this);
  return OZChannel::parseBegin((OZChannel *)this, a2);
}

uint64_t `non-virtual thunk to'OZChanSceneNodeRef::parseBegin(OZChanSceneNodeRef *this, PCSerializerReadStream *a2)
{
  OZChannel *v3;

  v3 = (OZChannel *)((char *)this - 16);
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)((char *)this - 16));
  return OZChannel::parseBegin(v3, a2);
}

uint64_t OZChanSceneNodeRef::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  OZChannel::parseEnd(this, a2);
  OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
  return 1;
}

uint64_t `non-virtual thunk to'OZChanSceneNodeRef::parseEnd(OZChanSceneNodeRef *this, PCSerializerReadStream *a2)
{
  OZChannelBase *v2;

  v2 = (OZChannelBase *)((char *)this - 16);
  OZChannel::parseEnd((OZChannel *)((char *)this - 16), a2);
  OZChanSceneNodeRef::setDependency(v2);
  return 1;
}

uint64_t OZChanSceneNodeRef::setObjectRef(OZChanSceneNodeRef *this, unsigned int *a2)
{
  if (a2)
    a2 = (unsigned int *)a2[20];
  return (*(uint64_t (**)(OZChanSceneNodeRef *, unsigned int *, _QWORD))(*(_QWORD *)this + 864))(this, a2, 0);
}

void std::__call_once_param<std::tuple<OZChanSceneNodeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChanSceneNodeRef_Factory *v0;

  v0 = (OZChanSceneNodeRef_Factory *)operator new();
  OZChanSceneNodeRef_Factory::OZChanSceneNodeRef_Factory(v0);
  OZChanSceneNodeRef_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E922BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanSceneNodeRef_Factory::OZChanSceneNodeRef_Factory(OZChanSceneNodeRef_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E8F0;
  v4 = xmmword_1B355DE20;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E659C4B8;
  *((_QWORD *)this + 16) = &unk_1E659C588;
}

void sub_1B2E9235C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanSceneNodeRef_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = operator new();
  OZChanObjectManipRef::OZChanObjectManipRef((OZChanObjectManipRef *)v6, this, a2, a3);
  *(_QWORD *)v6 = &off_1E659C0C8;
  *(_QWORD *)(v6 + 16) = &unk_1E659C448;
  *(_WORD *)(v6 + 155) = 0;
  return v6;
}

void sub_1B2E923E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

OZChanSceneNodeRef *OZChanSceneNodeRef_Factory::createCopy(OZChanSceneNodeRef_Factory *this, OZFactoryBase *a2)
{
  OZChanSceneNodeRef *v3;
  const OZChanSceneNodeRef *v4;

  v3 = (OZChanSceneNodeRef *)operator new();
  OZChanSceneNodeRef::OZChanSceneNodeRef(v3, v4, 0);
  return v3;
}

void sub_1B2E92470(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

OZChanSceneNodeRef *OZChanSceneNodeRef_Factory::createChannelCopy(OZChanSceneNodeRef_Factory *this, OZChannelBase *a2)
{
  OZChanSceneNodeRef *v3;
  const OZChanSceneNodeRef *v4;

  v3 = (OZChanSceneNodeRef *)operator new();
  OZChanSceneNodeRef::OZChanSceneNodeRef(v3, v4, 0);
  return v3;
}

void sub_1B2E924FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

uint64_t OZChannelStringEnum_Factory::getInstance(OZChannelStringEnum_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelStringEnum_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelStringEnum_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelStringEnum_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelStringEnum_Factory::_instance;
}

uint64_t OZChannelStringEnum::initSaveStringsFromChannelStrings(OZChannelStringEnum *this)
{
  uint64_t result;
  unsigned int v3;
  const PCString *String;
  PCString v5;
  PCString v6;

  result = OZChannelEnum::getNumberOfStrings(this);
  if ((_DWORD)result)
  {
    v3 = 0;
    do
    {
      String = (const PCString *)OZChannelEnum::getString(this, v3);
      PCString::PCString(&v6, String);
      PCString::PCString(&v5, &v6);
      std::vector<PCString>::push_back[abi:ne180100]((uint64_t *)this + 32, &v5);
      PCString::~PCString(&v5);
      PCString::~PCString(&v6);
      ++v3;
      result = OZChannelEnum::getNumberOfStrings(this);
    }
    while (v3 < result);
  }
  return result;
}

void sub_1B2E9260C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCSharedCount *v5;
  OZChannelStringEnum_Factory *v6;

  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, a3, a4, 0, 0);
  v5->var0 = (PC_Sp_counted_base *)off_1E659C5E0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E659C950;
  v5[33].var0 = 0;
  v5[34].var0 = 0;
  v5[32].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 35);
  *((_QWORD *)this + 1) = OZChannelStringEnum_Factory::getInstance(v6);
  OZChannelStringEnum::initSaveStringsFromChannelStrings(this);
}

void sub_1B2E926A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCString *a10)
{
  PCString *v10;

  a10 = v10 + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZFactory *Instance;
  OZChannelStringEnum_Factory *v13;

  Instance = (OZFactory *)OZChannelStringEnum_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, Instance, a3, a4, a5, a6, 0, 0);
  *(_QWORD *)this = off_1E659C5E0;
  *((_QWORD *)this + 2) = &unk_1E659C950;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 35);
  *((_QWORD *)this + 1) = OZChannelStringEnum_Factory::getInstance(v13);
  OZChannelStringEnum::initSaveStringsFromChannelStrings(this);
}

void sub_1B2E92788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCString *a10)
{
  PCString *v10;

  a10 = v10 + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  PCSharedCount *v8;
  OZChannelStringEnum_Factory *v9;

  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, 0, 0);
  v8->var0 = (PC_Sp_counted_base *)off_1E659C5E0;
  v8[2].var0 = (PC_Sp_counted_base *)&unk_1E659C950;
  v8[33].var0 = 0;
  v8[34].var0 = 0;
  v8[32].var0 = 0;
  PCSharedCount::PCSharedCount(v8 + 35);
  *((_QWORD *)this + 1) = OZChannelStringEnum_Factory::getInstance(v9);
  OZChannelStringEnum::initSaveStringsFromChannelStrings(this);
}

void sub_1B2E92834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCString *a10)
{
  PCString *v10;

  a10 = v10 + 32;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum::OZChannelStringEnum(OZChannelStringEnum *this, PCString **a2, OZChannelFolder *a3)
{
  PCSharedCount *v5;
  uint64_t v6;

  OZChannelEnum::OZChannelEnum(this, (const OZChannelEnum *)a2, a3);
  v5->var0 = (PC_Sp_counted_base *)off_1E659C5E0;
  v5[2].var0 = (PC_Sp_counted_base *)&unk_1E659C950;
  v6 = (uint64_t)&v5[32];
  v5[33].var0 = 0;
  v5[34].var0 = 0;
  v5[32].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 35);
  if (this != (OZChannelStringEnum *)a2)
    std::vector<PCString>::__assign_with_size[abi:ne180100]<PCString*,PCString*>(v6, a2[32], a2[33], a2[33] - a2[32]);
}

void sub_1B2E928EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCString *v10;
  PCString *v11;

  PCString::~PCString(v11);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  OZChannelEnum::~OZChannelEnum(v10);
  _Unwind_Resume(a1);
}

OZChannelStringEnum *OZChannelStringEnum::clone(PCString **this)
{
  OZChannelStringEnum *v2;

  v2 = (OZChannelStringEnum *)operator new();
  OZChannelStringEnum::OZChannelStringEnum(v2, this, 0);
  return v2;
}

void sub_1B2E92968(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

const __CFString *OZChannelStringEnum::getObjCWrapperName(OZChannelStringEnum *this)
{
  return CFSTR("CHChannelEnum");
}

uint64_t OZChannelStringEnum::setStrings(PCString *this, PCString *a2, int a3)
{
  __CFString *i;
  __CFString *var0;

  OZChannelEnum::setStrings(this, a2, a3);
  var0 = this[32].var0;
  for (i = this[33].var0; i != var0; PCString::~PCString((PCString *)&i[-1].length))
    ;
  this[33].var0 = var0;
  return OZChannelStringEnum::initSaveStringsFromChannelStrings((OZChannelStringEnum *)this);
}

void OZChannelStringEnum::getSelectedSaveString(OZChannel *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int ValueAsUint;
  OZChannelTimeConverter *var13;
  char *CStr;

  ValueAsUint = OZChannel::getValueAsUint(this, MEMORY[0x1E0CA2E68], 0.0);
  var13 = this[1].var13;
  if (ValueAsUint >= (unint64_t)((this[1].var14 - (OZChannelImpl *)var13) >> 3))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else
  {
    CStr = PCString::createCStr((PCString *)var13 + ValueAsUint);
    std::string::basic_string[abi:ne180100]<0>(a2, CStr);
    free(CStr);
  }
}

uint64_t *OZChannelStringEnum::markFactoriesForSerialization(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t *result;
  uint64_t Instance;
  OZFactory *Factory;
  __int128 v7;

  result = OZChannelBase::markFactoriesForSerialization(this, a2);
  if (a3)
  {
    Instance = OZFactories::getInstance((OZFactories *)result);
    v7 = xmmword_1B355F360;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v7);
    return OZFactory::setNeedsSaving(Factory, (const OZFactory *)1);
  }
  return result;
}

uint64_t *`non-virtual thunk to'OZChannelStringEnum::markFactoriesForSerialization(OZChannelStringEnum *this, PCSerializerWriteStream *a2, int a3)
{
  return OZChannelStringEnum::markFactoriesForSerialization((OZChannelBase *)((char *)this - 16), a2, a3);
}

void OZChannelStringEnum::writeBody(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  PCString v10;

  if (!OZChannelBase::testFlag(this, 128)
    || ((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    OZChannelBase::writeBody(this, a2, a3);
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelStringEnumScope);
    v6 = *((_QWORD *)this[1].var0 + 1);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v6 + 16))(v6, a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, 0, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    OZChannelStringEnum::getSelectedSaveString((OZChannel *)this, __p);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    PCString::PCString(&v10, (const char *)v7);
    if (v9 < 0)
      operator delete(__p[0]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 170);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 1, &v10);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCSerializerWriteStream::popScope((uint64_t)a2);
    PCString::~PCString(&v10);
  }
}

void sub_1B2E92C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, PCString a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'OZChannelStringEnum::writeBody(OZChannelStringEnum *this, PCSerializerWriteStream *a2, int a3)
{
  OZChannelStringEnum::writeBody((OZChannelBase *)((char *)this - 16), a2, a3);
}

unint64_t OZChannelStringEnum::indexOfSaveString(OZChannelStringEnum *this, PCString *a2)
{
  int NumberOfStrings;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  PCString v10;

  NumberOfStrings = OZChannelEnum::getNumberOfStrings(this);
  if (NumberOfStrings < 1)
    return 0xFFFFFFFFLL;
  v5 = 0;
  v6 = NumberOfStrings;
  while (1)
  {
    v7 = *((_QWORD *)this + 32);
    if (v5 >= (*((_QWORD *)this + 33) - v7) >> 3)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    PCString::PCString(&v10, (const PCString *)(v7 + 8 * v5));
    v8 = PCString::compare(&v10, a2);
    PCString::~PCString(&v10);
    if (!v8)
      break;
    if (++v5 == v6)
      return 0xFFFFFFFFLL;
  }
  return v5;
}

void sub_1B2E92CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelStringEnum::parseBegin(OZChannel *this, PCSerializerReadStream *a2)
{
  OZChannel::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelStringEnumScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelStringEnum::parseBegin(OZChannelStringEnum *this, PCSerializerReadStream *a2)
{
  OZChannel::parseBegin((OZChannel *)((char *)this - 16), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelStringEnumScope);
  return 1;
}

uint64_t OZChannelStringEnum::parseElement(OZChannelStringEnum *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount v7;

  OZChannel::parseElement((OZChannel *)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 170)
  {
    PCSharedCount::PCSharedCount(&v7);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v7))
      PCString::set((PCString *)this + 35, (const PCString *)&v7);
    PCString::~PCString((PCString *)&v7);
  }
  return 1;
}

void sub_1B2E92DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelStringEnum::parseElement(OZChannelStringEnum *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelStringEnum::parseElement((OZChannelStringEnum *)((char *)this - 16), a2, a3);
  return 1;
}

uint64_t OZChannelStringEnum::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZChannel::parseEnd(this, a2);
  OZChannelStringEnum::setValueFromParsedSaveString(this);
  return v3;
}

void OZChannelStringEnum::setValueFromParsedSaveString(OZChannel *this)
{
  PCString *p_var16;
  unsigned int ValueAsUint;
  OZChannelTimeConverter *var13;
  signed int Tag;
  PCSharedCount v6;

  p_var16 = (PCString *)&this[1].var16;
  if (!PCString::empty((PCString *)&this[1].var16))
  {
    ValueAsUint = OZChannel::getValueAsUint(this, MEMORY[0x1E0CA2E68], 0.0);
    PCSharedCount::PCSharedCount(&v6);
    var13 = this[1].var13;
    if (ValueAsUint >= (unint64_t)((this[1].var14 - (OZChannelImpl *)var13) >> 3))
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    PCString::set((PCString *)&v6, (const PCString *)var13 + ValueAsUint);
    if (PCString::compare((PCString *)&v6, p_var16))
    {
      Tag = OZChannelStringEnum::indexOfSaveString((OZChannelStringEnum *)this, p_var16);
      if ((Tag & 0x80000000) == 0)
      {
        if (*(void ***)&this[1].var3 != this[1].var2)
          Tag = OZChannelEnum::getTag((OZChannelEnum *)this, Tag);
        (*((void (**)(OZChannel *, _QWORD, _QWORD, double))this->var0 + 89))(this, MEMORY[0x1E0CA2E68], 0, (double)Tag);
      }
    }
    PCString::~PCString((PCString *)&v6);
  }
}

void sub_1B2E92F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelStringEnum::parseEnd(OZChannelStringEnum *this, PCSerializerReadStream *a2)
{
  OZChannel *v2;
  uint64_t v3;

  v2 = (OZChannel *)((char *)this - 16);
  v3 = OZChannel::parseEnd((OZChannel *)((char *)this - 16), a2);
  OZChannelStringEnum::setValueFromParsedSaveString(v2);
  return v3;
}

void `non-virtual thunk to'OZChannelStringEnum::~OZChannelStringEnum(PCString *this)
{
  PCString *v2;
  PCString *v3;

  this[-2].var0 = (__CFString *)off_1E659C5E0;
  v2 = this - 2;
  this->var0 = (__CFString *)&unk_1E659C950;
  PCString::~PCString(this + 33);
  v3 = this + 30;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  OZChannelEnum::~OZChannelEnum(v2);
}

{
  PCString *v2;
  PCString *v3;

  this[-2].var0 = (__CFString *)off_1E659C5E0;
  v2 = this - 2;
  this->var0 = (__CFString *)&unk_1E659C950;
  PCString::~PCString(this + 33);
  v3 = this + 30;
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  OZChannelEnum::~OZChannelEnum(v2);
  MEMORY[0x1B5E29170]();
}

void std::__call_once_param<std::tuple<OZChannelStringEnum_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelStringEnum_Factory *v0;

  v0 = (OZChannelStringEnum_Factory *)operator new();
  OZChannelStringEnum_Factory::OZChannelStringEnum_Factory(v0);
  OZChannelStringEnum_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E93124(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelStringEnum_Factory::OZChannelStringEnum_Factory(OZChannelStringEnum_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B35558F0;
  v4 = xmmword_1B355F360;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E659C9C0;
  *((_QWORD *)this + 16) = &unk_1E659CA90;
}

void sub_1B2E931C4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelStringEnum *OZChannelStringEnum_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelStringEnum *v6;

  v6 = (OZChannelStringEnum *)operator new();
  OZChannelStringEnum::OZChannelStringEnum(v6, this, a2, a3);
  return v6;
}

void sub_1B2E93234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

OZChannelStringEnum *OZChannelStringEnum_Factory::createCopy(OZChannelStringEnum_Factory *this, OZFactoryBase *a2)
{
  OZChannelStringEnum *v3;
  PCString **v4;

  v3 = (OZChannelStringEnum *)operator new();
  OZChannelStringEnum::OZChannelStringEnum(v3, v4, 0);
  return v3;
}

void sub_1B2E932C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

OZChannelStringEnum *OZChannelStringEnum_Factory::createChannelCopy(OZChannelStringEnum_Factory *this, OZChannelBase *a2)
{
  OZChannelStringEnum *v3;
  PCString **v4;

  v3 = (OZChannelStringEnum *)operator new();
  OZChannelStringEnum::OZChannelStringEnum(v3, v4, 0);
  return v3;
}

void sub_1B2E9334C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EE4B0DABLL);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::OZChannelBehavior(OZChannelBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;

  OZBehavior::OZBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E659CAE8;
  *(_QWORD *)(v5 + 16) = &unk_1E659CD98;
  *(_QWORD *)(v5 + 48) = &unk_1E659CFF0;
  *(_QWORD *)(v5 + 336) = &unk_1E659D048;
  *(_QWORD *)(v5 + 344) = v5 + 344;
  *(_QWORD *)(v5 + 352) = v5 + 344;
  *(_QWORD *)(v5 + 360) = 0;
  *(_BYTE *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 376) = v5 + 384;
  *(_QWORD *)(v5 + 384) = 0;
  *((_QWORD *)this + 49) = 0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 400));
  *((_WORD *)this + 252) = 256;
  *((_QWORD *)this + 64) = (char *)this + 512;
  *((_QWORD *)this + 65) = (char *)this + 512;
  *((_QWORD *)this + 66) = 0;
}

void sub_1B2E933FC(_Unwind_Exception *a1)
{
  OZBehavior *v1;
  _QWORD *v2;
  uint64_t v3;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v3, *((_QWORD **)v1 + 48));
  std::__list_imp<unsigned int>::clear(v2);
  OZBehavior::~OZBehavior(v1);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::OZChannelBehavior(OZChannelBehavior *this, const OZChannelBehavior *a2, char a3)
{
  uint64_t v4;

  OZBehavior::OZBehavior(this, a2, a3);
  *(_QWORD *)v4 = &off_1E659CAE8;
  *(_QWORD *)(v4 + 16) = &unk_1E659CD98;
  *(_QWORD *)(v4 + 48) = &unk_1E659CFF0;
  *(_QWORD *)(v4 + 336) = &unk_1E659D048;
  *(_QWORD *)(v4 + 344) = v4 + 344;
  *(_QWORD *)(v4 + 352) = v4 + 344;
  *(_QWORD *)(v4 + 360) = 0;
  *(_BYTE *)(v4 + 368) = 0;
  *(_QWORD *)(v4 + 376) = v4 + 384;
  *(_QWORD *)(v4 + 384) = 0;
  *((_QWORD *)this + 49) = 0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v4 + 400));
  *((_WORD *)this + 252) = 256;
  *((_QWORD *)this + 64) = (char *)this + 512;
  *((_QWORD *)this + 65) = (char *)this + 512;
  *((_QWORD *)this + 66) = 0;
}

void sub_1B2E934B4(_Unwind_Exception *a1)
{
  OZBehavior *v1;
  _QWORD *v2;
  uint64_t v3;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v3, *((_QWORD **)v1 + 48));
  std::__list_imp<unsigned int>::clear(v2);
  OZBehavior::~OZBehavior(v1);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::~OZChannelBehavior(OZChannelBehavior *this)
{
  uint64_t Scene;

  *(_QWORD *)this = &off_1E659CAE8;
  *((_QWORD *)this + 2) = &unk_1E659CD98;
  *((_QWORD *)this + 6) = &unk_1E659CFF0;
  *((_QWORD *)this + 42) = &unk_1E659D048;
  if (*((_BYTE *)this + 368))
  {
    Scene = OZBehavior::getScene(this);
    if (Scene)
    {
      OZDocument::removeCPPObserver(*(_QWORD *)(Scene + 1584));
      *((_BYTE *)this + 368) = 0;
    }
  }
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 64);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 400));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 43);
  OZBehavior::~OZBehavior(this);
}

{
  OZChannelBehavior::~OZChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelBehavior::~OZChannelBehavior(OZChannelBehavior *this)
{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 16));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 48));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 336));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *a2)
{
  *((_QWORD *)this + 41) = a2;
  if (!*((_QWORD *)this + 66))
    (*(void (**)(OZChannelBehavior *, char *))(*(_QWORD *)this + 520))(this, (char *)this + 512);
  return OZChannelBehavior::addObserverIfNecessary((uint64_t)this);
}

uint64_t OZChannelBehavior::addObserverIfNecessary(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 368))
  {
    v1 = this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 656))(this);
    if ((this & 1) != 0 || *(_QWORD *)(v1 + 528))
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1);
      if (this)
      {
        this = (uint64_t)OZDocument::addCPPObserver(*(_QWORD *)(this + 1584), v1 + 336, 15000);
        *(_BYTE *)(v1 + 368) = 1;
      }
    }
  }
  return this;
}

uint64_t OZChannelBehavior::didAddSceneNodeToScene(OZChannelBehavior *this, OZScene *a2)
{
  if (!*((_QWORD *)this + 66))
    (*(void (**)(OZChannelBehavior *, char *))(*(_QWORD *)this + 520))(this, (char *)this + 512);
  return OZChannelBehavior::addObserverIfNecessary((uint64_t)this);
}

uint64_t OZChannelBehavior::willRemoveSceneNodeFromScene(uint64_t this, OZScene *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 368))
  {
    v2 = this;
    this = (*(uint64_t (**)(uint64_t, OZScene *))(*(_QWORD *)this + 336))(this, a2);
    if (this)
    {
      this = OZDocument::removeCPPObserver(*(_QWORD *)(this + 1584));
      *(_BYTE *)(v2 + 368) = 0;
    }
  }
  return this;
}

uint64_t OZChannelBehavior::didInsert(OZChannelBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  (*(void (**)(OZChannelBehavior *, OZSceneNode *))(*(_QWORD *)this + 96))(this, a2);
  return (*(uint64_t (**)(OZChannelBehavior *, OZBehavior *))(*(_QWORD *)this + 112))(this, a3);
}

void OZChannelBehavior::removeNodesFromSingleChan(OZChannelBehavior *this, OZChannel *a2)
{
  const void **v4;
  const void **v5;
  uint64_t v6;
  _QWORD *v7;
  OZChannelBehavior **v8;
  OZChannelBehavior **v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p;
  const void **v17;

  OZChannel::enumerateCurveProcessingNodes(a2, &__p);
  v13 = &v13;
  v14 = &v13;
  v15 = 0;
  v4 = (const void **)__p;
  v5 = v17;
  if (__p != v17)
  {
    v6 = 0;
    v7 = &v13;
    do
    {
      if (*v4)
      {
        if (v8)
        {
          v9 = v8;
          if (v8[1] == this)
          {
            v10 = operator new(0x18uLL);
            v10[1] = &v13;
            v10[2] = v9;
            *v10 = v7;
            v7[1] = v10;
            ++v6;
            v7 = v10;
            v13 = v10;
            v15 = v6;
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
    if (&v13 != v14)
    {
      v11 = (char *)this + 344;
      v12 = &v13;
      do
      {
        OZChannel::deleteCurveProcessingNode(a2, *(void **)(*v12 + 16));
        std::list<OZBehaviorCurveNode *>::remove((uint64_t)v11, (_QWORD *)(*v12 + 16));
        v12 = (_QWORD *)*v12;
      }
      while (v12 != v14);
    }
  }
  std::__list_imp<unsigned int>::clear(&v13);
  if (__p)
  {
    v17 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B2E938D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__list_imp<unsigned int>::clear(&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZChannelBehavior::removeNodesFromChan(OZChannelBehavior *this, OZChannelBase *a2)
{
  OZChannel *v3;
  OZChannelBase ***v4;
  OZChannelBase **i;
  OZChannelBase *v6;

  if ((a2->var7 & 0x1000) != 0)
  {
    if (v4)
    {
      for (i = *v4; i != v4[1]; ++i)
      {
        v6 = *i;
        OZChannelBehavior::removeNodesFromChan(this, v6);
      }
    }
  }
  else
  {
    OZChannelBehavior::removeNodesFromSingleChan(this, v3);
  }
}

_QWORD *OZChannelBehavior::removeNodesReferencingChan(OZChannelBehavior *this, OZChannelBase *lpsrc)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  OZChannelBase *v10;
  _QWORD *v11;
  OZChannelBase *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = &v20;
  v21 = &v20;
  v22 = 0;
  if ((lpsrc->var7 & 0x1000) != 0)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 44);
    if (v11 != (_QWORD *)((char *)this + 344))
    {
      v12 = v10;
      do
      {
        v13 = v11[2];
        if (OZChannelBase::isDescendantOf(*(OZChannelBase **)(v13 + 16), v12))
        {
          v14 = operator new(0x18uLL);
          v14[1] = &v20;
          v14[2] = v13;
          v15 = v20;
          *v14 = v20;
          v15[1] = v14;
          v20 = v14;
          ++v22;
        }
        v11 = (_QWORD *)v11[1];
      }
      while (v11 != (_QWORD *)((char *)this + 344));
    }
  }
  else
  {
    v4 = (char *)this + 344;
    v5 = (char *)*((_QWORD *)this + 44);
    if (v5 != (char *)this + 344)
    {
      v6 = 0;
      v7 = &v20;
      do
      {
        v8 = *((_QWORD *)v5 + 2);
        if (*(OZChannelBase **)(v8 + 16) == lpsrc)
        {
          v9 = operator new(0x18uLL);
          v9[1] = &v20;
          v9[2] = v8;
          *v9 = v7;
          v7[1] = v9;
          ++v6;
          v7 = v9;
          v20 = v9;
          v22 = v6;
        }
        v5 = (char *)*((_QWORD *)v5 + 1);
      }
      while (v5 != v4);
    }
  }
  v16 = v21;
  if (v21 != &v20)
  {
    v17 = (char *)this + 344;
    do
    {
      v19 = v16[2];
      std::list<OZBehaviorCurveNode *>::remove((uint64_t)v17, &v19);
      v16 = (_QWORD *)v16[1];
    }
    while (v16 != &v20);
  }
  return std::__list_imp<unsigned int>::clear(&v20);
}

void sub_1B2E93B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::willRemove(OZChannelBehavior *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (char *)this + 376;
  v3 = (char *)*((_QWORD *)this + 47);
  v4 = (char *)this + 384;
  if (v3 != (char *)this + 384)
  {
    do
    {
      OZChannelBehavior::removeNodesFromChan(this, *((OZChannelBase **)v3 + 4));
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((_QWORD **)this + 48));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = v4;
  while (1)
  {
    v8 = *((_QWORD *)this + 45);
    if (!v8)
      break;
    v9 = (uint64_t *)*((_QWORD *)this + 44);
    v10 = *v9;
    *(_QWORD *)(v10 + 8) = v9[1];
    *(_QWORD *)v9[1] = v10;
    *((_QWORD *)this + 45) = v8 - 1;
    operator delete(v9);
  }
  if (*((_BYTE *)this + 368))
  {
    v11 = (*(uint64_t (**)(OZChannelBehavior *))(*(_QWORD *)this + 336))(this);
    if (v11)
    {
      OZDocument::removeCPPObserver(*(_QWORD *)(v11 + 1584));
      *((_BYTE *)this + 368) = 0;
    }
  }
  *((_QWORD *)this + 41) = 0;
}

void OZChannelBehavior::reorderCurveNode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  OZChannel *v7;
  const void **v8;
  const void **v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *__p;
  const void **v18;

  v7 = (OZChannel *)a2[2];
  OZChannel::removeCurveProcessingNode(v7, a2);
  OZChannel::enumerateCurveProcessingNodes(v7, &__p);
  v8 = (const void **)__p;
  v9 = v18;
  if (__p != v18)
  {
    v10 = 0;
    v11 = *a4;
    while (1)
    {
      v12 = *v8;
      if (!*v8)
        break;
      if (v13)
      {
        v14 = v13[1];
      }
      else
      {
        v16 = (_QWORD *)a3;
        while (v16 != *(_QWORD **)(a3 + 8))
        {
          v16 = (_QWORD *)*v16;
          v14 = v16[2];
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v14 + 8)+ 8), (int32x4_t)xmmword_1B355CD10)))) & 1) == 0)goto LABEL_6;
        }
        v14 = 0;
      }
LABEL_6:
      if (v11 == a3)
        goto LABEL_22;
      v15 = v11;
      while (*(_QWORD *)(v15 + 16) != v14)
      {
        v15 = *(_QWORD *)(v15 + 8);
        if (v15 == a3)
          goto LABEL_22;
      }
      if (v15 == a3)
      {
LABEL_22:
        OZChannel::insertCurveProcessingNode(v7, a2, v10);
        goto LABEL_24;
      }
LABEL_19:
      ++v8;
      v10 = (void *)v12;
      if (v8 == v9)
        goto LABEL_23;
    }
    v12 = v10;
    goto LABEL_19;
  }
LABEL_23:
  OZChannel::appendCurveProcessingNode(v7, a2);
LABEL_24:
  if (__p)
  {
    v18 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B2E93DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZChannelBehavior::reorderSingleChan(uint64_t a1, OZChannel *this, uint64_t a3, uint64_t *a4)
{
  _QWORD **v7;
  _QWORD **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *__p;
  _QWORD **v18;

  OZChannel::enumerateCurveProcessingNodes(this, &__p);
  v14 = &v14;
  v15 = &v14;
  v16 = 0;
  v7 = (_QWORD **)__p;
  v8 = v18;
  if (__p != v18)
  {
    v9 = 0;
    v10 = &v14;
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v11)
        {
          v12 = v11;
          if (v11[1] == a1)
          {
            v11 = operator new(0x18uLL);
            v11[1] = &v14;
            v11[2] = v12;
            *v11 = v10;
            v10[1] = v11;
            ++v9;
            v10 = v11;
            v14 = v11;
            v16 = v9;
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
    if (&v14 != v15)
    {
      v13 = &v14;
      do
      {
        OZChannelBehavior::reorderCurveNode((uint64_t)v11, *(_QWORD **)(*v13 + 16), a3, a4);
        v13 = (_QWORD *)*v13;
      }
      while (v13 != v15);
    }
  }
  std::__list_imp<unsigned int>::clear(&v14);
  if (__p)
  {
    v18 = (_QWORD **)__p;
    operator delete(__p);
  }
}

void sub_1B2E93F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__list_imp<unsigned int>::clear(&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZChannelBehavior::reorderChan(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t *a4)
{
  OZChannel *v7;
  uint64_t **v8;
  uint64_t *i;
  uint64_t v10;

  if ((a2[57] & 0x10) != 0)
  {
    if (v8)
    {
      for (i = *v8; i != v8[1]; ++i)
      {
        v10 = *i;
        OZChannelBehavior::reorderChan(a1, v10, a3, a4);
      }
    }
  }
  else
  {
    OZChannelBehavior::reorderSingleChan(a1, v7, a3, a4);
  }
}

void OZChannelBehavior::didReorder(OZChannelBehavior *this, OZBehavior *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  OZChannelBehavior *v6;
  OZChannelBehavior *v7;
  OZChannelBehavior *v8;
  BOOL v9;
  uint64_t v10;

  if (*((_QWORD *)this + 49))
  {
    v3 = (*(uint64_t (**)(OZChannelBehavior *, OZBehavior *))(*(_QWORD *)this + 320))(this, a2);
    v4 = v3 + 1000;
    v5 = v3 + 1000;
    if (*(_QWORD *)(v3 + 1008) != v3 + 1000)
    {
      v5 = *(_QWORD *)(v3 + 1008);
      while (*(OZChannelBehavior **)(v5 + 16) != this)
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (v5 == v4)
        {
          v5 = v3 + 1000;
          break;
        }
      }
    }
    v10 = *(_QWORD *)(v5 + 8);
    v6 = (OZChannelBehavior *)*((_QWORD *)this + 47);
    if (v6 != (OZChannelBehavior *)((char *)this + 384))
    {
      do
      {
        OZChannelBehavior::reorderChan((uint64_t)this, *((_BYTE **)v6 + 4), v4, &v10);
        v7 = (OZChannelBehavior *)*((_QWORD *)v6 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(OZChannelBehavior **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (OZChannelBehavior *)*((_QWORD *)v6 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v6;
            v6 = v8;
          }
          while (!v9);
        }
        v6 = v8;
      }
      while (v8 != (OZChannelBehavior *)((char *)this + 384));
    }
  }
}

void OZChannelBehavior::willDeleteMaterialLayer(OZChannelBehavior *this, OZChannelBase *a2)
{
  uint64_t ObjectManipulator;
  uint64_t v4;
  OZObjectManipulator *v5;
  OZObjectManipulator *v6;

  ObjectManipulator = OZChannelBase::getObjectManipulator(a2);
  v4 = ObjectManipulator - 16;
  if (!ObjectManipulator)
    v4 = 0;
  v5 = (OZObjectManipulator *)(v4 + 16);
  if (ObjectManipulator)
    v6 = v5;
  else
    v6 = 0;
  OZChannelBehavior::willDeleteObject(this, v6);
}

void OZChannelBehavior::willDeleteObject(OZChannelBehavior *this, OZObjectManipulator *a2)
{
  char *v2;
  char *v3;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  OZChannelBase *lpsrc;
  uint64_t *v14;
  _QWORD *v15[2];

  v15[0] = 0;
  v15[1] = 0;
  v14 = (uint64_t *)v15;
  v2 = (char *)*((_QWORD *)this + 47);
  v3 = (char *)this + 384;
  if (v2 != (char *)this + 384)
  {
    v6 = (char *)this + 376;
    do
    {
      lpsrc = (OZChannelBase *)*((_QWORD *)v2 + 4);
      if ((OZObjectManipulator *)OZChannelBase::getObjectManipulator(lpsrc) == a2)
      {
        OZChannelBehavior::removeNodesFromChan(this, lpsrc);
        std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v14, (unint64_t *)&lpsrc, (uint64_t *)&lpsrc);
        OZChannelBehavior::removeNodesReferencingChan(this, lpsrc);
      }
      v7 = (char *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v2 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
    v10 = v14;
    if (v14 != (uint64_t *)v15)
    {
      do
      {
        lpsrc = (OZChannelBase *)v10[4];
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)v6, (unint64_t *)&lpsrc);
        v11 = (uint64_t *)v10[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v10[2];
            v9 = *v12 == (_QWORD)v10;
            v10 = v12;
          }
          while (!v9);
        }
        v10 = v12;
      }
      while (v12 != (uint64_t *)v15);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_1B2E94254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::willDeleteChannel(OZChannelBehavior *this, OZChannelBase *a2)
{
  char *v2;
  char *v3;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  OZChannelBase *lpsrc;
  uint64_t *v14;
  _QWORD *v15[2];

  v15[0] = 0;
  v15[1] = 0;
  v14 = (uint64_t *)v15;
  v2 = (char *)*((_QWORD *)this + 47);
  v3 = (char *)this + 384;
  if (v2 != (char *)this + 384)
  {
    v6 = (char *)this + 376;
    do
    {
      lpsrc = (OZChannelBase *)*((_QWORD *)v2 + 4);
      if (lpsrc == a2)
      {
        OZChannelBehavior::removeNodesFromChan(this, a2);
        std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(&v14, (unint64_t *)&lpsrc, (uint64_t *)&lpsrc);
        OZChannelBehavior::removeNodesReferencingChan(this, lpsrc);
      }
      v7 = (char *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v2 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
    v10 = v14;
    if (v14 != (uint64_t *)v15)
    {
      do
      {
        lpsrc = (OZChannelBase *)v10[4];
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)v6, (unint64_t *)&lpsrc);
        v11 = (uint64_t *)v10[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v10[2];
            v9 = *v12 == (_QWORD)v10;
            v10 = v12;
          }
          while (!v9);
        }
        v10 = v12;
      }
      while (v12 != (uint64_t *)v15);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_1B2E943A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBehavior::affectsBehavior(OZChannelBehavior *this, OZBehavior *a2)
{
  char *v2;
  char *v3;
  const void *ObjectManipulator;
  OZBehavior *v6;
  void *v7;
  char *v8;
  char *v9;
  BOOL v10;

  v2 = (char *)*((_QWORD *)this + 47);
  v3 = (char *)this + 384;
  if (v2 == (char *)this + 384)
    return 0;
  while (1)
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(*((OZChannelBase **)v2 + 4));
    if (ObjectManipulator)
      break;
    if (!a2)
      return 1;
LABEL_9:
    v8 = (char *)*((_QWORD *)v2 + 1);
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = *(char **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (char *)*((_QWORD *)v2 + 2);
        v10 = *(_QWORD *)v9 == (_QWORD)v2;
        v2 = v9;
      }
      while (!v10);
    }
    v2 = v9;
    if (v9 == v3)
      return 0;
  }
  if (v6 != a2)
  {
    if (!v6)
      goto LABEL_9;
    if (!v7 || ((*(uint64_t (**)(void *, OZBehavior *))(*(_QWORD *)v7 + 624))(v7, a2) & 1) == 0)
      goto LABEL_9;
  }
  return 1;
}

void OZChannelBehavior::setAffectedChannel(OZChannelBehavior *this, OZChannelBase *a2)
{
  uint64_t **v4;
  char *v5;
  OZChannelBase *v6;

  v4 = (uint64_t **)((char *)this + 376);
  v5 = (char *)this + 384;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = v5;
  v6 = a2;
  if (a2)
    std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(v4, (unint64_t *)&v6, (uint64_t *)&v6);
}

void OZChannelBehavior::clearChannels(OZChannelBehavior *this)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = (char *)this + 384;
}

uint64_t *OZChannelBehavior::addAffectedChannel(uint64_t *this, OZChannelBase *a2)
{
  OZChannelBase *v2;

  v2 = a2;
  if (a2)
    return std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)this + 47, (unint64_t *)&v2, (uint64_t *)&v2);
  return this;
}

_QWORD *OZChannelBehavior::didAddCurveNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v4 = a1 + 344;
  result = operator new(0x18uLL);
  result[1] = v4;
  result[2] = a2;
  v6 = *(_QWORD *)(a1 + 344);
  *result = v6;
  *(_QWORD *)(v6 + 8) = result;
  *(_QWORD *)(a1 + 344) = result;
  ++*(_QWORD *)(a1 + 360);
  return result;
}

OZChannelBehavior *OZChannelBehavior::GetSceneNodeFromChan(OZChannelBehavior *this, OZChannelBase *a2)
{
  OZChannelBehavior *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v7;

  v2 = this;
  if (this)
  {
    while (1)
    {
      if (v3)
        break;
      v2 = (OZChannelBehavior *)*((_QWORD *)v2 + 6);
      if (!v2)
        return v2;
    }
    v2 = (OZChannelBehavior *)*((_QWORD *)v3 + 32);
    if (v2 && *((_QWORD *)v2 + 120))
    {
      v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 664))(*((_QWORD *)v3 + 32)) + 8);
      v7 = xmmword_1B355CF50;
      if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v7))
      {
        return (OZChannelBehavior *)*((_QWORD *)v2 + 120);
      }
      else
      {
        v5 = *(_QWORD *)((*(uint64_t (**)(OZChannelBehavior *))(*(_QWORD *)v2 + 664))(v2) + 8);
        v7 = xmmword_1B355E440;
        if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v7) && *(_QWORD *)(*((_QWORD *)v2 + 120) + 960))
          return *(OZChannelBehavior **)(*((_QWORD *)v2 + 120) + 960);
      }
    }
  }
  return v2;
}

void OZChannelBehavior::getEvalDepChansForRef(int a1, void *lpsrc, uint64_t a3, uint64_t *a4)
{
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;

  if (lpsrc)
  {
    if (a3)
    {
      {
        v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 232))(a3);
        if (v6)
        {
          if (v7)
          {
            v8 = v7;
            do
            {
              if (v9)
              {
                v10 = v9 + 1088;
                v11 = operator new(0x18uLL);
                v11[1] = a4;
                v11[2] = v10;
                v12 = *a4;
                *v11 = *a4;
                *(_QWORD *)(v12 + 8) = v11;
                *a4 = (uint64_t)v11;
                ++a4[2];
              }
              v8 = (_QWORD *)v8[120];
            }
            while (v8);
          }
        }
      }
    }
  }
}

void OZChannelBehavior::getEvalDepRefs(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void **v4;
  const void **v5;
  const void **v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  uint64_t v13;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  OZChannelFolder::getAllDescendantsFlattened(v3, (void **)&v11, 0, 0);
  v4 = v11;
  v5 = v12;
  if (v11 != v12)
  {
    v6 = v11;
    do
    {
      if (*v6)
      {
        if (v7)
        {
          v8 = v7;
          v9 = operator new(0x18uLL);
          v9[1] = a2;
          v9[2] = v8;
          v10 = *a2;
          *v9 = *a2;
          *(_QWORD *)(v10 + 8) = v9;
          *a2 = (uint64_t)v9;
          ++a2[2];
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  if (v4)
  {
    v12 = v4;
    operator delete(v4);
  }
}

void sub_1B2E94880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZChannelBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  char *v4;
  char *v5;
  uint64_t *i;
  char IsChanAAffectedByChanB;
  char *v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v14 = (uint64_t)&v14;
  v15 = &v14;
  v16 = 0;
  (*((void (**)(char **, const OZChanObjectManipRef *, const OZObjectManipulator *, uint64_t *))*this + 66))(this, a2, a3, &v14);
  v4 = this[47];
  v5 = (char *)(this + 48);
  if (v4 != (char *)(this + 48))
  {
    do
    {
      for (i = v15; i != &v14; i = (uint64_t *)i[1])
      {
        v13[0] = v13;
        v13[1] = v13;
        v13[2] = 0;
        IsChanAAffectedByChanB = OZBehavior::IsChanAAffectedByChanB((_BYTE *)i[2], *((_BYTE **)v4 + 4), (uint64_t)v13);
        std::__list_imp<unsigned int>::clear(v13);
        if ((IsChanAAffectedByChanB & 1) != 0)
        {
          v11 = 0;
          goto LABEL_14;
        }
      }
      v8 = (char *)*((_QWORD *)v4 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v4 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
  v11 = 1;
LABEL_14:
  std::__list_imp<unsigned int>::clear(&v14);
  return v11;
}

void sub_1B2E9499C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  return OZChannelBehavior::canChanRefBeSetTo(this - 2, a2, a3);
}

uint64_t OZChannelBehavior::isEvalCyclic(OZChannelBehavior *this)
{
  char v1;
  std::mutex *v3;
  int v4;
  OZChannelBehavior *v5;
  _BYTE *v6;
  OZChannelBehavior *v7;
  OZChannelBehavior *v8;
  BOOL v9;
  char v10;
  _QWORD v12[3];

  v3 = (std::mutex *)((char *)this + 400);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 400));
  v4 = *((unsigned __int8 *)this + 505);
  if (!*((_BYTE *)this + 505))
    v1 = *((_BYTE *)this + 504) != 0;
  PCSharedMutex::unlock_shared(v3);
  if (v4)
  {
    PCSharedMutex::lock(v3);
    *((_BYTE *)this + 505) = 0;
    v5 = (OZChannelBehavior *)*((_QWORD *)this + 47);
    if (v5 == (OZChannelBehavior *)((char *)this + 384))
    {
LABEL_12:
      v10 = 0;
      *((_BYTE *)this + 504) = 0;
    }
    else
    {
      while (1)
      {
        v6 = (_BYTE *)*((_QWORD *)v5 + 4);
        v12[0] = v12;
        v12[1] = v12;
        v12[2] = 0;
        if (OZBehavior::isUltimatelyAffectedBy((uint64_t)this, v6, (uint64_t)v12))
          break;
        std::__list_imp<unsigned int>::clear(v12);
        v7 = (OZChannelBehavior *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(OZChannelBehavior **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (OZChannelBehavior *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
        if (v8 == (OZChannelBehavior *)((char *)this + 384))
          goto LABEL_12;
      }
      v10 = 1;
      *((_BYTE *)this + 504) = 1;
      std::__list_imp<unsigned int>::clear(v12);
      v1 = 1;
    }
    PCSharedMutex::unlock(v3);
    v1 &= v10;
  }
  return v1 & 1;
}

void sub_1B2E94ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  PCSharedMutex::unlock(v2);
  _Unwind_Resume(a1);
}

void OZChannelBehavior::dirtyIsEvalCyclicCache(OZChannelBehavior *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 400);
  PCSharedMutex::lock((std::mutex *)((char *)this + 400));
  *((_BYTE *)this + 505) = 1;
  PCSharedMutex::unlock(v2);
}

void OZChannelBehavior::notify(OZChannelBehavior *this, char a2)
{
  if ((a2 & 0x10) != 0)
  {
    if (*((_QWORD *)this + 66))
      OZChannelBehavior::dirtyIsEvalCyclicCache(this);
  }
}

void `non-virtual thunk to'OZChannelBehavior::notify(OZChannelBehavior *this, char a2)
{
  if ((a2 & 0x10) != 0)
  {
    if (*((_QWORD *)this + 24))
      OZChannelBehavior::dirtyIsEvalCyclicCache((OZChannelBehavior *)((char *)this - 336));
  }
}

double OZChannelBehavior::getChannelValueBeforeThis(OZChannelBehavior *this, OZChannel *a2, const CMTime *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double CurveValueForNode;
  const void **v11;
  const void **v12;
  void *v13;
  void *v14;
  void *v15;
  OZChannelBehavior *v16;
  uint64_t v17;
  double v18;
  const CMTime *v20;
  CMTime v21;
  void *__p;
  const void **v23;

  OZChannel::enumerateCurveProcessingNodes(a2, &__p);
  if (__p == v23)
  {
    OZChannel::getValueAsDouble(a2, a3, 0.0);
  }
  else
  {
    v6 = (*(uint64_t (**)(OZChannelBehavior *))(*(_QWORD *)this + 320))(this);
    v7 = v6 + 1000;
    v8 = *(_QWORD *)(v6 + 1008);
    v20 = a3;
    if (v8 != v6 + 1000)
    {
      v9 = *(_QWORD *)(v6 + 1008);
      while (*(OZChannelBehavior **)(v9 + 16) != this)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (v9 == v7)
          goto LABEL_9;
      }
      v7 = v9;
    }
LABEL_9:
    v12 = (const void **)__p;
    v11 = v23;
    if (__p == v23)
    {
      v14 = 0;
    }
    else
    {
      v13 = 0;
      do
      {
        v14 = v13;
        v13 = (void *)*v12;
        if (*v12)
        {
          if (v15)
          {
            v16 = (OZChannelBehavior *)*((_QWORD *)v15 + 1);
            if (v16 == this)
              break;
            v17 = v8;
            if (v8 != v7)
            {
              v17 = v8;
              while (*(OZChannelBehavior **)(v17 + 16) != v16)
              {
                v17 = *(_QWORD *)(v17 + 8);
                if (v17 == v7)
                {
                  v17 = v7;
                  break;
                }
              }
            }
            if (v7 != v17)
              break;
          }
        }
        ++v12;
        v14 = v13;
      }
      while (v12 != v11);
    }
    memset(&v21, 0, sizeof(v21));
    (*((void (**)(CMTime *__return_ptr, OZChannel *, const CMTime *))a2->var0 + 41))(&v21, a2, v20);
    CurveValueForNode = OZChannel::getCurveValueForNode(a2, &v21, v14, 0.0);
  }
  v18 = CurveValueForNode;
  if (__p)
  {
    v23 = (const void **)__p;
    operator delete(__p);
  }
  return v18;
}

void sub_1B2E94D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZBehaviorCurveNode::OZBehaviorCurveNode(OZBehaviorCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  _QWORD *v5;

  OZCurveNode::OZCurveNode(this);
  *v5 = &off_1E659D0A8;
  v5[1] = a2;
  v5[2] = a3;
}

void OZBehaviorCurveNode::OZBehaviorCurveNode(OZBehaviorCurveNode *this, const OZBehaviorCurveNode *a2)
{
  uint64_t v3;
  _QWORD *v4;

  OZCurveNode::OZCurveNode(this);
  v3 = *((_QWORD *)a2 + 1);
  *v4 = &off_1E659D0A8;
  v4[1] = v3;
}

void OZBehaviorCurveNode::~OZBehaviorCurveNode(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);
  JUMPOUT(0x1B5E29170);
}

double OZBehaviorCurveNode::solveNode(OZBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double v5;
  double result;

  v2 = *((unsigned int *)a2 + 36);
  if ((_DWORD)v2)
  {
    v3 = (double *)*((_QWORD *)a2 + 19);
    v4 = (double *)*((_QWORD *)a2 + 10);
    do
    {
      v5 = *v4++;
      result = v5;
      *v3++ = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n128 OZBehaviorCurveNode::getNeededRange(OZBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

OZCurveNode *OZBehaviorCurveNode::cloneNode(OZBehaviorCurveNode *this)
{
  OZCurveNode *v2;
  uint64_t v3;

  v2 = (OZCurveNode *)operator new();
  OZCurveNode::OZCurveNode(v2);
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = &off_1E659D0A8;
  *((_QWORD *)v2 + 1) = v3;
  return v2;
}

void sub_1B2E94E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

uint64_t OZBehaviorCurveNode::compare(OZBehaviorCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

void OZCamera::OZCamera(OZCamera *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZCamera::OZCamera_cameraTypeImpl *v6;
  OZChannelImpl *Instance;
  OZCamera::OZCamera_angleOfViewImpl *v8;
  OZCamera::OZCamera_angleOfViewInfo *v9;
  OZChannelInfo *v10;
  OZCamera::OZCamera_nearPlaneImpl *v11;
  OZCamera::OZCamera_nearPlaneInfo *v12;
  OZChannelInfo *v13;
  OZCamera::OZCamera_farPlaneImpl *v14;
  OZCamera::OZCamera_farPlaneInfo *v15;
  OZChannelInfo *v16;
  OZCamera::OZCamera_nearFadeImpl *v17;
  OZCamera::OZCamera_nearFadeInfo *v18;
  OZChannelInfo *v19;
  OZCamera::OZCamera_farFadeImpl *v20;
  OZCamera::OZCamera_farFadeInfo *v21;
  OZChannelInfo *v22;
  OZCamera::OZCamera_apertureImpl *v23;
  OZCamera::OZCamera_apertureInfo *v24;
  OZChannelInfo *v25;
  OZCamera::OZCamera_dofOffsetInfo *v26;
  OZChannelInfo *v27;
  OZCamera::OZCamera_dofNearImpl *v28;
  OZCamera::OZCamera_dofNearInfo *v29;
  OZChannelInfo *v30;
  OZCamera::OZCamera_dofFarImpl *v31;
  OZCamera::OZCamera_dofFarInfo *v32;
  OZChannelInfo *v33;
  OZCamera::OZCamera_dofFilterImpl *v34;
  OZChannelImpl *v35;
  OZCamera::OZCamera_dofFilterShapeImpl *v36;
  OZChannelImpl *v37;
  OZCamera::OZCamera_dofFilterSidesImpl *v38;
  OZCamera::OZCamera_dofFilterSidesInfo *v39;
  OZChannelInfo *v40;
  OZCamera::OZCamera_dofDepthModeImpl *v41;
  OZChannelImpl *v42;
  PCString v43;
  PCString v44;

  OZTransformNode::OZTransformNode((OZTransformNode *)this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(_QWORD *)this = &off_1E659D1A0;
  *((_QWORD *)this + 2) = &unk_1E659D770;
  *((_QWORD *)this + 6) = &unk_1E659D9C8;
  *((_QWORD *)this + 816) = &unk_1E659DA20;
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera Type Enum"));
  PCURL::PCURL((PCURL *)&v43, CFSTR("Channel Camera Type Label"));
  Instance = (OZChannelImpl *)OZCamera::OZCamera_cameraTypeImpl::getInstance(v6);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 6552), 1u, &v44, &v43, (OZChannelFolder *)((char *)this + 448), 0xC8u, 0, Instance, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera Angle Of View"));
  v9 = (OZCamera::OZCamera_angleOfViewInfo *)OZCamera::OZCamera_angleOfViewImpl::getInstance(v8);
  v10 = (OZChannelInfo *)OZCamera::OZCamera_angleOfViewInfo::getInstance(v9);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 6808), 45.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xC9u, 0, (OZChannelImpl *)v9, v10);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera Near Plane"));
  v12 = (OZCamera::OZCamera_nearPlaneInfo *)OZCamera::OZCamera_nearPlaneImpl::getInstance(v11);
  v13 = (OZChannelInfo *)OZCamera::OZCamera_nearPlaneInfo::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 6960), 10.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCAu, 0, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera Far Plane"));
  v15 = (OZCamera::OZCamera_farPlaneInfo *)OZCamera::OZCamera_farPlaneImpl::getInstance(v14);
  v16 = (OZChannelInfo *)OZCamera::OZCamera_farPlaneInfo::getInstance(v15);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7112), 10000.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCBu, 0, (OZChannelImpl *)v15, v16);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera Near Fade"));
  v18 = (OZCamera::OZCamera_nearFadeInfo *)OZCamera::OZCamera_nearFadeImpl::getInstance(v17);
  v19 = (OZChannelInfo *)OZCamera::OZCamera_nearFadeInfo::getInstance(v18);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7264), 10.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCCu, 0, (OZChannelImpl *)v18, v19);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera Far Fade"));
  v21 = (OZCamera::OZCamera_farFadeInfo *)OZCamera::OZCamera_farFadeImpl::getInstance(v20);
  v22 = (OZChannelInfo *)OZCamera::OZCamera_farFadeInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7416), 100.0, &v44, (OZChannelFolder *)((char *)this + 448), 0xCDu, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Enable"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7568), &v44, (OZChannelFolder *)((char *)this + 448), 0xCEu, 0, 0);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera Aperture"));
  v24 = (OZCamera::OZCamera_apertureInfo *)OZCamera::OZCamera_apertureImpl::getInstance(v23);
  v25 = (OZChannelInfo *)OZCamera::OZCamera_apertureInfo::getInstance(v24);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7696), 10.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xCFu, 0, (OZChannelImpl *)v24, v25);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Offset"));
  v27 = (OZChannelInfo *)OZCamera::OZCamera_dofOffsetInfo::getInstance(v26);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 7848), 0.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD0u, 0, 0, v27);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Near"));
  v29 = (OZCamera::OZCamera_dofNearInfo *)OZCamera::OZCamera_dofNearImpl::getInstance(v28);
  v30 = (OZChannelInfo *)OZCamera::OZCamera_dofNearInfo::getInstance(v29);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 8000), 0.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD1u, 0, (OZChannelImpl *)v29, v30);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Far"));
  v32 = (OZCamera::OZCamera_dofFarInfo *)OZCamera::OZCamera_dofFarImpl::getInstance(v31);
  v33 = (OZChannelInfo *)OZCamera::OZCamera_dofFarInfo::getInstance(v32);
  OZChannelDouble::OZChannelDouble((OZCamera *)((char *)this + 8152), 0.0, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD2u, 0, (OZChannelImpl *)v32, v33);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Far Infinite"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8304), &v44, (OZChannelFolder *)((char *)this + 7568), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Filter Enum"));
  PCURL::PCURL((PCURL *)&v43, CFSTR("Channel Camera DOF Filter Label"));
  v35 = (OZChannelImpl *)OZCamera::OZCamera_dofFilterImpl::getInstance(v34);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8456), 0, &v44, &v43, (OZChannelFolder *)((char *)this + 7568), 0xD4u, 0, v35, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Filter Shape Enum"));
  PCURL::PCURL((PCURL *)&v43, CFSTR("Channel Camera DOF Filter Shape Label"));
  v37 = (OZChannelImpl *)OZCamera::OZCamera_dofFilterShapeImpl::getInstance(v36);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8712), 0, &v44, &v43, (OZChannelFolder *)((char *)this + 7568), 0xD5u, 0, v37, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Filter Sides"));
  v39 = (OZCamera::OZCamera_dofFilterSidesInfo *)OZCamera::OZCamera_dofFilterSidesImpl::getInstance(v38);
  v40 = (OZChannelInfo *)OZCamera::OZCamera_dofFilterSidesInfo::getInstance(v39);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)this + 59, 3, &v44, (OZChannelFolder *)((char *)this + 7568), 0xD6u, 0, (OZChannelImpl *)v39, v40);
  PCString::~PCString(&v44);
  PCURL::PCURL((PCURL *)&v44, CFSTR("Channel Camera DOF Depth Mode Enum"));
  PCURL::PCURL((PCURL *)&v43, CFSTR("Channel Camera DOF Depth Mode Label"));
  v42 = (OZChannelImpl *)OZCamera::OZCamera_dofDepthModeImpl::getInstance(v41);
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 9120), 0, &v44, &v43, (OZChannelFolder *)((char *)this + 7568), 0xD7u, 0, v42, 0);
  PCString::~PCString(&v43);
  PCString::~PCString(&v44);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1504), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1952), 0.0);
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 152) + 288))((char *)this + 1216, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5032), 2, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 629) + 128))((char *)this + 5032);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6960), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6960));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7112), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7112));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7264), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7264));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7416), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7416));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 4576), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 4576), 0.01);
  OZChannel::setMin((OZChannel *)((char *)this + 4728), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 4728), 0.01);
  OZChannel::setMin((OZChannel *)((char *)this + 4880), 0.01);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 4880), 0.01);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 7568), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 7568));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 8712), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 8968), 0, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7848), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7848));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8000), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8000));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8152), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8152));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8304), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8304));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8456), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8456));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8712), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8712));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8968), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8968));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9120), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 9120));
}

void sub_1B2E957BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, OZChannel *a12, OZChannelEnum *a13, OZChannelBase *a14, OZChannel *a15, OZChannel *a16, OZChannel *a17, OZChannel *a18, OZChannel *a19, OZChannel *a20,PCString a21,PCString a22)
{
  OZTransformNode *v22;
  OZChannelBool *v23;
  OZChannel *v24;
  OZChannelEnum *v25;
  OZChannelEnum *v26;
  OZChannel *v27;
  OZChannelFolder *v28;
  const PCString *v30;

  PCString::~PCString(&a22);
  OZChannel::~OZChannel(v27);
  OZChannelEnum::~OZChannelEnum(v26);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannelBool::~OZChannelBool(v23);
  OZChannel::~OZChannel(v24);
  OZChannel::~OZChannel(a16);
  OZChannel::~OZChannel(a17);
  OZChannel::~OZChannel(a11);
  OZChannelFolder::~OZChannelFolder(v28);
  OZChannel::~OZChannel(a18);
  OZChannel::~OZChannel(a19);
  OZChannel::~OZChannel(a20);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelBase::setRangeName(a14, v30);
  OZTransformNode::~OZTransformNode(v22);
  _Unwind_Resume(a1);
}

void OZCamera::OZCamera(OZCamera *this, const OZCamera *a2, char a3)
{
  uint64_t v5;

  OZTransformNode::OZTransformNode((OZTransformNode *)this, (const OZTransformNode *)a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(_QWORD *)this = &off_1E659D1A0;
  *((_QWORD *)this + 2) = &unk_1E659D770;
  *((_QWORD *)this + 6) = &unk_1E659D9C8;
  *((_QWORD *)this + 816) = &unk_1E659DA20;
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 6552), (const OZCamera *)((char *)a2 + 6552), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6808), (const OZChannelBase *)((char *)a2 + 6808), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 851) = &off_1E6551358;
  *((_QWORD *)this + 853) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 6960), (const OZChannelBase *)((char *)a2 + 6960), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 870) = &off_1E6551358;
  *((_QWORD *)this + 872) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7112), (const OZChannelBase *)((char *)a2 + 7112), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 889) = &off_1E6551358;
  *((_QWORD *)this + 891) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7264), (const OZChannelBase *)((char *)a2 + 7264), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 908) = &off_1E6551358;
  *((_QWORD *)this + 910) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7416), (const OZChannelBase *)((char *)a2 + 7416), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 927) = &off_1E6551358;
  *((_QWORD *)this + 929) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7568), (const OZChannelFolder *)((char *)a2 + 7568), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 7696), (const OZChannelBase *)((char *)a2 + 7696), (OZChannelFolder *)((char *)this + 7568));
  *((_QWORD *)this + 962) = &off_1E6551358;
  *((_QWORD *)this + 964) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7848), (const OZChannelBase *)((char *)a2 + 7848), (OZChannelFolder *)((char *)this + 7568));
  *((_QWORD *)this + 981) = &off_1E6551358;
  *((_QWORD *)this + 983) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8000), (const OZChannelBase *)((char *)a2 + 8000), (OZChannelFolder *)((char *)this + 7568));
  *((_QWORD *)this + 1000) = &off_1E6551358;
  *((_QWORD *)this + 1002) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8152), (const OZChannelBase *)((char *)a2 + 8152), (OZChannelFolder *)((char *)this + 7568));
  *((_QWORD *)this + 1019) = &off_1E6551358;
  *((_QWORD *)this + 1021) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8304), (const OZChannelBase *)((char *)a2 + 8304), (OZChannelFolder *)((char *)this + 7568));
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8456), (const OZCamera *)((char *)a2 + 8456), (OZChannelFolder *)((char *)this + 7568));
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 8712), (const OZCamera *)((char *)a2 + 8712), (OZChannelFolder *)((char *)this + 7568));
  OZChannel::OZChannel((OZChannel *)this + 59, (const OZChannelBase *)((char *)a2 + 8968), (OZChannelFolder *)((char *)this + 7568));
  *((_QWORD *)this + 1121) = &off_1E6551AF8;
  *((_QWORD *)this + 1123) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((OZCamera *)((char *)this + 9120), (const OZCamera *)((char *)a2 + 9120), (OZChannelFolder *)((char *)this + 7568));
}

void sub_1B2E95CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel *a9, OZChannel *a10, OZChannel *a11, OZChannel *a12, OZChannel *a13, OZChannel *a14, OZChannelEnum *a15, OZChannelBase *a16)
{
  OZTransformNode *v16;
  OZChannel *v17;
  OZChannel *v18;
  OZChannel *v19;
  OZChannel *v20;
  OZChannelBool *v21;
  OZChannelEnum *v22;
  OZChannelEnum *v23;
  OZChannelFolder *v24;
  const PCString *v26;

  OZChannel::~OZChannel(v17);
  OZChannelEnum::~OZChannelEnum(v23);
  OZChannelEnum::~OZChannelEnum(v22);
  OZChannelBool::~OZChannelBool(v21);
  OZChannel::~OZChannel(v20);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(a9);
  OZChannelFolder::~OZChannelFolder(v24);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelBase::setRangeName(a16, v26);
  OZTransformNode::~OZTransformNode(v16);
  _Unwind_Resume(a1);
}

void sub_1B2E95D84()
{
  JUMPOUT(0x1B2E95D1CLL);
}

void sub_1B2E95D8C()
{
  JUMPOUT(0x1B2E95D24);
}

void sub_1B2E95D94()
{
  JUMPOUT(0x1B2E95D2CLL);
}

void sub_1B2E95D9C()
{
  JUMPOUT(0x1B2E95D34);
}

void sub_1B2E95DA4()
{
  JUMPOUT(0x1B2E95D3CLL);
}

void sub_1B2E95DAC()
{
  JUMPOUT(0x1B2E95D44);
}

void sub_1B2E95DB4()
{
  JUMPOUT(0x1B2E95D4CLL);
}

void sub_1B2E95DBC()
{
  JUMPOUT(0x1B2E95D54);
}

void sub_1B2E95DC4()
{
  JUMPOUT(0x1B2E95D5CLL);
}

void sub_1B2E95DCC()
{
  JUMPOUT(0x1B2E95D64);
}

void sub_1B2E95DD4()
{
  JUMPOUT(0x1B2E95D6CLL);
}

void sub_1B2E95DDC()
{
  JUMPOUT(0x1B2E95D74);
}

void OZCamera::~OZCamera(OZCamera *this)
{
  OZChannelBase *v2;
  const PCString *v3;

  *(_QWORD *)this = &off_1E659D1A0;
  *((_QWORD *)this + 2) = &unk_1E659D770;
  *((_QWORD *)this + 6) = &unk_1E659D9C8;
  v2 = (OZChannelBase *)((char *)this + 6528);
  *((_QWORD *)this + 816) = &unk_1E659DA20;
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 9120));
  OZChannel::~OZChannel((OZChannel *)this + 59);
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 8712));
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 8456));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 8304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8152));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7696));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7264));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7112));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6808));
  OZChannelEnum::~OZChannelEnum((OZCamera *)((char *)this + 6552));
  OZChannelBase::setRangeName(v2, v3);
  OZTransformNode::~OZTransformNode((OZTransformNode *)this);
}

{
  OZCamera::~OZCamera(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZCamera::~OZCamera(OZCamera *this)
{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 16));
}

{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 48));
}

{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 6528));
}

{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZCamera::~OZCamera((OZCamera *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZCamera::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZTransformNode::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 6552, (uint64_t)v4 + 6552);
  OZChannelBase::operator=(a1 + 6808, (uint64_t)v5 + 6808);
  OZChannelBase::operator=(a1 + 6960, (uint64_t)v5 + 6960);
  OZChannelBase::operator=(a1 + 7112, (uint64_t)v5 + 7112);
  OZChannelBase::operator=(a1 + 7264, (uint64_t)v5 + 7264);
  OZChannelBase::operator=(a1 + 7416, (uint64_t)v5 + 7416);
  OZChannelFolder::operator=(a1 + 7568);
  OZChannelBase::operator=(a1 + 7696, (uint64_t)v5 + 7696);
  OZChannelBase::operator=(a1 + 7848, (uint64_t)v5 + 7848);
  OZChannelBase::operator=(a1 + 8000, (uint64_t)v5 + 8000);
  OZChannelBase::operator=(a1 + 8152, (uint64_t)v5 + 8152);
  OZChannelBase::operator=(a1 + 8304, (uint64_t)v5 + 8304);
  OZChannelBase::operator=(a1 + 8456, (uint64_t)v5 + 8456);
  OZChannelBase::operator=(a1 + 8712, (uint64_t)v5 + 8712);
  OZChannelBase::operator=(a1 + 8968, (uint64_t)v5 + 8968);
  return OZChannelBase::operator=(a1 + 9120, (uint64_t)v5 + 9120);
}

uint64_t OZCamera::canBeExported(OZCamera *this)
{
  return 1;
}

uint64_t OZCamera::parseEnd(OZTransformNode *this, PCSerializerReadStream *a2)
{
  unsigned int v4;
  BOOL v5;

  v4 = *((_DWORD *)a2 + 26);
  if (v4 < 5 || (v4 == 5 ? (v5 = *((_DWORD *)a2 + 27) > 0xAu) : (v5 = 1), !v5))
    (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 684) + 280))((char *)this + 5472, 0);
  return OZTransformNode::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZCamera::parseEnd(OZCamera *this, PCSerializerReadStream *a2)
{
  return OZCamera::parseEnd((OZTransformNode *)((char *)this - 48), a2);
}

void OZCamera::channelValueWillBeSet(OZCamera *this, OZChannel *a2, CMTime *a3, double a4)
{
  unsigned int var3;
  double v8;
  double v9;
  OZCoreGlobals *AnimateFlag;
  uint64_t v11;
  char v12;
  double v13;
  BOOL v14;
  double v15;
  int v16;
  OZChannelBase *v17;
  uint64_t v18;
  OZCoreGlobals *Instance;
  char v20;
  uint64_t v21;
  OZCoreGlobals *v22;
  uint64_t v23;
  double v24;
  PCSharedCount v25;
  PCSharedCount v26[2];
  CMTime v27;
  PCSharedCount v28;
  PCSharedCount v29;

  var3 = a2->var3;
  if (var3 == 213)
  {
    OZChannel::getValueAsDouble(a2, a3, 0.0);
    if (v13 == a4)
      return;
    v14 = a4 == 1.0;
  }
  else
  {
    if (var3 != 212)
    {
      if (var3 == 200)
      {
        OZChannel::getValueAsDouble(a2, a3, a4);
        if (v8 != a4)
        {
          v9 = v8;
          v27 = *a3;
          OZCamera::cameraAtTime(this, &v27, &v25);
          PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v28, &v25);
          PCSharedCount::~PCSharedCount(v26);
          v25.var0 = 0;
          v26[0].var0 = 0;
          v26[1].var0 = 0;
          if (!v28.var0)
            throw_PCNullPointerException(1);
          (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(_QWORD *)v28.var0 + 440))(v28.var0, &v25);
          if (!v28.var0)
            throw_PCNullPointerException(1);
          v24 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v28.var0 + 576))(v28.var0);
          if (!v28.var0)
            throw_PCNullPointerException(1);
          (*(void (**)(PC_Sp_counted_base *, _QWORD, _QWORD, PCSharedCount *))(*(_QWORD *)v28.var0 + 368))(v28.var0, v9, a4, &v25);
          if (!v28.var0)
            throw_PCNullPointerException(1);
          AnimateFlag = (OZCoreGlobals *)(*(uint64_t (**)(PC_Sp_counted_base *, _QWORD, _QWORD, double *))(*(_QWORD *)v28.var0 + 376))(v28.var0, v9, a4, &v24);
          v11 = *((_QWORD *)this + 121);
          if (v11)
          {
            AnimateFlag = (OZCoreGlobals *)OZSceneSettings::getAnimateFlag((OZSceneSettings *)(v11 + 336));
            v12 = (char)AnimateFlag;
          }
          else
          {
            v12 = 0;
          }
          Instance = (OZCoreGlobals *)OZCoreGlobals::getInstance(AnimateFlag);
          v20 = *((_BYTE *)Instance + 10);
          v21 = *((_QWORD *)this + 121);
          if (v21)
            Instance = (OZCoreGlobals *)OZSceneSettings::setAnimateFlag((OZSceneSettings *)(v21 + 336), 0);
          *(_BYTE *)(OZCoreGlobals::getInstance(Instance) + 10) = 1;
          if (!v28.var0)
            throw_PCNullPointerException(1);
          (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(_QWORD *)v28.var0 + 448))(v28.var0, &v25);
          if (!v28.var0)
            throw_PCNullPointerException(1);
          v22 = (OZCoreGlobals *)(*(uint64_t (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v28.var0 + 584))(v28.var0, v24);
          v23 = *((_QWORD *)this + 121);
          if (v23)
            v22 = (OZCoreGlobals *)OZSceneSettings::setAnimateFlag((OZSceneSettings *)(v23 + 336), v12);
          *(_BYTE *)(OZCoreGlobals::getInstance(v22) + 10) = v20;
          PCSharedCount::~PCSharedCount(&v29);
        }
      }
      return;
    }
    OZChannel::getValueAsDouble(a2, a3, 0.0);
    if (v15 == a4)
      return;
    if (a4 != 1.0)
    {
      if (v15 != 1.0)
        return;
      OZChannelBase::enable((OZChannelBase *)((char *)this + 8712), 0, 0);
      v17 = (OZChannelBase *)((char *)this + 8968);
      v16 = 0;
      goto LABEL_24;
    }
    OZChannelBase::enable((OZChannelBase *)((char *)this + 8712), 1, 0);
    v14 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 8712), a3, 0.0) == 1;
  }
  v16 = v14;
  v17 = (OZChannelBase *)((char *)this + 8968);
LABEL_24:
  OZChannelBase::enable(v17, v16, 0);
  v18 = *((_QWORD *)this + 121);
  if (v18)
    OZDocument::postNotification(*(OZDocument **)(v18 + 1584), 0x80000);
}

void sub_1B2E96458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

__n128 OZCamera::cameraAtTime@<Q0>(OZCamera *this@<X0>, CMTime *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  PC_Sp_counted_base *var0;
  __n128 result;

  v6 = operator new();
  v7 = (*(uint64_t (**)(OZCamera *))(*(_QWORD *)this + 272))(this);
  v8 = *((_DWORD *)this + 20);
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = 1;
  *(_QWORD *)(v6 + 48) = &unk_1E659DE50;
  *(_QWORD *)v6 = &off_1E659DB38;
  *(_QWORD *)(v6 + 8) = v7;
  *(_DWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 20) = 1;
  a3->var0 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(a3 + 1, (PCShared_base *)(v6 + 48));
  var0 = a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)var0 + 20) = 0;
  result = *(__n128 *)&a2->value;
  *((_QWORD *)var0 + 5) = a2->epoch;
  *(__n128 *)((char *)var0 + 24) = result;
  return result;
}

void sub_1B2E96548(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::eval(OZCamera *this, OZRenderParams *a2)
{
  return 0;
}

uint64_t OZCamera::getSolo(OZCamera *this)
{
  return 0;
}

void OZCamera::getLocalVolume(OZCamera *a1, uint64_t a2, CMTime *a3)
{
  int v4;
  double v5;
  CMTime v6;
  PCSharedCount v7;
  PCSharedCount v8;
  PCSharedCount v9;
  PCSharedCount v10;

  v6 = *a3;
  OZCamera::cameraAtTime(a1, &v6, &v7);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v9, &v7);
  PCSharedCount::~PCSharedCount(&v8);
  if (!v9.var0)
    throw_PCNullPointerException(1);
  v4 = (*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)v9.var0 + 632))(v9.var0);
  v5 = 0.0;
  if (v4 == 1)
  {
    if (!v9.var0)
      throw_PCNullPointerException(1);
    v5 = (*(double (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v9.var0 + 320))(v9.var0, 0.0);
  }
  *(_OWORD *)a2 = xmmword_1B355F400;
  *(_OWORD *)(a2 + 16) = xmmword_1B355F410;
  *(float64x2_t *)(a2 + 32) = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0), (float64x2_t)xmmword_1B355F3F0);
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B2E96668(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t rayIntersectsGeometry(double *a1, double *a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  double **v15;
  double *v16;
  double *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  double **v23;
  char *v24;
  char *v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  double *v49;
  double *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  double **v56;
  char *v57;
  char *v58;
  double *v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  __n128 v73;
  int v74;
  char *v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  char *v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  char *__p;
  char *v89;
  uint64_t *v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t *v95;

  v7 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  v95 = 0;
  v12 = (_QWORD *)operator new();
  *v12 = v6;
  v12[1] = v8;
  v12[2] = v10;
  v12[3] = 0;
  v12[4] = 0;
  v12[5] = 0x3FF0000000000000;
  v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v95, 1uLL);
  *v13 = v12;
  v15 = (double **)(v13 + 1);
  __p = (char *)v13;
  v95 = &v13[v14];
  v89 = (char *)v15;
  v16 = (double *)operator new();
  v17 = v16;
  *v16 = v7;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = v11;
  v16[3] = 0.0;
  v16[4] = 0.0;
  v16[5] = -1.0;
  if (v15 >= (double **)v95)
  {
    v19 = ((char *)v15 - __p) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v20 = ((char *)v95 - __p) >> 2;
    if (v20 <= v19 + 1)
      v20 = v19 + 1;
    if ((unint64_t)((char *)v95 - __p) >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v95, v21);
    else
      v22 = 0;
    v23 = (double **)&v22[8 * v19];
    v24 = &v22[8 * v21];
    *v23 = v17;
    v18 = (uint64_t *)(v23 + 1);
    v25 = v89;
    if (v89 != __p)
    {
      do
      {
        v26 = (double *)*((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v26;
      }
      while (v25 != __p);
      v25 = __p;
    }
    __p = (char *)v23;
    v95 = (uint64_t *)v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v16;
    v18 = (uint64_t *)(v15 + 1);
  }
  v90 = v18;
  v27 = operator new();
  v28 = v27;
  *(_QWORD *)v27 = v6;
  *(_QWORD *)(v27 + 8) = v8;
  *(_QWORD *)(v27 + 16) = v10;
  *(_OWORD *)(v27 + 24) = xmmword_1B304EEE0;
  *(_QWORD *)(v27 + 40) = 0;
  if (v18 >= v95)
  {
    v30 = ((char *)v18 - __p) >> 3;
    if ((unint64_t)(v30 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v31 = ((char *)v95 - __p) >> 2;
    if (v31 <= v30 + 1)
      v31 = v30 + 1;
    if ((unint64_t)((char *)v95 - __p) >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v95, v32);
    else
      v33 = 0;
    v34 = (uint64_t *)&v33[8 * v30];
    v35 = &v33[8 * v32];
    *v34 = v28;
    v29 = v34 + 1;
    v36 = (char *)v90;
    if (v90 != (uint64_t *)__p)
    {
      do
      {
        v37 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *--v34 = v37;
      }
      while (v36 != __p);
      v36 = __p;
    }
    __p = (char *)v34;
    v95 = (uint64_t *)v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v18 = v27;
    v29 = v18 + 1;
  }
  v91 = v29;
  v38 = operator new();
  v39 = v38;
  *(double *)v38 = v7;
  *(_QWORD *)(v38 + 8) = v9;
  *(_QWORD *)(v38 + 16) = v11;
  *(_OWORD *)(v38 + 24) = xmmword_1B305A270;
  *(_QWORD *)(v38 + 40) = 0;
  if (v29 >= v95)
  {
    v41 = ((char *)v29 - __p) >> 3;
    if ((unint64_t)(v41 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v42 = ((char *)v95 - __p) >> 2;
    if (v42 <= v41 + 1)
      v42 = v41 + 1;
    if ((unint64_t)((char *)v95 - __p) >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    if (v43)
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v95, v43);
    else
      v44 = 0;
    v45 = &v44[8 * v41];
    v46 = &v44[8 * v43];
    *(_QWORD *)v45 = v39;
    v40 = v45 + 8;
    v47 = (char *)v91;
    if (v91 != (uint64_t *)__p)
    {
      do
      {
        v48 = *((_QWORD *)v47 - 1);
        v47 -= 8;
        *((_QWORD *)v45 - 1) = v48;
        v45 -= 8;
      }
      while (v47 != __p);
      v47 = __p;
    }
    __p = v45;
    v95 = (uint64_t *)v46;
    if (v47)
      operator delete(v47);
  }
  else
  {
    *v29 = v38;
    v40 = (char *)(v29 + 1);
  }
  v92 = v40;
  v49 = (double *)operator new();
  v50 = v49;
  *v49 = v7;
  *((_QWORD *)v49 + 1) = v9;
  *((_QWORD *)v49 + 2) = v11;
  v49[4] = 0.0;
  v49[5] = 0.0;
  v49[3] = -1.0;
  if (v40 >= (char *)v95)
  {
    v52 = (v40 - __p) >> 3;
    if ((unint64_t)(v52 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v53 = ((char *)v95 - __p) >> 2;
    if (v53 <= v52 + 1)
      v53 = v52 + 1;
    if ((unint64_t)((char *)v95 - __p) >= 0x7FFFFFFFFFFFFFF8)
      v54 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v54 = v53;
    if (v54)
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v95, v54);
    else
      v55 = 0;
    v56 = (double **)&v55[8 * v52];
    v57 = &v55[8 * v54];
    *v56 = v50;
    v51 = (char *)(v56 + 1);
    v58 = v92;
    if (v92 != __p)
    {
      do
      {
        v59 = (double *)*((_QWORD *)v58 - 1);
        v58 -= 8;
        *--v56 = v59;
      }
      while (v58 != __p);
      v58 = __p;
    }
    __p = (char *)v56;
    v95 = (uint64_t *)v57;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *(_QWORD *)v40 = v49;
    v51 = v40 + 8;
  }
  v93 = v51;
  v60 = (_QWORD *)operator new();
  v61 = v60;
  *v60 = v6;
  v60[1] = v8;
  v60[2] = v10;
  v60[4] = 0;
  v60[5] = 0;
  v60[3] = 0x3FF0000000000000;
  if (v93 >= (char *)v95)
  {
    v63 = (v93 - __p) >> 3;
    if ((unint64_t)(v63 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v64 = ((char *)v95 - __p) >> 2;
    if (v64 <= v63 + 1)
      v64 = v63 + 1;
    if ((unint64_t)((char *)v95 - __p) >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v64;
    if (v65)
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v95, v65);
    else
      v66 = 0;
    v67 = &v66[8 * v63];
    v68 = &v66[8 * v65];
    *(_QWORD *)v67 = v61;
    v62 = v67 + 8;
    v69 = v93;
    if (v93 != __p)
    {
      do
      {
        v70 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        *((_QWORD *)v67 - 1) = v70;
        v67 -= 8;
      }
      while (v69 != __p);
      v69 = __p;
    }
    __p = v67;
    v95 = (uint64_t *)v68;
    if (v69)
      operator delete(v69);
  }
  else
  {
    *(_QWORD *)v93 = v60;
    v62 = v93 + 8;
  }
  v94 = v62;
  if (v62 == __p)
  {
    v82 = 0;
LABEL_107:
    operator delete(v62);
    return v82;
  }
  v71 = 0;
  v72 = 1;
  v62 = __p;
  do
  {
    v73.n128_f64[0] = PCIntersectRayWithPlane(a1, *(double **)&v62[8 * v71], (double *)a3);
    if (v74)
    {
      v73.n128_u64[0] = *(_QWORD *)a3;
      if (*(double *)a3 >= *a2 && v73.n128_f64[0] <= a2[1])
      {
        v73.n128_u64[0] = *(_QWORD *)(a3 + 8);
        if (v73.n128_f64[0] >= a2[2] && v73.n128_f64[0] <= a2[3])
        {
          v73.n128_u64[0] = *(_QWORD *)(a3 + 16);
          if (v73.n128_f64[0] >= a2[4] && v73.n128_f64[0] <= a2[5])
          {
            v84 = __p;
            v62 = v94;
            if (v94 == __p)
            {
              v82 = 1;
            }
            else
            {
              v85 = 0;
              v86 = 1;
              do
              {
                v87 = *(_QWORD *)&v84[8 * v85];
                if (v87)
                {
                  MEMORY[0x1B5E29170](v87, 0x1000C40EED21634);
                  v84 = __p;
                  v62 = v94;
                }
                v85 = v86++;
              }
              while (v85 < (v62 - v84) >> 3);
              v82 = 1;
              v62 = v84;
            }
            goto LABEL_104;
          }
        }
      }
    }
    v71 = v72;
    v62 = __p;
    v78 = v94;
    ++v72;
  }
  while (v71 < (v94 - __p) >> 3);
  if (v94 != __p)
  {
    v79 = 0;
    v80 = 1;
    do
    {
      v81 = *(_QWORD *)&v62[8 * v79];
      if (v81)
      {
        MEMORY[0x1B5E29170](v81, 0x1000C40EED21634, v73);
        v62 = __p;
        v78 = v94;
      }
      v79 = v80++;
    }
    while (v79 < (v78 - v62) >> 3);
  }
  v82 = 0;
LABEL_104:
  if (v62)
    goto LABEL_107;
  return v82;
}

void sub_1B2E96D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL rayIntersectsFrustum(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  long double v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  double ***v171;
  uint64_t v172;
  unsigned int v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int v186;
  uint64_t v187;
  char *v188;
  char *v189;
  unint64_t v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  char *v197;
  char *v198;
  char *v199;
  void *__p;
  char *v201;
  unint64_t v202;
  double v203[3];
  double v204[3];
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211[3];
  double v212;
  double v213;
  double v214;
  double v215[3];
  double v216;
  double v217;
  double v218;
  char v219;

  v13 = tan(a4 * 0.5 * 3.14159265 / 180.0);
  v216 = -(v13 * a6);
  v217 = -(v13 * a6 / a5);
  v218 = a3 - a6;
  v215[0] = v13 * a6;
  v215[1] = v217;
  v215[2] = a3 - a6;
  v212 = v13 * a6;
  v213 = v13 * a6 / a5;
  v214 = a3 - a6;
  v211[0] = v216;
  v211[1] = v213;
  v211[2] = a3 - a6;
  v208 = -(v13 * a7);
  v209 = -(v13 * a7 / a5);
  v210 = a3 - a7;
  v205 = v208;
  v206 = v13 * a7 / a5;
  v207 = a3 - a7;
  v204[0] = v13 * a7;
  v204[1] = v206;
  v204[2] = a3 - a7;
  v203[0] = v13 * a7;
  v203[1] = v209;
  v203[2] = a3 - a7;
  __p = 0;
  v201 = 0;
  v202 = 0;
  v14 = (_QWORD *)operator new();
  v15 = v14;
  *v14 = &v216;
  v14[1] = v215;
  v14[2] = v211;
  v16 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v18 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v20);
    else
      v21 = 0;
    v22 = &v21[8 * v18];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v15;
    v17 = v22 + 8;
    v25 = (char *)__p;
    v24 = v201;
    if (v201 != __p)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *((_QWORD *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v24 = (char *)__p;
    }
    __p = v22;
    v201 = v17;
    v202 = (unint64_t)v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_QWORD *)v201 = v14;
    v17 = v16 + 8;
  }
  v201 = v17;
  v27 = (_QWORD *)operator new();
  v28 = v27;
  *v27 = v215;
  v27[1] = &v212;
  v27[2] = v211;
  v29 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v31 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v31 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v32 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v32 <= v31 + 1)
      v32 = v31 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    if (v33)
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v33);
    else
      v34 = 0;
    v35 = &v34[8 * v31];
    v36 = &v34[8 * v33];
    *(_QWORD *)v35 = v28;
    v30 = v35 + 8;
    v38 = (char *)__p;
    v37 = v201;
    if (v201 != __p)
    {
      do
      {
        v39 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *((_QWORD *)v35 - 1) = v39;
        v35 -= 8;
      }
      while (v37 != v38);
      v37 = (char *)__p;
    }
    __p = v35;
    v201 = v30;
    v202 = (unint64_t)v36;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *(_QWORD *)v201 = v27;
    v30 = v29 + 8;
  }
  v201 = v30;
  v40 = (_QWORD *)operator new();
  v41 = v40;
  *v40 = v203;
  v40[1] = &v208;
  v40[2] = &v205;
  v42 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v44 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v44 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v45 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v45 <= v44 + 1)
      v45 = v44 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v46);
    else
      v47 = 0;
    v48 = &v47[8 * v44];
    v49 = &v47[8 * v46];
    *(_QWORD *)v48 = v41;
    v43 = v48 + 8;
    v51 = (char *)__p;
    v50 = v201;
    if (v201 != __p)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *((_QWORD *)v48 - 1) = v52;
        v48 -= 8;
      }
      while (v50 != v51);
      v50 = (char *)__p;
    }
    __p = v48;
    v201 = v43;
    v202 = (unint64_t)v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *(_QWORD *)v201 = v40;
    v43 = v42 + 8;
  }
  v201 = v43;
  v53 = (_QWORD *)operator new();
  v54 = v53;
  *v53 = v203;
  v53[1] = &v205;
  v53[2] = v204;
  v55 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v57 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v57 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v58 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v58 <= v57 + 1)
      v58 = v57 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v59);
    else
      v60 = 0;
    v61 = &v60[8 * v57];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v54;
    v56 = v61 + 8;
    v64 = (char *)__p;
    v63 = v201;
    if (v201 != __p)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)__p;
    }
    __p = v61;
    v201 = v56;
    v202 = (unint64_t)v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(_QWORD *)v201 = v53;
    v56 = v55 + 8;
  }
  v201 = v56;
  v66 = (_QWORD *)operator new();
  v67 = v66;
  *v66 = &v216;
  v66[1] = v211;
  v66[2] = &v205;
  v68 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v70 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v70 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v71 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v71 <= v70 + 1)
      v71 = v70 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v72 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v72 = v71;
    if (v72)
      v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v72);
    else
      v73 = 0;
    v74 = &v73[8 * v70];
    v75 = &v73[8 * v72];
    *(_QWORD *)v74 = v67;
    v69 = v74 + 8;
    v77 = (char *)__p;
    v76 = v201;
    if (v201 != __p)
    {
      do
      {
        v78 = *((_QWORD *)v76 - 1);
        v76 -= 8;
        *((_QWORD *)v74 - 1) = v78;
        v74 -= 8;
      }
      while (v76 != v77);
      v76 = (char *)__p;
    }
    __p = v74;
    v201 = v69;
    v202 = (unint64_t)v75;
    if (v76)
      operator delete(v76);
  }
  else
  {
    *(_QWORD *)v201 = v66;
    v69 = v68 + 8;
  }
  v201 = v69;
  v79 = (_QWORD *)operator new();
  v80 = v79;
  *v79 = &v208;
  v79[1] = &v216;
  v79[2] = &v205;
  v81 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v83 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v83 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v84 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v84 <= v83 + 1)
      v84 = v83 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v85 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v85 = v84;
    if (v85)
      v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v85);
    else
      v86 = 0;
    v87 = &v86[8 * v83];
    v88 = &v86[8 * v85];
    *(_QWORD *)v87 = v80;
    v82 = v87 + 8;
    v90 = (char *)__p;
    v89 = v201;
    if (v201 != __p)
    {
      do
      {
        v91 = *((_QWORD *)v89 - 1);
        v89 -= 8;
        *((_QWORD *)v87 - 1) = v91;
        v87 -= 8;
      }
      while (v89 != v90);
      v89 = (char *)__p;
    }
    __p = v87;
    v201 = v82;
    v202 = (unint64_t)v88;
    if (v89)
      operator delete(v89);
  }
  else
  {
    *(_QWORD *)v201 = v79;
    v82 = v81 + 8;
  }
  v201 = v82;
  v92 = (_QWORD *)operator new();
  v93 = v92;
  *v92 = v215;
  v92[1] = v203;
  v92[2] = v204;
  v94 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v96 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v96 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v97 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v97 <= v96 + 1)
      v97 = v96 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v98 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v98 = v97;
    if (v98)
      v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v98);
    else
      v99 = 0;
    v100 = &v99[8 * v96];
    v101 = &v99[8 * v98];
    *(_QWORD *)v100 = v93;
    v95 = v100 + 8;
    v103 = (char *)__p;
    v102 = v201;
    if (v201 != __p)
    {
      do
      {
        v104 = *((_QWORD *)v102 - 1);
        v102 -= 8;
        *((_QWORD *)v100 - 1) = v104;
        v100 -= 8;
      }
      while (v102 != v103);
      v102 = (char *)__p;
    }
    __p = v100;
    v201 = v95;
    v202 = (unint64_t)v101;
    if (v102)
      operator delete(v102);
  }
  else
  {
    *(_QWORD *)v201 = v92;
    v95 = v94 + 8;
  }
  v201 = v95;
  v105 = (_QWORD *)operator new();
  v106 = v105;
  *v105 = v215;
  v105[1] = v204;
  v105[2] = &v212;
  v107 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v109 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v109 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v110 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v110 <= v109 + 1)
      v110 = v109 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v111 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v111 = v110;
    if (v111)
      v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v111);
    else
      v112 = 0;
    v113 = &v112[8 * v109];
    v114 = &v112[8 * v111];
    *(_QWORD *)v113 = v106;
    v108 = v113 + 8;
    v116 = (char *)__p;
    v115 = v201;
    if (v201 != __p)
    {
      do
      {
        v117 = *((_QWORD *)v115 - 1);
        v115 -= 8;
        *((_QWORD *)v113 - 1) = v117;
        v113 -= 8;
      }
      while (v115 != v116);
      v115 = (char *)__p;
    }
    __p = v113;
    v201 = v108;
    v202 = (unint64_t)v114;
    if (v115)
      operator delete(v115);
  }
  else
  {
    *(_QWORD *)v201 = v105;
    v108 = v107 + 8;
  }
  v201 = v108;
  v118 = (_QWORD *)operator new();
  v119 = v118;
  *v118 = v211;
  v118[1] = &v212;
  v118[2] = v204;
  v120 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v122 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v122 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v123 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v123 <= v122 + 1)
      v123 = v122 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v124 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v124 = v123;
    if (v124)
      v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v124);
    else
      v125 = 0;
    v126 = &v125[8 * v122];
    v127 = &v125[8 * v124];
    *(_QWORD *)v126 = v119;
    v121 = v126 + 8;
    v129 = (char *)__p;
    v128 = v201;
    if (v201 != __p)
    {
      do
      {
        v130 = *((_QWORD *)v128 - 1);
        v128 -= 8;
        *((_QWORD *)v126 - 1) = v130;
        v126 -= 8;
      }
      while (v128 != v129);
      v128 = (char *)__p;
    }
    __p = v126;
    v201 = v121;
    v202 = (unint64_t)v127;
    if (v128)
      operator delete(v128);
  }
  else
  {
    *(_QWORD *)v201 = v118;
    v121 = v120 + 8;
  }
  v201 = v121;
  v131 = (_QWORD *)operator new();
  v132 = v131;
  *v131 = v211;
  v131[1] = v204;
  v131[2] = &v205;
  v133 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v135 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v135 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v136 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v136 <= v135 + 1)
      v136 = v135 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v137 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v137 = v136;
    if (v137)
      v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v137);
    else
      v138 = 0;
    v139 = &v138[8 * v135];
    v140 = &v138[8 * v137];
    *(_QWORD *)v139 = v132;
    v134 = v139 + 8;
    v142 = (char *)__p;
    v141 = v201;
    if (v201 != __p)
    {
      do
      {
        v143 = *((_QWORD *)v141 - 1);
        v141 -= 8;
        *((_QWORD *)v139 - 1) = v143;
        v139 -= 8;
      }
      while (v141 != v142);
      v141 = (char *)__p;
    }
    __p = v139;
    v201 = v134;
    v202 = (unint64_t)v140;
    if (v141)
      operator delete(v141);
  }
  else
  {
    *(_QWORD *)v201 = v131;
    v134 = v133 + 8;
  }
  v201 = v134;
  v144 = (_QWORD *)operator new();
  v145 = v144;
  *v144 = v215;
  v144[1] = &v216;
  v144[2] = v203;
  v146 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v148 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v148 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v149 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v149 <= v148 + 1)
      v149 = v148 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v150 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v150 = v149;
    if (v150)
      v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v150);
    else
      v151 = 0;
    v152 = &v151[8 * v148];
    v153 = &v151[8 * v150];
    *(_QWORD *)v152 = v145;
    v147 = v152 + 8;
    v155 = (char *)__p;
    v154 = v201;
    if (v201 != __p)
    {
      do
      {
        v156 = *((_QWORD *)v154 - 1);
        v154 -= 8;
        *((_QWORD *)v152 - 1) = v156;
        v152 -= 8;
      }
      while (v154 != v155);
      v154 = (char *)__p;
    }
    __p = v152;
    v201 = v147;
    v202 = (unint64_t)v153;
    if (v154)
      operator delete(v154);
  }
  else
  {
    *(_QWORD *)v201 = v144;
    v147 = v146 + 8;
  }
  v201 = v147;
  v157 = (_QWORD *)operator new();
  v158 = v157;
  *v157 = &v216;
  v157[1] = v203;
  v157[2] = &v208;
  v159 = v201;
  if ((unint64_t)v201 >= v202)
  {
    v161 = (v201 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v161 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v162 = (uint64_t)(v202 - (_QWORD)__p) >> 2;
    if (v162 <= v161 + 1)
      v162 = v161 + 1;
    if (v202 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v163 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v163 = v162;
    if (v163)
      v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v202, v163);
    else
      v164 = 0;
    v165 = &v164[8 * v161];
    v166 = &v164[8 * v163];
    *(_QWORD *)v165 = v158;
    v160 = v165 + 8;
    v168 = (char *)__p;
    v167 = v201;
    if (v201 != __p)
    {
      do
      {
        v169 = *((_QWORD *)v167 - 1);
        v167 -= 8;
        *((_QWORD *)v165 - 1) = v169;
        v165 -= 8;
      }
      while (v167 != v168);
      v167 = (char *)__p;
    }
    __p = v165;
    v201 = v160;
    v202 = (unint64_t)v166;
    if (v167)
      operator delete(v167);
  }
  else
  {
    *(_QWORD *)v201 = v157;
    v160 = v159 + 8;
  }
  v201 = v160;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v170 = operator new();
  *(_QWORD *)v170 = 0;
  *(_QWORD *)(v170 + 8) = 0;
  *(_QWORD *)(v170 + 16) = 0;
  v171 = (double ***)__p;
  if (v201 == __p)
    goto LABEL_215;
  v172 = 0;
  v173 = 0;
  do
  {
    if (LiTriangle3<double>::intersects(v171[v172], a1, (float64x2_t *)v170, (double *)(v170 + 24)))
    {
      if (v198 >= v199)
      {
        v175 = (v198 - v197) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v176 = (v199 - v197) >> 2;
        if (v176 <= v175 + 1)
          v176 = v175 + 1;
        if ((unint64_t)(v199 - v197) >= 0x7FFFFFFFFFFFFFF8)
          v177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v177 = v176;
        if (v177)
          v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v199, v177);
        else
          v178 = 0;
        v179 = (uint64_t *)&v178[8 * v175];
        *v179 = v170;
        v174 = (char *)(v179 + 1);
        v180 = v198;
        if (v198 != v197)
        {
          do
          {
            v181 = *((_QWORD *)v180 - 1);
            v180 -= 8;
            *--v179 = v181;
          }
          while (v180 != v197);
          v180 = v197;
        }
        v197 = (char *)v179;
        v199 = &v178[8 * v177];
        if (v180)
          operator delete(v180);
      }
      else
      {
        *(_QWORD *)v198 = v170;
        v174 = v198 + 8;
      }
      v198 = v174;
      v170 = operator new();
      *(_QWORD *)v170 = 0;
      *(_QWORD *)(v170 + 8) = 0;
      *(_QWORD *)(v170 + 16) = 0;
    }
    v171 = (double ***)__p;
    v172 = ++v173;
  }
  while (v173 < (unint64_t)((v201 - (_BYTE *)__p) >> 3));
  if (v170)
LABEL_215:
    MEMORY[0x1B5E29170](v170, 0x1000C40E0EAB150);
  if (v198 != v197)
  {
    std::__introsort<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,false>((uint64_t)v197, v198, (uint64_t)&v219, 126 - 2 * __clz((v198 - v197) >> 3), 1);
    v182 = v197;
    v183 = v198;
    v184 = *(_QWORD *)(*(_QWORD *)v197 + 16);
    *(_OWORD *)a2 = *(_OWORD *)*(_QWORD *)v197;
    *(_QWORD *)(a2 + 16) = v184;
    v185 = 0;
    v186 = 1;
    do
    {
      v187 = *(_QWORD *)&v182[8 * v185];
      if (v187)
      {
        MEMORY[0x1B5E29170](v187, 0x1000C40E0EAB150);
        v182 = v197;
        v183 = v198;
      }
      v185 = v186++;
    }
    while (v185 < (v183 - v182) >> 3);
    v188 = (char *)__p;
    v189 = v201;
    if (v201 != __p)
    {
      v190 = 0;
      v191 = 1;
      do
      {
        v192 = *(_QWORD *)&v188[8 * v190];
        if (v192)
        {
          MEMORY[0x1B5E29170](v192, 0x60C4045F868BCLL);
          v188 = (char *)__p;
          v189 = v201;
        }
        v190 = v191++;
      }
      while (v190 < (v189 - v188) >> 3);
      goto LABEL_234;
    }
LABEL_233:
    v188 = v189;
    goto LABEL_234;
  }
  v188 = (char *)__p;
  v189 = v201;
  if (v201 == __p)
    goto LABEL_233;
  v193 = 0;
  v194 = 1;
  do
  {
    v195 = *(_QWORD *)&v188[8 * v193];
    if (v195)
    {
      MEMORY[0x1B5E29170](v195, 0x60C4045F868BCLL);
      v188 = (char *)__p;
      v189 = v201;
    }
    v193 = v194++;
  }
  while (v193 < (v189 - v188) >> 3);
LABEL_234:
  if (v197)
  {
    operator delete(v197);
    v188 = (char *)__p;
  }
  if (v188)
  {
    v201 = v188;
    operator delete(v188);
  }
  return v198 != v197;
}

void sub_1B2E97BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

BOOL LiTriangle3<double>::intersects(double **a1, uint64_t a2, float64x2_t *a3, double *a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  double v31;
  double v34;
  double v35;

  v4 = a1[1];
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = *v4 - v6;
  v8 = v4[1] - v5;
  v9 = (*a1)[2];
  v10 = v4[2] - v9;
  v11 = a1[2];
  v12 = *v11 - v6;
  v13 = v11[1] - v5;
  v14 = v11[2] - v9;
  v16 = *(double *)(a2 + 24);
  v15 = *(double *)(a2 + 32);
  v17 = *(double *)(a2 + 40);
  v18 = v15 * v14 - v13 * v17;
  v19 = v12 * v17 - v14 * v16;
  v20 = v13 * v16 - v12 * v15;
  v21 = v10 * v20 + v7 * v18 + v8 * v19;
  if (v21 > -0.0000001 && v21 < 0.0000001)
    return 0;
  v22 = *(double *)a2 - v6;
  v23 = 1.0 / v21;
  v24 = *(double *)(a2 + 8) - v5;
  v25 = *(double *)(a2 + 16) - v9;
  v26 = v23 * (v18 * v22 + v19 * v24 + v20 * v25);
  if (v26 < 0.0 || v26 > 1.0)
    return 0;
  v28 = v10 * v24 - v8 * v25;
  v29 = v7 * v25 - v10 * v22;
  v30 = v8 * v22 - v7 * v24;
  v31 = v23 * (v17 * v30 + v16 * v28 + v15 * v29);
  if (v31 < 0.0 || v26 + v31 > 1.0)
    return 0;
  v34 = v23 * (v14 * v30 + v12 * v28 + v13 * v29);
  *a4 = v34;
  v35 = v34 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
  *a3 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v34), *(float64x2_t *)a2);
  a3[1].f64[0] = v35;
  return *a4 > -0.00001;
}

BOOL OZCamera::contains(OZCamera *this, const LiCamera *a2, const OZRenderState *a3)
{
  double v6;
  double v7;
  double v9;
  PCSharedCount v10;
  PCSharedCount v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CMTime var0;
  PCSharedCount v16;
  PCSharedCount v17;
  double v18[16];
  double v19;
  double v20;
  double v21;

  v6 = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 504))(a2);
  if (v6 > -0.0000001 && v6 < 0.0000001)
    return 0;
  (*(void (**)(double *__return_ptr, const LiCamera *))(*(_QWORD *)a2 + 336))(&v19, a2);
  (*(void (**)(double *__return_ptr, const LiCamera *))(*(_QWORD *)a2 + 424))(v18, a2);
  PCMatrix44Tmpl<double>::transform<double>(v18, &v19, &v19);
  var0 = (CMTime)a3->var0;
  OZCamera::cameraAtTime(this, &var0, &v10);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v16, &v10);
  PCSharedCount::~PCSharedCount(&v11);
  v13 = xmmword_1B304F270;
  v14 = xmmword_1B304F270;
  v12 = xmmword_1B304F270;
  (*(void (**)(OZCamera *, __int128 *, const OZRenderState *))(*(_QWORD *)this + 1360))(this, &v12, a3);
  if (!v16.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PCSharedCount *__return_ptr))(*(_QWORD *)v16.var0 + 24))(&v10);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v10, &v19, &v19);
  if (v19 < *(double *)&v12
    || v19 > *((double *)&v12 + 1)
    || v20 < *(double *)&v13
    || v20 > *((double *)&v13 + 1)
    || (v7 = v21, v21 < *(double *)&v14))
  {
    PCSharedCount::~PCSharedCount(&v17);
    return 0;
  }
  v9 = *((double *)&v14 + 1);
  PCSharedCount::~PCSharedCount(&v17);
  return v7 <= v9;
}

void sub_1B2E97F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,PCSharedCount a35)
{
  PCSharedCount::~PCSharedCount(&a35);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::hitCheck(uint64_t a1, float32x2_t *a2, __int128 *a3, void *lpsrc, uint64_t a5, char a6)
{
  _DWORD *v12;
  _OWORD v14[3];
  double v15[6];
  float64x2_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if ((a6 & 4) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 680))(a1) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v18 = *a3;
    v19 = *((_QWORD *)a3 + 2);
    if (!(*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(a1 + 16, &v18, 1, 1, 1))return 0;
  }
  if (lpsrc)
  {
    if (v12)
    {
      if (*(_DWORD *)(a1 + 80) == v12[4])
        return 0;
    }
  }
  if (((*(uint64_t (**)(uint64_t, void *, __int128 *))(*(_QWORD *)a1 + 1440))(a1, lpsrc, a3) & 1) != 0)
    return 0;
  v16 = vcvtq_f64_f32(*a2);
  v17 = 0;
  (*(void (**)(double *__return_ptr, uint64_t, float64x2_t *, void *, __int128 *, _QWORD))(*(_QWORD *)a1 + 1384))(v15, a1, &v16, lpsrc, a3, 0);
  v14[1] = xmmword_1B304F270;
  v14[2] = xmmword_1B304F270;
  v14[0] = xmmword_1B304F270;
  (*(void (**)(uint64_t, _OWORD *, __int128 *))(*(_QWORD *)a1 + 1360))(a1, v14, a3);
  if (rayIntersectsGeometry(v15, (double *)v14, a5))
    return a1;
  else
    return 0;
}

BOOL OZCamera::hitCheck(_DWORD *a1, double *a2, uint64_t a3, void *lpsrc)
{
  _DWORD *v8;

  if (lpsrc)
  {
    if (v8)
    {
      if (a1[20] == v8[4])
        return 0;
    }
  }
  return ((*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(_QWORD *)a1 + 1440))(a1, lpsrc, a3) & 1) == 0
      && OZTransformNode::hitCheck((uint64_t)a1, a2, a3, (const LiCamera *)lpsrc);
}

uint64_t OZCamera::projectPointToObject(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, const CMTime *a6, uint64_t a7)
{
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v28[3];
  PCSharedCount v29;
  PCSharedCount v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  CMTime v35;
  PCSharedCount v36;
  PCSharedCount v37;

  v35 = *a6;
  OZCamera::cameraAtTime((OZCamera *)a1, &v35, &v29);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v36, &v29);
  PCSharedCount::~PCSharedCount(&v30);
  if (!v36.var0)
    throw_PCNullPointerException(1);
  v14 = 0.0;
  if ((*(unsigned int (**)(PC_Sp_counted_base *))(*(_QWORD *)v36.var0 + 632))(v36.var0) == 1)
  {
    if (!v36.var0)
      throw_PCNullPointerException(1);
    v14 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v36.var0 + 320))(v36.var0);
  }
  v15 = *a4;
  v16 = *a5;
  v34[0] = *a3;
  v34[1] = v15;
  v34[2] = v16;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  (*(void (**)(PCSharedCount *__return_ptr, uint64_t, _QWORD *, uint64_t, const CMTime *, uint64_t))(*(_QWORD *)a1 + 1384))(&v29, a1, v34, a2, a6, a7);
  v28[1] = xmmword_1B304F270;
  v28[2] = xmmword_1B304F270;
  v28[0] = xmmword_1B304F270;
  (*(void (**)(uint64_t, _OWORD *, const CMTime *))(*(_QWORD *)a1 + 1360))(a1, v28, a6);
  if ((rayIntersectsGeometry((double *)&v29, (double *)v28, (uint64_t)&v31) & 1) != 0)
    goto LABEL_14;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  if (!v36.var0)
    throw_PCNullPointerException(1);
  v18 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v36.var0 + 320))(v36.var0);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6960), a6, 0.0);
  v20 = v19;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6808), a6, 0.0);
  v22 = v21;
  v23 = (float)*(int *)(v17 + 348);
  if (v23 <= -0.0000001 || (v24 = 1.0, v23 >= 0.0000001))
    v24 = (float)*(int *)(v17 + 344) / v23;
  if (rayIntersectsFrustum((uint64_t)&v29, (uint64_t)&v31, v14, v22, v24, v20, v18))
  {
LABEL_14:
    v25 = v32;
    *a3 = v31;
    *a4 = v25;
    *a5 = v33;
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  PCSharedCount::~PCSharedCount(&v37);
  return v26;
}

void sub_1B2E983DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 - 120));
  _Unwind_Resume(a1);
}

void OZCamera::calcTranslationRelativeToCamera(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const CMTime *a5, uint64_t a6)
{
  const void *v12;
  void *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  PC_Sp_counted_base *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float64x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  PCSharedCount v42;
  PCSharedCount v43;
  double v44;
  uint64_t v45;
  PC_Sp_counted_base *var0;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[3];
  _OWORD v58[3];
  _OWORD v59[2];
  CMTime v60;
  PCSharedCount v61;
  PCSharedCount v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = 0x3FF0000000000000;
  v79 = 0x3FF0000000000000;
  v76 = 0x3FF0000000000000;
  v73 = 0x3FF0000000000000;
  v74 = 0u;
  v75 = 0u;
  v77 = 0u;
  v78 = 0u;
  v80 = 0u;
  v81 = 0u;
  (*(void (**)(_QWORD *, uint64_t *, const CMTime *))(*a1 + 1256))(a1, &v73, a5);
  v72 = 0x3FF0000000000000;
  v69 = 0x3FF0000000000000;
  v66 = 0x3FF0000000000000;
  v63 = 0x3FF0000000000000;
  v64 = 0u;
  v65 = 0u;
  v67 = 0u;
  v68 = 0u;
  v70 = 0u;
  v71 = 0u;
  v12 = (const void *)a1[120];
  if (v12)
  {
    if (v13)
      (*(void (**)(void *, uint64_t *, const CMTime *))(*(_QWORD *)v13 + 1264))(v13, &v63, a5);
  }
  v60 = *a5;
  OZCamera::cameraAtTime((OZCamera *)a1, &v60, &v42);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v61, &v42);
  PCSharedCount::~PCSharedCount(&v43);
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v15 = *(double *)(v14 + 384);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 870), a5, 0.0);
  v17 = v16;
  if (!v61.var0)
    throw_PCNullPointerException(1);
  v18 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v61.var0 + 320))(v61.var0);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 851), a5, 0.0);
  v20 = v19;
  v21 = (float)*(int *)(v14 + 348);
  if (v21 <= -0.0000001 || (v22 = 1.0, v21 >= 0.0000001))
    v22 = (float)*(int *)(v14 + 344) / v21;
  if (v22 >= 0.0000001 || v22 <= -0.0000001)
    v24 = v22;
  else
    v24 = 1.0;
  if (!v61.var0)
    throw_PCNullPointerException(1);
  v25 = 0.0;
  if ((*(unsigned int (**)(PC_Sp_counted_base *))(*(_QWORD *)v61.var0 + 632))(v61.var0) == 1)
  {
    if (!v61.var0)
      throw_PCNullPointerException(1);
    v25 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v61.var0 + 320))(v61.var0);
  }
  memset(v59, 0, 24);
  (*(void (**)(_OWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, const CMTime *, _QWORD))(*a1 + 1384))(v58, a1, a2, a4, a5, 0);
  v57[1] = xmmword_1B304F270;
  v57[2] = xmmword_1B304F270;
  v57[0] = xmmword_1B304F270;
  (*(void (**)(_QWORD *, _OWORD *, const CMTime *))(*a1 + 1360))(a1, v57, a5);
  if ((rayIntersectsGeometry((double *)v58, (double *)v57, (uint64_t)v59) & 1) != 0
    || rayIntersectsFrustum((uint64_t)v58, (uint64_t)v59, v25, v20, v24, v17, v18))
  {
    (*(void (**)(PCSharedCount *__return_ptr, uint64_t))(*(_QWORD *)a4 + 24))(&v42, a4);
    v26 = v44;
    v27 = v45;
    v28 = var0;
    v45 = v54;
    var0 = v43.var0;
    v29 = v48;
    v30 = v49;
    v48 = v51;
    v49 = v55;
    v31 = v53;
    v53 = v56;
    v54 = v27;
    v55 = v30;
    v56 = v31;
    v43.var0 = v28;
    v44 = v50;
    v32 = v50 + *(double *)&v28 * 0.0 + *(double *)&v42.var0 * 0.0;
    v50 = v26;
    v51 = v29;
    v33 = v48 + *(double *)&var0 * 0.0 + v47 * 0.0;
    v34 = v26 * 0.0 + v29 * 0.0 + v52;
    v35 = sqrt(v34 * v34 + v32 * v32 + v33 * v33);
    if (v35 <= -0.000000100000001 || v35 >= 0.000000100000001)
    {
      v32 = v32 / v35;
      v33 = v33 / v35;
      v34 = v34 / v35;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 80))(&v39, a4, a3);
    v58[0] = v39;
    v58[1] = v40;
    v58[2] = v41;
    PCMatrix44Tmpl<double>::transform<double>((double *)&v73, (double *)v59, (double *)v59);
    v39 = v59[0];
    *(_QWORD *)&v40 = *(_QWORD *)&v59[1];
    *((double *)&v40 + 1) = v32;
    *(double *)&v41 = v33;
    *((double *)&v41 + 1) = v34;
    v37 = 0.0;
    v38 = 0uLL;
    PCIntersectRayWithPlane((double *)v58, (double *)&v39, &v37);
    PCMatrix44Tmpl<double>::transform<double>((double *)&v63, (double *)v59, (double *)v59);
    PCMatrix44Tmpl<double>::transform<double>((double *)&v63, &v37, &v37);
    v36 = v37 - *(double *)v59;
    *(float64x2_t *)(a6 + 8) = vsubq_f64(v38, *(float64x2_t *)((char *)v59 + 8));
    *(double *)a6 = v36 / v15;
  }
  PCSharedCount::~PCSharedCount(&v62);
}

void sub_1B2E98880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,PCSharedCount a56)
{
  PCSharedCount::~PCSharedCount(&a56);
  _Unwind_Resume(a1);
}

void OZCamera::buildRenderGraph(OZCamera *this, OZRenderParams *a2, PCSharedCount *a3, const OZRenderGraphState *a4)
{
  int32x2_t *v7;
  LiSimpleCamera *v8;
  PCSharedCount v9;
  PCSharedCount v10;
  PCSharedCount v11;
  PCSharedCount v12;
  CMTime v13;
  PCSharedCount v14;
  PCSharedCount v15;
  PCSharedCount v16;
  PCSharedCount v17;

  v7 = (int32x2_t *)(*(uint64_t (**)(OZCamera *, OZRenderParams *, PCSharedCount *, const OZRenderGraphState *))(*(_QWORD *)this + 272))(this, a2, a3, a4);
  v13 = *(CMTime *)a2;
  OZCamera::cameraAtTime(this, &v13, &v14);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v16, &v14);
  PCSharedCount::~PCSharedCount(&v15);
  v8 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v8);
  v14.var0 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v15, (LiSimpleCamera *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  if (!v14.var0)
    throw_PCNullPointerException(1);
  if (!v16.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v14.var0 + 168))(v14.var0);
  OZRenderParams::setCamera((uint64_t)a2, &v14);
  OZScene::buildSceneRenderGraph(v7, a2, &v11);
  if (!v11.var0)
    throw_PCNullPointerException(1);
  *((_DWORD *)v11.var0 + 130) = *((_DWORD *)this + 20);
  *((int32x2_t *)a2 + 5) = v7[48];
  *(_OWORD *)((char *)a2 + 392) = 0u;
  *(_OWORD *)((char *)a2 + 408) = 0u;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v9, &v11);
  LiGraphBuilder::add2d(a3, &v9);
  PCSharedCount::~PCSharedCount(&v10);
  PCSharedCount::~PCSharedCount(&v12);
  PCSharedCount::~PCSharedCount(&v15);
  PCSharedCount::~PCSharedCount(&v17);
}

void sub_1B2E98A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  PCSharedCount *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v5 - 56));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZCamera::buildRenderGraph(OZCamera *this, OZRenderParams *a2, PCSharedCount *a3, const OZRenderGraphState *a4)
{
  OZCamera::buildRenderGraph((OZCamera *)((char *)this - 6528), a2, a3, a4);
}

int32x2_t *OZCamera::getBounds(uint64_t a1, float64x2_t *a2)
{
  int32x2_t *result;
  float64x2_t v4;
  float64x2_t v10;

  result = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  if (result)
  {
    v4 = vcvtq_f64_f32(vcvt_f32_s32(result[43]));
    __asm { FMOV            V1.2D, #-0.5 }
    v10 = vmulq_f64(v4, _Q1);
  }
  else
  {
    v4 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    v10 = (float64x2_t)vdupq_n_s64(0xC049000000000000);
  }
  *a2 = v10;
  a2[1] = v4;
  return result;
}

int32x2_t *`non-virtual thunk to'OZCamera::getBounds(uint64_t a1, float64x2_t *a2)
{
  int32x2_t *result;
  float64x2_t v4;
  float64x2_t v10;

  result = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 6528) + 272))(a1 - 6528);
  if (result)
  {
    v4 = vcvtq_f64_f32(vcvt_f32_s32(result[43]));
    __asm { FMOV            V1.2D, #-0.5 }
    v10 = vmulq_f64(v4, _Q1);
  }
  else
  {
    v4 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    v10 = (float64x2_t)vdupq_n_s64(0xC049000000000000);
  }
  *a2 = v10;
  a2[1] = v4;
  return result;
}

void OZSceneCamera::OZSceneCamera(OZSceneCamera *this, OZScene *a2, int a3)
{
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 6) = &unk_1E659DE50;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_1E659DB38;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_BYTE *)this + 20) = 1;
}

uint64_t OZCamera::enable(OZCamera *this)
{
  uint64_t result;

  result = OZTransformNode::isInRootWorld((OZTransformNode *)this);
  if ((_DWORD)result)
    return OZObjectManipulator::enable((OZCamera *)((char *)this + 16), 0);
  return result;
}

void OZSceneCamera::~OZSceneCamera(OZSceneCamera *this)
{
  *((_QWORD *)this + 6) = &off_1E65EB048;
  *((_BYTE *)this + 64) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 7);
}

{
  *((_QWORD *)this + 6) = &off_1E65EB048;
  *((_BYTE *)this + 64) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 7);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZSceneCamera::~OZSceneCamera(OZSceneCamera *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 6) = &off_1E65EB048;
  v1[64] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 7);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 6) = &off_1E65EB048;
  v1[64] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 7);
  JUMPOUT(0x1B5E29170);
}

BOOL OZSceneCamera::isValid(OZSceneCamera *this)
{
  return *((_DWORD *)this + 4) && OZSceneCamera::getCameraNode(this) != 0;
}

void *OZSceneCamera::getCameraNode(OZSceneCamera *this)
{
  OZScene *v2;
  void *Node;

  v2 = (OZScene *)*((_QWORD *)this + 1);
  if (v2 && (Node = OZScene::getNode(v2, *((_DWORD *)this + 4))) != 0)
  else
    return 0;
}

float64x2_t OZSceneCamera::getFilmback@<Q0>(OZSceneCamera *this@<X0>, _OWORD *a2@<X8>)
{
  float64x2_t result;
  int32x2_t *v3;

  result.f64[0] = 4.0;
  *a2 = xmmword_1B3558490;
  v3 = (int32x2_t *)*((_QWORD *)this + 1);
  if (v3)
  {
    result = vcvtq_f64_f32(vcvt_f32_s32(v3[43]));
    *a2 = result;
  }
  return result;
}

double OZSceneCamera::getParentAspectRatio(OZSceneCamera *this)
{
  _QWORD *CameraNode;
  const void *v2;
  void *v3;
  double result;

  CameraNode = OZSceneCamera::getCameraNode(this);
  v2 = (const void *)CameraNode[120];
  if (!v2)
    return *(double *)((*(uint64_t (**)(_QWORD *))(*CameraNode + 272))(CameraNode) + 384);
  if (!v3)
    return *(double *)((*(uint64_t (**)(_QWORD *))(*CameraNode + 272))(CameraNode) + 384);
  (*(void (**)(void *))(*(_QWORD *)v3 + 1328))(v3);
  return result;
}

double OZSceneCamera::getParentTransform@<D0>(OZSceneCamera *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *CameraNode;
  _QWORD *v8;
  const void *v9;
  void *v10;
  void *v11;
  double result;
  __n128 v13;
  int64_t v14;
  OZRenderState v15;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  v4 = (_OWORD *)(a2 + 8);
  *(_OWORD *)(a2 + 48) = 0u;
  v5 = (_OWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 88) = 0u;
  v6 = (_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  CameraNode = OZSceneCamera::getCameraNode(this);
  if (!CameraNode)
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    goto LABEL_8;
  }
  v8 = CameraNode;
  v9 = (const void *)CameraNode[120];
  if (!v9
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
LABEL_8:
    result = 0.0;
    *v4 = 0u;
    v4[1] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
    *v6 = 0u;
    v6[1] = 0u;
    return result;
  }
  v11 = v10;
  OZRenderState::OZRenderState(&v15);
  if (*((_BYTE *)this + 20))
  {
    OZScene::getCurrentTime(*((OZScene **)this + 1), &v13);
  }
  else
  {
    v13 = *(__n128 *)((char *)this + 24);
    v14 = *((_QWORD *)this + 5);
  }
  *(__n128 *)&v15.var0.var0 = v13;
  v15.var0.var3 = v14;
  v15.var4 = 0;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*(_QWORD *)v11 + 1256))(v11, a2, &v15);
  result = 1.0 / (*(double (**)(_QWORD *))(*v8 + 1328))(v8);
  if (result != 1.0)
  {
    *(double *)a2 = result * *(double *)a2;
    *(double *)(a2 + 32) = result * *(double *)(a2 + 32);
    *(double *)(a2 + 64) = result * *(double *)(a2 + 64);
    result = result * *(double *)(a2 + 96);
    *(double *)(a2 + 96) = result;
  }
  return result;
}

double OZSceneCamera::getTranslation(uint64_t a1, uint64_t a2)
{
  void *CameraNode;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  CMTime v9;

  CameraNode = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (CameraNode)
  {
    v6 = (uint64_t)CameraNode;
    memset(&v9, 0, sizeof(v9));
    if (*(_BYTE *)(a1 + 20))
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v9);
    else
      v9 = *(CMTime *)(a1 + 24);
    v7 = 0uLL;
    v8 = 0;
    OZTransformNode::getTranslation(v6, &v7, &v9);
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    result = OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1) * *(double *)a2;
    *(double *)a2 = result;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

double OZSceneCamera::getPivot(uint64_t a1, uint64_t a2)
{
  void *CameraNode;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  CMTime v9;

  CameraNode = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (CameraNode)
  {
    v6 = (uint64_t)CameraNode;
    memset(&v9, 0, sizeof(v9));
    if (*(_BYTE *)(a1 + 20))
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v9);
    else
      v9 = *(CMTime *)(a1 + 24);
    v7 = 0uLL;
    v8 = 0;
    OZTransformNode::getPivot(v6, &v7, &v9);
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    result = OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1) * *(double *)a2;
    *(double *)a2 = result;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

OZTransformNode *OZSceneCamera::setPivot(uint64_t a1, double *a2)
{
  OZTransformNode *result;
  OZTransformNode *v5;
  double v6;
  double ParentAspectRatio;
  CMTime v8;

  result = (OZTransformNode *)OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    v5 = result;
    memset(&v8, 0, sizeof(v8));
    if (*(_BYTE *)(a1 + 20))
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v8);
    else
      v8 = *(CMTime *)(a1 + 24);
    v6 = *a2;
    ParentAspectRatio = OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1);
    return (OZTransformNode *)OZTransformNode::setPivot(v5, v6 / ParentAspectRatio, a2[1], a2[2], &v8);
  }
  return result;
}

OZTransformNode *OZSceneCamera::setTranslation(uint64_t a1, double *a2)
{
  OZTransformNode *result;
  OZTransformNode *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CMTime v13;

  result = (OZTransformNode *)OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    v5 = result;
    v7 = *a2;
    v6 = a2[1];
    v8 = a2[2];
    memset(&v13, 0, sizeof(v13));
    v9 = v7 / OZSceneCamera::getParentAspectRatio((OZSceneCamera *)a1);
    if (*(_BYTE *)(a1 + 20))
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v13);
    else
      v13 = *(CMTime *)(a1 + 24);
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    OZTransformNode::getTranslation((uint64_t)v5, &v10, &v13);
    return (OZTransformNode *)OZTransformNode::offsetTranslation(v5, v9 - v10, v6 - v11, v8 - v12, &v13, 1);
  }
  return result;
}

double OZSceneCamera::getRotation(uint64_t a1, double *a2)
{
  void *CameraNode;
  double result;
  void *v6;
  CMTime v7;

  CameraNode = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (CameraNode)
  {
    v6 = CameraNode;
    memset(&v7, 0, sizeof(v7));
    if (*(_BYTE *)(a1 + 20))
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), (__n128 *)&v7);
    else
      v7 = *(CMTime *)(a1 + 24);
    return OZChannelRotation3D::getValueAsQuatd((uint64_t)v6 + 2104, a2, &v7, 0.0);
  }
  return result;
}

_QWORD *OZSceneCamera::setRotation(uint64_t a1, double *a2)
{
  _QWORD *result;
  _QWORD *v5;
  _BOOL8 Transformation;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[3];
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;

  result = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    v5 = result;
    v27 = 0uLL;
    v28 = 0;
    if (*(_BYTE *)(a1 + 20))
    {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), &v27);
    }
    else
    {
      v27 = *(__n128 *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 40);
    }
    v26 = 0x3FF0000000000000;
    v23 = 0x3FF0000000000000;
    v20 = 0x3FF0000000000000;
    v17 = 0x3FF0000000000000;
    v18 = 0u;
    v19 = 0u;
    v21 = 0u;
    v22 = 0u;
    v24 = 0u;
    v25 = 0u;
    PCMatrix44Tmpl<double>::rightRotate((uint64_t)&v17, a2);
    memset(v12, 0, sizeof(v12));
    v14 = 0u;
    v15 = 0u;
    v16 = 0;
    v13 = 4;
    Transformation = PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v17, (uint64_t)v12);
    _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZCamera.cpp", 1272, v7, v8, v9, v10, v11);
    (*(void (**)(_QWORD *, __n128 *, double))(v5[280] + 720))(v5 + 280, &v27, *(double *)&v14);
    (*(void (**)(_QWORD *, __n128 *, double))(v5[299] + 720))(v5 + 299, &v27, *((double *)&v14 + 1));
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, __n128 *, double))(v5[318] + 720))(v5 + 318, &v27, *(double *)&v15);
  }
  return result;
}

_QWORD *OZSceneCamera::setEulerRotation(uint64_t a1, double *a2)
{
  _QWORD *result;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  result = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    v5 = result;
    v6 = 0uLL;
    v7 = 0;
    if (*(_BYTE *)(a1 + 20))
    {
      OZScene::getCurrentTime(*(OZScene **)(a1 + 8), &v6);
    }
    else
    {
      v6 = *(__n128 *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 40);
    }
    (*(void (**)(_QWORD *, __n128 *, double))(v5[280] + 720))(v5 + 280, &v6, *a2);
    (*(void (**)(_QWORD *, __n128 *, double))(v5[299] + 720))(v5 + 299, &v6, a2[1]);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, __n128 *, double))(v5[318] + 720))(v5 + 318, &v6, a2[2]);
  }
  return result;
}

uint64_t OZSceneCamera::setEulerRotation(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t i;
  _OWORD *v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[8];
  double v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  __int128 v42;
  uint64_t v43;

  v42 = *a3;
  v43 = *((_QWORD *)a3 + 2);
  v39 = 0.0;
  v40 = 0.0;
  v41 = 0.0;
  v38 = 0x3FF0000000000000;
  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29 = 1.0;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  v36 = 0u;
  v37 = 0u;
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)a1 + 424))(v28);
  v24 = v28[4];
  v25 = v28[5];
  v26 = v28[6];
  v27 = v28[7];
  v20 = v28[0];
  v21 = v28[1];
  v22 = v28[2];
  v23 = v28[3];
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v19, a1);
  for (i = 0; i != 128; i += 32)
  {
    v7 = (_OWORD *)((char *)&v29 + i);
    v8 = *(_OWORD *)((char *)&v19 + i + 16);
    *v7 = *(_OWORD *)((char *)&v19 + i);
    v7[1] = v8;
  }
  PCMatrix44Tmpl<double>::invert((double *)&v20, (double *)&v20, 0.0);
  PCMatrix44Tmpl<double>::transform<double>(&v29, (double *)&v42, (double *)&v42);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, a2);
  v16 = 0.0;
  v17 = 0.0;
  v18 = 0.0;
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v19, a1);
  PCMatrix44Tmpl<double>::transform<double>(&v19, (double *)&v42, &v16);
  v9 = *(double *)a3 - v16;
  v10 = *((double *)a3 + 1) - v17;
  v11 = *((double *)a3 + 2) - v18;
  v12 = v9 * *(double *)&v20 + v10 * *((double *)&v20 + 1) + v11 * *(double *)&v21;
  v13 = v9 * *(double *)&v22 + v10 * *((double *)&v22 + 1) + v11 * *(double *)&v23;
  v14 = v9 * *(double *)&v24 + v10 * *((double *)&v24 + 1) + v11 * *(double *)&v25;
  (*(void (**)(uint64_t, double *))(*(_QWORD *)a1 + 440))(a1, &v39);
  v39 = v12 + v39;
  v40 = v13 + v40;
  v41 = v14 + v41;
  return (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)a1 + 448))(a1, &v39);
}

void sub_1B2E9972C(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 400))(v1, v2);
  JUMPOUT(0x1B2E99660);
}

void OZSceneCamera::getEulerRotation(OZSceneCamera *this@<X0>, _QWORD *a2@<X8>)
{
  char *CameraNode;
  char *v4;
  OZScene *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CMTime v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    v4 = CameraNode;
    memset(&v9, 0, sizeof(v9));
    v5 = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)CameraNode + 272))(CameraNode);
    OZScene::getCurrentTime(v5, (__n128 *)&v9);
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 2240), &v9, 0.0);
    *a2 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 2392), &v9, 0.0);
    a2[1] = v7;
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 2544), &v9, 0.0);
    a2[2] = v8;
  }
}

void OZSceneCamera::getScale(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  CMTime v4;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    v3 = CameraNode;
    if (*((_BYTE *)this + 20))
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    else
      v4 = *(CMTime *)((_BYTE *)this + 1);
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 4880), &v4, 0.0);
  }
}

_QWORD *OZSceneCamera::setScale(OZSceneCamera *this, double a2)
{
  _QWORD *result;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    v5 = result;
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    (*(void (**)(_QWORD *, __n128 *, _QWORD, double))(v5[572] + 712))(v5 + 572, &v6, 0, a2);
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    (*(void (**)(_QWORD *, __n128 *, _QWORD, double))(v5[591] + 712))(v5 + 591, &v6, 0, a2);
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, __n128 *, _QWORD, double))(v5[610] + 712))(v5 + 610, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getAngleOfView(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  CMTime v4;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((_BYTE *)this + 20))
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    else
      v4 = *(CMTime *)((_BYTE *)this + 1);
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 6808), &v4, 0.0);
  }
}

void *OZSceneCamera::setAngleOfView(OZSceneCamera *this, double a2)
{
  void *result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = 0uLL;
    v7 = 0;
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, _QWORD, double))(*(_QWORD *)(v5 + 6808) + 712))(v5 + 6808, &v6, 0, a2);
  }
  return result;
}

uint64_t OZSceneCamera::getNiceAngleOfView(OZSceneCamera *this)
{
  return 1;
}

void OZSceneCamera::getNearPlane(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  CMTime v4;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((_BYTE *)this + 20))
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    else
      v4 = *(CMTime *)((_BYTE *)this + 1);
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 6960), &v4, 0.0);
  }
}

void *OZSceneCamera::setNearPlane(OZSceneCamera *this, double a2)
{
  void *result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = 0uLL;
    v7 = 0;
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, _QWORD, double))(*(_QWORD *)(v5 + 6960) + 712))(v5 + 6960, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getNearPlaneFade(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  CMTime v4;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((_BYTE *)this + 20))
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    else
      v4 = *(CMTime *)((_BYTE *)this + 1);
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 7264), &v4, 0.0);
  }
}

void *OZSceneCamera::setNearPlaneFade(OZSceneCamera *this, double a2)
{
  void *result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = 0uLL;
    v7 = 0;
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, _QWORD, double))(*(_QWORD *)(v5 + 7264) + 712))(v5 + 7264, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getFarPlane(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  CMTime v4;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((_BYTE *)this + 20))
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    else
      v4 = *(CMTime *)((_BYTE *)this + 1);
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 7112), &v4, 0.0);
  }
}

void *OZSceneCamera::setFarPlane(OZSceneCamera *this, double a2)
{
  void *result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = 0uLL;
    v7 = 0;
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, _QWORD, double))(*(_QWORD *)(v5 + 7112) + 712))(v5 + 7112, &v6, 0, a2);
  }
  return result;
}

void OZSceneCamera::getFarPlaneFade(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  CMTime v4;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (CameraNode)
  {
    v3 = CameraNode;
    memset(&v4, 0, sizeof(v4));
    if (*((_BYTE *)this + 20))
      OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v4);
    else
      v4 = *(CMTime *)((_BYTE *)this + 1);
    OZChannel::getValueAsDouble((OZChannel *)(v3 + 7416), &v4, 0.0);
  }
}

void *OZSceneCamera::setFarPlaneFade(OZSceneCamera *this, double a2)
{
  void *result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  result = OZSceneCamera::getCameraNode(this);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = 0uLL;
    v7 = 0;
    if (*((_BYTE *)this + 20))
    {
      OZScene::getCurrentTime(*((OZScene **)this + 1), &v6);
    }
    else
    {
      v6 = *(__n128 *)((char *)this + 24);
      v7 = *((_QWORD *)this + 5);
    }
    return (void *)(*(uint64_t (**)(uint64_t, __n128 *, _QWORD, double))(*(_QWORD *)(v5 + 7416) + 712))(v5 + 7416, &v6, 0, a2);
  }
  return result;
}

uint64_t OZSceneCamera::getNearFadePoints()
{
  return 0;
}

uint64_t OZSceneCamera::getFarFadePoints()
{
  return 0;
}

BOOL OZSceneCamera::getFarCrop(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  OZChannel *v4;
  double v6;
  double v7;
  CMTime v8;
  double v9;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (!CameraNode)
    return 1;
  v3 = CameraNode;
  v4 = (OZChannel *)(CameraNode + 7112);
  memset(&v8, 0, sizeof(v8));
  if (*((_BYTE *)this + 20))
    OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v8);
  else
    v8 = *(CMTime *)((_BYTE *)this + 1);
  OZChannel::getValueAsDouble(v4, &v8, 0.0);
  v7 = v6;
  v9 = 0.0;
  (*(void (**)(_QWORD, double *))(**(_QWORD **)(*((_QWORD *)v3 + 903) + 8) + 256))(*(_QWORD *)(*((_QWORD *)v3 + 903) + 8), &v9);
  return v7 < v9;
}

uint64_t OZSceneCamera::getCameraModel(OZSceneCamera *this)
{
  char *CameraNode;
  char *v3;
  CMTime v5;

  CameraNode = (char *)OZSceneCamera::getCameraNode(this);
  if (!CameraNode)
    return 1;
  v3 = CameraNode;
  memset(&v5, 0, sizeof(v5));
  if (*((_BYTE *)this + 20))
    OZScene::getCurrentTime(*((OZScene **)this + 1), (__n128 *)&v5);
  else
    v5 = *(CMTime *)((_BYTE *)this + 1);
  return OZChannel::getValueAsInt((OZChannel *)(v3 + 6552), &v5, 0.0);
}

_QWORD *OZSceneCamera::setCameraModel(uint64_t a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v5;
  __n128 CurrentTime;
  __n128 v7;
  uint64_t v8;

  result = OZSceneCamera::getCameraNode((OZSceneCamera *)a1);
  if (result)
  {
    v5 = result;
    v7 = 0uLL;
    v8 = 0;
    if (*(_BYTE *)(a1 + 20))
    {
      CurrentTime = OZScene::getCurrentTime((OZScene *)*(_QWORD *)(a1 + 8), &v7);
    }
    else
    {
      CurrentTime = *(__n128 *)(a1 + 24);
      v7 = CurrentTime;
      v8 = *(_QWORD *)(a1 + 40);
    }
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 632))(a1, CurrentTime);
    if ((_DWORD)result != a2)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, __n128 *, _QWORD, double))(v5[819] + 712))(v5 + 819, &v7, 0, (double)a2);
  }
  return result;
}

uint64_t OZSceneCamera::getRotationOrder(OZSceneCamera *this)
{
  return 5;
}

uint64_t OZSceneCamera::getCrop(OZSceneCamera *this)
{
  return 1;
}

double OZSceneCamera::getPixelAspectRatio(OZSceneCamera *this)
{
  return *(double *)(*((_QWORD *)this + 1) + 384);
}

uint64_t OZCamera::OZCamera_cameraTypeImpl::getInstance(OZCamera::OZCamera_cameraTypeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::OZCamera_cameraTypeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::OZCamera_cameraTypeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_cameraTypeImpl::_OZCamera_cameraType;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_cameraTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_cameraTypeImpl *v0;

  if (!OZCamera::OZCamera_cameraTypeImpl::_OZCamera_cameraType)
  {
    v0 = (OZCamera::OZCamera_cameraTypeImpl *)operator new();
    OZCamera::OZCamera_cameraTypeImpl::OZCamera_cameraTypeImpl(v0);
    OZCamera::OZCamera_cameraTypeImpl::_OZCamera_cameraType = (uint64_t)v0;
  }
}

void sub_1B2E9A17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_cameraTypeImpl *OZCamera::OZCamera_cameraTypeImpl::OZCamera_cameraTypeImpl(OZCamera::OZCamera_cameraTypeImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_cameraTypeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659E370;
  *((_QWORD *)this + 5) = &unk_1E659E390;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E9A22C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_angleOfViewImpl::getInstance(OZCamera::OZCamera_angleOfViewImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::OZCamera_angleOfViewImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::OZCamera_angleOfViewImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_angleOfViewImpl::_OZCamera_angleOfView;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_angleOfViewImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_angleOfViewImpl *v0;

  if (!OZCamera::OZCamera_angleOfViewImpl::_OZCamera_angleOfView)
  {
    v0 = (OZCamera::OZCamera_angleOfViewImpl *)operator new();
    OZCamera::OZCamera_angleOfViewImpl::OZCamera_angleOfViewImpl(v0);
    OZCamera::OZCamera_angleOfViewImpl::_OZCamera_angleOfView = (uint64_t)v0;
  }
}

void sub_1B2E9A2F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_angleOfViewImpl *OZCamera::OZCamera_angleOfViewImpl::OZCamera_angleOfViewImpl(OZCamera::OZCamera_angleOfViewImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 45.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 45.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_angleOfViewImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659E3E8;
  *((_QWORD *)this + 5) = &unk_1E659E408;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 165.0);
  return this;
}

void sub_1B2E9A3B8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_angleOfViewInfo::getInstance(OZCamera::OZCamera_angleOfViewInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::OZCamera_angleOfViewInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::OZCamera_angleOfViewInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_angleOfViewInfo::_OZCamera_angleOfViewInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_angleOfViewInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelInfo *v0;

  if (!OZCamera::OZCamera_angleOfViewInfo::_OZCamera_angleOfViewInfo)
  {
    v0 = (OZChannelInfo *)operator new();
    OZCamera::OZCamera_angleOfViewInfo::OZCamera_angleOfViewInfo(v0);
    OZCamera::OZCamera_angleOfViewInfo::_OZCamera_angleOfViewInfo = (uint64_t)v0;
  }
}

void sub_1B2E9A484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelInfo *OZCamera::OZCamera_angleOfViewInfo::OZCamera_angleOfViewInfo(OZChannelInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo(this, 0.0, 165.0, 1.0, 0.01, 1.0, "°");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E659E460;
  *((_QWORD *)this + 10) = &unk_1E659E480;
  return this;
}

void sub_1B2E9A514(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearPlaneImpl::getInstance(OZCamera::OZCamera_nearPlaneImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::OZCamera_nearPlaneImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::OZCamera_nearPlaneImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearPlaneImpl::_OZCamera_nearPlane;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_nearPlaneImpl *v0;

  if (!OZCamera::OZCamera_nearPlaneImpl::_OZCamera_nearPlane)
  {
    v0 = (OZCamera::OZCamera_nearPlaneImpl *)operator new();
    OZCamera::OZCamera_nearPlaneImpl::OZCamera_nearPlaneImpl(v0);
    OZCamera::OZCamera_nearPlaneImpl::_OZCamera_nearPlane = (uint64_t)v0;
  }
}

void sub_1B2E9A5D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_nearPlaneImpl *OZCamera::OZCamera_nearPlaneImpl::OZCamera_nearPlaneImpl(OZCamera::OZCamera_nearPlaneImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 10.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 10.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_nearPlaneImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659E4D8;
  *((_QWORD *)this + 5) = &unk_1E659E4F8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.1);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E9A684(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearPlaneInfo::getInstance(OZCamera::OZCamera_nearPlaneInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::OZCamera_nearPlaneInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::OZCamera_nearPlaneInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearPlaneInfo::_OZCamera_nearPlaneInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_nearPlaneInfo *v0;

  if (!OZCamera::OZCamera_nearPlaneInfo::_OZCamera_nearPlaneInfo)
  {
    v0 = (OZCamera::OZCamera_nearPlaneInfo *)operator new();
    OZCamera::OZCamera_nearPlaneInfo::OZCamera_nearPlaneInfo(v0);
    OZCamera::OZCamera_nearPlaneInfo::_OZCamera_nearPlaneInfo = (uint64_t)v0;
  }
}

void sub_1B2E9A750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_nearPlaneInfo *OZCamera::OZCamera_nearPlaneInfo::OZCamera_nearPlaneInfo(OZCamera::OZCamera_nearPlaneInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_nearPlaneInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659E550;
  *((_QWORD *)this + 10) = &unk_1E659E570;
  return this;
}

void sub_1B2E9A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farPlaneImpl::getInstance(OZCamera::OZCamera_farPlaneImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_farPlaneImpl::getInstance(void)::OZCamera_farPlaneImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_farPlaneImpl::getInstance(void)::OZCamera_farPlaneImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farPlaneImpl::_OZCamera_farPlane;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farPlaneImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_farPlaneImpl *v0;

  if (!OZCamera::OZCamera_farPlaneImpl::_OZCamera_farPlane)
  {
    v0 = (OZCamera::OZCamera_farPlaneImpl *)operator new();
    OZCamera::OZCamera_farPlaneImpl::OZCamera_farPlaneImpl(v0);
    OZCamera::OZCamera_farPlaneImpl::_OZCamera_farPlane = (uint64_t)v0;
  }
}

void sub_1B2E9A8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_farPlaneImpl *OZCamera::OZCamera_farPlaneImpl::OZCamera_farPlaneImpl(OZCamera::OZCamera_farPlaneImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 10000.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 10000.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_farPlaneImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659E5C8;
  *((_QWORD *)this + 5) = &unk_1E659E5E8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 1.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 250000.0);
  return this;
}

void sub_1B2E9A98C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farPlaneInfo::getInstance(OZCamera::OZCamera_farPlaneInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_farPlaneInfo::getInstance(void)::OZCamera_farPlaneInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_farPlaneInfo::getInstance(void)::OZCamera_farPlaneInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farPlaneInfo::_OZCamera_farPlaneInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farPlaneInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_farPlaneInfo *v0;

  if (!OZCamera::OZCamera_farPlaneInfo::_OZCamera_farPlaneInfo)
  {
    v0 = (OZCamera::OZCamera_farPlaneInfo *)operator new();
    OZCamera::OZCamera_farPlaneInfo::OZCamera_farPlaneInfo(v0);
    OZCamera::OZCamera_farPlaneInfo::_OZCamera_farPlaneInfo = (uint64_t)v0;
  }
}

void sub_1B2E9AA58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_farPlaneInfo *OZCamera::OZCamera_farPlaneInfo::OZCamera_farPlaneInfo(OZCamera::OZCamera_farPlaneInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 100.0, 20000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_farPlaneInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659E640;
  *((_QWORD *)this + 10) = &unk_1E659E660;
  return this;
}

void sub_1B2E9AB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearFadeImpl::getInstance(OZCamera::OZCamera_nearFadeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_nearFadeImpl::getInstance(void)::OZCamera_nearFadeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_nearFadeImpl::getInstance(void)::OZCamera_nearFadeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearFadeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearFadeImpl::_OZCamera_nearFade;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearFadeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_nearFadeImpl *v0;

  if (!OZCamera::OZCamera_nearFadeImpl::_OZCamera_nearFade)
  {
    v0 = (OZCamera::OZCamera_nearFadeImpl *)operator new();
    OZCamera::OZCamera_nearFadeImpl::OZCamera_nearFadeImpl(v0);
    OZCamera::OZCamera_nearFadeImpl::_OZCamera_nearFade = (uint64_t)v0;
  }
}

void sub_1B2E9ABD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_nearFadeImpl *OZCamera::OZCamera_nearFadeImpl::OZCamera_nearFadeImpl(OZCamera::OZCamera_nearFadeImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 10.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 10.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_nearFadeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659E6B8;
  *((_QWORD *)this + 5) = &unk_1E659E6D8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E9AC88(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_nearFadeInfo::getInstance(OZCamera::OZCamera_nearFadeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_nearFadeInfo::getInstance(void)::OZCamera_nearFadeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_nearFadeInfo::getInstance(void)::OZCamera_nearFadeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_nearFadeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_nearFadeInfo::_OZCamera_nearFadeInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_nearFadeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_nearFadeInfo *v0;

  if (!OZCamera::OZCamera_nearFadeInfo::_OZCamera_nearFadeInfo)
  {
    v0 = (OZCamera::OZCamera_nearFadeInfo *)operator new();
    OZCamera::OZCamera_nearFadeInfo::OZCamera_nearFadeInfo(v0);
    OZCamera::OZCamera_nearFadeInfo::_OZCamera_nearFadeInfo = (uint64_t)v0;
  }
}

void sub_1B2E9AD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_nearFadeInfo *OZCamera::OZCamera_nearFadeInfo::OZCamera_nearFadeInfo(OZCamera::OZCamera_nearFadeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_nearFadeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659E730;
  *((_QWORD *)this + 10) = &unk_1E659E750;
  return this;
}

void sub_1B2E9AE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farFadeImpl::getInstance(OZCamera::OZCamera_farFadeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_farFadeImpl::getInstance(void)::OZCamera_farFadeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_farFadeImpl::getInstance(void)::OZCamera_farFadeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farFadeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farFadeImpl::_OZCamera_farFade;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farFadeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_farFadeImpl *v0;

  if (!OZCamera::OZCamera_farFadeImpl::_OZCamera_farFade)
  {
    v0 = (OZCamera::OZCamera_farFadeImpl *)operator new();
    OZCamera::OZCamera_farFadeImpl::OZCamera_farFadeImpl(v0);
    OZCamera::OZCamera_farFadeImpl::_OZCamera_farFade = (uint64_t)v0;
  }
}

void sub_1B2E9AED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_farFadeImpl *OZCamera::OZCamera_farFadeImpl::OZCamera_farFadeImpl(OZCamera::OZCamera_farFadeImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 100.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 100.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_farFadeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659E7A8;
  *((_QWORD *)this + 5) = &unk_1E659E7C8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E9AF90(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_farFadeInfo::getInstance(OZCamera::OZCamera_farFadeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_farFadeInfo::getInstance(void)::OZCamera_farFadeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_farFadeInfo::getInstance(void)::OZCamera_farFadeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_farFadeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_farFadeInfo::_OZCamera_farFadeInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_farFadeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_farFadeInfo *v0;

  if (!OZCamera::OZCamera_farFadeInfo::_OZCamera_farFadeInfo)
  {
    v0 = (OZCamera::OZCamera_farFadeInfo *)operator new();
    OZCamera::OZCamera_farFadeInfo::OZCamera_farFadeInfo(v0);
    OZCamera::OZCamera_farFadeInfo::_OZCamera_farFadeInfo = (uint64_t)v0;
  }
}

void sub_1B2E9B05C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_farFadeInfo *OZCamera::OZCamera_farFadeInfo::OZCamera_farFadeInfo(OZCamera::OZCamera_farFadeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 20000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_farFadeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659E820;
  *((_QWORD *)this + 10) = &unk_1E659E840;
  return this;
}

void sub_1B2E9B10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_apertureImpl::getInstance(OZCamera::OZCamera_apertureImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_apertureImpl::getInstance(void)::OZCamera_apertureImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_apertureImpl::getInstance(void)::OZCamera_apertureImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_apertureImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_apertureImpl::_OZCamera_aperture;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_apertureImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_apertureImpl *v0;

  if (!OZCamera::OZCamera_apertureImpl::_OZCamera_aperture)
  {
    v0 = (OZCamera::OZCamera_apertureImpl *)operator new();
    OZCamera::OZCamera_apertureImpl::OZCamera_apertureImpl(v0);
    OZCamera::OZCamera_apertureImpl::_OZCamera_aperture = (uint64_t)v0;
  }
}

void sub_1B2E9B1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_apertureImpl *OZCamera::OZCamera_apertureImpl::OZCamera_apertureImpl(OZCamera::OZCamera_apertureImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 10.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 10.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_apertureImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659E898;
  *((_QWORD *)this + 5) = &unk_1E659E8B8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 100.0);
  return this;
}

void sub_1B2E9B288(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_apertureInfo::getInstance(OZCamera::OZCamera_apertureInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_apertureInfo::getInstance(void)::OZCamera_apertureInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_apertureInfo::getInstance(void)::OZCamera_apertureInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_apertureInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_apertureInfo::_OZCamera_apertureInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_apertureInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_apertureInfo *v0;

  if (!OZCamera::OZCamera_apertureInfo::_OZCamera_apertureInfo)
  {
    v0 = (OZCamera::OZCamera_apertureInfo *)operator new();
    OZCamera::OZCamera_apertureInfo::OZCamera_apertureInfo(v0);
    OZCamera::OZCamera_apertureInfo::_OZCamera_apertureInfo = (uint64_t)v0;
  }
}

void sub_1B2E9B354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_apertureInfo *OZCamera::OZCamera_apertureInfo::OZCamera_apertureInfo(OZCamera::OZCamera_apertureInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_apertureInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659E910;
  *((_QWORD *)this + 10) = &unk_1E659E930;
  return this;
}

void sub_1B2E9B404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofOffsetInfo::getInstance(OZCamera::OZCamera_dofOffsetInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::OZCamera_dofOffsetInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::OZCamera_dofOffsetInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofOffsetInfo::_OZCamera_dofOffsetInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofOffsetInfo *v0;

  if (!OZCamera::OZCamera_dofOffsetInfo::_OZCamera_dofOffsetInfo)
  {
    v0 = (OZCamera::OZCamera_dofOffsetInfo *)operator new();
    OZCamera::OZCamera_dofOffsetInfo::OZCamera_dofOffsetInfo(v0);
    OZCamera::OZCamera_dofOffsetInfo::_OZCamera_dofOffsetInfo = (uint64_t)v0;
  }
}

void sub_1B2E9B4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofOffsetInfo *OZCamera::OZCamera_dofOffsetInfo::OZCamera_dofOffsetInfo(OZCamera::OZCamera_dofOffsetInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1000.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofOffsetInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659E988;
  *((_QWORD *)this + 10) = &unk_1E659E9A8;
  return this;
}

void sub_1B2E9B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofNearImpl::getInstance(OZCamera::OZCamera_dofNearImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofNearImpl::getInstance(void)::OZCamera_dofNearImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofNearImpl::getInstance(void)::OZCamera_dofNearImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofNearImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofNearImpl::_OZCamera_dofNear;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofNearImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofNearImpl *v0;

  if (!OZCamera::OZCamera_dofNearImpl::_OZCamera_dofNear)
  {
    v0 = (OZCamera::OZCamera_dofNearImpl *)operator new();
    OZCamera::OZCamera_dofNearImpl::OZCamera_dofNearImpl(v0);
    OZCamera::OZCamera_dofNearImpl::_OZCamera_dofNear = (uint64_t)v0;
  }
}

void sub_1B2E9B650(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofNearImpl *OZCamera::OZCamera_dofNearImpl::OZCamera_dofNearImpl(OZCamera::OZCamera_dofNearImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofNearImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659EA00;
  *((_QWORD *)this + 5) = &unk_1E659EA20;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E9B700(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofNearInfo::getInstance(OZCamera::OZCamera_dofNearInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofNearInfo::getInstance(void)::OZCamera_dofNearInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofNearInfo::getInstance(void)::OZCamera_dofNearInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofNearInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofNearInfo::_OZCamera_dofNearInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofNearInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofNearInfo *v0;

  if (!OZCamera::OZCamera_dofNearInfo::_OZCamera_dofNearInfo)
  {
    v0 = (OZCamera::OZCamera_dofNearInfo *)operator new();
    OZCamera::OZCamera_dofNearInfo::OZCamera_dofNearInfo(v0);
    OZCamera::OZCamera_dofNearInfo::_OZCamera_dofNearInfo = (uint64_t)v0;
  }
}

void sub_1B2E9B7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofNearInfo *OZCamera::OZCamera_dofNearInfo::OZCamera_dofNearInfo(OZCamera::OZCamera_dofNearInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofNearInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659EA78;
  *((_QWORD *)this + 10) = &unk_1E659EA98;
  return this;
}

void sub_1B2E9B87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFarImpl::getInstance(OZCamera::OZCamera_dofFarImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofFarImpl::getInstance(void)::OZCamera_dofFarImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofFarImpl::getInstance(void)::OZCamera_dofFarImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFarImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFarImpl::_OZCamera_dofFar;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFarImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofFarImpl *v0;

  if (!OZCamera::OZCamera_dofFarImpl::_OZCamera_dofFar)
  {
    v0 = (OZCamera::OZCamera_dofFarImpl *)operator new();
    OZCamera::OZCamera_dofFarImpl::OZCamera_dofFarImpl(v0);
    OZCamera::OZCamera_dofFarImpl::_OZCamera_dofFar = (uint64_t)v0;
  }
}

void sub_1B2E9B948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofFarImpl *OZCamera::OZCamera_dofFarImpl::OZCamera_dofFarImpl(OZCamera::OZCamera_dofFarImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofFarImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659EAF0;
  *((_QWORD *)this + 5) = &unk_1E659EB10;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E9B9F8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFarInfo::getInstance(OZCamera::OZCamera_dofFarInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofFarInfo::getInstance(void)::OZCamera_dofFarInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofFarInfo::getInstance(void)::OZCamera_dofFarInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFarInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFarInfo::_OZCamera_dofFarInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFarInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofFarInfo *v0;

  if (!OZCamera::OZCamera_dofFarInfo::_OZCamera_dofFarInfo)
  {
    v0 = (OZCamera::OZCamera_dofFarInfo *)operator new();
    OZCamera::OZCamera_dofFarInfo::OZCamera_dofFarInfo(v0);
    OZCamera::OZCamera_dofFarInfo::_OZCamera_dofFarInfo = (uint64_t)v0;
  }
}

void sub_1B2E9BAC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofFarInfo *OZCamera::OZCamera_dofFarInfo::OZCamera_dofFarInfo(OZCamera::OZCamera_dofFarInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofFarInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659EB68;
  *((_QWORD *)this + 10) = &unk_1E659EB88;
  return this;
}

void sub_1B2E9BB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterImpl::getInstance(OZCamera::OZCamera_dofFilterImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofFilterImpl::getInstance(void)::OZCamera_dofFilterImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofFilterImpl::getInstance(void)::OZCamera_dofFilterImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterImpl::_OZCamera_dofFilter;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofFilterImpl *v0;

  if (!OZCamera::OZCamera_dofFilterImpl::_OZCamera_dofFilter)
  {
    v0 = (OZCamera::OZCamera_dofFilterImpl *)operator new();
    OZCamera::OZCamera_dofFilterImpl::OZCamera_dofFilterImpl(v0);
    OZCamera::OZCamera_dofFilterImpl::_OZCamera_dofFilter = (uint64_t)v0;
  }
}

void sub_1B2E9BC40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofFilterImpl *OZCamera::OZCamera_dofFilterImpl::OZCamera_dofFilterImpl(OZCamera::OZCamera_dofFilterImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofFilterImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659EBE0;
  *((_QWORD *)this + 5) = &unk_1E659EC00;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E9BCF0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterShapeImpl::getInstance(OZCamera::OZCamera_dofFilterShapeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::OZCamera_dofFilterShapeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::OZCamera_dofFilterShapeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterShapeImpl::_OZCamera_dofFilterShape;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterShapeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofFilterShapeImpl *v0;

  if (!OZCamera::OZCamera_dofFilterShapeImpl::_OZCamera_dofFilterShape)
  {
    v0 = (OZCamera::OZCamera_dofFilterShapeImpl *)operator new();
    OZCamera::OZCamera_dofFilterShapeImpl::OZCamera_dofFilterShapeImpl(v0);
    OZCamera::OZCamera_dofFilterShapeImpl::_OZCamera_dofFilterShape = (uint64_t)v0;
  }
}

void sub_1B2E9BDBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofFilterShapeImpl *OZCamera::OZCamera_dofFilterShapeImpl::OZCamera_dofFilterShapeImpl(OZCamera::OZCamera_dofFilterShapeImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofFilterShapeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659EC58;
  *((_QWORD *)this + 5) = &unk_1E659EC78;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E9BE6C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterSidesImpl::getInstance(OZCamera::OZCamera_dofFilterSidesImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::OZCamera_dofFilterSidesImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::OZCamera_dofFilterSidesImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterSidesImpl::_OZCamera_dofFilterSides;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterSidesImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZCamera::OZCamera_dofFilterSidesImpl::_OZCamera_dofFilterSides)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZCamera::OZCamera_dofFilterSidesImpl::OZCamera_dofFilterSidesImpl(v0);
    OZCamera::OZCamera_dofFilterSidesImpl::_OZCamera_dofFilterSides = (uint64_t)v0;
  }
}

void sub_1B2E9BF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZCamera::OZCamera_dofFilterSidesImpl::OZCamera_dofFilterSidesImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 3.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 3.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E659ECD0;
  this->var5 = (PCString *)&unk_1E659ECF0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 3.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 16.0);
  return this;
}

void sub_1B2E9BFE4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofFilterSidesInfo::getInstance(OZCamera::OZCamera_dofFilterSidesInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::OZCamera_dofFilterSidesInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::OZCamera_dofFilterSidesInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofFilterSidesInfo::_OZCamera_dofFilterSidesInfo;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofFilterSidesInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofFilterSidesInfo *v0;

  if (!OZCamera::OZCamera_dofFilterSidesInfo::_OZCamera_dofFilterSidesInfo)
  {
    v0 = (OZCamera::OZCamera_dofFilterSidesInfo *)operator new();
    OZCamera::OZCamera_dofFilterSidesInfo::OZCamera_dofFilterSidesInfo(v0);
    OZCamera::OZCamera_dofFilterSidesInfo::_OZCamera_dofFilterSidesInfo = (uint64_t)v0;
  }
}

void sub_1B2E9C0B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofFilterSidesInfo *OZCamera::OZCamera_dofFilterSidesInfo::OZCamera_dofFilterSidesInfo(OZCamera::OZCamera_dofFilterSidesInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 3.0, 16.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofFilterSidesInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E659ED48;
  *((_QWORD *)this + 10) = &unk_1E659ED68;
  return this;
}

void sub_1B2E9C158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZCamera::OZCamera_dofDepthModeImpl::getInstance(OZCamera::OZCamera_dofDepthModeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::OZCamera_dofDepthModeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::OZCamera_dofDepthModeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera::OZCamera_dofDepthModeImpl::_OZCamera_dofDepthMode;
}

void std::__call_once_param<std::tuple<OZCamera::OZCamera_dofDepthModeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera::OZCamera_dofDepthModeImpl *v0;

  if (!OZCamera::OZCamera_dofDepthModeImpl::_OZCamera_dofDepthMode)
  {
    v0 = (OZCamera::OZCamera_dofDepthModeImpl *)operator new();
    OZCamera::OZCamera_dofDepthModeImpl::OZCamera_dofDepthModeImpl(v0);
    OZCamera::OZCamera_dofDepthModeImpl::_OZCamera_dofDepthMode = (uint64_t)v0;
  }
}

void sub_1B2E9C224(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZCamera::OZCamera_dofDepthModeImpl *OZCamera::OZCamera_dofDepthModeImpl::OZCamera_dofDepthModeImpl(OZCamera::OZCamera_dofDepthModeImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZCamera::OZCamera_dofDepthModeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E659EDC0;
  *((_QWORD *)this + 5) = &unk_1E659EDE0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E9C2D4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,false>(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = a2 - (char *)v9;
    v13 = (a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *((_QWORD *)a2 - 1);
        v21 = *v9;
        if (*(double *)(v20 + 24) < *(double *)(*v9 + 24))
        {
          *v9 = v20;
          *((_QWORD *)a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9, v9 + 1, (uint64_t *)a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9, v9 + 1, v9 + 2, (uint64_t *)a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9, v9 + 1, v9 + 2, v9 + 3, (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != (uint64_t *)a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,RayHit **>((char *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(&v9[v13 >> 1], v9, (uint64_t *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9, &v9[v13 >> 1], (uint64_t *)a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9 + 1, v15 - 1, (uint64_t *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9 + 2, &v9[v14 + 1], (uint64_t *)a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(double *)(*(v9 - 1) + 24) >= *(double *)(*v9 + 24))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(v9, (uint64_t *)a2);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v17 + 1, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (char *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(v9, (uint64_t *)a2);
        if (v9 != (uint64_t *)a2)
        {
          while (v8 + 1 != (uint64_t *)a2)
          {
            v24 = *v8;
            v23 = v8[1];
            v22 = ++v8;
            v25 = *(double *)(v23 + 24);
            if (v25 < *(double *)(v24 + 24))
            {
              do
              {
                *v22 = v24;
                v24 = *(v22 - 2);
                --v22;
              }
              while (v25 < *(double *)(v24 + 24));
              *v22 = v23;
            }
          }
        }
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v6 = *v4;
        v5 = v4[1];
        v4 = v2;
        v7 = *(double *)(v5 + 24);
        if (v7 < *(double *)(v6 + 24))
        {
          v8 = v3;
          while (1)
          {
            *(uint64_t *)((char *)result + v8 + 8) = v6;
            if (!v8)
              break;
            v6 = *(uint64_t *)((char *)result + v8 - 8);
            v8 -= 8;
            if (v7 >= *(double *)(v6 + 24))
            {
              v9 = (uint64_t *)((char *)result + v8 + 8);
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *v9 = v5;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *a1;
  v5 = *(double *)(*a2 + 24);
  v6 = *(double *)(*a1 + 24);
  v7 = *a3;
  v8 = *(double *)(*a3 + 24);
  if (v5 < v6)
  {
    if (v8 < v5)
    {
      *a1 = v7;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*(double *)(*a3 + 24) >= v6)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v8 < v5)
  {
    *a2 = v7;
    *a3 = v3;
    v9 = *a1;
    if (*(double *)(*a2 + 24) >= *(double *)(*a1 + 24))
      return 1;
    *a1 = *a2;
    *a2 = v9;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  double v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(double *)(*a1 + 24);
  if (v3 >= *(double *)(*(a2 - 1) + 24))
  {
    v6 = a1 + 1;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      ++v6;
    }
    while (v3 >= *(double *)(*v4 + 24));
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[1];
      ++v4;
    }
    while (v3 >= *(double *)(v5 + 24));
  }
  if (v4 < a2)
  {
    do
      v7 = *--a2;
    while (v3 < *(double *)(v7 + 24));
  }
  if (v4 < a2)
  {
    v8 = *v4;
    v9 = *a2;
    do
    {
      *v4 = v9;
      *a2 = v8;
      do
      {
        v10 = v4[1];
        ++v4;
        v8 = v10;
      }
      while (v3 >= *(double *)(v10 + 24));
      do
      {
        v11 = *--a2;
        v9 = v11;
      }
      while (v3 < *(double *)(v11 + 24));
    }
    while (v4 < a2);
  }
  if (v4 - 1 != a1)
    *a1 = *(v4 - 1);
  *(v4 - 1) = v2;
  return v4;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,RayHit **,RayHitCmp &>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = 0;
  v3 = *a1;
  v4 = *(double *)(*a1 + 24);
  do
    v5 = a1[++v2];
  while (*(double *)(v5 + 24) < v4);
  v6 = (unint64_t)&a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= (unint64_t)a2)
        break;
      v9 = *--a2;
    }
    while (*(double *)(v9 + 24) >= v4);
  }
  else
  {
    do
      v8 = *--a2;
    while (*(double *)(v8 + 24) >= v4);
  }
  if (v6 < (unint64_t)a2)
  {
    v10 = *a2;
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      *v11 = v10;
      *v12 = v5;
      do
      {
        v13 = v11[1];
        ++v11;
        v5 = v13;
      }
      while (*(double *)(v13 + 24) < v4);
      do
      {
        v14 = *--v12;
        v10 = v14;
      }
      while (*(double *)(v14 + 24) >= v4);
    }
    while (v11 < v12);
    v7 = v11 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(double *)(v6 + 24) < *(double *)(*a1 + 24))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(double *)(*v9 + 24);
    if (v14 < *(double *)(*v8 + 24))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(double *)(v13 + 24))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a2, a3);
  v9 = *a3;
  if (*(double *)(*a4 + 24) < *(double *)(*a3 + 24))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(double *)(*a3 + 24) < *(double *)(*a2 + 24))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(double *)(*a2 + 24) < *(double *)(*a1 + 24))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(a1, a2, a3, a4);
  v11 = *a4;
  if (*(double *)(*a5 + 24) < *(double *)(*a4 + 24))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*(double *)(*a4 + 24) < *(double *)(*a3 + 24))
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*(double *)(*a3 + 24) < *(double *)(*a2 + 24))
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*(double *)(*a2 + 24) < *(double *)(*a1 + 24))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **,RayHit **>(char *a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *(_QWORD *)v14;
        if (*(double *)(*(_QWORD *)v14 + 24) < *(double *)(*(_QWORD *)a1 + 24))
        {
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 8 * v17 + 8;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *(double *)(*(_QWORD *)v19 + 24) < *(double *)(*((_QWORD *)v19 + 1) + 24))
          {
            v19 += 8;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (_QWORD *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *(double *)(*v8 + 24) < *(double *)(v8[1] + 24))
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      v12 = *(double *)(*a4 + 24);
      if (*(double *)(*v8 + 24) >= v12)
      {
        do
        {
          v13 = v8;
          *a4 = v10;
          if (v5 < v7)
            break;
          v14 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (_QWORD *)(result + 8 * v7);
          v15 = v14 + 2;
          if (v15 < a3 && *(double *)(*v8 + 24) < *(double *)(v8[1] + 24))
          {
            ++v8;
            v7 = v15;
          }
          v10 = *v8;
          a4 = v13;
        }
        while (*(double *)(*v8 + 24) >= v12);
        *v13 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,RayHitCmp &,RayHit **>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *(double *)(v9 + 24);
    if (*(double *)(*v5 + 24) < v10)
    {
      do
      {
        v11 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v11;
      }
      while (*(double *)(*v5 + 24) < v10);
      *v11 = v8;
    }
  }
  return result;
}

uint64_t localizedString(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.ozone.framework")), "localizedStringForKey:value:table:", a1, CFSTR("** Invalid **"), a2);
}

void *OZApplication::getCurrentDoc(OZApplication *this)
{
  void *result;

  perThreadDocument();
  result = pthread_getspecific(perThreadDocument(void)::result);
  if (!result)
    return (void *)*((_QWORD *)this + 1);
  return result;
}

OZDocument *OZApplication::setCurrentDoc(OZApplication *this, OZDocument *a2)
{
  OZDocument *result;
  BOOL v5;

  perThreadDocument();
  result = (OZDocument *)pthread_getspecific(perThreadDocument(void)::result);
  if (result)
    v5 = result == a2;
  else
    v5 = 1;
  if (v5)
  {
    if (!result && *((OZDocument **)this + 1) != a2)
      *((_QWORD *)this + 1) = a2;
  }
  else
  {
    perThreadDocument();
    return (OZDocument *)pthread_setspecific(perThreadDocument(void)::result, a2);
  }
  return result;
}

uint64_t OZApplication::setPerThreadCurrentDoc(OZApplication *this, OZDocument *a2)
{
  perThreadDocument();
  return pthread_setspecific(perThreadDocument(void)::result, a2);
}

uint64_t OZApplication::documentWillDie(uint64_t this, OZDocument *a2)
{
  if (*(OZDocument **)(this + 8) == a2)
    *(_QWORD *)(this + 8) = 0;
  return this;
}

void perThreadDocument(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      pthread_key_create((pthread_key_t *)&perThreadDocument(void)::result, (void (__cdecl *)(void *))PCThreadSpecific<OZDocument>::destroy);
    }
  }
}

void sub_1B2E9D068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PCThreadSpecific<OZDocument>::destroy(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void OZMaterialCompoundLayer::OZMaterialCompoundLayer(OZMaterialCompoundLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZMaterialLayerBase::OZMaterialLayerBase(this, a2, a3, a4);
  *v5 = off_1E659EE38;
  v5[2] = &unk_1E659F298;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Compound Scale"));
  OZChannelScale::OZChannelScale((OZMaterialCompoundLayer *)((char *)this + 1224), &v7, (OZChannelFolder *)this, 0x64u, 2u, 2u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Compound Translate"));
  OZChannelPosition::OZChannelPosition((OZMaterialCompoundLayer *)((char *)this + 1664), &v7, (OZChannelFolder *)this, 0x65u, 2u, 2u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Compound Rotate"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 2368), &v7, (OZChannelFolder *)this, 0x66u, 2, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Image Placement Mode Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Placement Mode Label"));
  OZChannelEnum::OZChannelEnum((OZMaterialCompoundLayer *)((char *)this + 2520), 0, &v7, &v6, (OZChannelFolder *)this, 0x67u, 2, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Transform Label"));
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZMaterialCompoundLayer *)((char *)this + 2776), &v7, (OZChannelFolder *)this, 0xC8u, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B2E9D280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZMaterialLayerBase *v12;
  OZChannel2D *v13;
  OZChannelPosition *v14;
  OZChannel *v15;
  OZChannelEnum *v16;

  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannel::~OZChannel(v15);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannel2D::~OZChannel2D(v13);
  OZMaterialLayerBase::~OZMaterialLayerBase(v12);
  _Unwind_Resume(a1);
}

void sub_1B2E9D2EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E9D2CCLL);
}

void sub_1B2E9D2FC()
{
  JUMPOUT(0x1B2E9D2CCLL);
}

void sub_1B2E9D304(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E9D2D4);
}

void sub_1B2E9D314()
{
  JUMPOUT(0x1B2E9D2D4);
}

void sub_1B2E9D31C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E9D2DCLL);
}

void sub_1B2E9D32C()
{
  JUMPOUT(0x1B2E9D2DCLL);
}

void OZMaterialCompoundLayer::OZMaterialCompoundLayer(OZMaterialCompoundLayer *this, const OZMaterialCompoundLayer *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZMaterialLayerBase::OZMaterialLayerBase(this, (const OZChannelBase *)a2, a3);
  *v5 = off_1E659EE38;
  v5[2] = &unk_1E659F298;
  OZChannelScale::OZChannelScale((OZChannelScale *)(v5 + 153), (const OZMaterialCompoundLayer *)((char *)a2 + 1224), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZMaterialCompoundLayer *)((char *)this + 1664), (const OZMaterialCompoundLayer *)((char *)a2 + 1664), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 2368), (const OZChannelBase *)((char *)a2 + 2368), (OZChannelFolder *)this);
  *((_QWORD *)this + 296) = &off_1E6551728;
  *((_QWORD *)this + 298) = &unk_1E6551A88;
  OZChannelEnum::OZChannelEnum((OZMaterialCompoundLayer *)((char *)this + 2520), (const OZMaterialCompoundLayer *)((char *)a2 + 2520), (OZChannelFolder *)this);
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZMaterialCompoundLayer *)((char *)this + 2776), (const OZMaterialCompoundLayer *)((char *)a2 + 2776), (OZChannelFolder *)this);
}

void sub_1B2E9D3F8(_Unwind_Exception *a1)
{
  OZMaterialLayerBase *v1;
  OZChannel2D *v2;
  OZChannelPosition *v3;
  OZChannel *v4;
  OZChannelEnum *v5;

  OZChannelEnum::~OZChannelEnum(v5);
  OZChannel::~OZChannel(v4);
  OZChannelPosition::~OZChannelPosition(v3);
  OZChannel2D::~OZChannel2D(v2);
  OZMaterialLayerBase::~OZMaterialLayerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialCompoundLayer::parseEnd(OZMaterialCompoundLayer *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZMaterialLayerBase::parseEnd(this, a2);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 1224), 2))
  {
    (*(void (**)(char *, char *, _QWORD))(*((_QWORD *)this + 596) + 232))((char *)this + 4768, (char *)this + 1360, 0);
    (*(void (**)(char *, char *, _QWORD))(*((_QWORD *)this + 615) + 232))((char *)this + 4920, (char *)this + 1512, 0);
    (*(void (**)(char *, char *, _QWORD))(*((_QWORD *)this + 491) + 232))((char *)this + 3928, (char *)this + 1664, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3928), 4096, 0);
    (*(void (**)(char *, char *, _QWORD))(*((_QWORD *)this + 782) + 232))((char *)this + 6256, (char *)this + 2368, 0);
    (*(void (**)(char *, char *, _QWORD))(*((_QWORD *)this + 459) + 232))((char *)this + 3672, (char *)this + 2520, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1224), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1224), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1664), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1664), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2368), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2368), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2520), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2520), 0x400000, 0);
  }
  return v3;
}

uint64_t `non-virtual thunk to'OZMaterialCompoundLayer::parseEnd(OZMaterialCompoundLayer *this, PCSerializerReadStream *a2)
{
  return OZMaterialCompoundLayer::parseEnd((OZMaterialCompoundLayer *)((char *)this - 16), a2);
}

OZChannelBase *showHideParam(OZChannelBase *a1, int a2)
{
  if (a2)
    return OZChannelBase::resetFlag(a1, 0x400000, 0);
  else
    return OZChannelBase::setFlag(a1, 0x400000, 0);
}

BOOL OZMaterialCompoundLayer::isAnySharedTransformEnabled(OZMaterialCompoundLayer *this)
{
  return !OZChannelBase::testFlag((OZChannelBase *)((char *)this + 2776), 0x400000)
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 2904), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

OZChannelBase *OZMaterialCompoundLayer::updateLocalTransformVisibility(OZMaterialCompoundLayer *this)
{
  return OZChannelMaterialMapTransform::updateLocalTransformChannelsVisibility((OZMaterialCompoundLayer *)((char *)this + 2776));
}

OZChannelBase *OZMaterialCompoundLayer::setTransformValuesAsDefaults(OZMaterialCompoundLayer *this)
{
  return OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault((OZChannelBase *)((char *)this + 2776));
}

void OZMaterialCompoundLayer::setSubtypeTags(OZMaterialCompoundLayer *this)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p;
  char *v25;
  char *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v25 = 0;
  v26 = 0;
  v1 = (void *)(*(uint64_t (**)(OZMaterialCompoundLayer *, _QWORD))(*(_QWORD *)this + 952))(this, MEMORY[0x1E0CA2E68]);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v20, v27, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v21 != v3)
          objc_enumerationMutation(v1);
        v5 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "objectForKey:", CFSTR("tag"));
        if (!v5)
        {
          v25 = (char *)__p;
          goto LABEL_27;
        }
        v6 = objc_msgSend(v5, "intValue");
        v7 = v6;
        v8 = v25;
        if (v25 >= v26)
        {
          v10 = (char *)__p;
          v11 = (v25 - (_BYTE *)__p) >> 2;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v13 = v26 - (_BYTE *)__p;
          if ((v26 - (_BYTE *)__p) >> 1 > v12)
            v12 = v13 >> 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v26, v14);
            v10 = (char *)__p;
            v8 = v25;
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[4 * v11];
          *(_DWORD *)v16 = v7;
          v9 = v16 + 4;
          while (v8 != v10)
          {
            v17 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          __p = v16;
          v25 = v9;
          v26 = &v15[4 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_DWORD *)v25 = v6;
          v9 = v8 + 4;
        }
        v25 = v9;
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v20, v27, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_27:
  v18 = v25;
  if (v25 != __p)
  {
    OZChannelEnum::setTags((OZMaterialCompoundLayer *)((char *)this + 936), (char *)__p, (unint64_t)(v25 - (_BYTE *)__p) >> 2);
    v18 = (char *)__p;
  }
  if (v18)
  {
    v25 = v18;
    operator delete(v18);
  }
}

void sub_1B2E9D854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL OZMaterialCompoundLayer::getShouldRotateSide(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  uint64_t ObjectManipulator;
  uint64_t v5;
  OZChannel *v6;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2904), MEMORY[0x1E0CA2E68], 0.0))
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
    v5 = ObjectManipulator - 16;
    if (!ObjectManipulator)
      v5 = 0;
    v6 = (OZChannel *)(v5 + 2464);
  }
  else
  {
    v6 = (OZChannel *)((char *)this + 3672);
  }
  return OZChannel::getValueAsInt(v6, a2, 0.0) == 0;
}

BOOL OZMaterialCompoundLayer::getUseTriplanarMapping(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  uint64_t ObjectManipulator;
  uint64_t v5;
  OZChannel *v6;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2904), MEMORY[0x1E0CA2E68], 0.0))
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
    v5 = ObjectManipulator - 16;
    if (!ObjectManipulator)
      v5 = 0;
    v6 = (OZChannel *)(v5 + 2464);
  }
  else
  {
    v6 = (OZChannel *)((char *)this + 3672);
  }
  return OZChannel::getValueAsInt(v6, a2, 0.0) != 2;
}

void *OZMaterialCompoundLayer::setUpTexture(uint64_t a1, float *a2, uint64_t *a3, unsigned int a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, char a9, char a10, const void *a11, int a12)
{
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t SamplerInfo;
  int v21;
  int v22;
  LiMaterialSamplerInfo *v23;
  float64x2_t v24;

  v16 = *(_QWORD *)a2;
  v17 = *(_DWORD *)(*(_QWORD *)a2 + 588);
  if (*(_DWORD *)(*(_QWORD *)a2 + 584) <= v17)
    v18 = (2 * (v17 + 1)) | 1;
  else
    v18 = *(_DWORD *)(*(_QWORD *)a2 + 584);
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((_QWORD *)(*(_QWORD *)a2 + 576), v17 + 1, v18);
  v19 = *(_QWORD *)(v16 + 592) + 152 * *(int *)(v16 + 588);
  *(_QWORD *)(v19 - 152) = *(_QWORD *)(a8 + 16);
  ProShade::Value::set(v19 - 144, (const PCString *)3, 7, a11);
  SamplerInfo = LiMaterial::getSamplerInfo((os_unfair_lock_s *)v16, *(const ProShade::SamplerNode **)(a7 + 16));
  v21 = *(_DWORD *)(SamplerInfo + 328);
  v22 = *(_DWORD *)(SamplerInfo + 336);
  v23 = LiMaterial::obtainSamplerInfo((LiMaterial *)v16, *(const ProShade::SamplerNode **)(a7 + 16));
  *((_BYTE *)v23 + 316) = 1;
  *((_BYTE *)v23 + 317) = a10;
  *((_BYTE *)v23 + 318) = a9;
  *((_BYTE *)v23 + 319) = 0;
  *((_QWORD *)v23 + 40) = 1;
  *((_DWORD *)v23 + 82) = v21;
  *((_DWORD *)v23 + 83) = a12;
  *((_BYTE *)v23 + 338) = BYTE2(v22);
  *((_WORD *)v23 + 168) = v22;
  *((_BYTE *)v23 + 312) = 1;
  v24.f64[0] = a2[31];
  return OZMaterialCompoundLayer::setUpSampler(v24, (uint64_t)v23, (uint64_t *)a2, a3, a7, a4, a5, a6);
}

void *OZMaterialCompoundLayer::setUpSampler(float64x2_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unsigned int a6, unsigned int a7, char a8)
{
  uint64_t v13;
  double v14;
  double v15;
  float v16;
  float v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  double v35[4];

  v13 = *a3;
  v34 = 0x3FF0000000000000;
  v31 = 0x3FF0000000000000;
  v28 = 0x3FF0000000000000;
  v25 = 0x3FF0000000000000;
  v26 = 0u;
  v27 = 0u;
  v29 = 0u;
  v30 = 0u;
  v32 = 0u;
  v33 = 0u;
  if (a1.f64[0] != 1.0)
  {
    v25 = *(_QWORD *)&a1.f64[0];
    *(double *)&v26 = a1.f64[0] * 0.0;
    *((double *)&v26 + 1) = a1.f64[0] * 0.0;
    *(double *)&v27 = a1.f64[0] * 0.0;
    *((double *)&v27 + 1) = a1.f64[0] * 0.0;
    v28 = *(_QWORD *)&a1.f64[0];
    *(double *)&v29 = a1.f64[0] * 0.0;
    *((double *)&v29 + 1) = a1.f64[0] * 0.0;
    *(double *)&v30 = a1.f64[0] * 0.0;
    *((double *)&v30 + 1) = a1.f64[0] * 0.0;
    v31 = *(_QWORD *)&a1.f64[0];
    *(double *)&v32 = a1.f64[0] * 0.0;
  }
  v14 = (double)a6;
  a1.f64[0] = (double)a6 * 0.5;
  v15 = (double)a7;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v25, a1, (double)a7 * 0.5, 0.0);
  LiMaterial::setTexture((LiMaterial *)v13, a5, a4, a8, (uint64_t)&v25);
  v16 = v14 * -0.5;
  v17 = v15 * -0.5;
  v18 = *(_DWORD *)(v13 + 588);
  if (*(_DWORD *)(v13 + 584) <= v18)
    v19 = (2 * (v18 + 1)) | 1;
  else
    v19 = *(_DWORD *)(v13 + 584);
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((_QWORD *)(v13 + 576), v18 + 1, v19);
  v20 = *(_QWORD *)(v13 + 592) + 152 * *(int *)(v13 + 588);
  *(_QWORD *)(v20 - 152) = *(_QWORD *)(a5 + 48);
  v35[0] = v16;
  v35[1] = v17;
  v35[2] = (float)a6;
  v35[3] = (float)a7;
  ProShade::Value::set(v20 - 144, (const PCString *)3, 4, v35);
  v21 = *(_DWORD *)(v13 + 588);
  if (*(_DWORD *)(v13 + 584) <= v21)
    v22 = (2 * (v21 + 1)) | 1;
  else
    v22 = *(_DWORD *)(v13 + 584);
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((_QWORD *)(v13 + 576), v21 + 1, v22);
  v23 = *(_QWORD *)(v13 + 592) + 152 * *(int *)(v13 + 588);
  *(_QWORD *)(v23 - 152) = *(_QWORD *)(a5 + 80);
  return ProShade::Value::set(v23 - 144, (const PCString *)3, 7, &v25);
}

void *OZMaterialCompoundLayer::createDiffuseGradientLayer@<X0>(uint64_t a1@<X0>, os_unfair_lock_s **a2@<X1>, uint64_t a3@<X8>)
{
  DiffuseMaterialLayer *v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  os_unfair_lock_s *v9;
  signed int os_unfair_lock_opaque;
  int v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  signed int v14;
  int v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  signed int v18;
  int v19;
  uint64_t v20;
  PCSharedCount v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v6 = (DiffuseMaterialLayer *)operator new();
  DiffuseMaterialLayer::DiffuseMaterialLayer(v6, a1);
  *(_QWORD *)a3 = v6;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 8), (DiffuseMaterialLayer *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  if (!*(_QWORD *)a3)
    throw_PCNullPointerException(1);
  DiffuseMaterialLayer::setBlendMode(*(_QWORD *)a3, 2);
  v7 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v22, (const PCSharedCount *)a3);
  LiLayeredMaterial::appendLayer((uint64_t *)v7, &v22);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v23);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v22, (const PCSharedCount *)a3);
  v8 = (_QWORD *)LiMaterialLayerUniform::get(*a2, (uint64_t)&v22);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v23);
  v9 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  os_unfair_lock_opaque = v9[147]._os_unfair_lock_opaque;
  if ((signed int)v9[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v11 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v11 = v9[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v9[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v11);
  v12 = *(_QWORD *)&v9[148]._os_unfair_lock_opaque + 152 * (int)v9[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v12 - 152) = v8[18];
  v22.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  ProShade::Value::set(v12 - 144, (const PCString *)3, 1, &v22);
  v13 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  v14 = v13[147]._os_unfair_lock_opaque;
  if ((signed int)v13[146]._os_unfair_lock_opaque <= v14)
    v15 = (2 * (v14 + 1)) | 1;
  else
    v15 = v13[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v13[144]._os_unfair_lock_opaque, v14 + 1, v15);
  v16 = *(_QWORD *)&v13[148]._os_unfair_lock_opaque + 152 * (int)v13[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v16 - 152) = v8[22];
  v22.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  ProShade::Value::set(v16 - 144, (const PCString *)3, 1, &v22);
  v17 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  v30 = 0x3FF0000000000000;
  v27 = 0x3FF0000000000000;
  v24 = 0x3FF0000000000000;
  v22.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  memset(v23, 0, sizeof(v23));
  v25 = 0u;
  v26 = 0u;
  v28 = 0u;
  v29 = 0u;
  v18 = v17[147]._os_unfair_lock_opaque;
  if ((signed int)v17[146]._os_unfair_lock_opaque <= v18)
    v19 = (2 * (v18 + 1)) | 1;
  else
    v19 = v17[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v17[144]._os_unfair_lock_opaque, v18 + 1, v19);
  v20 = *(_QWORD *)&v17[148]._os_unfair_lock_opaque + 152 * (int)v17[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v20 - 152) = v8[54];
  return ProShade::Value::set(v20 - 144, (const PCString *)3, 7, &v22);
}

void sub_1B2E9DEAC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

CGColorSpace **OZMaterialCompoundLayer::createDiffuseLayer@<X0>(OZChannelBase *a1@<X0>, uint64_t a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X3>, OZChannelBase *a5@<X4>, int a6@<W6>, uint64_t a7@<X8>, double a8@<D0>, float a9@<S1>, double a10@<D2>)
{
  DiffuseMaterialLayer *v20;
  os_unfair_lock_s *v21;
  _QWORD *v22;
  CGColorSpace *WorkingColorSpace;
  os_unfair_lock_s *v24;
  float32x2_t v25;
  float32x2_t v26;
  signed int os_unfair_lock_opaque;
  int v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  signed int v31;
  int v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  signed int v35;
  int v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  signed int v39;
  int v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  signed int v43;
  int v44;
  uint64_t v45;
  _BYTE v47[40];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  PCColor v55;
  _QWORD v56[2];
  CGColorSpace *v57;
  unsigned int v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v20 = (DiffuseMaterialLayer *)operator new();
  DiffuseMaterialLayer::DiffuseMaterialLayer(v20, (uint64_t)a1);
  *(_QWORD *)a7 = v20;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a7 + 8), (DiffuseMaterialLayer *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
  if (!*(_QWORD *)a7)
    throw_PCNullPointerException(1);
  DiffuseMaterialLayer::setBlendMode(*(_QWORD *)a7, a6);
  v68 = 0x3FF0000000000000;
  v65 = 0x3FF0000000000000;
  v62 = 0x3FF0000000000000;
  v59 = 0x3FF0000000000000;
  v60 = 0u;
  v61 = 0u;
  v63 = 0u;
  v64 = 0u;
  v66 = 0u;
  v67 = 0u;
  v58 = 0;
  OZMaterialCompoundLayer::getTextureTransform(a1, a2, a3, (float64x2_t *)&v59, &v58, a9);
  v21 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v47, (const PCSharedCount *)a7);
  LiLayeredMaterial::appendLayer((uint64_t *)v21, (const PCSharedCount *)v47);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v47[8]);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v47, (const PCSharedCount *)a7);
  v22 = (_QWORD *)LiMaterialLayerUniform::get(*(os_unfair_lock_s **)a2, (uint64_t)v47);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v47[8]);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*(FxColorDescription **)(a2 + 16));
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)v56, WorkingColorSpace);
  PCColor::PCColor(&v55);
  if (a4)
  {
    (*(void (**)(uint64_t, const CMTime *, PCColor *, double))(*(_QWORD *)a4 + 824))(a4, a3, &v55, 0.0);
    if (a5)
    {
      if (OZChannelBase::isEnabled(a5, 0, 1) && *(double *)(a2 + 104) != -1.0)
      {
        (*((void (**)(OZChannelBase *, const CMTime *, PCColor *, uint64_t))a5->var0 + 105))(a5, a3, &v55, 1);
        (*((void (**)(OZChannelBase *, const CMTime *, PCColor *, double))a5->var0 + 103))(a5, a3, &v55, *(double *)(a2 + 104));
      }
    }
  }
  PCWorkingColor::operator=((uint64_t)v56, &v55.var0.var0);
  v24 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v26 = (float32x2_t)v56[0];
  v25 = (float32x2_t)v56[1];
  os_unfair_lock_opaque = v24[147]._os_unfair_lock_opaque;
  if ((signed int)v24[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v28 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v28 = v24[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v24[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v28);
  v29 = *(_QWORD *)&v24[148]._os_unfair_lock_opaque + 152 * (int)v24[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v29 - 152) = v22[2];
  *(float64x2_t *)v47 = vcvtq_f64_f32(v26);
  *(float64x2_t *)&v47[16] = vcvtq_f64_f32(v25);
  ProShade::Value::set(v29 - 144, (const PCString *)3, 4, v47);
  v30 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v31 = v30[147]._os_unfair_lock_opaque;
  if ((signed int)v30[146]._os_unfair_lock_opaque <= v31)
    v32 = (2 * (v31 + 1)) | 1;
  else
    v32 = v30[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v30[144]._os_unfair_lock_opaque, v31 + 1, v32);
  v33 = *(_QWORD *)&v30[148]._os_unfair_lock_opaque + 152 * (int)v30[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v33 - 152) = v22[18];
  *(double *)v47 = a10;
  ProShade::Value::set(v33 - 144, (const PCString *)3, 1, v47);
  v34 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v35 = v34[147]._os_unfair_lock_opaque;
  if ((signed int)v34[146]._os_unfair_lock_opaque <= v35)
    v36 = (2 * (v35 + 1)) | 1;
  else
    v36 = v34[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v34[144]._os_unfair_lock_opaque, v35 + 1, v36);
  v37 = *(_QWORD *)&v34[148]._os_unfair_lock_opaque + 152 * (int)v34[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v37 - 152) = v22[38];
  *(double *)v47 = a10;
  ProShade::Value::set(v37 - 144, (const PCString *)3, 1, v47);
  v38 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v39 = v38[147]._os_unfair_lock_opaque;
  if ((signed int)v38[146]._os_unfair_lock_opaque <= v39)
    v40 = (2 * (v39 + 1)) | 1;
  else
    v40 = v38[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v38[144]._os_unfair_lock_opaque, v39 + 1, v40);
  v41 = *(_QWORD *)&v38[148]._os_unfair_lock_opaque + 152 * (int)v38[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v41 - 152) = v22[22];
  *(double *)v47 = a8;
  ProShade::Value::set(v41 - 144, (const PCString *)3, 1, v47);
  v42 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v54 = 0x3FF0000000000000;
  v51 = 0x3FF0000000000000;
  v48 = 0x3FF0000000000000;
  *(_QWORD *)v47 = 0x3FF0000000000000;
  memset(&v47[8], 0, 32);
  v49 = 0u;
  v50 = 0u;
  v52 = 0u;
  v53 = 0u;
  v43 = v42[147]._os_unfair_lock_opaque;
  if ((signed int)v42[146]._os_unfair_lock_opaque <= v43)
    v44 = (2 * (v43 + 1)) | 1;
  else
    v44 = v42[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v42[144]._os_unfair_lock_opaque, v43 + 1, v44);
  v45 = *(_QWORD *)&v42[148]._os_unfair_lock_opaque + 152 * (int)v42[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v45 - 152) = v22[246];
  ProShade::Value::set(v45 - 144, (const PCString *)3, 7, v47);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v55.var1._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v57);
}

void sub_1B2E9E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,uint64_t a33,uint64_t a34,CGColorSpace *a35)
{
  PCSharedCount *v35;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a35);
  PCSharedCount::~PCSharedCount(v35);
  _Unwind_Resume(a1);
}

double OZMaterialCompoundLayer::getTextureTransform(OZChannelBase *a1, uint64_t a2, const CMTime *a3, float64x2_t *a4, unsigned int *a5, float a6)
{
  const void *ObjectManipulator;
  void *v13;
  uint64_t SequenceChannels;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a1);
  if (ObjectManipulator)
  else
    v13 = 0;
  SequenceChannels = OZMaterialLayerBase::getSequenceChannels(a1);
  v15 = *(double *)(a2 + 104) != -1.0;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)SequenceChannels + 736))(SequenceChannels);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)SequenceChannels + 744))(SequenceChannels);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)SequenceChannels + 752))(SequenceChannels);
  LOBYTE(v20) = *(_BYTE *)(a2 + 120);
  MaterialTextureTransformer::composeTextureTransform(a3, (uint64_t)&a1[24].var11, (uint64_t)v13, v15, v16, v17, v18, (int)*(double *)(a2 + 104), *(double *)(a2 + 40), v20, a4, a5);
  *(_QWORD *)&result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftScale(a4, a6, a6, 1.0);
  return result;
}

void OZMaterialCompoundLayer::createBumpLayer(OZChannelBase *a1@<X0>, uint64_t a2@<X1>, const CMTime *a3@<X2>, char a4@<W3>, NSDictionary *a5@<X4>, const __CFNumber *a6@<X5>, char a7@<W6>, char a8@<W7>, PCSharedCount *a9@<X8>, PCSharedCount a10@<D0>, float a11@<S1>)
{
  PC_Sp_counted_base *v21;
  int WorkingGamut;
  os_unfair_lock_s *v23;
  uint64_t *v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  signed int os_unfair_lock_opaque;
  int v28;
  uint64_t v29;
  unint64_t i;
  PCSharedCount *v31;
  __int128 v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t SamplerInfo;
  uint64_t v44;
  LiMaterialSamplerInfo *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  LiMaterialSamplerInfo *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  LiMaterialSamplerInfo *v93;
  unint64_t *v94;
  __int128 v96;
  os_unfair_lock_t lock;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101[8];
  _OWORD v102[8];
  PCSharedCount valuePtr[5];
  PCSharedCount v104[5];
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  char v112;
  char UseTriplanarMapping;
  int v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v21 = (PC_Sp_counted_base *)operator new();
  WorkingGamut = OZRenderParams::getWorkingGamut(*(OZRenderParams **)(a2 + 16));
  BumpMaterialLayer::BumpMaterialLayer((uint64_t)v21, (uint64_t)a1, WorkingGamut);
  a9->var0 = v21;
  PCSharedCount::PCSharedCount(a9 + 1, (PCShared_base *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
  if (a6
    && (LOBYTE(valuePtr[0].var0) = 0, CFNumberGetValue(a6, kCFNumberSInt8Type, valuePtr), LOBYTE(valuePtr[0].var0)))
  {
    v23 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(valuePtr, a9);
    OZInsertLayerBelowGroupAffectedByBump((LiLayeredMaterial *)v23, valuePtr);
  }
  else
  {
    v24 = *(uint64_t **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(valuePtr, a9);
    LiLayeredMaterial::appendLayer(v24, valuePtr);
  }
  PCSharedCount::~PCSharedCount(v104);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(valuePtr, a9);
  v25 = LiMaterialLayerUniform::get(*(os_unfair_lock_s **)a2, (uint64_t)valuePtr);
  PCSharedCount::~PCSharedCount(v104);
  v26 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  os_unfair_lock_opaque = v26[147]._os_unfair_lock_opaque;
  if ((signed int)v26[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v28 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v28 = v26[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v26[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v28);
  v29 = *(_QWORD *)&v26[148]._os_unfair_lock_opaque + 152 * (int)v26[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v29 - 152) = *(_QWORD *)(v25 + 1808);
  valuePtr[0] = a10;
  ProShade::Value::set(v29 - 144, (const PCString *)3, 1, valuePtr);
  v124 = 0x3FF0000000000000;
  v121 = 0x3FF0000000000000;
  v118 = 0x3FF0000000000000;
  v115 = 0x3FF0000000000000;
  v116 = 0u;
  v117 = 0u;
  v119 = 0u;
  v120 = 0u;
  v122 = 0u;
  v123 = 0u;
  v114 = 0;
  OZMaterialCompoundLayer::getTextureTransform(a1, a2, a3, (float64x2_t *)&v115, (unsigned int *)&v114, a11);
  v110 = 0x3FF0000000000000;
  v107 = 0x3FF0000000000000;
  v104[4].var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  valuePtr[0].var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  memset(v104, 0, 32);
  v105 = 0u;
  v106 = 0u;
  v108 = 0u;
  v109 = 0u;
  MaterialTextureTransformer::composeTextureMatrix((uint64_t)&v115, 0, (uint64_t)v102);
  for (i = 0; i != 128; i += 32)
  {
    v31 = &valuePtr[i / 8];
    v32 = v102[i / 0x10 + 1];
    *(_OWORD *)&v31->var0 = v102[i / 0x10];
    *(_OWORD *)&v31[2].var0 = v32;
  }
  v111 = v114;
  v112 = a7;
  UseTriplanarMapping = OZMaterialCompoundLayer::getUseTriplanarMapping((OZMaterialCompoundLayer *)a1, a3);
  if (!a9->var0)
    throw_PCNullPointerException(1);
  *((_DWORD *)a9->var0 + 12) = 2;
  if ((OZRenderParams::getRenderQuality(*(OZRenderParams **)(a2 + 16)) & 0xFFFFFFFE) == 6)
  {
    OZGetAssetURL(a5, (PCURL *)v101);
    LODWORD(v102[0]) = 2;
    BYTE4(v102[0]) = a4;
    BYTE5(v102[0]) = a8;
    DWORD2(v102[0]) = *(_DWORD *)(a2 + 124);
    HIDWORD(v102[0]) = OZRenderParams::getWorkingGamut(*(OZRenderParams **)(a2 + 16));
    LiMakeBumpTextureFactory(&v100);
    v99 = *(_OWORD *)LiTextureFactory::getKey((LiTextureFactory *)&v100);
    OZMaterialLayerBase::getTextureTokensLock((OZMaterialLayerBase *)a1, &lock);
    OZMaterialLayerBase::findToken((OZMaterialLayerBase *)a1, (const PCHash128 *)&v99, &v98);
    if (operator==(&v98))
    {
      LiTextureStore::getToken((std::__shared_weak_count **)&v100, &v96);
      v33 = v96;
      v96 = 0uLL;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      v98 = v33;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      OZMaterialLayerBase::addToken((uint64_t)a1, &v99, (uint64_t *)&v98);
    }
    v40 = OZGetAssetWidth(a5);
    v41 = OZGetAssetHeight(a5);
    v42 = OZGetAssetIsTransparent(a5);
    OZMaterialCompoundLayer::setUpTexture((uint64_t)a1, (float *)a2, (uint64_t *)&v98, v40, v41, v42, v25 + 640, v25 + 1760, v112, UseTriplanarMapping, valuePtr, v111);
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    SamplerInfo = LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)a2, *(const ProShade::SamplerNode **)(v25 + 656));
    v44 = *(_QWORD *)(SamplerInfo + 316);
    *(_DWORD *)((char *)&v96 + 7) = *(_DWORD *)(SamplerInfo + 336);
    *(_QWORD *)&v96 = *(_QWORD *)(SamplerInfo + 329);
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v45 = LiMaterial::obtainSamplerInfo(*(LiMaterial **)a2, *(const ProShade::SamplerNode **)(v25 + 656));
    *(_QWORD *)((char *)v45 + 316) = v44;
    *((_DWORD *)v45 + 81) = 2;
    *((_BYTE *)v45 + 328) = a8;
    *(_QWORD *)((char *)v45 + 329) = v96;
    *(_WORD *)((char *)v45 + 337) = WORD4(v96);
    *((_BYTE *)v45 + 312) = 1;
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (*((_QWORD *)&v98 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (lock)
      PCSpinLock::unlock(lock);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
    if (*((_QWORD *)&v100 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    LODWORD(v102[0]) = 3;
    BYTE4(v102[0]) = a4;
    BYTE5(v102[0]) = a8;
    DWORD2(v102[0]) = *(_DWORD *)(a2 + 124);
    HIDWORD(v102[0]) = OZRenderParams::getWorkingGamut(*(OZRenderParams **)(a2 + 16));
    LiMakeBumpTextureFactory(&v100);
    v99 = *(_OWORD *)LiTextureFactory::getKey((LiTextureFactory *)&v100);
    OZMaterialLayerBase::getTextureTokensLock((OZMaterialLayerBase *)a1, &lock);
    OZMaterialLayerBase::findToken((OZMaterialLayerBase *)a1, (const PCHash128 *)&v99, &v98);
    if (operator==(&v98))
    {
      LiTextureStore::getToken((std::__shared_weak_count **)&v100, &v96);
      v52 = v96;
      v96 = 0uLL;
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      v98 = v52;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      OZMaterialLayerBase::addToken((uint64_t)a1, &v99, (uint64_t *)&v98);
    }
    v59 = OZGetAssetWidth(a5);
    v60 = OZGetAssetHeight(a5);
    v61 = OZGetAssetIsTransparent(a5);
    OZMaterialCompoundLayer::setUpTexture((uint64_t)a1, (float *)a2, (uint64_t *)&v98, v59, v60, v61, v25 + 736, v25 + 1760, v112, UseTriplanarMapping, valuePtr, v111);
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v62 = LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)a2, *(const ProShade::SamplerNode **)(v25 + 752));
    v63 = *(_QWORD *)(v62 + 316);
    *(_DWORD *)((char *)&v96 + 7) = *(_DWORD *)(v62 + 336);
    *(_QWORD *)&v96 = *(_QWORD *)(v62 + 329);
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v64 = LiMaterial::obtainSamplerInfo(*(LiMaterial **)a2, *(const ProShade::SamplerNode **)(v25 + 752));
    *(_QWORD *)((char *)v64 + 316) = v63;
    *((_DWORD *)v64 + 81) = 3;
    *((_BYTE *)v64 + 328) = a8;
    *(_QWORD *)((char *)v64 + 329) = v96;
    *(_WORD *)((char *)v64 + 337) = WORD4(v96);
    *((_BYTE *)v64 + 312) = 1;
    v65 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (*((_QWORD *)&v98 + 1))
    {
      v66 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (lock)
      PCSpinLock::unlock(lock);
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
    if (*((_QWORD *)&v100 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      goto LABEL_110;
    }
  }
  else
  {
    OZGetAssetURL(a5, (PCURL *)v101);
    v102[0] = 0uLL;
    LODWORD(v100) = 1;
    BYTE4(v100) = a4;
    BYTE5(v100) = a8;
    DWORD2(v100) = *(_DWORD *)(a2 + 124);
    HIDWORD(v100) = OZRenderParams::getWorkingGamut(*(OZRenderParams **)(a2 + 16));
    LiMakeBumpTextureFactory(&v99);
    v98 = *(_OWORD *)LiTextureFactory::getKey((LiTextureFactory *)&v99);
    OZMaterialLayerBase::getTextureTokensLock((OZMaterialLayerBase *)a1, &lock);
    OZMaterialLayerBase::findToken((OZMaterialLayerBase *)a1, (const PCHash128 *)&v98, &v96);
    v71 = v96;
    v96 = 0uLL;
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v102[0] + 1);
    v102[0] = v71;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
    if (*((_QWORD *)&v96 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (operator==(v102))
    {
      LiTextureStore::getToken((std::__shared_weak_count **)&v99, &v96);
      v78 = v96;
      v96 = 0uLL;
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v102[0] + 1);
      v102[0] = v78;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      OZMaterialLayerBase::addToken((uint64_t)a1, &v98, (uint64_t *)v102);
    }
    if (lock)
      PCSpinLock::unlock(lock);
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v86 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = OZGetAssetWidth(a5);
    v89 = OZGetAssetHeight(a5);
    v90 = OZGetAssetIsTransparent(a5);
    OZMaterialCompoundLayer::setUpTexture((uint64_t)a1, (float *)a2, (uint64_t *)v102, v88, v89, v90, v25 + 544, v25 + 1760, v112, UseTriplanarMapping, valuePtr, v111);
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v91 = LiMaterial::getSamplerInfo(*(os_unfair_lock_s **)a2, *(const ProShade::SamplerNode **)(v25 + 560));
    v92 = *(_QWORD *)(v91 + 316);
    *(_QWORD *)&v100 = *(_QWORD *)(v91 + 328);
    DWORD2(v100) = *(_DWORD *)(v91 + 336);
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v93 = LiMaterial::obtainSamplerInfo(*(LiMaterial **)a2, *(const ProShade::SamplerNode **)(v25 + 560));
    *(_QWORD *)((char *)v93 + 316) = v92;
    *((_DWORD *)v93 + 81) = 1;
    *((_QWORD *)v93 + 41) = v100;
    *(_DWORD *)((char *)v93 + 335) = *(_DWORD *)((char *)&v100 + 7);
    *((_BYTE *)v93 + 312) = 1;
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v102[0] + 1);
    if (*((_QWORD *)&v102[0] + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v102[0] + 1) + 8);
      do
        v70 = __ldaxr(v94);
      while (__stlxr(v70 - 1, v94));
LABEL_110:
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  PCURL::~PCURL((PCURL *)v101);
}

void sub_1B2E9EFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_unfair_lock_s *a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a18);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  PCURL::~PCURL((PCURL *)&a28);
  PCSharedCount::~PCSharedCount(a13);
  _Unwind_Resume(a1);
}

void *OZMaterialCompoundLayer::createAbsorbLayer@<X0>(OZChannelBase *a1@<X0>, os_unfair_lock_s **a2@<X1>, const CMTime *a3@<X2>, PCSharedCount *a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>, float a8@<S3>)
{
  AbsorbLayer *v16;
  os_unfair_lock_s *v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  signed int os_unfair_lock_opaque;
  int v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  signed int v24;
  int v25;
  double v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  signed int v29;
  int v30;
  uint64_t v31;
  void *result;
  os_unfair_lock_s *v33;
  signed int v34;
  int v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  signed int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  _BYTE v42[40];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  double v50;

  v16 = (AbsorbLayer *)operator new();
  AbsorbLayer::AbsorbLayer(v16, (uint64_t)a1);
  a4->var0 = (PC_Sp_counted_base *)v16;
  PCSharedCount::PCSharedCount(a4 + 1, (AbsorbLayer *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
  v17 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v42, a4);
  LiLayeredMaterial::appendLayer((uint64_t *)v17, (const PCSharedCount *)v42);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v42[8]);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v42, a4);
  v18 = (_QWORD *)LiMaterialLayerUniform::get(*a2, (uint64_t)v42);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v42[8]);
  v49 = 0x3FF0000000000000;
  v46 = 0x3FF0000000000000;
  v43 = 0x3FF0000000000000;
  *(_QWORD *)v42 = 0x3FF0000000000000;
  memset(&v42[8], 0, 32);
  v44 = 0u;
  v45 = 0u;
  v47 = 0u;
  v48 = 0u;
  v41 = 0;
  OZMaterialCompoundLayer::getTextureTransform(a1, (uint64_t)a2, a3, (float64x2_t *)v42, &v41, a5);
  v19 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  os_unfair_lock_opaque = v19[147]._os_unfair_lock_opaque;
  if ((signed int)v19[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v21 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v21 = v19[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v19[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v21);
  v22 = *(_QWORD *)&v19[148]._os_unfair_lock_opaque + 152 * (int)v19[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v22 - 152) = v18[22];
  v50 = 0.0;
  ProShade::Value::set(v22 - 144, (const PCString *)3, 1, &v50);
  v23 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  v24 = v23[147]._os_unfair_lock_opaque;
  if ((signed int)v23[146]._os_unfair_lock_opaque <= v24)
    v25 = (2 * (v24 + 1)) | 1;
  else
    v25 = v23[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v23[144]._os_unfair_lock_opaque, v24 + 1, v25);
  v26 = a6 * 0.5;
  v27 = *(_QWORD *)&v23[148]._os_unfair_lock_opaque + 152 * (int)v23[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v27 - 152) = v18[18];
  v50 = v26;
  ProShade::Value::set(v27 - 144, (const PCString *)3, 1, &v50);
  v28 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  v29 = v28[147]._os_unfair_lock_opaque;
  if ((signed int)v28[146]._os_unfair_lock_opaque <= v29)
    v30 = (2 * (v29 + 1)) | 1;
  else
    v30 = v28[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v28[144]._os_unfair_lock_opaque, v29 + 1, v30);
  v31 = *(_QWORD *)&v28[148]._os_unfair_lock_opaque + 152 * (int)v28[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v31 - 152) = v18[26];
  v50 = v26;
  result = ProShade::Value::set(v31 - 144, (const PCString *)3, 1, &v50);
  if (fabsf(a7) >= 0.00001 || fabsf(a8 + -1.0) >= 0.00001)
  {
    if (!a4->var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)a4->var0 + 27) = 1;
    v33 = *a2;
    if (!*a2)
      throw_PCNullPointerException(1);
    v34 = v33[147]._os_unfair_lock_opaque;
    if ((signed int)v33[146]._os_unfair_lock_opaque <= v34)
      v35 = (2 * (v34 + 1)) | 1;
    else
      v35 = v33[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v33[144]._os_unfair_lock_opaque, v34 + 1, v35);
    v36 = *(_QWORD *)&v33[148]._os_unfair_lock_opaque + 152 * (int)v33[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v36 - 152) = v18[138];
    v50 = a7;
    ProShade::Value::set(v36 - 144, (const PCString *)3, 1, &v50);
    v37 = *a2;
    if (!*a2)
      throw_PCNullPointerException(1);
    v38 = v37[147]._os_unfair_lock_opaque;
    if ((signed int)v37[146]._os_unfair_lock_opaque <= v38)
      v39 = (2 * (v38 + 1)) | 1;
    else
      v39 = v37[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v37[144]._os_unfair_lock_opaque, v38 + 1, v39);
    v40 = *(_QWORD *)&v37[148]._os_unfair_lock_opaque + 152 * (int)v37[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v40 - 152) = v18[142];
    v50 = a8;
    return ProShade::Value::set(v40 - 144, (const PCString *)3, 1, &v50);
  }
  return result;
}

void sub_1B2E9F4E0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void *OZMaterialCompoundLayer::createSpecularLayer@<X0>(uint64_t a1@<X0>, os_unfair_lock_s **a2@<X1>, int a3@<W4>, PCSharedCount *a4@<X8>, PC_Sp_counted_base *a5@<D0>, PC_Sp_counted_base *a6@<D1>)
{
  SpecularMaterialLayer *v12;
  uint64_t v13;
  PC_Sp_counted_base *var0;
  os_unfair_lock_s *v15;
  _QWORD *v16;
  os_unfair_lock_s *v17;
  signed int os_unfair_lock_opaque;
  int v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  signed int v22;
  int v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  signed int v26;
  int v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  signed int v30;
  int v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  signed int v34;
  int v35;
  uint64_t v36;
  PCSharedCount v38;
  PCSharedCount v39;

  v12 = (SpecularMaterialLayer *)operator new();
  SpecularMaterialLayer::SpecularMaterialLayer(v12, a1);
  a4->var0 = (PC_Sp_counted_base *)v12;
  PCSharedCount::PCSharedCount(a4 + 1, (SpecularMaterialLayer *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  if (!a4->var0)
    throw_PCNullPointerException(1);
  *((_DWORD *)a4->var0 + 34) = 2;
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = &off_1E65EB048;
  *(_QWORD *)(v13 + 24) = 0;
  *(_BYTE *)(v13 + 32) = 1;
  *(_QWORD *)v13 = &off_1E65735C0;
  *(_QWORD *)(v13 + 16) = &unk_1E65735F0;
  *(_QWORD *)v13 = &unk_1E6573548;
  *(_QWORD *)(v13 + 16) = &off_1E6573590;
  var0 = a4->var0;
  *(PCSharedCount *)(v13 + 8) = (PCSharedCount)a4->var0;
  *(_QWORD *)(v13 + 16) = &unk_1E65734E8;
  *(_QWORD *)v13 = &unk_1E65734A0;
  if (!var0)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)var0 + 9, (PCShared_base *)v13);
  v15 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v38, a4);
  LiLayeredMaterial::appendLayer((uint64_t *)v15, &v38);
  PCSharedCount::~PCSharedCount(&v39);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v38, a4);
  v16 = (_QWORD *)LiMaterialLayerUniform::get(*a2, (uint64_t)&v38);
  PCSharedCount::~PCSharedCount(&v39);
  if (a3)
  {
    v17 = *a2;
    if (!*a2)
      throw_PCNullPointerException(1);
    os_unfair_lock_opaque = v17[147]._os_unfair_lock_opaque;
    if ((signed int)v17[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
      v19 = (2 * (os_unfair_lock_opaque + 1)) | 1;
    else
      v19 = v17[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v17[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v19);
    v20 = *(_QWORD *)&v17[148]._os_unfair_lock_opaque + 152 * (int)v17[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v20 - 152) = v16[26];
    v38.var0 = (PC_Sp_counted_base *)0x3FE0000000000000;
    ProShade::Value::set(v20 - 144, (const PCString *)3, 1, &v38);
    v21 = *a2;
    if (!*a2)
      throw_PCNullPointerException(1);
    v22 = v21[147]._os_unfair_lock_opaque;
    if ((signed int)v21[146]._os_unfair_lock_opaque <= v22)
      v23 = (2 * (v22 + 1)) | 1;
    else
      v23 = v21[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v21[144]._os_unfair_lock_opaque, v22 + 1, v23);
    v24 = *(_QWORD *)&v21[148]._os_unfair_lock_opaque + 152 * (int)v21[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v24 - 152) = v16[30];
    v38.var0 = a6;
    ProShade::Value::set(v24 - 144, (const PCString *)3, 1, &v38);
    if (!a4->var0)
      throw_PCNullPointerException(1);
    *((_DWORD *)a4->var0 + 36) = 4;
  }
  v25 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  v26 = v25[147]._os_unfair_lock_opaque;
  if ((signed int)v25[146]._os_unfair_lock_opaque <= v26)
    v27 = (2 * (v26 + 1)) | 1;
  else
    v27 = v25[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v25[144]._os_unfair_lock_opaque, v26 + 1, v27);
  v28 = *(_QWORD *)&v25[148]._os_unfair_lock_opaque + 152 * (int)v25[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v28 - 152) = v16[26];
  v38.var0 = a5;
  ProShade::Value::set(v28 - 144, (const PCString *)3, 1, &v38);
  v29 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  v30 = v29[147]._os_unfair_lock_opaque;
  if ((signed int)v29[146]._os_unfair_lock_opaque <= v30)
    v31 = (2 * (v30 + 1)) | 1;
  else
    v31 = v29[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v29[144]._os_unfair_lock_opaque, v30 + 1, v31);
  v32 = *(_QWORD *)&v29[148]._os_unfair_lock_opaque + 152 * (int)v29[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v32 - 152) = v16[30];
  v38.var0 = a6;
  ProShade::Value::set(v32 - 144, (const PCString *)3, 1, &v38);
  v33 = *a2;
  if (!*a2)
    throw_PCNullPointerException(1);
  v34 = v33[147]._os_unfair_lock_opaque;
  if ((signed int)v33[146]._os_unfair_lock_opaque <= v34)
    v35 = (2 * (v34 + 1)) | 1;
  else
    v35 = v33[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v33[144]._os_unfair_lock_opaque, v34 + 1, v35);
  v36 = *(_QWORD *)&v33[148]._os_unfair_lock_opaque + 152 * (int)v33[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v36 - 152) = v16[22];
  v38.var0 = 0;
  return ProShade::Value::set(v36 - 144, (const PCString *)3, 1, &v38);
}

void sub_1B2E9F918(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialCompoundLayer::getColorChannel(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  return 0;
}

double OZMaterialCompoundLayer::getOpacity()
{
  return 1.0;
}

uint64_t OZMaterialCompoundLayer::appendDiffuseLayer(OZMaterialCompoundLayer *a1, const char *a2, const CMTime *a3, NSDictionary *a4)
{
  uint64_t v8;
  id v9;
  id v10;
  double v11;
  float v12;
  id v13;
  double v14;
  double v15;
  uint64_t v16;
  id v17;
  _BOOL8 ShouldRotateSide;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v8 = OZGetImageAsset(a4, a2);
  v9 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("blend mode"));
  v10 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("scale"));
  if (v10)
  {
    objc_msgSend(v10, "doubleValue");
    v12 = v11;
  }
  else
  {
    v12 = 1.0;
  }
  v13 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("brightness"));
  if (v13)
  {
    objc_msgSend(v13, "doubleValue");
    v15 = v14;
    if (!v9)
      goto LABEL_9;
  }
  else
  {
    v15 = 1.0;
    if (!v9)
    {
LABEL_9:
      v16 = 2;
      goto LABEL_10;
    }
  }
  if ((objc_msgSend(v9, "isEqualToString:", CFSTR("over")) & 1) != 0)
    goto LABEL_9;
  if ((objc_msgSend(v9, "isEqualToString:", CFSTR("multiply")) & 1) != 0)
  {
    v16 = 5;
  }
  else if ((objc_msgSend(v9, "isEqualToString:", CFSTR("simple multiply")) & 1) != 0)
  {
    v16 = 6;
  }
  else if ((objc_msgSend(v9, "isEqualToString:", CFSTR("over white multiply")) & 1) != 0)
  {
    v16 = 7;
  }
  else if (objc_msgSend(v9, "isEqualToString:", CFSTR("over black screen")))
  {
    v16 = 8;
  }
  else
  {
    v16 = 2;
  }
LABEL_10:
  v17 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("rotate side"));
  if (v17 && objc_msgSend(v17, "BOOLValue"))
    ShouldRotateSide = !OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  else
    ShouldRotateSide = OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  v19 = (*(double (**)(OZMaterialCompoundLayer *, NSDictionary *, const CMTime *, const char *))(*(_QWORD *)a1 + 1008))(a1, a4, a3, a2);
  v20 = (*(uint64_t (**)(OZMaterialCompoundLayer *, const CMTime *))(*(_QWORD *)a1 + 1000))(a1, a3);
  v21 = (*(uint64_t (**)(OZMaterialCompoundLayer *))(*(_QWORD *)a1 + 1024))(a1);
  return (*(uint64_t (**)(OZMaterialCompoundLayer *, const char *, const CMTime *, uint64_t, uint64_t, uint64_t, uint64_t, _BOOL8, double, float, double))(*(_QWORD *)a1 + 1040))(a1, a2, a3, v20, v21, v8, v16, ShouldRotateSide, v19, v12, v15);
}

uint64_t OZMaterialCompoundLayer::getGradientChannel(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  return 0;
}

uint64_t OZMaterialCompoundLayer::getMetalShinyPercentChannel(OZMaterialCompoundLayer *this)
{
  return 0;
}

double OZMaterialCompoundLayer::getSpecularShininess(OZMaterialCompoundLayer *this, NSDictionary *a2, const CMTime *a3)
{
  return 0.75;
}

double OZMaterialCompoundLayer::getSpecularIntensity(OZMaterialCompoundLayer *this, NSDictionary *a2, const CMTime *a3)
{
  return 1.0;
}

void OZMaterialCompoundLayer::appendSpecularLayer(OZMaterialCompoundLayer *a1, uint64_t a2, const CMTime *a3, void *a4)
{
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  int v22;
  void *v23;
  _BOOL8 ShouldRotateSide;
  OZChannel *v25;
  double v26;
  uint64_t v27;
  _QWORD *v28;
  os_unfair_lock_s *v29;
  signed int os_unfair_lock_opaque;
  int v31;
  uint64_t v32;
  void *v33;
  int v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  signed int v40;
  int v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  signed int v44;
  int v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  signed int v48;
  int v49;
  uint64_t v50;
  float v51;
  const char *v52;
  const char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  double v58;
  double v59;
  os_unfair_lock_s *v60;
  signed int v61;
  int v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  signed int v65;
  int v66;
  uint64_t v67;
  os_unfair_lock_s *v68;
  signed int v69;
  int v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  double v76;
  double v77;
  os_unfair_lock_s *v78;
  signed int v79;
  int v80;
  uint64_t v81;
  os_unfair_lock_s *v82;
  signed int v83;
  int v84;
  uint64_t v85;
  os_unfair_lock_s *v86;
  signed int v87;
  int v88;
  uint64_t v89;
  void *v90;
  void *v91;
  int v92;
  CGColorSpace *WorkingColorSpace;
  os_unfair_lock_s *v94;
  __int128 v95;
  signed int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  PC_Sp_counted_base *var0;
  __int128 v101;
  CGColorSpace *v102;
  PCSharedCount v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  unsigned int v113;
  BOOL v114;
  BOOL UseTriplanarMapping;
  double v116[3];
  __int128 v117;
  CGColorSpace *v118;
  PCSharedCount v119;
  PCSharedCount v120;
  float64x2_t v121;
  float64x2_t v122;

  v8 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("viewDependent"));
  v9 = (*(double (**)(OZMaterialCompoundLayer *, void *, const CMTime *))(*(_QWORD *)a1 + 984))(a1, a4, a3);
  v10 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("specular intensity"));
  if (v10)
  {
    objc_msgSend(v10, "doubleValue");
    v9 = v11;
  }
  v12 = (*(double (**)(OZMaterialCompoundLayer *, void *, const CMTime *))(*(_QWORD *)a1 + 976))(a1, a4, a3);
  v13 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("specular shininess"));
  if (v13)
  {
    objc_msgSend(v13, "doubleValue");
    v12 = v14;
  }
  v15 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("metallic"));
  if (v15)
  {
    objc_msgSend(v15, "doubleValue");
    v17 = v16;
    if (!v8)
      goto LABEL_8;
    goto LABEL_7;
  }
  v17 = 0x3FC999999999999ALL;
  if (v8)
LABEL_7:
    v8 = (void *)objc_msgSend(v8, "BOOLValue");
LABEL_8:
  v18 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("scale"));
  if (v18)
  {
    objc_msgSend(v18, "doubleValue");
    v20 = v19;
  }
  else
  {
    v20 = 1.0;
  }
  v21 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("shininess uses intensity"));
  if (v21)
    v22 = objc_msgSend(v21, "BOOLValue");
  else
    v22 = 0;
  v23 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("rotate side"));
  if (!v23 || !objc_msgSend(v23, "BOOLValue"))
  {
    ShouldRotateSide = OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
    if (!(_DWORD)v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  ShouldRotateSide = !OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  if ((_DWORD)v8)
  {
LABEL_21:
    v25 = (OZChannel *)(*(uint64_t (**)(OZMaterialCompoundLayer *))(*(_QWORD *)a1 + 1016))(a1);
    OZChannel::getValueAsDouble(v25, a3, 0.0);
    v12 = v26;
  }
LABEL_22:
  v27 = (*(uint64_t (**)(OZMaterialCompoundLayer *, const CMTime *))(*(_QWORD *)a1 + 992))(a1, a3);
  (*(void (**)(PCSharedCount *__return_ptr, OZMaterialCompoundLayer *, uint64_t, const CMTime *, uint64_t, void *, _BOOL8, double, double))(*(_QWORD *)a1 + 1056))(&v119, a1, a2, a3, v27, v8, ShouldRotateSide, v9, v12);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v103, &v119);
  v28 = (_QWORD *)LiMaterialLayerUniform::get(*(os_unfair_lock_s **)a2, (uint64_t)&v103);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v104);
  v29 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  os_unfair_lock_opaque = v29[147]._os_unfair_lock_opaque;
  if ((signed int)v29[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v31 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v31 = v29[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v29[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v31);
  v32 = *(_QWORD *)&v29[148]._os_unfair_lock_opaque + 152 * (int)v29[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v32 - 152) = v28[34];
  v103.var0 = (PC_Sp_counted_base *)v17;
  ProShade::Value::set(v32 - 144, (const PCString *)3, 1, &v103);
  v33 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("anisotropic"));
  if (v33)
    v34 = objc_msgSend(v33, "BOOLValue");
  else
    v34 = 0;
  if (!v119.var0)
    throw_PCNullPointerException(1);
  if (v34)
    v35 = 0;
  else
    v35 = 3;
  *((_DWORD *)v119.var0 + 16) = v35;
  if (v34)
  {
    v36 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("grooviness"));
    if (v36)
    {
      objc_msgSend(v36, "doubleValue");
      v38 = v37;
    }
    else
    {
      v38 = 0;
    }
    v121 = 0uLL;
    v122.f64[0] = 0.0;
    v112 = 0x3FF0000000000000;
    v109 = 0x3FF0000000000000;
    v106 = 0x3FF0000000000000;
    v103.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
    v104 = 0u;
    v105 = 0u;
    v107 = 0u;
    v108 = 0u;
    v110 = 0u;
    v111 = 0u;
    v116[1] = 0.0;
    v116[2] = 0.0;
    v116[0] = 1.0;
    v118 = 0;
    v117 = 0uLL;
    PCMatrix44Tmpl<double>::transform<double>((double *)&v103, v116, (double *)&v117);
    v101 = v117;
    v102 = v118;
    v39 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v40 = v39[147]._os_unfair_lock_opaque;
    if ((signed int)v39[146]._os_unfair_lock_opaque <= v40)
      v41 = (2 * (v40 + 1)) | 1;
    else
      v41 = v39[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v39[144]._os_unfair_lock_opaque, v40 + 1, v41);
    v42 = *(_QWORD *)&v39[148]._os_unfair_lock_opaque + 152 * (int)v39[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v42 - 152) = v28[206];
    ProShade::Value::set(v42 - 144, (const PCString *)3, 3, &v101);
    v43 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v44 = v43[147]._os_unfair_lock_opaque;
    if ((signed int)v43[146]._os_unfair_lock_opaque <= v44)
      v45 = (2 * (v44 + 1)) | 1;
    else
      v45 = v43[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v43[144]._os_unfair_lock_opaque, v44 + 1, v45);
    v46 = *(_QWORD *)&v43[148]._os_unfair_lock_opaque + 152 * (int)v43[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v46 - 152) = v28[202];
    ProShade::Value::set(v46 - 144, (const PCString *)3, 3, &v121);
    v47 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v48 = v47[147]._os_unfair_lock_opaque;
    if ((signed int)v47[146]._os_unfair_lock_opaque <= v48)
      v49 = (2 * (v48 + 1)) | 1;
    else
      v49 = v47[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v47[144]._os_unfair_lock_opaque, v48 + 1, v49);
    v50 = *(_QWORD *)&v47[148]._os_unfair_lock_opaque + 152 * (int)v47[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v50 - 152) = v28[210];
    *(_QWORD *)&v117 = v38;
    ProShade::Value::set(v50 - 144, (const PCString *)3, 1, &v117);
  }
  v51 = v20;
  v112 = 0x3FF0000000000000;
  v109 = 0x3FF0000000000000;
  v106 = 0x3FF0000000000000;
  v103.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  v104 = 0u;
  v105 = 0u;
  v107 = 0u;
  v108 = 0u;
  v110 = 0u;
  v111 = 0u;
  OZMaterialCompoundLayer::getTextureTransform((OZChannelBase *)a1, a2, a3, (float64x2_t *)&v103, &v113, v51);
  v114 = ShouldRotateSide;
  UseTriplanarMapping = OZMaterialCompoundLayer::getUseTriplanarMapping(a1, a3);
  if (OZGetSpecularIntensityAsset(a4, v52))
  {
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v101, &v119);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v101 + 1);
    v54 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("specular intensity black point"));
    if (v54)
    {
      objc_msgSend(v54, "doubleValue");
      v56 = v55;
    }
    else
    {
      v56 = 0;
    }
    v57 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("specular intensity white point"), (_QWORD)v101);
    if (v57)
    {
      objc_msgSend(v57, "doubleValue");
      v59 = v58;
    }
    else
    {
      v59 = 1.0;
    }
    v60 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v61 = v60[147]._os_unfair_lock_opaque;
    if ((signed int)v60[146]._os_unfair_lock_opaque <= v61)
      v62 = (2 * (v61 + 1)) | 1;
    else
      v62 = v60[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v60[144]._os_unfair_lock_opaque, v61 + 1, v62);
    v63 = *(_QWORD *)&v60[148]._os_unfair_lock_opaque + 152 * (int)v60[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v63 - 152) = v28[138];
    *(_QWORD *)&v101 = v56;
    ProShade::Value::set(v63 - 144, (const PCString *)3, 1, &v101);
    v64 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v65 = v64[147]._os_unfair_lock_opaque;
    if ((signed int)v64[146]._os_unfair_lock_opaque <= v65)
      v66 = (2 * (v65 + 1)) | 1;
    else
      v66 = v64[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v64[144]._os_unfair_lock_opaque, v65 + 1, v66);
    v67 = *(_QWORD *)&v64[148]._os_unfair_lock_opaque + 152 * (int)v64[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v67 - 152) = v28[142];
    *(double *)&v101 = v59;
    ProShade::Value::set(v67 - 144, (const PCString *)3, 1, &v101);
    v68 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v69 = v68[147]._os_unfair_lock_opaque;
    if ((signed int)v68[146]._os_unfair_lock_opaque <= v69)
      v70 = (2 * (v69 + 1)) | 1;
    else
      v70 = v68[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v68[144]._os_unfair_lock_opaque, v69 + 1, v70);
    v71 = *(_QWORD *)&v68[148]._os_unfair_lock_opaque + 152 * (int)v68[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v71 - 152) = v28[26];
    *(double *)&v101 = v9;
    ProShade::Value::set(v71 - 144, (const PCString *)3, 1, &v101);
  }
  if (v22)
  {
    if (!v119.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v119.var0 + 69) = 1;
  }
  else
  {
    OZGetSpecularShininessAsset(a4, v53);
  }
  v72 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("specular shininess black point"), (_QWORD)v101);
  if (v72)
  {
    objc_msgSend(v72, "doubleValue");
    v74 = v73;
  }
  else
  {
    v74 = 0;
  }
  v75 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("specular shininess white point"));
  if (v75)
  {
    objc_msgSend(v75, "doubleValue");
    v77 = v76;
  }
  else
  {
    v77 = 1.0;
  }
  v78 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v79 = v78[147]._os_unfair_lock_opaque;
  if ((signed int)v78[146]._os_unfair_lock_opaque <= v79)
    v80 = (2 * (v79 + 1)) | 1;
  else
    v80 = v78[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v78[144]._os_unfair_lock_opaque, v79 + 1, v80);
  v81 = *(_QWORD *)&v78[148]._os_unfair_lock_opaque + 152 * (int)v78[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v81 - 152) = v28[118];
  *(_QWORD *)&v101 = v74;
  ProShade::Value::set(v81 - 144, (const PCString *)3, 1, &v101);
  v82 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v83 = v82[147]._os_unfair_lock_opaque;
  if ((signed int)v82[146]._os_unfair_lock_opaque <= v83)
    v84 = (2 * (v83 + 1)) | 1;
  else
    v84 = v82[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v82[144]._os_unfair_lock_opaque, v83 + 1, v84);
  v85 = *(_QWORD *)&v82[148]._os_unfair_lock_opaque + 152 * (int)v82[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v85 - 152) = v28[122];
  *(double *)&v101 = v77;
  ProShade::Value::set(v85 - 144, (const PCString *)3, 1, &v101);
  v86 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v87 = v86[147]._os_unfair_lock_opaque;
  if ((signed int)v86[146]._os_unfair_lock_opaque <= v87)
    v88 = (2 * (v87 + 1)) | 1;
  else
    v88 = v86[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v86[144]._os_unfair_lock_opaque, v87 + 1, v88);
  v89 = *(_QWORD *)&v86[148]._os_unfair_lock_opaque + 152 * (int)v86[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v89 - 152) = v28[30];
  *(double *)&v101 = v12;
  ProShade::Value::set(v89 - 144, (const PCString *)3, 1, &v101);
  v90 = (void *)objc_msgSend(a4, "objectForKey:", CFSTR("color model"));
  v91 = v90;
  if (v90)
  {
    if ((objc_msgSend(v90, "isEqualToString:", CFSTR("surface")) & 1) != 0)
    {
      v92 = 0;
    }
    else if (objc_msgSend(v91, "isEqualToString:", CFSTR("solid")))
    {
      WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*(FxColorDescription **)(a2 + 16));
      PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v101, 1.0, 1.0, 1.0, 1.0, WorkingColorSpace);
      v94 = *(os_unfair_lock_s **)a2;
      if (!*(_QWORD *)a2)
        throw_PCNullPointerException(1);
      v95 = v101;
      v96 = v94[147]._os_unfair_lock_opaque;
      if ((signed int)v94[146]._os_unfair_lock_opaque <= v96)
        v97 = (2 * (v96 + 1)) | 1;
      else
        v97 = v94[146]._os_unfair_lock_opaque;
      PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v94[144]._os_unfair_lock_opaque, v96 + 1, v97);
      v98 = *(_QWORD *)&v94[148]._os_unfair_lock_opaque + 152 * (int)v94[147]._os_unfair_lock_opaque;
      *(_QWORD *)(v98 - 152) = v28[2];
      v121 = vcvtq_f64_f32(*(float32x2_t *)&v95);
      v122 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v95 + 8));
      ProShade::Value::set(v98 - 144, (const PCString *)3, 4, &v121);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v102);
      v92 = 1;
    }
    else if (objc_msgSend(v91, "isEqualToString:", CFSTR("image")))
    {
      v92 = 3;
    }
    else
    {
      v92 = 0;
    }
    v99 = operator new();
    *(_QWORD *)(v99 + 24) = 0;
    *(_BYTE *)(v99 + 32) = 1;
    *(_QWORD *)(v99 + 16) = &unk_1E65735F0;
    *(_QWORD *)(v99 + 16) = &off_1E6573590;
    var0 = v119.var0;
    *(PCSharedCount *)(v99 + 8) = v119;
    *(_QWORD *)(v99 + 16) = &unk_1E65734E8;
    *(_QWORD *)v99 = &unk_1E65734A0;
    if (!var0)
      throw_PCNullPointerException(1);
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)var0 + 9, (PCShared_base *)v99);
    if (!v119.var0)
      throw_PCNullPointerException(1);
    *((_DWORD *)v119.var0 + 36) = v92;
  }
  PCSharedCount::~PCSharedCount(&v120);
}

void sub_1B2EA05D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v3 - 152));
  _Unwind_Resume(a1);
}

double OZMaterialCompoundLayer::getBumpGain()
{
  return 1.0;
}

uint64_t OZMaterialCompoundLayer::getBumpInvert()
{
  return 0;
}

void OZMaterialCompoundLayer::appendBumpLayer(OZMaterialCompoundLayer *a1, const char *a2, const CMTime *a3, NSDictionary *a4)
{
  uint64_t v8;
  id v9;
  id v10;
  double v11;
  float v12;
  int v13;
  id v14;
  _BOOL8 ShouldRotateSide;
  double v16;
  uint64_t v17;
  uint64_t v18;
  PCSharedCount v19;

  v8 = OZGetImageAsset(a4, a2);
  v9 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("inserts"));
  v10 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("scale"));
  if (v10)
  {
    objc_msgSend(v10, "doubleValue");
    v12 = v11;
  }
  else
  {
    v12 = 1.0;
  }
  v13 = objc_msgSend(-[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("map type")), "isEqualToString:", CFSTR("normal map"));
  v14 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("rotate side"));
  if (v14 && objc_msgSend(v14, "BOOLValue"))
    ShouldRotateSide = !OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  else
    ShouldRotateSide = OZMaterialCompoundLayer::getShouldRotateSide(a1, a3);
  v16 = (*(double (**)(OZMaterialCompoundLayer *, NSDictionary *, const CMTime *, const char *))(*(_QWORD *)a1 + 960))(a1, a4, a3, a2);
  v17 = (*(uint64_t (**)(OZMaterialCompoundLayer *, NSDictionary *, const CMTime *, const char *))(*(_QWORD *)a1 + 968))(a1, a4, a3, a2);
  (*(void (**)(uint64_t *__return_ptr, OZMaterialCompoundLayer *, const char *, const CMTime *, uint64_t, uint64_t, id, _BOOL8, _QWORD, double, float))(*(_QWORD *)a1 + 1088))(&v18, a1, a2, a3, v17, v8, v9, ShouldRotateSide, v13 ^ 1u, v16, v12);
  PCSharedCount::~PCSharedCount(&v19);
}

uint64_t OZMaterialCompoundLayer::appendAbsorbLayer(uint64_t a1, const char *a2, uint64_t a3, NSDictionary *a4)
{
  uint64_t v8;
  id v9;
  double v10;
  float v11;
  id v12;
  double v13;
  float v14;
  id v15;
  __n128 v16;
  double v17;

  v8 = OZGetImageAsset(a4, a2);
  v9 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("scale"));
  if (v9)
  {
    objc_msgSend(v9, "doubleValue");
    v11 = v10;
  }
  else
  {
    v11 = 1.0;
  }
  v12 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("black point"));
  if (v12)
  {
    objc_msgSend(v12, "doubleValue");
    v14 = v13;
  }
  else
  {
    v14 = 0.0;
  }
  v15 = -[NSDictionary objectForKey:](a4, "objectForKey:", CFSTR("white point"));
  if (v15)
  {
    objc_msgSend(v15, "doubleValue");
    v16.n128_f32[0] = v17;
  }
  else
  {
    v16.n128_u32[0] = 1.0;
  }
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, float, float, float, __n128))(*(_QWORD *)a1 + 1096))(a1, a2, a3, v8, v11, 1.0, v14, v16);
}

uint64_t OZMaterialCompoundLayer::getCurrentLayers(OZMaterialCompoundLayer *this, const CMTime *a2)
{
  int ValueAsInt;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), a2, 0.0);
  v5 = *((_QWORD *)this + 139);
  v6 = *((_QWORD *)this + 138);
  v7 = (void *)(*(uint64_t (**)(OZMaterialCompoundLayer *, const CMTime *))(*(_QWORD *)this + 952))(this, a2);
  v8 = v7;
  if (v5 == v6)
  {
    if (objc_msgSend(v7, "count") > (unint64_t)ValueAsInt)
    {
LABEL_13:
      if (ValueAsInt != -1)
        return objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", ValueAsInt), "objectForKey:", CFSTR("layers"));
    }
    return 0;
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (result)
    {
      v10 = result;
      v11 = 0;
      v12 = *(_QWORD *)v16;
      while (2)
      {
        v13 = 0;
        v14 = v11 + v10;
        do
        {
          if (*(_QWORD *)v16 != v12)
            objc_enumerationMutation(v8);
          if (objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v13), "objectForKey:", CFSTR("tag")), "intValue") == ValueAsInt)
          {
            ValueAsInt = v11 + v13;
            goto LABEL_13;
          }
          ++v13;
        }
        while (v10 != v13);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        result = 0;
        v11 = v14;
        if (v10)
          continue;
        break;
      }
    }
  }
  return result;
}

uint64_t OZMaterialCompoundLayer::collectInternalTexturesFromLayeredMaterial@<X0>(OZMaterialCompoundLayer *this@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[5];
  id v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (void *)(*(uint64_t (**)(OZMaterialCompoundLayer *, _QWORD))(*(_QWORD *)this + 944))(this, MEMORY[0x1E0CA2E68]);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v19;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        v8 = OZCreateURLForAssetLayer(*(NSDictionary **)(*((_QWORD *)&v18 + 1) + 8 * v7));
        if (v8)
        {
          v23 = v8;
          v10 = (_QWORD *)a2[1];
          v9 = a2[2];
          if ((unint64_t)v10 >= v9)
          {
            v12 = ((uint64_t)v10 - *a2) >> 3;
            if ((unint64_t)(v12 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v13 = v9 - *a2;
            v14 = v13 >> 2;
            if (v13 >> 2 <= (unint64_t)(v12 + 1))
              v14 = v12 + 1;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            v22[4] = a2 + 2;
            if (v15)
            {
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v15);
              v8 = v23;
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[8 * v12];
            v22[0] = v16;
            v22[1] = v17;
            v22[3] = &v16[8 * v15];
            *(_QWORD *)v17 = v8;
            v23 = 0;
            v22[2] = v17 + 8;
            std::vector<PCNSRef<NSURL *>>::__swap_out_circular_buffer(a2, v22);
            v11 = (_QWORD *)a2[1];
            std::__split_buffer<PCNSRef<NSURL *>>::~__split_buffer((uint64_t)v22);
          }
          else
          {
            *v10 = v8;
            v11 = v10 + 1;
            v23 = 0;
            a2[1] = (uint64_t)v11;
          }
          a2[1] = (uint64_t)v11;
          ProCore_Impl::PCNSRefImpl::release(&v23);
        }
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B2EA0C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::vector<PCNSRef<NSURL *>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialCompoundLayer::appendLayersToLayeredMaterial(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v2 = *(__int128 **)(a2 + 16);
  v3 = *((_QWORD *)v2 + 2);
  v5 = *v2;
  v6 = v3;
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 944))(a1, &v5);
}

uint64_t std::vector<PCNSRef<NSURL *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>,std::reverse_iterator<PCNSRef<NSURL *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      *(_QWORD *)(v7 - 8) = v10;
      ProCore_Impl::PCNSRefImpl::retain((id *)(v7 - 8));
      v7 = *((_QWORD *)&v16 + 1) - 8;
      *((_QWORD *)&v16 + 1) -= 8;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B2EA0DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

id *std::_AllocatorDestroyRangeReverse<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<PCNSRef<NSURL *>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

id *std::__allocator_destroy[abi:ne180100]<std::allocator<PCNSRef<NSURL *>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>,std::reverse_iterator<std::reverse_iterator<PCNSRef<NSURL *>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *result;

  for (result = *(id **)(a2 + 32); result != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    ProCore_Impl::PCNSRefImpl::release(result);
    result = (id *)(*(_QWORD *)(a2 + 32) + 8);
  }
  return result;
}

uint64_t std::__split_buffer<PCNSRef<NSURL *>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<PCNSRef<NSURL *>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<PCNSRef<NSURL *>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 8;
    ProCore_Impl::PCNSRefImpl::release((id *)(v4 - 8));
  }
}

void OZStyle::OZStyle(OZStyle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  char *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  v7 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZStyle *)((char *)this + 32));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = off_1E659F308;
  *((_QWORD *)this + 2) = &unk_1E659F430;
  *((_QWORD *)this + 6) = &unk_1E659F688;
  OZChannelObjectRoot::OZChannelObjectRoot((OZStyle *)((char *)this + 72), a3, 0, a4, 0x20u);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Randomize Seed Channel"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 328), (const PCString *)&v8, (OZChannelFolder *)((char *)this + 72), 0x12Du, 0, 0, 0);
  PCString::~PCString((PCString *)&v8);
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 35) = v7;
  v8 = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v10 = v8;
  v11 = v9;
  OZChannelObjectRootBase::setTimeExtent((OZStyle *)((char *)this + 72), (const PCTimeRange *)&v8, 0);
}

void sub_1B2EA10A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  OZChannelObjectRoot *v2;
  void **v3;
  OZChannel *v4;
  void **v5;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;

  v5 = v3;
  v7 = *v5;
  if (*v5)
  {
    v1[61] = v7;
    operator delete(v7);
  }
  OZChannel::~OZChannel(v4);
  OZChannelObjectRoot::~OZChannelObjectRoot(v2);
  v8 = (std::__shared_weak_count *)v1[8];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v1[2] = &unk_1E6588EA0;
  v9 = v1[3];
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v1[3] = 0;
  }
  _Unwind_Resume(a1);
}

void OZStyle::OZStyle(OZStyle *this, const OZStyle *a2, char a3)
{
  uint64_t v6;
  char *v7;
  OZChannelBase *v8;
  unsigned int NextUniqueID;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  v7 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZStyle *)((char *)this + 32));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = off_1E659F308;
  *((_QWORD *)this + 2) = &unk_1E659F430;
  *((_QWORD *)this + 6) = &unk_1E659F688;
  OZChannelObjectRoot::OZChannelObjectRoot((OZStyle *)((char *)this + 72), (const OZStyle *)((char *)a2 + 72), 0);
  OZChannel::OZChannel((OZChannel *)((char *)this + 328), (const OZChannelBase *)((char *)a2 + 328), (OZChannelFolder *)((char *)this + 72));
  *((_QWORD *)this + 41) = &off_1E65531D8;
  *((_QWORD *)this + 43) = &unk_1E6553538;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 63) = *((_QWORD *)a2 + 63);
  *((_QWORD *)this + 35) = v7;
  if ((a3 & 2) != 0)
  {
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 72), NextUniqueID);
  }
}

void sub_1B2EA1220(_Unwind_Exception *a1)
{
  _QWORD *v1;
  OZChannelObjectRoot *v2;
  void **v3;
  OZChannel *v4;
  void *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v6 = *v3;
  if (*v3)
  {
    v1[61] = v6;
    operator delete(v6);
  }
  OZChannel::~OZChannel(v4);
  OZChannelObjectRoot::~OZChannelObjectRoot(v2);
  v7 = (std::__shared_weak_count *)v1[8];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v1[2] = &unk_1E6588EA0;
  v8 = v1[3];
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v1[3] = 0;
  }
  _Unwind_Resume(a1);
}

void OZStyle::OZStyle(OZStyle *this, const OZStyle *a2, OZSceneNode *a3, char a4)
{
  uint64_t v5;

  OZStyle::OZStyle(this, a2, a4);
  *(_QWORD *)(v5 + 504) = a3;
}

void OZStyle::~OZStyle(OZStyle *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E659F308;
  *((_QWORD *)this + 2) = &unk_1E659F430;
  *((_QWORD *)this + 6) = &unk_1E659F688;
  v2 = (void *)*((_QWORD *)this + 60);
  if (v2)
  {
    *((_QWORD *)this + 61) = v2;
    operator delete(v2);
  }
  OZChannel::~OZChannel((OZChannel *)((char *)this + 328));
  OZChannelObjectRoot::~OZChannelObjectRoot((OZStyle *)((char *)this + 72));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *((_QWORD *)this + 2) = &unk_1E6588EA0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    *((_QWORD *)this + 3) = 0;
  }
}

uint64_t OZStyle::deleteThis(OZStyle *this, OZChannelBase *a2)
{
  return (*(uint64_t (**)(_QWORD, OZChannelBase *))(**((_QWORD **)this + 63) + 608))(*((_QWORD *)this + 63), a2);
}

uint64_t `non-virtual thunk to'OZStyle::deleteThis(OZStyle *this, OZChannelBase *a2)
{
  return (*(uint64_t (**)(_QWORD, OZChannelBase *))(**((_QWORD **)this + 61) + 608))(*((_QWORD *)this + 61), a2);
}

uint64_t OZStyle::getScene(OZStyle *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 63);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZStyle::getScene(OZStyle *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 61);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  return result;
}

uint64_t OZStyle::setSceneNode(uint64_t this, OZSceneNode *a2)
{
  *(_QWORD *)(this + 504) = a2;
  return this;
}

void OZStyle::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 72), a2, a3);
}

void `non-virtual thunk to'OZStyle::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 56), a2, a3);
}

_QWORD *OZStyle::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 72), a2);
}

_QWORD *`non-virtual thunk to'OZStyle::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 56), a2);
}

uint64_t OZStyle::getPasteEntry(OZStyle *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZStyle::getPasteEntry(OZStyle *this, OZChannelBase *a2)
{
  return 0;
}

OZScene *OZStyle::registerAllMaterials(OZScene *this)
{
  OZMaterialBase **v1;
  OZMaterialBase **v2;
  OZStyle *v3;
  OZMaterialBase *v4;

  v1 = (OZMaterialBase **)*((_QWORD *)this + 60);
  v2 = (OZMaterialBase **)*((_QWORD *)this + 61);
  if (v1 != v2)
  {
    v3 = this;
    do
    {
      v4 = *v1++;
      this = OZStyle::registerMaterial(v3, v4);
    }
    while (v1 != v2);
  }
  return this;
}

OZScene *OZStyle::registerMaterial(OZStyle *this, OZMaterialBase *a2)
{
  OZScene *result;
  uint64_t v5;
  OZObjectManipulator *v6;

  result = (OZScene *)(*(uint64_t (**)(OZStyle *))(*(_QWORD *)this + 128))(this);
  if (result)
  {
    v5 = (uint64_t)result;
    if (a2)
      v6 = (OZMaterialBase *)((char *)a2 + 16);
    else
      v6 = 0;
    OZScene::registerObject(result, v6);
    return (OZScene *)OZScene::addNodeDependency(v5, *((_DWORD *)a2 + 44), *((_DWORD *)this + 24));
  }
  return result;
}

void OZStyle::unregisterAllMaterials(OZStyle *this)
{
  OZMaterialBase **v1;
  OZMaterialBase **v2;
  OZMaterialBase *v4;

  v1 = (OZMaterialBase **)*((_QWORD *)this + 60);
  v2 = (OZMaterialBase **)*((_QWORD *)this + 61);
  while (v1 != v2)
  {
    v4 = *v1++;
    OZStyle::unregisterMaterial(this, v4);
  }
}

void OZStyle::unregisterMaterial(OZStyle *this, OZMaterialBase *a2)
{
  OZScene *v3;
  OZScene *v4;
  OZObjectManipulator *v5;

  v3 = (OZScene *)(*(uint64_t (**)(OZStyle *))(*(_QWORD *)this + 128))(this);
  if (v3)
  {
    v4 = v3;
    if (a2)
      v5 = (OZMaterialBase *)((char *)a2 + 16);
    else
      v5 = 0;
    OZScene::unregisterObject(v3, v5);
    OZScene::removeAllDependencies(v4, *((_DWORD *)a2 + 44));
  }
}

uint64_t OZStyle::addMaterial(OZStyle *this, OZMaterialBase *a2)
{
  OZChannelBase *v4;
  OZChannelBase *v5;
  OZChannelObjectRootBase *v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  CMTime v25[2];

  v4 = (OZChannelBase *)(*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)a2 + 208))(a2);
  OZChannelBase::setFlag(v4, 8, 0);
  v5 = (OZChannelBase *)(*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)a2 + 208))(a2);
  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 72), v5);
  v6 = (OZChannelObjectRootBase *)(*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)a2 + 208))(a2);
  v7 = (*(uint64_t (**)(OZStyle *))(*(_QWORD *)this + 112))(this);
  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v7 + 712))(v25);
  OZChannelObjectRootBase::setTimeExtent(v6, (const PCTimeRange *)v25, 1);
  v8 = (__n128 *)(*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)a2 + 208))(a2);
  v9 = (*(uint64_t (**)(OZStyle *))(*(_QWORD *)this + 112))(this);
  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v9 + 320))(v25);
  OZChannelObjectRootBase::setTimeOffset(v8, v25, 1);
  v11 = (_QWORD *)*((_QWORD *)this + 61);
  v10 = *((_QWORD *)this + 62);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *((_QWORD *)this + 60);
    v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = v10 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 496, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = a2;
    v12 = v19 + 8;
    v22 = (char *)*((_QWORD *)this + 60);
    v21 = (char *)*((_QWORD *)this + 61);
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)this + 60);
    }
    *((_QWORD *)this + 60) = v19;
    *((_QWORD *)this + 61) = v12;
    *((_QWORD *)this + 62) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v11 = a2;
    v12 = v11 + 1;
  }
  *((_QWORD *)this + 61) = v12;
  OZMaterialBase::setOwner((uint64_t)a2, (OZStyle *)((char *)this + 16));
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 424))((char *)this + 16);
}

uint64_t OZStyle::removeMaterialAtIndex(OZStyle *this, unsigned int a2)
{
  char **v3;
  char *v4;
  OZChannelBase *v5;
  char **v6;
  int64_t v7;

  v3 = (char **)(*((_QWORD *)this + 60) + 8 * a2);
  v4 = *v3;
  OZMaterialBase::removeThisFromBehaviors(*v3);
  v5 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 208))(v4);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 72), v5);
  v6 = (char **)*((_QWORD *)this + 61);
  v7 = (char *)v6 - (char *)(v3 + 1);
  if (v6 != v3 + 1)
    memmove(v3, v3 + 1, (char *)v6 - (char *)(v3 + 1));
  *((_QWORD *)this + 61) = (char *)v3 + v7;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t OZStyle::didDeleteMaterialWithFacetAssignment(OZStyle *this, int a2)
{
  OZChannel *v2;
  const CMTime *v3;
  double v4;

  v2 = (OZChannel *)(**((_QWORD **)this + 60) + 568);
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v4 = (double)(OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) | a2);
  return OZChannel::setValue(v2, v3, v4, 0);
}

uint64_t OZStyle::didSetFacetAssignmentForMaterial(OZStyle *this, OZMaterialBase *a2)
{
  uint64_t result;
  OZMaterialBase **v5;
  OZMaterialBase **v6;
  int v7;
  const CMTime *v8;
  OZMaterialBase *v9;
  OZChannel *v10;
  int ValueAsInt;

  result = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 568), MEMORY[0x1E0CA2E68], 0.0);
  v5 = (OZMaterialBase **)*((_QWORD *)this + 60);
  v6 = (OZMaterialBase **)*((_QWORD *)this + 61);
  if (v5 != v6)
  {
    v7 = ~(_DWORD)result;
    v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v9 = *v5;
      if (*v5 != a2)
      {
        v10 = (OZChannel *)((char *)v9 + 568);
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)v9 + 568), v8, 0.0);
        result = OZChannel::setValue(v10, v8, (double)(ValueAsInt & v7), 0);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t OZStyle::setNameOfMaterial(OZStyle *this, const PCString *a2, OZMaterialBase *a3)
{
  OZMaterialBase **v3;
  OZMaterialBase **v4;
  uint64_t v6;

  v3 = (OZMaterialBase **)*((_QWORD *)this + 60);
  v4 = (OZMaterialBase **)*((_QWORD *)this + 61);
  if (v3 == v4)
  {
LABEL_5:
    v6 = 0xFFFFFFFFLL;
  }
  else
  {
    v6 = 0;
    while (*v3 != a3)
    {
      ++v3;
      v6 = (v6 + 1);
      if (v3 == v4)
        goto LABEL_5;
    }
  }
  return (*(uint64_t (**)(_QWORD, const PCString *, uint64_t))(**((_QWORD **)this + 63) + 1192))(*((_QWORD *)this + 63), a2, v6);
}

uint64_t `non-virtual thunk to'OZStyle::setNameOfMaterial(OZStyle *this, const PCString *a2, OZMaterialBase *a3)
{
  OZMaterialBase **v3;
  OZMaterialBase **v4;
  uint64_t v6;

  v3 = (OZMaterialBase **)*((_QWORD *)this + 58);
  v4 = (OZMaterialBase **)*((_QWORD *)this + 59);
  if (v3 == v4)
  {
LABEL_5:
    v6 = 0xFFFFFFFFLL;
  }
  else
  {
    v6 = 0;
    while (*v3 != a3)
    {
      ++v3;
      v6 = (v6 + 1);
      if (v3 == v4)
        goto LABEL_5;
    }
  }
  return (*(uint64_t (**)(_QWORD, const PCString *, uint64_t))(**((_QWORD **)this + 61) + 1192))(*((_QWORD *)this + 61), a2, v6);
}

OZChannelBase *OZStyle::assignUniqueIDsToAllMaterials(OZChannelBase *this)
{
  __CFString *var0;
  PCString *var5;
  void *isa;
  OZChannelBase *v4;
  unsigned int NextUniqueID;

  var0 = this[4].var4.var0;
  var5 = this[4].var5;
  while (var0 != (__CFString *)var5)
  {
    OZChannelBase::updateIDGenerator((OZChannelBase *)(*((_DWORD *)var0->isa + 44) + 1));
    isa = var0->isa;
    var0 = (__CFString *)((char *)var0 + 8);
    v4 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)isa + 208))(isa);
    NextUniqueID = OZChannelBase::getNextUniqueID(v4);
    this = OZChannelBase::setID(v4, NextUniqueID);
  }
  return this;
}

uint64_t OZStyle::selectMaterial(OZStyle *this, OZMaterialBase *a2)
{
  OZMaterialBase **v2;
  OZMaterialBase **v3;
  uint64_t v5;

  v2 = (OZMaterialBase **)*((_QWORD *)this + 60);
  v3 = (OZMaterialBase **)*((_QWORD *)this + 61);
  if (v2 == v3)
  {
LABEL_5:
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    v5 = 0;
    while (*v2 != a2)
    {
      ++v2;
      v5 = (v5 + 1);
      if (v2 == v3)
        goto LABEL_5;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 63) + 16) + 536))(*((_QWORD *)this + 63) + 16, v5);
}

uint64_t `non-virtual thunk to'OZStyle::selectMaterial(OZStyle *this, OZMaterialBase *a2)
{
  OZMaterialBase **v2;
  OZMaterialBase **v3;
  uint64_t v5;

  v2 = (OZMaterialBase **)*((_QWORD *)this + 58);
  v3 = (OZMaterialBase **)*((_QWORD *)this + 59);
  if (v2 == v3)
  {
LABEL_5:
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    v5 = 0;
    while (*v2 != a2)
    {
      ++v2;
      v5 = (v5 + 1);
      if (v2 == v3)
        goto LABEL_5;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 61) + 16) + 536))(*((_QWORD *)this + 61) + 16, v5);
}

uint64_t OZStyle::selectMaterialAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t **)(this + 480);
  v2 = *(uint64_t **)(this + 488);
  v4 = a2;
  if (a2 < (unint64_t)(v2 - v3))
  {
    v5 = this;
    if (v3 == v2)
    {
      v7 = *(_QWORD *)(this + 488);
    }
    else
    {
      do
      {
        v6 = *v3++;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 168))(v6);
      }
      while (v3 != v2);
      v2 = *(uint64_t **)(v5 + 480);
      v7 = *(_QWORD *)(v5 + 488);
    }
    if (v4 >= (v7 - (uint64_t)v2) >> 3)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2[v4] + 160))(v2[v4]);
  }
  return this;
}

uint64_t `non-virtual thunk to'OZStyle::selectMaterialAtIndex(OZStyle *this, unsigned int a2)
{
  return OZStyle::selectMaterialAtIndex((uint64_t)this - 16, a2);
}

uint64_t OZStyle::deselectMaterialAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 480);
  if (a2 < (unint64_t)((*(_QWORD *)(this + 488) - v2) >> 3))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * a2) + 168))(*(_QWORD *)(v2 + 8 * a2));
  return this;
}

uint64_t `non-virtual thunk to'OZStyle::deselectMaterialAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 464);
  if (a2 < (unint64_t)((*(_QWORD *)(this + 472) - v2) >> 3))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * a2) + 168))(*(_QWORD *)(v2 + 8 * a2));
  return this;
}

uint64_t OZStyle::sharesSimilarMaterials(OZStyle *this, const OZStyle *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;

  v3 = *((_QWORD *)this + 60);
  v2 = *((_QWORD *)this + 61);
  v4 = (v2 - v3) >> 3;
  if (v4 != (uint64_t)(*((_QWORD *)a2 + 61) - *((_QWORD *)a2 + 60)) >> 3)
    return 0;
  if (v2 == v3)
    return 1;
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = *((_QWORD *)this + 60);
    if (v7 >= (*((_QWORD *)this + 61) - v9) >> 3)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    v10 = *((_QWORD *)a2 + 60);
    if (v7 >= (*((_QWORD *)a2 + 61) - v10) >> 3)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 8 * v7) + 176))(*(_QWORD *)(v9 + 8 * v7), *(_QWORD *)(v10 + 8 * v7));
    v7 = v8++;
    if ((_DWORD)result)
      v12 = v4 > v7;
    else
      v12 = 0;
  }
  while (v12);
  return result;
}

uint64_t OZStyle::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZStyleScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 77);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 104);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 24));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZStyle::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZStyle::writeHeader(this - 6, a2);
}

uint64_t OZStyle::writeBody(uint64_t **this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZStyleScope);
  OZChannelObjectRoot::writeBody((OZChannelObjectRoot *)(this + 9), a2, 0, 1, a5);
  if (((uint64_t (*)(uint64_t **))(*this)[34])(this))
  {
    v8 = ((uint64_t (*)(uint64_t **))(*this)[34])(this);
    if (OZChannel::getValueAsInt((OZChannel *)(v8 + 8232), MEMORY[0x1E0CA2E68], 0.0))
    {
      v9 = this[60];
      v10 = this[61];
      while (v9 != v10)
      {
        v11 = *v9++;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)(v11 + 48) + 16))(v11 + 48, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + 48)
                                                                                             + 24))(v11 + 48, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
    }
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZStyle::writeBody(uint64_t **this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZStyle::writeBody(this - 6, a2, 0, 0, a5);
}

uint64_t *OZStyle::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  uint64_t *result;
  OZFactory *v5;
  OZFactory *v6;
  uint64_t v7;

  result = OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  v6 = this[60];
  v5 = this[61];
  while (v6 != v5)
  {
    v7 = *(_QWORD *)v6;
    v6 = (OZFactory *)((char *)v6 + 8);
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v7 + 264))(v7, a2, 0);
  }
  return result;
}

uint64_t *`non-virtual thunk to'OZStyle::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZStyle::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZStyle::parseBegin(OZStyle *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZStyleScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 72), a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZStyle::parseBegin(OZStyle *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZStyleScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 24), a2);
  return 1;
}

uint64_t OZStyle::parseEnd(OZStyle *this, PCSerializerReadStream *a2)
{
  (*(void (**)(OZStyle *, PCSerializerReadStream *))(*(_QWORD *)this + 88))(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZStyle::parseEnd(OZStyle *this, PCSerializerReadStream *a2)
{
  (*(void (**)(char *, PCSerializerReadStream *))(*((_QWORD *)this - 6) + 88))((char *)this - 48, a2);
  return 1;
}

uint64_t OZStyle::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelObjectRoot::parseElement(this + 9, a2, a3);
  return 1;
}

uint64_t `non-virtual thunk to'OZStyle::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelObjectRoot::parseElement(this + 3, a2, a3);
  return 1;
}

void OZCanvasState::OZCanvasState(OZCanvasState *this)
{
  *(_QWORD *)this = &off_1E659F748;
  *((_QWORD *)this + 1) = 1;
}

void OZCanvasState::OZCanvasState(OZCanvasState *this, const OZCanvasState *a2)
{
  *(_QWORD *)this = &off_1E659F748;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
}

uint64_t OZCanvasState::writeHeader(OZCanvasState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZCanvasStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 84);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZCanvasState::writeBody(OZCanvasState *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZCanvasStateScope);
  v4 = *((unsigned int *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned int *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZCanvasState::parseBegin(OZCanvasState *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZCanvasStateScope);
  return 1;
}

uint64_t OZCanvasState::parseEnd(OZCanvasState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZCanvasState::parseElement(OZCanvasState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v4;
  int v6;

  v6 = 0;
  v4 = *((_DWORD *)a3 + 2);
  if (v4 == 2)
  {
    (*(void (**)(PCStreamElement *, int *))(*(_QWORD *)a3 + 32))(a3, &v6);
    *((_DWORD *)this + 3) = v6;
  }
  else if (v4 == 1)
  {
    (*(void (**)(PCStreamElement *, int *))(*(_QWORD *)a3 + 32))(a3, &v6);
    *((_DWORD *)this + 2) = v6;
  }
  return 0;
}

uint64_t OZFootage::fileSize(OZFootage *this)
{
  void *v2;
  int isSequence;
  int SequenceStart;
  int SequenceEnd;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  const __CFURL **URLforIndex;
  uint64_t v12;
  PCString v14;
  PCString v15;
  const __CFURL *v16;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  (*(void (**)(const __CFURL **__return_ptr, OZFootage *))(*(_QWORD *)this + 1232))(&v16, this);
  isSequence = PCURL::isSequence(&v16);
  PCURL::~PCURL((PCURL *)&v16);
  if (!isSequence)
    return OZSceneNodeFile::fileSize(this);
  (*(void (**)(const __CFURL **__return_ptr, OZFootage *))(*(_QWORD *)this + 1232))(&v16, this);
  PCURL::getPathAsFileSystemString(&v16, (PCURL *)&v15);
  SequenceStart = PCURL::getSequenceStart(&v16);
  SequenceEnd = PCURL::getSequenceEnd(&v16);
  v6 = SequenceEnd - SequenceStart;
  if (SequenceEnd >= SequenceStart)
  {
    v8 = 0;
    v7 = 0;
    v9 = *MEMORY[0x1E0CB2AF0];
    v10 = v6 + 1;
    do
    {
      URLforIndex = (const __CFURL **)PCURL::getURLforIndex(&v16, v8);
      if (URLforIndex)
      {
        PCURL::getAsFileSystemString(URLforIndex, &v14);
        v12 = -[__CFString stringByResolvingSymlinksInPath]((id)PCString::ns_str(&v14), "stringByResolvingSymlinksInPath");
        PCString::~PCString(&v14);
        v7 += objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "attributesOfItemAtPath:error:", v12, 0), "objectForKey:", v9), "unsignedLongLongValue");
      }
      ++v8;
    }
    while (v10 != v8);
  }
  else
  {
    v7 = 0;
  }
  PCString::~PCString(&v15);
  PCURL::~PCURL((PCURL *)&v16);
  return v7;
}

void sub_1B2EA21EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, char a12)
{
  PCString::~PCString(&a11);
  PCURL::~PCURL((PCURL *)&a12);
  _Unwind_Resume(a1);
}

OZChannelBase *OZFootage::isCinematographyAvailable(OZFootage *this, const PCString *a2)
{
  OZChannelBase *result;
  uint64_t v4;
  int v5;
  int v6;
  OZChannel *v8;

  result = (OZChannelBase *)*((_QWORD *)this + 1009);
  if (result)
  {
    v4 = OZChannelBase::setRangeName(result, a2);
    v5 = *(_DWORD *)(v4 + 928);
    result = (OZChannelBase *)(v5 != 0);
    v6 = *(unsigned __int8 *)(v4 + 644);
    if (v5 && v6 == 0)
    {
      v8 = (OZChannel *)((char *)this + 7920);
      if (!OZChannel::getValueAsInt(v8, MEMORY[0x1E0CA2E68], 0.0))
        OZChannel::setValue(v8, MEMORY[0x1E0CA2E68], 1.0, 0);
      return 0;
    }
  }
  return result;
}

uint64_t OZRetimingUtil::GetRetimeFrameChannel(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    return 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v2 + 48))(v2, this);
    if (result)
      break;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      return 0;
  }
  return result;
}

BOOL OZRetimingUtil::CanRetimeSimple(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    return 0;
  while (!(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v2 + 24))(v2, this))
  {
    v2 = (_QWORD *)v2[1];
    if (!v2)
      return 0;
  }
  v4 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    return 0;
  while (!(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v4 + 64))(v4, this))
  {
    v4 = (_QWORD *)v4[1];
    if (!v4)
      return 0;
  }
  v6 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      v7 = (*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v6 + 72))(v6, this);
      if (v7)
        break;
      v6 = (_QWORD *)v6[1];
      if (!v6)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  return v7 != 0;
}

BOOL OZRetimingUtil::CanRetimeFull(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _BOOL4 CanRetimeSimple;
  _BOOL8 result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(this, a2);
  result = 0;
  if (CanRetimeSimple)
  {
    v5 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
    if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    {
      while (!(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v5 + 40))(v5, this))
      {
        v5 = (_QWORD *)v5[1];
        if (!v5)
          return 0;
      }
      v6 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
      if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
        return 0;
      while (!(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v6 + 32))(v6, this))
      {
        v6 = (_QWORD *)v6[1];
        if (!v6)
          return 0;
      }
      v7 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
      if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
      {
        while (1)
        {
          v8 = (*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v7 + 80))(v7, this);
          if (v8)
            break;
          v7 = (_QWORD *)v7[1];
          if (!v7)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        v8 = 0;
      }
      return v8 != 0;
    }
  }
  return result;
}

BOOL OZRetimingUtil::CanRetimeFull(OZRetimingUtil *this, OZSceneNode *a2)
{
  OZRetimingUtil *v2;
  OZChannelObjectRoot *v3;

  v2 = (OZRetimingUtil *)(*(uint64_t (**)(OZRetimingUtil *, OZSceneNode *))(*(_QWORD *)this + 640))(this, a2);
  return OZRetimingUtil::CanRetimeFull(v2, v3);
}

void `anonymous namespace'::GetRawMinOffset(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ObjectManipulator;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  CMTimeEpoch v13;
  CMTime v14;
  CMTime v15;

    || (ObjectManipulator = OZChannelBase::getObjectManipulator(this),
        ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 288))(ObjectManipulator) & 2) != 0))
  {
    v9 = MEMORY[0x1E0CA2E28];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E28];
    v8 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v12 = 0uLL;
    v13 = 0;
    v15 = *(CMTime *)a2;
    *(__n128 *)&v14.value = v12;
    v14.epoch = v13;
    PC_CMTimeCeilingToSampleDuration(&v15, &v14, (uint64_t)&v10);
    *(_OWORD *)a3 = v10;
    v8 = v11;
  }
  *(_QWORD *)(a3 + 16) = v8;
}

__n128 `anonymous namespace'::GetRawMaxOffset@<Q0>(CMTime *a1@<X0>, OZChannelBase *a2@<X1>, CMTime *a3@<X2>, int a4@<W3>, CMTime *a5@<X8>)
{
  OZChannelObjectRoot *v9;
  OZChannelObjectRoot *v10;
  OZChannelObjectRoot *v11;
  int32_t v12;
  CMTime *v13;
  CMTimeEpoch epoch;
  __n128 result;
  uint64_t ObjectManipulator;
  uint64_t v17;
  __n128 *v18;
  CMTime v19;
  __n128 v20;
  CMTimeEpoch v21;
  CMTime v22;
  CMTime v23;
  CMTime time2;
  CMTime time1;

  memset(&v22, 0, sizeof(v22));
  time1 = *a1;
  time2 = a1[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
  {
    time1 = *a3;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
    time1 = v22;
    time2 = v23;
    v12 = CMTimeCompare(&time1, &time2);
    v13 = &v22;
    if (v12 > 0)
      v13 = &v23;
    *(_OWORD *)&a5->value = *(_OWORD *)&v13->value;
    epoch = v13->epoch;
  }
  else
  {
    *(_OWORD *)&a5->value = *(_OWORD *)&v22.value;
    epoch = v22.epoch;
  }
  a5->epoch = epoch;
  v20 = 0uLL;
  v21 = 0;
  time2 = *a5;
  *(__n128 *)&v23.value = v20;
  v23.epoch = v21;
  PC_CMTimeSaferSubtract(&time2, &v23, (uint64_t)&time1);
  result.n128_u64[0] = time1.value;
  *a5 = time1;
  if (a4 == 1)
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator(a2);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
    if (v17)
    {
      time1 = *(CMTime *)(v17 + 1352);
      time2 = *(CMTime *)(v17 + 1376);
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
      time1 = v19;
      *(__n128 *)&time2.value = v20;
      time2.epoch = v21;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      time1 = *a5;
      time2 = v23;
      if (CMTimeCompare(&time1, &time2) <= 0)
        v18 = (__n128 *)a5;
      else
        v18 = (__n128 *)&v23;
      result = *v18;
      a5->epoch = v18[1].n128_i64[0];
      *(__n128 *)&a5->value = result;
    }
  }
  return result;
}

uint64_t OZRetimingUtil::GetTimeRemap(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _QWORD *v2;
  OZChannel *v4;

  v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    return 0;
  while (1)
  {
    v4 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v2 + 40))(v2, this);
    if (v4)
      break;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      return 0;
  }
  return OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t `anonymous namespace'::PreserveLoopOffset(OZChannelBase *this, CMTime *a2, CMTime *a3, const CMTime *a4)
{
  OZChannelObjectRoot *v7;
  int32_t v8;
  CMTime *v9;
  int32_t v10;
  CMTimeEpoch epoch;
  const CMTime *v12;
  double v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  OZChannelObjectRoot *v18;
  double TimeScale;
  const CMTime *v20;
  __int128 v22;
  CMTimeEpoch v23;
  CMTime v24;
  _QWORD v25[3];
  CMTime v26;
  CMTime time2;
  CMTime time1;

  (*((void (**)(_QWORD *__return_ptr))this->var0 + 89))(v25);
  memset(&v24, 0, sizeof(v24));
  OZRetimingUtil::GetMaxLoopOffset(this, (uint64_t)&v24);
  if (OZRetimingUtil::GetEndCondition((OZRetimingUtil *)this, v7))
  {
    time1 = *a2;
    time2 = *a3;
    v8 = CMTimeCompare(&time1, &time2);
    v9 = a3;
    if ((v8 & 0x80000000) == 0)
    {
      time1 = *a2;
      time2 = v24;
      v10 = CMTimeCompare(&time1, &time2);
      v9 = &v24;
      if (v10 <= 0)
        v9 = a2;
    }
    time1 = *v9;
    time2 = *a3;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v22);
    *(_OWORD *)&a2->value = v22;
    epoch = v23;
  }
  else
  {
    *(_OWORD *)&a2->value = *(_OWORD *)&v24.value;
    epoch = v24.epoch;
  }
  a2->epoch = epoch;
  time1 = v26;
  time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
  v13 = RetimingMath::figToFrames((RetimingMath *)&v22, a3, v12);
  v14 = (uint64_t **)&OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  do
  {
    v15 = *v14;
    v16 = **v14;
    v14 = (uint64_t **)(*v14 + 1);
    v17 = (*(uint64_t (**)(uint64_t *, OZChannelBase *))(v16 + 72))(v15, this);
  }
  while (!v17);
  (*(void (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)v17 + 712))(v17, MEMORY[0x1E0CA2E68], 0, v13);
  TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)this, v18);
}

double OZRetimingUtil::GetMinEnd@<D0>(OZChannelBase *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 v7;
  CMTimeEpoch v8;
  CMTime v9;
  CMTime v10;
  CMTime v11[2];
  CMTime v12;

  (*((void (**)(CMTime *__return_ptr))a1->var0 + 89))(v11);
  v9 = v11[0];
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))a1->var0 + 89))(v11, a1);
  v11[0] = v9;
  PC_CMTimeSaferAdd(v11, &v12, (uint64_t)&v10);
  v11[0] = v10;
  *(__n128 *)&v12.value = v7;
  v12.epoch = v8;
  return PC_CMTimeSaferSubtract(v11, &v12, a3);
}

__n128 `anonymous namespace'::GetFrameDuration@<Q0>(OZChannelBase *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t ObjectManipulator;
  uint64_t v5;
  __n128 result;
  uint64_t v7;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
  if (v5)
  {
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), a2).n128_u64[0];
  }
  else
  {
    v7 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v7 + 16);
  }
  return result;
}

double OZRetimingUtil::GetMaxEnd@<D0>(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __n128 v6;
  CMTimeEpoch v7;
  CMTime v8;
  CMTime v9;
  CMTime time1;
  CMTime v11;
  CMTime time2;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  time1 = *(CMTime *)a3;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  if (CMTimeCompare(&time1, &time2))
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&time1, this);
    v8 = time1;
    time1 = v8;
    *(__n128 *)&time2.value = v6;
    time2.epoch = v7;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v9);
    time2 = *(CMTime *)a3;
    v11 = v9;
    PC_CMTimeSaferAdd(&time2, &v11, (uint64_t)&time1);
    result = *(double *)&time1.value;
    *(CMTime *)a3 = time1;
  }
  return result;
}

uint64_t OZRetimingUtil::SetEnd(_QWORD *a1, CMTime *a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  OZRetimingUtil *v7;
  OZChannelObjectRoot *v8;
  _BOOL4 CanRetimeSimple;
  OZChannelObjectRoot *v10;
  OZChannelObjectRoot *v11;
  uint64_t v12;
  OZChannelBase **v13;
  OZChannelBase **v14;
  OZChannelObjectRoot *v15;
  CMTime *v16;
  __int128 v17;
  OZChannelBase *v18;
  CMTime *v19;
  __int128 v20;
  CMTime *v21;
  const CMTime *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34[2];
  CMTime v35;
  CMTime v36;
  CMTime time2;
  CMTime time1;

  v5 = (_QWORD *)*a1;
  result = (uint64_t)(a1 + 1);
  v4 = v5;
  v26 = (_QWORD *)result;
  if (v5 != (_QWORD *)result)
  {
    do
    {
      v7 = (OZRetimingUtil *)v4[4];
      (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(_QWORD *)v7 + 712))(v34, v7);
      CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(v7, v8);
      if (OZRetimingUtil::GetTimeRemap(v7, v10))
        CanRetimeSimple = 0;
      v33 = *(CMTime *)((_BYTE *)v4 + 5);
      memset(&v32, 0, sizeof(v32));
      OZRetimingUtil::GetMinEnd((OZChannelBase *)v7, 1, (uint64_t)&v32);
      memset(&v31, 0, sizeof(v31));
      OZRetimingUtil::GetMaxEnd((OZChannelBase *)v7, v11, (uint64_t)&v31);
      v12 = a3;
      if ((_DWORD)a3)
      {
        v14 = (OZChannelBase **)v4[18];
        v13 = (OZChannelBase **)v4[19];
        while (v14 != v13)
        {
          OZRetimingUtil::GetMinEnd(*v14, 1, (uint64_t)&v36);
          time1 = v32;
          time2 = v36;
          if (CMTimeCompare(&time1, &time2) >= 0)
            v16 = &v32;
          else
            v16 = &v36;
          v17 = *(_OWORD *)&v16->value;
          v32.epoch = v16->epoch;
          *(_OWORD *)&v32.value = v17;
          v18 = *v14++;
          OZRetimingUtil::GetMaxEnd(v18, v15, (uint64_t)&v36);
          time1 = v31;
          time2 = v36;
          if (CMTimeCompare(&time1, &time2) <= 0)
            v19 = &v31;
          else
            v19 = &v36;
          v20 = *(_OWORD *)&v19->value;
          v31.epoch = v19->epoch;
          *(_OWORD *)&v31.value = v20;
        }
      }
      memset(&v30, 0, sizeof(v30));
      time1 = *a2;
      time2 = v30;
      PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v36);
      time1 = v36;
      time2 = v32;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v21 = &v32;
      }
      else
      {
        time1 = v36;
        time2 = v31;
        if (CMTimeCompare(&time1, &time2) <= 0)
          v21 = &v36;
        else
          v21 = &v31;
      }
      a3 = v12;
      v29 = *v21;
      time2 = v34[0];
      time1 = v29;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v35);
      time1 = v35;
      time2 = v30;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v36);
      v34[1] = v36;
      OZChannelObjectRootBase::setTimeExtent(v7, (const PCTimeRange *)v34, 0);
      OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)v7, 0, 1, 1, 1, 1);
      if (CanRetimeSimple)
      {
        v28 = v33;
      }
      v23 = (_QWORD *)v4[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v4[2];
          v25 = *v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v25);
      }
      v4 = v24;
    }
    while (v24 != v26);
  }
  return result;
}

void `anonymous namespace'::SetChildRootEnds(OZChannelBase ***a1, CMTime *a2, uint64_t a3)
{
  OZChannelBase **v3;
  OZChannelBase **v4;
  OZChannelObjectRoot *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  CMTimeValue value;
  CMTimeValue v13;
  uint64_t v14;
  OZChannelObjectRoot *v15;
  const void *ObjectManipulator;
  unint64_t v17;
  uint64_t v18;
  OZChannelBase *v19;
  double Seconds;
  const CMTime *v21;
  CMTime time;
  CMTime time1;
  CMTime v24;
  __n128 v25;
  CMTimeEpoch v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime time2;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if ((OZChannelBase::isLocked(*v3, 1) & 1) == 0)
      {
        (*((void (**)(CMTime *__return_ptr))(*v3)->var0 + 89))(&v27);
        time1 = v27;
        time2 = *a2;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          v25 = 0uLL;
          v26 = 0;
          v24 = v28;
          v31 = v27;
          time1 = v27;
          time2 = *a2;
          PC_CMTimeSaferSubtract(&time2, &v31, (uint64_t)&v29);
          time2 = v29;
          *(__n128 *)&v31.value = v25;
          v31.epoch = v26;
          PC_CMTimeSaferAdd(&time2, &v31, (uint64_t)&v30);
          v24 = v30;
          if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)*v3, v7))
          {
            memset(&time2, 0, sizeof(time2));
            *(_QWORD *)&v31.timescale = 0;
            v31.epoch = 0;
            v31.value = (CMTimeValue)&v31.timescale;
            v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&time2.epoch, 1uLL);
            *v8 = *v3;
            v10 = v8 + 1;
            value = time2.value;
            v11 = *(char **)&time2.timescale;
            v13 = (CMTimeValue)v8;
            if (*(_QWORD *)&time2.timescale != time2.value)
            {
              do
              {
                v14 = *((_QWORD *)v11 - 1);
                v11 -= 8;
                *(_QWORD *)(v13 - 8) = v14;
                v13 -= 8;
              }
              while (v11 != (char *)value);
              v11 = (char *)time2.value;
            }
            time2.value = v13;
            *(_QWORD *)&time2.timescale = v8 + 1;
            time2.epoch = (CMTimeEpoch)&v8[v9];
            if (v11)
              operator delete(v11);
            *(_QWORD *)&time2.timescale = v10;
            OZRetimingUtil::GetRootSetForSetEnd((const void ***)&time2, (uint64_t)&v31, 0);
            OZRetimingUtil::SetEnd(&v31, a2, a3);
            std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy((uint64_t)&v31, *(_QWORD **)&v31.timescale);
            if (time2.value)
            {
              *(_QWORD *)&time2.timescale = time2.value;
              operator delete((void *)time2.value);
            }
          }
          else
          {
            OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)*v3, (const PCTimeRange *)&time1, 0);
            OZChannelObjectRoot::recomputeTimeRangeFromChildren(*v3, 0, 0, 1, 1, 1);
            {
              ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(*v3);
              if (ObjectManipulator)
              else
                v17 = 0;
              v18 = OZChannelBase::getObjectManipulator(*v3);
              if (v18)
              if (v17 | v18)
              {
                v19 = *v3;
                time2 = v27;
                v31 = time1;
                v30 = v24;
                v29 = v28;
                operator/((__int128 *)&v30.value, (uint64_t)&v29, (uint64_t)&time);
                Seconds = CMTimeGetSeconds(&time);
              }
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1B2EA3298(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(v1 - 160, *(_QWORD **)(v1 - 152));
  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void OZRetimingUtil::GetRootSetForSetEnd(const void ***a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  const void **v7;
  const void **v8;
  const void *v9;

  v6 = (_QWORD *)(a2 + 8);
  std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *v6 = 0;
  v8 = *a1;
  v7 = a1[1];
  while (v8 != v7)
  {
    v9 = *v8;
    if (a3)
    else
    ++v8;
  }
}

void `anonymous namespace'::CollectRoots<`anonymous namespace'::TruePred,`anonymous namespace'::SameEndPred>(const void *a1, uint64_t **a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t **v5;
  OZChannelObjectRoot *v6;
  OZChannelObjectRoot *v7;
  __int128 v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v3 = v12;
  v4 = v13;
  if (v12 != v13)
  {
    do
    {
      *(_QWORD *)&v8 = v3;
      v5 = std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>(a2, v3, (uint64_t)&std::piecewise_construct, (_QWORD **)&v8);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v3 + 320))(&v8);
      *(_OWORD *)(v5 + 11) = v8;
      v5[13] = v9;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v3 + 712))(&v8);
      if (v5 + 5 != (uint64_t **)&v8)
      {
        v5[7] = v9;
        *(_OWORD *)(v5 + 5) = v8;
        *((_OWORD *)v5 + 4) = v10;
        v5[10] = v11;
      }
      *(_OWORD *)(v5 + 15) = v8;
      v5[17] = v9;
      ++v3;
    }
    while (v3 != v4);
    v3 = v12;
  }
  if (v3)
  {
    v13 = v3;
    operator delete(v3);
  }
}

void sub_1B2EA3478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::CollectRoots<`anonymous namespace'::SameEndPred,`anonymous namespace'::SameEndPred>(const void *a1, uint64_t **a2)
{
  OZChannelBase *v3;
  OZChannelBase *v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  const void *ObjectManipulator;
  void *v13;
  void *v14;
  OZScene *v15;
  unsigned int *v16;
  unsigned int *i;
  _QWORD *Node;
  _QWORD *v19;
  OZChannelFolder *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  uint64_t **v34;
  OZChannelObjectRoot *v35;
  OZChannelObjectRoot *v36;
  __int128 v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  char *v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  if (a1)
  {
    if (v3)
    {
      v4 = v3;
      v5 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v43, 1uLL);
      v7 = (char *)&v5[v6];
      *v5 = (uint64_t)v4;
      v8 = v5 + 1;
      v10 = v41;
      v9 = v42;
      if (v42 != v41)
      {
        do
        {
          v11 = *--v9;
          *--v5 = v11;
        }
        while (v9 != v10);
        v9 = v41;
      }
      v41 = v5;
      v42 = v8;
      v43 = v7;
      if (v9)
        operator delete(v9);
      v42 = v8;
      if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v4, 0x4000))
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v4);
        if (ObjectManipulator)
        {
          if (v13)
          {
            v14 = v13;
            v15 = (OZScene *)(*(uint64_t (**)(void *))(*(_QWORD *)v13 + 272))(v13);
            if (v15)
            {
              v16 = (unsigned int *)*((_QWORD *)v14 + 133);
              for (i = (unsigned int *)*((_QWORD *)v14 + 132); i != v16; ++i)
              {
                Node = OZScene::getNode(v15, *i);
                v19 = Node;
                if (Node)
                {
                  v20 = (OZChannelFolder *)(*(uint64_t (**)(_QWORD *))(*Node + 640))(Node);
                  if (OZChannelFolder::testFoldFlag(v20, 0x4000)
                    && ((*(uint64_t (**)(_QWORD *, uint64_t))(v19[2] + 56))(v19 + 2, 1) & 1) == 0)
                  {
                    v21 = (*(uint64_t (**)(_QWORD *))(*v19 + 640))(v19);
                    {
                      v22 = v42;
                      if (v42 >= (uint64_t *)v43)
                      {
                        v24 = v42 - v41;
                        if ((unint64_t)(v24 + 1) >> 61)
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        v25 = (v43 - (char *)v41) >> 2;
                        if (v25 <= v24 + 1)
                          v25 = v24 + 1;
                        if ((unint64_t)(v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8)
                          v26 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v26 = v25;
                        if (v26)
                          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v43, v26);
                        else
                          v27 = 0;
                        v28 = (uint64_t *)&v27[8 * v24];
                        *v28 = v21;
                        v23 = v28 + 1;
                        v30 = v41;
                        v29 = v42;
                        if (v42 != v41)
                        {
                          do
                          {
                            v31 = *--v29;
                            *--v28 = v31;
                          }
                          while (v29 != v30);
                          v29 = v41;
                        }
                        v41 = v28;
                        v42 = v23;
                        v43 = &v27[8 * v26];
                        if (v29)
                          operator delete(v29);
                      }
                      else
                      {
                        *v42 = v21;
                        v23 = v22 + 1;
                      }
                      v42 = v23;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v32 = (unint64_t *)v41;
  v33 = (unint64_t *)v42;
  if (v41 != v42)
  {
    do
    {
      *(_QWORD *)&v37 = v32;
      v34 = std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>(a2, v32, (uint64_t)&std::piecewise_construct, (_QWORD **)&v37);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v32 + 320))(&v37);
      *(_OWORD *)(v34 + 11) = v37;
      v34[13] = v38;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v32 + 712))(&v37);
      if (v34 + 5 != (uint64_t **)&v37)
      {
        v34[7] = v38;
        *(_OWORD *)(v34 + 5) = v37;
        *((_OWORD *)v34 + 4) = v39;
        v34[10] = v40;
      }
      *(_OWORD *)(v34 + 15) = v37;
      v34[17] = v38;
      ++v32;
    }
    while (v32 != v33);
    v32 = (unint64_t *)v41;
  }
  if (v32)
  {
    v42 = (uint64_t *)v32;
    operator delete(v32);
  }
}

void sub_1B2EA37F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 `anonymous namespace'::GetRawMinDuration@<Q0>(OZChannelBase *this@<X1>, CMTime *a2@<X0>, int a3@<W2>, CMTime *a4@<X8>)
{
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  uint64_t ObjectManipulator;
  uint64_t v12;
  __n128 *v13;
  CMTime v14;
  CMTime v15;
  __n128 v16;
  CMTimeEpoch v17;
  CMTime time2;
  CMTime time1;

  v16 = 0uLL;
  v17 = 0;
  time1 = a2[1];
  v8 = (__n128 *)MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2))
    v9 = &v16;
  else
    v9 = v8;
  result = *v9;
  *(__n128 *)&a4->value = *v9;
  a4->epoch = v9[1].n128_i64[0];
  if (a3 == 1)
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
    if (v12)
    {
      time1 = *(CMTime *)(v12 + 1352);
      time2 = *a2;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
      time1 = v14;
      *(__n128 *)&time2.value = v16;
      time2.epoch = v17;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v15);
      time1 = *a4;
      time2 = v15;
      if (CMTimeCompare(&time1, &time2) >= 0)
        v13 = (__n128 *)a4;
      else
        v13 = (__n128 *)&v15;
      result = *v13;
      a4->epoch = v13[1].n128_i64[0];
      *(__n128 *)&a4->value = result;
    }
  }
  return result;
}

void `anonymous namespace'::GetRawMaxDuration(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ObjectManipulator;
  OZChannelObjectRoot *v6;
  double TimeScale;
  double v8;
  uint64_t v9;
  uint64_t v10;
  CMTime v11[2];
  CMTime v12;
  CMTime v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  CMTime v17;
  CMTime v18;
  CMTime v19;

  {
    memset(&v17, 0, sizeof(v17));
    memset(v16, 0, sizeof(v16));
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)ObjectManipulator + 280))(v16);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v12, this);
    v11[0] = v12;
    v8 = PC_CMTimeSaferAdd(v11, &v19, (uint64_t)&v13);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, double))this->var0 + 89))(v11, this, v8);
    v18 = v11[0];
    v19 = v13;
    PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&v14);
    *(_OWORD *)a3 = v14;
    v9 = v15;
  }
  else
  {
    v10 = MEMORY[0x1E0CA2E30];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E30];
    v9 = *(_QWORD *)(v10 + 16);
  }
  *(_QWORD *)(a3 + 16) = v9;
}

void OZRetimingUtil::SetTimeOffsetAndExtentInteractive(OZChannelBase *this, CMTime *a2, CMTime *a3, CMTime *a4, const CMTime *a5)
{
  uint64_t v9;
  CMTime *v10;
  OZChannelObjectRoot *v11;
  CMTimeEpoch v12;
  int32_t v13;
  CMTime *v14;
  OZChannelObjectRoot *v15;
  OZChannelObjectRoot *v16;
  _BOOL4 CanRetimeSimple;
  OZChannelObjectRoot *v18;
  int TimeRemap;
  const CMTime *v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime time1;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime time2;

  memset(&v35, 0, sizeof(v35));
  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v35);
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v33, this);
  time1 = *a2;
  time2 = v35;
  if (CMTimeCompare(&time1, &time2)
    || (time1 = *a3, time2 = v33, CMTimeCompare(&time1, &time2))
    || (time1 = a3[1], time2 = v34, CMTimeCompare(&time1, &time2)))
  {
    time1 = v34;
    v9 = MEMORY[0x1E0CA2E68];
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2))
    {
      memset(&v32, 0, sizeof(v32));
      v10 = &v32;
      memset(&v31, 0, sizeof(v31));
      memset(&v30, 0, sizeof(v30));
      memset(&v29, 0, sizeof(v29));
      memset(&v28, 0, sizeof(v28));
      time1 = *a3;
      time2 = v30;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
      time1 = v37;
      time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
      memset(&v27, 0, sizeof(v27));
      time1 = *a3;
      time2 = v29;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
      time1 = v37;
      time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
      *(_OWORD *)&time1.value = *(_OWORD *)v9;
      v12 = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v26.value = *(_OWORD *)&time1.value;
      time1.epoch = v12;
      v26.epoch = v12;
      v23 = *a3;
      time2 = *a3;
      v37 = v32;
      if ((CMTimeCompare(&time2, &v37) & 0x80000000) == 0)
      {
        time2 = v23;
        v37 = v31;
        if (CMTimeCompare(&time2, &v37) <= 0)
          v10 = &v23;
        else
          v10 = &v31;
      }
      v24 = *v10;
      time2 = *a3;
      v37 = a3[1];
      PC_CMTimeSaferAdd(&time2, &v37, (uint64_t)&v36);
      time2 = v36;
      v37 = *a4;
      PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v22);
      time2 = v22;
      v37 = v28;
      if (CMTimeCompare(&time2, &v37) < 0)
      {
        v14 = &v28;
      }
      else
      {
        time2 = v22;
        v37 = v27;
        v13 = CMTimeCompare(&time2, &v37);
        v14 = &v27;
        if (v13 <= 0)
          v14 = &v22;
      }
      time2 = *v14;
      time1 = v24;
      v37 = v24;
      PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v36);
      time2 = v36;
      v37 = *a4;
      PC_CMTimeSaferAdd(&time2, &v37, (uint64_t)&v26);
      time2 = *a2;
      v37 = v35;
      if (CMTimeCompare(&time2, &v37)
        || (time2 = v33, v37 = time1, CMTimeCompare(&time2, &v37))
        || (time2 = v34, v37 = v26, CMTimeCompare(&time2, &v37)))
      {
        CanRetimeSimple = OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, v16);
        TimeRemap = OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v18);
        v36 = *(CMTime *)v9;
        if (!CanRetimeSimple || TimeRemap)
        {
          OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 0, 1, 1, 1, 1);
        }
        else
        {
          OZRetimingUtil::GetLoopOffset(this, &time2);
          v37 = v33;
          PC_CMTimeSaferAdd(&time2, &v37, (uint64_t)&v24);
          time2 = v24;
          v37 = v35;
          PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v36);
          OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 0, 1, 1, 1, 1);
          time2 = time1;
          v37 = *a2;
          PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v24);
          time2 = v36;
          v37 = v24;
          PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v21);
        }
      }
    }
    else
    {
      OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
      OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)a3, 0);
      OZRetimingUtil::SetDefaultRetimingState(this, v15);
    }
  }
}

void OZRetimingUtil::SetDefaultRetimingState(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  OZChannel *v6;
  OZChannel *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  OZChannelDouble *v13;
  __n128 FrameDuration;
  uint64_t ObjectManipulator;
  uint64_t v16;
  OZChannelBase *v17;
  const CMTime *v18;
  Float64 v19;
  double v20;
  const CMTime *v21;
  double v22;
  void *Keyframe;
  void *v24;
  const CMTime *v25;
  Float64 v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35[2];

  v3 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v8 = 0;
    v7 = 0;
    v5 = 0;
    v4 = 0;
LABEL_30:
    v6 = 0;
    goto LABEL_31;
  }
  do
  {
    v4 = (*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v3 + 24))(v3, this);
    if (v4)
      break;
    v3 = (_QWORD *)v3[1];
  }
  while (v3);
  v5 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v8 = 0;
    v7 = 0;
    v3 = 0;
    goto LABEL_30;
  }
  do
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v5 + 32))(v5, this);
    if (v3)
      break;
    v5 = (_QWORD *)v5[1];
  }
  while (v5);
  v6 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v8 = 0;
    v7 = 0;
    v5 = 0;
LABEL_31:
    v9 = 0;
    goto LABEL_32;
  }
  do
  {
    v5 = (_QWORD *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v6->var0 + 5))(v6, this);
    if (v5)
      break;
    v6 = (OZChannel *)v6->var1;
  }
  while (v6);
  v7 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v8 = 0;
    goto LABEL_30;
  }
  do
  {
    v6 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v7->var0 + 6))(v7, this);
    if (v6)
      break;
    v7 = (OZChannel *)v7->var1;
  }
  while (v7);
  v8 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v7 = 0;
    goto LABEL_31;
  }
  do
  {
    v7 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v8 + 56))(v8, this);
    if (v7)
      break;
    v8 = (_QWORD *)v8[1];
  }
  while (v8);
  v8 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    goto LABEL_31;
  do
  {
    v9 = (*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v8 + 64))(v8, this);
    if (v9)
      break;
    v8 = (_QWORD *)v8[1];
  }
  while (v8);
  v10 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v8 = 0;
    goto LABEL_33;
  }
  do
  {
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v10 + 72))(v10, this);
    if (v8)
      break;
    v10 = (_QWORD *)v10[1];
  }
  while (v10);
  v11 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
LABEL_32:
    v10 = 0;
    goto LABEL_33;
  }
  while (1)
  {
    v12 = (*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v11 + 80))(v11, this);
    if (v12)
      break;
    v11 = (_QWORD *)v11[1];
    if (!v11)
      goto LABEL_32;
  }
  v10 = (_QWORD *)v12;
LABEL_33:
  memset(&v33, 0, sizeof(v33));
  if (v6)
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
    if (v16)
    {
      v17 = *(OZChannelBase **)(v16 + 1504);
      if (v17)
        OZChannelBase::setRangeName(v17, (const PCString *)1);
    }
    (*((void (**)(OZChannel *, uint64_t))v6->var0 + 58))(v6, 1);
    OZChannel::deleteAllKeyframes(v6, MEMORY[0x1E0CA2E68]);
    memset(&v32, 0, sizeof(v32));
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v32, this);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v30, this);
    memset(&v29, 0, sizeof(v29));
    v35[0] = v30;
    v34 = v32;
    PC_CMTimeSaferSubtract(v35, &v34, (uint64_t)&v29);
    v35[0] = v30;
    v34 = v32;
    PC_CMTimeSaferSubtract(v35, &v34, (uint64_t)&v28);
    v19 = RetimingMath::figToFrames((RetimingMath *)&v28, &v33, v18);
    v28 = v31;
    v35[0] = v29;
    v20 = v19 + 1.0;
    memset(&v27, 0, sizeof(v27));
    v34 = v31;
    PC_CMTimeSaferAdd(v35, &v34, (uint64_t)&v27);
    v22 = v20 + RetimingMath::figToFrames((RetimingMath *)&v28, &v33, v21);
    OZChannel::setKeyframe(v6, &v29, v20, 1);
    OZChannel::setKeyframe(v6, &v27, v22, 1);
    Keyframe = (void *)OZChannel::getKeyframe(v6, &v29);
    OZChannel::smoothKeyframe(v6, Keyframe, 0);
    v24 = (void *)OZChannel::getKeyframe(v6, &v27);
    OZChannel::smoothKeyframe(v6, v24, 0);
    OZChannel::setUseRetimingExtrapolation(v6, 1);
    (*((void (**)(OZChannel *, _QWORD, _QWORD))v6->var0 + 48))(v6, 0, 0);
  }
  if (v4)
    (*(void (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)v4 + 712))(v4, MEMORY[0x1E0CA2E68], 0, 1.0);
  if (v3)
    (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*v3 + 712))(v3, MEMORY[0x1E0CA2E68], 0, 0.0);
  if (v5)
    (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*v5 + 712))(v5, MEMORY[0x1E0CA2E68], 0, 0.0);
  if (v7)
    OZRetimingUtil::CopyChannelKeyframes(v6, v7, v13);
  if (v9)
    (*(void (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)v9 + 712))(v9, MEMORY[0x1E0CA2E68], 0, 0.0);
  if (v8)
    (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*v8 + 712))(v8, MEMORY[0x1E0CA2E68], 0, 0.0);
  if (v10)
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))this->var0 + 89))(&v30, this, FrameDuration);
    v35[0] = v31;
    v26 = RetimingMath::figToFrames((RetimingMath *)v35, &v33, v25);
    (*(void (**)(_QWORD *, _QWORD, _QWORD, Float64))(*v10 + 712))(v10, MEMORY[0x1E0CA2E68], 0, v26);
  }
}

double OZRetimingUtil::GetLoopOffset@<D0>(OZChannelBase *this@<X0>, _QWORD *a2@<X8>)
{
  OZChannelObjectRoot *v5;
  OZChannelObjectRoot *v6;
  double result;
  OZChannelObjectRoot *v8;
  CMTime v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  CMTime v14;
  CMTime v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*((void (**)(__int128 *__return_ptr))this->var0 + 89))(&v10);
  *(_OWORD *)a2 = v12;
  a2[2] = v13;
  if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, v5)
    && !OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v6))
  {
    if (OZRetimingUtil::GetEndCondition((OZRetimingUtil *)this, v8))
    {
      OZRetimingUtil::GetLoopDuration(this, (uint64_t)&v9);
      v15 = *(CMTime *)a2;
      v14 = v9;
      PC_CMTimeSaferSubtract(&v15, &v14, (uint64_t)&v10);
      result = *(double *)&v10;
      *(_OWORD *)a2 = v10;
      a2[2] = v11;
    }
  }
  return result;
}

void OZRetimingUtil::SetTimeOffsetAndExtent(OZChannelBase *this, CMTime *a2, CMTime *a3, CMTime *a4, const CMTime *a5)
{
  uint64_t v9;
  CMTime *v10;
  OZChannelObjectRoot *v11;
  CMTimeEpoch v12;
  int32_t v13;
  CMTime *v14;
  OZChannelObjectRoot *v15;
  OZChannelObjectRoot *v16;
  _BOOL4 CanRetimeSimple;
  OZChannelObjectRoot *v18;
  int TimeRemap;
  const CMTime *v20;
  const CMTime *v21;
  const CMTime *v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime time1;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime time2;

  memset(&v37, 0, sizeof(v37));
  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v37);
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v35, this);
  time1 = *a2;
  time2 = v37;
  if (CMTimeCompare(&time1, &time2)
    || (time1 = *a3, time2 = v35, CMTimeCompare(&time1, &time2))
    || (time1 = a3[1], time2 = v36, CMTimeCompare(&time1, &time2)))
  {
    time1 = v36;
    v9 = MEMORY[0x1E0CA2E68];
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2))
    {
      memset(&v34, 0, sizeof(v34));
      v10 = &v34;
      memset(&v33, 0, sizeof(v33));
      memset(&v32, 0, sizeof(v32));
      memset(&v31, 0, sizeof(v31));
      memset(&v30, 0, sizeof(v30));
      time1 = *a3;
      time2 = v32;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v39);
      time1 = v39;
      time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v30);
      memset(&v29, 0, sizeof(v29));
      time1 = *a3;
      time2 = v31;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v39);
      time1 = v39;
      time2 = *a4;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
      *(_OWORD *)&time1.value = *(_OWORD *)v9;
      v12 = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v28.value = *(_OWORD *)&time1.value;
      time1.epoch = v12;
      v28.epoch = v12;
      v25 = *a3;
      time2 = *a3;
      v39 = v34;
      if ((CMTimeCompare(&time2, &v39) & 0x80000000) == 0)
      {
        time2 = v25;
        v39 = v33;
        if (CMTimeCompare(&time2, &v39) <= 0)
          v10 = &v25;
        else
          v10 = &v33;
      }
      v26 = *v10;
      time2 = *a3;
      v39 = a3[1];
      PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v38);
      time2 = v38;
      v39 = *a4;
      PC_CMTimeSaferSubtract(&time2, &v39, (uint64_t)&v24);
      time2 = v24;
      v39 = v30;
      if (CMTimeCompare(&time2, &v39) < 0)
      {
        v14 = &v30;
      }
      else
      {
        time2 = v24;
        v39 = v29;
        v13 = CMTimeCompare(&time2, &v39);
        v14 = &v29;
        if (v13 <= 0)
          v14 = &v24;
      }
      time2 = *v14;
      time1 = v26;
      v39 = v26;
      PC_CMTimeSaferSubtract(&time2, &v39, (uint64_t)&v38);
      time2 = v38;
      v39 = *a4;
      PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v28);
      time2 = *a2;
      v39 = v37;
      if (CMTimeCompare(&time2, &v39)
        || (time2 = v35, v39 = time1, CMTimeCompare(&time2, &v39))
        || (time2 = v36, v39 = v28, CMTimeCompare(&time2, &v39)))
      {
        CanRetimeSimple = OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, v16);
        TimeRemap = OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v18);
        v38 = *(CMTime *)v9;
        if (!CanRetimeSimple || TimeRemap)
        {
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 1, 1, 0, 1, 1);
        }
        else
        {
          OZRetimingUtil::GetLoopOffset(this, &time2);
          v39 = v35;
          PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v38);
          OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)&time1, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren(this, 1, 1, 0, 1, 1);
          v39 = time1;
          time2 = v38;
          PC_CMTimeSaferSubtract(&time2, &v39, (uint64_t)&v23);
        }
      }
    }
    else
    {
      OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0);
      OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)this, (const PCTimeRange *)a3, 0);
      OZRetimingUtil::SetDefaultRetimingState(this, v15);
    }
  }
}

double `anonymous namespace'::MoveTimeOffset(OZChannelBase *this, const CMTime *a2, const CMTime *a3)
{
  double result;
  uint64_t ObjectManipulator;
  uint64_t v7;
  OZChannelBase *v8;
  const CMTime *v9;
  CMTime v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;

  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v11);
  time1 = *a2;
  time2 = v11;
  if (CMTimeCompare(&time1, &time2))
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
    if (v7)
    {
      v8 = *(OZChannelBase **)(v7 + 1504);
      if (v8)
        OZChannelBase::setRangeName(v8, (const PCString *)1);
    }
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v10, this);
    time1 = v10;
    time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v11);
    *(_QWORD *)&result = OZChannelObjectRootBase::setTimeOffset((__n128 *)this, a2, 0).n128_u64[0];
  }
  return result;
}

void OZRetimingUtil::SetTimeExtent(OZChannelBase *this, CMTime *a2, CMTime *a3, const CMTime *a4)
{
  const CMTime *v7;
  CMTime v8;

  (*((void (**)(CMTime *__return_ptr))this->var0 + 40))(&v8);
  OZRetimingUtil::SetTimeOffsetAndExtentInteractive(this, &v8, a2, a3, v7);
}

double OZRetimingUtil::GetTimeScale(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _QWORD *v3;
  OZChannel *v4;
  double result;

  if (!OZRetimingUtil::CanRetimeSimple(this, a2))
    return 1.0;
  v3 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      v4 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v3 + 24))(v3, this);
      if (v4)
        break;
      v3 = (_QWORD *)v3[1];
      if (!v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v4 = 0;
  }
  OZChannel::getValueAsDouble(v4, MEMORY[0x1E0CA2E68], 0.0);
  return result;
}

void OZRetimingUtil::CopyChannelKeyframes(OZChannel *this, OZChannel *a2, OZChannelDouble *a3)
{
  double v5;
  uint64_t Extrapolation;
  void **v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t KeyframeInterpolation;
  uint64_t KeyframeFlags;
  uint64_t KeyframeEnabled;
  double v13;
  void *Keyframe;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CMTime v21;
  void **v22;
  void **v23;

  if (this)
  {
    (*((void (**)(OZChannel *, uint64_t, OZChannelDouble *))a2->var0 + 58))(a2, 1, a3);
    v5 = *((double *)this->var16 + 5);
    OZChannel::getKeyframes(this, 0, &v22);
    OZChannel::deleteAllKeyframes(a2, MEMORY[0x1E0CA2E68]);
    Extrapolation = OZChannel::getExtrapolation(this, 0);
    (*((void (**)(OZChannel *, uint64_t, _QWORD))a2->var0 + 48))(a2, Extrapolation, 0);
    v7 = v22;
    if (v23 == v22)
    {
      OZChannel::getValueAsDouble(this, MEMORY[0x1E0CA2E68], 0.0);
      OZChannel::setInitialValue(a2, v5 * v15 / *((double *)a2->var16 + 5), 0);
      v7 = v22;
      if (!v22)
        return;
      goto LABEL_6;
    }
    v8 = 0;
    v9 = 1;
    do
    {
      v19 = 0.0;
      v20 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
      v16 = 0.0;
      OZChannel::getKeyframe(this, v7[v8], &v21, &v20);
      OZChannel::getKeyframeInputTangents(this, v22[v8], &v19, &v18, 0);
      OZChannel::getKeyframeOutputTangents(this, v22[v8], &v17, &v16, 0);
      KeyframeInterpolation = OZChannel::getKeyframeInterpolation(this, v22[v8]);
      KeyframeFlags = OZChannel::getKeyframeFlags(this, v22[v8]);
      KeyframeEnabled = OZChannel::getKeyframeEnabled(this, v22[v8]);
      v20 = v5 * v20;
      v18 = v5 * v18;
      v16 = v5 * v16;
      v13 = *((double *)a2->var16 + 5);
      OZChannel::setKeyframe(a2, &v21, v20 / v13, 0);
      Keyframe = (void *)OZChannel::getKeyframe(a2, &v21);
      OZChannel::setKeyframeFlags(a2, Keyframe, KeyframeFlags);
      OZChannel::setKeyframeEnabled(a2, Keyframe, KeyframeEnabled);
      OZChannel::setKeyframeInterpolation(a2, Keyframe, KeyframeInterpolation);
      OZChannel::setKeyframeInputTangents(a2, Keyframe, v19, v18 / v13, 0);
      OZChannel::setKeyframeOutputTangents(a2, Keyframe, v17, v16 / v13, 0);
      v8 = v9;
      v7 = v22;
      ++v9;
    }
    while (v8 < v23 - v22);
    if (v22)
    {
LABEL_6:
      v23 = v7;
      operator delete(v7);
    }
  }
}

void sub_1B2EA5190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::GetAdjustedNaturalDuration@<X0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t ObjectManipulator;
  OZChannelObjectRoot *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if ((_DWORD)result)
  {
    result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)ObjectManipulator + 280))(&v10, ObjectManipulator);
    *(_OWORD *)a2 = v10;
    v8 = v11;
  }
  else
  {
    v9 = MEMORY[0x1E0CA2E30];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E30];
    v8 = *(_QWORD *)(v9 + 16);
  }
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t OZRetimingUtil::GetEndCondition(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _QWORD *v2;
  OZChannel *v4;

  v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    return 0;
  while (1)
  {
    v4 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v2 + 64))(v2, this);
    if (v4)
      break;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      return 0;
  }
  return OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t `anonymous namespace'::BuildConstantRetimingCurve(OZChannelBase *this, OZChannelObjectRoot *a2, const CMTime *a3, double a4, const CMTime *a5)
{
  _QWORD *v9;
  uint64_t v10;
  OZChannel *v11;
  uint64_t ObjectManipulator;
  uint64_t v13;
  OZChannelBase *v14;
  const CMTime *v15;
  double v16;
  const CMTime *v17;
  double v18;
  void *Keyframe;
  void *v20;
  OZChannelObjectRoot *v21;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;

  v9 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      v10 = (*(uint64_t (**)(_QWORD *, OZChannelBase *, const CMTime *, const CMTime *))(*v9 + 48))(v9, this, a3, a5);
      if (v10)
        break;
      v9 = (_QWORD *)v9[1];
      if (!v9)
        goto LABEL_4;
    }
    v11 = (OZChannel *)v10;
  }
  else
  {
LABEL_4:
    v11 = 0;
  }
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *, OZChannelObjectRoot *, const CMTime *, const CMTime *))this->var0
   + 89))(&v26, this, a2, a3, a5);
  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
  if (v13)
  {
    v14 = *(OZChannelBase **)(v13 + 1504);
    if (v14)
      OZChannelBase::setRangeName(v14, (const PCString *)1);
  }
  (*((void (**)(OZChannel *, uint64_t))v11->var0 + 58))(v11, 1);
  OZChannel::deleteAllKeyframes(v11, MEMORY[0x1E0CA2E68]);
  memset(&v25, 0, sizeof(v25));
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v25, this);
  memset(&v24, 0, sizeof(v24));
  v28 = v26;
  v27 = v25;
  PC_CMTimeSaferSubtract(&v28, &v27, (uint64_t)&v24);
  v28 = v26;
  v27 = v25;
  PC_CMTimeSaferSubtract(&v28, &v27, (uint64_t)&v23);
  v16 = (double)(int)vcvtmd_s64_f64(RetimingMath::figToFrames((RetimingMath *)&v23, a3, v15) * a4 + 0.5 + 0.0000001)
      + 1.0;
  memset(&v23, 0, sizeof(v23));
  v28 = v24;
  v27 = *(CMTime *)a2;
  PC_CMTimeSaferAdd(&v28, &v27, (uint64_t)&v23);
  v18 = v16 + RetimingMath::figToFrames(a2, a3, v17) * a4;
  OZChannel::setKeyframe(v11, &v24, v16, 1);
  OZChannel::setKeyframe(v11, &v23, v18, 1);
  Keyframe = (void *)OZChannel::getKeyframe(v11, &v24);
  OZChannel::smoothKeyframe(v11, Keyframe, 0);
  v20 = (void *)OZChannel::getKeyframe(v11, &v23);
  OZChannel::smoothKeyframe(v11, v20, 0);
}

void `anonymous namespace'::SetChildRootExtents(OZRetimingUtil ***a1, CMTime *a2, CMTime *a3)
{
  OZRetimingUtil **v3;
  OZRetimingUtil **v4;
  CMTime *v7;
  OZChannelObjectRoot *v8;
  _BOOL4 CanRetimeSimple;
  OZRetimingUtil *v10;
  const CMTime *v11;
  OZChannelObjectRoot *v12;
  const void *ObjectManipulator;
  unint64_t v14;
  uint64_t v15;
  OZRetimingUtil *v16;
  double Seconds;
  const CMTime *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  CMTimeEpoch epoch;
  CMTime time;
  CMTime v24;
  CMTime v25;
  __int128 v26;
  uint64_t v27;
  CMTime v28;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v7 = a2 + 1;
    do
    {
      if ((OZChannelBase::isLocked((OZChannelBase *)*v3, 1) & 1) == 0)
      {
        (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)*v3 + 712))(&v25);
        CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(*v3, v8);
        v10 = *v3;
        if (CanRetimeSimple)
        {
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(_QWORD *)v10 + 320))(&v28, *v3);
          OZRetimingUtil::SetTimeOffsetAndExtentInteractive((OZChannelBase *)v10, &v28, a2, a3, v11);
        }
        else
        {
          OZChannelObjectRootBase::setTimeExtent(*v3, (const PCTimeRange *)a2, 0);
          OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)*v3, 0, 0, 1, 1, 1);
          {
            ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator((OZChannelBase *)*v3);
            if (ObjectManipulator)
            else
              v14 = 0;
            v15 = OZChannelBase::getObjectManipulator((OZChannelBase *)*v3);
            if (v15)
            if (v14 | v15)
            {
              v16 = *v3;
              v28 = v25;
              v24 = *a2;
              v21 = *(_OWORD *)&v7->value;
              epoch = v7->epoch;
              v19 = v26;
              v20 = v27;
              operator/(&v21, (uint64_t)&v19, (uint64_t)&time);
              Seconds = CMTimeGetSeconds(&time);
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

uint64_t `anonymous namespace'::ScaleKeyframesRecursive(OZChannelBase *this, OZChannelFolder *a2, const CMTime *a3, const CMTime *a4, double a5)
{
  uint64_t result;
  void **var0;
  const void **v11;
  const void **v12;
  const void *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  OZChannelFolder *v16;
  const CMTime *v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;

  result = OZChannelBase::isLocked(this, 1);
  if ((result & 1) == 0)
  {
    var0 = this[1].var0;
    if (var0)
    {
      v12 = (const void **)*var0;
      v11 = (const void **)var0[1];
      if (*var0 != v11)
      {
        do
        {
          v13 = *v12;
          if (*v12)
          {
            if (v14)
            {
              v15 = v14;
              result = OZChannelBase::isLocked(v14, 1);
              if ((result & 1) == 0)
              {
                result = OZChannelBase::testFlag(v15, 0x20000);
                if ((result & 1) == 0)
                {
                  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v15->var0 + 40))(&v18, v15);
                  v21 = *(CMTime *)a2;
                  v20 = v18;
                  PC_CMTimeSaferSubtract(&v21, &v20, (uint64_t)&v19);
                  operator*(&v19, &v21, -1.0);
                  OZChannel::linearTimeWarp((OZChannel *)v15, 1.0, &v21);
                  OZChannel::linearTimeWarp((OZChannel *)v15, a5, MEMORY[0x1E0CA2E68]);
                  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v15->var0 + 40))(&v18, v15);
                  v21 = *a3;
                  v20 = v18;
                  PC_CMTimeSaferSubtract(&v21, &v20, (uint64_t)&v19);
                  result = OZChannel::linearTimeWarp((OZChannel *)v15, 1.0, &v19);
                }
              }
            }
            else
            {
              if (result)
              {
                v16 = (OZChannelFolder *)result;
                {
                  result = OZChannelFolder::testFoldFlag(v16, 0x200000);
                  if ((result & 1) == 0)
                }
              }
            }
          }
          ++v12;
        }
        while (v12 != v11);
      }
    }
  }
  return result;
}

BOOL OZRetimingUtil::IsReversed(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _QWORD *v2;
  OZChannel *v4;

  v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    return 0;
  while (1)
  {
    v4 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v2 + 32))(v2, this);
    if (v4)
      break;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      return 0;
  }
  return OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0) != 0;
}

OZChannel *OZRetimingUtil::SetReverse(OZChannel *this, OZChannelObjectRoot *a2)
{
  _QWORD *v2;
  unsigned int v3;
  OZChannel *v4;
  OZChannel *v5;

  v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v3 = a2;
    v4 = this;
    while (1)
    {
      this = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZChannel *))(*v2 + 32))(v2, v4);
      if (this)
        break;
      v2 = (_QWORD *)v2[1];
      if (!v2)
        return this;
    }
    v5 = this;
    this = (OZChannel *)OZChannel::getValueAsInt(this, MEMORY[0x1E0CA2E68], 0.0);
    if (((((_DWORD)this == 0) ^ v3) & 1) == 0)
      return (OZChannel *)(*((uint64_t (**)(OZChannel *, _QWORD, _QWORD, double))v5->var0 + 89))(v5, MEMORY[0x1E0CA2E68], 0, (double)v3);
  }
  return this;
}

void OZRetimingUtil::SetEndCondition(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  _QWORD *v2;
  int v3;
  OZChannel *v5;
  OZChannelObjectRoot *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;
  OZChannelBase *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  OZChannelObjectRoot *v14;
  _QWORD *v15;
  OZChannel *v16;
  __n128 FrameDuration;
  int32_t v18;
  OZChannelObjectRoot *v19;
  CMTime *v20;
  OZChannelObjectRoot *v21;
  double TimeScale;
  const CMTime *v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  CMTime v27;
  CMTime v28[2];
  CMTime v29;
  CMTime v30;
  uint64_t *v31;
  _QWORD *v32[2];
  CMTime time1;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime time2;

  v2 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v3 = (int)a2;
    while (1)
    {
      v5 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v2 + 64))(v2, this);
      if (v5)
        break;
      v2 = (_QWORD *)v2[1];
      if (!v2)
        return;
    }
    if (OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0) != v3)
    {
      v32[0] = 0;
      v32[1] = 0;
      v31 = (uint64_t *)v32;
      v7 = v31;
      if (v31 != (uint64_t *)v32)
      {
        v8 = (double)v3;
        v9 = MEMORY[0x1E0CA2E68];
        do
        {
          v10 = (OZChannelBase *)v7[4];
          if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)v10, v6))
          {
            v11 = &OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
            do
            {
              v12 = *v11;
              v13 = (*(uint64_t (**)(_QWORD, OZChannelBase *))(*(_QWORD *)*v11 + 64))(*v11, v10);
              v11 = (_QWORD *)(v12 + 8);
            }
            while (!v13);
            (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)v13 + 712))(v13, v9, 0, v8);
            if (!OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)v10, v14))
            {
              v15 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
              if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
              {
                while (1)
                {
                  v16 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v15 + 48))(v15, v10);
                  if (v16)
                    break;
                  v15 = (_QWORD *)v15[1];
                  if (!v15)
                    goto LABEL_16;
                }
              }
              else
              {
LABEL_16:
                v16 = 0;
              }
              memset(&v30, 0, sizeof(v30));
              memset(&v29, 0, sizeof(v29));
              memset(&v28[1], 0, sizeof(CMTime));
              (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))v10->var0 + 89))(&time1, v10, FrameDuration);
              memset(&v36, 0, sizeof(v36));
              operator*(&v29, &v36, 0.5);
              time1 = v30;
              time2 = v36;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v35);
              time1 = v35;
              time2 = v29;
              PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v27);
              time1 = v28[0];
              time2 = v27;
              v18 = CMTimeCompare(&time1, &time2);
              v20 = v28;
              if (v18 < 0)
                v20 = &v27;
              v28[1] = *v20;
              if (OZRetimingUtil::GetEndCondition((OZRetimingUtil *)v10, v19))
              {
                OZRetimingUtil::GetLoopDuration(v10, (uint64_t)&v35);
                time2 = v28[1];
                v36 = v35;
                PC_CMTimeSaferAdd(&time2, &v36, (uint64_t)&time1);
                v28[1] = time1;
              }
              (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v10->var0 + 89))(&time1, v10);
              v34 = v28[1];
              OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v10, (const PCTimeRange *)&time1, 0);
              OZChannelObjectRoot::recomputeTimeRangeFromChildren(v10, 0, 1, 1, 1, 1);
              TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)v10, v21);
              time2 = time1;
              v36 = v34;
              PC_CMTimeSaferAdd(&time2, &v36, (uint64_t)&v35);
              time2 = v35;
              v36 = v29;
              PC_CMTimeSaferSubtract(&time2, &v36, (uint64_t)v28);
            }
          }
          v24 = (uint64_t *)v7[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (uint64_t *)v7[2];
              v26 = *v25 == (_QWORD)v7;
              v7 = v25;
            }
            while (!v26);
          }
          v7 = v25;
        }
        while (v25 != (uint64_t *)v32);
      }
      std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy((uint64_t)&v31, v32[0]);
    }
  }
}

void sub_1B2EA5DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25)
{
  std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

__n128 `anonymous namespace'::GetDurationFromRetimingChannel@<Q0>(OZChannel *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  double v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v7 = 0;
  v8 = 0.0;
  if (OZChannel::getFirstKeyframe(this, &v10, &v8)
    && OZChannel::getLastKeyframe(this, &v9, (double *)&v7))
  {
    v12 = v9;
    v11 = v10;
    result.n128_f64[0] = PC_CMTimeSaferSubtract(&v12, &v11, a2);
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v6 + 16);
  }
  return result;
}

OZChannelBase *OZRetimingUtil::GetLoopDuration@<X0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  OZChannelBase *v5;
  uint64_t v6;
  OZChannel *v7;
  const CMTime *v8;
  double v9;
  __n128 v10;
  uint64_t v11;

  v4 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v5 = this;
    while (1)
    {
      this = (OZChannelBase *)(*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v4 + 72))(v4, v5);
      if (this)
        break;
      v4 = (_QWORD *)v4[1];
      if (!v4)
        goto LABEL_5;
    }
    v7 = (OZChannel *)this;
    v10 = 0uLL;
    v11 = 0;
    OZChannel::getValueAsDouble(v7, MEMORY[0x1E0CA2E68], 0.0);
    return (OZChannelBase *)RetimingMath::framesToFig((RetimingMath *)&v10, v9, v8);
  }
  else
  {
LABEL_5:
    v6 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v6 + 16);
  }
  return this;
}

uint64_t `anonymous namespace'::SetConstantRetimingCurveExtrapolation(_anonymous_namespace_ *this, OZChannelObjectRoot *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int32_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD);
  uint64_t v9;
  uint64_t v10;
  int32_t v11;
  int32_t v12;
  CMTime v13;
  CMTime time2;
  CMTime time1;

  v3 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    while (1)
    {
      v4 = (*(uint64_t (**)(_QWORD *, _anonymous_namespace_ *))(*v3 + 48))(v3, this);
      if (v4)
        break;
      v3 = (_QWORD *)v3[1];
      if (!v3)
        goto LABEL_4;
    }
    v5 = v4;
  }
  else
  {
LABEL_4:
    v5 = 0;
  }
  result = OZRetimingUtil::GetEndCondition(this, a2);
  switch((int)result)
  {
    case 0:
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 384))(v5, 1, 0);
    case 1:
      OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v13);
      time1 = v13;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v7 = CMTimeCompare(&time1, &time2);
      v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 384);
      if (!v7)
        goto LABEL_14;
      v9 = v5;
      v10 = 3;
      goto LABEL_15;
    case 2:
      OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v13);
      time1 = v13;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v11 = CMTimeCompare(&time1, &time2);
      v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 384);
      if (!v11)
        goto LABEL_14;
      v9 = v5;
      v10 = 2;
      goto LABEL_15;
    case 3:
      OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v13);
      time1 = v13;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v12 = CMTimeCompare(&time1, &time2);
      v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 384);
      if (v12)
      {
        v9 = v5;
        v10 = 0;
      }
      else
      {
LABEL_14:
        v9 = v5;
        v10 = 1;
      }
LABEL_15:
      result = v8(v9, v10, 0);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t OZRetimingUtil::GetMaxLoopOffset@<X0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  OZChannelObjectRoot *v5;
  uint64_t result;
  OZChannelObjectRoot *v7;
  OZChannelObjectRoot *v8;
  __n128 PotentialLoopOffset;
  CMTime *v10;
  CMTimeEpoch epoch;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime time1;
  CMTime v19;
  CMTime time2;

  (*((void (**)(CMTime *__return_ptr))this->var0 + 89))(&time1);
  v17 = v19;
  if ((_DWORD)result
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))this->var0 + 89))(&time1, this, PotentialLoopOffset);
    v13 = time1;
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v12, this);
    time1 = v13;
    time2 = v12;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    time1 = v15;
    time2 = v14;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
    time1 = v17;
    time2 = v16;
    result = CMTimeCompare(&time1, &time2);
    v10 = &v17;
    if ((int)result > 0)
      v10 = &v16;
    *(_OWORD *)a2 = *(_OWORD *)&v10->value;
    epoch = v10->epoch;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v17.value;
    epoch = v17.epoch;
  }
  *(_QWORD *)(a2 + 16) = epoch;
  return result;
}

__n128 `anonymous namespace'::GetPotentialLoopOffset@<Q0>(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ObjectManipulator;
  OZChannelObjectRoot *v6;
  double TimeScale;
  __n128 result;
  uint64_t v9;
  _QWORD v10[3];
  CMTime v11;

  {
    memset(&v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)ObjectManipulator + 280))(v10);
    TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)this, v6);
  }
  else
  {
    v9 = MEMORY[0x1E0CA2E30];
    result = *(__n128 *)MEMORY[0x1E0CA2E30];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E30];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + 16);
  }
  return result;
}

void OZRetimingUtil::SetLoopOffset(OZChannelBase *this, CMTime *a2, const CMTime *a3)
{
  OZChannelObjectRoot *v5;
  OZChannelBase **v6;
  OZChannelBase **v7;
  uint64_t v8;
  int32_t v9;
  CMTime *v10;
  const CMTime *v11;
  __n128 v12;
  _QWORD *v13;
  OZChannelBase *v14;
  uint64_t v15;
  Float64 v16;
  OZChannelBase *v17;
  OZChannelObjectRoot *v18;
  double TimeScale;
  const CMTime *v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  _QWORD v24[3];
  CMTime v25;
  CMTime v26;
  OZChannelBase **v27;
  OZChannelBase **v28;
  uint64_t v29;
  CMTime time2;
  CMTime time1;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  memset(&v26, 0, sizeof(v26));
  v6 = v27;
  v7 = v28;
  if (v27 != v28)
  {
    v8 = MEMORY[0x1E0CA2E68];
    do
    {
      if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)*v6, v5)
        && !OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)*v6, v5)
        && OZRetimingUtil::GetEndCondition((OZRetimingUtil *)*v6, v5))
      {
        (*((void (**)(_QWORD *__return_ptr))(*v6)->var0 + 89))(v24);
        memset(&v23, 0, sizeof(v23));
        OZRetimingUtil::GetMaxLoopOffset(*v6, (uint64_t)&v23);
        memset(&v22, 0, sizeof(v22));
        time1 = *a2;
        time2 = v26;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          v10 = &v26;
        }
        else
        {
          time1 = *a2;
          time2 = v23;
          v9 = CMTimeCompare(&time1, &time2);
          v10 = &v23;
          if (v9 <= 0)
            v10 = a2;
        }
        time1 = *v10;
        time2 = v26;
        PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v22);
        OZRetimingUtil::GetLoopOffset(*v6, &v21);
        time1 = v22;
        time2 = v21;
        if (CMTimeCompare(&time1, &time2))
        {
          memset(&v21, 0, sizeof(v21));
          time1 = v25;
          time2 = v22;
          v12.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
          v13 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
          if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
          {
            v14 = *v6;
            while (1)
            {
              v15 = (*(uint64_t (**)(_QWORD *, OZChannelBase *, __n128))(*v13 + 72))(v13, v14, v12);
              if (v15)
                break;
              v13 = (_QWORD *)v13[1];
              if (!v13)
                goto LABEL_18;
            }
          }
          else
          {
LABEL_18:
            v15 = 0;
          }
          v16 = RetimingMath::figToFrames((RetimingMath *)&v21, &v26, v11);
          (*(void (**)(uint64_t, uint64_t, _QWORD, Float64))(*(_QWORD *)v15 + 712))(v15, v8, 0, v16);
          v17 = *v6;
          TimeScale = OZRetimingUtil::GetTimeScale((OZRetimingUtil *)*v6, v18);
        }
      }
      ++v6;
    }
    while (v6 != v7);
    v6 = v27;
  }
  if (v6)
  {
    v28 = v6;
    operator delete(v6);
  }
}

void sub_1B2EA65D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::CollectLinkedRoots<`anonymous namespace'::TruePred>(const void *a1, void **a2)
{
  OZChannelBase *v3;
  OZChannelBase *v4;
  unint64_t v5;
  OZChannelBase **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  OZChannelBase **v13;
  char *v14;
  char *v15;
  char *v16;
  OZChannelBase *v17;
  const void *ObjectManipulator;
  void *v19;
  void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  OZScene *v24;
  _QWORD *Node;
  _QWORD *v26;
  OZChannelFolder *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  if (a1)
  {
    if (v3)
    {
      v4 = v3;
      v5 = (unint64_t)a2[2];
      v6 = (OZChannelBase **)a2[1];
      if ((unint64_t)v6 >= v5)
      {
        v8 = ((char *)v6 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
LABEL_47:
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v9 = v5 - (_QWORD)*a2;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        else
          v12 = 0;
        v13 = (OZChannelBase **)&v12[8 * v8];
        v14 = &v12[8 * v11];
        *v13 = v4;
        v7 = v13 + 1;
        v16 = (char *)*a2;
        v15 = (char *)a2[1];
        if (v15 != *a2)
        {
          do
          {
            v17 = (OZChannelBase *)*((_QWORD *)v15 - 1);
            v15 -= 8;
            *--v13 = v17;
          }
          while (v15 != v16);
          v15 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = v14;
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v6 = v3;
        v7 = v6 + 1;
      }
      a2[1] = v7;
      if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v4, 0x4000))
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v4);
        if (ObjectManipulator)
        {
          if (v19)
          {
            v20 = v19;
            v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 272))(v19);
            if (v21)
            {
              v22 = (unsigned int *)*((_QWORD *)v20 + 133);
              v23 = (unsigned int *)*((_QWORD *)v20 + 132);
              if (v23 != v22)
              {
                v24 = (OZScene *)v21;
                do
                {
                  Node = OZScene::getNode(v24, *v23);
                  if (Node)
                  {
                    v26 = Node;
                    v27 = (OZChannelFolder *)(*(uint64_t (**)(_QWORD *))(*Node + 640))(Node);
                    if (OZChannelFolder::testFoldFlag(v27, 0x4000)
                      && ((*(uint64_t (**)(_QWORD *, uint64_t))(v26[2] + 56))(v26 + 2, 1) & 1) == 0)
                    {
                      v28 = (*(uint64_t (**)(_QWORD *))(*v26 + 640))(v26);
                      v29 = v28;
                      v31 = (uint64_t *)a2[1];
                      v30 = (unint64_t)a2[2];
                      if ((unint64_t)v31 >= v30)
                      {
                        v33 = ((char *)v31 - (_BYTE *)*a2) >> 3;
                        if ((unint64_t)(v33 + 1) >> 61)
                          goto LABEL_47;
                        v34 = v30 - (_QWORD)*a2;
                        v35 = v34 >> 2;
                        if (v34 >> 2 <= (unint64_t)(v33 + 1))
                          v35 = v33 + 1;
                        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                          v36 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v36 = v35;
                        if (v36)
                          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v36);
                        else
                          v37 = 0;
                        v38 = (uint64_t *)&v37[8 * v33];
                        *v38 = v29;
                        v32 = v38 + 1;
                        v40 = (char *)*a2;
                        v39 = (char *)a2[1];
                        if (v39 != *a2)
                        {
                          do
                          {
                            v41 = *((_QWORD *)v39 - 1);
                            v39 -= 8;
                            *--v38 = v41;
                          }
                          while (v39 != v40);
                          v39 = (char *)*a2;
                        }
                        *a2 = v38;
                        a2[1] = v32;
                        a2[2] = &v37[8 * v36];
                        if (v39)
                          operator delete(v39);
                      }
                      else
                      {
                        *v31 = v28;
                        v32 = v31 + 1;
                      }
                      a2[1] = v32;
                    }
                  }
                  ++v23;
                }
                while (v23 != v22);
              }
            }
          }
        }
      }
    }
  }
}

void OZRetimingUtil::RemapTimeValue(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, uint64_t *a3@<X8>)
{
  const CMTime *v7;
  double v8;
  const CMTime *v9;
  double v10;
  const CMTime *v11;
  double v12;
  OZChannelObjectRoot *v13;
  OZChannelObjectRoot *v14;
  _BOOL8 IsReversed;
  _QWORD *v16;
  uint64_t v17;
  OZChannel *v18;
  const CMTime *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _BYTE v25[24];
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;

  if (OZRetimingUtil::CanRetimeFull((OZRetimingUtil *)this, a2))
  {
    memset(&v26, 0, sizeof(v26));
    v8 = RetimingMath::figToFrames(a2, &v26, v7);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v27, this);
    v30 = v27;
    v10 = RetimingMath::figToFrames((RetimingMath *)&v30, &v26, v9);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v27, this);
    v30 = v27;
    v29 = v28;
    PC_CMTimeSaferAdd(&v30, &v29, (uint64_t)v25);
    v12 = RetimingMath::figToFrames((RetimingMath *)v25, &v26, v11);
    if (!OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v13))
    {
      IsReversed = OZRetimingUtil::IsReversed((OZRetimingUtil *)this, v14);
      if (IsReversed)
        v8 = RetimingMath::reverse((RetimingMath *)IsReversed, v8, v10, v12);
    }
    v16 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
    if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    {
      while (1)
      {
        v17 = (*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v16 + 48))(v16, this);
        if (v17)
          break;
        v16 = (_QWORD *)v16[1];
        if (!v16)
          goto LABEL_8;
      }
      v18 = (OZChannel *)v17;
    }
    else
    {
LABEL_8:
      v18 = 0;
    }
    memset(&v27, 0, sizeof(v27));
    RetimingMath::framesToFig(&v27.value, (RetimingMath *)&v26, v8, (const CMTime *)v14);
    OZChannel::getValueAsDouble(v18, &v27, 0.0);
    v21 = v20 + -1.0;
    v22 = round(v21 + v21);
    v23 = vabdd_f64(v22, v21 + v21);
    v24 = v22 * 0.5;
    if (v23 <= 0.0009765625)
      v21 = v24;
    RetimingMath::framesToFig(a3, (RetimingMath *)&v26, v21, v19);
  }
  else
  {
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v27, this);
    v29 = v27;
    v30 = *(CMTime *)a2;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)a3);
  }
}

BOOL `anonymous namespace'::HasNaturalDuration(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  uint64_t ObjectManipulator;
  uint64_t v3;
  char v4;
  _BOOL8 result;
  __n128 v6;
  CMTimeEpoch v7;
  CMTime v8;
  CMTime time2;
  CMTime time1;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 288))(ObjectManipulator);
  result = 0;
  if ((v4 & 1) != 0)
  {
    if (v3)
    {
      (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)ObjectManipulator + 280))(&v8, ObjectManipulator);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), &v6);
      time1 = v8;
      *(__n128 *)&time2.value = v6;
      time2.epoch = v7;
      return CMTimeCompare(&time1, &time2) > 0;
    }
  }
  return result;
}

uint64_t OZRetimingUtil::IsUsingRetimingBehaviors(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  char *ObjectManipulator;
  char *v3;
  char *v4;
  const void *v5;
  _BYTE *v6;

  ObjectManipulator = (char *)OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator)
  if ((ObjectManipulator[1024] & 2) != 0)
    return 0;
  v3 = ObjectManipulator + 1000;
  v4 = (char *)*((_QWORD *)ObjectManipulator + 126);
  if (v4 == ObjectManipulator + 1000)
    return 0;
  while (1)
  {
    v5 = (const void *)*((_QWORD *)v4 + 2);
    if (v5)
    {
      if (v6)
      {
        if (v6[544])
          break;
      }
    }
    v4 = (char *)*((_QWORD *)v4 + 1);
    if (v4 == v3)
      return 0;
  }
  return 1;
}

uint64_t OZRetimingUtil::IsAtDefaultRetimingState(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  OZChannel *v3;
  OZChannel *v4;
  OZChannel *v5;
  OZChannel *v6;
  OZChannel *v7;
  OZChannel *v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 FrameDuration;
  const CMTime *v12;
  double v13;
  void *Keyframe;
  void *v15;
  double v16;
  const CMTime *v17;
  double v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  double v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;

  v3 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
LABEL_23:
    v7 = 0;
    goto LABEL_24;
  }
  do
  {
    v4 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v3->var0 + 3))(v3, this);
    if (v4)
      break;
    v3 = (OZChannel *)v3->var1;
  }
  while (v3);
  v5 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v6 = 0;
    v3 = 0;
    goto LABEL_23;
  }
  do
  {
    v3 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v5->var0 + 4))(v5, this);
    if (v3)
      break;
    v5 = (OZChannel *)v5->var1;
  }
  while (v5);
  v6 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v5 = 0;
    goto LABEL_23;
  }
  do
  {
    v5 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v6->var0 + 5))(v6, this);
    if (v5)
      break;
    v6 = (OZChannel *)v6->var1;
  }
  while (v6);
  v6 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    goto LABEL_23;
  do
  {
    v7 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v6->var0 + 6))(v6, this);
    if (v7)
      break;
    v6 = (OZChannel *)v6->var1;
  }
  while (v6);
  v8 = (OZChannel *)OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
    v6 = 0;
    goto LABEL_25;
  }
  do
  {
    v6 = (OZChannel *)(*((uint64_t (**)(OZChannel *, OZChannelBase *))v8->var0 + 8))(v8, this);
    if (v6)
      break;
    v8 = (OZChannel *)v8->var1;
  }
  while (v8);
  v9 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  if (!OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
  {
LABEL_24:
    v8 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = (*(uint64_t (**)(_QWORD *, OZChannelBase *))(*v9 + 72))(v9, this);
    if (v10)
      break;
    v9 = (_QWORD *)v9[1];
    if (!v9)
      goto LABEL_24;
  }
  v8 = (OZChannel *)v10;
LABEL_25:
  memset(&v31, 0, sizeof(v31));
  if (v7)
  {
    memset(&v30, 0, sizeof(v30));
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))this->var0 + 40))(&v30, this, FrameDuration);
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 89))(&v28, this);
    if ((*((unsigned int (**)(OZChannel *))v7->var0 + 104))(v7) != 2)
      return 0;
    if (!OZChannel::useRetimingExtrapolation(v7))
      return 0;
    v27 = 0.0;
    memset(&v26, 0, sizeof(v26));
    v33 = v28;
    v32 = v30;
    PC_CMTimeSaferSubtract(&v33, &v32, (uint64_t)&v26);
    v33 = v28;
    v32 = v30;
    PC_CMTimeSaferSubtract(&v33, &v32, (uint64_t)&v25);
    v13 = RetimingMath::figToFrames((RetimingMath *)&v25, &v31, v12);
    Keyframe = (void *)OZChannel::getKeyframe(v7, &v26);
    if (!Keyframe)
      return 0;
    v15 = Keyframe;
    v16 = v13 + 1.0;
    OZChannel::getKeyframe(v7, Keyframe, 0, &v27);
    if (vabdd_f64(v27, v13 + 1.0) >= 0.0000001)
      return 0;
    if (!OZChannel::isSmoothKeyframe(v7, v15))
      return 0;
    v25 = v29;
    memset(&v24, 0, sizeof(v24));
    v33 = v26;
    v32 = v29;
    PC_CMTimeSaferAdd(&v33, &v32, (uint64_t)&v24);
    v18 = RetimingMath::figToFrames((RetimingMath *)&v25, &v31, v17);
    v19 = (void *)OZChannel::getKeyframe(v7, &v24);
    if (!v19)
      return 0;
    v20 = v19;
    OZChannel::getKeyframe(v7, v19, 0, &v27);
    if (vabdd_f64(v27, v16 + v18) >= 0.0000001 || !OZChannel::isSmoothKeyframe(v7, v20))
      return 0;
  }
  if (v4)
  {
    OZChannel::getValueAsDouble(v4, MEMORY[0x1E0CA2E68], 0.0);
    if (fabs(v21 + -1.0) >= 0.0000001)
      return 0;
  }
  if (v3 && OZChannel::getValueAsInt(v3, MEMORY[0x1E0CA2E68], 0.0))
    return 0;
  if (v5 && OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0))
    return 0;
  if (v6 && OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0))
    return 0;
  if (v8 && (OZChannel::getValueAsDouble(v8, MEMORY[0x1E0CA2E68], 0.0), fabs(v22) >= 0.0000001))
    return 0;
  else
    return 1;
}

void OZRetimingUtil::FixForRemovedBehavior(OZChannelBase *this, CMTime *a2, const CMTime *a3)
{
  OZChannelObjectRoot *v5;
  CMTimeEpoch epoch;
  OZChannelBase *v7;
  unint64_t v8;
  OZChannelBase *v9;
  _QWORD *v10;
  const void *ObjectManipulator;
  void *v12;
  void *v13;
  OZScene *v14;
  unsigned int *v15;
  unsigned int *i;
  _QWORD *Node;
  _QWORD *v18;
  OZChannelFolder *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  CMTimeValue v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  CMTimeValue value;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t **v32;
  OZChannelObjectRoot *v33;
  OZChannelObjectRoot *v34;
  CMTimeValue v35;
  CMTime *v36;
  OZRetimingUtil *v37;
  _BOOL4 CanRetimeSimple;
  OZChannelObjectRoot *v39;
  const CMTime *v40;
  CMTime *v41;
  CMTime *v42;
  BOOL v43;
  int32_t v44;
  CMTime *v45;
  int32_t v46;
  CMTime *v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime v51;
  CMTime time2;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime v57;
  CMTime v58;
  CMTime v59;
  CMTime v60;
  CMTime v61;
  CMTime v62;
  CMTime v63;
  CMTime v64;
  CMTime v65;
  CMTime v66;
  CMTime time1;
  __int128 v68;
  uint64_t *v69;
  CMTime v70;

  (*((void (**)(CMTime *__return_ptr))this->var0 + 89))(&v63);
  memset(&v62, 0, sizeof(v62));
  (*((void (**)(CMTime *__return_ptr, OZChannelBase *))this->var0 + 40))(&v62, this);
  memset(&v61, 0, sizeof(v61));
  memset(&v60, 0, sizeof(v60));
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  time1 = v63;
  time2 = v59;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v70);
  time1 = v70;
  time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v57);
  memset(&v56, 0, sizeof(v56));
  time1 = v63;
  time2 = v58;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v70);
  time1 = v70;
  time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v56);
  time1 = v61;
  time2 = v60;
  if (CMTimeCompare(&time1, &time2) < 1)
  {
    time1 = v57;
    time2 = v56;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      v54 = v56;
      v55 = v56;
      goto LABEL_6;
    }
    v70 = v63;
    time1 = v63;
    time2 = v61;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v45 = &v61;
    }
    else
    {
      time1 = v70;
      time2 = v60;
      v44 = CMTimeCompare(&time1, &time2);
      v45 = &v70;
      if (v44 > 0)
        v45 = &v60;
    }
    v55 = *v45;
    time1 = v63;
    time2 = v64;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v70);
    time1 = v70;
    time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v66);
    time1 = v66;
    time2 = v57;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v47 = &v57;
    }
    else
    {
      time1 = v66;
      time2 = v56;
      v46 = CMTimeCompare(&time1, &time2);
      v47 = &v56;
      if (v46 <= 0)
        v47 = &v66;
    }
    *(_OWORD *)&v54.value = *(_OWORD *)&v47->value;
    epoch = v47->epoch;
  }
  else
  {
    v55 = v61;
    epoch = v61.epoch;
    *(_OWORD *)&v54.value = *(_OWORD *)&v61.value;
  }
  v54.epoch = epoch;
LABEL_6:
  time2 = v55;
  time1 = v54;
  v70 = v55;
  PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v65);
  time1 = v65;
  v70 = *a2;
  PC_CMTimeSaferAdd(&time1, &v70, (uint64_t)&v66);
  v53 = v66;
  time1 = v63;
  v70 = time2;
  if (CMTimeCompare(&time1, &v70) || (time1 = v64, v70 = v53, CMTimeCompare(&time1, &v70)))
  {
    *(_QWORD *)&v66.timescale = 0;
    v66.epoch = 0;
    v66.value = (CMTimeValue)&v66.timescale;
    memset(&v70, 0, sizeof(v70));
    if (v7)
    {
      v9 = v7;
      v10 = operator new(8uLL);
      *v10 = v9;
      *(_QWORD *)&v70.timescale = v10 + 1;
      v70.epoch = (CMTimeEpoch)(v10 + 1);
      v70.value = (CMTimeValue)v10;
      if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v9, 0x4000))
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v9);
        if (ObjectManipulator)
        {
          if (v12)
          {
            v13 = v12;
            v14 = (OZScene *)(*(uint64_t (**)(void *))(*(_QWORD *)v12 + 272))(v12);
            if (v14)
            {
              v15 = (unsigned int *)*((_QWORD *)v13 + 133);
              for (i = (unsigned int *)*((_QWORD *)v13 + 132); i != v15; ++i)
              {
                Node = OZScene::getNode(v14, *i);
                v18 = Node;
                if (Node)
                {
                  v19 = (OZChannelFolder *)(*(uint64_t (**)(_QWORD *))(*Node + 640))(Node);
                  if (OZChannelFolder::testFoldFlag(v19, 0x4000)
                    && ((*(uint64_t (**)(_QWORD *, uint64_t))(v18[2] + 56))(v18 + 2, 1) & 1) == 0)
                  {
                    v20 = (*(uint64_t (**)(_QWORD *))(*v18 + 640))(v18);
                    {
                      v21 = *(_QWORD *)&v70.timescale;
                      if (*(_QWORD *)&v70.timescale >= v70.epoch)
                      {
                        v23 = (*(_QWORD *)&v70.timescale - v70.value) >> 3;
                        if ((unint64_t)(v23 + 1) >> 61)
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        v24 = (v70.epoch - v70.value) >> 2;
                        if (v24 <= v23 + 1)
                          v24 = v23 + 1;
                        if (v70.epoch - v70.value >= 0x7FFFFFFFFFFFFFF8uLL)
                          v8 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v8 = v24;
                        if (v8)
                          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v70.epoch, v8);
                        else
                          v25 = 0;
                        v26 = (uint64_t *)&v25[8 * v23];
                        *v26 = v20;
                        v22 = v26 + 1;
                        value = v70.value;
                        v27 = *(char **)&v70.timescale;
                        if (*(_QWORD *)&v70.timescale != v70.value)
                        {
                          do
                          {
                            v29 = *((_QWORD *)v27 - 1);
                            v27 -= 8;
                            *--v26 = v29;
                          }
                          while (v27 != (char *)value);
                          v27 = (char *)v70.value;
                        }
                        v70.value = (CMTimeValue)v26;
                        *(_QWORD *)&v70.timescale = v22;
                        v70.epoch = (CMTimeEpoch)&v25[8 * v8];
                        if (v27)
                          operator delete(v27);
                      }
                      else
                      {
                        **(_QWORD **)&v70.timescale = v20;
                        v22 = (_QWORD *)(v21 + 8);
                      }
                      *(_QWORD *)&v70.timescale = v22;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v30 = (unint64_t *)v70.value;
    v31 = *(unint64_t **)&v70.timescale;
    if (v70.value != *(_QWORD *)&v70.timescale)
    {
      do
      {
        time1.value = (CMTimeValue)v30;
        v32 = std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>((uint64_t **)&v66, v30, (uint64_t)&std::piecewise_construct, &time1);
        (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)*v30 + 320))(&time1);
        *(CMTime *)(v32 + 11) = time1;
        (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)*v30 + 712))(&time1);
        if (v32 + 5 != (uint64_t **)&time1)
        {
          *(CMTime *)(v32 + 5) = time1;
          *((_OWORD *)v32 + 4) = v68;
          v32[10] = v69;
        }
        *((CMTime *)v32 + 5) = time1;
        ++v30;
      }
      while (v30 != v31);
      v30 = (unint64_t *)v70.value;
    }
    if (v30)
    {
      *(_QWORD *)&v70.timescale = v30;
      operator delete(v30);
    }
    v35 = v66.value;
    if ((CMTimeScale *)v66.value != &v66.timescale)
    {
      v36 = (CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v37 = *(OZRetimingUtil **)(v35 + 32);
        CanRetimeSimple = OZRetimingUtil::CanRetimeSimple(v37, (OZChannelObjectRoot *)v8);
        if (OZRetimingUtil::GetTimeRemap(v37, v39))
          CanRetimeSimple = 0;
        v65 = *v36;
        if (CanRetimeSimple)
        {
          OZRetimingUtil::GetLoopOffset((OZChannelBase *)v37, &v49);
          v70 = v63;
          time1 = v49;
          PC_CMTimeSaferAdd(&time1, &v70, (uint64_t)&v50);
          time1 = v50;
          v70 = v62;
          PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v51);
          v65 = v51;
        }
        OZChannelObjectRootBase::setTimeExtent(v37, (const PCTimeRange *)&time2, 0);
        OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)v37, 0, 1, 1, 1, 1);
        if (CanRetimeSimple)
        {
          v70 = time2;
          time1 = v65;
          PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v51);
          time1 = v51;
          v70 = v62;
          PC_CMTimeSaferSubtract(&time1, &v70, (uint64_t)&v48);
        }
        v41 = *(CMTime **)(v35 + 8);
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (CMTime *)v41->value;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = *(CMTime **)(v35 + 16);
            v43 = v42->value == v35;
            v35 = (CMTimeValue)v42;
          }
          while (!v43);
        }
        v35 = (CMTimeValue)v42;
      }
      while (v42 != (CMTime *)&v66.timescale);
    }
    std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy((uint64_t)&v66, *(_QWORD **)&v66.timescale);
  }
}

void sub_1B2EA7950(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(v1 - 200, *(_QWORD **)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t OZRetimingUtil::FixLoadedRetimingState(OZRetimingUtil *this, OZChannelObjectRoot *a2, const CMTime *a3)
{
  uint64_t result;
  OZChannelObjectRoot *v6;
  int v7;
  const CMTime *v8;
  _QWORD *v9;
  OZChannel *v10;
  _QWORD *v11;
  uint64_t v12;
  OZChannelObjectRoot *v13;
  const CMTime *v14;
  double TimeScale;
  double v16;
  OZChannelObjectRoot *v17;
  CMTime *v18;
  OZChannelObjectRoot *v19;
  int32_t v20;
  CMTime *v21;
  __int128 v22;
  CMTime *v23;
  Float64 v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime time1;
  CMTime v34;
  __n128 v35;
  CMTimeEpoch epoch;
  CMTime v37;
  CMTime time2;

  result = OZRetimingUtil::CanRetimeSimple(this, a2);
  if ((_DWORD)result)
  {
    result = OZRetimingUtil::GetTimeRemap(this, v6);
    v7 = result;
    if (!(_DWORD)result)
    {
      OZRetimingUtil::GetLoopOffset((OZChannelBase *)this, &v32);
      v9 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
      if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
      {
        while (1)
        {
          v10 = (OZChannel *)(*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v9 + 48))(v9, this);
          if (v10)
            break;
          v9 = (_QWORD *)v9[1];
          if (!v9)
            goto LABEL_6;
        }
      }
      else
      {
LABEL_6:
        v10 = 0;
      }
      result = OZChannel::setUseRetimingExtrapolation(v10, 1);
    }
    v11 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
    if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
    {
      while (1)
      {
        result = (*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v11 + 80))(v11, this);
        if (result)
          break;
        v11 = (_QWORD *)v11[1];
        if (!v11)
          return result;
      }
      v12 = result;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 496))(result, 1);
      if ((result & 1) == 0)
      {
        memset(&v31, 0, sizeof(v31));
        memset(&v30, 0, sizeof(v30));
        time1 = v31;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        if (CMTimeCompare(&time1, &time2))
        {
          memset(&v29, 0, sizeof(v29));
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(_QWORD *)this + 712))(&time1, this);
          v35 = *(__n128 *)&time1.value;
          epoch = time1.epoch;
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(_QWORD *)this + 320))(&v28, this);
          *(__n128 *)&time2.value = v35;
          time2.epoch = epoch;
          v37 = v28;
          PC_CMTimeSaferSubtract(&time2, &v37, (uint64_t)&v29);
          memset(&v28, 0, sizeof(v28));
          time1 = v31;
          time2 = v29;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
          if (!v7)
          {
            v23 = &v28;
            goto LABEL_27;
          }
          memset(&v27, 0, sizeof(v27));
          TimeScale = OZRetimingUtil::GetTimeScale(this, v13);
          v16 = operator/((__int128 *)&v28.value, (uint64_t)&v27, TimeScale);
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *, double))(*(_QWORD *)this + 712))(&time1, this, v16);
          memset(&v37, 0, sizeof(v37));
          operator*(&v30, &v37, 0.5);
          time1 = v27;
          time2 = v37;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v35);
          *(__n128 *)&time1.value = v35;
          time1.epoch = epoch;
          time2 = v30;
          PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v25);
          time1 = v26;
          time2 = v25;
          if (CMTimeCompare(&time1, &time2) >= 0)
            v18 = &v26;
          else
            v18 = &v25;
          v37 = *v18;
          if (OZRetimingUtil::GetEndCondition(this, v17))
          {
            OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v35);
            time1 = v37;
            *(__n128 *)&time2.value = v35;
            time2.epoch = epoch;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v37);
          }
        }
        else
        {
          (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(_QWORD *)this + 712))(&time1, this);
          v37 = v34;
          if (v7 == 1 && OZRetimingUtil::GetEndCondition(this, v19))
          {
            v35 = 0uLL;
            epoch = 0;
            OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v28);
            time1 = v28;
            *(__n128 *)&time2.value = v35;
            time2.epoch = epoch;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v29);
            time1 = v37;
            time2 = v29;
            v20 = CMTimeCompare(&time1, &time2);
            v21 = &v37;
            if (v20 < 0)
              v21 = &v29;
            v22 = *(_OWORD *)&v21->value;
            v37.epoch = v21->epoch;
            *(_OWORD *)&v37.value = v22;
          }
        }
        v23 = &v37;
LABEL_27:
        v24 = RetimingMath::figToFrames((RetimingMath *)v23, &v30, v14);
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, Float64))(*(_QWORD *)v12 + 712))(v12, MEMORY[0x1E0CA2E68], 0, v24);
      }
    }
  }
  return result;
}

uint64_t OZRetimingUtil::FixLoopOffset(OZRetimingUtil *this, OZChannelObjectRoot *a2, const CMTime *a3)
{
  uint64_t result;
  OZChannelObjectRoot *v6;
  OZChannelObjectRoot *v7;
  OZChannelObjectRoot *v8;
  CMTime *v9;
  const CMTime *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  Float64 v14;
  CMTime v15;
  CMTime v16;
  CMTime time1;
  CMTime v18;
  CMTime v19;
  CMTime time2;

  result = OZRetimingUtil::CanRetimeSimple(this, a2);
  if ((_DWORD)result)
  {
    result = OZRetimingUtil::GetTimeRemap(this, v6);
    if (!(_DWORD)result)
    {
      result = OZRetimingUtil::GetEndCondition(this, v7);
      if ((_DWORD)result)
      {
        (*(void (**)(CMTime *__return_ptr, OZRetimingUtil *))(*(_QWORD *)this + 712))(&time1, this);
        v19 = v18;
        memset(&v16, 0, sizeof(v16));
        OZRetimingUtil::GetLoopDuration((OZChannelBase *)this, (uint64_t)&v16);
        time1 = v19;
        time2 = *(CMTime *)a2;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
        time1 = v16;
        time2 = v15;
        result = CMTimeCompare(&time1, &time2);
        if ((int)result >= 1)
        {
          time1 = v19;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
          v16 = v15;
          time1 = v15;
          v9 = (CMTime *)MEMORY[0x1E0CA2E68];
          time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          if (CMTimeCompare(&time1, &time2) < 0)
            v16 = *v9;
          v11 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
          if (OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead)
          {
            while (1)
            {
              v12 = (*(uint64_t (**)(_QWORD *, OZRetimingUtil *))(*v11 + 72))(v11, this);
              if (v12)
                break;
              v11 = (_QWORD *)v11[1];
              if (!v11)
                goto LABEL_11;
            }
            v13 = v12;
          }
          else
          {
LABEL_11:
            v13 = 0;
          }
          v14 = RetimingMath::figToFrames((RetimingMath *)&v16, (const CMTime *)a2, v10);
          return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, Float64))(*(_QWORD *)v13 + 712))(v13, MEMORY[0x1E0CA2E68], 0, v14);
        }
      }
    }
  }
  return result;
}

uint64_t OZRetimingUtil::GetRetimeNaturalDurationFlags(OZRetimingUtil *this, OZChannelObjectRoot *a2)
{
  OZChannelObjectRoot *v3;
  _BOOL4 CanRetimeFull;
  OZChannelObjectRoot *v5;
  OZChannelObjectRoot *v6;
  unsigned int v7;
  uint64_t v8;
  OZChannelObjectRoot *v9;

  if (!OZRetimingUtil::CanRetimeSimple(this, a2))
    return 0;
  CanRetimeFull = OZRetimingUtil::CanRetimeFull(this, v3);
  v7 = 4 * (OZRetimingUtil::GetEndCondition(this, v5) != 0);
  v8 = v7;
  if (CanRetimeFull)
  {
    v8 = 6;
    if (OZRetimingUtil::GetTimeRemap(this, v6) != 1)
    {
      if (OZRetimingUtil::IsUsingRetimingBehaviors((OZChannelBase *)this, v9))
        return 6;
      else
        return v7;
    }
  }
  return v8;
}

uint64_t OZRetimingUtil::RetimingExaminer::RetimingExaminer(uint64_t this)
{
  _QWORD *v1;

  v1 = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  *(_QWORD *)(this + 8) = OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead;
  *(_QWORD *)(this + 16) = 0;
  if (v1)
    v1[2] = this;
  OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)this;
  *(_QWORD *)this = &off_1E659F7B8;
  return this;
}

void OZRetimingUtil::RetimingExaminer::~RetimingExaminer(OZRetimingUtil::RetimingExaminer *this)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)this = &unk_1E659F848;
  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = v2;
    v2 = *((_QWORD *)this + 1);
    if (!v2)
      return;
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)*((_QWORD *)this + 1);
    if (!v2)
      return;
  }
  *(_QWORD *)(v2 + 16) = v1;
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)this = &unk_1E659F848;
  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = v2;
    v2 = *((_QWORD *)this + 1);
    if (!v2)
      return;
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)*((_QWORD *)this + 1);
    if (!v2)
      return;
  }
  *(_QWORD *)(v2 + 16) = v1;
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)this = &unk_1E659F848;
  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = v2;
    v2 = *((_QWORD *)this + 1);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)*((_QWORD *)this + 1);
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(v2 + 16) = v1;
LABEL_6:
  JUMPOUT(0x1B5E29170);
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimingGroupChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimeScaleChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimeReverseChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getTimeRemapChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getRetimeFrameChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getRetimeFrameCacheChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getEndConditionChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getLoopDurationChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

uint64_t OZRetimingUtil::RetimingExaminer::getDurationCacheChannel(OZRetimingUtil::RetimingExaminer *this, OZChannelObjectRoot *a2)
{
  return 0;
}

BOOL `anonymous namespace'::HasEndCondition(_anonymous_namespace_ *this, OZChannelObjectRoot *a2)
{
  _BOOL8 result;
  OZChannelObjectRoot *v4;
  OZChannelObjectRoot *v5;

  result = OZRetimingUtil::CanRetimeSimple(this, a2);
  if (result)
    return !OZRetimingUtil::GetTimeRemap(this, v4)
        && OZRetimingUtil::GetEndCondition(this, v5) != 0;
  return result;
}

uint64_t `anonymous namespace'::EditableRoot(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  uint64_t ObjectManipulator;
  unint64_t v5;
  int isKindOfClass;
  _BOOL4 v7;
  __int128 v8;

  if ((OZChannelBase::isLocked(this, 1) & 1) != 0)
    return 0;
  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v5 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator) + 8);
  v8 = xmmword_1B3054220;
  isKindOfClass = OZFactory::isKindOfClass(v5, (int32x4_t *)&v8);
  v7 = !OZChannelBase::testFlag(this, 2)
    && !OZChannelBase::testFlag(this, 0x10000)
    && !OZChannelBase::testFlag(this, 32);
  return isKindOfClass | v7;
}

uint64_t `anonymous namespace'::ScaleKeyframes(OZChannelBase *this, OZChannelObjectRoot *a2, const CMTime *a3, const CMTime *a4, double a5)
{
  uint64_t result;
  uint64_t ObjectManipulator;
  uint64_t v11;
  const CMTime *v12;
  OZChannelBase *v13;

  if ((_DWORD)result)
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
    if (v11)
    {
      v13 = *(OZChannelBase **)(v11 + 1504);
      if (v13)
        OZChannelBase::setRangeName(v13, (const PCString *)1);
    }
  }
  return result;
}

BOOL `anonymous namespace'::HasNaturalDurationAndHardOutPoint(OZChannelBase *this, OZChannelObjectRoot *a2)
{
  _BOOL8 result;
  uint64_t ObjectManipulator;

  if ((_DWORD)result)
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 288))(ObjectManipulator) & 4) == 0;
  }
  return result;
}

double `anonymous namespace'::SafeGetTimeScale(_anonymous_namespace_ *this, OZChannelObjectRoot *a2)
{
  OZChannelObjectRoot *v3;
  OZChannelObjectRoot *v4;

  if (OZRetimingUtil::CanRetimeSimple(this, a2) && !OZRetimingUtil::GetTimeRemap(this, v3))
    return OZRetimingUtil::GetTimeScale(this, v4);
  else
    return 1.0;
}

__n128 `anonymous namespace'::ScaleNaturalDuration@<Q0>(_anonymous_namespace_ *this@<X0>, CMTime *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  CMTime *v7;
  __n128 result;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime time2;
  CMTime time1;

  operator/((__int128 *)this, (uint64_t)&v9, a3);
  memset(&v12, 0, sizeof(v12));
  operator*(a2, &v12, 0.5);
  time1 = v9;
  time2 = v12;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v11);
  time1 = v11;
  time2 = *a2;
  PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v10);
  time1 = *a2;
  time2 = v10;
  if (CMTimeCompare(&time1, &time2) >= 0)
    v7 = a2;
  else
    v7 = &v10;
  result = *(__n128 *)&v7->value;
  *(_OWORD *)a4 = *(_OWORD *)&v7->value;
  *(_QWORD *)(a4 + 16) = v7->epoch;
  return result;
}

void `anonymous namespace'::OffsetKeyframesAndMarkers(_anonymous_namespace_ *this, CMTime *a2, const CMTime *a3)
{
  uint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  OZChannelBase *v9;
  OZChannel *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  const CMTime *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  CMTime v22;
  PCString v23;
  CMTime v24;
  uint64_t *v25;
  _QWORD *v26[2];
  CMTime v27;
  CMTime v28;

  v5 = *((_QWORD *)this + 14);
  if (!v5)
    goto LABEL_12;
  v7 = *(const void ***)v5;
  v6 = *(_QWORD *)(v5 + 8);
  if (*(_QWORD *)v5 >= v6)
    goto LABEL_12;
  do
  {
    v8 = *v7;
    if (*v7)
    {
      if (v9)
      {
        v10 = (OZChannel *)v9;
        if (!OZChannelBase::testFlag(v9, 0x20000))
        {
          (*((void (**)(OZChannel *, uint64_t))v10->var0 + 58))(v10, 1);
          OZChannel::linearTimeWarp(v10, 1.0, a2);
        }
      }
      else
      {
        if (v11)
        {
          v12 = v11;
        }
      }
    }
    ++v7;
  }
  while ((unint64_t)v7 < v6);
  if (this)
  {
LABEL_12:
    if (v14)
    {
      v15 = v14[27];
      if (v15)
      {
        v26[0] = 0;
        v26[1] = 0;
        v25 = (uint64_t *)v26;
        v18 = *(uint64_t **)(v15 + 8);
        v16 = (uint64_t *)(v15 + 8);
        v17 = v18;
        if (v18 != v16 + 1)
        {
          do
          {
            OZTimeMarker::OZTimeMarker((OZTimeMarker *)&v23, (const OZTimeMarker *)(v17 + 4));
            v28 = v24;
            v27 = *a2;
            PC_CMTimeSaferAdd(&v28, &v27, (uint64_t)&v22);
            v24 = v22;
            std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(&v25, (uint64_t)&v23, (const OZTimeMarker *)&v23);
            OZTimeMarker::~OZTimeMarker(&v23);
            v19 = (uint64_t *)v17[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (uint64_t *)v17[2];
                v21 = *v20 == (_QWORD)v17;
                v17 = v20;
              }
              while (!v21);
            }
            v17 = v20;
          }
          while (v20 != v16 + 1);
        }
        std::__tree<OZTimeMarker>::swap(v16, (uint64_t)&v25);
        std::__tree<OZGuide>::destroy((uint64_t)&v25, v26[0]);
      }
    }
  }
}

void sub_1B2EA8694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  OZTimeMarker::~OZTimeMarker(&a12);
  std::__tree<OZGuide>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<OZTimeMarker>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

double `anonymous namespace'::SafeGetLoopOffset@<D0>(OZChannelBase *this@<X0>, OZChannelObjectRoot *a2@<X1>, _QWORD *a3@<X8>)
{
  OZChannelObjectRoot *v5;
  double result;
  _QWORD v7[3];
  __int128 v8;
  uint64_t v9;

  if (OZRetimingUtil::CanRetimeSimple((OZRetimingUtil *)this, a2)
    && !OZRetimingUtil::GetTimeRemap((OZRetimingUtil *)this, v5))
  {
    return OZRetimingUtil::GetLoopOffset(this, a3);
  }
  (*((void (**)(_QWORD *__return_ptr, OZChannelBase *))this->var0 + 89))(v7, this);
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  a3[2] = v9;
  return result;
}

uint64_t **std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::__emplace_unique_key_args<OZChannelObjectRoot *,std::piecewise_construct_t const&,std::tuple<OZChannelObjectRoot * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v11 + 4) = **a4;
    v12 = (__int128 *)MEMORY[0x1E0CA2E68];
    v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *((_QWORD *)v11 + 7) = v13;
    v14 = *v12;
    *(_OWORD *)(v11 + 40) = *v12;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *((_QWORD *)v11 + 10) = v13;
    *((_OWORD *)v11 + 4) = v14;
    *((_QWORD *)v11 + 17) = 0;
    *((_QWORD *)v11 + 18) = 0;
    *((_QWORD *)v11 + 19) = 0;
    *((_QWORD *)v11 + 20) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *`anonymous namespace'::CollectDependentRootsOf<`anonymous namespace'::SameEndPred>(void *result, uint64_t a2, void **a3)
{
  void ***v3;
  void **v4;
  void **v5;
  uint64_t v7;
  void *v8;
  OZChannelBase *v9;
  OZChannelObjectRoot *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(void ****)(a2 + 112);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      v7 = (uint64_t)result;
      v24 = (uint64_t)(a3 + 2);
      do
      {
        result = *v4;
        if (*v4)
        {
          if (result)
          {
            v8 = result;
            if (v9)
            {
              v11 = (uint64_t)v9;
              {
                {
                  v13 = (uint64_t *)a3[1];
                  v12 = (unint64_t)a3[2];
                  if ((unint64_t)v13 >= v12)
                  {
                    v15 = ((char *)v13 - (_BYTE *)*a3) >> 3;
                    if ((unint64_t)(v15 + 1) >> 61)
                      std::vector<double>::__throw_length_error[abi:ne180100]();
                    v16 = v12 - (_QWORD)*a3;
                    v17 = v16 >> 2;
                    if (v16 >> 2 <= (unint64_t)(v15 + 1))
                      v17 = v15 + 1;
                    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
                      v18 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v18 = v17;
                    if (v18)
                      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v24, v18);
                    else
                      v19 = 0;
                    v20 = (uint64_t *)&v19[8 * v15];
                    *v20 = v11;
                    v14 = v20 + 1;
                    v22 = (char *)*a3;
                    v21 = (char *)a3[1];
                    if (v21 != *a3)
                    {
                      do
                      {
                        v23 = *((_QWORD *)v21 - 1);
                        v21 -= 8;
                        *--v20 = v23;
                      }
                      while (v21 != v22);
                      v21 = (char *)*a3;
                    }
                    *a3 = v20;
                    a3[1] = v14;
                    a3[2] = &v19[8 * v18];
                    if (v21)
                      operator delete(v21);
                  }
                  else
                  {
                    *v13 = v11;
                    v14 = v13 + 1;
                  }
                  a3[1] = v14;
                }
              }
            }
          }
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

BOOL `anonymous namespace'::SameEndPred::operator()(uint64_t a1, uint64_t a2)
{
  double v3;
  CMTime v5[2];
  CMTime v6;
  CMTime v7[2];
  CMTime v8;
  CMTime time2;
  CMTime time1;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)a1 + 712))(v7);
  v5[0] = v7[0];
  time1 = v7[1];
  v3 = PC_CMTimeSaferAdd(v5, &time1, (uint64_t)&v8);
  (*(void (**)(CMTime *__return_ptr, uint64_t, double))(*(_QWORD *)a2 + 712))(v5, a2, v3);
  time1 = v5[0];
  time2 = v5[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v6);
  time1 = v8;
  time2 = v6;
  return CMTimeCompare(&time1, &time2) == 0;
}

void *`anonymous namespace'::CollectDependentRootsOf<`anonymous namespace'::SameTimeExtentPred>(void *result, uint64_t a2, void **a3)
{
  void ***v3;
  void **v4;
  void **v5;
  uint64_t v7;
  void *v8;
  OZChannelBase *v9;
  OZChannelObjectRoot *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(void ****)(a2 + 112);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      v7 = (uint64_t)result;
      v24 = (uint64_t)(a3 + 2);
      do
      {
        result = *v4;
        if (*v4)
        {
          if (result)
          {
            v8 = result;
            if (v9)
            {
              v11 = (uint64_t)v9;
              {
                {
                  v13 = (uint64_t *)a3[1];
                  v12 = (unint64_t)a3[2];
                  if ((unint64_t)v13 >= v12)
                  {
                    v15 = ((char *)v13 - (_BYTE *)*a3) >> 3;
                    if ((unint64_t)(v15 + 1) >> 61)
                      std::vector<double>::__throw_length_error[abi:ne180100]();
                    v16 = v12 - (_QWORD)*a3;
                    v17 = v16 >> 2;
                    if (v16 >> 2 <= (unint64_t)(v15 + 1))
                      v17 = v15 + 1;
                    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
                      v18 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v18 = v17;
                    if (v18)
                      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v24, v18);
                    else
                      v19 = 0;
                    v20 = (uint64_t *)&v19[8 * v15];
                    *v20 = v11;
                    v14 = v20 + 1;
                    v22 = (char *)*a3;
                    v21 = (char *)a3[1];
                    if (v21 != *a3)
                    {
                      do
                      {
                        v23 = *((_QWORD *)v21 - 1);
                        v21 -= 8;
                        *--v20 = v23;
                      }
                      while (v21 != v22);
                      v21 = (char *)*a3;
                    }
                    *a3 = v20;
                    a3[1] = v14;
                    a3[2] = &v19[8 * v18];
                    if (v21)
                      operator delete(v21);
                  }
                  else
                  {
                    *v13 = v11;
                    v14 = v13 + 1;
                  }
                  a3[1] = v14;
                }
              }
            }
          }
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  return result;
}

BOOL `anonymous namespace'::SameTimeExtentPred::operator()(uint64_t a1, uint64_t a2)
{
  CMTime v4[2];
  CMTime v5[2];
  CMTime time2;
  CMTime time1;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)a1 + 712))(v5);
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)a2 + 712))(v4, a2);
  time1 = v5[0];
  time2 = v4[0];
  if (CMTimeCompare(&time1, &time2))
    return 0;
  time1 = v5[1];
  time2 = v4[1];
  return CMTimeCompare(&time1, &time2) == 0;
}

void OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::~StaticListNode(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = &unk_1E659F848;
  v2 = a1[1];
  v1 = a1[2];
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = v2;
    v2 = a1[1];
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    OZRetimingUtil::StaticListNode<OZRetimingUtil::RetimingExaminer>::sHead = (_UNKNOWN *)a1[1];
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(v2 + 16) = v1;
LABEL_6:
  JUMPOUT(0x1B5E29170);
}

void OZRotoshape::OZRotoshape(OZRotoshape *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;

  OZLockingElement::OZLockingElement(this, a2, a3, a4);
  *(_QWORD *)v5 = off_1E659F868;
  *(_QWORD *)(v5 + 200) = &unk_1E659FB00;
  *(_QWORD *)(v5 + 216) = &unk_1E65A03D8;
  *(_QWORD *)(v5 + 248) = &unk_1E65A0630;
  *(_QWORD *)(v5 + 6728) = &unk_1E65A0688;
  OZMoShape::OZMoShape((OZMoShape *)(v5 + 18976), this, (OZChannelFolder *)(v5 + 256), (OZChannelFolder *)(v5 + 648), 0x161u);
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 38128);
  *((_QWORD *)this + 4765) = 0;
  *((_BYTE *)this + 38114) = 0;
  *((_WORD *)this + 19056) = 0;
  *((_BYTE *)this + 38098) = 0;
  *((_WORD *)this + 19048) = 0;
  *((_QWORD *)this + 4763) = 0x4014000000000000;
}

void sub_1B2EA8E38(_Unwind_Exception *a1)
{
  OZLockingElement *v1;
  OZMoShape *v2;

  OZMoShape::~OZMoShape(v2);
  OZLockingElement::~OZLockingElement(v1);
  _Unwind_Resume(a1);
}

void OZLockingElement::~OZLockingElement(OZLockingElement *this)
{
  OZElement::~OZElement((OZElement *)((char *)this + 200));
  *(_QWORD *)this = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
}

void OZRotoshape::OZRotoshape(OZRotoshape *this, const OZRotoshape *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;

  v3 = a3;
  OZLockingElement::OZLockingElement(this, (const OZElement *)((char *)a2 + 200), a3);
  *(_QWORD *)v6 = off_1E659F868;
  *(_QWORD *)(v6 + 200) = &unk_1E659FB00;
  *(_QWORD *)(v6 + 216) = &unk_1E65A03D8;
  *(_QWORD *)(v6 + 248) = &unk_1E65A0630;
  *(_QWORD *)(v6 + 6728) = &unk_1E65A0688;
  OZMoShape::OZMoShape((OZMoShape *)(v6 + 18976), (const OZRotoshape *)((char *)a2 + 18976), this, (OZChannelFolder *)(v6 + 256), (OZChannelFolder *)(v6 + 648), 0x161u, v3);
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 38128);
  *((_QWORD *)this + 4765) = 0;
  *((_BYTE *)this + 38114) = 0;
  *((_WORD *)this + 19056) = 0;
  *((_BYTE *)this + 38096) = *((_BYTE *)a2 + 38096);
  *(_WORD *)((char *)this + 38097) = *(_WORD *)((char *)a2 + 38097);
  *((_QWORD *)this + 4763) = *((_QWORD *)a2 + 4763);
}

void sub_1B2EA8F74(_Unwind_Exception *a1)
{
  OZLockingElement *v1;
  OZMoShape *v2;

  OZMoShape::~OZMoShape(v2);
  OZLockingElement::~OZLockingElement(v1);
  _Unwind_Resume(a1);
}

void OZRotoshape::~OZRotoshape(OZRotoshape *this)
{
  OZElement *v2;
  OZMoShape *v3;

  *(_QWORD *)this = off_1E659F868;
  *((_QWORD *)this + 25) = &unk_1E659FB00;
  v2 = (OZElement *)((char *)this + 200);
  *((_QWORD *)this + 27) = &unk_1E65A03D8;
  *((_QWORD *)this + 31) = &unk_1E65A0630;
  *((_QWORD *)this + 841) = &unk_1E65A0688;
  v3 = (OZRotoshape *)((char *)this + 18976);
  OZMoShape::resetParticlePaint((OZRotoshape *)((char *)this + 18976));
  OZValueCache<OZBoundsCacheItem>::~OZValueCache((uint64_t)this + 38128);
  OZMoShape::~OZMoShape(v3);
  OZElement::~OZElement(v2);
  *(_QWORD *)this = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8));
}

{
  OZRotoshape::~OZRotoshape(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZRotoshape::~OZRotoshape(OZRotoshape *this)
{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 200));
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 216));
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 248));
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 6728));
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  OZRotoshape::~OZRotoshape((OZRotoshape *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

double OZRotoshape::operator=(uint64_t a1, const void *a2)
{
  char *v4;
  char *v5;
  double result;

  OZElement::operator=(a1 + 200, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4 + 38096;
  OZMoShape::operator=(a1 + 18976, (uint64_t)(v4 + 18976));
  *(_QWORD *)(a1 + 38120) = 0;
  *(_BYTE *)(a1 + 38114) = 0;
  *(_WORD *)(a1 + 38112) = 0;
  *(_BYTE *)(a1 + 38096) = *v5;
  *(_WORD *)(a1 + 38097) = *(_WORD *)(v5 + 1);
  result = *((double *)v5 + 1);
  *(double *)(a1 + 38104) = result;
  return result;
}

double `non-virtual thunk to'OZRotoshape::operator=(uint64_t a1, const void *a2)
{
  return OZRotoshape::operator=(a1 - 200, a2);
}

void OZRotoshape::applyStyle(OZRotoshape *this, const OZRotoshape *a2)
{
  unsigned __int8 *v4;
  char *v5;
  uint64_t v6;

  v4 = (unsigned __int8 *)a2 + 38096;
  v5 = (char *)this + 38096;
  v6 = 432;
  if ((*((_DWORD *)a2 + 306) & 8) == 0)
    v6 = 440;
  (*(void (**)(void))(*(_QWORD *)this + v6))();
  OZMoShape::applyStyle((OZRotoshape *)((char *)this + 18976), (const OZRotoshape *)((char *)a2 + 18976));
  *(_WORD *)(v5 + 17) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v5[2] = v4[2];
  *(_WORD *)v5 = *v4;
}

uint64_t OZRotoshape::isSimulationGroup(OZRotoshape *this)
{
  uint64_t v2;
  int ValueAsInt;

  v2 = *((_QWORD *)this + 4733);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 25904), MEMORY[0x1E0CA2E68], 0.0);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1))
    return 0;
  if ((ValueAsInt - 1) > 1 || v2 == 0)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2);
}

uint64_t `non-virtual thunk to'OZRotoshape::isSimulationGroup(OZRotoshape *this)
{
  return OZRotoshape::isSimulationGroup((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::acceptsShapeMasks(OZRotoshape *this)
{
  int shouldDrawParticles;
  uint64_t v3;
  CMTime var0;
  BOOL var10;
  BOOL var16;
  __int128 v8;
  int v9;
  CGColorSpace *v10;
  OZRenderState v11;

  OZRenderState::OZRenderState(&v11);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  var0 = (CMTime)v11.var0;
  var10 = v11.var10;
  var16 = v11.var16;
  v8 = *(_OWORD *)&v11.var1;
  v9 = 1;
  shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this + 18976, &var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  v3 = *((_QWORD *)this + 4733);
  if (v3)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  return shouldDrawParticles & v3 ^ 1;
}

void sub_1B2EA939C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::acceptsShapeMasks(OZRotoshape *this)
{
  return OZRotoshape::acceptsShapeMasks((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::restrictImageMaskToStencil(OZRotoshape *this)
{
  int shouldDrawParticles;
  uint64_t v3;
  CMTime var0;
  BOOL var10;
  BOOL var16;
  __int128 v8;
  int v9;
  CGColorSpace *v10;
  OZRenderState v11;

  OZRenderState::OZRenderState(&v11);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  var0 = (CMTime)v11.var0;
  var10 = v11.var10;
  var16 = v11.var16;
  v8 = *(_OWORD *)&v11.var1;
  v9 = 1;
  shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this + 18976, &var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  v3 = *((_QWORD *)this + 4733);
  if (v3)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  return shouldDrawParticles & v3;
}

void sub_1B2EA9464(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::restrictImageMaskToStencil(OZRotoshape *this)
{
  return OZRotoshape::restrictImageMaskToStencil((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::setScene(OZRotoshape *this, OZScene *a2)
{
  uint64_t result;

  OZSceneNode::setScene((_QWORD *)this + 25, (uint64_t)a2);
  result = *((_QWORD *)this + 4732);
  if (result)
    return (*(uint64_t (**)(uint64_t, OZScene *))(*(_QWORD *)result + 280))(result, a2);
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::setScene(OZRotoshape *this, OZScene *a2)
{
  uint64_t result;

  OZSceneNode::setScene(this, (uint64_t)a2);
  result = *((_QWORD *)this + 4707);
  if (result)
    return (*(uint64_t (**)(uint64_t, OZScene *))(*(_QWORD *)result + 280))(result, a2);
  return result;
}

uint64_t OZRotoshape::setIsMask(OZRotoshape *this)
{
  OZElement::setIsMask((OZElement *)((char *)this + 200));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7032), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12872), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8432), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2152), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17720), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2440), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2592), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2896), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5080), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6408), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8584), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 10136), 2, 0);
  return OZShape::setIsMask((OZRotoshape *)((char *)this + 18976));
}

uint64_t `non-virtual thunk to'OZRotoshape::setIsMask(OZRotoshape *this)
{
  return OZRotoshape::setIsMask((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::clearIsMask(OZRotoshape *this)
{
  OZElement::clearIsMask((OZElement *)((char *)this + 200));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7032), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12872), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8432), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2152), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 17720), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2440), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2592), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2896), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5080), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6408), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8584), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10136), 2, 0);
  return OZShape::clearIsMask((OZRotoshape *)((char *)this + 18976));
}

uint64_t `non-virtual thunk to'OZRotoshape::clearIsMask(OZRotoshape *this)
{
  return OZRotoshape::clearIsMask((OZRotoshape *)((char *)this - 200));
}

__n128 OZRotoshape::getNaturalDuration@<Q0>(OZRotoshape *this@<X0>, __n128 *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v3 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 272))(v3);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), a2).n128_u64[0];
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'OZRotoshape::getNaturalDuration@<D0>(OZRotoshape *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = OZRotoshape::getNaturalDuration((OZRotoshape *)((char *)this - 216), a2).n128_u64[0];
  return result;
}

uint64_t OZRotoshape::getNaturalDurationFlags(OZRotoshape *this)
{
  return 6;
}

uint64_t `non-virtual thunk to'OZRotoshape::getNaturalDurationFlags(OZRotoshape *this)
{
  return 6;
}

uint64_t OZRotoshape::isFourCornerPinned(OZRotoshape *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4733);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) ^ 1;
  else
    v3 = 1;
  return OZElement::isFourCornerPinned((OZElement *)((char *)this + 200)) & v3;
}

uint64_t `non-virtual thunk to'OZRotoshape::isFourCornerPinned(OZRotoshape *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4708);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) ^ 1;
  else
    v3 = 1;
  return OZElement::isFourCornerPinned((OZElement *)this) & v3;
}

uint64_t OZRotoshape::isCropped(OZRotoshape *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4733);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) ^ 1;
  else
    v3 = 1;
  return OZElement::isCropped((OZElement *)((char *)this + 200)) & v3;
}

uint64_t `non-virtual thunk to'OZRotoshape::isCropped(OZRotoshape *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4708);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) ^ 1;
  else
    v3 = 1;
  return OZElement::isCropped((OZElement *)this) & v3;
}

uint64_t OZRotoshape::isDropShadowEnabled(OZRotoshape *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4733);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) ^ 1;
  else
    v3 = 1;
  return OZElement::isDropShadowEnabled((OZElement *)((char *)this + 200)) & v3;
}

uint64_t `non-virtual thunk to'OZRotoshape::isDropShadowEnabled(OZRotoshape *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 4708);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) ^ 1;
  else
    v3 = 1;
  return OZElement::isDropShadowEnabled((OZElement *)this) & v3;
}

uint64_t OZRotoshape::canReflect(OZRotoshape *this)
{
  int shouldDrawParticles;
  uint64_t v3;
  int v4;
  CMTime var0;
  BOOL var10;
  BOOL var16;
  __int128 v9;
  int v10;
  CGColorSpace *v11;
  OZRenderState v12;

  OZRenderState::OZRenderState(&v12);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  var0 = (CMTime)v12.var0;
  var10 = v12.var10;
  var16 = v12.var16;
  v9 = *(_OWORD *)&v12.var1;
  v10 = 1;
  shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this + 18976, &var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  v3 = *((_QWORD *)this + 4733);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  else
    v4 = 0;
  return OZElement::canReflect((OZElement *)((char *)this + 200)) & (shouldDrawParticles & v4 ^ 1u);
}

void sub_1B2EA9A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::canReflect(OZRotoshape *this)
{
  return OZRotoshape::canReflect((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::enable(OZRotoshape *this, uint64_t a2)
{
  const void *v4;
  void *v5;
  uint64_t result;

  if ((*((_BYTE *)this + 1224) & 8) == 0)
    return OZObjectManipulator::enable((OZRotoshape *)((char *)this + 216), a2);
  v4 = (const void *)*((_QWORD *)this + 145);
  if (!v4)
    return OZObjectManipulator::enable((OZRotoshape *)((char *)this + 216), a2);
  if (!v5)
    return OZObjectManipulator::enable((OZRotoshape *)((char *)this + 216), a2);
  result = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 1872))(v5);
  if ((_DWORD)result)
    return OZObjectManipulator::enable((OZRotoshape *)((char *)this + 216), a2);
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::enable(OZRotoshape *this, uint64_t a2)
{
  return OZRotoshape::enable((OZRotoshape *)((char *)this - 216), a2);
}

uint64_t OZRotoshape::bakeChannels(OZRotoshape *this, const PCTimeRange *a2, const CMTime *a3)
{
  OZSceneNode::bakeChannels((OZRotoshape *)((char *)this + 200), a2, a3);
  (*(void (**)(char *, const PCTimeRange *, const CMTime *))(*((_QWORD *)this + 4713) + 368))((char *)this + 37704, a2, a3);
  return (*(uint64_t (**)(char *, const PCTimeRange *, const CMTime *))(*((_QWORD *)this + 2398) + 920))((char *)this + 19184, a2, a3);
}

uint64_t `non-virtual thunk to'OZRotoshape::bakeChannels(OZRotoshape *this, const PCTimeRange *a2, const CMTime *a3)
{
  OZSceneNode::bakeChannels(this, a2, a3);
  (*(void (**)(char *, const PCTimeRange *, const CMTime *))(*((_QWORD *)this + 4688) + 368))((char *)this + 37504, a2, a3);
  return (*(uint64_t (**)(char *, const PCTimeRange *, const CMTime *))(*((_QWORD *)this + 2373) + 920))((char *)this + 18984, a2, a3);
}

uint64_t OZRotoshape::isActiveAtTime(OZRotoshape *this, CMTime *a2, int a3, int a4, int a5)
{
  int v5;
  OZObjectManipulator *v8;
  CMTime *v9;
  int v10;
  uint64_t v12;
  uint64_t result;
  CMTime v14;
  CMTime v15;

  v5 = a4;
  if ((*((_BYTE *)this + 1224) & 8) == 0)
  {
    v8 = (OZRotoshape *)((char *)this + 216);
    v14 = *a2;
    v9 = &v14;
    v10 = 1;
    return OZObjectManipulator::isActiveAtTime(v8, v9, a3, a4, v10);
  }
  v12 = *((_QWORD *)this + 145);
  if (v12 && (*(_BYTE *)(v12 + 1024) & 4) != 0)
    return 0;
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), a2, 0.0);
  if ((_DWORD)result)
  {
    v8 = (OZRotoshape *)((char *)this + 216);
    v15 = *a2;
    v9 = &v15;
    a3 = 0;
    a4 = v5;
    v10 = a5;
    return OZObjectManipulator::isActiveAtTime(v8, v9, a3, a4, v10);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::isActiveAtTime(OZRotoshape *this, CMTime *a2, int a3, int a4, int a5)
{
  return OZRotoshape::isActiveAtTime((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5);
}

uint64_t OZRotoshape::isActiveInTimeRange(OZRotoshape *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  CMTime v11;

  if ((*((_BYTE *)this + 1224) & 8) == 0)
    return OZObjectManipulator::isActiveInTimeRange((OZRotoshape *)((char *)this + 216), a2, a3, a4, 1);
  v10 = *((_QWORD *)this + 145);
  if (v10 && (*(_BYTE *)(v10 + 1024) & 4) != 0)
    return 0;
  v11 = *(CMTime *)a2;
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), &v11, 0.0);
  if ((_DWORD)result)
    return OZObjectManipulator::isActiveInTimeRange((OZRotoshape *)((char *)this + 216), a2, 0, a4, a5);
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::isActiveInTimeRange(OZRotoshape *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  return OZRotoshape::isActiveInTimeRange((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5);
}

void OZRotoshape::setTimeOffset(__n128 *this, CMTime *a2, char a3)
{
  __n128 v5;
  __int8 *v6;
  unint64_t v7;
  CMTime v8;
  _QWORD v9[6];
  CMTime v10;

  v10 = *a2;
  v5 = OZChannelObjectRootBase::setTimeOffset(this + 16, &v10, a3);
  if (this[2366].n128_u64[0])
  {
    v7 = this[12].n128_u64[1];
    v6 = &this[12].n128_i8[8];
    (*(void (**)(_QWORD *__return_ptr, __int8 *, __n128))(v7 + 1128))(v9, v6, v5);
    v8 = *a2;
    OZMoShape::initPPaintTime((_QWORD *)v6 + 2347, &v8, (const PCTimeRange *)v9);
  }
}

void `non-virtual thunk to'OZRotoshape::setTimeOffset(OZRotoshape *this, CMTime *a2, char a3)
{
  OZRotoshape::setTimeOffset((__n128 *)((char *)this - 200), a2, a3);
}

_QWORD *OZRotoshape::setTimeExtent(OZRotoshape *this, const PCTimeRange *a2, char a3)
{
  _QWORD *result;
  CMTime v6;

  result = (_QWORD *)OZChannelObjectRootBase::setTimeExtent((OZRotoshape *)((char *)this + 256), a2, a3);
  if (*((_QWORD *)this + 4732))
  {
    v6 = *(CMTime *)a2;
    return OZMoShape::initPPaintTime((_QWORD *)this + 2372, &v6, a2);
  }
  return result;
}

_QWORD *`non-virtual thunk to'OZRotoshape::setTimeExtent(OZRotoshape *this, const PCTimeRange *a2, char a3)
{
  return OZRotoshape::setTimeExtent((OZRotoshape *)((char *)this - 200), a2, a3);
}

void OZRotoshape::dirty(OZRotoshape *this)
{
  OZElement::dirty((OZElement *)((char *)this + 200));
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 38128);
}

void `non-virtual thunk to'OZRotoshape::dirty(OZElement *this)
{
  OZElement::dirty(this);
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 37928);
}

void `non-virtual thunk to'OZRotoshape::dirty(OZRotoshape *this)
{
  OZElement::dirty((OZElement *)((char *)this - 16));
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 37912);
}

uint64_t OZRotoshape::didCreateCopyForCopyOnWrite(OZRotoshape *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4732);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 920))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::didCreateCopyForCopyOnWrite(OZRotoshape *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4707);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 920))(result);
  return result;
}

void OZRotoshape::didAddToScene(OZRotoshape *this, OZScene *a2)
{
  OZSceneNode **v3;

  v3 = (OZSceneNode **)((char *)this + 37856);
  OZTransformNode::didAddToScene((OZTransformNode *)((char *)this + 200), a2);
  if (!*((_BYTE *)v3 + 242) && !*((_BYTE *)a2 + 1576))
  {
    if (*v3)
      OZScene::registerNode(a2, *v3);
  }
}

void `non-virtual thunk to'OZRotoshape::didAddToScene(OZRotoshape *this, OZScene *a2)
{
  OZRotoshape::didAddToScene((OZRotoshape *)((char *)this - 200), a2);
}

CGColorSpace **OZRotoshape::didFinishLoadingIntoScene(OZRotoshape *this)
{
  char *v2;
  CGColorSpace **result;

  v2 = (char *)this + 38098;
  result = (CGColorSpace **)OZElement::didFinishLoadingIntoScene((OZElement *)((char *)this + 200));
  if (*v2)
  {
    OZMoShape::completeLoading((OZRotoshape *)((char *)this + 18976), *(double *)(v2 + 6));
    result = OZRotoshape::completeLoading(this);
    *v2 = 0;
  }
  return result;
}

CGColorSpace **`non-virtual thunk to'OZRotoshape::didFinishLoadingIntoScene(OZRotoshape *this)
{
  return OZRotoshape::didFinishLoadingIntoScene((OZRotoshape *)((char *)this - 200));
}

{
  return OZRotoshape::didFinishLoadingIntoScene((OZRotoshape *)((char *)this - 216));
}

OZScene *OZRotoshape::willRemoveFromScene(OZRotoshape *this, OZScene *a2)
{
  OZScene *result;
  void *v5;
  OZLocking *v6;

  result = (OZScene *)OZLockingElement::willRemoveFromScene(this, a2);
  v5 = (void *)*((_QWORD *)this + 4732);
  if (v5)
  {
    if (*((_BYTE *)a2 + 1848))
    {
      if (v6)
        OZLocking::reset(v6);
    }
    OZScene::unregisterNode(a2, (OZSceneNode *)v5);
    return OZScene::removeAllDependencies(a2, (OZSceneNode *)v5);
  }
  return result;
}

OZScene *`non-virtual thunk to'OZRotoshape::willRemoveFromScene(OZRotoshape *this, OZScene *a2)
{
  return OZRotoshape::willRemoveFromScene((OZRotoshape *)((char *)this - 200), a2);
}

BOOL OZRotoshape::shouldDrawGradientOSC(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 144, MEMORY[0x1E0CA2E68], 0.0) == 1;
}

BOOL `non-virtual thunk to'OZRotoshape::shouldDrawGradientOSC(OZRotoshape *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 21672), MEMORY[0x1E0CA2E68], 0.0) == 1;
}

void OZRotoshape::getIconName(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  OZChannel *v4;
  const __CFString *v5;
  OZChannel *v6;
  int ValueAsInt;
  const __CFString *v8;
  OZChannel *v9;
  int v10;

  if ((*((_BYTE *)this + 1224) & 8) != 0)
  {
    v6 = (OZChannel *)((char *)this + 20048);
    v5 = CFSTR("M_LayersList_ObjectIconColor-ShapeMask");
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E0CA2E68], 0.0) == 4)
      goto LABEL_13;
    ValueAsInt = OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0);
    v8 = CFSTR("M_LayersList_ObjectIconColor-SplineShapeMask");
  }
  else
  {
    if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1) & 1) == 0
      && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1))
    {
      v4 = (OZChannel *)((char *)this + 20048);
      if (OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0) != 4)
        OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0);
      v5 = CFSTR("M_LayersList_ObjectIconColor-PaintShape");
      goto LABEL_13;
    }
    v9 = (OZChannel *)((char *)this + 20048);
    v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E0CA2E68], 0.0);
    v5 = CFSTR("M_LayersList_ObjectIconColor-Shape");
    if (v10 == 4)
      goto LABEL_13;
    ValueAsInt = OZChannel::getValueAsInt(v9, MEMORY[0x1E0CA2E68], 0.0);
    v8 = CFSTR("M_LayersList_ObjectIconColor-SplineShape");
  }
  if (ValueAsInt != 5)
    v5 = v8;
LABEL_13:
  PCURL::PCURL(a2, v5);
}

void `non-virtual thunk to'OZRotoshape::getIconName(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  OZRotoshape::getIconName((OZRotoshape *)((char *)this - 200), a2);
}

void OZRotoshape::getIconNameBW(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  OZChannel *v4;
  const __CFString *v5;
  OZChannel *v6;
  int ValueAsInt;
  const __CFString *v8;
  OZChannel *v9;
  int v10;

  if ((*((_BYTE *)this + 1224) & 8) != 0)
  {
    v6 = (OZChannel *)((char *)this + 20048);
    v5 = CFSTR("M_LayersList_ObjectIconGrey-ShapeMask");
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E0CA2E68], 0.0) == 4)
      goto LABEL_13;
    ValueAsInt = OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0);
    v8 = CFSTR("M_LayersList_ObjectIconGrey-SplineShapeMask");
  }
  else
  {
    if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1) & 1) == 0
      && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1))
    {
      v4 = (OZChannel *)((char *)this + 20048);
      if (OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0) != 4)
        OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0);
      v5 = CFSTR("M_LayersList_ObjectIconGrey-PaintShape");
      goto LABEL_13;
    }
    v9 = (OZChannel *)((char *)this + 20048);
    v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E0CA2E68], 0.0);
    v5 = CFSTR("M_LayersList_ObjectIconGrey-Shape");
    if (v10 == 4)
      goto LABEL_13;
    ValueAsInt = OZChannel::getValueAsInt(v9, MEMORY[0x1E0CA2E68], 0.0);
    v8 = CFSTR("M_LayersList_ObjectIconGrey-SplineShape");
  }
  if (ValueAsInt != 5)
    v5 = v8;
LABEL_13:
  PCURL::PCURL(a2, v5);
}

void `non-virtual thunk to'OZRotoshape::getIconNameBW(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  OZRotoshape::getIconNameBW((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::getIconID(OZRotoshape *this)
{
  OZChannel *v2;
  uint64_t v3;
  OZChannel *v4;
  BOOL v5;
  unsigned int v6;
  OZChannel *v7;
  int ValueAsInt;

  if ((*((_BYTE *)this + 1224) & 8) != 0)
  {
    v4 = (OZChannel *)((char *)this + 20048);
    v3 = 36;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E0CA2E68], 0.0) == 4)
      return v3;
    v5 = OZChannel::getValueAsInt(v4, MEMORY[0x1E0CA2E68], 0.0) == 5;
    v6 = 15;
    goto LABEL_11;
  }
  if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1) & 1) != 0
    || !OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1))
  {
    v7 = (OZChannel *)((char *)this + 20048);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), MEMORY[0x1E0CA2E68], 0.0);
    v3 = 35;
    if (ValueAsInt == 4)
      return v3;
    v5 = OZChannel::getValueAsInt(v7, MEMORY[0x1E0CA2E68], 0.0) == 5;
    v6 = 14;
LABEL_11:
    if (v5)
      return v3;
    else
      return v6;
  }
  v2 = (OZChannel *)((char *)this + 20048);
  if (OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) != 4)
    OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0);
  return 9;
}

uint64_t `non-virtual thunk to'OZRotoshape::getIconID(OZRotoshape *this)
{
  return OZRotoshape::getIconID((OZRotoshape *)((char *)this - 200));
}

void OZRotoshape::description(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  const __CFString *v2;

  if ((*((_DWORD *)this + 306) & 8) != 0)
    v2 = CFSTR("Rotoshape Mask Short Desc");
  else
    v2 = CFSTR("Rotoshape Short Desc");
  PCURL::PCURL(a2, v2);
}

void `non-virtual thunk to'OZRotoshape::description(OZRotoshape *this@<X0>, PCURL *a2@<X8>)
{
  const __CFString *v2;

  if ((*((_DWORD *)this + 256) & 8) != 0)
    v2 = CFSTR("Rotoshape Mask Short Desc");
  else
    v2 = CFSTR("Rotoshape Short Desc");
  PCURL::PCURL(a2, v2);
}

uint64_t *OZRotoshape::getLockDependencies(unint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *result;
  unint64_t v7;

  OZLockingElement::getLockDependencies(a1, a2, a3, a4);
  result = *(uint64_t **)(a1 + 37856);
  if (result)
  {
    if (result)
    {
      v7 = (unint64_t)result;
      PCDirectedGraph<OZLocking *>::addEdge(a3, a1, (uint64_t)result);
      return PCDirectedGraph<OZLocking *>::addEdge(a3, v7, a1);
    }
  }
  return result;
}

uint64_t OZRotoshape::acquireObjectLock(OZRotoshape *this)
{
  PCMutex *v1;

  v1 = (PCMutex *)ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));
  return PCMutex::lock(v1);
}

uint64_t OZRotoshape::releaseObjectLock(OZRotoshape *this)
{
  PCMutex *v1;

  v1 = (PCMutex *)ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));
  return PCMutex::unlock(v1);
}

uint64_t OZRotoshape::setDefaultTranslation(OZRotoshape *this, double a2, double a3, double a4)
{
  uint64_t v8;

  v8 = MEMORY[0x1E0CA2E68];
  (*(void (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 2612) + 712))((char *)this + 20896, MEMORY[0x1E0CA2E68], 0);
  (*(void (**)(char *, uint64_t, _QWORD, double))(*((_QWORD *)this + 2631) + 712))((char *)this + 21048, v8, 0, a3);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1552), a2);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1704), a3);
  return OZChannel::setDefaultValue((OZChannel *)((char *)this + 2152), a4);
}

uint64_t OZRotoshape::getLock(OZRotoshape *this)
{
  return ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));
}

uint64_t `non-virtual thunk to'OZRotoshape::setDefaultTranslation(OZRotoshape *this, double a2, double a3, double a4)
{
  return OZRotoshape::setDefaultTranslation((OZRotoshape *)((char *)this - 200), a2, a3, a4);
}

void OZGroup::OZGroup(OZGroup *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZGroup::OZGroup_dimensionTypeImpl *v6;
  OZChannelImpl *Instance;
  OZGroup::OZGroup_fixedWidthImpl *v8;
  OZGroup::OZGroup_fixedWidthInfo *v9;
  OZChannelInfo *v10;
  OZGroup::OZGroup_fixedHeightImpl *v11;
  OZGroup::OZGroup_fixedHeightInfo *v12;
  OZChannelInfo *v13;
  OZGroup::OZGroup_versionImpl *v14;
  OZChannelImpl *v15;
  PCString *v16;
  unsigned int *v17;
  char *LayerBlendModes;
  PCString v19;
  PCString v20;

  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *v5 = &off_1E65A0790;
  v5[2] = &unk_1E65A10D0;
  v5[6] = &unk_1E65A1328;
  v5[816] = &unk_1E65A1380;
  v5[2347] = v5 + 2347;
  v5[2348] = v5 + 2347;
  v5[2349] = 0;
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Members"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18800), &v20, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Dimension Type Enum"));
  PCURL::PCURL((PCURL *)&v19, CFSTR("Channel Group Dimension Type"));
  Instance = (OZChannelImpl *)OZGroup::OZGroup_dimensionTypeImpl::getInstance(v6);
  OZChannelEnumDimension::OZChannelEnumDimension((OZGroup *)((char *)this + 18928), 0, &v20, &v19, (OZChannelFolder *)((char *)this + 448), 0x133u, 0, Instance);
  PCString::~PCString(&v19);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Fixed Resolution"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19184), &v20, (OZChannelFolder *)((char *)this + 448), 0x12Du, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Fixed Width"));
  v9 = (OZGroup::OZGroup_fixedWidthInfo *)OZGroup::OZGroup_fixedWidthImpl::getInstance(v8);
  v10 = (OZChannelInfo *)OZGroup::OZGroup_fixedWidthInfo::getInstance(v9);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19336), &v20, (OZChannelFolder *)((char *)this + 448), 0x12Eu, 0, (OZChannelImpl *)v9, v10);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Fixed Height"));
  v12 = (OZGroup::OZGroup_fixedHeightInfo *)OZGroup::OZGroup_fixedHeightImpl::getInstance(v11);
  v13 = (OZChannelInfo *)OZGroup::OZGroup_fixedHeightInfo::getInstance(v12);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19488), &v20, (OZChannelFolder *)((char *)this + 448), 0x12Fu, 0, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Is Flattened"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19640), 0, &v20, (OZChannelFolder *)((char *)this + 448), 0x137u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Is Layer Order"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19792), &v20, (OZChannelFolder *)((char *)this + 448), 0x131u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Channel Group Freeze Action");
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 19944), (void (*)(void *))OZGroup::freezeCallbackStub, this, &v20, (OZChannelFolder *)((char *)this + 448), 0x136u, 0xAu);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Aperture Width"));
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20136), &v20, (OZChannelFolder *)((char *)this + 448), 0x138u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group Aperture Height"));
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20288), &v20, (OZChannelFolder *)((char *)this + 448), 0x139u, 0, 0, 0);
  PCString::~PCString(&v20);
  v14 = (OZGroup::OZGroup_versionImpl *)PCString::PCString(&v20, "Hidden Channel");
  v15 = (OZChannelImpl *)OZGroup::OZGroup_versionImpl::getInstance(v14);
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20440), 5, &v20, (OZChannelFolder *)((char *)this + 448), 0x13Au, 2, v15, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Group New Fixed Res Behavior"));
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 20592), 1, &v20, (OZChannelFolder *)((char *)this + 448), 0x13Bu, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Host 3D Engine World");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), &v20, (OZChannelFolder *)((char *)this + 448), 0x13Cu, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "People Occlusion");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20872), 1, &v20, (OZChannelFolder *)((char *)this + 20744), 0x13Du, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Physics");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 21024), &v20, (OZChannelFolder *)((char *)this + 20744), 0x13Eu, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Gravity (m/s)");
  OZChannelDouble::OZChannelDouble((OZGroup *)((char *)this + 21152), 9.8, &v20, (OZChannelFolder *)((char *)this + 21024), 0x13Fu, 0, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(&v20, "Depth Map");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZGroup *)((char *)this + 21304), &v20, (OZChannelFolder *)((char *)this + 20744), 0x140u, 0);
  PCString::~PCString(&v20);
  *((_BYTE *)this + 22888) = 1;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18800), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20136), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 20136));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20288), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 20288));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20592), 4259872, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 20592));
  v16 = PCBlend::modeMenuString((PCBlend *)1);
  OZChannelEnum::setStrings((const PCString *)this + 854, v16, 1);
  LODWORD(v20.var0) = 0;
  LayerBlendModes = (char *)PCBlend::getLayerBlendModes((PCBlend *)&v20, v17);
  OZChannelEnum::setTags((OZGroup *)((char *)this + 6832), LayerBlendModes, (int)v20.var0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 6832), 34.0);
  OZChannelBase::reset((OZChannelBase *)this + 61, 0);
  (*(void (**)(OZGroup *, uint64_t))(*(_QWORD *)this + 1704))(this, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6680), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6680));
  OZChannelBase::setFlag((OZChannelBase *)this + 61, 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 61);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 14568), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17520), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 17520));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12672), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 12672));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 14568), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8232), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 8232));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19184), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 19184));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 20744), 0x20000);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 20744), 0, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 20744));
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 21152), 9.8);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21152), -100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21152), 100.0);
  *((_QWORD *)this + 2862) = 0;
}

void sub_1B2EAAE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannel *a11, OZChannelButton *a12, OZChannelBool *a13, OZChannelBool *a14, OZChannel *a15, OZChannel *a16, PCString *a17, _QWORD *a18, OZChannelFolder *a19, OZChannelBool *a20,PCString a21,PCString a22)
{
  OZElement *v22;
  OZChannelFolder *v23;
  OZChannel *v24;
  OZChannel *v25;
  OZChannel *v26;
  OZChannelFolder *v27;
  OZChannel *v28;

  PCString::~PCString(&a22);
  OZChannel::~OZChannel(v28);
  OZChannelFolder::~OZChannelFolder(v23);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v27);
  OZChannel::~OZChannel(v26);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(v25);
  OZChannel::~OZChannel(v24);
  OZChannelButton::~OZChannelButton(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelBool::~OZChannelBool(a20);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelFolder::~OZChannelFolder(a19);
  std::__list_imp<unsigned int>::clear(a18);
  OZElement::~OZElement(v22);
  _Unwind_Resume(a1);
}

void OZGroup::OZGroup(OZGroup *this, const OZGroup *a2, uint64_t a3)
{
  _QWORD *v6;
  PCString *v7;
  unsigned int *v8;
  char *LayerBlendModes;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  const void *v14;
  char *v15;
  OZSceneNode *v16;
  OZChannelBase *v17;
  _QWORD *v18;
  _QWORD *v19;
  OZChannelBase *v20;
  OZScene *v21;
  _QWORD *v22;
  int v23;
  PCString v24;

  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *v6 = &off_1E65A0790;
  v6[2] = &unk_1E65A10D0;
  v6[6] = &unk_1E65A1328;
  v6[816] = &unk_1E65A1380;
  v6[2347] = v6 + 2347;
  v22 = v6 + 2347;
  v6[2348] = v6 + 2347;
  v6[2349] = 0;
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Group Members"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18800), &v24, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0);
  PCString::~PCString(&v24);
  OZChannelEnum::OZChannelEnum((OZGroup *)((char *)this + 18928), (const OZGroup *)((char *)a2 + 18928), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2366) = &unk_1E65A1740;
  *((_QWORD *)this + 2368) = &unk_1E65A1AB0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19184), (const OZChannelBase *)((char *)a2 + 19184), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19336), (const OZChannelBase *)((char *)a2 + 19336), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2417) = &off_1E6551AF8;
  *((_QWORD *)this + 2419) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19488), (const OZChannelBase *)a2 + 174, (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2436) = &off_1E6551AF8;
  *((_QWORD *)this + 2438) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19640), (const OZChannelBase *)((char *)a2 + 19640), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19792), (const OZChannelBase *)((char *)a2 + 19792), (OZChannelFolder *)((char *)this + 448));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 19944), (const OZChannelButton *)((char *)a2 + 19944), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 20136), (const OZChannelBase *)((char *)a2 + 20136), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2517) = &off_1E6551358;
  *((_QWORD *)this + 2519) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20288), (const OZChannelBase *)((char *)a2 + 20288), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2536) = &off_1E6551358;
  *((_QWORD *)this + 2538) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20440), (const OZChannelBase *)((char *)a2 + 20440), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2555) = &off_1E6551358;
  *((_QWORD *)this + 2557) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20592), (const OZChannelBase *)((char *)a2 + 20592), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2574) = &off_1E6551358;
  *((_QWORD *)this + 2576) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), (const OZChannelFolder *)((char *)a2 + 20744), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20872), (const OZChannelBase *)((char *)a2 + 20872), (OZChannelFolder *)((char *)this + 20744));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 21024), (const OZChannelFolder *)((char *)a2 + 21024), (OZChannelFolder *)((char *)this + 20744));
  OZChannel::OZChannel((OZChannel *)((char *)this + 21152), (const OZChannelBase *)((char *)a2 + 21152), (OZChannelFolder *)((char *)this + 21024));
  *((_QWORD *)this + 2644) = &off_1E6551358;
  *((_QWORD *)this + 2646) = &unk_1E65516B8;
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZGroup *)((char *)this + 21304), (const OZGroup *)((char *)a2 + 21304), (OZChannelFolder *)((char *)this + 20744));
  *((_WORD *)this + 11444) = *((_WORD *)a2 + 11444);
  v7 = PCBlend::modeMenuString((PCBlend *)1);
  OZChannelEnum::setStrings((const PCString *)this + 854, v7, 1);
  v23 = 0;
  LayerBlendModes = (char *)PCBlend::getLayerBlendModes((PCBlend *)&v23, v8);
  OZChannelEnum::setTags((OZGroup *)((char *)this + 6832), LayerBlendModes, v23);
  OZChannelButton::setPrivateData((OZChannelButton *)((char *)this + 19944), this);
  if ((a3 & 1) == 0)
  {
    v10 = (char *)a2 + 18776;
    if ((const OZGroup *)((char *)a2 + 18776) != *((const OZGroup **)a2 + 2348))
    {
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 16) + 96))(v11 + 16);
        if ((a3 & 0x50) != 0)
          v13 = 1;
        else
          v13 = v12;
        if ((v13 & 1) != 0)
        {
          v14 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 8) + 24))(*(_QWORD *)(v11 + 8), v11, a3);
          if (v14)
          {
            if (v15)
            {
              v16 = (OZSceneNode *)v15;
              if ((a3 & 8) == 0)
              {
                OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v15 + 16));
                v17 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v16 + 640))(v16);
                OZChannelBase::setNameUnset(v17, 1);
              }
              v18 = operator new(0x18uLL);
              v19 = (_QWORD *)*((_QWORD *)this + 2348);
              *v18 = v22;
              v18[1] = v19;
              v18[2] = v16;
              *v19 = v18;
              *((_QWORD *)this + 2348) = v18;
              ++*((_QWORD *)this + 2349);
              v20 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v16 + 640))(v16);
              OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 56), v20);
              (*(void (**)(OZSceneNode *, OZGroup *))(*(_QWORD *)v16 + 256))(v16, this);
              v21 = (OZScene *)*((_QWORD *)this + 121);
              if (v21)
              {
                OZScene::registerNode(v21, v16);
                OZScene::addAllDependencies(*((_QWORD *)this + 121), v16);
              }
            }
          }
        }
        v10 = *(char **)v10;
      }
      while (v10 != *((char **)a2 + 2348));
    }
  }
  (*(void (**)(OZGroup *, uint64_t))(*(_QWORD *)this + 1704))(this, 1);
  *((_QWORD *)this + 2862) = 0;
}

void sub_1B2EAB518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelImageWithOptions *a9, OZChannel *a10, OZChannelBool *a11, OZChannel *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannelBool *a16, OZChannelBool *a17, OZChannel *a18, OZChannel *a19, OZChannelBool *a20,PCString *a21,OZChannelFolder *a22,OZChannelButton *a23)
{
  OZElement *v23;
  OZChannelFolder *v24;
  OZChannelFolder *v25;
  uint64_t v26;

  OZChannel::~OZChannel(a10);
  OZChannelFolder::~OZChannelFolder(v25);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelFolder::~OZChannelFolder(v24);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannelButton::~OZChannelButton(a23);
  OZChannelBool::~OZChannelBool(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannel::~OZChannel(a18);
  OZChannel::~OZChannel(a19);
  OZChannelBool::~OZChannelBool(a20);
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannelFolder::~OZChannelFolder(a22);
  std::__list_imp<unsigned int>::clear(*(_QWORD **)(v26 - 112));
  OZElement::~OZElement(v23);
  _Unwind_Resume(a1);
}

void OZGroup::~OZGroup(OZGroup *this)
{
  uint64_t i;
  uint64_t *v3;
  OZSceneNode *v4;
  uint64_t v5;
  OZChannelBase *v6;
  OZScene *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E65A0790;
  *((_QWORD *)this + 2) = &unk_1E65A10D0;
  *((_QWORD *)this + 6) = &unk_1E65A1328;
  *((_QWORD *)this + 816) = &unk_1E65A1380;
  for (i = *((_QWORD *)this + 2349); i; i = *((_QWORD *)this + 2349))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 2348);
    v4 = (OZSceneNode *)v3[2];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    *((_QWORD *)this + 2349) = i - 1;
    operator delete(v3);
    v6 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v4 + 640))(v4);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), v6);
    v7 = (OZScene *)*((_QWORD *)this + 121);
    if (v7)
    {
      OZScene::unregisterNode(v7, v4);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v4);
    }
    (*(void (**)(OZSceneNode *))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = *((_QWORD *)this + 2862);
  if (v8)
  {
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(v8 + 144, *(PCSharedCount **)(v8 + 152));
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v8 + 120, *(_QWORD **)(v8 + 128));
    ProCore_Impl::PCNSRefImpl::release((id *)(v8 + 112));
    std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(v8 + 80, *(id **)(v8 + 88));
    ProCore_Impl::PCNSRefImpl::release((id *)(v8 + 64));
    std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v8);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)this + 2862) = 0;
  }
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZGroup *)((char *)this + 21304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21152));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 21024));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 20872));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 20744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20440));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20136));
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this + 19944));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19792));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19640));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19488));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19336));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19184));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2366);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18800));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 2347);
  OZElement::~OZElement((OZElement *)this);
}

{
  OZGroup::~OZGroup(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZGroup::~OZGroup(OZGroup *this)
{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 16));
}

{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 48));
}

{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 6528));
}

{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZGroup::~OZGroup((OZGroup *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZGroup::canDelete(OZGroup *this)
{
  uint64_t v2;

  if (((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) & 1) != 0)
    return 0;
  v2 = 1;
  if ((OZGroup::hasUnlockedDescendant(this, 1) & 1) == 0)
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 960))(this) ^ 1;
  return v2;
}

uint64_t OZGroup::hasUnlockedDescendant(OZGroup *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  OZGroup *v8;
  OZImageElement *v9;
  uint64_t result;

  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  if (v4 == v5)
    return 0;
  v6 = v5;
  while (1)
  {
    while (1)
    {
      v7 = *(_QWORD **)(v4 + 16);
      if (v7)
      {
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      if (((*(uint64_t (**)(_QWORD *, uint64_t))(v7[2] + 56))(v7 + 2, 1) & 1) == 0)
        break;
LABEL_11:
      if (v8)
        goto LABEL_12;
LABEL_13:
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v6)
        return 0;
    }
    if (!v8 || (OZGroup::hasLockedDescendant(v8, 1) & 1) == 0)
      break;
LABEL_12:
    if ((a2 & (*(unsigned int (**)(OZGroup *))(*(_QWORD *)v8 + 960))(v8) & 1) == 0)
      goto LABEL_13;
    v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)v8 + 1024))(v8);
    v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)v8 + 1032))(v8);
    result = 0;
    a2 = 1;
    if (v4 == v6)
      return result;
  }
  if (v9 && OZImageElement::isLockedDropZone(v9))
    goto LABEL_11;
  return 1;
}

uint64_t `non-virtual thunk to'OZGroup::canDelete(OZGroup *this)
{
  return OZGroup::canDelete((OZGroup *)((char *)this - 16));
}

void OZGroup::getIconName(OZGroup *this@<X0>, PCURL *a2@<X8>)
{
  const __CFString *v4;
  int v5;
  int v6;
  const __CFString *v7;
  const __CFString *v8;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
  {
    v4 = CFSTR("M_LayersList_ObjectIconColor-360Group");
  }
  else
  {
    v5 = (*(uint64_t (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]);
    v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
    if (v5)
    {
      v7 = CFSTR("M_LayersList_ObjectIconColor-3DGroupRasterized");
      v8 = CFSTR("M_LayersList_ObjectIconColor-2DGroupRasterized");
    }
    else
    {
      v7 = CFSTR("M_LayersList_ObjectIconColor-3DGroup");
      v8 = CFSTR("M_LayersList_ObjectIconColor-2DGroup");
    }
    if (v6)
      v4 = v7;
    else
      v4 = v8;
  }
  PCURL::PCURL(a2, v4);
}

BOOL OZGroup::is360Group(OZGroup *this)
{
  return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2;
}

void OZGroup::getIconNameBW(OZGroup *this@<X0>, PCURL *a2@<X8>)
{
  const __CFString *v4;
  int v5;
  int v6;
  const __CFString *v7;
  const __CFString *v8;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
  {
    v4 = CFSTR("M_LayersList_ObjectIconGrey-360Group");
  }
  else
  {
    v5 = (*(uint64_t (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]);
    v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
    if (v5)
    {
      v7 = CFSTR("M_LayersList_ObjectIconGrey-3DGroupRasterized");
      v8 = CFSTR("M_LayersList_ObjectIconGrey-2DGroupRasterized");
    }
    else
    {
      v7 = CFSTR("M_LayersList_ObjectIconGrey-3DGroup");
      v8 = CFSTR("M_LayersList_ObjectIconGrey-2DGroup");
    }
    if (v6)
      v4 = v7;
    else
      v4 = v8;
  }
  PCURL::PCURL(a2, v4);
}

uint64_t OZGroup::getIconID(OZGroup *this)
{
  int v3;
  int v4;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
    return 0;
  v3 = (*(uint64_t (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]);
  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  if (!v3)
    return v4 == 0;
  if (v4)
    return 26;
  return 27;
}

__n128 OZGroup::getNaturalDuration@<Q0>(OZGroup *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  if ((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this))
  {
    v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), a2).n128_u64[0];
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *a2 = *(__n128 *)MEMORY[0x1E0CA2E68];
    a2[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'OZGroup::getNaturalDuration@<D0>(OZGroup *this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = OZGroup::getNaturalDuration((OZGroup *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

BOOL OZGroup::isFreezable(OZGroup *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 120);
  return (!v2 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16, 1) & 1) == 0)
      && (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 0;
}

void OZGroup::freezeCallback(OZGroup *this)
{
  unsigned int v2;
  PCString v3;
  _QWORD *v4[2];

  if (((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 800))(this) & 1) == 0
    && (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 792))(this))
  {
    if (*((_QWORD *)this + 121))
    {
      v4[0] = 0;
      v4[1] = 0;
      v3.var0 = (__CFString *)v4;
      v2 = *((_DWORD *)this + 20);
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)&v3, &v2, &v2);
      OZChannelBase::setRangeName(*((OZChannelBase **)this + 121), &v3);
      OZDocument::postNotification(*(OZDocument **)(*((_QWORD *)this + 121) + 1584), 136);
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v3, v4[0]);
    }
  }
}

void sub_1B2EABE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void OZGroup::copyLinkedIDs(OZGroup *this, const OZSceneNode *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;

  OZSceneNode::copyLinkedIDs(this, a2);
  if ((a3 & 1) == 0)
  {
    v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
    for (i = (*(uint64_t (**)(const OZSceneNode *))(*(_QWORD *)a2 + 1024))(a2);
          v6 != (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this)
       && i != (*(uint64_t (**)(const OZSceneNode *))(*(_QWORD *)a2 + 1032))(a2);
          i = *(_QWORD *)(i + 8))
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v6 + 16) + 216))(*(_QWORD *)(v6 + 16), *(_QWORD *)(i + 16), a3);
      v6 = *(_QWORD *)(v6 + 8);
    }
  }
}

void OZGroup::copyLinkedObjects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OZSceneNode::copyLinkedObjects(a1, a2, a3, a5 != 0, 0, a6, a7, a8);
}

CGColorSpace **OZGroup::getOriginalBounds(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  const void *FreezeFootage;
  __int128 v12;
  CGColorSpace **result;
  const void *v16;
  OZElement *v17;
  OZElement *v18;
  double v19;
  _QWORD *v21;
  const void *v22;
  const CMTime *v23;
  int ValueAsInt;
  int v25;
  double v26;
  int v27;
  float64x2_t v28;
  float64x2_t v29[2];
  __int128 v30;
  int64_t var3;
  _QWORD v32[4];
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  OZRenderState v42;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1440))(a1))
  {
    FreezeFootage = OZElement::getFreezeFootage((OZElement *)a1);
    v34[0] = 0;
    v34[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v34[2] = _Q0;
    *(_OWORD *)&v42.var0.var0 = xmmword_1B30503B0;
    v42.var0.var3 = 0x3FF0000000000000;
    memset(&v42.var1, 0, 24);
    *(_QWORD *)&v42.var4 = 0x3FF0000000000000;
    memset(&v42.var5, 0, 24);
    HIDWORD(v42.var7.var0[1][0]) = 0;
    v42.var7.var0[0][3] = 0.0;
    *(_OWORD *)&v42.var7.var0[0][1] = 0x3FF0000000000000uLL;
    LOBYTE(v42.var7.var0[1][0]) = 0;
    *(_OWORD *)&v42.var7.var0[1][1] = *MEMORY[0x1E0CA2E68];
    v42.var7.var0[1][3] = *(double *)(MEMORY[0x1E0CA2E68] + 16);
    v42.var7.var0[2][0] = 0.0;
    LOWORD(v42.var7.var0[2][1]) = 0;
    v42.var7.var0[2][2] = 0.0;
    LOWORD(v42.var7.var0[2][3]) = 0;
    *(_QWORD *)((char *)&v42.var7.var0[2][3] + 4) = 0x100000000;
    BYTE4(v42.var7.var0[3][0]) = 0;
    *(_OWORD *)&v42.var7.var0[3][1] = 0uLL;
    LOWORD(v42.var7.var0[3][3]) = 768;
    *(_QWORD *)&v42.var8 = 0x408F400000000000;
    LOBYTE(v42.var14) = 0;
    HIDWORD(v42.var14) = 0;
    LOBYTE(v42.var15) = 0;
    *(_QWORD *)&v42.var16 = -1;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)&v42.var18 = _Q0;
    (*(void (**)(const void *, _QWORD *, const OZRenderState *, OZRenderState *))(*(_QWORD *)FreezeFootage
                                                                                           + 1568))(FreezeFootage, v34, a3, &v42);
    v12 = *(_OWORD *)&v34[2];
    __asm { FMOV            V1.2D, #-0.5 }
    *(float64x2_t *)a2 = vmulq_f64(*(float64x2_t *)&v34[2], _Q1);
    *(_OWORD *)(a2 + 16) = v12;
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v42.var7.var0[3][2]);
    return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v42.var7.var0[3][1]);
  }
  else if (OZChannel::getValueAsInt((OZChannel *)(a1 + 19184), MEMORY[0x1E0CA2E68], 0.0)
         && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1))
  {
    v23 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 19336), MEMORY[0x1E0CA2E68], 0.0);
    result = (CGColorSpace **)OZChannel::getValueAsInt((OZChannel *)(a1 + 19488), v23, 0.0);
    if (ValueAsInt >= 0)
      v25 = ValueAsInt;
    else
      v25 = ValueAsInt + 1;
    v26 = (double)-(v25 >> 1);
    if ((int)result >= 0)
      v27 = (int)result;
    else
      v27 = (_DWORD)result + 1;
    *(double *)a2 = v26;
    *(double *)(a2 + 8) = (double)-(v27 >> 1);
    *(double *)(a2 + 16) = (double)ValueAsInt;
    *(double *)(a2 + 24) = (double)(int)result;
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    v28 = _Q0;
    *(float64x2_t *)(a2 + 16) = _Q0;
    OZRenderState::OZRenderState(&v42, a3);
    v42.var4 = 1;
    v42.var16 = 0;
    v41 = 0x3FF0000000000000;
    v38 = 0x3FF0000000000000;
    v35 = 0x3FF0000000000000;
    v34[0] = 0x3FF0000000000000;
    memset(&v34[1], 0, 32);
    v36 = 0u;
    v37 = 0u;
    v39 = 0u;
    v40 = 0u;
    (*(void (**)(uint64_t, _QWORD *, const OZRenderState *))(*(_QWORD *)a1 + 1272))(a1, v34, a3);
    OZSceneNode::begin_t<OZElement,false,false>(a1, (uint64_t)v32);
    if (v32[0] != v32[2])
    {
      v16 = *(const void **)(v32[0] + 16);
      if (v16)
      {
        if (v17)
        {
          v18 = v17;
          do
          {
            var3 = a3->var0.var3;
            v30 = *(_OWORD *)&a3->var0.var0;
            if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v18 + 2)
                                                                                               + 104))((uint64_t)v18 + 16, &v30, 0, 1, 1))
            {
              OZElement::getOpacity(v18, (const CMTime *)a3, 0);
              if (v19 <= -0.0000001 || (v19 < 0.0000001 ? (_ZF = !a3->var24) : (_ZF = 0), !_ZF))
              {
                v29[0] = 0uLL;
                v29[1] = v28;
                (*(void (**)(OZElement *, float64x2_t *, _QWORD *, OZRenderState *))(*(_QWORD *)v18 + 1528))(v18, v29, v34, &v42);
                PCRect<double>::operator|=((float64x2_t *)a2, v29);
              }
            }
            v21 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v32);
            if (*v21 == v21[2])
              break;
            v22 = *(const void **)(*v21 + 16);
            if (!v22)
              break;
          }
          while (v18);
        }
      }
    }
    if (a3->var27)
      OZElement::expandBoundsToIncludeDropShadow(a1, (float64x2_t *)a2, (const CMTime *)a3);
    return (CGColorSpace **)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v33);
  }
  return result;
}

void sub_1B2EAC3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *OZSceneNode::begin_t<OZElement,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  const void *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if ((_QWORD *)v4 != result)
  {
    v6 = *(const void **)(v4 + 16);
    if (!v6)
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2EAC4B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::getProjectedBounds(uint64_t a1, float64x2_t *a2, uint64_t a3, __int128 *a4)
{
  const void *v13;
  OZElement *v14;
  OZElement *v15;
  double v16;
  _QWORD *v17;
  const void *v18;
  const CMTime *v20;
  int ValueAsInt;
  int v22;
  int v23;
  double v24;
  int v25;
  float64x2_t v26;
  _BYTE v27[128];
  float64x2_t v28[2];
  __int128 v29;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  __asm { FMOV            V0.2D, #-1.0 }
  v26 = _Q0;
  a2[1] = _Q0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 19184), MEMORY[0x1E0CA2E68], 0.0)
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1)
    && OZChannel::getValueAsInt((OZChannel *)(a1 + 20592), MEMORY[0x1E0CA2E68], 0.0))
  {
    v20 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 19336), MEMORY[0x1E0CA2E68], 0.0);
    v22 = OZChannel::getValueAsInt((OZChannel *)(a1 + 19488), v20, 0.0);
    if (ValueAsInt >= 0)
      v23 = ValueAsInt;
    else
      v23 = ValueAsInt + 1;
    v24 = (double)-(v23 >> 1);
    if (v22 >= 0)
      v25 = v22;
    else
      v25 = v22 + 1;
    a2->f64[0] = v24;
    a2->f64[1] = (double)-(v25 >> 1);
    a2[1].f64[0] = (double)ValueAsInt;
    a2[1].f64[1] = (double)v22;
  }
  else
  {
    v42 = 0x3FF0000000000000;
    v39 = 0x3FF0000000000000;
    v36 = 0x3FF0000000000000;
    v33 = 0x3FF0000000000000;
    v34 = 0u;
    v35 = 0u;
    v37 = 0u;
    v38 = 0u;
    v40 = 0u;
    v41 = 0u;
    (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)a1 + 1256))(a1, &v33, a4);
    OZSceneNode::begin_t<OZElement,false,false>(a1, (uint64_t)v31);
    if (v31[0] != v31[2])
    {
      v13 = *(const void **)(v31[0] + 16);
      if (v13)
      {
        if (v14)
        {
          v15 = v14;
          do
          {
            v30 = *((_QWORD *)a4 + 2);
            v29 = *a4;
            if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v15 + 2)
                                                                                               + 104))((uint64_t)v15 + 16, &v29, 0, 1, 1))
            {
              OZElement::getOpacity(v15, (const CMTime *)a4, 0);
              if (v16 <= -0.0000001 || v16 >= 0.0000001)
              {
                v28[0] = 0uLL;
                v28[1] = v26;
                PCMatrix44Tmpl<double>::operator*(a3, (__int128 *)&v33, (uint64_t)v27);
                (*(void (**)(OZElement *, float64x2_t *, _BYTE *, __int128 *))(*(_QWORD *)v15 + 1528))(v15, v28, v27, a4);
                PCRect<double>::operator|=(a2, v28);
              }
            }
            v17 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v31);
            if (*v17 == v17[2])
              break;
            v18 = *(const void **)(*v17 + 16);
            if (!v18)
              break;
          }
          while (v15);
        }
      }
    }
    if (*((_BYTE *)a4 + 241))
      OZElement::expandBoundsToIncludeDropShadow(a1, a2, (const CMTime *)a4);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v32);
  }
  return 1;
}

void sub_1B2EAC780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a38);
  _Unwind_Resume(a1);
}

int8x16_t OZGroup::getImageBoundsWithEffectsAndCrop(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *, uint64_t, uint64_t);
  int8x16_t result;
  float64x2_t v11;
  int v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v21;
  int64x2_t v22;
  double v23;
  int8x16_t v24;
  float64_t v25;
  float64_t v26;
  float64_t v27;
  float64_t v28;

  v6 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 1656))(a1, MEMORY[0x1E0CA2E68]);
  v7 = *a1;
  if (!v6)
    goto LABEL_5;
  if (((*(uint64_t (**)(_QWORD *))(v7 + 416))(a1) & 1) == 0)
  {
    v7 = *a1;
LABEL_5:
    v9 = (void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 1520);
    v8 = a1;
    goto LABEL_6;
  }
  v8 = *(_QWORD **)(a1[123] + 16);
  v9 = (void (**)(_QWORD *, uint64_t, uint64_t))(*v8 + 80);
LABEL_6:
  (*v9)(v8, a2, a3);
  result.i64[0] = *(_QWORD *)(a2 + 16);
  if (*(double *)result.i64 >= 0.0)
  {
    result.i64[0] = *(_QWORD *)(a2 + 24);
    if (*(double *)result.i64 >= 0.0)
    {
      v27 = 0.0;
      v28 = 0.0;
      v25 = 0.0;
      v26 = 0.0;
      v11 = 0uLL;
      if (*(_BYTE *)(a3 + 232))
      {
        v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 1608))(a1);
        v11 = 0uLL;
        v13 = 0uLL;
        if (v12)
        {
          OZChannelCrop::getValue((OZChannelCrop *)(a1 + 2190), (const CMTime *)a3, &v28, &v27, &v26, &v25, 0.0);
          v15.f64[0] = v27;
          v14.f64[0] = v28;
          v14.f64[1] = v26;
          __asm { FMOV            V2.2D, #0.5 }
          v21 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          *(int32x2_t *)&v14.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v14, _Q2), v21))));
          v15.f64[1] = v25;
          *(int32x2_t *)&v15.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v15, _Q2), v21))));
          v22.i64[0] = SLODWORD(v15.f64[0]);
          v22.i64[1] = SHIDWORD(v15.f64[0]);
          v11 = vcvtq_f64_s64(v22);
          v22.i64[0] = SLODWORD(v14.f64[0]);
          v22.i64[1] = SHIDWORD(v14.f64[0]);
          v13 = vcvtq_f64_s64(v22);
        }
      }
      else
      {
        v13 = 0uLL;
      }
      v23 = *(double *)(a2 + 8);
      *(double *)a2 = v13.f64[0] + *(double *)a2;
      *(double *)(a2 + 8) = v13.f64[1] + v23;
      v24 = (int8x16_t)vsubq_f64(*(float64x2_t *)(a2 + 16), vaddq_f64(v11, v13));
      result = vbicq_s8(v24, (int8x16_t)vcltzq_f64((float64x2_t)v24));
      *(int8x16_t *)(a2 + 16) = result;
    }
  }
  return result;
}

void OZGroup::getFourCornerPointsInObjectSpace(uint64_t a1, const OZRenderState *a2, double *a3, double *a4, float64x2_t *a5, double *a6)
{
  __int128 v12;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float64_t v37;
  OZRenderState v38;
  float64x2_t v39;
  float64x2_t v40;
  CMTime v41;

  v12 = *(_OWORD *)&a2->var0.var0;
  v41.epoch = a2->var0.var3;
  v39 = 0uLL;
  __asm { FMOV            V1.2D, #-1.0 }
  v40 = _Q1;
  *(_OWORD *)&v41.value = v12;
  OZRenderState::OZRenderState(&v38, a2);
  v38.var19 = 1;
  (*(void (**)(uint64_t, float64x2_t *, OZRenderState *))(*(_QWORD *)a1 + 1560))(a1, &v39, &v38);
  if (a2->var19)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14840), &v41, 0.0);
    v19 = v18;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14992), &v41, 0.0);
    v20 = v39.f64[1];
    *a3 = v19 + v39.f64[0];
    a3[1] = v21 + v20;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15544), &v41, 0.0);
    v23 = v22;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15696), &v41, 0.0);
    v24 = v39.f64[1];
    *a4 = v23 + v39.f64[0] + v40.f64[0];
    a4[1] = v25 + v24;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16248), &v41, 0.0);
    v37 = v26;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16400), &v41, 0.0);
    v27.f64[0] = v37;
    v27.f64[1] = v28;
    *a5 = vaddq_f64(v27, vaddq_f64(v39, v40));
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16952), &v41, 0.0);
    v30 = v29;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 17104), &v41, 0.0);
    v31 = v30 + v39.f64[0];
    v33 = v32 + v39.f64[1] + v40.f64[1];
  }
  else
  {
    v34 = v39.f64[1];
    v31 = v39.f64[0];
    *a3 = v39.f64[0];
    a3[1] = v34;
    v35 = v40.f64[1];
    v36 = v31 + v40.f64[0];
    *a4 = v31 + v40.f64[0];
    a4[1] = v34;
    v33 = v34 + v35;
    a5->f64[0] = v36;
    a5->f64[1] = v33;
  }
  *a6 = v31;
  a6[1] = v33;
}

uint64_t OZGroup::getDocumentSpaceBoundary(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  double v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
    if (v6 != v7)
    {
      v8 = v7;
      do
      {
        v9 = *(const void **)(v6 + 16);
        if (v9)
        {
          if (v10)
          {
            v24 = xmmword_1B304F270;
            v25 = xmmword_1B304F270;
            v23 = xmmword_1B304F270;
            (*(void (**)(void *, __int128 *, uint64_t))(*(_QWORD *)v10 + 1536))(v10, &v23, a3);
            v11 = *a2;
            v12 = a2[1];
            if (*a2 <= v12 && (v14 = a2[2], v13 = a2[3], v14 <= v13) && (v16 = a2[4], v15 = a2[5], v16 <= v15))
            {
              if (*(double *)&v23 <= *((double *)&v23 + 1))
              {
                v18 = v24;
                if (*(double *)&v24 <= *((double *)&v24 + 1))
                {
                  v19 = v25;
                  if (*(double *)&v25 <= *((double *)&v25 + 1))
                  {
                    if (v11 >= *(double *)&v23)
                      v11 = *(double *)&v23;
                    if (v12 <= *((double *)&v23 + 1))
                      v12 = *((double *)&v23 + 1);
                    *a2 = v11;
                    a2[1] = v12;
                    if (v14 >= *(double *)&v18)
                      v20 = *(double *)&v18;
                    else
                      v20 = v14;
                    if (v13 <= *((double *)&v18 + 1))
                      v13 = *((double *)&v18 + 1);
                    a2[2] = v20;
                    a2[3] = v13;
                    if (v16 >= *(double *)&v19)
                      v21 = *(double *)&v19;
                    else
                      v21 = v16;
                    if (v15 <= *((double *)&v19 + 1))
                      v15 = *((double *)&v19 + 1);
                    a2[4] = v21;
                    a2[5] = v15;
                  }
                }
              }
            }
            else
            {
              v17 = v24;
              *(_OWORD *)a2 = v23;
              *((_OWORD *)a2 + 1) = v17;
              *((_OWORD *)a2 + 2) = v25;
            }
          }
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 != v8);
    }
  }
  return 1;
}

_QWORD *OZGroup::getLocalVolume(uint64_t a1, double *a2, const OZRenderState *a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __int128 *v17;
  double v18;
  __int128 *v19;
  double v20;
  __int128 *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v31;
  double v32;
  const CMTime *v33;
  signed int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  OZRenderState v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int64_t var3;
  double v61;
  double v62;
  double v63;

  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 19184), MEMORY[0x1E0CA2E68], 0.0)
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1))
  {
    v33 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v34 = OZChannel::getValueAsInt((OZChannel *)(a1 + 19336), MEMORY[0x1E0CA2E68], 0.0) >> 1;
    result = (_QWORD *)OZChannel::getValueAsInt((OZChannel *)(a1 + 19488), v33, 0.0);
    *a2 = (double)-v34;
    a2[1] = (double)v34;
    a2[2] = (double)-(result >> 1);
    a2[3] = (double)(result >> 1);
    a2[4] = 0.0;
    a2[5] = 0.0;
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    if ((_DWORD)result)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
      if ((_QWORD *)v7 != result)
      {
        v8 = result;
        do
        {
          result = *(_QWORD **)(v7 + 16);
          if (result)
          {
            if (result)
            {
              v9 = result;
              if (!a3->var23
                || (var3 = a3->var0.var3,
                    v59 = *(_OWORD *)&a3->var0.var0,
                    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(result[2] + 104))(result + 2, &v59, 1, 1, 1), (_DWORD)result))
              {
                v57 = xmmword_1B304F270;
                v58 = xmmword_1B304F270;
                v56 = xmmword_1B304F270;
                (*(void (**)(_QWORD *, __int128 *, const OZRenderState *))(*v9 + 1360))(v9, &v56, a3);
                v55 = 0x3FF0000000000000;
                v52 = 0x3FF0000000000000;
                v49 = 0x3FF0000000000000;
                v46 = 0x3FF0000000000000;
                v47 = 0u;
                v48 = 0u;
                v50 = 0u;
                v51 = 0u;
                v53 = 0u;
                v54 = 0u;
                OZRenderState::OZRenderState(&v45, a3);
                v45.var4 = 1;
                (*(void (**)(_QWORD *, uint64_t *, OZRenderState *))(*v9 + 1256))(v9, &v46, &v45);
                v44 = 0x3FF0000000000000;
                v41 = 0x3FF0000000000000;
                v38 = 0x3FF0000000000000;
                v35 = 0x3FF0000000000000;
                v36 = 0u;
                v37 = 0u;
                v39 = 0u;
                v40 = 0u;
                v42 = 0u;
                v43 = 0u;
                (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(_QWORD *)a1 + 1272))(a1, &v35, &v45);
                PCMatrix44Tmpl<double>::leftMult((uint64_t)&v46, (double *)&v35);
                v10 = 0;
                v11 = -1.0;
                v12 = 1.0;
                v13 = 1.0;
                v14 = -1.0;
                v15 = 1.0;
                v16 = -1.0;
                do
                {
                  v17 = (__int128 *)((char *)&v56 + 8);
                  if ((v10 & 1) != 0)
                    v17 = &v56;
                  v18 = *(double *)v17;
                  v19 = (__int128 *)((char *)&v57 + 8);
                  if ((v10 & 2) != 0)
                    v19 = &v57;
                  v20 = *(double *)v19;
                  v21 = (__int128 *)((char *)&v58 + 8);
                  if ((v10 & 4) != 0)
                    v21 = &v58;
                  v22 = *(double *)v21;
                  v61 = v18;
                  v62 = v20;
                  v63 = v22;
                  result = PCMatrix44Tmpl<double>::transform<double>((double *)&v46, &v61, &v61);
                  if (v10)
                  {
                    if (v12 >= v61)
                      v12 = v61;
                    if (v11 <= v61)
                      v11 = v61;
                    if (v13 >= v62)
                      v13 = v62;
                    if (v14 <= v62)
                      v14 = v62;
                    if (v15 >= v63)
                      v15 = v63;
                    if (v16 <= v63)
                      v16 = v63;
                  }
                  else
                  {
                    v14 = v62;
                    v16 = v63;
                    v11 = v61;
                    v12 = v61;
                    v13 = v62;
                    v15 = v63;
                  }
                  ++v10;
                }
                while (v10 != 8);
                v23 = *a2;
                v24 = a2[1];
                if (*a2 <= v24 && (v26 = a2[2], v25 = a2[3], v26 <= v25) && (v28 = a2[4], v27 = a2[5], v28 <= v27))
                {
                  if (v12 > v11 || v13 > v14 || v15 > v16)
                    goto LABEL_38;
                  if (v23 >= v12)
                    v23 = v12;
                  if (v24 <= v11)
                    v24 = v11;
                  *a2 = v23;
                  a2[1] = v24;
                  if (v26 >= v13)
                    v31 = v13;
                  else
                    v31 = v26;
                  if (v25 <= v14)
                    v25 = v14;
                  a2[2] = v31;
                  a2[3] = v25;
                  if (v28 >= v15)
                    v32 = v15;
                  else
                    v32 = v28;
                  a2[4] = v32;
                  if (v27 > v16)
                    v16 = v27;
                }
                else
                {
                  *a2 = v12;
                  a2[1] = v11;
                  a2[2] = v13;
                  a2[3] = v14;
                  a2[4] = v15;
                }
                a2[5] = v16;
              }
            }
          }
LABEL_38:
          v7 = *(_QWORD *)(v7 + 8);
        }
        while ((_QWORD *)v7 != v8);
      }
    }
  }
  return result;
}

void OZGroup::drawGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp");
  pcAbortImpl();
}

uint64_t OZGroup::gatherWorldLights@<X0>(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  OZGroup *v12;
  _BYTE v14[32];
  PC_Sp_counted_base *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  int v20;
  PCSharedCount v21[4];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[32];
  int v28;
  _QWORD v29[4];
  uint64_t v30;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = &unk_1E64FC250;
  *(_BYTE *)(a3 + 24) = 0;
  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v29);
  v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v7 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  v23 = v7;
  v24 = v6;
  v25 = v7;
  v26 = 0;
  while (v29[0] != v23)
  {
    if (v29[0] == v29[2])
    {
      v8 = 0;
    }
    else
    {
      v8 = *(void **)(v29[0] + 16);
      if (v8)
    }
    OZLight::buildLiLight((OZLight *)v8, a2, (uint64_t)v21);
    LiLightSet::add(a3, (const LiLight *)v21);
    LiLight::~LiLight(v21);
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v29);
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v21);
  v9 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v10 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  v15 = (PC_Sp_counted_base *)v10;
  v16 = v9;
  v17 = v10;
  v18 = 0;
  while (v21[0].var0 != v15)
  {
    if (v21[0].var0 != v21[2].var0)
    {
      v11 = (const void *)*((_QWORD *)v21[0].var0 + 2);
      if (v11)
      {
        if (v12)
        {
          OZGroup::returnGroupLights(v12, a2, (uint64_t)v14);
          LiLightSet::add(a3, (uint64_t)v14);
          PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v14);
        }
      }
    }
    OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v27);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
}

void sub_1B2EAD2E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3 - 104);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::returnGroupLights@<X0>(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void *v11;
  OZLight *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  OZGroup *v16;
  uint64_t v17[4];
  PC_Sp_counted_base *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _OWORD v22[2];
  int v23;
  PCSharedCount v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _BYTE v30[32];
  int v31;
  _QWORD v32[4];
  uint64_t v33;
  __int128 v34;
  int64_t var3;

  v34 = *(_OWORD *)&a2->var0.var0;
  var3 = a2->var0.var3;
  v6 = (*(uint64_t (**)(char *, __int128 *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 104))((char *)this + 16, &v34, 1, 1, 1);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = &unk_1E64FC250;
  *(_BYTE *)(a3 + 24) = 0;
  result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1424))(this);
  if ((result & 1) == 0)
  {
    OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v32);
    v8 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
    v9 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    v26 = v9;
    v27 = v8;
    v28 = v9;
    v29 = 0;
    if (v32[0] == v9)
      v10 = 1;
    else
      v10 = v6;
    if (v10 == 1)
    {
      while (v32[0] != v26)
      {
        if (v32[0] != v32[2])
        {
          v11 = *(const void **)(v32[0] + 16);
          if (v11)
          {
            if (v12)
            {
              OZLight::buildLiLight(v12, a2, (uint64_t)v24);
              LiLightSet::add(a3, (const LiLight *)v24);
              LiLight::~LiLight(v24);
            }
          }
        }
        OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v32);
      }
      OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v24);
      v13 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
      v14 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
      memset(v22, 0, sizeof(v22));
      v23 = 1065353216;
      v18 = (PC_Sp_counted_base *)v14;
      v19 = v13;
      v20 = v14;
      v21 = 0;
      while (v24[0].var0 != v18)
      {
        if (v24[0].var0 != v24[2].var0)
        {
          v15 = (const void *)*((_QWORD *)v24[0].var0 + 2);
          if (v15)
          {
            if (v16)
            {
              OZGroup::returnGroupLights(v17, v16, a2);
              LiLightSet::add(a3, (uint64_t)v17);
              PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v17);
            }
          }
        }
        OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v24);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
    }
    else
    {
      *(_BYTE *)(a3 + 24) = 1;
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v30);
    return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v33);
  }
  return result;
}

void sub_1B2EAD5F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3 - 136);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZSceneNode::begin_t<OZLight,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  const void *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if ((_QWORD *)v4 != result)
  {
    v6 = *(const void **)(v4 + 16);
    if (!v6)
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2EAD71C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZSceneNode::begin_t<OZGroup,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  const void *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if ((_QWORD *)v4 != result)
  {
    v6 = *(const void **)(v4 + 16);
    if (!v6)
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2EAD7D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void OZGroup::addPostEffects(uint64_t a1@<X0>, uint64_t a2@<X1>, const PCSharedCount *a3@<X2>, PCSharedCount *a4@<X8>)
{
  uint64_t v8;
  int v9;
  LiEquirectProject *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t i;
  float v16;
  const PCSharedCount *v17;
  PCSharedCount *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  float v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t j;
  float v26;
  double v27;
  float v28;
  float v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  float64x2_t v34[2];
  uint64_t v35;
  __int128 v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  char v40;
  int v41;
  int v42;

  if (!a3->var0)
  {
    a4->var0 = 0;
    v17 = a3 + 1;
    v18 = a4 + 1;
LABEL_16:
    PCSharedCount::PCSharedCount(v18, v17);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1) != 2)
  {
    a4->var0 = a3->var0;
    v18 = a4 + 1;
    v17 = a3 + 1;
    goto LABEL_16;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v9 = *(_DWORD *)(v8 + 344);
  v41 = *(_DWORD *)(v8 + 348);
  v42 = v9;
  v10 = (LiEquirectProject *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v40 = (char)v10;
  if (*(_BYTE *)(a2 + 242))
  {
    v37 = xmmword_1B304F230;
    v38 = xmmword_1B304F230;
    v39 = 1065353216;
    if (*(_QWORD *)(a2 + 1296))
      v11 = *(_QWORD *)(a2 + 1296);
    else
      v11 = *(_QWORD *)(a2 + 1280);
    if (v11)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v11 + 16))(v36);
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      v33 = 4;
      memset(v34, 0, sizeof(v34));
      v35 = 0;
      PCMatrix44Tmpl<double>::getTransformation(v36, (uint64_t)&v30);
      *(float64x2_t *)((char *)v34 + 8) = vnegq_f64(*(float64x2_t *)((char *)v34 + 8));
      PCMatrix44Tmpl<double>::setTransformation((uint64_t)v36, (double *)&v30);
      v12 = 0;
      v13 = &v37;
      v14 = v36;
      do
      {
        for (i = 0; i != 3; ++i)
        {
          v16 = *((double *)v14 + i);
          *((float *)v13 + i) = v16;
        }
        ++v12;
        v13 = (__int128 *)((char *)v13 + 12);
        v14 += 2;
      }
      while (v12 != 3);
    }
    if (PCMatrix33Tmpl<float>::isIdentity((float *)&v37))
    {
      a4->var0 = a3->var0;
      PCSharedCount::PCSharedCount(a4 + 1, a3 + 1);
      return;
    }
    PCMakePtr<LiEquirectReorient,PCPtr<LiImageSource> const&,int const&,int const&,PCMatrix33Tmpl<float> &,BOOL &>(a3, &v42, &v41, &v37, &v40, (PCSharedCount *)v36);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a4, (const PCSharedCount *)v36);
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 1280);
    v37 = xmmword_1B304F230;
    v38 = xmmword_1B304F230;
    v39 = 1065353216;
    if (v19)
    {
      v20 = (*(double (**)(uint64_t))(*(_QWORD *)v19 + 504))(v19);
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v19 + 16))(v36, v19);
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      v33 = 4;
      memset(v34, 0, sizeof(v34));
      v35 = 0;
      PCMatrix44Tmpl<double>::getTransformation(v36, (uint64_t)&v30);
      v34[0] = vnegq_f64(v34[0]);
      PCMatrix44Tmpl<double>::setTransformation((uint64_t)v36, (double *)&v30);
      v21 = 0;
      v23 = &v37;
      v24 = v36;
      do
      {
        for (j = 0; j != 3; ++j)
        {
          v26 = *((double *)v24 + j);
          *((float *)v23 + j) = v26;
        }
        ++v21;
        v23 = (__int128 *)((char *)v23 + 12);
        v24 += 2;
      }
      while (v21 != 3);
      v22 = v20;
      v27 = v22 * 3.14159265;
      v9 = v42;
    }
    else
    {
      v27 = 282.743339;
    }
    v28 = (float)v9;
    if (*(_BYTE *)(a2 + 202))
      v28 = (float)*(unsigned int *)(a2 + 324);
    v29 = v27 / 180.0;
    LODWORD(v30) = LiEquirectProject::computeDistanceToImagePlane(v10, v28, v29);
    PCMakePtr<LiEquirectProject,PCPtr<LiImageSource> const&,int const&,int const&,float const&,PCMatrix33Tmpl<float> &,BOOL &>(a3, &v42, &v41, (float *)&v30, &v37, &v40, (PCSharedCount *)v36);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a4, (const PCSharedCount *)v36);
  }
  PCSharedCount::~PCSharedCount((PCSharedCount *)v36 + 1);
}

void sub_1B2EADB18(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

double PCMatrix44Tmpl<double>::setTransformation(uint64_t a1, double *a2)
{
  return PCMatrix44Tmpl<double>::setTransformation(a1, 0, 4, *a2, a2[1], a2[2], a2[7], a2[8], a2[9], a2[3], a2[4], a2[5], a2[10], a2[11], 0.0, 0.0, 0.0, 1.0);
}

BOOL PCMatrix33Tmpl<float>::isIdentity(float *a1)
{
  return fabsf(*a1 + -1.0) < 0.00001
      && fabsf(a1[1]) < 0.00001
      && fabsf(a1[2]) < 0.00001
      && fabsf(a1[3]) < 0.00001
      && fabsf(a1[4] + -1.0) < 0.00001
      && fabsf(a1[5]) < 0.00001
      && fabsf(a1[6]) < 0.00001
      && fabsf(a1[7]) < 0.00001
      && fabsf(a1[8] + -1.0) < 0.00001;
}

PCSharedCount *PCMakePtr<LiEquirectReorient,PCPtr<LiImageSource> const&,int const&,int const&,PCMatrix33Tmpl<float> &,BOOL &>@<X0>(const PCSharedCount *a1@<X0>, int *a2@<X1>, int *a3@<X2>, _DWORD *a4@<X3>, char *a5@<X4>, PCSharedCount *a6@<X8>)
{
  PC_Sp_counted_base *v12;

  v12 = (PC_Sp_counted_base *)operator new();
  LiEquirectReorient::LiEquirectReorient((uint64_t)v12, a1, *a2, *a3, a4, *a5);
  a6->var0 = v12;
  return PCSharedCount::PCSharedCount(a6 + 1, (PCShared_base *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
}

void sub_1B2EADCF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40C56E03D1);
  _Unwind_Resume(a1);
}

PCSharedCount *PCMakePtr<LiEquirectProject,PCPtr<LiImageSource> const&,int const&,int const&,float const&,PCMatrix33Tmpl<float> &,BOOL &>@<X0>(const PCSharedCount *a1@<X0>, int *a2@<X1>, int *a3@<X2>, float *a4@<X3>, _DWORD *a5@<X4>, char *a6@<X5>, PCSharedCount *a7@<X8>)
{
  PC_Sp_counted_base *v14;

  v14 = (PC_Sp_counted_base *)operator new();
  LiEquirectProject::LiEquirectProject((uint64_t)v14, a1, *a2, *a3, a5, *a6, *a4);
  a7->var0 = v14;
  return PCSharedCount::PCSharedCount(a7 + 1, (PCShared_base *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
}

void sub_1B2EADDAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408093706CLL);
  _Unwind_Resume(a1);
}

void OZGroup::buildRenderGraph(OZGroup *this, OZRenderParams *a2, PCSharedCount *a3, const OZRenderGraphState *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  OZLiCachingImageSource *v11;
  LiGeode *v12;
  uint64_t v13;
  __n128 Resolution;
  __n128 v15;
  int v21;
  uint64_t i;
  char *v23;
  __int128 v24;
  int v25;
  uint64_t j;
  char *v27;
  __int128 v28;
  LiImageSource *v29;
  PCSharedCount v30[15];
  CMTime v31;
  _QWORD v32[20];
  uint64_t v33;
  PCSharedCount v34;
  PCSharedCount v35;
  PCSharedCount v36;
  PCSharedCount v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  PCSharedCount v42;

  if ((OZElement::shouldCacheRenders((OZElement *)this) & 1) == 0
    && OZElement::isCachedRenderDirty((OZElement *)this))
  {
    v40 = 0;
    v41 = 0;
    OZElement::setCachedTexture((uint64_t)this, &v40);
    v8 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v39 = 0;
    OZElement::setCachedMetalTexture((uint64_t)this, &v39);
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  }
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1440))(this))
  {
    (*(void (**)(OZGroup *, OZRenderParams *, PCSharedCount *))(*(_QWORD *)this + 1976))(this, a2, a3);
  }
  else if (OZElement::shouldCacheRenders((OZElement *)this))
  {
    v11 = (OZLiCachingImageSource *)operator new();
    OZLiCachingImageSource::OZLiCachingImageSource(v11, a2, (OZElement *)this);
    v29 = (LiImageSource *)v11;
    PCSharedCount::PCSharedCount(v30, (OZLiCachingImageSource *)((char *)v11 + *(_QWORD *)(*(_QWORD *)v11 - 24)));
    v38.n128_u64[0] = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v38.n128_i8[8]);
    if (OZElement::isCachedRenderDirty((OZElement *)this))
    {
      (*(void (**)(CMTime *__return_ptr, OZGroup *, OZRenderParams *, const OZRenderGraphState *, _QWORD))(*(_QWORD *)this + 1936))(&v31, this, a2, a4, 0);
      v38.n128_u64[0] = v31.value;
      PCSharedCount::PCSharedCount(&v36, (const PCSharedCount *)&v31.timescale);
      PCSharedCount::operator=(&v38.n128_i64[1], (uint64_t *)&v36);
      PCSharedCount::~PCSharedCount(&v36);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v31.timescale);
      if (!v29)
        throw_PCNullPointerException(1);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)v29 + 2, (PCShared_base *)v38.n128_u64[0]);
    }
    v12 = (LiGeode *)operator new();
    LiGeode::LiGeode(v12, v29);
    v36.var0 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(&v37, (LiGeode *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    if (!v36.var0)
      throw_PCNullPointerException(1);
    *((_DWORD *)v36.var0 + 130) = *((_DWORD *)this + 20);
    (*(void (**)(OZGroup *, OZRenderParams *, const OZRenderGraphState *))(*(_QWORD *)this + 2040))(this, a2, a4);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v34, &v36);
    if ((*(unsigned int (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]))
    {
      if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1624))(this))
      {
        (*(void (**)(CMTime *__return_ptr, OZGroup *, __n128 *, PCSharedCount *, OZRenderParams *, PCSharedCount *, const OZRenderGraphState *))(*(_QWORD *)this + 2000))(&v31, this, &v38, &v36, a2, a3, a4);
        v34.var0 = (PC_Sp_counted_base *)v31.value;
        PCSharedCount::PCSharedCount(&v42, (const PCSharedCount *)&v31.timescale);
        PCSharedCount::operator=((uint64_t *)&v35, (uint64_t *)&v42);
        PCSharedCount::~PCSharedCount(&v42);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v31.timescale);
      }
      (*(void (**)(OZGroup *, PC_Sp_counted_base *, OZRenderParams *))(*(_QWORD *)this + 1912))(this, v34.var0, a2);
      v31 = *(CMTime *)a2;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6680), &v31, 0.0);
      if (!v34.var0)
        throw_PCNullPointerException(1);
      *((_QWORD *)v34.var0 + 68) = v13;
      (*(void (**)(OZGroup *, OZRenderParams *, const OZRenderGraphState *, PC_Sp_counted_base *))(*(_QWORD *)this + 2040))(this, a2, a4, v36.var0);
    }
    LiGraphBuilder::add2d(a3, &v34);
    PCSharedCount::~PCSharedCount(&v35);
    PCSharedCount::~PCSharedCount(&v37);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v38.n128_i8[8]);
    PCSharedCount::~PCSharedCount(v30);
  }
  else
  {
    if (((*(uint64_t (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]) & 1) != 0
      || (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
    {
      Resolution = OZRenderParams::getResolution(a2, &v38);
      if ((*(unsigned int (**)(OZGroup *, __n128))(*(_QWORD *)this + 1640))(this, Resolution) == 2
        && *((_BYTE *)a2 + 242) == 0)
      {
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)&v31.value = _Q0;
        v15.n128_f64[0] = OZRenderParams::setResolution(a2, &v31);
      }
      v21 = (*(uint64_t (**)(OZGroup *, OZRenderParams *, __n128))(*(_QWORD *)this + 2072))(this, a2, v15);
      if (!v21)
        LiGraphBuilder::partitionWorld((uint64_t)a3);
      OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v31, a4);
      LiGraphBuilder::getCurrentLocalToWorld((LiGraphBuilder *)a3, (uint64_t)&v29);
      for (i = 0; i != 16; i += 4)
      {
        v23 = (char *)&v31 + i * 8;
        v24 = *(_OWORD *)&v30[i + 1].var0;
        *((_OWORD *)v23 + 6) = *(_OWORD *)&v30[i - 1].var0;
        *((_OWORD *)v23 + 7) = v24;
      }
      OZElement::buildRenderGraph((OZElement *)this, (CMTime *)a2, (LiGraphBuilder *)a3, (const OZRenderGraphState *)&v31);
      if (!v21)
        LiGraphBuilder::partitionWorld((uint64_t)a3);
      OZRenderParams::setResolution(a2, &v38);
    }
    else
    {
      if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 1
        && OZGroup::isLayerOrder(this)
        && (OZGroup::isFlattened(this, (const OZRenderState *)a2) & 1) == 0)
      {
        LiGraphBuilder::partitionWorld((uint64_t)a3);
        v25 = 1;
      }
      else
      {
        v25 = 0;
      }
      OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v31, a4);
      LiGraphBuilder::getCurrentLocalToWorld((LiGraphBuilder *)a3, (uint64_t)&v29);
      for (j = 0; j != 16; j += 4)
      {
        v27 = (char *)&v31 + j * 8;
        v28 = *(_OWORD *)&v30[j + 1].var0;
        *((_OWORD *)v27 + 6) = *(_OWORD *)&v30[j - 1].var0;
        *((_OWORD *)v27 + 7) = v28;
      }
      (*(void (**)(OZGroup *, OZRenderParams *, PCSharedCount *, CMTime *, _QWORD))(*(_QWORD *)this + 1952))(this, a2, a3, &v31, 0);
      if (v25)
        LiGraphBuilder::partitionWorld((uint64_t)a3);
    }
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v33);
    std::__list_imp<unsigned int>::clear(v32);
  }
}

void sub_1B2EAE354(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  uint64_t v5;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v5 - 104));
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v5 - 168));
  PCSharedCount::~PCSharedCount(v3);
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

BOOL OZGroup::isLayerOrder(OZGroup *this)
{
  return ((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) & 0xFFFFFFFD) == 0
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 19792), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t OZGroup::isFlattened(OZGroup *this, const OZRenderState *a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this))
  {
    result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
    if (!(_DWORD)result)
      return result;
    if ((OZGroup *)a2->var17 == this
      && ((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1864))(this) & 1) == 0
      && ((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1608))(this) & 1) == 0)
    {
      return (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1624))(this);
    }
  }
  return 1;
}

void `non-virtual thunk to'OZGroup::buildRenderGraph(OZGroup *this, OZRenderParams *a2, PCSharedCount *a3, const OZRenderGraphState *a4)
{
  OZGroup::buildRenderGraph((OZGroup *)((char *)this - 6528), a2, a3, a4);
}

uint64_t OZGroup::shouldDepthClip(OZGroup *this)
{
  return (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
}

BOOL OZGroup::doesTransformFromLocalToScreenSpace(OZGroup *this, const OZRenderParams *a2)
{
  int v4;
  BOOL v5;

  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 2072))(this);
  if ((*(unsigned int (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]))
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
    return 1;
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
    return *((_BYTE *)a2 + 242) == 0;
  return 0;
}

uint64_t OZGroup::shouldBeAppliedToChildrenAtTime(OZElement *this, OZEffect *a2, CMTime *a3)
{
  int v6;
  double v7;
  int BlendMode;
  int v9;
  uint64_t result;
  __int128 v12;
  CMTimeEpoch epoch;

  v6 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1640))(this);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20440), MEMORY[0x1E0CA2E68], 0.0);
  if (v7 >= 4.0)
    BlendMode = (*(uint64_t (**)(OZElement *, _QWORD))(*(_QWORD *)this + 1576))(this, MEMORY[0x1E0CA2E68]);
  else
    BlendMode = OZElement::getBlendMode(this, MEMORY[0x1E0CA2E68]);
  v9 = BlendMode;
  v12 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  result = (*(uint64_t (**)(OZEffect *, __int128 *))(*(_QWORD *)a2 + 696))(a2, &v12);
  if ((_DWORD)result)
    return v6 == 1 && v9 == 34;
  return result;
}

_QWORD *OZGroup::getEffectListForChildren@<X0>(_QWORD *this@<X0>, CMTime *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  OZEffect *v7;
  _QWORD *v8;
  uint64_t v9;
  CMTime v10;
  __int128 v11;
  CMTimeEpoch epoch;

  v4 = this + 122;
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  if (this + 122 != (_QWORD *)this[123])
  {
    v6 = (uint64_t)this;
    do
    {
      v7 = *(OZEffect **)(*v4 + 16);
      v11 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      this = (_QWORD *)(*(uint64_t (**)(OZEffect *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 280))(v7, &v11, 0, 1, 1);
      if ((_DWORD)this)
      {
        v10 = *a2;
        this = (_QWORD *)OZGroup::shouldBeAppliedToChildrenAtTime((OZElement *)v6, v7, &v10);
        if (!(_DWORD)this)
          return this;
        this = operator new(0x18uLL);
        v8 = (_QWORD *)a3[1];
        v9 = a3[2];
        *this = a3;
        this[1] = v8;
        this[2] = v7;
        *v8 = this;
        a3[1] = this;
        a3[2] = v9 + 1;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4 != *(_QWORD **)(v6 + 984));
  }
  return this;
}

void sub_1B2EAE7C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::appliesEffectToChildren(OZGroup *this, CMTime *a2)
{
  char *v2;
  OZEffect *v5;
  uint64_t shouldBeAppliedToChildrenAtTime;
  CMTime v8;
  _QWORD v9[3];

  v2 = (char *)this + 976;
  v9[0] = v9;
  v9[1] = v9;
  v9[2] = 0;
  if ((OZGroup *)((char *)this + 976) == *((OZGroup **)this + 123))
  {
    shouldBeAppliedToChildrenAtTime = 0;
  }
  else
  {
    do
    {
      v5 = *(OZEffect **)(*(_QWORD *)v2 + 16);
      v8 = *a2;
      shouldBeAppliedToChildrenAtTime = OZGroup::shouldBeAppliedToChildrenAtTime((OZElement *)this, v5, &v8);
      if ((shouldBeAppliedToChildrenAtTime & 1) != 0)
        break;
      v2 = *(char **)v2;
    }
    while (v2 != *((char **)this + 123));
  }
  std::__list_imp<unsigned int>::clear(v9);
  return shouldBeAppliedToChildrenAtTime;
}

void sub_1B2EAE878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::getEffectListForGeodeAtTime@<X0>(uint64_t this@<X0>, CMTime *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  OZEffect *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  CMTime v12;

  v4 = (uint64_t *)(this + 976);
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  if (this + 976 != *(_QWORD *)(this + 984))
  {
    v6 = this;
    while (1)
    {
      v7 = *(OZEffect **)(*v4 + 16);
      v12 = *a2;
      this = OZGroup::shouldBeAppliedToChildrenAtTime((OZElement *)v6, v7, &v12);
      v8 = *(uint64_t **)(v6 + 984);
      if ((this & 1) == 0)
        break;
      v4 = (uint64_t *)*v4;
      if (v4 == v8)
        return this;
    }
    if (v4 != v8)
    {
      v9 = (_QWORD *)a3[1];
      v10 = a3[2] + 1;
      do
      {
        v11 = *(_QWORD *)(*v4 + 16);
        this = (uint64_t)operator new(0x18uLL);
        *(_QWORD *)(this + 8) = v9;
        *(_QWORD *)(this + 16) = v11;
        *(_QWORD *)this = a3;
        *v9 = this;
        a3[1] = this;
        a3[2] = v10;
        v4 = (uint64_t *)*v4;
        ++v10;
        v9 = (_QWORD *)this;
      }
      while (v4 != v8);
    }
  }
  return this;
}

void sub_1B2EAE960(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZGroup::addGeodeEffectsToState(OZGroup *this, OZRenderGraphState *a2, CMTime *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  CMTime v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v11 = *a3;
  OZGroup::getEffectListForChildren(this, &v11, &v12);
  v4 = v14;
  if (v14)
  {
    v6 = v12;
    v5 = v13;
    v7 = *v13;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    v9 = *((_QWORD *)a2 + 8);
    v8 = (_QWORD *)((char *)a2 + 64);
    *(_QWORD *)(v9 + 8) = v5;
    *v5 = v9;
    *v8 = v6;
    *(_QWORD *)(v6 + 8) = v8;
    v8[2] += v4;
    v14 = 0;
  }
  return std::__list_imp<unsigned int>::clear(&v12);
}

uint64_t OZGroup::setupGraphBuilder(OZGroup *this, LiGraphBuilder *a2, const OZRenderParams *a3)
{
  OZElement::setupGraphBuilder((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  return (*(uint64_t (**)(OZGroup *, LiGraphBuilder *, const OZRenderParams *, _QWORD, _QWORD))(*(_QWORD *)this + 2336))(this, a2, a3, 0, 0);
}

void OZGroup::addGroupToGraphBuilder(OZGroup *this, PCSharedCount *a2, OZRenderState *a3, uint64_t a4, int a5)
{
  LiGroup *v10;
  _BOOL8 isLayerOrder;
  char v12;
  __n128 v13;
  int v14;
  int v15;
  PC_Sp_counted_base *v16;
  _BOOL4 var28;
  _BOOL4 shouldLockToCamera;
  __n128 v19;
  char v20;
  OZElement *var17;
  double v22;
  double v23;
  PC_Sp_counted_base *var0;
  float64x2_t v25;
  double v26;
  double v27;
  float64x2_t v28;
  double v29;
  double v30;
  float64x2_t v31;
  double v32;
  double v33;
  float64x2_t v34;
  double v35;
  double v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  PCSharedCount v50;
  PCSharedCount v51;
  OZRenderState v52;

  OZRenderState::OZRenderState(&v52, a3);
  v10 = (LiGroup *)operator new();
  LiGroup::LiGroup(v10);
  v50.var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v51, (LiGroup *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  if (!v10)
    throw_PCNullPointerException(1);
  *((_DWORD *)v50.var0 + 130) = *((_DWORD *)this + 20);
  isLayerOrder = OZGroup::isLayerOrder(this);
  (*(void (**)(LiGroup *, _BOOL8))(*(_QWORD *)v10 + 192))(v10, isLayerOrder);
  if (!v50.var0)
    throw_PCNullPointerException(1);
  v12 = (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2;
  LiGroup::setIs360((uint64_t)v50.var0, v12);
  v48 = 0.0;
  v49 = 0.0;
  v47 = 0;
  (*(void (**)(OZGroup *, double *, double *, uint64_t *, OZRenderState *, _QWORD))(*(_QWORD *)this + 1312))(this, &v49, &v48, &v47, a3, 0);
  if (!v50.var0)
    throw_PCNullPointerException(1);
  v13.n128_f64[0] = v49 * v48;
  *((_BYTE *)v50.var0 + 564) = v49 * v48 < 0.0;
  if (!*((_QWORD *)this + 120)
    && (*(unsigned int (**)(OZGroup *, __n128))(*(_QWORD *)this + 1640))(this, v13) != 1)
  {
    if (!v50.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v50.var0 + 552) = 0;
  }
  if ((a4 & 1) != 0)
    v14 = 1;
  else
    v14 = (*(uint64_t (**)(OZGroup *, _QWORD, __n128))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68], v13);
  if (a5)
  {
    v15 = (OZGroup *)v52.var17 == this ? 0 : v14;
    if (v15 == 1)
    {
      if ((*(unsigned int (**)(OZGroup *, OZRenderState *, __n128))(*(_QWORD *)this + 2072))(this, &v52, v13)|| (a4 & 1) != 0)
      {
        v46 = 0x3FF0000000000000;
        v43 = 0x3FF0000000000000;
        v40 = 0x3FF0000000000000;
        v37 = 0x3FF0000000000000;
        v38 = 0u;
        v39 = 0u;
        v41 = 0u;
        v42 = 0u;
        v44 = 0u;
        v45 = 0u;
        if (!v50.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(PC_Sp_counted_base *, uint64_t *))(*(_QWORD *)v50.var0 + 16))(v50.var0, &v37);
        var0 = v50.var0;
        if (!v50.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(float64x2_t *__return_ptr, OZGroup *, OZRenderState *, uint64_t))(*(_QWORD *)this + 2264))(&v25, this, &v52, a4);
        (*(void (**)(PC_Sp_counted_base *, float64x2_t *))(*(_QWORD *)var0 + 216))(var0, &v25);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v25.f64[1]);
      }
      else
      {
        v46 = 0x3FF0000000000000;
        v43 = 0x3FF0000000000000;
        v40 = 0x3FF0000000000000;
        v37 = 0x3FF0000000000000;
        v38 = 0u;
        v39 = 0u;
        v41 = 0u;
        v42 = 0u;
        v44 = 0u;
        v45 = 0u;
        v52.var4 = 1;
        (*(void (**)(OZGroup *, uint64_t *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v37, &v52);
        if (!v50.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(PC_Sp_counted_base *, uint64_t *))(*(_QWORD *)v50.var0 + 16))(v50.var0, &v37);
      }
      goto LABEL_46;
    }
  }
  if ((OZGroup::isFlattened(this, &v52) & 1) == 0
    && (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 1)
  {
    (*(void (**)(OZGroup *, PC_Sp_counted_base *, OZRenderState *))(*(_QWORD *)this + 1912))(this, v50.var0, a3);
    goto LABEL_46;
  }
  v16 = v50.var0;
  if (!v50.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t *__return_ptr, OZGroup *, OZRenderState *, _QWORD))(*(_QWORD *)this + 2264))(&v37, this, &v52, 0);
  (*(void (**)(PC_Sp_counted_base *, uint64_t *))(*(_QWORD *)v16 + 216))(v16, &v37);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v38);
  v46 = 0x3FF0000000000000;
  v43 = 0x3FF0000000000000;
  v40 = 0x3FF0000000000000;
  v37 = 0x3FF0000000000000;
  v38 = 0u;
  v39 = 0u;
  v41 = 0u;
  v42 = 0u;
  v44 = 0u;
  v45 = 0u;
  v52.var4 = 1;
  v52.var8 = 0;
  (*(void (**)(OZGroup *, uint64_t *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v37, &v52);
  var28 = a3->var28;
  shouldLockToCamera = OZGroup::shouldLockToCamera(this);
  v20 = !var28 || shouldLockToCamera;
  if ((v20 & 1) != 0)
  {
    if (!shouldLockToCamera)
      goto LABEL_43;
LABEL_37:
    var17 = a3[4].var17;
    (*(void (**)(float64x2_t *__return_ptr, OZElement *))(*(_QWORD *)var17 + 16))(&v25, var17);
    if (!(*(unsigned int (**)(OZElement *))(*(_QWORD *)var17 + 632))(var17))
    {
      v22 = (*(double (**)(OZElement *))(*(_QWORD *)var17 + 320))(var17);
      if (v22 != 0.0)
      {
        v27 = v27 - v22 * v26;
        v30 = v30 - v22 * v29;
        v33 = v33 - v22 * v32;
        v36 = v36 - v22 * v35;
      }
    }
    v23 = (*(double (**)(OZElement *))(*(_QWORD *)var17 + 488))(var17);
    if (v23 != 1.0)
    {
      v25 = vmulq_n_f64(v25, v23);
      v28 = vmulq_n_f64(v28, v23);
      v31 = vmulq_n_f64(v31, v23);
      v34 = vmulq_n_f64(v34, v23);
      v26 = v23 * v26;
      v29 = v23 * v29;
      v32 = v23 * v32;
      v35 = v23 * v35;
    }
    v19.n128_f64[0] = PCMatrix44Tmpl<double>::leftMult((uint64_t)&v37, v25.f64);
    goto LABEL_43;
  }
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
    goto LABEL_37;
LABEL_43:
  if (!v50.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, uint64_t *, __n128))(*(_QWORD *)v50.var0 + 16))(v50.var0, &v37, v19);
  LiGraphBuilder::prepare2d(a2);
LABEL_46:
  LiGraphBuilder::addGroupAndMakeCurrent(a2, &v50);
  PCSharedCount::~PCSharedCount(&v51);
}

void sub_1B2EAEFBC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(v2 + 1);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

BOOL OZGroup::shouldLockToCamera(OZGroup *this, int a2)
{
  _BOOL8 result;

  result = OZGroup::shouldLockToCamera(this);
  if ((result & 1) == 0)
  {
    if (a2)
      return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2;
  }
  return result;
}

uint64_t OZGroup::build3DWorldRenderGraph(OZChannel *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZRenderParams *v6;
  OZChannelBase *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  const void *v13;
  OZ3DEngineSceneElement *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  OZ3DEngineSceneElement *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  float32x4_t v35;
  float64x2_t *v36;
  int v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  CMTimeValue v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CMTimeEpoch v46;
  __n128 v47;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  const void *v54;
  double *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int WorkingGamut;
  OZScene *v64;
  const void *value;
  char *v66;
  char *v67;
  int32x2_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t CustomEnvironmentMap;
  OZScene *v74;
  int v75;
  uint64_t v76;
  char PreserveTransparency;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  double v82;
  OZRenderParams *v83;
  const OZRenderGraphState *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double *v89;
  std::__shared_weak_count *v90;
  double *v91;
  std::__shared_weak_count *v92;
  _BYTE v93[32];
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  CMTime time;
  Float64 Seconds;
  CMTime v107;
  OZRenderState v108;
  float64x2_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  CMTime v120;
  CMTime v121;

  v6 = (OZRenderParams *)a2;
  OZRenderState::OZRenderState(&v108, a2);
  memset(&v107, 0, sizeof(v107));
  v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannel *))this->var0 + 80))(this);
  OZRetimingUtil::RemapTimeValue(v8, (OZChannelObjectRoot *)&v108, &v107.value);
  time = v107;
  Seconds = CMTimeGetSeconds(&time);
  v104 = 0x3FF0000000000000;
  v101 = 0x3FF0000000000000;
  v98 = 0x3FF0000000000000;
  v95 = 0x3FF0000000000000;
  v96 = 0u;
  v97 = 0u;
  v99 = 0u;
  v100 = 0u;
  v102 = 0u;
  v103 = 0u;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 21152), (const CMTime *)&v108, 0.0);
  v94 = v9;
  v121 = *(CMTime *)v6;
  OZ3DEngineCore::getMotionLights(&v121, this, (OZElement *)((char *)a3 + 112), (uint64_t)v93);
  v121.value = OZGroup::masterScene((OZGroup *)this);
  std::allocate_shared[abi:ne180100]<Li3DEngineWorldData,std::allocator<Li3DEngineWorldData>,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,void>(&v121.value, &Seconds, (uint64_t)&v95, &v94, (uint64_t)v93, &v91);
  v10 = Seconds;
  OZSceneNode::begin_t<OZ3DEngineSceneElement,false,false>((uint64_t)this, (uint64_t)&v117);
  v11 = -1.0;
  v12 = 1.0;
  if ((_QWORD)v117 == v118 || (v13 = *(const void **)(v117 + 16)) == 0)
  {
    v15 = 1.0;
    v16 = -1.0;
    v17 = 1.0;
    v18 = -1.0;
  }
  else
  {
    v15 = 1.0;
    v16 = -1.0;
    v17 = 1.0;
    v18 = -1.0;
    if (v14)
    {
      v19 = v14;
      v83 = v6;
      v84 = a4;
      v82 = v10;
      while (1)
      {
        v20 = *((_QWORD *)v19 + 1);
        *(_OWORD *)&v121.value = xmmword_1B355DE60;
        if ((OZFactory::isKindOfClass(v20, (int32x4_t *)&v121) & 1) == 0)
        {
          v21 = *((_QWORD *)v19 + 1);
          *(_OWORD *)&v121.value = xmmword_1B355DE80;
          if ((OZFactory::isKindOfClass(v21, (int32x4_t *)&v121) & 1) == 0)
            break;
        }
LABEL_78:
        v53 = OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++(&v117);
        if (*v53 != v53[2])
        {
          v54 = *(const void **)(*v53 + 16);
          if (v54)
          {
            if (v19)
              continue;
          }
        }
        goto LABEL_83;
      }
      (*(void (**)(uint64_t *__return_ptr, OZ3DEngineSceneElement *, OZRenderParams *, double))(*(_QWORD *)v19 + 2280))(&v115, v19, v6, v10);
      v22 = (uint64_t)v91;
      v23 = *((unsigned int *)v19 + 20);
      v113 = v115;
      v114 = v116;
      if (v116)
      {
        p_shared_owners = (unint64_t *)&v116->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      Li3DEngineWorldData::add3DEngineObjectData(v22, v23, &v113);
      v26 = v114;
      if (v114)
      {
        v27 = (unint64_t *)&v114->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v87 = v16;
      v88 = v15;
      v85 = v18;
      v86 = v17;
      v29 = v11;
      v30 = v12;
      v31 = 0;
      v32 = v115;
      v33 = *(_OWORD *)(v115 + 40);
      v109 = *(float64x2_t *)(v115 + 24);
      v110 = v33;
      v34 = *(_OWORD *)(v115 + 72);
      v111 = *(_OWORD *)(v115 + 56);
      v112 = v34;
      do
      {
        v35 = *((float32x4_t *)&v109 + v31);
        v36 = (float64x2_t *)((char *)&v121 + 32 * v31);
        *v36 = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
        v36[1] = vcvt_hight_f64_f32(v35);
        ++v31;
      }
      while (v31 != 4);
      v37 = 0;
      v38 = -1.0;
      v12 = 1.0;
      v15 = 1.0;
      v16 = -1.0;
      v39 = 1.0;
      v40 = -1.0;
      do
      {
        if ((v37 & 1) != 0)
          v41 = 120;
        else
          v41 = 128;
        v42 = *(_QWORD *)(v32 + v41);
        if ((v37 & 2) != 0)
          v43 = 136;
        else
          v43 = 144;
        v44 = *(_QWORD *)(v32 + v43);
        if ((v37 & 4) != 0)
          v45 = 152;
        else
          v45 = 160;
        v46 = *(_QWORD *)(v32 + v45);
        v120.value = v42;
        *(_QWORD *)&v120.timescale = v44;
        v120.epoch = v46;
        PCMatrix44Tmpl<double>::transform<double>((double *)&v121.value, (double *)&v120.value, (double *)&v120.value);
        v47.n128_u64[0] = v120.value;
        if (v37)
        {
          if (v12 >= *(double *)&v120.value)
            v12 = *(double *)&v120.value;
          if (v38 <= *(double *)&v120.value)
            v38 = *(double *)&v120.value;
          v47.n128_u64[0] = *(_QWORD *)&v120.timescale;
          if (v15 >= *(double *)&v120.timescale)
            v15 = *(double *)&v120.timescale;
          if (v16 <= *(double *)&v120.timescale)
            v16 = *(double *)&v120.timescale;
          if (v39 >= *(double *)&v120.epoch)
            v39 = *(double *)&v120.epoch;
          if (v40 <= *(double *)&v120.epoch)
            v40 = *(double *)&v120.epoch;
        }
        else
        {
          v16 = *(double *)&v120.timescale;
          v40 = *(double *)&v120.epoch;
          v38 = *(double *)&v120.value;
          v12 = *(double *)&v120.value;
          v15 = *(double *)&v120.timescale;
          v39 = *(double *)&v120.epoch;
        }
        ++v37;
      }
      while (v37 != 8);
      if (v30 > v29)
      {
        v11 = v38;
        v17 = v39;
        v18 = v40;
        v6 = v83;
        a4 = v84;
      }
      else
      {
        v47.n128_f64[0] = v88;
        v6 = v83;
        a4 = v84;
        if (v88 > v87 || (v47.n128_f64[0] = v86, v86 > v85))
        {
          v11 = v38;
          v17 = v39;
          v18 = v40;
        }
        else
        {
          if (v12 > v38 || v15 > v16 || v39 > v40)
          {
            v10 = v82;
            v12 = v30;
            v11 = v29;
            v18 = v85;
            v17 = v86;
            v16 = v87;
            v15 = v88;
LABEL_71:
            (*(void (**)(OZ3DEngineSceneElement *, OZRenderParams *, __n128))(*(_QWORD *)v19 + 2328))(v19, v6, v47);
            if (!OZ3DEngineSceneElement::is3DNodeInMasterScene(v19, (OZGroup *)this))
              OZ3DEngineSceneElement::add3DNodeToMasterScene(v19);
            v50 = v116;
            if (v116)
            {
              v51 = (unint64_t *)&v116->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            goto LABEL_78;
          }
          if (v30 < v12)
            v12 = v30;
          if (v29 <= v38)
            v11 = v38;
          else
            v11 = v29;
          if (v88 < v15)
            v15 = v88;
          v47.n128_f64[0] = v87;
          if (v87 > v16)
            v16 = v87;
          v17 = v86;
          if (v86 >= v39)
            v17 = v39;
          v18 = v85;
          if (v85 <= v40)
            v18 = v40;
        }
      }
      v10 = v82;
      goto LABEL_71;
    }
  }
LABEL_83:
  v55 = v91;
  v91[15] = v12;
  v55[16] = v11;
  v55[17] = v15;
  v55[18] = v16;
  v55[19] = v17;
  v55[20] = v18;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v119);
  v56 = operator new();
  v57 = (_QWORD *)v56;
  v89 = v91;
  v90 = v92;
  if (v92)
  {
    v58 = (unint64_t *)&v92->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  Li3DEngineObject::Li3DEngineObject(v56, &v89);
  v60 = v90;
  if (v90)
  {
    v61 = (unint64_t *)&v90->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v121.value = (CMTimeValue)v57;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v121.timescale, (PCShared_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
  WorkingGamut = OZRenderParams::getWorkingGamut(v6);
  LiGraphBuilder::add3DEngine((PCMutex *)a3, &v121, WorkingGamut);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v121.timescale);
  v64 = (OZScene *)(*((uint64_t (**)(OZChannel *))this->var0 + 34))(this);
  LiGraphBuilder::get3DEngineGeode((const PCSharedCount *)a3, (PCSharedCount *)&v117);
  if (!(_QWORD)v117)
    throw_PCNullPointerException(1);
  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v117 + 160))(&v121);
  value = (const void *)v121.value;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v121.timescale);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v117 + 1);
  if (value)
  {
    if (v66)
    {
      if (!*((_BYTE *)v6 + 202))
      {
        v67 = v66;
        Li3DEngineImageSource::setRenderInSingleScene((uint64_t)v66, 1);
        v68 = vcvt_s32_f32(vcvt_f32_u32(*(uint32x2_t *)((char *)v6 + 324)));
        *((_QWORD *)v67 + 25) = 0;
        *((int32x2_t *)v67 + 26) = v68;
        OZRenderParams::getFFInputNode(v6, 1u, &v115);
        v69 = *((_QWORD *)v67 + 29);
        v70 = v115;
        if (v69 != v115)
        {
          if (v69)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
            v70 = v115;
          }
          *((_QWORD *)v67 + 29) = v70;
          if (!v70)
          {
LABEL_103:
            OZRenderParams::getFFInputNode(v6, 2u, &v113);
            v71 = *((_QWORD *)v67 + 28);
            v72 = v113;
            if (v71 != v113)
            {
              if (v71)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
                v72 = v113;
              }
              *((_QWORD *)v67 + 28) = v72;
              if (!v72)
                goto LABEL_110;
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
              v71 = v113;
            }
            if (v71)
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
LABEL_110:
            OZScene::setARFrameForObject(v64, (Li3DEngineImageSource *)v67);
            OZRenderParams::getPixelTransform(v6, (uint64_t)&v121);
            v117 = 0uLL;
            v118 = 0;
            v109 = 0uLL;
            *(_QWORD *)&v110 = 0;
            getScaleTranslate((float64x2_t *)&v121, (uint64_t)&v117, &v109);
            *(_OWORD *)(v67 + 264) = v117;
            v120 = *(CMTime *)v6;
            *((Float64 *)v67 + 35) = CMTimeGetSeconds(&v120);
            CustomEnvironmentMap = OZScene::getCustomEnvironmentMap(v64);
            if (CustomEnvironmentMap)
            {
              *((_QWORD *)v67 + 36) = CustomEnvironmentMap;
              *((double *)v67 + 37) = OZ3DEngineCore::getEnvironmentMapIntensity(v64, v74);
            }
            goto LABEL_112;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
          v69 = v115;
        }
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
        goto LABEL_103;
      }
    }
  }
LABEL_112:
  LiGraphBuilder::get3DEngineGeode((const PCSharedCount *)a3, (PCSharedCount *)&v117);
  v121 = *(CMTime *)v6;
  v75 = (*((uint64_t (**)(OZChannel *, CMTime *))this->var0 + 197))(this, &v121);
  (*((void (**)(float64x2_t *__return_ptr, OZChannel *, OZRenderParams *))this->var0 + 198))(&v109, this, v6);
  v76 = v117;
  if (!(_QWORD)v117)
    throw_PCNullPointerException(1);
  v120.value = *(_QWORD *)&v109.f64[0];
  PCSharedCount::PCSharedCount((PCSharedCount *)&v120.timescale, (const PCSharedCount *)&v109.f64[1]);
  LiSceneObject::setBlendMode(v76, v75, (PCSharedCount *)&v120);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v120.timescale);
  v121 = *(CMTime *)v6;
  PreserveTransparency = OZElement::getPreserveTransparency((OZElement *)this, &v121);
  if (!(_QWORD)v117)
    throw_PCNullPointerException(1);
  LiSceneObject::setPreserveOpacity(v117, PreserveTransparency);
  (*((void (**)(OZChannel *, OZRenderParams *, const OZRenderGraphState *, _QWORD))this->var0 + 255))(this, v6, a4, v117);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v109.f64[1]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v117 + 1);
  v78 = v92;
  if (v92)
  {
    v79 = (unint64_t *)&v92->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  return PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v93);
}

void sub_1B2EAF9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a28);
  _Unwind_Resume(a1);
}

_QWORD *OZGroup::makeRenderGraphOfElements(OZGroup *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4, uint64_t a5)
{
  _BOOL4 var28;
  BOOL shouldLockToCamera;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  OZElement *var17;
  LiSimpleCamera *v23;
  uint64_t i;
  _BYTE *v25;
  __int128 v26;
  int WorkingGamut;
  const void *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;
  const void *v34;
  __int128 v36;
  int64_t var3;
  PCSharedCount v38;
  PCSharedCount v39;
  PC_Sp_counted_base *v40;
  uint64_t v41;
  uint64_t v42;
  PCSharedCount v43;
  PCSharedCount v44;
  CMTime var0;
  OZRenderState v46;
  __int16 v47;
  uint64_t v48;
  _BYTE v49[49];
  _QWORD v50[3];
  BOOL v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char var1_low;
  __int16 v56;
  OZRenderState v57;

  OZRenderState::OZRenderState(&v57, a2);
  (*(void (**)(OZGroup *, LiGraphBuilder *, OZRenderState *, uint64_t, uint64_t))(*(_QWORD *)this + 2336))(this, a3, a2, a5, 1);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v49, a4);
  (*(void (**)(OZGroup *, OZRenderState *, _BYTE *))(*(_QWORD *)this + 2064))(this, a2, v49);
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1632))(this))
  {
    v49[0] = 0;
    v56 = 257;
  }
  var28 = a2->var28;
  shouldLockToCamera = OZGroup::shouldLockToCamera(this);
  v12 = !var28 || shouldLockToCamera;
  if ((v12 & 1) == 0)
    shouldLockToCamera = (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2;
  v51 = !shouldLockToCamera;
  if ((OZGroup *)a2->var17 == this && OZGroup::isValidToLightInside(this))
  {
    OZGroup::gatherWorldLights(this, a2, (uint64_t)&v46);
    if (v53 >= (int)v46.var0.var2)
      v13 = v53;
    else
      v13 = (2 * v46.var0.var2) | 1;
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v52, v46.var0.var2, v13);
    if ((int)v46.var0.var2 >= 1)
    {
      v14 = 0;
      v15 = 0;
      do
      {
        LiLight::operator=(v54 + v14, v46.var0.var3 + v14);
        ++v15;
        v14 += 944;
      }
      while (v15 < (int)v46.var0.var2);
    }
    goto LABEL_26;
  }
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1424))(this))
  {
    if (!OZGroup::isValidToLightInside(this))
    {
      memset(&v46.var0.var1, 0, 17);
      v46.var0.var0 = (int64_t)&unk_1E64FC250;
      if (v53 < 0)
        v17 = 1;
      else
        v17 = v53;
      PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v52, 0, v17);
LABEL_26:
      var1_low = LOBYTE(v46.var1);
      PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v46);
      goto LABEL_39;
    }
    OZRenderParams::OZRenderParams((OZRenderParams *)&v46, (const OZRenderParams *)a2);
    if ((a5 & 1) != 0
      || (*(unsigned int (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]))
    {
      v46.var5 = (OZTransformNode *)this;
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
    OZGroup::gatherWorldLights(this, &v46, (uint64_t)&v38);
    if (v53 >= SHIDWORD(v39.var0))
      v18 = v53;
    else
      v18 = (2 * HIDWORD(v39.var0)) | 1;
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v52, SHIDWORD(v39.var0), v18);
    if (SHIDWORD(v39.var0) >= 1)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        LiLight::operator=(v54 + v19, (uint64_t)v40 + v19);
        ++v20;
        v19 += 944;
      }
      while (v20 < SHIDWORD(v39.var0));
    }
    var1_low = v41;
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v38);
    if ((v16 & 1) == 0)
    {
      (*(void (**)(PCSharedCount *__return_ptr, OZGroup *, _BYTE *))(*(_QWORD *)this + 2344))(&v38, this, v49);
      v21 = a2[4].var7.var0[3][2];
      if (v21 == 0.0)
        throw_PCNullPointerException(1);
      LiLightSet::add(*(_QWORD *)&v21 + 32, (uint64_t)&v38);
      PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v38);
    }
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v46);
  }
LABEL_39:
  LiGraphBuilder::setLights((uint64_t)a3, (uint64_t)&v52);
  var0 = (CMTime)v57.var0;
  OZGroup::addGeodeEffectsToState(this, (OZRenderGraphState *)v49, &var0);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v46, (const OZRenderParams *)a2);
  if (OZGroup::isFlattened(this, &v57)
    && (*(unsigned int (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]))
  {
    var17 = a2[4].var17;
    v23 = (LiSimpleCamera *)operator new();
    LiSimpleCamera::LiSimpleCamera(v23);
    v43.var0 = (PC_Sp_counted_base *)v23;
    PCSharedCount::PCSharedCount(&v44, (LiSimpleCamera *)((char *)v23 + *(_QWORD *)(*(_QWORD *)v23 - 24)));
    if (var17)
    {
      if (!v43.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, OZElement *))(*(_QWORD *)v43.var0 + 168))(v43.var0, var17);
    }
    if (!v43.var0)
      throw_PCNullPointerException(1);
    v38.var0 = 0;
    v39.var0 = 0;
    v40 = 0;
    (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(_QWORD *)v43.var0 + 448))(v43.var0, &v38);
    if (!v43.var0)
      throw_PCNullPointerException(1);
    v38.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
    v39.var0 = 0;
    v40 = 0;
    v41 = 0;
    (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(_QWORD *)v43.var0 + 480))(v43.var0, &v38);
    if (!v43.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v43.var0 + 696))(v43.var0, 1.0);
    OZRenderParams::setCamera((uint64_t)&v46, &v43);
    PCSharedCount::~PCSharedCount(&v44);
  }
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
    v47 = 0;
  LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)&v38);
  for (i = 0; i != 128; i += 32)
  {
    v25 = &v49[i];
    v26 = *(_OWORD *)((char *)&v40 + i);
    *((_OWORD *)v25 + 6) = *(_OWORD *)((char *)&v38.var0 + i);
    *((_OWORD *)v25 + 7) = v26;
  }
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 20744), 1, 1))
  {
    LiGraphBuilder::partitionWorld((uint64_t)a3);
    WorkingGamut = OZRenderParams::getWorkingGamut((OZRenderParams *)a2);
    v38.var0 = 0;
    PCSharedCount::PCSharedCount(&v39);
    LiGraphBuilder::prepare3DEngine((PCMutex *)a3, WorkingGamut, &v38, 0, 0, 0);
    PCSharedCount::~PCSharedCount(&v39);
    OZGroup::build3DWorldRenderGraph((OZChannel *)this, a2, a3, (const OZRenderGraphState *)v49);
    LiGraphBuilder::partitionWorld((uint64_t)a3);
  }
  else
  {
    OZSceneNode::begin_t<OZElement,false,false>((uint64_t)this, (uint64_t)&v38);
    if (v38.var0 != v40)
    {
      v28 = (const void *)*((_QWORD *)v38.var0 + 2);
      if (v28)
      {
        if (v29)
        {
          v30 = v29;
          v31 = 0;
          do
          {
            v32 = (*(uint64_t (**)(_QWORD *, OZRenderState *))(*v30 + 1576))(v30, &v57) - 25;
            if (!v31 && v32 <= 1)
              LiGraphBuilder::partitionWorld((uint64_t)a3);
            var3 = a2->var0.var3;
            v36 = *(_OWORD *)&a2->var0.var0;
            if ((*(unsigned int (**)(_QWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(v30[2] + 104))(v30 + 2, &v36, 0, 1, 1))
            {
              (*(void (**)(_QWORD *, OZRenderState *, LiGraphBuilder *, _BYTE *))(*v30 + 2016))(v30, &v46, a3, v49);
            }
            if (v32 <= 1)
              LiGraphBuilder::partitionWorld((uint64_t)a3);
            v33 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(&v38);
            if (*v33 == v33[2])
              break;
            v34 = *(const void **)(*v33 + 16);
            if (!v34)
              break;
            v31 = v32 < 2;
          }
          while (v30);
        }
      }
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v42);
  }
  if (!v48)
    throw_PCNullPointerException(1);
  OZRenderParams::setShadowLights((OZRenderParams *)a2, (const LiLightSet *)(v48 + 32));
  LiGraphBuilder::endInsertingIntoGroup(a3);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v46);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v52);
  return std::__list_imp<unsigned int>::clear(v50);
}

void sub_1B2EB0214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a34);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x738]);
  std::__list_imp<unsigned int>::clear(&STACK[0x698]);
  _Unwind_Resume(a1);
}

BOOL OZGroup::isValidToLightInside(OZGroup *this)
{
  int v2;
  const void *v3;

  do
  {
    v2 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
    if (v2 != 1)
      break;
    if (((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1424))(this) & 1) != 0)
      break;
    v3 = (const void *)*((_QWORD *)this + 120);
    if (!v3)
      break;
  }
  while (this);
  return v2 == 1;
}

_QWORD *OZGroup::makeProjectedImageSource@<X0>(OZElement *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  _QWORD *result;
  int v10;
  uint64_t v11;
  uint64_t i;
  _BYTE v13[12];
  int v14;
  uint64_t v15;
  char v16;
  OZRenderState v17;
  _BYTE v18[64];
  _QWORD v19[20];
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;

  OZElement::makeProjectedImageSource(this, a2, a3, a4, a5);
  result = (_QWORD *)(*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1640))(this);
  if ((_DWORD)result != 2)
  {
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v18, a3);
    if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1424))(this))
    {
      OZRenderParams::OZRenderParams((OZRenderParams *)&v17, a2);
      v17.var4 = 1;
      OZGroup::gatherWorldLights((OZGroup *)this, &v17, (uint64_t)v13);
      if (v21 >= v14)
        v10 = v21;
      else
        v10 = (2 * v14) | 1;
      PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v20, v14, v10);
      if (v14 >= 1)
      {
        v11 = 0;
        for (i = 0; i < v14; ++i)
        {
          LiLight::operator=(v22 + v11, v15 + v11);
          v11 += 944;
        }
      }
      v23 = v16;
      PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v13);
      OZRenderParams::~OZRenderParams((OZRenderParams *)&v17);
    }
    (*(void (**)(OZRenderState *__return_ptr, OZElement *, _BYTE *))(*(_QWORD *)this + 2344))(&v17, this, v18);
    if (!a5->var0)
      throw_PCNullPointerException(1);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v17);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v20);
    return std::__list_imp<unsigned int>::clear(v19);
  }
  return result;
}

void sub_1B2EB04DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  PCSharedCount *v5;
  va_list va;

  va_start(va, a5);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)va);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x690]);
  std::__list_imp<unsigned int>::clear(&STACK[0x5F0]);
  PCSharedCount::~PCSharedCount(v5 + 1);
  _Unwind_Resume(a1);
}

void OZGroup::makeRenderImageSource(OZGroup *this@<X0>, CMTime *a2@<X1>, const OZRenderGraphState *a3@<X2>, unsigned int a4@<W3>, PCSharedCount *a5@<X8>)
{
  uint64_t v10;
  _BOOL4 v11;
  int ValueAsInt;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  LiFixedSize *v20;
  _DWORD *value;
  CMTime v22;
  PCSharedCount v23;
  PCSharedCount v24;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
    v10 = 1;
  else
    v10 = a4;
  (*(void (**)(PCSharedCount *__return_ptr, OZGroup *, CMTime *, const OZRenderGraphState *, uint64_t))(*(_QWORD *)this + 1960))(&v23, this, a2, a3, v10);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 19184), MEMORY[0x1E0CA2E68], 0.0))
    v11 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 0;
  else
    v11 = 0;
  v22 = *a2;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19336), &v22, 0.0);
  v22 = *a2;
  v13 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19488), &v22, 0.0);
  v14 = ValueAsInt & 1;
  if (ValueAsInt < 0)
    v14 = -v14;
  v15 = v14 + ValueAsInt;
  v16 = v13 & 1;
  if (v13 < 0)
    v16 = -v16;
  v17 = v16 + v13;
  if (v15 >= 0)
    v18 = v15;
  else
    v18 = v15 + 1;
  if (v17 >= 0)
    v19 = v16 + v13;
  else
    v19 = v17 + 1;
  if (v11)
  {
    v20 = (LiFixedSize *)operator new();
    LiFixedSize::LiFixedSize(v20);
    v22.value = (CMTimeValue)v20;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v22.timescale, (LiFixedSize *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
    if (!v22.value)
      throw_PCNullPointerException(1);
    (*(void (**)(CMTimeValue, PC_Sp_counted_base *))(*(_QWORD *)v22.value + 168))(v22.value, v23.var0);
    value = (_DWORD *)v22.value;
    if (!v22.value)
      throw_PCNullPointerException(1);
    *(_DWORD *)(v22.value + 36) = -(v18 >> 1);
    value[10] = -(v19 >> 1);
    value[11] = v15;
    value[12] = v17;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, (const PCSharedCount *)&v22);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v22.timescale);
  }
  else
  {
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, &v23);
  }
  PCSharedCount::~PCSharedCount(&v24);
}

void sub_1B2EB073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10A1C40063EAE96);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZGroup::makeRenderImageSource(OZGroup *this@<X0>, CMTime *a2@<X1>, const OZRenderGraphState *a3@<X2>, unsigned int a4@<W3>, PCSharedCount *a5@<X8>)
{
  OZGroup::makeRenderImageSource((OZGroup *)((char *)this - 6528), a2, a3, a4, a5);
}

uint64_t OZGroup::reloadResources(OZGroup *this, PGContext *a2)
{
  void *v3;
  _QWORD *v4;
  _QWORD v6[4];
  uint64_t v7;

  OZSceneNode::rbegin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v6);
  if (v6[0] == v6[2])
  {
    v3 = 0;
  }
  else
  {
    v3 = *(void **)(v6[0] + 16);
    if (v3)
  }
  while (v3)
  {
    (*(void (**)(void *, PGContext *))(*(_QWORD *)v3 + 1456))(v3, a2);
    v4 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v6);
    v3 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(v4);
  }
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v7);
}

void sub_1B2EB0834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *OZSceneNode::rbegin_t<OZElement,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if (result != (_QWORD *)v4)
    return OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  return result;
}

void sub_1B2EB08C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(_QWORD *a1)
{
  const void *v1;

  if (*a1 == a1[2])
    return 0;
  v1 = *(const void **)(*a1 + 16);
  if (!v1)
    return 0;
  else
}

uint64_t OZGroup::eval(OZGroup *this, OZRenderParams *a2)
{
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[4];
  uint64_t v11;

  OZSceneNode::rbegin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v10);
  if (v10[0] == v10[2] || (v3 = *(const void **)(v10[0] + 16)) == 0)
    v4 = 0;
  else
  v5 = 0;
  while (v4)
  {
    v9 = *((_QWORD *)a2 + 2);
    v8 = *(_OWORD *)a2;
    if ((*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v4[2] + 104))(v4 + 2, &v8, 1, 1, 1))
    {
      v5 = (*(uint64_t (**)(_QWORD *, OZRenderParams *))(*v4 + 96))(v4, a2);
      if (v5 == 1)
        break;
    }
    v6 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v10);
    v4 = OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(v6);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v11);
  return v5;
}

void sub_1B2EB0A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::dirty(OZElement *this)
{
  uint64_t result;

  result = OZElement::dirty(this);
  *((_BYTE *)this + 22888) = 1;
  return result;
}

uint64_t `non-virtual thunk to'OZGroup::dirty(OZGroup *this)
{
  uint64_t result;

  result = OZElement::dirty((OZElement *)((char *)this - 16));
  *((_BYTE *)this + 22872) = 1;
  return result;
}

uint64_t OZGroup::areStaticHashesInvalid(OZGroup *this)
{
  uint64_t result;
  char *v3;
  uint64_t v4;

  if (OZSceneNode::areStaticHashesInvalid(this))
    return 1;
  v3 = (char *)this + 18776;
  v4 = *((_QWORD *)this + 2348);
  if ((char *)v4 == v3)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 544))(*(_QWORD *)(v4 + 16));
    if ((_DWORD)result)
      break;
    v4 = *(_QWORD *)(v4 + 8);
  }
  while ((char *)v4 != v3);
  return result;
}

uint64_t `non-virtual thunk to'OZGroup::areStaticHashesInvalid(OZGroup *this)
{
  return OZGroup::areStaticHashesInvalid((OZGroup *)((char *)this - 16));
}

double OZGroup::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3, int a4)
{
  int8x8_t *v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *StaticHash;
  double result;
  __n128 v14;

  OZSceneNode::calcStaticHash(a1, a2, a3, a4);
  if (!v7)
    __cxa_bad_cast();
  v8 = (__n128 *)v7;
  v14 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  if (v9 != v10)
  {
    v11 = v10;
    do
    {
      StaticHash = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(_QWORD *)(v9 + 16) + 16), a2, a3);
      PCHash128::operator+=((int *)&v14, StaticHash);
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != v11);
  }
  *(_QWORD *)&result = PCHashWriteStream::setHash(v8, &v14).n128_u64[0];
  return result;
}

double OZGroup::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4, int a5)
{
  int8x8_t *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  __n128 v16;

  OZSceneNode::calcHashForState(a1, a2, a3, a4, a5);
  if (!v9)
    __cxa_bad_cast();
  v10 = (__n128 *)v9;
  v16 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  if (v11 != v12)
  {
    v13 = v12;
    do
    {
      OZObjectManipulator::getHashForState((_OWORD *)(*(_QWORD *)(v11 + 16) + 16), a2, (OZRenderParams *)a3, a4, &v15);
      PCHash128::operator+=((int *)&v16, (int *)&v15);
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11 != v13);
  }
  *(_QWORD *)&result = PCHashWriteStream::setHash(v10, &v16).n128_u64[0];
  return result;
}

_QWORD *OZGroup::hitCheck(_QWORD *a1, float32x2_t *a2, uint64_t a3, void *lpsrc, double *a5, uint64_t a6)
{
  _QWORD *v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29[6];
  float64x2_t v30;
  uint64_t v31;
  void *__p[2];
  _OWORD v33[2];
  __int128 v34;
  uint64_t v35;

  v11 = a1;
  if ((a6 & 4) != 0 && ((*(uint64_t (**)(_QWORD *))(*a1 + 680))(a1) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v34 = *(_OWORD *)a3;
    v35 = *(_QWORD *)(a3 + 16);
    if (!(*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v11[2] + 104))(v11 + 2, &v34, 1, 1, 1))return 0;
  }
  v13 = lpsrc
  if ((*(unsigned int (**)(_QWORD *))(*v11 + 680))(v11) && !v13)
  {
    v33[0] = xmmword_1B304F270;
    v33[1] = xmmword_1B304F270;
    *(_OWORD *)__p = xmmword_1B304F270;
    (*(void (**)(_QWORD *, void **, uint64_t))(*v11 + 1360))(v11, __p, a3);
    v30 = vcvtq_f64_f32(*a2);
    v31 = 0;
    (*(void (**)(double *__return_ptr, _QWORD *, float64x2_t *, void *, uint64_t, _QWORD))(*v11 + 1384))(v29, v11, &v30, lpsrc, a3, 0);
    if (PCRayIntersectsBox(v29, (double *)__p, a5))
      return v11;
    return 0;
  }
  if ((a6 & 1) == 0 || !(*(unsigned int (**)(_QWORD *))(*v11 + 960))(v11))
    return 0;
  v14 = (*(uint64_t (**)(_QWORD *))(*v11 + 1024))(v11);
  v15 = (*(uint64_t (**)(_QWORD *))(*v11 + 1032))(v11);
  v16 = (*(uint64_t (**)(_QWORD *))(*v11 + 1640))(v11);
  if (v16 != 1)
  {
    if (!v16)
    {
      while (v14 != v15)
      {
        v17 = (*(uint64_t (**)(_QWORD, float32x2_t *, uint64_t, void *, double *, uint64_t))(**(_QWORD **)(v14 + 16) + 936))(*(_QWORD *)(v14 + 16), a2, a3, lpsrc, a5, a6);
        if (v17)
          return (_QWORD *)v17;
        v14 = *(_QWORD *)(v14 + 8);
      }
    }
    return 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v33[0] = 0;
  if (v14 != v15)
  {
    v19 = 0;
    do
    {
      if ((unint64_t)v19 >= *(_QWORD *)&v33[0])
      {
        v20 = (v19 - (char *)__p[0]) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v21 = (uint64_t)(*(_QWORD *)&v33[0] - (unint64_t)__p[0]) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if (*(_QWORD *)&v33[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v33, v22);
        else
          v23 = 0;
        v24 = &v23[8 * v20];
        *(_QWORD *)v24 = *(_QWORD *)(v14 + 16);
        v19 = v24 + 8;
        v26 = (char *)__p[0];
        v25 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v24 - 1) = v27;
            v24 -= 8;
          }
          while (v25 != v26);
          v25 = (char *)__p[0];
        }
        __p[0] = v24;
        __p[1] = v19;
        *(_QWORD *)&v33[0] = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v19 = *(_QWORD *)(v14 + 16);
        v19 += 8;
      }
      __p[1] = v19;
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14 != v15);
  }
  v28 = (*(uint64_t (**)(_QWORD *))(*v11 + 272))(v11);
  v11 = (_QWORD *)OZScene::hitCheckDepthOrdered(v28, (uint64_t)a2, a3, (uint64_t)lpsrc, (uint64_t)a5, a6, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11;
}

void sub_1B2EB0FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::hitCheck()
{
  return 0;
}

uint64_t OZGroup::getDescendantAtIndex(OZGroup *this, int a2)
{
  char *v4;
  char *v5;
  _BOOL4 v6;
  int v7;
  char *v10;
  char *v11;
  _BOOL4 v12;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t i;
  OZChannelBase *v20;
  OZChannelBase *v21;
  char *v22;
  _BOOL4 v23;
  int v25;
  BOOL v27;

  if (*((_QWORD *)this + 2303))
  {
    v4 = (char *)this + 18408;
    v5 = (char *)*((_QWORD *)this + 2302);
    v6 = v5 != (char *)this + 18408;
    v7 = 0;
    if (v5 != (char *)this + 18408 && a2 != 0)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v5 + 1);
        v6 = v5 != v4;
      }
      while (v5 != v4 && a2 - 1 != v7++);
    }
    if (v6)
      goto LABEL_49;
  }
  else
  {
    v7 = 0;
  }
  if (*((_QWORD *)this + 124))
  {
    v10 = (char *)this + 976;
    v11 = (char *)*((_QWORD *)this + 123);
    v12 = v11 != (char *)this + 976;
    if (v11 != (char *)this + 976 && v7 != a2)
    {
      do
      {
        v11 = (char *)*((_QWORD *)v11 + 1);
        v12 = v11 != v10;
      }
      while (v11 != v10 && a2 - 1 != v7++);
    }
    if (v12)
    {
      v15 = *((_QWORD *)v11 + 2);
      v16 = v15 + 48;
      goto LABEL_51;
    }
  }
  if (*((_QWORD *)this + 127))
  {
    v17 = (char *)this + 1000;
    for (i = *((_QWORD *)this + 126); (char *)i != v17 && v7 != a2; i = *(_QWORD *)(i + 8))
    {
      v20 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 312))(*(_QWORD *)(i + 16));
      if (v20)
        v7 += !OZChannelBase::testFlag(v20, 2);
    }
    if ((char *)i != v17)
    {
      v21 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 312))(*(_QWORD *)(i + 16));
      if (v21)
      {
        if (!OZChannelBase::testFlag(v21, 2))
        {
          v15 = *(_QWORD *)(i + 16);
          goto LABEL_50;
        }
      }
    }
  }
  v22 = (char *)this + 18776;
  v5 = (char *)*((_QWORD *)this + 2348);
  v23 = v5 != (char *)this + 18776;
  if (v5 != (char *)this + 18776 && v7 != a2)
  {
    v25 = ~v7 + a2;
    do
    {
      v5 = (char *)*((_QWORD *)v5 + 1);
      v27 = v25-- != 0;
      v23 = v5 != v22;
    }
    while (v5 != v22 && v27);
  }
  if (!v23)
    return 0;
LABEL_49:
  v15 = *((_QWORD *)v5 + 2);
LABEL_50:
  v16 = v15 + 16;
LABEL_51:
  if (v15)
    return v16;
  else
    return 0;
}

uint64_t OZGroup::getMemberAtIndex(OZGroup *this, int a2)
{
  char *v2;
  char *v3;
  _BOOL4 v4;
  int v6;
  BOOL v8;
  uint64_t v9;

  v2 = (char *)this + 18776;
  v3 = (char *)*((_QWORD *)this + 2348);
  v4 = v3 != (char *)this + 18776;
  if (v3 != (char *)this + 18776 && a2 != 0)
  {
    v6 = a2 - 1;
    do
    {
      v3 = (char *)*((_QWORD *)v3 + 1);
      v8 = v6-- != 0;
      v4 = v3 != v2;
    }
    while (v3 != v2 && v8);
  }
  if (!v4)
    return 0;
  v9 = *((_QWORD *)v3 + 2);
  if (v9)
    return v9 + 16;
  else
    return 0;
}

uint64_t OZGroup::addDescendantAfter(OZGroup *this, OZSceneNode *a2, OZSceneNode *a3)
{
  char *v6;
  uint64_t i;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const OZChannelBase *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  OZScene *v16;

  if (a3)
  {
    v6 = (char *)this + 18776;
    for (i = *((_QWORD *)this + 2348); (char *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        if ((char *)i == v6)
          break;
        v8 = *(uint64_t **)(i + 8);
        v9 = operator new(0x18uLL);
        v9[2] = a2;
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v9;
        *v9 = v10;
        *v8 = (uint64_t)v9;
        v9[1] = v8;
        goto LABEL_9;
      }
    }
  }
  v11 = operator new(0x18uLL);
  v12 = (_QWORD *)*((_QWORD *)this + 2348);
  *v11 = (char *)this + 18776;
  v11[1] = v12;
  v11[2] = a2;
  *v12 = v11;
  *((_QWORD *)this + 2348) = v11;
LABEL_9:
  ++*((_QWORD *)this + 2349);
  if (a3)
  {
    v13 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
    v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 56), v13, v14);
  }
  else
  {
    v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 56), v15);
  }
  (*(void (**)(OZSceneNode *, _QWORD))(*(_QWORD *)a2 + 280))(a2, *((_QWORD *)this + 121));
  (*(void (**)(OZSceneNode *, OZGroup *))(*(_QWORD *)a2 + 256))(a2, this);
  v16 = (OZScene *)*((_QWORD *)this + 121);
  if (v16)
  {
    OZScene::registerNode(v16, a2);
    OZScene::addAllDependencies(*((_QWORD *)this + 121), a2);
  }
  OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)((char *)this + 56), 1, 1, 0, 1, 0);
  return (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 496))(this);
}

uint64_t OZGroup::addDescendantBefore(OZGroup *this, OZSceneNode *a2, OZSceneNode *a3)
{
  uint64_t *v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  const OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  OZScene *v13;

  v6 = (uint64_t *)((char *)this + 18776);
  if (a3)
  {
    for (i = *((_QWORD *)this + 2348); (uint64_t *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        v6 = (uint64_t *)i;
        break;
      }
    }
  }
  v8 = operator new(0x18uLL);
  v8[2] = a2;
  v9 = *v6;
  *(_QWORD *)(v9 + 8) = v8;
  *v8 = v9;
  *v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((_QWORD *)this + 2349);
  if (a3)
  {
    v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
    v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 56), v10, v11);
  }
  else
  {
    v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v12);
  }
  (*(void (**)(OZSceneNode *, OZGroup *))(*(_QWORD *)a2 + 256))(a2, this);
  v13 = (OZScene *)*((_QWORD *)this + 121);
  if (v13)
  {
    OZScene::registerNode(v13, a2);
    OZScene::addAllDependencies(*((_QWORD *)this + 121), a2);
  }
  OZChannelObjectRoot::recomputeTimeRangeFromChildren((OZChannelBase *)((char *)this + 56), 1, 1, 0, 1, 0);
  return (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 496))(this);
}

OZSceneNode **OZGroup::removeDescendant(OZGroup *this, OZSceneNode *a2)
{
  OZChannelFolder *v4;
  OZChannelBase *v5;
  OZSceneNode **v6;
  OZSceneNode **result;
  OZSceneNode *v8;
  unint64_t v9;
  OZ3DEngineSceneElement *v10;
  __int128 v11;

  v4 = (OZChannelFolder *)((char *)this + 56);
  v5 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  OZChannelFolder::removeDescendant(v4, v5);
  v6 = (OZSceneNode **)((char *)this + 18776);
  for (result = (OZSceneNode **)*((_QWORD *)this + 2348); result != v6; result = (OZSceneNode **)result[1])
  {
    if (result[2] == a2)
    {
      if (result != v6)
      {
        v8 = *result;
        *((_QWORD *)v8 + 1) = result[1];
        *(_QWORD *)result[1] = v8;
        --*((_QWORD *)this + 2349);
        operator delete(result);
        (*(void (**)(OZSceneNode *, _QWORD))(*(_QWORD *)a2 + 256))(a2, 0);
        (*(void (**)(OZGroup *))(*(_QWORD *)this + 496))(this);
        v9 = *((_QWORD *)a2 + 1);
        v11 = xmmword_1B355DB30;
        if (OZFactory::isKindOfClass(v9, (int32x4_t *)&v11)
          && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 20744), 1, 1))
        {
          OZ3DEngineSceneElement::remove3DNodeFromMasterScene(v10);
        }
        result = (OZSceneNode **)*((_QWORD *)this + 121);
        if (result)
        {
          OZScene::unregisterNode((OZScene *)result, a2);
          return (OZSceneNode **)OZScene::removeAllDependencies(*((OZScene **)this + 121), a2);
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t OZGroup::acceptsShapeMasks(OZGroup *this)
{
  int v2;

  v2 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  if (!v2)
    return 1;
  if (v2 == 2)
    return 0;
  return (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
}

uint64_t OZGroup::restrictImageMaskToStencil(OZGroup *this)
{
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 1)
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1632))(this) ^ 1;
  else
    return 0;
}

uint64_t OZGroup::shouldWrapTexture(OZGroup *this)
{
  char *v1;
  uint64_t i;
  uint64_t result;

  v1 = (char *)this + 18776;
  for (i = *((_QWORD *)this + 2348); (char *)i != v1; i = *(_QWORD *)(i + 8))
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(i + 16) + 16) + 24))(*(_QWORD *)(i + 16) + 16, 0, 1))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 1064))(*(_QWORD *)(i + 16));
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

void OZGroup::computeLocalTranslation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, CMTime *a5)
{
  OZChannel *v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  OZChannel *v36;
  OZChannel *v37;
  OZChannel *v38;
  double v39;
  void *__p[3];
  double CurveValue;
  double v42;
  double v43;
  CMTime v44;
  _QWORD v45[5];

  v45[3] = *MEMORY[0x1E0C80C00];
  v37 = (OZChannel *)(a2 + 288);
  v38 = (OZChannel *)(a2 + 136);
  v45[0] = a2 + 136;
  v45[1] = a2 + 288;
  v36 = (OZChannel *)(a2 + 736);
  v45[2] = a2 + 736;
  v9 = (OZChannel *)v45[a3];
  v10 = (*((uint64_t (**)(OZChannel *))v9->var0 + 104))(v9);
  OZChannel::getKeyframes(v9, 0, __p);
  v11 = a3;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v39 = 0.0;
      OZChannel::getKeyframe(v9, *((void **)__p[0] + i), &v44, &v39);
      CurveValue = OZChannel::getCurveValue(v38, &v44, 1);
      v42 = OZChannel::getCurveValue(v37, &v44, 1);
      v43 = OZChannel::getCurveValue(v36, &v44, 1);
      *(&CurveValue + v11) = v39;
      *a5 = v44;
      (*(void (**)(uint64_t, double *, double *, double *, CMTime *))(*(_QWORD *)a1 + 1240))(a1, &CurveValue, &v42, &v43, a5);
      v14 = *(_QWORD **)(a4 + 8);
      v13 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *(_QWORD **)a4;
        v17 = ((uint64_t)v14 - *(_QWORD *)a4) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v20);
          v16 = *(_QWORD **)a4;
          v14 = *(_QWORD **)(a4 + 8);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        *(double *)v22 = *(&CurveValue + v11);
        v15 = v22 + 8;
        while (v14 != v16)
        {
          v23 = *--v14;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        *(_QWORD *)a4 = v22;
        *(_QWORD *)(a4 + 8) = v15;
        *(_QWORD *)(a4 + 16) = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = *((_QWORD *)&CurveValue + v11);
        v15 = v14 + 1;
      }
      *(_QWORD *)(a4 + 8) = v15;
    }
  }
  else
  {
    v44.value = OZChannel::getInitialValue(v38);
    *(_QWORD *)&v44.timescale = OZChannel::getInitialValue(v37);
    v44.epoch = OZChannel::getInitialValue(v36);
    (*(void (**)(uint64_t, CMTime *, CMTimeScale *, CMTimeEpoch *, CMTime *))(*(_QWORD *)a1 + 1240))(a1, &v44, &v44.timescale, &v44.epoch, a5);
    v24 = *(_QWORD *)(a4 + 16);
    v25 = *(_QWORD **)(a4 + 8);
    if ((unint64_t)v25 >= v24)
    {
      v27 = *(_QWORD **)a4;
      v28 = ((uint64_t)v25 - *(_QWORD *)a4) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v31);
        v27 = *(_QWORD **)a4;
        v25 = *(_QWORD **)(a4 + 8);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *(_QWORD *)v33 = *(&v44.value + a3);
      v26 = v33 + 8;
      while (v25 != v27)
      {
        v35 = *--v25;
        *((_QWORD *)v33 - 1) = v35;
        v33 -= 8;
      }
      *(_QWORD *)a4 = v33;
      *(_QWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 16) = v34;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v25 = *(&v44.value + a3);
      v26 = v25 + 1;
    }
    *(_QWORD *)(a4 + 8) = v26;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B2EB1A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void OZGroup::computeGlobalTranslation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, CMTime *a5)
{
  OZChannel *v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  OZChannel *v36;
  OZChannel *v37;
  OZChannel *v38;
  double v39;
  void *__p[3];
  double CurveValue;
  double v42;
  double v43;
  CMTime v44;
  _QWORD v45[5];

  v45[3] = *MEMORY[0x1E0C80C00];
  v37 = (OZChannel *)(a2 + 288);
  v38 = (OZChannel *)(a2 + 136);
  v45[0] = a2 + 136;
  v45[1] = a2 + 288;
  v36 = (OZChannel *)(a2 + 736);
  v45[2] = a2 + 736;
  v9 = (OZChannel *)v45[a3];
  v10 = (*((uint64_t (**)(OZChannel *))v9->var0 + 104))(v9);
  OZChannel::getKeyframes(v9, 0, __p);
  v11 = a3;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v39 = 0.0;
      OZChannel::getKeyframe(v9, *((void **)__p[0] + i), &v44, &v39);
      CurveValue = OZChannel::getCurveValue(v38, &v44, 1);
      v42 = OZChannel::getCurveValue(v37, &v44, 1);
      v43 = OZChannel::getCurveValue(v36, &v44, 1);
      *(&CurveValue + v11) = v39;
      *a5 = v44;
      (*(void (**)(uint64_t, double *, double *, double *, CMTime *))(*(_QWORD *)a1 + 1224))(a1, &CurveValue, &v42, &v43, a5);
      v14 = *(_QWORD **)(a4 + 8);
      v13 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *(_QWORD **)a4;
        v17 = ((uint64_t)v14 - *(_QWORD *)a4) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v20);
          v16 = *(_QWORD **)a4;
          v14 = *(_QWORD **)(a4 + 8);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        *(double *)v22 = *(&CurveValue + v11);
        v15 = v22 + 8;
        while (v14 != v16)
        {
          v23 = *--v14;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        *(_QWORD *)a4 = v22;
        *(_QWORD *)(a4 + 8) = v15;
        *(_QWORD *)(a4 + 16) = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = *((_QWORD *)&CurveValue + v11);
        v15 = v14 + 1;
      }
      *(_QWORD *)(a4 + 8) = v15;
    }
  }
  else
  {
    v44.value = OZChannel::getInitialValue(v38);
    *(_QWORD *)&v44.timescale = OZChannel::getInitialValue(v37);
    v44.epoch = OZChannel::getInitialValue(v36);
    (*(void (**)(uint64_t, CMTime *, CMTimeScale *, CMTimeEpoch *, CMTime *))(*(_QWORD *)a1 + 1224))(a1, &v44, &v44.timescale, &v44.epoch, a5);
    v24 = *(_QWORD *)(a4 + 16);
    v25 = *(_QWORD **)(a4 + 8);
    if ((unint64_t)v25 >= v24)
    {
      v27 = *(_QWORD **)a4;
      v28 = ((uint64_t)v25 - *(_QWORD *)a4) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a4 + 16, v31);
        v27 = *(_QWORD **)a4;
        v25 = *(_QWORD **)(a4 + 8);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *(_QWORD *)v33 = *(&v44.value + a3);
      v26 = v33 + 8;
      while (v25 != v27)
      {
        v35 = *--v25;
        *((_QWORD *)v33 - 1) = v35;
        v33 -= 8;
      }
      *(_QWORD *)a4 = v33;
      *(_QWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 16) = v34;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v25 = *(&v44.value + a3);
      v26 = v25 + 1;
    }
    *(_QWORD *)(a4 + 8) = v26;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B2EB1E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void OZGroup::computeLocalScale(uint64_t a1, uint64_t a2, OZChannel *a3, int a4, uint64_t a5, CMTime *a6)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 Transformation;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  double *v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;
  double InitialValue;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  double *v42;
  double *v43;
  double *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  double *v50;
  char *v51;
  uint64_t v52;
  double v53;
  CMTime v54;
  void *__p[3];
  _OWORD v56[3];
  int v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v11 = (*((uint64_t (**)(OZChannel *))a3->var0 + 104))(a3);
  v70 = 0x3FF0000000000000;
  v67 = 0x3FF0000000000000;
  v64 = 0x3FF0000000000000;
  v60 = 0;
  v61 = 0x3FF0000000000000;
  v62 = 0u;
  v63 = 0u;
  v65 = 0u;
  v66 = 0u;
  v68 = 0u;
  v69 = 0u;
  memset(v56, 0, sizeof(v56));
  v57 = 4;
  v58 = 0u;
  v59 = 0u;
  if (v11)
  {
    v12 = v11;
    OZChannel::getKeyframes(a3, 0, __p);
    v13 = 0;
    v14 = a4;
    do
    {
      v53 = 0.0;
      OZChannel::getKeyframe(a3, *((void **)__p[0] + v13), &v54, &v53);
      *a6 = v54;
      (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(_QWORD *)a1 + 1264))(a1, &v61, a6);
      Transformation = liSafeGetTransformation((__int128 *)&v61, (uint64_t)v56);
      _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2218, v16, v17, v18, v19, v20);
      v21 = v53 * *((double *)&v56[1] + v14 + 1);
      v23 = *(double **)(a5 + 8);
      v22 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v23 >= v22)
      {
        v25 = *(double **)a5;
        v26 = ((uint64_t)v23 - *(_QWORD *)a5) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v29);
          v25 = *(double **)a5;
          v23 = *(double **)(a5 + 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = (double *)&v30[8 * v26];
        *v31 = v21;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *((_QWORD *)v23-- - 1);
          *((_QWORD *)v31-- - 1) = v32;
        }
        *(_QWORD *)a5 = v31;
        *(_QWORD *)(a5 + 8) = v24;
        *(_QWORD *)(a5 + 16) = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      *(_QWORD *)(a5 + 8) = v24;
      ++v13;
    }
    while (v13 != v12);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    InitialValue = OZChannel::getInitialValue(a3);
    (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(_QWORD *)a1 + 1264))(a1, &v61, a6);
    v34 = liSafeGetTransformation((__int128 *)&v61, (uint64_t)v56);
    _pcCheckGetTransformation((FILE *)v34, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2229, v35, v36, v37, v38, v39);
    v40 = InitialValue * *((double *)&v56[1] + a4 + 1);
    v41 = *(_QWORD *)(a5 + 16);
    v42 = *(double **)(a5 + 8);
    if ((unint64_t)v42 >= v41)
    {
      v44 = *(double **)a5;
      v45 = ((uint64_t)v42 - *(_QWORD *)a5) >> 3;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v47 = v41 - (_QWORD)v44;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v48);
        v44 = *(double **)a5;
        v42 = *(double **)(a5 + 8);
      }
      else
      {
        v49 = 0;
      }
      v50 = (double *)&v49[8 * v45];
      v51 = &v49[8 * v48];
      *v50 = v40;
      v43 = v50 + 1;
      while (v42 != v44)
      {
        v52 = *((_QWORD *)v42-- - 1);
        *((_QWORD *)v50-- - 1) = v52;
      }
      *(_QWORD *)a5 = v50;
      *(_QWORD *)(a5 + 8) = v43;
      *(_QWORD *)(a5 + 16) = v51;
      if (v44)
        operator delete(v44);
    }
    else
    {
      *v42 = v40;
      v43 = v42 + 1;
    }
    *(_QWORD *)(a5 + 8) = v43;
  }
}

void sub_1B2EB215C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZGroup::computeGlobalScale(uint64_t a1, uint64_t a2, OZChannel *a3, int a4, uint64_t a5, CMTime *a6)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 Transformation;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  double *v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;
  double InitialValue;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  double *v42;
  double *v43;
  double *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  double *v50;
  char *v51;
  uint64_t v52;
  double v53;
  CMTime v54;
  void *__p[3];
  _OWORD v56[3];
  int v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v11 = (*((uint64_t (**)(OZChannel *))a3->var0 + 104))(a3);
  v70 = 0x3FF0000000000000;
  v67 = 0x3FF0000000000000;
  v64 = 0x3FF0000000000000;
  v60 = 0;
  v61 = 0x3FF0000000000000;
  v62 = 0u;
  v63 = 0u;
  v65 = 0u;
  v66 = 0u;
  v68 = 0u;
  v69 = 0u;
  memset(v56, 0, sizeof(v56));
  v57 = 4;
  v58 = 0u;
  v59 = 0u;
  if (v11)
  {
    v12 = v11;
    OZChannel::getKeyframes(a3, 0, __p);
    v13 = 0;
    v14 = a4;
    do
    {
      v53 = 0.0;
      OZChannel::getKeyframe(a3, *((void **)__p[0] + v13), &v54, &v53);
      *a6 = v54;
      (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(_QWORD *)a1 + 1256))(a1, &v61, a6);
      Transformation = liSafeGetTransformation((__int128 *)&v61, (uint64_t)v56);
      _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2255, v16, v17, v18, v19, v20);
      v21 = v53 * *((double *)&v56[1] + v14 + 1);
      v23 = *(double **)(a5 + 8);
      v22 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v23 >= v22)
      {
        v25 = *(double **)a5;
        v26 = ((uint64_t)v23 - *(_QWORD *)a5) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v29);
          v25 = *(double **)a5;
          v23 = *(double **)(a5 + 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = (double *)&v30[8 * v26];
        *v31 = v21;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *((_QWORD *)v23-- - 1);
          *((_QWORD *)v31-- - 1) = v32;
        }
        *(_QWORD *)a5 = v31;
        *(_QWORD *)(a5 + 8) = v24;
        *(_QWORD *)(a5 + 16) = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      *(_QWORD *)(a5 + 8) = v24;
      ++v13;
    }
    while (v13 != v12);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    InitialValue = OZChannel::getInitialValue(a3);
    (*(void (**)(uint64_t, uint64_t *, CMTime *))(*(_QWORD *)a1 + 1256))(a1, &v61, a6);
    v34 = liSafeGetTransformation((__int128 *)&v61, (uint64_t)v56);
    _pcCheckGetTransformation((FILE *)v34, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2266, v35, v36, v37, v38, v39);
    v40 = InitialValue * *((double *)&v56[1] + a4 + 1);
    v41 = *(_QWORD *)(a5 + 16);
    v42 = *(double **)(a5 + 8);
    if ((unint64_t)v42 >= v41)
    {
      v44 = *(double **)a5;
      v45 = ((uint64_t)v42 - *(_QWORD *)a5) >> 3;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v47 = v41 - (_QWORD)v44;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v48);
        v44 = *(double **)a5;
        v42 = *(double **)(a5 + 8);
      }
      else
      {
        v49 = 0;
      }
      v50 = (double *)&v49[8 * v45];
      v51 = &v49[8 * v48];
      *v50 = v40;
      v43 = v50 + 1;
      while (v42 != v44)
      {
        v52 = *((_QWORD *)v42-- - 1);
        *((_QWORD *)v50-- - 1) = v52;
      }
      *(_QWORD *)a5 = v50;
      *(_QWORD *)(a5 + 8) = v43;
      *(_QWORD *)(a5 + 16) = v51;
      if (v44)
        operator delete(v44);
    }
    else
    {
      *v42 = v40;
      v43 = v42 + 1;
    }
    *(_QWORD *)(a5 + 8) = v43;
  }
}

void sub_1B2EB24A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::computeLocalRotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  __int128 v12;
  CMTimeEpoch v13;
  CMTimeEpoch epoch;
  CMTime v15;
  CMTime v16;
  __int128 v17;
  CMTimeEpoch v18;

  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 552))(a3, 0))
  {
    v17 = *MEMORY[0x1E0CA2E28];
    v18 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
    while (((*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a3 + 624))(a3, &v17, 0) & 1) != 0)
      ;
    result = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a3 + 632))(a3, &v17, 0);
    if ((_DWORD)result)
    {
      do
      {
        v12 = v17;
        *(_OWORD *)a5 = v17;
        v13 = v18;
        *(_QWORD *)(a5 + 16) = v18;
        *(_OWORD *)&v16.value = v12;
        v16.epoch = v13;
        computeLocalRotationValue(a1, a3, a4, a5, &v16, a6);
        result = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a3 + 632))(a3, &v17, 0);
      }
      while ((result & 1) != 0);
    }
  }
  else
  {
    v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    epoch = v15.epoch;
    *(_OWORD *)a5 = *(_OWORD *)&v15.value;
    *(_QWORD *)(a5 + 16) = epoch;
    return computeLocalRotationValue(a1, a3, a4, a5, &v15, a6);
  }
  return result;
}

uint64_t computeLocalRotationValue(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, CMTime *a5, _BYTE *a6)
{
  double ValueAsQuatd;
  _BOOL8 Transformation;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  BOOL v27;
  unint64_t v28;
  __int128 v29;
  uint64_t result;
  __int128 v31;
  CMTimeEpoch epoch;
  float64x2_t v33;
  double v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  CMTime v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  double v49[2];
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  _OWORD v58[3];
  int v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = 0x3FF0000000000000;
  v69 = 0x3FF0000000000000;
  v66 = 0x3FF0000000000000;
  v63 = 0x3FF0000000000000;
  v64 = 0u;
  v65 = 0u;
  v67 = 0u;
  v68 = 0u;
  v70 = 0u;
  v71 = 0u;
  memset(v58, 0, sizeof(v58));
  v59 = 4;
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v54 = 1.0;
  v55 = 0.0;
  v56 = 0.0;
  v57 = 0.0;
  v50 = 1.0;
  v51 = 0.0;
  v52 = 0.0;
  v53 = 0.0;
  v48 = 0uLL;
  v49[0] = 0.0;
  ValueAsQuatd = OZChannelRotation3D::getValueAsQuatd(a2, &v54, a5, 0.0);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, double))(*(_QWORD *)a1 + 1264))(a1, &v63, a4, ValueAsQuatd);
  Transformation = liSafeGetTransformation((__int128 *)&v63, (uint64_t)v58, &v50);
  _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2283, v14, v15, v16, v17, v18);
  v19 = v50 * v54 - (v51 * v55 + v52 * v56 + v53 * v57);
  v20 = v54 * v51 + v50 * v55;
  v21 = v52 * v57 - v56 * v53;
  v22 = v51 * v56 - v55 * v52;
  v52 = v54 * v52 + v50 * v56 + v55 * v53 - v51 * v57;
  v53 = v22 + v54 * v53 + v50 * v57;
  v50 = v19;
  v51 = v20 + v21;
  OZChannelRotation3D::getValueAsEulerAngles(a2, a5, &v48, 0.0);
  v23 = v48;
  v24 = v49[0];
  v45 = *a5;
  (*(void (**)(float64x2_t *__return_ptr, uint64_t, CMTime *))(*(_QWORD *)a1 + 1352))(&v46, a1, &v45);
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v38 = 0x3FF0000000000000;
  v35 = 0x3FF0000000000000;
  v36 = 0u;
  v37 = 0u;
  v39 = 0u;
  v40 = 0u;
  v42 = 0u;
  v43 = 0u;
  PCMatrix44Tmpl<double>::leftRotate((double *)&v35, 4, v46.f64[0], v46.f64[1], v47);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v35, v48.f64, v48.f64);
  v48 = vsubq_f64(v48, v46);
  v49[0] = v49[0] - v47;
  PCQuat<double>::getIncrementalEulerAngles(&v50, v48.f64, &v48.f64[1], v49, 4u);
  v25 = v48;
  if (vabdd_f64(v48.f64[0], v23.f64[0]) >= 0.0000001)
  {
    v27 = 1;
    v26 = v49[0];
  }
  else
  {
    v26 = v49[0];
    v27 = vabdd_f64(v48.f64[1], v23.f64[1]) >= 0.0000001 || vabdd_f64(v49[0], v24) >= 0.0000001;
  }
  *a6 |= v27;
  v31 = *(_OWORD *)&a5->value;
  epoch = a5->epoch;
  v33 = v25;
  v34 = v26;
  v28 = a3[1];
  if (v28 >= a3[2])
  {
    result = std::vector<OZGroupKeyframe<PCVector3<double>>>::__push_back_slow_path<OZGroupKeyframe<PCVector3<double>>>(a3, (uint64_t)&v31);
  }
  else
  {
    v29 = *(_OWORD *)&a5->value;
    *(_QWORD *)(v28 + 16) = a5->epoch;
    *(_OWORD *)v28 = v29;
    *(float64x2_t *)(v28 + 24) = v25;
    *(double *)(v28 + 40) = v26;
    result = v28 + 48;
  }
  a3[1] = result;
  return result;
}

uint64_t OZGroup::computeGlobalRotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  __int128 v12;
  CMTimeEpoch v13;
  CMTimeEpoch epoch;
  CMTime v15;
  CMTime v16;
  __int128 v17;
  CMTimeEpoch v18;

  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 552))(a3, 0))
  {
    v17 = *MEMORY[0x1E0CA2E28];
    v18 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
    while (((*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a3 + 624))(a3, &v17, 0) & 1) != 0)
      ;
    result = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a3 + 632))(a3, &v17, 0);
    if ((_DWORD)result)
    {
      do
      {
        v12 = v17;
        *(_OWORD *)a5 = v17;
        v13 = v18;
        *(_QWORD *)(a5 + 16) = v18;
        *(_OWORD *)&v16.value = v12;
        v16.epoch = v13;
        computeGlobalRotationValue(a1, a3, a4, a5, &v16, a6);
        result = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a3 + 632))(a3, &v17, 0);
      }
      while ((result & 1) != 0);
    }
  }
  else
  {
    v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    epoch = v15.epoch;
    *(_OWORD *)a5 = *(_OWORD *)&v15.value;
    *(_QWORD *)(a5 + 16) = epoch;
    return computeGlobalRotationValue(a1, a3, a4, a5, &v15, a6);
  }
  return result;
}

uint64_t computeGlobalRotationValue(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, CMTime *a5, _BYTE *a6)
{
  double ValueAsQuatd;
  _BOOL8 Transformation;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  BOOL v35;
  unint64_t v36;
  __int128 v37;
  uint64_t result;
  __int128 v39;
  CMTimeEpoch epoch;
  double v41;
  double v42;
  double v43;
  double v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  CMTime v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  _OWORD v66[3];
  int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = 0x3FF0000000000000;
  v77 = 0x3FF0000000000000;
  v74 = 0x3FF0000000000000;
  v70 = 0;
  v71 = 0x3FF0000000000000;
  v72 = 0u;
  v73 = 0u;
  v75 = 0u;
  v76 = 0u;
  v78 = 0u;
  v79 = 0u;
  memset(v66, 0, sizeof(v66));
  v67 = 4;
  v68 = 0u;
  v69 = 0u;
  v62 = 1.0;
  v63 = 0.0;
  v64 = 0.0;
  v65 = 0.0;
  v58 = 1.0;
  v59 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  v55 = 0.0;
  v56 = 0.0;
  v57 = 0.0;
  ValueAsQuatd = OZChannelRotation3D::getValueAsQuatd(a2, &v62, a5, 0.0);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, double))(*(_QWORD *)a1 + 1256))(a1, &v71, a4, ValueAsQuatd);
  Transformation = liSafeGetTransformation((__int128 *)&v71, (uint64_t)v66, &v58);
  _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZGroup.cpp", 2337, v14, v15, v16, v17, v18);
  v19 = v58 * v62 - (v59 * v63 + v60 * v64 + v61 * v65);
  v20 = v62 * v59 + v58 * v63;
  v21 = v60 * v65 - v64 * v61;
  v22 = v59 * v64 - v63 * v60;
  v60 = v62 * v60 + v58 * v64 + v63 * v61 - v59 * v65;
  v61 = v22 + v62 * v61 + v58 * v65;
  v58 = v19;
  v59 = v20 + v21;
  OZChannelRotation3D::getValueAsEulerAngles(a2, a5, &v55, 0.0);
  v24 = v55;
  v23 = v56;
  v25 = v57;
  v54 = *a5;
  (*(void (**)(double *__return_ptr, uint64_t, CMTime *))(*(_QWORD *)a1 + 1352))(&v44, a1, &v54);
  v26 = v44;
  v27 = *(double *)&v45;
  v28 = -v44;
  v29 = -*(double *)&v45;
  v30 = *((double *)&v45 + 1);
  v31 = -*((double *)&v45 + 1);
  v53 = 0x3FF0000000000000;
  v50 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v44 = 1.0;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  v51 = 0u;
  v52 = 0u;
  PCMatrix44Tmpl<double>::leftRotate(&v44, 4, v28, v29, v31);
  PCMatrix44Tmpl<double>::transform<double>(&v44, &v55, &v55);
  v55 = v26 + v55;
  v56 = v27 + v56;
  v57 = v30 + v57;
  PCQuat<double>::getIncrementalEulerAngles(&v58, &v55, &v56, &v57, 4u);
  v32 = v55;
  v33 = v56;
  if (vabdd_f64(v55, v24) >= 0.0000001)
  {
    v35 = 1;
    v34 = v57;
  }
  else
  {
    v34 = v57;
    v35 = vabdd_f64(v56, v23) >= 0.0000001 || vabdd_f64(v57, v25) >= 0.0000001;
  }
  *a6 |= v35;
  v39 = *(_OWORD *)&a5->value;
  epoch = a5->epoch;
  v41 = v32;
  v42 = v33;
  v43 = v34;
  v36 = a3[1];
  if (v36 >= a3[2])
  {
    result = std::vector<OZGroupKeyframe<PCVector3<double>>>::__push_back_slow_path<OZGroupKeyframe<PCVector3<double>>>(a3, (uint64_t)&v39);
  }
  else
  {
    v37 = *(_OWORD *)&a5->value;
    *(_QWORD *)(v36 + 16) = a5->epoch;
    *(_OWORD *)v36 = v37;
    *(double *)(v36 + 24) = v32;
    *(double *)(v36 + 32) = v33;
    *(double *)(v36 + 40) = v34;
    result = v36 + 48;
  }
  a3[1] = result;
  return result;
}

void OZGroup::setKeypoints(uint64_t a1, OZChannel *a2, double **a3)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  CMTime v10;
  void *__p[3];

  v5 = (*((uint64_t (**)(OZChannel *))a2->var0 + 104))(a2);
  if (v5)
  {
    v6 = v5;
    OZChannel::getKeyframes(a2, 0, __p);
    v7 = 0;
    v8 = 8 * v6;
    do
    {
      v9 = 0.0;
      OZChannel::getKeyframe(a2, *(void **)((char *)__p[0] + v7), &v10, &v9);
      OZChannel::setKeyframe(a2, *(void **)((char *)__p[0] + v7), &v10, (*a3)[v7 / 8]);
      v7 += 8;
    }
    while (v8 != v7);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    OZChannel::setInitialValue(a2, **a3, 0);
  }
}

void sub_1B2EB2E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::setKeypoints(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double *v10;

  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 480))(a2, 1);
  v6 = a3[1] - *a3;
  if (v6)
  {
    v7 = 0;
    v8 = v6 / 48;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    do
    {
      v10 = (double *)(*a3 + v7);
      (*(void (**)(_QWORD *, double *))(*a2 + 600))(a2, v10);
      (*(void (**)(_QWORD *, double *, _QWORD, double))(a2[17] + 712))(a2 + 17, v10, 0, v10[3]);
      (*(void (**)(_QWORD *, double *, _QWORD, double))(a2[36] + 712))(a2 + 36, v10, 0, v10[4]);
      result = (*(uint64_t (**)(_QWORD *, double *, _QWORD, double))(a2[55] + 712))(a2 + 55, v10, 0, v10[5]);
      v7 += 48;
      --v9;
    }
    while (v9);
  }
  return result;
}

void OZGroup::transformToLocal(OZGroup *this, OZTransformNode *a2)
{
  double v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  void *__p;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  OZRenderState v39;

  if (a2)
  {
    OZRenderState::OZRenderState(&v39);
    if ((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this))
      v4 = *(double *)((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this) + 384);
    else
      v4 = 1.0;
    v39.var3 = v4;
    *(_OWORD *)&v39.var0.var0 = *MEMORY[0x1E0CA2E68];
    v39.var0.var3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_WORD *)&v39.var8 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    __p = 0;
    v19 = 0;
    v20 = 0;
    v17 = 0;
    OZGroup::computeLocalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 0, (uint64_t)&v36, (CMTime *)&v39);
    OZGroup::computeLocalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 1, (uint64_t)&v33, (CMTime *)&v39);
    OZGroup::computeLocalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 2, (uint64_t)&v30, (CMTime *)&v39);
    v39.var9 = 1;
    if (!v6)
    {
      OZGroup::computeLocalScale((uint64_t)this, v5, (OZChannel *)((char *)a2 + 4576), 0, (uint64_t)&v27, (CMTime *)&v39);
      OZGroup::computeLocalScale((uint64_t)this, v7, (OZChannel *)((char *)a2 + 4728), 1, (uint64_t)&v24, (CMTime *)&v39);
      OZGroup::computeLocalScale((uint64_t)this, v8, (OZChannel *)((char *)a2 + 4880), 2, (uint64_t)&v21, (CMTime *)&v39);
    }
    v9 = OZGroup::computeLocalRotation((uint64_t)this, v5, (uint64_t)a2 + 2104, (uint64_t *)&__p, (uint64_t)&v39, &v17);
    OZGroup::setKeypoints(v9, (OZChannel *)((char *)a2 + 1352), &v36);
    OZGroup::setKeypoints(v10, (OZChannel *)((char *)a2 + 1504), (double **)&v33);
    OZGroup::setKeypoints(v11, (OZChannel *)((char *)a2 + 1952), (double **)&v30);
    if (!v6)
    {
      OZGroup::setKeypoints(v12, (OZChannel *)((char *)a2 + 4576), (double **)&v27);
      OZGroup::setKeypoints(v13, (OZChannel *)((char *)a2 + 4728), (double **)&v24);
      OZGroup::setKeypoints(v14, (OZChannel *)((char *)a2 + 4880), (double **)&v21);
    }
    if (v17)
    {
      v15 = (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)a2 + 263) + 552))((char *)a2 + 2104, 0);
      if ((_DWORD)v15)
      {
        OZGroup::setKeypoints(v15, (_QWORD *)a2 + 263, &__p);
      }
      else
      {
        v16 = (double *)__p;
        (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)a2 + 280) + 712))((char *)a2 + 2240, MEMORY[0x1E0CA2E68], 0, *((double *)__p + 3));
        (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)a2 + 299) + 712))((char *)a2 + 2392, MEMORY[0x1E0CA2E68], 0, v16[4]);
        (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)a2 + 318) + 712))((char *)a2 + 2544, MEMORY[0x1E0CA2E68], 0, v16[5]);
      }
    }
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_1B2EB32A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{
  _QWORD *v25;
  void *v27;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  if (a25)
  {
    v25[1] = a25;
    operator delete(a25);
  }
  v27 = (void *)v25[3];
  if (v27)
  {
    v25[4] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void OZGroup::transformToGlobal(OZGroup *this, OZTransformNode *a2)
{
  double v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  void *__p;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  OZRenderState v39;

  if (a2)
  {
    OZRenderState::OZRenderState(&v39);
    if ((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this))
      v4 = *(double *)((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this) + 384);
    else
      v4 = 1.0;
    v39.var3 = v4;
    *(_OWORD *)&v39.var0.var0 = *MEMORY[0x1E0CA2E68];
    v39.var0.var3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_WORD *)&v39.var8 = 0;
    OZChannel::getCurveInterface((OZChannel *)((char *)a2 + 1352));
    OZChannel::getCurveInterface((OZChannel *)((char *)a2 + 1504));
    OZChannel::getCurveInterface((OZChannel *)((char *)a2 + 1952));
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    __p = 0;
    v19 = 0;
    v20 = 0;
    v17 = 0;
    OZGroup::computeGlobalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 0, (uint64_t)&v36, (CMTime *)&v39);
    OZGroup::computeGlobalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 1, (uint64_t)&v33, (CMTime *)&v39);
    OZGroup::computeGlobalTranslation((uint64_t)this, (uint64_t)a2 + 1216, 2, (uint64_t)&v30, (CMTime *)&v39);
    v39.var9 = 1;
    if (!v6)
    {
      OZGroup::computeGlobalScale((uint64_t)this, v5, (OZChannel *)((char *)a2 + 4576), 0, (uint64_t)&v27, (CMTime *)&v39);
      OZGroup::computeGlobalScale((uint64_t)this, v7, (OZChannel *)((char *)a2 + 4728), 1, (uint64_t)&v24, (CMTime *)&v39);
      OZGroup::computeGlobalScale((uint64_t)this, v8, (OZChannel *)((char *)a2 + 4880), 2, (uint64_t)&v21, (CMTime *)&v39);
    }
    v9 = OZGroup::computeGlobalRotation((uint64_t)this, v5, (uint64_t)a2 + 2104, (uint64_t *)&__p, (uint64_t)&v39, &v17);
    OZGroup::setKeypoints(v9, (OZChannel *)((char *)a2 + 1352), &v36);
    OZGroup::setKeypoints(v10, (OZChannel *)((char *)a2 + 1504), (double **)&v33);
    OZGroup::setKeypoints(v11, (OZChannel *)((char *)a2 + 1952), (double **)&v30);
    if (!v6)
    {
      OZGroup::setKeypoints(v12, (OZChannel *)((char *)a2 + 4576), (double **)&v27);
      OZGroup::setKeypoints(v13, (OZChannel *)((char *)a2 + 4728), (double **)&v24);
      OZGroup::setKeypoints(v14, (OZChannel *)((char *)a2 + 4880), (double **)&v21);
    }
    if (v17)
    {
      v15 = (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)a2 + 263) + 552))((char *)a2 + 2104, 0);
      if ((_DWORD)v15)
      {
        OZGroup::setKeypoints(v15, (_QWORD *)a2 + 263, &__p);
      }
      else
      {
        v16 = (double *)__p;
        (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)a2 + 280) + 712))((char *)a2 + 2240, MEMORY[0x1E0CA2E68], 0, *((double *)__p + 3));
        (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)a2 + 299) + 712))((char *)a2 + 2392, MEMORY[0x1E0CA2E68], 0, v16[4]);
        (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)a2 + 318) + 712))((char *)a2 + 2544, MEMORY[0x1E0CA2E68], 0, v16[5]);
      }
    }
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_1B2EB3670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{
  _QWORD *v25;
  void *v27;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  if (a25)
  {
    v25[1] = a25;
    operator delete(a25);
  }
  v27 = (void *)v25[3];
  if (v27)
  {
    v25[4] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZGroup::hasLockedDescendant(OZGroup *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  OZImageElement *v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  if (v4 == v5)
    return 0;
  v6 = v5;
  while (1)
  {
    v7 = *(_QWORD **)(v4 + 16);
    if (v7)
    {
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v10 = 1;
    if (((*(uint64_t (**)(_QWORD *, uint64_t))(v7[2] + 56))(v7 + 2, 1) & 1) != 0
      || v9 && (OZImageElement::isLockedDropZone(v9) & 1) != 0)
    {
      break;
    }
    if (v8 && (a2 & (*(unsigned int (**)(void *))(*(_QWORD *)v8 + 960))(v8) & 1) != 0)
    {
      v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 1024))(v8);
      v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 1032))(v8);
      v10 = 0;
      a2 = 1;
      if (v4 == v6)
        return v10;
    }
    else
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v6)
        return 0;
    }
  }
  return v10;
}

BOOL OZGroup::hasDescendants(OZGroup *this)
{
  return *((_QWORD *)this + 2349) != 0;
}

uint64_t OZGroup::numberOfDescendants(OZGroup *this)
{
  return (*((_DWORD *)this + 248)
                      + *((_DWORD *)this + 254)
                      + *((_DWORD *)this + 4606)
                      + *((_DWORD *)this + 4698));
}

uint64_t OZGroup::numberOfMembers(OZGroup *this)
{
  return *((unsigned int *)this + 4698);
}

uint64_t OZGroup::begin_descendants(OZGroup *this)
{
  return *((_QWORD *)this + 2348);
}

uint64_t OZGroup::end_descendants(OZGroup *this)
{
  return (uint64_t)this + 18776;
}

uint64_t OZGroup::hasDescendant(OZGroup *this, OZSceneNode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OZSceneNode *v7;
  uint64_t v9;
  _OWORD v10[2];
  int v11;
  _QWORD v12[2];
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  int v16;

  if (!a2)
    return 0;
  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  v12[0] = v4;
  v12[1] = v4;
  v13 = v5;
  v14 = 0;
  (*(void (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v9 = v6;
  while (1)
  {
    if (v12[0] == v9)
    {
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
      return 0;
    }
    v7 = v12[0] == v13 ? 0 : *(OZSceneNode **)(v12[0] + 16);
    if (v7 == a2)
      break;
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v12);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
  return 1;
}

void sub_1B2EB39E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::writeBody(OZElement *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _OWORD v25[2];
  int v26;

  if (a4)
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZGroupScope);
    v10 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1024))(this);
    v11 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1032))(this);
    memset(v25, 0, sizeof(v25));
    v26 = 1065353216;
    v21 = v10;
    v22 = v10;
    v23 = v11;
    v24 = 0;
    (*(void (**)(OZElement *))(*(_QWORD *)this + 1024))(this);
    v12 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1032))(this);
    memset(v19, 0, sizeof(v19));
    v20 = 1065353216;
    v18 = v12;
    for (i = v10; i != v18; v21 = i)
    {
      if (i == v23)
        v14 = 0;
      else
        v14 = *(_QWORD *)(i + 16);
      if (!OZChannelBase::testFlag((OZChannelBase *)(v14 + 56), 8))
      {
        v16 = *(_QWORD *)(v14 + 48);
        v15 = v14 + 48;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(v16 + 16))(v15, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
      i = *(_QWORD *)(v21 + 8);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  }
  return OZElement::writeBody(this, a2, a3, a4, a5);
}

void sub_1B2EB3BBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZGroup::writeBody(OZGroup *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZGroup::writeBody((OZElement *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZGroup::parseBegin(OZGroup *this, PCSerializerReadStream *a2)
{
  unsigned int v4;
  double v5;
  const CMTime *v6;

  OZElement::parseBegin((OZElement *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZGroupScope);
  v4 = *((_DWORD *)a2 + 26);
  if (v4 <= 4)
  {
    v5 = (double)v4;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)((char *)this + 20136), MEMORY[0x1E0CA2E68], -1.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 20288), v6, -1.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 20440), v6, v5, 0);
  }
  if (*((_DWORD *)a2 + 27) <= 9u)
    OZChannel::setValue((OZChannel *)((char *)this + 20592), MEMORY[0x1E0CA2E68], 0.0, 0);
  return 1;
}

uint64_t `non-virtual thunk to'OZGroup::parseBegin(OZGroup *this, PCSerializerReadStream *a2)
{
  OZGroup::parseBegin((OZGroup *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZGroup::parseEnd(OZGroup *this, PCSerializerReadStream *a2)
{
  __CFBundle *MainBundle;
  const __CFString *Identifier;
  uint64_t v6;
  const __CFURL **v7;
  const PCURL *v8;
  const CMTime *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v18;
  PCString v19;

  OZElement::parseEnd((OZElement *)this, a2);
  (*(void (**)(OZGroup *, uint64_t))(*(_QWORD *)this + 1704))(this, 1);
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2)
  {
    OZGroup::updateBlendModeFor360(this);
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      Identifier = CFBundleGetIdentifier(MainBundle);
      if (Identifier)
      {
        if (CFStringCompare(Identifier, CFSTR("com.apple.FinalCutApp"), 1uLL) == kCFCompareEqualTo)
        {
          (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
          return 0;
        }
      }
    }
    v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
    if (v6)
    {
      v7 = *(const __CFURL ***)(v6 + 1584);
      if (v7)
      {
        OZDocument::getFilename(v7, (PCURL *)&v19);
        PCURL::PCURL((PCURL *)&v18, &v19, 0);
        if (OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)&v18, v8))
        {
          (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
          PCURL::~PCURL((PCURL *)&v18);
          PCString::~PCString(&v19);
          return 0;
        }
        PCURL::~PCURL((PCURL *)&v18);
        PCString::~PCString(&v19);
      }
    }
  }
  v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20136), MEMORY[0x1E0CA2E68], 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20288), v9, 0.0);
  if (v11 < 0.0 || v12 < 0.0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19336), v9, 0.0);
    v14 = v13;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19488), v9, 0.0);
    v16 = v15;
    OZChannel::setValue((OZChannel *)((char *)this + 20136), v9, v14, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 20288), v9, v16, 0);
  }
  return 1;
}

void sub_1B2EB3EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::updateBlendModeFor360(OZGroup *this)
{
  PCString *v1;
  PCString *v2;
  unsigned int *v3;
  char *ElementBlendModes;
  uint64_t result;
  int v6;

  v1 = (PCString *)((char *)this + 6832);
  v2 = PCBlend::modeMenuString(0);
  OZChannelEnum::setStrings(v1, v2, 1);
  v6 = 0;
  ElementBlendModes = (char *)PCBlend::getElementBlendModes((PCBlend *)&v6, v3);
  OZChannelEnum::setTags((OZChannelEnum *)v1, ElementBlendModes, v6);
  result = OZChannel::isModified((OZChannel *)v1);
  if ((result & 1) == 0)
  {
    OZChannel::setDefaultValue((OZChannel *)v1, 0.0);
    OZChannelBase::reset((OZChannelBase *)v1, 0);
    return (uint64_t)OZChannelBase::saveStateAsDefault((OZChannelBase *)v1);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZGroup::parseEnd(OZGroup *this, PCSerializerReadStream *a2)
{
  return OZGroup::parseEnd((OZGroup *)((char *)this - 48), a2);
}

uint64_t OZGroup::parseElement(OZGroup *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  uint64_t SceneNode;
  const void *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  uint64_t (*v14)(void *, PCSharedCount *, _QWORD, _QWORD, _BOOL8);
  _BOOL8 v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  OZChannelBase *v20;
  OZChannelBase *v21;
  OZScene *v22;
  uint64_t v23;
  PCSharedCount *v25;
  char *v26;
  char v27;
  unsigned int v28;
  double v29;
  unsigned int v30[2];
  PCSharedCount v31;
  PCSharedCount v32;
  PCSharedCount v33;
  __int128 v34;

  PCSharedCount::PCSharedCount(&v33);
  PCSharedCount::PCSharedCount(&v32);
  PCSharedCount::PCSharedCount(&v31);
  v29 = 0.0;
  *(_QWORD *)v30 = 0;
  v28 = 0;
  v27 = 0;
  OZElement::parseElement((OZElement *)this, a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 61)
  {
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v30[1]);
    v34 = xmmword_1B355DCC0;
    SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v34, (uint64_t)&v33, v30[1]);
LABEL_14:
    v17 = (char *)SceneNode;
    if (!SceneNode)
      goto LABEL_20;
    goto LABEL_15;
  }
  if (v6 != 62)
  {
    if (v6 != 63)
      goto LABEL_20;
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v30[1]);
    v34 = xmmword_1B355DCD0;
    SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v34, (uint64_t)&v33, v30[1]);
    goto LABEL_14;
  }
  PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v30);
  PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
  PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v30[1]);
  PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v31);
  PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 8, (uint64_t)&v28);
  PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v27);
  if ((PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 118, (uint64_t)&v32) & 1) == 0)
    PCString::set((PCString *)&v32, (const PCString *)&v33);
  PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v29);
  v8 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v30[0]);
  if (!v8
  {
    v23 = 3;
LABEL_19:
    (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 8 * v23))(a2);
    goto LABEL_20;
  }
  v10 = v9;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v9 + 8), (int32x4_t)xmmword_1B3053B20)))) & 1) == 0)
  {
    v23 = 5;
    goto LABEL_19;
  }
  if (v11)
  {
    v12 = v11;
    v13 = PCString::empty((PCString *)&v31);
    v14 = *(uint64_t (**)(void *, PCSharedCount *, _QWORD, _QWORD, _BOOL8))(*(_QWORD *)v12 + 200);
    v15 = v27 != 0;
    if (!v13)
    {
      v26 = (char *)v14(v12, &v31, v30[1], v28, v15);
      v17 = v26;
      if (v26)
      OZFxGenerator::setInternalName((OZFxGenerator *)v26, (const PCString *)&v32);
      goto LABEL_30;
    }
    v16 = v14(v12, &v32, v30[1], v28, v15);
  }
  else
  {
    if (PCString::empty((PCString *)&v31))
      v25 = &v32;
    else
      v25 = &v31;
    v16 = (*(uint64_t (**)(char *, PCSharedCount *, _QWORD))(*(_QWORD *)v10 + 168))(v10, v25, v30[1]);
  }
  v17 = (char *)v16;
LABEL_30:
  (*(void (**)(char *, double))(*(_QWORD *)v17 + 1176))(v17, v29);
  (*(void (**)(char *, PCSharedCount *, _QWORD))(*((_QWORD *)v17 + 2) + 120))(v17 + 16, &v33, 0);
LABEL_15:
  OZChannelBase::setID((OZChannelBase *)(v17 + 56), v30[1]);
  (*(void (**)(char *, OZGroup *))(*(_QWORD *)v17 + 256))(v17, this);
  v18 = operator new(0x18uLL);
  v18[1] = (char *)this + 18776;
  v18[2] = v17;
  v19 = *((_QWORD *)this + 2347);
  *v18 = v19;
  *(_QWORD *)(v19 + 8) = v18;
  *((_QWORD *)this + 2347) = v18;
  ++*((_QWORD *)this + 2349);
  v20 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v17 + 640))(v17);
  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v20);
  v21 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v17 + 640))(v17);
  OZChannelBase::resetFlag(v21, 64, 0);
  v22 = (OZScene *)*((_QWORD *)this + 121);
  if (v22)
  {
    OZScene::registerNode(v22, (OZSceneNode *)v17);
    OZScene::addAllDependencies(*((_QWORD *)this + 121), (OZSceneNode *)v17);
  }
  PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v17 + 48));
LABEL_20:
  PCString::~PCString((PCString *)&v31);
  PCString::~PCString((PCString *)&v32);
  PCString::~PCString((PCString *)&v33);
  return 1;
}

void sub_1B2EB4398(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EB41E8);
}

void sub_1B2EB43BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13, PCString a14)
{
  __cxa_end_catch();
  PCString::~PCString(&a12);
  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZGroup::parseElement(OZGroup *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZGroup::parseElement((OZGroup *)((char *)this - 48), a2, a3);
  return 1;
}

void OZGroup::allowDrag(OZGroup *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  _QWORD *v13;
  OZGroup *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v20;
  char isKindOfClass;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *a5 = 0;
  if (lpsrc)
  {
    if (v14 == this)
      return;
    v17 = v16;
    if (v14)
    {
      if ((OZGroup::hasDescendant(v14, this) & 1) != 0)
        return;
    }
    if (v15
      && (!OZTransformNode::isInRootWorld((OZTransformNode *)this)
       || ((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1424))(this) & 1) != 0
       || (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2))
    {
      return;
    }
  }
  else
  {
    if (!this)
      return;
    v17 = 0;
    v13 = 0;
  }
  v18 = *((_QWORD *)lpsrc + 1);
  v34 = xmmword_1B355CF20;
  if ((OZFactory::isKindOfClass(v18, (int32x4_t *)&v34) & 1) != 0
    || v17
    && (!OZGroup::isValidToLightInside(this)
     || (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 2))
  {
    return;
  }
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 2 || v13 == 0)
  {
    if (!v13)
      goto LABEL_32;
  }
  else
  {
    v20 = v13[1];
    v33 = xmmword_1B355DCF0;
    isKindOfClass = OZFactory::isKindOfClass(v20, (int32x4_t *)&v33);
    if ((isKindOfClass & 1) == 0)
    {
      v22 = v13[1];
      v32 = xmmword_1B355DDD0;
      if ((OZFactory::isKindOfClass(v22, (int32x4_t *)&v32) & 1) == 0)
      {
        v23 = v13[1];
        v31 = xmmword_1B355DDF0;
        if ((OZFactory::isKindOfClass(v23, (int32x4_t *)&v31) & 1) == 0)
          return;
      }
    }
  }
  if ((v13[128] & 8) == 0)
  {
    v24 = v13[1];
    v30 = xmmword_1B355E430;
    if ((OZFactory::isKindOfClass(v24, (int32x4_t *)&v30) & 1) == 0)
    {
      v25 = v13[1];
      v29 = xmmword_1B3053B20;
      if ((OZFactory::isKindOfClass(v25, (int32x4_t *)&v29) & 1) == 0)
      {
        if ((*(uint64_t (**)(_QWORD *))(*v13 + 272))(v13)
          && (v26 = (*(uint64_t (**)(_QWORD *))(*v13 + 272))(v13),
              v26 == (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this)))
        {
          v27 = a4 & 2;
        }
        else
        {
          if (!(*(unsigned int (**)(_QWORD *))(v13[2] + 96))(v13 + 2))
            return;
          v27 = a4 & 1;
        }
        *a5 = v27;
        return;
      }
    }
  }
  if ((v13[128] & 8) == 0
    || (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 1
    || (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1632))(this))
  {
LABEL_32:
    OZElement::allowDrag((OZElement *)this, lpsrc, a3, a4, a5, a6, a7);
  }
}

void `non-virtual thunk to'OZGroup::allowDrag(OZGroup *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZGroup::allowDrag((OZGroup *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

uint64_t OZGroup::performDragOperation(OZElement *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  char *v16;
  OZElement *v17;
  OZTransformNode *v18;
  int v19;
  int v20;
  const void *v22;
  OZElement *v23;
  BOOL v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  OZChannelFolder *v31;
  uint64_t v32;
  OZTransformNode *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  OZTransformNode *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  int v43;
  OZTransformNode *v44;
  CMTime v45;
  CMTime v46[2];
  CMTime v47;
  CMTime v48;
  CMTime v49;

  if (!lpsrc)
  {
    if (!this)
      return 0;
    return OZElement::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  if (v16)
  else
    v18 = 0;
  if (v17 == this)
    return 0;
  v44 = v18;
  if (v17)
  {
    if ((OZGroup::hasDescendant((OZGroup *)v17, (OZSceneNode *)this) & 1) != 0)
      return 0;
  }
  if (!v16)
    return OZElement::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  if ((OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v16 + 640))(v16) == a3)
    return 0;
  v19 = *((_DWORD *)v16 + 256);
  v20 = a7 & 8;
  if ((a7 & 8 & v19) == 0 && ((v19 | a7) & 8) != 0)
    return OZElement::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  v22 = (const void *)*((_QWORD *)v16 + 120);
  if (v22)
  else
    v23 = 0;
  v25 = (a4 & 0x20) != 0 || v23 == this;
  v26 = !v25;
  v27 = !v25 && v44 != 0;
  if (v44 && v23 && v26)
  {
    PCURL::PCURL((PCURL *)v46, CFSTR("Undo Reorder"));
    (*(void (**)(_QWORD *, CMTime *))(*((_QWORD *)v44 + 263) + 344))((_QWORD *)v44 + 263, v46);
    PCString::~PCString((PCString *)v46);
    OZGroup::transformToGlobal((OZGroup *)v23, v44);
    v20 = a7 & 8;
  }
  v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v16 + 272))(v16);
  v43 = v20;
  if (v28)
  {
    if (v27)
      v29 = 4;
    else
      v29 = 3;
    if (v20)
      v30 = 5;
    else
      v30 = v29;
    PCURL::PCURL((PCURL *)v46, CFSTR("Undo Reorder"));
    (*(void (**)(char *, CMTime *, uint64_t))(*((_QWORD *)v16 + 2) + 176))(v16 + 16, v46, v30);
    PCString::~PCString((PCString *)v46);
    OZSceneNode::removeFromParent((OZSceneNode *)v16);
  }
  else
  {
    if ((a7 & 1) != 0)
    {
      v31 = (OZChannelFolder *)(*(uint64_t (**)(char *))(*(_QWORD *)v16 + 640))(v16);
      memset(&v47, 0, sizeof(v47));
      (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v31 + 712))(v46);
      v48 = v46[0];
      v49 = *a8;
      PC_CMTimeSaferSubtract(&v49, &v48, (uint64_t)&v47);
      v45 = v47;
      v32 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v32 + 336), (__n128 *)v46);
      shiftRecursive(v31, &v45, v46);
      logMessageTracerFeatureUsage((OZSceneNode *)v16);
    }
    LOBYTE(v27) = 0;
  }
  v33 = v44;
  v34 = *((_QWORD *)this + 2348);
  if ((OZElement *)v34 == (OZElement *)((char *)this + 18776))
  {
    v36 = 0;
  }
  else
  {
    v35 = (uint64_t *)(v34 + 16);
    if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 16) + 640))(*(_QWORD *)(v34 + 16)) == a3)
    {
      v36 = 0;
LABEL_53:
      v33 = v44;
      if (a5 == 3)
        v36 = *v35;
    }
    else
    {
      while (1)
      {
        v34 = *(_QWORD *)(v34 + 8);
        if ((OZElement *)v34 == (OZElement *)((char *)this + 18776))
          break;
        v36 = *v35;
        v35 = (uint64_t *)(v34 + 16);
        if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 16) + 640))(*(_QWORD *)(v34 + 16)) == a3)
          goto LABEL_53;
      }
      v36 = 0;
      v33 = v44;
    }
  }
  if ((v43 & *((_DWORD *)v16 + 256)) != 0)
  {
    (*(void (**)(char *))(*(_QWORD *)v16 + 1048))(v16);
    v33 = v44;
  }
  v37 = !v27;
  if (!v33)
    v37 = 1;
  if ((v37 & 1) == 0)
  {
    v38 = v33;
    v39 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 272))(this);
    (*(void (**)(OZTransformNode *, uint64_t))(*(_QWORD *)v38 + 280))(v38, v39);
    OZGroup::transformToLocal((OZGroup *)this, v38);
  }
  (*(void (**)(OZElement *, char *, uint64_t))(*(_QWORD *)this + 984))(this, v16, v36);
  (*(void (**)(OZElement *))(*(_QWORD *)this + 496))(this);
  if (!v28)
  {
    v41 = v16 + 16;
    if (v40)
      PCURL::PCURL((PCURL *)v46, CFSTR("Undo New Generator"));
    else
      PCURL::PCURL((PCURL *)v46, CFSTR("Undo Paste"));
    (*(void (**)(char *, CMTime *, uint64_t))(*(_QWORD *)v41 + 176))(v41, v46, 1);
    PCString::~PCString((PCString *)v46);
  }
  v42 = *((_QWORD *)this + 121);
  if (v42)
    OZDocument::postNotification(*(OZDocument **)(v42 + 1584), 16);
  return 1;
}

void sub_1B2EB4C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void shiftRecursive(OZChannelFolder *a1, CMTime *a2, CMTime *a3)
{
  OZChannelBase *v6;
  OZChannelBase *v7;
  const CMTime *v8;
  uint64_t v9;
  unint64_t v10;
  const void **v11;
  OZChannelFolder *v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  if (a1)
  {
    if (v6)
    {
      v7 = v6;
      (*((void (**)(CMTime *__return_ptr))v6->var0 + 89))(&v16);
      v18 = v16;
      v17 = *a2;
      PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
      v16 = v15;
      (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v7->var0 + 40))(&v14, v7);
      v18 = v14;
      v17 = *a2;
      PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v15);
      OZRetimingUtil::SetTimeOffsetAndExtentInteractive(v7, &v15, &v16, a3, v8);
    }
  }
  v9 = *((_QWORD *)a1 + 14);
  if (v9)
  {
    v11 = *(const void ***)v9;
    v10 = *(_QWORD *)(v9 + 8);
    if (*(_QWORD *)v9 < v10)
    {
      do
      {
        if (*v11)
        {
          if (v12)
          {
            v13 = *a2;
            shiftRecursive(v12, &v13, a3);
          }
        }
        ++v11;
      }
      while ((unint64_t)v11 < v10);
    }
  }
}

void logMessageTracerFeatureUsage(OZSceneNode *a1)
{
  unint64_t v2;
  PCString *Name;
  char *CStr;
  unint64_t v5;
  __int128 v6;
  __int128 v7;

  v2 = *((_QWORD *)a1 + 1);
  v7 = xmmword_1B3054200;
  if (OZFactory::isKindOfClass(v2, (int32x4_t *)&v7))
  {
    Name = (PCString *)OZObjectManipulator::getName((OZSceneNode *)((char *)a1 + 16));
    CStr = PCString::createCStr(Name);
    OZChannelBase::setRangeName((OZChannelBase *)"Text Generator", (const PCString *)CStr);
    free(CStr);
  }
  else
  {
    v5 = *((_QWORD *)a1 + 1);
    v6 = xmmword_1B355DDD0;
    if (OZFactory::isKindOfClass(v5, (int32x4_t *)&v6))
      OZMsgTracerLogFxPlugUsage((OZSceneNode *)((char *)a1 + 16));
  }
}

uint64_t `non-virtual thunk to'OZGroup::performDragOperation(OZGroup *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZGroup::performDragOperation((OZElement *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZGroup::updateLinkedIDs(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *i;
  _QWORD *v6;
  const void *v7;
  _QWORD v9[4];
  uint64_t v10;

  OZSceneNode::updateLinkedIDs(a1, a2);
  OZSceneNode::begin_t<OZElement,false,false>(a1, (uint64_t)v9);
  if (v9[0] != v9[2])
  {
    v4 = *(const void **)(v9[0] + 16);
    if (v4)
    {
            i;
      {
        (*(void (**)(void *, uint64_t))(*(_QWORD *)i + 840))(i, a2);
        v6 = OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v9);
        if (*v6 == v6[2])
          break;
        v7 = *(const void **)(*v6 + 16);
        if (!v7)
          break;
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v10);
}

void sub_1B2EB4F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

double OZGroup::getTransformMatrix(OZTransformNode *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL4 shouldLockToCamera;
  double result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  OZTransformNode::getTransformMatrix(a1, a2, (CMTime *)a3);
  v6 = *(unsigned __int8 *)(a3 + 242);
  shouldLockToCamera = OZGroup::shouldLockToCamera((OZGroup *)a1);
  if (!shouldLockToCamera && v6)
    shouldLockToCamera = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)a1 + 1640))(a1) == 2;
  if (shouldLockToCamera && *(_BYTE *)(a3 + 64))
    result = PCMatrix44Tmpl<double>::leftMult(a2, (double *)(a3 + 72));
  if (*(_BYTE *)(a3 + 200))
  {
    v18 = 0x3FF0000000000000;
    v15 = 0x3FF0000000000000;
    v12 = 0x3FF0000000000000;
    v9 = 0x3FF0000000000000;
    v10 = 0u;
    v11 = 0u;
    v13 = 0u;
    v14 = 0u;
    v16 = 0u;
    v17 = 0u;
    (*(void (**)(OZTransformNode *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1272))(a1, &v9, a3);
    return PCMatrix44Tmpl<double>::rightMult(a2, (double *)&v9);
  }
  return result;
}

double OZGroup::getInvTransformMatrix(OZTransformNode *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL4 shouldLockToCamera;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[48];
  __int128 v14;
  __int128 v15;
  _BYTE v16[48];

  OZTransformNode::getInvTransformMatrix(a1, a2, (CMTime *)a3);
  v6 = *(unsigned __int8 *)(a3 + 242);
  shouldLockToCamera = OZGroup::shouldLockToCamera((OZGroup *)a1);
  if (!shouldLockToCamera && v6)
    shouldLockToCamera = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)a1 + 1640))(a1) == 2;
  if (shouldLockToCamera && *(_BYTE *)(a3 + 64))
  {
    v9 = *(_OWORD *)(a3 + 152);
    v15 = *(_OWORD *)(a3 + 136);
    *(_OWORD *)v16 = v9;
    v10 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)&v16[16] = *(_OWORD *)(a3 + 168);
    *(_OWORD *)&v16[32] = v10;
    v11 = *(_OWORD *)(a3 + 88);
    *(_OWORD *)v13 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v13[16] = v11;
    v12 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)&v13[32] = *(_OWORD *)(a3 + 104);
    v14 = v12;
    PCMatrix44Tmpl<double>::invert((double *)v13, (double *)v13, 0.0);
    result = PCMatrix44Tmpl<double>::rightMult(a2, (double *)v13);
  }
  if (*(_BYTE *)(a3 + 200))
  {
    *(_QWORD *)&v16[40] = 0x3FF0000000000000;
    *(_QWORD *)v16 = 0x3FF0000000000000;
    *(_QWORD *)&v13[40] = 0x3FF0000000000000;
    *(_QWORD *)v13 = 0x3FF0000000000000;
    memset(&v13[8], 0, 32);
    v14 = 0u;
    v15 = 0u;
    memset(&v16[8], 0, 32);
    (*(void (**)(OZTransformNode *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 2280))(a1, v13, a3);
    return PCMatrix44Tmpl<double>::leftMult(a2, (double *)v13);
  }
  return result;
}

uint64_t OZGroup::setLithiumTransform(OZGroup *this, LiSceneObject *a2, OZRenderState *a3)
{
  _BOOL4 var28;
  _BOOL4 shouldLockToCamera;
  __n128 v8;
  OZElement *var17;
  double v10;
  double v11;
  float64x2_t v13;
  double v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v21;
  float64x2_t v22;
  double v23;
  double v24;
  OZRenderState v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29 = 0x3FF0000000000000;
  v26 = 0x3FF0000000000000;
  v27 = 0u;
  v28 = 0u;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  OZRenderState::OZRenderState(&v25, a3);
  v25.var4 = 1;
  v25.var8 = 0;
  (*(void (**)(OZGroup *, uint64_t *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v26, &v25);
  var28 = a3->var28;
  shouldLockToCamera = OZGroup::shouldLockToCamera(this);
  if (shouldLockToCamera || !var28)
  {
    if (!shouldLockToCamera)
      return (*(uint64_t (**)(LiSceneObject *, uint64_t *, __n128))(*(_QWORD *)a2 + 16))(a2, &v26, v8);
  }
  else if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 2)
  {
    return (*(uint64_t (**)(LiSceneObject *, uint64_t *, __n128))(*(_QWORD *)a2 + 16))(a2, &v26, v8);
  }
  var17 = a3[4].var17;
  (*(void (**)(float64x2_t *__return_ptr, OZElement *))(*(_QWORD *)var17 + 16))(&v13, var17);
  if (!(*(unsigned int (**)(OZElement *))(*(_QWORD *)var17 + 632))(var17))
  {
    v10 = (*(double (**)(OZElement *))(*(_QWORD *)var17 + 320))(var17);
    if (v10 != 0.0)
    {
      v15 = v15 - v10 * v14;
      v18 = v18 - v10 * v17;
      v21 = v21 - v10 * v20;
      v24 = v24 - v10 * v23;
    }
  }
  v11 = (*(double (**)(OZElement *))(*(_QWORD *)var17 + 488))(var17);
  if (v11 != 1.0)
  {
    v13 = vmulq_n_f64(v13, v11);
    v16 = vmulq_n_f64(v16, v11);
    v19 = vmulq_n_f64(v19, v11);
    v22 = vmulq_n_f64(v22, v11);
    v14 = v11 * v14;
    v17 = v11 * v17;
    v20 = v11 * v20;
    v23 = v11 * v23;
  }
  v8.n128_f64[0] = PCMatrix44Tmpl<double>::leftMult((uint64_t)&v26, v13.f64);
  return (*(uint64_t (**)(LiSceneObject *, uint64_t *, __n128))(*(_QWORD *)a2 + 16))(a2, &v26, v8);
}

void OZGroup::getFilmback(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, float64x2_t *a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (**v13)(OZSceneSettings *__hidden);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGColorSpace *v22;
  __int128 v23;
  _OWORD v24[2];
  PCString v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  CMTime var0;

  var0 = (CMTime)a2->var0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20136), &var0, 0.0);
  v6 = v5;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20288), &var0, 0.0);
  if (v6 == 0.0 || v7 == 0.0)
  {
    v8 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v13);
    if (v8)
    {
      v18 = *(_DWORD *)(v8 + 408);
      v15 = *(_OWORD *)(v8 + 360);
      v16 = *(_OWORD *)(v8 + 376);
      v17 = *(_OWORD *)(v8 + 392);
      v14 = *(_OWORD *)(v8 + 344);
      v9 = *(_OWORD *)(v8 + 432);
      v19 = *(_OWORD *)(v8 + 416);
      v20 = v9;
      v21 = *(_OWORD *)(v8 + 448);
      PCCFRef<CGColorSpace *>::operator=(&v22, (CGColorSpace **)(v8 + 464));
      v23 = *(_OWORD *)(v8 + 472);
      v24[0] = *(_OWORD *)(v8 + 488);
      *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(v8 + 500);
      PCString::set(&v25, (const PCString *)(v8 + 520));
      v10 = *(_OWORD *)(v8 + 576);
      v28 = *(_OWORD *)(v8 + 560);
      v29 = v10;
      v11 = *(_OWORD *)(v8 + 544);
      v26 = *(_OWORD *)(v8 + 528);
      v27 = v11;
      v12 = *(_OWORD *)(v8 + 608);
      v30 = *(_OWORD *)(v8 + 592);
      v31 = v12;
      v32 = *(_QWORD *)(v8 + 624);
      v33 = *(_BYTE *)(v8 + 632);
    }
    *a3 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)&v14));
    v13 = &off_1E658F368;
    PCString::~PCString(&v25);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
  }
  else
  {
    a3->f64[0] = v6;
    a3->f64[1] = v7;
  }
}

void sub_1B2EB54E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,PCString a32)
{
  CGColorSpace **v32;

  PCString::~PCString(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v32);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::getProjectionCamera@<X0>(OZGroup *this@<X0>, const OZRenderState *a2@<X1>, int a3@<W2>, PCSharedCount *a4@<X8>)
{
  char isFlattened;
  uint64_t result;
  BOOL v10;
  LiSimpleCamera *v11;
  double v12;
  PCShared_base *var0;
  _QWORD v14[2];

  a4->var0 = 0;
  PCSharedCount::PCSharedCount(a4 + 1);
  isFlattened = OZGroup::isFlattened(this, a2);
  result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  if ((isFlattened & 1) != 0 || ((result | 2) != 2 ? (v10 = a3 == 0) : (v10 = 0), !v10))
  {
    v11 = (LiSimpleCamera *)operator new();
    LiSimpleCamera::LiSimpleCamera(v11);
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a4, v11);
    v12 = (*(double (**)(OZGroup *))(*(_QWORD *)this + 1328))(this);
    var0 = (PCShared_base *)a4->var0;
    if (!a4->var0)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD *__return_ptr, OZGroup *, const OZRenderState *))(*(_QWORD *)this + 2080))(v14, this, a2);
    (*(void (**)(PCShared_base *, _QWORD *))(*(_QWORD *)var0 + 288))(var0, v14);
    if (!a4->var0)
      throw_PCNullPointerException(1);
    return (*(uint64_t (**)(PC_Sp_counted_base *, double))(*(_QWORD *)a4->var0 + 696))(a4->var0, v12);
  }
  return result;
}

void sub_1B2EB5644(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x10A1C40DA4F106CLL);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZGroup::getProjectionMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  _OWORD *v7;
  __int128 v8;
  double v9;
  _QWORD v10[16];
  uint64_t v11;
  PCSharedCount v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2264))(&v11, a1, a3, a4);
  if (v11)
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v11 + 48))(v10);
    if (v10 != (_QWORD *)a2)
    {
      for (i = 0; i != 16; i += 4)
      {
        v7 = (_OWORD *)(a2 + i * 8);
        v8 = *(_OWORD *)&v10[i + 2];
        *v7 = *(_OWORD *)&v10[i];
        v7[1] = v8;
      }
    }
    v9 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1328))(a1);
    if (v9 != 1.0)
    {
      *(double *)a2 = v9 * *(double *)a2;
      *(double *)(a2 + 32) = v9 * *(double *)(a2 + 32);
      *(double *)(a2 + 64) = v9 * *(double *)(a2 + 64);
      *(double *)(a2 + 96) = v9 * *(double *)(a2 + 96);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
  }
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2EB579C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 - 40));
  _Unwind_Resume(a1);
}

float64x2_t OZGroup::getFlattenTransformMatrix(OZGroup *a1, float64x2_t *a2, OZRenderState *a3)
{
  char isFlattened;
  float64x2_t result;

  isFlattened = OZGroup::isFlattened(a1, a3);
  (*(void (**)(OZGroup *, float64x2_t *, OZRenderState *, _QWORD))(*(_QWORD *)a1 + 2272))(a1, a2, a3, 0);
  if ((isFlattened & 1) != 0 || !(*(unsigned int (**)(OZGroup *))(*(_QWORD *)a1 + 1640))(a1))
  {
    result = vmulq_f64(a2[5], (float64x2_t)0);
    a2[4] = vmulq_f64(a2[4], (float64x2_t)0);
    a2[5] = result;
  }
  return result;
}

void OZGroup::getInvFlattenTransformMatrix(OZGroup *a1, uint64_t a2, OZRenderState *a3)
{
  LiSimpleCamera *v5;
  uint64_t i;
  _OWORD *v7;
  __int128 v8;
  float64x2_t v9;
  _QWORD v10[16];
  float64x2_t v11;
  LiSimpleCamera *v12;
  PCSharedCount v13;

  if ((OZGroup::isFlattened(a1, a3) & 1) != 0
    || !(*(unsigned int (**)(OZGroup *))(*(_QWORD *)a1 + 1640))(a1))
  {
    v5 = (LiSimpleCamera *)operator new();
    LiSimpleCamera::LiSimpleCamera(v5);
    v12 = v5;
    PCSharedCount::PCSharedCount(&v13, (LiSimpleCamera *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
    v11 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)((*(uint64_t (**)(OZGroup *))(*(_QWORD *)a1 + 272))(a1)
                                                  + 344)));
    if (!v5)
      throw_PCNullPointerException(1);
    (*(void (**)(LiSimpleCamera *, float64x2_t *))(*(_QWORD *)v5 + 288))(v5, &v11);
    if (!v12)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v12 + 48))(v10);
    if (v10 != (_QWORD *)a2)
    {
      for (i = 0; i != 16; i += 4)
      {
        v7 = (_OWORD *)(a2 + i * 8);
        v8 = *(_OWORD *)&v10[i + 2];
        *v7 = *(_OWORD *)&v10[i];
        v7[1] = v8;
      }
    }
    v9 = vmulq_f64(*(float64x2_t *)(a2 + 80), (float64x2_t)0);
    *(float64x2_t *)(a2 + 64) = vmulq_f64(*(float64x2_t *)(a2 + 64), (float64x2_t)0);
    *(float64x2_t *)(a2 + 80) = v9;
    PCMatrix44Tmpl<double>::planarInverseZ(a2, (double *)a2, 0.0);
    PCSharedCount::~PCSharedCount(&v13);
  }
  else
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
  }
}

void sub_1B2EB59BC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

double OZGroup::getEyeMatrix(OZGroup *a1, uint64_t a2, OZRenderState *a3)
{
  double result;
  OZRenderState v7;

  OZRenderState::OZRenderState(&v7, a3);
  if ((OZGroup::isFlattened(a1, &v7) & 1) == 0
    && (*(unsigned int (**)(OZGroup *))(*(_QWORD *)a1 + 1640))(a1))
  {
    return OZTransformNode::getEyeMatrix(a1, a2, a3);
  }
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

double OZGroup::getInvEyeMatrix(OZGroup *a1, uint64_t a2, OZRenderState *a3)
{
  double result;
  OZRenderState v7;

  OZRenderState::OZRenderState(&v7, a3);
  if ((OZGroup::isFlattened(a1, &v7) & 1) == 0
    && (*(unsigned int (**)(OZGroup *))(*(_QWORD *)a1 + 1640))(a1))
  {
    return OZTransformNode::getInvEyeMatrix(a1, a2, a3);
  }
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

void OZGroup::invTransformRay(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  BOOL v6;
  LiSimpleCamera *v7;
  LiSimpleCamera *v8;
  char v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  __int128 v12;
  _OWORD v13[3];
  double v14[3];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  OZRenderState v25;
  double v26[6];
  float64x2_t v27;
  LiSimpleCamera *v28;
  PCSharedCount v29;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1424))(a1))
    v6 = !a3->var8;
  else
    v6 = 1;
  if (v6)
  {
    OZTransformNode::invTransformRay(a1, (_QWORD *)a2);
  }
  else
  {
    v7 = (LiSimpleCamera *)operator new();
    LiSimpleCamera::LiSimpleCamera(v7);
    v28 = v7;
    PCSharedCount::PCSharedCount(&v29, (LiSimpleCamera *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
    v27 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1)
                                                  + 344)));
    if (!v28)
      throw_PCNullPointerException(1);
    (*(void (**)(LiSimpleCamera *, float64x2_t *))(*(_QWORD *)v28 + 288))(v28, &v27);
    v8 = v28;
    if (!v28)
      throw_PCNullPointerException(1);
    (*(void (**)(LiSimpleCamera *))(*(_QWORD *)v28 + 320))(v28);
    (*(void (**)(double *__return_ptr, LiSimpleCamera *))(*(_QWORD *)v8 + 208))(v26, v8);
    OZRenderState::OZRenderState(&v25, a3);
    v25.var8 = 0;
    v24 = 0x3FF0000000000000;
    v21 = 0x3FF0000000000000;
    v18 = 0x3FF0000000000000;
    v15 = 0x3FF0000000000000;
    v16 = 0u;
    v17 = 0u;
    v19 = 0u;
    v20 = 0u;
    v22 = 0u;
    v23 = 0u;
    (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(_QWORD *)a1 + 1256))(a1, &v15, &v25);
    if (transformPlane<double>(&v15, v26, (uint64_t)v26)
      && (memset(v14, 0, sizeof(v14)), PCIntersectRayWithPlane((double *)a2, v26, v14), (v9 & 1) != 0))
    {
      if (!PCMatrix44Tmpl<double>::invert((double *)&v15, (double *)&v15, 0.0)
        && !PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v15, (double *)&v15, 0.0))
      {
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"invert and inverse2D failed", 27);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
        v11 = std::locale::use_facet((const std::locale *)v13, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)v13);
        std::ostream::put();
        std::ostream::flush();
      }
      PCMatrix44Tmpl<double>::transform<double>((double *)&v15, v14, v14);
      if (!v28)
        throw_PCNullPointerException(1);
      (*(void (**)(_OWORD *__return_ptr, LiSimpleCamera *, double *))(*(_QWORD *)v28 + 80))(v13, v28, v14);
      v12 = v13[1];
      *(_OWORD *)a2 = v13[0];
      *(_OWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 32) = v13[2];
    }
    else
    {
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
    PCSharedCount::~PCSharedCount(&v29);
  }
}

void sub_1B2EB5E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  PCSharedCount *v9;

  std::locale::~locale(&a9);
  PCSharedCount::~PCSharedCount(v9);
  _Unwind_Resume(a1);
}

BOOL OZGroup::addEffect(OZGroup *this, OZEffect *a2)
{
  return OZSceneNode::addEffect(this, a2, 0);
}

uint64_t OZGroup::getDimensionType(OZGroup *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 18928), MEMORY[0x1E0CA2E68], 0.0);
}

void OZGroup::setDimensionType(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v5;
  uint64_t v6;

  OZChannel::setValue((OZChannel *)(a1 + 18928), MEMORY[0x1E0CA2E68], (double)a2, 0);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1) == 2)
    OZGroup::updateBlendModeFor360((OZGroup *)a1);
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1704))(a1, 0))
    v5 = a3 == 0;
  else
    v5 = 1;
  if (!v5 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
  {
    if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) + 1584))
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
      OZDocument::postNotification(*(OZDocument **)(v6 + 1584), 32);
    }
  }
}

uint64_t OZGroup::getBlendMode(OZElement *this, const CMTime *a2)
{
  unsigned int BlendMode;
  CMTime v6;

  BlendMode = OZElement::getBlendMode(this, a2);
  v6 = *a2;
  if ((OZGroup::isForcedPrecompose((OZGroup *)this, &v6, 0) & (BlendMode == 34)) != 0)
    return 0;
  else
    return BlendMode;
}

uint64_t OZGroup::isForcedPrecompose(OZGroup *this, CMTime *a2, char a3)
{
  uint64_t result;
  char *v4;
  CMTime v5;
  CMTime v6;

  if ((a3 & 1) != 0)
  {
    v5 = *a2;
    return OZGroup::calcIsForcedPrecompose(this, &v5, 1);
  }
  else
  {
    v4 = (char *)this + 22888;
    if (*((_BYTE *)this + 22888))
    {
      v6 = *a2;
      result = OZGroup::calcIsForcedPrecompose(this, &v6, 0);
      v4[1] = result;
      *v4 = 0;
    }
    else
    {
      return *((_BYTE *)this + 22889) != 0;
    }
  }
  return result;
}

uint64_t OZGroup::calcIsForcedPrecompose(OZGroup *this, CMTime *a2, int a3)
{
  int v6;
  OZChannelBase *v7;
  OZChannelBase *v8;
  int v9;
  int v10;
  __int128 v12;
  CMTimeEpoch epoch;

  if (((*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1864))(this) & 1) != 0)
    return 1;
  v12 = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  v6 = (*(uint64_t (**)(OZGroup *, __int128 *))(*(_QWORD *)this + 1648))(this, &v12);
  v7 = a3 ? (OZChannelBase *)((char *)this + 6832) : 0;
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 640))(this);
  v9 = OZElement::checkForForcedPrecompose((OZElement *)this, v8, v7);
  v10 = 0;
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 9936), 0, 1))
    v10 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
  if (((v6 | v9) & 1) != 0 || (OZGroup::lightingForcesPrecomp(this) & 1) != 0)
    return 1;
  else
    return OZGroup::shadowForcesPrecomp(this) | v10;
}

uint64_t OZGroup::lightingForcesPrecomp(OZGroup *this)
{
  OZScene *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __n128 v12;
  uint64_t v13;

  if (!(*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1848))(this))
    return 0;
  if (!(*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1424))(this))
    return 0;
  if (!OZGroup::hasExternalLight(this))
    return 0;
  v2 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)v2 + 198);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * *(int *)(*(_QWORD *)(v3 + 224) + 12) + 192);
  if (!v4)
    return 0;
  v12 = 0uLL;
  v13 = 0;
  OZScene::getCurrentTime(v2, &v12);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v7);
  v11 = *(_BYTE *)(v4 + 78);
  v7 = v12;
  v9 = 0;
  v10 = 0;
  v8 = v13;
  v5 = (*(uint64_t (**)(OZGroup *, __n128 *))(*(_QWORD *)this + 1840))(this, &v7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v7);
  return v5;
}

void sub_1B2EB6230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

unint64_t OZGroup::shadowForcesPrecomp(OZGroup *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  CMTime v5;

  result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1848))(this);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1424))(this);
    if ((_DWORD)result)
    {
      result = OZGroup::hasExternalShadow(this);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
        if (result)
        {
          v3 = *(_QWORD *)(result + 1584);
          if (v3
            && (v4 = *(_QWORD *)(v3 + 8 * *(int *)(*(_QWORD *)(v3 + 224) + 12) + 192)) != 0
            && (memset(&v5, 0, sizeof(v5)),
                OZScene::getCurrentTime((OZScene *)result, (__n128 *)&v5),
                *(_BYTE *)(v4 + 79)))
          {
            return OZChannel::getValueAsInt((OZChannel *)((char *)this + 9632), &v5, 0.0)
                || OZChannel::getValueAsInt((OZChannel *)((char *)this + 9480), &v5, 0.0)
                || OZChannel::getValueAsInt((OZChannel *)((char *)this + 9784), &v5, 0.0) != 0;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL OZGroup::isPrecomposed(OZGroup *this, const CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return (*(unsigned int (**)(OZGroup *, CMTime *))(*(_QWORD *)this + 1576))(this, &v3) != 34;
}

uint64_t OZGroup::getPrecompCameraType(OZGroup *this, const OZRenderState *a2)
{
  int v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  if (!v4)
    return 2;
  if (v4 == 2)
    return 0;
  result = OZGroup::isFlattened(this, a2);
  if ((_DWORD)result)
    return 2;
  return result;
}

BOOL OZGroup::shouldLockToCamera(OZGroup *this)
{
  const void *v3;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this))
    return 0;
  v3 = (const void *)*((_QWORD *)this + 120);
  return !v3
}

BOOL OZGroup::isFlattened(OZGroup *this)
{
  return !(*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 19640), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t OZGroup::partitionsWorld(OZGroup *this)
{
  int v2;

  v2 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  if (!v2)
    return 1;
  if (v2 == 1)
    return (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
  return 0;
}

uint64_t OZGroup::areEffectsAppliedInScreenSpace(OZGroup *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1632))(this) ^ 1;
  return result;
}

uint64_t `non-virtual thunk to'OZGroup::areEffectsAppliedInScreenSpace(OZGroup *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 6528;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 816) + 1640))((char *)this - 6528);
  if ((_DWORD)result)
    return (*(unsigned int (**)(char *))(*(_QWORD *)v1 + 1632))(v1) ^ 1;
  return result;
}

BOOL OZGroup::producesDepth(OZGroup *this)
{
  return (*(unsigned int (**)(OZGroup *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68])
      && !(*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1424))(this);
}

uint64_t OZGroup::containsActiveLights(OZGroup *this, const OZGroup *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  OZScene *v8;
  __n128 CurrentTime;
  const void *v10;
  const OZGroup *v11;
  const OZGroup *v12;
  _QWORD *v13;
  const void *v14;
  uint64_t v15;
  _QWORD v17[4];
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  int v25;
  _QWORD v26[4];
  uint64_t v27;

  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v26);
  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  v20 = v5;
  v21 = v4;
  v22 = v5;
  v23 = 0;
  while (v26[0] != v20)
  {
    if (v26[0] == v26[2] || (v6 = *(const void **)(v26[0] + 16)) == 0)
      v7 = 0;
    else
    v8 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
    CurrentTime = OZScene::getCurrentTime(v8, &v19);
    if (((*(uint64_t (**)(_QWORD *, __n128 *, uint64_t, uint64_t, uint64_t, __n128))(v7[2] + 104))(v7 + 2, &v19, 1, 1, 1, CurrentTime) & 1) != 0)
    {
      v15 = 1;
      goto LABEL_22;
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v26);
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v17);
  if (v17[0] != v17[2]
    && (v10 = *(const void **)(v17[0] + 16)) != 0
  {
    v12 = v11;
    while (v12 == a2
         || ((*(uint64_t (**)(const OZGroup *))(*(_QWORD *)v12 + 1424))(v12) & 1) != 0
         || (OZGroup::containsActiveLights(v12, a2) & 1) == 0)
    {
      v13 = OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v17);
      if (*v13 != v13[2])
      {
        v14 = *(const void **)(*v13 + 16);
        if (v14)
        {
          if (v12)
            continue;
        }
      }
      goto LABEL_19;
    }
    v15 = 1;
  }
  else
  {
LABEL_19:
    v15 = 0;
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v18);
LABEL_22:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v24);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
  return v15;
}

void sub_1B2EB67D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 104);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::containsActiveShadowLights(OZGroup *this, const OZGroup *a2)
{
  uint64_t v4;
  uint64_t v5;
  const CMTime *v6;
  const void *v7;
  _QWORD *v8;
  OZScene *v9;
  __n128 CurrentTime;
  char *v11;
  const void *v12;
  const OZGroup *v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _OWORD v25[2];
  int v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v27);
  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v25, 0, sizeof(v25));
  v26 = 1065353216;
  v21 = v5;
  v22 = v4;
  v23 = v5;
  v24 = 0;
  v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while (v27[0] != v21)
  {
    if (v27[0] == v28 || (v7 = *(const void **)(v27[0] + 16)) == 0)
      v8 = 0;
    else
    v9 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
    CurrentTime = OZScene::getCurrentTime(v9, &v20);
    if ((*(unsigned int (**)(_QWORD *, __n128 *, uint64_t, uint64_t, uint64_t, __n128))(v8[2] + 104))(v8 + 2, &v20, 1, 1, 1, CurrentTime))
    {
      if (v27[0] == v28)
      {
        v11 = 0;
      }
      else
      {
        v11 = *(char **)(v27[0] + 16);
        if (v11)
      }
      if ((OZFolderLightShadow::hasShadows((OZChannelBase *)(v11 + 8776), v6) & 1) != 0)
      {
        v15 = 1;
        goto LABEL_29;
      }
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v27);
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v17);
  while (1)
  {
    if (v17[0] == v18
      || (v12 = *(const void **)(v17[0] + 16)) == 0
    {
      v15 = 0;
      goto LABEL_27;
    }
    if (v13 != a2 && ((*(uint64_t (**)(const OZGroup *))(*(_QWORD *)v13 + 1424))(v13) & 1) == 0)
    {
      if (v17[0] == v18)
      {
        v14 = 0;
      }
      else
      {
        v14 = *(void **)(v17[0] + 16);
        if (v14)
      }
      if ((OZGroup::containsActiveShadowLights((OZGroup *)v14, a2) & 1) != 0)
        break;
    }
    OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v17);
  }
  v15 = 1;
LABEL_27:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
LABEL_29:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v29);
  return v15;
}

void sub_1B2EB6A70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 120);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::hasExternalLight(OZGroup *this)
{
  const void *v2;
  OZGroup *v3;
  OZGroup *v4;
  uint64_t active;
  OZScene *v6;

  while (1)
  {
    v2 = (const void *)*((_QWORD *)this + 120);
    if (!v2)
      break;
    if (!v3)
      break;
    v4 = v3;
    active = OZGroup::containsActiveLights(v3, this);
    if ((active & 1) == 0)
    {
      this = v4;
      if (((*(uint64_t (**)(OZGroup *))(*(_QWORD *)v4 + 1424))(v4) & 1) == 0)
        continue;
    }
    return active;
  }
  v6 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
  if (v6)
    return OZScene::containsActiveLights(v6, this);
  return 0;
}

uint64_t OZGroup::hasExternalShadow(OZGroup *this)
{
  const void *v2;
  OZGroup *v3;
  OZGroup *v4;
  uint64_t active;
  OZScene *v6;

  while (1)
  {
    v2 = (const void *)*((_QWORD *)this + 120);
    if (!v2)
      break;
    if (!v3)
      break;
    v4 = v3;
    active = OZGroup::containsActiveShadowLights(v3, this);
    if ((active & 1) == 0)
    {
      this = v4;
      if (((*(uint64_t (**)(OZGroup *))(*(_QWORD *)v4 + 1424))(v4) & 1) == 0)
        continue;
    }
    return active;
  }
  v6 = (OZScene *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 272))(this);
  if (v6)
    return OZScene::containsActiveShadowLights(v6, this);
  return 0;
}

void OZGroup::buildLighting(OZGroup *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  int hasExternalShadow;
  int v9;
  int v10;
  BOOL v11;

  hasExternalShadow = OZGroup::hasExternalShadow(this);
  if (*((_BYTE *)a4 + 515))
    v9 = hasExternalShadow;
  else
    v9 = 0;
  if (OZGroup::hasExternalLight(this))
    v10 = (*(uint64_t (**)(OZGroup *, const OZRenderParams *))(*(_QWORD *)this + 1840))(this, a4);
  else
    v10 = 0;
  if (!(*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1424))(this)
    || ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1848))(this)
      ? (v11 = (v10 | v9) == 0)
      : (v11 = 1),
        v11))
  {
    LiGeode::setLit((uint64_t)a2, 0);
  }
  else
  {
    OZElement::buildLighting((OZElement *)this, a2, a3, a4);
  }
}

void OZGroup::buildShadowLights(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E64FC250;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t OZGroup::setLightChannels(OZGroup *this)
{
  _BOOL4 v2;
  int v3;
  _BOOL4 v4;
  const PCString *v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  _OWORD v10[2];
  int v11;
  _QWORD v12[4];
  uint64_t v13;

  v2 = OZElement::setLightChannels((OZElement *)this);
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1848))(this))
  {
    v3 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1424))(this);
    v4 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8920), 2);
    if (v3)
    {
      if (v4)
      {
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8920), 2, 0);
        v2 = 1;
      }
      if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8768), 2))
      {
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8768), 2, 0);
        v2 = 1;
      }
      if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9352), 2))
      {
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
LABEL_19:
        v2 = 1;
      }
    }
    else
    {
      if (!v4)
      {
        OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8920), 2, 0);
        v2 = 1;
      }
      if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8768), 2))
      {
        OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8768), 2, 0);
        v2 = 1;
      }
      if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9352), 2))
      {
        OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8920), 2))
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8920), 2, 0);
    if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8768), 2))
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8768), 2, 0);
  }
  if (OZGroup::isValidToLightInside(this) || !OZGroup::checkLights(this))
  {
    if (!v2)
      return 0;
  }
  else
  {
    OZChannelBase::setRangeName((OZChannelBase *)this, v5);
  }
  OZSceneNode::begin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v12);
  (*(void (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v9 = v6;
  while (v12[0] != v9)
  {
    (*(void (**)(void *))(*(_QWORD *)v7 + 1832))(v7);
    OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v12);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
  return 1;
}

void sub_1B2EB6F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::checkLights(OZGroup *this)
{
  uint64_t v1;
  const void *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _OWORD v15[2];
  int v16;
  _QWORD v17[4];
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;

  v1 = *((_QWORD *)this + 121);
  if (!v1 || *(_BYTE *)(v1 + 1576) || OZGroup::isValidToLightInside(this))
    return 0;
  OZSceneNode::begin_t<OZLight,false,false>((uint64_t)this, (uint64_t)v19);
  if (v19[0] != v19[2]
    && (v4 = *(const void **)(v19[0] + 16)) != 0
  {
    v6 = v5;
    v7 = 0;
    do
    {
      v9 = v6[2];
      v8 = (char *)(v6 + 2);
      if ((*(unsigned int (**)(char *, _QWORD, _QWORD))(v9 + 24))(v8, 0, 0))
      {
        (*(void (**)(char *, _QWORD))(*(_QWORD *)v8 + 40))(v8, 0);
        v7 = 1;
      }
      v10 = OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v19);
      if (*v10 == v10[2])
        break;
      v11 = *(const void **)(*v10 + 16);
      if (!v11)
        break;
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }
  OZSceneNode::begin_t<OZGroup,false,false>((uint64_t)this, (uint64_t)v17);
  (*(void (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v12 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  v14 = v12;
  while (v17[0] != v14)
  {
    if (v17[0] == v17[2])
    {
      v13 = 0;
    }
    else
    {
      v13 = *(void **)(v17[0] + 16);
      if (v13)
    }
    v7 = v7 & 1 | OZGroup::checkLights((OZGroup *)v13);
    OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v20);
  return v7 & 1;
}

void sub_1B2EB71B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1 - 88);
  _Unwind_Resume(a1);
}

BOOL OZGroup::isValidToLightOutside(OZGroup *this)
{
  const void *v2;
  OZGroup *v3;

  v2 = (const void *)*((_QWORD *)this + 120);
  if (v2
  {
    return OZGroup::isValidToLightInside(v3);
  }
  else
  {
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 1;
  }
}

uint64_t OZGroup::isValidLightClipPlane(OZElement *this)
{
  uint64_t result;

  result = OZElement::isValidLightClipPlane(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1632))(this);
  return result;
}

BOOL OZGroup::canReflect(OZElement *this)
{
  if (*((_QWORD *)this + 120))
    return OZElement::canReflect(this);
  else
    return (*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1640))(this) == 1;
}

uint64_t OZGroup::canFourCorner(OZGroup *this)
{
  uint64_t result;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 1)
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 2;
  result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 2;
  return result;
}

uint64_t OZGroup::canCrop(OZGroup *this)
{
  uint64_t result;

  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 1)
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 2;
  result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 2;
  return result;
}

uint64_t OZGroup::updateHiddenChannels(OZGroup *this, uint64_t a2)
{
  uint64_t v4;
  OZSceneNode *RootAncestor;
  OZGroup *v6;
  int v7;
  int v8;
  int v9;
  OZChannelBase *v10;
  double v11;
  double v12;
  _BOOL4 v14;
  int updated;
  int v16;
  OZChannelBase *v17;
  OZChannelBase *v18;
  OZChannelBase *v19;
  _BOOL4 v20;
  const PCString *v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  OZChannelBase *v29;
  uint64_t v30;
  _OWORD v31[2];
  int v32;
  _QWORD v33[4];
  uint64_t v34;

  v4 = *((_QWORD *)this + 120);
  RootAncestor = OZSceneNode::getRootAncestor(this);
  v6 = this;
  v27 = (!RootAncestor
  v7 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  v8 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  v26 = v4;
  if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this))
    v9 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1632))(this);
  else
    v9 = 1;
  v10 = (OZChannelBase *)((char *)this + 19184);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19184), MEMORY[0x1E0CA2E68], 0.0);
  v12 = v11;
  v14 = (*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) == 1 || v7 == 2;
  v28 = v14;
  updated = OZElement::updateHiddenChannels((OZElement *)this, a2);
  v16 = updated | (v8 != 1) ^ OZChannelBase::testFlag((OZChannelBase *)((char *)this + 19640), 2);
  v29 = (OZChannelBase *)((char *)this + 19336);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 19336), 4))
  {
    v10 = (OZChannelBase *)((char *)this + 19184);
    if ((((v12 != 0.0) ^ OZChannelBase::testFlag((OZChannelBase *)this + 174, 4)) & 1) != 0)
      goto LABEL_21;
    if (v12 == 0.0)
    {
      OZChannelBase::setFlag(v29, 4, a2);
      OZChannelBase::setFlag((OZChannelBase *)this + 174, 4, a2);
      goto LABEL_20;
    }
LABEL_19:
    OZChannelBase::resetFlag(v29, 4, a2);
    OZChannelBase::resetFlag((OZChannelBase *)this + 174, 4, a2);
LABEL_20:
    v16 = 1;
    goto LABEL_21;
  }
  if (v12 != 0.0)
    goto LABEL_19;
LABEL_21:
  v17 = (OZChannelBase *)((char *)this + 19640);
  if (v8 == 1)
  {
    OZChannelBase::resetFlag(v17, 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19792), 2, a2);
  }
  else
  {
    OZChannelBase::setFlag(v17, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19792), 2, a2);
  }
  v18 = (OZChannelBase *)((char *)this + 12672);
  if (v9)
    OZChannelBase::resetFlag(v18, 2, a2);
  else
    OZChannelBase::setFlag(v18, 2, a2);
  v19 = (OZChannelBase *)((char *)this + 1088);
  if (v7 == 2)
  {
    OZChannelBase::setFlag(v19, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11208), 2, a2);
LABEL_30:
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8384), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, a2);
    v20 = v28;
    goto LABEL_31;
  }
  OZChannelBase::resetFlag(v19, 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11208), 2, a2);
  if (v27)
    goto LABEL_30;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8384), 2, a2);
  v20 = v28;
  if (!v26)
  {
    if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this) != 1
      || !(*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1632))(this))
    {
      goto LABEL_52;
    }
LABEL_51:
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9352), 2, a2);
    goto LABEL_31;
  }
  if (v9)
    goto LABEL_51;
LABEL_52:
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, a2);
LABEL_31:
  if (v20)
  {
    OZChannelBase::setFlag(v10, 2, a2);
    OZChannelBase::setFlag(v29, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)this + 174, 2, a2);
    if (!v16)
      goto LABEL_37;
  }
  else
  {
    OZChannelBase::resetFlag(v10, 2, a2);
    OZChannelBase::resetFlag(v29, 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)this + 174, 2, 0);
    if (!v16)
      goto LABEL_37;
  }
  OZGroup::checkCameras((OZTransformNode *)this);
  if ((v9 & 1) == 0)
    OZChannelBase::setRangeName((OZChannelBase *)this, v21);
LABEL_37:
  OZSceneNode::begin_t<OZElement,false,false>((uint64_t)this, (uint64_t)v33);
  (*(void (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v22 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  v30 = v22;
  while (v33[0] != v30)
  {
    if (v33[0] != v33[2])
    {
      v23 = *(const void **)(v33[0] + 16);
      if (v23)
      {
        if (v24)
          v16 |= (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v24 + 1704))(v24, a2);
      }
    }
    OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v33);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v31);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v34);
  return v16 & 1;
}

void sub_1B2EB7864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

OZTransformNode *OZGroup::checkCameras(OZTransformNode *this)
{
  OZChannelBase *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  const PCString *v7;
  uint64_t v8;
  _OWORD v9[2];
  int v10;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13;

  v1 = (OZChannelBase *)this;
  v2 = *((_QWORD *)this + 121);
  if (!v2 || !*(_BYTE *)(v2 + 1576))
  {
    if (!OZTransformNode::isInRootWorld(this)
      || (this = (OZTransformNode *)(*((uint64_t (**)(OZChannelBase *))v1->var0 + 178))(v1), (_DWORD)this))
    {
      OZSceneNode::begin_t<OZCamera,false,true>((uint64_t)v1, (uint64_t)v11);
      (*((void (**)(OZChannelBase *))v1->var0 + 128))(v1);
      v3 = (*((uint64_t (**)(OZChannelBase *))v1->var0 + 129))(v1);
      v4 = 0;
      memset(v9, 0, sizeof(v9));
      v10 = 1065353216;
      v8 = v3;
      while (v11[0] != v8)
      {
        if (v11[0] == v12)
        {
          v5 = 0;
        }
        else
        {
          v5 = *(_QWORD **)(v11[0] + 16);
          if (v5)
        }
        if ((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(v5[2] + 24))(v5 + 2, 0, 0))
        {
          if (v11[0] == v12)
          {
            v6 = 0;
          }
          else
          {
            v6 = *(_QWORD **)(v11[0] + 16);
            if (v6)
          }
          (*(void (**)(_QWORD *, _QWORD))(v6[2] + 40))(v6 + 2, 0);
          if ((v4 & 1) == 0)
            OZChannelBase::setRangeName(v1, v7);
          v4 = 1;
        }
        OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(v11);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v9);
      return (OZTransformNode *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
    }
  }
  return this;
}

void sub_1B2EB7A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

OZTransformNode *`non-virtual thunk to'OZGroup::sceneDidChange(OZGroup *this)
{
  return OZGroup::checkCameras((OZTransformNode *)((char *)this - 16));
}

uint64_t *OZSceneNode::begin_t<OZCamera,false,true>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *result;
  const void *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if ((uint64_t *)v4 != result)
  {
    v6 = *(const void **)(v4 + 16);
    if (!v6)
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2EB7AF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void OZGroup::setToDefaultDimensionType(OZGroup *this, int a2)
{
  OZPreferenceManager *v4;
  int DefaultGroupType;
  int v6;
  OZChannel *v7;
  double v8;
  const void *v9;
  void *v10;
  unsigned int v11;
  _QWORD *v12;
  OZScene *v13;
  OZChannelBase *v14;
  unsigned int v15;
  const void *v16;
  OZGroup *v17;
  unsigned int v18;
  void *v19;
  OZGroup *v20;
  int v21;
  char *v23;
  _OWORD v24[2];
  int v25;
  _QWORD v26[4];
  uint64_t v27;

  v4 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  DefaultGroupType = OZPreferenceManager::getDefaultGroupType(v4);
  if (a2)
    v6 = 0;
  else
    v6 = DefaultGroupType;
  if (v6 == 1)
    goto LABEL_15;
  if (v6 != 2)
  {
    v9 = (const void *)*((_QWORD *)this + 120);
    if (v9)
    {
      if (v10)
      {
        v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 1640))(v10);
        if (v11 == 2)
          v11 = OZPreferenceManager::getDefaultGroupType(v4) == 2;
        v7 = (OZChannel *)((char *)this + 18928);
        v8 = (double)v11;
        goto LABEL_16;
      }
    }
    v12 = (_QWORD *)*((_QWORD *)this + 121);
    if (v12)
    {
      OZScene::begin_t<OZGroup,false,false>(v12, (uint64_t)v26);
      v13 = (OZScene *)*((_QWORD *)this + 121);
      memset(v24, 0, sizeof(v24));
      v25 = 1065353216;
      v23 = (char *)v13 + 1200;
      if (OZScene::has3DObjects(v13, 0))
      {
        v14 = (OZChannelBase *)((char *)this + 18928);
        OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), 1.0);
      }
      else
      {
        if ((char *)v26[0] != v23)
        {
          if (v26[0] == v26[2] || (v16 = *(const void **)(v26[0] + 16)) == 0)
            v17 = 0;
          else
          if (v17 == this)
          {
            OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v26);
            if ((char *)v26[0] == v23
            {
              v18 = 0;
            }
            else
            {
              v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 1640))(v19);
            }
            goto LABEL_37;
          }
          if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)v17 + 1640))(v17) == 2)
            v18 = 0;
          else
            v18 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)v17 + 1640))(v17);
          while (1)
          {
            OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v26);
LABEL_37:
            if ((char *)v26[0] == v23)
              break;
            v21 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)v20 + 1640))(v20);
            if (v20 != this && v18 != v21)
            {
              v18 = 1;
              break;
            }
          }
          OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), (double)v18);
          OZChannelBase::reset((OZChannelBase *)this + 169, 0);
          goto LABEL_45;
        }
        v14 = (OZChannelBase *)((char *)this + 18928);
        OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), 0.0);
      }
      OZChannelBase::reset(v14, 0);
LABEL_45:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v24);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
      goto LABEL_17;
    }
LABEL_15:
    v7 = (OZChannel *)((char *)this + 18928);
    v8 = 0.0;
    goto LABEL_16;
  }
  v7 = (OZChannel *)((char *)this + 18928);
  v8 = 1.0;
LABEL_16:
  OZChannel::setDefaultValue(v7, v8);
  OZChannelBase::reset((OZChannelBase *)v7, 0);
LABEL_17:
  if (OZSceneSettings::is360Project((OZSceneSettings *)(*((_QWORD *)this + 121) + 336))
    && !*((_QWORD *)this + 120)
    && !(*(unsigned int (**)(OZGroup *))(*(_QWORD *)this + 1640))(this))
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 18928), 1.0);
    OZChannelBase::reset((OZChannelBase *)this + 169, 0);
  }
  v15 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1640))(this);
  OZGroup::setDimensionType((uint64_t)this, v15, 0);
}

void sub_1B2EB7E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZGroup::didAddToScene(OZGroup *this, OZScene *a2)
{
  double DefaultValue;
  double v5;
  _BOOL4 v6;
  int v7;
  int v8;
  double v9;
  OZChannel *v10;

  OZTransformNode::didAddToScene((OZTransformNode *)this, a2);
  DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 19336));
  v5 = OZChannel::getDefaultValue((OZChannel *)((char *)this + 19488));
  v6 = DefaultValue == 0.0;
  if (v5 == 0.0)
    v6 = 1;
  if (a2)
  {
    if (v6)
    {
      v7 = *((_DWORD *)a2 + 86);
      v8 = *((_DWORD *)a2 + 87);
      v9 = (double)v7;
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 19336), (double)v7);
      OZChannelBase::reset((OZChannelBase *)((char *)this + 19336), 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 19488), (double)v8);
      OZChannelBase::reset((OZChannelBase *)this + 174, 0);
      OZChannel::setDefaultValue((OZChannel *)((char *)this + 20136), v9);
      OZChannelBase::reset((OZChannelBase *)((char *)this + 20136), 0);
      v10 = (OZChannel *)((char *)this + 20288);
      OZChannel::setDefaultValue(v10, (double)v8);
      OZChannelBase::reset((OZChannelBase *)v10, 0);
    }
  }
}

uint64_t OZGroup::scheduleTokens(_QWORD *a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  void **v18;

  v10 = OZSceneNode::scheduleTokens((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
  if (!v10)
  {
    if ((_QWORD *)a1[123] == a1 + 122)
    {
      return 0;
    }
    else
    {
      memset(v17, 0, sizeof(v17));
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v17, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
      (*(void (**)(_QWORD *, uint64_t, _QWORD *, uint64_t))(*a1 + 184))(a1, a2, v17, a4);
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 1024))(a1);
      v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 1032))(a1);
      if (v11 == v12)
      {
        v10 = 0;
      }
      else
      {
        do
        {
          v13 = *(_QWORD *)(v11 + 16);
          v16 = *(_QWORD *)(a2 + 16);
          v15 = *(_OWORD *)a2;
          if ((*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 16)
                                                                                              + 104))(v13 + 16, &v15, 1, 1, 1))
          {
            v10 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(v11 + 16)
                                                                                         + 136))(*(_QWORD *)(v11 + 16), a2, v17, a4, a5);
            if (v10)
              break;
          }
          else
          {
            v10 = 0;
          }
          v11 = *(_QWORD *)(v11 + 8);
        }
        while (v11 != v12);
      }
      v18 = (void **)v17;
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    }
  }
  return v10;
}

void sub_1B2EB8100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::hintTokensWillImage(_QWORD *a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  void **v16;

  v8 = OZSceneNode::hintTokensWillImage((uint64_t)a1, a2, (uint64_t)a3, a4);
  if (!v8)
  {
    if ((_QWORD *)a1[123] == a1 + 122)
    {
      return 0;
    }
    else
    {
      memset(v15, 0, sizeof(v15));
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v15, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
      (*(void (**)(_QWORD *, uint64_t, _QWORD *, uint64_t))(*a1 + 184))(a1, a2, v15, a4);
      v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 1024))(a1);
      v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 1032))(a1);
      if (v9 == v10)
      {
        v8 = 0;
      }
      else
      {
        do
        {
          v11 = *(_QWORD *)(v9 + 16);
          v14 = *(_QWORD *)(a2 + 16);
          v13 = *(_OWORD *)a2;
          if ((*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 16)
                                                                                              + 104))(v11 + 16, &v13, 1, 1, 1))
          {
            v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(v9 + 16) + 144))(*(_QWORD *)(v9 + 16), a2, v15, a4);
            if (v8)
              break;
          }
          else
          {
            v8 = 0;
          }
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9 != v10);
      }
      v16 = (void **)v15;
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v16);
    }
  }
  return v8;
}

void sub_1B2EB828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::getTokensImage(_QWORD *a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  void **v15;

  if (!OZSceneNode::getTokensImage((uint64_t)a1, a2, (uint64_t)a3, a4) && (_QWORD *)a1[123] != a1 + 122)
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v14, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
    (*(void (**)(_QWORD *, uint64_t, _QWORD *, uint64_t))(*a1 + 184))(a1, a2, v14, a4);
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 1024))(a1);
    v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 1032))(a1);
    while (v8 != v9)
    {
      v10 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(a2 + 16);
      v12 = *(_OWORD *)a2;
      if ((*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 16) + 104))(v10 + 16, &v12, 1, 1, 1))
      {
        if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(v8 + 16) + 152))(*(_QWORD *)(v8 + 16), a2, v14, a4))
        {
          break;
        }
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    v15 = (void **)v14;
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  return 0;
}

void sub_1B2EB83F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

uint64_t OZGroup::resetCacheEvictionLimit(OZGroup *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  result = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  if (v2 != result)
  {
    v4 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 600))(*(_QWORD *)(v2 + 16));
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v4);
  }
  return result;
}

uint64_t OZGroup::setStartTime(OZGroup *this, const CMTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  double v10;
  _QWORD v12[3];
  CMTime v13;
  CMTime v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[32];
  int v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)this + 1128))(&v28);
  v27 = *a2;
  OZSceneNode::setStartTime(this, a2);
  v4 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v25, 0, sizeof(v25));
  v26 = 1065353216;
  v21 = v4;
  v22 = v4;
  v23 = v5;
  v24 = 0;
  v6 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1024))(this);
  v7 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)this + 1032))(this);
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  v15 = v7;
  v16 = v6;
  v17 = v7;
  v18 = 0;
  for (i = v21; i != v15; v21 = i)
  {
    v9 = *(_QWORD *)(i + 16);
    (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)v9 + 1128))(&v14, v9);
    memset(&v13, 0, sizeof(v13));
    v30 = v14;
    v29 = v28;
    PC_CMTimeSaferSubtract(&v30, &v29, (uint64_t)&v13);
    memset(v12, 0, sizeof(v12));
    v30 = v27;
    v29 = v13;
    v10 = PC_CMTimeSaferAdd(&v30, &v29, (uint64_t)v12);
    (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v9 + 1160))(v9, v12, v10);
    i = *(_QWORD *)(v21 + 8);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
}

void sub_1B2EB8644(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry(Render360GroupAsEquirectSentry *this, OZGroup *a2, OZRenderParams *a3)
{
  PCShared_base **v6;
  uint64_t v7;
  uint64_t v8;
  PCShared_base *v9;
  _QWORD v10[4];

  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 3) = 0;
  v6 = (PCShared_base **)((char *)this + 24);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 4);
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  if (a2 && (*(unsigned int (**)(OZGroup *))(*(_QWORD *)a2 + 1640))(a2) == 2)
  {
    *(_BYTE *)this = 1;
    *((_BYTE *)this + 16) = *((_BYTE *)a3 + 242);
    v7 = *((_QWORD *)this + 1);
    *(_BYTE *)(v7 + 242) = 1;
    v8 = 1296;
    if (!*(_QWORD *)(v7 + 1296))
      v8 = 1280;
    PCPtr<LiImageSource>::operator=<LiImageSource>(v6, *(PCShared_base **)(v7 + v8));
    if (*v6)
    {
      (*(void (**)(PCShared_base *, char *))(*(_QWORD *)*v6 + 472))(*v6, (char *)this + 40);
      v9 = *v6;
      if (!*v6)
        throw_PCNullPointerException(1);
      v10[0] = 0x3FF0000000000000;
      memset(&v10[1], 0, 24);
      (*(void (**)(PCShared_base *, _QWORD *))(*(_QWORD *)v9 + 480))(v9, v10);
    }
  }
  else
  {
    *(_BYTE *)this = 0;
  }
}

void sub_1B2EB8784(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry(Render360GroupAsEquirectSentry *this, OZImageNode *lpsrc, OZRenderParams *a3)
{
  if (lpsrc)
  Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry(this, lpsrc, a3);
}

void Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;

  if (LOBYTE(this->var0))
  {
    *((_BYTE *)this[1].var0 + 242) = this[2].var0;
    var0 = this[3].var0;
    if (var0)
      (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(_QWORD *)var0 + 480))(var0, this + 5);
  }
  PCSharedCount::~PCSharedCount(this + 4);
}

BOOL OZGroup::hasBlendMode(OZGroup *this, const CMTime *a2)
{
  return (*(unsigned int (**)(OZGroup *, const CMTime *))(*(_QWORD *)this + 1576))(this, a2) != 34;
}

uint64_t OZGroup::OZGroup_dimensionTypeImpl::getInstance(OZGroup::OZGroup_dimensionTypeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::OZGroup_dimensionTypeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::OZGroup_dimensionTypeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_dimensionTypeImpl::_OZGroup_dimensionType;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_dimensionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGroup::OZGroup_dimensionTypeImpl *v0;

  if (!OZGroup::OZGroup_dimensionTypeImpl::_OZGroup_dimensionType)
  {
    v0 = (OZGroup::OZGroup_dimensionTypeImpl *)operator new();
    OZGroup::OZGroup_dimensionTypeImpl::OZGroup_dimensionTypeImpl(v0);
    OZGroup::OZGroup_dimensionTypeImpl::_OZGroup_dimensionType = (uint64_t)v0;
  }
}

void sub_1B2EB8914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZGroup::OZGroup_dimensionTypeImpl *OZGroup::OZGroup_dimensionTypeImpl::OZGroup_dimensionTypeImpl(OZGroup::OZGroup_dimensionTypeImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZGroup::OZGroup_dimensionTypeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65A1470;
  *((_QWORD *)this + 5) = &unk_1E65A1490;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2EB89C4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedWidthImpl::getInstance(OZGroup::OZGroup_fixedWidthImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::OZGroup_fixedWidthImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::OZGroup_fixedWidthImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedWidthImpl::_OZGroup_fixedWidth;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedWidthImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZGroup::OZGroup_fixedWidthImpl::_OZGroup_fixedWidth)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZGroup::OZGroup_fixedWidthImpl::OZGroup_fixedWidthImpl(v0);
    OZGroup::OZGroup_fixedWidthImpl::_OZGroup_fixedWidth = (uint64_t)v0;
  }
}

void sub_1B2EB8A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZGroup::OZGroup_fixedWidthImpl::OZGroup_fixedWidthImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65A14E8;
  this->var5 = (PCString *)&unk_1E65A1508;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2EB8B40(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedWidthInfo::getInstance(OZGroup::OZGroup_fixedWidthInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::OZGroup_fixedWidthInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::OZGroup_fixedWidthInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedWidthInfo::_OZGroup_fixedWidthInfo;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGroup::OZGroup_fixedWidthInfo *v0;

  if (!OZGroup::OZGroup_fixedWidthInfo::_OZGroup_fixedWidthInfo)
  {
    v0 = (OZGroup::OZGroup_fixedWidthInfo *)operator new();
    OZGroup::OZGroup_fixedWidthInfo::OZGroup_fixedWidthInfo(v0);
    OZGroup::OZGroup_fixedWidthInfo::_OZGroup_fixedWidthInfo = (uint64_t)v0;
  }
}

void sub_1B2EB8C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGroup::OZGroup_fixedWidthInfo *OZGroup::OZGroup_fixedWidthInfo::OZGroup_fixedWidthInfo(OZGroup::OZGroup_fixedWidthInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGroup::OZGroup_fixedWidthInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A1560;
  *((_QWORD *)this + 10) = &unk_1E65A1580;
  return this;
}

void sub_1B2EB8CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedHeightImpl::getInstance(OZGroup::OZGroup_fixedHeightImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::OZGroup_fixedHeightImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::OZGroup_fixedHeightImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedHeightImpl::_OZGroup_fixedHeight;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedHeightImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZGroup::OZGroup_fixedHeightImpl::_OZGroup_fixedHeight)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZGroup::OZGroup_fixedHeightImpl::OZGroup_fixedHeightImpl(v0);
    OZGroup::OZGroup_fixedHeightImpl::_OZGroup_fixedHeight = (uint64_t)v0;
  }
}

void sub_1B2EB8D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZGroup::OZGroup_fixedHeightImpl::OZGroup_fixedHeightImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65A15D8;
  this->var5 = (PCString *)&unk_1E65A15F8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2EB8E34(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_fixedHeightInfo::getInstance(OZGroup::OZGroup_fixedHeightInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::OZGroup_fixedHeightInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::OZGroup_fixedHeightInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_fixedHeightInfo::_OZGroup_fixedHeightInfo;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGroup::OZGroup_fixedHeightInfo *v0;

  if (!OZGroup::OZGroup_fixedHeightInfo::_OZGroup_fixedHeightInfo)
  {
    v0 = (OZGroup::OZGroup_fixedHeightInfo *)operator new();
    OZGroup::OZGroup_fixedHeightInfo::OZGroup_fixedHeightInfo(v0);
    OZGroup::OZGroup_fixedHeightInfo::_OZGroup_fixedHeightInfo = (uint64_t)v0;
  }
}

void sub_1B2EB8F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZGroup::OZGroup_fixedHeightInfo *OZGroup::OZGroup_fixedHeightInfo::OZGroup_fixedHeightInfo(OZGroup::OZGroup_fixedHeightInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZGroup::OZGroup_fixedHeightInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A1650;
  *((_QWORD *)this + 10) = &unk_1E65A1670;
  return this;
}

void sub_1B2EB8FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZGroup::OZGroup_versionImpl::getInstance(OZGroup::OZGroup_versionImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGroup::OZGroup_versionImpl::getInstance(void)::OZGroup_versionImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGroup::OZGroup_versionImpl::getInstance(void)::OZGroup_versionImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup::OZGroup_versionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup::OZGroup_versionImpl::_OZGroup_version;
}

void std::__call_once_param<std::tuple<OZGroup::OZGroup_versionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGroup::OZGroup_versionImpl *v0;

  if (!OZGroup::OZGroup_versionImpl::_OZGroup_version)
  {
    v0 = (OZGroup::OZGroup_versionImpl *)operator new();
    OZGroup::OZGroup_versionImpl::OZGroup_versionImpl(v0);
    OZGroup::OZGroup_versionImpl::_OZGroup_version = (uint64_t)v0;
  }
}

void sub_1B2EB9078(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZGroup::OZGroup_versionImpl *OZGroup::OZGroup_versionImpl::OZGroup_versionImpl(OZGroup::OZGroup_versionImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 5.0, 0, 1);
  PCSingleton::PCSingleton((OZGroup::OZGroup_versionImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65A16C8;
  *((_QWORD *)this + 5) = &unk_1E65A16E8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2EB912C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZSceneNode::begin_t<OZ3DEngineSceneElement,false,false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  const void *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if ((_QWORD *)v4 != result)
  {
    v6 = *(const void **)(v4 + 16);
    if (!v6)
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2EB91F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZ3DEngineSceneElement,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

uint64_t std::vector<OZGroupKeyframe<PCVector3<double>>>::__push_back_slow_path<OZGroupKeyframe<PCVector3<double>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v20 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v7, v9);
  v11 = &v10[48 * v4];
  __p = v10;
  v17 = v11;
  v19 = &v10[48 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  v18 = v11 + 48;
  std::vector<OZGroupKeyframe<PCVector3<double>>>::__swap_out_circular_buffer(a1, &__p);
  v14 = a1[1];
  if (v18 != v17)
    v18 = &v17[(v18 - v17 - 48) % 0x30uLL];
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_1B2EB93B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<OZGroupKeyframe<PCVector3<double>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = v7;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<Li3DEngineWorldData,std::allocator<Li3DEngineWorldData>,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,void>@<X0>(uint64_t *a1@<X1>, double *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x108uLL);
  result = std::__shared_ptr_emplace<Li3DEngineWorldData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,std::allocator<Li3DEngineWorldData>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B2EB9500(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<Li3DEngineWorldData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&,std::allocator<Li3DEngineWorldData>,0>(_QWORD *a1, uint64_t *a2, double *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  char v8;

  a1[2] = 0;
  *a1 = &unk_1E65A1B20;
  a1[1] = 0;
  std::allocator<Li3DEngineWorldData>::construct[abi:ne180100]<Li3DEngineWorldData,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&>((uint64_t)&v8, (Li3DEngineObjectDataBase *)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1B2EB9570(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Li3DEngineWorldData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65A1B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Li3DEngineWorldData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65A1B20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<Li3DEngineWorldData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<Li3DEngineWorldData>::construct[abi:ne180100]<Li3DEngineWorldData,Li3DEngineScene *,double const&,PCMatrix44Tmpl<double> &,Li3DEngineWorldPhysicsParams &,LiLightSet const&>(uint64_t a1, Li3DEngineObjectDataBase *a2, uint64_t *a3, double *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  __int128 v12[4];

  v8 = 0;
  v9 = *a3;
  v10 = *a4;
  do
  {
    v12[v8] = (__int128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a5 + 32 * v8)), *(float64x2_t *)(a5 + 32 * v8 + 16));
    ++v8;
  }
  while (v8 != 4);
  return Li3DEngineWorldData::Li3DEngineWorldData(a2, v9, v12, a6, a7, v10);
}

uint64_t Li3DEngineWorldData::Li3DEngineWorldData(Li3DEngineObjectDataBase *a1, uint64_t a2, __int128 *a3, _QWORD *a4, uint64_t a5, double a6)
{
  __int128 v11;
  __int128 v12;
  float *v13;
  uint64_t result;
  __int128 v15[4];

  v11 = a3[1];
  v15[0] = *a3;
  v15[1] = v11;
  v12 = a3[3];
  v15[2] = a3[2];
  v15[3] = v12;
  v13 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(a1);
  result = Li3DEngineObjectDataBase::Li3DEngineObjectDataBase((uint64_t)a1, a2, v15, 0, 0, 0, a5, a6, *v13, v13[1], v13[2], v13[3], 1.0);
  *(_QWORD *)a1 = &off_1E6571CB8;
  *((_QWORD *)a1 + 28) = 0;
  *((_QWORD *)a1 + 27) = 0;
  *((_QWORD *)a1 + 26) = (char *)a1 + 216;
  *((_QWORD *)a1 + 29) = *a4;
  return result;
}

uint64_t OZGroup::masterScene(OZGroup *this)
{
  uint64_t result;
  Li3DEngineScene *v3;

  result = *((_QWORD *)this + 2862);
  if (!result)
  {
    v3 = (Li3DEngineScene *)operator new();
    Li3DEngineScene::Li3DEngineScene(v3);
    *((_QWORD *)this + 2862) = v3;
    Li3DEngineScene::setUseOriginalScene((uint64_t)v3, 1);
    Li3DEngineScene::set(*((Li3DEngineScene **)this + 2862), (SCNScene *)(id)objc_msgSend(MEMORY[0x1E0CD5A10], "scene"));
    return *((_QWORD *)this + 2862);
  }
  return result;
}

void sub_1B2EB975C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A0C40E91470D5);
  _Unwind_Resume(a1);
}

void OZFootageLayer::OZFootageLayer(OZFootageLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *v5 = &off_1E65A1B70;
  v5[2] = &unk_1E65A2038;
  v5[6] = &unk_1E65A2290;
  v5[136] = v5 + 136;
  v5[137] = v5 + 136;
  v5[138] = 0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Footage Members"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1112), &v6, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0);
  PCString::~PCString(&v6);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1112), 8, 0);
}

void sub_1B2EBA124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSceneNode *v10;
  _QWORD *v11;
  OZChannelFolder *v12;

  OZChannelFolder::~OZChannelFolder(v12);
  std::__list_imp<unsigned int>::clear(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZFootageLayer::OZFootageLayer(OZFootageLayer *this, const OZFootageLayer *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *i;
  const void *v9;
  OZSceneNode *v10;
  OZSceneNode *v11;
  _QWORD *v12;
  uint64_t v13;
  OZChannelBase *v14;
  OZScene *v15;
  PCString v16;

  OZSceneNode::OZSceneNode(this, a2, a3);
  *v6 = &off_1E65A1B70;
  v6[2] = &unk_1E65A2038;
  v6[6] = &unk_1E65A2290;
  v7 = v6 + 136;
  v6[136] = v6 + 136;
  v6[137] = v6 + 136;
  v6[138] = 0;
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Footage Members"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1112), &v16, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0);
  PCString::~PCString(&v16);
  if ((a3 & 1) == 0)
  {
    for (i = (_QWORD *)*((_QWORD *)a2 + 137); i != (_QWORD *)((char *)a2 + 1088); i = (_QWORD *)i[1])
    {
      v9 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i[2] + 8) + 24))(*(_QWORD *)(i[2] + 8), i[2], a3);
      if (v9)
      {
        if (v10)
        {
          v11 = v10;
          v12 = operator new(0x18uLL);
          v12[1] = v7;
          v12[2] = v11;
          v13 = *((_QWORD *)this + 136);
          *v12 = v13;
          *(_QWORD *)(v13 + 8) = v12;
          *((_QWORD *)this + 136) = v12;
          ++*((_QWORD *)this + 138);
          v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v11 + 640))(v11);
          OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v14);
          (*(void (**)(OZSceneNode *, OZFootageLayer *))(*(_QWORD *)v11 + 256))(v11, this);
          v15 = (OZScene *)*((_QWORD *)this + 121);
          if (v15)
          {
            OZScene::registerNode(v15, v11);
            OZScene::addAllDependencies(*((_QWORD *)this + 121), v11);
          }
        }
      }
    }
  }
}

void sub_1B2EBA30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSceneNode *v10;
  _QWORD *v11;

  PCString::~PCString(&a10);
  std::__list_imp<unsigned int>::clear(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZFootageLayer::~OZFootageLayer(OZFootageLayer *this)
{
  uint64_t i;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E65A1B70;
  *((_QWORD *)this + 2) = &unk_1E65A2038;
  *((_QWORD *)this + 6) = &unk_1E65A2290;
  for (i = *((_QWORD *)this + 138); i; i = *((_QWORD *)this + 138))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 137);
    v4 = v3[2];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    *((_QWORD *)this + 138) = i - 1;
    operator delete(v3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1112));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 136);
  OZSceneNode::~OZSceneNode(this);
}

{
  OZFootageLayer::~OZFootageLayer(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFootageLayer::~OZFootageLayer(OZFootageLayer *this)
{
  OZFootageLayer::~OZFootageLayer((OZFootageLayer *)((char *)this - 16));
}

{
  OZFootageLayer::~OZFootageLayer((OZFootageLayer *)((char *)this - 48));
}

{
  OZFootageLayer::~OZFootageLayer((OZFootageLayer *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZFootageLayer::~OZFootageLayer((OZFootageLayer *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZFootageLayer::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);
  return OZChannelFolder::operator=(a1 + 1112);
}

uint64_t OZFootageLayer::getDescendantAtIndex(OZFootageLayer *this, int a2)
{
  char *v2;
  char *v3;
  _BOOL4 v4;
  int v7;
  void *v8;
  uint64_t v10;

  v2 = (char *)this + 1088;
  v3 = (char *)*((_QWORD *)this + 137);
  v4 = v3 != (char *)this + 1088;
  if (v3 != (char *)this + 1088 && a2 != 0)
  {
    v7 = 0;
    do
    {
      v8 = (void *)*((_QWORD *)v3 + 2);
      if (v8)
      if (v8)
        ++v7;
      v3 = (char *)*((_QWORD *)v3 + 1);
      v4 = v3 != v2;
    }
    while (v3 != v2 && v7 != a2);
  }
  if (!v4)
    return 0;
  v10 = *((_QWORD *)v3 + 2);
  if (v10)
    return v10 + 16;
  else
    return 0;
}

uint64_t OZFootageLayer::addDescendantAfter(OZFootageLayer *this, OZSceneNode *a2, OZSceneNode *a3)
{
  char *v6;
  uint64_t i;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const OZChannelBase *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  OZScene *v16;

  if (a3)
  {
    v6 = (char *)this + 1088;
    for (i = *((_QWORD *)this + 137); (char *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        if ((char *)i == v6)
          break;
        v8 = *(uint64_t **)(i + 8);
        v9 = operator new(0x18uLL);
        v9[2] = a2;
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v9;
        *v9 = v10;
        *v8 = (uint64_t)v9;
        v9[1] = v8;
        goto LABEL_9;
      }
    }
  }
  v11 = operator new(0x18uLL);
  v12 = (_QWORD *)*((_QWORD *)this + 137);
  *v11 = (char *)this + 1088;
  v11[1] = v12;
  v11[2] = a2;
  *v12 = v11;
  *((_QWORD *)this + 137) = v11;
LABEL_9:
  ++*((_QWORD *)this + 138);
  if (a3)
  {
    v13 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
    v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 56), v13, v14);
  }
  else
  {
    v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 56), v15);
  }
  (*(void (**)(OZSceneNode *, OZFootageLayer *))(*(_QWORD *)a2 + 256))(a2, this);
  v16 = (OZScene *)*((_QWORD *)this + 121);
  if (v16)
  {
    OZScene::registerNode(v16, a2);
    OZScene::addAllDependencies(*((_QWORD *)this + 121), a2);
  }
  return (*(uint64_t (**)(OZFootageLayer *))(*(_QWORD *)this + 496))(this);
}

uint64_t OZFootageLayer::addDescendantBefore(OZFootageLayer *this, OZSceneNode *a2, OZSceneNode *a3)
{
  uint64_t *v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  const OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  OZScene *v13;

  v6 = (uint64_t *)((char *)this + 1088);
  if (a3)
  {
    for (i = *((_QWORD *)this + 137); (uint64_t *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        v6 = (uint64_t *)i;
        break;
      }
    }
  }
  v8 = operator new(0x18uLL);
  v8[2] = a2;
  v9 = *v6;
  *(_QWORD *)(v9 + 8) = v8;
  *v8 = v9;
  *v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((_QWORD *)this + 138);
  if (a3)
  {
    v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
    v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 56), v10, v11);
  }
  else
  {
    v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v12);
  }
  (*(void (**)(OZSceneNode *, OZFootageLayer *))(*(_QWORD *)a2 + 256))(a2, this);
  v13 = (OZScene *)*((_QWORD *)this + 121);
  if (v13)
  {
    OZScene::registerNode(v13, a2);
    OZScene::addAllDependencies(*((_QWORD *)this + 121), a2);
  }
  return (*(uint64_t (**)(OZFootageLayer *))(*(_QWORD *)this + 496))(this);
}

BOOL OZFootageLayer::hasDescendants(OZFootageLayer *this)
{
  return *((_QWORD *)this + 138) != 0;
}

uint64_t OZFootageLayer::numberOfDescendants(OZFootageLayer *this)
{
  return *((unsigned int *)this + 276);
}

uint64_t OZFootageLayer::begin_descendants(OZFootageLayer *this)
{
  return *((_QWORD *)this + 137);
}

uint64_t OZFootageLayer::end_descendants(OZFootageLayer *this)
{
  return (uint64_t)this + 1088;
}

OZChannelFolder *OZFootageLayer::removeDescendant(OZFootageLayer *this, OZSceneNode *a2)
{
  OZSceneNode **v4;
  OZSceneNode **i;
  OZSceneNode *v6;
  OZScene *v7;
  OZChannelBase *v8;

  v4 = (OZSceneNode **)((char *)this + 1088);
  for (i = (OZSceneNode **)*((_QWORD *)this + 137); i != v4; i = (OZSceneNode **)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v4)
      {
        (*(void (**)(OZSceneNode *, _QWORD))(*(_QWORD *)a2 + 256))(a2, 0);
        v6 = *i;
        *((_QWORD *)v6 + 1) = i[1];
        *(_QWORD *)i[1] = v6;
        --*((_QWORD *)this + 138);
        operator delete(i);
        (*(void (**)(OZFootageLayer *))(*(_QWORD *)this + 496))(this);
        v7 = (OZScene *)*((_QWORD *)this + 121);
        if (v7)
        {
          OZScene::unregisterNode(v7, a2);
          OZScene::removeAllDependencies(*((OZScene **)this + 121), a2);
        }
      }
      break;
    }
  }
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 56), v8);
}

uint64_t OZFootageLayer::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  FILE **v14;
  uint64_t v15;
  PCString *Name;
  char *CStr;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _OWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _OWORD v28[2];
  int v29;

  if (a4)
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFootageLayerScope);
    v10 = (*((uint64_t (**)(unsigned int **))*this + 128))(this);
    v11 = (*((uint64_t (**)(unsigned int **))*this + 129))(this);
    memset(v28, 0, sizeof(v28));
    v29 = 1065353216;
    v24 = v10;
    v25 = v10;
    v26 = v11;
    v27 = 0;
    (*((void (**)(unsigned int **))*this + 128))(this);
    v12 = (*((uint64_t (**)(unsigned int **))*this + 129))(this);
    memset(v22, 0, sizeof(v22));
    v23 = 1065353216;
    v21 = v12;
    v13 = v10;
    if (v10 != v12)
    {
      v14 = (FILE **)MEMORY[0x1E0C80C10];
      do
      {
        if (v13 == v26)
          v15 = 0;
        else
          v15 = *(_QWORD *)(v13 + 16);
        if (OZChannelBase::testFlag((OZChannelBase *)(v15 + 56), 8))
        {
          Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v15 + 16));
          CStr = PCString::createCStr(Name);
          fprintf(*v14, "\nBOGUS: Footage marked as don't save for '%s'\n\n", CStr);
          if (CStr)
            MEMORY[0x1B5E29170](CStr, 0x1000C4077774924);
        }
        v19 = *(_QWORD *)(v15 + 48);
        v18 = v15 + 48;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(v19 + 16))(v18, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        v13 = *(_QWORD *)(v24 + 8);
        v24 = v13;
      }
      while (v13 != v21);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v28);
  }
  return OZSceneNode::writeBody(this, a2, a3, a4, a5);
}

void sub_1B2EBAAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v11);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFootageLayer::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZFootageLayer::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZFootageLayer::parseBegin(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZFootageLayerScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZFootageLayer::parseBegin(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseBegin((OZFootageLayer *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZFootageLayerScope);
  return 1;
}

uint64_t OZFootageLayer::parseEnd(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZFootageLayer::parseEnd(OZFootageLayer *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseEnd((OZFootageLayer *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZFootageLayer::parseElement(OZFootageLayer *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  uint64_t SceneNode;
  const void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  OZChannelBase *v13;
  OZChannelBase *v14;
  OZScene *v15;
  unsigned int v17[2];
  PCSharedCount v18;
  __int128 v19;

  PCSharedCount::PCSharedCount(&v18);
  *(_QWORD *)v17 = 0;
  OZSceneNode::parseElement((OZTimeMarkerSet **)this, a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 62)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v17);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v18);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v17[1]);
    v8 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v17[0]);
    if (!v8)
      goto LABEL_11;
    if (!v9)
      goto LABEL_11;
    SceneNode = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v9 + 168))(v9, &v18, v17[1]);
  }
  else
  {
    if (v6 != 67)
      goto LABEL_11;
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v18);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v17[1]);
    v19 = xmmword_1B355DB10;
    SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v19, (uint64_t)&v18, v17[1]);
  }
  v10 = SceneNode;
  if (SceneNode)
  {
    OZChannelBase::setID((OZChannelBase *)(SceneNode + 56), v17[1]);
    (*(void (**)(uint64_t, OZFootageLayer *))(*(_QWORD *)v10 + 256))(v10, this);
    v11 = operator new(0x18uLL);
    v11[1] = (char *)this + 1088;
    v11[2] = v10;
    v12 = *((_QWORD *)this + 136);
    *v11 = v12;
    *(_QWORD *)(v12 + 8) = v11;
    *((_QWORD *)this + 136) = v11;
    ++*((_QWORD *)this + 138);
    v13 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 56), v13);
    v14 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
    OZChannelBase::resetFlag(v14, 64, 0);
    v15 = (OZScene *)*((_QWORD *)this + 121);
    if (v15)
    {
      OZScene::registerNode(v15, (OZSceneNode *)v10);
      OZScene::addAllDependencies(*((_QWORD *)this + 121), (OZSceneNode *)v10);
    }
    PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v10 + 48));
  }
LABEL_11:
  PCString::~PCString((PCString *)&v18);
  return 1;
}

void sub_1B2EBADA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFootageLayer::parseElement(OZFootageLayer *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZFootageLayer::parseElement((OZFootageLayer *)((char *)this - 48), a2, a3);
  return 1;
}

__n128 OZFootageLayer::getNaturalDuration@<Q0>(OZFootageLayer *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 232);
  *a2 = result;
  a2[1].n128_u64[0] = *((_QWORD *)this + 31);
  return result;
}

__n128 `non-virtual thunk to'OZFootageLayer::getNaturalDuration@<Q0>(OZFootageLayer *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 216);
  *a2 = result;
  a2[1].n128_u64[0] = *((_QWORD *)this + 29);
  return result;
}

void OZLiCachingImageSource::OZLiCachingImageSource(OZLiCachingImageSource *this, const OZRenderParams *a2, OZElement *a3)
{
  *((_QWORD *)this + 183) = &off_1E65EB048;
  *((_QWORD *)this + 184) = 0;
  *((_BYTE *)this + 1480) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E65A23F0);
  *(_QWORD *)this = &off_1E65A2308;
  *((_QWORD *)this + 183) = &unk_1E65A23D0;
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  OZRenderParams::OZRenderParams((OZLiCachingImageSource *)((char *)this + 32), a2);
  *((_QWORD *)this + 182) = a3;
}

void sub_1B2EBAE94(_Unwind_Exception *a1)
{
  uint64_t v1;
  PCSharedCount *v2;
  uint64_t v3;

  PCSharedCount::~PCSharedCount(v2);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65A23F0);
  *(_QWORD *)(v1 + 1464) = v3 + 16;
  *(_BYTE *)(v1 + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1472));
  _Unwind_Resume(a1);
}

HGNode *OZLiCachingImageSource::getHelium@<X0>(OZLiCachingImageSource *this@<X0>, LiRenderParameters **a2@<X1>, HGNode **a3@<X8>)
{
  HGRenderer *HeliumRenderer;
  LiImageSource *v7;
  HGNode *v8;
  HGCrop *v9;
  HGNode *v10;
  uint64_t v11;
  int32x2_t v12;
  CGColorSpace *WorkingColorSpace;
  HGRenderer *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Format;
  int isRenderForHDR_Deprecated;
  HGBitmap *v20;
  HGBitmap *v21;
  uint64_t v22;
  HGColorConform *v23;
  int DstAlphaFactor;
  int BitsPerChannel;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  HGBitmap *MetalTexture;
  HGBitmap *v40;
  uint64_t v41;
  HGBitmap *v42;
  HGBitmapLoader *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int Name;
  HGBitmap *v49;
  HGObject *v50;
  HGObject *v51;
  __n128 v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  HGBitmapLoader *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  HGNode *result;
  HGNode **v63;
  int v64;
  __int128 v65;
  float32x4_t v66;
  HGBitmap *v67;
  _OWORD v68[2];
  int32x4_t v69;
  HGRect v70;
  HGRect v71;
  __n128 v72;
  HGNode *v73;

  v73 = 0;
  HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer(a2);
  v64 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)HeliumRenderer + 128))(HeliumRenderer, 43);
  v7 = (LiImageSource *)*((_QWORD *)this + 2);
  if (!v7)
  {
LABEL_51:
    if (v64 == 1)
    {
      OZElement::cachedMetalTexture(*((OZElement **)this + 182), v68);
      v42 = *(HGBitmap **)&v68[0];
      v43 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v43, v42);
      *a3 = (HGNode *)v43;
      if (*(_QWORD *)&v68[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&v68[0] + 24))(*(_QWORD *)&v68[0]);
    }
    else
    {
      OZElement::cachedTexture(*((OZElement **)this + 182), &v72);
      if (v72.n128_u64[0])
      {
        v44 = PGHelium::convertBitsPerChannel((PGHelium *)*(unsigned int *)(v72.n128_u64[0] + 40), *(_DWORD *)(v72.n128_u64[0] + 36), 0);
        v71 = (HGRect)xmmword_1B35579A0;
        PGTexture::getTexCoords(v72.n128_i64[0], (float32x4_t *)&v71);
        v45 = HGRectMake4i((int)*(float *)&v71.var0, (int)*(float *)&v71.var1, (int)*(float *)&v71.var2 + (int)*(float *)&v71.var0, (int)*(float *)&v71.var3 + (int)*(float *)&v71.var1);
        v47 = v46;
        Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)(v72.n128_u64[0] + 64));
        v49 = (HGBitmap *)HGObject::operator new(0xC8uLL);
        HGGLTexture::HGGLTexture((uint64_t)v49, v45, v47, v44, (uint64_t)HeliumRenderer, Name, 1);
        v50 = (HGObject *)HGObject::operator new(0x20uLL);
        v51 = v50;
        v52 = v72;
        v68[0] = v72;
        if (v72.n128_u64[1])
        {
          v53 = (unint64_t *)(v72.n128_u64[1] + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        HGObject::HGObject(v50);
        *(_QWORD *)v51 = &unk_1E65A2598;
        *((__n128 *)v51 + 1) = v52;
        if (v52.n128_u64[1])
        {
          v55 = (unint64_t *)(v52.n128_u64[1] + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
          do
            v57 = __ldaxr(v55);
          while (__stlxr(v57 - 1, v55));
          if (!v57)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v52.n128_u64[1] + 16))(v52.n128_u64[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v52.n128_u64[1]);
          }
        }
        HGBitmap::SetStorage(v49, v51);
        v58 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v58, v49);
        if (v73 == (HGNode *)v58)
        {
          if (v58)
            (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v58 + 24))(v58);
        }
        else
        {
          if (v73)
            (*(void (**)(void))(*(_QWORD *)v73 + 24))();
          v73 = (HGNode *)v58;
        }
        (*(void (**)(HGObject *))(*(_QWORD *)v51 + 24))(v51);
        if (v49)
          (*(void (**)(HGBitmap *))(*(_QWORD *)v49 + 24))(v49);
      }
      v59 = (std::__shared_weak_count *)v72.n128_u64[1];
      *a3 = v73;
      v73 = 0;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(p_shared_owners);
        while (__stlxr(v61 - 1, p_shared_owners));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
    }
    goto LABEL_77;
  }
  LiAgent::getHelium((LiAgent *)a2, v7, a3);
  v8 = *a3;
  if (v73 != *a3)
  {
    v73 = *a3;
    if (v8)
      (*(void (**)(HGNode *))(*(_QWORD *)v8 + 16))(v8);
  }
  LiAgent::getROI((__n128 *)a2, &v72);
  v9 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v9);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v9 + 96))(v9, 0, (float)v72.n128_i32[0], (float)v72.n128_i32[1], (float)(v72.n128_u32[2] + v72.n128_u32[0]), (float)(v72.n128_u32[3] + v72.n128_u32[1]));
  (*(void (**)(HGCrop *, _QWORD, HGNode *))(*(_QWORD *)v9 + 120))(v9, 0, v73);
  v10 = (HGNode *)v9;
  if (v73 != (HGNode *)v9)
  {
    if (v73)
      (*(void (**)(HGNode *, HGCrop *))(*(_QWORD *)v73 + 24))(v73, v9);
    v73 = (HGNode *)v9;
    (*(void (**)(HGCrop *, HGNode *))(*(_QWORD *)v9 + 16))(v9, v10);
    v10 = v73;
  }
  *(_QWORD *)&v71.var0 = HGRenderer::GetDOD(HeliumRenderer, v10);
  *(_QWORD *)&v71.var2 = v11;
  HGRect::Init(&v70, -1, -1, 1, 1);
  HGRect::Grow(&v71, v70);
  v69 = (int32x4_t)xmmword_1B30503B0;
  if (HGRectIsNull(*(uint64_t *)&v71.var0, *(uint64_t *)&v71.var2))
  {
    v12 = (int32x2_t)-1;
  }
  else
  {
    *(int32x2_t *)v69.i8 = vmax_s32(*(int32x2_t *)&v71.var0, vdup_n_s32(0xC0000001));
    v12 = vsub_s32(vmin_s32(*(int32x2_t *)&v71.var2, vdup_n_s32(0x3FFFFFFEu)), *(int32x2_t *)v69.i8);
  }
  v69.u64[1] = (unint64_t)v12;
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)this + 1);
  if (v64 != 1)
  {
    PGHelium::renderNodeToTexture(HeliumRenderer, (uint64_t *)&v73, (uint64_t)&v69, *((unsigned int *)this + 93), WorkingColorSpace, (OZLiCachingImageSource *)((char *)this + 1348), 0, v68);
    if (*(_QWORD *)&v68[0])
    {
      v66 = vcvtq_f32_s32(v69);
      PGTexture::setTexCoords(*(uint64_t *)&v68[0], (float32x2_t *)&v66);
      v30 = *((_QWORD *)this + 182);
      v65 = v68[0];
      if (*((_QWORD *)&v68[0] + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v68[0] + 1) + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      OZElement::setCachedTexture(v30, (uint64_t *)&v65);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v68[0] + 1);
    if (*((_QWORD *)&v68[0] + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v68[0] + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    goto LABEL_46;
  }
  v63 = a3;
  v15 = HGRectMake4i(v69.u32[0], v69.u32[1], v69.i32[2] + v69.i32[0], v69.i32[3] + v69.i32[1]);
  v17 = v16;
  Format = PGHelium::makeFormat(*((_DWORD *)this + 93));
  isRenderForHDR_Deprecated = OZRenderParams::isRenderForHDR_Deprecated((OZLiCachingImageSource *)((char *)this + 32));
  v20 = (HGBitmap *)HGObject::operator new(0x80uLL);
  v21 = v20;
  if (isRenderForHDR_Deprecated)
    v22 = 27;
  else
    v22 = 24;
  HGBitmap::HGBitmap(v20, v15, v17, v22);
  v23 = (HGColorConform *)HGObject::operator new(0x320uLL);
  HGColorConform::HGColorConform(v23);
  HGColorConform::SetOutputPixelFormat((uint64_t)v23, Format, 0);
  (*(void (**)(HGColorConform *, _QWORD, HGNode *))(*(_QWORD *)v23 + 120))(v23, 0, v73);
  if (v73 != (HGNode *)v23)
  {
    if (v73)
      (*(void (**)(void))(*(_QWORD *)v73 + 24))();
    v73 = (HGNode *)v23;
    (*(void (**)(HGColorConform *))(*(_QWORD *)v23 + 16))(v23);
  }
  DstAlphaFactor = HGGLBlendingInfo::GetDstAlphaFactor((OZLiCachingImageSource *)((char *)this + 1348));
  BitsPerChannel = PCBitDepth::getBitsPerChannel(DstAlphaFactor);
  v26 = PGHelium::convertBitsPerChannel((PGHelium *)4, BitsPerChannel, 0);
  RendererMutexLocker::RendererMutexLocker((RendererMutexLocker *)v68, v14);
  LiHelium::setUpGLRenderer(v14, v26);
  (*(void (**)(HGRenderer *, HGBitmap *, HGNode *))(*(_QWORD *)v14 + 64))(v14, v21, v73);
  RendererMutexLocker::~RendererMutexLocker((RendererMutexLocker *)v68);
  if (!(*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)v14 + 128))(v14, 13))
  {
    MetalTexture = HGGPURenderer::GetMetalTexture(v14, v21, v27);
    v40 = MetalTexture;
    v41 = *((_QWORD *)this + 182);
    v67 = MetalTexture;
    if (MetalTexture)
      (*(void (**)(HGBitmap *))(*(_QWORD *)MetalTexture + 16))(MetalTexture);
    OZElement::setCachedMetalTexture(v41, (uint64_t *)&v67);
    if (v67)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v67 + 24))(v67);
    if (v40)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v40 + 24))(v40);
    (*(void (**)(HGColorConform *))(*(_QWORD *)v23 + 24))(v23);
    a3 = v63;
    if (v21)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v21 + 24))(v21);
LABEL_46:
    v29 = 0;
    v28 = 1;
    goto LABEL_47;
  }
  (*(void (**)(HGColorConform *))(*(_QWORD *)v23 + 24))(v23);
  a3 = v63;
  if (v21)
    (*(void (**)(HGBitmap *))(*(_QWORD *)v21 + 24))(v21);
  v28 = 0;
  v29 = 1;
LABEL_47:
  (*(void (**)(HGCrop *))(*(_QWORD *)v9 + 24))(v9);
  if ((v29 & 1) == 0 && *a3)
    (*(void (**)(HGNode *))(*(_QWORD *)*a3 + 24))(*a3);
  if ((v28 & 1) != 0)
    goto LABEL_51;
LABEL_77:
  result = v73;
  if (v73)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v73 + 24))(v73);
  return result;
}

void sub_1B2EBB658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  if (*a9)
    (*(void (**)(_QWORD))(*(_QWORD *)*a9 + 24))(*a9);
  v15 = *(_QWORD *)(v13 - 96);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  _Unwind_Resume(a1);
}

uint64_t OZLiCachingImageSource::pixelTransformSupport(OZLiCachingImageSource *this, const LiRenderParameters *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    return (*(uint64_t (**)(uint64_t, const LiRenderParameters *))(*(_QWORD *)v2 + 56))(v2, a2);
  else
    return 6;
}

uint64_t OZLiCachingImageSource::estimateRenderMemory(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
  OZElement::cachedMetalTexture(*(OZElement **)(a1 + 1456), &v10);
  if (v10)
  {
    (*(void (**)(_QWORD *))(*v10 + 24))(v10);
    OZElement::cachedMetalTexture(*(OZElement **)(a1 + 1456), &v10);
    v5 = v10[9];
    (*(void (**)(_QWORD *))(*v10 + 24))(v10);
  }
  else
  {
    OZElement::cachedTexture(*(OZElement **)(a1 + 1456), &v10);
    v6 = v10;
    if (v10)
      v1 = (*(uint64_t (**)(_QWORD *))(*v10 + 40))(v10);
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v6)
      return v1;
    else
      return 0;
  }
  return v5;
}

void sub_1B2EBBA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void OZLiCachingImageSource::~OZLiCachingImageSource(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E65A2308;
  this[183].var0 = (PC_Sp_counted_base *)&unk_1E65A23D0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[4]);
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65A23F0);
  this[183].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[185].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[184].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E65A2308;
  this[183].var0 = (PC_Sp_counted_base *)&unk_1E65A23D0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[4]);
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65A23F0);
  this[183].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[185].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[184].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZLiCachingImageSource::~OZLiCachingImageSource(OZLiCachingImageSource *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65A2308;
  v1[183].var0 = (PC_Sp_counted_base *)&unk_1E65A23D0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[4]);
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65A23F0);
  v1[183].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[185].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[184].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65A2308;
  v1[183].var0 = (PC_Sp_counted_base *)&unk_1E65A23D0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[4]);
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65A23F0);
  v1[183].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[185].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[184].var0);
  JUMPOUT(0x1B5E29170);
}

void PGHGImageRef::~PGHGImageRef(PGHGImageRef *this)
{
  *(_QWORD *)this = &unk_1E65A2598;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  HGObject::~HGObject(this);
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E65A2598;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  HGObject::~HGObject(this);
  HGObject::operator delete(v2);
}

uint64_t OZChannelSceneNode_Factory::getInstance(OZChannelSceneNode_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelSceneNode_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelSceneNode_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelSceneNode_Factory::_instance;
}

void OZChannelSceneNode::OZChannelSceneNode(OZChannelSceneNode *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelSceneNode_Factory::getInstance(this);
  OZChannelObjectRoot::OZChannelObjectRoot(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65A25E8;
  *((_QWORD *)this + 2) = &unk_1E65A2980;
  *((_QWORD *)this + 32) = 0;
}

void OZChannelSceneNode::OZChannelSceneNode(OZChannelSceneNode *this, const OZTimeMarkerSet **a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelObjectRoot::OZChannelObjectRoot(this, a2, a3);
  *v3 = &off_1E65A25E8;
  v3[2] = &unk_1E65A2980;
  v3[32] = 0;
}

void `non-virtual thunk to'OZChannelSceneNode::~OZChannelSceneNode(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
}

{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
  JUMPOUT(0x1B5E29170);
}

void OZChannelSceneNode::~OZChannelSceneNode(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this);
  JUMPOUT(0x1B5E29170);
}

OZChannelObjectRoot *OZChannelSceneNode::clone(const OZTimeMarkerSet **this)
{
  OZChannelObjectRoot *v2;

  v2 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v2, this, 0);
  *(_QWORD *)v2 = &off_1E65A25E8;
  *((_QWORD *)v2 + 2) = &unk_1E65A2980;
  *((_QWORD *)v2 + 32) = 0;
  return v2;
}

void sub_1B2EBBE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelSceneNode::compare(OZChannelSceneNode *this, const OZChannelBase *lpsrc)
{
  const OZChannelBase *result;

  if (!lpsrc)
    return 0;
  if (result)
    return (const OZChannelBase *)((__CFString *)*((_QWORD *)this + 32) == result[2].var4.var0
                                && (OZChannelFolder::compare((OZChannelFolder *)this, result) & 1) != 0);
  return result;
}

uint64_t OZChannelSceneNode::channelValueWillBeSet(OZChannelSceneNode *this, OZChannel *a2, const CMTime *a3, double a4)
{
  uint64_t result;
  CMTime v5;

  result = *((_QWORD *)this + 32);
  if (result)
  {
    v5 = *a3;
    return (*(uint64_t (**)(uint64_t, OZChannel *, CMTime *, double))(*(_QWORD *)result + 304))(result, a2, &v5, a4);
  }
  return result;
}

uint64_t OZChannelSceneNode::reset(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 256);
  if (v2)
  {
    v4 = this;
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 320) + 288))(v2 + 320);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 256) + 832) + 288))(*(_QWORD *)(v4 + 256) + 832, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 256) + 448) + 288))(*(_QWORD *)(v4 + 256) + 448, a2);
  }
  return this;
}

uint64_t OZChannelSceneNode::setSceneNode(uint64_t this, OZSceneNode *a2)
{
  char *v2;

  *(_QWORD *)(this + 256) = a2;
  v2 = (char *)a2 + 16;
  if (!a2)
    v2 = 0;
  *(_QWORD *)(this + 208) = v2;
  return this;
}

void std::__call_once_param<std::tuple<OZChannelSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelSceneNode_Factory *v0;

  v0 = (OZChannelSceneNode_Factory *)operator new();
  OZChannelSceneNode_Factory::OZChannelSceneNode_Factory(v0);
  OZChannelSceneNode_Factory::_instance = (uint64_t)v0;
}

void sub_1B2EBBFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelSceneNode_Factory::OZChannelSceneNode_Factory(OZChannelSceneNode_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E9A0;
  v4 = xmmword_1B355F9F0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65A29F0;
  *((_QWORD *)this + 16) = &unk_1E65A2AC0;
}

void sub_1B2EBC098(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelSceneNode_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelObjectRoot *v6;

  v6 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v6, this, a2, a3);
  *(_QWORD *)v6 = &off_1E65A25E8;
  *((_QWORD *)v6 + 2) = &unk_1E65A2980;
  *((_QWORD *)v6 + 32) = 0;
  return v6;
}

void sub_1B2EBC120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelSceneNode_Factory::createCopy(OZChannelSceneNode_Factory *this, OZFactoryBase *a2)
{
  OZChannelObjectRoot *v3;
  const OZTimeMarkerSet **v4;

  v3 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65A25E8;
  *((_QWORD *)v3 + 2) = &unk_1E65A2980;
  *((_QWORD *)v3 + 32) = 0;
  return v3;
}

void sub_1B2EBC1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelSceneNode_Factory::createChannelCopy(OZChannelSceneNode_Factory *this, OZChannelBase *a2)
{
  OZChannelObjectRoot *v3;
  const OZTimeMarkerSet **v4;

  v3 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65A25E8;
  *((_QWORD *)v3 + 2) = &unk_1E65A2980;
  *((_QWORD *)v3 + 32) = 0;
  return v3;
}

void sub_1B2EBC268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZMsgTracerLogFxPlugUsage(OZObjectManipulator *this)
{
  OZFxPlugSharedBase *v2;
  OZFxPlugSharedBase *v3;
  __CFBundle *MainBundle;
  uint64_t v5;
  PCString *Name;
  char *CStr;
  char *v8;
  const __CFString *v9;
  CFStringRef Identifier;
  PCString v11;
  PCString v12;
  PCString v13;

  if (this
  {
    v3 = v2;
    if (*((_BYTE *)v2 + 216))
    {
      MainBundle = CFBundleGetMainBundle();
      if ((*(unsigned int (**)(OZFxPlugSharedBase *))(*(_QWORD *)v3 + 440))(v3))
      {
        if (OZFxPlugSharedBase::getPluginSessionID(v3))
          v5 = 4;
        else
          v5 = 3;
      }
      else
      {
        v5 = 2;
      }
      v9 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), v5);
      Identifier = CFBundleGetIdentifier(MainBundle);
      OZFxPlugSharedBase::getPluginUUID((const PCString *)v3, &v13);
      v12.var0 = 0;
      PCString::set(&v12, v9);
      PCURL::PCURL((PCURL *)&v11, Identifier);
      PCString::~PCString(&v11);
      PCString::~PCString(&v12);
      PCString::~PCString(&v13);
    }
    else
    {
      OZFxPlugSharedBase::getDisplayName((id *)v2, &v13);
      v8 = PCString::createCStr(&v13);
      PCString::~PCString(&v13);
      free(v8);
    }
  }
  else
  {
    Name = (PCString *)OZObjectManipulator::getName(this);
    CStr = PCString::createCStr(Name);
    free(CStr);
  }
}

void sub_1B2EBC3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void OZSimulationCurveNode::OZSimulationCurveNode(OZCurveNode *a1, uint64_t a2, int a3)
{
  uint64_t v5;

  OZCurveNode::OZCurveNode(a1);
  *(_QWORD *)v5 = &off_1E65A2B18;
  *(_QWORD *)(v5 + 8) = a2;
  *(_DWORD *)(v5 + 16) = a3;
}

void OZSimulationCurveNode::~OZSimulationCurveNode(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase::setRangeName(this, a2);
  JUMPOUT(0x1B5E29170);
}

double OZSimulationCurveNode::solveNode(OZSimulationCurveNode *this, OZCurveNodeParam *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  v3 = (_QWORD *)*((_QWORD *)a2 + 19);
  v4 = (uint64_t *)*((_QWORD *)a2 + 10);
  v13 = *(CMTime *)((_BYTE *)a2 + 5);
  v5 = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v12.value = v5;
  v12.epoch = *((_QWORD *)a2 + 14);
  v6 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v6 + 208) && !*(_BYTE *)(v6 + 372))
  {
    if (*((_DWORD *)a2 + 36))
    {
      v10 = 0;
      do
      {
        *(double *)&v3[v10] = OZObjectSimulator::getStateElement(*((OZObjectSimulator **)this + 1), &v12, *((_DWORD *)this + 4));
        v15 = v12;
        v14 = v13;
        PC_CMTimeSaferAdd(&v15, &v14, (uint64_t)&v16);
        *(_QWORD *)&v5 = v16.value;
        v12 = v16;
        ++v10;
      }
      while (v10 < *((unsigned int *)a2 + 36));
    }
  }
  else
  {
    v7 = *((unsigned int *)a2 + 36);
    if ((_DWORD)v7)
    {
      do
      {
        v8 = *v4++;
        *(_QWORD *)&v5 = v8;
        *v3++ = v8;
        --v7;
      }
      while (v7);
    }
  }
  return *(double *)&v5;
}

double OZSimulationCurveNode::solveNode(OZSimulationCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4;

  if ((a2->flags & 1) != 0 && (v4 = *((_QWORD *)this + 1), *(_BYTE *)(v4 + 208)) && !*(_BYTE *)(v4 + 372))
    return OZObjectSimulator::getStateElement(*((OZObjectSimulator **)this + 1), a2, *((_DWORD *)this + 4));
  else
    return a4;
}

__n128 OZSimulationCurveNode::getNeededRange(OZSimulationCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

_QWORD *OZSimulationCurveNode::getVisibleAffectingBehaviors(uint64_t a1, uint64_t *a2)
{
  return OZObjectSimulator::getAllVisibleBehaviors(*(_QWORD *)(a1 + 8), a2, *(_DWORD *)(a1 + 16));
}

_QWORD *OZSimulationCurveNode::getAllAffectingBehaviors(uint64_t a1, uint64_t *a2)
{
  return OZObjectSimulator::getBehaviors(*(_QWORD *)(a1 + 8), a2, 1u, 1);
}

uint64_t OZSimulationCurveNode::anyAffectingBehaviors(OZSimulationCurveNode *this)
{
  return OZObjectSimulator::anythingToSimulate(*((OZObjectSimulator **)this + 1), *((_DWORD *)this + 4));
}

OZCurveNode *OZSimulationCurveNode::cloneNode(OZSimulationCurveNode *this)
{
  OZCurveNode *v2;
  uint64_t v3;

  v2 = (OZCurveNode *)operator new();
  OZCurveNode::OZCurveNode(v2);
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = &off_1E65A2B18;
  *((_QWORD *)v2 + 1) = v3;
  return v2;
}

void sub_1B2EBC640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C4028A83BA9);
  _Unwind_Resume(a1);
}

uint64_t OZSimulationCurveNode::compare(OZSimulationCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 1;
}

BOOL OZSimulationCurveNode::isPassThrough(OZSimulationCurveNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return !*(_BYTE *)(v1 + 208) || *(_BYTE *)(v1 + 372) != 0;
}

void OZObjectSimulator::OZObjectSimulator(OZObjectSimulator *this, OZTransformNode *a2)
{
  *(_QWORD *)this = &off_1E65A2C10;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = (char *)this + 16;
  *((_QWORD *)this + 3) = (char *)this + 16;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 64));
  PCMutex::PCMutex((PCMutex *)((char *)this + 136));
  *((_BYTE *)this + 208) = 0;
  *((_QWORD *)this + 30) = (char *)this + 240;
  *((_QWORD *)this + 31) = (char *)this + 240;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 264) = 0;
  *((_BYTE *)this + 266) = 1;
  PCMutex::PCMutex((PCMutex *)((char *)this + 272));
  *((_QWORD *)this + 43) = (char *)this + 344;
  *((_QWORD *)this + 44) = (char *)this + 344;
  *((_QWORD *)this + 45) = 0;
  *((_DWORD *)this + 92) = 0;
  *((_BYTE *)this + 372) = 0;
}

void sub_1B2EBC774(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  PCMutex *v3;
  PCMutex *v4;
  _QWORD *v5;
  _QWORD **v6;

  std::__list_imp<unsigned int>::clear(v5);
  PCMutex::~PCMutex(v4);
  PCMutex::~PCMutex(v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, *v6);
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZObjectSimulator::~OZObjectSimulator(OZObjectSimulator *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65A2C10;
  if (*((_BYTE *)this + 264))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 272))(*((_QWORD *)this + 1));
    OZDocument::removeCPPObserver(*(_QWORD *)(v2 + 1584));
    *((_BYTE *)this + 264) = 0;
    OZScene::removeSimulator(v2, (uint64_t)this);
  }
  OZObjectSimulator::flushCache(this, 0);
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 43);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 272));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 30);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 136));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 64));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 2);
}

{
  OZObjectSimulator::~OZObjectSimulator(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZObjectSimulator::flushCache(OZObjectSimulator *this, int a2)
{
  PCMutex *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  __int128 v15;
  uint64_t v16;

  v4 = (PCMutex *)((char *)this + 136);
  PCMutex::lock((PCMutex *)((char *)this + 136));
  while (1)
  {
    v5 = *((_QWORD *)this + 4);
    if (!v5)
      break;
    v6 = (uint64_t *)*((_QWORD *)this + 3);
    if (v6[2])
    {
      MEMORY[0x1B5E29170](v6[2], 0x1000C405DF52C91);
      v6 = (uint64_t *)*((_QWORD *)this + 3);
      v5 = *((_QWORD *)this + 4);
    }
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    *((_QWORD *)this + 4) = v5 - 1;
    operator delete(v6);
  }
  if (*((_QWORD *)this + 7))
  {
    v8 = (char *)this + 40;
    do
    {
      v9 = *(uint64_t **)v8;
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 56);
      if (v10)
        MEMORY[0x1B5E29170](v10, 0x1000C405DF52C91);
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 5, v9);
      operator delete(v9);
    }
    while (*((_QWORD *)this + 7));
  }
  if (a2)
  {
    v11 = *((_QWORD *)this + 1);
    if (v11)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 640))(v11);
      std::list<OZSimulationBehavior *>::list(&v15, v12 + 224);
      for (i = *((_QWORD *)&v15 + 1); (__int128 *)i != &v15; i = *(_QWORD *)(i + 8))
        (*(void (**)(_QWORD))(**(_QWORD **)(i + 16) + 712))(*(_QWORD *)(i + 16));
      *((_DWORD *)this + 92) = *(_DWORD *)(*((_QWORD *)this + 1) + 6368);
      std::__list_imp<unsigned int>::clear(&v15);
    }
    *((_BYTE *)this + 208) = OZObjectSimulator::calcAnythingToSimulate(this);
    OZObjectSimulator::getFirstSimTime(this, (uint64_t)&v15);
    *(_OWORD *)((char *)this + 212) = v15;
    *(_QWORD *)((char *)this + 228) = v16;
    *((_BYTE *)this + 372) = 0;
  }
  return PCMutex::unlock(v4);
}

void sub_1B2EBC9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZObjectSimulator::notify(OZObjectSimulator *this, __int16 a2)
{
  int doesDependOnSceneNodes;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  uint64_t v10;
  OZChannelRef **v11;
  OZChannelRef **v12;
  OZChannelRef *i;
  OZChannelBase *Channel;
  uint64_t ObjectManipulator;
  uint64_t v16;
  const void *v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23[2];

  if ((a2 & 0x9810) != 0)
  {
    doesDependOnSceneNodes = 1;
    OZObjectSimulator::flushCache(this, 1);
  }
  else if ((a2 & 0xC) != 0)
  {
    v5 = *((_QWORD *)this + 1);
    if (!v5)
    {
      OZObjectSimulator::flushCache(this, 1);
      return;
    }
    v23[0] = 0;
    v23[1] = 0;
    v22 = (uint64_t *)v23;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5);
    v7 = *(_QWORD *)(v6 + 1584);
    v8 = (OZChannelBase *)(v6 + 920);
    do
    {
      v9 = v8;
      v8 = (OZChannelBase *)v8->var6;
    }
    while (v8);
    v10 = *(_QWORD *)(v7 + 168);
    v11 = (OZChannelRef **)(v7 + 296);
    if (v10)
      v12 = (OZChannelRef **)(v10 + 48);
    else
      v12 = v11;
    for (i = *v12; i != v12[1]; i = (OZChannelRef *)((char *)i + 24))
    {
      Channel = OZChannelRef::getChannel(i, v9);
      if (Channel)
      {
        ObjectManipulator = OZChannelBase::getObjectManipulator(Channel);
        if (ObjectManipulator)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator);
          v17 = (const void *)v16;
          if (v16)
          {
            LODWORD(v20) = *(_DWORD *)(v16 + 80);
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v22, (unsigned int *)&v20, &v20);
            v18 = *(_QWORD *)((*(uint64_t (**)(const void *))(*(_QWORD *)v17 + 664))(v17) + 8);
            v20 = xmmword_1B3053B20;
            if (OZFactory::isKindOfClass(v18, (int32x4_t *)&v20))
            {
              *((_QWORD *)&v20 + 1) = 0;
              v21 = 0;
              *(_QWORD *)&v20 = (char *)&v20 + 8;
              OZRigWidget::getRiggedNodeIDs(v19, (uint64_t **)&v20);
              std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v22, (unsigned int *)v20, (unsigned int *)&v20 + 2);
              std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, *((_QWORD **)&v20 + 1));
            }
          }
        }
      }
    }
    doesDependOnSceneNodes = OZObjectSimulator::doesDependOnSceneNodes((uint64_t)this, (uint64_t)&v22);
    if (doesDependOnSceneNodes)
      OZObjectSimulator::flushCache(this, 1);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v22, v23[0]);
  }
  else
  {
    doesDependOnSceneNodes = 0;
  }
  if ((a2 & 0x801C) != 0
    && ((OZObjectSimulator::updateBehaviorList(this) ^ 1 | doesDependOnSceneNodes) & 1) == 0)
  {
    OZObjectSimulator::flushCache(this, 1);
  }
}

void sub_1B2EBCC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::doesDependOnSceneNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  _QWORD *i;
  OZBehavior *v15;
  uint64_t v16;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const void *v28;
  void *v29;
  _QWORD *j;
  OZSimulationBehavior *v31;
  void *v32;
  uint64_t v33;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  _QWORD v42[3];
  _QWORD v43[3];

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (_QWORD *)(a2 + 8);
    v5 = v3;
    while (1)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        v6 = *(_DWORD *)(v5 + 80);
        v7 = a2 + 8;
        v8 = *(_QWORD *)(a2 + 8);
        do
        {
          v9 = *(_DWORD *)(v8 + 28);
          v10 = v9 >= v6;
          if (v9 >= v6)
            v11 = (uint64_t *)v8;
          else
            v11 = (uint64_t *)(v8 + 8);
          if (v10)
            v7 = v8;
          v8 = *v11;
        }
        while (*v11);
        if ((_QWORD *)v7 != v4 && v6 >= *(_DWORD *)(v7 + 28))
          break;
      }
      v5 = *(_QWORD *)(v5 + 960);
      if (!v5)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 640))(v3);
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 1008))(*(_QWORD *)(a1 + 8));
        std::list<OZSimulationBehavior *>::list(v43, v12 + 224);
        for (i = (_QWORD *)v43[1]; i != v43; i = (_QWORD *)i[1])
        {
          v15 = (OZBehavior *)i[2];
          if (OZBehavior::isEnabledAndUseBehaviors(v15)
            && (!v13 || (*(unsigned int (**)(OZBehavior *))(*(_QWORD *)v15 + 656))(v15))
            && *((_DWORD *)v15 + 20) >= *(_DWORD *)(a1 + 368))
          {
            v16 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v15 + 664))(v15);
            if (v16 && v16 != *(_QWORD *)(a1 + 8))
            {
              do
              {
                if (*v4)
                {
                  v18 = *(_DWORD *)(v16 + 80);
                  v19 = v4;
                  v20 = *v4;
                  do
                  {
                    v21 = *(_DWORD *)(v20 + 28);
                    v22 = v21 >= v18;
                    if (v21 >= v18)
                      v23 = (uint64_t *)v20;
                    else
                      v23 = (uint64_t *)(v20 + 8);
                    if (v22)
                      v19 = (_QWORD *)v20;
                    v20 = *v23;
                  }
                  while (*v23);
                  if (v19 != v4 && v18 >= *((_DWORD *)v19 + 7))
                    goto LABEL_74;
                }
                v16 = *(_QWORD *)(v16 + 960);
              }
              while (v16);
            }
          }
        }
        if ((v13 & 1) != 0 || (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1024) & 8) != 0 || (v25 = *(_QWORD *)(v12 + 48)) == 0)
        {
LABEL_72:
          v24 = 0;
          goto LABEL_75;
        }
        while (1)
        {
          if ((*(_BYTE *)(v25 + 57) & 0x20) != 0)
          {
            if (v26)
              break;
          }
LABEL_71:
          v25 = *(_QWORD *)(v25 + 48);
          if (!v25)
            goto LABEL_72;
        }
        v27 = v26;
        v28 = (const void *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 840))(v26);
        if (v28)
        else
          v29 = 0;
        std::list<OZSimulationBehavior *>::list(v42, (uint64_t)v27 + 224);
        for (j = (_QWORD *)v42[1]; ; j = (_QWORD *)j[1])
        {
          if (j == v42)
          {
            std::__list_imp<unsigned int>::clear(v42);
            goto LABEL_71;
          }
          v31 = (OZSimulationBehavior *)j[2];
          v32 = *(void **)(a1 + 8);
          if (v32 != OZSimulationBehavior::getTransformNode(v31)
            && OZBehavior::isEnabledAndUseBehaviors(v31)
            && ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v31 + 656))(v31) & 1) == 0
            && *((_DWORD *)v31 + 20) >= *(_DWORD *)(a1 + 368))
          {
            v33 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v31 + 664))(v31);
            if ((void *)v33 != v29 && v33 != 0)
              break;
          }
LABEL_69:
          ;
        }
        while (1)
        {
          if (*v4)
          {
            v35 = *(_DWORD *)(v33 + 80);
            v36 = v4;
            v37 = *v4;
            do
            {
              v38 = *(_DWORD *)(v37 + 28);
              v39 = v38 >= v35;
              if (v38 >= v35)
                v40 = (uint64_t *)v37;
              else
                v40 = (uint64_t *)(v37 + 8);
              if (v39)
                v36 = (_QWORD *)v37;
              v37 = *v40;
            }
            while (*v40);
            if (v36 != v4 && v35 >= *((_DWORD *)v36 + 7))
              break;
          }
          v33 = *(_QWORD *)(v33 + 960);
          if (!v33)
            goto LABEL_69;
        }
        std::__list_imp<unsigned int>::clear(v42);
LABEL_74:
        v24 = 1;
LABEL_75:
        std::__list_imp<unsigned int>::clear(v43);
        return v24;
      }
    }
  }
  return 1;
}

void sub_1B2EBCFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::updateBehaviorList(OZObjectSimulator *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  OZBehavior *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t i;
  void *v13;
  _QWORD *j;
  OZSimulationBehavior *v15;
  void *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v21;
  char v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v2 = *((_DWORD *)this + 64);
  v26 = &v26;
  v27 = &v26;
  v28 = 0;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 640))(*((_QWORD *)this + 1));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 1008))(*((_QWORD *)this + 1));
  std::list<OZSimulationBehavior *>::list(&v24, v3 + 224);
  v5 = (uint64_t *)((char *)this + 240);
  v6 = v25;
  v21 = v2;
  if (v25 == &v24)
  {
    v7 = 0;
    v22 = 0;
    if ((v4 & 1) != 0)
      goto LABEL_39;
    goto LABEL_19;
  }
  v22 = 0;
  v7 = 0;
  do
  {
    v8 = (OZBehavior *)v6[2];
    if (OZBehavior::isEnabledAndUseBehaviors(v8)
      && (!v4 || (*(unsigned int (**)(OZBehavior *))(*(_QWORD *)v8 + 656))(v8))
      && *((_DWORD *)v8 + 20) >= *((_DWORD *)this + 92))
    {
      v9 = (uint64_t *)((char *)this + 240);
      if (*((uint64_t **)this + 31) != v5)
      {
        v9 = (uint64_t *)*((_QWORD *)this + 31);
        while ((OZBehavior *)v9[2] != v8)
        {
          v9 = (uint64_t *)v9[1];
          if (v9 == v5)
          {
            v9 = (uint64_t *)((char *)this + 240);
            break;
          }
        }
      }
      v10 = operator new(0x18uLL);
      v22 |= v5 == v9;
      if (v5 != v9)
        ++v7;
      v10[1] = &v26;
      v10[2] = v8;
      v11 = v26;
      *v10 = v26;
      v11[1] = v10;
      v26 = v10;
      ++v28;
    }
    v6 = (uint64_t *)v6[1];
  }
  while (v6 != &v24);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    for (i = *(_QWORD *)(v3 + 48); i; i = *(_QWORD *)(i + 48))
    {
      if ((*(_BYTE *)(i + 57) & 0x20) != 0)
      {
        if (v13)
        {
          std::list<OZSimulationBehavior *>::list(v23, (uint64_t)v13 + 224);
          for (j = (_QWORD *)v23[1]; j != v23; j = (_QWORD *)j[1])
          {
            v15 = (OZSimulationBehavior *)j[2];
            v16 = (void *)*((_QWORD *)this + 1);
            if (v16 != OZSimulationBehavior::getTransformNode(v15)
              && OZBehavior::isEnabledAndUseBehaviors(v15)
              && ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v15 + 656))(v15) & 1) == 0
              && *((_DWORD *)v15 + 20) >= *((_DWORD *)this + 92))
            {
              v17 = (uint64_t *)((char *)this + 240);
              if (*((uint64_t **)this + 31) != v5)
              {
                v17 = (uint64_t *)*((_QWORD *)this + 31);
                while ((OZSimulationBehavior *)v17[2] != v15)
                {
                  v17 = (uint64_t *)v17[1];
                  if (v17 == v5)
                  {
                    v17 = (uint64_t *)((char *)this + 240);
                    break;
                  }
                }
              }
              v18 = operator new(0x18uLL);
              v22 |= v5 == v17;
              if (v5 != v17)
                ++v7;
              v19 = v26;
              v18[1] = &v26;
              v18[2] = v15;
              *v18 = v19;
              v19[1] = v18;
              v26 = v18;
              ++v28;
            }
          }
          std::__list_imp<unsigned int>::clear(v23);
        }
      }
    }
  }
LABEL_39:
  if (v5 != (uint64_t *)&v26 && v22 & 1 | (v7 != v21))
    std::list<OZSimulationBehavior *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>(v5, (uint64_t)v27, (uint64_t)&v26);
  std::__list_imp<unsigned int>::clear(&v24);
  std::__list_imp<unsigned int>::clear(&v26);
  return v22 & 1u | (v7 != v21);
}

void sub_1B2EBD2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  std::__list_imp<unsigned int>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *OZObjectSimulator::didAddToScene(_QWORD *this, OZScene *a2)
{
  _QWORD *v3;

  if (!*((_BYTE *)this + 264))
  {
    v3 = this;
    OZDocument::addCPPObserver(*((_QWORD *)a2 + 198), (uint64_t)this, 1000);
    *((_BYTE *)v3 + 264) = 1;
    return OZScene::addSimulator((uint64_t)a2, (uint64_t)v3);
  }
  return this;
}

_QWORD *OZObjectSimulator::willRemoveFromScene(_QWORD *this, OZScene *a2)
{
  uint64_t v3;

  if (*((_BYTE *)this + 264))
  {
    v3 = (uint64_t)this;
    OZDocument::removeCPPObserver(*((_QWORD *)a2 + 198));
    *(_BYTE *)(v3 + 264) = 0;
    return OZScene::removeSimulator((uint64_t)a2, v3);
  }
  return this;
}

_QWORD *OZObjectSimulator::getFirstSimTime@<X0>(OZObjectSimulator *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  CMTime *v7;
  OZBehavior *v8;
  uint64_t v9;
  CMTime *v10;
  _QWORD *v11;
  char *v12;
  uint64_t i;
  OZBehavior *v14;
  CMTime v16;
  CMTime v17;
  uint64_t v18;
  uint64_t *v19;
  CMTime time2;
  CMTime time1;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 1008))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 640))(*((_QWORD *)this + 1));
  std::list<OZSimulationBehavior *>::list(&v18, v5 + 224);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 1) + 1128))(&v16);
  *(CMTime *)a2 = v16;
  v6 = v19;
  if (v19 != &v18)
  {
    v7 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v8 = (OZBehavior *)v6[2];
      if (!v4 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 656))(v6[2]))
      {
        if (OZBehavior::isEnabledAndUseBehaviors(v8))
        {
          if ((*(unsigned int (**)(OZBehavior *))(*(_QWORD *)v8 + 672))(v8))
          {
            if (*((_DWORD *)v8 + 20) >= *((_DWORD *)this + 92))
            {
              (*(void (**)(CMTime *__return_ptr, OZBehavior *))(*(_QWORD *)v8 + 608))(&v16, v8);
              time1 = v16;
              time2 = *(CMTime *)a2;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                time1 = v17;
                time2 = *v7;
                if (CMTimeCompare(&time1, &time2) >= 1)
                  *(CMTime *)a2 = v16;
              }
            }
          }
        }
      }
      v6 = (uint64_t *)v6[1];
    }
    while (v6 != &v18);
  }
  if ((v4 & 1) == 0 && (*(_BYTE *)(*((_QWORD *)this + 1) + 1024) & 8) == 0)
  {
    v9 = *(_QWORD *)(v5 + 48);
    if (v9)
    {
      v10 = (CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        if ((*(_BYTE *)(v9 + 57) & 0x20) != 0)
        {
          if (v11)
          {
            v12 = (char *)(v11 + 28);
            for (i = v11[29]; (char *)i != v12; i = *(_QWORD *)(i + 8))
            {
              v14 = *(OZBehavior **)(i + 16);
              if (OZBehavior::isEnabledAndUseBehaviors(v14))
              {
                if (((*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v14 + 656))(v14) & 1) == 0)
                {
                  if ((*(unsigned int (**)(OZBehavior *))(*(_QWORD *)v14 + 672))(v14))
                  {
                    if (*((_DWORD *)v14 + 20) >= *((_DWORD *)this + 92))
                    {
                      (*(void (**)(CMTime *__return_ptr, OZBehavior *))(*(_QWORD *)v14 + 608))(&v16, v14);
                      time1 = v16;
                      time2 = *(CMTime *)a2;
                      if (CMTimeCompare(&time1, &time2) < 0)
                      {
                        time1 = v17;
                        time2 = *v10;
                        if (CMTimeCompare(&time1, &time2) >= 1)
                          *(CMTime *)a2 = v16;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v9 = *(_QWORD *)(v9 + 48);
      }
      while (v9);
    }
  }
  return std::__list_imp<unsigned int>::clear(&v18);
}

void sub_1B2EBD69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::calcAnythingToSimulate(OZObjectSimulator *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  OZBehavior *v8;
  OZChannelBase *v9;
  uint64_t v10;
  void *v11;
  _QWORD *i;
  OZSimulationBehavior *v13;
  void *v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t *v17;

  v2 = (_BYTE *)*((_QWORD *)this + 1);
  if ((v2[1024] & 2) == 0
    && (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 272))(v2)
    && (OZSceneNode::isDescendantOf360Group(*((_QWORD *)this + 1)) & 1) == 0)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 640))(*((_QWORD *)this + 1));
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 1008))(*((_QWORD *)this + 1));
    std::list<OZSimulationBehavior *>::list(&v16, v5 + 224);
    v7 = v17;
    if (v17 == &v16)
    {
LABEL_13:
      if ((v6 & 1) != 0 || (*(_BYTE *)(*((_QWORD *)this + 1) + 1024) & 8) != 0 || (v10 = *(_QWORD *)(v5 + 48)) == 0)
      {
LABEL_27:
        v3 = 0;
LABEL_28:
        std::__list_imp<unsigned int>::clear(&v16);
        return v3;
      }
      while (1)
      {
        if ((*(_BYTE *)(v10 + 57) & 0x20) != 0)
        {
          if (v11)
            break;
        }
LABEL_26:
        v10 = *(_QWORD *)(v10 + 48);
        if (!v10)
          goto LABEL_27;
      }
      std::list<OZSimulationBehavior *>::list(v15, (uint64_t)v11 + 224);
      for (i = (_QWORD *)v15[1]; ; i = (_QWORD *)i[1])
      {
        if (i == v15)
        {
          std::__list_imp<unsigned int>::clear(v15);
          goto LABEL_26;
        }
        v13 = (OZSimulationBehavior *)i[2];
        v14 = (void *)*((_QWORD *)this + 1);
        if (v14 != OZSimulationBehavior::getTransformNode(v13)
          && ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v13 + 656))(v13) & 1) == 0
          && OZBehavior::isEnabledAndUseBehaviors(v13)
          && *((_DWORD *)v13 + 20) >= *((_DWORD *)this + 92))
        {
          break;
        }
      }
      std::__list_imp<unsigned int>::clear(v15);
    }
    else
    {
      while (1)
      {
        v8 = (OZBehavior *)v7[2];
        if (OZBehavior::isEnabledAndUseBehaviors(v8)
          && *((_DWORD *)v8 + 20) >= *((_DWORD *)this + 92)
          && (!v6 || ((*(unsigned int (**)(OZBehavior *))(*(_QWORD *)v8 + 656))(v8) | v6 ^ 1) == 1))
        {
          v9 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v8 + 312))(v8);
          if (!OZChannelBase::testFlag(v9, 2))
            break;
        }
        v7 = (uint64_t *)v7[1];
        if (v7 == &v16)
          goto LABEL_13;
      }
    }
    v3 = 1;
    goto LABEL_28;
  }
  return 0;
}

void sub_1B2EBD8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::anythingToSimulate(OZObjectSimulator *this, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  int v6;
  OZBehavior *v7;
  char v8;
  uint64_t v9;
  void *v10;
  _QWORD *i;
  OZSimulationBehavior *v12;
  void *v13;
  char v14;
  uint64_t v15;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t *v20;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 640))(*((_QWORD *)this + 1));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 1008))(*((_QWORD *)this + 1));
  std::list<OZSimulationBehavior *>::list(&v19, v3 + 224);
  v5 = v20;
  if (v20 != &v19)
  {
    v6 = 0;
    do
    {
      v7 = (OZBehavior *)v5[2];
      if (OZBehavior::isEnabledAndUseBehaviors(v7)
        && *((_DWORD *)v7 + 20) >= *((_DWORD *)this + 92)
        && (!v4 || ((*(unsigned int (**)(OZBehavior *))(*(_QWORD *)v7 + 656))(v7) | v4 ^ 1) == 1))
      {
        switch(a2)
        {
          case 1:
            v8 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v7 + 680))(v7);
            goto LABEL_13;
          case 2:
            v8 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v7 + 688))(v7);
            goto LABEL_13;
          case 3:
            v8 = (*(uint64_t (**)(OZBehavior *))(*(_QWORD *)v7 + 696))(v7);
LABEL_13:
            if ((v8 & 1) != 0)
              goto LABEL_14;
            break;
          case 7:
          case 8:
          case 9:
            if (!(*(unsigned int (**)(OZBehavior *))(*(_QWORD *)v7 + 704))(v7))
              break;
            goto LABEL_14;
          default:
LABEL_14:
            if (v6 > 0)
              goto LABEL_40;
            ++v6;
            break;
        }
      }
      v5 = (uint64_t *)v5[1];
    }
    while (v5 != &v19);
  }
  if ((v4 & 1) != 0 || (*(_BYTE *)(*((_QWORD *)this + 1) + 1024) & 8) != 0 || (v9 = *(_QWORD *)(v3 + 48)) == 0)
  {
LABEL_37:
    v15 = 0;
  }
  else
  {
    while (1)
    {
      if ((*(_BYTE *)(v9 + 57) & 0x20) != 0)
      {
        if (v10)
          break;
      }
LABEL_36:
      v9 = *(_QWORD *)(v9 + 48);
      if (!v9)
        goto LABEL_37;
    }
    std::list<OZSimulationBehavior *>::list(v18, (uint64_t)v10 + 224);
    for (i = (_QWORD *)v18[1]; ; i = (_QWORD *)i[1])
    {
      if (i == v18)
      {
        std::__list_imp<unsigned int>::clear(v18);
        goto LABEL_36;
      }
      v12 = (OZSimulationBehavior *)i[2];
      v13 = (void *)*((_QWORD *)this + 1);
      if (v13 != OZSimulationBehavior::getTransformNode(v12)
        && ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v12 + 656))(v12) & 1) == 0
        && OZBehavior::isEnabledAndUseBehaviors(v12)
        && *((_DWORD *)v12 + 20) >= *((_DWORD *)this + 92))
      {
        break;
      }
LABEL_34:
      ;
    }
    switch(a2)
    {
      case 1:
        v14 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v12 + 680))(v12);
        goto LABEL_33;
      case 2:
        v14 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v12 + 688))(v12);
        goto LABEL_33;
      case 3:
        v14 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v12 + 696))(v12);
        goto LABEL_33;
      case 7:
      case 8:
      case 9:
        v14 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v12 + 704))(v12);
LABEL_33:
        if ((v14 & 1) == 0)
          goto LABEL_34;
        goto LABEL_39;
      default:
LABEL_39:
        std::__list_imp<unsigned int>::clear(v18);
        break;
    }
LABEL_40:
    v15 = 1;
  }
  std::__list_imp<unsigned int>::clear(&v19);
  return v15;
}

void sub_1B2EBDBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void SimRecursionSentry::SimRecursionSentry(SimRecursionSentry *this, OZObjectSimulator *a2, const CMTime *a3)
{
  unsigned __int8 v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  OZObjectSimulator *v26;
  __int128 v27;
  CMTimeEpoch epoch;
  _QWORD **v29;
  _QWORD *v30[2];

  if ((v6 & 1) == 0
  {
    pthread_key_create((pthread_key_t *)&SimRecursionSentry::SimRecursionSentry(OZObjectSimulator *,CMTime const&)::sPerThreadRecursionInfo, (void (__cdecl *)(void *))PCThreadSpecific<SimRecursionInfo>::destroy);
  }
  v7 = pthread_getspecific(SimRecursionSentry::SimRecursionSentry(OZObjectSimulator *,CMTime const&)::sPerThreadRecursionInfo);
  *(_QWORD *)this = v7;
  if (!v7)
  {
    v8 = (char *)operator new();
    *(_DWORD *)v8 = 0;
    *((_WORD *)v8 + 2) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_QWORD *)this = v8;
    pthread_setspecific(SimRecursionSentry::SimRecursionSentry(OZObjectSimulator *,CMTime const&)::sPerThreadRecursionInfo, v8);
    v7 = *(_QWORD **)this;
  }
  ++*(_DWORD *)v7;
  v26 = a2;
  v27 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  std::deque<std::pair<OZObjectSimulator *,CMTime>>::push_back(v7 + 1, (uint64_t)&v26);
  v9 = *(_QWORD *)this;
  if (!*(_BYTE *)(*(_QWORD *)this + 4) && *(_DWORD *)v9 >= 0x24u)
  {
    *(_BYTE *)(v9 + 4) = 1;
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 >= 2)
    {
      v27 = 0uLL;
      v26 = (OZObjectSimulator *)&v27;
      v30[0] = 0;
      v30[1] = 0;
      v29 = v30;
      v11 = *(_QWORD *)(v9 + 16);
      if (*(_QWORD *)(v9 + 24) == v11
        || (v12 = *(_QWORD *)(v9 + 40),
            v13 = v12 + v10,
            v14 = (uint64_t *)(v11 + 8 * (v13 >> 7)),
            v15 = *v14,
            v16 = *v14 + 32 * (v13 & 0x7F),
            v17 = *(_QWORD *)(v11 + ((v12 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v12 & 0x7F),
            v17 == v16))
      {
        v25 = 0;
LABEL_24:
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v25);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v26, (_QWORD *)v27);
      }
      else
      {
        while (1)
        {
          v18 = v16;
          if (v16 == v15)
            v18 = *(v14 - 1) + 4096;
          v19 = std::__tree<std::pair<OZObjectSimulator *,CMTime>>::find<std::pair<OZObjectSimulator *,CMTime>>((uint64_t)&v29, v18 - 32);
          v20 = *v14;
          if (v30 != v19)
            break;
          v21 = v16;
          if (v16 == v20)
            v21 = *(v14 - 1) + 4096;
          if (&v27 == (__int128 *)std::__tree<std::pair<OZObjectSimulator *,CMTime>>::find<std::pair<OZObjectSimulator *,CMTime>>((uint64_t)&v26, v21 - 32))v22 = (uint64_t **)&v26;
          else
            v22 = (uint64_t **)&v29;
          v23 = v16;
          if (v16 == *v14)
            v23 = *(v14 - 1) + 4096;
          std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__emplace_unique_key_args<std::pair<OZObjectSimulator *,CMTime>,std::pair<OZObjectSimulator *,CMTime> const&>(v22, v23 - 32, (_OWORD *)(v23 - 32));
          v15 = *v14;
          if (v16 == *v14)
          {
            v24 = *--v14;
            v15 = v24;
            v16 = v24 + 4096;
          }
          v16 -= 32;
          if (v17 == v16)
          {
            v25 = v30[0];
            goto LABEL_24;
          }
        }
        if (v16 == v20)
          v16 = *(v14 - 1) + 4096;
        *(_BYTE *)(*(_QWORD *)(v16 - 32) + 372) = 1;
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v29, v30[0]);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v26, (_QWORD *)v27);
        *(_BYTE *)(*(_QWORD *)this + 5) = 1;
      }
    }
  }
}

void sub_1B2EBDE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 std::deque<std::pair<OZObjectSimulator *,CMTime>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<OZObjectSimulator *,CMTime>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void SimRecursionSentry::~SimRecursionSentry(SimRecursionSentry *this)
{
  _DWORD *v1;
  int v2;

  v1 = *(_DWORD **)this;
  v2 = **(_DWORD **)this - 1;
  **(_DWORD **)this = v2;
  if (!v2)
    *((_WORD *)v1 + 2) = 0;
  --*((_QWORD *)v1 + 6);
  std::deque<std::pair<OZObjectSimulator *,CMTime>>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)v1 + 1, 1);
}

void OZObjectSimulator::getState(OZObjectSimulator *this, CMTime *a2, CMTime *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double Seconds;
  __int128 v10;
  CMTime *p_time1;
  CMTime *v12;
  OZSimulationState *v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime time1;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CMTime v44;
  CMTime time;
  char v46;
  __int128 v47;
  CMTimeEpoch v48;
  uint64_t v49;
  __int128 v50;
  _BYTE v51[152];
  __int128 v52;
  CMTimeValue v53;
  uint64_t v54;
  CMTime v55;
  CMTime v56;
  CMTime time2;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 272))(*((_QWORD *)this + 1));
  memset(&v55, 0, sizeof(v55));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v55);
  SimRecursionSentry::SimRecursionSentry((SimRecursionSentry *)&v54, this, a2);
  if (*(_BYTE *)(v54 + 5))
  {
    OZSimulationState::initializeState((__n128 *)a3, (const CMTime *)((char *)this + 212));
  }
  else
  {
    v47 = 0uLL;
    v48 = 0;
    v49 = 0x3FF0000000000000;
    v53 = 0;
    v52 = 0uLL;
    v50 = 0u;
    memset(v51, 0, 128);
    OZObjectSimulator::getCachedState(this, a2, &v55, (OZSimulationState *)&v47, *(_DWORD *)v54 > 0x23u);
    time1 = *(CMTime *)&v51[128];
    time2 = *a2;
    if (CMTimeCompare(&time1, &time2))
    {
      v46 = 1;
      PCMutex::lock((PCMutex *)((char *)this + 272));
      v7 = operator new(0x18uLL);
      v7[1] = (char *)this + 344;
      v7[2] = &v46;
      v8 = *((_QWORD *)this + 43);
      *v7 = v8;
      *(_QWORD *)(v8 + 8) = v7;
      *((_QWORD *)this + 43) = v7;
      ++*((_QWORD *)this + 45);
      PCMutex::unlock((PCMutex *)((char *)this + 272));
      time = v55;
      Seconds = CMTimeGetSeconds(&time);
      v44 = *(CMTime *)&v51[128];
      memset(&time1, 0, sizeof(time1));
      v31 = 0x3FF0000000000000;
      v42 = 0;
      v43 = 0;
      v41 = 0;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      memset(&v29, 0, sizeof(v29));
      v10 = *(_OWORD *)&a2->value;
      v28.epoch = a2->epoch;
      *(_OWORD *)&v28.value = v10;
      v27 = v55;
      PC_CMTimeFloorToSampleDuration(&v28, &v27, (uint64_t)&v29);
      memset(&v26, 0, sizeof(v26));
      time2 = *a2;
      v56 = v29;
      PC_CMTimeSaferSubtract(&time2, &v56, (uint64_t)&v26);
      p_time1 = &time1;
      v12 = (CMTime *)&v47;
      while (1)
      {
        v13 = (OZSimulationState *)v12;
        time2 = v44;
        v56 = v29;
        if ((CMTimeCompare(&time2, &v56) & 0x80000000) == 0)
          break;
        OZObjectSimulator::midPointSolve(this, v13, (OZSimulationState *)p_time1, &v55, Seconds);
        LOBYTE(time2.value) = 0;
        OZObjectSimulator::handleCollisions((uint64_t)this, (uint64_t)v13, (uint64_t)p_time1, 0, &time2);
        PCMutex::lock((PCMutex *)((char *)this + 272));
        if (v46 && !*(_BYTE *)(v54 + 5))
          OZObjectSimulator::cacheState(this, (OZSimulationState *)p_time1, &v55, *(unsigned __int8 *)(v54 + 4));
        PCMutex::unlock((PCMutex *)((char *)this + 272));
        v44 = *(CMTime *)((char *)p_time1 + 176);
        v12 = p_time1;
        p_time1 = (CMTime *)v13;
      }
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v56 = v26;
      if (CMTimeCompare(&time2, &v56))
      {
        v25 = v26;
        v14 = CMTimeGetSeconds(&v25);
        *((_OWORD *)v13 + 9) = 0u;
        *((_OWORD *)v13 + 10) = 0u;
        *((_OWORD *)v13 + 8) = 0u;
        OZObjectSimulator::accumForces(this, v13);
        OZSimulationState::stepFrom((OZSimulationState *)p_time1, v13, &v26, v14);
      }
      else
      {
        p_time1 = (CMTime *)v13;
      }
      v15 = *(_OWORD *)&p_time1->value;
      a3->epoch = p_time1->epoch;
      *(_OWORD *)&a3->value = v15;
      if (p_time1 != a3)
      {
        a3[1].value = p_time1[1].value;
        v16 = *(_OWORD *)&p_time1[1].timescale;
        a3[2].value = p_time1[2].value;
        *(_OWORD *)&a3[1].timescale = v16;
      }
      v17 = *(_OWORD *)&p_time1[2].timescale;
      v18 = *(_OWORD *)&p_time1[3].value;
      *(_OWORD *)&a3[3].epoch = *(_OWORD *)&p_time1[3].epoch;
      *(_OWORD *)&a3[3].value = v18;
      *(_OWORD *)&a3[2].timescale = v17;
      v19 = *(_OWORD *)&p_time1[4].timescale;
      v20 = *(_OWORD *)&p_time1[5].value;
      v21 = *(_OWORD *)&p_time1[5].epoch;
      *(_OWORD *)&a3[6].timescale = *(_OWORD *)&p_time1[6].timescale;
      *(_OWORD *)&a3[5].epoch = v21;
      *(_OWORD *)&a3[5].value = v20;
      *(_OWORD *)&a3[4].timescale = v19;
      v22 = *(_OWORD *)&p_time1[7].value;
      v23 = *(_OWORD *)&p_time1[7].epoch;
      v24 = *(_OWORD *)&p_time1[8].timescale;
      a3[9].value = p_time1[9].value;
      *(_OWORD *)&a3[8].timescale = v24;
      *(_OWORD *)&a3[7].epoch = v23;
      *(_OWORD *)&a3[7].value = v22;
      PCMutex::lock((PCMutex *)((char *)this + 272));
      time2.value = (CMTimeValue)&v46;
      std::list<BOOL *>::remove((uint64_t)this + 344, &time2);
      PCMutex::unlock((PCMutex *)((char *)this + 272));
    }
    else
    {
      *(_OWORD *)&a3->value = v47;
      a3->epoch = v48;
      if (&v47 != (__int128 *)a3)
      {
        a3[1].value = v49;
        *(_OWORD *)&a3[1].timescale = v50;
        a3[2].value = *(_QWORD *)v51;
      }
      *(_OWORD *)&a3[7].value = *(_OWORD *)&v51[120];
      *(_OWORD *)&a3[7].epoch = *(_OWORD *)&v51[136];
      *(_OWORD *)&a3[8].timescale = v52;
      a3[9].value = v53;
      *(_OWORD *)&a3[4].timescale = *(_OWORD *)&v51[56];
      *(_OWORD *)&a3[5].value = *(_OWORD *)&v51[72];
      *(_OWORD *)&a3[5].epoch = *(_OWORD *)&v51[88];
      *(_OWORD *)&a3[6].timescale = *(_OWORD *)&v51[104];
      *(_OWORD *)&a3[2].timescale = *(_OWORD *)&v51[8];
      *(_OWORD *)&a3[3].value = *(_OWORD *)&v51[24];
      *(_OWORD *)&a3[3].epoch = *(_OWORD *)&v51[40];
    }
  }
  SimRecursionSentry::~SimRecursionSentry((SimRecursionSentry *)&v54);
}

void sub_1B2EBE46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  SimRecursionSentry::~SimRecursionSentry((SimRecursionSentry *)(v1 - 176));
  _Unwind_Resume(a1);
}

double OZObjectSimulator::getCachedState(OZObjectSimulator *this, CMTime *a2, CMTime *a3, OZSimulationState *a4, char a5)
{
  PCMutex *v9;
  char *v10;
  char *v11;
  OZSimulationState *v12;
  OZSimulationState *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double result;
  __int128 v44;
  CMTime v46;
  CMTime v47;
  CMTime time2;
  CMTime time1;

  v9 = (PCMutex *)((char *)this + 136);
  PCMutex::lock((PCMutex *)((char *)this + 136));
  if (*((_BYTE *)this + 266))
  {
    *((_BYTE *)this + 208) = OZObjectSimulator::calcAnythingToSimulate(this);
    *((_BYTE *)this + 372) = 0;
    OZObjectSimulator::getFirstSimTime(this, (uint64_t)&time1);
    *(CMTime *)((char *)this + 212) = time1;
    *((_BYTE *)this + 266) = 0;
  }
  v10 = (char *)this + 16;
  v11 = (char *)*((_QWORD *)this + 3);
  if (v11 != (char *)this + 16)
  {
    v12 = 0;
    do
    {
      v13 = (OZSimulationState *)*((_QWORD *)v11 + 2);
      time1 = *(CMTime *)((char *)v13 + 176);
      time2 = *a2;
      if (!CMTimeCompare(&time1, &time2))
      {
        v18 = *(_QWORD *)v11;
        *(_QWORD *)(v18 + 8) = *((_QWORD *)v11 + 1);
        **((_QWORD **)v11 + 1) = v18;
        --*((_QWORD *)this + 4);
        operator delete(v11);
        v19 = operator new(0x18uLL);
        v20 = (_QWORD *)*((_QWORD *)this + 3);
        *v19 = v10;
        v19[1] = v20;
        v19[2] = v13;
        *v20 = v19;
        v21 = *((_QWORD *)this + 4) + 1;
        *((_QWORD *)this + 3) = v19;
        *((_QWORD *)this + 4) = v21;
        v22 = *((_QWORD *)v13 + 2);
        *(_OWORD *)a4 = *(_OWORD *)v13;
        *((_QWORD *)a4 + 2) = v22;
        if (v13 != a4)
        {
          *((_QWORD *)a4 + 3) = *((_QWORD *)v13 + 3);
          v23 = *((_OWORD *)v13 + 2);
          *((_QWORD *)a4 + 6) = *((_QWORD *)v13 + 6);
          *((_OWORD *)a4 + 2) = v23;
        }
        v24 = *(_OWORD *)((char *)v13 + 56);
        v25 = *(_OWORD *)((char *)v13 + 72);
        *(_OWORD *)((char *)a4 + 88) = *(_OWORD *)((char *)v13 + 88);
        *(_OWORD *)((char *)a4 + 72) = v25;
        *(_OWORD *)((char *)a4 + 56) = v24;
        v26 = *(_OWORD *)((char *)v13 + 104);
        v27 = *(_OWORD *)((char *)v13 + 120);
        v28 = *(_OWORD *)((char *)v13 + 136);
        *(_OWORD *)((char *)a4 + 152) = *(_OWORD *)((char *)v13 + 152);
        *(_OWORD *)((char *)a4 + 136) = v28;
        *(_OWORD *)((char *)a4 + 120) = v27;
        *(_OWORD *)((char *)a4 + 104) = v26;
        v29 = *(_OWORD *)((char *)v13 + 168);
        v30 = *(_OWORD *)((char *)v13 + 184);
        v31 = *(_OWORD *)((char *)v13 + 200);
        v32 = *((_QWORD *)v13 + 27);
        goto LABEL_44;
      }
      time1 = *(CMTime *)((char *)v13 + 176);
      time2 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0 && (a5 & 1) == 0)
      {
        if (!v12
          || (time1 = *(CMTime *)((char *)v12 + 176),
              time2 = *(CMTime *)((char *)v13 + 176),
              CMTimeCompare(&time1, &time2) < 0))
        {
          v12 = v13;
        }
      }
      v11 = (char *)*((_QWORD *)v11 + 1);
    }
    while (v11 != v10);
    if (!v12 || (a5 & 1) != 0)
      goto LABEL_17;
    time1 = *a2;
    time2 = *(CMTime *)((char *)v12 + 176);
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v47);
    if (*((_BYTE *)this + 265))
      v46 = *a3;
    else
      operator*(a3, &v46, 10.0);
    time1 = v47;
    time2 = v46;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
  v12 = 0;
LABEL_17:
  v14 = (_QWORD *)((char *)this + 48);
  v15 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, a2, *((_QWORD *)this + 6), (uint64_t)this + 48);
  if ((OZObjectSimulator *)((char *)this + 48) == (OZObjectSimulator *)v15)
  {
    if (*((_QWORD *)this + 7) && (a5 & 1) == 0)
    {
      v33 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v33;
          v33 = (_QWORD *)v33[1];
        }
        while (v33);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v14[2];
          v34 = *v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (v34);
      }
      goto LABEL_39;
    }
  }
  else
  {
    v16 = (_QWORD *)v15;
    time1 = *(CMTime *)(v15 + 32);
    time2 = *a2;
    if (!CMTimeCompare(&time1, &time2))
    {
LABEL_39:
      v12 = (OZSimulationState *)v16[7];
      goto LABEL_40;
    }
    if (*((_QWORD **)this + 5) != v16 && (a5 & 1) == 0)
    {
      v17 = (_QWORD *)*v16;
      if (*v16)
      {
        do
        {
          v16 = v17;
          v17 = (_QWORD *)v17[1];
        }
        while (v17);
      }
      else
      {
        v35 = v16;
        do
        {
          v16 = (_QWORD *)v35[2];
          v34 = *v16 == (_QWORD)v35;
          v35 = v16;
        }
        while (v34);
      }
      goto LABEL_39;
    }
  }
LABEL_40:
  if (!v12)
  {
    PCMutex::unlock(v9);
    OZSimulationState::initializeState((__n128 *)a4, (const CMTime *)((char *)this + 212));
    time1 = *a2;
    time2 = *(CMTime *)((char *)a4 + 176);
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v44 = *(_OWORD *)&a2->value;
      *((_QWORD *)a4 + 24) = a2->epoch;
      *((_OWORD *)a4 + 11) = v44;
      OZObjectSimulator::getInitialPosition(this, a4);
      *((_QWORD *)a4 + 21) = 0;
      result = 0.0;
      *(_OWORD *)((char *)a4 + 152) = 0u;
      *(_OWORD *)((char *)a4 + 136) = 0u;
      *(_OWORD *)((char *)a4 + 120) = 0u;
      *(_OWORD *)((char *)a4 + 104) = 0u;
      *(_OWORD *)((char *)a4 + 88) = 0u;
      *(_OWORD *)((char *)a4 + 72) = 0u;
      *(_OWORD *)((char *)a4 + 56) = 0u;
    }
    else
    {
      OZObjectSimulator::accumInitialValues(this, a4);
      OZObjectSimulator::cacheState(this, a4, a3, 0);
    }
    return result;
  }
LABEL_41:
  v36 = *(_OWORD *)v12;
  *((_QWORD *)a4 + 2) = *((_QWORD *)v12 + 2);
  *(_OWORD *)a4 = v36;
  if (v12 != a4)
  {
    *((_QWORD *)a4 + 3) = *((_QWORD *)v12 + 3);
    v37 = *((_OWORD *)v12 + 2);
    *((_QWORD *)a4 + 6) = *((_QWORD *)v12 + 6);
    *((_OWORD *)a4 + 2) = v37;
  }
  v38 = *(_OWORD *)((char *)v12 + 56);
  v39 = *(_OWORD *)((char *)v12 + 72);
  *(_OWORD *)((char *)a4 + 88) = *(_OWORD *)((char *)v12 + 88);
  *(_OWORD *)((char *)a4 + 72) = v39;
  *(_OWORD *)((char *)a4 + 56) = v38;
  v40 = *(_OWORD *)((char *)v12 + 104);
  v41 = *(_OWORD *)((char *)v12 + 120);
  v42 = *(_OWORD *)((char *)v12 + 136);
  *(_OWORD *)((char *)a4 + 152) = *(_OWORD *)((char *)v12 + 152);
  *(_OWORD *)((char *)a4 + 136) = v42;
  *(_OWORD *)((char *)a4 + 120) = v41;
  *(_OWORD *)((char *)a4 + 104) = v40;
  v29 = *(_OWORD *)((char *)v12 + 168);
  v30 = *(_OWORD *)((char *)v12 + 184);
  v31 = *(_OWORD *)((char *)v12 + 200);
  v32 = *((_QWORD *)v12 + 27);
LABEL_44:
  *((_QWORD *)a4 + 27) = v32;
  *(_OWORD *)((char *)a4 + 200) = v31;
  *(_OWORD *)((char *)a4 + 184) = v30;
  *(_OWORD *)((char *)a4 + 168) = v29;
  PCMutex::unlock(v9);
  return result;
}

_QWORD *OZObjectSimulator::handleCollisions(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  int v7;
  uint64_t v8;
  uint64_t *v9;
  const void *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  void *v14;
  _QWORD *i;
  const void *v16;
  _DWORD *v17;
  _DWORD *v18;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  *a5 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 1008))(*(_QWORD *)(a1 + 8));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 640))(*(_QWORD *)(a1 + 8));
  std::list<OZSimulationBehavior *>::list(&v28, v8 + 224);
  v9 = v29;
  if (v29 == &v28)
  {
LABEL_10:
    if ((v7 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1024) & 8) == 0)
    {
      v13 = *(_QWORD *)(v8 + 48);
      if (v13)
      {
        while (1)
        {
          if ((*(_BYTE *)(v13 + 57) & 0x20) != 0)
          {
            if (v14)
              break;
          }
LABEL_25:
          v13 = *(_QWORD *)(v13 + 48);
          if (!v13)
            return std::__list_imp<unsigned int>::clear(&v28);
        }
        std::list<OZSimulationBehavior *>::list(v25, (uint64_t)v14 + 224);
        for (i = (_QWORD *)v25[1]; ; i = (_QWORD *)i[1])
        {
          if (i == v25)
          {
            std::__list_imp<unsigned int>::clear(v25);
            goto LABEL_25;
          }
          v16 = (const void *)i[2];
          if (v16)
          {
            if (v17)
            {
              v18 = v17;
              if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 656))(v17) & 1) == 0)
              {
                v23 = *(_OWORD *)(a3 + 176);
                v24 = *(_QWORD *)(a3 + 192);
                if ((*(unsigned int (**)(_DWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v18 + 296))(v18, &v23, 0, 1, 1))
                {
                  if (v18[20] >= *(_DWORD *)(a1 + 368))
                  {
                    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v18 + 728))(v18, *(_QWORD *)(a1 + 8), a2, a3, a4, a5);
                    if (*a5)
                      break;
                  }
                }
              }
            }
          }
        }
        std::__list_imp<unsigned int>::clear(v25);
      }
    }
  }
  else
  {
    while (1)
    {
      v10 = (const void *)v9[2];
      if (v10)
      {
        if (v11)
        {
          v12 = v11;
          if (!v7 || (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v11 + 656))(v11))
          {
            v26 = *(_OWORD *)(a3 + 176);
            v27 = *(_QWORD *)(a3 + 192);
            if ((*(unsigned int (**)(_DWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 296))(v12, &v26, 0, 1, 1))
            {
              if (v12[20] >= *(_DWORD *)(a1 + 368))
              {
                (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v12 + 728))(v12, *(_QWORD *)(a1 + 8), a2, a3, a4, a5);
                if (*a5)
                  break;
              }
            }
          }
        }
      }
      v9 = (uint64_t *)v9[1];
      if (v9 == &v28)
        goto LABEL_10;
    }
  }
  return std::__list_imp<unsigned int>::clear(&v28);
}

void sub_1B2EBEC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::cacheState(OZObjectSimulator *this, OZSimulationState *a2, CMTime *a3, int a4)
{
  PCMutex *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  CMTime v55;
  uint64_t v56;
  CMTime v57;
  CMTime v58;
  CMTime time2;

  v8 = (PCMutex *)((char *)this + 136);
  PCMutex::lock((PCMutex *)((char *)this + 136));
  v9 = (char *)this + 16;
  v10 = (char *)*((_QWORD *)this + 3);
  if (v10 == (char *)this + 16)
  {
LABEL_4:
    v11 = *((_QWORD *)this + 4);
    if (v11 >= 9)
    {
      v12 = *(uint64_t **)v9;
      if (*(_QWORD *)(*(_QWORD *)v9 + 16))
      {
        MEMORY[0x1B5E29170](*(_QWORD *)(*(_QWORD *)v9 + 16), 0x1000C405DF52C91);
        v12 = (uint64_t *)*((_QWORD *)this + 2);
        v11 = *((_QWORD *)this + 4);
      }
      v13 = *v12;
      *(_QWORD *)(v13 + 8) = v12[1];
      *(_QWORD *)v12[1] = v13;
      *((_QWORD *)this + 4) = v11 - 1;
      operator delete(v12);
    }
    v14 = operator new();
    v15 = v14;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a2 + 2);
    *(_QWORD *)(v14 + 24) = 0x3FF0000000000000;
    if ((OZSimulationState *)v14 != a2)
    {
      *(_QWORD *)(v14 + 24) = *((_QWORD *)a2 + 3);
      *(_OWORD *)(v14 + 32) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(v14 + 48) = *((_QWORD *)a2 + 6);
    }
    *(_OWORD *)(v14 + 168) = *(_OWORD *)((char *)a2 + 168);
    *(_OWORD *)(v14 + 184) = *(_OWORD *)((char *)a2 + 184);
    *(_OWORD *)(v14 + 200) = *(_OWORD *)((char *)a2 + 200);
    *(_QWORD *)(v14 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(v14 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)(v14 + 120) = *(_OWORD *)((char *)a2 + 120);
    *(_OWORD *)(v14 + 136) = *(_OWORD *)((char *)a2 + 136);
    *(_OWORD *)(v14 + 152) = *(_OWORD *)((char *)a2 + 152);
    *(_OWORD *)(v14 + 56) = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)(v14 + 72) = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)(v14 + 88) = *(_OWORD *)((char *)a2 + 88);
    v16 = operator new(0x18uLL);
    v17 = (_QWORD *)*((_QWORD *)this + 3);
    *v16 = v9;
    v16[1] = v17;
    v16[2] = v15;
    *v17 = v16;
    v18 = *((_QWORD *)this + 4) + 1;
    *((_QWORD *)this + 3) = v16;
    *((_QWORD *)this + 4) = v18;
  }
  else
  {
    while (1)
    {
      v55 = *(CMTime *)(*((_QWORD *)v10 + 2) + 176);
      time2 = *(CMTime *)((char *)a2 + 176);
      if (!CMTimeCompare(&v55, &time2))
        break;
      v10 = (char *)*((_QWORD *)v10 + 1);
      if (v10 == v9)
        goto LABEL_4;
    }
    v19 = *((_QWORD *)v10 + 2);
    v20 = *(_QWORD *)v10;
    *(_QWORD *)(v20 + 8) = *((_QWORD *)v10 + 1);
    **((_QWORD **)v10 + 1) = v20;
    --*((_QWORD *)this + 4);
    operator delete(v10);
    v21 = operator new(0x18uLL);
    v22 = (_QWORD *)*((_QWORD *)this + 3);
    *v21 = v9;
    v21[1] = v22;
    v21[2] = v19;
    *v22 = v21;
    v23 = *((_QWORD *)this + 4) + 1;
    *((_QWORD *)this + 3) = v21;
    *((_QWORD *)this + 4) = v23;
    v24 = *(_OWORD *)a2;
    *(_QWORD *)(v19 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v19 = v24;
    if ((OZSimulationState *)v19 != a2)
    {
      *(_QWORD *)(v19 + 24) = *((_QWORD *)a2 + 3);
      v25 = *((_OWORD *)a2 + 2);
      *(_QWORD *)(v19 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(v19 + 32) = v25;
    }
    v26 = *(_OWORD *)((char *)a2 + 56);
    v27 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)(v19 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)(v19 + 72) = v27;
    *(_OWORD *)(v19 + 56) = v26;
    v28 = *(_OWORD *)((char *)a2 + 104);
    v29 = *(_OWORD *)((char *)a2 + 120);
    v30 = *(_OWORD *)((char *)a2 + 136);
    *(_OWORD *)(v19 + 152) = *(_OWORD *)((char *)a2 + 152);
    *(_OWORD *)(v19 + 136) = v30;
    *(_OWORD *)(v19 + 120) = v29;
    *(_OWORD *)(v19 + 104) = v28;
    v31 = *(_OWORD *)((char *)a2 + 168);
    v32 = *(_OWORD *)((char *)a2 + 184);
    v33 = *(_OWORD *)((char *)a2 + 200);
    *(_QWORD *)(v19 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(v19 + 200) = v33;
    *(_OWORD *)(v19 + 184) = v32;
    *(_OWORD *)(v19 + 168) = v31;
  }
  v34 = (_QWORD *)((char *)this + 48);
  v35 = (_OWORD *)((char *)a2 + 176);
  v36 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, (CMTime *)((char *)a2 + 176), *((_QWORD *)this + 6), (uint64_t)this + 48);
  if ((OZObjectSimulator *)((char *)this + 48) == (OZObjectSimulator *)v36)
  {
    if (*((_QWORD *)this + 7))
    {
      v41 = (_QWORD *)*v34;
      if (*v34)
      {
        do
        {
          v39 = v41;
          v41 = (_QWORD *)v41[1];
        }
        while (v41);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v34[2];
          v40 = *v39 == (_QWORD)v34;
          v34 = v39;
        }
        while (v40);
      }
LABEL_27:
      v42 = v39[7];
      if (!v42)
        goto LABEL_36;
LABEL_32:
      *(_OWORD *)&v55.value = *v35;
      v55.epoch = *((_QWORD *)a2 + 24);
      time2 = *(CMTime *)(v42 + 176);
      PC_CMTimeSaferSubtract(&v55, &time2, (uint64_t)&v58);
      if (*((unsigned __int8 *)this + 265) | a4)
        v57 = *a3;
      else
        operator*(a3, &v57, 10.0);
      v55 = v58;
      time2 = v57;
      if (CMTimeCompare(&v55, &time2) < 0)
        return PCMutex::unlock(v8);
    }
  }
  else
  {
    v37 = (_QWORD *)v36;
    *(_OWORD *)&v55.value = *v35;
    v55.epoch = *((_QWORD *)a2 + 24);
    time2 = *(CMTime *)(v36 + 32);
    if (!CMTimeCompare(&v55, &time2))
    {
      v42 = v37[7];
      v43 = *(_OWORD *)a2;
      *(_QWORD *)(v42 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v42 = v43;
      if ((OZSimulationState *)v42 != a2)
      {
        *(_QWORD *)(v42 + 24) = *((_QWORD *)a2 + 3);
        v44 = *((_OWORD *)a2 + 2);
        *(_QWORD *)(v42 + 48) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(v42 + 32) = v44;
      }
      v45 = *(_OWORD *)((char *)a2 + 56);
      v46 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)(v42 + 88) = *(_OWORD *)((char *)a2 + 88);
      *(_OWORD *)(v42 + 72) = v46;
      *(_OWORD *)(v42 + 56) = v45;
      v47 = *(_OWORD *)((char *)a2 + 104);
      v48 = *(_OWORD *)((char *)a2 + 120);
      v49 = *(_OWORD *)((char *)a2 + 136);
      *(_OWORD *)(v42 + 152) = *(_OWORD *)((char *)a2 + 152);
      *(_OWORD *)(v42 + 136) = v49;
      *(_OWORD *)(v42 + 120) = v48;
      *(_OWORD *)(v42 + 104) = v47;
      v50 = *(_OWORD *)((char *)a2 + 168);
      v51 = *(_OWORD *)((char *)a2 + 184);
      v52 = *(_OWORD *)((char *)a2 + 200);
      *(_QWORD *)(v42 + 216) = *((_QWORD *)a2 + 27);
      *(_OWORD *)(v42 + 200) = v52;
      *(_OWORD *)(v42 + 184) = v51;
      *(_OWORD *)(v42 + 168) = v50;
      goto LABEL_32;
    }
    if (*((_QWORD **)this + 5) != v37)
    {
      v38 = (_QWORD *)*v37;
      if (*v37)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)v38[1];
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v37[2];
          v40 = *v39 == (_QWORD)v37;
          v37 = v39;
        }
        while (v40);
      }
      goto LABEL_27;
    }
  }
LABEL_36:
  v53 = operator new();
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  *(_QWORD *)(v53 + 48) = 0;
  *(_OWORD *)v53 = *(_OWORD *)a2;
  *(_QWORD *)(v53 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(v53 + 24) = 0x3FF0000000000000;
  if ((OZSimulationState *)v53 != a2)
  {
    *(_QWORD *)(v53 + 24) = *((_QWORD *)a2 + 3);
    *(_OWORD *)(v53 + 32) = *((_OWORD *)a2 + 2);
    *(_QWORD *)(v53 + 48) = *((_QWORD *)a2 + 6);
  }
  *(_OWORD *)(v53 + 168) = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)(v53 + 184) = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)(v53 + 200) = *(_OWORD *)((char *)a2 + 200);
  *(_QWORD *)(v53 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(v53 + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)(v53 + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)(v53 + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)(v53 + 152) = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)(v53 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)(v53 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)(v53 + 88) = *(_OWORD *)((char *)a2 + 88);
  v55 = *(CMTime *)(v53 + 176);
  v56 = v53;
  std::__tree<std::__value_type<CMTime,OZSimStateArray *>,std::__map_value_compare<CMTime,std::__value_type<CMTime,OZSimStateArray *>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,OZSimStateArray *>>>::__emplace_unique_key_args<CMTime,std::pair<CMTime const,OZSimStateArray *>>((uint64_t **)this + 5, &v55, &v55);
  return PCMutex::unlock(v8);
}

_QWORD *std::list<BOOL *>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B2EBF290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

double OZObjectSimulator::getStateElement(OZObjectSimulator *this, const CMTime *a2, int a3)
{
  CMTime v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  CMTimeEpoch v22;
  CMTime v23;
  CMTime v24;

  memset(&v23, 0, sizeof(v23));
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((_QWORD *)this + 1) + 56), &v21);
  v7 = *a2;
  *(__n128 *)&v24.value = v21;
  v24.epoch = v22;
  PC_CMTimeSaferAdd(&v7, &v24, (uint64_t)&v23);
  memset(&v7, 0, sizeof(v7));
  v8 = 0x3FF0000000000000;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  OZObjectSimulator::getState(this, &v23, &v7);
  return OZObjectSimulator::getProperyFromState(this, &v23, a3, (OZSimulationState *)&v7);
}

double OZObjectSimulator::getProperyFromState(OZObjectSimulator *this, const CMTime *a2, int a3, OZSimulationState *a4)
{
  double v4;
  double *v7;
  const void *v8;
  void *v10;
  void *v11;
  _BOOL8 Transformation;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[3];
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  OZRenderState v24;

  v4 = 0.0;
  switch(a3)
  {
    case 1:
    case 2:
    case 3:
      v7 = (double *)((char *)a4 + 200);
      *(_OWORD *)((char *)a4 + 200) = *(_OWORD *)a4;
      *((_QWORD *)a4 + 27) = *((_QWORD *)a4 + 2);
      v8 = *(const void **)(*((_QWORD *)this + 1) + 960);
      if (v8)
      {
        if (v10)
        {
          v11 = v10;
          OZRenderState::OZRenderState(&v24);
          *(_OWORD *)&v24.var0.var0 = *(_OWORD *)&a2->value;
          v24.var0.var3 = a2->epoch;
          v24.var8 = 0;
          (*(void (**)(void *, char *, OZRenderState *))(*(_QWORD *)v11 + 1248))(v11, (char *)a4 + 200, &v24);
        }
      }
      switch(a3)
      {
        case 3:
          v4 = *((double *)a4 + 27);
          break;
        case 2:
          v4 = *((double *)a4 + 26);
          break;
        case 1:
          v4 = *v7;
          break;
      }
      break;
    case 4:
      v4 = *((double *)a4 + 7);
      break;
    case 5:
      v4 = *((double *)a4 + 8);
      break;
    case 6:
      v4 = *((double *)a4 + 9);
      break;
    case 7:
    case 8:
    case 9:
      v24.var7.var0[1][2] = 1.0;
      v24.var7.var0[0][1] = 1.0;
      v24.var3 = 1.0;
      v24.var0.var0 = 0x3FF0000000000000;
      memset(&v24.var0.var1, 0, 32);
      memset(&v24.var4, 0, 32);
      memset(&v24.var7.var0[0][2], 0, 32);
      PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v24, (double *)a4 + 3);
      memset(v19, 0, sizeof(v19));
      v20 = 4;
      v21 = 0u;
      v22 = 0u;
      v23 = 0;
      Transformation = PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v24.var0.var0, (uint64_t)v19);
      _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Behaviors/OZObjectSimulator.cpp", 705, v13, v14, v15, v16, v17);
      switch(a3)
      {
        case 9:
          v4 = *(double *)&v22;
          break;
        case 8:
          v4 = *((double *)&v21 + 1);
          break;
        case 7:
          v4 = *(double *)&v21;
          break;
      }
      break;
    case 10:
      v4 = *((double *)a4 + 10);
      break;
    case 11:
      v4 = *((double *)a4 + 11);
      break;
    case 12:
      v4 = *((double *)a4 + 12);
      break;
    default:
      return v4;
  }
  return v4;
}

_QWORD *OZObjectSimulator::getInitialPosition(OZObjectSimulator *this, OZSimulationState *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t i;
  _DWORD *v11;
  OZMotionToForcesBehavior *v12;
  int v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[24];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 640))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 1008))(*((_QWORD *)this + 1));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 272))(*((_QWORD *)this + 1));
  memset(&v24, 0, sizeof(v24));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v24);
  memset(&v23, 0, sizeof(v23));
  operator*(&v24, &v23, 0.001);
  std::list<OZSimulationBehavior *>::list(&v21, v4 + 224);
  v7 = *((_QWORD *)this + 1);
  v20 = *((_QWORD *)a2 + 24);
  v19 = *((_OWORD *)a2 + 11);
  v15 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 16) + 104))(v7 + 16, &v19, 0, 1, 1);
  v8 = *((_QWORD *)this + 1);
  v26 = *(CMTime *)((char *)a2 + 176);
  v25 = v23;
  v9 = PC_CMTimeSaferSubtract(&v26, &v25, (uint64_t)v18);
  v14 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)(v8 + 16) + 104))(v8 + 16, v18, 0, 1, 1, v9);
  for (i = v22; (uint64_t *)i != &v21; i = *(_QWORD *)(i + 8))
  {
    v11 = *(_DWORD **)(i + 16);
    if (!v11
    {
      if (!v5 || (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v11 + 656))(v11))
      {
        v16 = *((_OWORD *)a2 + 11);
        v17 = *((_QWORD *)a2 + 24);
        if ((*(unsigned int (**)(_DWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 296))(v11, &v16, 0, 1, 1))
        {
          if (v11[20] >= *((_DWORD *)this + 92)
            && OZObjectSimulator::shouldAccumInitialValue((uint64_t)this, (uint64_t)v11, v15, v14, (CMTime *)((char *)a2 + 176)))
          {
            (*(void (**)(_DWORD *, OZSimulationState *, _QWORD))(*(_QWORD *)v11 + 640))(v11, a2, *((_QWORD *)this + 1));
          }
        }
      }
      if (v12)
        OZMotionToForcesBehavior::getInitialPosition(v12, a2, *((OZTransformNode **)this + 1));
    }
  }
  return std::__list_imp<unsigned int>::clear(&v21);
}

void sub_1B2EBF7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *OZObjectSimulator::accumInitialValues(OZObjectSimulator *this, OZSimulationState *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  double v10;
  uint64_t i;
  _DWORD *v12;
  _QWORD *v13;
  CMTimeValue value;
  uint64_t j;
  void *v16;
  uint64_t k;
  _DWORD *v18;
  void *v19;
  _QWORD *v20;
  CMTimeValue v21;
  uint64_t m;
  int v24;
  unsigned int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 640))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 1008))(*((_QWORD *)this + 1));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 272))(*((_QWORD *)this + 1));
  memset(&v36, 0, sizeof(v36));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v36);
  memset(&v35, 0, sizeof(v35));
  operator*(&v36, &v35, 0.001);
  std::list<OZSimulationBehavior *>::list(&v33, v4 + 224);
  v7 = *((_QWORD *)this + 1);
  v32 = *((_QWORD *)a2 + 24);
  v31 = *((_OWORD *)a2 + 11);
  v25 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 16) + 104))(v7 + 16, &v31, 0, 1, 1);
  v8 = (__int128 *)((char *)a2 + 176);
  v9 = *((_QWORD *)this + 1);
  v38 = *(CMTime *)((char *)a2 + 176);
  v37 = v35;
  v10 = PC_CMTimeSaferSubtract(&v38, &v37, (uint64_t)v30);
  v24 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)(v9 + 16) + 104))(v9 + 16, v30, 0, 1, 1, v10);
  v38.value = (CMTimeValue)&v38;
  *(_QWORD *)&v38.timescale = &v38;
  v38.epoch = 0;
  for (i = v34; (uint64_t *)i != &v33; i = *(_QWORD *)(i + 8))
  {
    v12 = *(_DWORD **)(i + 16);
    if ((!v12
    {
      v28 = *v8;
      v29 = *((_QWORD *)a2 + 24);
      if ((*(unsigned int (**)(_DWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 296))(v12, &v28, 0, 1, 1))
      {
        {
          {
            v13 = operator new(0x18uLL);
            v13[1] = &v38;
            v13[2] = v12;
            value = v38.value;
            *v13 = v38.value;
            *(_QWORD *)(value + 8) = v13;
            v38.value = (CMTimeValue)v13;
            ++v38.epoch;
          }
          else
          {
            (*(void (**)(_DWORD *, OZSimulationState *, _QWORD))(*(_QWORD *)v12 + 640))(v12, a2, *((_QWORD *)this + 1));
          }
        }
      }
    }
  }
  if ((v5 & 1) == 0)
  {
    for (j = *(_QWORD *)(v4 + 48); j; j = *(_QWORD *)(j + 48))
    {
      if ((*(_BYTE *)(j + 57) & 0x20) != 0)
      {
        if (v16)
        {
          std::list<OZSimulationBehavior *>::list(&v37, (uint64_t)v16 + 224);
          for (k = *(_QWORD *)&v37.timescale; (CMTime *)k != &v37; k = *(_QWORD *)(k + 8))
          {
            v18 = *(_DWORD **)(k + 16);
            if (!v18
            {
              v19 = (void *)*((_QWORD *)this + 1);
              if (v19 != OZSimulationBehavior::getTransformNode((OZSimulationBehavior *)v18))
              {
                v26 = *v8;
                v27 = *((_QWORD *)a2 + 24);
                if ((*(unsigned int (**)(_DWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v18 + 296))(v18, &v26, 0, 1, 1))
                {
                  if (v18[20] >= *((_DWORD *)this + 92)
                    && OZObjectSimulator::shouldAccumInitialValue((uint64_t)this, (uint64_t)v18, v25, v24, (CMTime *)((char *)a2 + 176)))
                  {
                    {
                      v20 = operator new(0x18uLL);
                      v21 = v38.value;
                      v20[1] = &v38;
                      v20[2] = v18;
                      *v20 = v21;
                      *(_QWORD *)(v21 + 8) = v20;
                      v38.value = (CMTimeValue)v20;
                      ++v38.epoch;
                    }
                    else
                    {
                      (*(void (**)(_DWORD *, OZSimulationState *, _QWORD))(*(_QWORD *)v18 + 640))(v18, a2, *((_QWORD *)this + 1));
                    }
                  }
                }
              }
            }
          }
          std::__list_imp<unsigned int>::clear(&v37);
        }
      }
    }
  }
  for (m = *(_QWORD *)&v38.timescale; (CMTime *)m != &v38; m = *(_QWORD *)(m + 8))
    (*(void (**)(_QWORD, OZSimulationState *, _QWORD))(**(_QWORD **)(m + 16) + 640))(*(_QWORD *)(m + 16), a2, *((_QWORD *)this + 1));
  std::__list_imp<unsigned int>::clear(&v38);
  return std::__list_imp<unsigned int>::clear(&v33);
}

void sub_1B2EBFC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZObjectSimulator::midPointSolve(OZObjectSimulator *this, OZSimulationState *a2, OZSimulationState *a3, CMTime *a4, double a5)
{
  __int128 v10;
  CMTime v11;
  CMTime v12;
  _QWORD v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  OZObjectSimulator::accumForces(this, a2);
  memset(v13, 0, 24);
  v13[3] = 0x3FF0000000000000;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = *(_OWORD *)&a4->value;
  v11.epoch = a4->epoch;
  *(_OWORD *)&v11.value = v10;
  PC_CMTimeHalve(&v11, (uint64_t)&v12);
  OZSimulationState::stepFrom((OZSimulationState *)v13, a2, &v12, a5 * 0.5);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  OZObjectSimulator::accumForces(this, (OZSimulationState *)v13);
  OZSimulationState::stepFrom((uint64_t)a3, (uint64_t)a2, (uint64_t)v13, a4, a5);
}

_QWORD *OZObjectSimulator::getBehaviors(uint64_t a1, uint64_t *a2, unsigned __int8 a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t i;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  _QWORD *k;
  OZSimulationBehavior *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 640))(*(_QWORD *)(a1 + 8));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 1008))(*(_QWORD *)(a1 + 8));
  std::list<OZSimulationBehavior *>::list(&v23, v7 + 224);
  for (i = v24; (uint64_t *)i != &v23; i = *(_QWORD *)(i + 8))
  {
    v10 = *(_DWORD **)(i + 16);
    if (v10[20] >= *(_DWORD *)(a1 + 368)
      && ((a3 & a4 & 1) != 0
    {
      v11 = operator new(0x18uLL);
      v11[1] = a2;
      v11[2] = v10;
      v12 = *a2;
      *v11 = *a2;
      *(_QWORD *)(v12 + 8) = v11;
      *a2 = (uint64_t)v11;
      ++a2[2];
    }
  }
  if ((v8 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1024) & 8) == 0)
  {
    for (j = *(_QWORD *)(v7 + 48); j; j = *(_QWORD *)(j + 48))
    {
      if ((*(_BYTE *)(j + 57) & 0x20) != 0)
      {
        if (v14)
        {
          std::list<OZSimulationBehavior *>::list(v22, (uint64_t)v14 + 224);
          for (k = (_QWORD *)v22[1]; k != v22; k = (_QWORD *)k[1])
          {
            v16 = (OZSimulationBehavior *)k[2];
            v17 = *(void **)(a1 + 8);
            if (v17 != OZSimulationBehavior::getTransformNode(v16)
              && ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v16 + 656))(v16) & 1) == 0
              && *((_DWORD *)v16 + 20) >= *(_DWORD *)(a1 + 368)
              && ((a3 & a4 & 1) != 0
            {
              v18 = operator new(0x18uLL);
              v18[1] = a2;
              v18[2] = v16;
              v19 = *a2;
              *v18 = *a2;
              *(_QWORD *)(v19 + 8) = v18;
              *a2 = (uint64_t)v18;
              ++a2[2];
            }
          }
          std::__list_imp<unsigned int>::clear(v22);
        }
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v23);
}

void sub_1B2EBFF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *OZObjectSimulator::getAllVisibleBehaviors(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t *i;
  _DWORD *v9;
  OZChannelBase *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  _QWORD *j;
  OZSimulationBehavior *v18;
  void *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t *v26;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 640))(*(_QWORD *)(a1 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 1008))(*(_QWORD *)(a1 + 8));
  std::list<OZSimulationBehavior *>::list(&v25, v6 + 224);
  for (i = v26; i != &v25; i = (uint64_t *)i[1])
  {
    v9 = (_DWORD *)i[2];
    if (!v7 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 656))(i[2]))
    {
      v10 = (OZChannelBase *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 312))(v9);
      if (!OZChannelBase::testFlag(v10, 2) && v9[20] >= *(_DWORD *)(a1 + 368))
      {
        switch(a3)
        {
          case 1:
            v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 680))(v9);
            goto LABEL_12;
          case 2:
            v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 688))(v9);
            goto LABEL_12;
          case 3:
            v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 696))(v9);
LABEL_12:
            if ((v11 & 1) != 0)
              goto LABEL_13;
            continue;
          case 7:
          case 8:
          case 9:
            if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v9 + 704))(v9))
              continue;
            goto LABEL_13;
          default:
LABEL_13:
            v12 = operator new(0x18uLL);
            v12[1] = a2;
            v12[2] = v9;
            v13 = *a2;
            *v12 = *a2;
            *(_QWORD *)(v13 + 8) = v12;
            *a2 = (uint64_t)v12;
            ++a2[2];
            break;
        }
      }
    }
  }
  if ((v7 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1024) & 8) == 0)
  {
    v14 = *(_QWORD *)(v6 + 48);
    if (v14)
    {
      v15 = a3 - 1;
      do
      {
        if ((*(_BYTE *)(v14 + 57) & 0x20) != 0)
        {
          if (v16)
          {
            std::list<OZSimulationBehavior *>::list(v24, (uint64_t)v16 + 224);
            for (j = (_QWORD *)v24[1]; j != v24; j = (_QWORD *)j[1])
            {
              v18 = (OZSimulationBehavior *)j[2];
              v19 = *(void **)(a1 + 8);
              if (v19 != OZSimulationBehavior::getTransformNode(v18)
                && ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v18 + 656))(v18) & 1) == 0
                && *((_DWORD *)v18 + 20) >= *(_DWORD *)(a1 + 368))
              {
                switch(v15)
                {
                  case 0:
                    v20 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v18 + 680))(v18);
                    goto LABEL_32;
                  case 1:
                    v20 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v18 + 688))(v18);
                    goto LABEL_32;
                  case 2:
                    v20 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v18 + 696))(v18);
LABEL_32:
                    if ((v20 & 1) != 0)
                      goto LABEL_33;
                    continue;
                  case 6:
                  case 7:
                  case 8:
                    if (!(*(unsigned int (**)(OZSimulationBehavior *))(*(_QWORD *)v18 + 704))(v18))
                      continue;
                    goto LABEL_33;
                  default:
LABEL_33:
                    v21 = operator new(0x18uLL);
                    v21[1] = a2;
                    v21[2] = v18;
                    v22 = *a2;
                    *v21 = *a2;
                    *(_QWORD *)(v22 + 8) = v21;
                    *a2 = (uint64_t)v21;
                    ++a2[2];
                    break;
                }
              }
            }
            std::__list_imp<unsigned int>::clear(v24);
          }
        }
        v14 = *(_QWORD *)(v14 + 48);
      }
      while (v14);
    }
  }
  return std::__list_imp<unsigned int>::clear(&v25);
}

void sub_1B2EC029C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::willBake(uint64_t this)
{
  *(_BYTE *)(this + 265) = 1;
  return this;
}

uint64_t OZObjectSimulator::didBake(uint64_t this)
{
  *(_BYTE *)(this + 265) = 0;
  return this;
}

uint64_t OZObjectSimulator::dirty(OZObjectSimulator *this)
{
  PCMutex *v2;
  uint64_t i;

  v2 = (PCMutex *)((char *)this + 272);
  PCMutex::lock((PCMutex *)((char *)this + 272));
  for (i = *((_QWORD *)this + 44);
        (OZObjectSimulator *)i != (OZObjectSimulator *)((char *)this + 344);
        i = *(_QWORD *)(i + 8))
  {
    **(_BYTE **)(i + 16) = 0;
  }
  return PCMutex::unlock(v2);
}

_QWORD *OZObjectSimulator::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  uint64_t *v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  BOOL v12;
  int *StaticHash;
  int8x8_t *Hash;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __n128 v19;

  if (!v6)
    __cxa_bad_cast();
  v7 = v6;
  v19 = *(__n128 *)PCHashWriteStream::getHash(v6)->i8;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v7 + 40))(v7);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  OZObjectSimulator::getBehaviors(a1, &v16, 1u, 1);
  v8 = v17;
  if (v17 != &v16)
  {
    while (1)
    {
      v9 = (_OWORD *)v8[2];
      v10 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v9 + 320))(v9);
      if ((*(unsigned int (**)(_OWORD *))(*(_QWORD *)v9 + 672))(v9))
        break;
      if (v10)
      {
        v11 = (_OWORD *)(v10 + 16);
        v12 = OZObjectManipulator::isInObjectList(v10 + 16, (uint64_t)a3);
LABEL_7:
        if (!v12)
        {
          StaticHash = (int *)OZObjectManipulator::getStaticHash(v11, lpsrc, a3);
          PCHash128::operator+=((int *)&v19, StaticHash);
        }
      }
      v8 = (uint64_t *)v8[1];
      if (v8 == &v16)
        goto LABEL_10;
    }
    v11 = v9 + 1;
    v12 = OZObjectManipulator::isInObjectList((uint64_t)v11, (uint64_t)a3);
    goto LABEL_7;
  }
LABEL_10:
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v19, (int *)Hash);
  PCHashWriteStream::setHash((__n128 *)v7, &v19);
  return std::__list_imp<unsigned int>::clear(&v16);
}

void sub_1B2EC0484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZObjectSimulator::shouldAccumInitialValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CMTime *a5)
{
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  double v12;
  _BYTE v14[24];
  _BYTE v15[24];
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;

  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8));
  memset(&v17, 0, sizeof(v17));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v17);
  memset(&v16, 0, sizeof(v16));
  operator*(&v17, &v16, 0.001);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 672))(a2))
  {
    v19 = *a5;
    v18 = v16;
    v10 = v15;
    v11 = v15;
LABEL_6:
    v12 = PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)v11);
    return (*(unsigned int (**)(uint64_t, _BYTE *, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 296))(a2, v10, 0, 1, 1, v12) ^ 1;
  }
  if ((_DWORD)a3 && a4)
  {
    v19 = *a5;
    v18 = v16;
    v10 = v14;
    v11 = v14;
    goto LABEL_6;
  }
  return a3;
}

_QWORD *OZObjectSimulator::getAccumForcesList(uint64_t a1, CMTime *a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t i;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t j;
  _QWORD *v18;
  char *v19;
  uint64_t k;
  OZSimulationBehavior *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  unsigned int v30;
  __int128 v31;
  CMTimeEpoch v32;
  __int128 v33;
  CMTimeEpoch v34;
  _BYTE v35[24];
  __int128 v36;
  CMTimeEpoch epoch;
  uint64_t v38;
  uint64_t v39;
  CMTime v40;
  CMTime v41;
  CMTime time2;
  CMTime time1;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 1008))(*(_QWORD *)(a1 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8));
  memset(&v41, 0, sizeof(v41));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 336), (__n128 *)&v41);
  memset(&v40, 0, sizeof(v40));
  operator*(&v41, &v40, 0.001);
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 640))(*(_QWORD *)(a1 + 8));
  std::list<OZSimulationBehavior *>::list(&v38, v28 + 224);
  v8 = *(_QWORD *)(a1 + 8);
  epoch = a2->epoch;
  v36 = *(_OWORD *)&a2->value;
  v30 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 16) + 104))(v8 + 16, &v36, 0, 1, 1);
  v9 = *(_QWORD *)(a1 + 8);
  time1 = *a2;
  time2 = v40;
  v10 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v35);
  v29 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)(v9 + 16) + 104))(v9 + 16, v35, 0, 1, 1, v10);
  for (i = v39; (uint64_t *)i != &v38; i = *(_QWORD *)(i + 8))
  {
    v12 = *(_DWORD **)(i + 16);
    if ((!v12
    {
      v33 = *(_OWORD *)&a2->value;
      v34 = a2->epoch;
      if ((*(unsigned int (**)(_DWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 296))(v12, &v33, 0, 1, 1))
      {
        time1 = *a2;
        time2 = *(CMTime *)(a1 + 212);
        if (CMTimeCompare(&time1, &time2) >= 1
          && OZObjectSimulator::shouldAccumInitialValue(a1, (uint64_t)v12, v30, v29, a2))
        {
          v13 = operator new(0x20uLL);
          v13[1] = a3;
          v13[2] = v12;
          *((_DWORD *)v13 + 6) = 1;
          v14 = *a3;
          *v13 = *a3;
          *(_QWORD *)(v14 + 8) = v13;
          *a3 = (uint64_t)v13;
          ++a3[2];
        }
        if ((v30 & 1) != 0 || (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v12 + 672))(v12))
        {
          v15 = operator new(0x20uLL);
          v15[1] = a3;
          v15[2] = v12;
          *((_DWORD *)v15 + 6) = 2;
          v16 = *a3;
          *v15 = *a3;
          *(_QWORD *)(v16 + 8) = v15;
          *a3 = (uint64_t)v15;
          ++a3[2];
        }
      }
    }
  }
  if ((v6 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1024) & 8) == 0)
  {
    for (j = *(_QWORD *)(v28 + 48); j; j = *(_QWORD *)(j + 48))
    {
      if ((*(_BYTE *)(j + 57) & 0x20) != 0)
      {
        if (v18)
        {
          v19 = (char *)(v18 + 28);
          for (k = v18[29]; (char *)k != v19; k = *(_QWORD *)(k + 8))
          {
            v21 = *(OZSimulationBehavior **)(k + 16);
            if (!v21
            {
              v22 = *(void **)(a1 + 8);
              if (v22 != OZSimulationBehavior::getTransformNode(v21)
                && ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)v21 + 656))(v21) & 1) == 0)
              {
                v31 = *(_OWORD *)&a2->value;
                v32 = a2->epoch;
                if ((*(unsigned int (**)(OZSimulationBehavior *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v21 + 296))(v21, &v31, 0, 1, 1))
                {
                  if (*((_DWORD *)v21 + 20) >= *(_DWORD *)(a1 + 368))
                  {
                    time1 = *a2;
                    time2 = *(CMTime *)(a1 + 212);
                    if (CMTimeCompare(&time1, &time2) >= 1
                      && OZObjectSimulator::shouldAccumInitialValue(a1, (uint64_t)v21, v30, v29, a2))
                    {
                      v23 = operator new(0x20uLL);
                      v23[1] = a3;
                      v23[2] = v21;
                      *((_DWORD *)v23 + 6) = 1;
                      v24 = *a3;
                      *v23 = *a3;
                      *(_QWORD *)(v24 + 8) = v23;
                      *a3 = (uint64_t)v23;
                      ++a3[2];
                    }
                    if ((v30 & 1) != 0
                      || (*(unsigned int (**)(OZSimulationBehavior *))(*(_QWORD *)v21 + 672))(v21))
                    {
                      v25 = operator new(0x20uLL);
                      v25[1] = a3;
                      v25[2] = v21;
                      *((_DWORD *)v25 + 6) = 2;
                      v26 = *a3;
                      *v25 = *a3;
                      *(_QWORD *)(v26 + 8) = v25;
                      *a3 = (uint64_t)v25;
                      ++a3[2];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return std::__list_imp<unsigned int>::clear(&v38);
}

void sub_1B2EC0A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *OZObjectSimulator::accumForces(OZObjectSimulator *this, OZSimulationState *a2)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = (uint64_t)&v5;
  v6 = &v5;
  v7 = 0;
  OZObjectSimulator::getAccumForcesList((uint64_t)this, (CMTime *)((char *)a2 + 176), &v5);
  for (i = v6; i != &v5; i = (uint64_t *)i[1])
  {
    if (*((_DWORD *)i + 6) == 1)
      v3 = 640;
    else
      v3 = 624;
    (*(void (**)(void))(*(_QWORD *)i[2] + v3))();
  }
  return std::__list_imp<unsigned int>::clear(&v5);
}

void sub_1B2EC0B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::pair<OZObjectSimulator *,CMTime>>::find<std::pair<OZObjectSimulator *,CMTime>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
  {
    return v2;
  }
  return v6;
}

uint64_t std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMTime v4;
  CMTime time1;

  if (*(_QWORD *)a2 < *(_QWORD *)a3)
    return 1;
  if (*(_QWORD *)a3 < *(_QWORD *)a2)
    return 0;
  time1 = *(CMTime *)(a2 + 8);
  v4 = *(CMTime *)(a3 + 8);
  return CMTimeCompare(&time1, &v4) >> 31;
}

uint64_t *std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__emplace_unique_key_args<std::pair<OZObjectSimulator *,CMTime>,std::pair<OZObjectSimulator *,CMTime> const&>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = (void **)std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__find_equal<std::pair<OZObjectSimulator *,CMTime>>((uint64_t)a1, &v10, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<std::pair<OZObjectSimulator *,CMTime>>::__find_equal<std::pair<OZObjectSimulator *,CMTime>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<OZObjectSimulator *,CMTime>>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t PCThreadSpecific<SimRecursionInfo>::destroy(uint64_t result)
{
  if (result)
  {
    std::deque<std::pair<OZObjectSimulator *,CMTime>>::~deque[abi:ne180100]((_QWORD *)(result + 8));
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t std::deque<std::pair<OZObjectSimulator *,CMTime>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::deque<std::pair<OZObjectSimulator *,CMTime>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2EC10F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<OZObjectSimulator *,CMTime>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 16 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80)
    a2 = 1;
  if (v5 < 0x100)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *std::list<OZSimulationBehavior *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    i[2] = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return std::list<OZSimulationBehavior *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>((uint64_t)a1, a1, a2, a3);
  else
    return std::list<std::pair<CMTime,double>>::erase((uint64_t)a1, i, a1);
}

uint64_t *std::list<OZSimulationBehavior *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZSimulationBehavior *,void *>,std::__list_const_iterator<OZSimulationBehavior *,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        v8[2] = *(_QWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B2EC12C8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B2EC12E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void OZLight::OZLight(OZLight *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;
  PCString v7;

  OZTransformNode::OZTransformNode((OZTransformNode *)this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(_QWORD *)this = &off_1E65A2C60;
  *((_QWORD *)this + 2) = &unk_1E65A3238;
  *((_QWORD *)this + 6) = &unk_1E65A3490;
  *((_QWORD *)this + 816) = &unk_1E65A34E8;
  *((_QWORD *)this + 819) = 0x4024000000000000;
  *((_OWORD *)this + 410) = xmmword_1B355FA90;
  *((_OWORD *)this + 411) = 0u;
  *((_QWORD *)this + 824) = 0x3FF0000000000000;
  *((_QWORD *)this + 825) = 0;
  *((_QWORD *)this + 827) = 0;
  *((_QWORD *)this + 826) = 0;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Light Model Parameter"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Light Model"));
  OZChannelEnum::OZChannelEnum((OZLight *)((char *)this + 6624), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Light Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZLight *)((char *)this + 6880), 1.0, 1.0, 1.0, &v7, (OZChannelFolder *)((char *)this + 448), 0x65u, 0, 5u);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Light Intensity"));
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 7888), 1.0, &v7, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Light Attenuation Distance To"));
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 8040), 0.0, &v7, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Light Attenuation Value"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 0x2000), 0.03, &v7, (OZChannelFolder *)((char *)this + 448), 0x68u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Spotlight Properties"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8344), &v7, (OZChannelFolder *)((char *)this + 448), 0x69u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Spotlight Angle"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 8472), 0.785398163, &v7, (OZChannelFolder *)((char *)this + 8344), 0x6Au, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Spotlight Penumbra Angle"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 8624), 0.0174532925, &v7, (OZChannelFolder *)((char *)this + 8344), 0x6Bu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Folder Lighting Shadow"));
  OZFolderLightShadow::OZFolderLightShadow((OZLight *)((char *)this + 8776), &v7, (OZChannelFolder *)((char *)this + 448), 0x6Du, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Light Diameter"));
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 10368), 10, &v7, (OZChannelFolder *)((char *)this + 448), 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((OZLight *)((char *)this + 10520), 1, &v7, (OZChannelFolder *)((char *)this + 448), 0x6Fu, 2, 0, 0);
  PCString::~PCString(&v7);
  PCColorDescription::PCColorDescription((PCColorDescription *)((char *)this + 10672));
  *((_BYTE *)this + 10696) = 1;
  OZLight::initChannels(this);
  OZLight::refreshChannels((uint64_t)this, 2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
}

void sub_1B2EC179C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannel *a11, OZChannelColorNoAlpha *a12, OZChannelEnum *a13, OZChannelBase *a14, PCString a15, PCString a16)
{
  OZTransformNode *v16;
  OZChannel *v17;
  OZFolderLightShadow *v18;
  OZChannel *v19;
  OZChannel *v20;
  OZChannelPercent *v21;
  OZChannelFolder *v22;
  OZChannel *v23;
  const PCString *v25;

  OZChannel::~OZChannel(v20);
  OZChannel::~OZChannel(v19);
  OZFolderLightShadow::~OZFolderLightShadow(v18);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v23);
  OZChannelFolder::~OZChannelFolder(v22);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelBase::setRangeName(a14, v25);
  OZTransformNode::~OZTransformNode(v16);
  _Unwind_Resume(a1);
}

uint64_t OZLight::initChannels(OZLight *this)
{
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 10520), 0x100000000, 0);
  OZChannel::setScale((OZChannel *)((char *)this + 7888), 100.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 7888), "%");
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 7888), *(double *)(*((_QWORD *)this + 1002) + 32) / 100.0);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 7888), *(double *)(*((_QWORD *)this + 1002) + 24) / 100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 7888), 4.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 7888), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 7888), 3.40282347e38);
  OZChannel::setMin((OZChannel *)((char *)this + 7888), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 8472), 1.57079633);
  OZChannel::setMin((OZChannel *)((char *)this + 8472), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 8472), 1.57079633);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 8472), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 8624), 1.57079633);
  OZChannel::setMin((OZChannel *)((char *)this + 8624), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 8624), 1.57079633);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 8624), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 0x2000), 2.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 0x2000), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 8040), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 8040), 1000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 8040), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 10368), 1000000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 10368), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 10368), 90.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 10368), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1504), 0.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1952), 100.0);
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 152) + 288))((char *)this + 1216, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4440), 32770, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 555) + 128))((char *)this + 4440);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5032), 32770, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 629) + 128))((char *)this + 5032);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5472), 32770, 0);
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 684) + 128))((char *)this + 5472);
}

OZChannelBase *OZLight::refreshChannels(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8344), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 10368), 4194306, 0);
      return OZChannelBase::setFlag((OZChannelBase *)(a1 + 8776), 4194306, 0);
    case 1:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1216), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 2104), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
      goto LABEL_5;
    case 2:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1216), 4194306, 0);
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 2104), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
LABEL_5:
      OZChannelBase::setFlag((OZChannelBase *)(a1 + 8344), 4194306, 0);
      goto LABEL_7;
    case 3:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1088), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 1216), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 2104), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 8040), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 0x2000), 4194306, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 8344), 4194306, 0);
LABEL_7:
      OZChannelBase::resetFlag((OZChannelBase *)(a1 + 10368), 4194306, 0);
      break;
    default:
      return OZChannelBase::setFlag((OZChannelBase *)(a1 + 8776), 4194306, 0);
  }
  return OZChannelBase::setFlag((OZChannelBase *)(a1 + 8776), 4194306, 0);
}

void OZLight::OZLight(OZLight *this, const OZLight *a2, char a3)
{
  uint64_t v5;

  OZTransformNode::OZTransformNode((OZTransformNode *)this, (const OZTransformNode *)a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(_QWORD *)this = &off_1E65A2C60;
  *((_QWORD *)this + 2) = &unk_1E65A3238;
  *((_QWORD *)this + 6) = &unk_1E65A3490;
  *((_QWORD *)this + 816) = &unk_1E65A34E8;
  *((_QWORD *)this + 819) = 0x4024000000000000;
  *((_OWORD *)this + 410) = xmmword_1B355FA90;
  *((_OWORD *)this + 411) = *((_OWORD *)a2 + 411);
  *((_OWORD *)this + 412) = *((_OWORD *)a2 + 412);
  *((_OWORD *)this + 413) = *((_OWORD *)a2 + 413);
  OZChannelEnum::OZChannelEnum((OZLight *)((char *)this + 6624), (const OZLight *)((char *)a2 + 6624), (OZChannelFolder *)((char *)this + 448));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZLight *)((char *)this + 6880), (const OZLight *)((char *)a2 + 6880), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 7888), (const OZChannelBase *)((char *)a2 + 7888), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 986) = &off_1E6551358;
  *((_QWORD *)this + 988) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8040), (const OZChannelBase *)((char *)a2 + 8040), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1005) = &off_1E6551358;
  *((_QWORD *)this + 1007) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 0x2000), (const OZChannelBase *)((char *)a2 + 0x2000), (OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8344), (const OZChannelFolder *)((char *)a2 + 8344), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 8472), (const OZChannelBase *)((char *)a2 + 8472), (OZChannelFolder *)((char *)this + 8344));
  *((_QWORD *)this + 1059) = &off_1E6551728;
  *((_QWORD *)this + 1061) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 8624), (const OZChannelBase *)a2 + 77, (OZChannelFolder *)((char *)this + 8344));
  *((_QWORD *)this + 1078) = &off_1E6551728;
  *((_QWORD *)this + 1080) = &unk_1E6551A88;
  OZFolderLightShadow::OZFolderLightShadow((OZLight *)((char *)this + 8776), (const OZLight *)((char *)a2 + 8776), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10368), (const OZChannelBase *)((char *)a2 + 10368), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1296) = &off_1E6551358;
  *((_QWORD *)this + 1298) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10520), (const OZChannelBase *)((char *)a2 + 10520), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1315) = &off_1E6551358;
  *((_QWORD *)this + 1317) = &unk_1E65516B8;
  PCColorDescription::PCColorDescription((PCColorDescription *)((char *)this + 10672));
  *((_BYTE *)this + 10696) = 1;
}

void sub_1B2EC2048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannelPercent *a11, OZChannel *a12, OZChannel *a13, OZChannelColorNoAlpha *a14, OZChannelEnum *a15, OZChannelBase *a16)
{
  OZTransformNode *v16;
  OZChannel *v17;
  OZFolderLightShadow *v18;
  OZChannel *v19;
  OZChannel *v20;
  OZChannelFolder *v21;
  const PCString *v23;

  OZChannel::~OZChannel(v20);
  OZChannel::~OZChannel(v19);
  OZFolderLightShadow::~OZFolderLightShadow(v18);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(a10);
  OZChannelFolder::~OZChannelFolder(v21);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelBase::setRangeName(a16, v23);
  OZTransformNode::~OZTransformNode(v16);
  _Unwind_Resume(a1);
}

void sub_1B2EC20DC()
{
  JUMPOUT(0x1B2EC2094);
}

void sub_1B2EC20E4()
{
  JUMPOUT(0x1B2EC209CLL);
}

void sub_1B2EC20EC()
{
  JUMPOUT(0x1B2EC20A4);
}

void sub_1B2EC20F4()
{
  JUMPOUT(0x1B2EC20ACLL);
}

void sub_1B2EC20FC()
{
  JUMPOUT(0x1B2EC20B4);
}

void sub_1B2EC2104()
{
  JUMPOUT(0x1B2EC20BCLL);
}

void sub_1B2EC210C()
{
  JUMPOUT(0x1B2EC20C4);
}

void sub_1B2EC2114()
{
  JUMPOUT(0x1B2EC20CCLL);
}

OZLight *OZLight::operator=(OZLight *this, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if ((OZLight *)a2 != this)
  {
    OZLight::initChannels(this);
    OZTransformNode::operator=((uint64_t)this, a2);
    *(_OWORD *)((char *)this + 6536) = *(_OWORD *)(a2 + 6536);
    v4 = *(_OWORD *)(a2 + 6576);
    *((_QWORD *)this + 824) = *(_QWORD *)(a2 + 6592);
    *((_OWORD *)this + 411) = v4;
    v5 = *(_QWORD *)(a2 + 6616);
    *(_OWORD *)((char *)this + 6600) = *(_OWORD *)(a2 + 6600);
    *((_QWORD *)this + 827) = v5;
    OZChannelBase::operator=((uint64_t)this + 6624, a2 + 6624);
    OZChannelFolder::operator=((uint64_t)this + 6880);
    OZChannelBase::operator=((uint64_t)this + 7016, a2 + 7016);
    OZChannelBase::operator=((uint64_t)this + 7168, a2 + 7168);
    OZChannelBase::operator=((uint64_t)this + 7320, a2 + 7320);
    OZChannelBase::operator=((uint64_t)this + 7472, a2 + 7472);
    OZChannelBase::operator=((uint64_t)this + 7624, a2 + 7624);
    *((_BYTE *)this + 7880) = *(_BYTE *)(a2 + 7880);
    OZChannelBase::operator=((uint64_t)this + 7888, a2 + 7888);
    OZChannelBase::operator=((uint64_t)this + 8040, a2 + 8040);
    OZChannelBase::operator=((uint64_t)this + 0x2000, a2 + 0x2000);
    OZChannelFolder::operator=((uint64_t)this + 8344);
    OZChannelBase::operator=((uint64_t)this + 8472, a2 + 8472);
    OZChannelBase::operator=((uint64_t)this + 8624, a2 + 8624);
    OZFolderLightShadow::operator=((uint64_t)this + 8776, a2 + 8776);
    OZChannelBase::operator=((uint64_t)this + 10368, a2 + 10368);
    OZChannelBase::operator=((uint64_t)this + 10520, a2 + 10520);
  }
  return this;
}

uint64_t OZTransformNode::operator=(uint64_t a1, uint64_t a2)
{
  int v4;

  OZSceneNode::operator=(a1, a2);
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelPosition::operator=(a1 + 1216, a2 + 1216);
  OZChannelPosition::operator=(a1 + 2104, a2 + 2104);
  OZChannelPosition::operator=(a1 + 2960, a2 + 2960);
  OZChannelFolder::operator=(a1 + 3848);
  OZChannelBase::operator=(a1 + 3984, a2 + 3984);
  OZChannelBase::operator=(a1 + 4136, a2 + 4136);
  OZChannelBase::operator=(a1 + 4288, a2 + 4288);
  OZChannelFolder::operator=(a1 + 4440);
  OZChannelBase::operator=(a1 + 4576, a2 + 4576);
  OZChannelBase::operator=(a1 + 4728, a2 + 4728);
  OZChannelBase::operator=(a1 + 4880, a2 + 4880);
  OZChannelFolder::operator=(a1 + 5032);
  OZChannelBase::operator=(a1 + 5168, a2 + 5168);
  OZChannelBase::operator=(a1 + 5320, a2 + 5320);
  OZChannelPosition::operator=(a1 + 5472, a2 + 5472);
  v4 = *(_DWORD *)(a2 + 6368);
  *(_QWORD *)(a1 + 6360) = *(_QWORD *)(a2 + 6360);
  *(_DWORD *)(a1 + 6368) = v4;
  OZChannelBase::operator=(a1 + 6376, a2 + 6376);
  return a1;
}

uint64_t OZFolderLightShadow::operator=(uint64_t a1, uint64_t a2)
{
  OZChannelFolder::operator=(a1);
  OZChannelBase::operator=(a1 + 128, a2 + 128);
  OZChannelBase::operator=(a1 + 280, a2 + 280);
  OZChannelBase::operator=(a1 + 432, a2 + 432);
  OZChannelFolder::operator=(a1 + 584);
  OZChannelBase::operator=(a1 + 720, a2 + 720);
  OZChannelBase::operator=(a1 + 872, a2 + 872);
  OZChannelBase::operator=(a1 + 1024, a2 + 1024);
  OZChannelBase::operator=(a1 + 1176, a2 + 1176);
  OZChannelBase::operator=(a1 + 1328, a2 + 1328);
  *(_BYTE *)(a1 + 1584) = *(_BYTE *)(a2 + 1584);
  return a1;
}

uint64_t OZLight::operator=(uint64_t a1, void *lpsrc)
{
  void *v3;

  if (!v3)
    __cxa_bad_cast();
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 1440))(a1, v3);
}

uint64_t OZLight::create(OZLight *this, const PCString *a2)
{
  __int128 v3;

  v3 = xmmword_1B355DD10;
  return OZApplication::createSceneNode(theApp, (unsigned int *)&v3, (uint64_t)this, (uint64_t)a2);
}

uint64_t OZLight::parseBegin(OZLight *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZTransformNode::parseBegin((OZTransformNode *)this, a2);
  if ((_DWORD)v3)
    OZChannel::setValue((OZChannel *)((char *)this + 10520), MEMORY[0x1E0CA2E68], 0.0, 0);
  return v3;
}

uint64_t `non-virtual thunk to'OZLight::parseBegin(OZLight *this, PCSerializerReadStream *a2)
{
  return OZLight::parseBegin((OZLight *)((char *)this - 48), a2);
}

uint64_t OZLight::parseEnd(OZLight *this, PCSerializerReadStream *a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  unsigned int v7;
  double v8;
  double v9;
  long double v10;
  double v11;
  OZChannel *v12;
  OZChannel *v13;
  const CMTime *v14;
  long double v16;
  CMTime v17;
  void **v18;
  void **v19;

  v4 = OZTransformNode::parseEnd((OZTransformNode *)this, a2);
  if ((_DWORD)v4)
  {
    if (*((_DWORD *)a2 + 26) <= 4u)
    {
      if (OZChannel::hasKeypoints((OZChannel *)((char *)this + 7888)))
      {
        OZChannel::getKeyframes((OZChannel *)((char *)this + 7888), 0, &v18);
        v5 = v19;
        if (v19 != v18)
        {
          v6 = 0;
          v7 = 1;
          v5 = v18;
          do
          {
            v16 = 0.0;
            OZChannel::getKeyframe((OZChannel *)((char *)this + 7888), v5[v6], &v17, &v16);
            v8 = v16;
            if (v16 >= 1.0)
              v9 = v8 + (v8 + -1.0) * exp(-(v16 * v16)) * 2.71828183;
            else
              v9 = pow(v16, 2.2);
            v16 = v9;
            OZChannel::setKeyframe((OZChannel *)((char *)this + 7888), v18[v6], &v17, v9);
            v6 = v7;
            v5 = v18;
            ++v7;
          }
          while (v6 < v19 - v18);
        }
        if (v5)
        {
          v19 = v5;
          operator delete(v5);
        }
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7888), MEMORY[0x1E0CA2E68], 0.0);
        if (v10 >= 1.0)
          v11 = v10 + (v10 + -1.0) * exp(-(v10 * v10)) * 2.71828183;
        else
          v11 = pow(v10, 2.2);
        OZChannel::setValue((OZChannel *)((char *)this + 7888), MEMORY[0x1E0CA2E68], v11, 1);
      }
    }
    v12 = (OZChannel *)((char *)this + 10520);
    if ((int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 10520), MEMORY[0x1E0CA2E68], 0.0) <= 0)
    {
      v13 = (OZChannel *)((char *)this + 10368);
      v14 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setValue(v13, MEMORY[0x1E0CA2E68], 0.0, 0);
      OZChannel::setValue(v12, v14, 1.0, 0);
    }
  }
  return v4;
}

void sub_1B2EC2788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'OZLight::parseEnd(OZLight *this, PCSerializerReadStream *a2)
{
  return OZLight::parseEnd((OZLight *)((char *)this - 48), a2);
}

uint64_t OZLight::draw(OZLight *this, OZRenderParams *a2)
{
  return 0;
}

CGColorSpace **OZLight::buildLiLight@<X0>(OZLight *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __int128 v12;
  CGColorSpace *CGColorSpace;
  uint64_t i;
  _OWORD *v15;
  __int128 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int ValueAsInt;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  OZFolderLightShadow *v32;
  OZChannel *v33;
  double v34;
  double v35;
  OZChannel *v36;
  uint64_t v37;
  OZChannel *v38;
  uint64_t v39;
  float v40;
  double v42;
  double v43;
  double v44;
  double v45;
  __n128 v46;
  __n128 v47;
  CGColorSpace *v48;
  PCColor v49;
  CMTime v50;
  CMTime v51;
  _QWORD v52[3];
  FxColorDescription v53;
  PCColor v54;
  double v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  CMTime var0;
  OZRenderState v68;

  LiLight::LiLight((LiLight *)a3);
  OZRenderState::OZRenderState(&v68, a2);
  var0 = (CMTime)v68.var0;
  v6 = *((double *)this + 822);
  v7 = *((double *)this + 823);
  v8 = *((double *)this + 824);
  v65 = *(_OWORD *)((char *)this + 6600);
  v66 = *((_QWORD *)this + 827);
  v64 = 0x3FF0000000000000;
  *(double *)&v61 = 1.0;
  *(double *)&v58 = 1.0;
  v55 = 1.0;
  v56 = 0u;
  v57 = 0u;
  v59 = 0u;
  v60 = 0u;
  v62 = 0u;
  v63 = 0u;
  PCColor::PCColor(&v54);
  v68.var8 = 0;
  (*(void (**)(char *, CMTime *, PCColor *, double))(*((_QWORD *)this + 860) + 824))((char *)this + 6880, &var0, &v54, 0.0);
  (*(void (**)(OZLight *, double *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v55, &v68);
  PCMatrix44Tmpl<double>::transform<double>(&v55, (double *)&v65, (double *)&v65);
  v9 = *(double *)&v56;
  v10 = *((double *)&v57 + 1);
  v11 = *(double *)&v58;
  v44 = *(double *)&v59;
  v45 = *((double *)&v56 + 1);
  v12 = v60;
  v42 = v55;
  v43 = *(double *)&v61;
  *(_DWORD *)(a3 + 568) = *((_DWORD *)this + 20);
  (*(void (**)(FxColorDescription *__return_ptr, OZLight *))(*(_QWORD *)this + 288))(&v53, this);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(&v53);
  if ((double *)(a3 + 760) != &v55)
  {
    for (i = 0; i != 128; i += 32)
    {
      v15 = (_OWORD *)(a3 + 760 + i);
      v16 = *(__int128 *)((char *)&v56 + i + 8);
      *v15 = *(_OWORD *)((char *)&v55 + i);
      v15[1] = v16;
    }
  }
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v49, &v54, CGColorSpace);
  PCWorkingColor::operator=(&v47, (__n128 *)&v49);
  v17 = v8 * v44;
  v18 = v6 * *(double *)&v12 + v7 * *((double *)&v12 + 1);
  v19 = v8 * v43;
  v20 = v6 * v42 + v7 * v9 + v8 * v45;
  v21 = v6 * v10 + v7 * v11 + v17;
  v22 = v18 + v19;
  *(__n128 *)(a3 + 608) = v47;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v49.var0.var1[1]);
  *(double *)(a3 + 624) = v20;
  *(double *)(a3 + 632) = v21;
  *(double *)(a3 + 640) = v22;
  memset(v52, 0, sizeof(v52));
  (*(void (**)(OZLight *, _QWORD *, OZRenderState *, uint64_t))(*(_QWORD *)this + 1320))(this, v52, &v68, 1);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6624), &var0, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10368), &var0, 0.0);
  v25 = v24 * 0.5;
  if (ValueAsInt == 1)
  {
    v26 = v25 * 3.14159265 / 180.0;
    if (v25 > 360.0)
      v26 = 6.28318531;
    v27 = v25 < 0.0;
    v25 = 0.0;
    if (!v27)
      v25 = v26;
  }
  *(double *)(a3 + 688) = v25;
  *(_DWORD *)(a3 + 656) = ValueAsInt;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7888), &var0, 0.0);
  *(_QWORD *)(a3 + 648) = v28;
  *(_QWORD *)(a3 + 680) = v66;
  *(_OWORD *)(a3 + 664) = v65;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 8472), &var0, 0.0);
  *(_QWORD *)(a3 + 696) = v29;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 8624), &var0, 0.0);
  *(_QWORD *)(a3 + 704) = v30;
  *(_QWORD *)(a3 + 712) = 0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 8040), &var0, 0.0);
  *(_QWORD *)(a3 + 600) = v31;
  v51 = var0;
  OZLight::buildAttenuation(this, &v51, (uint64_t)&v49);
  *(_OWORD *)(a3 + 576) = *(_OWORD *)&v49.var0.var0;
  *(double *)(a3 + 592) = v49.var0.var1[1];
  v50 = var0;
  *(_BYTE *)(a3 + 720) = (*(uint64_t (**)(char *, CMTime *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this + 2)
                                                                                                + 104))((char *)this + 16, &v50, 1, 1, 1);
  v32 = (OZLight *)((char *)this + 8776);
  v33 = (OZChannel *)OZFolderLightShadow::opacity(v32);
  OZChannel::getValueAsDouble(v33, &var0, 0.0);
  v35 = v34;
  *(_BYTE *)(a3 + 721) = OZFolderLightShadow::hasShadows((OZChannelBase *)v32, &var0);
  v36 = (OZChannel *)OZFolderLightShadow::softness(v32);
  OZChannel::getValueAsDouble(v36, &var0, 0.0);
  *(_QWORD *)(a3 + 744) = v37;
  v38 = (OZChannel *)OZFolderLightShadow::uniformSoftness(v32);
  *(_BYTE *)(a3 + 752) = OZChannel::getValueAsInt(v38, &var0, 0.0) != 0;
  PCColor::PCColor(&v49);
  v39 = OZFolderLightShadow::color(v32);
  (*(void (**)(uint64_t, CMTime *, PCColor *, double))(*(_QWORD *)v39 + 824))(v39, &var0, &v49, 0.0);
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v47, &v49, CGColorSpace);
  v40 = v35;
  v47.n128_f32[3] = v40;
  PCWorkingColor::operator=(&v46, &v47);
  *(__n128 *)(a3 + 724) = v46;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v48);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v49.var1._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v53._pcColorDesc._colorSpaceRef._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v54.var1._obj);
}

void sub_1B2EC2C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CGColorSpace *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,CGColorSpace *a48)
{
  PCSharedCount *v48;
  uint64_t v49;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v49 + 16));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a26);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a48);
  LiLight::~LiLight(v48);
  _Unwind_Resume(a1);
}

void OZLight::buildAttenuation(OZLight *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  double v7;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 0x2000), a2, 0.0);
  v6 = v5 * *((double *)this + 820);
  if (v5 <= 0.2)
    v7 = v6 * (v6 * 0.125);
  else
    v7 = v6 * (v6 * 0.125) + (v5 + -0.2) * *((double *)this + 821) * 0.5;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(double *)(a3 + 8) = v6 * 0.5;
  *(double *)(a3 + 16) = v7;
}

uint64_t OZLight::render(OZLight *this, OZRenderParams *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(OZLight *))(*(_QWORD *)this + 1456))(this);
  v4 = *((_QWORD *)a2 + 34);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) & 1) != 0)
    return 1;
  return v3;
}

int64x2_t OZLight::getBounds(uint64_t a1, int64x2_t *a2)
{
  int64x2_t result;

  result = vdupq_n_s64(0xC049000000000000);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x4059000000000000uLL);
  return result;
}

int64x2_t `non-virtual thunk to'OZLight::getBounds(uint64_t a1, int64x2_t *a2)
{
  int64x2_t result;

  result = vdupq_n_s64(0xC049000000000000);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x4059000000000000uLL);
  return result;
}

void OZLight::drawGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZLight.cpp");
  pcAbortImpl();
}

uint64_t OZLight::projectPointToObject()
{
  return 0;
}

double OZLight::calcTranslationRelativeToCamera(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6)
{
  const void *v12;
  void *v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double result;
  _OWORD v21[3];
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29[16];
  double v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float64x2_t v36;
  double v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = 0x3FF0000000000000;
  v54 = 0x3FF0000000000000;
  v51 = 0x3FF0000000000000;
  v48 = 0x3FF0000000000000;
  v49 = 0u;
  v50 = 0u;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v38 = 0x3FF0000000000000;
  v39 = 0u;
  v40 = 0u;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 1256))(a1, &v48, a5);
  v12 = (const void *)a1[120];
  if (v12)
  {
    if (v13)
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v13 + 1264))(v13, &v38, a5);
  }
  v36 = 0uLL;
  v37 = 0.0;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*a1 + 1384))(&v33, a1, a2, a4, a5, 0);
  memset(v29, 0, 24);
  PCCalcRaySphereIntersection<double>((double *)&v33, (double *)&v34 + 1, v29, v36.f64, 20.0);
  if ((v14 & 1) == 0)
  {
    v15 = -(*((double *)&v33 + 1) * *(double *)&v35)
        - *(double *)&v33 * *((double *)&v34 + 1)
        - *(double *)&v34 * *((double *)&v35 + 1);
    v36.f64[0] = *(double *)&v33 + *((double *)&v34 + 1) * v15;
    v36.f64[1] = *((double *)&v33 + 1) + *(double *)&v35 * v15;
    v37 = *(double *)&v34 + *((double *)&v35 + 1) * v15;
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)&v48, v36.f64, v36.f64);
  v30 = 0.0;
  v31 = 0.0;
  v32 = 1.0;
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a4 + 24))(v29, a4);
  PCMatrix44Tmpl<double>::transform_row<double>(v29, &v30, &v30);
  v16 = v30;
  v17 = v31;
  v18 = v32;
  v19 = sqrt(v16 * v16 + v17 * v17 + v18 * v18);
  if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
  {
    v16 = v30 / v19;
    v17 = v31 / v19;
    v30 = v30 / v19;
    v31 = v31 / v19;
    v18 = v32 / v19;
    v32 = v32 / v19;
  }
  v27 = 0uLL;
  v28 = 0.0;
  v22 = v36;
  v23 = v37;
  v24 = v16;
  v25 = v17;
  v26 = v18;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 80))(v21, a4, a3);
  v33 = v21[0];
  v34 = v21[1];
  v35 = v21[2];
  PCIntersectRayWithPlane((double *)&v33, v22.f64, v27.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v36.f64, v36.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v27.f64, v27.f64);
  result = v28 - v37;
  *a6 = vsubq_f64(v27, v36);
  a6[1].f64[0] = result;
  return result;
}

void OZLight::getIconName(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("M_LayersList_ObjectIconColor-Light"));
}

void OZLight::getIconNameBW(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("M_LayersList_ObjectIconGrey-Light"));
}

uint64_t OZLight::getIconID(OZLight *this)
{
  return 22;
}

CGColorSpace **OZLight::setLightWorkingColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  char *v4;
  CGColorSpace **result;
  CGColorSpace *v6;

  v4 = (char *)(this + 1334);
  result = PCCFRef<CGColorSpace *>::operator=(this + 1334, &a2->_pcColorDesc._colorSpaceRef._obj);
  v6 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 2672) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[1335] = v6;
  v4[24] = a2->_isPremultiplied;
  return result;
}

CGColorSpace *OZLight::getWorkingColorDescription@<X0>(OZLight *this@<X0>, uint64_t a2@<X8>)
{
  CGColorSpace **v4;
  CGColorSpace *result;

  v4 = (CGColorSpace **)((char *)this + 10672);
  if (!FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 10672)))
    return (CGColorSpace *)OZSceneNode::getWorkingColorDescription(this, a2);
  result = *v4;
  *(_QWORD *)a2 = *v4;
  if (result)
    result = PCCFRefTraits<CGColorSpace *>::retain(result);
  *(_QWORD *)(a2 + 8) = *((_QWORD *)this + 1335);
  *(_DWORD *)(a2 + 16) = *((_DWORD *)this + 2672);
  *(_BYTE *)(a2 + 24) = *((_BYTE *)this + 10696);
  return result;
}

CGColorSpace *`non-virtual thunk to'OZLight::getWorkingColorDescription@<X0>(OZLight *this@<X0>, uint64_t a2@<X8>)
{
  return OZLight::getWorkingColorDescription((OZLight *)((char *)this - 6528), a2);
}

uint64_t OZLight::getLocalVolume(uint64_t a1, _OWORD *a2, CMTime *a3)
{
  uint64_t result;
  __int128 v5;

  result = OZChannel::getValueAsInt((OZChannel *)(a1 + 6624), a3, 0.0);
  switch((int)result)
  {
    case 1:
      *a2 = xmmword_1B355FAC0;
      a2[1] = xmmword_1B355FAC0;
      v5 = xmmword_1B355FAD0;
      goto LABEL_6;
    case 2:
      v5 = xmmword_1B355FAC0;
      *a2 = xmmword_1B355FAC0;
      a2[1] = xmmword_1B355FAC0;
      goto LABEL_6;
    case 3:
      *a2 = xmmword_1B355FAA0;
      a2[1] = xmmword_1B355FAA0;
      v5 = xmmword_1B355FAB0;
LABEL_6:
      a2[2] = v5;
      break;
    default:
      a2[1] = 0u;
      a2[2] = 0u;
      *a2 = 0u;
      break;
  }
  return result;
}

uint64_t OZLight::getSolo(OZLight *this)
{
  return 0;
}

void OZLight::~OZLight(OZLight *this)
{
  OZLight::~OZLight(this);
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBase *v2;
  const PCString *v3;

  *(_QWORD *)this = &off_1E65A2C60;
  *((_QWORD *)this + 2) = &unk_1E65A3238;
  *((_QWORD *)this + 6) = &unk_1E65A3490;
  v2 = (OZChannelBase *)((char *)this + 6528);
  *((_QWORD *)this + 816) = &unk_1E65A34E8;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 1334);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10368));
  OZFolderLightShadow::~OZFolderLightShadow((OZLight *)((char *)this + 8776));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8624));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8472));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 8344));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 0x2000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8040));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7888));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZLight *)((char *)this + 6880));
  OZChannelEnum::~OZChannelEnum((OZLight *)((char *)this + 6624));
  OZChannelBase::setRangeName(v2, v3);
  OZTransformNode::~OZTransformNode((OZTransformNode *)this);
}

void `non-virtual thunk to'OZLight::~OZLight(OZLight *this)
{
  OZLight::~OZLight((OZLight *)((char *)this - 16));
}

{
  OZLight::~OZLight((OZLight *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZLight::~OZLight((OZLight *)((char *)this - 48));
}

{
  OZLight::~OZLight((OZLight *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZLight::~OZLight((OZLight *)((char *)this - 6528));
}

{
  OZLight::~OZLight((OZLight *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

void *OUTLINED_FUNCTION_0_7(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  return __cxa_begin_catch(v10);
}

void *OUTLINED_FUNCTION_2_1(void *a1)
{
  return __cxa_get_exception_ptr(a1);
}

void OUTLINED_FUNCTION_3_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
}

void OZLight::operator=(void *a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::exception v20;

  v1 = OUTLINED_FUNCTION_2_1(a1);
  v9 = OUTLINED_FUNCTION_0_7(v1, v2, v3, v4, v5, v6, v7, v8, v17, v19);
  OUTLINED_FUNCTION_3_1(v9, v10, v11, v12, v13, v14, v15, v16, v18, v20);
  __cxa_end_catch();
  OUTLINED_FUNCTION_1_4();
}

void OZSimulationBehavior::OZSimulationBehavior(OZSimulationBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZBehavior::OZBehavior(this, a2, a3, a4);
  *v4 = &off_1E65A35F8;
  v4[2] = &unk_1E65A38D8;
  v4[6] = &unk_1E65A3B30;
}

void OZSimulationBehavior::OZSimulationBehavior(OZSimulationBehavior *this, OZSimulationBehavior *a2, char a3)
{
  _QWORD *v3;

  OZBehavior::OZBehavior(this, a2, a3);
  *v3 = &off_1E65A35F8;
  v3[2] = &unk_1E65A38D8;
  v3[6] = &unk_1E65A3B30;
}

void `non-virtual thunk to'OZSimulationBehavior::~OZSimulationBehavior(OZSimulationBehavior *this)
{
  OZBehavior::~OZBehavior((OZSimulationBehavior *)((char *)this - 16));
}

{
  OZBehavior::~OZBehavior((OZSimulationBehavior *)((char *)this - 48));
}

{
  OZBehavior::~OZBehavior((OZSimulationBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZBehavior::~OZBehavior((OZSimulationBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

void OZSimulationBehavior::~OZSimulationBehavior(OZSimulationBehavior *this)
{
  OZBehavior::~OZBehavior(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSimulationBehavior::didAddToNode(uint64_t this, OZSceneNode *a2)
{
  *(_QWORD *)(this + 328) = a2;
  return this;
}

unint64_t OZSimulationBehavior::canAddToSceneNode(OZSimulationBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  __int128 v5;

  if ((OZBehavior::canAddToSceneNode(this, a2) & 1) != 0)
    return 1;
  v4 = *((_QWORD *)a2 + 1);
  v5 = xmmword_1B355E430;
  return OZFactory::isKindOfClass(v4, (int32x4_t *)&v5);
}

BOOL OZSimulationBehavior::canBake(OZSimulationBehavior *this)
{
  uint64_t v2;
  _BOOL8 result;

  result = 1;
  if (((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)this + 656))(this) & 1) == 0)
  {
    if ((*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)this + 328))(this))
    {
      v2 = (*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)this + 328))(this);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1008))(v2) & 1) != 0)
        return 0;
    }
  }
  return result;
}

__n128 OZSimulationBehavior::accumForces(OZSimulationBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  __int128 *v3;
  uint64_t *v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v3 = *(__int128 **)a2;
  if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
  {
    v4 = &v26;
    do
    {
      v26 = 0x3FF0000000000000;
      v28 = 0;
      v27 = 0uLL;
      v5 = *v3;
      v25 = *((_QWORD *)v3 + 2);
      v24 = v5;
      v6 = v4;
      if ((uint64_t *)((char *)v3 + 24) != v4)
      {
        v26 = *((_QWORD *)v3 + 3);
        v7 = v3[2];
        v28 = *((_QWORD *)v3 + 6);
        v27 = v7;
      }
      v8 = *(__int128 *)((char *)v3 + 56);
      v30 = *((_QWORD *)v3 + 9);
      v29 = v8;
      v9 = v3[5];
      v32 = *((_QWORD *)v3 + 12);
      v31 = v9;
      v10 = *(__int128 *)((char *)v3 + 104);
      v34 = *((_QWORD *)v3 + 15);
      v33 = v10;
      v11 = v3[8];
      v36 = *((_QWORD *)v3 + 18);
      v35 = v11;
      v12 = *(__n128 *)((char *)v3 + 152);
      v38 = *((_QWORD *)v3 + 21);
      v37 = v12;
      v39 = *(_OWORD *)((char *)a2 + 24);
      v40 = *((_QWORD *)a2 + 5);
      v13 = *((_QWORD *)v3 + 24);
      v41 = v3[11];
      v42 = v13;
      (*(void (**)(OZSimulationBehavior *, __int128 *, OZTransformNode *))(*(_QWORD *)this + 624))(this, &v24, a3);
      v14 = v24;
      *((_QWORD *)v3 + 2) = v25;
      *v3 = v14;
      v4 = v6;
      if ((uint64_t *)((char *)v3 + 24) != v6)
      {
        *((_QWORD *)v3 + 3) = v26;
        v15 = v27;
        *((_QWORD *)v3 + 6) = v28;
        v3[2] = v15;
      }
      v16 = v29;
      *((_QWORD *)v3 + 9) = v30;
      *(__int128 *)((char *)v3 + 56) = v16;
      v17 = v31;
      *((_QWORD *)v3 + 12) = v32;
      v3[5] = v17;
      v18 = v33;
      *((_QWORD *)v3 + 15) = v34;
      *(__int128 *)((char *)v3 + 104) = v18;
      v19 = v35;
      *((_QWORD *)v3 + 18) = v36;
      v3[8] = v19;
      result = v37;
      *((_QWORD *)v3 + 21) = v38;
      *(__int128 *)((char *)v3 + 152) = (__int128)result;
      v3 = (__int128 *)((char *)v3 + 248);
    }
    while (v3 != *((__int128 **)a2 + 1));
  }
  return result;
}

uint64_t OZSimulationBehavior::accumInitialValues(uint64_t this, OZSimStateArray *a2, int a3, OZTransformNode *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v26 = this;
  v4 = *((_QWORD *)a2 + 1);
  v5 = v4 == *(_QWORD *)a2 || a3 < 1;
  if (!v5)
  {
    v6 = &v31;
    v7 = (__int128 *)(v4 - 248);
    v8 = 1;
    do
    {
      v31 = 0x3FF0000000000000;
      v33 = 0;
      v32 = 0uLL;
      v9 = *v7;
      v30 = *((_QWORD *)v7 + 2);
      v29 = v9;
      v10 = v6;
      if ((uint64_t *)((char *)v7 + 24) != v6)
      {
        v31 = *((_QWORD *)v7 + 3);
        v11 = v7[2];
        v33 = *((_QWORD *)v7 + 6);
        v32 = v11;
      }
      v12 = *(__int128 *)((char *)v7 + 56);
      v35 = *((_QWORD *)v7 + 9);
      v34 = v12;
      v13 = v7[5];
      v37 = *((_QWORD *)v7 + 12);
      v36 = v13;
      v14 = *(__int128 *)((char *)v7 + 104);
      v39 = *((_QWORD *)v7 + 15);
      v38 = v14;
      v15 = v7[8];
      v41 = *((_QWORD *)v7 + 18);
      v40 = v15;
      v16 = *(__int128 *)((char *)v7 + 152);
      v43 = *((_QWORD *)v7 + 21);
      v42 = v16;
      v44 = *(_OWORD *)((char *)a2 + 24);
      v45 = *((_QWORD *)a2 + 5);
      v17 = *((_QWORD *)v7 + 24);
      v46 = v7[11];
      v47 = v17;
      this = (*(uint64_t (**)(uint64_t, __int128 *, OZTransformNode *))(*(_QWORD *)v26 + 640))(v26, &v29, a4);
      v18 = v29;
      *((_QWORD *)v7 + 2) = v30;
      *v7 = v18;
      v6 = v10;
      if ((uint64_t *)((char *)v7 + 24) != v10)
      {
        *((_QWORD *)v7 + 3) = v31;
        v19 = v32;
        *((_QWORD *)v7 + 6) = v33;
        v7[2] = v19;
      }
      v20 = v34;
      *((_QWORD *)v7 + 9) = v35;
      *(__int128 *)((char *)v7 + 56) = v20;
      v21 = v36;
      *((_QWORD *)v7 + 12) = v37;
      v7[5] = v21;
      v22 = v38;
      *((_QWORD *)v7 + 15) = v39;
      *(__int128 *)((char *)v7 + 104) = v22;
      v23 = v40;
      *((_QWORD *)v7 + 18) = v41;
      v7[8] = v23;
      v24 = v42;
      *((_QWORD *)v7 + 21) = v43;
      *(__int128 *)((char *)v7 + 152) = v24;
      if (v7 == *(__int128 **)a2)
        break;
      v7 = (__int128 *)((char *)v7 - 248);
      v5 = v8++ < a3;
    }
    while (v5);
  }
  return this;
}

void *OZSimulationBehavior::getTransformNode(OZSimulationBehavior *this)
{
  void *result;

  result = (void *)(*(uint64_t (**)(OZSimulationBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  return result;
}

uint64_t OZChannelMaterialMapScale_Factory::getInstance(OZChannelMaterialMapScale_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelMaterialMapScale_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelMaterialMapScale_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialMapScale_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialMapScale_Factory::_instance;
}

void OZChannelMaterialMapScale::OZChannelMaterialMapScale(OZChannelMaterialMapScale *this, double a2, double a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  OZFactory *Instance;
  PCString v15;

  Instance = (OZFactory *)OZChannelMaterialMapScale_Factory::getInstance(this);
  OZChannelScale::OZChannelScale(this, a2, a3, Instance, a4, a5, a6, a7, 2u, 0, 0);
  *(_QWORD *)this = &off_1E65A3BA0;
  *((_QWORD *)this + 2) = &unk_1E65A3EF8;
  PCURL::PCURL((PCURL *)&v15, CFSTR("Material Map Scale Scale With Font Size"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), 1, &v15, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Material Map Scale Basis Font Size"));
  OZChannelDouble::OZChannelDouble((OZChannelMaterialMapScale *)((char *)this + 592), 72.0, &v15, (OZChannelFolder *)this, 0xBu, 2, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Material Map Scale Basis Scale"));
  OZChannelScale::OZChannelScale((OZChannelMaterialMapScale *)((char *)this + 744), 1.0, 1.0, &v15, (OZChannelFolder *)this, 0xCu, 2u, 2u, 0, 0);
  PCString::~PCString(&v15);
}

void sub_1B2EC3D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;
  OZChannelBool *v11;
  OZChannel *v12;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale::OZChannelMaterialMapScale(OZChannelMaterialMapScale *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZChannelScale::OZChannelScale(this, a2, a3, a4);
  *v5 = &off_1E65A3BA0;
  v5[2] = &unk_1E65A3EF8;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Map Scale Scale With Font Size"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 440), 1, &v6, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Map Scale Basis Font Size"));
  OZChannelDouble::OZChannelDouble((OZChannelMaterialMapScale *)((char *)this + 592), 72.0, &v6, (OZChannelFolder *)this, 0xBu, 2, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Map Scale Basis Scale"));
  OZChannelScale::OZChannelScale((OZChannelMaterialMapScale *)((char *)this + 744), 1.0, 1.0, &v6, (OZChannelFolder *)this, 0xCu, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
}

void sub_1B2EC3F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel2D *v10;
  OZChannelBool *v11;
  OZChannel *v12;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannel2D::~OZChannel2D(v10);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale::OZChannelMaterialMapScale(OZChannelMaterialMapScale *this, const OZChannelMaterialMapScale *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelScale::OZChannelScale(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65A3BA0;
  *(_QWORD *)(v5 + 16) = &unk_1E65A3EF8;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 440), (const OZChannelBase *)((char *)a2 + 440), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)a2 + 592), (OZChannelFolder *)this);
  *((_QWORD *)this + 74) = &off_1E6551358;
  *((_QWORD *)this + 76) = &unk_1E65516B8;
  OZChannelScale::OZChannelScale((OZChannelMaterialMapScale *)((char *)this + 744), (const OZChannelMaterialMapScale *)((char *)a2 + 744), (OZChannelFolder *)this);
}

void sub_1B2EC4020(_Unwind_Exception *a1)
{
  OZChannel2D *v1;
  OZChannelBool *v2;
  OZChannel *v3;

  OZChannel::~OZChannel(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZChannel2D::~OZChannel2D(v1);
  _Unwind_Resume(a1);
}

OZChannelMaterialMapScale *OZChannelMaterialMapScale::clone(OZChannelMaterialMapScale *this)
{
  OZChannelMaterialMapScale *v2;

  v2 = (OZChannelMaterialMapScale *)operator new();
  OZChannelMaterialMapScale::OZChannelMaterialMapScale(v2, this, 0);
  return v2;
}

void sub_1B2EC40A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale::copy(OZChannelMaterialMapScale *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZChannel2D::copy(this, a2, a3);
  if (v4)
  OZChannel::copy((OZChannel *)((char *)this + 440), (const OZChannelBase *)((char *)v4 + 440), a3);
  OZChannel::copy((OZChannel *)((char *)this + 592), (const OZChannelBase *)((char *)v4 + 592), a3);
  OZChannel2D::copy((OZChannelMaterialMapScale *)((char *)this + 744), (const OZChannelBase *)((char *)v4 + 744), a3);
}

uint64_t OZChannelMaterialMapScale::setBasisScale(OZChannelMaterialMapScale *this, double a2, double a3)
{
  OZChannel2D *v5;

  v5 = (OZChannelMaterialMapScale *)((char *)this + 744);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 744), 0);
  return OZChannel2D::setValue(v5, MEMORY[0x1E0CA2E68], a2, a3, 0);
}

void `non-virtual thunk to'OZChannelMaterialMapScale::~OZChannelMaterialMapScale(OZChannelMaterialMapScale *this)
{
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale((OZChannelMaterialMapScale *)((char *)this - 16));
}

{
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale((OZChannelMaterialMapScale *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZChannelMaterialMapScale_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelMaterialMapScale_Factory *v0;

  v0 = (OZChannelMaterialMapScale_Factory *)operator new();
  OZChannelMaterialMapScale_Factory::OZChannelMaterialMapScale_Factory(v0);
  OZChannelMaterialMapScale_Factory::_instance = (uint64_t)v0;
}

void sub_1B2EC4230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapScale_Factory::OZChannelMaterialMapScale_Factory(OZChannelMaterialMapScale_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555850;
  v4 = xmmword_1B355FB20;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65A3F68;
  *((_QWORD *)this + 16) = &unk_1E65A4038;
}

void sub_1B2EC42D0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelMaterialMapScale *OZChannelMaterialMapScale_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelMaterialMapScale *v6;

  v6 = (OZChannelMaterialMapScale *)operator new();
  OZChannelMaterialMapScale::OZChannelMaterialMapScale(v6, this, a2, a3);
  return v6;
}

void sub_1B2EC4340(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

OZChannelMaterialMapScale *OZChannelMaterialMapScale_Factory::createCopy(OZChannelMaterialMapScale_Factory *this, OZFactoryBase *a2)
{
  OZChannelMaterialMapScale *v3;
  const OZChannelMaterialMapScale *v4;

  v3 = (OZChannelMaterialMapScale *)operator new();
  OZChannelMaterialMapScale::OZChannelMaterialMapScale(v3, v4, 0);
  return v3;
}

void sub_1B2EC43CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

OZChannelMaterialMapScale *OZChannelMaterialMapScale_Factory::createChannelCopy(OZChannelMaterialMapScale_Factory *this, OZChannelBase *a2)
{
  OZChannelMaterialMapScale *v3;
  const OZChannelMaterialMapScale *v4;

  v3 = (OZChannelMaterialMapScale *)operator new();
  OZChannelMaterialMapScale::OZChannelMaterialMapScale(v3, v4, 0);
  return v3;
}

void sub_1B2EC4458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4073D63E68);
  _Unwind_Resume(a1);
}

void OZRenderManager::~OZRenderManager(OZRenderManager *this, const PCString *a2)
{
  OZChannelBase *v3;
  uint64_t v4;

  v3 = (OZChannelBase *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = OZChannelBase::setRangeName(v3, a2);
    MEMORY[0x1B5E29170](v4, 0xC400A2AC0F1);
  }
  *((_QWORD *)this + 1) = 0;

}

unint64_t createPlaceHolderBitmap@<X0>(double a1@<D0>, double a2@<D1>, CGColorSpace *a3@<X2>, int a4@<W0>, int a5@<W1>, uint64_t *a6@<X8>)
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  CGColorSpace *v24;
  CGColorSpace **v25;
  CGColorSpace *v26;
  CGColorSpace **v27;
  CGColorSpace *v28;
  unint64_t result;
  unint64_t i;
  unint64_t j;
  _BYTE *v32;
  PCColorSpaceCache *BytesPerRow;
  unsigned __int8 v34;
  char v35;
  char v36;
  unsigned __int8 v37;
  char v38;
  char v39;
  unsigned __int8 v40;
  char v41;
  char v42;

  v10 = (int)((double)a4 * a1);
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = v10;
  v12 = (int)((double)a5 * a2);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  v14 = (_QWORD *)operator new();
  PCBitmap::PCBitmap((uint64_t)v14, v11, v13, 3, (uint64_t)a3, 1);
  *v14 = &unk_1E6511830;
  std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,void>(a6, (uint64_t)v14);
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a6 + 64) + 16))(*(_QWORD *)(*a6 + 64));
  v16 = vcvtd_n_s64_f64(a1, 2uLL);
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = v16;
  v18 = (int)(a2 * 3.0);
  if (v18 <= 1)
    v19 = 1;
  else
    v19 = v18;
  if ((int)(a1 * 25.0) <= 1)
    v20 = 1;
  else
    v20 = (int)(a1 * 25.0);
  if ((int)(a2 * 25.0) <= 1)
    v21 = 1;
  else
    v21 = (int)(a2 * 25.0);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a6 + 16))(*a6);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a6 + 24))(*a6);
  BytesPerRow = (PCColorSpaceCache *)PCBitmap::getBytesPerRow((PCBitmap *)*a6);
  v42 = -52;
  v41 = 0;
  v40 = 0;
  v24 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(BytesPerRow);
  v25 = PCGetColorInColorSpace<unsigned char,unsigned char>(v24, 0xCCu, 0, 0, a3, &v42, &v41, &v40);
  v39 = -52;
  v38 = -46;
  v37 = -34;
  v26 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear((PCColorSpaceCache *)v25);
  v27 = PCGetColorInColorSpace<unsigned char,unsigned char>(v26, 0xCCu, (CGColorSpace *)0xD2, 0xDEu, a3, &v39, &v38, &v37);
  v36 = -101;
  v35 = 108;
  v34 = 115;
  v28 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear((PCColorSpaceCache *)v27);
  result = (unint64_t)PCGetColorInColorSpace<unsigned char,unsigned char>(v28, 0x9Bu, (CGColorSpace *)0x6C, 0x73u, a3, &v36, &v35, &v34);
  if (v23 >= 1)
  {
    for (i = 0; i != v23; ++i)
    {
      if (v22 >= 1)
      {
        for (j = 0; j != v22; ++j)
        {
          v32 = (_BYTE *)(v15 + i * (int)BytesPerRow + (4 * j));
          if (j < v17 || (uint64_t)j >= v22 - (int)v17 || i < v19 || (uint64_t)i >= v23 - (int)v19)
          {
            *v32 = -1;
            v32[1] = v42;
            v32[2] = v41;
            result = v40;
          }
          else
          {
            *v32 = -1;
            if ((((i / v21) ^ (j / v20)) & 1) != 0)
            {
              v32[1] = v39;
              v32[2] = v38;
              result = v37;
            }
            else
            {
              v32[1] = v36;
              v32[2] = v35;
              result = v34;
            }
          }
          v32[3] = result;
        }
      }
    }
  }
  return result;
}

void sub_1B2EC47B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::openByReplacingSubPath(PCString *a1, PCString *this, PCString *a3, uint64_t a4)
{
  int v8;
  int v9;
  __CFBundle *MainBundle;
  const __CFURL *v11;
  const __CFString *v12;
  CFStringRef v13;
  unsigned int v14;
  PCString v16;

  v8 = PCString::find(this, a3);
  if (v8 != -1)
  {
    v9 = v8;
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      v11 = CFBundleCopyBundleURL(MainBundle);
      v12 = CFURLCopyPath(v11);
      v13 = CFURLCreateStringByReplacingPercentEscapes(0, v12, &stru_1E65EDDA0);
      v14 = PCString::size(a3) + v9;
      PCURL::PCURL((PCURL *)&v16, v13);
      PCString::replace(this, 0, v14, &v16);
      PCString::~PCString(&v16);
      PCURL::PCURL((PCURL *)&v16, this, 0);
      a4 = OZFootage::openURL(a1, (const PCURL *)&v16, 0, 0);
      CFRelease(v11);
      CFRelease(v12);
      CFRelease(v13);
      PCURL::~PCURL((PCURL *)&v16);
    }
  }
  return a4;
}

void sub_1B2EC4914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::openURL(PCString *this, const PCURL *a2, int a3, int a4)
{
  PMMediaManager *Instance;
  uint64_t v9;
  _WORD *v10;
  PCString v12;
  PMClip *v13;

  Instance = (PMMediaManager *)PMMediaManager::getInstance((PMMediaManager *)this);
  v13 = 0;
  v9 = PMMediaManager::open(Instance, a2, &v13, 0);
  if (!(_DWORD)v9)
    OZFootage::setClip((OZFootage *)this, v13, a3, a4, 1);
  OZSceneNodeFile::setIsFileMissing((uint64_t)this, (_DWORD)v9 != 0);
  if (v13)
    PMClip::getAsFileSystemString((const PCString *)v13, &v12);
  else
    PCURL::getAsFileSystemString((const __CFURL **)a2, &v12);
  PCString::set(this + 196, &v12);
  v10 = (_WORD *)((char *)&this[1039].var0 + 5);
  PCString::~PCString(&v12);
  if ((_DWORD)v9 == 2)
  {
    *v10 = 257;
  }
  else if ((_DWORD)v9 == 1)
  {
    *(_BYTE *)v10 = 1;
  }
  return v9;
}

void sub_1B2EC4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

void OZFootage::getCacheHashKey(OZFootage *this, PMClip *a2, const CMTime *a3, const CMTime *a4, const PMFrameRequest *a5, const OZRenderParams *a6, const PMLayerDescription *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OZRenderParams *v10;
  OZRenderParams *v11;
  uint64_t v12;
  uint64_t v13;
  CMTime *v14;
  CMTime *v15;
  uint64_t v16;
  uint64_t v17;
  const PCString **v18;
  _OWORD *v19;
  _OWORD *v20;
  int AlphaType;
  char AlphaInvert;
  const PCString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  double v27;
  const PCString *v28;
  char v29;
  double v30;
  double v31;
  double v32;
  double v33;
  const PCString *v34;
  BOOL v35;
  char v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime __src;
  CMTime v44;
  int8x8_t v45[521];

  v7 = MEMORY[0x1E0C80A78](this);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = (const PCString **)v7;
  v20 = v19;
  v45[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v45);
  if (v18[1009] && (((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18) & 1) == 0)
  {
    PMClip::getAsFileSystemString(v18[1009], (PCString *)&v37);
    PCHashWriteStream::writeValue(v45, (PCString *)&v37);
    PCString::~PCString((PCString *)&v37);
  }
  __src = *v15;
  memset(&v42, 0, sizeof(v42));
  OZFootage::getFrameDuration((OZFootage *)v18, &v42);
  if (*(_DWORD *)(v13 + 108))
  {
    operator*(&__src, 2, &v39);
    v37 = v39;
    v44 = v42;
    PC_CMTimeFloorToSampleDuration(&v37, &v44, (uint64_t)&v40);
    operator*(&v40, &v41, 0.5);
  }
  else
  {
    v37 = __src;
    v44 = v42;
    PC_CMTimeFloorToSampleDuration(&v37, &v44, (uint64_t)&v41);
  }
  __src = v41;
  PCHashWriteStream::writeValue(v45, *((_DWORD *)v18 + 384));
  PCHashWriteStream::writeValue(v45, &__src);
  PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 92));
  PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 96));
  AlphaType = PMFrameRequest::getAlphaType((PMFrameRequest *)v13);
  PCHashWriteStream::writeValue(v45, AlphaType);
  AlphaInvert = PMFrameRequest::getAlphaInvert((PMFrameRequest *)v13);
  PCHashWriteStream::writeValue(v45, AlphaInvert);
  PCHashWriteStream::writeValue(v45, *(_BYTE *)(v13 + 104));
  PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 108));
  PCHashWriteStream::writeValue(v45, *(double *)(v13 + 136));
  if ((((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18) & 1) == 0)
  {
    v23 = v18[1009];
    if (v23)
    {
      if (LOBYTE(v23[51].var0))
      {
        v24 = 0;
        v25 = v13 + 16;
        do
        {
          for (i = 0; i != 24; i += 8)
            PCHashWriteStream::writeValue(v45, *(double *)(v25 + i));
          ++v24;
          v25 += 24;
        }
        while (v24 != 3);
      }
    }
  }
  OZRenderParams::getResolution(v11, (__n128 *)&v37);
  v27 = *(double *)&v37.timescale;
  PCHashWriteStream::writeValue(v45, *(double *)&v37.value);
  PCHashWriteStream::writeValue(v45, v27);
  if ((((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18) & 1) == 0)
  {
    v28 = v18[1009];
    if (v28)
    {
      if (LOBYTE(v28[51].var0))
      {
        PCHashWriteStream::writeValue(v45, *(_DWORD *)v13);
        PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 4));
        PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 8));
        PCHashWriteStream::writeValue(v45, *(_DWORD *)(v13 + 12));
      }
    }
  }
  v38 = *(CMTime *)(v18 + 29);
  v44 = *(CMTime *)(v18 + 26);
  PCHashWriteStream::writeValue(v45, &v44);
  v44 = v38;
  PCHashWriteStream::writeValue(v45, &v44);
  v29 = ((uint64_t (*)(const PCString **))(*v18)[179].var0)(v18);
  PCHashWriteStream::writeValue(v45, v29);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 765), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v30);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 784), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v31);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 822), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v32);
  OZChannel::getValueAsDouble((OZChannel *)(v18 + 803), &__src, 0.0);
  PCHashWriteStream::writeValue(v45, v33);
  v34 = v18[1009];
  v35 = LODWORD(v34[36].var0) <= 0x1000 && HIDWORD(v34[36].var0) <= 0x1000;
  if (*(_BYTE *)(v17 + 451))
    v36 = PCPixelFormat::isFloat(*(_DWORD *)(v9 + 20)) && v35;
  else
    v36 = 0;
  PCHashWriteStream::writeValue(v45, v36);
  PCHashWriteStream::close(v45);
  *v20 = *(_OWORD *)PCHashWriteStream::getHash(v45)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v45);
}

void sub_1B2EC4E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  PCString::~PCString((PCString *)&a9);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a34);
  _Unwind_Resume(a1);
}

void OZFootage::getFrameDuration(OZFootage *this@<X0>, CMTime *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;

  v4 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 8080));
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0
    || (v5 = *((_QWORD *)this + 1009)) == 0)
  {
    CMTimeMake(a2, 1, 30);
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 320);
    a2->epoch = *(_QWORD *)(v5 + 336);
    *(_OWORD *)&a2->value = v6;
  }
  PCSharedMutex::unlock_shared(v4);
}

void sub_1B2EC4F4C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

BOOL OZFootage::isResolutionIndependent(OZFootage *this)
{
  uint64_t v2;

  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0)
    return 0;
  v2 = *((_QWORD *)this + 1009);
  return v2 && *(_BYTE *)(v2 + 408) != 0;
}

void OZFootage::OZFootage(OZFootage *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCURL *v6;
  PCURL *v7;
  PCURL *v8;
  PCURL *v9;
  PCURL *v10;
  PCURL *v11;
  PCURL *v12;
  PCURL *v13;
  PCURL *v14;
  PCURL *v15;
  PCURL *v16;
  OZFootage::OZFootage_fixedWidthInfo *v17;
  OZChannelInfo *Instance;
  PCURL *v19;
  OZFootage::OZFootage_fixedHeightInfo *v20;
  OZChannelInfo *v21;
  PCURL *v22;
  PCURL *v23;
  PCURL *v24;
  PCURL *v25;
  PCURL *v26;
  OZFootage::OZFootage_exposureInfo *v27;
  OZChannelInfo *v28;
  PCURL *v29;
  OZFootage::OZFootage_defogInfo *v30;
  OZChannelInfo *v31;
  PCURL *v32;
  OZFootage::OZFootage_kneeLowInfo *v33;
  OZChannelInfo *v34;
  PCURL *v35;
  OZFootage::OZFootage_kneeHighInfo *v36;
  OZChannelInfo *v37;
  PCURL *v38;
  PCURL *v39;
  PCString *v40;
  PCString *v41;
  OZChannelBase *v47;
  float WorkingGamma;
  PCInfo *v49;
  float v50;
  __int128 v51;
  OZChannelBase *v52;
  OZChannelBase *v53;
  OZChannelBase *v54;
  OZChannelBase *v55;
  OZChannelBase *v56;
  OZChannelBase *v57;
  OZChannelBase *v58;
  OZChannelBase *v59;
  OZChannelBase *v60;
  OZChannelFolder *v61;
  OZChannel *v62;
  PCString v63[2];
  uint64_t v64;
  PCString v65;

  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(_QWORD *)this = &off_1E65A4090;
  *((_QWORD *)this + 2) = &unk_1E65A4720;
  *((_QWORD *)this + 6) = &unk_1E65A4978;
  *((_QWORD *)this + 197) = &unk_1E65A49D0;
  PCURL::PCURL((PCURL *)v63, CFSTR("Channel Alpha Type"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), v63, (OZChannelFolder *)((char *)this + 448), 0x64u, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v6, CFSTR("Channel Alpha Type Enum"));
  PCURL::PCURL((PCURL *)&v65, CFSTR("Channel Alpha Type"));
  v57 = (OZChannelBase *)((char *)this + 1728);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 1728), v63, &v65, (OZChannelFolder *)((char *)this + 1600), 0x65u, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v7, CFSTR("Channel Alpha Color"));
  v61 = (OZChannelFolder *)((char *)this + 1984);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 1984), v63, (OZChannelFolder *)((char *)this + 1600), 0x66u, 0, 5u);
  PCString::~PCString(v63);
  PCURL::PCURL(v8, CFSTR("Channel Invert Alpha"));
  v55 = (OZChannelBase *)((char *)this + 2992);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2992), v63, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v9, CFSTR("Channel Pixel Aspect Ratio"));
  v62 = (OZChannel *)((char *)this + 3144);
  OZChannelAspectRatioFootage::OZChannelAspectRatioFootage((OZChannelAspectRatioFootage *)((char *)this + 3144), 1.0, v63, (OZChannelFolder *)((char *)this + 448), 0x68u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v10, CFSTR("Channel Field Dominance Enum"));
  PCURL::PCURL((PCURL *)&v65, CFSTR("Channel Field Dominance"));
  v54 = (OZChannelBase *)((char *)this + 3296);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3296), v63, &v65, (OZChannelFolder *)((char *)this + 448), 0x69u, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v11, CFSTR("Channel ThreeTwo Pulldown Enum"));
  PCURL::PCURL((PCURL *)&v65, CFSTR("Channel ThreeTwo Pulldown"));
  v60 = (OZChannelBase *)((char *)this + 3552);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3552), v63, &v65, (OZChannelFolder *)((char *)this + 448), 0x6Au, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v12, CFSTR("Channel Frame Rate"));
  v52 = (OZChannelBase *)((char *)this + 3808);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 3808), v63, (OZChannelFolder *)((char *)this + 448), 0x6Bu, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v13, CFSTR("Channel End Condition Enum"));
  PCURL::PCURL((PCURL *)&v65, CFSTR("Channel End Condition Label"));
  v59 = (OZChannelBase *)((char *)this + 3960);
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3960), v63, &v65, (OZChannelFolder *)((char *)this + 448), 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v65);
  PCString::~PCString(v63);
  PCURL::PCURL(v14, CFSTR("Channel Reverse"));
  v58 = (OZChannelBase *)((char *)this + 4216);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4216), v63, (OZChannelFolder *)((char *)this + 448), 0x6Fu, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v15, CFSTR("Channel PDF Fixed Resolution"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4368), 1, v63, (OZChannelFolder *)((char *)this + 448), 0x71u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v16, CFSTR("Channel PDF Width"));
  Instance = (OZChannelInfo *)OZFootage::OZFootage_fixedWidthInfo::getInstance(v17);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 4520), v63, (OZChannelFolder *)((char *)this + 448), 0x72u, 0, 0, Instance);
  PCString::~PCString(v63);
  PCURL::PCURL(v19, CFSTR("Channel PDF Height"));
  v21 = (OZChannelInfo *)OZFootage::OZFootage_fixedHeightInfo::getInstance(v20);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 4672), v63, (OZChannelFolder *)((char *)this + 448), 0x73u, 0, 0, v21);
  PCString::~PCString(v63);
  PCURL::PCURL(v22, CFSTR("Channel PDF Enable BG Color"));
  v53 = (OZChannelBase *)((char *)this + 4824);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4824), v63, (OZChannelFolder *)((char *)this + 448), 0x74u, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v23, CFSTR("Channel PDF BG Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 4976), 1.0, 1.0, 1.0, v63, (OZChannelFolder *)((char *)this + 448), 0x75u, 0, 5u);
  PCString::~PCString(v63);
  PCURL::PCURL(v24, CFSTR("Channel Crop"));
  v56 = (OZChannelBase *)((char *)this + 5984);
  OZChannelCrop::OZChannelCrop((OZFootage *)((char *)this + 5984), v63, (OZChannelFolder *)((char *)this + 448), 0x70u, 0, 4u, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v25, CFSTR("Channel OpenEXR"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6728), v63, (OZChannelFolder *)((char *)this + 448), 0x77u, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v26, CFSTR("Channel EXR Exposure"));
  v28 = (OZChannelInfo *)OZFootage::OZFootage_exposureInfo::getInstance(v27);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 6856), v63, (OZChannelFolder *)((char *)this + 6728), 0x78u, 0, 0, v28);
  PCString::~PCString(v63);
  PCURL::PCURL(v29, CFSTR("Channel EXR Defog"));
  v31 = (OZChannelInfo *)OZFootage::OZFootage_defogInfo::getInstance(v30);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7008), v63, (OZChannelFolder *)((char *)this + 6728), 0x79u, 0, 0, v31);
  PCString::~PCString(v63);
  PCURL::PCURL(v32, CFSTR("Channel EXR KneeLow"));
  v34 = (OZChannelInfo *)OZFootage::OZFootage_kneeLowInfo::getInstance(v33);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7160), v63, (OZChannelFolder *)((char *)this + 6728), 0x7Au, 0, 0, v34);
  PCString::~PCString(v63);
  PCURL::PCURL(v35, CFSTR("Channel EXR KneeHigh"));
  v37 = (OZChannelInfo *)OZFootage::OZFootage_kneeHighInfo::getInstance(v36);
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7312), 5.0, v63, (OZChannelFolder *)((char *)this + 6728), 0x7Bu, 0, 0, v37);
  PCString::~PCString(v63);
  PCURL::PCURL(v38, CFSTR("Channel EXR ToneMap"));
  OZChannelDouble::OZChannelDouble((OZFootage *)((char *)this + 7464), 0.0, v63, (OZChannelFolder *)((char *)this + 448), 0x7Du, 0, 0, 0);
  PCString::~PCString(v63);
  PCURL::PCURL(v39, CFSTR("Channel Gamma"));
  OZChannelGammaFootage::OZChannelGammaFootage((OZChannelGammaFootage *)((char *)this + 7616), v63, (OZChannelFolder *)((char *)this + 448), 0x7Cu, 0, 0, 0);
  PCString::~PCString(v63);
  PCString::PCString(v40, "Missing Is Still");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7768), v63, (OZChannelFolder *)((char *)this + 448), 0x80u, 0, 0, 0);
  PCString::~PCString(v63);
  PCString::PCString(v41, "Did Check Missing API");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7920), 0, v63, (OZChannelFolder *)((char *)this + 448), 0x81u, 2u, 0, 0);
  PCString::~PCString(v63);
  *((_QWORD *)this + 1009) = 0;
  PCSharedMutex::PCSharedMutex((OZFootage *)((char *)this + 8080));
  PCMutex::PCMutex((PCMutex *)((char *)this + 8184));
  *((_BYTE *)this + 8280) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 1036);
  *((_QWORD *)this + 1037) = 0x10000000100;
  *(_OWORD *)((char *)this + 8328) = 0u;
  *((_BYTE *)this + 8360) = 0;
  *((_OWORD *)this + 519) = 0u;
  *((_BYTE *)this + 8320) = 0;
  v63[0].var0 = 0;
  PGMetalTexture::PGMetalTexture((OZFootage *)((char *)this + 8368), (uint64_t *)v63);
  if (v63[0].var0)
    (*((void (**)(__CFString *))v63[0].var0->isa + 3))(v63[0].var0);
  *((_QWORD *)this + 1056) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 8456) = 0u;
  *((_OWORD *)this + 531) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v51 = _Q0;
  *((_OWORD *)this + 532) = _Q0;
  OZChannelBase::resetFlag(v60, 16, 0);
  OZChannelBase::saveStateAsDefault(v60);
  OZChannelBase::resetFlag(v56, 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v56);
  OZChannelBase::setFlag(v59, 10, 0);
  OZChannelBase::saveStateAsDefault(v59);
  OZChannelBase::setFlag(v58, 10, 0);
  OZChannelBase::saveStateAsDefault(v58);
  OZChannelBase::resetFlag((OZChannelBase *)this + 39, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 39);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4520), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4520));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4672), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4672));
  OZChannelBase::setFlag((OZChannelBase *)this + 39, 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 39);
  OZChannel::setMax((OZChannel *)((char *)this + 4520), 8192.0);
  OZChannel::setMax((OZChannel *)((char *)this + 4672), 8192.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 4520), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 4672), 0);
  OZChannelBase::resetFlag(v53, 16, 0);
  OZChannelBase::saveStateAsDefault(v53);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4976), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 4976));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 4976), 0, 0);
  (*(void (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 639) + 104))((char *)this + 5112, 0, 0);
  (*(void (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 658) + 104))((char *)this + 5264, 0, 0);
  (*(void (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 677) + 104))((char *)this + 5416, 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 4976), 0, 0);
  OZChannelFolder::setKeyframable(v61, 0, 0);
  OZChannel::setKeyframable(v62, 0);
  OZChannelBase::setFlag((OZChannelBase *)v62, 0x100000000, 0);
  OZChannelBase::resetFlag(v57, 16, 0);
  OZChannelBase::saveStateAsDefault(v57);
  OZChannelBase::resetFlag((OZChannelBase *)v61, 16, 0);
  OZChannelFolder::saveStateAsDefault(v61);
  OZChannelBase::resetFlag(v55, 16, 0);
  OZChannelBase::saveStateAsDefault(v55);
  OZChannelBase::resetFlag((OZChannelBase *)v62, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)v62);
  OZChannelBase::resetFlag(v54, 16, 0);
  OZChannelBase::saveStateAsDefault(v54);
  OZChannelBase::resetFlag(v52, 16, 0);
  OZChannelBase::saveStateAsDefault(v52);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 7616), 0);
  OZChannelBase::resetFlag((OZChannelBase *)this + 68, 16, 0);
  v47 = OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 68);
  WorkingGamma = PCInfo::getWorkingGamma((PCInfo *)v47);
  v49 = (PCInfo *)OZChannel::setDefaultValue((OZChannel *)((char *)this + 7616), WorkingGamma);
  v50 = PCInfo::getWorkingGamma(v49);
  OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], v50, 0);
  (*(void (**)(PCString *__return_ptr, OZFootage *))(*(_QWORD *)this + 1648))(v63, this);
  *((_OWORD *)this + 516) = *(_OWORD *)&v63[0].var0;
  *((_QWORD *)this + 1034) = v64;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6856), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7008), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7160), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7312), 134283274, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6728), 134283274, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 7464), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7464), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7464));
  *((_DWORD *)this + 2120) = 0;
  *((_BYTE *)this + 8484) = 0;
  *((_QWORD *)this + 1061) = 0;
  *((_DWORD *)this + 2118) = 0;
  *(_DWORD *)((char *)this + 8475) = 0;
  *((_OWORD *)this + 532) = v51;
}

void sub_1B2EC5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PGMetalTexture *a10, uint64_t a11, PCString *a12, PCMutex *a13, std::mutex *a14, OZChannelBool *a15, OZChannelBool *a16, OZChannelFolder *a17, OZChannelBase *a18, uint64_t a19, uint64_t a20,OZChannel *a21,OZChannel *a22,OZChannel *a23,OZChannel *a24,OZChannel *a25,OZChannelBool *a26,OZChannelEnum *a27,OZChannelBool *a28,OZChannelCrop *a29,OZChannelEnum *a30)
{
  OZSceneNodeFile *v30;
  uint64_t v31;
  OZChannel *v32;
  OZChannelBool *v33;
  OZChannelFolder *v34;
  OZChannel *v35;
  OZChannel *v36;
  OZChannel *v37;
  OZChannelColorNoAlpha *v38;
  uint64_t v39;
  const PCString *v41;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v31);
  PGMetalTexture::~PGMetalTexture(a10);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a11);
  PCString::~PCString(a12);
  PCMutex::~PCMutex(a13);
  PCSharedMutex::~PCSharedMutex(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannel::~OZChannel(v32);
  OZChannel::~OZChannel(v36);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannel::~OZChannel(a23);
  OZChannel::~OZChannel(a24);
  OZChannelFolder::~OZChannelFolder(v34);
  OZChannelCrop::~OZChannelCrop(a29);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v38);
  OZChannelBool::~OZChannelBool(a26);
  OZChannel::~OZChannel(v37);
  OZChannel::~OZChannel(v35);
  OZChannelBool::~OZChannelBool(v33);
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v39 - 160));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 152));
  OZChannel::~OZChannel(a25);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 144));
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 128));
  OZChannelBool::~OZChannelBool(a28);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v39 - 136));
  OZChannelEnum::~OZChannelEnum(a30);
  OZChannelFolder::~OZChannelFolder(a17);
  OZChannelBase::setRangeName(a18, v41);
  OZSceneNodeFile::~OZSceneNodeFile(v30);
  _Unwind_Resume(a1);
}

void OZFootage::OZFootage(OZFootage *this, OZFootage *a2, char a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  PMClip *v16;
  __int128 v17;

  OZSceneNodeFile::OZSceneNodeFile(this, a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1576));
  *(_QWORD *)this = &off_1E65A4090;
  *((_QWORD *)this + 2) = &unk_1E65A4720;
  *((_QWORD *)this + 6) = &unk_1E65A4978;
  *((_QWORD *)this + 197) = &unk_1E65A49D0;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1600), (const OZChannelFolder *)((char *)a2 + 1600), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 1728), (OZFootage *)((char *)a2 + 1728), (OZChannelFolder *)((char *)this + 1600));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 1984), (OZFootage *)((char *)a2 + 1984), (OZChannelFolder *)((char *)this + 1600));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2992), (const OZChannelBase *)((char *)a2 + 2992), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3144), (const OZChannelBase *)((char *)a2 + 3144), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 393) = &off_1E6552A38;
  *((_QWORD *)this + 395) = &unk_1E6552D98;
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3296), (OZFootage *)((char *)a2 + 3296), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3552), (OZFootage *)((char *)a2 + 3552), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3808), (const OZChannelBase *)a2 + 34, (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 476) = &off_1E6551358;
  *((_QWORD *)this + 478) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZFootage *)((char *)this + 3960), (OZFootage *)((char *)a2 + 3960), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4216), (const OZChannelBase *)((char *)a2 + 4216), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4368), (const OZChannelBase *)a2 + 39, (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 4520), (const OZChannelBase *)((char *)a2 + 4520), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 565) = &off_1E6551AF8;
  *((_QWORD *)this + 567) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 4672), (const OZChannelBase *)((char *)a2 + 4672), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 584) = &off_1E6551AF8;
  *((_QWORD *)this + 586) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4824), (const OZChannelBase *)((char *)a2 + 4824), (OZChannelFolder *)((char *)this + 448));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFootage *)((char *)this + 4976), (OZFootage *)((char *)a2 + 4976), (OZChannelFolder *)((char *)this + 448));
  OZChannelCrop::OZChannelCrop((OZFootage *)((char *)this + 5984), (OZFootage *)((char *)a2 + 5984), (OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6728), (const OZChannelFolder *)((char *)a2 + 6728), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6856), (const OZChannelBase *)((char *)a2 + 6856), (OZChannelFolder *)((char *)this + 6728));
  *((_QWORD *)this + 857) = &off_1E6551358;
  *((_QWORD *)this + 859) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7008), (const OZChannelBase *)((char *)a2 + 7008), (OZChannelFolder *)((char *)this + 6728));
  *((_QWORD *)this + 876) = &off_1E6551358;
  *((_QWORD *)this + 878) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7160), (const OZChannelBase *)((char *)a2 + 7160), (OZChannelFolder *)((char *)this + 6728));
  *((_QWORD *)this + 895) = &off_1E6551358;
  *((_QWORD *)this + 897) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7312), (const OZChannelBase *)((char *)a2 + 7312), (OZChannelFolder *)((char *)this + 6728));
  *((_QWORD *)this + 914) = &off_1E6551358;
  *((_QWORD *)this + 916) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7464), (const OZChannelBase *)((char *)a2 + 7464), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 933) = &off_1E6551358;
  *((_QWORD *)this + 935) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7616), (const OZChannelBase *)a2 + 68, (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 952) = &off_1E6552E08;
  *((_QWORD *)this + 954) = &unk_1E6553168;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7768), (const OZChannelBase *)((char *)a2 + 7768), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7920), (const OZChannelBase *)((char *)a2 + 7920), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 1009) = 0;
  PCSharedMutex::PCSharedMutex((OZFootage *)((char *)this + 8080));
  PCMutex::PCMutex((PCMutex *)((char *)this + 8184));
  v6 = *((_OWORD *)a2 + 516);
  *((_QWORD *)this + 1034) = *((_QWORD *)a2 + 1034);
  *((_OWORD *)this + 516) = v6;
  *((_BYTE *)this + 8280) = *((_BYTE *)a2 + 8280);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 1036);
  *((_QWORD *)this + 1037) = *((_QWORD *)a2 + 1037);
  *((_QWORD *)this + 1038) = *((_QWORD *)a2 + 1038);
  *((_DWORD *)this + 2078) = *((_DWORD *)a2 + 2078);
  *((_DWORD *)this + 2079) = *((_DWORD *)a2 + 2079);
  *((_BYTE *)this + 8320) = *((_BYTE *)a2 + 8320);
  *((_QWORD *)this + 1041) = *((_QWORD *)a2 + 1041);
  v7 = *((_QWORD *)a2 + 1042);
  *((_QWORD *)this + 1042) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)((char *)this + 8344) = 0u;
  *((_BYTE *)this + 8360) = *((_BYTE *)a2 + 8360);
  PCImage::PCImage((uint64_t)this + 8368, (uint64_t)a2 + 8368);
  *((_QWORD *)this + 1046) = &off_1E6584700;
  v10 = *((_QWORD *)a2 + 1054);
  *((_QWORD *)this + 1054) = v10;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  *((_QWORD *)this + 1055) = *((_QWORD *)a2 + 1055);
  *((_QWORD *)this + 1056) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 8456) = 0u;
  *((_OWORD *)this + 531) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v17 = _Q0;
  *((_OWORD *)this + 532) = _Q0;
  if (*((_QWORD *)a2 + 1009))
  {
    v16 = (PMClip *)operator new();
    PMClip::PMClip(v16, *((const PMClip **)a2 + 1009));
    *((_QWORD *)this + 1009) = v16;
  }
  *((_DWORD *)this + 2120) = 0;
  *((_BYTE *)this + 8484) = 0;
  *((_QWORD *)this + 1061) = 0;
  *((_DWORD *)this + 2118) = 0;
  *(_DWORD *)((char *)this + 8475) = 0;
  *((_OWORD *)this + 532) = v17;
}

void sub_1B2EC652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelBool *a11, OZChannel *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannel *a16, OZChannel *a17, OZChannelCrop *a18, OZChannelColorNoAlpha *a19, OZChannelBool *a20,OZChannel *a21,OZChannel *a22,OZChannelBool *a23,OZChannelBool *a24,OZChannelEnum *a25,OZChannel *a26,OZChannelEnum *a27,OZChannelEnum *a28,OZChannel *a29)
{
  OZSceneNodeFile *v29;
  PGMetalTexture *v30;
  uint64_t v31;
  OZChannelFolder *v32;
  uint64_t v33;
  PCMutex *v34;
  PCString *v35;
  std::mutex *v36;
  uint64_t v37;
  const PCString *v39;

  MEMORY[0x1B5E29170](v31, 0x10F0C40713A2EEALL);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v33);
  PGMetalTexture::~PGMetalTexture(v30);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v29 + 8328);
  PCString::~PCString(v35);
  PCMutex::~PCMutex(v34);
  PCSharedMutex::~PCSharedMutex(v36);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannel::~OZChannel(a17);
  OZChannelFolder::~OZChannelFolder(v32);
  OZChannelCrop::~OZChannelCrop(a18);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a19);
  OZChannelBool::~OZChannelBool(a20);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannelBool::~OZChannelBool(a23);
  OZChannelBool::~OZChannelBool(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannel::~OZChannel(a26);
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannel::~OZChannel(a29);
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v37 - 152));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v37 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v37 - 136));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v37 - 128));
  OZChannelBase::setRangeName(*(OZChannelBase **)(v37 - 120), v39);
  OZSceneNodeFile::~OZSceneNodeFile(v29);
  _Unwind_Resume(a1);
}

void sub_1B2EC668C()
{
  JUMPOUT(0x1B2EC65ACLL);
}

void sub_1B2EC6694()
{
  JUMPOUT(0x1B2EC65B4);
}

void sub_1B2EC669C()
{
  JUMPOUT(0x1B2EC65BCLL);
}

void sub_1B2EC66A4()
{
  JUMPOUT(0x1B2EC65C4);
}

void sub_1B2EC66AC()
{
  JUMPOUT(0x1B2EC65CCLL);
}

void sub_1B2EC66B4()
{
  JUMPOUT(0x1B2EC65D4);
}

void sub_1B2EC66BC()
{
  JUMPOUT(0x1B2EC65DCLL);
}

void sub_1B2EC66C4()
{
  JUMPOUT(0x1B2EC65E4);
}

void sub_1B2EC66CC()
{
  JUMPOUT(0x1B2EC65ECLL);
}

void sub_1B2EC66D4()
{
  JUMPOUT(0x1B2EC65F4);
}

void sub_1B2EC66DC()
{
  JUMPOUT(0x1B2EC65FCLL);
}

void sub_1B2EC66E4()
{
  JUMPOUT(0x1B2EC6604);
}

void sub_1B2EC66EC()
{
  JUMPOUT(0x1B2EC660CLL);
}

void sub_1B2EC66F4()
{
  JUMPOUT(0x1B2EC6614);
}

void sub_1B2EC66FC()
{
  JUMPOUT(0x1B2EC661CLL);
}

void sub_1B2EC6704()
{
  JUMPOUT(0x1B2EC6624);
}

void sub_1B2EC670C()
{
  JUMPOUT(0x1B2EC662CLL);
}

void sub_1B2EC6714()
{
  JUMPOUT(0x1B2EC6634);
}

void sub_1B2EC671C()
{
  JUMPOUT(0x1B2EC663CLL);
}

void sub_1B2EC6724()
{
  JUMPOUT(0x1B2EC6644);
}

void sub_1B2EC672C()
{
  JUMPOUT(0x1B2EC664CLL);
}

void sub_1B2EC6734()
{
  JUMPOUT(0x1B2EC6654);
}

void sub_1B2EC673C()
{
  JUMPOUT(0x1B2EC665CLL);
}

void sub_1B2EC6744()
{
  JUMPOUT(0x1B2EC6664);
}

void sub_1B2EC674C()
{
  JUMPOUT(0x1B2EC666CLL);
}

void sub_1B2EC6754()
{
  JUMPOUT(0x1B2EC6674);
}

void sub_1B2EC675C()
{
  JUMPOUT(0x1B2EC667CLL);
}

void OZFootage::~OZFootage(OZFootage *this)
{
  PMClip *v2;
  uint64_t v3;
  const PCString *v4;

  *(_QWORD *)this = &off_1E65A4090;
  *((_QWORD *)this + 2) = &unk_1E65A4720;
  *((_QWORD *)this + 6) = &unk_1E65A4978;
  *((_QWORD *)this + 197) = &unk_1E65A49D0;
  v2 = (PMClip *)*((_QWORD *)this + 1009);
  if (v2)
  {
    PMClip::~PMClip(v2);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 1009) = 0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8456);
  *((_QWORD *)this + 1046) = &off_1E6584700;
  v3 = *((_QWORD *)this + 1054);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  PCImage::~PCImage((CGColorSpace **)this + 1046);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8328);
  PCString::~PCString((PCString *)this + 1036);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 8184));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 8080));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7920));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7768));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7616));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7464));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7312));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6856));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 6728));
  OZChannelCrop::~OZChannelCrop((OZFootage *)((char *)this + 5984));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZFootage *)((char *)this + 4976));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4824));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4672));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4520));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4368));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4216));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 3960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3808));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 3552));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 3296));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3144));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2992));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZFootage *)((char *)this + 1984));
  OZChannelEnum::~OZChannelEnum((OZFootage *)((char *)this + 1728));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1600));
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 1576), v4);
  OZSceneNodeFile::~OZSceneNodeFile(this);
}

{
  OZFootage::~OZFootage(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFootage::~OZFootage(OZFootage *this)
{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 16));
}

{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 48));
}

{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 1576));
}

{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZFootage::~OZFootage((OZFootage *)((char *)this - 1576));
  JUMPOUT(0x1B5E29170);
}

void OZFootage::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  PMClip *v12;
  PMClip *v13;
  CGColorSpace *v14;

  OZSceneNode::operator=(a1, a2);
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelBase::operator=(a1 + 1216, a2 + 1216);
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a2 + 1368);
  PCString::set((PCString *)(a1 + 1376), (const PCString *)(a2 + 1376));
  *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a2 + 1384);
  PCString::set((PCString *)(a1 + 1392), (const PCString *)(a2 + 1392));
  *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
  OZChannelFolder::operator=(a1 + 1408);
  v4 = *(_OWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1546) = *(_OWORD *)(a2 + 1546);
  *(_OWORD *)(a1 + 1536) = v4;
  PCString::set((PCString *)(a1 + 1568), (const PCString *)(a2 + 1568));
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  v7 = v5 + 5976;
  OZChannelFolder::operator=(a1 + 1600);
  OZChannelBase::operator=(a1 + 1728, (uint64_t)(v6 + 1728));
  OZChannelFolder::operator=(a1 + 1984);
  OZChannelBase::operator=(a1 + 2120, (uint64_t)(v6 + 2120));
  OZChannelBase::operator=(a1 + 2272, (uint64_t)(v6 + 2272));
  OZChannelBase::operator=(a1 + 2424, (uint64_t)(v6 + 2424));
  OZChannelBase::operator=(a1 + 2576, (uint64_t)(v6 + 2576));
  OZChannelBase::operator=(a1 + 2728, (uint64_t)(v6 + 2728));
  *(_BYTE *)(a1 + 2984) = v6[2984];
  OZChannelBase::operator=(a1 + 2992, (uint64_t)(v6 + 2992));
  OZChannelBase::operator=(a1 + 3144, (uint64_t)(v6 + 3144));
  OZChannelBase::operator=(a1 + 3296, (uint64_t)(v6 + 3296));
  OZChannelBase::operator=(a1 + 3552, (uint64_t)(v6 + 3552));
  OZChannelBase::operator=(a1 + 3808, (uint64_t)(v6 + 3808));
  OZChannelBase::operator=(a1 + 4368, (uint64_t)(v6 + 4368));
  OZChannelBase::operator=(a1 + 4520, (uint64_t)(v6 + 4520));
  OZChannelBase::operator=(a1 + 4672, (uint64_t)(v6 + 4672));
  OZChannelBase::operator=(a1 + 4824, (uint64_t)(v6 + 4824));
  OZChannelFolder::operator=(a1 + 4976);
  OZChannelBase::operator=(a1 + 5112, (uint64_t)(v6 + 5112));
  OZChannelBase::operator=(a1 + 5264, (uint64_t)(v6 + 5264));
  OZChannelBase::operator=(a1 + 5416, (uint64_t)(v6 + 5416));
  OZChannelBase::operator=(a1 + 5568, (uint64_t)(v6 + 5568));
  OZChannelBase::operator=(a1 + 5720, (uint64_t)(v6 + 5720));
  *(_BYTE *)(a1 + 5976) = *v7;
  OZChannelBase::operator=(a1 + 7464, (uint64_t)(v6 + 7464));
  OZChannelBase::operator=(a1 + 7616, (uint64_t)(v6 + 7616));
  OZChannelBase::operator=(a1 + 7768, (uint64_t)(v6 + 7768));
  OZChannelBase::operator=(a1 + 7920, (uint64_t)(v6 + 7920));
  v8 = *((_OWORD *)v6 + 516);
  *(_QWORD *)(a1 + 8272) = *((_QWORD *)v6 + 1034);
  *(_OWORD *)(a1 + 8256) = v8;
  *(_BYTE *)(a1 + 8280) = v7[2304];
  *(_QWORD *)(a1 + 8296) = *((_QWORD *)v6 + 1037);
  *(_QWORD *)(a1 + 8304) = *((_QWORD *)v6 + 1038);
  *(_DWORD *)(a1 + 8312) = *((_DWORD *)v6 + 2078);
  *(_DWORD *)(a1 + 8316) = *((_DWORD *)v6 + 2079);
  *(_BYTE *)(a1 + 8320) = v7[2344];
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(a1 + 8328), (uint64_t *)v6 + 1041);
  *(_BYTE *)(a1 + 8360) = v7[2384];
  v9 = *((_QWORD *)v6 + 1054);
  if (v9)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v9 + 16))(*((_QWORD *)v6 + 1054));
    v10 = *(_QWORD *)(a1 + 8432);
    if (v10 == v9)
    {
LABEL_10:
      *(_QWORD *)(a1 + 8440) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      goto LABEL_12;
    }
    v11 = (_QWORD *)(a1 + 8432);
    if (!v10)
    {
      *v11 = v9;
LABEL_9:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      goto LABEL_10;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8432);
    if (!v10)
      goto LABEL_11;
    v11 = (_QWORD *)(a1 + 8432);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  *v11 = v9;
  if (v9)
    goto LABEL_9;
LABEL_11:
  *(_QWORD *)(a1 + 8440) = 0;
LABEL_12:
  PCImage::getColorSpace((PCImage *)(v6 + 8368), &v14);
  PCImage::setColorSpace(a1 + 8368, &v14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  *(_QWORD *)(a1 + 8448) = 0xBFF0000000000000;
  std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)(a1 + 8456));
  PCSharedMutex::lock((std::mutex *)(a1 + 8080));
  v12 = *(PMClip **)(a1 + 8072);
  if (v12)
  {
    PMClip::~PMClip(v12);
    MEMORY[0x1B5E29170]();
  }
  *(_QWORD *)(a1 + 8072) = 0;
  if (*((_QWORD *)v6 + 1009))
  {
    v13 = (PMClip *)operator new();
    PMClip::PMClip(v13, *((const PMClip **)v6 + 1009));
    *(_QWORD *)(a1 + 8072) = v13;
  }
  PCSharedMutex::unlock((std::mutex *)(a1 + 8080));
}

void sub_1B2EC6E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

OZScene *OZFootage::canDelete(OZFootage *this)
{
  OZScene *result;
  _QWORD *DependantNodes;
  _QWORD *v4;
  _QWORD *v5;
  void *Node;
  OZImageElement *v7;
  OZImageElement *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  result = (OZScene *)*((_QWORD *)this + 121);
  if (result)
  {
    DependantNodes = (_QWORD *)OZScene::getDependantNodes(result, *((_DWORD *)this + 20));
    if (!DependantNodes)
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    v4 = DependantNodes + 1;
    v5 = (_QWORD *)*DependantNodes;
    if ((_QWORD *)*DependantNodes == DependantNodes + 1)
    {
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    }
    else
    {
      while (1)
      {
        Node = OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v5 + 7));
        if (Node)
        {
          if (v7)
          {
            v8 = v7;
            if (((*(uint64_t (**)(uint64_t, uint64_t))(*((_QWORD *)v7 + 2) + 56))((uint64_t)v7 + 16, 1) & 1) != 0
              || (OZImageElement::isLockedDropZone(v8) & 1) != 0)
            {
              break;
            }
          }
        }
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v5[2];
            v11 = *v10 == (_QWORD)v5;
            v5 = v10;
          }
          while (!v11);
        }
        v5 = v10;
        if (v10 == v4)
          return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
      }
      return 0;
    }
  }
  return result;
}

OZScene *`non-virtual thunk to'OZFootage::canDelete(OZFootage *this)
{
  return OZFootage::canDelete((OZFootage *)((char *)this - 16));
}

BOOL OZFootage::getInvertAlpha(OZFootage *this)
{
  char *v1;
  _BOOL8 result;

  v1 = (char *)this + 8477;
  if (*((_BYTE *)this + 8478))
    return *v1 != 0;
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2992), MEMORY[0x1E0CA2E68], 0.0) != 0;
  *v1 = result;
  v1[1] = 1;
  return result;
}

uint64_t OZFootage::hasVideo(uint64_t a1, void *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8072);
  if (result)
    return PMClip::getVideoDescription(result, a2) == 0;
  return result;
}

uint64_t OZFootage::numAudioTracks(OZFootage *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1009);
  if (v1)
    return *(unsigned int *)(v1 + 516);
  else
    return 0;
}

PCURL *OZFootage::getURL@<X0>(const PCString *this@<X0>, PCURL *a2@<X8>)
{
  if (BYTE1(this[195].var0))
    return PCURL::PCURL(a2, this + 196, 0);
  else
    return PCURL::PCURL(a2, (const PCURL *)&this[1009].var0[38].info);
}

void OZFootage::getFilename(const __CFURL ***this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(const __CFURL ***))(*this)[179])(this))
    OZSceneNodeFile::getFilename((OZSceneNodeFile *)this, a2);
  else
    PMClip::getFilename(this[1009], (PCString *)a2);
}

void OZFootage::getShortFilename(CFURLRef **this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(CFURLRef **))(*this)[179])(this))
    OZSceneNodeFile::getShortFilename((OZSceneNodeFile *)this, a2);
  else
    PMClip::getShortFilename(this[1009], (PCString *)a2);
}

void OZFootage::getExtension(const __CFURL ***this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(const __CFURL ***))(*this)[179])(this))
    OZSceneNodeFile::getExtension((OZSceneNodeFile *)this, a2);
  else
    PMClip::getExtension(this[1009], (PCURL *)a2);
}

void OZFootage::getAsFileSystemString(const PCString **this@<X0>, PCSharedCount *a2@<X8>)
{
  if (((unsigned int (*)(const PCString **))(*this)[179].var0)(this))
    OZSceneNodeFile::getAsFileSystemString((OZSceneNodeFile *)this, a2);
  else
    PMClip::getAsFileSystemString(this[1009], (PCString *)a2);
}

void OZFootage::getAsURLString(OZFootage *this@<X0>, PCString *a2@<X8>)
{
  if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
    OZSceneNodeFile::getAsURLString((const PCString *)this, a2);
  else
    PMClip::getAsURLString(*((const __CFURL ***)this + 1009), (PCURL *)a2);
}

uint64_t OZFootage::setNeedsDZFileOpen(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8320) = a2;
  return this;
}

uint64_t OZFootage::setPixelAspectRatioFromFile(OZFootage *this, char a2)
{
  uint64_t result;
  double v5;

  result = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
  if ((result & 1) == 0)
  {
    v5 = *(double *)(*((_QWORD *)this + 1009) + 416);
    if (v5 > 0.0)
      return OZChannel::setValue((OZChannel *)((char *)this + 3144), MEMORY[0x1E0CA2E68], v5, a2);
  }
  return result;
}

uint64_t OZFootage::setGammaFromFile(OZFootage *this)
{
  uint64_t result;
  uint64_t v3;
  double WorkingGamma;
  OZChannel *v5;
  const CMTime *v6;

  result = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
  if ((result & 1) == 0)
  {
    v3 = *((_QWORD *)this + 1009);
    if (v3 && (WorkingGamma = *(double *)(v3 + 424), WorkingGamma > 0.0))
    {
      v5 = (OZChannel *)((char *)this + 7616);
      v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    }
    else
    {
      WorkingGamma = PCInfo::getWorkingGamma((PCInfo *)result);
      v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
      v5 = (OZChannel *)((char *)this + 7616);
    }
    return OZChannel::setValue(v5, v6, WorkingGamma, 0);
  }
  return result;
}

void OZFootage::setClip(OZFootage *this, PMClip *a2, int a3, int a4, uint64_t a5)
{
  char *v10;
  PMClip *v11;
  int v12;
  double *v13;
  double v14;
  uint64_t v15;
  double DisplayFrameRate;
  int isSequence;
  double v18;
  uint64_t v19;
  uint64_t v20;
  OZChannelBase *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  OZChannelBase *v25;
  PCColor *v26;
  PCInfo *v27;
  float WorkingGamma;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  float v40;
  float v41;
  OZChannelBase *v42;
  OZChannelBase *v43;
  OZChannelBase *v44;
  std::mutex *v45;
  OZChannelBase *v46;
  OZChannelBase *v47;
  OZChannelBase *v48;
  double v49;
  PCString __dst;
  PCString v51[3];
  CGColorSpace *v52[5];

  v52[3] = *(CGColorSpace **)MEMORY[0x1E0C80C00];
  v10 = (char *)this + 8316;
  v45 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8080));
  v11 = (PMClip *)*((_QWORD *)this + 1009);
  if (v11)
  {
    PMClip::~PMClip(v11);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 1009) = a2;
  *((_DWORD *)this + 2120) = 0;
  v10[168] = 0;
  *((_QWORD *)this + 1061) = 0;
  *((_DWORD *)this + 2118) = 0;
  *(_DWORD *)((char *)this + 8475) = 0;
  v12 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
  v13 = (double *)*((_QWORD *)this + 1009);
  v14 = v13[36];
  *((double *)this + 1037) = v14;
  *((double *)this + 1038) = PMClip::getSeconds((PMClip *)v13, v14);
  *((_DWORD *)this + 2078) = PMClip::getDynamicRangeType(*((PMClip **)this + 1009));
  OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
  *(_WORD *)(v10 + 1) = 0;
  if ((*(double (**)(OZFootage *))(*(_QWORD *)this + 1296))(this) == 0.0)
    *v10 = 0;
  if (*((_QWORD *)this + 121))
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)&__dst);
    PCString::set((PCString *)this + 1036, &__dst);
    PCString::~PCString(&__dst);
  }
  v15 = *((_QWORD *)this + 1009);
  DisplayFrameRate = *(double *)(v15 + 360);
  PCURL::PCURL((PCURL *)&__dst, (const PCURL *)(v15 + 1224));
  isSequence = PCURL::isSequence((const __CFURL **)&__dst);
  PCURL::~PCURL((PCURL *)&__dst);
  if (isSequence)
  {
    if ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this))
    {
      v19 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this);
      DisplayFrameRate = OZSceneSettings::getDisplayFrameRate((OZSceneSettings *)(v19 + 336));
      v18 = PMClip::setFrameRate(*((PMClip **)this + 1009), DisplayFrameRate);
    }
    else
    {
      v20 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
      if (v20)
      {
        DisplayFrameRate = OZSceneSettings::getDisplayFrameRate((OZSceneSettings *)(v20 + 336));
        v18 = PMClip::setFrameRate(*((PMClip **)this + 1009), DisplayFrameRate);
      }
    }
  }
  if (!v12 || !*v10)
  {
    LODWORD(v18) = *(_DWORD *)(*((_QWORD *)this + 1009) + 400);
    OZChannel::setValue((OZChannel *)((char *)this + 3296), MEMORY[0x1E0CA2E68], (double)*(unint64_t *)&v18, a5);
    (*(void (**)(OZFootage *, uint64_t, double))(*(_QWORD *)this + 1304))(this, a5, DisplayFrameRate);
    OZFootage::setPixelAspectRatioFromFile(this, a5);
    if (a4)
      OZFootage::setGammaFromFile(this);
    if (a3)
      OZFootage::guessAlphaFormat(this, a5);
  }
  v44 = (OZChannelBase *)((char *)this + 1600);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1600), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1728), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1984), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2992), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3144), 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3296), 2, a5);
  v43 = (OZChannelBase *)((char *)this + 3552);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3552), 2, a5);
  v42 = (OZChannelBase *)((char *)this + 3808);
  OZChannelBase::resetFlag((OZChannelBase *)this + 34, 2, a5);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 5984), 2, a5);
  OZChannelBase::setFlag((OZChannelBase *)this + 39, 2, a5);
  v47 = (OZChannelBase *)((char *)this + 4520);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4520), 2, a5);
  v46 = (OZChannelBase *)((char *)this + 4672);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4672), 2, a5);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4824), 2, a5);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4976), 2, a5);
  v48 = (OZChannelBase *)((char *)this + 7616);
  OZChannelBase::setFlag((OZChannelBase *)this + 68, 2, a5);
  v21 = OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7768), 2, a5);
  v22 = **((_QWORD **)this + 1009);
  if (v22)
    v23 = (*(uint64_t (**)(OZChannelBase *))(v22 + 336))(v21);
  else
    v23 = 1;
  OZChannel::setValue((OZChannel *)((char *)this + 7768), MEMORY[0x1E0CA2E68], (double)v23, a5);
  PCSharedCount::PCSharedCount((PCSharedCount *)v51);
  v52[0] = 0;
  v24 = *((_QWORD *)this + 1009);
  if (v24 && !PMClip::getVideoDescription(v24, &__dst))
  {
    v29 = 1;
  }
  else
  {
    OZChannelBase::setFlag(v44, 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1728), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1984), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2992), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3144), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3296), 2, a5);
    OZChannelBase::setFlag(v43, 2, a5);
    OZChannelBase::setFlag(v42, 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5984), 2, a5);
    v25 = OZChannelBase::setFlag(v48, 2, a5);
    v26 = (PCColor *)PCColor::BLACK((PCColor *)v25);
    OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E0CA2E68], v26, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E0CA2E68], 0.0, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 1728), MEMORY[0x1E0CA2E68], 0.0, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 3144), MEMORY[0x1E0CA2E68], 1.0, a5);
    v27 = (PCInfo *)OZChannel::setValue((OZChannel *)((char *)this + 3296), MEMORY[0x1E0CA2E68], 0.0, a5);
    WorkingGamma = PCInfo::getWorkingGamma(v27);
    OZChannel::setValue((OZChannel *)v48, MEMORY[0x1E0CA2E68], WorkingGamma, a5);
    v29 = 0;
  }
  v30 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
  v31 = *((_QWORD *)this + 1009);
  if ((v30 & 1) != 0)
  {
LABEL_29:
    if (!v31)
      goto LABEL_49;
    goto LABEL_30;
  }
  if (!v31)
    goto LABEL_49;
  if (*(_BYTE *)(v31 + 408))
  {
    OZChannelBase::setFlag(v44, 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1728), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1984), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2992), 2, a5);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3296), 2, a5);
    OZChannelBase::setFlag(v43, 2, a5);
    OZChannelBase::setFlag(v42, 2, a5);
    OZChannelBase::resetFlag((OZChannelBase *)this + 39, 2, a5);
    OZChannelBase::resetFlag(v47, 2, a5);
    OZChannelBase::resetFlag(v46, 2, a5);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4824), 2, a5);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4976), 2, a5);
    OZChannel::setValue((OZChannel *)((char *)this + 3296), MEMORY[0x1E0CA2E68], 0.0, a5);
    v31 = *((_QWORD *)this + 1009);
    goto LABEL_29;
  }
LABEL_30:
  if (*(_DWORD *)(v31 + 344) != 1
    || (OZChannelBase::resetFlag(v47, 2, a5), OZChannelBase::resetFlag(v46, 2, a5), *((_QWORD *)this + 1009)))
  {
    if (v29)
    {
      if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0
        || (v32 = *((_QWORD *)this + 1009)) == 0
        || !*(_BYTE *)(v32 + 408))
      {
        v33 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
        v34 = *((_QWORD *)this + 1009);
        v35 = v34 ? v33 : 1;
        if (((v35 & 1) != 0 || !*(_BYTE *)(v34 + 1241)) && !*(_BYTE *)(v34 + 452))
          OZChannelBase::resetFlag(v48, 2, a5);
      }
    }
    if (!v12 || !*v10)
    {
      v36 = *((_QWORD *)this + 1009);
      v37 = *(_DWORD *)(v36 + 288);
      v38 = *(_DWORD *)(v36 + 292);
      v49 = 0.0;
      if (v37 <= v38)
      {
        (*(void (**)(_QWORD, double *))(**(_QWORD **)(*((_QWORD *)this + 598) + 8) + 256))(*(_QWORD *)(*((_QWORD *)this + 598) + 8), &v49);
        v41 = (double)v38 / v49;
        OZChannel::setMax((OZChannel *)v47, (float)((float)v37 / v41));
        v39 = (double)v37;
      }
      else
      {
        (*(void (**)(_QWORD, double *))(**(_QWORD **)(*((_QWORD *)this + 579) + 8) + 256))(*(_QWORD *)(*((_QWORD *)this + 579) + 8), &v49);
        v39 = (double)v37;
        v40 = (double)v37 / v49;
        OZChannel::setMax((OZChannel *)v46, (double)(float)((float)v38 / v40));
      }
      OZChannel::setValue((OZChannel *)v47, MEMORY[0x1E0CA2E68], v39, a5);
      OZChannel::setValue((OZChannel *)v46, MEMORY[0x1E0CA2E68], (double)v38, a5);
      OZChannel::setDefaultValue((OZChannel *)v47, v39);
      OZChannel::setDefaultValue((OZChannel *)v46, (double)v38);
    }
  }
LABEL_49:
  *v10 = 1;
  (*(void (**)(OZFootage *))(*(_QWORD *)this + 1464))(this);
  PCCFRef<CGColorSpace *>::~PCCFRef(v52);
  PCString::~PCString(v51);
  PCSharedMutex::unlock(v45);
}

void sub_1B2EC7AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CGColorSpace **a15, PCString *a16, uint64_t a17, std::mutex *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(a15);
  PCString::~PCString(a16);
  PCSharedMutex::unlock(a18);
  _Unwind_Resume(a1);
}

BOOL OZFootage::openMedia(OZFootage *this)
{
  const PCURL *v3;
  const __CFURL **v4;
  _BOOL4 isDefaultDropZoneFootageForType;
  uint64_t v6;
  const __CFURL **v7;
  _BOOL4 v8;
  const __CFURL **v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  PCString *v13;
  const PCURL *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  OZPreferenceManager *v18;
  OZPreferenceManager *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  PCString v24;
  PCString v25;
  PCString v26;
  PCString v27;
  PCString v28;
  PCString v29;
  PCString v30;
  PCSharedCount v31;
  PCString v32;
  const __CFURL *v33;
  const __CFURL *v34;
  _BYTE v35[8];
  _BYTE v36[8];
  PCString v37;
  _BYTE v38[8];
  const void *v39;
  _BYTE v40[8];

  if (*((_BYTE *)this + 1560) || *((_QWORD *)this + 1009))
    return 0;
  v3 = (const PCURL *)*((_QWORD *)this + 193);
  if (!v3)
  {
    LODWORD(v6) = 0;
    goto LABEL_25;
  }
  PCURL::PCURL((PCURL *)v40, v3);
  PCURL::PCURL((PCURL *)&v39, 0);
  v4 = (const __CFURL **)PCURL::PCURL((PCURL *)v38, (const PCURL *)v40);
  isDefaultDropZoneFootageForType = OZImageElement::isDefaultDropZoneFootageForType(v4, 0);
  PCURL::~PCURL((PCURL *)v38);
  if (isDefaultDropZoneFootageForType)
  {
    OZImageElement::defaultDropZoneFootageForType(0, (PCURL *)&v37);
    PCURL::operator=(&v39, (const __CFURL **)&v37);
  }
  else
  {
    v7 = (const __CFURL **)PCURL::PCURL((PCURL *)v36, (const PCURL *)v40);
    v8 = OZImageElement::isDefaultDropZoneFootageForType(v7, 3u);
    PCURL::~PCURL((PCURL *)v36);
    if (v8)
    {
      OZImageElement::defaultDropZoneFootageForType(3u, (PCURL *)&v37);
      PCURL::operator=(&v39, (const __CFURL **)&v37);
    }
    else
    {
      v9 = (const __CFURL **)PCURL::PCURL((PCURL *)v35, (const PCURL *)v40);
      v10 = OZImageElement::isDefaultDropZoneFootageForType(v9, 3u);
      PCURL::~PCURL((PCURL *)v35);
      if (v10)
      {
        OZImageElement::defaultDropZoneFootageForType(3u, (PCURL *)&v37);
        PCURL::operator=(&v39, (const __CFURL **)&v37);
      }
      else
      {
        PCURL::PCURL((PCURL *)&v34, (const PCURL *)v40);
        v11 = OZImageElement::isDefaultDropZoneFootageForType(&v34, 1u);
        PCURL::~PCURL((PCURL *)&v34);
        if (v11)
        {
          OZImageElement::defaultDropZoneFootageForType(1u, (PCURL *)&v37);
          PCURL::operator=(&v39, (const __CFURL **)&v37);
        }
        else
        {
          PCURL::PCURL((PCURL *)&v33, (const PCURL *)v40);
          v12 = OZImageElement::isDefaultDropZoneFootageForType(&v33, 2u);
          PCURL::~PCURL((PCURL *)&v33);
          if (!v12)
          {
            v6 = OZFootage::openURL((PCString *)this, *((const PCURL **)this + 193), 0, 0);
            if (!(_DWORD)v6)
              goto LABEL_24;
            OZSceneNodeFile::setIsFileMissing((uint64_t)this, 1);
            PCString::PCString(&v37, "Users/Shared/Motion");
            PCURL::getAsFileSystemString(*((const __CFURL ***)this + 193), &v32);
            v15 = PCString::find(&v32, &v37);
            v16 = PCString::size(&v32);
            if ((v15 & 0x80000000) == 0)
            {
              v17 = v16;
              PCSharedCount::PCSharedCount(&v31);
              v19 = (OZPreferenceManager *)OZPreferenceManager::Instance(v18);
              OZPreferenceManager::getContentPath(v19, (PCString *)&v31);
              v20 = PCString::size(&v37);
              PCString::substr(&v32, (int)(v20 + v15), v17 - (v20 + v15), (CFStringRef *)&v29.var0);
              operator+((PCString *)&v31, &v29, &v30);
              PCString::set(&v32, &v30);
              PCString::~PCString(&v30);
              PCString::~PCString(&v29);
              PCURL::PCURL((PCURL *)&v30, &v32, 0);
              v6 = OZFootage::openURL((PCString *)this, (const PCURL *)&v30, 0, 1);
              if ((_DWORD)v6)
              {
                PCString::PCString(&v29, "Content.localized");
                v21 = PCString::find(&v32, &v29);
                v22 = PCString::size(&v29);
                if ((v21 & 0x80000000) == 0)
                {
                  v23 = v22;
                  PCString::PCString(&v28, "Content.localized/Template Media.localized");
                  PCString::replace(&v32, v21, v23, &v28);
                  PCString::~PCString(&v28);
                  PCURL::PCURL((PCURL *)&v28, &v32, 0);
                  v6 = OZFootage::openURL((PCString *)this, (const PCURL *)&v28, 0, 1);
                  PCURL::~PCURL((PCURL *)&v28);
                }
                PCString::~PCString(&v29);
              }
              PCURL::~PCURL((PCURL *)&v30);
              PCString::~PCString((PCString *)&v31);
            }
            PCString::~PCString(&v32);
            PCString::~PCString(&v37);
            if (!(_DWORD)v6)
              goto LABEL_24;
            goto LABEL_20;
          }
          OZImageElement::defaultDropZoneFootageForType(2u, (PCURL *)&v37);
          PCURL::operator=(&v39, (const __CFURL **)&v37);
        }
      }
    }
  }
  PCURL::~PCURL((PCURL *)&v37);
  if (*((_BYTE *)this + 1540) && !*((_BYTE *)this + 8320))
  {
    LODWORD(v6) = 0;
    *((_BYTE *)this + 8319) = 1;
  }
  else if (v39)
  {
    v6 = OZFootage::openURL((PCString *)this, (const PCURL *)&v39, 0, 1);
    if ((_DWORD)v6)
    {
LABEL_20:
      PCString::PCString(&v37, "Motion.app/");
      PCURL::getAsFileSystemString(*((const __CFURL ***)this + 193), &v27);
      PCString::PCString(&v26, &v37);
      v6 = OZFootage::openByReplacingSubPath((PCString *)this, &v27, &v26, v6);
      PCString::~PCString(&v26);
      PCString::~PCString(&v27);
      PCString::~PCString(&v37);
      if ((_DWORD)v6)
      {
        PCString::PCString(v13, ".app/");
        PCURL::getAsFileSystemString(*((const __CFURL ***)this + 193), &v25);
        PCString::PCString(&v24, &v37);
        LODWORD(v6) = OZFootage::openByReplacingSubPath((PCString *)this, &v25, &v24, v6);
        PCString::~PCString(&v24);
        PCString::~PCString(&v25);
        PCString::~PCString(&v37);
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
LABEL_24:
  PCURL::~PCURL((PCURL *)&v39);
  PCURL::~PCURL((PCURL *)v40);
LABEL_25:
  if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
  {
    v14 = (const PCURL *)*((_QWORD *)this + 194);
    if (v14)
      LODWORD(v6) = OZFootage::openURL((PCString *)this, v14, 0, 1);
  }
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) == 0)
    *((_BYTE *)this + 1560) = 1;
  return (_DWORD)v6 != 0;
}

void sub_1B2EC8070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, PCString a12, PCString a13, PCString a14, PCString a15, PCString a16, PCString a17, PCString a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  PCURL::~PCURL((PCURL *)&a14);
  PCString::~PCString(&a15);
  PCURL::~PCURL((PCURL *)&a16);
  PCString::~PCString(&a17);
  PCString::~PCString(&a18);
  PCString::~PCString((PCString *)(v25 - 64));
  PCURL::~PCURL((PCURL *)(v25 - 48));
  PCURL::~PCURL((PCURL *)(v25 - 40));
  _Unwind_Resume(a1);
}

PCString *operator+@<X0>(PCString *a1@<X0>, const PCString *a2@<X1>, PCString *a3@<X8>)
{
  PCString::PCString(a3, a1);
  return PCString::append(a3, a2);
}

void sub_1B2EC8234(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZFootage::guessAlphaFormat(OZFootage *this, uint64_t a2)
{
  std::mutex *v4;
  PMClip *v5;
  CGColorSpace **v6;
  PCColor *v7;
  double v8;
  PCColor *v9;
  double v10;
  PCColor *v11;
  double v12;
  PCColor *v13;
  double v14;
  char v15;
  PCColor v16;
  int v17;

  v4 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 8080));
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) == 0)
  {
    v5 = (PMClip *)*((_QWORD *)this + 1009);
    if (v5)
    {
      if (!*((_DWORD *)v5 + 311))
        PMClip::open(v5);
      v17 = 0;
      PCColor::PCColor(&v16);
      v15 = 0;
      v6 = PMClip::guessAlphaFormat(*((_QWORD *)this + 1009), 0, &v17, (uint64_t)&v16, &v15);
      switch(v17)
      {
        case 0:
          v7 = (PCColor *)PCColor::BLACK((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E0CA2E68], v7, a2);
          v8 = 0.0;
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E0CA2E68], 0.0, a2);
          goto LABEL_16;
        case 1:
          v9 = (PCColor *)PCColor::BLACK((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E0CA2E68], v9, a2);
          v10 = 0.0;
          v8 = 1.0;
          if (v15)
            v10 = 1.0;
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E0CA2E68], v10, a2);
          goto LABEL_16;
        case 2:
          v11 = (PCColor *)PCColor::BLACK((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E0CA2E68], v11, a2);
          v12 = 0.0;
          if (v15)
            v12 = 1.0;
          v8 = 2.0;
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E0CA2E68], v12, a2);
          goto LABEL_16;
        case 3:
          v13 = (PCColor *)PCColor::WHITE((PCColor *)v6);
          OZChannelColorNoAlpha::setColor((OZFootage *)((char *)this + 1984), MEMORY[0x1E0CA2E68], v13, a2);
          v14 = 0.0;
          if (v15)
            v14 = 1.0;
          v8 = 3.0;
          OZChannel::setValue((OZChannel *)((char *)this + 2992), MEMORY[0x1E0CA2E68], v14, a2);
LABEL_16:
          OZChannel::setValue((OZChannel *)((char *)this + 1728), MEMORY[0x1E0CA2E68], v8, a2);
          break;
        default:
          break;
      }
      PMClip::setAlphaFormat(*((_QWORD *)this + 1009), 0, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v16.var1._obj);
    }
  }
  PCSharedMutex::unlock_shared(v4);
}

void sub_1B2EC8464(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

void OZFootage::setClipMinimal(OZFootage *this, PMClip *a2)
{
  std::mutex *v4;
  PMClip *v5;
  PCString v6;

  v4 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8080));
  v5 = (PMClip *)*((_QWORD *)this + 1009);
  if (v5)
  {
    PMClip::~PMClip(v5);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 1009) = a2;
  OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
  if (*((_QWORD *)this + 121))
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)&v6);
    PCString::set((PCString *)this + 1036, &v6);
    PCString::~PCString(&v6);
  }
  (*(void (**)(OZFootage *))(*(_QWORD *)this + 1464))(this);
  PCSharedMutex::unlock(v4);
}

void sub_1B2EC8548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  std::mutex *v10;

  PCString::~PCString(&a10);
  PCSharedMutex::unlock(v10);
  _Unwind_Resume(a1);
}

PMClip *OZFootage::ensureClipIsOpen(OZFootage *this)
{
  PMClip *result;

  result = (PMClip *)*((_QWORD *)this + 1009);
  if (!*((_DWORD *)result + 311))
    return (PMClip *)PMClip::open(result);
  return result;
}

double OZFootage::didFinishLoadingIntoScene(OZFootage *this)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  CMTime v5;
  CMTime v6;
  __n128 v7;
  CMTimeEpoch v8;

  OZSceneNodeFile::didFinishLoadingIntoScene(this);
  if ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this))
  {
    if (*((_DWORD *)this + 2066) == 1)
    {
      v7 = 0uLL;
      v8 = 0;
      v3 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), &v7);
      v4 = *((_QWORD *)this + 1032);
      *(__n128 *)&v5.value = v7;
      v5.epoch = v8;
      PC_CMTimeFromSampleNumberAndDuration(v4, &v5, &v6);
      result = *(double *)&v6.value;
      *((CMTime *)this + 344) = v6;
    }
  }
  return result;
}

double `non-virtual thunk to'OZFootage::didFinishLoadingIntoScene(OZFootage *this)
{
  return OZFootage::didFinishLoadingIntoScene((OZFootage *)((char *)this - 16));
}

void OZFootage::didAddToScene(OZFootage *this, OZScene *a2, double a3)
{
  uint64_t v5;
  double DisplayFrameRate;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  __n128 FrameDuration;
  uint64_t v13;
  CMTime v14;
  CMTime v15;
  PCString v16[2];
  CMTimeEpoch v17;

  v5 = *((_QWORD *)this + 1009);
  if (v5)
  {
    if (*(_BYTE *)(v5 + 1240))
    {
      if (a2)
      {
LABEL_4:
        DisplayFrameRate = OZSceneSettings::getDisplayFrameRate((OZScene *)((char *)a2 + 336));
        v5 = *((_QWORD *)this + 1009);
LABEL_10:
        PMClip::setFrameRate((PMClip *)v5, DisplayFrameRate);
        (*(void (**)(OZFootage *, _QWORD, double))(*(_QWORD *)this + 1304))(this, 0, DisplayFrameRate);
        goto LABEL_11;
      }
LABEL_9:
      DisplayFrameRate = *(double *)(v5 + 360);
      goto LABEL_10;
    }
    if ((!*(_QWORD *)v5 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5))
      && (*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1376))(this) >= 2)
    {
      v5 = *((_QWORD *)this + 1009);
      if (a2)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
LABEL_11:
  v7 = *((_QWORD *)this + 1009);
  if (a2 && v7)
  {
    if (!*(_BYTE *)(v7 + 448))
      goto LABEL_16;
    LODWORD(a3) = *(_DWORD *)(v7 + 344);
    v8 = *((double *)a2 + 46);
    v9 = (double)*(unint64_t *)&a3 / *(double *)(v7 + 360);
    PMClip::setFrameRate((PMClip *)v7, v8);
    *(_DWORD *)(*((_QWORD *)this + 1009) + 344) = (v9 * v8);
    (*(void (**)(OZFootage *, _QWORD, double))(*(_QWORD *)this + 1304))(this, 0, v8);
    v7 = *((_QWORD *)this + 1009);
  }
  if (v7)
  {
LABEL_16:
    if (*(double *)(v7 + 416) > 0.0)
      goto LABEL_21;
  }
  if ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this))
  {
    v10 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this);
    if (*(_DWORD *)(v10 + 344) == *((_DWORD *)this + 2074) && *(_DWORD *)(v10 + 348) == *((_DWORD *)this + 2075))
      OZChannel::setValue((OZChannel *)((char *)this + 3144), MEMORY[0x1E0CA2E68], *(double *)(v10 + 384), 1);
  }
LABEL_21:
  if (*((_QWORD *)this + 1009) && ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) == 0)
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)v16);
    PCString::set((PCString *)this + 1036, v16);
    PCString::~PCString(v16);
  }
  v16[0].var0 = 0;
  v16[1].var0 = 0;
  v17 = 0;
  v11 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this);
  FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), (__n128 *)v16);
  if ((*(uint64_t (**)(OZFootage *, __n128))(*(_QWORD *)this + 272))(this, FrameDuration))
  {
    if (*((_DWORD *)this + 2066) == 1)
    {
      v13 = *((_QWORD *)this + 1032);
      *(_OWORD *)&v14.value = *(_OWORD *)&v16[0].var0;
      v14.epoch = v17;
      PC_CMTimeFromSampleNumberAndDuration(v13, &v14, &v15);
      *((CMTime *)this + 344) = v15;
    }
  }
}

void sub_1B2EC8860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCString a16)
{
  PCString::~PCString(&a16);
  _Unwind_Resume(a1);
}

CGColorSpace **OZFootage::getBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  char v31;
  CGColorSpace *v32;
  CGColorSpace *v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  __int128 v40;

  v10 = xmmword_1B30503B0;
  v11 = 0x3FF0000000000000;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0x3FF0000000000000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0x3FF0000000000000;
  v22 = 0;
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v24 = *MEMORY[0x1E0CA2E68];
  v25 = v3;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0x100000000;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 768;
  v35 = 0x408F400000000000;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  v40 = _Q0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 1568))(a1, a2, a3, &v10);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v33);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v32);
}

void sub_1B2EC895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32)
{
  CGColorSpace **v32;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v32);
  _Unwind_Resume(a1);
}

CGColorSpace **`non-virtual thunk to'OZFootage::getBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OZFootage::getBounds(a1 - 1576, a2, a3);
}

void OZFootage::getBounds(uint64_t a1, double *a2, const CMTime *a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int ValueAsInt;
  int v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  BOOL v26;
  double v27;
  _DWORD v28[10];
  PCString v29;
  _BYTE v30[40];
  PCString v31;

  PMLayerDescription::PMLayerDescription((PMLayerDescription *)v30);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1))
  {
    v8 = *(_DWORD *)(a1 + 8296);
    v9 = *(_DWORD *)(a1 + 8300);
  }
  else if (*(_DWORD *)(a4 + 92))
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v28);
    PMClip::getLayerDescription(*(PMClip **)(a1 + 8072), (PMLayerDescription *)v28, *(_DWORD *)(a4 + 92));
    v8 = v28[2];
    v9 = v28[3];
    PCString::~PCString(&v29);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8072);
    v8 = *(_DWORD *)(v10 + 288);
    v9 = *(_DWORD *)(v10 + 292);
  }
  ValueAsInt = *(_DWORD *)(a1 + 8488);
  if (!ValueAsInt)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 4520), a3, 0.0);
    *(_DWORD *)(a1 + 8488) = ValueAsInt;
  }
  v12 = *(_DWORD *)(a1 + 8492);
  if (!v12)
  {
    v12 = OZChannel::getValueAsInt((OZChannel *)(a1 + 4672), a3, 0.0);
    *(_DWORD *)(a1 + 8492) = v12;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1) & 1) != 0
    || (v13 = *(_QWORD *)(a1 + 8072)) == 0
    || !*(_BYTE *)(v13 + 408))
  {
    v14 = *(_DWORD *)(a4 + 92) || ValueAsInt == 0;
    v15 = !v14;
    if (v15 && v12 != 0)
    {
      v8 = ValueAsInt;
      v9 = v12;
    }
  }
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6120), MEMORY[0x1E0CA2E68], 0.0);
  v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6272), MEMORY[0x1E0CA2E68], 0.0);
  v19 = v18;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6576), MEMORY[0x1E0CA2E68], 0.0);
  v21 = v20;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6424), MEMORY[0x1E0CA2E68], 0.0);
  v23 = v8 - (vcvtmd_s64_f64(v17) + vcvtmd_s64_f64(v19));
  v24 = v9 - (vcvtmd_s64_f64(v21) + vcvtmd_s64_f64(v22));
  v25 = -1.0;
  v26 = v23 < 1 || v24 < 1;
  v27 = -1.0;
  if (!v26)
  {
    v27 = (double)v23;
    v25 = (double)v24;
    *a2 = (double)v23 * -0.5;
    a2[1] = (double)v24 * -0.5;
  }
  a2[2] = v27;
  a2[3] = v25;
  PCString::~PCString(&v31);
}

void sub_1B2EC8B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  PCString *v12;
  va_list va;

  va_start(va, a12);
  PCString::~PCString(v12 + 5);
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZFootage::getDimensions(OZFootage *this, float *a2, float *a3, const OZRenderState *a4)
{
  uint64_t v4;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  CGColorSpace *v33;
  CGColorSpace *v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;
  uint64_t v40;
  __int128 v41;

  v11 = xmmword_1B30503B0;
  v12 = 0x3FF0000000000000;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0x3FF0000000000000;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0x3FF0000000000000;
  v23 = 0;
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v25 = *MEMORY[0x1E0CA2E68];
  v26 = v4;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0x100000000;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 768;
  v36 = 0x408F400000000000;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  v41 = _Q0;
  (*(void (**)(OZFootage *, float *, float *, const OZRenderState *, __int128 *))(*(_QWORD *)this + 1576))(this, a2, a3, a4, &v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v34);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v33);
}

void sub_1B2EC8CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32)
{
  CGColorSpace **v32;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v32);
  _Unwind_Resume(a1);
}

CGColorSpace **`non-virtual thunk to'OZFootage::getDimensions(OZFootage *this, float *a2, float *a3, const OZRenderState *a4)
{
  return OZFootage::getDimensions((OZFootage *)((char *)this - 1576), a2, a3, a4);
}

float OZFootage::getDimensions(uint64_t a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  float v16;
  float result;
  __int128 v18;
  __int128 v19;

  v18 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v19 = _Q0;
  v12 = (__int128 *)(a1 + 8496);
  if (*(double *)(a1 + 8512) >= 0.0 && *(double *)(a1 + 8520) >= 0.0)
  {
    v14 = *(_OWORD *)(a1 + 8512);
    v18 = *v12;
    v19 = v14;
  }
  else
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1568))(a1, &v18, a4, a5);
    v13 = v19;
    *v12 = v18;
    v12[1] = v13;
  }
  v15 = *((double *)&v19 + 1);
  v16 = *(double *)&v19;
  *a2 = v16;
  result = v15;
  *a3 = result;
  return result;
}

void OZFootage::getKindName(OZFootage *this@<X0>, PCSharedCount *a2@<X8>)
{
  char v4;
  uint64_t v5;
  PMMediaManager *VideoDescription;
  uint64_t v7;
  PMMediaManager *Instance;
  uint64_t Reader;
  PCString v10;
  _BYTE __dst[448];
  PCString v12[3];
  CGColorSpace *v13[4];

  v13[3] = *(CGColorSpace **)MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
  PCSharedCount::PCSharedCount(a2);
  if ((v4 & 1) == 0)
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)v12);
    v13[0] = 0;
    v5 = *((_QWORD *)this + 1009);
    if (!v5)
      goto LABEL_11;
    VideoDescription = (PMMediaManager *)PMClip::getVideoDescription(v5, __dst);
    v7 = *((_QWORD *)this + 1009);
    if (v7)
    {
      if ((_DWORD)VideoDescription)
      {
        if (*(_DWORD *)(v7 + 516))
        {
          PCURL::PCURL((PCURL *)&v10, CFSTR("Media Info QuickTime Audio"));
          PCString::set((PCString *)a2, &v10);
LABEL_10:
          PCString::~PCString(&v10);
        }
LABEL_11:
        PCCFRef<CGColorSpace *>::~PCCFRef(v13);
        PCString::~PCString(v12);
        return;
      }
    }
    else if ((_DWORD)VideoDescription)
    {
      goto LABEL_11;
    }
    if (*(_BYTE *)(v7 + 1240))
    {
      PCURL::PCURL((PCURL *)&v10, CFSTR("Media Info Image Sequence"));
      PCString::set((PCString *)a2, &v10);
    }
    else
    {
      Instance = (PMMediaManager *)PMMediaManager::getInstance(VideoDescription);
      (*(void (**)(PCString *__return_ptr, OZFootage *))(*(_QWORD *)this + 1232))(&v10, this);
      Reader = PMMediaManager::findReader(Instance, (const __CFURL **)&v10);
      PCURL::~PCURL((PCURL *)&v10);
      if (!Reader)
        goto LABEL_11;
      if ((*(unsigned int (**)(uint64_t))(Reader + 248))(Reader) == 1346651680)
      {
        PCURL::PCURL((PCURL *)&v10, CFSTR("Media Info PDF"));
        PCString::set((PCString *)a2, &v10);
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(Reader + 232))(Reader))
          PCURL::PCURL((PCURL *)&v10, CFSTR("Media Info QuickTime Movie"));
        else
          PCURL::PCURL((PCURL *)&v10, CFSTR("Media Info Still Image"));
        PCString::set((PCString *)a2, &v10);
      }
    }
    goto LABEL_10;
  }
}

void sub_1B2EC8FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString *v9;
  PCString *v10;
  CGColorSpace **v11;

  PCString::~PCString(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef(v11);
  PCString::~PCString(v9);
  PCString::~PCString(v10);
  _Unwind_Resume(a1);
}

void OZFootage::getFormatName(PMClip **this@<X0>, PCSharedCount *a2@<X8>)
{
  if ((*((unsigned int (**)(PMClip **))*this + 179))(this))
    PCSharedCount::PCSharedCount(a2);
  else
    PMClip::getFormatName(this[1009], (PCString *)a2);
}

void OZFootage::getCodecName(PMClip **this@<X0>, PCSharedCount *a2@<X8>)
{
  if ((*((unsigned int (**)(PMClip **))*this + 179))(this))
    PCSharedCount::PCSharedCount(a2);
  else
    PMClip::getCodecName(this[1009], (PCURL *)a2);
}

uint64_t OZFootage::getDisplayWidth(OZFootage *this)
{
  unsigned int *v2;

  if (*((_QWORD *)this + 1009) && !(*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
    v2 = (unsigned int *)(*((_QWORD *)this + 1009) + 288);
  else
    v2 = (unsigned int *)((char *)this + 8296);
  return *v2;
}

uint64_t OZFootage::getDisplayHeight(OZFootage *this)
{
  unsigned int *v2;

  if (*((_QWORD *)this + 1009) && !(*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
    v2 = (unsigned int *)(*((_QWORD *)this + 1009) + 292);
  else
    v2 = (unsigned int *)((char *)this + 8300);
  return *v2;
}

uint64_t OZFootage::getLayers(OZFootage *this)
{
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0)
    return 1;
  else
    return *(unsigned int *)(*((_QWORD *)this + 1009) + 392);
}

uint64_t OZFootage::getPages(OZFootage *this)
{
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0)
    return 0;
  else
    return *(unsigned int *)(*((_QWORD *)this + 1009) + 396);
}

void OZFootage::getLayerName(PMClip **this@<X0>, unsigned int a2@<W1>, PCURL *a3@<X8>)
{
  _BYTE v6[40];
  PCString v7;

  if ((*((unsigned int (**)(PMClip **))*this + 179))(this))
  {
    PCURL::PCURL(a3, CFSTR("Missing file"));
  }
  else
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v6);
    PMClip::getLayerDescription(this[1009], (PMLayerDescription *)v6, a2);
    PCString::PCString((PCString *)a3, &v7);
    PCString::~PCString(&v7);
  }
}

void sub_1B2EC929C(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1 + 5);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::getFrames(OZFootage *this)
{
  unsigned int v2;

  if (!(*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
    return *(unsigned int *)(*((_QWORD *)this + 1009) + 344);
  v2 = vcvtmd_s64_f64(*((double *)this + 1038) * (*(double (**)(OZFootage *))(*(_QWORD *)this + 1328))(this)+ 0.5+ 0.0000001);
  if (v2 <= 1)
    return 1;
  else
    return v2;
}

uint64_t OZFootage::getDurationInFrames(OZFootage *this)
{
  unsigned int v2;

  if (!(*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
    return *(unsigned int *)(*((_QWORD *)this + 1009) + 344);
  v2 = vcvtmd_s64_f64(*((double *)this + 1038) * (*(double (**)(OZFootage *))(*(_QWORD *)this + 1328))(this)+ 0.5+ 0.0000001);
  if (v2 <= 1)
    return 1;
  else
    return v2;
}

double OZFootage::getSeconds(OZFootage *this)
{
  double v2;
  double v3;
  long double v4;
  double v5;
  double v6;
  int v7;
  int v8;
  double Seconds;
  _BYTE __dst[384];
  int v12;
  PCString v13[3];
  CGColorSpace *v14[4];

  v14[3] = *(CGColorSpace **)MEMORY[0x1E0C80C00];
  v2 = (*(double (**)(OZFootage *))(*(_QWORD *)this + 1296))(this);
  if (v2 == 0.0)
    v3 = 1.0;
  else
    v3 = v2;
  v4 = fmod(v3, 1.0);
  v5 = ceil(v3 + -0.01);
  if (1.0 - v4 < 0.1)
    v3 = v5;
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0 || !*((_QWORD *)this + 1009))
    return *((double *)this + 1038);
  PCSharedCount::PCSharedCount((PCSharedCount *)v13);
  v14[0] = 0;
  if (PMClip::getVideoDescription(*((_QWORD *)this + 1009), __dst) == 7 || !v12)
  {
    Seconds = PMClip::getSeconds(*((PMClip **)this + 1009), v6);
  }
  else
  {
    v7 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1376))(this);
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    Seconds = (double)v8 / v3;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v14);
  PCString::~PCString(v13);
  return Seconds;
}

void sub_1B2EC94E4(_Unwind_Exception *a1)
{
  PCString *v1;
  CGColorSpace **v2;

  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

double OZFootage::getFrameRate(OZFootage *this)
{
  char v2;
  double result;

  v2 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
  result = 30.0;
  if ((v2 & 1) == 0)
    return *(double *)(*((_QWORD *)this + 1009) + 360);
  return result;
}

CMTime *`anonymous namespace'::doubleFrameRateToFig@<X0>(double a1@<D0>, CMTime *a2@<X8>)
{
  int64_t v3;
  int32_t v4;
  int v5;
  double v6;
  _BOOL4 v7;
  BOOL v8;

  v3 = 6144000;
  v4 = 256256;
  v5 = vcvtmd_s64_f64(a1 + 0.5 + 0.0000001);
  v6 = a1 - (double)v5;
  v7 = v6 >= 0.0;
  if (v6 <= -0.1)
    v7 = 1;
  if (v5 != 30 || v7)
  {
    v8 = !v7;
    if (v5 != 24 || !v8)
    {
      if (v5 != 60)
        v8 = 0;
      if (v8)
      {
        v3 = 15360000;
      }
      else
      {
        v3 = (uint64_t)v5 << 8;
        v4 = 256;
      }
    }
  }
  else
  {
    v3 = 7680000;
  }
  return CMTimeMake(a2, v3, v4);
}

uint64_t OZFootage::getDynamicRangeType(PMClip **this)
{
  PMClip *v2;

  if (((*((uint64_t (**)(PMClip **))*this + 179))(this) & 1) != 0)
    return *((unsigned int *)this + 2078);
  v2 = this[1009];
  if (!v2)
    return *((unsigned int *)this + 2078);
  else
    return PMClip::getDynamicRangeType(v2);
}

double OZFootage::getMasteringMaxLuminance(OZFootage *this)
{
  char v2;
  double result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
  result = 0.0;
  if ((v2 & 1) == 0)
  {
    v4 = *((_QWORD *)this + 1009);
    if (v4)
      return *(double *)(v4 + 496);
  }
  return result;
}

uint64_t OZFootage::getAudioTracks(OZFootage *this)
{
  uint64_t v2;

  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0)
    return 1;
  v2 = *((_QWORD *)this + 1009);
  if (!v2)
    return 1;
  else
    return *(unsigned int *)(v2 + 516);
}

BOOL OZFootage::isRenderedAtFixedResolution(OZFootage *this)
{
  double v1;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4368), MEMORY[0x1E0CA2E68], 0.0);
  return v1 > 0.5;
}

uint64_t OZFootage::getFixedResolution(OZFootage *this, unsigned int *a2, unsigned int *a3, const CMTime *a4)
{
  unsigned int ValueAsInt;
  uint64_t result;

  ValueAsInt = *((_DWORD *)this + 2122);
  if (!ValueAsInt)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4520), a4, 0.0);
    *((_DWORD *)this + 2122) = ValueAsInt;
  }
  *a2 = ValueAsInt;
  result = *((unsigned int *)this + 2123);
  if (!(_DWORD)result)
  {
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4672), a4, 0.0);
    *((_DWORD *)this + 2123) = result;
  }
  *a3 = result;
  return result;
}

void OZFootage::getTextureResolution(_QWORD *a1, uint64_t a2, const CMTime *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int ValueAsInt;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  _DWORD v16[10];
  PCString v17;
  _BYTE v18[40];
  PCString v19;

  PMLayerDescription::PMLayerDescription((PMLayerDescription *)v18);
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 1432))(a1))
  {
    v8 = *((_DWORD *)a1 + 2074);
    v9 = *((_DWORD *)a1 + 2075);
  }
  else if (*(_DWORD *)(a4 + 92))
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v16);
    PMClip::getLayerDescription((PMClip *)a1[1009], (PMLayerDescription *)v16, *(_DWORD *)(a4 + 92));
    v8 = v16[2];
    v9 = v16[3];
    PCString::~PCString(&v17);
  }
  else
  {
    v10 = a1[1009];
    v8 = *(_DWORD *)(v10 + 288);
    v9 = *(_DWORD *)(v10 + 292);
  }
  ValueAsInt = *((_DWORD *)a1 + 2122);
  if (!ValueAsInt)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 565), a3, 0.0);
    *((_DWORD *)a1 + 2122) = ValueAsInt;
  }
  v12 = *((_DWORD *)a1 + 2123);
  if (!v12)
  {
    v12 = OZChannel::getValueAsInt((OZChannel *)(a1 + 584), a3, 0.0);
    *((_DWORD *)a1 + 2123) = v12;
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 1432))(a1) & 1) != 0
    || (v13 = a1[1009]) == 0
    || !*(_BYTE *)(v13 + 408))
  {
    if (*(_DWORD *)(a4 + 92))
      v14 = 1;
    else
      v14 = ValueAsInt == 0;
    v15 = !v14;
    if ((v15 & (v12 != 0)) != 0)
    {
      v8 = ValueAsInt;
      v9 = v12;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = (double)v8;
  *(double *)(a2 + 24) = (double)v9;
  PCString::~PCString(&v19);
}

void sub_1B2EC9898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  PCString *v12;
  va_list va;

  va_start(va, a12);
  PCString::~PCString(v12 + 5);
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

void OZFootage::getDuration(Float64 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  CMTime v6;

  if (((*(uint64_t (**)(Float64 *))(*(_QWORD *)this + 1432))(this) & 1) != 0
    || (v4 = *((_QWORD *)this + 1009)) == 0)
  {
    CMTimeMakeWithSeconds((CMTime *)a2, this[1038], (int)*(double *)(*((_QWORD *)this + 121) + 368));
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    PMClip::getDuration(v4, (CMTime *)a2);
    v5 = (*(double (**)(Float64 *))(*(_QWORD *)this + 1296))(this);
    if (v5 != (*(double (**)(Float64 *))(*(_QWORD *)this + 1328))(this))
    {
      CMTimeMake(&v6, *(unsigned int *)(*((_QWORD *)this + 1009) + 344), (int)v5);
      *(CMTime *)a2 = v6;
    }
  }
}

double OZFootage::getFootageTime(OZFootage *this, const CMTime *a2, CMTime *a3)
{
  int32_t v6;
  CMTime *v7;
  __int128 v8;
  CMTime *v9;
  float v10;
  float v11;
  double result;
  CMTimeEpoch v13;
  _BYTE v14[24];
  __int128 v15;
  CMTimeEpoch v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime time2;
  CMTime time1;

  v20 = *(CMTime *)((char *)this + 208);
  v19 = *(CMTime *)((char *)this + 232);
  memset(&v18, 0, sizeof(v18));
  OZFootage::getFrameDuration(this, &v18);
  v17 = *a2;
  time1 = *a2;
  time2 = v19;
  v6 = CMTimeCompare(&time1, &time2);
  v7 = &v17;
  if (v6 > 0)
    v7 = &v19;
  v8 = *(_OWORD *)&v7->value;
  v17.epoch = v7->epoch;
  *(_OWORD *)&v17.value = v8;
  time2 = v20;
  *(_OWORD *)&time1.value = v8;
  time1.epoch = v17.epoch;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v17);
  time1 = v17;
  v9 = (CMTime *)MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) < 0)
    v17 = *v9;
  v10 = (*(double (**)(OZFootage *))(*(_QWORD *)this + 1296))(this);
  v11 = (*(double (**)(OZFootage *))(*(_QWORD *)this + 1328))(this);
  memset(&time1, 0, sizeof(time1));
  memset(&time2, 0, sizeof(time2));
  operator/((__int128 *)&time1.value, (uint64_t)&time2, (uint64_t)v14);
  operator*((__int128 *)&v17.value, (uint64_t)v14, (uint64_t)&v15);
  result = *(double *)&v15;
  v13 = v16;
  *(_OWORD *)&a3->value = v15;
  a3->epoch = v13;
  return result;
}

uint64_t OZFootage::isStill(OZFootage *this)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (std::mutex *)((char *)this + 8080);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 8080));
  v3 = (uint64_t *)*((_QWORD *)this + 1009);
  if (v3)
  {
    v4 = *v3;
    if (v4)
      v5 = (*(uint64_t (**)(void))(v4 + 336))();
    else
      v5 = 1;
  }
  else
  {
    v5 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 7768), MEMORY[0x1E0CA2E68], 0.0) != 0;
  }
  PCSharedMutex::unlock_shared(v2);
  return v5;
}

void sub_1B2EC9BE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::isInUseByUnreplacedDropZonesOnly(OZFootage *this, BOOL *a2)
{
  OZScene *v4;
  _QWORD *DependantNodes;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  char v9;
  unint64_t Node;
  uint64_t Object;
  OZImageElement *v12;
  OZImageElement *v13;
  void *Footage;
  void *v15;
  const __CFURL **v16;
  char isDefaultDropZoneFootage;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  char v21;
  uint64_t v23;
  const void *v24;

  if (a2)
    *a2 = 0;
  v4 = (OZScene *)*((_QWORD *)this + 121);
  if (v4 && (DependantNodes = (_QWORD *)OZScene::getDependantNodes(v4, *((_DWORD *)this + 20))) != 0)
  {
    if (a2)
      *a2 = 1;
    v6 = DependantNodes + 1;
    v7 = (_QWORD *)*DependantNodes;
    if ((_QWORD *)*DependantNodes == DependantNodes + 1)
    {
      v9 = 1;
      v8 = 1;
    }
    else
    {
      v8 = 1;
      v9 = 1;
      do
      {
        Node = (unint64_t)OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v7 + 7));
        Object = OZScene::getObject(*((OZScene **)this + 121), *((_DWORD *)v7 + 7));
        if ((!Node
        {
          if (Node
          {
            Footage = OZImageElement::getFootage(v13);
            (*(void (**)(const void **__return_ptr))(*(_QWORD *)Footage + 1232))(&v24);
            v15 = OZImageElement::getFootage(v13);
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v15 + 1432))(v15))
            {
              v16 = (const __CFURL **)*((_QWORD *)this + 193);
              if (v16)
                PCURL::operator=(&v24, v16);
            }
            PCURL::PCURL((PCURL *)&v23, (const PCURL *)&v24);
            isDefaultDropZoneFootage = OZImageElement::isDefaultDropZoneFootage((const PCURL *)&v23);
            PCURL::~PCURL((PCURL *)&v23);
            if (a2 && !OZImageElement::isBackgroundDropZone(v13))
              *a2 = 0;
            v9 &= isDefaultDropZoneFootage;
            PCURL::~PCURL((PCURL *)&v24);
            v8 = 0;
          }
          else
          {
            v8 = 0;
            v9 &= (Node | Object) == 0;
            if (a2 && Node | Object)
            {
              v9 = 0;
              v8 = 0;
              *a2 = 0;
            }
          }
        }
        v18 = (_QWORD *)v7[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v7[2];
            v20 = *v19 == (_QWORD)v7;
            v7 = v19;
          }
          while (!v20);
        }
        v7 = v19;
      }
      while (v19 != v6);
    }
    v21 = v9 & (v8 ^ 1);
  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

void sub_1B2EC9E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCURL::~PCURL((PCURL *)&a9);
  PCURL::~PCURL((PCURL *)&a10);
  _Unwind_Resume(a1);
}

void OZFootage::getUserFrameRate(OZFootage *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3808), MEMORY[0x1E0CA2E68], 0.0);
}

void OZFootage::setUserFrameRate(OZFootage *this, double a2, char a3)
{
  OZChannel *v6;
  double v7;

  v6 = (OZChannel *)((char *)this + 3808);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3808), MEMORY[0x1E0CA2E68], 0.0);
  if (vabdd_f64(v7, a2) >= 0.0000001)
  {
    OZChannel::setValue(v6, MEMORY[0x1E0CA2E68], a2, a3);
    *((_BYTE *)this + 8280) = 0;
    goto LABEL_5;
  }
  if (!*((_BYTE *)this + 8280))
LABEL_5:
    OZFootage::adjustDurationForChangedFrameRate(this, a3);
}

void OZFootage::adjustDurationForChangedFrameRate(OZFootage *this, char a2)
{
  uint64_t v4;
  _OWORD *v5;
  CMTimeEpoch v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t DependantNodes;
  _QWORD *v10;
  const PCString *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const void *Object;
  OZImageElement *v16;
  OZImageElement *v17;
  OZChannelBase *v18;
  OZFootage *Footage;
  const CMTime *v20;
  double Seconds;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  CMTime time2;
  CMTime v28;
  CMTime time;
  CMTime v30;
  CMTime time1;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;

  v4 = *((_QWORD *)this + 121);
  if (v4
    || OZApplication::getCurrentDoc((OZApplication *)theApp)
    && (v4 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0)
  {
    memset(&v34, 0, sizeof(v34));
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&v34);
    memset(&v33, 0, sizeof(v33));
    OZFootage::getDuration((Float64 *)this, (uint64_t)&v33);
    if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1376))(this) == 1)
      v33 = v34;
    time1 = *(CMTime *)((char *)this + 232);
    v5 = (_OWORD *)((char *)this + 8256);
    time2 = *(CMTime *)((_BYTE *)this + 344);
    if (!CMTimeCompare(&time1, &time2)
      || (*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1376))(this) == 1)
    {
      *(_OWORD *)&time1.value = *MEMORY[0x1E0CA2E68];
      v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      v32 = v33;
      time1.epoch = v6;
      OZChannelObjectRootBase::setTimeExtent((OZFootage *)((char *)this + 56), (const PCTimeRange *)&time1, a2);
    }
    time1 = v33;
    time2 = v34;
    if (CMTimeCompare(&time1, &time2))
    {
      *(_OWORD *)&time1.value = *v5;
      time1.epoch = *((_QWORD *)this + 1034);
      time2 = v34;
      if (CMTimeCompare(&time1, &time2))
      {
        v7 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 664))(this);
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
        DependantNodes = OZScene::getDependantNodes((OZScene *)v4, v8);
        if (DependantNodes)
        {
          v10 = (_QWORD *)DependantNodes;
          v26 = a2;
          PCURL::PCURL((PCURL *)&time1, CFSTR("Undo Footage Replace"));
          OZScene::startCaptureModifiedChannels((OZScene *)v4, (const PCString *)&time1);
          PCString::~PCString((PCString *)&time1);
          v14 = (_QWORD *)*v10;
          v12 = v10 + 1;
          v13 = v14;
          if (v14 != v12)
          {
            do
            {
              Object = (const void *)OZScene::getObject((OZScene *)v4, *((_DWORD *)v13 + 7));
              if (Object)
              {
                if (v16)
                {
                  v17 = v16;
                  v18 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)v16 + 640))(v16);
                  (*((void (**)(CMTime *__return_ptr))v18->var0 + 89))(&time1);
                  v30 = v32;
                  Footage = (OZFootage *)OZImageElement::getFootage(v17);
                  time2 = v30;
                  *(_OWORD *)&v35.value = *v5;
                  v35.epoch = *((_QWORD *)this + 1034);
                  PC_CMTimeSaferSubtract(&time2, &v35, (uint64_t)&time);
                  Seconds = CMTimeGetSeconds(&time);
                  if (Footage == this && Seconds < 0.0001)
                  {
                    time2 = time1;
                    v28 = v33;
                    OZRetimingUtil::SetTimeExtent(v18, &time2, &v34, v20);
                  }
                }
              }
              v22 = (_QWORD *)v13[1];
              if (v22)
              {
                do
                {
                  v23 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  v23 = (_QWORD *)v13[2];
                  v24 = *v23 == (_QWORD)v13;
                  v13 = v23;
                }
                while (!v24);
              }
              v13 = v23;
            }
            while (v23 != v12);
          }
          OZScene::endCaptureModifiedChannels((OZChannelBase **)v4, v11);
          a2 = v26;
        }
      }
    }
    *v5 = *(_OWORD *)&v33.value;
    *((_QWORD *)this + 1034) = v33.epoch;
    if ((a2 & 1) == 0)
    {
      v25 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this);
      if (v25)
        OZDocument::postNotification(*(OZDocument **)(v25 + 1584), 6144);
    }
    *((_BYTE *)this + 8280) = 1;
  }
}

void sub_1B2ECA2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCString a25)
{
  PCString::~PCString(&a25);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::setClipInterpretation(OZFootage *this, const PMLayerDescription *a2, const OZRenderParams *a3, PMFrameRequest *a4)
{
  char *v6;
  int ValueAsInt;
  unsigned int v8;
  char InvertAlpha;

  v6 = (char *)this + 8476;
  if (*((_BYTE *)this + 8484))
  {
    ValueAsInt = *((_DWORD *)this + 2120);
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3296), MEMORY[0x1E0CA2E68], 0.0);
    *((_DWORD *)this + 2120) = ValueAsInt;
    v6[8] = 1;
  }
  *((_DWORD *)a4 + 27) = OZFootage::getFieldDominanceWithOverride(OZRenderParams const&)const::clipFieldOrderMap[ValueAsInt];
  if (*v6)
  {
    v8 = *((_DWORD *)this + 2118);
  }
  else
  {
    v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1728), MEMORY[0x1E0CA2E68], 0.0);
    *((_DWORD *)this + 2118) = v8;
    *v6 = 1;
  }
  if (v8 <= 3)
    HGTextureManager::storageRecyclingPolicy((uint64_t)a4, v8);
  InvertAlpha = OZFootage::getInvertAlpha(this);
  return HGTextureManager::recycleClientStorageTextures((uint64_t)a4, InvertAlpha);
}

uint64_t OZFootage::prepareFrameRequest(OZFootage *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  const PMLayerDescription *v6;
  const OZRenderParams *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isRenderForHDR_Deprecated;
  int StillImageInverseToneMapOperator_Deprecated;
  __n128 v20;
  uint64_t v21;
  _BYTE v22[40];
  PCString v23;

  if (!*((_QWORD *)this + 1009))
    return 2;
  PMLayerDescription::PMLayerDescription((PMLayerDescription *)v22);
  if (PMClip::getLayerDescription(*((PMClip **)this + 1009), (PMLayerDescription *)v22, *((_DWORD *)a3 + 23)) == 7)
  {
    v8 = 2;
  }
  else
  {
    OZFootage::setClipInterpretation(this, v6, v7, a3);
    if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0
      || (v9 = *((_QWORD *)this + 1009)) == 0
      || !*(_BYTE *)(v9 + 408))
    {
      v10 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this);
      v11 = *((_QWORD *)this + 1009);
      v12 = v11 ? v10 : 1;
      if (((v12 & 1) != 0 || !*(_BYTE *)(v11 + 1241)) && !*(_BYTE *)(v11 + 452))
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], 0.0);
        *((_QWORD *)a3 + 17) = v13;
      }
    }
    v14 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v14 + 336), &v20);
    *((__n128 *)a3 + 7) = v20;
    *((_QWORD *)a3 + 16) = v21;
    *((_BYTE *)a3 + 145) = *((_BYTE *)a2 + 202);
    v15 = *(int *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this)
                                         + 1584)
                             + 224)
                 + 12);
    v16 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this);
    PMFrameRequest::setResolutionMode((uint64_t)a3, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 1584) + 8 * v15 + 192) + 32));
    if (OZRenderParams::getReducedResolutionMedia(a2) && !PMFrameRequest::getResolutionMode(a3))
      PMFrameRequest::setResolutionMode((uint64_t)a3, 1);
    if (OZRenderParams::getReducedResolutionOverride(a2))
      PMFrameRequest::setResolutionMode((uint64_t)a3, 0);
    isRenderForHDR_Deprecated = OZRenderParams::isRenderForHDR_Deprecated(a2);
    PMFrameRequest::setRenderIsForHDR_Deprecated((uint64_t)a3, isRenderForHDR_Deprecated);
    StillImageInverseToneMapOperator_Deprecated = OZRenderParams::getStillImageInverseToneMapOperator_Deprecated(a2);
    PMFrameRequest::setStillImageInverseToneMapOperator_Deprecated((uint64_t)a3, StillImageInverseToneMapOperator_Deprecated);
    v8 = 0;
  }
  PCString::~PCString(&v23);
  return v8;
}

void sub_1B2ECA580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZFootage::getHeliumGraph@<X0>(OZFootage *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, FxColorDescription *a4@<X3>, double *a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  double v22;
  CGColorSpace *WorkingColorSpace;
  char isDynamicRangeTrackingRender;
  float v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  char v51;
  CGColorSpace *v52;
  CGColorSpace *v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  int v57;
  char v58;
  uint64_t v59;
  __int128 v60;

  v30 = xmmword_1B30503B0;
  v31 = 1.0;
  v32 = 0.0;
  v33 = 0.0;
  v34 = 0.0;
  v35 = 1.0;
  v36 = 0.0;
  v37 = 0;
  v38 = 0;
  v43 = 0;
  v41 = 0;
  v39 = 0x3FF0000000000000;
  v40 = 0;
  v44 = *(__n128 *)MEMORY[0x1E0CA2E68];
  v45 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0x100000000;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 768;
  v55 = 0x408F400000000000;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  v60 = _Q0;
  v42 = *(_BYTE *)(a2 + 360);
  v17 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)a1 + 272))(a1);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v17 + 336), &v27);
  v44 = v27;
  v45 = v28;
  v26 = 0.0;
  v27.n128_u32[0] = 0;
  (*(void (**)(OZFootage *, __n128 *, float *, uint64_t, __int128 *))(*(_QWORD *)a1 + 1576))(a1, &v27, &v26, a2, &v30);
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)a1 + 1432))(a1) & 1) == 0)
  {
    v18 = *((_QWORD *)a1 + 1009);
    if (v18)
    {
      if (*(_BYTE *)(v18 + 408))
      {
        v19 = *(unsigned int *)(a2 + 324);
        v20 = *(unsigned int *)(a2 + 328);
        if (v19 == (uint64_t)v27.n128_f32[0])
        {
          v21 = v26;
          if (v20 == (uint64_t)v26)
            goto LABEL_9;
        }
        else
        {
          v21 = v26;
        }
        v37 = 0;
        v38 = 0;
        v39 = 0x3FF0000000000000;
        v22 = (double)v20 / v21;
        v31 = (double)v19 / v27.n128_f32[0];
        v32 = v31 * 0.0;
        v33 = v31 * 0.0;
        v34 = v22 * 0.0;
        v35 = v22;
        v36 = v22 * 0.0;
      }
    }
  }
LABEL_9:
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  PMFrameRequest::setWorkingColorSpace((CGColorSpace **)&v30, WorkingColorSpace);
  PMFrameRequest::setOverrideColorSpace((CGColorSpace **)&v30, 0);
  isDynamicRangeTrackingRender = OZRenderParams::isDynamicRangeTrackingRender((FxColorDescription *)a2);
  PMFrameRequest::setIsDynamicRangeTrackingRender((uint64_t)&v30, isDynamicRangeTrackingRender);
  OZFootage::getHeliumGraph(a1, (const OZRenderParams *)a2, (uint64_t)&v30, a3, a4, a5, &v29, a6);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v53);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v52);
}

void sub_1B2ECA7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  CGColorSpace **v38;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(v38);
  _Unwind_Resume(a1);
}

void OZFootage::getHeliumGraph(OZFootage *a1@<X0>, const OZRenderParams *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, FxColorDescription *a5@<X4>, double *a6@<X5>, _QWORD *a7@<X6>, HGBitmapLoader **a8@<X8>)
{
  HGNode *v16;
  HGNode *v17;
  _DWORD v18[44];
  CGColorSpace *v19;
  CGColorSpace *v20;

  *a7 = 0;
  if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)a1 + 1432))(a1))
  {
    if (*((_BYTE *)a1 + 8319)
      || (OZPlaybackEngine::OZPlaybackEngine(v18, 1), OZPlaybackEngine::operator==((_DWORD *)a2 + 235, v18)))
    {
      v16 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v16);
      *a8 = (HGBitmapLoader *)v16;
    }
    else
    {
      OZFootage::getPlaceHolderHeliumGraph((uint64_t)a1, a2, a4, a5, (uint64_t)a6, a8);
    }
  }
  else
  {
    PMFrameRequest::PMFrameRequest((uint64_t)v18, a3);
    if (OZFootage::prepareFrameRequest(a1, a2, (PMFrameRequest *)v18))
    {
      v17 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v17);
      *a8 = (HGBitmapLoader *)v17;
    }
    else
    {
      OZFootage::getHeliumGraphInternal((uint64_t)a1, a2, (uint64_t)v18, a4, a5, a6, a7, a8);
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v20);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v19);
  }
}

void sub_1B2ECA968(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,...)
{
  void *v24;
  CGColorSpace *v26;
  va_list va;
  va_list va1;

  va_start(va1, a24);
  va_start(va, a24);
  v26 = va_arg(va1, CGColorSpace *);
  HGObject::operator delete(v24);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **`non-virtual thunk to'OZFootage::getHeliumGraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, FxColorDescription *a4@<X3>, double *a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  return OZFootage::getHeliumGraph((OZFootage *)(a1 - 1576), a2, a3, a4, a5, a6);
}

void OZFootage::getHeliumGraphInternal(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, FxColorDescription *a5@<X4>, double *a6@<X5>, _QWORD *a7@<X6>, HGBitmapLoader **a8@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  PMClip *v17;
  uint64_t v18;
  int Frame;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  CMTimeScale timescale;
  signed int flags;
  __n128 v37;
  __n128 v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  HGCrop *v48;
  __n128 v53;
  uint64_t v54;
  int v55;
  int v56;
  double v57;
  double v58;
  HGNode *v59;
  double v60;
  double v61;
  __int128 v62;
  CMTime v63;
  double v64;
  PCString v65;
  HGNode *v66;
  _DWORD v67[4];
  __int32 v68;
  __int16 v69;
  int32x2_t v70;
  int v71;
  _BYTE v72[92];
  unsigned int v73;
  const void *v74;
  CGColorSpace *v75;
  CGColorSpace *v76;
  CMTime v77;
  int32x2_t v78[5];
  PCString v79;

  *a7 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1))
  {
    OZFootage::getPlaceHolderHeliumGraph(a1, a2, a4, a5, (uint64_t)a6, a8);
    return;
  }
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 8080));
  v17 = *(PMClip **)(a1 + 8072);
  if (!*((_DWORD *)v17 + 311))
    PMClip::open(v17);
  PMLayerDescription::PMLayerDescription((PMLayerDescription *)v78);
  if (PMClip::getLayerDescription(*(PMClip **)(a1 + 8072), (PMLayerDescription *)v78, *(_DWORD *)(a3 + 92)) != 7)
  {
    v77 = *(CMTime *)a2;
    PMFrameRequest::PMFrameRequest((uint64_t)v72, a3);
    v69 = 0;
    v68 = 0;
    OZFootage::getClipBitmapInfo(a1, a2, v78, &v77, (uint64_t)v72, &v71, &v70, v67, (BOOL *)&v69 + 1, (BOOL *)&v69, &v68);
    OZRenderParams::getResolution(a2, (__n128 *)&v63);
    v66 = 0;
    v74 = a4;
    v18 = *(_QWORD *)(a1 + 8072);
    OZFootage::getFrameDuration((OZFootage *)a1, &v63);
    Frame = PMClip::getFrame(v18, &v77, (uint64_t)&v63, (PMFrameRequest *)v72, (uint64_t)a5, &v66, (uint64_t)a6);
    v20 = *a6;
    v22 = a6[4];
    v21 = a6[5];
    v23 = sqrt(a6[1] * a6[1] + v21 * v21);
    v24 = fabs(v21);
    if (v24 >= 1.0)
      v25 = v23;
    else
      v25 = v23 + v23;
    LODWORD(v24) = v70.i32[1];
    LODWORD(v23) = v70.i32[0];
    v26 = (double)*(unint64_t *)&v23;
    v27 = (double)*(unint64_t *)&v24;
    if (!(_BYTE)v69)
    {
LABEL_28:
      if (HIBYTE(v69))
      {
        v45 = sqrt(v20 * v20 + v22 * v22);
        v46 = v26 / v45;
        v47 = v27 / v25;
        *(double *)&v63.value = v46 * -0.5 + (double)v67[0] / v45;
        *(double *)&v63.timescale = v27 / v25 * -0.5 + (double)v67[3] / v25;
        *(double *)&v63.epoch = v46 + v46 * -0.5 - (double)v67[1] / v45 - *(double *)&v63.value;
        v64 = v47 + v47 * -0.5 - (double)v67[2] / v25 - *(double *)&v63.timescale;
        v48 = (HGCrop *)HGObject::operator new(0x1A0uLL);
        HGCrop::HGCrop(v48);
        v60 = 0.0;
        v61 = 0.0;
        __asm { FMOV            V0.2D, #-1.0 }
        v62 = _Q0;
        if (PCMatrix44Tmpl<double>::transformRect<double>(a6, (double *)&v63.value, (uint64_t)&v60))
        {
          v54 = HGRectMake4i(vcvtmd_s64_f64(v60 + 0.5 + 0.0000001), vcvtmd_s64_f64(v61 + 0.5 + 0.0000001), vcvtmd_s64_f64(v60 + *(double *)&v62 + 0.5 + 0.0000001), vcvtmd_s64_f64(v61 + *((double *)&v62 + 1) + 0.5 + 0.0000001));
          (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v48 + 96))(v48, 0, (float)(int)v54, (float)SHIDWORD(v54), (float)v55, (float)v56);
          (*(void (**)(HGCrop *, _QWORD, HGNode *))(*(_QWORD *)v48 + 120))(v48, 0, v66);
          if (v66 != (HGNode *)v48)
          {
            if (v66)
              (*(void (**)(void))(*(_QWORD *)v66 + 24))();
            v66 = (HGNode *)v48;
            (*(void (**)(HGCrop *))(*(_QWORD *)v48 + 16))(v48);
          }
          v53.n128_f64[0] = PCMatrix44Tmpl<double>::rightTranslate(a6, *(double *)&v63.value + *(double *)&v63.epoch * 0.5 - (v46 * -0.5 + v46 * 0.5), *(double *)&v63.timescale + v64 * 0.5 - (v27 / v25 * -0.5 + v47 * 0.5), 0.0);
          goto LABEL_36;
        }
        if (v48)
LABEL_36:
          (*(void (**)(HGCrop *, __n128))(*(_QWORD *)v48 + 24))(v48, v53);
      }
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 3144), MEMORY[0x1E0CA2E68], 0.0);
      v58 = *(double *)(*(_QWORD *)(a1 + 8072) + 416) / v57;
      if (v58 != 1.0)
      {
        *a6 = v58 * *a6;
        a6[4] = v58 * a6[4];
        a6[8] = v58 * a6[8];
        a6[12] = v58 * a6[12];
      }
      if (Frame)
      {
        v59 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v59);
        *a8 = (HGBitmapLoader *)v59;
        if (v66)
          (*(void (**)(HGNode *))(*(_QWORD *)v66 + 24))(v66);
      }
      else
      {
        *a8 = (HGBitmapLoader *)v66;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v76);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v75);
      goto LABEL_44;
    }
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)&v63);
    if (PMClip::getLayerDescription(*(PMClip **)(a1 + 8072), (PMLayerDescription *)&v63, v73))
    {
      v28 = *(_QWORD *)(a1 + 8072);
      LODWORD(v9) = *(_DWORD *)(v28 + 288);
      LODWORD(v8) = *(_DWORD *)(v28 + 292);
      v60 = 0.0;
      (*(void (**)(_QWORD, double *))(**(_QWORD **)(*(_QWORD *)(a1 + 4632) + 8) + 256))(*(_QWORD *)(*(_QWORD *)(a1 + 4632) + 8), &v60);
      v29 = (double)v9;
      v30 = (double)v8;
      v31 = v26 / (double)v9;
      v32 = v60;
      _NF = v60 < (double)v9;
      v34 = v27 / v30;
      if (!_NF)
      {
        v60 = 0.0;
        (*(void (**)(_QWORD, double *, double, double))(**(_QWORD **)(*(_QWORD *)(a1 + 4784) + 8) + 256))(*(_QWORD *)(*(_QWORD *)(a1 + 4784) + 8), &v60, v29, v32);
        if (v60 >= v30)
        {
LABEL_25:
          v41 = 1.0 / v31;
          v44 = 1.0 / v34;
          v42 = 1.0;
          v43 = a6;
LABEL_26:
          PCMatrix44Tmpl<double>::rightScale(v43, v41, v44, v42);
LABEL_27:
          PCString::~PCString(&v65);
          goto LABEL_28;
        }
      }
    }
    else
    {
      timescale = v63.timescale;
      if (v63.timescale < 1)
        goto LABEL_27;
      flags = v63.flags;
      if ((int)v63.flags < 1)
        goto LABEL_27;
      v60 = 0.0;
      (*(void (**)(_QWORD, double *))(**(_QWORD **)(*(_QWORD *)(a1 + 4632) + 8) + 256))(*(_QWORD *)(*(_QWORD *)(a1 + 4632) + 8), &v60);
      v37.n128_f64[0] = (double)timescale;
      v31 = v26 / (double)timescale;
      v38.n128_f64[0] = v60;
      v34 = v27 / (double)flags;
      if (v60 >= (double)timescale)
      {
        v60 = 0.0;
        (*(void (**)(_QWORD, double *, double, double))(**(_QWORD **)(*(_QWORD *)(a1 + 4784) + 8) + 256))(*(_QWORD *)(*(_QWORD *)(a1 + 4784) + 8), &v60, v37.n128_f64[0], v38.n128_f64[0]);
        v37.n128_f64[0] = v60;
        if (v60 >= (double)flags)
          goto LABEL_25;
      }
      v60 = 0.0;
      (*(void (**)(_QWORD, double *, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(a1 + 4632) + 8) + 256))(*(_QWORD *)(*(_QWORD *)(a1 + 4632) + 8), &v60, v37, v38);
      v39 = v60;
      if (v60 != v26)
      {
        v60 = 0.0;
        (*(void (**)(_QWORD, double *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 4784) + 8) + 256))(*(_QWORD *)(*(_QWORD *)(a1 + 4784) + 8), &v60, v39);
        if (v60 != v27)
          goto LABEL_25;
      }
    }
    if (v31 >= v34)
      v40 = v34;
    else
      v40 = v31;
    v41 = 1.0 / v40;
    v42 = 1.0;
    v43 = a6;
    v44 = v41;
    goto LABEL_26;
  }
  OZFootage::getPlaceHolderHeliumGraph(a1, a2, a4, a5, (uint64_t)a6, a8);
LABEL_44:
  PCString::~PCString(&v79);
  PCSharedMutex::unlock_shared((std::mutex *)(a1 + 8080));
}

void sub_1B2ECAFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCString a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,CGColorSpace *a50,CGColorSpace *a51)
{
  std::mutex *v51;
  uint64_t v52;

  PCString::~PCString(&a21);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a51);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a50);
  PCString::~PCString((PCString *)(v52 - 152));
  PCSharedMutex::unlock_shared(v51);
  _Unwind_Resume(a1);
}

void OZFootage::getPlaceHolderHeliumGraph(uint64_t a1@<X0>, const OZRenderParams *a2@<X1>, const void *a3@<X3>, FxColorDescription *a4@<X4>, uint64_t a5@<X5>, HGBitmapLoader **a6@<X8>)
{
  HGGPURenderer *v12;
  HGGPURenderer *v13;
  CGColorSpace *CGColorSpace;
  const PMFrameRequest *v15;
  CGColorSpace *v16;
  HGBitmap *v17;
  HGBitmapLoader *v18;
  CGColorSpace *v19;
  PCImage *v20;
  CGColorSpace *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  PCImage *v31;
  std::__shared_weak_count *v32;
  PCImage *v33;
  std::__shared_weak_count *v34;

  FxColorDescription::setDynamicRange(a4, 0);
  *(_QWORD *)(a5 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a5 = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  if (a3
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(a4);
    OZFootage::setupPlaceHolderMetalTexture((HGMetalContext **)a1, a2, v15, CGColorSpace, v13);
    v16 = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)(a1 + 8368));
    FxColorDescription::setCGColorSpace(a4, v16);
    v17 = *(HGBitmap **)(a1 + 8432);
    if (v17)
      (*(void (**)(_QWORD))(*(_QWORD *)v17 + 16))(*(_QWORD *)(a1 + 8432));
    v18 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v18, v17);
    *a6 = v18;
    if (v17)
      (*(void (**)(HGBitmap *))(*(_QWORD *)v17 + 24))(v17);
  }
  else
  {
    v19 = (CGColorSpace *)FxColorDescription::getCGColorSpace(a4);
    OZFootage::getPlaceHolderBitmap((OZFootage *)a1, a2, v19, &v33);
    v20 = v33;
    v21 = (CGColorSpace *)PCImage::getCGColorSpace(v33);
    FxColorDescription::setCGColorSpace(a4, v21);
    v31 = v20;
    v32 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    v30 = 0;
    PGHelium::createBitmapNode(&v31, (unsigned int *)&v30, 0, 0, a6);
    v24 = v32;
    if (v32)
    {
      v25 = (unint64_t *)&v32->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_1B2ECB2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v14;

  HGObject::operator delete(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  _Unwind_Resume(a1);
}

void OZFootage::getClipBitmapInfo(uint64_t a1, OZRenderParams *a2, int32x2_t *a3, CMTime *a4, uint64_t a5, int *a6, int32x2_t *a7, _DWORD *a8, BOOL *a9, BOOL *a10, __int32 *a11)
{
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  OZRenderParams *v25;
  __int32 v26;
  __int32 v27;
  int v28;
  int v29;
  BOOL v31;
  __int32 v32;
  unsigned int v34[2];
  __n128 v35;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6120), a4, 0.0);
  *a8 = vcvtmd_s64_f64(v18);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6272), a4, 0.0);
  a8[1] = vcvtmd_s64_f64(v19);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6576), a4, 0.0);
  a8[2] = vcvtmd_s64_f64(v20);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 6424), a4, 0.0);
  a8[3] = vcvtmd_s64_f64(v21);
  *a7 = vmax_s32(a3[1], (int32x2_t)0x100000001);
  *(_QWORD *)v34 = 0;
  OZFootage::getFixedResolution((OZFootage *)a1, &v34[1], v34, a4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1) & 1) == 0
    && (v22 = *(_QWORD *)(a1 + 8072)) != 0
    && *(_BYTE *)(v22 + 408)
    || *(_DWORD *)(a5 + 92)
    || (v23 = v34[1]) == 0
    || (v24 = v34[0]) == 0)
  {
    *a10 = 0;
    v25 = a2;
  }
  else
  {
    v25 = a2;
    if (a7->i32[0] == v34[1])
    {
      v26 = a7->i32[1];
      *a10 = v26 != v34[0];
      if (v26 == v24)
        goto LABEL_13;
    }
    else
    {
      *a10 = 1;
    }
    a7->i32[0] = v23;
    a7->i32[1] = v24;
  }
LABEL_13:
  OZRenderParams::getResolution(v25, &v35);
  if (v35.n128_f64[0] != 1.0 || v35.n128_f64[1] != 1.0)
    *a10 = 1;
  v27 = a7->i32[0];
  v28 = a7->i32[0] - (a8[1] + *a8);
  if (!v28)
    v28 = 1;
  *a6 = v28;
  v29 = a7->i32[1] - (a8[3] + a8[2]);
  if (!v29)
    v29 = 1;
  a6[1] = v29;
  v31 = v28 != v27 || v29 != a7->i32[1];
  *a9 = v31;
  v32 = a3[2].i32[1];
  *a11 = v32;
  if (v28 <= 1)
    v28 = 1;
  if (v29 <= 1)
    v29 = 1;
  *a6 = v28;
  a6[1] = v29;
  if (v32 == 9)
    *a11 = 13;
}

unint64_t OZFootage::estimateRenderMemory(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OZRenderParams *v4;
  OZRenderParams *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 Resolution;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  int v15;
  int v16;
  const CMTime *v17;
  int8x8_t *Hash;
  unint64_t v19;
  double v20;
  unsigned int v21;
  int v22;
  __int128 v24;
  __n128 v25;
  uint64_t v26;
  _DWORD v27[4];
  __int32 v28;
  BOOL v29;
  BOOL v30;
  int32x2_t v31;
  int v32[2];
  _BYTE v33[176];
  CGColorSpace *v34;
  CGColorSpace *v35;
  CMTime v36;
  int32x2_t v37[5];
  PCString v38;
  CMTime v39;
  uint64_t v40;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1;
  v40 = *MEMORY[0x1E0C80C00];
  Resolution = OZRenderParams::getResolution(v4, (__n128 *)&v39);
  v11 = *(double *)&v39.value;
  v10 = *(double *)&v39.timescale;
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 1432))(v8, Resolution) & 1) != 0
    || !*(_QWORD *)(v8 + 8072))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v39);
    if ((_QWORD *)(v7 + 8) == std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(v7, (const PCHash128 *)&v39))
    {
      std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)v7, (const PCHash128 *)&v39, &v39);
      *(double *)&v13 = ceil(v10 * (double)*(int *)(v8 + 8300));
      v14 = ceil(v11 * (double)*(int *)(v8 + 8296)) * *(double *)&v13;
      LODWORD(v13) = *((_DWORD *)v5 + 84);
      return (unint64_t)(v14 * (double)v13 * (double)(*((_DWORD *)v5 + 83) >> 3));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    PMLayerDescription::PMLayerDescription((PMLayerDescription *)v37);
    if (PMClip::getLayerDescription(*(PMClip **)(v8 + 8072), (PMLayerDescription *)v37, *(_DWORD *)(v3 + 92)) == 7)
    {
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v39);
      if ((_QWORD *)(v7 + 8) == std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(v7, (const PCHash128 *)&v39))
      {
        std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)v7, (const PCHash128 *)&v39, &v39);
        *(double *)&v19 = ceil(v10 * (double)*(int *)(v8 + 8300));
        v20 = ceil(v11 * (double)*(int *)(v8 + 8296)) * *(double *)&v19;
        LODWORD(v19) = *((_DWORD *)v5 + 84);
        v12 = (unint64_t)(v20 * (double)v19 * (double)(*((_DWORD *)v5 + 83) >> 3));
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v39 = *(CMTime *)v5;
      OZFootage::getFootageTime((OZFootage *)v8, &v39, &v36);
      PMFrameRequest::PMFrameRequest((uint64_t)v33, v3);
      v28 = 0;
      OZFootage::getClipBitmapInfo(v8, v5, v37, &v36, (uint64_t)v33, v32, &v31, v27, &v30, &v29, &v28);
      v15 = v32[0];
      v16 = v32[1];
      v25 = 0uLL;
      v26 = 0;
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(*(_QWORD *)(v8 + 968) + 336), &v25);
      if (*((_DWORD *)v5 + 123))
        v25.n128_i64[0] /= 2;
      OZFootage::getCacheHashKey((OZFootage *)v8, *(PMClip **)(v8 + 8072), &v36, v17, (const PMFrameRequest *)v33, v5, (const PMLayerDescription *)v37);
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v39);
      PCHashWriteStream::writeValue((int8x8_t *)&v39, (const void *)v8);
      Hash = PCHashWriteStream::getHash((int8x8_t *)&v39);
      PCHash128::operator+=((int *)&v24, (int *)Hash);
      if ((_QWORD *)(v7 + 8) == std::__tree<std::__value_type<PCHash128,BOOL>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,BOOL>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,BOOL>>>::find<PCHash128>(v7, (const PCHash128 *)&v24))
      {
        std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>((uint64_t **)v7, (const PCHash128 *)&v24, &v24);
        v21 = vcvtpd_u64_f64(v10 * (double)v16) * vcvtpd_u64_f64(v11 * (double)v15);
        if ((v28 - 10) > 6)
          v22 = 4;
        else
          v22 = *(_DWORD *)&asc_1B355FDD8[4 * v28 - 40];
        v12 = v21 * v22;
      }
      else
      {
        v12 = 0;
      }
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v39);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v35);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v34);
    }
    PCString::~PCString(&v38);
  }
  return v12;
}

void sub_1B2ECB8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CGColorSpace *a45,CGColorSpace *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,PCString a62,char a63)
{
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a63);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a46);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a45);
  PCString::~PCString(&a62);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::missingFootageHash(_anonymous_namespace_ *this, PCHash128 *a2, OZFootage *a3, double a4, double a5)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const void *v14;
  const void *v15;
  _OWORD *v16;
  int8x8_t v17[521];

  v5 = MEMORY[0x1E0C80A78](this);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = (_OWORD *)v5;
  v17[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
  PCHashWriteStream::writeValue(v17, v15);
  PCHashWriteStream::writeValue(v17, v13);
  PCHashWriteStream::writeValue(v17, v11);
  PCHashWriteStream::writeValue(v17, v9);
  PCHashWriteStream::writeValue(v17, v7);
  *v16 = *(_OWORD *)PCHashWriteStream::getHash(v17)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
}

void sub_1B2ECBA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

PCMutex *OZFootage::getPlaceHolderBitmap@<X0>(OZFootage *this@<X0>, const OZRenderParams *a2@<X1>, CGColorSpace *WorkingColorSpace@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  PCMutex *result;
  BOOL v20;
  __int128 v21;
  PCMutex *v22;
  char v23;

  v22 = (PCMutex *)((char *)this + 8184);
  PCMutex::lock((PCMutex *)((char *)this + 8184));
  v23 = 1;
  v9 = *((_QWORD *)this + 1041);
  if (!v9 || *((double *)this + 1043) != 1.0 || *((double *)this + 1044) != 1.0)
  {
    if (*((_QWORD *)this + 1037))
      v10 = *((_DWORD *)this + 2074);
    else
      v10 = *((_DWORD *)a2 + 81);
    if (*((_QWORD *)this + 1037))
      v11 = *((_DWORD *)this + 2075);
    else
      v11 = *((_DWORD *)a2 + 82);
    if (!WorkingColorSpace)
      WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
    createPlaceHolderBitmap(1.0, 1.0, WorkingColorSpace, v10, v11, (uint64_t *)&v21);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)this + 8328, &v21);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *((_QWORD *)this + 1043) = 0x3FF0000000000000;
    *((_QWORD *)this + 1044) = 0x3FF0000000000000;
    *((_BYTE *)this + 8360) = 0;
    v15 = *((_QWORD *)this + 1054);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      *((_QWORD *)this + 1054) = 0;
    }
    *((_QWORD *)this + 1055) = 0;
    v9 = *((_QWORD *)this + 1041);
  }
  v16 = *((_QWORD *)this + 1042);
  *a4 = v9;
  a4[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  result = v22;
  if (v22)
    v20 = v23 == 0;
  else
    v20 = 1;
  if (!v20)
    return (PCMutex *)PCMutex::unlock(v22);
  return result;
}

void sub_1B2ECBBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::eval(OZFootage *this, OZRenderParams *a2)
{
  return 0;
}

void OZFootage::setupPlaceHolderMetalTexture(HGMetalContext **this, const OZRenderParams *a2, const PMFrameRequest *a3, CGColorSpace *a4, HGGPURenderer *a5)
{
  PCMutex *v7;
  BOOL v8;
  PCBitmap *v9;
  int v10;
  uint64_t Format;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int BytesPerRow;
  char *v21;
  HGMetalTexture *MetalContext;
  HGMetalContext *v23;
  HGMetalContext *v24;
  CGColorSpace *CGColorSpace;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  HGMetalContext *v29;
  PCMutex *v30;
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  HGRect v34;

  OZFootage::getPlaceHolderBitmap((OZFootage *)this, a2, a4, &v32);
  v7 = (PCMutex *)(this + 1023);
  v30 = (PCMutex *)(this + 1023);
  PCMutex::lock((PCMutex *)(this + 1023));
  v31 = 1;
  if (*((_BYTE *)this + 8360))
  {
    v8 = 0;
    if (this == (HGMetalContext **)-8184)
      goto LABEL_21;
    goto LABEL_19;
  }
  v9 = (PCBitmap *)v32;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v32 + 64) + 48))(*(_QWORD *)(v32 + 64));
  Format = PGHelium::makeFormat(v10);
  v12 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v9 + 16))(v9);
  v13 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v9 + 24))(v9);
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v13 >= 0)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = HGRectMake4i(-(v14 >> 1), -(v15 >> 1), v12 - (v14 >> 1), v13 - (v15 >> 1));
  v18 = v17;
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 + 8) + 16))(*((_QWORD *)v9 + 8));
  BytesPerRow = PCBitmap::getBytesPerRow(v9);
  v21 = (char *)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v21, v16, v18, Format, v19, BytesPerRow);
  MetalContext = (HGMetalTexture *)HGGPURenderer::GetMetalContext(a5);
  *(_QWORD *)&v34.var0 = *(_QWORD *)(v21 + 28);
  *(_QWORD *)&v34.var2 = 0;
  HGMetalTexture::createFromBitmap(MetalContext, (HGMetalContext *)v21, *(HGBitmap **)(v21 + 20), v34, 0, &v29);
  v23 = this[1054];
  v24 = v29;
  if (v23 != v29)
  {
    if (v23)
    {
      (*(void (**)(HGMetalContext *))(*(_QWORD *)v23 + 24))(v23);
      v24 = v29;
    }
    this[1054] = v24;
    if (!v24)
    {
      this[1055] = 0;
      goto LABEL_18;
    }
    (*(void (**)(HGMetalContext *))(*(_QWORD *)v24 + 16))(v24);
    v23 = v29;
  }
  this[1055] = 0;
  if (v23)
  {
    (*(void (**)(HGMetalContext *))(*(_QWORD *)v23 + 24))(v23);
    v9 = (PCBitmap *)v32;
  }
LABEL_18:
  CGColorSpace = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)v9);
  PCImage::setColorSpace((PCImage *)(this + 1046), CGColorSpace);
  *((_BYTE *)this + 8360) = 1;
  (*(void (**)(char *))(*(_QWORD *)v21 + 24))(v21);
  v7 = v30;
  v8 = v31 == 0;
  if (!v30)
    goto LABEL_21;
LABEL_19:
  if (!v8)
    PCMutex::unlock(v7);
LABEL_21:
  v26 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1B2ECBE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1B2ECBEF0()
{
  JUMPOUT(0x1B2ECBEDCLL);
}

void OZFootage::getErrorImage(OZFootage *this@<X0>, const OZRenderParams *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  CGColorSpace *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CGColorSpaceRef v12;
  _DWORD v13[4];
  uint64_t v14;
  CGColorSpaceRef space;
  int v16;
  uint64_t v17;
  uint64_t ImageContext;
  __int128 v19;

  if (*((_DWORD *)this + 80) == 1)
  {
    *(_OWORD *)a3 = v19;
  }
  else
  {
    PCImageAttributes::PCImageAttributes((PCImageAttributes *)v13);
    v13[0] = 2;
    v13[1] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 16))(v19);
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 24))(v19);
    v7 = *(_DWORD *)(v19 + 36);
    v13[2] = v6;
    v13[3] = v7;
    v14 = 0x300000004;
    PCImage::getColorSpace((PCImage *)v19, &v12);
    v8 = v12;
    if (space && space != v12)
    {
      PCCFRefTraits<CGColorSpace *>::release(space);
      v8 = v12;
    }
    space = v8;
    v12 = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
    v16 = 3553;
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 64) + 16))(*(_QWORD *)(v19 + 64));
    ImageContext = OZRenderParams::getImageContext(this);
    PGCreateImage((const PCImageAttributes *)v13, a3);
    PCCFRef<CGColorSpace *>::~PCCFRef(&space);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1B2ECC040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, uint64_t a10, uint64_t a11, uint64_t a12, CGColorSpace *a13)
{
  uint64_t v13;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v13 - 32);
  _Unwind_Resume(a1);
}

unint64_t `anonymous namespace'::createErrorBitmap@<X0>(_anonymous_namespace_ *this@<X0>, const OZRenderParams *a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 Resolution;
  __n128 v8;
  double v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  CGColorSpace *v23;
  CGColorSpace **v24;
  CGColorSpace *v25;
  CGColorSpace **v26;
  CGColorSpace *v27;
  unint64_t result;
  unint64_t i;
  unint64_t j;
  _BYTE *v31;
  PCColorSpaceCache *BytesPerRow;
  unsigned __int8 v33;
  char v34;
  char v35;
  unsigned __int8 v36;
  char v37;
  char v38;
  unsigned __int8 v39;
  char v40;
  __n128 v41;

  Resolution = OZRenderParams::getResolution(this, &v41);
  v8 = v41;
  Resolution.n128_u32[0] = *((_DWORD *)this + 81);
  v9 = v41.n128_f64[0] * (double)Resolution.n128_u64[0];
  if ((int)v9 <= 1)
    v10 = 1;
  else
    v10 = (int)v9;
  LODWORD(v9) = *((_DWORD *)this + 82);
  v11 = (int)(v41.n128_f64[1] * (double)*(unint64_t *)&v9);
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = v11;
  v13 = (_QWORD *)operator new();
  PCBitmap::PCBitmap((uint64_t)v13, v10, v12, 3, (uint64_t)a2, 1);
  *v13 = &unk_1E6511830;
  std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,void>(a3, (uint64_t)v13);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 64) + 16))(*(_QWORD *)(*a3 + 64));
  v15 = vcvtd_n_s64_f64(v8.n128_f64[0], 2uLL);
  if (v15 <= 1)
    v16 = 1;
  else
    v16 = v15;
  v17 = (int)(v8.n128_f64[1] * 3.0);
  if (v17 <= 1)
    v18 = 1;
  else
    v18 = v17;
  if ((int)(v8.n128_f64[0] * 25.0) <= 1)
    v19 = 1;
  else
    v19 = (int)(v8.n128_f64[0] * 25.0);
  if ((int)(v8.n128_f64[1] * 25.0) <= 1)
    v20 = 1;
  else
    v20 = (int)(v8.n128_f64[1] * 25.0);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3);
  BytesPerRow = (PCColorSpaceCache *)PCBitmap::getBytesPerRow((PCBitmap *)*a3);
  v41.n128_u8[0] = -52;
  v40 = -52;
  v39 = 0;
  v23 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(BytesPerRow);
  v24 = PCGetColorInColorSpace<unsigned char,unsigned char>(v23, 0xCCu, (CGColorSpace *)0xCC, 0, a2, &v41, &v40, &v39);
  v38 = -52;
  v37 = 100;
  v36 = -34;
  v25 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear((PCColorSpaceCache *)v24);
  v26 = PCGetColorInColorSpace<unsigned char,unsigned char>(v25, 0xCCu, (CGColorSpace *)0x64, 0xDEu, a2, &v38, &v37, &v36);
  v35 = 100;
  v34 = -56;
  v33 = 100;
  v27 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear((PCColorSpaceCache *)v26);
  result = (unint64_t)PCGetColorInColorSpace<unsigned char,unsigned char>(v27, 0x64u, (CGColorSpace *)0xC8, 0x64u, a2, &v35, &v34, &v33);
  if (v22 >= 1)
  {
    for (i = 0; i != v22; ++i)
    {
      if (v21 >= 1)
      {
        for (j = 0; j != v21; ++j)
        {
          v31 = (_BYTE *)(v14 + i * (int)BytesPerRow + (4 * j));
          if (j < v16 || (uint64_t)j >= v21 - (int)v16 || i < v18 || (uint64_t)i >= v22 - (int)v18)
          {
            *v31 = -1;
            v31[1] = v41.n128_u8[0];
            v31[2] = v40;
            result = v39;
          }
          else
          {
            *v31 = -1;
            if ((((i / v20) ^ (j / v19)) & 1) != 0)
            {
              v31[1] = v38;
              v31[2] = v37;
              result = v36;
            }
            else
            {
              v31[1] = v35;
              v31[2] = v34;
              result = v33;
            }
          }
          v31[3] = result;
        }
      }
    }
  }
  return result;
}

void sub_1B2ECC374(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void OZFootage::getErrorHeliumGraph(_anonymous_namespace_ *a1@<X0>, const void *a2@<X1>, FxColorDescription *a3@<X2>, HGBitmapLoader **a4@<X8>)
{
  CGColorSpace *v8;
  const OZRenderParams *CGColorSpace;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  FxColorDescription::setDynamicRange(a3, 0);
  if (!FxColorDescription::getCGColorSpace(a3))
  {
    v8 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(0);
    FxColorDescription::setCGColorSpace(a3, v8);
  }
  CGColorSpace = (const OZRenderParams *)FxColorDescription::getCGColorSpace(a3);
  if (*((_DWORD *)a1 + 80) == 1)
  {
    v21 = v23;
    v22 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v20 = 0;
    PGHelium::createBitmapNode(&v21, (unsigned int *)&v20, 0, 0, a4);
    v12 = v22;
    if (v22)
    {
      v13 = (unint64_t *)&v22->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
LABEL_22:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    OZFootage::getErrorImage(a1, CGColorSpace, &v23);
    if (a2)
    else
      v18 = 0;
    v21 = 0;
    PGHelium::createTextureNode(&v23, (uint64_t)v18, (unsigned int *)&v21, 0, 0, a4);
    v15 = v24;
    if (v24)
    {
      v19 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v19);
      while (__stlxr(v17 - 1, v19));
      goto LABEL_22;
    }
  }
}

void sub_1B2ECC564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::reloadResources(OZFootage *this, PGContext *a2)
{
  PMClip *v3;
  uint64_t v4;

  v3 = (PMClip *)*((_QWORD *)this + 1009);
  if (v3)
    PMClip::reloadResources(v3);
  PCMutex::lock((PCMutex *)((char *)this + 8184));
  v4 = *((_QWORD *)this + 1054);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 1054) = 0;
  }
  *((_QWORD *)this + 1055) = 0;
  *((_BYTE *)this + 8360) = 0;
  return PCMutex::unlock((PCMutex *)((char *)this + 8184));
}

void sub_1B2ECC608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::updateModifiedDate(OZFootage *this)
{
  uint64_t result;
  int ModificationDate;

  result = *((_QWORD *)this + 1009);
  if (result)
  {
    ModificationDate = PMClip::getModificationDate((PMClip *)result);
    if (*((_DWORD *)this + 384) == ModificationDate)
    {
      return 0;
    }
    else
    {
      *((_DWORD *)this + 384) = ModificationDate;
      return 1;
    }
  }
  return result;
}

uint64_t OZFootage::updateAssociatedResourcesAvailable(OZFootage *this)
{
  return 0;
}

uint64_t OZFootage::updateMissingFile(OZFootage *this)
{
  uint64_t v2;

  if (((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1352))(this)
     && (v2 = *((_QWORD *)this + 1009)) != 0
     && !*(_BYTE *)(v2 + 1240)
     || (*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1360))(this) && *((_QWORD *)this + 1009)
     || (*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) && *((_QWORD *)this + 1009))
    && (*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this)
    && *((_QWORD *)this + 1009))
  {
    OZSceneNodeFile::setIsFileMissing((uint64_t)this, 0);
  }
  return 0;
}

uint64_t OZFootage::writeBody(OZFootage *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, unsigned int a5)
{
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  double v10;
  const __CFURL **v11;
  PCString *v12;
  const __CFURL **v13;
  PCXMLWriteStream *v14;
  const __CFURL **URL;
  CFURLRef *v16;
  __CFString *v17;
  const __CFArray *ArrayBySeparatingStrings;
  __CFString *v19;
  const __CFArray *v20;
  int Count;
  int v22;
  int v23;
  uint64_t v24;
  CFIndex v25;
  const __CFString *ValueAtIndex;
  const __CFString *v27;
  const __CFString *v28;
  int v29;
  uint64_t v30;
  const void *v31;
  const __CFURL **v32;
  PCString *v33;
  const __CFURL **v34;
  __CFString *v35;
  const __CFArray *v36;
  __CFString *v37;
  const __CFArray *v38;
  int v39;
  _BOOL4 v40;
  const __CFURL **v41;
  char v42;
  CFIndex v43;
  uint64_t v44;
  uint64_t v45;
  const __CFString *v46;
  const __CFString *v47;
  CFComparisonResult v48;
  int v50;
  int v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double Seconds;
  uint64_t DynamicRangeType;
  unsigned int *v57;
  uint64_t v58;
  uint64_t SampleNumber;
  _BOOL4 v61;
  _BOOL4 v65;
  int v66;
  PCString v67;
  CMTime v68;
  CMTime v69;
  PCString v70;
  char v71[8];
  char v72[8];
  PCString v73;
  PCSharedCount v74;
  PCString v75;
  PCSharedCount v76;
  PCString v77;
  PCString v78;
  PCString v79;
  PCString v80;
  char v81[8];
  uint64_t v82;
  PCString v83[2];

  v7 = OZFootage::isInUseByUnreplacedDropZonesOnly(this, 0);
  if ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this))
    v61 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this) + 1584) + 160) != 0;
  else
    v61 = 0;
  if ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this))
    v8 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this) + 1584) + 320) == 0;
  else
    v8 = 0;
  {
    if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0
      || (v9 = *((_QWORD *)this + 1009)) == 0
      || (v10 = 1.0, !*(_BYTE *)(v9 + 1241)))
    {
      v10 = 0.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 7464), MEMORY[0x1E0CA2E68], v10, 1);
  }
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFootageScope);
  if (v7)
  {
    if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this)
      && (v11 = (const __CFURL **)*((_QWORD *)this + 193)) != 0)
    {
      PCURL::getAsFileSystemString(v11, v83);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, v83);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v12 = v83;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, OZFootage *))(*(_QWORD *)this + 1240))(&v82, this);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v82);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v12 = (PCString *)&v82;
    }
LABEL_23:
    PCString::~PCString(v12);
    goto LABEL_24;
  }
  if (v8)
  {
    if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this)
      && (v13 = (const __CFURL **)*((_QWORD *)this + 193)) != 0)
    {
      PCURL::getAsURLString(v13, (PCURL *)v81);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, char *))(*(_QWORD *)a2 + 104))(a2, v81);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v12 = (PCString *)v81;
    }
    else
    {
      (*(void (**)(PCString *__return_ptr, OZFootage *))(*(_QWORD *)this + 1272))(&v80, this);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v80);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v12 = &v80;
    }
    goto LABEL_23;
  }
LABEL_24:
  v65 = v8;
  v66 = v7;
  if (v14 && (((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) | v7) & 1) == 0)
  {
    URL = (const __CFURL **)PCXMLWriteStream::getURL(v14);
    PCURL::getAsFileSystemString(URL, &v79);
    (*(void (**)(PCString *__return_ptr, OZFootage *))(*(_QWORD *)this + 1264))(&v78, this);
    v16 = (CFURLRef *)PCXMLWriteStream::getURL(v14);
    PCURL::getContainingFolderAsURLString(v16, (PCURL *)&v77);
    v17 = PCString::cf_str(&v79);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v17, CFSTR("/"));
    v19 = PCString::cf_str(&v78);
    v20 = CFStringCreateArrayBySeparatingStrings(0, v19, CFSTR("/"));
    Count = CFArrayGetCount(ArrayBySeparatingStrings);
    v22 = CFArrayGetCount(v20);
    v23 = v22;
    if (Count >= v22)
      v24 = v22;
    else
      v24 = Count;
    if ((int)v24 >= 1)
    {
      v25 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v25);
        v27 = (const __CFString *)CFArrayGetValueAtIndex(v20, v25);
        if (CFStringCompare(ValueAtIndex, v27, 1uLL))
          break;
        if (v24 == ++v25)
          goto LABEL_35;
      }
      LODWORD(v24) = v25;
      if (!(_DWORD)v25)
        goto LABEL_46;
LABEL_35:
      if ((_DWORD)v24 != 1
        || (v28 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0), CFStringGetLength(v28)))
      {
        PCSharedCount::PCSharedCount(&v76);
        if (~(_DWORD)v24 + Count >= 1)
        {
          v29 = Count - v24;
          do
          {
            PCString::append((PCString *)&v76, "../");
            --v29;
          }
          while (v29 > 1);
        }
        if ((int)v24 < v23)
        {
          v30 = 0;
          do
          {
            v31 = CFArrayGetValueAtIndex(v20, v24 + v30);
            PCURL::PCURL((PCURL *)&v75, v31);
            PCString::append((PCString *)&v76, &v75);
            PCString::~PCString(&v75);
            if (v23 - 1 > (int)v24 + (int)v30)
              PCString::append((PCString *)&v76, "/");
            ++v30;
          }
          while ((int)v24 + (int)v30 < v23);
        }
        PCURL::PCURL((PCURL *)&v75, (const PCString *)&v76, 0);
        PCSharedCount::PCSharedCount(&v74);
        PCURL::getAsURLString((const __CFURL **)&v75, (PCURL *)&v73);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v73);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        PCString::~PCString(&v73);
        PCString::~PCString((PCString *)&v74);
        PCURL::~PCURL((PCURL *)&v75);
        PCString::~PCString((PCString *)&v76);
      }
    }
LABEL_46:
    CFRelease(ArrayBySeparatingStrings);
    CFRelease(v20);
    PCString::~PCString(&v77);
    PCString::~PCString(&v78);
    PCString::~PCString(&v79);
  }
  if (((v66 | v65) & 1) != 0)
    goto LABEL_78;
  if (!(*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
  {
    (*(void (**)(PCString *__return_ptr, OZFootage *))(*(_QWORD *)this + 1272))(&v79, this);
    if (v14)
    {
      v34 = (const __CFURL **)PCXMLWriteStream::getURL(v14);
      PCURL::getAsURLString(v34, (PCURL *)&v78);
      v35 = PCString::cf_str(&v78);
      v36 = CFStringCreateArrayBySeparatingStrings(0, v35, CFSTR("/"));
      v37 = PCString::cf_str(&v79);
      v38 = CFStringCreateArrayBySeparatingStrings(0, v37, CFSTR("/"));
      v39 = CFArrayGetCount(v36);
      if ((int)CFArrayGetCount(v38) >= v39)
      {
        if (v39 < 2)
        {
          v40 = 0;
        }
        else
        {
          v43 = 0;
          v44 = v39 - 1;
          if (v44 <= 1)
            v44 = 1;
          v45 = v44 - 1;
          do
          {
            v46 = (const __CFString *)CFArrayGetValueAtIndex(v36, v43);
            v47 = (const __CFString *)CFArrayGetValueAtIndex(v38, v43);
            v48 = CFStringCompare(v46, v47, 1uLL);
            v40 = v48 != kCFCompareEqualTo;
            if (v48)
              break;
          }
          while (v45 != v43++);
        }
      }
      else
      {
        v40 = 1;
      }
      CFRelease(v36);
      CFRelease(v38);
      PCString::~PCString(&v78);
    }
    else
    {
      v40 = 0;
    }
    PCString::PCString(&v78, "Contents/LibraryContent");
    if (*((_BYTE *)this + 1540))
    {
      v50 = PCString::find(&v79, &v78);
      v51 = v61;
      if (v50 >= 0)
        v51 = 1;
      if (((v40 | v51) & 1) == 0)
        goto LABEL_76;
    }
    else if (!v61 && !v40)
    {
LABEL_76:
      PCString::~PCString(&v78);
      v33 = &v79;
      goto LABEL_77;
    }
    PCString::PCString(&v70, &v79);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v70);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v70);
    goto LABEL_76;
  }
  v32 = (const __CFURL **)*((_QWORD *)this + 194);
  if (v32)
  {
    PCURL::getAsURLString(v32, (PCURL *)v72);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(_QWORD *)a2 + 104))(a2, v72);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    v33 = (PCString *)v72;
LABEL_77:
    PCString::~PCString(v33);
    goto LABEL_78;
  }
  v41 = (const __CFURL **)*((_QWORD *)this + 193);
  v42 = !v61;
  if (!v41)
    v42 = 1;
  if ((v42 & 1) == 0)
  {
    PCURL::getAsURLString(v41, (PCURL *)v71);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, char *))(*(_QWORD *)a2 + 104))(a2, v71);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    v33 = (PCString *)v71;
    goto LABEL_77;
  }
LABEL_78:
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) != 0)
  {
    v53 = *((unsigned int *)this + 2074);
    v54 = *((unsigned int *)this + 2075);
    Seconds = *((double *)this + 1038);
    DynamicRangeType = *((unsigned int *)this + 2078);
  }
  else
  {
    v57 = (unsigned int *)*((_QWORD *)this + 1009);
    v53 = v57[72];
    v54 = v57[73];
    Seconds = PMClip::getSeconds((PMClip *)v57, v52);
    DynamicRangeType = PMClip::getDynamicRangeType(*((PMClip **)this + 1009));
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v53);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v54);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, Seconds);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, DynamicRangeType);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v58 = *((_QWORD *)this + 121);
  if (v58)
  {
    v69 = *(CMTime *)((_BYTE *)this + 344);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v58 + 336), (__n128 *)&v68);
    SampleNumber = PC_CMTimeGetSampleNumber(&v69, &v68);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 72))(a2, SampleNumber);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  PCString::PCString(&v67, (const PCString *)this + 1036);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 7);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v67);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v67);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
}

void sub_1B2ECD108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,PCString a29,PCString a30,PCString a31,PCString a32,PCString a33,PCString a34)
{
  uint64_t v34;

  PCString::~PCString(&a30);
  PCURL::~PCURL((PCURL *)&a31);
  PCString::~PCString(&a32);
  PCString::~PCString(&a33);
  PCString::~PCString(&a34);
  PCString::~PCString((PCString *)(v34 - 144));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFootage::writeBody(OZFootage *this, PCSerializerWriteStream *a2, unsigned int a3, int a4, unsigned int a5)
{
  return OZFootage::writeBody((OZFootage *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZFootage::parseBegin(OZFootage *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZFootageScope);
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], -1.0, 0);
  return 1;
}

uint64_t `non-virtual thunk to'OZFootage::parseBegin(OZFootage *this, PCSerializerReadStream *a2)
{
  OZFootage::parseBegin((OZFootage *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZFootage::parseEnd(OZFootage *this, PCSerializerReadStream *a2)
{
  double v4;
  double v5;
  OZChannelDouble *v6;
  double v7;
  int ValueAsInt;
  uint64_t v9;
  OZChannelDouble *v10;
  OZChannelDouble *v11;
  OZChannelDouble *v12;
  int SequenceStart;
  unsigned int v14;
  PMMediaManager *v15;
  PMMediaManager *Instance;
  uint64_t Reader;
  id v19;
  PCString v20;

  if (*((_QWORD *)this + 1009) && ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) == 0)
  {
    PMClip::getMediaID(*((PMClip **)this + 1009), (PCSharedCount *)&v20);
    PCString::set((PCString *)this + 1036, &v20);
    PCString::~PCString(&v20);
  }
  if (*((_DWORD *)a2 + 26) < 3u)
    goto LABEL_13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], 0.0);
  if (v4 <= 0.0)
  {
    if (*((_QWORD *)this + 1009)
      && ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) == 0)
    {
      OZFootage::setGammaFromFile(this);
    }
    else
    {
      OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], 1.8, 0);
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 7616), v5);
  }
  if (*((_DWORD *)a2 + 26) < 3u
    || (OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], 0.0), v7 <= 0.0))
  {
LABEL_13:
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 7616), 1.8);
    OZChannel::setValue((OZChannel *)((char *)this + 7616), MEMORY[0x1E0CA2E68], 1.8, 0);
  }
  if (*((_BYTE *)this + 8476))
  {
    ValueAsInt = *((_DWORD *)this + 2118);
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1728), MEMORY[0x1E0CA2E68], 0.0);
    *((_DWORD *)this + 2118) = ValueAsInt;
    *((_BYTE *)this + 8476) = 1;
  }
  if (ValueAsInt == 4)
    OZFootage::guessAlphaFormat(this, 0);
  v9 = *((_QWORD *)this + 121);
  if ((v9
     || OZApplication::getCurrentDoc((OZApplication *)theApp)
     && (v9 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0)
    && !*(_BYTE *)(v9 + 1576)
    && *((_BYTE *)this + 8280))
  {
    OZFootage::adjustDurationForChangedFrameRate(this, 0);
  }
  if (*((double *)this + 1038) == 0.0)
  {
    if (PCString::size((PCString *)this + 196))
    {
      PCURL::PCURL((PCURL *)&v20, (const PCString *)this + 196, 0);
      SequenceStart = PCURL::getSequenceStart((const __CFURL **)&v20);
      if (SequenceStart < 0)
      {
        PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v19);
        Instance = (PMMediaManager *)PMMediaManager::getInstance(v15);
        Reader = PMMediaManager::findReader(Instance, (const __CFURL **)&v20);
        if (Reader)
        {
          if ((*(unsigned int (**)(void))(Reader + 232))())
            v14 = 100;
          else
            v14 = 1;
        }
        else
        {
          v14 = 100;
        }
        PCAutoreleasePool::~PCAutoreleasePool(&v19);
      }
      else
      {
        v14 = PCURL::getSequenceEnd((const __CFURL **)&v20) - SequenceStart + 1;
      }
      PCURL::~PCURL((PCURL *)&v20);
    }
    else
    {
      v14 = 1;
    }
    *((double *)this + 1038) = (double)v14 / (*(double (**)(OZFootage *))(*(_QWORD *)this + 1328))(this);
  }
  OZSceneNode::parseEnd(this, a2);
  return 1;
}

void sub_1B2ECD5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCURL::~PCURL((PCURL *)&a10);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::removeAnimation(OZChannel *this, OZChannelDouble *a2)
{
  uint64_t result;
  CMTime *v4;
  double v5;
  double v6;
  CMTime v7;
  CMTime v8;

  result = (*((uint64_t (**)(OZChannel *, _QWORD))this->var0 + 69))(this, 0);
  if ((_DWORD)result)
  {
    v4 = (CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble(this, MEMORY[0x1E0CA2E68], 0.0);
    v6 = v5;
    v8 = *v4;
    if ((*((unsigned int (**)(OZChannel *, CMTime *, _QWORD))this->var0 + 79))(this, &v8, 0))
    {
      do
        (*((void (**)(OZChannel *, CMTime *))this->var0 + 76))(this, &v8);
      while (((*((uint64_t (**)(OZChannel *, CMTime *, _QWORD))this->var0 + 79))(this, &v8, 0) & 1) != 0);
    }
    CMTimeMake(&v7, 1, 1);
    v8 = v7;
    if ((*((unsigned int (**)(OZChannel *, CMTime *, _QWORD))this->var0 + 78))(this, &v8, 0))
    {
      do
        (*((void (**)(OZChannel *, CMTime *))this->var0 + 76))(this, &v8);
      while (((*((uint64_t (**)(OZChannel *, CMTime *, _QWORD))this->var0 + 78))(this, &v8, 0) & 1) != 0);
    }
    (*((void (**)(OZChannel *, _QWORD, _QWORD))this->var0 + 63))(this, 0, 0);
    return (*((uint64_t (**)(OZChannel *, _QWORD, _QWORD, double))this->var0 + 89))(this, MEMORY[0x1E0CA2E68], 0, v6);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZFootage::parseEnd(OZFootage *this, PCSerializerReadStream *a2)
{
  OZFootage::parseEnd((OZFootage *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZFootage::parseElement(OZFootage *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  BOOL v6;
  BOOL v7;
  PCXMLReadStream *v8;
  PCXMLReadStream *v9;
  __CFString *v10;
  CFStringRef v11;
  int v12;
  CFURLRef *URL;
  CFURLRef PathComponent;
  const __CFURL *v15;
  CFURLRef v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char v22;
  CMTime v23;
  PCString v24;
  int64_t value;
  PCSharedCount v26;

  PCSharedCount::PCSharedCount(&v26);
  value = 0;
  if ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this))
    v6 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this) + 1584) + 104) != 0;
  else
    v6 = 0;
  if ((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this))
    v7 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 272))(this) + 1584) + 160) != 0;
  else
    v7 = 0;
  *((_BYTE *)this + 1540) = 1;
  OZSceneNode::parseElement((OZTimeMarkerSet **)this, a2, a3);
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      if (!v6)
        *((_BYTE *)this + 8316) = 1;
      if ((*((_BYTE *)this + 1541) || (*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
        && PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26))
      {
        PCURL::PCURL((PCURL *)&v23, (const PCString *)&v26, 0);
        if ((*(unsigned int (**)(OZFootage *, CMTime *))(*(_QWORD *)this + 1400))(this, &v23))
        {
          *((_BYTE *)this + 1541) = 0;
          if (*((_BYTE *)this + 1540))
            v19 = 1;
          else
            v19 = v7;
          if ((v19 & 1) == 0)
            (*(void (**)(OZFootage *))(*(_QWORD *)this + 104))(this);
        }
        PCURL::~PCURL((PCURL *)&v23);
      }
      goto LABEL_39;
    case 2:
    case 8:
      if (!v6)
        *((_BYTE *)this + 8316) = 1;
      if (!*((_BYTE *)this + 1541) && !(*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this))
        goto LABEL_39;
      if (!v8)
        goto LABEL_39;
      v9 = v8;
      if (!PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v26))
        goto LABEL_39;
      v10 = PCString::cf_str((PCString *)&v26);
      v11 = CFURLCreateStringByReplacingPercentEscapes(0, v10, &stru_1E65EDDA0);
      PCURL::PCURL((PCURL *)&v24, v11);
      PCURL::PCURL((PCURL *)&v23, &v24, 0);
      PCString::~PCString(&v24);
      v12 = (*(uint64_t (**)(OZFootage *, CMTime *))(*(_QWORD *)this + 1416))(this, &v23);
      PCURL::~PCURL((PCURL *)&v23);
      if (!(*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1432))(this)
        || !*(_QWORD *)PCXMLReadStream::getURL(v9))
      {
        if (!v12)
          goto LABEL_39;
        goto LABEL_41;
      }
      URL = (CFURLRef *)PCXMLReadStream::getURL(v9);
      PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *URL);
      v15 = (const __CFURL *)MEMORY[0x1B5E27FAC](0, v11, 0, 0, PathComponent);
      v16 = CFURLCopyAbsoluteURL(v15);
      PCURL::PCURL((PCURL *)&v23, v16);
      v17 = (*(uint64_t (**)(OZFootage *, CMTime *))(*(_QWORD *)this + 1400))(this, &v23);
      if (*((_BYTE *)this + 1540))
        v17 = (*(uint64_t (**)(OZFootage *, CMTime *))(*(_QWORD *)this + 1416))(this, &v23);
      v18 = v17;
      CFRelease(v11);
      CFRelease(PathComponent);
      CFRelease(v15);
      CFRelease(v16);
      PCURL::~PCURL((PCURL *)&v23);
      if ((v18 & 1) != 0)
      {
LABEL_41:
        *((_BYTE *)this + 1541) = 0;
        if (*((_BYTE *)this + 1540))
          v22 = 1;
        else
          v22 = v7;
        if ((v22 & 1) == 0)
          (*(void (**)(OZFootage *))(*(_QWORD *)this + 104))(this);
      }
LABEL_39:
      PCString::~PCString((PCString *)&v26);
      return 1;
    case 3:
      v20 = 8296;
      goto LABEL_34;
    case 4:
      v20 = 8300;
LABEL_34:
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)this + v20);
      goto LABEL_39;
    case 5:
      PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 8304);
      goto LABEL_39;
    case 6:
      PCSerializerReadStream::getAsUInt64((uint64_t)a2, (uint64_t)a3, (uint64_t)&value);
      CMTimeMake(&v23, value, 1);
      *((CMTime *)this + 344) = v23;
      goto LABEL_39;
    case 7:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 8288);
      goto LABEL_39;
    case 0xA:
      LODWORD(v23.value) = 0;
      PCSerializerReadStream::getAsInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v23);
      *((_DWORD *)this + 2078) = v23.value;
      goto LABEL_39;
    default:
      goto LABEL_39;
  }
}

void sub_1B2ECDB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFootage::parseElement(OZFootage *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZFootage::parseElement((OZFootage *)((char *)this - 48), a2, a3);
  return 1;
}

uint64_t OZFootage::isActiveInTimeRange(OZFootage *this, const PCTimeRange *a2)
{
  (*(void (**)(OZFootage *, const PCTimeRange *))(*(_QWORD *)this + 640))(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZFootage::isActiveInTimeRange(OZFootage *this, const PCTimeRange *a2)
{
  (*(void (**)(char *, const PCTimeRange *))(*((_QWORD *)this - 2) + 640))((char *)this - 16, a2);
  return 1;
}

uint64_t OZFootage::calcHashForState(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  double v13;
  double v14;
  int v15;
  int ValueAsInt;
  int v17;
  int v18;
  CMTime v19;
  CMTime v20;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1) & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 8072);
    if (v8)
    {
      if (*(_DWORD *)(v8 + 344) != 1)
      {
        v12 = ceil(*(double *)(v8 + 360) + -0.01);
        if (*(_BYTE *)(v8 + 1240))
          v13 = v12;
        else
          v13 = *(double *)(v8 + 360);
        if (*(_BYTE *)(a1 + 8484))
        {
          if (*(_DWORD *)(a1 + 8480))
          {
LABEL_17:
            v19 = *a3;
            operator*(&v19, 2, &v20);
            v14 = FigTimeToFrameWithRate(&v20, v13);
            v15 = 2 * *(_DWORD *)(*(_QWORD *)(a1 + 8072) + 344);
            goto LABEL_20;
          }
        }
        else
        {
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 3296), MEMORY[0x1E0CA2E68], 0.0);
          *(_DWORD *)(a1 + 8480) = ValueAsInt;
          *(_BYTE *)(a1 + 8484) = 1;
          if (ValueAsInt)
            goto LABEL_17;
        }
        v20 = *a3;
        v14 = FigTimeToFrameWithRate(&v20, v13);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 8072) + 344);
LABEL_20:
        v17 = v15 - 1;
        v18 = (int)v14 & ~((int)v14 >> 31);
        if (v17 >= v18)
          v9 = v18;
        else
          v9 = v17;
        goto LABEL_5;
      }
    }
  }
  v9 = 0;
LABEL_5:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (*(_BYTE *)(a1 + 8484))
  {
    v10 = *(unsigned int *)(a1 + 8480);
  }
  else
  {
    v10 = OZChannel::getValueAsInt((OZChannel *)(a1 + 3296), MEMORY[0x1E0CA2E68], 0.0);
    *(_DWORD *)(a1 + 8480) = v10;
    *(_BYTE *)(a1 + 8484) = 1;
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (*(_QWORD *)(a1 + 8072) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1) & 1) == 0)
  {
    PMClip::getAsFileSystemString(*(const PCString **)(a1 + 8072), (PCString *)&v20);
    (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)a2 + 104))(a2, &v20);
    PCString::~PCString((PCString *)&v20);
  }
  return OZSceneNodeFile::calcHashForState(a1, a2, (uint64_t)a3, a4);
}

void sub_1B2ECDE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::getFieldDominance(OZFootage *this, CMTime *a2)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (char *)this + 8484;
  if (*((_BYTE *)this + 8484))
    return *((unsigned int *)this + 2120);
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3296), MEMORY[0x1E0CA2E68], 0.0);
  *((_DWORD *)this + 2120) = result;
  *v3 = 1;
  return result;
}

uint64_t `non-virtual thunk to'OZFootage::calcHashForState(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4)
{
  return OZFootage::calcHashForState(a1 - 16, a2, a3, a4);
}

__n128 OZFootage::getNaturalDuration@<Q0>(OZFootage *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 232);
  *a2 = result;
  a2[1].n128_u64[0] = *((_QWORD *)this + 31);
  return result;
}

__n128 `non-virtual thunk to'OZFootage::getNaturalDuration@<Q0>(OZFootage *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 216);
  *a2 = result;
  a2[1].n128_u64[0] = *((_QWORD *)this + 29);
  return result;
}

uint64_t OZFootage::getNaturalDurationFlags(OZFootage *this)
{
  if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1376))(this) == 1)
    return 6;
  else
    return 1;
}

uint64_t `non-virtual thunk to'OZFootage::getNaturalDurationFlags(OZFootage *this)
{
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this - 2) + 1376))((char *)this - 16) == 1)
    return 6;
  else
    return 1;
}

double OZFootage::getMaximumDuration(OZFootage *this)
{
  uint64_t v3;

  if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)this + 1376))(this) != 1
    && ((v3 = *((_QWORD *)this + 121)) != 0
     || (v3 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3)) != 0))
  {
    return ceil(OZFootage::getSeconds(this) * *(double *)(v3 + 368));
  }
  else
  {
    return 1.0;
  }
}

void OZFootage::getPixelAspectRatio(OZFootage *this)
{
  if (((*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1432))(this) & 1) == 0)
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3144), MEMORY[0x1E0CA2E68], 0.0);
}

BOOL OZFootage::hasAlpha(OZFootage *this)
{
  _BYTE *v2;
  int ValueAsInt;

  v2 = (char *)this + 8476;
  if (*((_BYTE *)this + 8476))
  {
    ValueAsInt = *((_DWORD *)this + 2118);
  }
  else
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1728), MEMORY[0x1E0CA2E68], 0.0);
    *((_DWORD *)this + 2118) = ValueAsInt;
    *v2 = 1;
  }
  return ValueAsInt != 0;
}

uint64_t OZFootage::prerollBegin(OZFootage *a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[176];
  CGColorSpace *v15;
  CGColorSpace *v16;

  if (!*((_QWORD *)a1 + 1009))
    return 0;
  PMFrameRequest::PMFrameRequest((uint64_t)v14, a3);
  if (OZFootage::prepareFrameRequest(a1, a2, (PMFrameRequest *)v14))
  {
    v9 = 2;
  }
  else
  {
    v10 = *((_QWORD *)a1 + 1009);
    v12 = *(_OWORD *)a2;
    v13 = *((_QWORD *)a2 + 2);
    v9 = 2 * (PMClip::prerollBegin(v10, &v12, (uint64_t)v14, a4, a5) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  return v9;
}

void sub_1B2ECE140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34,CGColorSpace *a35)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a35);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::prerollEnd(OZFootage *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  uint64_t v5;
  _BYTE v7[176];
  CGColorSpace *v8;
  CGColorSpace *v9;

  if (!*((_QWORD *)this + 1009))
    return 0;
  PMFrameRequest::PMFrameRequest((uint64_t)v7, (uint64_t)a3);
  if (OZFootage::prepareFrameRequest(this, a2, (PMFrameRequest *)v7))
    v5 = 2;
  else
    v5 = 2 * (PMClip::prerollEnd(*((_QWORD *)this + 1009), (uint64_t)v7) != 0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
  return v5;
}

void sub_1B2ECE1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::setRate(OZFootage *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[176];
  CGColorSpace *v13;
  CGColorSpace *v14;

  if (!*((_QWORD *)this + 1009))
    return 0;
  PMFrameRequest::PMFrameRequest((uint64_t)v12, (uint64_t)a3);
  if (OZFootage::prepareFrameRequest(this, a2, (PMFrameRequest *)v12))
  {
    v7 = 2;
  }
  else
  {
    v8 = *((_QWORD *)this + 1009);
    v10 = *(_OWORD *)a2;
    v11 = *((_QWORD *)a2 + 2);
    v7 = 2 * (PMClip::setRate(v8, a4, (uint64_t)&v10, (uint64_t)v12) != 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
  return v7;
}

void sub_1B2ECE2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34,CGColorSpace *a35)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a35);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::scheduleTokens(uint64_t *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _BYTE v11[176];
  CGColorSpace *v12;
  CGColorSpace *v13;

  if (!a1[1009])
    return 0;
  PMFrameRequest::PMFrameRequest((uint64_t)v11, a4);
  if (OZFootage::prepareFrameRequest((OZFootage *)a1, a2, (PMFrameRequest *)v11))
    v9 = 2;
  else
    v9 = 2 * (PMClip::scheduleTokens(a1[1009], a3, (uint64_t)v11, a5) != 0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
  return v9;
}

void sub_1B2ECE3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::hintTokensWillImage(uint64_t *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v9[176];
  CGColorSpace *v10;
  CGColorSpace *v11;

  if (!a1[1009])
    return 0;
  PMFrameRequest::PMFrameRequest((uint64_t)v9, a4);
  if (OZFootage::prepareFrameRequest((OZFootage *)a1, a2, (PMFrameRequest *)v9))
    v7 = 2;
  else
    v7 = 2 * (PMClip::hintTokensWillImage(a1[1009], a3, (uint64_t)v9) != 0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  return v7;
}

void sub_1B2ECE474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::getTokensImage(uint64_t *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v9[176];
  CGColorSpace *v10;
  CGColorSpace *v11;

  if (!a1[1009])
    return 0;
  PMFrameRequest::PMFrameRequest((uint64_t)v9, a4);
  if (OZFootage::prepareFrameRequest((OZFootage *)a1, a2, (PMFrameRequest *)v9))
    v7 = 2;
  else
    v7 = 2 * (PMClip::getTokensImage(a1[1009], a3, (uint64_t)v9) != 0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  return v7;
}

void sub_1B2ECE538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32,CGColorSpace *a33)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  _Unwind_Resume(a1);
}

PMClip *OZFootage::pruneTokensAtTime(OZFootage *this, CMTime *a2, const char *a3)
{
  PMClip *result;

  result = (PMClip *)*((_QWORD *)this + 1009);
  if (result)
    return (PMClip *)PMClip::pruneTokensAtTime(result, a2, a3);
  return result;
}

PMClip *OZFootage::pruneTokensExceptAtTime(OZFootage *this, CMTime *a2, const char *a3)
{
  PMClip *result;

  result = (PMClip *)*((_QWORD *)this + 1009);
  if (result)
    return (PMClip *)PMClip::pruneTokensExceptAtTime(result, a2, a3);
  return result;
}

PMClip *OZFootage::pruneAllTokens(OZFootage *this, const char *a2)
{
  PMClip *result;

  result = (PMClip *)*((_QWORD *)this + 1009);
  if (result)
    return (PMClip *)PMClip::pruneAllTokens(result, a2);
  return result;
}

uint64_t OZFootage::getIsCodecMissing(OZFootage *this)
{
  return *((unsigned __int8 *)this + 8318) | *((unsigned __int8 *)this + 8317);
}

uint64_t OZFootage::getIsCodecMissingBecauseRosettaMissing(OZFootage *this)
{
  return *((unsigned __int8 *)this + 8318);
}

uint64_t OZFootage::getIsDZFileMissing(OZFootage *this)
{
  return *((unsigned __int8 *)this + 8319);
}

uint64_t OZFootage::getPixelAspectRatioRN(OZFootage *this)
{
  return (*(uint64_t (**)(OZFootage *))(*(_QWORD *)this + 1368))(this);
}

uint64_t `non-virtual thunk to'OZFootage::getPixelAspectRatioRN(OZFootage *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 197) + 1368))((char *)this - 1576);
}

_QWORD *`non-virtual thunk to'OZFootage::getHashForStateRN@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 - 1560), a2, a3, a4, a5);
}

_OWORD *`non-virtual thunk to'OZFootage::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 - 1560), a2, a3);
}

void OZChannelAspectRatioFootage::OZChannelAspectRatioFootage(OZChannelAspectRatioFootage *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelAspectRatioFootage_FactoryBase;
  OZChannelAspectRatioFootage *v17;
  OZChannelAspectRatioFootage *OZChannelAspectRatioFootageInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelAspectRatioFootage_FactoryBase = (OZFactory *)getOZChannelAspectRatioFootage_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAspectRatioFootage_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E6552A38;
  this->var2 = (void **)&unk_1E6552D98;
  OZChannelAspectRatioFootageInfo = (OZChannelAspectRatioFootage *)OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
    this->var17 = (OZChannelInfo *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageInfo;
  }
  this->var16 = var17;
  OZChannelAspectRatioFootage::createOZChannelAspectRatioFootageImpl(OZChannelAspectRatioFootageInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
    this->var15 = (OZChannelImpl *)OZChannelAspectRatioFootage::_OZChannelAspectRatioFootageImpl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B2ECE6E8(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_fixedWidthInfo::getInstance(OZFootage::OZFootage_fixedWidthInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::OZFootage_fixedWidthInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::OZFootage_fixedWidthInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_fixedWidthInfo::_OZFootage_fixedWidthInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_fixedWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootage::OZFootage_fixedWidthInfo *v0;

  if (!OZFootage::OZFootage_fixedWidthInfo::_OZFootage_fixedWidthInfo)
  {
    v0 = (OZFootage::OZFootage_fixedWidthInfo *)operator new();
    OZFootage::OZFootage_fixedWidthInfo::OZFootage_fixedWidthInfo(v0);
    OZFootage::OZFootage_fixedWidthInfo::_OZFootage_fixedWidthInfo = (uint64_t)v0;
  }
}

void sub_1B2ECE7A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_fixedWidthInfo *OZFootage::OZFootage_fixedWidthInfo::OZFootage_fixedWidthInfo(OZFootage::OZFootage_fixedWidthInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_fixedWidthInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A4AE0;
  *((_QWORD *)this + 10) = &unk_1E65A4B00;
  return this;
}

void sub_1B2ECE850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_fixedHeightInfo::getInstance(OZFootage::OZFootage_fixedHeightInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::OZFootage_fixedHeightInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::OZFootage_fixedHeightInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_fixedHeightInfo::_OZFootage_fixedHeightInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_fixedHeightInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootage::OZFootage_fixedHeightInfo *v0;

  if (!OZFootage::OZFootage_fixedHeightInfo::_OZFootage_fixedHeightInfo)
  {
    v0 = (OZFootage::OZFootage_fixedHeightInfo *)operator new();
    OZFootage::OZFootage_fixedHeightInfo::OZFootage_fixedHeightInfo(v0);
    OZFootage::OZFootage_fixedHeightInfo::_OZFootage_fixedHeightInfo = (uint64_t)v0;
  }
}

void sub_1B2ECE91C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_fixedHeightInfo *OZFootage::OZFootage_fixedHeightInfo::OZFootage_fixedHeightInfo(OZFootage::OZFootage_fixedHeightInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 2000.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_fixedHeightInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A4B58;
  *((_QWORD *)this + 10) = &unk_1E65A4B78;
  return this;
}

void sub_1B2ECE9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_exposureInfo::getInstance(OZFootage::OZFootage_exposureInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootage::OZFootage_exposureInfo::getInstance(void)::OZFootage_exposureInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootage::OZFootage_exposureInfo::getInstance(void)::OZFootage_exposureInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_exposureInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_exposureInfo::_OZFootage_exposureInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_exposureInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootage::OZFootage_exposureInfo *v0;

  if (!OZFootage::OZFootage_exposureInfo::_OZFootage_exposureInfo)
  {
    v0 = (OZFootage::OZFootage_exposureInfo *)operator new();
    OZFootage::OZFootage_exposureInfo::OZFootage_exposureInfo(v0);
    OZFootage::OZFootage_exposureInfo::_OZFootage_exposureInfo = (uint64_t)v0;
  }
}

void sub_1B2ECEA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_exposureInfo *OZFootage::OZFootage_exposureInfo::OZFootage_exposureInfo(OZFootage::OZFootage_exposureInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -10.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_exposureInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A4BD0;
  *((_QWORD *)this + 10) = &unk_1E65A4BF0;
  return this;
}

void sub_1B2ECEB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_defogInfo::getInstance(OZFootage::OZFootage_defogInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootage::OZFootage_defogInfo::getInstance(void)::OZFootage_defogInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootage::OZFootage_defogInfo::getInstance(void)::OZFootage_defogInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_defogInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_defogInfo::_OZFootage_defogInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_defogInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootage::OZFootage_defogInfo *v0;

  if (!OZFootage::OZFootage_defogInfo::_OZFootage_defogInfo)
  {
    v0 = (OZFootage::OZFootage_defogInfo *)operator new();
    OZFootage::OZFootage_defogInfo::OZFootage_defogInfo(v0);
    OZFootage::OZFootage_defogInfo::_OZFootage_defogInfo = (uint64_t)v0;
  }
}

void sub_1B2ECEC0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_defogInfo *OZFootage::OZFootage_defogInfo::OZFootage_defogInfo(OZFootage::OZFootage_defogInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.01, 0.001, 0.0001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_defogInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A4C48;
  *((_QWORD *)this + 10) = &unk_1E65A4C68;
  return this;
}

void sub_1B2ECECC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_kneeLowInfo::getInstance(OZFootage::OZFootage_kneeLowInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootage::OZFootage_kneeLowInfo::getInstance(void)::OZFootage_kneeLowInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootage::OZFootage_kneeLowInfo::getInstance(void)::OZFootage_kneeLowInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_kneeLowInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_kneeLowInfo::_OZFootage_kneeLowInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_kneeLowInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootage::OZFootage_kneeLowInfo *v0;

  if (!OZFootage::OZFootage_kneeLowInfo::_OZFootage_kneeLowInfo)
  {
    v0 = (OZFootage::OZFootage_kneeLowInfo *)operator new();
    OZFootage::OZFootage_kneeLowInfo::OZFootage_kneeLowInfo(v0);
    OZFootage::OZFootage_kneeLowInfo::_OZFootage_kneeLowInfo = (uint64_t)v0;
  }
}

void sub_1B2ECED8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_kneeLowInfo *OZFootage::OZFootage_kneeLowInfo::OZFootage_kneeLowInfo(OZFootage::OZFootage_kneeLowInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -3.0, 3.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_kneeLowInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A4CC0;
  *((_QWORD *)this + 10) = &unk_1E65A4CE0;
  return this;
}

void sub_1B2ECEE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFootage::OZFootage_kneeHighInfo::getInstance(OZFootage::OZFootage_kneeHighInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootage::OZFootage_kneeHighInfo::getInstance(void)::OZFootage_kneeHighInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootage::OZFootage_kneeHighInfo::getInstance(void)::OZFootage_kneeHighInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage::OZFootage_kneeHighInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage::OZFootage_kneeHighInfo::_OZFootage_kneeHighInfo;
}

void std::__call_once_param<std::tuple<OZFootage::OZFootage_kneeHighInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootage::OZFootage_kneeHighInfo *v0;

  if (!OZFootage::OZFootage_kneeHighInfo::_OZFootage_kneeHighInfo)
  {
    v0 = (OZFootage::OZFootage_kneeHighInfo *)operator new();
    OZFootage::OZFootage_kneeHighInfo::OZFootage_kneeHighInfo(v0);
    OZFootage::OZFootage_kneeHighInfo::_OZFootage_kneeHighInfo = (uint64_t)v0;
  }
}

void sub_1B2ECEF04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZFootage::OZFootage_kneeHighInfo *OZFootage::OZFootage_kneeHighInfo::OZFootage_kneeHighInfo(OZFootage::OZFootage_kneeHighInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 3.5, 7.5, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZFootage::OZFootage_kneeHighInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A4D38;
  *((_QWORD *)this + 10) = &unk_1E65A4D58;
  return this;
}

void sub_1B2ECEFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

PCImage *PGMetalTexture::PGMetalTexture(PCImage *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  PCImage::PCImage(a1);
  *v4 = &off_1E6584700;
  v5 = *a2;
  *((_QWORD *)a1 + 8) = *a2;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  *((_QWORD *)a1 + 9) = 0;
  return a1;
}

void sub_1B2ECF028(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCImage::~PCImage(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsFieldBehavior::OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;
  PCString v7;

  OZBehavior::OZBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(_QWORD *)this = &off_1E65A4DB0;
  *((_QWORD *)this + 2) = &unk_1E65A5048;
  *((_QWORD *)this + 6) = &unk_1E65A52A0;
  *((_QWORD *)this + 42) = &unk_1E65A52F8;
  PCString::PCString(&v7, "Drag;Vortex;Radial Gravity;Linear Gravity;Noise;Turbulence;Electric;Magnetic");
  PCString::PCString(&v6, "Type");
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 536), 1u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Strength");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 792), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Falloff Exponent");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 944), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Infinite Extent");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1096), 1, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Extent");
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1248), 1.0, 1.0, 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Direction");
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1840), 0.0, -1.0, 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Smoothness");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 2432), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Animation Speed");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 2584), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Minimum Falloff Distance");
  OZChannelDouble::OZChannelDouble((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 2736), 0.000001, &v7, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setMin((OZChannel *)this + 16, 0.0);
  OZChannel::setMax((OZChannel *)this + 16, 1.0);
  OZChannel::setMin((OZChannel *)this + 18, 0.000001);
}

void sub_1B2ECF364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, PCString a11, PCString a12)
{
  uint64_t v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannelBool *v15;
  OZChannel3D *v16;
  OZChannel3D *v17;
  OZChannel *v18;
  OZChannel *v19;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannel3D::~OZChannel3D(v17);
  OZChannel3D::~OZChannel3D(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelEnum::~OZChannelEnum(a10);
  *(_QWORD *)(v12 + 336) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v12 + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v12 + 344));
  OZBehavior::~OZBehavior((OZBehavior *)v12);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsFieldBehavior::OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this, const OZ3DEnginePhysicsFieldBehavior *a2, char a3)
{
  uint64_t v5;

  OZBehavior::OZBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(_QWORD *)this = &off_1E65A4DB0;
  *((_QWORD *)this + 2) = &unk_1E65A5048;
  *((_QWORD *)this + 6) = &unk_1E65A52A0;
  *((_QWORD *)this + 42) = &unk_1E65A52F8;
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 536), (const OZ3DEnginePhysicsFieldBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 99) = &off_1E6551358;
  *((_QWORD *)this + 101) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 944), (const OZChannelBase *)((char *)a2 + 944), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 118) = &off_1E6551358;
  *((_QWORD *)this + 120) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1096), (const OZChannelBase *)((char *)a2 + 1096), (OZChannelFolder *)((char *)this + 56));
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1248), (const OZ3DEnginePhysicsFieldBehavior *)((char *)a2 + 1248), (OZChannelFolder *)((char *)this + 56));
  OZChannel3D::OZChannel3D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1840), (const OZ3DEnginePhysicsFieldBehavior *)((char *)a2 + 1840), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)this + 16, (const OZChannelBase *)((char *)a2 + 2432), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 304) = &off_1E6551358;
  *((_QWORD *)this + 306) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)this + 17, (const OZChannelBase *)((char *)a2 + 2584), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 323) = &off_1E6551358;
  *((_QWORD *)this + 325) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)this + 18, (const OZChannelBase *)((char *)a2 + 2736), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 342) = &off_1E6551358;
  *((_QWORD *)this + 344) = &unk_1E65516B8;
}

void sub_1B2ECF654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannel *a10, OZChannel *a11, OZChannelEnum *a12)
{
  uint64_t v12;
  OZChannel *v13;
  OZChannel3D *v14;
  OZChannel3D *v15;
  OZChannel *v16;

  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v16);
  OZChannel3D::~OZChannel3D(v15);
  OZChannel3D::~OZChannel3D(v14);
  OZChannelBool::~OZChannelBool(a9);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  *(_QWORD *)(v12 + 336) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v12 + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v12 + 344));
  OZBehavior::~OZBehavior((OZBehavior *)v12);
  _Unwind_Resume(a1);
}

void sub_1B2ECF6E8()
{
  JUMPOUT(0x1B2ECF6A0);
}

void sub_1B2ECF6F0()
{
  JUMPOUT(0x1B2ECF6A8);
}

void sub_1B2ECF6F8()
{
  JUMPOUT(0x1B2ECF6B0);
}

void sub_1B2ECF700()
{
  JUMPOUT(0x1B2ECF6B8);
}

void sub_1B2ECF708()
{
  JUMPOUT(0x1B2ECF6D8);
}

void OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this)
{
  *(_QWORD *)this = &off_1E65A4DB0;
  *((_QWORD *)this + 2) = &unk_1E65A5048;
  *((_QWORD *)this + 6) = &unk_1E65A52A0;
  *((_QWORD *)this + 42) = &unk_1E65A52F8;
  OZChannel::~OZChannel((OZChannel *)this + 18);
  OZChannel::~OZChannel((OZChannel *)this + 17);
  OZChannel::~OZChannel((OZChannel *)this + 16);
  *((_QWORD *)this + 230) = &off_1E65568E0;
  *((_QWORD *)this + 232) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)this + 15);
  OZChannel2D::~OZChannel2D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1840));
  *((_QWORD *)this + 156) = &off_1E65568E0;
  *((_QWORD *)this + 158) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1688));
  OZChannel2D::~OZChannel2D((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 1248));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1096));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZ3DEnginePhysicsFieldBehavior *)((char *)this + 536));
  *((_QWORD *)this + 42) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 344));
  OZBehavior::~OZBehavior(this);
}

{
  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior(OZ3DEnginePhysicsFieldBehavior *this)
{
  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior((OZ3DEnginePhysicsFieldBehavior *)((char *)this - 16));
}

{
  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior((OZ3DEnginePhysicsFieldBehavior *)((char *)this - 48));
}

{
  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior((OZ3DEnginePhysicsFieldBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEnginePhysicsFieldBehavior::~OZ3DEnginePhysicsFieldBehavior((OZ3DEnginePhysicsFieldBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

void *OZ3DEnginePhysicsFieldBehavior::didAddToNode(void *this, OZSceneNode *lpsrc)
{
  uint64_t v3;

  if (lpsrc)
  {
    v3 = (uint64_t)this;
    if (this)
      *(_QWORD *)(v3 + 328) = lpsrc;
  }
  return this;
}

void OZ3DEnginePhysicsFieldBehavior::strength(OZ3DEnginePhysicsFieldBehavior *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), a2, 0.0);
}

void OZ3DEnginePhysicsFieldBehavior::falloffExponent(OZ3DEnginePhysicsFieldBehavior *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 944), a2, 0.0);
}

void OZ3DEnginePhysicsFieldBehavior::smoothness(OZChannel *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble(this + 16, a2, 0.0);
}

void OZ3DEnginePhysicsFieldBehavior::animationSpeed(OZChannel *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble(this + 17, a2, 0.0);
}

BOOL OZ3DEnginePhysicsFieldBehavior::isExtentInfinite(OZ3DEnginePhysicsFieldBehavior *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1096), a2, 0.0) != 0;
}

void OZ3DEnginePhysicsFieldBehavior::halfExtent(OZ3DEnginePhysicsFieldBehavior *this@<X0>, const CMTime *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  OZChannel3D::getValue((uint64_t)this + 1248, a2, a3, 0.0);
}

void OZChannel3D::getValue(uint64_t a1, const CMTime *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 136), a2, a4);
    v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 288), a2, a4);
    v11 = v10;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 440), a2, a4);
    *a3 = v9;
    a3[1] = v11;
    a3[2] = v12;
  }
}

void OZ3DEnginePhysicsFieldBehavior::direction(OZ3DEnginePhysicsFieldBehavior *this@<X0>, const CMTime *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  OZChannel3D::getValue((uint64_t)this + 1840, a2, a3, 0.0);
}

void OZ3DEnginePhysicsFieldBehavior::minimumDistance(OZChannel *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble(this + 18, a2, 0.0);
}

BOOL OZ3DEnginePhysicsFieldBehavior::isRebuildUIChannel(OZ3DEnginePhysicsFieldBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2 || (OZChannelBase *)((char *)this + 1096) == a2;
}

char *OZ3DEnginePhysicsFieldBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  int ValueAsInt;
  char *result;
  uint64_t v6;
  int v7;
  char *v8;
  int v9;
  uint64_t i;
  const void *v11;
  char *v12;
  OZChannelBase *v13;
  OZChannelBase *v14;
  CMTime v15;

  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 536), &v15, 0.0);
  result = (char *)OZChannel::getValueAsInt((OZChannel *)(a1 + 1096), &v15, 0.0);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 != a2)
  {
    v7 = (int)result;
    while (1)
    {
      result = *(char **)(v6 + 16);
      if (result)
      {
        if (result)
        {
          v8 = result;
          result = (char *)OZChannel::getValueAsInt((OZChannel *)(result + 536), &v15, 0.0);
          if ((_DWORD)result != ValueAsInt)
            break;
          result = (char *)OZChannel::getValueAsInt((OZChannel *)(v8 + 1096), &v15, 0.0);
          if ((v7 != 0) != ((_DWORD)result != 0))
            break;
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == a2)
      {
        v9 = 1;
        goto LABEL_10;
      }
    }
    v9 = 0;
LABEL_10:
    for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
    {
      v11 = *(const void **)(i + 16);
      if (v11)
      else
        v12 = 0;
      v13 = (OZChannelBase *)(v12 + 2432);
      if (!v9)
      {
        OZChannelBase::setFlag(v13, 0x400000, 1);
        v14 = (OZChannelBase *)(v12 + 2584);
        goto LABEL_22;
      }
      if ((ValueAsInt & 0xFFFFFFFE) == 4)
      {
        OZChannelBase::resetFlag(v13, 0x400000, 1);
        OZChannelBase::resetFlag((OZChannelBase *)(v12 + 2584), 0x400000, 1);
        if (ValueAsInt == 4)
        {
          OZChannelBase::setFlag((OZChannelBase *)(v12 + 1840), 0x400000, 1);
          goto LABEL_21;
        }
      }
      else
      {
        OZChannelBase::setFlag(v13, 0x400000, 1);
        OZChannelBase::setFlag((OZChannelBase *)(v12 + 2584), 0x400000, 1);
      }
      OZChannelBase::resetFlag((OZChannelBase *)(v12 + 1840), 0x400000, 1);
LABEL_21:
      v14 = (OZChannelBase *)(v12 + 1248);
      if (!v7)
      {
        result = (char *)OZChannelBase::resetFlag(v14, 0x400000, 1);
        continue;
      }
LABEL_22:
      result = (char *)OZChannelBase::setFlag(v14, 0x400000, 1);
    }
  }
  return result;
}

uint64_t OZ3DEnginePhysicsFieldBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _QWORD *i;
  unint64_t v9;
  OZScene *v10;
  char *v11;

  v6 = result;
  v7 = (char *)(result + 336);
  for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
  {
    v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7)
        return result;
      ++i;
    }
  }
  v11 = (char *)(result + 336);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t `non-virtual thunk to'OZ3DEnginePhysicsFieldBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEnginePhysicsFieldBehavior::getLockDependencies(a1 - 336, a2, a3, a4);
}

uint64_t OZ3DEnginePhysicsFieldBehavior::getLockingGroups(OZ3DEnginePhysicsFieldBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZ3DEnginePhysicsFieldBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return (*(uint64_t (**)(OZ3DEnginePhysicsFieldBehavior *))(*(_QWORD *)this + 336))(this) + 1784;
  return result;
}

uint64_t `non-virtual thunk to'OZ3DEnginePhysicsFieldBehavior::getLockingGroups(OZ3DEnginePhysicsFieldBehavior *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 336;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 42) + 336))((char *)this - 336);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 336))(v1) + 1784;
  return result;
}

void OZARFaceAnchorElement::OZARFaceAnchorElement(OZARFaceAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZARAnchorElement::OZARAnchorElement(this, a2, a3, a4);
  *v5 = &off_1E65A5378;
  v5[2] = &unk_1E65A5CB0;
  v5[6] = &unk_1E65A5F08;
  v5[816] = &unk_1E65A5F60;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24424), &v6, (OZChannelFolder *)((char *)this + 320), 0x190u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage"));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 24552), &v6, (OZChannelFolder *)((char *)this + 24424), 0x191u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage"));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 26136), &v6, (OZChannelFolder *)((char *)this + 24424), 0x192u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage"));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 27720), &v6, (OZChannelFolder *)((char *)this + 24424), 0x193u, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Base Color");
  OZChannelColor::OZChannelColor((OZARFaceAnchorElement *)((char *)this + 29304), 0.0, 0.0, 0.0, 0.0, &v6, (OZChannelFolder *)((char *)this + 448), 0x194u, 0, 6u);
  PCString::~PCString(&v6);
  PCMutex::PCMutex((PCMutex *)((char *)this + 30464));
  *((_BYTE *)this + 30552) = 0;
  *(_OWORD *)((char *)this + 30536) = 0u;
}

void sub_1B2ECFF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZARAnchorElement *v10;
  OZChannelFolder *v11;
  OZChannelImageWithOptions *v12;
  OZChannelImageWithOptions *v13;
  OZChannelColor *v14;
  OZChannelImageWithOptions *v15;
  OZChannelColor *v16;

  v16 = v14;
  OZChannelColor::~OZChannelColor(v16);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZARAnchorElement::~OZARAnchorElement(v10);
  _Unwind_Resume(a1);
}

void sub_1B2ECFF9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2ECFF7CLL);
}

void sub_1B2ECFFAC()
{
  JUMPOUT(0x1B2ECFF7CLL);
}

void sub_1B2ECFFB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2ECFF84);
}

void sub_1B2ECFFC4()
{
  JUMPOUT(0x1B2ECFF84);
}

void sub_1B2ECFFCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2ECFF8CLL);
}

void sub_1B2ECFFDC()
{
  JUMPOUT(0x1B2ECFF8CLL);
}

void OZARFaceAnchorElement::OZARFaceAnchorElement(OZARFaceAnchorElement *this, const OZARFaceAnchorElement *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZARAnchorElement::OZARAnchorElement(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65A5378;
  *(_QWORD *)(v5 + 16) = &unk_1E65A5CB0;
  *(_QWORD *)(v5 + 48) = &unk_1E65A5F08;
  *(_QWORD *)(v5 + 6528) = &unk_1E65A5F60;
  v6 = (OZChannelFolder *)(v5 + 24424);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 24424), (const OZChannelFolder *)((char *)a2 + 24424), (OZChannelFolder *)(v5 + 320));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 24552), (const OZARFaceAnchorElement *)((char *)a2 + 24552), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 26136), (const OZARFaceAnchorElement *)((char *)a2 + 26136), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 27720), (const OZARFaceAnchorElement *)((char *)a2 + 27720), v6);
  OZChannelColor::OZChannelColor((OZARFaceAnchorElement *)((char *)this + 29304), (const OZARFaceAnchorElement *)((char *)a2 + 29304), (OZChannelFolder *)((char *)this + 448));
  PCMutex::PCMutex((PCMutex *)((char *)this + 30464));
  *((_BYTE *)this + 30552) = 0;
  *(_OWORD *)((char *)this + 30536) = 0u;
}

void sub_1B2ED00E4(_Unwind_Exception *a1)
{
  OZARAnchorElement *v1;
  OZChannelFolder *v2;
  OZChannelImageWithOptions *v3;
  OZChannelImageWithOptions *v4;
  OZChannelImageWithOptions *v5;
  OZChannelColor *v6;

  OZChannelColor::~OZChannelColor(v6);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v5);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v4);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZARAnchorElement::~OZARAnchorElement(v1);
  _Unwind_Resume(a1);
}

void sub_1B2ED0140()
{
  JUMPOUT(0x1B2ED0130);
}

void OZARFaceAnchorElement::~OZARFaceAnchorElement(OZARFaceAnchorElement *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65A5378;
  *((_QWORD *)this + 2) = &unk_1E65A5CB0;
  *((_QWORD *)this + 6) = &unk_1E65A5F08;
  *((_QWORD *)this + 816) = &unk_1E65A5F60;
  v2 = *((_QWORD *)this + 3818);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 30464));
  *((_QWORD *)this + 3663) = &off_1E6557D88;
  *((_QWORD *)this + 3665) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30312));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZARFaceAnchorElement *)((char *)this + 29304));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 27720));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 26136));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZARFaceAnchorElement *)((char *)this + 24552));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24424));
  OZARAnchorElement::~OZARAnchorElement(this);
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZARFaceAnchorElement::~OZARFaceAnchorElement(OZARFaceAnchorElement *this)
{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 16));
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 48));
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 6528));
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZARFaceAnchorElement::~OZARFaceAnchorElement((OZARFaceAnchorElement *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZARFaceAnchorElement::parseEnd(OZARFaceAnchorElement *this, PCSerializerReadStream *a2)
{
  OZ3DEngineSceneElement::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZARFaceAnchorElement::parseEnd(OZARFaceAnchorElement *this, PCSerializerReadStream *a2)
{
  OZ3DEngineSceneElement::parseEnd((OZARFaceAnchorElement *)((char *)this - 48), a2);
  return 1;
}

void OZARFaceAnchorElement::didFinishLoadingIntoScene(OZARFaceAnchorElement *this)
{
  OZ3DEngineSceneElement::didFinishLoadingIntoScene(this);
  OZARFaceAnchorElement::initFile(this);
}

void OZARFaceAnchorElement::initFile(OZARFaceAnchorElement *this)
{
  void *Node;
  void *v3;
  uint64_t v4;
  PCString *v5;
  OZChannelBase *v6;
  uint64_t NextUniqueID;
  OZSceneNode *SceneNode;
  OZ3DEngineSceneFile *v9;
  NSString *v10;
  int isSceneFileValid;
  OZGroup **v12;
  PCString v13;
  PCString v14;
  PCString v15[2];

  if (*((_DWORD *)this + 4824)
    && (Node = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 19272))) != 0
  {
    v4 = (uint64_t)v3;
    v14.var0 = 0;
    PCString::set(&v14, CFSTR("face.arface"));
    PCURL::PCURL((PCURL *)v15, &v14, 0);
    PCString::~PCString(&v14);
    OZSceneNodeFile::setIsFileMissing(v4, 0);
    (*(void (**)(uint64_t, PCString *))(*(_QWORD *)v4 + 1400))(v4, v15);
    (*(void (**)(OZARFaceAnchorElement *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 1448))(this, v4, 0, 0);
    v5 = v15;
  }
  else
  {
    v15[0].var0 = 0;
    PCString::set(v15, CFSTR("face.arface"));
    PCURL::PCURL((PCURL *)&v14, v15, 0);
    PCString::~PCString(v15);
    PCURL::getShortFilename((CFURLRef *)&v14, &v13);
    NextUniqueID = OZChannelBase::getNextUniqueID(v6);
    *(_OWORD *)&v15[0].var0 = xmmword_1B355DE50;
    SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)v15, (uint64_t)&v13, NextUniqueID);
    PCString::~PCString(&v13);
    PCURL::getAsFileSystemString((const __CFURL **)&v14, v15);
    v9 = (OZ3DEngineSceneFile *)PCString::ns_str(v15);
    isSceneFileValid = OZ3DEngineSceneFile::isSceneFileValid(v9, v10);
    PCString::~PCString(v15);
    if (isSceneFileValid)
    {
      OZSceneNodeFile::setIsFileMissing((uint64_t)SceneNode, 0);
      (*(void (**)(OZSceneNode *, PCString *))(*(_QWORD *)SceneNode + 1400))(SceneNode, &v14);
      v12 = (OZGroup **)*((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
      if (v12)
      {
        PCURL::PCURL((PCURL *)v15, CFSTR("Undo Footage Import"));
        OZScene::addNode(v12, SceneNode, v15, 40, 0, 0);
        PCString::~PCString(v15);
        (*(void (**)(OZARFaceAnchorElement *, OZSceneNode *, _QWORD, _QWORD))(*(_QWORD *)this + 1448))(this, SceneNode, 0, 0);
        OZScene::recalcDependencies((OZScene *)v12);
      }
    }
    v5 = &v14;
  }
  PCURL::~PCURL((PCURL *)v5);
}

void sub_1B2ED0540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, PCString a11)
{
  PCString::~PCString(&a11);
  PCURL::~PCURL((PCURL *)&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZARFaceAnchorElement::didFinishLoadingIntoScene(OZARFaceAnchorElement *this)
{
  OZARFaceAnchorElement *v1;

  v1 = (OZARFaceAnchorElement *)((char *)this - 16);
  OZ3DEngineSceneElement::didFinishLoadingIntoScene((OZARFaceAnchorElement *)((char *)this - 16));
  OZARFaceAnchorElement::initFile(v1);
}

void `non-virtual thunk to'OZARFaceAnchorElement::buildRenderGraph(OZARFaceAnchorElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZ3DEngineSceneElement::buildRenderGraph((OZARFaceAnchorElement *)((char *)this - 6528), a2, a3, a4);
}

void `non-virtual thunk to'OZARFaceAnchorElement::makeRenderImageSource(OZARFaceAnchorElement *this@<X0>, const OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, int a4@<W3>, PCSharedCount *a5@<X8>)
{
  OZ3DEngineSceneElement::makeRenderImageSource((OZARFaceAnchorElement *)((char *)this - 6528), a2, a3, a4, a5);
}

CGColorSpace **OZARFaceAnchorElement::makeDataFor3DEngineObject@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const OZRenderParams *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  PCMutex *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  float *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  CMTimeValue v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  CMTimeEpoch v34;
  char *v35;
  CMTimeValue value;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  CMTimeValue v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  CMTimeEpoch v46;
  char *v47;
  CMTimeValue v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  CMTimeValue v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  CMTimeEpoch v58;
  char *v59;
  CMTimeValue v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  const PCSharedCount *v68;
  const PCSharedCount *v69;
  __int128 v70[4];
  uint64_t v71;
  std::__shared_weak_count *v72;
  PCMutex *v73;
  char v74;
  CMTime __p;
  PCColor v76;
  const PCSharedCount **v77;

  PCColor::PCColor(&v76);
  __p = *(CMTime *)a3;
  OZChannelColor::getColor((OZChannelColor *)(a1 + 29304), &__p, &v76, 0.0);
  v14 = (PCMutex *)(a1 + 30464);
  v73 = (PCMutex *)(a1 + 30464);
  PCMutex::lock((PCMutex *)(a1 + 30464));
  v74 = 1;
  v15 = *(void **)(a1 + 30536);
  if (!v15)
  {
    v24 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(0);
    OZ3DEngineSceneElement::makeDataFor3DEngineObject(a1, a2, (uint64_t)a3, a4, a5, 0, 0, (id **)a6, a7, *v24, v24[1], v24[2], v24[3], 1.0);
    v25 = 0;
    if (a1 == -30464)
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v76.var1._obj);
    goto LABEL_79;
  }
  v16 = (void *)objc_msgSend(v15, "geometry");
  v17 = operator new();
  v18 = a4[1];
  v70[0] = *a4;
  v70[1] = v18;
  v19 = a4[3];
  v70[2] = a4[2];
  v70[3] = v19;
  OZLi3DEngineObjectFaceData::OZLi3DEngineObjectFaceData(v17, a2, v70, (__int128 *)&v76.var0.var0, v16, a3, a7);
  std::shared_ptr<OZLi3DEngineObjectFaceData>::shared_ptr[abi:ne180100]<OZLi3DEngineObjectFaceData,void>(&v71, v17);
  if (*(_BYTE *)(a1 + 30552))
  {
    v20 = v71;
    *(_BYTE *)(v71 + 432) = 1;
    v21 = *(_QWORD *)(a1 + 30544);
    if (v21)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v21 + 16))(*(_QWORD *)(a1 + 30544));
      v22 = *(_QWORD *)(v20 + 2008);
      if (v22 == v21)
      {
LABEL_13:
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        goto LABEL_14;
      }
      v23 = (_QWORD *)(v20 + 2008);
      if (!v22)
      {
        *v23 = v21;
LABEL_12:
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        goto LABEL_13;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 2008);
      if (!v22)
        goto LABEL_14;
      v23 = (_QWORD *)(v20 + 2008);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
    *v23 = v21;
    if (v21)
      goto LABEL_12;
LABEL_14:
    *(_BYTE *)(a1 + 30552) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(a1 + 24688)))
  {
    v26 = a1 + 24552;
    v27 = *(_QWORD *)&__p.timescale;
    if (*(_QWORD *)&__p.timescale >= __p.epoch)
    {
      v29 = (*(_QWORD *)&__p.timescale - __p.value) >> 3;
      if ((unint64_t)(v29 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v30 = (__p.epoch - __p.value) >> 2;
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      if (__p.epoch - __p.value >= 0x7FFFFFFFFFFFFFF8uLL)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__p.epoch, v31);
      else
        v32 = 0;
      v33 = (uint64_t *)&v32[8 * v29];
      v34 = (CMTimeEpoch)&v32[8 * v31];
      *v33 = v26;
      v28 = v33 + 1;
      value = __p.value;
      v35 = *(char **)&__p.timescale;
      if (*(_QWORD *)&__p.timescale != __p.value)
      {
        do
        {
          v37 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v33 = v37;
        }
        while (v35 != (char *)value);
        v35 = (char *)__p.value;
      }
      __p.value = (CMTimeValue)v33;
      *(_QWORD *)&__p.timescale = v28;
      __p.epoch = v34;
      if (v35)
        operator delete(v35);
    }
    else
    {
      **(_QWORD **)&__p.timescale = v26;
      v28 = (_QWORD *)(v27 + 8);
    }
    *(_QWORD *)&__p.timescale = v28;
  }
  if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(a1 + 26272)))
  {
    v38 = a1 + 26136;
    v39 = *(_QWORD *)&__p.timescale;
    if (*(_QWORD *)&__p.timescale >= __p.epoch)
    {
      v41 = (*(_QWORD *)&__p.timescale - __p.value) >> 3;
      if ((unint64_t)(v41 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v42 = (__p.epoch - __p.value) >> 2;
      if (v42 <= v41 + 1)
        v42 = v41 + 1;
      if (__p.epoch - __p.value >= 0x7FFFFFFFFFFFFFF8uLL)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v42;
      if (v43)
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__p.epoch, v43);
      else
        v44 = 0;
      v45 = (uint64_t *)&v44[8 * v41];
      v46 = (CMTimeEpoch)&v44[8 * v43];
      *v45 = v38;
      v40 = v45 + 1;
      v48 = __p.value;
      v47 = *(char **)&__p.timescale;
      if (*(_QWORD *)&__p.timescale != __p.value)
      {
        do
        {
          v49 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *--v45 = v49;
        }
        while (v47 != (char *)v48);
        v47 = (char *)__p.value;
      }
      __p.value = (CMTimeValue)v45;
      *(_QWORD *)&__p.timescale = v40;
      __p.epoch = v46;
      if (v47)
        operator delete(v47);
    }
    else
    {
      **(_QWORD **)&__p.timescale = v38;
      v40 = (_QWORD *)(v39 + 8);
    }
    *(_QWORD *)&__p.timescale = v40;
  }
  if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(a1 + 27856)))
  {
    v50 = a1 + 27720;
    v51 = *(_QWORD *)&__p.timescale;
    if (*(_QWORD *)&__p.timescale >= __p.epoch)
    {
      v53 = (*(_QWORD *)&__p.timescale - __p.value) >> 3;
      if ((unint64_t)(v53 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v54 = (__p.epoch - __p.value) >> 2;
      if (v54 <= v53 + 1)
        v54 = v53 + 1;
      if (__p.epoch - __p.value >= 0x7FFFFFFFFFFFFFF8uLL)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      if (v55)
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__p.epoch, v55);
      else
        v56 = 0;
      v57 = (uint64_t *)&v56[8 * v53];
      v58 = (CMTimeEpoch)&v56[8 * v55];
      *v57 = v50;
      v52 = v57 + 1;
      v60 = __p.value;
      v59 = *(char **)&__p.timescale;
      if (*(_QWORD *)&__p.timescale != __p.value)
      {
        do
        {
          v61 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *--v57 = v61;
        }
        while (v59 != (char *)v60);
        v59 = (char *)__p.value;
      }
      __p.value = (CMTimeValue)v57;
      *(_QWORD *)&__p.timescale = v52;
      __p.epoch = v58;
      if (v59)
        operator delete(v59);
    }
    else
    {
      **(_QWORD **)&__p.timescale = v50;
      v52 = (_QWORD *)(v51 + 8);
    }
    *(_QWORD *)&__p.timescale = v52;
  }
  ImageSourceTransformPairs((OZChannelBase *)a3, (OZChannelImageWithOptions ***)&__p, (uint64_t *)&v68);
  v62 = v71;
  if ((const PCSharedCount **)(v71 + 2016) != &v68)
  {
    std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__assign_with_size[abi:ne180100]<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(v71 + 2016, v68, v69, 0x8E38E38E38E38E39 * (((char *)v69 - (char *)v68) >> 4));
    v62 = v71;
  }
  v63 = v72;
  *(_QWORD *)a6 = v62;
  *(_QWORD *)(a6 + 8) = v63;
  v71 = 0;
  v72 = 0;
  v77 = &v68;
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (__p.value)
  {
    *(_QWORD *)&__p.timescale = __p.value;
    operator delete((void *)__p.value);
  }
  v64 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v14 = v73;
  v25 = v74 == 0;
  if (v73)
  {
LABEL_79:
    if (!v25)
      PCMutex::unlock(v14);
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v76.var1._obj);
}

void sub_1B2ED0B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a23);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v27 - 96));
  _Unwind_Resume(a1);
}

uint64_t OZARFaceAnchorElement::setFaceAnchor(id *this, ARFaceAnchor *a2)
{
  PCMutex *v4;

  v4 = (PCMutex *)(this + 3808);
  PCMutex::lock((PCMutex *)(this + 3808));

  this[3817] = a2;
  return PCMutex::unlock(v4);
}

void sub_1B2ED0C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZARFaceAnchorElement::calcStaticHash(uint64_t a1)
{
  return OZARAnchorElement::calcStaticHash(a1 - 16);
}

CGColorSpace **RenderParamsForHitCheck@<X0>(const void *a1@<X0>, const CMTime *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  float v8;
  _OWORD *v9;
  HGComputeDeviceManager *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  OZScene *v21;
  uint64_t SanitizedViewGamut;
  CGColorSpace *v23;
  OZSceneCamera *v24;
  int ActiveCamera;
  __int128 v26;
  float64x2_t v27;
  int v28;
  int v29;
  uint64_t i;
  _OWORD *v31;
  __int128 v32;
  FxColorDescription v34;
  __int128 v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  _OWORD v44[2];
  int v45;
  uint64_t v46;
  int BitsPerChannel;
  uint64_t v48;
  CGColorSpace *v49;
  int v50;

  PCImageAttributes::PCImageAttributes((PCImageAttributes *)&v45);
  v45 = 2;
  v46 = *(_QWORD *)a3;
  BitsPerChannel = PCBitDepth::getBitsPerChannel(2);
  v48 = 0xD00000004;
  v50 = 3553;
  OZRenderParams::OZRenderParams((OZRenderParams *)a4);
  if (a1)
  {
    (*(void (**)(FxColorDescription *__return_ptr, const void *))(*(_QWORD *)a1 + 64))(&v34, a1);
    OZRenderParams::setWorkingColorDescription((CGColorSpace **)a4, &v34);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v34._pcColorDesc._colorSpaceRef._obj);
    v8 = (*(float (**)(const void *))(*(_QWORD *)a1 + 72))(a1);
    OZRenderParams::setBlendingGamma(a4, v8);
  }
  *(_OWORD *)a4 = *(_OWORD *)&a2->value;
  *(_QWORD *)(a4 + 16) = a2->epoch;
  *(_QWORD *)(a4 + 392) = 0;
  *(_QWORD *)(a4 + 400) = 0;
  OZRenderParams::setImageAttr(a4, (uint64_t)&v45);
  v9 = (_OWORD *)(a4 + 392);
  *(_BYTE *)(a4 + 202) = 1;
  *(_BYTE *)(a4 + 1312) = 0;
  *(_OWORD *)(a4 + 392) = 0u;
  *(_OWORD *)(a4 + 408) = 0u;
  *(_BYTE *)(a4 + 696) = 1;
  OZRenderParams::setRenderQuality(a4, 0);
  OZRenderParams::setTextRenderQuality(a4, 0);
  OZRenderParams::setDoHighQualityResampling((OZRenderParams *)a4, 0);
  OZRenderParams::setDoShapeAntialiasing((OZRenderParams *)a4, 1);
  OZRenderParams::setDo3DIntersectionAntialiasing((OZRenderParams *)a4, 0);
  HGComputeDeviceManager::GetCPUComputeDevice(v10, &v43);
  *(_OWORD *)&v34._pcColorDesc._colorSpaceRef._obj = v43;
  v43 = 0uLL;
  OZRenderParams::setDestinationDevice(a4, (uint64_t *)&v34);
  v11 = *(std::__shared_weak_count **)&v34._pcColorDesc._dynamicRange;
  if (*(_QWORD *)&v34._pcColorDesc._dynamicRange)
  {
    v12 = (unint64_t *)(*(_QWORD *)&v34._pcColorDesc._dynamicRange + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *a3;
  v18 = a3[1];
  *(_QWORD *)(a4 + 648) = 0;
  *(_DWORD *)(a4 + 656) = v17;
  *(_DWORD *)(a4 + 660) = v18;
  *(_OWORD *)(a4 + 584) = 0u;
  *(double *)(a4 + 600) = (double)v17;
  *(double *)(a4 + 608) = (double)v18;
  *v9 = 0u;
  *(_OWORD *)(a4 + 408) = 0u;
  *(_BYTE *)(a4 + 1211) = 0;
  if (a1)
  {
    if (v19)
    {
      v20 = v19;
      if ((*(uint64_t (**)(void *))(*(_QWORD *)v19 + 272))(v19))
      {
        v21 = (OZScene *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 272))(v20);
        SanitizedViewGamut = OZScene::getSanitizedViewGamut(v21);
        v23 = (CGColorSpace *)PCGetGamutColorSpace(SanitizedViewGamut);
        PCColorSpaceHandle::setColorSpace((CGColorSpace **)(a4 + 784), v23);
        v24 = (OZSceneCamera *)operator new();
        ActiveCamera = OZScene::getActiveCamera(v21, a2);
        OZSceneCamera::OZSceneCamera(v24, v21, ActiveCamera);
        v34._pcColorDesc._colorSpaceRef._obj = v24;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v34._pcColorDesc._dynamicRange, (OZSceneCamera *)((char *)v24 + *(_QWORD *)(*(_QWORD *)v24 - 24)));
        OZRenderParams::setCamera(a4, (const PCSharedCount *)&v34);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v34._pcColorDesc._dynamicRange);
      }
    }
  }
  OZRenderParams::layoutElementAtSize(a4, (uint64_t)a1, a3);
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)&v43);
  HGUserJob::SetPriority((uint64_t)&v43, 2);
  v26 = v44[0];
  *(_OWORD *)(a4 + 1316) = v43;
  *(_OWORD *)(a4 + 1332) = v26;
  *(_OWORD *)(a4 + 1346) = *(_OWORD *)((char *)v44 + 14);
  *v9 = 0u;
  *(_OWORD *)(a4 + 408) = 0u;
  v42 = 0x3FF0000000000000;
  v38 = 0;
  v39 = 0x3FF0000000000000;
  *(_OWORD *)&v34._pcColorDesc._colorSpaceRef._obj = 0x3FF0000000000000uLL;
  *(_QWORD *)&v34._pcColorDesc._toneMapMethod._gain = 0;
  *(_QWORD *)&v34._isPremultiplied = 0;
  v37 = 0;
  v40 = 0u;
  v41 = 0u;
  v27 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
  v28 = *a3;
  v29 = a3[1];
  v35 = xmmword_1B304F610;
  v36 = v27;
  v27.f64[0] = (double)v28 * 0.5;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v34, v27, (double)v29 * 0.5, 0.0);
  if ((FxColorDescription *)(a4 + 808) != &v34)
  {
    for (i = 0; i != 128; i += 32)
    {
      v31 = (_OWORD *)(a4 + 808 + i);
      v32 = *(_OWORD *)((char *)&v34._pcColorDesc._toneMapMethod._gain + i);
      *v31 = *(_OWORD *)((char *)&v34._pcColorDesc._colorSpaceRef._obj + i);
      v31[1] = v32;
    }
  }
  *(_BYTE *)(a4 + 936) = 1;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v49);
}

void sub_1B2ED1048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  OZRenderParams *v25;
  PCSharedCount *v26;
  uint64_t v27;

  PCSharedCount::~PCSharedCount(v26);
  OZRenderParams::~OZRenderParams(v25);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v27 - 128));
  _Unwind_Resume(a1);
}

uint64_t OZARFaceAnchorElement::hitCheck(uint64_t a1)
{
  std::recursive_mutex *v2;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  LiHelium *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  GLRenderer *v22;
  OZScene *v23;
  PCString *Renderer;
  const void *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  __int128 v33;
  _QWORD block[5];
  HGObject *v35;
  PCSharedCount v36;
  HGObject *v37;
  PCSharedCount v38;
  PCSharedCount v39;
  PCSharedCount v40;
  FxColorDescription v41[10];
  unsigned int v42;
  int v43;
  int v44[2];
  float64x2_t v45;
  __int128 v46;

  v2 = (std::recursive_mutex *)(a1 + 18776);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 18776));
  *(_BYTE *)(a1 + 30552) = 1;
  v45 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v46 = _Q0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  OZScene::getSceneBounds(v8, &v45);
  v9 = (int)*(double *)&v46;
  v10 = (int)*((double *)&v46 + 1);
  v44[0] = (int)*(double *)&v46;
  v44[1] = (int)*((double *)&v46 + 1);
  RenderParamsForHitCheck((const void *)(a1 + 6528), MEMORY[0x1E0CA2E68], v44, (uint64_t)v41);
  HGGLGetCurrentContext();
  if (PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v40))
  {
    v39.var0 = v40.var0;
    HGGLContext::Share((uint64_t *)&v39, (HGObject **)&v33);
    v11 = v33;
    if ((_QWORD)v33)
      *(_QWORD *)&v33 = 0;
    PCSharedCount::PCSharedCount(&v39);
  }
  else
  {
    v11 = 0;
  }
  v12 = (void *)PGLMasterEAGLContext();
  HGGLContextPtr::HGGLContextPtr((HGGLContextPtr *)&v38, v12);
  v36.var0 = v38.var0;
  HGGLContext::Share((uint64_t *)&v36, &v37);
  PCSharedCount::PCSharedCount(&v36);
  if ((v13 & 1) == 0
  {
    OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext = 0;
    __cxa_atexit((void (*)(void *))HGRef<HGGLContext>::~HGRef, &OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext, &dword_1B2737000);
  }
  if ((v14 & 1) == 0
  {
    OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext = 0;
    __cxa_atexit((void (*)(void *))HGRef<HGGLContext>::~HGRef, &OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext, &dword_1B2737000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN21OZARFaceAnchorElement8hitCheckERK9PCVector2IfERK13OZRenderStatePK8LiCameraR9PCVector3IdEj_block_invoke;
  block[3] = &__block_descriptor_48_e8_40c25_ZTS5HGRefI11HGGLContextE_e5_v8__0l;
  v15 = v37;
  block[4] = a1;
  v35 = v37;
  if (v37)
    v15 = (LiHelium *)(*(uint64_t (**)(HGObject *))(*(_QWORD *)v37 + 16))(v37);
  if (OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::onceToken != -1)
    dispatch_once(&OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::onceToken, block);
  LiHelium::getDefaultGPU(v15, v32);
  v33 = *(_OWORD *)v32;
  v32[0] = 0;
  v32[1] = 0;
  OZRenderParams::setRenderDevice((uint64_t)v41, (uint64_t *)&v33);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v32[1];
  if (v32[1])
  {
    v20 = (unint64_t *)(v32[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v32[0] = 0;
  v22 = (GLRenderer *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::glRenderer;
  v23 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  Renderer = (PCString *)HGRenderContext::GetRenderer((HGRenderContext *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext);
  GLRenderer::getFrameNode(v22, v23, (HGRenderJob *)v41, Renderer, v32, &v31);
  if (v32[0])
    puts("ruh-roh!");
  v25 = (const void *)HGRenderContext::GetRenderer((HGRenderContext *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext);
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = __PAIR64__(v10, v9);
  v26 = v42;
  OZRenderParams::getWorkingColorSpace(v41);
  PGHelium::renderNodeToMetalTexture(v25, &v31, (unsigned int *)&v33, v26, (HGGLBlendingInfo *)&v43, &v30);
  v27 = *(_QWORD *)(a1 + 30544);
  v28 = v30;
  if (v27 == v30)
  {
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  }
  else
  {
    if (v27)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v28 = v30;
    }
    *(_QWORD *)(a1 + 30544) = v28;
  }
  *(_BYTE *)(a1 + 30552) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  if (v35)
    (*(void (**)(HGObject *))(*(_QWORD *)v35 + 24))(v35);
  if (v37)
    (*(void (**)(HGObject *))(*(_QWORD *)v37 + 24))(v37);
  PCSharedCount::PCSharedCount(&v38);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  PCSharedCount::PCSharedCount(&v40);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v41);
  std::recursive_mutex::unlock(v2);
  return 0;
}

void sub_1B2ED14FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount a21,uint64_t a22,PCSharedCount a23,PCSharedCount a24,PCSharedCount a25,char a26)
{
  std::recursive_mutex *v26;
  uint64_t v27;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 24))(a20);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  PCSharedCount::PCSharedCount(&a23);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  PCSharedCount::PCSharedCount(&a25);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a26);
  std::recursive_mutex::unlock(v26);
  _Unwind_Resume(a1);
}

uint64_t *HGRef<HGGLContext>::~HGRef(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void ___ZN21OZARFaceAnchorElement8hitCheckERK9PCVector2IfERK13OZRenderStatePK8LiCameraR9PCVector3IdEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  OZChannelBase *v3;
  const PCString *v4;
  HGObject *v5;
  HGComputeDeviceManager *v6;
  uint64_t *GPUComputeDeviceList;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  uint64_t Renderer;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  PCSharedCount v17;
  HGObject **v18;
  std::__shared_weak_count *v19;
  HGObject *v20;
  HGObject *v21;
  uint64_t v22;
  PCSharedCount v23;
  PCSharedCount v24;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (OZChannelBase *)operator new();
  v4 = (const PCString *)*(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2) + 344);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2);
  OZChannelBase::setRangeName(v3, v4);
  OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::glRenderer = (uint64_t)v3;
  HGGLContext::context((uint64_t *)&v23, *(HGGLContext **)(a1 + 40));
  HGGLContext::Create((uint64_t *)&v23, &v20);
  v5 = v20;
  if ((HGObject *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext == v20)
  {
    if (OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext)
      (*(void (**)(void))(*(_QWORD *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext
                        + 24))();
  }
  else
  {
    if (OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext)
    {
      (*(void (**)(void))(*(_QWORD *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext
                        + 24))();
      v5 = v20;
    }
    OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext = (uint64_t)v5;
    v20 = 0;
  }
  PCSharedCount::PCSharedCount(&v23);
  GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(v6);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__init_with_size[abi:ne180100]<std::shared_ptr<HGGPUComputeDevice const>*,std::shared_ptr<HGGPUComputeDevice const>*>((char *)&v20, (_QWORD *)*GPUComputeDeviceList, (_QWORD *)GPUComputeDeviceList[1], (GPUComputeDeviceList[1] - *GPUComputeDeviceList) >> 4);
  if (v21 == v20)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
    v18 = *(HGObject ***)v20;
    v19 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  HGGLContext::context((uint64_t *)&v17, (HGGLContext *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::rootGLContext);
  v11 = HGObject::operator new(0xC0uLL);
  v24.var0 = v17.var0;
  HGGPURenderContext::HGGPURenderContext(v11, &v18, &v24);
  PCSharedCount::PCSharedCount(&v24);
  if ((void *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext == v11)
  {
    if (v11)
      (*(void (**)(void *))(*(_QWORD *)v11 + 24))(v11);
  }
  else
  {
    if (OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext)
      (*(void (**)(void))(*(_QWORD *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext
                        + 24))();
    OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext = (uint64_t)v11;
  }
  PCSharedCount::PCSharedCount(&v17);
  Renderer = HGRenderContext::GetRenderer((HGRenderContext *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Renderer + 120))(Renderer, 43, 1);
  v13 = HGRenderContext::GetRenderer((HGRenderContext *)OZARFaceAnchorElement::hitCheck(PCVector2<float> const&,OZRenderState const&,LiCamera const*,PCVector3<double> &,unsigned int)::gpuRenderContext);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 120))(v13, 41, 1);
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v18 = &v20;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_1B2ED18A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount a15)
{
  uint64_t v15;
  uint64_t v16;

  v16 = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  PCSharedCount::PCSharedCount((PCSharedCount *)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = &a12;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c25_ZTS5HGRefI11HGGLContextE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t __destroy_helper_block_e8_40c25_ZTS5HGRefI11HGGLContextE(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t SetFaceMaterialProperties(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = (void *)objc_msgSend((id)objc_msgSend(a1, "geometry", 0), "materials");
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v14;
    v7 = *MEMORY[0x1E0CD5B18];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v8);
        objc_msgSend(v9, "setLitPerPixel:", 1);
        objc_msgSend(v9, "setLightingModelName:", v7);
        if (a2)
        {
          v10 = (void *)objc_msgSend(v9, "diffuse");
          v11 = a2;
        }
        else
        {
          v12 = objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", 0.0, 0.0, 0.0, 1.0);
          v10 = (void *)objc_msgSend(v9, "diffuse");
          v11 = v12;
        }
        objc_msgSend(v10, "setContents:", v11);
        objc_msgSend((id)objc_msgSend(v9, "specular"), "setIntensity:", 0.02);
        objc_msgSend((id)objc_msgSend(v9, "roughness"), "setContents:", objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", 0.8, 0.8, 0.8, 0.8));
        ++v8;
      }
      while (v5 != v8);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t UpdateFaceGeometry(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t result;

  v8 = (void *)objc_msgSend((id)objc_msgSend(a1, "rootNode"), "childNodesPassingTest:", &__block_literal_global_80);
  if (objc_msgSend(v8, "count"))
  {
    v9 = (void *)objc_msgSend(v8, "firstObject");
  }
  else
  {
    v10 = objc_msgSend(MEMORY[0x1E0C89610], "faceGeometryWithDevice:fillMesh:", a4, 0);
    v9 = (void *)objc_msgSend(MEMORY[0x1E0CD59D0], "nodeWithGeometry:", v10);
    objc_msgSend((id)objc_msgSend(a1, "rootNode"), "addChildNode:", v9);
  }
  result = SetFaceMaterialProperties(v9, a3);
  if (a2)
    return objc_msgSend((id)objc_msgSend(v9, "geometry"), "updateFromFaceGeometry:", a2);
  return result;
}

BOOL ___Z18UpdateFaceGeometryP8SCNSceneP14ARFaceGeometry16HGMTLTextureType15HGMTLDeviceType_block_invoke(uint64_t a1, void *a2)
{
  _BOOL8 result;

  result = 0;
  if (objc_msgSend(a2, "geometry"))
  {
    objc_msgSend(a2, "geometry");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t OZLi3DEngineObjectFaceData::OZLi3DEngineObjectFaceData(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, void *a5, const OZRenderParams *a6, double a7)
{
  __int128 v13;
  __int128 v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;
  CGColorSpace *v22;
  _QWORD v24[3];
  char v25;
  __int128 v26[4];

  v13 = a3[1];
  v26[0] = *a3;
  v26[1] = v13;
  v14 = a3[3];
  v26[2] = a3[2];
  v26[3] = v14;
  v15 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor((Li3DEngineObjectDataBase *)a1);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = v15[3];
  v24[1] = 0;
  v24[2] = 0;
  v24[0] = &unk_1E64FC250;
  v25 = 0;
  Li3DEngineObjectData::Li3DEngineObjectData(a1, a2, v26, 0, 0, 0, (uint64_t)v24, a7, v16, v17, v18, v19, 1.0);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v24);
  *(_QWORD *)a1 = &off_1E65A6088;
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 576), a6);
  *(_QWORD *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  v20 = *a4;
  v21 = a4[2];
  *(_OWORD *)(a1 + 2056) = a4[1];
  *(_OWORD *)(a1 + 2072) = v21;
  *(_OWORD *)(a1 + 2040) = v20;
  v22 = (CGColorSpace *)*((_QWORD *)a4 + 6);
  *(_QWORD *)(a1 + 2088) = v22;
  if (v22)
    PCCFRefTraits<CGColorSpace *>::retain(v22);
  *(_QWORD *)(a1 + 2096) = a5;
  return a1;
}

void sub_1B2ED1D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  OZRenderParams *v10;
  uint64_t v12;
  uint64_t v13;

  a9 = (void **)(v9 + 2016);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  v12 = *(_QWORD *)(v9 + 2008);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = *(_QWORD *)(v9 + 2000);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  OZRenderParams::~OZRenderParams(v10);
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)v9);
  _Unwind_Resume(a1);
}

void OZLi3DEngineObjectFaceData::~OZLi3DEngineObjectFaceData(OZLi3DEngineObjectFaceData *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E65A6088;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 261);
  v4 = (void **)((char *)this + 2016);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *((_QWORD *)this + 251);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 250);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  OZRenderParams::~OZRenderParams((OZLi3DEngineObjectFaceData *)((char *)this + 576));
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)this);
}

{
  OZLi3DEngineObjectFaceData::~OZLi3DEngineObjectFaceData(this);
  JUMPOUT(0x1B5E29170);
}

void OZLi3DEngineObjectFaceData::makeFaceStickerTextureNode(OZLi3DEngineObjectFaceData *this@<X0>, const LiRenderParameters **a2@<X1>, HGHWMultiBlend **a3@<X8>)
{
  HGHWMultiBlend *v6;
  HGSolidColor *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  HGHWMultiBlend **v27;
  __n128 v28;
  uint64_t v29;
  PCSharedCount v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  HGNode *v39;
  uint64_t v40;
  PCSharedCount v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __n128 v50[29];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[24];
  PCSharedCount v62;
  void *v63;
  int v64;
  uint64_t v65;
  CGColorSpace *v66;
  std::__shared_weak_count *v67;
  __n128 v68;
  double *v69;
  double *v70;
  uint64_t v71;

  v6 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v6);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  PCColor::getComponents((int *)this + 510, (char **)&v69);
  v7 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
  HGSolidColor::HGSolidColor(v7);
  v8 = *v69;
  v9 = v69[1];
  v10 = v69[2];
  v11 = v69[3];
  (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 0, v8, v9, v10, v11);
  (*(void (**)(HGHWMultiBlend *, _QWORD, HGSolidColor *, uint64_t, float))(*(_QWORD *)v6 + 624))(v6, 0, v7, 9, 1.0);
  FaceTextureDOD(&v68);
  LiRenderParameters::LiRenderParameters((LiRenderParameters *)v61, a2[6]);
  v60 = 0x3FF0000000000000;
  v57 = 0x3FF0000000000000;
  v54 = 0x3FF0000000000000;
  v51 = 0x3FF0000000000000;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v58 = 0u;
  v59 = 0u;
  LiAgent::LiAgent(v50, v61, &v51, 1);
  v27 = a3;
  LiAgent::setClientROI(v50, &v68);
  v12 = *((_QWORD *)this + 252);
  v13 = *((_QWORD *)this + 253);
  if (v12 != v13)
  {
    v14 = v12 + 8;
    v15 = 1;
    do
    {
      v16 = v14 - 8;
      v40 = *(_QWORD *)(v14 - 8);
      PCSharedCount::PCSharedCount(&v41, (const PCSharedCount *)v14);
      v17 = *(_OWORD *)(v14 + 8);
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v44 = *(_OWORD *)(v14 + 40);
      v45 = v19;
      v42 = v17;
      v43 = v18;
      v20 = *(_OWORD *)(v14 + 72);
      v21 = *(_OWORD *)(v14 + 88);
      v22 = *(_OWORD *)(v14 + 120);
      v48 = *(_OWORD *)(v14 + 104);
      v49 = v22;
      v46 = v20;
      v47 = v21;
      v29 = v40;
      PCSharedCount::PCSharedCount(&v30, &v41);
      v35 = v46;
      v36 = v47;
      v37 = v48;
      v38 = v49;
      v31 = v42;
      v32 = v43;
      v33 = v44;
      v34 = v45;
      v28 = v68;
      HGNodeForImageSourceTransformPair((LiAgent *)v50, (uint64_t)&v29, (uint64_t)&v28, &v39);
      PCSharedCount::~PCSharedCount(&v30);
      (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, float))(*(_QWORD *)v6 + 624))(v6, v15, v39, 9, 1.0);
      if (v39)
        (*(void (**)(HGNode *))(*(_QWORD *)v39 + 24))(v39);
      PCSharedCount::~PCSharedCount(&v41);
      v14 += 144;
      v15 = (v15 + 1);
    }
    while (v16 + 144 != v13);
  }
  *v27 = v6;
  LiAgent::~LiAgent((LiAgent *)v50);
  v23 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v66);
  v63 = &unk_1E64FC2F8;
  if (v64 < 0)
    v26 = 1;
  else
    v26 = v64;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v63, 0, v26);
  if (v65)
    MEMORY[0x1B5E2914C](v65, 0x1000C8077774924);
  v65 = 0;
  v64 = 0;
  PCSharedCount::~PCSharedCount(&v62);
  (*(void (**)(HGSolidColor *))(*(_QWORD *)v7 + 24))(v7);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_1B2ED21FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;

  LiAgent::~LiAgent((LiAgent *)&a51);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x3A0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
  v55 = *(void **)(v53 - 120);
  if (v55)
  {
    *(_QWORD *)(v53 - 112) = v55;
    operator delete(v55);
  }
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
  _Unwind_Resume(a1);
}

FxColorDescription *OZLi3DEngineObjectFaceData::getHelium3DEngine(FxColorDescription *this, const LiRenderParameters **a2)
{
  if (!LOBYTE(this[13]._pcColorDesc._toneMapMethod._gain))
    return (FxColorDescription *)OZLi3DEngineObjectFaceData::generateFaceStickerTexture(this, a2);
  return this;
}

HGHWMultiBlend *OZLi3DEngineObjectFaceData::generateFaceStickerTexture(FxColorDescription *this, const LiRenderParameters **a2)
{
  const void *HeliumRenderer;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  HGHWMultiBlend *result;
  __int128 v9;
  uint64_t v10;
  HGHWMultiBlend *v11;

  OZLi3DEngineObjectFaceData::makeFaceStickerTextureNode((OZLi3DEngineObjectFaceData *)this, a2, &v11);
  HeliumRenderer = (const void *)LiAgent::getHeliumRenderer(a2);
  FaceTextureDOD(&v9);
  v5 = *((_DWORD *)&this[28]._pcColorDesc._toneMapMethod + 2);
  OZRenderParams::getWorkingColorSpace(this + 18);
  PGHelium::renderNodeToMetalTexture(HeliumRenderer, (uint64_t *)&v11, (unsigned int *)&v9, v5, (HGGLBlendingInfo *)((char *)&this[59]._pcColorDesc._colorSpaceRef._obj + 4), &v10);
  v6 = *(_QWORD *)&this[62]._pcColorDesc._toneMapMethod._gain;
  v7 = v10;
  if (v6 == v10)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      v7 = v10;
    }
    *(_QWORD *)&this[62]._pcColorDesc._toneMapMethod._gain = v7;
  }
  result = v11;
  if (v11)
    return (HGHWMultiBlend *)(*(uint64_t (**)(HGHWMultiBlend *))(*(_QWORD *)v11 + 24))(v11);
  return result;
}

void sub_1B2ED23BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t OZLi3DEngineObjectFaceData::applyChanges(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = 2008;
  if (!*(_BYTE *)(a1 + 432))
    v3 = 2000;
  return UpdateFaceGeometry(a2, *(_QWORD *)(a1 + 2096), *(_QWORD *)(*(_QWORD *)(a1 + v3) + 144), a3);
}

_QWORD *std::shared_ptr<OZLi3DEngineObjectFaceData>::shared_ptr[abi:ne180100]<OZLi3DEngineObjectFaceData,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E65A60F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2ED2498(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineObjectFaceData *,std::shared_ptr<OZLi3DEngineObjectFaceData>::__shared_ptr_default_delete<OZLi3DEngineObjectFaceData,OZLi3DEngineObjectFaceData>,std::allocator<OZLi3DEngineObjectFaceData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineObjectFaceData *,std::shared_ptr<OZLi3DEngineObjectFaceData>::__shared_ptr_default_delete<OZLi3DEngineObjectFaceData,OZLi3DEngineObjectFaceData>,std::allocator<OZLi3DEngineObjectFaceData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void OZTextLayout::OZTextLayout(OZTextLayout *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZLockingElement::OZLockingElement(this, a2, a3, a4);
  *v4 = off_1E65A6168;
  v4[25] = &unk_1E65A6210;
  v4[27] = &unk_1E65A6AE8;
  v4[31] = &unk_1E65A6D40;
  v4[841] = &unk_1E65A6D98;
  v4[2372] = &unk_1E65A6E70;
}

void OZTextLayout::OZTextLayout(OZTextLayout *this, const OZTextLayout *a2, uint64_t a3)
{
  _QWORD *v3;

  OZLockingElement::OZLockingElement(this, (const OZElement *)((char *)a2 + 200), a3);
  *v3 = off_1E65A6168;
  v3[25] = &unk_1E65A6210;
  v3[27] = &unk_1E65A6AE8;
  v3[31] = &unk_1E65A6D40;
  v3[841] = &unk_1E65A6D98;
  v3[2372] = &unk_1E65A6E70;
}

void OZFolderMaterialProperties::~OZFolderMaterialProperties(OZFolderMaterialProperties *this)
{
  *(_QWORD *)this = &off_1E65A7210;
  *((_QWORD *)this + 2) = &unk_1E65A74F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  *(_QWORD *)this = &off_1E65A7210;
  *((_QWORD *)this + 2) = &unk_1E65A74F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
  JUMPOUT(0x1B5E29170);
}

void OZLightingFolder::OZLightingFolder(OZLightingFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *v11;
  OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *v12;
  OZChannelInfo *v13;
  PCString v14;
  PCString v15;

  Instance = (OZFactory *)OZLightingFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E65A6ED0;
  *((_QWORD *)this + 2) = &unk_1E65A71B8;
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Lighting Parameter"));
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Lighting Switch"));
  OZChannelEnum::OZChannelEnum((OZLightingFolder *)((char *)this + 128), 0, &v15, &v14, (OZChannelFolder *)this, 0xE6u, 0, 0, 0);
  PCString::~PCString(&v14);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Material Specularity Toggle"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 384), 0, &v15, (OZChannelFolder *)this, 0xE8u, 0, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Material Shininess Index"));
  v12 = (OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(v11);
  v13 = (OZChannelInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(v12);
  OZChannelDouble::OZChannelDouble((OZLightingFolder *)((char *)this + 536), 50.0, &v15, (OZChannelFolder *)this, 0xE9u, 0x8000, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Material Properties"));
  OZFolderMaterialProperties::OZFolderMaterialProperties((OZLightingFolder *)((char *)this + 688), &v15, (OZChannelFolder *)this, 0xE7u, 10);
  PCString::~PCString(&v15);
}

void sub_1B2ED27F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelEnum *v13;
  OZChannelBool *v14;
  OZChannel *v15;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

uint64_t OZLightingFolder_Factory::getInstance(OZLightingFolder_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLightingFolder_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLightingFolder_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLightingFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLightingFolder_Factory::_instance;
}

void OZLightingFolder::OZLightingFolder(OZLightingFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *v6;
  OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *Instance;
  OZChannelInfo *v8;
  PCString v9;
  PCString v10;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *v5 = &off_1E65A6ED0;
  v5[2] = &unk_1E65A71B8;
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Lighting Parameter"));
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Lighting Switch"));
  OZChannelEnum::OZChannelEnum((OZLightingFolder *)((char *)this + 128), 0, &v10, &v9, (OZChannelFolder *)this, 0xE6u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Material Specularity Toggle"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 384), 0, &v10, (OZChannelFolder *)this, 0xE8u, 0, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Material Shininess Index"));
  Instance = (OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(v6);
  v8 = (OZChannelInfo *)OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZLightingFolder *)((char *)this + 536), 50.0, &v10, (OZChannelFolder *)this, 0xE9u, 0x8000, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Material Properties"));
  OZFolderMaterialProperties::OZFolderMaterialProperties((OZLightingFolder *)((char *)this + 688), &v10, (OZChannelFolder *)this, 0xE7u, 10);
  PCString::~PCString(&v10);
}

void sub_1B2ED2A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannelEnum *v13;
  OZChannelBool *v14;
  OZChannel *v15;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void OZLightingFolder::OZLightingFolder(OZLightingFolder *this, const OZLightingFolder *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *v5 = &off_1E65A6ED0;
  v5[2] = &unk_1E65A71B8;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 16), (const OZLightingFolder *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 384), (const OZChannelBase *)((char *)a2 + 384), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)this);
  *((_QWORD *)this + 67) = &off_1E6551358;
  *((_QWORD *)this + 69) = &unk_1E65516B8;
  OZFolderMaterialProperties::OZFolderMaterialProperties((OZLightingFolder *)((char *)this + 688), (const OZLightingFolder *)((char *)a2 + 688), (OZChannelFolder *)this);
}

void sub_1B2ED2BE0(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannelEnum *v2;
  OZChannelBool *v3;
  OZChannel *v4;

  OZChannel::~OZChannel(v4);
  OZChannelBool::~OZChannelBool(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZLightingFolder::~OZLightingFolder(OZLightingFolder *this)
{
  OZChannelFolder *v2;

  *(_QWORD *)this = &off_1E65A6ED0;
  *((_QWORD *)this + 2) = &unk_1E65A71B8;
  v2 = (OZChannelFolder *)((char *)this + 688);
  *((_QWORD *)this + 86) = &off_1E65A7210;
  *((_QWORD *)this + 88) = &unk_1E65A74F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 816));
  OZChannelFolder::~OZChannelFolder(v2);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 536));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 384));
  OZChannelEnum::~OZChannelEnum((OZLightingFolder *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  OZLightingFolder::~OZLightingFolder(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZLightingFolder::~OZLightingFolder(OZLightingFolder *this)
{
  OZLightingFolder::~OZLightingFolder((OZLightingFolder *)((char *)this - 16));
}

{
  OZLightingFolder::~OZLightingFolder((OZLightingFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZLightingFolder *OZLightingFolder::copy(OZLightingFolder *this, const OZLightingFolder *a2, const CMTime *a3)
{
  int ValueAsInt;
  const CMTime *v7;
  int v8;
  double v9;

  if (a2 != this)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 128), a3, 0.0);
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)((char *)this + 128), MEMORY[0x1E0CA2E68], (double)ValueAsInt, 0);
    v8 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 384), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 384), v7, (double)v8, 0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)a2 + 536), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 536), a3, v9, 0);
    OZFolderMaterialProperties::copy((OZChannelBase *)((char *)this + 688), (OZChannelBase *)((char *)a2 + 688), a3);
  }
  return this;
}

OZChannelBase *OZFolderMaterialProperties::copy(OZChannelBase *this, OZChannelBase *a2, const CMTime *a3)
{
  unint64_t isEnabled;
  double v7;

  if (a2 != this)
  {
    isEnabled = OZChannelBase::isEnabled(a2, 0, 0);
    (*((void (**)(OZChannelBase *, unint64_t, _QWORD))this->var0 + 13))(this, isEnabled, 0);
    OZChannel::getValueAsDouble((OZChannel *)&a2[1].var2, a3, 0.0);
    OZChannel::setValue((OZChannel *)&this[1].var2, a3, v7, 0);
  }
  return this;
}

uint64_t OZLightingFolder::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    OZChannelFolder::operator=(a1);
  return a1;
}

uint64_t `non-virtual thunk to'OZLightingFolder::writeBody(OZLightingFolder *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZLightingFolder::parseEnd(OZLightingFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  double DefaultValue;
  double v8;
  const CMTime *v9;
  unsigned int isEnabled;
  double v11;
  OZChannelFolder *v12;

  v4 = OZChannelFolder::parseEnd((OZChannelFolder *)this, a2);
  if ((_DWORD)v4)
  {
    v5 = *((_DWORD *)a2 + 26);
    if (v5 < 5 || (v5 == 5 ? (v6 = *((_DWORD *)a2 + 27) > 5u) : (v6 = 1), !v6))
    {
      if (((*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)this + 102) + 552))((char *)this + 816, 0) & 1) != 0
        || (DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 816)),
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 816), MEMORY[0x1E0CA2E68], 0.0),
            DefaultValue != v8)
        || (OZChannelFolder::hasKeypoints((OZChannelFolder *)((char *)this + 688), 0) & 1) != 0
        || OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 688), 0, 0))
      {
        v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannel::copyKeyframesFromChannel((OZChannel *)((char *)this + 384), MEMORY[0x1E0CA2E68], (OZChannelBase *)((char *)this + 688));
        isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 688), 0, 0);
        OZChannel::setValue((OZChannel *)((char *)this + 384), v9, (double)isEnabled, 0);
        OZChannel::copyKeyframesFromChannel((OZChannel *)((char *)this + 536), v9, (OZChannelBase *)((char *)this + 816));
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 816), v9, 0.0);
        OZChannel::setValue((OZChannel *)((char *)this + 536), v9, v11, 0);
      }
    }
    v12 = (OZChannelFolder *)((char *)this + 688);
    OZChannelFolder::resetToDefault(v12, 0);
    OZChannelBase::setFlag((OZChannelBase *)v12, 10, 0);
  }
  return v4;
}

uint64_t `non-virtual thunk to'OZLightingFolder::parseEnd(OZLightingFolder *this, PCSerializerReadStream *a2)
{
  return OZLightingFolder::parseEnd((OZLightingFolder *)((char *)this - 16), a2);
}

uint64_t OZLightingFolder::buildLiMaterialProperties@<X0>(OZLightingFolder *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  __int128 v9;

  LiMaterialProperties::LiMaterialProperties((LiMaterialProperties *)a3);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 1.0, 1.0, 1.0, 1.0);
  *(_OWORD *)a3 = v9;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 1.0, 1.0, 1.0, 1.0);
  *(_OWORD *)(a3 + 24) = v9;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 1.0, 1.0, 1.0, 1.0);
  *(_OWORD *)(a3 + 64) = v9;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v9, 0.0, 0.0, 0.0, 0.0);
  *(_OWORD *)(a3 + 48) = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 536), a2, 0.0);
  *(_QWORD *)(a3 + 88) = v6;
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 384), a2, 0.0);
  v8 = result != 0;
  if (*(unsigned __int8 *)(a3 + 97) != v8)
    *(_BYTE *)(a3 + 97) = v8;
  *(_WORD *)(a3 + 98) = 257;
  return result;
}

void sub_1B2ED30EC(_Unwind_Exception *a1)
{
  LiMaterialProperties *v1;

  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

void OZFolderMaterialProperties::OZFolderMaterialProperties(OZFolderMaterialProperties *this, const OZFolderMaterialProperties *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E65A7210;
  *(_QWORD *)(v5 + 16) = &unk_1E65A74F8;
  OZChannel::OZChannel((OZChannel *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  *((_QWORD *)this + 16) = &off_1E6551358;
  *((_QWORD *)this + 18) = &unk_1E65516B8;
}

void sub_1B2ED3174(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZFolderMaterialProperties::OZFolderMaterialProperties(OZFolderMaterialProperties *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  _QWORD *v6;
  OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *v7;
  OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo *Instance;
  OZChannelInfo *v9;
  PCString v10;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, 0);
  *v6 = &off_1E65A7210;
  v6[2] = &unk_1E65A74F8;
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Material Shininess Index"));
  Instance = (OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo *)OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(v7);
  v9 = (OZChannelInfo *)OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZFolderMaterialProperties *)((char *)this + 128), 50.0, &v10, (OZChannelFolder *)this, 8u, 0, (OZChannelImpl *)Instance, v9);
  PCString::~PCString(&v10);
  (*(void (**)(OZFolderMaterialProperties *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 0, 0);
  (*(void (**)(OZFolderMaterialProperties *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2ED3260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;

  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZFolderMaterialProperties::~OZFolderMaterialProperties(OZFolderMaterialProperties *this)
{
  OZChannelFolder *v1;

  *((_QWORD *)this - 2) = &off_1E65A7210;
  v1 = (OZChannelFolder *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E65A74F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 112));
  OZChannelFolder::~OZChannelFolder(v1);
}

{
  OZFolderMaterialProperties::~OZFolderMaterialProperties((OZFolderMaterialProperties *)((char *)this - 16));
}

uint64_t OZFolderMaterialProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    OZChannelFolder::operator=(a1);
  return a1;
}

uint64_t OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::OZLightingFolder_channelShininessIndexImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::OZLightingFolder_channelShininessIndexImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::_OZLightingFolder_channelShininessIndex;
}

void std::__call_once_param<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *v0;

  if (!OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::_OZLightingFolder_channelShininessIndex)
  {
    v0 = (OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *)operator new();
    OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::OZLightingFolder_channelShininessIndexImpl(v0);
    OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::_OZLightingFolder_channelShininessIndex = (uint64_t)v0;
  }
}

void sub_1B2ED33FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *OZLightingFolder::OZLightingFolder_channelShininessIndexImpl::OZLightingFolder_channelShininessIndexImpl(OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 50.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 50.0, 1, 1);
  PCSingleton::PCSingleton((OZLightingFolder::OZLightingFolder_channelShininessIndexImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65A7580;
  *((_QWORD *)this + 5) = &unk_1E65A75A0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 100.0);
  return this;
}

void sub_1B2ED34BC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::OZLightingFolder_channelShininessIndexInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::OZLightingFolder_channelShininessIndexInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::_OZLightingFolder_channelShininessIndexInfo;
}

void std::__call_once_param<std::tuple<OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *v0;

  if (!OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::_OZLightingFolder_channelShininessIndexInfo)
  {
    v0 = (OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *)operator new();
    OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::OZLightingFolder_channelShininessIndexInfo(v0);
    OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::_OZLightingFolder_channelShininessIndexInfo = (uint64_t)v0;
  }
}

void sub_1B2ED3588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *OZLightingFolder::OZLightingFolder_channelShininessIndexInfo::OZLightingFolder_channelShininessIndexInfo(OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLightingFolder::OZLightingFolder_channelShininessIndexInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65A75F8;
  *((_QWORD *)this + 10) = &unk_1E65A7618;
  return this;
}

void sub_1B2ED3638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZLightingFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLightingFolder_Factory *v0;

  v0 = (OZLightingFolder_Factory *)operator new();
  OZLightingFolder_Factory::OZLightingFolder_Factory(v0);
  OZLightingFolder_Factory::_instance = (uint64_t)v0;
}

void sub_1B2ED36A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZLightingFolder_Factory::OZLightingFolder_Factory(OZLightingFolder_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B355FF80;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65A7670;
  *((_QWORD *)this + 16) = &unk_1E65A7740;
}

void sub_1B2ED3740(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZLightingFolder *OZLightingFolder_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZLightingFolder *v6;

  v6 = (OZLightingFolder *)operator new();
  OZLightingFolder::OZLightingFolder(v6, this, a2, a3);
  return v6;
}

void sub_1B2ED37B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405FD37C43);
  _Unwind_Resume(a1);
}

OZLightingFolder *OZLightingFolder_Factory::createCopy(OZLightingFolder_Factory *this, OZFactoryBase *a2)
{
  OZLightingFolder *v3;
  const OZLightingFolder *v4;

  v3 = (OZLightingFolder *)operator new();
  OZLightingFolder::OZLightingFolder(v3, v4, 0);
  return v3;
}

void sub_1B2ED383C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405FD37C43);
  _Unwind_Resume(a1);
}

OZLightingFolder *OZLightingFolder_Factory::createChannelCopy(OZLightingFolder_Factory *this, OZChannelBase *a2)
{
  OZLightingFolder *v3;
  const OZLightingFolder *v4;

  v3 = (OZLightingFolder *)operator new();
  OZLightingFolder::OZLightingFolder(v3, v4, 0);
  return v3;
}

void sub_1B2ED38C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405FD37C43);
  _Unwind_Resume(a1);
}

uint64_t OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::_OZFolderMaterialProperties_channelShininessIndex;
}

void std::__call_once_param<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *v0;

  if (!OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::_OZFolderMaterialProperties_channelShininessIndex)
  {
    v0 = (OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *)operator new();
    OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::OZFolderMaterialProperties_channelShininessIndexImpl(v0);
    OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::_OZFolderMaterialProperties_channelShininessIndex = (uint64_t)v0;
  }
}

void sub_1B2ED3994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl::OZFolderMaterialProperties_channelShininessIndexImpl(OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 50.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 50.0, 1, 1);
  PCSingleton::PCSingleton((OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65A7798;
  *((_QWORD *)this + 5) = &unk_1E65A77B8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 100.0);
  return this;
}

void sub_1B2ED3A54(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::OZFolderMaterialProperties_channelShininessIndexInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::_OZFolderMaterialProperties_channelShininessIndexInfo;
}

void std::__call_once_param<std::tuple<OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelInfo *v0;

  if (!OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::_OZFolderMaterialProperties_channelShininessIndexInfo)
  {
    v0 = (OZChannelInfo *)operator new();
    OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::OZFolderMaterialProperties_channelShininessIndexInfo(v0);
    OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::_OZFolderMaterialProperties_channelShininessIndexInfo = (uint64_t)v0;
  }
}

void sub_1B2ED3B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelInfo *OZFolderMaterialProperties::OZFolderMaterialProperties_channelShininessIndexInfo::OZFolderMaterialProperties_channelShininessIndexInfo(OZChannelInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo(this, 0.0, 100.0, 1.0, 0.01, 1.0, "%");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E65A7810;
  *((_QWORD *)this + 10) = &unk_1E65A7830;
  return this;
}

void sub_1B2ED3BB0(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior::OZAlignToBehavior(OZAlignToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PCString v9;
  PCString v10;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)(v5 + 536) = &unk_1E65A7F40;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(_QWORD *)this = &off_1E65A7888;
  *((_QWORD *)this + 2) = &unk_1E65A7B68;
  *((_QWORD *)this + 6) = &unk_1E65A7DC0;
  *((_QWORD *)this + 42) = &unk_1E65A7E18;
  *((_QWORD *)this + 67) = &unk_1E65A7E40;
  *((_QWORD *)this + 68) = &unk_1E65A7EA0;
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Source"));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZAlignToBehavior *)((char *)this + 744), &v10, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Alignment Enum"));
  PCURL::PCURL((PCURL *)&v9, CFSTR("Align To Behavior Target Alignment"));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 904), &v10, &v9, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Custom Target Alignment"));
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1160), &v10, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Alignment Enum"));
  PCURL::PCURL((PCURL *)&v9, CFSTR("Align To Behavior Source Alignment"));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 1608), &v10, &v9, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Custom Source Alignment"));
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1864), &v10, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Source Offset"));
  OZChannelPosition3D::OZChannelPosition3D((OZAlignToBehavior *)((char *)this + 2312), &v10, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 3u);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Frame Alignment Enum"));
  PCURL::PCURL((PCURL *)&v9, CFSTR("Align To Behavior Frame Alignment"));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3200), &v10, &v9, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Source Frame"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3456), &v10, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Transition Enum"));
  PCURL::PCURL((PCURL *)&v9, CFSTR("Align To Behavior Transition"));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3608), &v10, &v9, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Custom Mix Factor"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3864), &v10, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior End Offset"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 4016), &v10, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Align To Behavior Ignore Behaviors"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4168), &v10, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v10);
  *((_DWORD *)this + 1080) = 0;
  *((_WORD *)this + 2162) = 256;
  *((_BYTE *)this + 4326) = 1;
  *((_QWORD *)this + 559) = 0x3FF0000000000000;
  *((_QWORD *)this + 554) = 0x3FF0000000000000;
  *((_QWORD *)this + 549) = 0x3FF0000000000000;
  *((_QWORD *)this + 544) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4360) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *((_OWORD *)this + 275) = 0u;
  *((_OWORD *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 4440) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *((_QWORD *)this + 578) = 0x3FF0000000000000;
  *((_QWORD *)this + 573) = 0x3FF0000000000000;
  *((_QWORD *)this + 568) = 0x3FF0000000000000;
  *((_QWORD *)this + 563) = 0x3FF0000000000000;
  *((_OWORD *)this + 282) = 0u;
  *((_OWORD *)this + 283) = 0u;
  *(_OWORD *)((char *)this + 4552) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *((_OWORD *)this + 287) = 0u;
  *((_OWORD *)this + 288) = 0u;
  *((_QWORD *)this + 597) = 0x3FF0000000000000;
  *((_QWORD *)this + 592) = 0x3FF0000000000000;
  *((_QWORD *)this + 587) = 0x3FF0000000000000;
  *((_QWORD *)this + 582) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4664) = 0u;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((_OWORD *)this + 294) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *(_OWORD *)((char *)this + 4744) = 0u;
  *(_OWORD *)((char *)this + 4760) = 0u;
  *((_QWORD *)this + 598) = 0;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 24) = v6 + 32;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = -1;
  *(_QWORD *)(v6 + 96) = -1;
  *(_QWORD *)(v6 + 104) = 0;
  *((_QWORD *)this + 599) = v6;
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = -1;
  *(_QWORD *)(v7 + 96) = -1;
  *(_QWORD *)(v7 + 104) = 0;
  *((_QWORD *)this + 600) = v7;
  v8 = operator new();
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 24) = v8 + 32;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = -1;
  *(_QWORD *)(v8 + 96) = -1;
  *(_QWORD *)(v8 + 104) = 0;
  *((_QWORD *)this + 601) = v8;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3048), 2, 0);
  *((_BYTE *)this + 2752) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2312), 16, 1);
  *((_BYTE *)this + 1600) = 0;
  *((_BYTE *)this + 2304) = 0;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 3456), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 4016), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 4016), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 4016), 100.0);
  *((_BYTE *)this + 898) = 1;
}

void sub_1B2ED424C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannelEnum *a11, OZChannel2D *a12, OZChannelEnum *a13, OZChanTransformNodeRef *a14, PCString a15, PCString a16)
{
  uint64_t v16;
  OZChannelEnum *v17;
  OZChannelPercent *v18;
  OZChannel *v19;
  OZChannelBool *v20;
  OZChannel2D *v21;
  OZChannelPosition3D *v22;
  OZChannelEnum *v23;
  OZChannelPercent *v24;

  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)(v16 + 4800));
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)(v16 + 4792));
  OZChannelBool::~OZChannelBool(v20);
  OZChannel::~OZChannel(v19);
  OZChannelPercent::~OZChannelPercent(v18);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannelPercent::~OZChannelPercent(v24);
  OZChannelEnum::~OZChannelEnum(v23);
  OZChannelPosition3D::~OZChannelPosition3D(v22);
  OZChannel2D::~OZChannel2D(v21);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel2D::~OZChannel2D(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a14);
  *(_QWORD *)(v16 + 544) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v16 + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v16 + 552));
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)v16);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior::OZAlignToBehavior(OZAlignToBehavior *this, const OZAlignToBehavior *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)(v5 + 536) = &unk_1E65A7F40;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(_QWORD *)this = &off_1E65A7888;
  *((_QWORD *)this + 2) = &unk_1E65A7B68;
  *((_QWORD *)this + 6) = &unk_1E65A7DC0;
  *((_QWORD *)this + 42) = &unk_1E65A7E18;
  *((_QWORD *)this + 67) = &unk_1E65A7E40;
  *((_QWORD *)this + 68) = &unk_1E65A7EA0;
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZAlignToBehavior *)((char *)this + 744), (const OZAlignToBehavior *)((char *)a2 + 744), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 904), (const OZAlignToBehavior *)((char *)a2 + 904), (OZChannelFolder *)((char *)this + 56));
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1160), (const OZAlignToBehavior *)((char *)a2 + 1160), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 1608), (const OZAlignToBehavior *)((char *)a2 + 1608), (OZChannelFolder *)((char *)this + 56));
  OZChannelPositionPercent::OZChannelPositionPercent((OZAlignToBehavior *)((char *)this + 1864), (const OZAlignToBehavior *)((char *)a2 + 1864), (OZChannelFolder *)((char *)this + 56));
  OZChannelPosition3D::OZChannelPosition3D((OZAlignToBehavior *)((char *)this + 2312), (const OZAlignToBehavior *)((char *)a2 + 2312), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3200), (const OZAlignToBehavior *)((char *)a2 + 3200), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3456), (const OZChannelBase *)((char *)a2 + 3456), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZAlignToBehavior *)((char *)this + 3608), (const OZAlignToBehavior *)((char *)a2 + 3608), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3864), (const OZChannelBase *)((char *)a2 + 3864), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 4016), (const OZChannelBase *)((char *)a2 + 4016), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 502) = &off_1E6551AF8;
  *((_QWORD *)this + 504) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 4168), (const OZChannelBase *)((char *)a2 + 4168), (OZChannelFolder *)((char *)this + 56));
  *((_DWORD *)this + 1080) = 0;
  *((_WORD *)this + 2162) = 256;
  *((_BYTE *)this + 4326) = 1;
  *((_QWORD *)this + 559) = 0x3FF0000000000000;
  *((_QWORD *)this + 554) = 0x3FF0000000000000;
  *((_QWORD *)this + 549) = 0x3FF0000000000000;
  *((_QWORD *)this + 544) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4360) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *((_OWORD *)this + 275) = 0u;
  *((_OWORD *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 4440) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *((_QWORD *)this + 578) = 0x3FF0000000000000;
  *((_QWORD *)this + 573) = 0x3FF0000000000000;
  *((_QWORD *)this + 568) = 0x3FF0000000000000;
  *((_QWORD *)this + 563) = 0x3FF0000000000000;
  *((_OWORD *)this + 283) = 0u;
  *((_OWORD *)this + 282) = 0u;
  *(_OWORD *)((char *)this + 4552) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *((_OWORD *)this + 287) = 0u;
  *((_OWORD *)this + 288) = 0u;
  *((_QWORD *)this + 597) = 0x3FF0000000000000;
  *((_QWORD *)this + 592) = 0x3FF0000000000000;
  *((_QWORD *)this + 587) = 0x3FF0000000000000;
  *((_QWORD *)this + 582) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 4664) = 0u;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((_OWORD *)this + 294) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *(_OWORD *)((char *)this + 4744) = 0u;
  *(_OWORD *)((char *)this + 4760) = 0u;
  *((_QWORD *)this + 598) = 0;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 24) = v6 + 32;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = -1;
  *(_QWORD *)(v6 + 96) = -1;
  *(_QWORD *)(v6 + 104) = 0;
  *((_QWORD *)this + 599) = v6;
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = -1;
  *(_QWORD *)(v7 + 96) = -1;
  *(_QWORD *)(v7 + 104) = 0;
  *((_QWORD *)this + 600) = v7;
  v8 = operator new();
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 24) = v8 + 32;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = -1;
  *(_QWORD *)(v8 + 96) = -1;
  *(_QWORD *)(v8 + 104) = 0;
  *((_QWORD *)this + 601) = v8;
  if (*((_QWORD *)a2 + 598))
  {
    v9 = operator new();
    v10 = *((_QWORD *)a2 + 598);
    *(_QWORD *)v9 = 0;
    OZChannelRef::OZChannelRef((std::string *)(v9 + 8), (const OZChannelRef *)(v10 + 8));
    *(_QWORD *)(v9 + 32) = 0;
    *((_QWORD *)this + 598) = v9;
  }
}

void sub_1B2ED4804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelPosition3D *a9, OZChannel2D *a10, OZChannelEnum *a11, OZChannel2D *a12, OZChannelEnum *a13, OZChanTransformNodeRef *a14)
{
  uint64_t v14;
  OZChannelEnum *v15;
  OZChannelPercent *v16;
  OZChannel *v17;
  OZChannelBool *v18;
  uint64_t *v19;
  uint64_t v20;
  OZChannelEnum *v21;
  OZChannelPercent *v22;

  MEMORY[0x1B5E29170](v20, 0x1032C40850D8295);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(v19);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)(v14 + 4800));
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)(v14 + 4792));
  OZChannelBool::~OZChannelBool(v18);
  OZChannel::~OZChannel(v17);
  OZChannelPercent::~OZChannelPercent(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelPercent::~OZChannelPercent(v22);
  OZChannelEnum::~OZChannelEnum(v21);
  OZChannelPosition3D::~OZChannelPosition3D(a9);
  OZChannel2D::~OZChannel2D(a10);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel2D::~OZChannel2D(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a14);
  *(_QWORD *)(v14 + 544) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v14 + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v14 + 552));
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)v14);
  _Unwind_Resume(a1);
}

void sub_1B2ED48F0()
{
  JUMPOUT(0x1B2ED4868);
}

void sub_1B2ED48F8()
{
  JUMPOUT(0x1B2ED4870);
}

void sub_1B2ED4900()
{
  JUMPOUT(0x1B2ED4878);
}

void sub_1B2ED4908()
{
  JUMPOUT(0x1B2ED4880);
}

void sub_1B2ED4910()
{
  JUMPOUT(0x1B2ED4888);
}

void sub_1B2ED4918()
{
  JUMPOUT(0x1B2ED4890);
}

void sub_1B2ED4920()
{
  JUMPOUT(0x1B2ED4898);
}

void sub_1B2ED4928()
{
  JUMPOUT(0x1B2ED48A0);
}

void sub_1B2ED4930()
{
  JUMPOUT(0x1B2ED48A8);
}

void sub_1B2ED4938()
{
  JUMPOUT(0x1B2ED48B0);
}

void sub_1B2ED4940()
{
  JUMPOUT(0x1B2ED48B8);
}

void sub_1B2ED4948()
{
  JUMPOUT(0x1B2ED48C0);
}

void sub_1B2ED4950()
{
  JUMPOUT(0x1B2ED48E0);
}

void OZAlignToBehavior::~OZAlignToBehavior(OZAlignToBehavior *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65A7888;
  *((_QWORD *)this + 2) = &unk_1E65A7B68;
  *((_QWORD *)this + 6) = &unk_1E65A7DC0;
  *((_QWORD *)this + 42) = &unk_1E65A7E18;
  *((_QWORD *)this + 67) = &unk_1E65A7E40;
  *((_QWORD *)this + 68) = &unk_1E65A7EA0;
  v2 = *((_QWORD *)this + 598);
  if (v2)
  {
    OZChannelRef::~OZChannelRef((void **)(v2 + 8));
    MEMORY[0x1B5E29170](v2, 0x1032C40850D8295);
  }
  *((_QWORD *)this + 598) = 0;
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)this + 601);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)this + 600);
  PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache((uint64_t *)this + 599);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 4168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4016));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3864));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 3608));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3456));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 3200));
  OZChannelPosition3D::~OZChannelPosition3D((OZAlignToBehavior *)((char *)this + 2312));
  OZChannel2D::~OZChannel2D((OZAlignToBehavior *)((char *)this + 1864));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 1608));
  OZChannel2D::~OZChannel2D((OZAlignToBehavior *)((char *)this + 1160));
  OZChannelEnum::~OZChannelEnum((OZAlignToBehavior *)((char *)this + 904));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZAlignToBehavior *)((char *)this + 744));
  *((_QWORD *)this + 68) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 552));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZAlignToBehavior::~OZAlignToBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZAlignToBehavior::~OZAlignToBehavior(OZAlignToBehavior *this)
{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 16));
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 48));
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 336));
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 536));
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZAlignToBehavior::~OZAlignToBehavior((OZAlignToBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZAlignToBehavior::operator=(uint64_t a1, const void *a2)
{
  _BYTE *v4;
  _BYTE *v5;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 744, (uint64_t)(v4 + 744));
  OZChannelBase::operator=(a1 + 904, (uint64_t)(v5 + 904));
  OZChannelFolder::operator=(a1 + 1160);
  OZChannelBase::operator=(a1 + 1296, (uint64_t)(v5 + 1296));
  OZChannelBase::operator=(a1 + 1448, (uint64_t)(v5 + 1448));
  *(_BYTE *)(a1 + 1600) = v5[1600];
  OZChannelBase::operator=(a1 + 1608, (uint64_t)(v5 + 1608));
  OZChannelFolder::operator=(a1 + 1864);
  OZChannelBase::operator=(a1 + 2000, (uint64_t)(v5 + 2000));
  OZChannelBase::operator=(a1 + 2152, (uint64_t)(v5 + 2152));
  *(_BYTE *)(a1 + 2304) = v5[2304];
  OZChannelPosition::operator=(a1 + 2312, (uint64_t)(v5 + 2312));
  OZChannelBase::operator=(a1 + 3200, (uint64_t)(v5 + 3200));
  OZChannelBase::operator=(a1 + 3456, (uint64_t)(v5 + 3456));
  OZChannelBase::operator=(a1 + 3608, (uint64_t)(v5 + 3608));
  OZChannelBase::operator=(a1 + 3864, (uint64_t)(v5 + 3864));
  OZChannelBase::operator=(a1 + 4016, (uint64_t)(v5 + 4016));
  return OZChannelBase::operator=(a1 + 4168, (uint64_t)(v5 + 4168));
}

void OZAlignToBehavior::didAddToNode(OZAlignToBehavior *this, OZSceneNode *a2)
{
  OZChannelBehavior::didAddToNode(this, a2);
  OZAlignToBehavior::setupCurveNodes(this);
  updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 904), a2);
}

uint64_t *OZAlignToBehavior::setupCurveNodes(OZAlignToBehavior *this)
{
  uint64_t *result;
  uint64_t *v3;

  result = (uint64_t *)(*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      v3 = result;
      OZAlignToBehavior::setupCurveNodeForChannel(this, (OZChannel *)(result + 169), 0);
      OZAlignToBehavior::setupCurveNodeForChannel(this, (OZChannel *)(v3 + 188), 1);
      OZAlignToBehavior::setupCurveNodeForChannel(this, (OZChannel *)(v3 + 244), 2);
      OZAlignToBehavior::setupCurveNodeForChannel(this, (OZChannel *)(v3 + 280), 3);
      OZAlignToBehavior::setupCurveNodeForChannel(this, (OZChannel *)(v3 + 299), 4);
      return OZAlignToBehavior::setupCurveNodeForChannel(this, (OZChannel *)(v3 + 318), 5);
    }
  }
  return result;
}

void updateAlignmentChannel(OZChannelEnum *a1, OZSceneNode *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  PCString v7;
  PCString v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = *((_QWORD *)a2 + 1);
    *(_OWORD *)&v8[0].var0 = xmmword_1B30541C0;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)v8))
    {
      PCURL::PCURL((PCURL *)&v7, CFSTR("Align To Behavior Alignment Enum"));
      PCString::append(&v7, ";-;");
      PCURL::PCURL((PCURL *)v8, CFSTR("Align To Behavior Text Horizontal Alignment"));
      PCString::append(&v7, v8);
      PCString::~PCString(v8);
      PCString::append(&v7, ";-;");
      PCURL::PCURL((PCURL *)v8, CFSTR("Align To Behavior Alignment Custom"));
      PCString::append(&v7, v8);
      PCString::~PCString(v8);
      (*(void (**)(OZChannelEnum *, PCString *, uint64_t))(*(_QWORD *)a1 + 848))(a1, &v7, 1);
      v10 = xmmword_1B3560178;
      v11 = unk_1B3560188;
      v12 = xmmword_1B3560198;
      *(_OWORD *)&v8[0].var0 = xmmword_1B3560158;
      v9 = unk_1B3560168;
      OZChannelEnum::setTags(a1, (char *)v8, 20);
    }
    else
    {
      v5 = *((_QWORD *)a2 + 1);
      *(_OWORD *)&v8[0].var0 = xmmword_1B355DD10;
      if ((OZFactory::isKindOfClass(v5, (int32x4_t *)v8) & 1) != 0
        || (v6 = *((_QWORD *)a2 + 1),
            *(_OWORD *)&v8[0].var0 = xmmword_1B355CF40,
            OZFactory::isKindOfClass(v6, (int32x4_t *)v8)))
      {
        PCURL::PCURL((PCURL *)v8, CFSTR("Align To Behavior Light Camera Alignment Enum"));
        (*(void (**)(OZChannelEnum *, PCString *, uint64_t))(*(_QWORD *)a1 + 848))(a1, v8, 1);
        PCString::~PCString(v8);
        LODWORD(v8[0].var0) = 0;
        OZChannelEnum::setTags(a1, (char *)v8, 1);
        return;
      }
      PCURL::PCURL((PCURL *)&v7, CFSTR("Align To Behavior Alignment Enum"));
      PCString::append(&v7, ";-;");
      PCURL::PCURL((PCURL *)v8, CFSTR("Align To Behavior Alignment Custom"));
      PCString::append(&v7, v8);
      PCString::~PCString(v8);
      (*(void (**)(OZChannelEnum *, PCString *, uint64_t))(*(_QWORD *)a1 + 848))(a1, &v7, 1);
      *(_QWORD *)&v11 = 0xC0000000BLL;
      *(_OWORD *)&v8[0].var0 = xmmword_1B35601A8;
      v9 = unk_1B35601B8;
      v10 = xmmword_1B35601C8;
      OZChannelEnum::setTags(a1, (char *)v8, 14);
    }
    PCString::~PCString(&v7);
  }
}

void sub_1B2ED5020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZAlignToBehavior::notify(OZAlignToBehavior *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  int ObjectID;
  int v7;
  OZSceneNode *SourceObject;
  OZSceneNode *v9;

  OZChannelBehavior::notify(this, a2);
  if ((a2 & 0xC) != 0)
  {
    v4 = (*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)this + 336))(this);
    if (v4)
    {
      v5 = v4;
      ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 744));
      if (*((_DWORD *)this + 1080) != ObjectID)
      {
        v7 = ObjectID;
        OZScene::dirtyLockDependencies(v5);
        SourceObject = (OZSceneNode *)OZAlignToBehavior::getSourceObject(this);
        updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 1608), SourceObject);
        *((_DWORD *)this + 1080) = v7;
      }
    }
  }
  if ((a2 & 0x10) != 0)
  {
    v9 = (OZSceneNode *)OZAlignToBehavior::getSourceObject(this);
    updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 1608), v9);
  }
}

const void *OZAlignToBehavior::getSourceObject(OZAlignToBehavior *this)
{
  const void *result;

  result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 744));
  if (result)
  return result;
}

void `non-virtual thunk to'OZAlignToBehavior::notify(OZAlignToBehavior *this, char a2)
{
  OZAlignToBehavior::notify((OZAlignToBehavior *)((char *)this - 336), a2);
}

void OZAlignToBehavior::finishInitializing(OZAlignToBehavior *this)
{
  OZSceneNode *SourceObject;
  const void *v3;
  OZSceneNode *v4;

  OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));
  SourceObject = (OZSceneNode *)OZAlignToBehavior::getSourceObject(this);
  updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 1608), SourceObject);
  v3 = (const void *)(*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)this + 320))(this);
  if (v3)
  else
    v4 = 0;
  updateAlignmentChannel((OZAlignToBehavior *)((char *)this + 904), v4);
}

uint64_t OZAlignToBehavior::canAddToSceneNode(OZAlignToBehavior *this, OZSceneNode *a2)
{
  int canAddToSceneNode;
  uint64_t v4;
  unint64_t v5;
  __int128 v7;
  __int128 v8;

  canAddToSceneNode = OZBehavior::canAddToSceneNode(this, a2);
  v4 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2);
  if (!canAddToSceneNode)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  v8 = xmmword_1B355CF40;
  if ((OZFactory::isKindOfClass(v5, (int32x4_t *)&v8) & 1) != 0)
    return 0;
  v7 = xmmword_1B355DD10;
  return OZFactory::isKindOfClass(v5, (int32x4_t *)&v7) ^ 1;
}

uint64_t OZAlignToBehavior::didAddSceneNodeToScene(OZAlignToBehavior *this, OZScene *a2)
{
  uint64_t result;
  _QWORD *v5;

  result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  v5 = (_QWORD *)*((_QWORD *)this + 598);
  if (v5)
    *v5 = a2;
  return result;
}

uint64_t OZAlignToBehavior::willRemoveSceneNodeFromScene(OZAlignToBehavior *this, OZScene *a2)
{
  OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);
  return OZLocking::removeFromLockingGroup((OZAlignToBehavior *)((char *)this + 544));
}

__n128 OZAlignToBehavior::dirty(OZAlignToBehavior *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;

  OZBehavior::dirty(this);
  v2 = (_QWORD *)*((_QWORD *)this + 599);
  v3 = (_QWORD *)v2[4];
  v2 += 4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v2 - 1), v3);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  v2[3] = v2[2];
  v2[6] = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 600);
  v5 = (_QWORD *)v4[4];
  v4 += 4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v4[3] = v4[2];
  v4[6] = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 601);
  v7 = (_QWORD *)v6[4];
  v6 += 4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
  v6[3] = v6[2];
  v6[6] = 0;
  v8 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 4328) = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(v8 + 16);
  *((_QWORD *)this + 543) = v10;
  *((__n128 *)this + 280) = result;
  *((_QWORD *)this + 562) = v10;
  *(__n128 *)((char *)this + 4632) = result;
  *((_QWORD *)this + 581) = v10;
  return result;
}

double `non-virtual thunk to'OZAlignToBehavior::dirty(OZAlignToBehavior *this)
{
  double result;

  *(_QWORD *)&result = OZAlignToBehavior::dirty((OZAlignToBehavior *)((char *)this - 16)).n128_u64[0];
  return result;
}

char *OZAlignToBehavior::getEvalDepChansForRef(char *result, void *a2, const void *a3, uint64_t *a4)
{
  char *v6;

  if (a3)
  {
    v6 = result;
    OZChannelBehavior::getEvalDepChansForRef((int)result, a2, (uint64_t)a3, a4);
    if (result)
      return OZAlignToBehavior::getEvalDepChansForGroup(v6, (uint64_t)result, a4);
  }
  return result;
}

char *OZAlignToBehavior::getEvalDepChansForGroup(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;

  if (a2)
  {
    v5 = result;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1024))(a2);
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1032))(a2);
    if ((char *)v6 != result)
    {
      v7 = result;
      do
      {
        result = *(char **)(v6 + 16);
        if (result)
        {
          if (result)
          {
            v8 = result;
            v9 = result + 1088;
            v10 = operator new(0x18uLL);
            v10[1] = a3;
            v10[2] = v9;
            v11 = *a3;
            *v10 = *a3;
            *(_QWORD *)(v11 + 8) = v10;
            *a3 = (uint64_t)v10;
            ++a3[2];
            if (result)
              result = (char *)OZAlignToBehavior::getEvalDepChansForGroup(v5, result, a3);
          }
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while ((char *)v6 != v7);
    }
  }
  return result;
}

OZSceneNode *OZAlignToBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  int canChanRefBeSetTo;
  OZSceneNode *result;
  OZSceneNode *v7;

  canChanRefBeSetTo = OZChannelBehavior::canChanRefBeSetTo(this, a2, a3);
  result = 0;
  if (a3)
  {
    if (canChanRefBeSetTo)
    {
      if (result)
      {
        v7 = result;
        result = (OZSceneNode *)(*((uint64_t (**)(char **))*this + 41))(this);
        if (result)
        {
          if (result)
            return (OZSceneNode *)!OZSceneNode::isDescendantOf(v7, result);
        }
      }
    }
  }
  return result;
}

OZSceneNode *`non-virtual thunk to'OZAlignToBehavior::canChanRefBeSetTo(char **this, const OZChanObjectManipRef *a2, const OZObjectManipulator *a3)
{
  return OZAlignToBehavior::canChanRefBeSetTo(this - 2, a2, a3);
}

uint64_t *OZAlignToBehavior::setupCurveNodeForChannel(OZAlignToBehavior *this, OZChannel *a2, int a3)
{
  OZSingleChanCurveNode *v6;

  v6 = (OZSingleChanCurveNode *)operator new();
  OZSingleChanCurveNode::OZSingleChanCurveNode(v6, (OZAlignToBehavior *)((char *)this + 536), a2, a3);
  OZChannel::appendCurveProcessingNode(a2, v6);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v6);
  return OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)a2);
}

void sub_1B2ED5614(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

__n128 OZAlignToBehavior::solveNode(OZAlignToBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  unint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  v3 = *((_QWORD *)a3 + 19);
  v4 = *((_QWORD *)a3 + 10);
  v11 = *(CMTime *)((_BYTE *)a3 + 5);
  result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.value = result;
  v10.epoch = *((_QWORD *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZAlignToBehavior *, uint64_t, CMTime *, double, double))(*(_QWORD *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      result = *(__n128 *)&v14.value;
      v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZAlignToBehavior::solveNode(OZAlignToBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  double result;

  *(_QWORD *)&result = OZAlignToBehavior::solveNode((OZAlignToBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

void OZAlignToBehavior::computeMixFactor(OZAlignToBehavior *this, const CMTime *a2)
{
  CMTime *v4;
  Float64 v5;
  double Seconds;
  double *v7;
  double v8;
  double v9;
  double v10;
  CMTime time;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16[2];
  CMTime time2;
  CMTime time1;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)this + 608))(v16);
  memset(&v15, 0, sizeof(v15));
  OZBehavior::getFrameDuration(this, (__n128 *)&v15);
  memset(&v14, 0, sizeof(v14));
  v4 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4016), MEMORY[0x1E0CA2E68], 0.0);
  operator*(&v15, &v14, v5);
  memset(&v13, 0, sizeof(v13));
  time1 = v16[1];
  time2 = v15;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
  time1 = v12;
  time2 = v14;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v13);
  time1 = v13;
  time2 = *v4;
  if (CMTimeCompare(&time1, &time2))
  {
    time2 = v16[0];
    time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v12);
    operator/((__int128 *)&v12.value, (uint64_t)&v13, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
  }
  else
  {
    Seconds = 1.0;
  }
  time1.value = 0x3FF0000000000000;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 3608), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      time1.value = 0x3FF0000000000000;
      return;
    case 1u:
      v8 = 1.0;
      if (Seconds <= 1.0)
        v8 = Seconds;
      if (Seconds < 0.0)
        v8 = 0.0;
      *(double *)&time1.value = v8;
      return;
    case 2u:
      v9 = 0.5;
      goto LABEL_16;
    case 3u:
      v9 = 0.0;
      goto LABEL_14;
    case 4u:
      v9 = 0.5;
LABEL_14:
      v10 = 0.5;
      goto LABEL_18;
    case 5u:
      v9 = 1.0;
LABEL_16:
      v10 = 0.0;
      goto LABEL_18;
    case 6u:
      v9 = 0.0;
      v10 = 1.0;
LABEL_18:
      PCMath::easeInOut((double *)&time1.value, Seconds, v9, v10, 0.0, 1.0, 0, v7);
      break;
    case 8u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3864), a2, 0.0);
      break;
    default:
      time1.value = 0x3FF0000000000000;
      break;
  }
}

void OZAlignToBehavior::getSourceFrame(OZAlignToBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  const void *SourceObject;
  const void *v7;
  double v8;
  double v9;
  uint64_t v10;
  Float64 Seconds;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16[2];
  CMTime v17;
  CMTime v18;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3200), MEMORY[0x1E0CA2E68], 0.0)
    && (SourceObject = OZAlignToBehavior::getSourceObject(this)) != 0)
  {
    v7 = SourceObject;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3456), MEMORY[0x1E0CA2E68], 0.0);
    v9 = v8;
    (*(void (**)(CMTime *__return_ptr, const void *))(*(_QWORD *)v7 + 1128))(v16, v7);
    memset(&v15, 0, sizeof(v15));
    v14 = v16[1];
    v10 = (*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v13);
    v18 = v14;
    v17 = v13;
    PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v15);
    v14 = v16[0];
    v12 = v15;
    Seconds = CMTimeGetSeconds(&v12);
    OZFigTimeForChannelSeconds(&v13, v9 * Seconds, 0x40000);
    v18 = v14;
    v17 = v13;
    PC_CMTimeSaferAdd(&v18, &v17, a3);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a3 + 16) = a2->epoch;
  }
}

void OZAlignToBehavior::getSourceToWorldTransform(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  const CMTime *v8;
  unsigned int v9;
  int v10;
  OZCacheKey *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  OZRenderState v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  OZRenderState::OZRenderState(&v17);
  OZAlignToBehavior::getSourceFrame(this, a3, (uint64_t)&v18);
  *(_OWORD *)&v17.var0.var0 = v18;
  v17.var0.var3 = v19;
  v17.var20 = 0;
  v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v17.var21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4168), MEMORY[0x1E0CA2E68], 0.0) != 0;
  v17.var22 = *((_BYTE *)this + 4326) ^ 1;
  *(_WORD *)&v17.var23 = 257;
  *(_WORD *)&v17.var8 = 0;
  v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), v8, 0.0) - 14;
  if (v9 > 0xE)
    v10 = 3;
  else
    v10 = dword_1B35601E4[v9];
  v17.var29 = v10;
  *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  v11 = (OZCacheKey *)*((_QWORD *)this + 598);
  if (v11)
  {
    OZCacheKey::getKey(v11, (const CMTime *)&v17);
    v27 = v12;
    v26 = 0;
    PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::findValue(*((uint64_t **)this + 600), (double *)&v27, &v26, (uint64_t)&v18);
    if (&v18 != (__int128 *)a4)
    {
      v13 = v23;
      *(_OWORD *)(a4 + 64) = v22;
      *(_OWORD *)(a4 + 80) = v13;
      v14 = v25;
      *(_OWORD *)(a4 + 96) = v24;
      *(_OWORD *)(a4 + 112) = v14;
      v15 = v19;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 16) = v15;
      v16 = v21;
      *(_OWORD *)(a4 + 32) = v20;
      *(_OWORD *)(a4 + 48) = v16;
    }
    if (!v26)
    {
      (*(void (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(_QWORD *)a2 + 1256))(a2, a4, &v17);
      PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::addValue(*((_QWORD *)this + 600), (double *)&v27, (__int128 *)a4, 0);
    }
  }
  else
  {
    (*(void (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(_QWORD *)a2 + 1256))(a2, a4, &v17);
  }
}

double OZAlignToBehavior::getSourceAlignmentOffset@<D0>(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, const CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  const CMTime *v8;
  unsigned int v9;
  double result;
  int v11;
  OZElement *v12;
  OZElement *v13;
  OZCacheKey *v14;
  uint64_t v15;
  int ValueAsInt;
  int v17;
  OZRenderState v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  int64_t v22;

  OZRenderState::OZRenderState(&v18);
  OZAlignToBehavior::getSourceFrame(this, a3, (uint64_t)&v21);
  *(_OWORD *)&v18.var0.var0 = v21;
  v18.var0.var3 = v22;
  v18.var20 = 0;
  v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v18.var21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4168), MEMORY[0x1E0CA2E68], 0.0) != 0;
  v18.var22 = *((_BYTE *)this + 4326) ^ 1;
  *(_WORD *)&v18.var23 = 257;
  *(_WORD *)&v18.var8 = 0;
  v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), v8, 0.0) - 14;
  if (v9 > 0xE)
    v11 = 3;
  else
    v11 = dword_1B35601E4[v9];
  v18.var29 = v11;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (a2)
  {
    if (v12)
    {
      v13 = v12;
      v14 = (OZCacheKey *)*((_QWORD *)this + 598);
      if (v14)
      {
        OZCacheKey::getKey(v14, (const CMTime *)&v18);
        v20 = v15;
        v19 = 0;
        PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::findValue(*((uint64_t **)this + 599), (double *)&v20, &v19, (uint64_t)&v21);
        result = *(double *)&v21;
        *(_OWORD *)a4 = v21;
        *(_QWORD *)(a4 + 16) = v22;
        if (!v19)
        {
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), MEMORY[0x1E0CA2E68], 0.0);
          getAlignmentOffset(v13, (CMTime *)&v18, (OZAlignToBehavior *)((char *)this + 1864), ValueAsInt, (double *)&v21);
          *(_OWORD *)a4 = v21;
          *(_QWORD *)(a4 + 16) = v22;
          PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::addValue(*((_QWORD *)this + 599), (double *)&v20, (__int128 *)a4, 0);
        }
      }
      else
      {
        v17 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1608), MEMORY[0x1E0CA2E68], 0.0);
        getAlignmentOffset(v13, (CMTime *)&v18, (OZAlignToBehavior *)((char *)this + 1864), v17, (double *)&v21);
        result = *(double *)&v21;
        *(_OWORD *)a4 = v21;
        *(_QWORD *)(a4 + 16) = v22;
      }
    }
  }
  return result;
}

BOOL OZAlignToBehavior::getSourceRotation@<W0>(uint64_t **this@<X0>, OZTransformNode *a2@<X1>, OZTransformNode *a3@<X2>, const CMTime *a4@<X3>, uint64_t a5@<X8>)
{
  OZCacheKey *v10;
  uint64_t v11;
  _BYTE v13[24];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  OZRenderState v22;
  char v23;
  uint64_t v24;

  OZRenderState::OZRenderState(&v22);
  OZAlignToBehavior::getSourceFrame((OZAlignToBehavior *)this, a4, (uint64_t)v13);
  *(_OWORD *)&v22.var0.var0 = *(_OWORD *)v13;
  v22.var0.var3 = *(_QWORD *)&v13[16];
  *(_QWORD *)v13 = &v22.var30;
  *(_DWORD *)&v13[8] = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)v13, 0xEuLL);
  OZRenderState::TransformSet::rotation((uint64_t *)&v22.var30, 1);
  v22.var4 = 0;
  *(_WORD *)&v22.var8 = 256;
  v21 = 0x3FF0000000000000;
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  *(_QWORD *)v13 = 0x3FF0000000000000;
  *(_OWORD *)&v13[8] = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  v19 = 0u;
  v20 = 0u;
  v10 = (OZCacheKey *)this[598];
  if (v10)
  {
    OZCacheKey::getKey(v10, (const CMTime *)&v22);
    v24 = v11;
    v23 = 0;
    PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::findValue(this[601], (double *)&v24, &v23, (uint64_t)v13);
    if (!v23)
    {
      OZTransformNode::getCommonAncestorTransforms((OZSceneNode *)a2, (OZSceneNode *)a3, &v22, (uint64_t)v13, 0);
      PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::addValue((uint64_t)this[601], (double *)&v24, (__int128 *)v13, 0);
    }
  }
  else
  {
    OZTransformNode::getCommonAncestorTransforms((OZSceneNode *)a2, (OZSceneNode *)a3, &v22, (uint64_t)v13, 0);
  }
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_DWORD *)(a5 + 48) = 4;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_QWORD *)(a5 + 88) = 0;
  return liSafeGetTransformation((__int128 *)v13, a5);
}

__n128 OZAlignToBehavior::getTargetTransform@<Q0>(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, const OZRenderState *a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  uint64_t i;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  CMTime v16;
  CMTime time1;

  *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  time1 = (CMTime)a3->var0;
  v16 = *(CMTime *)((char *)this + 4480);
  if (CMTimeCompare(&time1, &v16))
  {
    (*(void (**)(OZTransformNode *, uint64_t, const OZRenderState *))(*(_QWORD *)a2 + 1256))(a2, a4, a3);
    if ((OZAlignToBehavior *)((char *)this + 4504) != (OZAlignToBehavior *)a4)
    {
      for (i = 0; i != 128; i += 32)
      {
        v10 = (_OWORD *)((char *)this + i + 4504);
        v11 = *(_OWORD *)(a4 + i + 16);
        *v10 = *(_OWORD *)(a4 + i);
        v10[1] = v11;
      }
    }
    result = *(__n128 *)&a3->var0.var0;
    *((_QWORD *)this + 562) = a3->var0.var3;
    *((__n128 *)this + 280) = result;
  }
  else if ((OZAlignToBehavior *)((char *)this + 4504) != (OZAlignToBehavior *)a4)
  {
    v12 = 0;
    v13 = (char *)this + 4504;
    do
    {
      v14 = a4 + v12;
      result = *(__n128 *)&v13[v12];
      v15 = *(_OWORD *)&v13[v12 + 16];
      *(__n128 *)v14 = result;
      *(_OWORD *)(v14 + 16) = v15;
      v12 += 32;
    }
    while (v12 != 128);
  }
  return result;
}

void *OZAlignToBehavior::getWorldToTargetOwnerTransform@<X0>(OZTransformNode *a1@<X1>, const CMTime *a2@<X2>, uint64_t a3@<X8>)
{
  void *result;
  void *v7;
  OZRenderState v8;
  TransformSet *p_var30;
  int v10;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  result = (void *)*((_QWORD *)a1 + 120);
  if (result)
  {
    if (result)
    {
      v7 = result;
      OZRenderState::OZRenderState(&v8);
      *(_OWORD *)&v8.var0.var0 = *(_OWORD *)&a2->value;
      v8.var0.var3 = a2->epoch;
      p_var30 = &v8.var30;
      v10 = 0;
      std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&p_var30, 0xEuLL);
      v8.var4 = 0;
      *(_WORD *)&v8.var8 = 0;
      return (void *)(*(uint64_t (**)(void *, uint64_t, OZRenderState *))(*(_QWORD *)v7 + 1264))(v7, a3, &v8);
    }
  }
  return result;
}

double OZAlignToBehavior::getTargetAlignmentTransform@<D0>(OZAlignToBehavior *this@<X0>, OZTransformNode *a2@<X1>, OZTransformNode *a3@<X2>, $3CC8671D27C23BF42ADDB32F2B5E48AE *a4@<X3>, uint64_t a5@<X8>)
{
  const CMTime *v10;
  unsigned int v11;
  int v12;
  int ValueAsInt;
  OZElement *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  double v22;
  double v23;
  _BYTE v24[56];
  double v25;
  double v26;
  double v27;
  TransformSet *p_var30;
  int v29;
  OZRenderState v30;

  OZRenderState::OZRenderState(&v30);
  v30.var0 = *a4;
  v30.var20 = 0;
  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v30.var21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 4168), MEMORY[0x1E0CA2E68], 0.0) != 0;
  v30.var22 = *((_BYTE *)this + 4325) ^ 1;
  v30.var9 = 0;
  *(_WORD *)&v30.var23 = 257;
  v11 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 904), v10, 0.0) - 14;
  if (v11 > 0xE)
    v12 = 3;
  else
    v12 = dword_1B35601E4[v11];
  v30.var29 = v12;
  p_var30 = &v30.var30;
  v29 = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&p_var30, 0xEuLL);
  OZRenderState::TransformSet::scale((uint64_t *)&v30.var30, 1);
  OZRenderState::TransformSet::pivot((uint64_t *)&v30.var30, 1);
  v30.var4 = 1;
  v30.var8 = 0;
  OZAlignToBehavior::getTargetTransform(this, a2, &v30, (uint64_t)&p_var30);
  OZAlignToBehavior::getSourceRotation((uint64_t **)this, a3, a2, (const CMTime *)a4, (uint64_t)v24);
  PCMatrix44Tmpl<double>::leftRotate((double *)&p_var30, 4, v25, v26, v27);
  v21 = COERCE_DOUBLE((OZRenderState *)&v30.var30);
  LODWORD(v22) = 0;
  std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, 0xEuLL);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 904), MEMORY[0x1E0CA2E68], 0.0);
  if (a2)
  else
    v14 = 0;
  getAlignmentOffset(v14, (CMTime *)&v30, (OZAlignToBehavior *)((char *)this + 1160), ValueAsInt, &v21);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2448), (const CMTime *)&v30, 0.0);
  v21 = v21 - v15;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2600), (const CMTime *)&v30, 0.0);
  v22 = v22 - v16;
  PCMatrix44Tmpl<double>::transform<double>((double *)&p_var30, &v21, &v21);
  *(_QWORD *)(a5 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  v17 = -v21;
  v18 = -v22;
  v19 = -v23;
  *(_QWORD *)a5 = 0x3FF0000000000000;
  return PCMatrix44Tmpl<double>::rightTranslate((double *)a5, v17, v18, v19);
}

double getAlignmentOffset@<D0>(OZElement *a1@<X1>, CMTime *a2@<X2>, OZChannelPositionPercent *a3@<X3>, int a4@<W0>, double *a5@<X8>)
{
  double result;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;

  *a5 = 0.0;
  a5[1] = 0.0;
  a5[2] = 0.0;
  if (a4 == 34)
  {
    OZTransformNode::getPivot((uint64_t)a1, a5, a2);
  }
  else
  {
    v17 = 0.0;
    v18 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v19 = _Q0;
    (*(void (**)(OZElement *, double *, CMTime *))(*(_QWORD *)a1 + 1488))(a1, &v17, a2);
    if (a4 == 12)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 136), a2, 0.0);
    }
    else
    {
      v15 = 0.5;
      if ((a4 - 2) < 0x1B)
        v15 = dbl_1B3560220[a4 - 2];
    }
    *a5 = v17 + v15 * (v17 + *(double *)&v19 - v17);
    if (a4 == 12)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)a3 + 288), a2, 0.0);
    }
    else
    {
      v16 = 0.5;
      if ((a4 - 4) < 0x19)
        v16 = dbl_1B35602F8[a4 - 4];
    }
    result = v18 + v16 * (v18 + *((double *)&v19 + 1) - v18);
    a5[1] = result;
  }
  return result;
}

double OZAlignToBehavior::solveRotation(uint64_t **this, OZTransformNode *a2, OZTransformNode *a3, int a4, const CMTime *a5, double a6)
{
  double v10;
  double v11;
  _QWORD v13[12];

  OZAlignToBehavior::getSourceRotation(this, a2, a3, a5, (uint64_t)v13);
  if (a4 == 5)
  {
    v10 = *(double *)&v13[9];
  }
  else if (a4 == 4)
  {
    v10 = *(double *)&v13[8];
  }
  else
  {
    v10 = a6;
    if (a4 == 3)
      v10 = *(double *)&v13[7];
  }
  OZAlignToBehavior::computeMixFactor((OZAlignToBehavior *)this, a5);
  return (v10 - a6) * v11 + a6;
}

double OZAlignToBehavior::solvePosition(OZAlignToBehavior *this, OZTransformNode *a2, OZTransformNode *a3, int a4, CMTime *a5, double a6)
{
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BYTE v19[128];
  double v20[16];
  _BYTE v21[128];
  __int128 v22[8];
  double v23[3];
  __int128 v24[8];

  *((_BYTE *)this + 4324) = 1;
  OZAlignToBehavior::getSourceToWorldTransform(this, a2, a5, (uint64_t)v24);
  OZAlignToBehavior::getSourceAlignmentOffset(this, a2, a5, (uint64_t)v23);
  OZAlignToBehavior::getWorldToTargetOwnerTransform(a3, a5, (uint64_t)v22);
  OZAlignToBehavior::getTargetAlignmentTransform(this, a3, a2, ($3CC8671D27C23BF42ADDB32F2B5E48AE *)a5, (uint64_t)v21);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v21, v22, (uint64_t)v19);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v19, v24, (uint64_t)v20);
  v12 = PCMatrix44Tmpl<double>::transform<double>(v20, v23, v23);
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  *((_BYTE *)this + 4324) = 0;
  if (a4)
    v13 = a6;
  if (a4 == 1)
    v13 = v14;
  if (a4 == 2)
    v16 = v15;
  else
    v16 = v13;
  OZAlignToBehavior::computeMixFactor(this, a5);
  return (v16 - a6) * v17 + a6;
}

double OZAlignToBehavior::solveNode(OZAlignToBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  OZTransformNode *SourceObject;
  OZTransformNode *v9;
  const void *v10;
  OZTransformNode *v11;
  OZTransformNode *v12;
  double v13;
  OZScene **v14;
  double v15;
  _BYTE v17[8];
  CMTime v18;
  CMTime v19;

  memset(&v19, 0, sizeof(v19));
  (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *, double))(**(_QWORD **)(*((_QWORD *)this + 47)
                                                                                             + 32)
                                                                               + 336))(&v19, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3, a4);
  v18 = v19;
  if ((*(unsigned int (**)(OZAlignToBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v18, 0, 1, 1))
  {
    SourceObject = (OZTransformNode *)OZAlignToBehavior::getSourceObject(this);
    if (SourceObject)
    {
      v9 = SourceObject;
      v10 = (const void *)(*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)this + 320))(this);
      if (v10)
      {
        if (v11)
        {
          v12 = v11;
          OZAlignToBehavior::computeMixFactor(this, &v19);
          if (v13 <= -0.0000001 || v13 >= 0.0000001)
          {
            v14 = (OZScene **)Li3DEngineScene::sceneManager((OZAlignToBehavior *)((char *)this + 544));
            OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v17, v14);
            if (!*((_BYTE *)this + 4324))
            {
              if (a2 > 2)
                v15 = OZAlignToBehavior::solveRotation((uint64_t **)this, v9, v12, a2, &v19, a5);
              else
                v15 = OZAlignToBehavior::solvePosition(this, v9, v12, a2, &v19, a5);
              a5 = v15;
            }
            OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v17);
          }
        }
      }
    }
  }
  return a5;
}

void sub_1B2ED690C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZAlignToBehavior::solveNode(OZAlignToBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZAlignToBehavior::solveNode((OZAlignToBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

uint64_t OZAlignToBehavior::parseBegin(OZAlignToBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZCacheKeyScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZAlignToBehavior::parseBegin(OZAlignToBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin((OZAlignToBehavior *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZCacheKeyScope);
  return 1;
}

uint64_t OZAlignToBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  _QWORD *v6;
  PCSharedCount v8;

  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 601)
  {
    PCSharedCount::PCSharedCount(&v8);
    if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v8))
    {
      v6 = (_QWORD *)operator new();
      *v6 = (*((uint64_t (**)(OZTimeMarkerSet **))*this + 42))(this);
      OZChannelRef::OZChannelRef((OZChannelRef *)(v6 + 1), (PCString *)&v8);
      v6[4] = 0;
      this[598] = (OZTimeMarkerSet *)v6;
    }
    PCString::~PCString((PCString *)&v8);
  }
  return 1;
}

void sub_1B2ED6A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  MEMORY[0x1B5E29170](v10, 0x1032C40850D8295);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZAlignToBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZAlignToBehavior::parseElement(this - 6, a2, a3);
  return 1;
}

uint64_t OZAlignToBehavior::getLockDependencies(uint64_t result, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  OZAlignToBehavior *v7;
  char *v8;
  _QWORD *i;
  unint64_t v10;
  const void *SourceObject;
  char *v12;
  const void *v13;
  void *v14;
  char *v15;
  OZScene *v16;
  char *v17;
  unint64_t *v18;

  v7 = (OZAlignToBehavior *)result;
  v8 = (char *)(result + 544);
  for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
  {
    v10 = i[4];
    if ((unint64_t)v8 >= v10)
    {
      if (v10 >= (unint64_t)v8)
        return result;
      ++i;
    }
  }
  v18 = (unint64_t *)(result + 544);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v18, (uint64_t *)&v18);
  if (a2)
  {
    PCDirectedGraph<OZLocking *>::addEdge(a3, a2, (uint64_t)v8);
  }
  else
  {
    v17 = v8;
    v18 = (unint64_t *)&v17;
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, (uint64_t **)&v18);
  }
  SourceObject = OZAlignToBehavior::getSourceObject(v7);
  if (SourceObject)
  else
    v12 = 0;
  v13 = (const void *)(*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)v7 + 320))(v7);
  if (v13
  {
  }
  else
  {
    v15 = 0;
  }
  OZLocking::getLockDependenciesForElement(v12, (unint64_t)v8, a3, a4);
  OZLocking::getLockDependenciesForElement(v15, (unint64_t)v8, a3, a4);
  v16 = (OZScene *)(*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)v7 + 336))(v7);
  OZLocking::addLockDependenciesForDependents(v8, v16, (uint64_t)a3, a4);
  v18 = (unint64_t *)v8;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v18);
}

uint64_t `non-virtual thunk to'OZAlignToBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return OZAlignToBehavior::getLockDependencies(a1 - 544, a2, a3, a4);
}

uint64_t OZAlignToBehavior::getLockingGroups(OZAlignToBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return (*(uint64_t (**)(OZAlignToBehavior *))(*(_QWORD *)this + 336))(this) + 1784;
  return result;
}

uint64_t `non-virtual thunk to'OZAlignToBehavior::getLockingGroups(OZAlignToBehavior *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 544;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 68) + 336))((char *)this - 544);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 336))(v1) + 1784;
  return result;
}

void OZCacheKey::getKey(OZCacheKey *this, const CMTime *a2)
{
  OZChannel *Channel;

  Channel = (OZChannel *)*((_QWORD *)this + 4);
  if (!Channel)
  {
    Channel = (OZChannel *)OZChannelRef::getChannel((OZCacheKey *)((char *)this + 8), (OZChannelBase *)(*(_QWORD *)this + 920));
    if (Channel)
    *((_QWORD *)this + 4) = Channel;
  }
  OZChannel::getValueAsDouble(Channel, a2, 0.0);
}

__n128 OZSingleChanBehaviorIF::getNeededRange(OZSingleChanBehaviorIF *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

uint64_t *PCCache<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCache(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1 + 32;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*a1 + 24, *(_QWORD **)v2);
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 48) = 0;
  std::unique_ptr<PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

uint64_t std::unique_ptr<PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCacheImpl(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::~PCCacheImpl(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t *PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::findValue@<X0>(uint64_t *result@<X0>, double *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  double v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;

  v5 = result[4];
  if (!v5)
    goto LABEL_8;
  v6 = *a2;
  v7 = result + 4;
  do
  {
    v8 = (uint64_t *)(v5 + 8);
    if (*(double *)(v5 + 32) >= v6)
    {
      v8 = (uint64_t *)v5;
      v7 = (uint64_t *)v5;
    }
    v5 = *v8;
  }
  while (*v8);
  if (v7 != result + 4 && v6 >= *((double *)v7 + 4))
  {
    v14 = v7;
    v9 = *(_OWORD *)(v7 + 15);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(v7 + 13);
    *(_OWORD *)(a4 + 80) = v9;
    v10 = *(_OWORD *)(v7 + 19);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(v7 + 17);
    *(_OWORD *)(a4 + 112) = v10;
    v11 = *(_OWORD *)(v7 + 7);
    *(_OWORD *)a4 = *(_OWORD *)(v7 + 5);
    *(_OWORD *)(a4 + 16) = v11;
    v12 = *(_OWORD *)(v7 + 11);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v7 + 9);
    *(_OWORD *)(a4 + 48) = v12;
    v13 = result[9] + 1;
    result[9] = v13;
    v7[22] = v13;
    result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble(result + 6, (uint64_t)&v14);
    *a3 = 1;
  }
  else
  {
LABEL_8:
    *a3 = 0;
    *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a4 = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
  }
  return result;
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 184);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 176) <= *(_QWORD *)(v17 + 176))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 184) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 184) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 176);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 176);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 176);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 176))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 184) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 184) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 184);
    goto LABEL_24;
  }
  return result;
}

void PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::addValue(uint64_t a1, double *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t i;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *a2;
    if (!v6)
      goto LABEL_10;
    v8 = a1 + 32;
    do
    {
      v9 = (uint64_t *)(v6 + 8);
      if (*(double *)(v6 + 32) >= v7)
      {
        v9 = (uint64_t *)v6;
        v8 = v6;
      }
      v6 = *v9;
    }
    while (*v9);
    if (v8 != a1 + 32 && v7 >= *(double *)(v8 + 32))
    {
      v40[0] = v8;
      v19 = v8 + 40;
      if ((__int128 *)(v8 + 40) != a3)
      {
        for (i = 0; i != 4; ++i)
        {
          for (j = 0; j != 32; j += 8)
            *(_QWORD *)(v19 + j) = *(_QWORD *)((char *)a3 + j);
          v19 += 32;
          a3 += 2;
        }
      }
      v22 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v22;
      *(_QWORD *)(v8 + 176) = v22;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v40);
      v23 = v40[0];
      v24 = a4 - *(_QWORD *)(v40[0] + 168);
      if (v24)
      {
        v25 = *(_QWORD *)(a1 + 80) + v24;
        *(_QWORD *)(a1 + 80) = v25;
        *(_QWORD *)(v23 + 168) = a4;
        if (!*(_QWORD *)(a1 + 104))
        {
          while (v25 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
          {
            v26 = *(uint64_t ***)(a1 + 48);
            if (v26 == *(uint64_t ***)(a1 + 56))
              break;
            v28 = *(double *)v26;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v28);
            v27 = *(uint64_t **)&v28;
            *(_QWORD *)(a1 + 80) -= *(_QWORD *)(*(_QWORD *)&v28 + 168);
            std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v27);
            operator delete(v27);
            v25 = *(_QWORD *)(a1 + 80);
          }
        }
      }
    }
    else
    {
LABEL_10:
      v10 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v10;
      v11 = a3[5];
      v33 = a3[4];
      v34 = v11;
      v12 = a3[7];
      v35 = a3[6];
      v36 = v12;
      v13 = a3[1];
      v29 = *a3;
      v30 = v13;
      v14 = a3[3];
      v31 = a3[2];
      v32 = v14;
      v28 = v7;
      v37 = a4;
      v38 = v10;
      v39 = 0;
      v40[0] = (uint64_t)std::__tree<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>((uint64_t **)(a1 + 24), &v28, &v28);
      v40[1] = v15;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v40);
      v16 = *(_QWORD *)(a1 + 80) + a4;
      *(_QWORD *)(a1 + 80) = v16;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (v16 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v18 = *(uint64_t ***)(a1 + 48);
          if (v18 == *(uint64_t ***)(a1 + 56))
            break;
          v28 = *(double *)v18;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v28);
          v17 = *(uint64_t **)&v28;
          *(_QWORD *)(a1 + 80) -= *(_QWORD *)(*(_QWORD *)&v28 + 168);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v17);
          operator delete(v17);
          v16 = *(_QWORD *)(a1 + 80);
        }
      }
    }
  }
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 184) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 184);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 176) <= *(_QWORD *)(v23 + 176))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 184) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 184) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

uint64_t **std::__tree<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>>(uint64_t **a1, double *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0xC0uLL);
    v11 = a3[7];
    *((_OWORD *)v10 + 8) = a3[6];
    *((_OWORD *)v10 + 9) = v11;
    v12 = a3[9];
    *((_OWORD *)v10 + 10) = a3[8];
    *((_OWORD *)v10 + 11) = v12;
    v13 = a3[3];
    *((_OWORD *)v10 + 4) = a3[2];
    *((_OWORD *)v10 + 5) = v13;
    v14 = a3[5];
    *((_OWORD *)v10 + 6) = a3[4];
    *((_OWORD *)v10 + 7) = v14;
    v15 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v15;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 184);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 184) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,std::__tree_node<std::__value_type<double,PCCacheImpl<double,PCMatrix44Tmpl<double>,PCNoLock,std::less<double>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

uint64_t *PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::findValue@<X0>(uint64_t *result@<X0>, double *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  double v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result[4];
  if (!v5)
    goto LABEL_8;
  v6 = *a2;
  v7 = result + 4;
  do
  {
    v8 = (uint64_t *)(v5 + 8);
    if (*(double *)(v5 + 32) >= v6)
    {
      v8 = (uint64_t *)v5;
      v7 = (uint64_t *)v5;
    }
    v5 = *v8;
  }
  while (*v8);
  if (v7 != result + 4 && v6 >= *((double *)v7 + 4))
  {
    v10 = v7;
    *(_OWORD *)a4 = *(_OWORD *)(v7 + 5);
    *(_QWORD *)(a4 + 16) = v7[7];
    v9 = result[9] + 1;
    result[9] = v9;
    v7[9] = v9;
    result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble(result + 6, (uint64_t)&v10);
    *a3 = 1;
  }
  else
  {
LABEL_8:
    *a3 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
  }
  return result;
}

void PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::addValue(uint64_t a1, double *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  double v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[2];

  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *a2;
    if (!v6)
      goto LABEL_10;
    v8 = a1 + 32;
    do
    {
      v9 = (uint64_t *)(v6 + 8);
      if (*(double *)(v6 + 32) >= v7)
      {
        v9 = (uint64_t *)v6;
        v8 = v6;
      }
      v6 = *v9;
    }
    while (*v9);
    if (v8 != a1 + 32 && v7 >= *(double *)(v8 + 32))
    {
      v29[0] = v8;
      v16 = *((_QWORD *)a3 + 2);
      *(_OWORD *)(v8 + 40) = *a3;
      *(_QWORD *)(v8 + 56) = v16;
      v17 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v17;
      *(_QWORD *)(v8 + 72) = v17;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v29);
      v18 = v29[0];
      v19 = a4 - *(_QWORD *)(v29[0] + 64);
      if (v19)
      {
        v20 = *(_QWORD *)(a1 + 80) + v19;
        *(_QWORD *)(a1 + 80) = v20;
        *(_QWORD *)(v18 + 64) = a4;
        if (!*(_QWORD *)(a1 + 104))
        {
          while (v20 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
          {
            v21 = *(uint64_t ***)(a1 + 48);
            if (v21 == *(uint64_t ***)(a1 + 56))
              break;
            v23 = *(double *)v21;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v23);
            v22 = *(uint64_t **)&v23;
            *(_QWORD *)(a1 + 80) -= *(_QWORD *)(*(_QWORD *)&v23 + 64);
            std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v22);
            operator delete(v22);
            v20 = *(_QWORD *)(a1 + 80);
          }
        }
      }
    }
    else
    {
LABEL_10:
      v10 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v10;
      v11 = *((_QWORD *)a3 + 2);
      v23 = v7;
      v24 = *a3;
      v25 = v11;
      v26 = a4;
      v27 = v10;
      v28 = 0;
      v29[0] = (uint64_t)std::__tree<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>((uint64_t **)(a1 + 24), &v23, (uint64_t)&v23);
      v29[1] = v12;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v29);
      v13 = *(_QWORD *)(a1 + 80) + a4;
      *(_QWORD *)(a1 + 80) = v13;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (v13 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v15 = *(uint64_t ***)(a1 + 48);
          if (v15 == *(uint64_t ***)(a1 + 56))
            break;
          v23 = *(double *)v15;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v23);
          v14 = *(uint64_t **)&v23;
          *(_QWORD *)(a1 + 80) -= *(_QWORD *)(*(_QWORD *)&v23 + 64);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v14);
          operator delete(v14);
          v13 = *(_QWORD *)(a1 + 80);
        }
      }
    }
  }
}

uint64_t **std::__tree<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::__map_value_compare<double,std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>,std::less<double>,true>,std::allocator<std::__value_type<double,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>>::__emplace_unique_key_args<double,std::pair<double const,PCCacheImpl<double,PCVector3<double>,PCNoLock,std::less<double>>::Data>>(uint64_t **a1, double *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  _OWORD *v10;
  __int128 v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x58uLL);
    v11 = *(_OWORD *)(a3 + 16);
    v10[2] = *(_OWORD *)a3;
    v10[3] = v11;
    v10[4] = *(_OWORD *)(a3 + 32);
    *((_QWORD *)v10 + 10) = *(_QWORD *)(a3 + 48);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t OZChannelEnumLayer_Factory::getInstance(OZChannelEnumLayer_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelEnumLayer_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelEnumLayer_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumLayer_Factory::_instance;
}

void OZChannelEnumLayer::OZChannelEnumLayer(OZChannelEnumLayer *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *Instance;
  OZChannelEnumLayer_Factory *v17;

  Instance = (OZFactory *)OZChannelEnumLayer_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, Instance, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &unk_1E658ED98;
  *((_QWORD *)this + 2) = &unk_1E658F108;
  *((_QWORD *)this + 1) = OZChannelEnumLayer_Factory::getInstance(v17);
}

void sub_1B2ED79F8(_Unwind_Exception *a1)
{
  PCString *v1;

  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelEnumLayer_Factory *v0;

  v0 = (OZChannelEnumLayer_Factory *)operator new();
  OZChannelEnumLayer_Factory::OZChannelEnumLayer_Factory(v0);
  OZChannelEnumLayer_Factory::_instance = (uint64_t)v0;
}

void sub_1B2ED7A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumLayer_Factory::OZChannelEnumLayer_Factory(OZChannelEnumLayer_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555760;
  v4 = xmmword_1B35603C0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65A7FA0;
  *((_QWORD *)this + 16) = &unk_1E65A8070;
}

void sub_1B2ED7AF4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannel *OZChannelEnumLayer_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannel *v6;

  v6 = (OZChannel *)operator new();
  OZChannelEnum::OZChannelEnum(v6, this, a2, a3, 0, 0);
  v6->var0 = (void **)&unk_1E658ED98;
  v6->var2 = (void **)&unk_1E658F108;
  return v6;
}

void sub_1B2ED7B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumLayer_Factory::createCopy(OZChannelEnumLayer_Factory *this, OZFactoryBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E658ED98;
  *((_QWORD *)v3 + 2) = &unk_1E658F108;
  return v3;
}

void sub_1B2ED7C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumLayer_Factory::createChannelCopy(OZChannelEnumLayer_Factory *this, OZChannelBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E658ED98;
  *((_QWORD *)v3 + 2) = &unk_1E658F108;
  return v3;
}

void sub_1B2ED7CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  uint64_t *v6;
  OZChannelObjectRoot *v7;
  uint64_t result;

  v6 = (uint64_t *)(this + 4732);
  if (*((_BYTE *)this + 38096)
  {
    OZFactory::setNeedsSaving(this[26], (const OZFactory *)1);
    v7 = (OZChannelObjectRoot *)(*((uint64_t (**)(char *))this[25] + 80))((char *)this + 200);
    OZChannelObjectRoot::markChannelFactoriesForSerialization(v7, a2);
  }
  else
  {
    OZSceneNode::markFactoriesForSerialization(this + 25, a2);
  }
  result = *v6;
  if (*v6)
    return (*(uint64_t (**)(uint64_t, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)result + 456))(result, a2, a3);
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  return OZRotoshape::markFactoriesForSerialization(this - 25, a2, a3);
}

{
  return OZRotoshape::markFactoriesForSerialization(this - 31, a2, a3);
}

uint64_t OZRotoshape::writeBody(OZRotoshape *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (unsigned __int8 *)this + 37856;
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZRotoshapeScope);
  if (a4 && *(_QWORD *)v10 && !OZChannelBase::testFlag((OZChannelBase *)(*(_QWORD *)v10 + 56), 8))
  {
    v11 = *(_QWORD *)v10 + 48;
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v11 + 16))(v11, a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, a2, 0, 1, a5);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  v12 = v10[240];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 607);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  if (!v10[240]
  {
    return OZElement::writeBody((OZElement *)((char *)this + 200), a2, a3, a4, a5);
  }
  OZChannelObjectRoot::serializeSelfOnly((OZRotoshape *)((char *)this + 256), a2, a3);
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)this + 83) + 16))((char *)this + 664, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 83) + 24))((char *)this + 664, a2, 0, 1, a5);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t `non-virtual thunk to'OZRotoshape::writeBody(OZRotoshape *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZRotoshape::writeBody((OZRotoshape *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return OZRotoshape::writeBody((OZRotoshape *)((char *)this - 248), a2, a3, a4, a5);
}

uint64_t OZRotoshape::parseBegin(OZRotoshape *this, PCSerializerReadStream *a2, double a3)
{
  double *v5;
  OZMoShape *v6;
  unsigned int *v7;
  OZChannelBase *v8;
  OZScene *v9;
  OZScene *v10;

  v5 = (double *)((char *)this + 32848);
  LODWORD(a3) = *((_DWORD *)a2 + 26);
  *((double *)this + 4763) = (double)*(unint64_t *)&a3;
  v6 = (OZRotoshape *)((char *)this + 18976);
  v7 = (unsigned int *)*((_QWORD *)this + 4732);
  if (v7)
  {
    v8 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 640))(*((_QWORD *)this + 4732));
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 37704), v8);
    v9 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    if (v9)
    {
      v10 = v9;
      if (OZScene::getNode(v9, v7[20]) == v7)
      {
        OZScene::unregisterNode(v10, (OZSceneNode *)v7);
        OZScene::removeAllDependencies(v10, (OZSceneNode *)v7);
      }
    }
  }
  OZMoShape::resetParticlePaint(v6);
  if (v5[657] < 5.0)
  {
    (*(void (**)(double *, _QWORD, _QWORD, double))(*(_QWORD *)v5 + 712))(v5, MEMORY[0x1E0CA2E68], 0, 1.0);
    OZMoShape::reparentChannels(v6, (OZChannelFolder *)((char *)this + 648), 1);
    *((_BYTE *)this + 38112) = 1;
  }
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZRotoshapeScope);
  OZElement::parseBegin((OZElement *)((char *)this + 200), a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZRotoshape::parseBegin(OZRotoshape *this, PCSerializerReadStream *a2, double a3)
{
  OZRotoshape::parseBegin((OZRotoshape *)((char *)this - 200), a2, a3);
  return 1;
}

{
  OZRotoshape::parseBegin((OZRotoshape *)((char *)this - 248), a2, a3);
  return 1;
}

uint64_t OZRotoshape::parseEnd(OZRotoshape *this, PCSerializerReadStream *a2)
{
  double *v4;
  char *v5;
  const CMTime *v6;
  int ValueAsInt;
  int v8;
  CMTime *v9;
  BOOL v10;
  double v11;
  double v12;
  uint64_t v13;
  __n128 v14;
  CMTime v16;
  CMTime time1;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime time2;

  v4 = (double *)((char *)this + 37856);
  v5 = (char *)this + 200;
  OZElement::parseEnd((OZElement *)((char *)this + 200), a2);
  *(_WORD *)((char *)this + 38113) = 0;
  *((_BYTE *)v4 + 242) = 1;
  if (*((_DWORD *)a2 + 26) <= 2u)
  {
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 27624), MEMORY[0x1E0CA2E68], 0.0);
    (*(void (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 3485) + 712))((char *)this + 27880, v6, 0, (double)ValueAsInt);
    v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 27624), v6, 0.0);
    (*(void (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 3517) + 712))((char *)this + 28136, v6, 0, (double)v8);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20048), v6, 0.0) == 2)
    {
      (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)this + 4087) + 712))((char *)this + 32696, MEMORY[0x1E0CA2E68], 0, 1.0);
      OZChannelCurve::convertCurveBSplineBiasToXSplineBias((OZRotoshape *)((char *)this + 19184));
      OZChannelCurve::setCurveInterpolation((OZRotoshape *)((char *)this + 19184), 10);
    }
  }
  v9 = (CMTime *)MEMORY[0x1E0CA2E68];
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 25904), MEMORY[0x1E0CA2E68], 0.0) - 1 <= 1
    && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21760), 0, 1))
  {
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 25904), 0.0);
    (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)this + 3238) + 712))((char *)this + 25904, MEMORY[0x1E0CA2E68], 0, 0.0);
  }
  if ((*((_DWORD *)this + 306) & 8) != 0)
  {
    if (*(_QWORD *)v4)
    {
      (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)v4 + 1128))(&v20);
      time2 = v21;
      time1 = *v9;
      if (!CMTimeCompare(&time1, &time2))
      {
        (*(void (**)(CMTime *__return_ptr, char *))(*(_QWORD *)v5 + 1128))(&v20, v5);
        v19 = v20;
        OZMoShape::initPPaintTime((_QWORD *)this + 2372, &v19, (const PCTimeRange *)&v20);
      }
    }
  }
  if (*(_QWORD *)v4)
  {
    (*(void (**)(CMTime *__return_ptr, char *))(*(_QWORD *)v5 + 1128))(&v20, v5);
    (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)v4 + 1128))(&time1);
    time2 = v20;
    v22 = time1;
    if (CMTimeCompare(&time2, &v22) || (time2 = v21, v22 = v18, CMTimeCompare(&time2, &v22)))
    {
      (*(void (**)(CMTime *__return_ptr, char *))(*(_QWORD *)v5 + 1128))(&v20, v5);
      v16 = v20;
      OZMoShape::initPPaintTime((_QWORD *)this + 2372, &v16, (const PCTimeRange *)&v20);
    }
  }
  if ((*(uint64_t (**)(char *))(*(_QWORD *)v5 + 272))(v5))
    v10 = *((_DWORD *)a2 + 26) > 3u;
  else
    v10 = 1;
  if (!v10 && (*(double (**)(char *))(*(_QWORD *)v5 + 1328))(v5) != 1.0)
  {
    v11 = (*(double (**)(char *))(*((_QWORD *)this + 25) + 1328))(v5);
    (*(void (**)(char *, double))(*((_QWORD *)this + 3062) + 776))((char *)this + 24496, 1.0 / v11);
    v12 = (*(double (**)(char *))(*((_QWORD *)this + 25) + 1328))(v5);
    (*(void (**)(char *, double))(*((_QWORD *)this + 3150) + 776))((char *)this + 25200, 1.0 / v12);
  }
  (*(void (**)(char *))(*((_QWORD *)this + 25) + 1328))(v5);
  v13 = MEMORY[0x1E0CA2E68];
  (*(void (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 2683) + 712))((char *)this + 21464, MEMORY[0x1E0CA2E68], 0);
  v14.n128_u64[0] = 0;
  if ((*((_DWORD *)this + 306) & 8) != 0)
    v14.n128_f64[0] = 1.0;
  (*(void (**)(char *, uint64_t, _QWORD, __n128))(*((_QWORD *)this + 3979) + 712))((char *)this + 31832, v13, 0, v14);
  if (v4[31] < 5.0)
  {
    OZMoShape::reparentChannels((OZRotoshape *)((char *)this + 18976), (OZChannelFolder *)((char *)this + 648), 0);
    *((_BYTE *)v4 + 256) = 0;
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZRotoshape::parseEnd(OZRotoshape *this, PCSerializerReadStream *a2)
{
  OZRotoshape::parseEnd((OZRotoshape *)((char *)this - 200), a2);
  return 1;
}

{
  OZRotoshape::parseEnd((OZRotoshape *)((char *)this - 248), a2);
  return 1;
}

uint64_t OZRotoshape::parseElement(OZRotoshape *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  char *v6;
  char v7;
  char v8;
  unint64_t v9;
  double v10;
  char *v11;
  PCSharedCount v13;
  uint64_t v14;

  v6 = (char *)this + 37856;
  v14 = 0;
  PCSharedCount::PCSharedCount(&v13);
  v7 = 0;
  v8 = 1;
  switch(*((_DWORD *)a3 + 2))
  {
    case 0x25B:
      OZChannelCurve::deleteAllVertices((OZRotoshape *)((char *)this + 19184));
      v8 = 0;
      v7 = 1;
      goto LABEL_3;
    case 0x25C:
LABEL_3:
      v6[257] = v7;
      v6[258] = v8;
      break;
    case 0x25D:
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 504, (uint64_t)&v14 + 4);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 502, (uint64_t)&v14);
      LODWORD(v9) = HIDWORD(v14);
      v10 = (double)v9;
      if (v6[257])
      {
        v11 = (char *)this + 19472;
        (*(void (**)(char *, _QWORD, char *, double))(*((_QWORD *)this + 2434) + 144))((char *)this + 19472, MEMORY[0x1E0CA2E68], v6 + 264, v10);
      }
      else
      {
        v11 = (char *)this + 19704;
        (*(void (**)(char *, _QWORD, char *, double))(*((_QWORD *)this + 2463) + 144))((char *)this + 19704, MEMORY[0x1E0CA2E68], v6 + 264, v10);
      }
      (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v11 + 352))(v11, *((_QWORD *)v6 + 33), v14);
      break;
    case 0x25F:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, (char *)this + 38097);
      break;
    default:
      break;
  }
  OZElement::parseElement((OZElement *)((char *)this + 200), a2, a3);
  PCString::~PCString((PCString *)&v13);
  return 1;
}

void sub_1B2ED8830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::parseElement(OZRotoshape *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZRotoshape::parseElement((OZRotoshape *)((char *)this - 200), a2, a3);
  return 1;
}

{
  OZRotoshape::parseElement((OZRotoshape *)((char *)this - 248), a2, a3);
  return 1;
}

CGColorSpace **OZRotoshape::completeLoading(OZRotoshape *this)
{
  OZScene *v2;
  OZMoShape *v3;
  PCMutex *v4;
  uint64_t CurrentRenderParams;
  uint64_t v6;
  OZShapeRenderParams *v7;
  _OWORD v9[5];
  CGColorSpace *v10;
  int v11;
  _OWORD v12[5];
  CGColorSpace *v13;
  int v14;
  __n128 v15;
  uint64_t v16;
  _BYTE v17[32];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGColorSpace *v21;
  int v22;

  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)v17);
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
  {
    v2 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    OZScene::getCurrentTime(v2, &v15);
    *(__n128 *)v17 = v15;
    *(_QWORD *)&v17[16] = v16;
  }
  v3 = (OZRotoshape *)((char *)this + 18976);
  v4 = (PCMutex *)ProShade::Snippet::code((OZRotoshape *)((char *)this + 18976));
  v15.n128_u64[0] = (unint64_t)v4;
  PCMutex::lock(v4);
  v15.n128_u8[8] = 1;
  OZShape::completeCurve((OZRotoshape *)((char *)this + 18976));
  *((_BYTE *)this + 21616) = 1;
  OZShape::didSetInterpolation((OZRotoshape *)((char *)this + 18976));
  v12[2] = v18;
  v12[3] = v19;
  v12[4] = v20;
  v12[0] = *(_OWORD *)v17;
  v12[1] = *(_OWORD *)&v17[16];
  v13 = v21;
  if (v21)
    PCCFRefTraits<CGColorSpace *>::retain(v21);
  v14 = v22;
  CurrentRenderParams = OZShape::getCurrentRenderParams((uint64_t)this + 18976, (uint64_t)v12);
  OZShape::checkWindingOrder((OZRotoshape *)((char *)this + 18976), (CMTime *)v17, CurrentRenderParams, 0, 1);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20304), (const CMTime *)v17, 0.0))
    OZShape::closeCurve((OZRotoshape *)((char *)this + 18976), (const CMTime *)v17);
  v6 = 432;
  if ((*((_DWORD *)this + 306) & 8) == 0)
    v6 = 440;
  (*(void (**)(OZRotoshape *))(*(_QWORD *)this + v6))(this);
  (*(void (**)(OZRotoshape *, uint64_t))(*(_QWORD *)this + 200))(this, 1);
  v9[2] = v18;
  v9[3] = v19;
  v9[4] = v20;
  v9[0] = *(_OWORD *)v17;
  v9[1] = *(_OWORD *)&v17[16];
  v10 = v21;
  if (v21)
    PCCFRefTraits<CGColorSpace *>::retain(v21);
  v11 = v22;
  v7 = (OZShapeRenderParams *)OZShape::getCurrentRenderParams((uint64_t)v3, (uint64_t)v9);
  OZMoShape::validateChannels(v3, (const CMTime *)v17, v7, 0, 1);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v10);
  PCMutex::unlock(v4);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v21);
}

void sub_1B2ED8A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 64));
  _Unwind_Resume(a1);
}

OZChannelBase *OZRotoshape::getChannelFromRefAndVersion(OZRotoshape *this, OZChannelRef *a2, double a3)
{
  int v6;
  OZTransformNode *v7;
  OZChannelBase *result;
  BOOL v9;
  OZMoShape *v10;
  OZChannelFolder *v11;
  OZChannelBase *ChannelFromRefAndVersion;

  if (a3 >= 5.0)
    return OZTransformNode::getChannelFromRefAndVersion((OZTransformNode *)((char *)this + 200), a2, a3);
  v6 = *((unsigned __int8 *)this + 38112);
  v7 = (OZTransformNode *)((char *)this + 200);
  result = OZTransformNode::getChannelFromRefAndVersion((OZTransformNode *)((char *)this + 200), a2, a3);
  if (v6)
    v9 = 0;
  else
    v9 = result == 0;
  if (v9)
  {
    v10 = (OZRotoshape *)((char *)this + 18976);
    v11 = (OZChannelFolder *)((char *)this + 648);
    OZMoShape::reparentChannels(v10, v11, 1);
    ChannelFromRefAndVersion = OZTransformNode::getChannelFromRefAndVersion(v7, a2, a3);
    OZMoShape::reparentChannels(v10, v11, 0);
    return ChannelFromRefAndVersion;
  }
  return result;
}

OZChannelBase *`non-virtual thunk to'OZRotoshape::getChannelFromRefAndVersion(OZRotoshape *this, OZChannelRef *a2, double a3)
{
  return OZRotoshape::getChannelFromRefAndVersion((OZRotoshape *)((char *)this - 200), a2, a3);
}

{
  return OZRotoshape::getChannelFromRefAndVersion((OZRotoshape *)((char *)this - 216), a2, a3);
}

void OZRenderGraphState::OZRenderGraphState(OZRenderGraphState *this)
{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x3FFCCCCCCCCCCCCDLL;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = (char *)this + 64;
  *((_QWORD *)this + 9) = (char *)this + 64;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 1;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = 0x3FF0000000000000;
  *((_QWORD *)this + 17) = 0x3FF0000000000000;
  *((_QWORD *)this + 12) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 28) = &unk_1E64FC250;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_WORD *)this + 128) = 1;
  *((_BYTE *)this + 258) = 0;
  *((_DWORD *)this + 65) = 0;
  *((_BYTE *)this + 264) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZRenderGraphState *)((char *)this + 268), 1.0, 1.0, 1.0, 1.0);
  *((_DWORD *)this + 71) = 1065353216;
  *((_WORD *)this + 144) = 257;
  *((_QWORD *)this + 37) = 0;
}

void sub_1B2ED8C84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v2);
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::registerRetiming(OZ3DEngineSceneElement *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      OZRetimingUtil::RetimingExaminer::RetimingExaminer((uint64_t)&OZ3DEngineSceneElement::registerRetiming(void)::sRetimer);
      OZ3DEngineSceneElement::registerRetiming(void)::sRetimer = (uint64_t)&unk_1E65A8E78;
      __cxa_atexit((void (*)(void *))OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate, &OZ3DEngineSceneElement::registerRetiming(void)::sRetimer, &dword_1B2737000);
    }
  }
}

void sub_1B2ED8D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::OZ3DEngineSceneElement(OZ3DEngineSceneElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  const PCString *v6;
  uint64_t v7;
  PCURL *v8;
  PCURL *v9;
  PCURL *v10;
  PCURL *v11;
  PCString *v12;
  PCString *v13;
  PCString *v14;
  PCString *v15;
  PCString *v16;
  PCString *v17;
  PCString *v18;
  PCString *v19;
  PCURL *v20;
  PCURL *v21;
  PCURL *v22;
  PCURL *v23;
  PCURL *v24;
  PCURL *v25;
  PCURL *v26;
  PCURL *v27;
  PCURL *v28;
  PCString *v29;
  PCString *v30;
  PCString *v31;
  PCString v32;
  PCString v33;

  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *v5 = &off_1E65A8110;
  v5[2] = &unk_1E65A8A48;
  v5[6] = &unk_1E65A8CA0;
  v5[816] = &unk_1E65A8CF8;
  MEMORY[0x1B5E28F6C](v5 + 2347);
  *((_BYTE *)this + 18840) = 0;
  *((_QWORD *)this + 2356) = 0;
  *((_QWORD *)this + 2358) = 0;
  *((_QWORD *)this + 2357) = 0;
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 18872), v6);
  v7 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 18888) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 2363) = *(_QWORD *)(v7 + 16);
  *((_BYTE *)this + 18912) = 0;
  *((_QWORD *)this + 2373) = 0;
  *(_OWORD *)((char *)this + 18920) = 0u;
  *(_OWORD *)((char *)this + 18936) = 0u;
  *(_OWORD *)((char *)this + 18952) = 0u;
  *(_OWORD *)((char *)this + 18968) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2374);
  *((_QWORD *)this + 2390) = 0x3FF0000000000000;
  *((_QWORD *)this + 2385) = 0x3FF0000000000000;
  *((_QWORD *)this + 2380) = 0x3FF0000000000000;
  *((_QWORD *)this + 2375) = 0x3FF0000000000000;
  *((_OWORD *)this + 1188) = 0u;
  *((_OWORD *)this + 1189) = 0u;
  *(_OWORD *)((char *)this + 19048) = 0u;
  *(_OWORD *)((char *)this + 19064) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *(_OWORD *)((char *)this + 19128) = 0u;
  PCURL::PCURL((PCURL *)&v33, CFSTR("Channel 3D Scene Element Footage Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19144), &v33, (OZChannelFolder *)((char *)this + 320), 0x12Cu, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v8, CFSTR("Channel 3D Scene Element Footage"));
  OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker((OZ3DEngineSceneElement *)((char *)this + 19272), &v33, (OZChannelFolder *)((char *)this + 19144), 0x12Du, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v9, CFSTR("Channel Unit Size Enum"));
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Unit Size"));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 19480), &v33, &v32, (OZChannelFolder *)((char *)this + 448), 0x12Eu, 0, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v10, CFSTR("Channel Custom Unit Size"));
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 19736), 1000, &v33, (OZChannelFolder *)((char *)this + 448), 0x12Fu, 0, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v11, CFSTR("Channel Orientation"));
  OZChannelRotation3D::OZChannelRotation3D((OZ3DEngineSceneElement *)((char *)this + 19888), 0.0, 0.0, 0.0, &v33, (OZChannelFolder *)((char *)this + 448), 0x130u, 0, 4u, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v12, "Physics");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), &v33, (OZChannelFolder *)((char *)this + 448), 0x13Eu, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v13, "None;Static;Dynamic;Kinematic");
  PCString::PCString(&v32, "Type");
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 20872), 0, &v33, &v32, (OZChannelFolder *)((char *)this + 20744), 0x13Fu, 0, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCString::PCString(v14, "Automatic;Box;Sphere");
  PCString::PCString(&v32, "Simulation Shape");
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 21128), 0, &v33, &v32, (OZChannelFolder *)((char *)this + 20744), 0x143u, 0, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCString::PCString(v15, "Mass");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 21384), 1.0, &v33, (OZChannelFolder *)((char *)this + 20744), 0x140u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v16, "Bounciness");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21536), 0.5, &v33, (OZChannelFolder *)((char *)this + 20744), 0x141u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v17, "Sliding Friction");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21688), 0.5, &v33, (OZChannelFolder *)((char *)this + 20744), 0x142u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v18, "Charge");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 21840), 0.0, &v33, (OZChannelFolder *)((char *)this + 20744), 0x146u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v19, "Charge Variation");
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 21992), 0.0, &v33, (OZChannelFolder *)((char *)this + 20744), 0x147u, 0, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v20, CFSTR("Channel Image Element Time Scale"));
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 22144), 1.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Au, 4259840, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v21, CFSTR("Channel Image Element Time Reverse"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22296), 0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Bu, 0x410000u, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v22, CFSTR("Channel Image Element Time Remap Enum"));
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Image Element Time Remap Label"));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 22448), 0, &v33, &v32, (OZChannelFolder *)((char *)this + 320), 0x134u, 2, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v23, CFSTR("Channel Image Element Retime Frame"));
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZ3DEngineSceneElement *)((char *)this + 22704), 1.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x135u, 131074);
  PCString::~PCString(&v33);
  PCURL::PCURL(v24, CFSTR("Channel Image Element Retime Frame Cache"));
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 22856), 1.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Cu, 131074, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v25, CFSTR("Channel Image Element Retime Sampling Enum"));
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Image Element Retime Sampling Label"));
  OZChannelEnumRetime::OZChannelEnumRetime((OZ3DEngineSceneElement *)((char *)this + 23008), &v33, &v32, (OZChannelFolder *)((char *)this + 320), 0x136u, 2u);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v26, CFSTR("Channel Image Element End Condition Enum"));
  PCURL::PCURL((PCURL *)&v32, CFSTR("Channel Image Element End Condition Label"));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23264), &v33, &v32, (OZChannelFolder *)((char *)this + 320), 0x137u, 2u, 0, 0);
  PCString::~PCString(&v32);
  PCString::~PCString(&v33);
  PCURL::PCURL(v27, CFSTR("Channel Image Element Loop Duration"));
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 23520), 0.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x138u, 32770, 0, 0);
  PCString::~PCString(&v33);
  PCURL::PCURL(v28, CFSTR("Channel Image Element Duration Cache"));
  OZChannelDouble::OZChannelDouble((OZ3DEngineSceneElement *)((char *)this + 23672), 0.0, &v33, (OZChannelFolder *)((char *)this + 320), 0x13Du, 2, 0, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v29, "Scripting");
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23824), &v33, (OZChannelFolder *)((char *)this + 448), 0x144u, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v30, "Shading");
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23952), &v33, (OZChannelFolder *)((char *)this + 448), 0x145u, 0);
  PCString::~PCString(&v33);
  PCString::PCString(v31, "Use Custom Lighting");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24080), 0, &v33, (OZChannelFolder *)((char *)this + 448), 0x148u, 0, 0, 0);
  PCString::~PCString(&v33);
  *((_QWORD *)this + 3032) = 0;
  *((_OWORD *)this + 1515) = 0u;
  PCMutex::PCMutex((PCMutex *)this + 337);
  PCMutex::PCMutex((PCMutex *)this + 338);
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 19272, 0);
  OZChanObjectManipRef::setAlwaysUpdateDefaultValue((uint64_t)this + 19272, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6680), 2048, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6680));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19480), 16, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 19736), 0, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 19736), 0.1);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 19736), 0.1);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 19736), 1000.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19736), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19736), 16, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 19888), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20480), 2, 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 19888), CFSTR("OZEnvironmentRotationController"));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19888), 16, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12672), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 14568), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 17520), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5032), 4259874, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11208), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9936), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8920), 4259872, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8768), 4259872, 0);
  *((_QWORD *)this + 2360) = 0;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21384), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21384), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 21688), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 21688), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 21536), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 21536), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21840), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21840), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 21992), -1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21992), 1.0);
}

void sub_1B2ED9884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, OZChannelEnum *a12, PCString *a13, OZChannel *a14, OZChannelRetimeFrame *a15, OZChannelEnum *a16, OZChannelBool *a17, OZChannel *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannelFolder *a21,uint64_t a22,PCSharedCount *a23,void **a24,std::recursive_mutex *a25,OZChannelEnum *a26,OZChannel *a27,OZChannel *a28,OZChannelPercent *a29)
{
  uint64_t v29;
  OZChannelBool *v30;
  OZChannelVaryingFolder *v31;
  OZChannelVaryingFolder *v32;
  PCMutex *v33;
  OZChannel *v34;
  OZChannel *v35;
  OZChannelFolder *v36;
  uint64_t v37;
  void *v39;
  void *v40;

  PCMutex::~PCMutex(v33);
  OZChannelBool::~OZChannelBool(v30);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v31);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v32);
  OZChannel::~OZChannel(v35);
  OZChannel::~OZChannel(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannel::~OZChannel(a14);
  OZChannelRetimeFrame::~OZChannelRetimeFrame(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannel::~OZChannel(a18);
  OZChannel::~OZChannel(a27);
  OZChannel::~OZChannel(a28);
  OZChannelPercent::~OZChannelPercent(a29);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v37 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v37 - 144));
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelFolder::~OZChannelFolder(v36);
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v37 - 128));
  OZChannel::~OZChannel(v34);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v37 - 136));
  OZChannelFolder::~OZChannelFolder(a21);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a22);
  PCSharedCount::~PCSharedCount(a23);
  v39 = *(void **)(v29 + 18952);
  if (v39)
  {
    *(_QWORD *)(v29 + 18960) = v39;
    operator delete(v39);
  }
  v40 = *a24;
  if (*a24)
  {
    *(_QWORD *)(v29 + 18928) = v40;
    operator delete(v40);
  }
  std::recursive_mutex::~recursive_mutex(a25);
  OZElement::~OZElement((OZElement *)v29);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::OZ3DEngineSceneElement(OZ3DEngineSceneElement *this, const OZ3DEngineSceneElement *a2, uint64_t a3)
{
  _QWORD *v5;
  const PCString *v6;
  uint64_t v7;

  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *v5 = &off_1E65A8110;
  v5[2] = &unk_1E65A8A48;
  v5[6] = &unk_1E65A8CA0;
  v5[816] = &unk_1E65A8CF8;
  MEMORY[0x1B5E28F6C](v5 + 2347);
  *((_BYTE *)this + 18840) = 0;
  *((_QWORD *)this + 2356) = 0;
  *((_QWORD *)this + 2358) = 0;
  *((_QWORD *)this + 2357) = 0;
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 18872), v6);
  v7 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)((char *)this + 18888) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 2363) = *(_QWORD *)(v7 + 16);
  *((_BYTE *)this + 18912) = 0;
  *((_QWORD *)this + 2373) = 0;
  *(_OWORD *)((char *)this + 18920) = 0u;
  *(_OWORD *)((char *)this + 18936) = 0u;
  *(_OWORD *)((char *)this + 18952) = 0u;
  *(_OWORD *)((char *)this + 18968) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2374);
  *((_QWORD *)this + 2390) = 0x3FF0000000000000;
  *((_QWORD *)this + 2385) = 0x3FF0000000000000;
  *((_QWORD *)this + 2380) = 0x3FF0000000000000;
  *((_QWORD *)this + 2375) = 0x3FF0000000000000;
  *((_OWORD *)this + 1188) = 0u;
  *((_OWORD *)this + 1189) = 0u;
  *(_OWORD *)((char *)this + 19048) = 0u;
  *(_OWORD *)((char *)this + 19064) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *(_OWORD *)((char *)this + 19128) = 0u;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 19144), (const OZChannelFolder *)((char *)a2 + 19144), (OZChannelFolder *)((char *)this + 320));
  OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker((OZ3DEngineSceneElement *)((char *)this + 19272), (const OZ3DEngineSceneElement *)((char *)a2 + 19272), (OZChannelFolder *)((char *)this + 19144));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 19480), (const OZ3DEngineSceneElement *)((char *)a2 + 19480), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19736), (const OZChannelBase *)((char *)a2 + 19736), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2467) = &off_1E6551358;
  *((_QWORD *)this + 2469) = &unk_1E65516B8;
  OZChannelRotation3D::OZChannelRotation3D((OZ3DEngineSceneElement *)((char *)this + 19888), (const OZ3DEngineSceneElement *)((char *)a2 + 19888), (OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20744), (const OZChannelFolder *)((char *)a2 + 20744), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 20872), (const OZ3DEngineSceneElement *)((char *)a2 + 20872), (OZChannelFolder *)((char *)this + 20744));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 21128), (const OZ3DEngineSceneElement *)((char *)a2 + 21128), (OZChannelFolder *)((char *)this + 20744));
  OZChannel::OZChannel((OZChannel *)((char *)this + 21384), (const OZChannelBase *)((char *)a2 + 21384), (OZChannelFolder *)((char *)this + 20744));
  *((_QWORD *)this + 2673) = &off_1E6551358;
  *((_QWORD *)this + 2675) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21536), (const OZChannelBase *)((char *)a2 + 21536), (OZChannelFolder *)((char *)this + 20744));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21688), (const OZChannelBase *)((char *)a2 + 21688), (OZChannelFolder *)((char *)this + 20744));
  OZChannel::OZChannel((OZChannel *)((char *)this + 21840), (const OZChannelBase *)a2 + 195, (OZChannelFolder *)((char *)this + 20744));
  *((_QWORD *)this + 2730) = &off_1E6551358;
  *((_QWORD *)this + 2732) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 21992), (const OZChannelBase *)((char *)a2 + 21992), (OZChannelFolder *)((char *)this + 20744));
  *((_QWORD *)this + 2749) = &off_1E6551358;
  *((_QWORD *)this + 2751) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 22144), (const OZChannelBase *)((char *)a2 + 22144), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2768) = &off_1E6551358;
  *((_QWORD *)this + 2770) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22296), (const OZChannelBase *)((char *)a2 + 22296), (OZChannelFolder *)((char *)this + 320));
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 22448), (const OZ3DEngineSceneElement *)((char *)a2 + 22448), (OZChannelFolder *)((char *)this + 320));
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZ3DEngineSceneElement *)((char *)this + 22704), (const OZChannelBase *)((char *)a2 + 22704), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 22856), (const OZChannelBase *)((char *)a2 + 22856), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2857) = &off_1E6551358;
  *((_QWORD *)this + 2859) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23008), (const OZ3DEngineSceneElement *)((char *)a2 + 23008), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2876) = &unk_1E658E9B8;
  *((_QWORD *)this + 2878) = &unk_1E658ED28;
  OZChannelEnum::OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23264), (const OZ3DEngineSceneElement *)((char *)a2 + 23264), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 23520), (const OZChannelBase *)a2 + 210, (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2940) = &off_1E6551358;
  *((_QWORD *)this + 2942) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 23672), (const OZChannelBase *)((char *)a2 + 23672), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2959) = &off_1E6551358;
  *((_QWORD *)this + 2961) = &unk_1E65516B8;
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23824), (const OZ3DEngineSceneElement *)((char *)a2 + 23824), (OZChannelFolder *)((char *)this + 448));
  OZChannelVaryingFolder::OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23952), (const OZ3DEngineSceneElement *)((char *)a2 + 23952), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24080), (const OZChannelBase *)a2 + 215, (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 3032) = 0;
  *((_OWORD *)this + 1515) = 0u;
  PCMutex::PCMutex((PCMutex *)this + 337);
  PCMutex::PCMutex((PCMutex *)this + 338);
  *((_QWORD *)this + 2360) = 0;
  OZ3DEngineSceneElement::setScriptURL(this, *((CFURLRef *)a2 + 3031));
  OZ3DEngineSceneElement::loadShader(this, *((const __CFURL **)a2 + 3032));
}

void sub_1B2EDA114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, PCString *a10, OZChannel *a11, OZChannelRetimeFrame *a12, OZChannelEnum *a13, OZChannelBool *a14, OZChannel *a15, OZChannel *a16, OZChannel *a17, OZChannelPercent *a18, OZChannelPercent *a19, OZChannel *a20,OZChannelEnum *a21,OZChannelEnum *a22,OZChannelRotation3D *a23,OZChannel *a24,OZChannelEnum *a25,OZChanObjectRefWithPicker *a26)
{
  uint64_t v26;
  OZChannelVaryingFolder *v27;
  OZChannelBool *v28;
  PCMutex *v29;
  OZChannel *v30;
  OZChannelVaryingFolder *v31;
  OZChannel *v32;
  OZChannelFolder *v33;
  uint64_t v34;
  void *v36;
  void *v37;

  PCMutex::~PCMutex(v29);
  OZChannelBool::~OZChannelBool(v28);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v27);
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v31);
  OZChannel::~OZChannel(v32);
  OZChannel::~OZChannel(v30);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannel::~OZChannel(a11);
  OZChannelRetimeFrame::~OZChannelRetimeFrame(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannel::~OZChannel(a17);
  OZChannelPercent::~OZChannelPercent(a18);
  OZChannelPercent::~OZChannelPercent(a19);
  OZChannel::~OZChannel(a20);
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannelEnum::~OZChannelEnum(a22);
  OZChannelFolder::~OZChannelFolder(v33);
  OZChannelRotation3D::~OZChannelRotation3D(a23);
  OZChannel::~OZChannel(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(a26);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v34 - 128));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](*(_QWORD *)(v34 - 120));
  PCSharedCount::~PCSharedCount(*(PCSharedCount **)(v34 - 112));
  v36 = *(void **)(v26 + 18952);
  if (v36)
  {
    *(_QWORD *)(v26 + 18960) = v36;
    operator delete(v36);
  }
  v37 = **(void ***)(v34 - 104);
  if (v37)
  {
    *(_QWORD *)(v26 + 18928) = v37;
    operator delete(v37);
  }
  std::recursive_mutex::~recursive_mutex(*(std::recursive_mutex **)(v34 - 96));
  OZElement::~OZElement((OZElement *)v26);
  _Unwind_Resume(a1);
}

CFURLRef OZ3DEngineSceneElement::setScriptURL(OZ3DEngineSceneElement *this, CFURLRef url)
{
  const void *v4;
  CFURLRef result;

  v4 = (const void *)*((_QWORD *)this + 3031);
  if (v4)
    CFRelease(v4);
  result = CFURLCreateFileReferenceURL((CFAllocatorRef)*MEMORY[0x1E0C9AE00], url, 0);
  *((_QWORD *)this + 3031) = result;
  return result;
}

CFURLRef OZ3DEngineSceneElement::loadShader(CFURLRef this, const __CFURL *a2)
{
  CFURLRef v3;
  const void *v4;

  if (a2)
  {
    v3 = this;
    *((_QWORD *)this + 2368) = -[OZShaderController initWithURL:]([OZShaderController alloc], "initWithURL:", a2);
    v4 = (const void *)*((_QWORD *)v3 + 3032);
    if (v4)
      CFRelease(v4);
    this = CFURLCreateFileReferenceURL((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
    *((_QWORD *)v3 + 3032) = this;
  }
  return this;
}

void OZ3DEngineSceneElement::~OZ3DEngineSceneElement(OZ3DEngineSceneElement *this)
{
  const void *v2;
  const void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E65A8110;
  *((_QWORD *)this + 2) = &unk_1E65A8A48;
  *((_QWORD *)this + 6) = &unk_1E65A8CA0;
  *((_QWORD *)this + 816) = &unk_1E65A8CF8;

  v2 = (const void *)*((_QWORD *)this + 3031);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3032);
  if (v3)
    CFRelease(v3);
  PCMutex::~PCMutex((PCMutex *)this + 338);
  PCMutex::~PCMutex((PCMutex *)this + 337);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 24080));
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23952));
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZ3DEngineSceneElement *)((char *)this + 23824));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23672));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23520));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 23264));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2876);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22856));
  OZChannelRetimeFrame::~OZChannelRetimeFrame((OZ3DEngineSceneElement *)((char *)this + 22704));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 22448));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22296));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22144));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21992));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21840));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 21688));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 21536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21384));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 21128));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 20872));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 20744));
  OZChannelRotation3D::~OZChannelRotation3D((OZ3DEngineSceneElement *)((char *)this + 19888));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19736));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineSceneElement *)((char *)this + 19480));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZ3DEngineSceneElement *)((char *)this + 19272));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 19144));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 19128);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 2374);
  v4 = (void *)*((_QWORD *)this + 2369);
  if (v4)
  {
    *((_QWORD *)this + 2370) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2365);
  if (v5)
  {
    *((_QWORD *)this + 2366) = v5;
    operator delete(v5);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 18776));
  OZElement::~OZElement((OZElement *)this);
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DEngineSceneElement::~OZ3DEngineSceneElement(OZ3DEngineSceneElement *this)
{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 16));
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 48));
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 6528));
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement((OZ3DEngineSceneElement *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DEngineSceneElement::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZElement::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 19480, (uint64_t)v4 + 19480);
  OZChannelBase::operator=(a1 + 19736, (uint64_t)v5 + 19736);
  return OZChannelPosition::operator=(a1 + 19888, (uint64_t)v5 + 19888);
}

uint64_t OZ3DEngineSceneElement::openMedia(OZ3DEngineSceneElement *this)
{
  const void *v1;

  v1 = OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (v1)
    return (*(uint64_t (**)(const void *))(*(_QWORD *)v1 + 104))(v1);
  else
    return 1;
}

const void *OZ3DEngineSceneElement::get3DEngineSceneFile(OZ3DEngineSceneElement *this)
{
  const void *result;

  result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 19272));
  if (result)
  return result;
}

uint64_t OZ3DEngineSceneElement::canCrop(OZ3DEngineSceneElement *this)
{
  return 0;
}

uint64_t OZ3DEngineSceneElement::canFourCorner(OZ3DEngineSceneElement *this)
{
  return 0;
}

double OZ3DEngineSceneElement::getPixelAspectRatio(OZ3DEngineSceneElement *this)
{
  return 1.0;
}

uint64_t OZ3DEngineSceneElement::isPrecomposed(OZ3DEngineSceneElement *this, const CMTime *a2)
{
  if (((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 835) + 496))((char *)this + 6680, 1) & 1) != 0
    || OZElement::getPreserveTransparency((OZElement *)this, a2)
    || ((*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 416))(this) & 1) != 0
    || ((*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 1864))(this) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(OZ3DEngineSceneElement *, const CMTime *))(*(_QWORD *)this + 1592))(this, a2);
  }
}

double OZ3DEngineSceneElement::calcAutomaticUnitSize(OZ3DEngineSceneElement *this)
{
  OZ3DEngineSceneFile *v1;
  double v3;
  double v4;
  double v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = xmmword_1B304F270;
  v12 = xmmword_1B304F270;
  v10 = xmmword_1B304F270;
  v8 = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v1 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (!v1)
    return 512.0;
  v6 = v8;
  v7 = v9;
  OZ3DEngineSceneFile::getSceneVolume(v1, &v10, &v6);
  if (*(double *)&v10 > *((double *)&v10 + 1)
    || *(double *)&v11 > *((double *)&v11 + 1)
    || *(double *)&v12 > *((double *)&v12 + 1))
  {
    return 512.0;
  }
  v3 = vabdd_f64(*((double *)&v10 + 1), *(double *)&v10);
  v4 = vabdd_f64(*((double *)&v11 + 1), *(double *)&v11);
  v5 = vabdd_f64(*((double *)&v12 + 1), *(double *)&v12);
  if (v3 < v4)
    v3 = v4;
  if (v3 < v5)
    v3 = v5;
  return 512.0 / v3;
}

uint64_t OZ3DEngineSceneElement::getUnitScaleMatrix@<X0>(OZ3DEngineSceneElement *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  int ValueAsInt;
  double v7;
  const CMTime *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  uint64_t i;
  _OWORD *v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19480), a2, 0.0);
  if (ValueAsInt == 2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19736), a2, 0.0);
  }
  else
  {
    v7 = 1.0;
    if (!ValueAsInt)
      (*(void (**)(OZ3DEngineSceneElement *, double))(*(_QWORD *)this + 2312))(this, 1.0);
  }
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v7, v7, v7);
  v28 = 0x3FF0000000000000;
  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  v26 = 0u;
  v27 = 0u;
  v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20024), MEMORY[0x1E0CA2E68], 0.0);
  v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20176), v8, 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20328), v8, 0.0);
  PCMatrix44Tmpl<double>::leftRotate((double *)&v19, 4, v10, v12, v13);
  result = PCMatrix44Tmpl<double>::operator*((uint64_t)&v19, (__int128 *)a3, (uint64_t)v18);
  if (v18 != (_BYTE *)a3)
  {
    for (i = 0; i != 128; i += 32)
    {
      v16 = (_OWORD *)(a3 + i);
      v17 = *(_OWORD *)&v18[i + 16];
      *v16 = *(_OWORD *)&v18[i];
      v16[1] = v17;
    }
  }
  return result;
}

uint64_t OZ3DEngineSceneElement::calcFloorPosition(OZ3DEngineSceneElement *this, SCNScene *a2, float a3)
{
  OZScene *v6;
  float64x2_t v8[3];
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v23;
  OZRenderState v24;

  OZRenderState::OZRenderState(&v24);
  memset(&v23, 0, sizeof(v23));
  PC_CMTimeMakeWithSecondsRoundToNearest(30, (CMTime *)&v23, a3);
  v24.var0 = v23;
  v6 = (OZScene *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 272))(this);
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v13 = 0x3FF0000000000000;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  (*(void (**)(OZ3DEngineSceneElement *, uint64_t *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v13, &v24);
  memset(v8, 0, sizeof(v8));
  v9 = 4;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v13, (uint64_t)v8);
  return objc_msgSend((id)OZScene::getSceneComposer(v6), "calcFloorPositionBeneath:scene:", a2, COERCE_DOUBLE(vcvt_f32_f64(v8[0])));
}

uint64_t OZ3DEngineSceneElement::calcFloorPosition(uint64_t a1, uint64_t a2, double a3)
{
  OZScene *v4;

  v4 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  return objc_msgSend((id)OZScene::getSceneComposer(v4), "calcFloorPositionBeneath:scene:", a2, a3);
}

BOOL OZ3DEngineSceneElement::is3DNodeInMasterScene(OZ3DEngineSceneElement *this, OZGroup *a2)
{
  std::recursive_mutex *v3;
  void *Representation;
  _BOOL8 v5;

  v3 = (std::recursive_mutex *)OZGroup::masterScene(a2);
  std::recursive_mutex::lock(v3);
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)v3);
  v5 = objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "childNodeWithName:recursively:", objc_msgSend((id)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2288))(this), "name"), 0) != 0;
  std::recursive_mutex::unlock(v3);
  return v5;
}

void sub_1B2EDAC74(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::add3DNodeToMasterScene(OZ3DEngineSceneElement *this)
{
  void *v2;
  std::recursive_mutex *v3;
  void *Representation;
  SCNNode *v5;

  v2 = (void *)*((_QWORD *)this + 120);
  if (v2)
  v3 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)v2);
  std::recursive_mutex::lock(v3);
  Representation = (void *)PCBitmap::getRepresentation((PCBitmap *)v3);
  v5 = (SCNNode *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2288))(this);
  objc_msgSend((id)objc_msgSend(Representation, "rootNode"), "addChildNode:", v5);
  Li3DEngineScene::didAddNode_NoLock((Li3DEngineScene *)v3, v5);
  std::recursive_mutex::unlock(v3);
}

void sub_1B2EDAD20(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneElement::remove3DNodeFromMasterScene(OZ3DEngineSceneElement *this)
{
  return objc_msgSend((id)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2288))(this), "removeFromParentNode");
}

double *OZ3DEngineSceneElement::getLocalVolume(double *result, uint64_t a2, uint64_t a3)
{
  OZ3DEngineSceneElement *v5;
  OZ3DEngineSceneFile *v6;
  OZ3DEngineSceneFile *v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  CMTime v23;
  double v24;
  double v25;
  double v26;

  if (a2)
  {
    v5 = (OZ3DEngineSceneElement *)result;
    v6 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile((OZ3DEngineSceneElement *)result);
    if (v6)
    {
      v7 = v6;
      if (*(_BYTE *)(a3 + 202))
      {
        v19 = *MEMORY[0x1E0CA2E68];
        v20 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      }
      else
      {
        v23 = *(CMTime *)a3;
        OZ3DEngineSceneElement::globalToSceneFileTime(v5, &v23, (uint64_t *)&v19);
      }
      v21 = v19;
      v22 = v20;
      OZ3DEngineSceneFile::getSceneVolume(v7, (_OWORD *)a2, &v21);
    }
    OZ3DEngineSceneElement::getUnitScaleMatrix(v5, (const CMTime *)a3, (uint64_t)&v19);
    v8 = 0;
    v9 = -1.0;
    v10 = 1.0;
    v11 = 1.0;
    v12 = -1.0;
    v13 = 1.0;
    v14 = -1.0;
    do
    {
      if ((v8 & 2) != 0)
        v15 = 16;
      else
        v15 = 24;
      v16 = *(double *)(a2 + v15);
      if ((v8 & 4) != 0)
        v17 = 32;
      else
        v17 = 40;
      v18 = *(double *)(a2 + v17);
      v24 = *(double *)(a2 + 8 * ((v8 & 1) == 0));
      v25 = v16;
      v26 = v18;
      result = PCMatrix44Tmpl<double>::transform<double>((double *)&v19, &v24, &v24);
      if (v8)
      {
        if (v10 >= v24)
          v10 = v24;
        if (v9 <= v24)
          v9 = v24;
        if (v11 >= v25)
          v11 = v25;
        if (v12 <= v25)
          v12 = v25;
        if (v13 >= v26)
          v13 = v26;
        if (v14 <= v26)
          v14 = v26;
      }
      else
      {
        v12 = v25;
        v14 = v26;
        v9 = v24;
        v10 = v24;
        v11 = v25;
        v13 = v26;
      }
      ++v8;
    }
    while (v8 != 8);
    *(double *)a2 = v10;
    *(double *)(a2 + 8) = v9;
    *(double *)(a2 + 16) = v11;
    *(double *)(a2 + 24) = v12;
    *(double *)(a2 + 32) = v13;
    *(double *)(a2 + 40) = v14;
  }
  return result;
}

__n128 OZ3DEngineSceneElement::globalToSceneFileTime@<Q0>(OZ3DEngineSceneElement *this@<X0>, CMTime *a2@<X1>, uint64_t *a3@<X8>)
{
  OZ3DEngineSceneFile *v6;
  OZChannelBase *v7;
  __n128 result;

  v6 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (v6 && (OZ3DEngineSceneFile::supportsAnimation(v6) & 1) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v7 = (OZChannelBase *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 640))(this);
    OZRetimingUtil::RemapTimeValue(v7, (OZChannelObjectRoot *)a2, a3);
  }
  else
  {
    result = *(__n128 *)&a2->value;
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    a3[2] = a2->epoch;
  }
  return result;
}

double OZ3DEngineSceneElement::getOriginalBounds(uint64_t a1, uint64_t a2)
{
  double result;
  double v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a2)
  {
    v8 = xmmword_1B304F270;
    v9 = xmmword_1B304F270;
    v7 = xmmword_1B304F270;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 1360))(a1, &v7);
    result = *(double *)&v7;
    v4 = *((double *)&v7 + 1) - *(double *)&v7;
    v5 = v8;
    v6 = *((double *)&v8 + 1) - *(double *)&v8;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v4;
    *(double *)(a2 + 24) = v6;
  }
  return result;
}

OZ3DEngineSceneFile *OZ3DEngineSceneElement::get3DScene(OZ3DEngineSceneElement *this)
{
  OZ3DEngineSceneFile *result;

  result = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (result)
    return (OZ3DEngineSceneFile *)OZ3DEngineSceneFile::get3DScene(result);
  return result;
}

void OZ3DEngineSceneElement::didAddToScene(OZTransformNode *this, OZScene *a2)
{
  OZTransformNode::didAddToScene(this, a2);
  if (*((_QWORD *)this + 3031))
    OZ3DEngineSceneElement::loadScript((OZ3DEngineSceneElement *)this);
}

void OZ3DEngineSceneElement::loadScript(OZ3DEngineSceneElement *this)
{
  uint64_t v1;
  OZJS3DElement *v3;
  OZJSScene *v4;
  void *v5;
  OZScript *v6;
  std::recursive_mutex *v7;
  PCBitmap *v8;

  v1 = *((_QWORD *)this + 3031);
  if (v1)
  {
    v3 = +[OZJS3DElement elementWith3DElement:](OZJS3DElement, "elementWith3DElement:", this);
    v4 = +[OZJSScene sceneWithScene:](OZJSScene, "sceneWithScene:", (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 272))(this));
    v5 = (void *)*((_QWORD *)this + 3030);
    if (v5)

    v6 = objc_alloc_init(OZScript);
    *((_QWORD *)this + 3030) = v6;
    -[OZScript exportObject:as:](v6, "exportObject:as:", v3, CFSTR("self"));
    objc_msgSend(*((id *)this + 3030), "exportObject:as:", v4, CFSTR("motionScene"));
    objc_msgSend(*((id *)this + 3030), "loadScriptWithURL:", v1);
    v7 = (std::recursive_mutex *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2336))(this);
    if (v7)
    {
      v8 = (PCBitmap *)v7;
      std::recursive_mutex::lock(v7);
      objc_msgSend(*((id *)this + 3030), "exportObject:as:", PCBitmap::getRepresentation(v8), CFSTR("scene"));
      std::recursive_mutex::unlock((std::recursive_mutex *)v8);
    }
  }
}

void sub_1B2EDB138(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement::didFinishLoadingIntoScene(OZ3DEngineSceneElement *this)
{
  OZ3DEngineSceneElement::setUpScriptChannels(this);
  OZ3DEngineSceneElement::setUpShaderChannels(this);
}

void OZ3DEngineSceneElement::setUpScriptChannels(OZ3DEngineSceneElement *this)
{
  void *v2;
  OZChannelFolder *v3;
  NSArray *v4;

  v2 = (void *)*((_QWORD *)this + 3030);
  if (v2)
  {
    v3 = (OZChannelFolder *)((char *)this + 23824);
    v4 = (NSArray *)objc_msgSend(v2, "parameterDescriptors");
    addChannelsForParameters(v4, v3);
    removeUnusedChannels(v4, v3);
  }
}

void OZ3DEngineSceneElement::setUpShaderChannels(OZ3DEngineSceneElement *this)
{
  void *v2;
  OZChannelFolder *v3;
  NSArray *v4;

  v2 = (void *)*((_QWORD *)this + 2368);
  if (v2)
  {
    if (objc_msgSend(v2, "library"))
    {
      v3 = (OZChannelFolder *)((char *)this + 23952);
      v4 = (NSArray *)objc_msgSend(*((id *)this + 2368), "parameters");
      addChannelsForParameters(v4, v3);
      removeUnusedChannels(v4, v3);
    }
  }
}

void `non-virtual thunk to'OZ3DEngineSceneElement::didFinishLoadingIntoScene(OZ3DEngineSceneElement *this)
{
  OZ3DEngineSceneElement *v1;

  v1 = (OZ3DEngineSceneElement *)((char *)this - 16);
  OZ3DEngineSceneElement::setUpScriptChannels((OZ3DEngineSceneElement *)((char *)this - 16));
  OZ3DEngineSceneElement::setUpShaderChannels(v1);
}

uint64_t OZ3DEngineSceneElement::didReadSceneFile(OZ3DEngineSceneElement *this)
{
  OZChannel *v2;
  uint64_t result;
  double v4;

  v2 = (OZChannel *)((char *)this + 19480);
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19480), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 2)
  {
    v4 = 1.0;
    if (!OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0))
      v4 = (*(double (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2312))(this);
    (*(void (**)(char *, _QWORD, uint64_t, double))(*((_QWORD *)this + 2467) + 712))((char *)this + 19736, MEMORY[0x1E0CA2E68], 1, v4);
    return OZChannel::setDefaultValue((OZChannel *)((char *)this + 19736), v4);
  }
  return result;
}

void OZ3DEngineSceneElement::channelValueWillBeSet(id *this, OZChannel *a2, CMTime *a3, double a4)
{
  const void *v5;

  if (this + 2409 == (id *)a2)
  {
    (*((void (**)(id *, double))*this + 62))(this, a4);
    if (OZ3DEngineSceneElement::get3DEngineSceneFile((OZ3DEngineSceneElement *)this))
    {
      v5 = OZ3DEngineSceneElement::get3DEngineSceneFile((OZ3DEngineSceneElement *)this);
      (*(void (**)(const void *))(*(_QWORD *)v5 + 496))(v5);
    }
    if (OZ3DEngineSceneElement::get3DWorldOwner((OZ3DEngineSceneElement *)this))
    {
      objc_msgSend((id)(*((uint64_t (**)(id *))*this + 286))(this), "removeFromParentNode");

      this[2360] = 0;
    }
  }
}

char *OZ3DEngineSceneElement::get3DWorldOwner(OZ3DEngineSceneElement *this)
{
  const void *v1;
  char *v2;
  char *v3;

  v1 = (const void *)*((_QWORD *)this + 120);
  if (!v1)
    return 0;
  if (!v2)
    return 0;
  v3 = v2;
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v2 + 20744), 1, 1) & 1) == 0)
    return 0;
  return v3;
}

_QWORD *OZ3DEngineSceneElement::hitCheck(_QWORD *a1, float32x2_t *a2, __int128 *a3, uint64_t a4, double *a5, char a6)
{
  double v13[6];
  float64x2_t v14;
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;
  uint64_t v18;

  if ((a6 & 4) != 0 && ((*(uint64_t (**)(_QWORD *))(*a1 + 680))(a1) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
    if (!(*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(a1[2] + 104))(a1 + 2, &v17, 1, 1, 1))return 0;
  }
  v16[1] = xmmword_1B304F270;
  v16[2] = xmmword_1B304F270;
  v16[0] = xmmword_1B304F270;
  (*(void (**)(_QWORD *, _OWORD *, __int128 *))(*a1 + 1360))(a1, v16, a3);
  v14 = vcvtq_f64_f32(*a2);
  v15 = 0;
  (*(void (**)(double *__return_ptr, _QWORD *, float64x2_t *, uint64_t, __int128 *, _QWORD))(*a1 + 1384))(v13, a1, &v14, a4, a3, 0);
  if (PCRayIntersectsBox(v13, (double *)v16, a5))
    return a1;
  else
    return 0;
}

void OZ3DEngineSceneElement::buildRenderGraph(OZ3DEngineSceneElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZ3DEngineSceneFile *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  CGColorSpace *WorkingColorSpace;
  float v17;
  float v18;
  float v19;
  __n128 *v20;
  __n128 v21;
  char v22[4];
  uint64_t v23;
  int v24;
  __int16 v25;
  char v26;
  __n128 v27;
  CGColorSpace *v28;
  __int16 v29;
  char v30;
  _OWORD v31[4];
  CMTime v32;
  CMTime v33;
  CMTime v34;
  OZRenderState v35;

  OZ3DEngineSceneElement::updateScript(this, a2);
  OZRenderState::OZRenderState(&v35, (const OZRenderState *)a2);
  v33 = *a2;
  memset(&v34, 0, sizeof(v34));
  OZ3DEngineSceneElement::globalToSceneFileTime(this, &v33, &v34.value);
  memset(&v32, 0, sizeof(v32));
  if (OZ3DEngineSceneElement::get3DEngineSceneFile(this))
  {
    v8 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
    v9.n128_f64[0] = OZ3DEngineSceneFile::get3DFileTime(v8, &v34, &v32);
  }
  else
  {
    v9 = *(__n128 *)&v34.value;
    v32 = v34;
  }
  v10 = (*(uint64_t (**)(OZ3DEngineSceneElement *, __n128))(*(_QWORD *)this + 2336))(this, v9);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v35, (uint64_t)&v27);
  for (i = 0; i != 4; ++i)
    v31[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)&v27 + 2 * i)), *((float64x2_t *)&v27 + 2 * i + 1));
  LiGraphBuilder::getCurrentInsertionGroup(a3, (PCSharedCount *)&v27);
  v12 = v27.n128_u64[0];
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v27.n128_i8[8]);
  if (*((_BYTE *)this + 18840))
  {
    v13 = *((double *)this + 2356);
    v14 = *((double *)this + 2357);
    v15 = *((double *)this + 2358);
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
    v17 = v15;
    v18 = v14;
    v19 = v13;
    PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v27, v19, v18, v17, 1.0, WorkingColorSpace);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v23);
    v24 = 1065353216;
    v25 = 257;
    v26 = 0;
    v22[0] = 1;
    v21 = PCWorkingColor::operator=(v20, &v27);
    v24 = 1065353216;
    (*(void (**)(unint64_t, char *, __n128))(*(_QWORD *)v12 + 256))(v12, v22, v21);
    *((_BYTE *)this + 18840) = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v28);
  }
  else
  {
    v27.n128_u8[0] = 0;
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v27.n128_u8[4]);
    HIDWORD(v28) = 1065353216;
    v29 = 257;
    v30 = 0;
    (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)v12 + 256))(v12, &v27);
  }
  OZ3DEngineCore::buildRenderGraph((uint64_t)this + 18872, (const OZRenderParams *)a2, a3, a4, (uint64_t)v31, &v32, (OZChannel *)this, v10);
}

void sub_1B2EDB73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 16));
  _Unwind_Resume(a1);
}

double OZ3DEngineSceneElement::updateScript(OZ3DEngineSceneElement *this, CMTime *a2)
{
  OZScene *v4;
  uint64_t v5;
  void *v6;
  std::recursive_mutex *v7;
  Float64 Seconds;
  char *TopLevel3DWorldGroup;
  std::recursive_mutex *v10;
  int v11;
  int v12;
  _OWORD *v13;
  _BYTE *v14;
  double result;
  CMTime v16;
  CMTime time;
  CMTime v18;

  v4 = (OZScene *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 272))(this);
  v5 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2336))(this);
  v18 = *a2;
  if (v5 && *((_QWORD *)this + 3030))
  {
    v6 = (void *)*((_QWORD *)this + 120);
    if (v6)
    v7 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)v6);
    std::recursive_mutex::lock(v7);
    objc_msgSend(*((id *)this + 3030), "exportObject:as:", PCBitmap::getRepresentation((PCBitmap *)v7), CFSTR("scene"));
    std::recursive_mutex::unlock(v7);
  }
  objc_msgSend(*((id *)this + 3030), "exportObject:as:", OZScene::getSceneComposer(v4), CFSTR("sceneComposer"));
  time = v18;
  Seconds = CMTimeGetSeconds(&time);
  *(float *)&Seconds = Seconds;
  objc_msgSend(*((id *)this + 3030), "exportObject:as:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", Seconds), CFSTR("time"));
  TopLevel3DWorldGroup = FindTopLevel3DWorldGroup(v4);
  if (TopLevel3DWorldGroup)
  {
    v10 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)TopLevel3DWorldGroup);
    std::recursive_mutex::lock(v10);
    objc_msgSend(*((id *)this + 3030), "exportObject:as:", PCBitmap::getRepresentation((PCBitmap *)v10), CFSTR("masterScene"));
    std::recursive_mutex::unlock(v10);
  }
  v16 = v18;
  v11 = (*(uint64_t (**)(char *, CMTime *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 104))((char *)this + 16, &v16, 1, 1, 1);
  v12 = v11;
  v13 = (_OWORD *)((char *)this + 18888);
  v14 = (char *)this + 18912;
  if (*((_BYTE *)this + 18912) || !v11)
  {
    if (*((_BYTE *)this + 18912) && (v11 & 1) == 0)
    {
      objc_msgSend(*((id *)this + 3030), "dispatch:", CFSTR("OnDisable"));
      result = *(double *)&v18.value;
      *v13 = *(_OWORD *)&v18.value;
      *((_QWORD *)this + 2363) = v18.epoch;
      *v14 = v12;
      return result;
    }
  }
  else
  {
    objc_msgSend(*((id *)this + 3030), "dispatch:", CFSTR("OnEnable"));
  }
  result = *(double *)&v18.value;
  *v13 = *(_OWORD *)&v18.value;
  *((_QWORD *)this + 2363) = v18.epoch;
  *v14 = v12;
  if (v12)
    objc_msgSend(*((id *)this + 3030), "dispatch:", CFSTR("Update"));
  return result;
}

void sub_1B2EDB95C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZ3DEngineSceneElement::buildRenderGraph(OZ3DEngineSceneElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZ3DEngineSceneElement::buildRenderGraph((OZ3DEngineSceneElement *)((char *)this - 6528), a2, a3, a4);
}

void OZ3DEngineSceneElement::makeRenderImageSource(OZ3DEngineSceneElement *this@<X0>, const OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, int a4@<W3>, PCSharedCount *a5@<X8>)
{
  OZ3DEngineSceneFile *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t i;
  _OWORD v14[8];
  _OWORD v15[4];
  CMTime v16;
  CMTime var0;
  CMTime v18;
  OZRenderState v19;

  OZRenderState::OZRenderState(&v19, a2);
  var0 = (CMTime)a2->var0;
  memset(&v18, 0, sizeof(v18));
  OZ3DEngineSceneElement::globalToSceneFileTime(this, &var0, &v18.value);
  memset(&v16, 0, sizeof(v16));
  if (OZ3DEngineSceneElement::get3DEngineSceneFile(this))
  {
    v10 = (OZ3DEngineSceneFile *)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
    v11.n128_f64[0] = OZ3DEngineSceneFile::get3DFileTime(v10, &v18, &v16);
  }
  else
  {
    v11 = *(__n128 *)&v18.value;
    v16 = v18;
  }
  v12 = (*(uint64_t (**)(OZ3DEngineSceneElement *, __n128))(*(_QWORD *)this + 2336))(this, v11);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v19, (uint64_t)v14);
  for (i = 0; i != 4; ++i)
    v15[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v14[2 * i]), (float64x2_t)v14[2 * i + 1]);
  OZ3DEngineCore::makeRenderImageSource((uint64_t)a2, a3, a4, (uint64_t)v15, &v16, (OZChannel *)this, v12, a5);
}

void `non-virtual thunk to'OZ3DEngineSceneElement::makeRenderImageSource(OZ3DEngineSceneElement *this@<X0>, const OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, int a4@<W3>, PCSharedCount *a5@<X8>)
{
  OZ3DEngineSceneElement::makeRenderImageSource((OZ3DEngineSceneElement *)((char *)this - 6528), a2, a3, a4, a5);
}

uint64_t OZ3DEngineSceneElement::doesTransformFromLocalToScreenSpace(OZ3DEngineSceneElement *this, const OZRenderParams *a2)
{
  return 1;
}

__n128 OZ3DEngineSceneElement::getNaturalDuration@<Q0>(OZ3DEngineSceneElement *this@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  __n128 result;
  uint64_t v5;

  v3 = OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (v3)
  {
    (*(void (**)(const void *))(*(_QWORD *)v3 + 1560))(v3);
  }
  else
  {
    v5 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  }
  return result;
}

__n128 `non-virtual thunk to'OZ3DEngineSceneElement::getNaturalDuration@<Q0>(OZ3DEngineSceneElement *this@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  __n128 result;
  uint64_t v5;

  v3 = OZ3DEngineSceneElement::get3DEngineSceneFile((OZ3DEngineSceneElement *)((char *)this - 16));
  if (v3)
  {
    (*(void (**)(const void *))(*(_QWORD *)v3 + 1560))(v3);
  }
  else
  {
    v5 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  }
  return result;
}

uint64_t OZ3DEngineSceneElement::getNaturalDurationFlags(OZ3DEngineSceneElement *this)
{
  const void *v2;
  int v3;
  OZRetimingUtil *v4;
  OZChannelObjectRoot *v5;

  v2 = OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (!v2)
    return 6;
  v3 = (*(uint64_t (**)(const void *))(*(_QWORD *)v2 + 1552))(v2);
  v4 = (OZRetimingUtil *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 640))(this);
  return OZRetimingUtil::GetRetimeNaturalDurationFlags(v4, v5) | v3;
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneElement::getNaturalDurationFlags(OZ3DEngineSceneElement *this)
{
  return OZ3DEngineSceneElement::getNaturalDurationFlags((OZ3DEngineSceneElement *)((char *)this - 16));
}

void OZ3DEngineSceneElement::setFootage(OZ3DEngineSceneElement *this, OZSceneNodeFile *a2)
{
  OZ3DEngineSceneFile *v4;
  Float64 OriginalFileDurationInSeconds;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  OZPreferenceManager *v10;
  OZPreferenceManager *v11;
  CMTimeEpoch epoch;
  OZChannelBase *v13;
  OZChannelObjectRoot *v14;
  OZChannelObjectRoot *v15;
  OZRetimingUtil *v16;
  __int128 v17;
  uint64_t v18;
  CMTime v19;
  __int128 v20;
  uint64_t v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;

  OZSceneNode::removeFromLinked(this);
  OZChanSceneNodeRef::setNode((OZ3DEngineSceneElement *)((char *)this + 19272), a2);
  if (a2)
  else
    v4 = 0;
  memset(&v23, 0, sizeof(v23));
  OriginalFileDurationInSeconds = OZ3DEngineSceneFile::getOriginalFileDurationInSeconds(v4);
  OZFigTimeForChannelSeconds(&v23, OriginalFileDurationInSeconds, 0x40000);
  memset(&v22, 0, sizeof(v22));
  CMTimeMake(&v22, 1, 30);
  v6 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 272))(this);
  v7 = v6;
  if (v6)
  {
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v19);
    v22 = v19;
  }
  v9 = *((_QWORD *)a2 + 2);
  v8 = (char *)a2 + 16;
  v10 = (OZPreferenceManager *)(*(uint64_t (**)(char *))(v9 + 288))(v8);
  if ((v10 & 1) == 0)
  {
    v11 = (OZPreferenceManager *)OZPreferenceManager::Instance(v10);
    if (v7 && OZPreferenceManager::getUseProjectDurationForStills(v11))
    {
      *(_OWORD *)&v23.value = *(_OWORD *)(v7 + 1376);
      epoch = *(_QWORD *)(v7 + 1392);
    }
    else
    {
      OZPreferenceManager::getDefaultStillDuration(&v22, (uint64_t)&v19);
      *(_OWORD *)&v23.value = *(_OWORD *)&v19.value;
      epoch = v19.epoch;
    }
    v23.epoch = epoch;
  }
  memset(&v25, 0, sizeof(v25));
  operator*(&v22, &v25, 0.5);
  v19 = v23;
  v26 = v25;
  PC_CMTimeSaferAdd(&v19, &v26, (uint64_t)&v24);
  v19 = v24;
  v26 = v22;
  PC_CMTimeFloorToSampleDuration(&v19, &v26, (uint64_t)&v17);
  v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v20 = v17;
  v21 = v18;
  OZChannelObjectRootBase::setTimeExtent((OZ3DEngineSceneElement *)((char *)this + 56), (const PCTimeRange *)&v19, 0);
  v13 = (OZChannelBase *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 640))(this);
  OZRetimingUtil::SetDefaultRetimingState(v13, v14);
  v15 = (OZChannelObjectRoot *)((*(uint64_t (**)(char *))(*(_QWORD *)v8 + 288))(v8) & 1);
  v16 = (OZRetimingUtil *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 640))(this);
  OZRetimingUtil::SetEndCondition(v16, v15);
  OZ3DEngineSceneElement::didReadSceneFile(this);
  if (v7)
    OZDocument::postNotification(*(OZDocument **)(v7 + 1584), 0x80000);
}

uint64_t OZ3DEngineSceneElement::getIconName(OZ3DEngineSceneElement *this)
{
  return (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 24))(this);
}

void OZ3DEngineSceneElement::getIconNameBW(OZ3DEngineSceneElement *this@<X0>, PCURL *a2@<X8>)
{
  const __CFString *v3;

  if ((*(unsigned int (**)(OZ3DEngineSceneElement *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]))
  {
    v3 = CFSTR("M_LayersList_ObjectIconGrey-3DObjectRasterized");
  }
  else
  {
    v3 = CFSTR("M_LayersList_ObjectIconGrey-3DObject");
  }
  PCURL::PCURL(a2, v3);
}

uint64_t OZ3DEngineSceneElement::getIconID(OZ3DEngineSceneElement *this)
{
  return 14;
}

void OZ3DEngineSceneElement::description(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("3D Scene Element Short Desc"));
}

PCString *OZ3DEngineSceneElement::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene Element Short Desc");
}

uint64_t OZ3DEngineSceneElement::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a2, a3, 1);
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneElement::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 16) + 528))(a1 - 16, a2, a3, 1);
}

NSUInteger addChannelsForParameters(NSArray *a1, OZChannelFolder *a2)
{
  PCString ***v4;
  NSUInteger result;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  NSUInteger v9;
  uint64_t v10;
  uint64_t v11;
  PCString **v12;
  PCString **v13;
  void *v14;
  PCString *v15;
  const __CFString *v16;
  int v17;
  NSUInteger v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  PCString **v23;
  PCString **v24;
  PCString *v25;
  const __CFString *v26;
  const char *v28;
  OZChannelDouble *v29;
  OZChannelImageWithOptions *v30;
  OZChannelPercent *v31;
  OZChannelColor *v32;
  OZChannelPosition3D *v33;
  OZChannelAngle *v34;
  OZChannelFolder *v35;
  OZChannelPosition3D *v36;
  OZChannelRotation3D *v37;
  OZChannelPosition3D *v38;
  OZChannelBool *v39;
  NSArray *obj;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  PCString v49;
  _BYTE v50[128];
  PCString v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = (PCString ***)*((_QWORD *)a2 + 14);
  result = -[NSArray count](a1, "count");
  if (v4)
    v6 = result == 0;
  else
    v6 = 1;
  obj = a1;
  if (v6)
  {
    if (v4)
      v7 = 0;
    else
      v7 = result == 0;
    if (v7)
      return result;
  }
  else
  {
    v8 = (char *)v4[1] - (char *)*v4;
    if (-[NSArray count](a1, "count") == v8 >> 3)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      result = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v45, &v51, 16);
      v9 = result;
      if (!result)
        return result;
      v10 = *(_QWORD *)v46;
LABEL_14:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v46 != v10)
          objc_enumerationMutation(obj);
        v12 = *v4;
        v13 = v4[1];
        if (*v4 == v13)
          break;
        v14 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v11);
        while (1)
        {
          v15 = *v12;
          v16 = (const __CFString *)objc_msgSend(v14, "name");
          v49.var0 = 0;
          PCString::set(&v49, v16);
          v17 = PCString::compare(v15 + 4, &v49);
          PCString::~PCString(&v49);
          if (!v17)
            break;
          if (++v12 == v13)
          {
            v12 = v13;
            break;
          }
        }
        if (v12 == v4[1])
          break;
        if (++v11 == v9)
        {
          result = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v45, &v51, 16);
          v9 = result;
          if (result)
            goto LABEL_14;
          return result;
        }
      }
    }
  }
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  result = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
  v18 = result;
  if (result)
  {
    v19 = 0;
    v20 = *(_QWORD *)v42;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v42 != v20)
          objc_enumerationMutation(obj);
        v22 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v21);
        if (!v4)
          goto LABEL_53;
        v24 = *v4;
        v23 = v4[1];
        if (*v4 == v23)
          goto LABEL_53;
        while (1)
        {
          v25 = *v24;
          v26 = (const __CFString *)objc_msgSend(v22, "name");
          v51.var0 = 0;
          PCString::set(&v51, v26);
          LODWORD(v25) = PCString::compare(v25 + 4, &v51);
          PCString::~PCString(&v51);
          if (!(_DWORD)v25)
            break;
          if (++v24 == v23)
          {
            v24 = v23;
            break;
          }
        }
        if (v24 == v4[1] || !*v24)
        {
LABEL_53:
          while (OZChannelFolder::getDescendant(a2, v19++))
            ;
          v28 = (const char *)objc_msgSend((id)objc_msgSend(v22, "name"), "UTF8String");
          switch(objc_msgSend(v22, "type"))
          {
            case 0:
              v29 = (OZChannelDouble *)operator new();
              PCString::PCString(&v51, v28);
              OZChannelDouble::OZChannelDouble(v29, 0.0, &v51, a2, v19 - 1, 0, 0, 0);
              goto LABEL_48;
            case 1:
              v31 = (OZChannelPercent *)operator new();
              PCString::PCString(&v51, v28);
              OZChannelPercent::OZChannelPercent(v31, 0.0, &v51, a2, v19 - 1, 0, 0, 0);
              goto LABEL_48;
            case 2:
              v32 = (OZChannelColor *)operator new();
              PCString::PCString(&v51, v28);
              OZChannelColor::OZChannelColor(v32, 0.0, 0.0, 0.0, 0.0, &v51, a2, v19 - 1, 0, 6u);
              goto LABEL_48;
            case 3:
              v33 = (OZChannelPosition3D *)operator new();
              PCString::PCString(&v51, v28);
              OZChannelPosition3D::OZChannelPosition3D(v33, 0.0, 0.0, 0.0, &v51, a2, v19 - 1, 0, 3u);
              goto LABEL_48;
            case 4:
              v34 = (OZChannelAngle *)operator new();
              PCString::PCString(&v51, v28);
              OZChannelAngle::OZChannelAngle(v34, 0.0, &v51, a2, v19 - 1, 0, 0, 0);
              goto LABEL_48;
            case 6:
              v30 = (OZChannelImageWithOptions *)operator new();
              PCString::PCString(&v51, v28);
              OZChannelImageWithOptions::OZChannelImageWithOptions(v30, &v51, a2, v19 - 1, 0);
              goto LABEL_48;
            case 7:
              v35 = (OZChannelFolder *)operator new();
              PCString::PCString(&v51, v28);
              OZChannelFolder::OZChannelFolder(v35, &v51, a2, v19 - 1, 0, 0);
              PCString::~PCString(&v51);
              v36 = (OZChannelPosition3D *)operator new();
              PCString::PCString(&v51, "Position");
              OZChannelPosition3D::OZChannelPosition3D(v36, 0.0, 0.0, 0.0, &v51, v35, 1u, 0, 3u);
              PCString::~PCString(&v51);
              v37 = (OZChannelRotation3D *)operator new();
              PCString::PCString(&v51, "Rotation");
              OZChannelRotation3D::OZChannelRotation3D(v37, 0.0, 0.0, 0.0, &v51, v35, 2u, 0, 4u, 0, 0);
              PCString::~PCString(&v51);
              v38 = (OZChannelPosition3D *)operator new();
              PCString::PCString(&v51, "Scale");
              OZChannelPosition3D::OZChannelPosition3D(v38, 1.0, 1.0, 1.0, &v51, v35, 3u, 0, 3u);
              PCString::~PCString(&v51);
              v39 = (OZChannelBool *)operator new();
              PCString::PCString(&v51, "Invert");
              OZChannelBool::OZChannelBool(v39, 0, &v51, v35, 4u, 0, 0, 0);
LABEL_48:
              PCString::~PCString(&v51);
              break;
            default:
              break;
          }
        }
        else
        {
          ++v19;
        }
        ++v21;
      }
      while (v21 != v18);
      result = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
      v18 = result;
    }
    while (result);
  }
  return result;
}

