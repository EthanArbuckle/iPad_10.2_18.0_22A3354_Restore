void sub_1B2EDC550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,PCString a28)
{
  PCString::~PCString(&a28);
  _Unwind_Resume(a1);
}

void removeUnusedChannels(NSArray *a1, OZChannelFolder *a2)
{
  PCString ***v2;
  PCString **v3;
  PCString **v4;
  PCString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  int v12;
  PCString **v13;
  PCString **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  PCString **v19;
  PCString **v20;
  PCString **v21;
  PCString *v22;
  OZChannelBase **v23;
  OZChannelBase **v24;
  OZChannelBase *v25;
  PCString ***v26;
  PCString v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  PCString **v32;
  PCString **v33;
  PCString **v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = (PCString ***)*((_QWORD *)a2 + 14);
  if (v2)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      v26 = &v34;
      do
      {
        v7 = *v3;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v8 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v28, v35, 16, v26);
        if (v8)
        {
          v9 = *(_QWORD *)v29;
LABEL_6:
          v10 = 0;
          while (1)
          {
            if (*(_QWORD *)v29 != v9)
              objc_enumerationMutation(a1);
            v11 = (const __CFString *)objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * v10), "name");
            v27.var0 = 0;
            PCString::set(&v27, v11);
            v12 = PCString::compare(v7 + 4, &v27);
            PCString::~PCString(&v27);
            if (!v12)
              break;
            if (v8 == ++v10)
            {
              v8 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
              if (v8)
                goto LABEL_6;
              goto LABEL_12;
            }
          }
        }
        else
        {
LABEL_12:
          v13 = v33;
          if (v33 >= v34)
          {
            v15 = v33 - v32;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v16 = ((char *)v34 - (char *)v32) >> 2;
            if (v16 <= v15 + 1)
              v16 = v15 + 1;
            if ((unint64_t)((char *)v34 - (char *)v32) >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v26, v17);
            else
              v18 = 0;
            v19 = (PCString **)&v18[8 * v15];
            *v19 = v7;
            v14 = v19 + 1;
            v21 = v32;
            v20 = v33;
            if (v33 != v32)
            {
              do
              {
                v22 = *--v20;
                *--v19 = v22;
              }
              while (v20 != v21);
              v20 = v32;
            }
            v32 = v19;
            v33 = v14;
            v34 = (PCString **)&v18[8 * v17];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v33 = v7;
            v14 = v13 + 1;
          }
          v33 = v14;
        }
        ++v3;
      }
      while (v3 != v4);
      v24 = (OZChannelBase **)v32;
      v23 = (OZChannelBase **)v33;
      if (v32 != v33)
      {
        do
        {
          v25 = *v24;
          OZChannelFolder::removeDescendant(a2, *v24);
          if (v25)
            (*((void (**)(OZChannelBase *))v25->var0 + 1))(v25);
          ++v24;
        }
        while (v24 != v23);
        v23 = (OZChannelBase **)v32;
      }
      if (v23)
      {
        v33 = (PCString **)v23;
        operator delete(v23);
      }
    }
  }
}

void sub_1B2EDC914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZ3DEngineSceneElement::applyShader(OZ3DEngineSceneElement *this)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  std::recursive_mutex *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[5];
  void *v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 2368);
  if (v2 && objc_msgSend(v2, "library") && !*((_QWORD *)this + 2372))
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CD5A00], "program");
    objc_msgSend(v3, "setLibrary:", objc_msgSend(*((id *)this + 2368), "library"));
    objc_msgSend(v3, "setVertexFunctionName:", objc_msgSend(*((id *)this + 2368), "vertexFunctionName"));
    objc_msgSend(v3, "setFragmentFunctionName:", objc_msgSend(*((id *)this + 2368), "fragmentFunctionName"));
    v4 = v3;
    v5 = MEMORY[0x1E0C809B0];
    *((_QWORD *)this + 2372) = v4;
    v18[0] = v5;
    v18[1] = 3221225472;
    v18[2] = ___ZN22OZ3DEngineSceneElement11applyShaderEv_block_invoke;
    v18[3] = &__block_descriptor_40_e73_v40__0___SCNBufferStream__8__SCNNode_16___SCNShadable__24__SCNRenderer_32l;
    v18[4] = this;
    objc_msgSend(v4, "handleBindingOfBufferNamed:frequency:usingBlock:", CFSTR("params"), 0, v18);
    v6 = (void *)objc_opt_new();
    objc_msgSend(v6, "setProgram:", v3);
    objc_msgSend(v6, "setDoubleSided:", 1);
    v7 = (std::recursive_mutex *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2336))(this);
    std::recursive_mutex::lock(v7);
    v8 = (void *)objc_msgSend((id)objc_msgSend((id)PCBitmap::getRepresentation((PCBitmap *)v7), "rootNode"), "childNodesPassingTest:", &__block_literal_global_64);
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
          v13 = (void *)objc_msgSend((id)objc_msgSend(v12, "geometry"), "copy");
          objc_msgSend(v12, "setGeometry:", v13);
          v19 = v6;
          objc_msgSend((id)objc_msgSend(v12, "geometry"), "setMaterials:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v19, 1));

        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
      }
      while (v9);
    }

    std::recursive_mutex::unlock(v7);
  }
}

void sub_1B2EDCBA0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN22OZ3DEngineSceneElement11applyShaderEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  PCMutex::lock((PCMutex *)(v3 + 24336));
  LOBYTE(v5) = 1;
  objc_msgSend(a2, "writeBytes:length:", *(_QWORD *)(v3 + 18952), *(_QWORD *)(v3 + 18960) - *(_QWORD *)(v3 + 18952), v3 + 24336, v5);
  return PCMutex::unlock((PCMutex *)(v3 + 24336));
}

void sub_1B2EDCC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ___ZN22OZ3DEngineSceneElement11applyShaderEv_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

void *OZ3DEngineSceneElement::updateScriptParamsFromChannels(OZ3DEngineSceneElement *this, CMTime *a2)
{
  void *result;
  PCString ***v4;
  void *v6;
  __n128 v7;

  result = (void *)*((_QWORD *)this + 3030);
  if (result)
  {
    v4 = (PCString ***)*((_QWORD *)this + 2992);
    if (v4)
    {
      v6 = (void *)objc_msgSend(result, "parameterDescriptors");
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v7);
      return (void *)updateParametersFromChannels((_QWORD *)this + 2365, v6, v4, a2, (__int128 *)&v7, (uint64_t)this + 19128);
    }
  }
  return result;
}

uint64_t updateParametersFromChannels(_QWORD *a1, void *a2, PCString ***a3, CMTime *this, __int128 *a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v21;
  PCString **v22;
  PCString **v23;
  void *v24;
  PCString *v25;
  const __CFString *v26;
  char *v27;
  OZChannel *v28;
  char *v29;
  OZChannelColorNoAlpha *v30;
  const void *ImageNode;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  OZChannelFolder *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float v40;
  uint64_t v41;
  float v42;
  double v43;
  _DWORD *v44;
  double v45;
  const void *Descendant;
  char *v47;
  const void *v48;
  void *v49;
  const void *v50;
  char *v51;
  const void *v52;
  OZChannel *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  int ValueAsInt;
  float v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  __int128 v84;
  __int128 v89;
  _QWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  PCSharedCount v100;
  PCSharedCount v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE v113[24];
  __int128 v114;
  double v115;
  __int128 v116;
  __int128 v117;
  double v118;
  __int128 v119;
  __int128 v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t WorkingColorSpace;
  unsigned int value_high;
  CMTime v134;
  _BYTE v135[128];
  _BYTE v136[128];
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v134 = *this;
  value_high = HIDWORD(this[14].value);
  WorkingColorSpace = OZRenderParams::getWorkingColorSpace((FxColorDescription *)this);
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v8 = 0;
  v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v128, v136, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v129;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v129 != v10)
          objc_enumerationMutation(a2);
        switch(objc_msgSend(*(id *)(*((_QWORD *)&v128 + 1) + 8 * i), "type"))
        {
          case 0:
          case 1:
          case 4:
          case 5:
            ++v8;
            break;
          case 2:
          case 3:
            v8 += 4;
            break;
          case 7:
            v8 += 16;
            break;
          default:
            continue;
        }
      }
      v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v128, v136, 16);
    }
    while (v9);
  }
  if (v8 != (uint64_t)(a1[1] - *a1) >> 2)
    std::vector<float>::resize((uint64_t)a1, v8);
  v127 = 0u;
  v126 = 0u;
  v125 = 0u;
  v124 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v124, v135, 16);
  v13 = result;
  if (result)
  {
    v14 = 0;
    v15 = *(_QWORD *)v125;
    __asm { FMOV            V0.2D, #-1.0 }
    v84 = _Q0;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v125 != v15)
          objc_enumerationMutation(a2);
        v22 = *a3;
        v23 = a3[1];
        if (*a3 != v23)
        {
          v24 = *(void **)(*((_QWORD *)&v124 + 1) + 8 * v21);
          while (1)
          {
            v25 = *v22;
            v26 = (const __CFString *)objc_msgSend(v24, "name");
            *(_QWORD *)v113 = 0;
            PCString::set((PCString *)v113, v26);
            LODWORD(v25) = PCString::compare(v25 + 4, (const PCString *)v113);
            PCString::~PCString((PCString *)v113);
            if (!(_DWORD)v25)
              break;
            if (++v22 == v23)
            {
              v22 = v23;
              break;
            }
          }
          if (v22 != a3[1])
          {
            v27 = (char *)*v22;
            switch(objc_msgSend(v24, "type"))
            {
              case 0:
                if (v27)
                else
                  v28 = 0;
                goto LABEL_54;
              case 1:
                if (v27)
                else
                  v28 = 0;
                goto LABEL_54;
              case 2:
                if (v27)
                else
                  v30 = 0;
                PCColor::PCColor((PCColor *)v113);
                (*(void (**)(OZChannelColorNoAlpha *, CMTime *, _BYTE *))(*(_QWORD *)v30 + 832))(v30, &v134, v113);
                LODWORD(v92) = 0;
                LODWORD(v90[0]) = 0;
                LODWORD(v111) = 0;
                LODWORD(v100.var0) = 0;
                OZChannelColorNoAlpha::getPCColorSpace(v30, (CGColorSpace **)&v102);
                PCColor::getRGBA((PCColor *)v113, (float *)&v92, (float *)v90, (float *)&v111, (float *)&v100, (const PCColorSpaceHandle *)&v102);
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v102);
                v44 = (_DWORD *)(*a1 + 4 * v14);
                *v44 = v92;
                v44[1] = v90[0];
                v44[2] = v111;
                v14 += 4;
                v44[3] = v100.var0;
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v116);
                break;
              case 3:
                if (v27)
                else
                  v29 = 0;
                OZChannel::getValueAsDouble((OZChannel *)(v29 + 136), &v134, 0.0);
                v37 = v36;
                OZChannel::getValueAsDouble((OZChannel *)(v29 + 288), &v134, 0.0);
                v39 = v38;
                OZChannel::getValueAsDouble((OZChannel *)(v29 + 736), &v134, 0.0);
                v40 = v37;
                v41 = *a1 + 4 * v14;
                v42 = v39;
                *(float *)v41 = v40;
                *(float *)(v41 + 4) = v42;
                *(float *)&v43 = v43;
                *(_DWORD *)(v41 + 8) = LODWORD(v43);
                v14 += 4;
                *(_DWORD *)(v41 + 12) = 1065353216;
                break;
              case 4:
                if (v27)
                else
                  v28 = 0;
LABEL_54:
                OZChannel::getValueAsDouble(v28, &v134, 0.0);
                *(float *)&v45 = v45;
                *(_DWORD *)(*a1 + 4 * v14) = LODWORD(v45);
                goto LABEL_55;
              case 5:
LABEL_55:
                ++v14;
                break;
              case 6:
                if (v27)
                if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(v27 + 136)))
                {
                  OZRenderParams::OZRenderParams((OZRenderParams *)v113, (const OZRenderParams *)this);
                  v111 = 0uLL;
                  v112 = 0;
                  v102 = *(_OWORD *)&v134.value;
                  *(_QWORD *)&v103 = v134.epoch;
                  v92 = *a5;
                  *(_QWORD *)&v93 = *((_QWORD *)a5 + 2);
                  PC_CMTimeSaferSubtract((CMTime *)&v102, (CMTime *)&v92, (uint64_t)&v111);
                  *(_OWORD *)v113 = v111;
                  *(_QWORD *)&v113[16] = v112;
                  v122 = 0;
                  v123 = 0;
                  MakeImageSourceTransformPair((OZChannelImageWithOptions *)v27, (OZChannelBase *)v113, (uint64_t)&v102);
                  v100.var0 = (PC_Sp_counted_base *)v102;
                  PCSharedCount::PCSharedCount(&v101, (const PCSharedCount *)&v102 + 1);
                  v96 = v107;
                  v97 = v108;
                  v98 = v109;
                  v99 = v110;
                  v92 = v103;
                  v93 = v104;
                  v94 = v105;
                  v95 = v106;
                  ImageNode = OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(v27 + 136));
                  v90[0] = 0;
                  v90[1] = 0;
                  v91 = v84;
                  (*(void (**)(const void *, _QWORD *, _BYTE *))(*(_QWORD *)ImageNode + 80))(ImageNode, v90, v113);
                  std::allocate_shared[abi:ne180100]<OZTextureSource,std::allocator<OZTextureSource>,PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&,void>(&v100, &v92, (uint64_t)v90, &value_high, &WorkingColorSpace, (uint64_t)&this[54].epoch + 4, &v89);
                  std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a6, &v89);
                  v32 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
                  if (*((_QWORD *)&v89 + 1))
                  {
                    v33 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
                    do
                      v34 = __ldaxr(v33);
                    while (__stlxr(v34 - 1, v33));
                    if (!v34)
                    {
                      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                      std::__shared_weak_count::__release_weak(v32);
                    }
                  }
                  PCSharedCount::~PCSharedCount(&v101);
                  PCSharedCount::~PCSharedCount((PCSharedCount *)&v102 + 1);
                  OZRenderParams::~OZRenderParams((OZRenderParams *)v113);
                }
                break;
              case 7:
                if (v27)
                else
                  v35 = 0;
                Descendant = (const void *)OZChannelFolder::getDescendant(v35, 1);
                if (Descendant)
                else
                  v47 = 0;
                v48 = (const void *)OZChannelFolder::getDescendant(v35, 2);
                if (v48)
                else
                  v49 = 0;
                v50 = (const void *)OZChannelFolder::getDescendant(v35, 3);
                if (v50)
                else
                  v51 = 0;
                v52 = (const void *)OZChannelFolder::getDescendant(v35, 4);
                if (v52)
                else
                  v53 = 0;
                OZChannel::getValueAsDouble((OZChannel *)(v47 + 136), &v134, 0.0);
                v55 = v54;
                OZChannel::getValueAsDouble((OZChannel *)(v47 + 288), &v134, 0.0);
                v57 = v56;
                OZChannel::getValueAsDouble((OZChannel *)(v47 + 736), &v134, 0.0);
                v59 = v58;
                v102 = 0uLL;
                *(_QWORD *)&v103 = 0;
                OZChannelRotation3D::getValueAsEulerAngles((uint64_t)v49, &v134, &v102, 0.0);
                OZChannel::getValueAsDouble((OZChannel *)(v51 + 136), &v134, 0.0);
                v61 = v60;
                OZChannel::getValueAsDouble((OZChannel *)(v51 + 288), &v134, 0.0);
                v63 = v62;
                OZChannel::getValueAsDouble((OZChannel *)(v51 + 736), &v134, 0.0);
                v65 = v64;
                ValueAsInt = OZChannel::getValueAsInt(v53, &v134, 0.0);
                v121 = 1.0;
                v118 = 1.0;
                v115 = 1.0;
                *(_QWORD *)v113 = 0x3FF0000000000000;
                *(_OWORD *)&v113[8] = 0u;
                v114 = 0u;
                v116 = 0u;
                v117 = 0u;
                v119 = 0u;
                v120 = 0u;
                PCMatrix44Tmpl<double>::setTransformation((uint64_t)v113, 0, 4, v55, v57, v59, *(double *)&v102, *((double *)&v102 + 1), *(double *)&v103, v61, v63, v65, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
                if (ValueAsInt)
                  PCMatrix44Tmpl<double>::invert((double *)v113, (double *)v113, 0.0);
                v67 = *(double *)v113;
                v68 = (float *)(*a1 + 4 * v14);
                *v68 = v67;
                v69 = *((double *)&v114 + 1);
                v68[1] = v69;
                v70 = *(double *)&v117;
                v68[2] = v70;
                v71 = *((double *)&v119 + 1);
                v68[3] = v71;
                v72 = *(double *)&v113[8];
                v68[4] = v72;
                v73 = v115;
                v68[5] = v73;
                v74 = *((double *)&v117 + 1);
                v68[6] = v74;
                v75 = *(double *)&v120;
                v68[7] = v75;
                v76 = *(double *)&v113[16];
                v68[8] = v76;
                v77 = *(double *)&v116;
                v68[9] = v77;
                v78 = v118;
                v68[10] = v78;
                v79 = *((double *)&v120 + 1);
                v68[11] = v79;
                v80 = *(double *)&v114;
                v68[12] = v80;
                v81 = *((double *)&v116 + 1);
                v68[13] = v81;
                v82 = *(double *)&v119;
                v68[14] = v82;
                v83 = v121;
                v14 += 16;
                v68[15] = v83;
                break;
              default:
                break;
            }
          }
        }
        ++v21;
      }
      while (v21 != v13);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v124, v135, 16);
      v13 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B2EDD688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,PCSharedCount *a27,PCSharedCount *a28)
{
  PCSharedCount::~PCSharedCount(a27);
  PCSharedCount::~PCSharedCount(a28);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneElement::updateShaderParamsFromChannels(OZ3DEngineSceneElement *this, CMTime *a2)
{
  uint64_t result;
  PCString ***v5;
  void *v6;
  __n128 v7;

  result = objc_msgSend(*((id *)this + 2368), "library");
  if (result)
  {
    v5 = (PCString ***)*((_QWORD *)this + 3008);
    if (v5)
    {
      v6 = (void *)objc_msgSend(*((id *)this + 2368), "parameters");
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v7);
      return updateParametersFromChannels((_QWORD *)this + 2369, v6, v5, a2, (__int128 *)&v7, (uint64_t)this + 19128);
    }
  }
  return result;
}

void *OZ3DEngineSceneElement::hasShader(OZ3DEngineSceneElement *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 2368);
  if (result)
    return (void *)(objc_msgSend(result, "library") != 0);
  return result;
}

uint64_t OZ3DEngineSceneElement::physicsType(OZ3DEngineSceneElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20872), a2, 0.0);
}

uint64_t OZ3DEngineSceneElement::physicsShape(OZChannel *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt(this + 139, a2, 0.0);
}

uint64_t OZ3DEngineSceneElement::shouldAllowRetiming(OZ3DEngineSceneElement *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 24232))
    return 1;
  result = (uint64_t)OZ3DEngineSceneElement::get3DEngineSceneFile(this);
  if (result)
    return OZ3DEngineSceneFile::supportsAnimation((OZ3DEngineSceneFile *)result);
  return result;
}

uint64_t OZ3DEngineSceneElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  PCXMLWriteStream *v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  const __CFString *v15;
  PCString v17;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZ3DEngineSceneElementScope);
  if (v10)
  {
    v11 = *(_QWORD *)PCXMLWriteStream::getURL(v10);
    if (objc_msgSend(this[3030], "url"))
    {
      v12 = objc_msgSend((id)objc_msgSend(this[3030], "url"), "oz_relativePathFromURL:", v11);
      if (v12)
      {
        v13 = (const __CFString *)v12;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 501);
        v17.var0 = 0;
        PCString::set(&v17, v13);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v17);
        PCString::~PCString(&v17);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
    }
    if (objc_msgSend(this[2368], "url"))
    {
      v14 = objc_msgSend((id)objc_msgSend(this[2368], "url"), "oz_relativePathFromURL:", v11);
      if (v14)
      {
        v15 = (const __CFString *)v14;
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 502);
        v17.var0 = 0;
        PCString::set(&v17, v15);
        (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v17);
        PCString::~PCString(&v17);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
    }
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZElement::writeBody((OZElement *)this, a2, a3, a4, a5);
}

void sub_1B2EDD990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZ3DEngineSceneElement::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZ3DEngineSceneElement::parseBegin(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  *((_BYTE *)this + 24232) = 1;
  v3 = OZElement::parseBegin((OZElement *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZ3DEngineSceneElementScope);
  return v3;
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneElement::parseBegin(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  *((_BYTE *)this + 24184) = 1;
  v3 = OZElement::parseBegin((OZElement *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZ3DEngineSceneElementScope);
  return v3;
}

uint64_t OZ3DEngineSceneElement::parseEnd(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 24232) = 0;
  if (*((_QWORD *)this + 3031))
    OZ3DEngineSceneElement::loadScript(this);
  return OZElement::parseEnd((OZElement *)this, a2);
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneElement::parseEnd(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2)
{
  return OZ3DEngineSceneElement::parseEnd((OZ3DEngineSceneElement *)((char *)this - 48), a2);
}

uint64_t OZ3DEngineSceneElement::parseElement(OZElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCXMLReadStream *v6;
  PCXMLReadStream *v7;
  int v8;
  uint64_t v9;
  const __CFURL *v10;
  uint64_t v11;
  const __CFURL *v12;
  PCSharedCount v14;

  OZElement::parseElement(this, a2, a3);
  if (v6)
  {
    v7 = v6;
    v8 = *((_DWORD *)a3 + 2);
    if (v8 == 502)
    {
      PCSharedCount::PCSharedCount(&v14);
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14))
      {
        v11 = *(_QWORD *)PCXMLReadStream::getURL(v7);
        v12 = (const __CFURL *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:relativeToURL:", PCString::ns_str((PCString *)&v14), v11);
        OZ3DEngineSceneElement::loadShader((CFURLRef)this, v12);
      }
      goto LABEL_8;
    }
    if (v8 == 501)
    {
      PCSharedCount::PCSharedCount(&v14);
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v14))
      {
        v9 = *(_QWORD *)PCXMLReadStream::getURL(v7);
        v10 = (const __CFURL *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:relativeToURL:", PCString::ns_str((PCString *)&v14), v9);
        OZ3DEngineSceneElement::setScriptURL((OZ3DEngineSceneElement *)this, v10);
      }
LABEL_8:
      PCString::~PCString((PCString *)&v14);
    }
  }
  return 1;
}

void sub_1B2EDDBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneElement::parseElement(OZ3DEngineSceneElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZ3DEngineSceneElement::parseElement((OZElement *)((char *)this - 48), a2, a3);
  return 1;
}

std::recursive_mutex *OZ3DEngineSceneElement::get3DNode(OZ3DEngineSceneElement *this)
{
  std::recursive_mutex *result;
  PCBitmap *v3;

  result = (std::recursive_mutex *)*((_QWORD *)this + 2360);
  if (!result)
  {
    result = (std::recursive_mutex *)(*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2336))(this);
    if (result)
    {
      v3 = (PCBitmap *)result;
      std::recursive_mutex::lock(result);
      *((_QWORD *)this + 2360) = (id)objc_msgSend((id)objc_msgSend((id)PCBitmap::getRepresentation(v3), "rootNode"), "clone");
      objc_msgSend(*((id *)this + 2360), "setName:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), *((unsigned int *)this + 20)));
      objc_msgSend(*((id *)this + 2360), "setCategoryBitMask:", 1);
      (*(void (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 2296))(this);
      OZ3DEngineSceneElement::applyShader(this);
      std::recursive_mutex::unlock((std::recursive_mutex *)v3);
      return (std::recursive_mutex *)*((_QWORD *)this + 2360);
    }
  }
  return result;
}

void sub_1B2EDDCB0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

NSString *OZ3DEngineSceneElement::makeDataFor3DEngineWorld@<X0>(OZ3DEngineSceneElement *this@<X0>, double a2@<D0>, CMTime *a3@<X1>, uint64_t *a4@<X8>)
{
  double updated;
  uint64_t v9;
  uint64_t i;
  uint64_t j;
  float32x4_t v12;
  float64x2_t *v13;
  Li3DEngineObjectDataBase *v14;
  uint64_t k;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t m;
  float32x4_t v20;
  float64x2_t *v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __int128 *v29;
  double v30;
  __int128 *v31;
  double v32;
  __int128 *v33;
  double v34;
  uint64_t v35;
  PCString *Name;
  __CFString *v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  CMTimeEpoch epoch;
  float64x2_t v44[8];
  _QWORD v45[6];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  float32x4_t v52[4];
  OZRenderState v53;
  double v54;
  double v55;
  double v56;

  updated = OZ3DEngineSceneElement::updateScript(this, a3);
  v9 = (*(uint64_t (**)(OZ3DEngineSceneElement *, double))(*(_QWORD *)this + 2336))(this, updated);
  OZRenderState::OZRenderState(&v53, (const OZRenderState *)a3);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v53, (uint64_t)v45);
  for (i = 0; i != 4; ++i)
    v52[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v45[4 * i]), *(float64x2_t *)&v45[4 * i + 2]);
  v51 = 0x3FF0000000000000;
  v48 = 0x3FF0000000000000;
  v45[5] = 0x3FF0000000000000;
  v45[0] = 0x3FF0000000000000;
  memset(&v45[1], 0, 32);
  v46 = 0u;
  v47 = 0u;
  v49 = 0u;
  v50 = 0u;
  (*(void (**)(OZ3DEngineSceneElement *, _QWORD *, OZRenderState *))(*(_QWORD *)this + 1256))(this, v45, &v53);
  for (j = 0; j != 4; ++j)
  {
    v12 = v52[j];
    v13 = (float64x2_t *)(&v42 + 2 * j);
    *v13 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
    v13[1] = vcvt_hight_f64_f32(v12);
  }
  v14 = (Li3DEngineObjectDataBase *)PCMatrix44Tmpl<double>::operator*((uint64_t)v45, &v42, (uint64_t)v44);
  for (k = 0; k != 4; ++k)
    *(&v42 + k) = (__int128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44[2 * k]), v44[2 * k + 1]);
  *((_QWORD *)&v39 + 1) = 0;
  *(_QWORD *)&v40 = 0;
  *(_QWORD *)&v39 = &unk_1E64FC250;
  BYTE8(v40) = 0;
  v16 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor(v14);
  (*(void (**)(OZ3DEngineSceneElement *, uint64_t, CMTime *, __int128 *, __int128 *, _QWORD, _QWORD, _QWORD, double, float, float, float, float, float))(*(_QWORD *)this + 2272))(this, v9, a3, &v42, &v39, 0, 0, 0, a2, *v16, v16[1], v16[2], v16[3], 1.0);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v39);
  v17 = *a4;
  v42 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  *(_DWORD *)(v17 + 200) = (*(uint64_t (**)(OZ3DEngineSceneElement *, __int128 *))(*(_QWORD *)this + 1576))(this, &v42);
  v18 = *a4;
  *(_BYTE *)(v18 + 568) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 24080), MEMORY[0x1E0CA2E68], 0.0) != 0;
  v40 = xmmword_1B304F270;
  v41 = xmmword_1B304F270;
  v39 = xmmword_1B304F270;
  (*(void (**)(OZ3DEngineSceneElement *, __int128 *, CMTime *))(*(_QWORD *)this + 1360))(this, &v39, a3);
  for (m = 0; m != 4; ++m)
  {
    v20 = v52[m];
    v21 = (float64x2_t *)(&v42 + 2 * m);
    *v21 = vcvtq_f64_f32(*(float32x2_t *)v20.f32);
    v21[1] = vcvt_hight_f64_f32(v20);
  }
  PCMatrix44Tmpl<double>::invert((double *)&v42, (double *)&v42, 0.0);
  v22 = 0;
  v23 = -1.0;
  v24 = 1.0;
  v25 = 1.0;
  v26 = -1.0;
  v27 = 1.0;
  v28 = -1.0;
  do
  {
    v29 = (__int128 *)((char *)&v39 + 8);
    if ((v22 & 1) != 0)
      v29 = &v39;
    v30 = *(double *)v29;
    v31 = (__int128 *)((char *)&v40 + 8);
    if ((v22 & 2) != 0)
      v31 = &v40;
    v32 = *(double *)v31;
    v33 = (__int128 *)((char *)&v41 + 8);
    if ((v22 & 4) != 0)
      v33 = &v41;
    v34 = *(double *)v33;
    v54 = v30;
    v55 = v32;
    v56 = v34;
    PCMatrix44Tmpl<double>::transform<double>((double *)&v42, &v54, &v54);
    if (v22)
    {
      if (v24 >= v54)
        v24 = v54;
      if (v23 <= v54)
        v23 = v54;
      if (v25 >= v55)
        v25 = v55;
      if (v26 <= v55)
        v26 = v55;
      if (v27 >= v56)
        v27 = v56;
      if (v28 <= v56)
        v28 = v56;
    }
    else
    {
      v26 = v55;
      v28 = v56;
      v23 = v54;
      v24 = v54;
      v25 = v55;
      v27 = v56;
    }
    ++v22;
  }
  while (v22 != 8);
  v35 = *a4;
  *(double *)(v35 + 120) = v24;
  *(double *)(v35 + 128) = v23;
  *(double *)(v35 + 136) = v25;
  *(double *)(v35 + 144) = v26;
  *(double *)(v35 + 152) = v27;
  *(double *)(v35 + 160) = v28;
  Name = (PCString *)OZObjectManipulator::getName((OZ3DEngineSceneElement *)((char *)this + 16));
  v37 = (__CFString *)PCString::ns_str(Name);
  return Li3DEngineObjectData::setDebugName((id *)v35, &v37->isa);
}

void sub_1B2EDE048(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *FindTopLevel3DWorldGroup(OZScene *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  unint64_t v8;
  char *v9;
  _BYTE v11[48];
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  _DWORD v15[4];
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int32x4_t v22[2];

  OZScene::begin_all(a1, (uint64_t)v17);
  OZScene::end_all_sel(a1, (uint64_t)v13);
  while (1)
  {
    if (v20 == v15[2])
    {
      if (v20 == 3)
        v2 = &v19;
      else
        v2 = &v18;
      if (v20 == 3)
        v3 = (uint64_t *)v15;
      else
        v3 = &v14;
      if (v20 < 2)
      {
        v2 = v17;
        v3 = (uint64_t *)v13;
      }
      if (*v2 == *v3)
        break;
    }
    if (v20 >= 2)
    {
      if (v20 == 2)
      {
        v5 = *(_QWORD *)(v18 + 16);
        v6 = (const void *)(v5 + 48);
        goto LABEL_18;
      }
      v4 = v19;
    }
    else
    {
      v4 = v17[0];
    }
    v5 = *(_QWORD *)(v4 + 16);
    v6 = (const void *)(v5 + 16);
LABEL_18:
    if (v5)
      v7 = v6;
    else
      v7 = 0;
    v8 = *(_QWORD *)((*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 256))(v7) + 8);
    v22[0] = (int32x4_t)xmmword_1B355DCD0;
    if (OZFactory::isKindOfClass(v8, v22))
    {
      if ((OZChannelBase::isEnabled((OZChannelBase *)(v9 + 20744), 1, 1) & 1) != 0)
        goto LABEL_25;
    }
    OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++(v17, (uint64_t)v11);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
  }
  v9 = 0;
LABEL_25:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  return v9;
}

void sub_1B2EDE218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a40);
  _Unwind_Resume(a1);
}

__n128 OZ3DEngineSceneElement::resetLastActiveState(OZ3DEngineSceneElement *this)
{
  __n128 *v1;
  __n128 result;

  v1 = (__n128 *)MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 2363) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  result = *v1;
  *(__n128 *)((char *)this + 18888) = *v1;
  *((_BYTE *)this + 18912) = 0;
  return result;
}

uint64_t OZ3DEngineSceneElement::setInstanceColor(uint64_t this, double a2, double a3, double a4)
{
  *(_BYTE *)(this + 18840) = 1;
  *(double *)(this + 18848) = a2;
  *(double *)(this + 18856) = a3;
  *(double *)(this + 18864) = a4;
  return this;
}

void OZ3DEngineSceneElement::makeDataFor3DEngineObject(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W7>, id **a8@<X8>, double a9@<D0>, float a10@<S1>, float a11@<S2>, float a12@<S3>, float a13@<S4>, float a14@<S5>)
{
  uint64_t v18;
  OZObjectManipulator *v19;
  int v20;
  int ValueAsInt;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  PCString *Name;
  uint64_t i;
  _QWORD *v29;
  unint64_t v30;
  OZ3DEngineApplyForceBehavior *v31;
  BOOL isImpulse;
  int v33;
  const void *v34;
  void *v35;
  _DWORD *v36;
  unint64_t v37;
  OZ3DEngineApplyForceBehavior *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL isExtentInfinite;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSUUID *v51;
  char *v52;
  id *v53;
  void *v54;
  id *v55;
  SCNNode *v56;
  id *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  id *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  BOOL v71;
  int v72;
  id *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *isa;
  uint64_t j;
  const PCString *v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64x2_t v91;
  OZChannelTimeConverter *v92;
  const PCString *v93;
  int v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *v100;
  _BYTE v101[32];
  __int128 v102;
  id v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[48];
  void *v111;
  _BYTE v112[32];
  __int128 v113;
  id v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  CMTime v125;
  CMTime v126;
  int v127;
  float v128;
  char v129;
  double v130;
  uint64_t v131;
  float v132[4];
  int64x2_t v133;
  _QWORD v134[2];
  OZChannelBase v135;
  _QWORD *v136;
  _BYTE v137[48];
  id v138[14];

  v138[11] = *(id *)MEMORY[0x1E0C80C00];
  v132[0] = a10;
  v132[1] = a11;
  v132[2] = a12;
  v132[3] = a13;
  v131 = a2;
  v130 = a9;
  v129 = a6;
  v128 = a14;
  v127 = a7;
  v126 = *(CMTime *)a3;
  v19 = (OZObjectManipulator *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 16);
  v125 = v126;
  v20 = (*(uint64_t (**)(uint64_t, CMTime *, uint64_t, uint64_t, uint64_t))(v18 + 104))(a1 + 16, &v125, 1, 1, 1);
  Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)v112);
  ValueAsInt = 0;
  v119 = 0u;
  v120 = 0u;
  v118 = 0u;
  LODWORD(v115) = -1;
  v111 = 0;
  if (v20)
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20872), &v126, 0.0);
  LODWORD(v111) = ValueAsInt;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21384), &v126, 0.0);
  *(_QWORD *)&v122 = v22;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21688), &v126, 0.0);
  *(_QWORD *)&v123 = v23;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21536), &v126, 0.0);
  *((_QWORD *)&v122 + 1) = v24;
  HIDWORD(v111) = (*(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)a1 + 2304))(a1, &v126);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21840), &v126, 0.0);
  *((_QWORD *)&v123 + 1) = v25;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21992), &v126, 0.0);
  v124 = v26;
  Name = (PCString *)OZObjectManipulator::getName(v19);
  PCString::PCString((PCString *)v137, "Projectile (to person)");
  v95 = a5;
  v96 = a4;
  LODWORD(Name) = PCString::compare(Name, (const PCString *)v137);
  PCString::~PCString((PCString *)v137);
  if (!(_DWORD)Name)
    printf("type=%d\n", (_DWORD)v111);
  v94 = v20;
  if (v20)
  {
    for (i = *(_QWORD *)(a1 + 1008); i != a1 + 1000; i = *(_QWORD *)(i + 8))
    {
      v29 = *(_QWORD **)(i + 16);
      v30 = v29[1];
      *(_OWORD *)v137 = xmmword_1B3560420;
      if (OZFactory::isKindOfClass(v30, (int32x4_t *)v137))
      {
        *(_OWORD *)&v135.var10 = *(_OWORD *)a3;
        v135.var12 = *(__CFString **)(a3 + 16);
        v133 = *(int64x2_t *)&v135.var10;
        v134[0] = v135.var12;
        if ((*(unsigned int (**)(OZ3DEngineApplyForceBehavior *, int64x2_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 296))(v31, &v133, 1, 1, 1))
        {
          isImpulse = OZ3DEngineApplyForceBehavior::isImpulse(v31, (const CMTime *)&v135.var10);
          Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)v137);
          v33 = OZ3DEngineApplyForceBehavior::directionMode(v31, (const CMTime *)&v135.var10);
          v137[1] = v33 == 0;
          if (v33)
          {
            v34 = (const void *)(*(uint64_t (**)(OZ3DEngineApplyForceBehavior *))(*(_QWORD *)v31 + 320))(v31);
            if (v34)
            {
              if (v35)
                (*(void (**)(void *))(*(_QWORD *)v35 + 272))(v35);
            }
            v36 = OZ3DEngineApplyForceBehavior::targetObject(v31);
            if (v36)
              *(_DWORD *)&v137[32] = v36[20];
          }
          else
          {
            OZ3DEngineApplyForceBehavior::fixedDirection(v31, (const CMTime *)&v135.var10, (double *)&v135.var2);
            *(_OWORD *)&v137[8] = *(_OWORD *)&v135.var2;
            *(_QWORD *)&v137[24] = v135.var4.var0;
          }
          OZ3DEngineApplyForceBehavior::magnitude(v31, (const CMTime *)&v135.var10);
          *(_QWORD *)&v137[40] = v50;
          v137[0] = isImpulse;
          v51 = (NSUUID *)OZ3DEngineApplyForceBehavior::UUID(v31);
          Li3DEngineObjectForceParams::setUUID((id *)v137, v51);
          *(_OWORD *)v112 = *(_OWORD *)v137;
          *(_OWORD *)&v112[16] = *(_OWORD *)&v137[16];
          v113 = *(_OWORD *)&v137[32];
          ProCore_Impl::PCNSRefImpl::operator=(&v114, v138);
          Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)v137);
        }
      }
      else
      {
        v37 = v29[1];
        *(_OWORD *)v137 = xmmword_1B3560430;
        if (OZFactory::isKindOfClass(v37, (int32x4_t *)v137))
        {
          *(_OWORD *)&v135.var2 = *(_OWORD *)a3;
          v135.var4.var0 = *(__CFString **)(a3 + 16);
          *(_OWORD *)&v135.var10 = *(_OWORD *)&v135.var2;
          v135.var12 = v135.var4.var0;
          if ((*(unsigned int (**)(OZ3DEngineApplyForceBehavior *, __CFString **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 296))(v38, &v135.var10, 1, 1, 1))
          {
            v39 = OZ3DEngineApplyForceBehavior::directionMode(v38, (const CMTime *)&v135.var2);
            OZ3DEnginePhysicsFieldBehavior::strength(v38, (const CMTime *)&v135.var2);
            v41 = v40;
            OZ3DEnginePhysicsFieldBehavior::falloffExponent(v38, (const CMTime *)&v135.var2);
            v43 = v42;
            isExtentInfinite = OZ3DEnginePhysicsFieldBehavior::isExtentInfinite(v38, (const CMTime *)&v135.var2);
            OZ3DEnginePhysicsFieldBehavior::halfExtent(v38, (const CMTime *)&v135.var2, v137);
            memset(&v137[24], 0, 24);
            OZ3DEnginePhysicsFieldBehavior::direction(v38, (const CMTime *)&v135.var2, &v133);
            *(int64x2_t *)&v137[24] = v133;
            *(_QWORD *)&v137[40] = v134[0];
            OZ3DEnginePhysicsFieldBehavior::smoothness((OZChannel *)v38, (const CMTime *)&v135.var2);
            v46 = v45;
            OZ3DEnginePhysicsFieldBehavior::animationSpeed((OZChannel *)v38, (const CMTime *)&v135.var2);
            v48 = v47;
            OZ3DEnginePhysicsFieldBehavior::minimumDistance((OZChannel *)v38, (const CMTime *)&v135.var2);
            LODWORD(v115) = v39;
            *((_QWORD *)&v115 + 1) = v41;
            *(_QWORD *)&v116 = v43;
            BYTE8(v116) = isExtentInfinite;
            *(_QWORD *)&v117 = v46;
            *((_QWORD *)&v117 + 1) = v48;
            v118 = *(_OWORD *)v137;
            v119 = *(_OWORD *)&v137[16];
            v120 = *(_OWORD *)&v137[32];
            v121 = v49;
          }
        }
      }
    }
  }
  v52 = OZ3DEngineSceneElement::get3DWorldOwner((OZ3DEngineSceneElement *)a1);
  if (v52 && !OZ3DEngineSceneElement::is3DNodeInMasterScene((OZ3DEngineSceneElement *)a1, (OZGroup *)v52))
    OZ3DEngineSceneElement::add3DNodeToMasterScene((OZ3DEngineSceneElement *)a1);
  std::allocate_shared[abi:ne180100]<Li3DEngineObjectData,std::allocator<Li3DEngineObjectData>,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,void>(&v131, &v130, v96, &v129, v132, &v128, &v128, a8, &v127, v95);
  v53 = *a8;
  *((_BYTE *)*a8 + 424) = v94 ^ 1;
  OZElement::getOpacity((OZElement *)a1, &v126, 0);
  v53[52] = v54;
  v55 = *a8;
  v56 = (SCNNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2288))(a1);
  Li3DEngineObjectData::setSCNNode(v55, v56);
  v57 = *a8;
  v100 = v111;
  *(_WORD *)v101 = *(_WORD *)v112;
  *(_OWORD *)&v101[8] = *(_OWORD *)&v112[8];
  *(_QWORD *)&v101[24] = *(_QWORD *)&v112[24];
  v102 = v113;
  v103 = v114;
  ProCore_Impl::PCNSRefImpl::retain(&v103);
  v104 = v115;
  v105 = v116;
  v106 = v117;
  v107 = v118;
  v108 = v119;
  v109 = v120;
  *(_QWORD *)v110 = v121;
  *(_QWORD *)&v110[40] = v124;
  *(_OWORD *)&v110[24] = v123;
  *(_OWORD *)&v110[8] = v122;
  v57[26] = v100;
  *(_OWORD *)(v57 + 31) = v102;
  v58 = *(_OWORD *)v101;
  *(_OWORD *)(v57 + 29) = *(_OWORD *)&v101[16];
  *(_OWORD *)(v57 + 27) = v58;
  ProCore_Impl::PCNSRefImpl::operator=(v57 + 33, &v103);
  v59 = *(_OWORD *)&v110[16];
  *((_OWORD *)v57 + 23) = *(_OWORD *)v110;
  *((_OWORD *)v57 + 24) = v59;
  *((_OWORD *)v57 + 25) = *(_OWORD *)&v110[32];
  v60 = v107;
  *((_OWORD *)v57 + 19) = v106;
  *((_OWORD *)v57 + 20) = v60;
  v61 = v109;
  *((_OWORD *)v57 + 21) = v108;
  *((_OWORD *)v57 + 22) = v61;
  v62 = v105;
  *((_OWORD *)v57 + 17) = v104;
  *((_OWORD *)v57 + 18) = v62;
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)v101);
  v63 = *a8;
  *((_BYTE *)v63 + 568) = OZChannel::getValueAsInt((OZChannel *)(a1 + 24080), MEMORY[0x1E0CA2E68], 0.0) != 0;
  if (*(_QWORD *)(a1 + 18976))
  {
    *(_QWORD *)v137 = a1 + 24336;
    PCMutex::lock((PCMutex *)(a1 + 24336));
    v137[8] = 1;
    OZ3DEngineSceneElement::updateShaderParamsFromChannels((OZ3DEngineSceneElement *)a1, (CMTime *)a3);
    v64 = (uint64_t)*a8;
    if (*a8 + 65 != (id *)(a1 + 18952))
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)*a8 + 520, *(char **)(a1 + 18952), *(_QWORD *)(a1 + 18960), (uint64_t)(*(_QWORD *)(a1 + 18960) - *(_QWORD *)(a1 + 18952)) >> 2);
      v64 = (uint64_t)*a8;
    }
    *(_QWORD *)(v64 + 512) = *(_QWORD *)(a1 + 18976);
    v65 = *(std::__shared_weak_count **)(a1 + 19136);
    v98 = *(_QWORD *)(a1 + 19128);
    v99 = v65;
    if (v65)
    {
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(p_shared_owners);
      while (__stxr(v67 + 1, p_shared_owners));
    }
    Li3DEngineObjectData::setTextureSource(v64, &v98);
    v68 = v99;
    if (v99)
    {
      v69 = (unint64_t *)&v99->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (*(_QWORD *)v137)
      v71 = v137[8] == 0;
    else
      v71 = 1;
    if (!v71)
      PCMutex::unlock(*(PCMutex **)v137);
  }
  if (*(_QWORD *)(a1 + 24240))
    v72 = v94;
  else
    v72 = 0;
  if (v72 == 1)
  {
    PCMutex::lock((PCMutex *)(a1 + 24264));
    OZ3DEngineSceneElement::updateScriptParamsFromChannels((OZ3DEngineSceneElement *)a1, (CMTime *)a3);
    v73 = *a8;
    v73[57] = (id)objc_msgSend(*(id *)(a1 + 24240), "context");
    v74 = *(void **)(a1 + 24240);
    v134[0] = 0;
    v133 = 0uLL;
    memset(&v135.var2, 0, 64);
    v75 = (void *)objc_msgSend(v74, "parameterDescriptors");
    v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v135.var2, v137, 16);
    if (v76)
    {
      isa = v135.var4.var0->isa;
      do
      {
        for (j = 0; j != v76; ++j)
        {
          if (v135.var4.var0->isa != isa)
            objc_enumerationMutation(v75);
          LiScriptParameterDescriptor::LiScriptParameterDescriptor((uint64_t)&v135, (CFTypeRef)objc_msgSend(*(id *)(*(_QWORD *)&v135.var3 + 8 * j), "name"), objc_msgSend(*(id *)(*(_QWORD *)&v135.var3 + 8 * j), "type"));
          v80 = v133.i64[1];
          if (v133.i64[1] >= v134[0])
          {
            v82 = (v133.i64[1] - v133.i64[0]) >> 4;
            v83 = v82 + 1;
            if ((unint64_t)(v82 + 1) >> 60)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v84 = v134[0] - v133.i64[0];
            if ((v134[0] - v133.i64[0]) >> 3 > v83)
              v83 = v84 >> 3;
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0)
              v85 = 0xFFFFFFFFFFFFFFFLL;
            else
              v85 = v83;
            v136 = v134;
            if (v85)
              v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)v134, v85);
            else
              v86 = 0;
            v87 = &v86[16 * v82];
            *(_OWORD *)v87 = *(_OWORD *)&v135.var0;
            v88 = v133.i64[1];
            v89 = v133.i64[0];
            if (v133.i64[1] == v133.i64[0])
            {
              v91 = vdupq_n_s64(v133.u64[1]);
              v90 = &v86[16 * v82];
            }
            else
            {
              v90 = &v86[16 * v82];
              do
              {
                *((_OWORD *)v90 - 1) = *(_OWORD *)(v88 - 16);
                v90 -= 16;
                v88 -= 16;
              }
              while (v88 != v89);
              v91 = v133;
            }
            v81 = v87 + 16;
            v133.i64[0] = (uint64_t)v90;
            v133.i64[1] = (uint64_t)(v87 + 16);
            *(int64x2_t *)&v135.var11 = v91;
            v92 = (OZChannelTimeConverter *)v134[0];
            v134[0] = &v86[16 * v85];
            v135.var13 = v92;
            v135.var10 = (__CFString *)v91.i64[0];
            std::__split_buffer<LiScriptParameterDescriptor>::~__split_buffer((uint64_t)&v135.var10, (const PCString *)v85);
          }
          else
          {
            *(_OWORD *)v133.i64[1] = *(_OWORD *)&v135.var0;
            v81 = (_OWORD *)(v80 + 16);
          }
          v133.i64[1] = (uint64_t)v81;
          OZChannelBase::setRangeName(&v135, v79);
        }
        v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v135.var2, v137, 16);
      }
      while (v76);
    }
    Li3DEngineObjectData::setScriptParameters((uint64_t)*a8, a1 + 18920, (__int128 **)&v133);
    *(_QWORD *)v137 = &v133;
    std::vector<LiScriptParameterDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)v137, v93);
    if (a1 != -24264)
      PCMutex::unlock((PCMutex *)(a1 + 24264));
  }
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)v112);
}

void sub_1B2EDECB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEngineSceneElement::areEffectsAppliedInScreenSpace(OZ3DEngineSceneElement *this)
{
  return (*(unsigned int (**)(OZ3DEngineSceneElement *))(*(_QWORD *)this + 1632))(this) ^ 1;
}

uint64_t `non-virtual thunk to'OZ3DEngineSceneElement::areEffectsAppliedInScreenSpace(OZ3DEngineSceneElement *this)
{
  return (*(unsigned int (**)(char *))(*((_QWORD *)this - 816) + 1632))((char *)this - 6528) ^ 1;
}

const void *OZ3DEngineSceneElement::buildAndApplyMeshContourToMotionPath(OZ3DEngineSceneElement *a1, int a2, int a3, int a4, __n128 a5, float a6, float a7)
{
  uint64_t v13;
  OZChannelBase *v14;
  const void *result;
  const void *v16;
  _QWORD *v17;
  uint64_t *v18;
  const void *v19;
  float64x2_t v20;
  float64x2_t v22;
  double v23;
  void *__p;
  void *v25;
  uint64_t v26[4];
  uint64_t v27;

  v13 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)a1 + 272))(a1);
  *(_BYTE *)(*(_QWORD *)(v13 + 1584) + 101) = 1;
  v14 = *(OZChannelBase **)(v13 + 1504);
  if (v14)
    OZChannelBase::setRangeName(v14, (const PCString *)1);
  result = (const void *)*((_QWORD *)a1 + 120);
  if (result)
  {
    if (result)
    {
      OZSceneNode::begin_t<OZEnvironmentMeshSceneElement,false,true>((uint64_t)result, (uint64_t)v26);
      if (v26[0] != v26[2])
      {
        v16 = *(const void **)(v26[0] + 16);
        if (v16)
        {
          if (v17)
          {
            v20 = vcvtq_f64_f32((float32x2_t)a5.n128_u64[0]);
            while (1)
            {
              v22 = v20;
              v23 = a5.n128_f32[2];
              OZEnvironmentMeshSceneElement::buildContour(v17, &v22, a2, a3, a4, (uint64_t *)&__p, a6, a7);
              if (v25 != __p)
                break;
              if (v25)
                operator delete(v25);
              v18 = OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++(v26);
              if (*v18 != v18[2])
              {
                v19 = *(const void **)(*v18 + 16);
                if (v19)
                {
                  if (v17)
                    continue;
                }
              }
              goto LABEL_18;
            }
            OZ3DEngineSceneElement::applyMeshContourToMotionPath(a1, (double **)&__p);
            if (__p)
            {
              v25 = __p;
              operator delete(__p);
            }
          }
        }
      }
LABEL_18:
      result = (const void *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v13 + 1584) + 101) = 0;
  return result;
}

void sub_1B2EDEFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t *OZSceneNode::begin_t<OZEnvironmentMeshSceneElement,false,true>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *result;
  const void *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if ((uint64_t *)v4 != result)
  {
    v6 = *(const void **)(v4 + 16);
    if (!v6)
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2EDF088(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior *OZ3DEngineSceneElement::applyMeshContourToMotionPath(OZ3DEngineSceneElement *a1, double **a2)
{
  OZMotionPathBehavior *result;
  OZMotionPathBehavior *v5;
  uint64_t PositionChannel;
  uint64_t v7;
  double Seconds;
  double *v9;
  double *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  double v16;
  double v17;
  double v18;
  CMTime v19;
  __n128 v20;
  CMTimeEpoch v21;
  CMTime preferredTimescale;
  CMTime v23[2];
  CMTime v24;
  CMTime v25;
  CMTime v26;

  result = (OZMotionPathBehavior *)OZ3DEngineSceneElement::getMotionPathBehavior(a1);
  if (result)
  {
    v5 = result;
    PositionChannel = OZMotionPathBehavior::getPositionChannel(result);
    (*(void (**)(CMTime *__return_ptr, OZMotionPathBehavior *))(*(_QWORD *)v5 + 608))(v23, v5);
    memset(&preferredTimescale, 0, sizeof(preferredTimescale));
    v7 = (*(uint64_t (**)(OZ3DEngineSceneElement *))(*(_QWORD *)a1 + 272))(a1);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 336), &v20);
    v26 = v23[0];
    v25 = v23[1];
    PC_CMTimeSaferAdd(&v26, &v25, (uint64_t)&v24);
    v26 = v24;
    *(__n128 *)&v25.value = v20;
    v25.epoch = v21;
    PC_CMTimeSaferSubtract(&v26, &v25, (uint64_t)&preferredTimescale);
    v19 = preferredTimescale;
    Seconds = CMTimeGetSeconds(&v19);
    result = (OZMotionPathBehavior *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)PositionChannel + 288))(PositionChannel, 0);
    v10 = *a2;
    v9 = a2[1];
    if (v9 != *a2)
    {
      v11 = Seconds / (float)(0xAAAAAAAAAAAAAAABLL * (v9 - *a2));
      v12 = PositionChannel + 136;
      v13 = PositionChannel + 288;
      v14 = PositionChannel + 736;
      v15 = 0.0;
      do
      {
        v16 = *v10;
        v17 = v10[1];
        v18 = v10[2];
        memset(&v26, 0, sizeof(v26));
        CMTimeMakeWithSeconds(&v26, (float)(v15 * v11), preferredTimescale.timescale);
        v25 = v26;
        (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)v12 + 600))(v12, &v25);
        (*(void (**)(uint64_t, CMTime *, _QWORD, double))(*(_QWORD *)v12 + 712))(v12, &v25, 0, v16);
        (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)v13 + 600))(v13, &v25);
        (*(void (**)(uint64_t, CMTime *, _QWORD, double))(*(_QWORD *)v13 + 712))(v13, &v25, 0, v17);
        (*(void (**)(uint64_t, CMTime *))(*(_QWORD *)v14 + 600))(v14, &v25);
        result = (OZMotionPathBehavior *)(*(uint64_t (**)(uint64_t, CMTime *, _QWORD, double))(*(_QWORD *)v14 + 712))(v14, &v25, 0, v18);
        v15 = v15 + 1.0;
        v10 += 3;
      }
      while (v10 != v9);
    }
  }
  return result;
}

uint64_t *OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZ3DEngineSceneElement::getMotionPathBehavior(OZ3DEngineSceneElement *this)
{
  char *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  __int128 v6;

  v1 = (char *)this + 1000;
  v2 = (_QWORD *)*((_QWORD *)this + 126);
  if (v2 == (_QWORD *)((char *)this + 1000))
    return 0;
  while (1)
  {
    v3 = (_QWORD *)v2[2];
    v4 = v3[1];
    v6 = xmmword_1B355DDB0;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v6))
      break;
    v2 = (_QWORD *)v2[1];
    if (v2 == (_QWORD *)v1)
      return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<OZTextureSource,std::allocator<OZTextureSource>,PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&,void>@<X0>(PCSharedCount *a1@<X1>, _OWORD *a2@<X2>, uint64_t a3@<X3>, unsigned int *a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x110uLL);
  result = std::__shared_ptr_emplace<OZTextureSource>::__shared_ptr_emplace[abi:ne180100]<PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&,std::allocator<OZTextureSource>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B2EDF468(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<OZTextureSource>::__shared_ptr_emplace[abi:ne180100]<PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&,std::allocator<OZTextureSource>,0>(_QWORD *a1, PCSharedCount *a2, _OWORD *a3, uint64_t a4, unsigned int *a5, _QWORD *a6, uint64_t a7)
{
  char v9;

  a1[2] = 0;
  *a1 = &unk_1E65A8E28;
  a1[1] = 0;
  std::allocator<OZTextureSource>::construct[abi:ne180100]<OZTextureSource,PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&>((int)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1B2EDF4DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<OZTextureSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65A8E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OZTextureSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65A8E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<OZTextureSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<OZTextureSource>::construct[abi:ne180100]<OZTextureSource,PCPtr<LiImageSource> &,PCMatrix44Tmpl<double> &,PCRect<double> &,PCPixelFormat::ChannelOrder const&,CGColorSpace * const&,LiRenderingTechnology const&>(int a1, uint64_t a2, PCSharedCount *a3, _OWORD *a4, uint64_t a5, unsigned int *a6, _QWORD *a7, uint64_t a8)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[8];
  PC_Sp_counted_base *var0;
  PCSharedCount v20;

  var0 = a3->var0;
  PCSharedCount::PCSharedCount(&v20, a3 + 1);
  v14 = a4[5];
  v18[4] = a4[4];
  v18[5] = v14;
  v15 = a4[7];
  v18[6] = a4[6];
  v18[7] = v15;
  v16 = a4[1];
  v18[0] = *a4;
  v18[1] = v16;
  v17 = a4[3];
  v18[2] = a4[2];
  v18[3] = v17;
  OZTextureSource::OZTextureSource(a2, &var0, v18, a5, *a6, *a7, a8);
  PCSharedCount::~PCSharedCount(&v20);
}

void sub_1B2EDF5FC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<LiScriptParameterDescriptor>::~__split_buffer(uint64_t a1, const PCString *a2)
{
  uint64_t i;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v4; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    OZChannelBase::setRangeName((OZChannelBase *)(i - 16), a2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<LiScriptParameterDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1, const PCString *a2)
{
  void **v2;
  void *v3;
  uint64_t v5;
  void *v6;

  v2 = *a1;
  v3 = **a1;
  if (v3)
  {
    v5 = (uint64_t)v2[1];
    v6 = v3;
    if ((void *)v5 != v3)
    {
      do
        v5 = OZChannelBase::setRangeName((OZChannelBase *)(v5 - 16), a2);
      while ((void *)v5 != v3);
      v6 = **a1;
    }
    v2[1] = v3;
    operator delete(v6);
  }
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimingGroupChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (v3)
      return v3 + 18264;
    else
      return 0;
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimeScaleChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 22144;
      else
        return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimeReverseChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 22296;
      else
        return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getTimeRemapChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 22448;
      else
        return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getRetimeFrameChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 22704;
      else
        return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getRetimeFrameCacheChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 22856;
      else
        return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getEndConditionChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 23264;
      else
        return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getLoopDurationChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 23520;
      else
        return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZ3DEngineSceneElement>::getDurationCacheChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZ3DEngineSceneElement::shouldAllowRetiming((OZ3DEngineSceneElement *)result))
        return v3 + 23672;
      else
        return 0;
    }
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<Li3DEngineObjectData,std::allocator<Li3DEngineObjectData>,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,void>@<X0>(uint64_t *a1@<X1>, double *a2@<X2>, __int128 *a3@<X3>, char *a4@<X4>, float *a5@<X5>, float *a6@<X6>, float *a7@<X7>, _QWORD *a8@<X8>, int *a9, uint64_t a10)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x258uLL);
  result = std::__shared_ptr_emplace<Li3DEngineObjectData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,std::allocator<Li3DEngineObjectData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1B2EDFAB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<Li3DEngineObjectData>::__shared_ptr_emplace[abi:ne180100]<Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&,std::allocator<Li3DEngineObjectData>,0>(_QWORD *a1, uint64_t *a2, double *a3, __int128 *a4, char *a5, float *a6, float *a7, float *a8, int *a9, uint64_t a10)
{
  char v12;

  a1[2] = 0;
  *a1 = &unk_1E65A8EF8;
  a1[1] = 0;
  std::allocator<Li3DEngineObjectData>::construct[abi:ne180100]<Li3DEngineObjectData,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&>((uint64_t)&v12, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1B2EDFB38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Li3DEngineObjectData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65A8EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Li3DEngineObjectData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65A8EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<Li3DEngineObjectData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<Li3DEngineObjectData>::construct[abi:ne180100]<Li3DEngineObjectData,Li3DEngineScene *&,double &,PCMatrix44Tmpl<float> const&,BOOL &,PCWorkingColorVector &,float &,float &,PCBlendMode &,LiLightSet const&>(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, __int128 *a5, char *a6, float *a7, float *a8, float *a9, int *a10, uint64_t a11)
{
  uint64_t v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v17[4];

  v12 = *a3;
  v13 = *a4;
  v14 = a5[1];
  v17[0] = *a5;
  v17[1] = v14;
  v15 = a5[3];
  v17[2] = a5[2];
  v17[3] = v15;
  return Li3DEngineObjectData::Li3DEngineObjectData(a2, v12, v17, *a6, *a9 != 0.0, *a10, a11, v13, *a7, a7[1], a7[2], a7[3], *a8);
}

_QWORD *OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

OZChannelBase *OZMaterialSubstanceLayer::initSubstance(OZMaterialSubstanceLayer *this)
{
  PCString v3;

  OZMaterialSubstanceLayer::setUpSubstanceChannelVector(this);
  OZMaterialLayerBase::initBase(this);
  OZChannel::setMax((OZChannel *)((char *)this + 22176), 3.40282347e38);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 22176), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 22176), -3.40282347e38);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 22176), 1.0);
  OZChannel::setDefaultValue((OZChannel *)this + 67, 0.5);
  PCURL::PCURL((PCURL *)&v3, CFSTR("Material Substance Thickness Diffuse"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21872), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)((char *)this + 21872), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 21872), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 21872), 1.0);
  PCURL::PCURL((PCURL *)&v3, CFSTR("Material Substance Thickness Specular"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 22024), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)((char *)this + 22024), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 22024), 1.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 22024), 1.0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 14840), 15);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 14840), CFSTR("OZMaterialTextureTransformsController"));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14840));
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 16168), 1.0);
  OZChannelGradientPositioned::setDoNotSerializeAsRoot((uint64_t)this + 11600, 1);
  PCURL::PCURL((PCURL *)&v3, CFSTR("Material Generic Brightness Lights"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21432), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)this + 141, 0.0);
  OZChannel::setSliderMax((OZChannel *)this + 141, 1.0);
  PCURL::PCURL((PCURL *)&v3, CFSTR("Material Generic Brightness Environment"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 21584), &v3, 0);
  PCString::~PCString(&v3);
  OZChannel::setMin((OZChannel *)this + 142, 0.0);
  OZChannel::setSliderMax((OZChannel *)this + 142, 1.0);
  OZChannelGradientPositioned::setDoNotSerializeAsRoot((uint64_t)this + 6944, 1);
  OZChannelBase::setFlag((OZChannelBase *)this + 62, 0x400000, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 22632), 131076);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 22632), 0, 0);
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7200), 2, 0);
}

void sub_1B2EE00AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZMaterialCompoundLayer::~OZMaterialCompoundLayer(OZMaterialCompoundLayer *this)
{
  *(_QWORD *)this = off_1E659EE38;
  *((_QWORD *)this + 2) = &unk_1E659F298;
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZMaterialCompoundLayer *)((char *)this + 2776));
  OZChannelEnum::~OZChannelEnum((OZMaterialCompoundLayer *)((char *)this + 2520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2368));
  OZChannelPosition::~OZChannelPosition((OZMaterialCompoundLayer *)((char *)this + 1664));
  OZChannel2D::~OZChannel2D((OZMaterialCompoundLayer *)((char *)this + 1224));
  OZMaterialLayerBase::~OZMaterialLayerBase(this);
}

void OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCString v7;
  PCString v8;

  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Substance Layer"));
  OZMaterialCompoundLayer::OZMaterialCompoundLayer(this, a2, &v8, a4);
  PCString::~PCString(&v8);
  *(_QWORD *)this = &off_1E65A8F48;
  *((_QWORD *)this + 2) = &unk_1E65A9458;
  *((_QWORD *)this + 835) = &unk_1E65A94B0;
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Generic Selection Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Generic Selection"));
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 6688), &v8, &v7, (OZChannelFolder *)this, 0x71u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Metal Reflection Gradient"));
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 6944), &v8, (OZChannelFolder *)this, 0x6Cu, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Metal Shiny Percent"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 67, &v8, (OZChannelFolder *)this, 0x6Du, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Plastic Color Type Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Plastic Color Type Label"));
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 10336), 0, &v8, &v7, (OZChannelFolder *)this, 0x69u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Plastic Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayer *)((char *)this + 10592), 0.8, 0.8, 0.8, &v8, (OZChannelFolder *)this, 0x6Au, 0, 5u);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Plastic Gradient"));
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 11600), &v8, (OZChannelFolder *)this, 0x6Bu, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Generic Image"));
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap((OZMaterialSubstanceLayer *)((char *)this + 14840), &v8, (OZChannelFolder *)this, 0x72u, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Generic Brightness"));
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21296), 1.0, 1.0, &v8, (OZChannelFolder *)this, 0x6Fu, 0, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Substance Thickness"));
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21736), 1.0, 1.0, &v8, (OZChannelFolder *)this, 0x78u, 0, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Wood Bump Gain"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22176), 1.0, &v8, (OZChannelFolder *)this, 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Flat Intensity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22328), 1.0, &v8, (OZChannelFolder *)this, 0x73u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Generic Alpha"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22480), 1.0, &v8, (OZChannelFolder *)this, 0x70u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Flat Enable Edge"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), &v8, (OZChannelFolder *)this, 0x74u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Flat Edge Amount"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22760), 0.5, &v8, (OZChannelFolder *)((char *)this + 22632), 0x75u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Flat Edge Invert"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22912), 0, &v8, (OZChannelFolder *)((char *)this + 22632), 0x77u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Flat Operator Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Flat Operator Selection"));
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 23064), &v8, &v7, (OZChannelFolder *)this, 0x76u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  *((_QWORD *)this + 2917) = 0;
  *(_OWORD *)((char *)this + 23320) = 0u;
  *((_QWORD *)this + 2918) = -1;
  OZChannel2D::setValue((OZMaterialSubstanceLayer *)((char *)this + 4632), MEMORY[0x1E0CA2E68], 1.0, 1.0, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 648), 3.0);
  OZMaterialSubstanceLayer::initSubstance(this);
  OZChannel::setValue((OZChannel *)((char *)this + 16168), MEMORY[0x1E0CA2E68], 1.0, 0);
}

void sub_1B2EE07A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannel2D *a11, OZChannelMaterialLayerMap *a12, OZChannelGradientWithTransform *a13, OZChannelColorNoAlpha *a14, OZChannelEnum *a15, OZChannelPercent *a16, OZChannelGradientWithTransform *a17, OZChannelEnum *a18, PCString a19, PCString a20)
{
  OZMaterialCompoundLayer *v20;
  OZChannelPercent *v21;
  OZChannelPercent *v22;
  OZChannelPercent *v23;
  OZChannelFolder *v24;
  OZChannelPercent *v25;
  OZChannelBool *v26;
  OZChannel2D *v27;

  PCString::~PCString(&a19);
  PCString::~PCString(&a20);
  OZChannelBool::~OZChannelBool(v26);
  OZChannelPercent::~OZChannelPercent(v25);
  OZChannelFolder::~OZChannelFolder(v24);
  OZChannelPercent::~OZChannelPercent(v23);
  OZChannelPercent::~OZChannelPercent(v22);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannel2D::~OZChannel2D(v27);
  OZChannel2D::~OZChannel2D(a11);
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(a12);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a13);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a17);
  OZChannelEnum::~OZChannelEnum(a18);
  OZMaterialCompoundLayer::~OZMaterialCompoundLayer(v20);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this, const OZMaterialSubstanceLayer *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZMaterialCompoundLayer::OZMaterialCompoundLayer(this, a2, a3);
  *v5 = &off_1E65A8F48;
  v5[2] = &unk_1E65A9458;
  v5[835] = &unk_1E65A94B0;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 836), (const OZMaterialSubstanceLayer *)((char *)a2 + 6688), (OZChannelFolder *)this);
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 6944), (const OZMaterialSubstanceLayer *)((char *)a2 + 6944), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 67, (const OZChannelBase *)((char *)a2 + 10184), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 10336), (const OZMaterialSubstanceLayer *)((char *)a2 + 10336), (OZChannelFolder *)this);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayer *)((char *)this + 10592), (const OZMaterialSubstanceLayer *)((char *)a2 + 10592), (OZChannelFolder *)this);
  OZChannelGradientWithTransform::OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 11600), (const OZMaterialSubstanceLayer *)((char *)a2 + 11600), (OZChannelFolder *)this);
  OZChannelMaterialLayerMap::OZChannelMaterialLayerMap((OZMaterialSubstanceLayer *)((char *)this + 14840), (const OZMaterialSubstanceLayer *)((char *)a2 + 14840), (OZChannelFolder *)this);
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21296), (const OZMaterialSubstanceLayer *)((char *)a2 + 21296), (OZChannelFolder *)this);
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayer *)((char *)this + 21736), (const OZMaterialSubstanceLayer *)((char *)a2 + 21736), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22176), (const OZChannelBase *)a2 + 198, (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22328), (const OZChannelBase *)((char *)a2 + 22328), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22480), (const OZChannelBase *)((char *)a2 + 22480), (OZChannelFolder *)this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), (const OZChannelFolder *)((char *)a2 + 22632), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 22760), (const OZChannelBase *)((char *)a2 + 22760), (OZChannelFolder *)((char *)this + 22632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22912), (const OZChannelBase *)((char *)a2 + 22912), (OZChannelFolder *)((char *)this + 22632));
  OZChannelEnum::OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 23064), (const OZMaterialSubstanceLayer *)((char *)a2 + 23064), (OZChannelFolder *)this);
  *((_QWORD *)this + 2917) = 0;
  *(_OWORD *)((char *)this + 23320) = 0u;
  *((_QWORD *)this + 2918) = *((_QWORD *)a2 + 2918);
  OZMaterialSubstanceLayer::setUpSubstanceChannelVector(this);
}

void sub_1B2EE0C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel2D *a9, OZChannel2D *a10, OZChannelMaterialLayerMap *a11, OZChannelGradientWithTransform *a12, OZChannelColorNoAlpha *a13, OZChannelEnum *a14, OZChannelPercent *a15, OZChannelGradientWithTransform *a16, OZChannelEnum *a17, uint64_t a18)
{
  OZMaterialCompoundLayer *v18;
  OZChannelPercent *v19;
  OZChannelPercent *v20;
  OZChannelPercent *v21;
  OZChannelFolder *v22;
  OZChannelPercent *v23;
  OZChannelBool *v24;
  OZChannelEnum *v25;

  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannelBool::~OZChannelBool(v24);
  OZChannelPercent::~OZChannelPercent(v23);
  OZChannelFolder::~OZChannelFolder(v22);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannelPercent::~OZChannelPercent(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannel2D::~OZChannel2D(a9);
  OZChannel2D::~OZChannel2D(a10);
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(a11);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a12);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZMaterialCompoundLayer::~OZMaterialCompoundLayer(v18);
  _Unwind_Resume(a1);
}

void sub_1B2EE0CF0()
{
  JUMPOUT(0x1B2EE0C88);
}

void sub_1B2EE0CF8()
{
  JUMPOUT(0x1B2EE0C90);
}

void sub_1B2EE0D00()
{
  JUMPOUT(0x1B2EE0C98);
}

void sub_1B2EE0D08()
{
  JUMPOUT(0x1B2EE0CA0);
}

void sub_1B2EE0D10()
{
  JUMPOUT(0x1B2EE0CA8);
}

void sub_1B2EE0D18()
{
  JUMPOUT(0x1B2EE0CB0);
}

void sub_1B2EE0D20()
{
  JUMPOUT(0x1B2EE0CB8);
}

void sub_1B2EE0D28()
{
  JUMPOUT(0x1B2EE0CC0);
}

void sub_1B2EE0D30()
{
  JUMPOUT(0x1B2EE0CC8);
}

void sub_1B2EE0D38()
{
  JUMPOUT(0x1B2EE0CD0);
}

void sub_1B2EE0D40()
{
  JUMPOUT(0x1B2EE0CD8);
}

void sub_1B2EE0D48()
{
  JUMPOUT(0x1B2EE0CE0);
}

void OZMaterialSubstanceLayer::setUpSubstanceChannelVector(OZMaterialSubstanceLayer *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  char *v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  void *v336;
  char *v337;
  char *v338;
  void *v339;
  void *v340;
  uint64_t v341;
  void *v342;
  char *v343;
  char *v344;
  void *v345;
  char *v346;
  char *v347;
  void *v348;
  char *v349;
  char *v350;
  void *v351;
  char *v352;
  char *v353;
  void *__p;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  char *v360;
  char *v361;
  _QWORD v362[2];

  v360 = 0;
  v361 = 0;
  v362[0] = 0;
  v3 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v362, 1uLL);
  v4 = (char *)this + 2776;
  v5 = &v3[8 * v2];
  *(_QWORD *)v3 = (char *)this + 2776;
  v6 = v3 + 8;
  v8 = v360;
  v7 = v361;
  v9 = v3;
  if (v361 != v360)
  {
    do
    {
      v10 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v9 - 1) = v10;
      v9 -= 8;
    }
    while (v7 != v8);
    v7 = v360;
  }
  v360 = v9;
  v361 = v3 + 8;
  v362[0] = &v3[8 * v2];
  if (v7)
  {
    operator delete(v7);
    v5 = (char *)v362[0];
  }
  v361 = v3 + 8;
  v11 = (char *)this + 22176;
  if (v6 >= v5)
  {
    v13 = (v6 - v360) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = v5 - v360;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v362, v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = v11;
    v12 = v18 + 8;
    v21 = v360;
    v20 = v361;
    if (v361 != v360)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = v360;
    }
    v360 = v18;
    v361 = v12;
    v362[0] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *((_QWORD *)v3 + 1) = v11;
    v12 = v3 + 16;
  }
  v361 = v12;
  v23 = *((_QWORD *)this + 2916);
  if (v23 >= *((_QWORD *)this + 2917))
  {
    v24 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v360);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v360);
    v24 = v23 + 24;
  }
  *((_QWORD *)this + 2916) = v24;
  v357 = 0;
  v358 = 0;
  v359 = 0;
  v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v359, 1uLL);
  v27 = &v26[8 * v25];
  *(_QWORD *)v26 = v4;
  v28 = v26 + 8;
  v30 = v357;
  v29 = v358;
  v31 = v26;
  if (v358 != v357)
  {
    do
    {
      v32 = *((_QWORD *)v29 - 1);
      v29 -= 8;
      *((_QWORD *)v31 - 1) = v32;
      v31 -= 8;
    }
    while (v29 != v30);
    v29 = v357;
  }
  v357 = v31;
  v358 = v26 + 8;
  v359 = &v26[8 * v25];
  if (v29)
  {
    operator delete(v29);
    v27 = v359;
  }
  v358 = v26 + 8;
  if (v28 >= v27)
  {
    v34 = (v28 - v357) >> 3;
    if ((unint64_t)(v34 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v35 = v27 - v357;
    v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1))
      v36 = v34 + 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v359, v37);
    else
      v38 = 0;
    v39 = &v38[8 * v34];
    v40 = &v38[8 * v37];
    *(_QWORD *)v39 = v11;
    v33 = v39 + 8;
    v42 = v357;
    v41 = v358;
    if (v358 != v357)
    {
      do
      {
        v43 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *((_QWORD *)v39 - 1) = v43;
        v39 -= 8;
      }
      while (v41 != v42);
      v41 = v357;
    }
    v357 = v39;
    v358 = v33;
    v359 = v40;
    if (v41)
      operator delete(v41);
  }
  else
  {
    *((_QWORD *)v26 + 1) = v11;
    v33 = v26 + 16;
  }
  v358 = v33;
  v44 = *((_QWORD *)this + 2916);
  if (v44 >= *((_QWORD *)this + 2917))
  {
    v45 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v357);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v357);
    v45 = v44 + 24;
  }
  *((_QWORD *)this + 2916) = v45;
  __p = 0;
  v355 = 0;
  v356 = 0;
  v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v356, 1uLL);
  v48 = &v47[8 * v46];
  *(_QWORD *)v47 = (char *)this + 6944;
  v49 = v47 + 8;
  v51 = (char *)__p;
  v50 = v355;
  v52 = v47;
  if (v355 != __p)
  {
    do
    {
      v53 = *((_QWORD *)v50 - 1);
      v50 -= 8;
      *((_QWORD *)v52 - 1) = v53;
      v52 -= 8;
    }
    while (v50 != v51);
    v50 = (char *)__p;
  }
  __p = v52;
  v355 = v47 + 8;
  v356 = &v47[8 * v46];
  if (v50)
  {
    operator delete(v50);
    v48 = v356;
  }
  v355 = v47 + 8;
  v54 = (char *)this + 10184;
  if (v49 >= v48)
  {
    v56 = (v49 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v57 = v48 - (_BYTE *)__p;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v356, v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v54;
    v55 = v61 + 8;
    v64 = (char *)__p;
    v63 = v355;
    if (v355 != __p)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)__p;
    }
    __p = v61;
    v355 = v55;
    v356 = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *((_QWORD *)v47 + 1) = v54;
    v55 = v47 + 16;
  }
  v355 = v55;
  v66 = (char *)this + 21736;
  if (v55 >= v356)
  {
    v68 = (v55 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v68 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v69 = (v356 - (_BYTE *)__p) >> 2;
    if (v69 <= v68 + 1)
      v69 = v68 + 1;
    if ((unint64_t)(v356 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v69;
    if (v70)
      v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v356, v70);
    else
      v71 = 0;
    v72 = &v71[8 * v68];
    v73 = &v71[8 * v70];
    *(_QWORD *)v72 = v66;
    v67 = v72 + 8;
    v75 = (char *)__p;
    v74 = v355;
    if (v355 != __p)
    {
      do
      {
        v76 = *((_QWORD *)v74 - 1);
        v74 -= 8;
        *((_QWORD *)v72 - 1) = v76;
        v72 -= 8;
      }
      while (v74 != v75);
      v74 = (char *)__p;
    }
    __p = v72;
    v355 = v67;
    v356 = v73;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *(_QWORD *)v55 = v66;
    v67 = v55 + 8;
  }
  v355 = v67;
  v77 = *((_QWORD *)this + 2916);
  if (v77 >= *((_QWORD *)this + 2917))
  {
    v78 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&__p);
    v78 = v77 + 24;
  }
  *((_QWORD *)this + 2916) = v78;
  v351 = 0;
  v352 = 0;
  v353 = 0;
  v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, 1uLL);
  v81 = &v80[8 * v79];
  *(_QWORD *)v80 = (char *)this + 10336;
  v82 = v80 + 8;
  v84 = (char *)v351;
  v83 = v352;
  v85 = v80;
  if (v352 != v351)
  {
    do
    {
      v86 = *((_QWORD *)v83 - 1);
      v83 -= 8;
      *((_QWORD *)v85 - 1) = v86;
      v85 -= 8;
    }
    while (v83 != v84);
    v83 = (char *)v351;
  }
  v351 = v85;
  v352 = v80 + 8;
  v353 = &v80[8 * v79];
  if (v83)
  {
    operator delete(v83);
    v81 = v353;
  }
  v352 = v80 + 8;
  v87 = (char *)this + 10592;
  if (v82 >= v81)
  {
    v89 = (v82 - (_BYTE *)v351) >> 3;
    if ((unint64_t)(v89 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v90 = v81 - (_BYTE *)v351;
    v91 = v90 >> 2;
    if (v90 >> 2 <= (unint64_t)(v89 + 1))
      v91 = v89 + 1;
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
      v92 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v92 = v91;
    if (v92)
      v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, v92);
    else
      v93 = 0;
    v94 = &v93[8 * v89];
    v95 = &v93[8 * v92];
    *(_QWORD *)v94 = v87;
    v88 = v94 + 8;
    v97 = (char *)v351;
    v96 = v352;
    if (v352 != v351)
    {
      do
      {
        v98 = *((_QWORD *)v96 - 1);
        v96 -= 8;
        *((_QWORD *)v94 - 1) = v98;
        v94 -= 8;
      }
      while (v96 != v97);
      v96 = (char *)v351;
    }
    v351 = v94;
    v352 = v88;
    v353 = v95;
    if (v96)
      operator delete(v96);
  }
  else
  {
    *((_QWORD *)v80 + 1) = v87;
    v88 = v80 + 16;
  }
  v352 = v88;
  v99 = (char *)this + 11600;
  if (v88 >= v353)
  {
    v101 = (v88 - (_BYTE *)v351) >> 3;
    if ((unint64_t)(v101 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v102 = (v353 - (_BYTE *)v351) >> 2;
    if (v102 <= v101 + 1)
      v102 = v101 + 1;
    if ((unint64_t)(v353 - (_BYTE *)v351) >= 0x7FFFFFFFFFFFFFF8)
      v103 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v103 = v102;
    if (v103)
      v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, v103);
    else
      v104 = 0;
    v105 = &v104[8 * v101];
    v106 = &v104[8 * v103];
    *(_QWORD *)v105 = v99;
    v100 = v105 + 8;
    v108 = (char *)v351;
    v107 = v352;
    if (v352 != v351)
    {
      do
      {
        v109 = *((_QWORD *)v107 - 1);
        v107 -= 8;
        *((_QWORD *)v105 - 1) = v109;
        v105 -= 8;
      }
      while (v107 != v108);
      v107 = (char *)v351;
    }
    v351 = v105;
    v352 = v100;
    v353 = v106;
    if (v107)
      operator delete(v107);
  }
  else
  {
    *(_QWORD *)v88 = v99;
    v100 = v88 + 8;
  }
  v352 = v100;
  if (v100 >= v353)
  {
    v111 = (v100 - (_BYTE *)v351) >> 3;
    if ((unint64_t)(v111 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v112 = (v353 - (_BYTE *)v351) >> 2;
    if (v112 <= v111 + 1)
      v112 = v111 + 1;
    if ((unint64_t)(v353 - (_BYTE *)v351) >= 0x7FFFFFFFFFFFFFF8)
      v113 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v113 = v112;
    if (v113)
      v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v353, v113);
    else
      v114 = 0;
    v115 = &v114[8 * v111];
    v116 = &v114[8 * v113];
    *(_QWORD *)v115 = v11;
    v110 = v115 + 8;
    v118 = (char *)v351;
    v117 = v352;
    if (v352 != v351)
    {
      do
      {
        v119 = *((_QWORD *)v117 - 1);
        v117 -= 8;
        *((_QWORD *)v115 - 1) = v119;
        v115 -= 8;
      }
      while (v117 != v118);
      v117 = (char *)v351;
    }
    v351 = v115;
    v352 = v110;
    v353 = v116;
    if (v117)
      operator delete(v117);
  }
  else
  {
    *(_QWORD *)v100 = v11;
    v110 = v100 + 8;
  }
  v352 = v110;
  v120 = *((_QWORD *)this + 2916);
  if (v120 >= *((_QWORD *)this + 2917))
  {
    v121 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v351);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v351);
    v121 = v120 + 24;
  }
  *((_QWORD *)this + 2916) = v121;
  v348 = 0;
  v349 = 0;
  v350 = 0;
  v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v350, 1uLL);
  v124 = &v123[8 * v122];
  *(_QWORD *)v123 = v4;
  v125 = v123 + 8;
  v127 = (char *)v348;
  v126 = v349;
  v128 = v123;
  if (v349 != v348)
  {
    do
    {
      v129 = *((_QWORD *)v126 - 1);
      v126 -= 8;
      *((_QWORD *)v128 - 1) = v129;
      v128 -= 8;
    }
    while (v126 != v127);
    v126 = (char *)v348;
  }
  v348 = v128;
  v349 = v123 + 8;
  v350 = &v123[8 * v122];
  if (v126)
  {
    operator delete(v126);
    v124 = v350;
  }
  v349 = v123 + 8;
  if (v125 >= v124)
  {
    v131 = (v125 - (_BYTE *)v348) >> 3;
    if ((unint64_t)(v131 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v132 = v124 - (_BYTE *)v348;
    v133 = v132 >> 2;
    if (v132 >> 2 <= (unint64_t)(v131 + 1))
      v133 = v131 + 1;
    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
      v134 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v134 = v133;
    if (v134)
      v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v350, v134);
    else
      v135 = 0;
    v136 = &v135[8 * v131];
    v137 = &v135[8 * v134];
    *(_QWORD *)v136 = v11;
    v130 = v136 + 8;
    v139 = (char *)v348;
    v138 = v349;
    if (v349 != v348)
    {
      do
      {
        v140 = *((_QWORD *)v138 - 1);
        v138 -= 8;
        *((_QWORD *)v136 - 1) = v140;
        v136 -= 8;
      }
      while (v138 != v139);
      v138 = (char *)v348;
    }
    v348 = v136;
    v349 = v130;
    v350 = v137;
    if (v138)
      operator delete(v138);
  }
  else
  {
    *((_QWORD *)v123 + 1) = v11;
    v130 = v123 + 16;
  }
  v349 = v130;
  v141 = *((_QWORD *)this + 2916);
  if (v141 >= *((_QWORD *)this + 2917))
  {
    v142 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v348);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v348);
    v142 = v141 + 24;
  }
  *((_QWORD *)this + 2916) = v142;
  v345 = 0;
  v346 = 0;
  v347 = 0;
  v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, 1uLL);
  v145 = &v144[8 * v143];
  *(_QWORD *)v144 = v4;
  v146 = v144 + 8;
  v148 = (char *)v345;
  v147 = v346;
  v149 = v144;
  if (v346 != v345)
  {
    do
    {
      v150 = *((_QWORD *)v147 - 1);
      v147 -= 8;
      *((_QWORD *)v149 - 1) = v150;
      v149 -= 8;
    }
    while (v147 != v148);
    v147 = (char *)v345;
  }
  v345 = v149;
  v346 = v144 + 8;
  v347 = &v144[8 * v143];
  if (v147)
  {
    operator delete(v147);
    v145 = v347;
  }
  v346 = v144 + 8;
  if (v146 >= v145)
  {
    v152 = (v146 - (_BYTE *)v345) >> 3;
    if ((unint64_t)(v152 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v153 = v145 - (_BYTE *)v345;
    v154 = v153 >> 2;
    if (v153 >> 2 <= (unint64_t)(v152 + 1))
      v154 = v152 + 1;
    if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
      v155 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v155 = v154;
    if (v155)
      v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, v155);
    else
      v156 = 0;
    v157 = &v156[8 * v152];
    v158 = &v156[8 * v155];
    *(_QWORD *)v157 = v11;
    v151 = v157 + 8;
    v160 = (char *)v345;
    v159 = v346;
    if (v346 != v345)
    {
      do
      {
        v161 = *((_QWORD *)v159 - 1);
        v159 -= 8;
        *((_QWORD *)v157 - 1) = v161;
        v157 -= 8;
      }
      while (v159 != v160);
      v159 = (char *)v345;
    }
    v345 = v157;
    v346 = v151;
    v347 = v158;
    if (v159)
      operator delete(v159);
  }
  else
  {
    *((_QWORD *)v144 + 1) = v11;
    v151 = v144 + 16;
  }
  v346 = v151;
  v162 = *((_QWORD *)this + 2916);
  if (v162 >= *((_QWORD *)this + 2917))
  {
    v163 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v345);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v345);
    v163 = v162 + 24;
  }
  *((_QWORD *)this + 2916) = v163;
  v342 = 0;
  v343 = 0;
  v344 = 0;
  v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, 1uLL);
  v166 = &v165[8 * v164];
  *(_QWORD *)v165 = v87;
  v167 = v165 + 8;
  v169 = (char *)v342;
  v168 = v343;
  v170 = v165;
  if (v343 != v342)
  {
    do
    {
      v171 = *((_QWORD *)v168 - 1);
      v168 -= 8;
      *((_QWORD *)v170 - 1) = v171;
      v170 -= 8;
    }
    while (v168 != v169);
    v168 = (char *)v342;
  }
  v342 = v170;
  v343 = v165 + 8;
  v344 = &v165[8 * v164];
  if (v168)
  {
    operator delete(v168);
    v166 = v344;
  }
  v343 = v165 + 8;
  if (v167 >= v166)
  {
    v173 = (v167 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v173 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v174 = v166 - (_BYTE *)v342;
    v175 = v174 >> 2;
    if (v174 >> 2 <= (unint64_t)(v173 + 1))
      v175 = v173 + 1;
    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF8)
      v176 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v176 = v175;
    if (v176)
      v177 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v176);
    else
      v177 = 0;
    v178 = &v177[8 * v173];
    v179 = &v177[8 * v176];
    *(_QWORD *)v178 = v99;
    v172 = v178 + 8;
    v181 = (char *)v342;
    v180 = v343;
    if (v343 != v342)
    {
      do
      {
        v182 = *((_QWORD *)v180 - 1);
        v180 -= 8;
        *((_QWORD *)v178 - 1) = v182;
        v178 -= 8;
      }
      while (v180 != v181);
      v180 = (char *)v342;
    }
    v342 = v178;
    v343 = v172;
    v344 = v179;
    if (v180)
      operator delete(v180);
  }
  else
  {
    *((_QWORD *)v165 + 1) = v99;
    v172 = v165 + 16;
  }
  v343 = v172;
  v183 = (char *)this + 14840;
  if (v172 >= v344)
  {
    v185 = (v172 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v185 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v186 = (v344 - (_BYTE *)v342) >> 2;
    if (v186 <= v185 + 1)
      v186 = v185 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v187 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v187 = v186;
    if (v187)
      v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v187);
    else
      v188 = 0;
    v189 = &v188[8 * v185];
    v190 = &v188[8 * v187];
    *(_QWORD *)v189 = v183;
    v184 = v189 + 8;
    v192 = (char *)v342;
    v191 = v343;
    if (v343 != v342)
    {
      do
      {
        v193 = *((_QWORD *)v191 - 1);
        v191 -= 8;
        *((_QWORD *)v189 - 1) = v193;
        v189 -= 8;
      }
      while (v191 != v192);
      v191 = (char *)v342;
    }
    v342 = v189;
    v343 = v184;
    v344 = v190;
    if (v191)
      operator delete(v191);
  }
  else
  {
    *(_QWORD *)v172 = v183;
    v184 = v172 + 8;
  }
  v343 = v184;
  v194 = (char *)this + 6688;
  if (v184 >= v344)
  {
    v196 = (v184 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v196 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v197 = (v344 - (_BYTE *)v342) >> 2;
    if (v197 <= v196 + 1)
      v197 = v196 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v198 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v198 = v197;
    if (v198)
      v199 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v198);
    else
      v199 = 0;
    v200 = &v199[8 * v196];
    v201 = &v199[8 * v198];
    *(_QWORD *)v200 = v194;
    v195 = v200 + 8;
    v203 = (char *)v342;
    v202 = v343;
    if (v343 != v342)
    {
      do
      {
        v204 = *((_QWORD *)v202 - 1);
        v202 -= 8;
        *((_QWORD *)v200 - 1) = v204;
        v200 -= 8;
      }
      while (v202 != v203);
      v202 = (char *)v342;
    }
    v342 = v200;
    v343 = v195;
    v344 = v201;
    if (v202)
      operator delete(v202);
  }
  else
  {
    *(_QWORD *)v184 = v194;
    v195 = v184 + 8;
  }
  v343 = v195;
  v205 = (char *)this + 22480;
  if (v195 >= v344)
  {
    v207 = (v195 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v207 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v208 = (v344 - (_BYTE *)v342) >> 2;
    if (v208 <= v207 + 1)
      v208 = v207 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v209 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v209 = v208;
    if (v209)
      v210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v209);
    else
      v210 = 0;
    v211 = &v210[8 * v207];
    v212 = &v210[8 * v209];
    *(_QWORD *)v211 = v205;
    v206 = v211 + 8;
    v214 = (char *)v342;
    v213 = v343;
    if (v343 != v342)
    {
      do
      {
        v215 = *((_QWORD *)v213 - 1);
        v213 -= 8;
        *((_QWORD *)v211 - 1) = v215;
        v211 -= 8;
      }
      while (v213 != v214);
      v213 = (char *)v342;
    }
    v342 = v211;
    v343 = v206;
    v344 = v212;
    if (v213)
      operator delete(v213);
  }
  else
  {
    *(_QWORD *)v195 = v205;
    v206 = v195 + 8;
  }
  v343 = v206;
  v216 = (char *)this + 22632;
  if (v206 >= v344)
  {
    v218 = (v206 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v218 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v219 = (v344 - (_BYTE *)v342) >> 2;
    if (v219 <= v218 + 1)
      v219 = v218 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v220 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v220 = v219;
    if (v220)
      v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v220);
    else
      v221 = 0;
    v222 = &v221[8 * v218];
    v223 = &v221[8 * v220];
    *(_QWORD *)v222 = v216;
    v217 = v222 + 8;
    v225 = (char *)v342;
    v224 = v343;
    if (v343 != v342)
    {
      do
      {
        v226 = *((_QWORD *)v224 - 1);
        v224 -= 8;
        *((_QWORD *)v222 - 1) = v226;
        v222 -= 8;
      }
      while (v224 != v225);
      v224 = (char *)v342;
    }
    v342 = v222;
    v343 = v217;
    v344 = v223;
    if (v224)
      operator delete(v224);
  }
  else
  {
    *(_QWORD *)v206 = v216;
    v217 = v206 + 8;
  }
  v343 = v217;
  v227 = (char *)this + 22328;
  if (v217 >= v344)
  {
    v229 = (v217 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v229 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v230 = (v344 - (_BYTE *)v342) >> 2;
    if (v230 <= v229 + 1)
      v230 = v229 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v231 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v231 = v230;
    if (v231)
      v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v231);
    else
      v232 = 0;
    v233 = &v232[8 * v229];
    v234 = &v232[8 * v231];
    *(_QWORD *)v233 = v227;
    v228 = v233 + 8;
    v236 = (char *)v342;
    v235 = v343;
    if (v343 != v342)
    {
      do
      {
        v237 = *((_QWORD *)v235 - 1);
        v235 -= 8;
        *((_QWORD *)v233 - 1) = v237;
        v233 -= 8;
      }
      while (v235 != v236);
      v235 = (char *)v342;
    }
    v342 = v233;
    v343 = v228;
    v344 = v234;
    if (v235)
      operator delete(v235);
  }
  else
  {
    *(_QWORD *)v217 = v227;
    v228 = v217 + 8;
  }
  v343 = v228;
  v238 = (char *)this + 22760;
  if (v228 >= v344)
  {
    v240 = (v228 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v240 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v241 = (v344 - (_BYTE *)v342) >> 2;
    if (v241 <= v240 + 1)
      v241 = v240 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v242 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v242 = v241;
    if (v242)
      v243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v242);
    else
      v243 = 0;
    v244 = &v243[8 * v240];
    v245 = &v243[8 * v242];
    *(_QWORD *)v244 = v238;
    v239 = v244 + 8;
    v247 = (char *)v342;
    v246 = v343;
    if (v343 != v342)
    {
      do
      {
        v248 = *((_QWORD *)v246 - 1);
        v246 -= 8;
        *((_QWORD *)v244 - 1) = v248;
        v244 -= 8;
      }
      while (v246 != v247);
      v246 = (char *)v342;
    }
    v342 = v244;
    v343 = v239;
    v344 = v245;
    if (v246)
      operator delete(v246);
  }
  else
  {
    *(_QWORD *)v228 = v238;
    v239 = v228 + 8;
  }
  v343 = v239;
  v249 = (char *)this + 22912;
  if (v239 >= v344)
  {
    v251 = (v239 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v251 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v252 = (v344 - (_BYTE *)v342) >> 2;
    if (v252 <= v251 + 1)
      v252 = v251 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v253 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v253 = v252;
    if (v253)
      v254 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v253);
    else
      v254 = 0;
    v255 = &v254[8 * v251];
    v256 = &v254[8 * v253];
    *(_QWORD *)v255 = v249;
    v250 = v255 + 8;
    v258 = (char *)v342;
    v257 = v343;
    if (v343 != v342)
    {
      do
      {
        v259 = *((_QWORD *)v257 - 1);
        v257 -= 8;
        *((_QWORD *)v255 - 1) = v259;
        v255 -= 8;
      }
      while (v257 != v258);
      v257 = (char *)v342;
    }
    v342 = v255;
    v343 = v250;
    v344 = v256;
    if (v257)
      operator delete(v257);
  }
  else
  {
    *(_QWORD *)v239 = v249;
    v250 = v239 + 8;
  }
  v343 = v250;
  v260 = (char *)this + 23064;
  if (v250 >= v344)
  {
    v262 = (v250 - (_BYTE *)v342) >> 3;
    if ((unint64_t)(v262 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v263 = (v344 - (_BYTE *)v342) >> 2;
    if (v263 <= v262 + 1)
      v263 = v262 + 1;
    if ((unint64_t)(v344 - (_BYTE *)v342) >= 0x7FFFFFFFFFFFFFF8)
      v264 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v264 = v263;
    if (v264)
      v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v344, v264);
    else
      v265 = 0;
    v266 = &v265[8 * v262];
    v267 = &v265[8 * v264];
    *(_QWORD *)v266 = v260;
    v261 = v266 + 8;
    v269 = (char *)v342;
    v268 = v343;
    if (v343 != v342)
    {
      do
      {
        v270 = *((_QWORD *)v268 - 1);
        v268 -= 8;
        *((_QWORD *)v266 - 1) = v270;
        v266 -= 8;
      }
      while (v268 != v269);
      v268 = (char *)v342;
    }
    v342 = v266;
    v343 = v261;
    v344 = v267;
    if (v268)
      operator delete(v268);
  }
  else
  {
    *(_QWORD *)v250 = v260;
    v261 = v250 + 8;
  }
  v343 = v261;
  v271 = *((_QWORD *)this + 2916);
  if (v271 >= *((_QWORD *)this + 2917))
  {
    v272 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v342);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v342);
    v272 = v271 + 24;
  }
  *((_QWORD *)this + 2916) = v272;
  v339 = 0;
  v340 = 0;
  v341 = 0;
  if (v272 >= *((_QWORD *)this + 2917))
  {
    v273 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v339);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v339);
    v273 = v272 + 24;
  }
  *((_QWORD *)this + 2916) = v273;
  v336 = 0;
  v337 = 0;
  v338 = 0;
  v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, 1uLL);
  v276 = &v275[8 * v274];
  *(_QWORD *)v275 = v87;
  v277 = v275 + 8;
  v279 = (char *)v336;
  v278 = v337;
  v280 = v275;
  if (v337 != v336)
  {
    do
    {
      v281 = *((_QWORD *)v278 - 1);
      v278 -= 8;
      *((_QWORD *)v280 - 1) = v281;
      v280 -= 8;
    }
    while (v278 != v279);
    v278 = (char *)v336;
  }
  v336 = v280;
  v337 = v275 + 8;
  v338 = &v275[8 * v274];
  if (v278)
  {
    operator delete(v278);
    v276 = v338;
  }
  v337 = v275 + 8;
  if (v277 >= v276)
  {
    v283 = (v277 - (_BYTE *)v336) >> 3;
    if ((unint64_t)(v283 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v284 = v276 - (_BYTE *)v336;
    v285 = v284 >> 2;
    if (v284 >> 2 <= (unint64_t)(v283 + 1))
      v285 = v283 + 1;
    if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF8)
      v286 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v286 = v285;
    if (v286)
      v287 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v286);
    else
      v287 = 0;
    v288 = &v287[8 * v283];
    v289 = &v287[8 * v286];
    *(_QWORD *)v288 = v99;
    v282 = v288 + 8;
    v291 = (char *)v336;
    v290 = v337;
    if (v337 != v336)
    {
      do
      {
        v292 = *((_QWORD *)v290 - 1);
        v290 -= 8;
        *((_QWORD *)v288 - 1) = v292;
        v288 -= 8;
      }
      while (v290 != v291);
      v290 = (char *)v336;
    }
    v336 = v288;
    v337 = v282;
    v338 = v289;
    if (v290)
      operator delete(v290);
  }
  else
  {
    *((_QWORD *)v275 + 1) = v99;
    v282 = v275 + 16;
  }
  v337 = v282;
  if (v282 >= v338)
  {
    v294 = (v282 - (_BYTE *)v336) >> 3;
    if ((unint64_t)(v294 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v295 = (v338 - (_BYTE *)v336) >> 2;
    if (v295 <= v294 + 1)
      v295 = v294 + 1;
    if ((unint64_t)(v338 - (_BYTE *)v336) >= 0x7FFFFFFFFFFFFFF8)
      v296 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v296 = v295;
    if (v296)
      v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v296);
    else
      v297 = 0;
    v298 = &v297[8 * v294];
    v299 = &v297[8 * v296];
    *(_QWORD *)v298 = v194;
    v293 = v298 + 8;
    v301 = (char *)v336;
    v300 = v337;
    if (v337 != v336)
    {
      do
      {
        v302 = *((_QWORD *)v300 - 1);
        v300 -= 8;
        *((_QWORD *)v298 - 1) = v302;
        v298 -= 8;
      }
      while (v300 != v301);
      v300 = (char *)v336;
    }
    v336 = v298;
    v337 = v293;
    v338 = v299;
    if (v300)
      operator delete(v300);
  }
  else
  {
    *(_QWORD *)v282 = v194;
    v293 = v282 + 8;
  }
  v337 = v293;
  if (v293 >= v338)
  {
    v304 = (v293 - (_BYTE *)v336) >> 3;
    if ((unint64_t)(v304 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v305 = (v338 - (_BYTE *)v336) >> 2;
    if (v305 <= v304 + 1)
      v305 = v304 + 1;
    if ((unint64_t)(v338 - (_BYTE *)v336) >= 0x7FFFFFFFFFFFFFF8)
      v306 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v306 = v305;
    if (v306)
      v307 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v306);
    else
      v307 = 0;
    v308 = &v307[8 * v304];
    v309 = &v307[8 * v306];
    *(_QWORD *)v308 = v183;
    v303 = v308 + 8;
    v311 = (char *)v336;
    v310 = v337;
    if (v337 != v336)
    {
      do
      {
        v312 = *((_QWORD *)v310 - 1);
        v310 -= 8;
        *((_QWORD *)v308 - 1) = v312;
        v308 -= 8;
      }
      while (v310 != v311);
      v310 = (char *)v336;
    }
    v336 = v308;
    v337 = v303;
    v338 = v309;
    if (v310)
      operator delete(v310);
  }
  else
  {
    *(_QWORD *)v293 = v183;
    v303 = v293 + 8;
  }
  v337 = v303;
  v313 = (char *)this + 21296;
  if (v303 >= v338)
  {
    v315 = (v303 - (_BYTE *)v336) >> 3;
    if ((unint64_t)(v315 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v316 = (v338 - (_BYTE *)v336) >> 2;
    if (v316 <= v315 + 1)
      v316 = v315 + 1;
    if ((unint64_t)(v338 - (_BYTE *)v336) >= 0x7FFFFFFFFFFFFFF8)
      v317 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v317 = v316;
    if (v317)
      v318 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v317);
    else
      v318 = 0;
    v319 = &v318[8 * v315];
    v320 = &v318[8 * v317];
    *(_QWORD *)v319 = v313;
    v314 = v319 + 8;
    v322 = (char *)v336;
    v321 = v337;
    if (v337 != v336)
    {
      do
      {
        v323 = *((_QWORD *)v321 - 1);
        v321 -= 8;
        *((_QWORD *)v319 - 1) = v323;
        v319 -= 8;
      }
      while (v321 != v322);
      v321 = (char *)v336;
    }
    v336 = v319;
    v337 = v314;
    v338 = v320;
    if (v321)
      operator delete(v321);
  }
  else
  {
    *(_QWORD *)v303 = v313;
    v314 = v303 + 8;
  }
  v337 = v314;
  if (v314 >= v338)
  {
    v325 = (v314 - (_BYTE *)v336) >> 3;
    if ((unint64_t)(v325 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v326 = (v338 - (_BYTE *)v336) >> 2;
    if (v326 <= v325 + 1)
      v326 = v325 + 1;
    if ((unint64_t)(v338 - (_BYTE *)v336) >= 0x7FFFFFFFFFFFFFF8)
      v327 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v327 = v326;
    if (v327)
      v328 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v338, v327);
    else
      v328 = 0;
    v329 = &v328[8 * v325];
    v330 = &v328[8 * v327];
    *(_QWORD *)v329 = v205;
    v324 = v329 + 8;
    v332 = (char *)v336;
    v331 = v337;
    if (v337 != v336)
    {
      do
      {
        v333 = *((_QWORD *)v331 - 1);
        v331 -= 8;
        *((_QWORD *)v329 - 1) = v333;
        v329 -= 8;
      }
      while (v331 != v332);
      v331 = (char *)v336;
    }
    v336 = v329;
    v337 = v324;
    v338 = v330;
    if (v331)
      operator delete(v331);
  }
  else
  {
    *(_QWORD *)v314 = v205;
    v324 = v314 + 8;
  }
  v337 = v324;
  v334 = *((_QWORD *)this + 2916);
  if (v334 >= *((_QWORD *)this + 2917))
  {
    v335 = std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>((uint64_t *)this + 2915, (uint64_t)&v336);
  }
  else
  {
    std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)this + 23320, (uint64_t)&v336);
    v335 = v334 + 24;
  }
  *((_QWORD *)this + 2916) = v335;
  if (v336)
  {
    v337 = (char *)v336;
    operator delete(v336);
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v342)
  {
    v343 = (char *)v342;
    operator delete(v342);
  }
  if (v345)
  {
    v346 = (char *)v345;
    operator delete(v345);
  }
  if (v348)
  {
    v349 = (char *)v348;
    operator delete(v348);
  }
  if (v351)
  {
    v352 = (char *)v351;
    operator delete(v351);
  }
  if (__p)
  {
    v355 = (char *)__p;
    operator delete(__p);
  }
  if (v357)
  {
    v358 = v357;
    operator delete(v357);
  }
  if (v360)
  {
    v361 = v360;
    operator delete(v360);
  }
}

void sub_1B2EE239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);
  v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(_QWORD *)(v28 - 128) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(v28 - 112);
  if (v31)
  {
    *(_QWORD *)(v28 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2EE24DC()
{
  JUMPOUT(0x1B2EE24B4);
}

void sub_1B2EE24E8()
{
  JUMPOUT(0x1B2EE24C4);
}

OZMaterialSubstanceLayer *OZMaterialSubstanceLayer::clone(OZMaterialSubstanceLayer *this)
{
  OZMaterialSubstanceLayer *v2;

  v2 = (OZMaterialSubstanceLayer *)operator new();
  OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(v2, this, 0);
  return v2;
}

void sub_1B2EE2540(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialSubstanceLayer::fixupImageChannelsOffsetChannel(OZMaterialSubstanceLayer *this, OZLayeredMaterial *a2)
{
  return OZChannelMaterialLayerMap::setImageChannelOffsetChannel((OZMaterialSubstanceLayer *)((char *)this + 14840), a2);
}

uint64_t OZMaterialSubstanceLayer::parseEnd(OZMaterialSubstanceLayer *this, PCSerializerReadStream *a2)
{
  _DWORD *v4;
  int ValueAsInt;
  double v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  OZChannelBase *v11;

  v4 = (_DWORD *)((char *)this + 23344);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 392), 2))
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), MEMORY[0x1E0CA2E68], 0.0);
    if (ValueAsInt == 6)
    {
      v6 = 8.0;
    }
    else
    {
      if (ValueAsInt != 7)
        goto LABEL_7;
      v6 = 6.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 136), MEMORY[0x1E0CA2E68], v6, 0);
  }
LABEL_7:
  v7 = OZMaterialLayerBase::parseEnd(this, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10336), 2, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 22632), 131076);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 16168), 1.0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20584), 2, 0);
  v8 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  v4[1] = v8;
  if (v8 == 2)
  {
    v9 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), MEMORY[0x1E0CA2E68], 0.0);
    *v4 = v9;
    v10 = OZChannelEnum::getNumberOfStrings((OZMaterialSubstanceLayer *)((char *)this + 936)) - 1;
    v11 = (OZChannelBase *)((char *)this + 6944);
    if (v9 == v10)
      OZChannelBase::resetFlag(v11, 0x400000, 0);
    else
      OZChannelBase::setFlag(v11, 0x400000, 0);
  }
  return v7;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::parseEnd(OZMaterialSubstanceLayer *this, PCSerializerReadStream *a2)
{
  return OZMaterialSubstanceLayer::parseEnd((OZMaterialSubstanceLayer *)((char *)this - 16), a2);
}

OZMaterialSubstanceLayerSequenceFolder *OZMaterialSubstanceLayer::makeMaterialLayerSequenceChannelFolder(OZMaterialSubstanceLayer *this)
{
  OZMaterialSubstanceLayerSequenceFolder *v2;

  v2 = (OZMaterialSubstanceLayerSequenceFolder *)operator new();
  OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(v2, (const PCString *)this + 4, 0, *((_DWORD *)this + 6), 0, 0);
  return v2;
}

void sub_1B2EE2730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

BOOL OZMaterialSubstanceLayer::blocksMaterialsBelow(OZMaterialSubstanceLayer *this)
{
  int ValueAsInt;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  return ValueAsInt != 8 && (ValueAsInt & 0xFFFFFFFB) != 2;
}

uint64_t OZMaterialSubstanceLayer::getLayerDescriptions(OZMaterialSubstanceLayer *this, const CMTime *a2)
{
  unsigned int ValueAsInt;
  __CFString *v3;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt > 8)
    v3 = 0;
  else
    v3 = off_1E65A95A0[ValueAsInt];
  return objc_msgSend((id)OZGetSubstanceLayerDictionary(), "objectForKey:", v3);
}

void OZMaterialSubstanceLayer::getBumpGain(uint64_t a1, void *a2, const CMTime *a3)
{
  void *v5;

  v5 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("bump gain"));
  if (v5)
    objc_msgSend(v5, "doubleValue");
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 22176), a3, 0.0);
}

uint64_t OZMaterialSubstanceLayer::getGradientChannel(OZMaterialSubstanceLayer *this, const CMTime *a2)
{
  return (uint64_t)this + 6944;
}

uint64_t OZMaterialSubstanceLayer::getMetalShinyPercentChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 10184;
}

double OZMaterialSubstanceLayer::getSpecularIntensity(OZMaterialSubstanceLayer *this, NSDictionary *a2, const CMTime *a3)
{
  if ((OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0) & 0xFFFFFFFD) != 0)
    return OZMaterialCompoundLayer::getSpecularIntensity(this, a2, a3);
  else
    return 1.0;
}

double OZMaterialSubstanceLayer::getSpecularShininess(OZMaterialSubstanceLayer *this, NSDictionary *a2, const CMTime *a3)
{
  return 0.5;
}

uint64_t OZMaterialSubstanceLayer::getColorChannel(OZMaterialSubstanceLayer *this, const CMTime *a2)
{
  return (uint64_t)this + 10592;
}

void *OZMaterialSubstanceLayer::appendMetalAbsorbLayer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  AbsorbLayer *v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  uint64_t v9;
  CMTimeEpoch v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  os_unfair_lock_s *v17;
  signed int os_unfair_lock_opaque;
  int v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  signed int v27;
  int v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  signed int v31;
  int v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  signed int v35;
  int v36;
  uint64_t v37;
  _OWORD v39[2];
  CMTime v40;

  v6 = (AbsorbLayer *)operator new();
  AbsorbLayer::AbsorbLayer(v6, a1);
  a3->var0 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(a3 + 1, (AbsorbLayer *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  v7 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v39, a3);
  LiLayeredMaterial::appendLayer((uint64_t *)v7, (const PCSharedCount *)v39);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v39 + 1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v39, a3);
  v8 = (_QWORD *)LiMaterialLayerUniform::get(*(os_unfair_lock_s **)a2, (uint64_t)v39);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v39 + 1);
  memset(&v40, 0, sizeof(v40));
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)&v40.value = *(_OWORD *)v9;
  v40.epoch = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 22480), &v40, 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21872), &v40, 0.0);
  v14 = v13;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 22024), &v40, 0.0);
  v16 = v15;
  v17 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  __asm { FMOV            V0.2D, #0.5 }
  v39[0] = _Q0;
  v39[1] = xmmword_1B304F7B0;
  os_unfair_lock_opaque = v17[147]._os_unfair_lock_opaque;
  if ((signed int)v17[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v24 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v24 = v17[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v17[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v24);
  v25 = *(_QWORD *)&v17[148]._os_unfair_lock_opaque + 152 * (int)v17[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v25 - 152) = v8[2];
  ProShade::Value::set(v25 - 144, (const PCString *)3, 4, v39);
  v26 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v27 = v26[147]._os_unfair_lock_opaque;
  if ((signed int)v26[146]._os_unfair_lock_opaque <= v27)
    v28 = (2 * (v27 + 1)) | 1;
  else
    v28 = v26[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v26[144]._os_unfair_lock_opaque, v27 + 1, v28);
  v29 = *(_QWORD *)&v26[148]._os_unfair_lock_opaque + 152 * (int)v26[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v29 - 152) = v8[18];
  *(double *)v39 = v12 * v14;
  ProShade::Value::set(v29 - 144, (const PCString *)3, 1, v39);
  v30 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v31 = v30[147]._os_unfair_lock_opaque;
  if ((signed int)v30[146]._os_unfair_lock_opaque <= v31)
    v32 = (2 * (v31 + 1)) | 1;
  else
    v32 = v30[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v30[144]._os_unfair_lock_opaque, v31 + 1, v32);
  v33 = *(_QWORD *)&v30[148]._os_unfair_lock_opaque + 152 * (int)v30[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v33 - 152) = v8[26];
  *(double *)v39 = v12 * v16;
  ProShade::Value::set(v33 - 144, (const PCString *)3, 1, v39);
  v34 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v35 = v34[147]._os_unfair_lock_opaque;
  if ((signed int)v34[146]._os_unfair_lock_opaque <= v35)
    v36 = (2 * (v35 + 1)) | 1;
  else
    v36 = v34[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v34[144]._os_unfair_lock_opaque, v35 + 1, v36);
  v37 = *(_QWORD *)&v34[148]._os_unfair_lock_opaque + 152 * (int)v34[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v37 - 152) = v8[22];
  *(_QWORD *)&v39[0] = 0x3FF0000000000000;
  return ProShade::Value::set(v37 - 144, (const PCString *)3, 1, v39);
}

void sub_1B2EE2BF0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer::appendLayersToLayeredMaterial(uint64_t a1, uint64_t a2)
{
  int ValueAsInt;
  uint64_t v5;
  PCSharedCount v6;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 648), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 8)
  {
    AppendDiffuseLayerToLayeredMaterial(a1 + 6680, a2);
  }
  else if (ValueAsInt == 6)
  {
    AppendFlatLayerToLayeredMaterial(a1 + 6680, a2);
  }
  else
  {
    if (ValueAsInt == 2)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 1272))(&v5, a1, a2);
      PCSharedCount::~PCSharedCount(&v6);
    }
    OZMaterialCompoundLayer::appendLayersToLayeredMaterial(a1, a2);
  }
}

void OZMaterialSubstanceLayer::appendDiffuseLayer(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

void OZMaterialSubstanceLayer::appendSpecularLayer(uint64_t a1, LiLayeredMaterial **a2, const CMTime *a3, void *a4)
{
  void *lpsrc;
  PCSharedCount v7;

  OZMaterialCompoundLayer::appendSpecularLayer((OZMaterialCompoundLayer *)a1, (uint64_t)a2, a3, a4);
  if (!*a2)
    throw_PCNullPointerException(1);
  LiLayeredMaterial::getTopLayer(*a2, (PCSharedCount *)&lpsrc);
  if (lpsrc
  {
    OZChannel::getValueAsInt((OZChannel *)(a1 + 648), MEMORY[0x1E0CA2E68], 0.0);
  }
  PCSharedCount::~PCSharedCount(&v7);
}

void sub_1B2EE2DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZMaterialSubstanceLayer::hideAllParameters(OZChannelBase *this)
{
  OZChannelBase ***v1;
  __CFString *var0;
  OZChannelBase *v3;
  OZChannelBase **v4;
  OZChannelBase *v5;

  v1 = *(OZChannelBase ****)&this[208].var3;
  var0 = this[208].var4.var0;
  if (v1 != (OZChannelBase ***)var0)
  {
    v3 = this;
    do
    {
      v4 = *v1;
      if (*v1 != v1[1])
      {
        do
        {
          v5 = *v4++;
          this = showHideParam(v5, 0);
        }
        while (v4 != v1[1]);
        var0 = v3[208].var4.var0;
      }
      v1 += 3;
    }
    while (v1 != (OZChannelBase ***)var0);
  }
  return this;
}

OZChannelBase *OZMaterialSubstanceLayer::showParametersForSubstance(OZChannelBase *result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  OZChannelBase **v5;
  OZChannelBase *v6;
  OZChannelBase *v7;

  v2 = *(_QWORD *)&result[208].var3;
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)result[208].var4.var0 - v2) >> 3) > a2)
  {
    v4 = v2 + 24 * a2;
    v5 = *(OZChannelBase ***)v4;
    if (*(_QWORD *)v4 != *(_QWORD *)(v4 + 8))
    {
      v6 = result;
      do
      {
        v7 = *v5++;
        result = showHideParam(v7, 1);
      }
      while (v5 != *(OZChannelBase ***)(*(_QWORD *)&v6[208].var3 + 24 * a2 + 8));
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::resetToDefault(OZChannelFolder *this, uint64_t a2)
{
  uint64_t result;

  result = OZMaterialLayerBase::resetToDefault(this, a2);
  *((_DWORD *)this + 5836) = -1;
  return result;
}

OZChannelBase *OZMaterialSubstanceLayer::channelValueWillBeSet(OZMaterialSubstanceLayer *this, OZChannel *a2, const CMTime *a3, double a4)
{
  OZChannelBase *result;
  OZChannel *v8;

  result = OZMaterialLayerBase::channelValueWillBeSet((OZChannelBase *)this, a2, a3, a4);
  v8 = (OZChannel *)((char *)this + 648);
  if ((OZChannel *)((char *)this + 936) == a2)
  {
    result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
    if (v8 == a2)
    {
LABEL_7:
      OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), a3, 0.0);
      goto LABEL_8;
    }
    if ((_DWORD)result == 2)
    {
LABEL_8:
      OZChannelBase::willBeModified((OZChannelBase *)this + 62, 1);
      return (OZChannelBase *)objc_msgSend((id)objc_msgSend((id)OZGetSubstanceLayerDictionary(), "objectForKey:", CFSTR("Metal")), "count");
    }
  }
  else if (v8 == a2)
  {
    goto LABEL_7;
  }
  return result;
}

OZChannelBase *OZMaterialSubstanceLayer::updateMetalUI(OZMaterialSubstanceLayer *this, int a2)
{
  int v4;
  OZChannelBase *v5;
  OZChannelBase *result;
  OZChannelBase *v7;

  v4 = OZChannelEnum::getNumberOfStrings((OZMaterialSubstanceLayer *)((char *)this + 936)) - 1;
  v5 = (OZChannelBase *)((char *)this + 6944);
  if (v4 == a2)
    result = OZChannelBase::resetFlag(v5, 0x400000, 0);
  else
    result = OZChannelBase::setFlag(v5, 0x400000, 0);
  if (*((_DWORD *)this + 5836) != a2)
  {
    v7 = (OZChannelBase *)((char *)this + 6944);
    if (a2 == 9)
    {
      OZChannelBase::resetFlag(v7, 0x400000, 0);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10184), 0x400000, 0);
    }
    else
    {
      OZChannelBase::setFlag(v7, 0x400000, 0);
    }
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9928), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9672), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8000), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 8704), 0x400000, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7744), 0x400000, 0);
    result = OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7200), 2, 0);
    *((_DWORD *)this + 5836) = a2;
  }
  return result;
}

OZChannelBase *OZMaterialSubstanceLayer::updatePlasticUI(uint64_t a1, int a2)
{
  _BOOL4 v3;
  _BOOL4 v4;

  v3 = a2 != 0;
  showHideParam((OZChannelBase *)(a1 + 10592), a2 == 0);
  showHideParam((OZChannelBase *)(a1 + 11600), v3);
  v4 = OZChannel::getValueAsInt((OZChannel *)(a1 + 936), MEMORY[0x1E0CA2E68], 0.0) == 2;
  showHideParam((OZChannelBase *)(a1 + 2776), v4);
  return showHideParam((OZChannelBase *)(a1 + 22176), v4);
}

uint64_t OZMaterialSubstanceLayer::getDefaultSublayerType(OZMaterialSubstanceLayer *this, int a2)
{
  if (a2 == 4)
    return 9;
  else
    return OZMaterialLayerBase::getDefaultSublayerType(this);
}

void OZMaterialSubstanceLayer::layerUIParameterChanged(OZMaterialSubstanceLayer *this)
{
  OZMaterialLayerBase::layerUIParameterChanged(this);
  OZMaterialSubstanceLayer::updateUI(this);
}

void OZMaterialSubstanceLayer::updateUI(OZMaterialSubstanceLayer *this)
{
  const CMTime *v2;
  unsigned int ValueAsInt;
  int v4;
  int v5;
  PCString v6;

  v2 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), v2, 0.0);
  OZMaterialSubstanceLayer::hideAllParameters((OZChannelBase *)this);
  OZMaterialSubstanceLayer::showParametersForSubstance((OZChannelBase *)this, ValueAsInt);
  if (ValueAsInt == 4)
  {
    PCURL::PCURL((PCURL *)&v6, CFSTR("Material Stone Bump Gain"));
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
LABEL_7:
    PCString::~PCString(&v6);
    goto LABEL_15;
  }
  if (ValueAsInt == 2)
  {
    OZMaterialSubstanceLayer::updateMetalUI(this, v4);
LABEL_4:
    PCURL::PCURL((PCURL *)&v6, CFSTR("Wood Bump Gain"));
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
    PCString::~PCString(&v6);
    goto LABEL_15;
  }
  showHideParam((OZChannelBase *)this + 62, 0);
  if (!ValueAsInt)
  {
    PCURL::PCURL((PCURL *)&v6, CFSTR("Material Concrete Bump Gain"));
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
    goto LABEL_7;
  }
  if (ValueAsInt != 3)
  {
    if (ValueAsInt != 1)
      goto LABEL_4;
    PCURL::PCURL((PCURL *)&v6, CFSTR("Material Fabric Bump Gain"));
    OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
    goto LABEL_7;
  }
  PCURL::PCURL((PCURL *)&v6, CFSTR("Material Plastic Bump Gain"));
  OZChannelBase::setName((OZChannelBase *)this + 198, &v6, 1);
  PCString::~PCString(&v6);
  v5 = OZChannel::getValueAsInt((OZChannel *)this + 68, MEMORY[0x1E0CA2E68], 0.0);
  OZMaterialSubstanceLayer::updatePlasticUI((uint64_t)this, v5);
LABEL_15:
  *((_DWORD *)this + 5837) = ValueAsInt;
}

void sub_1B2EE33D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

__CFString *OZMaterialSubstanceLayer::getLayerTypes(OZMaterialSubstanceLayer *this)
{
  __CFString *v1;
  PCString v3;

  PCURL::PCURL((PCURL *)&v3, CFSTR("Material Substance Selection Enum"));
  v1 = PCString::cf_str(&v3);
  PCString::~PCString(&v3);
  return v1;
}

void sub_1B2EE3450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

__CFString *OZMaterialSubstanceLayer::getLayerSubTypes(OZMaterialSubstanceLayer *this)
{
  __CFString *v1;
  __CFString *v2;
  PCString v4;

  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      PCURL::PCURL((PCURL *)&v4, CFSTR("Material Concrete Selection Enum"));
      v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 1u:
      PCURL::PCURL((PCURL *)&v4, CFSTR("Material Fabric Selection Enum"));
      v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 2u:
      PCURL::PCURL((PCURL *)&v4, CFSTR("Material Metal Selection Enum"));
      v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 3u:
      PCURL::PCURL((PCURL *)&v4, CFSTR("Material Plastic Selection Enum"));
      v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 4u:
      PCURL::PCURL((PCURL *)&v4, CFSTR("Material Stone Selection Enum"));
      v1 = PCString::cf_str(&v4);
      goto LABEL_9;
    case 5u:
      PCURL::PCURL((PCURL *)&v4, CFSTR("Material Wood Selection Enum"));
      v1 = PCString::cf_str(&v4);
LABEL_9:
      v2 = v1;
      PCString::~PCString(&v4);
      break;
    default:
      v2 = 0;
      break;
  }
  return v2;
}

void sub_1B2EE35F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer::getLayerSubTypeImageNames(OZMaterialSubstanceLayer *this@<X0>, PCString *a2@<X8>)
{
  const char *v3;

  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      v3 = "Aged_concrete;Brown_concrete;Brushed_concrete;Colored_concrete;Concrete_panels;Grunge_concrete;Sidewalk;Smooth_concrete";
      goto LABEL_9;
    case 1u:
      v3 = "Blue_Knit;Denim;Jacquard;Leather_orange;Leather_red;Leather_yellow;Plaid;Polka_Dot;Shetland_Wool;Sisal;Stripe"
           "d_Linen;Suede;Tweed;Wool";
      goto LABEL_9;
    case 2u:
      v3 = "Aluminum;Brass;Chrome;Copper;Gold;Nickel;Silver;Steel;-;-";
      goto LABEL_9;
    case 3u:
      v3 = "Shiny Plastic;Matte Plastic;Textured Plastic";
      goto LABEL_9;
    case 4u:
      v3 = "Dark_Granite;Gray_Granite;Limestone;Pink_Granite;Quartz;Red_Granite;Red_Rock;Sandstone;Slate;Travertine;White"
           "_Marble;Yellow_Rock";
      goto LABEL_9;
    case 5u:
      v3 = "Ash;Bamboo;Birdseye_Maple;Burned_Wood;Cedar_Shingles;Old_Planks;Old_Wood;Pine;Redwood;Rosewood;Walnut;Zebrano";
LABEL_9:
      PCString::PCString(a2, v3);
      break;
    default:
      PCSharedCount::PCSharedCount((PCSharedCount *)a2);
      break;
  }
}

BOOL OZMaterialSubstanceLayer::anyGradientChannels(OZMaterialSubstanceLayer *this)
{
  OZChannel *v2;
  const CMTime *v3;
  int ValueAsInt;
  int v5;
  int v6;
  uint64_t v7;

  v2 = (OZChannel *)((char *)this + 648);
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  v5 = OZChannel::getValueAsInt(v2, v3, 0.0);
  v6 = OZChannel::getValueAsInt(v2, v3, 0.0);
  if (ValueAsInt == 3)
  {
    v7 = 10336;
  }
  else
  {
    if (v5 != 8 && v6 != 6)
      return 0;
    v7 = 6688;
  }
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + v7), MEMORY[0x1E0CA2E68], 0.0) == 1;
}

void OZMaterialSubstanceLayer::getGradientChannels(uint64_t a1, void **a2)
{
  OZChannelRef *Ref;
  unint64_t v5;
  OZChannelRef **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  OZChannelRef **v13;
  char *v14;
  char *v15;
  char *v16;
  OZChannelRef *v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1))
  {
    Ref = OZChannelBase::getRef((OZChannelBase *)(a1 + 11600), 0);
    v5 = (unint64_t)a2[2];
    v6 = (OZChannelRef **)a2[1];
    if ((unint64_t)v6 >= v5)
    {
      v8 = ((char *)v6 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v9 = v5 - (_QWORD)*a2;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
      else
        v12 = 0;
      v13 = (OZChannelRef **)&v12[8 * v8];
      v14 = &v12[8 * v11];
      *v13 = Ref;
      v7 = v13 + 1;
      v16 = (char *)*a2;
      v15 = (char *)a2[1];
      if (v15 != *a2)
      {
        do
        {
          v17 = (OZChannelRef *)*((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = (char *)*a2;
      }
      *a2 = v13;
      a2[1] = v7;
      a2[2] = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v6 = Ref;
      v7 = v6 + 1;
    }
    a2[1] = v7;
  }
}

uint64_t OZMaterialSubstanceLayer::getColorChannelForHUD(OZMaterialSubstanceLayer *this)
{
  int ValueAsInt;
  uint64_t v4;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 8 || ValueAsInt == 6)
  {
    v4 = 6688;
  }
  else
  {
    if (ValueAsInt != 3)
      return 0;
    v4 = 10336;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + v4), MEMORY[0x1E0CA2E68], 0.0))
    return 0;
  return (uint64_t)this + 10592;
}

BOOL OZMaterialSubstanceLayer::isAnySharedTransformEnabled(OZMaterialSubstanceLayer *this)
{
  int ValueAsInt;
  BOOL v4;

  if (OZMaterialCompoundLayer::isAnySharedTransformEnabled(this))
    return 1;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 648), MEMORY[0x1E0CA2E68], 0.0);
  v4 = ValueAsInt == 8 || ValueAsInt == 6;
  return v4
      && OZChannel::getValueAsInt((OZChannel *)this + 44, MEMORY[0x1E0CA2E68], 0.0) == 2
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 16808), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

OZChannelBase *OZMaterialSubstanceLayer::updateLocalTransformVisibility(OZMaterialSubstanceLayer *this)
{
  OZMaterialCompoundLayer::updateLocalTransformVisibility(this);
  return OZChannelMaterialMapTransform::updateLocalTransformChannelsVisibility((OZMaterialSubstanceLayer *)((char *)this + 16680));
}

OZChannelBase *OZMaterialSubstanceLayer::setTransformValuesAsDefaults(OZMaterialSubstanceLayer *this)
{
  OZMaterialCompoundLayer::setTransformValuesAsDefaults(this);
  return OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault((OZChannelBase *)((char *)this + 16680));
}

void OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this)
{
  OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer(this);
  JUMPOUT(0x1B5E29170);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E65A8F48;
  *((_QWORD *)this + 2) = &unk_1E65A9458;
  *((_QWORD *)this + 835) = &unk_1E65A94B0;
  v2 = (void **)((char *)this + 23320);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZChannelEnum::~OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 23064));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22912));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22760));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 22632));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22480));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22328));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 22176));
  OZChannel2D::~OZChannel2D((OZMaterialSubstanceLayer *)((char *)this + 21736));
  OZChannel2D::~OZChannel2D((OZMaterialSubstanceLayer *)((char *)this + 21296));
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap((OZMaterialSubstanceLayer *)((char *)this + 14840));
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 11600));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZMaterialSubstanceLayer *)((char *)this + 10592));
  OZChannelEnum::~OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 10336));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 67);
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform((OZMaterialSubstanceLayer *)((char *)this + 6944));
  OZChannelEnum::~OZChannelEnum((OZMaterialSubstanceLayer *)((char *)this + 6688));
  OZMaterialCompoundLayer::~OZMaterialCompoundLayer(this);
}

_DWORD *OZMaterialSubstanceLayer::getImageNodeIDs(uint64_t a1, uint64_t *a2)
{
  int ValueAsUint;
  _DWORD *result;
  uint64_t v5;

  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a1 + 14976), MEMORY[0x1E0CA2E68], 0.0);
  result = operator new(0x18uLL);
  result[4] = ValueAsUint;
  v5 = *a2;
  *(_QWORD *)result = *a2;
  *((_QWORD *)result + 1) = a2;
  *(_QWORD *)(v5 + 8) = result;
  *a2 = (uint64_t)result;
  ++a2[2];
  return result;
}

_QWORD *OZMaterialSubstanceLayer::getImageAndFillChannelList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v3 = OZChannelBase::setRangeName((OZChannelBase *)(a1 + 14840), (const PCString *)(a1 + 6688));
  v5 = v4;
  result = operator new(0x20uLL);
  result[2] = v3;
  result[3] = v5;
  v7 = *a2;
  *result = *a2;
  result[1] = a2;
  *(_QWORD *)(v7 + 8) = result;
  *a2 = (uint64_t)result;
  ++a2[2];
  return result;
}

uint64_t OZMaterialSubstanceLayer::enableDisableEnvironmentDependentChannels(OZMaterialSubstanceLayer *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(OZMaterialSubstanceLayer *))(*(_QWORD *)this + 1184))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 + 288) + 104))(v3 + 288, a2, 0);
}

uint64_t OZMaterialSubstanceLayer::getSequenceColorChannel(OZChannelBase *this)
{
  uint64_t result;
  uint64_t SequenceChannels;

  result = OZMaterialLayerBase::getSequenceChannels(this);
  if (result)
  {
    result = OZMaterialLayerBase::getSequenceChannels(this);
    if (result)
    {
      SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      if (SequenceChannels)
        SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      return SequenceChannels + 128;
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::getSequenceOpacityChannel(OZChannelBase *this)
{
  uint64_t result;
  uint64_t SequenceChannels;

  result = OZMaterialLayerBase::getSequenceChannels(this);
  if (result)
  {
    result = OZMaterialLayerBase::getSequenceChannels(this);
    if (result)
    {
      SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      if (SequenceChannels)
        SequenceChannels = OZMaterialLayerBase::getSequenceChannels(this);
      return SequenceChannels + 1136;
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer::getSequenceColorChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(OZMaterialSubstanceLayer *))(*(_QWORD *)this + 1024))(this);
}

uint64_t OZMaterialSubstanceLayer::getSequenceOpacityChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(OZMaterialSubstanceLayer *))(*(_QWORD *)this + 1032))(this);
}

uint64_t OZMaterialSubstanceLayer::alphaChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22480;
}

uint64_t OZMaterialSubstanceLayer::colorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 10592;
}

uint64_t OZMaterialSubstanceLayer::gradientChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 11600;
}

uint64_t OZMaterialSubstanceLayer::imageChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 14840;
}

uint64_t OZMaterialSubstanceLayer::sharedTransformChannel(OZChannelBase *this)
{
  uint64_t ObjectManipulator;
  uint64_t v2;

  ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  v2 = ObjectManipulator - 16;
  if (!ObjectManipulator)
    v2 = 0;
  return v2 + 1568;
}

uint64_t OZMaterialSubstanceLayer::brightnessChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 21296;
}

uint64_t OZMaterialSubstanceLayer::sequenceChannels(OZChannelBase *this)
{
  uint64_t result;

  result = OZMaterialLayerBase::getSequenceChannels(this);
  if (result)
    return OZMaterialLayerBase::getSequenceChannels(this);
  return result;
}

uint64_t OZMaterialSubstanceLayer::selectionChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 6688;
}

uint64_t OZMaterialSubstanceLayer::metalGradient(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 6944;
}

uint64_t OZMaterialSubstanceLayer::thicknessChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 21736;
}

uint64_t OZMaterialSubstanceLayer::edgeChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22632;
}

uint64_t OZMaterialSubstanceLayer::edgeAmountChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22760;
}

uint64_t OZMaterialSubstanceLayer::edgeInvertChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22912;
}

uint64_t OZMaterialSubstanceLayer::flatOperatorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 23064;
}

uint64_t OZMaterialSubstanceLayer::flatIntensityChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 22328;
}

void `non-virtual thunk to'OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer(OZMaterialSubstanceLayer *this)
{
  OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer((OZMaterialSubstanceLayer *)((char *)this - 16));
}

{
  OZMaterialSubstanceLayer::~OZMaterialSubstanceLayer((OZMaterialSubstanceLayer *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::alphaChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 15800;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::colorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 3912;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::gradientChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 4920;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::imageChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 8160;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::sharedTransformChannel(OZMaterialSubstanceLayer *this)
{
  uint64_t ObjectManipulator;
  uint64_t v2;

  ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this - 6680));
  v2 = ObjectManipulator - 16;
  if (!ObjectManipulator)
    v2 = 0;
  return v2 + 1568;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::brightnessChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 14616;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::edgeChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 15952;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::edgeAmountChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 16080;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::edgeInvertChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 16232;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::flatOperatorChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 0x4000;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::flatIntensityChannel(OZMaterialSubstanceLayer *this)
{
  return (uint64_t)this + 15648;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::sequenceChannels(OZMaterialSubstanceLayer *this)
{
  OZChannelBase *v1;
  uint64_t result;

  v1 = (OZChannelBase *)((char *)this - 6680);
  result = OZMaterialLayerBase::getSequenceChannels((OZChannelBase *)((char *)this - 6680));
  if (result)
    return OZMaterialLayerBase::getSequenceChannels(v1);
  return result;
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::objectManipulator(OZMaterialSubstanceLayer *this)
{
  return OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this - 6680));
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::getSequenceColorChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 835) + 1024))((char *)this - 6680);
}

uint64_t `non-virtual thunk to'OZMaterialSubstanceLayer::getSequenceOpacityChannelIF(OZMaterialSubstanceLayer *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 835) + 1032))((char *)this - 6680);
}

uint64_t std::vector<std::vector<OZChannelBase *>>::__push_back_slow_path<std::vector<OZChannelBase *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<OZChannelBase *>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2EE3FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<OZChannelBase *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>,std::reverse_iterator<std::vector<OZChannelBase *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZChannelBase *>>,std::reverse_iterator<std::vector<OZChannelBase *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t OZCacheManager::setConservative(uint64_t this)
{
  return this;
}

uint64_t OZCacheManager::setHosted(OZCacheManager *this)
{
  char v1;
  uint64_t result;

  v1 = (char)this;
  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.motionapp"));
  if ((result & 1) == 0)
  return result;
}

uint64_t OZCacheManager::Instance(OZCacheManager *this)
{
  if (OZCacheManager::Instance(void)::once != -1)
    dispatch_once(&OZCacheManager::Instance(void)::once, &__block_literal_global_81);
  return OZCacheManager::_instance;
}

uint64_t ___ZN14OZCacheManager8InstanceEv_block_invoke()
{
  OZCacheManager *v0;
  BOOL (*v1);

  v0 = (OZCacheManager *)operator new();
  OZCacheManager::OZCacheManager(v0);
  OZCacheManager::_instance = (uint64_t)v0;
  return PCImage::setGuaranteeMemoryCallback((uint64_t)OZCacheManager::guaranteeMemory, v1);
}

void sub_1B2EE4230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40857988C9);
  _Unwind_Resume(a1);
}

uint64_t OZCacheManager::guaranteeMemory(OZCacheManager *this)
{
  unsigned int v1;
  _BOOL8 MemoryInfo;
  int v3;
  ProShade::Snippet *v4;
  PCMutex *v5;
  OZSceneList *CurrentDoc;
  OZScene *v7;
  OZChannelBase *v8;
  __CFString *LabelCtlrClassName;
  OZSceneList *v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  OZScene *isa;
  PGContext *v16;
  char *info;
  char *data;
  BOOL v19;
  PGContext *v20;
  BOOL v21;
  unint64_t *v23;
  unint64_t v24;

  v1 = this;
  v24 = 0;
  MemoryInfo = PCInfo::getMemoryInfo(0, 0, 0, 0, 0, 0, 0, &v24, v23);
  {
    v3 = 0;
    goto LABEL_3;
  }
  MemoryInfo = PCInfo::isMemoryAvailable((PCInfo *)v1);
  v3 = MemoryInfo;
  {
LABEL_3:
    ProGL::clearTexturePool((ProGL *)MemoryInfo);
      goto LABEL_4;
    MemoryInfo = PCInfo::isMemoryAvailable((PCInfo *)v1);
    v3 = MemoryInfo;
    if (!MemoryInfo)
      goto LABEL_4;
    goto LABEL_36;
  }
  v21 = 1;
  v3 = 1;
LABEL_36:
  if (v21)
    return 1;
LABEL_4:
  v4 = OZSceneList::instance((OZSceneList *)MemoryInfo);
  v5 = (PCMutex *)ProShade::Snippet::code(v4);
  PCMutex::lock(v5);
  CurrentDoc = (OZSceneList *)theApp;
  if (theApp && (CurrentDoc = (OZSceneList *)OZApplication::getCurrentDoc((OZApplication *)theApp)) != 0)
    v7 = (OZScene *)*((_QWORD *)CurrentDoc + 3);
  else
    v7 = 0;
  v8 = (OZChannelBase *)OZSceneList::instance(CurrentDoc);
  LabelCtlrClassName = OZChannelBase::getLabelCtlrClassName(v8);
  v10 = OZSceneList::instance((OZSceneList *)LabelCtlrClassName);
  v11 = OZSceneList::end(v10);
  v13 = v3 ^ 1;
    v13 = 1;
  if (v13 == 1)
  {
    v14 = (char *)v11;
    if (LabelCtlrClassName != (__CFString *)v11)
    {
      do
      {
        isa = (OZScene *)LabelCtlrClassName[1].isa;
        if (isa != v7)
        {
          v16 = (PGContext *)PGGetPerThreadContext();
          OZScene::reloadResources(isa, v16);
            LOBYTE(v3) = PCInfo::isMemoryAvailable((PCInfo *)v1);
        }
        info = (char *)LabelCtlrClassName->info;
        if (info)
        {
          do
          {
            data = info;
            info = *(char **)info;
          }
          while (info);
        }
        else
        {
          do
          {
            data = LabelCtlrClassName->data;
            v19 = *(_QWORD *)data == (_QWORD)LabelCtlrClassName;
            LabelCtlrClassName = (__CFString *)data;
          }
          while (!v19);
        }
          break;
        LabelCtlrClassName = (__CFString *)data;
      }
      while (data != v14);
    }
  }
  if ((v3 & 1) != 0)
  {
    if (v12)
      v19 = v7 == 0;
    else
      v19 = 1;
    if (v19)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (v7)
  {
LABEL_30:
    v20 = (PGContext *)PGGetPerThreadContext();
    OZScene::reloadResources(v7, v20);
  }
LABEL_31:
  PCMutex::unlock(v5);
  return 1;
}

void sub_1B2EE444C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZCacheManager::clearTextureCache(OZCacheManager *this)
{
  PGTextureCache *v1;

  v1 = (PGTextureCache *)PGTextureCache::instance(this);
  PGTextureCache::clear(v1);
}

void OZCacheManager::clearMetalTextureCache(OZCacheManager *this)
{
  OZMetalTextureCache *v1;

  v1 = (OZMetalTextureCache *)OZMetalTextureCache::instance(this);
  OZMetalTextureCache::clear(v1);
}

void OZCacheManager::OZCacheManager(OZCacheManager *this)
{
  unint64_t ImageCacheSize;

  PCSingleton::PCSingleton(this, 0);
  *(_QWORD *)ImageCacheSize = &off_1E65A9618;
  *(_BYTE *)(ImageCacheSize + 24) = 0;
  *(_QWORD *)(ImageCacheSize + 32) = 0;
  *(_DWORD *)(ImageCacheSize + 40) = 0;
  *(_QWORD *)(ImageCacheSize + 48) = 0;
  *(_DWORD *)(ImageCacheSize + 56) = 0;
  *(_QWORD *)(ImageCacheSize + 64) = 0;
  *(_DWORD *)(ImageCacheSize + 72) = 0;
  *(_QWORD *)(ImageCacheSize + 80) = 0;
  {
    ImageCacheSize = OZCacheManager::getImageCacheSize((OZCacheManager *)ImageCacheSize);
    *((_QWORD *)this + 4) = ImageCacheSize;
  }
  PGTextureCache::instance((PGTextureCache *)ImageCacheSize);
}

void sub_1B2EE4508(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

unint64_t OZCacheManager::getImageCacheSize(OZCacheManager *this)
{
  _BOOL8 MemoryInfo;
  unint64_t v2;
  OZPreferenceManager *v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  MemoryInfo = PCInfo::getMemoryInfo((PCInfo *)&v8, &v7, 0, 0, &v6, 0, 0, 0, v5);
  v2 = v8 - (unint64_t)((double)v8 * 0.25);
  v3 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)MemoryInfo);
  return v2 * (int)OZPreferenceManager::getCachePercentage(v3) / 0x64;
}

void OZCacheManager::~OZCacheManager(OZCacheManager *this)
{
  PGTextureCache *v2;
  OZMetalTextureCache *v3;
  OZMetalTextureCache *v4;

  *(_QWORD *)this = &off_1E65A9618;
  v2 = (PGTextureCache *)PGTextureCache::instance(this);
  PGTextureCache::clear(v2);
  v4 = (OZMetalTextureCache *)OZMetalTextureCache::instance(v3);
  OZMetalTextureCache::clear(v4);
  PCSingleton::~PCSingleton(this);
}

{
  OZCacheManager::~OZCacheManager(this);
  JUMPOUT(0x1B5E29170);
}

void OZCacheManager::addImage(_QWORD *a1@<X1>, PCHash128 *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  PMCacheBitmap(a2, a1, a3, a4);
}

void OZCacheManager::getImageForKey(const PCHash128 *a1@<X1>, _QWORD *a2@<X8>)
{
  PMGetCachedBitmap(a1, a2);
}

BOOL OZCacheManager::addTexture(PGTextureCache *a1, uint64_t *a2, __int128 *a3, int a4, PCHash128 *a5)
{
  PGTextureCache *v9;

  v9 = (PGTextureCache *)PGTextureCache::instance(a1);
  return PGTextureCache::add(v9, a2, a3, a4, a5);
}

BOOL OZCacheManager::addTexture(PGTextureCache *a1, uint64_t *a2, HGGPUComputeDevice **a3, PCHash128 *a4)
{
  PGTextureCache *v7;

  v7 = (PGTextureCache *)PGTextureCache::instance(a1);
  return PGTextureCache::add(v7, a2, a3, a4);
}

void OZCacheManager::getTextureForKey(PGTextureCache *a1@<X0>, int a2@<W1>, const PCHash128 *a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;

  v9 = PGTextureCache::instance(a1);
  PGTextureCache::find(v9, a2, a3, a4, a5);
}

void OZCacheManager::getTextureForKey(PGTextureCache *a1@<X0>, HGGPUComputeDevice **a2@<X1>, const PCHash128 *a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;

  v9 = PGTextureCache::instance(a1);
  PGTextureCache::find(v9, a2, a3, a4, a5);
}

uint64_t OZCacheManager::addMetalTexture(OZMetalTextureCache *a1, uint64_t *a2, void *a3, PCHash128 *a4)
{
  OZMetalTextureCache *v7;

  v7 = (OZMetalTextureCache *)OZMetalTextureCache::instance(a1);
  return OZMetalTextureCache::add(v7, a2, a3, a4);
}

void OZCacheManager::getMetalTextureForKey(OZMetalTextureCache *a1@<X0>, void *a2@<X1>, const PCHash128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;

  v7 = OZMetalTextureCache::instance(a1);
  OZMetalTextureCache::find(v7, a2, a3, 0, a4);
}

void OZARPersonAnchorElement::OZARPersonAnchorElement(OZARPersonAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString *v6;
  PCString *v7;
  PCString *v8;
  PCString *v9;
  PCString *v10;
  PCString *v11;
  PCString *v12;
  PCString *v13;
  PCString *v14;
  PCString *v15;
  PCString *v16;
  PCString *v17;
  PCString *v18;
  PCString *v19;
  PCString *v20;
  PCString *v21;
  PCString *v22;
  PCString *v23;
  PCString *v24;
  PCString *v25;
  PCString *v26;
  PCString *v27;
  PCString *v28;
  PCString *v29;
  PCString *v30;
  PCString *v31;
  PCString *v32;
  PCString *v33;
  PCString *v34;
  PCString *v35;
  PCString *v36;
  PCString *v37;
  PCString *v38;
  PCString *v39;
  PCString *v40;
  PCString *v41;
  PCString *v42;
  PCString *v43;
  PCString *v44;
  PCString *v45;
  PCString *v46;
  PCString *v47;
  PCString *v48;
  PCString *v49;
  PCString *v50;
  PCString *v51;
  PCString *v52;
  PCString *v53;
  PCString *v54;
  PCString *v55;
  PCString *v56;
  PCString *v57;
  PCString *v58;
  PCString *v59;
  PCString *v60;
  PCString v61;

  OZARAnchorElement::OZARAnchorElement(this, a2, a3, a4);
  *v5 = &off_1E65A9650;
  v5[2] = &unk_1E65A9F88;
  v5[6] = &unk_1E65AA1E0;
  v5[816] = &unk_1E65AA238;
  Li3DEngineScene::Li3DEngineScene((Li3DEngineScene *)(v5 + 3053));
  *((_OWORD *)this + 1537) = 0u;
  PCString::PCString(&v61, "Person Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24608), &v61, (OZChannelFolder *)((char *)this + 448), 0x190u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v6, "Index");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24736), &v61, (OZChannelFolder *)((char *)this + 24608), 0x191u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v7, "Enable Physics");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24888), 1, &v61, (OZChannelFolder *)((char *)this + 24608), 0x192u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v8, "Bounding Box Origin");
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25040), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C4u, 0, 2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v9, "Bounding Box Size");
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25480), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C5u, 0, 2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v10, "Person Size");
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25920), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C6u, 0, 2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v11, "Is In Frame");
  OZChannelDouble::OZChannelDouble((OZARPersonAnchorElement *)((char *)this + 26360), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C7u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v12, "Physics");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26512), &v61, (OZChannelFolder *)((char *)this + 24608), 0x1C1u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v13, "Mass");
  OZChannelDouble::OZChannelDouble((OZARPersonAnchorElement *)((char *)this + 26640), 1.0, &v61, (OZChannelFolder *)((char *)this + 26512), 0x1C2u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v14, "Sliding Friction");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26792), 0.5, &v61, (OZChannelFolder *)((char *)this + 26512), 0x1C3u, 0, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v15, "Joints");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26944), &v61, (OZChannelFolder *)((char *)this + 24608), 0x193u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v16, "Head");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27072), &v61, (OZChannelFolder *)((char *)this + 26944), 0x194u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v17, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 27200), &v61, (OZChannelFolder *)((char *)this + 27072), 0x195u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v18, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 28088), &v61, (OZChannelFolder *)((char *)this + 27072), 0x196u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v19, "Left Hand");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28944), &v61, (OZChannelFolder *)((char *)this + 26944), 0x197u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v20, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 29072), &v61, (OZChannelFolder *)((char *)this + 28944), 0x198u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v21, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 29960), &v61, (OZChannelFolder *)((char *)this + 28944), 0x199u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v22, "Right Hand");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30816), &v61, (OZChannelFolder *)((char *)this + 26944), 0x19Au, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v23, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 30944), &v61, (OZChannelFolder *)((char *)this + 30816), 0x19Bu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v24, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 31832), &v61, (OZChannelFolder *)((char *)this + 30816), 0x19Cu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v25, "Left Elbow");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 32688), &v61, (OZChannelFolder *)((char *)this + 26944), 0x19Du, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v26, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 32816), &v61, (OZChannelFolder *)((char *)this + 32688), 0x19Eu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v27, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 33704), &v61, (OZChannelFolder *)((char *)this + 32688), 0x19Fu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v28, "Right Elbow");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 34560), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A0u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v29, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 34688), &v61, (OZChannelFolder *)((char *)this + 34560), 0x1A1u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v30, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 35576), &v61, (OZChannelFolder *)((char *)this + 34560), 0x1A2u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v31, "Left Shoulder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 36432), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A3u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v32, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 36560), &v61, (OZChannelFolder *)((char *)this + 36432), 0x1A4u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v33, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 37448), &v61, (OZChannelFolder *)((char *)this + 36432), 0x1A5u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v34, "Right Shoulder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 38304), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A6u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v35, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 38432), &v61, (OZChannelFolder *)((char *)this + 38304), 0x1A7u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v36, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 39320), &v61, (OZChannelFolder *)((char *)this + 38304), 0x1A8u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v37, "Left Hip");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 40176), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1A9u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v38, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 40304), &v61, (OZChannelFolder *)((char *)this + 40176), 0x1AAu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v39, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 41192), &v61, (OZChannelFolder *)((char *)this + 40176), 0x1ABu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v40, "Right Hip");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 42048), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1ACu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v41, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 42176), &v61, (OZChannelFolder *)((char *)this + 42048), 0x1ADu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v42, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 43064), &v61, (OZChannelFolder *)((char *)this + 42048), 0x1AEu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v43, "Left Knee");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 43920), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1AFu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v44, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 44048), &v61, (OZChannelFolder *)((char *)this + 43920), 0x1B0u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v45, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 44936), &v61, (OZChannelFolder *)((char *)this + 43920), 0x1B1u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v46, "Right Knee");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 45792), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1B2u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v47, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 45920), &v61, (OZChannelFolder *)((char *)this + 45792), 0x1B3u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v48, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 46808), &v61, (OZChannelFolder *)((char *)this + 45792), 0x1B4u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v49, "Left Foot");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 47664), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1B5u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v50, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 47792), &v61, (OZChannelFolder *)((char *)this + 47664), 0x1B6u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v51, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 48680), &v61, (OZChannelFolder *)((char *)this + 47664), 0x1B7u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v52, "Right Foot");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49536), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1B8u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v53, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 49664), &v61, (OZChannelFolder *)((char *)this + 49536), 0x1B9u, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v54, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 50552), &v61, (OZChannelFolder *)((char *)this + 49536), 0x1BAu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v55, "Left Foot End");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 51408), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1BBu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v56, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 51536), &v61, (OZChannelFolder *)((char *)this + 51408), 0x1BCu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v57, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 52424), &v61, (OZChannelFolder *)((char *)this + 51408), 0x1BDu, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v58, "Right Foot End");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 53280), &v61, (OZChannelFolder *)((char *)this + 26944), 0x1BEu, 0, 0);
  PCString::~PCString(&v61);
  PCString::PCString(v59, "Position");
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 53408), &v61, (OZChannelFolder *)((char *)this + 53280), 0x1BFu, 0, 3u);
  PCString::~PCString(&v61);
  PCString::PCString(v60, "Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 54296), &v61, (OZChannelFolder *)((char *)this + 53280), 0x1C0u, 0, 4u, 0, 0);
  PCString::~PCString(&v61);
  OZARPersonAnchorElement::init(this);
  OZChannel::setMin((OZChannel *)((char *)this + 24736), 1.0);
  OZChannel::setMax((OZChannel *)((char *)this + 24736), 10.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 24736), 1.0);
}

void sub_1B2EE5560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelRotation3D *a10, OZChannelPosition3D *a11, OZChannelRotation3D *a12, OZChannelPosition3D *a13, OZChannelRotation3D *a14, OZChannelPosition3D *a15, OZChannelRotation3D *a16, OZChannelPosition3D *a17, OZChannelRotation3D *a18, OZChannelPosition3D *a19, OZChannelRotation3D *a20,OZChannelPosition3D *a21,OZChannelRotation3D *a22,OZChannelPosition3D *a23,OZChannelRotation3D *a24,OZChannelPosition3D *a25,OZChannelRotation3D *a26,OZChannelPosition3D *a27,OZChannelRotation3D *a28,OZChannelPosition3D *a29,OZChannelRotation3D *a30,OZChannelPosition3D *a31,OZChannelRotation3D *a32,OZChannelPosition3D *a33,OZChannelRotation3D *a34,OZChannelPosition3D *a35,OZChannelPercent *a36,OZChannel *a37,OZChannel *a38,OZChannel2D *a39,OZChannel2D *a40)
{
  OZARAnchorElement *v40;
  OZChannelFolder *v41;
  OZChannelFolder *v42;
  OZChannelFolder *v43;
  OZChannelFolder *v44;
  OZChannelPosition3D *v45;
  OZChannelRotation3D *v46;
  OZChannelPosition3D *v47;
  uint64_t v48;

  PCString::~PCString((PCString *)(v48 - 96));
  OZChannelPosition3D::~OZChannelPosition3D(v45);
  OZChannelFolder::~OZChannelFolder(v44);
  OZChannelRotation3D::~OZChannelRotation3D(v46);
  OZChannelPosition3D::~OZChannelPosition3D(v47);
  OZChannelFolder::~OZChannelFolder(v41);
  OZChannelRotation3D::~OZChannelRotation3D(a10);
  OZChannelPosition3D::~OZChannelPosition3D(a11);
  OZChannelFolder::~OZChannelFolder(v42);
  OZChannelRotation3D::~OZChannelRotation3D(a12);
  OZChannelPosition3D::~OZChannelPosition3D(a13);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 200));
  OZChannelRotation3D::~OZChannelRotation3D(a14);
  OZChannelPosition3D::~OZChannelPosition3D(a15);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 192));
  OZChannelRotation3D::~OZChannelRotation3D(a16);
  OZChannelPosition3D::~OZChannelPosition3D(a17);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 184));
  OZChannelRotation3D::~OZChannelRotation3D(a18);
  OZChannelPosition3D::~OZChannelPosition3D(a19);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 176));
  OZChannelRotation3D::~OZChannelRotation3D(a20);
  OZChannelPosition3D::~OZChannelPosition3D(a21);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 168));
  OZChannelRotation3D::~OZChannelRotation3D(a22);
  OZChannelPosition3D::~OZChannelPosition3D(a23);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 160));
  OZChannelRotation3D::~OZChannelRotation3D(a24);
  OZChannelPosition3D::~OZChannelPosition3D(a25);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 152));
  OZChannelRotation3D::~OZChannelRotation3D(a26);
  OZChannelPosition3D::~OZChannelPosition3D(a27);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 144));
  OZChannelRotation3D::~OZChannelRotation3D(a28);
  OZChannelPosition3D::~OZChannelPosition3D(a29);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 136));
  OZChannelRotation3D::~OZChannelRotation3D(a30);
  OZChannelPosition3D::~OZChannelPosition3D(a31);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 128));
  OZChannelRotation3D::~OZChannelRotation3D(a32);
  OZChannelPosition3D::~OZChannelPosition3D(a33);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 120));
  OZChannelRotation3D::~OZChannelRotation3D(a34);
  OZChannelPosition3D::~OZChannelPosition3D(a35);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 112));
  OZChannelFolder::~OZChannelFolder(v43);
  OZChannelPercent::~OZChannelPercent(a36);
  OZChannel::~OZChannel(a37);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 104));
  OZChannel::~OZChannel(a38);
  OZChannel2D::~OZChannel2D(a39);
  OZChannel2D::~OZChannel2D(a40);
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 240));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v48 - 232));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 216));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 208));
  Li3DEngineScene::~Li3DEngineScene(*(Li3DEngineScene **)(v48 - 224));
  OZARAnchorElement::~OZARAnchorElement(v40);
  _Unwind_Resume(a1);
}

void OZARPersonAnchorElement::init(OZARPersonAnchorElement *this)
{
  OZPerson3DSCNSceneBuilder *v2;

  v2 = [OZPerson3DSCNSceneBuilder alloc];
  *((_QWORD *)this + 3075) = -[OZPerson3DSCNSceneBuilder initWithName:](v2, "initWithName:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), *((unsigned int *)this + 20)));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26944), 4259872, 0);
  this = (OZARPersonAnchorElement *)((char *)this + 26360);
  OZChannel::setMin((OZChannel *)this, 0.0);
  OZChannel::setMax((OZChannel *)this, 1.0);
}

void OZARPersonAnchorElement::OZARPersonAnchorElement(OZARPersonAnchorElement *this, const OZARPersonAnchorElement *a2, uint64_t a3)
{
  _QWORD *v5;

  OZARAnchorElement::OZARAnchorElement(this, a2, a3);
  *v5 = &off_1E65A9650;
  v5[2] = &unk_1E65A9F88;
  v5[6] = &unk_1E65AA1E0;
  v5[816] = &unk_1E65AA238;
  Li3DEngineScene::Li3DEngineScene((Li3DEngineScene *)(v5 + 3053));
  *((_OWORD *)this + 1537) = 0u;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24608), (const OZChannelFolder *)((char *)a2 + 24608), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 24736), (const OZChannelBase *)((char *)a2 + 24736), (OZChannelFolder *)((char *)this + 24608));
  *((_QWORD *)this + 3092) = &off_1E6551AF8;
  *((_QWORD *)this + 3094) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24888), (const OZChannelBase *)((char *)a2 + 24888), (OZChannelFolder *)((char *)this + 24608));
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25040), (const OZARPersonAnchorElement *)((char *)a2 + 25040), (OZChannelFolder *)((char *)this + 24608));
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25480), (const OZARPersonAnchorElement *)((char *)a2 + 25480), (OZChannelFolder *)((char *)this + 24608));
  OZChannel2D::OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25920), (const OZARPersonAnchorElement *)((char *)a2 + 25920), (OZChannelFolder *)((char *)this + 24608));
  OZChannel::OZChannel((OZChannel *)((char *)this + 26360), (const OZChannelBase *)((char *)a2 + 26360), (OZChannelFolder *)((char *)this + 24608));
  *((_QWORD *)this + 3295) = &off_1E6551358;
  *((_QWORD *)this + 3297) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26512), (const OZChannelFolder *)((char *)a2 + 26512), (OZChannelFolder *)((char *)this + 24608));
  OZChannel::OZChannel((OZChannel *)((char *)this + 26640), (const OZChannelBase *)((char *)a2 + 26640), (OZChannelFolder *)((char *)this + 26512));
  *((_QWORD *)this + 3330) = &off_1E6551358;
  *((_QWORD *)this + 3332) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26792), (const OZChannelBase *)((char *)a2 + 26792), (OZChannelFolder *)((char *)this + 26512));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26944), (const OZChannelFolder *)((char *)a2 + 26944), (OZChannelFolder *)((char *)this + 24608));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27072), (const OZChannelFolder *)((char *)a2 + 27072), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 27200), (const OZARPersonAnchorElement *)((char *)a2 + 27200), (OZChannelFolder *)((char *)this + 27072));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 28088), (const OZARPersonAnchorElement *)((char *)a2 + 28088), (OZChannelFolder *)((char *)this + 27072));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28944), (const OZChannelFolder *)((char *)a2 + 28944), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 29072), (const OZARPersonAnchorElement *)((char *)a2 + 29072), (OZChannelFolder *)((char *)this + 28944));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 29960), (const OZARPersonAnchorElement *)((char *)a2 + 29960), (OZChannelFolder *)((char *)this + 28944));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30816), (const OZChannelFolder *)((char *)a2 + 30816), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 30944), (const OZARPersonAnchorElement *)((char *)a2 + 30944), (OZChannelFolder *)((char *)this + 30816));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 31832), (const OZARPersonAnchorElement *)((char *)a2 + 31832), (OZChannelFolder *)((char *)this + 30816));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 32688), (const OZChannelFolder *)((char *)a2 + 32688), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 32816), (const OZARPersonAnchorElement *)((char *)a2 + 32816), (OZChannelFolder *)((char *)this + 32688));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 33704), (const OZARPersonAnchorElement *)((char *)a2 + 33704), (OZChannelFolder *)((char *)this + 32688));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 34560), (const OZChannelFolder *)((char *)a2 + 34560), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 34688), (const OZARPersonAnchorElement *)((char *)a2 + 34688), (OZChannelFolder *)((char *)this + 34560));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 35576), (const OZARPersonAnchorElement *)((char *)a2 + 35576), (OZChannelFolder *)((char *)this + 34560));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 36432), (const OZChannelFolder *)((char *)a2 + 36432), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 36560), (const OZARPersonAnchorElement *)((char *)a2 + 36560), (OZChannelFolder *)((char *)this + 36432));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 37448), (const OZARPersonAnchorElement *)((char *)a2 + 37448), (OZChannelFolder *)((char *)this + 36432));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 38304), (const OZChannelFolder *)((char *)a2 + 38304), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 38432), (const OZARPersonAnchorElement *)((char *)a2 + 38432), (OZChannelFolder *)((char *)this + 38304));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 39320), (const OZARPersonAnchorElement *)((char *)a2 + 39320), (OZChannelFolder *)((char *)this + 38304));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 40176), (const OZChannelFolder *)((char *)a2 + 40176), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 40304), (const OZARPersonAnchorElement *)((char *)a2 + 40304), (OZChannelFolder *)((char *)this + 40176));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 41192), (const OZARPersonAnchorElement *)((char *)a2 + 41192), (OZChannelFolder *)((char *)this + 40176));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 42048), (const OZChannelFolder *)((char *)a2 + 42048), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 42176), (const OZARPersonAnchorElement *)((char *)a2 + 42176), (OZChannelFolder *)((char *)this + 42048));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 43064), (const OZARPersonAnchorElement *)((char *)a2 + 43064), (OZChannelFolder *)((char *)this + 42048));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 43920), (const OZChannelFolder *)((char *)a2 + 43920), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 44048), (const OZARPersonAnchorElement *)((char *)a2 + 44048), (OZChannelFolder *)((char *)this + 43920));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 44936), (const OZARPersonAnchorElement *)((char *)a2 + 44936), (OZChannelFolder *)((char *)this + 43920));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 45792), (const OZChannelFolder *)((char *)a2 + 45792), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 45920), (const OZARPersonAnchorElement *)((char *)a2 + 45920), (OZChannelFolder *)((char *)this + 45792));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 46808), (const OZARPersonAnchorElement *)((char *)a2 + 46808), (OZChannelFolder *)((char *)this + 45792));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 47664), (const OZChannelFolder *)((char *)a2 + 47664), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 47792), (const OZARPersonAnchorElement *)((char *)a2 + 47792), (OZChannelFolder *)((char *)this + 47664));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 48680), (const OZARPersonAnchorElement *)((char *)a2 + 48680), (OZChannelFolder *)((char *)this + 47664));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49536), (const OZChannelFolder *)((char *)a2 + 49536), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 49664), (const OZARPersonAnchorElement *)((char *)a2 + 49664), (OZChannelFolder *)((char *)this + 49536));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 50552), (const OZARPersonAnchorElement *)((char *)a2 + 50552), (OZChannelFolder *)((char *)this + 49536));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 51408), (const OZChannelFolder *)((char *)a2 + 51408), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 51536), (const OZARPersonAnchorElement *)((char *)a2 + 51536), (OZChannelFolder *)((char *)this + 51408));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 52424), (const OZARPersonAnchorElement *)((char *)a2 + 52424), (OZChannelFolder *)((char *)this + 51408));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 53280), (const OZChannelFolder *)((char *)a2 + 53280), (OZChannelFolder *)((char *)this + 26944));
  OZChannelPosition3D::OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 53408), (const OZARPersonAnchorElement *)((char *)a2 + 53408), (OZChannelFolder *)((char *)this + 53280));
  OZChannelRotation3D::OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 54296), (const OZARPersonAnchorElement *)((char *)a2 + 54296), (OZChannelFolder *)((char *)this + 53280));
  OZARPersonAnchorElement::init(this);
}

void sub_1B2EE6358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelRotation3D *a9, OZChannelPosition3D *a10, OZChannelRotation3D *a11, OZChannelPosition3D *a12, OZChannelFolder *a13, OZChannelRotation3D *a14, OZChannelPosition3D *a15, OZChannelFolder *a16, OZChannelRotation3D *a17, OZChannelPosition3D *a18, OZChannelFolder *a19, OZChannelRotation3D *a20,OZChannelPosition3D *a21,OZChannelFolder *a22,OZChannelRotation3D *a23,OZChannelPosition3D *a24,OZChannelFolder *a25,OZChannelRotation3D *a26,OZChannelPosition3D *a27,OZChannelFolder *a28,OZChannelRotation3D *a29,OZChannelPosition3D *a30,OZChannelFolder *a31,OZChannelRotation3D *a32,OZChannelPosition3D *a33,OZChannelFolder *a34,OZChannelRotation3D *a35,OZChannelPosition3D *a36,OZChannelFolder *a37,OZChannelRotation3D *a38,OZChannelPosition3D *a39)
{
  OZARAnchorElement *v39;
  OZChannelFolder *v40;
  OZChannelRotation3D *v41;
  OZChannelPosition3D *v42;
  OZChannelFolder *v43;
  OZChannelRotation3D *v44;
  OZChannelPosition3D *v45;
  OZChannelFolder *v46;
  OZChannelFolder *v47;
  uint64_t v48;

  OZChannelRotation3D::~OZChannelRotation3D(v44);
  OZChannelPosition3D::~OZChannelPosition3D(v45);
  OZChannelFolder::~OZChannelFolder(v46);
  OZChannelRotation3D::~OZChannelRotation3D(v41);
  OZChannelPosition3D::~OZChannelPosition3D(v42);
  OZChannelFolder::~OZChannelFolder(v47);
  OZChannelRotation3D::~OZChannelRotation3D(a9);
  OZChannelPosition3D::~OZChannelPosition3D(a10);
  OZChannelFolder::~OZChannelFolder(v40);
  OZChannelRotation3D::~OZChannelRotation3D(a11);
  OZChannelPosition3D::~OZChannelPosition3D(a12);
  OZChannelFolder::~OZChannelFolder(a13);
  OZChannelRotation3D::~OZChannelRotation3D(a14);
  OZChannelPosition3D::~OZChannelPosition3D(a15);
  OZChannelFolder::~OZChannelFolder(a16);
  OZChannelRotation3D::~OZChannelRotation3D(a17);
  OZChannelPosition3D::~OZChannelPosition3D(a18);
  OZChannelFolder::~OZChannelFolder(a19);
  OZChannelRotation3D::~OZChannelRotation3D(a20);
  OZChannelPosition3D::~OZChannelPosition3D(a21);
  OZChannelFolder::~OZChannelFolder(a22);
  OZChannelRotation3D::~OZChannelRotation3D(a23);
  OZChannelPosition3D::~OZChannelPosition3D(a24);
  OZChannelFolder::~OZChannelFolder(a25);
  OZChannelRotation3D::~OZChannelRotation3D(a26);
  OZChannelPosition3D::~OZChannelPosition3D(a27);
  OZChannelFolder::~OZChannelFolder(a28);
  OZChannelRotation3D::~OZChannelRotation3D(a29);
  OZChannelPosition3D::~OZChannelPosition3D(a30);
  OZChannelFolder::~OZChannelFolder(a31);
  OZChannelRotation3D::~OZChannelRotation3D(a32);
  OZChannelPosition3D::~OZChannelPosition3D(a33);
  OZChannelFolder::~OZChannelFolder(a34);
  OZChannelRotation3D::~OZChannelRotation3D(a35);
  OZChannelPosition3D::~OZChannelPosition3D(a36);
  OZChannelFolder::~OZChannelFolder(a37);
  OZChannelRotation3D::~OZChannelRotation3D(a38);
  OZChannelPosition3D::~OZChannelPosition3D(a39);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 232));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v48 - 224));
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v48 - 216));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 208));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v48 - 200));
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v48 - 192));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 184));
  OZChannelFolder::~OZChannelFolder(v43);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v48 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 168));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 152));
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 144));
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 136));
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v48 - 128));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v48 - 120));
  OZChannel::~OZChannel(*(OZChannel **)(v48 - 112));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v48 - 104));
  Li3DEngineScene::~Li3DEngineScene(*(Li3DEngineScene **)(v48 - 96));
  OZARAnchorElement::~OZARAnchorElement(v39);
  _Unwind_Resume(a1);
}

void sub_1B2EE6554()
{
  JUMPOUT(0x1B2EE63A4);
}

void sub_1B2EE655C()
{
  JUMPOUT(0x1B2EE63ACLL);
}

void sub_1B2EE6564()
{
  JUMPOUT(0x1B2EE63B4);
}

void sub_1B2EE656C()
{
  JUMPOUT(0x1B2EE63BCLL);
}

void sub_1B2EE6574()
{
  JUMPOUT(0x1B2EE63C4);
}

void sub_1B2EE657C()
{
  JUMPOUT(0x1B2EE63CCLL);
}

void sub_1B2EE6584()
{
  JUMPOUT(0x1B2EE63D4);
}

void sub_1B2EE658C()
{
  JUMPOUT(0x1B2EE63DCLL);
}

void sub_1B2EE6594()
{
  JUMPOUT(0x1B2EE63E4);
}

void sub_1B2EE659C()
{
  JUMPOUT(0x1B2EE63ECLL);
}

void sub_1B2EE65A4()
{
  JUMPOUT(0x1B2EE63F4);
}

void sub_1B2EE65AC()
{
  JUMPOUT(0x1B2EE63FCLL);
}

void sub_1B2EE65B4()
{
  JUMPOUT(0x1B2EE6404);
}

void sub_1B2EE65BC()
{
  JUMPOUT(0x1B2EE640CLL);
}

void sub_1B2EE65C4()
{
  JUMPOUT(0x1B2EE6414);
}

void sub_1B2EE65CC()
{
  JUMPOUT(0x1B2EE641CLL);
}

void sub_1B2EE65D4()
{
  JUMPOUT(0x1B2EE6424);
}

void sub_1B2EE65DC()
{
  JUMPOUT(0x1B2EE642CLL);
}

void sub_1B2EE65E4()
{
  JUMPOUT(0x1B2EE6434);
}

void sub_1B2EE65EC()
{
  JUMPOUT(0x1B2EE643CLL);
}

void sub_1B2EE65F4()
{
  JUMPOUT(0x1B2EE6444);
}

void sub_1B2EE65FC()
{
  JUMPOUT(0x1B2EE644CLL);
}

void sub_1B2EE6604()
{
  JUMPOUT(0x1B2EE6454);
}

void sub_1B2EE660C()
{
  JUMPOUT(0x1B2EE645CLL);
}

void sub_1B2EE6614()
{
  JUMPOUT(0x1B2EE6464);
}

void sub_1B2EE661C()
{
  JUMPOUT(0x1B2EE646CLL);
}

void sub_1B2EE6624()
{
  JUMPOUT(0x1B2EE6474);
}

void sub_1B2EE662C()
{
  JUMPOUT(0x1B2EE647CLL);
}

void sub_1B2EE6634()
{
  JUMPOUT(0x1B2EE6484);
}

void sub_1B2EE663C()
{
  JUMPOUT(0x1B2EE648CLL);
}

void sub_1B2EE6644()
{
  JUMPOUT(0x1B2EE6494);
}

void sub_1B2EE664C()
{
  JUMPOUT(0x1B2EE649CLL);
}

void sub_1B2EE6654()
{
  JUMPOUT(0x1B2EE64A4);
}

void sub_1B2EE665C()
{
  JUMPOUT(0x1B2EE64ACLL);
}

void sub_1B2EE6664()
{
  JUMPOUT(0x1B2EE64B4);
}

void sub_1B2EE666C()
{
  JUMPOUT(0x1B2EE64BCLL);
}

void sub_1B2EE6674()
{
  JUMPOUT(0x1B2EE64C4);
}

void sub_1B2EE667C()
{
  JUMPOUT(0x1B2EE64CCLL);
}

void sub_1B2EE6684()
{
  JUMPOUT(0x1B2EE64D4);
}

void sub_1B2EE668C()
{
  JUMPOUT(0x1B2EE64DCLL);
}

void sub_1B2EE6694()
{
  JUMPOUT(0x1B2EE64E4);
}

void sub_1B2EE669C()
{
  JUMPOUT(0x1B2EE64ECLL);
}

void sub_1B2EE66A4()
{
  JUMPOUT(0x1B2EE64F4);
}

void sub_1B2EE66AC()
{
  JUMPOUT(0x1B2EE64FCLL);
}

void sub_1B2EE66B4()
{
  JUMPOUT(0x1B2EE6504);
}

void sub_1B2EE66BC()
{
  JUMPOUT(0x1B2EE650CLL);
}

void sub_1B2EE66C4()
{
  JUMPOUT(0x1B2EE6514);
}

void sub_1B2EE66CC()
{
  JUMPOUT(0x1B2EE651CLL);
}

void sub_1B2EE66D4()
{
  JUMPOUT(0x1B2EE6524);
}

void sub_1B2EE66DC()
{
  JUMPOUT(0x1B2EE652CLL);
}

void sub_1B2EE66E4()
{
  JUMPOUT(0x1B2EE6534);
}

void sub_1B2EE66EC()
{
  JUMPOUT(0x1B2EE653CLL);
}

void sub_1B2EE66F4()
{
  JUMPOUT(0x1B2EE6544);
}

void OZARPersonAnchorElement::~OZARPersonAnchorElement(OZARPersonAnchorElement *this)
{
  *(_QWORD *)this = &off_1E65A9650;
  *((_QWORD *)this + 2) = &unk_1E65A9F88;
  *((_QWORD *)this + 6) = &unk_1E65AA1E0;
  *((_QWORD *)this + 816) = &unk_1E65AA238;

  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 54296));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 53408));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 53280));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 52424));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 51536));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 51408));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 50552));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 49664));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 49536));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 48680));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 47792));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 47664));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 46808));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 45920));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 45792));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 44936));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 44048));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 43920));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 43064));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 42176));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 42048));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 41192));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 40304));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 40176));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 39320));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 38432));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 38304));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 37448));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 36560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 36432));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 35576));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 34688));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 34560));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 33704));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 32816));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 32688));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 31832));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 30944));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 30816));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 29960));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 29072));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 28944));
  OZChannelRotation3D::~OZChannelRotation3D((OZARPersonAnchorElement *)((char *)this + 28088));
  OZChannelPosition3D::~OZChannelPosition3D((OZARPersonAnchorElement *)((char *)this + 27200));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 27072));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 26944));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 26792));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26640));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 26512));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 26360));
  OZChannel2D::~OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25920));
  OZChannel2D::~OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25480));
  OZChannel2D::~OZChannel2D((OZARPersonAnchorElement *)((char *)this + 25040));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 24888));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24736));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24608));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 24568, *((PCSharedCount **)this + 3072));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 24544, *((_QWORD **)this + 3069));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3067);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 24504, *((id **)this + 3064));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3061);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 24424));
  OZARAnchorElement::~OZARAnchorElement(this);
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZARPersonAnchorElement::~OZARPersonAnchorElement(OZARPersonAnchorElement *this)
{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 16));
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 48));
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 6528));
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZARPersonAnchorElement::~OZARPersonAnchorElement((OZARPersonAnchorElement *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZARPersonAnchorElement::parseEnd(OZARPersonAnchorElement *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZ3DEngineSceneElement::parseEnd(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26944), 4259872, 0);
  return v3;
}

uint64_t `non-virtual thunk to'OZARPersonAnchorElement::parseEnd(OZARPersonAnchorElement *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZ3DEngineSceneElement::parseEnd((OZARPersonAnchorElement *)((char *)this - 48), a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26896), 4259872, 0);
  return v3;
}

uint64_t OZARPersonAnchorElement::didAddToScene(OZTransformNode *this, OZScene *a2)
{
  OZ3DEngineSceneElement::didAddToScene(this, a2);
  return objc_msgSend((id)(*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)this + 2288))(this), "setName:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), *((unsigned int *)this + 20)));
}

void OZARPersonAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

void `non-virtual thunk to'OZARPersonAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

double OZARPersonAnchorElement::calcAutomaticUnitSize(OZARPersonAnchorElement *this)
{
  return 1.0;
}

double OZARPersonAnchorElement::getLocalVolume(uint64_t a1, uint64_t a2, CMTime *a3)
{
  double v6;
  double v7;
  double result;
  double v9;

  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26056), a3, 0.0);
    v9 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 26208), a3, 0.0);
    *(float64x2_t *)a2 = vmulq_n_f64((float64x2_t)xmmword_1B3560580, v9);
    *(float64x2_t *)(a2 + 16) = vmulq_n_f64((float64x2_t)xmmword_1B3560580, v7);
    result = -250.0;
    *(_OWORD *)(a2 + 32) = xmmword_1B3560590;
  }
  return result;
}

uint64_t OZARPersonAnchorElement::get3DScene(OZARPersonAnchorElement *this)
{
  SCNScene *v2;

  if (!*((_QWORD *)this + 3074))
  {
    v2 = (SCNScene *)objc_opt_new();
    *((_QWORD *)this + 3074) = v2;
    Li3DEngineScene::set((OZARPersonAnchorElement *)((char *)this + 24424), v2);
  }
  return (uint64_t)this + 24424;
}

uint64_t OZARPersonAnchorElement::get3DNode(id *this)
{
  std::recursive_mutex *v2;
  std::recursive_mutex *v3;
  uint64_t v4;

  v2 = (std::recursive_mutex *)(*((uint64_t (**)(id *))*this + 292))(this);
  if (!v2)
    return 0;
  v3 = v2;
  std::recursive_mutex::lock(v2);
  v4 = objc_msgSend(this[3075], "getRootNode");
  std::recursive_mutex::unlock(v3);
  return v4;
}

void sub_1B2EE6D48(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZARPersonAnchorElement::setIsPersonInScene(OZARPersonAnchorElement *this, const CMTime *a2, int a3)
{
  double v3;

  v3 = 0.0;
  if (a3)
    v3 = 1.0;
  return OZChannel::setValue((OZChannel *)((char *)this + 26360), a2, v3, 0);
}

void OZARPersonAnchorElement::applyARDataFromScene(OZARPersonAnchorElement *this, CMTime *a2)
{
  _BOOL8 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  std::recursive_mutex *v12;
  std::recursive_mutex *v13;
  double v14;
  CMTime v15;

  if ((*(uint64_t (**)(OZARPersonAnchorElement *))(*(_QWORD *)this + 272))(this))
  {
    v15 = *a2;
    v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 24888), &v15, 0.0) != 0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26640), &v15, 0.0);
    v6 = v5;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26792), &v15, 0.0);
    v8 = v7;
    objc_msgSend(*((id *)this + 3075), "enablePhysics:", v4);
    *(float *)&v9 = v6;
    objc_msgSend(*((id *)this + 3075), "setMass:", v9);
    *(float *)&v10 = v8;
    objc_msgSend(*((id *)this + 3075), "setFriction:", v10);
    OZElement::getOpacity((OZElement *)this, &v15, 0);
    *(float *)&v11 = v11;
    objc_msgSend(*((id *)this + 3075), "setOpacity:", v11);
    v12 = (std::recursive_mutex *)(*(uint64_t (**)(OZARPersonAnchorElement *))(*(_QWORD *)this + 2336))(this);
    if (v12)
    {
      v13 = v12;
      std::recursive_mutex::lock(v12);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26056), &v15, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26208), &v15, 0.0);
      *(float *)&v14 = v14;
      objc_msgSend(*((id *)this + 3075), "updateSimpleGeometry:", v14);
      std::recursive_mutex::unlock(v13);
    }
  }
}

void sub_1B2EE6EB0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZARPersonAnchorElement::getTransformFolder(OZARPersonAnchorElement *this, int a2)
{
  uint64_t v2;

  switch(a2)
  {
    case 1:
      v2 = 27072;
      break;
    case 2:
      v2 = 28944;
      break;
    case 3:
      v2 = 32688;
      break;
    case 4:
      v2 = 36432;
      break;
    case 5:
      v2 = 30816;
      break;
    case 6:
      v2 = 34560;
      break;
    case 7:
      v2 = 38304;
      break;
    case 8:
      v2 = 47664;
      break;
    case 9:
      v2 = 49536;
      break;
    case 11:
      v2 = 43920;
      break;
    case 12:
      v2 = 40176;
      break;
    case 13:
      v2 = 45792;
      break;
    case 14:
      v2 = 42048;
      break;
    case 15:
      v2 = 51408;
      break;
    case 16:
      v2 = 53280;
      break;
    default:
      v2 = 26944;
      break;
  }
  return (uint64_t)this + v2;
}

uint64_t OZARPersonAnchorElement::setTransform(OZARPersonAnchorElement *a1, const CMTime *a2, __int128 *a3, int a4)
{
  uint64_t TransformFolder;
  int v7;
  const void *Descendant;
  OZChannelPosition3D *v9;
  const void *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _OWORD v15[3];
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  TransformFolder = OZARPersonAnchorElement::getTransformFolder(a1, a4);
  v7 = *(_DWORD *)(TransformFolder + 24);
  Descendant = (const void *)OZChannelFolder::getDescendant((OZChannelFolder *)TransformFolder, v7 + 1);
  if (Descendant)
  else
    v9 = 0;
  v10 = (const void *)OZChannelFolder::getDescendant((OZChannelFolder *)TransformFolder, v7 + 2);
  if (v10)
  else
    v11 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 4;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  PCMatrix44Tmpl<double>::getTransformation(a3, (uint64_t)v15);
  OZChannelPosition3D::setValue(v9, a2, *(double *)v15, *((double *)v15 + 1), *(double *)&v15[1]);
  v13 = v11[17];
  v12 = (char *)(v11 + 17);
  (*(void (**)(char *, const CMTime *, _QWORD, double))(v13 + 712))(v12, a2, 0, *(double *)&v17);
  (*(void (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)v12 + 19) + 712))(v12 + 152, a2, 0, *((double *)&v17 + 1));
  return (*(uint64_t (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)v12 + 38) + 712))(v12 + 304, a2, 0, *(double *)&v18);
}

uint64_t OZARPersonAnchorElement::setBoundingBox(_QWORD *a1, double *a2, uint64_t a3)
{
  (*(void (**)(_QWORD *, uint64_t, _QWORD, double))(a1[3202] + 712))(a1 + 3202, a3, 0, a2[2]);
  (*(void (**)(_QWORD *, uint64_t, _QWORD, double))(a1[3221] + 712))(a1 + 3221, a3, 0, a2[3]);
  (*(void (**)(_QWORD *, uint64_t, _QWORD, double))(a1[3147] + 712))(a1 + 3147, a3, 0, *a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, double))(a1[3166] + 712))(a1 + 3166, a3, 0, a2[1]);
}

uint64_t OZARPersonAnchorElement::setSize(uint64_t a1, double *a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)(a1 + 26056) + 712))(a1 + 26056, a3, 0, *a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)(a1 + 26208) + 712))(a1 + 26208, a3, 0, a2[1]);
}

uint64_t OZHostApplicationDelegateHandler::wantsExtraLineSpacingForDiacritics(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsExtraLineSpacingForDiacritics");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsDynamicLineSpacingForDiacritics(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsDynamicLineSpacingForDiacritics");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToScaleEmojiToCapHeight(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToScaleEmojiToCapHeight");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToSkipSuggestedLineBreaksInParagraphLayout(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToSkipSuggestedLineBreaksInParagraphLayout");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToUseBinarySearchForScalingToBothMargins(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToUseBinarySearchForScalingToBothMargins");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToLimitLinesOfText(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToLimitLinesOfText");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::getNumberOfLinesToLimitTextTo(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "getNumberOfLinesToLimitTextTo");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToImproveQualityOfDraftQualityText");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsSameAlignmentForAllLinesOfText(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsSameAlignmentForAllLinesOfText");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToDownscaleGlyphsToOutputSize(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToDownscaleGlyphsToOutputSize");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToSetTranscriptionsUsingArray(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToSetTranscriptionsUsingArray");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfTransparentObjects(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToIgnoreTextBoundsOfTransparentObjects");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfNewlinesOfTranscriptions(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToIgnoreTextBoundsOfNewlinesOfTranscriptions");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToUseCachedTextureForText(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToUseCachedTextureForText");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToIncludeSubstituteFontNameInAttributedString(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToIncludeSubstituteFontNameInAttributedString");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToIncludeTrackingValueInAttributedString(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToIncludeTrackingValueInAttributedString");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToComputeTypographicHeightWithoutLastLineLeading(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToComputeTypographicHeightWithoutLastLineLeading");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToAdjustTextBoundsHeightUsingCapHeight(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToAdjustTextBoundsHeightUsingCapHeight");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToIncludeTrailingWhitespaceInParagraphLineWidth(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToIncludeTrailingWhitespaceInParagraphLineWidth");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToCacheTopLevelGroupRender(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToCacheTopLevelGroupRender");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToAssertThatLoadedSceneHasAnimateFlagDisabled(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToAssertThatLoadedSceneHasAnimateFlagDisabled");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::wantsToAssertThatTopLevelGroupSpansEntireScene(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "wantsToAssertThatTopLevelGroupSpansEntireScene");
  else
    return 0;
}

uint64_t OZHostApplicationDelegateHandler::getMaxGlyphResolution(void **this)
{
  void *v1;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "getMaxGlyphResolution");
  else
    return 4096;
}

CMMetadataFormatDescriptionRef OZSimplyCreateCMMetadataFormatDescriptionForRawDataWithIdentifier(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const __CFArray *v3;
  CMMetadataFormatDescriptionRef formatDescriptionOut;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = *MEMORY[0x1E0CA2518];
  v6[0] = *MEMORY[0x1E0CA2528];
  v6[1] = v1;
  formatDescriptionOut = 0;
  v2 = *MEMORY[0x1E0CA2440];
  v7[0] = a1;
  v7[1] = v2;
  v8[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v3 = (const __CFArray *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
  if (CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x6D656278u, v3, &formatDescriptionOut))
  {
    return 0;
  }
  else
  {
    return formatDescriptionOut;
  }
}

void OZFontFamily::~OZFontFamily(PCString *this)
{
  PCString *v2;

  v2 = this + 2;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  PCString::~PCString(this + 1);
  PCString::~PCString(this);
}

uint64_t OZFontFamily::getTypefaceIndex(OZFontFamily *this, const PCString *a2)
{
  PCString **v2;
  PCString **v3;
  uint64_t v5;
  PCString *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = (PCString **)*((_QWORD *)this + 2);
  v3 = (PCString **)*((_QWORD *)this + 3);
  if (v2 == v3)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *v2;
    v7 = (std::__shared_weak_count *)v2[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = PCString::compare(v6 + 1, a2);
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (!v10)
      break;
    v2 += 2;
    v5 = (v5 + 1);
    if (v2 == v3)
      return 0;
  }
  return v5;
}

void sub_1B2EE79BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void OZLayer::OZLayer(OZLayer *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZGroup::OZGroup(this, a2, a3, a4);
  *v4 = &off_1E65AA328;
  v4[2] = &unk_1E65AAC68;
  v4[6] = &unk_1E65AAEC0;
  v4[816] = &unk_1E65AAF18;
}

void OZLayer::OZLayer(OZLayer *this, const OZLayer *a2, uint64_t a3)
{
  _QWORD *v3;

  OZGroup::OZGroup(this, a2, a3);
  *v3 = &off_1E65AA328;
  v3[2] = &unk_1E65AAC68;
  v3[6] = &unk_1E65AAEC0;
  v3[816] = &unk_1E65AAF18;
}

void OZLayer::~OZLayer(OZLayer *this)
{
  OZGroup::~OZGroup(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZLayer::~OZLayer(OZLayer *this)
{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 16));
}

{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 48));
}

{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 6528));
}

{
  OZGroup::~OZGroup((OZLayer *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

void OZFolderElementShadows::OZFolderElementShadows(OZFolderElementShadows *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  PCString v11;

  Instance = (OZFactory *)OZFolderElementShadows_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E65AB008;
  *((_QWORD *)this + 2) = &unk_1E65AB2F0;
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Shadows Cast"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 128), 1, &v11, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Shadows Receive"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 280), 1, &v11, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Shadows Only"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), 0, &v11, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v11);
}

void sub_1B2EE7C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;
  OZChannelBool *v11;
  OZChannelBool *v12;

  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

uint64_t OZFolderElementShadows_Factory::getInstance(OZFolderElementShadows_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFolderElementShadows_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFolderElementShadows_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFolderElementShadows_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFolderElementShadows_Factory::_instance;
}

void OZFolderElementShadows::OZFolderElementShadows(OZFolderElementShadows *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *v5 = &off_1E65AB008;
  v5[2] = &unk_1E65AB2F0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Shadows Cast"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 128), 1, &v6, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Shadows Receive"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 280), 1, &v6, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Shadows Only"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), 0, &v6, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v6);
}

void sub_1B2EE7E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;
  OZChannelBool *v11;
  OZChannelBool *v12;

  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelBool::~OZChannelBool(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows::OZFolderElementShadows(OZFolderElementShadows *this, const OZFolderElementShadows *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E65AB008;
  *(_QWORD *)(v5 + 16) = &unk_1E65AB2F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 280), (const OZChannelBase *)((char *)a2 + 280), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), (const OZChannelBase *)((char *)a2 + 432), (OZChannelFolder *)this);
}

void sub_1B2EE7F44(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannelBool *v2;
  OZChannelBool *v3;

  OZChannelBool::~OZChannelBool(v3);
  OZChannelBool::~OZChannelBool(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows::~OZFolderElementShadows(OZFolderElementShadows *this)
{
  *(_QWORD *)this = &off_1E65AB008;
  *((_QWORD *)this + 2) = &unk_1E65AB2F0;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 432));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 280));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  OZFolderElementShadows::~OZFolderElementShadows(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFolderElementShadows::~OZFolderElementShadows(OZFolderElementShadows *this)
{
  OZFolderElementShadows::~OZFolderElementShadows((OZFolderElementShadows *)((char *)this - 16));
}

{
  OZFolderElementShadows::~OZFolderElementShadows((OZFolderElementShadows *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZFolderElementShadows::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    OZChannelFolder::operator=(a1);
  return a1;
}

OZFolderElementShadows *OZFolderElementShadows::copy(OZFolderElementShadows *this, const OZFolderElementShadows *a2, const CMTime *a3)
{
  int ValueAsInt;
  int v7;
  int v8;

  if (a2 != this)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 128), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 128), a3, (double)ValueAsInt, 0);
    v7 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 280), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 280), a3, (double)v7, 0);
    v8 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 432), a3, 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 432), a3, (double)v8, 0);
  }
  return this;
}

uint64_t `non-virtual thunk to'OZFolderElementShadows::writeBody(OZFolderElementShadows *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

void std::__call_once_param<std::tuple<OZFolderElementShadows_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFolderElementShadows_Factory *v0;

  v0 = (OZFolderElementShadows_Factory *)operator new();
  OZFolderElementShadows_Factory::OZFolderElementShadows_Factory(v0);
  OZFolderElementShadows_Factory::_instance = (uint64_t)v0;
}

void sub_1B2EE8154(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZFolderElementShadows_Factory::OZFolderElementShadows_Factory(OZFolderElementShadows_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B35605E0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65AB360;
  *((_QWORD *)this + 16) = &unk_1E65AB430;
}

void sub_1B2EE81F4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZFolderElementShadows *OZFolderElementShadows_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZFolderElementShadows *v6;

  v6 = (OZFolderElementShadows *)operator new();
  OZFolderElementShadows::OZFolderElementShadows(v6, this, a2, a3);
  return v6;
}

void sub_1B2EE8264(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40824C21A9);
  _Unwind_Resume(a1);
}

OZFolderElementShadows *OZFolderElementShadows_Factory::createCopy(OZFolderElementShadows_Factory *this, OZFactoryBase *a2)
{
  OZFolderElementShadows *v3;
  const OZFolderElementShadows *v4;

  v3 = (OZFolderElementShadows *)operator new();
  OZFolderElementShadows::OZFolderElementShadows(v3, v4, 0);
  return v3;
}

void sub_1B2EE82F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40824C21A9);
  _Unwind_Resume(a1);
}

OZFolderElementShadows *OZFolderElementShadows_Factory::createChannelCopy(OZFolderElementShadows_Factory *this, OZChannelBase *a2)
{
  OZFolderElementShadows *v3;
  const OZFolderElementShadows *v4;

  v3 = (OZFolderElementShadows *)operator new();
  OZFolderElementShadows::OZFolderElementShadows(v3, v4, 0);
  return v3;
}

void sub_1B2EE837C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40824C21A9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelBlendMode_Factory::getInstance(OZChannelBlendMode_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBlendMode_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBlendMode_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBlendMode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBlendMode_Factory::_instance;
}

void OZChannelBlendMode::OZChannelBlendMode(OZChannelBlendMode *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelBlendMode_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, a3, a4, Instance, a5, a6, a7, 0, 0);
  *(_QWORD *)this = &off_1E65AB488;
  *((_QWORD *)this + 2) = &unk_1E65AB7F8;
}

void OZChannelBlendMode::OZChannelBlendMode(OZChannelBlendMode *this, const OZChannelBlendMode *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelEnum::OZChannelEnum(this, a2, a3);
  *v3 = &off_1E65AB488;
  v3[2] = &unk_1E65AB7F8;
}

void `non-virtual thunk to'OZChannelBlendMode::~OZChannelBlendMode(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this - 2);
}

{
  OZChannelEnum::~OZChannelEnum(this - 2);
  JUMPOUT(0x1B5E29170);
}

void OZChannelBlendMode::~OZChannelBlendMode(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this);
  JUMPOUT(0x1B5E29170);
}

OZChannelEnum *OZChannelBlendMode::clone(OZChannelBlendMode *this)
{
  OZChannelEnum *v2;

  v2 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v2, this, 0);
  *(_QWORD *)v2 = &off_1E65AB488;
  *((_QWORD *)v2 + 2) = &unk_1E65AB7F8;
  return v2;
}

void sub_1B2EE856C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelBlendMode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBlendMode_Factory *v0;

  v0 = (OZChannelBlendMode_Factory *)operator new();
  OZChannelBlendMode_Factory::OZChannelBlendMode_Factory(v0);
  OZChannelBlendMode_Factory::_instance = (uint64_t)v0;
}

void sub_1B2EE85D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelBlendMode_Factory::OZChannelBlendMode_Factory(OZChannelBlendMode_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B35558F0;
  v4 = xmmword_1B355DBF0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65AB868;
  *((_QWORD *)this + 16) = &unk_1E65AB938;
}

void sub_1B2EE8674(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannel *OZChannelBlendMode_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannel *v6;

  v6 = (OZChannel *)operator new();
  OZChannelEnum::OZChannelEnum(v6, this, a2, a3, 0, 0);
  v6->var0 = (void **)&off_1E65AB488;
  v6->var2 = (void **)&unk_1E65AB7F8;
  return v6;
}

void sub_1B2EE8700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelBlendMode_Factory::createCopy(OZChannelBlendMode_Factory *this, OZFactoryBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65AB488;
  *((_QWORD *)v3 + 2) = &unk_1E65AB7F8;
  return v3;
}

void sub_1B2EE87A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelBlendMode_Factory::createChannelCopy(OZChannelBlendMode_Factory *this, OZChannelBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65AB488;
  *((_QWORD *)v3 + 2) = &unk_1E65AB7F8;
  return v3;
}

void sub_1B2EE8840(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZElementRender::OZElementRender(OZElementRender *this, OZElement *a2, OZImageNode *a3, const OZRenderParams *a4)
{
  *((_QWORD *)this + 183) = &off_1E65EB048;
  *((_QWORD *)this + 184) = 0;
  *((_BYTE *)this + 1480) = 1;
  LiImageSource::LiImageSource((LiImageSource *)((char *)this + 1448), (uint64_t *)&off_1E65ABBB0);
  OZImageNodeRender::OZImageNodeRender(this, (OZImageNode *)&off_1E65ABB88, a3, a4);
  *(_QWORD *)this = &off_1E65AB9A0;
  *((_QWORD *)this + 181) = &unk_1E65ABAA0;
  *((_QWORD *)this + 183) = &unk_1E65ABB68;
  *((_QWORD *)this + 180) = a2;
}

void sub_1B2EE8908(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZChannelBase *v2;
  uint64_t v3;

  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E65ABBB0);
  *(_QWORD *)(v1 + 1464) = v3 + 16;
  *(_BYTE *)(v1 + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1472));
  _Unwind_Resume(a1);
}

uint64_t OZElementRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 1440) + 1480))(*(_QWORD *)(a1 + 1440), a3, a1 + 16);
  return 1;
}

uint64_t `virtual thunk to'OZElementRender::getBoundary(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 48) + 1440) + 1480))(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 48) + 1440), a3, (uint64_t)a1 + *(_QWORD *)(*a1 - 48) + 16);
  return 1;
}

double OZElementRender::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10;
  uint64_t v11;
  double result;
  _QWORD v13[2];
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 1440) + 1480))(*(_QWORD *)(a1 + 1440), v14, a1 + 16);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 1440) + 1512))(v13, *(_QWORD *)(a1 + 1440), v14);
  v10 = v13[0];
  v11 = v13[1];
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 24) = v10;
  *(_OWORD *)(a3 + 32) = xmmword_1B304EEE0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = v11;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  return result;
}

double `virtual thunk to'OZElementRender::fixPixelTransform(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return OZElementRender::fixPixelTransform((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2, a3);
}

void OZImageNodeRender::~OZImageNodeRender(OZImageNodeRender *this)
{
  OZChannelBase *v2;

  *(_QWORD *)this = &off_1E65AC080;
  v2 = (OZChannelBase *)((char *)this + 1440);
  *((_QWORD *)this + 180) = &unk_1E65AC178;
  *((_QWORD *)this + 182) = &unk_1E65AC240;
  OZRenderParams::~OZRenderParams((OZImageNodeRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E65AC270);
  *((_QWORD *)this + 182) = &off_1E65EB048;
  *((_BYTE *)this + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);
}

{
  OZChannelBase *v2;

  *(_QWORD *)this = &off_1E65AC080;
  v2 = (OZChannelBase *)((char *)this + 1440);
  *((_QWORD *)this + 180) = &unk_1E65AC178;
  *((_QWORD *)this + 182) = &unk_1E65AC240;
  OZRenderParams::~OZRenderParams((OZImageNodeRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E65AC270);
  *((_QWORD *)this + 182) = &off_1E65EB048;
  *((_BYTE *)this + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZImageNodeRender::~OZImageNodeRender(OZImageNodeRender *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *(_QWORD *)v1 = &off_1E65AC080;
  *((_QWORD *)v1 + 180) = &unk_1E65AC178;
  *((_QWORD *)v1 + 182) = &unk_1E65AC240;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E65AC270);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *(_QWORD *)v1 = &off_1E65AC080;
  *((_QWORD *)v1 + 180) = &unk_1E65AC178;
  *((_QWORD *)v1 + 182) = &unk_1E65AC240;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E65AC270);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
  JUMPOUT(0x1B5E29170);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65AC080;
  *((_QWORD *)v1 + 180) = &unk_1E65AC178;
  *((_QWORD *)v1 + 182) = &unk_1E65AC240;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E65AC270);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65AC080;
  *((_QWORD *)v1 + 180) = &unk_1E65AC178;
  *((_QWORD *)v1 + 182) = &unk_1E65AC240;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E65AC270);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
  JUMPOUT(0x1B5E29170);
}

void OZElementRender::~OZElementRender(OZElementRender *this)
{
  OZChannelBase *v2;

  *(_QWORD *)this = &off_1E65ABBF0;
  v2 = (OZChannelBase *)((char *)this + 1448);
  *((_QWORD *)this + 181) = &off_1E65ABCE8;
  *((_QWORD *)this + 183) = &off_1E65ABDB0;
  OZRenderParams::~OZRenderParams((OZElementRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E65ABBB0);
  *((_QWORD *)this + 183) = &off_1E65EB048;
  *((_BYTE *)this + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 184);
}

{
  OZChannelBase *v2;

  *(_QWORD *)this = &off_1E65ABBF0;
  v2 = (OZChannelBase *)((char *)this + 1448);
  *((_QWORD *)this + 181) = &off_1E65ABCE8;
  *((_QWORD *)this + 183) = &off_1E65ABDB0;
  OZRenderParams::~OZRenderParams((OZElementRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E65ABBB0);
  *((_QWORD *)this + 183) = &off_1E65EB048;
  *((_BYTE *)this + 1480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 184);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZElementRender::~OZElementRender(OZElementRender *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *(_QWORD *)v1 = &off_1E65ABBF0;
  *((_QWORD *)v1 + 181) = &off_1E65ABCE8;
  *((_QWORD *)v1 + 183) = &off_1E65ABDB0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1E65ABBB0);
  *((_QWORD *)v1 + 183) = &off_1E65EB048;
  v1[1480] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *(_QWORD *)v1 = &off_1E65ABBF0;
  *((_QWORD *)v1 + 181) = &off_1E65ABCE8;
  *((_QWORD *)v1 + 183) = &off_1E65ABDB0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1E65ABBB0);
  *((_QWORD *)v1 + 183) = &off_1E65EB048;
  v1[1480] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);
  JUMPOUT(0x1B5E29170);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65ABBF0;
  *((_QWORD *)v1 + 181) = &off_1E65ABCE8;
  *((_QWORD *)v1 + 183) = &off_1E65ABDB0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1E65ABBB0);
  *((_QWORD *)v1 + 183) = &off_1E65EB048;
  v1[1480] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65ABBF0;
  *((_QWORD *)v1 + 181) = &off_1E65ABCE8;
  *((_QWORD *)v1 + 183) = &off_1E65ABDB0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1448), (const PCString *)&off_1E65ABBB0);
  *((_QWORD *)v1 + 183) = &off_1E65EB048;
  v1[1480] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 184);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZTextureSource::OZTextureSource(uint64_t a1, const PCSharedCount *a2, __int128 *a3, __int128 *a4, int a5, uint64_t a6, __int128 *a7)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  PC_Sp_counted_base *var0;
  PCSharedCount v24;

  var0 = a2->var0;
  PCSharedCount::PCSharedCount(&v24, a2 + 1);
  *(_QWORD *)a1 = &unk_1E65AC040;
  *(_QWORD *)(a1 + 8) = var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 16), &v24);
  PCSharedCount::~PCSharedCount(&v24);
  *(_QWORD *)a1 = &off_1E65ABFE8;
  v13 = *a3;
  v14 = a3[1];
  v15 = a3[2];
  *(_OWORD *)(a1 + 72) = a3[3];
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 24) = v13;
  v16 = a3[4];
  v17 = a3[5];
  v18 = a3[6];
  *(_OWORD *)(a1 + 136) = a3[7];
  *(_OWORD *)(a1 + 120) = v18;
  *(_OWORD *)(a1 + 104) = v17;
  *(_OWORD *)(a1 + 88) = v16;
  v19 = *a4;
  *(_OWORD *)(a1 + 168) = a4[1];
  *(_OWORD *)(a1 + 152) = v19;
  *(_DWORD *)(a1 + 184) = a5;
  *(_QWORD *)(a1 + 192) = a6;
  v20 = *a7;
  v21 = a7[1];
  *(_OWORD *)(a1 + 232) = a7[2];
  *(_OWORD *)(a1 + 216) = v21;
  *(_OWORD *)(a1 + 200) = v20;
  return a1;
}

void sub_1B2EE9174(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZTextureSource::makeTexture@<X0>(OZTextureSource *this@<X0>, LiRenderParameters **a2@<X1>, _QWORD *a3@<X8>)
{
  const void *HeliumRenderer;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v9);
  v8[0] = 0;
  v8[1] = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)((char *)this + 168)));
  HeliumRenderer = (const void *)LiAgent::getHeliumRenderer(a2);
  PGHelium::renderNodeToMetalTexture(HeliumRenderer, &v9, (unsigned int *)v8, *((_DWORD *)this + 46), (OZTextureSource *)((char *)this + 200), a3);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return result;
}

void sub_1B2EE9220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

void OZTextureSource::getHelium(OZTextureSource *this@<X0>, const LiRenderParameters **a2@<X1>, HGNode **a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  int32x4_t v14;
  unint64_t v15;
  PCSharedCount v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int32x4_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __n128 v34[29];
  _BYTE v35[24];
  PCSharedCount v36;
  void *v37;
  int v38;
  uint64_t v39;
  CGColorSpace *v40;
  std::__shared_weak_count *v41;

  LiRenderParameters::LiRenderParameters((LiRenderParameters *)v35, a2[6]);
  LiAgent::LiAgent((LiAgent *)v34, (const LiRenderParameters *)v35, 1);
  v25 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 152)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 168)));
  LiAgent::setClientROI(v34, (__n128 *)&v25);
  v25.i64[0] = *((_QWORD *)this + 1);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v25.u64[1], (const PCSharedCount *)this + 2);
  v5 = *(_OWORD *)((char *)this + 104);
  v30 = *(_OWORD *)((char *)this + 88);
  v31 = v5;
  v6 = *(_OWORD *)((char *)this + 136);
  v32 = *(_OWORD *)((char *)this + 120);
  v33 = v6;
  v7 = *(_OWORD *)((char *)this + 40);
  v26 = *(_OWORD *)((char *)this + 24);
  v27 = v7;
  v8 = *(_OWORD *)((char *)this + 56);
  v9 = *(_OWORD *)((char *)this + 72);
  v15 = v25.i64[0];
  v28 = v8;
  v29 = v9;
  PCSharedCount::PCSharedCount(&v16, (const PCSharedCount *)&v25.u64[1]);
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  v14 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 152)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)((char *)this + 168)));
  HGNodeForImageSourceTransformPair((LiAgent *)v34, (uint64_t)&v15, (uint64_t)&v14, a3);
  PCSharedCount::~PCSharedCount(&v16);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v25.u64[1]);
  LiAgent::~LiAgent((LiAgent *)v34);
  v10 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v40);
  v37 = &unk_1E64FC2F8;
  if (v38 < 0)
    v13 = 1;
  else
    v13 = v38;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v37, 0, v13);
  if (v39)
    MEMORY[0x1B5E2914C](v39, 0x1000C8077774924);
  v39 = 0;
  v38 = 0;
  PCSharedCount::~PCSharedCount(&v36);
}

void sub_1B2EE9430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  PCSharedCount *v48;
  PCSharedCount *v49;

  PCSharedCount::~PCSharedCount(v49);
  PCSharedCount::~PCSharedCount(v48);
  LiAgent::~LiAgent((LiAgent *)&a48);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x308]);
  _Unwind_Resume(a1);
}

void OZTextureSource::~OZTextureSource(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&unk_1E65AC040;
  PCSharedCount::~PCSharedCount(this + 2);
}

{
  this->var0 = (PC_Sp_counted_base *)&unk_1E65AC040;
  PCSharedCount::~PCSharedCount(this + 2);
  JUMPOUT(0x1B5E29170);
}

void OZImageNodeRender::OZImageNodeRender(OZImageNodeRender *this, OZImageNode *a2, const OZRenderParams *a3, const OZRenderParams *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *((_QWORD *)a2 + 1);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = a3;
  OZRenderParams::OZRenderParams((OZImageNodeRender *)((char *)this + 16), a4);
}

void OZImageNodeRender::OZImageNodeRender(OZImageNodeRender *this, OZImageNode *a2, const OZRenderParams *a3)
{
  *((_QWORD *)this + 182) = &off_1E65EB048;
  *((_QWORD *)this + 183) = 0;
  *((_BYTE *)this + 1472) = 1;
  LiImageSource::LiImageSource((LiImageSource *)((char *)this + 1440), (uint64_t *)&off_1E65AC270);
  *((_QWORD *)this + 180) = &unk_1E65AC178;
  *((_QWORD *)this + 182) = &unk_1E65AC240;
  *(_QWORD *)this = &off_1E65AC080;
  *((_QWORD *)this + 1) = a2;
  OZRenderParams::OZRenderParams((OZImageNodeRender *)((char *)this + 16), a3);
}

void sub_1B2EE95D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZChannelBase *v2;
  uint64_t v3;

  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E65AC270);
  *(_QWORD *)(v1 + 1456) = v3 + 16;
  *(_BYTE *)(v1 + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1464));
  _Unwind_Resume(a1);
}

uint64_t OZImageNodeRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a3, a1 + 16);
  return 1;
}

uint64_t `virtual thunk to'OZImageNodeRender::getBoundary(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 48) + 8) + 16))(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 48) + 8), a3, (uint64_t)a1 + *(_QWORD *)(*a1 - 48) + 16);
  return 1;
}

uint64_t OZImageNodeRender::filteredEdges(OZImageNodeRender *this)
{
  return 0;
}

uint64_t `virtual thunk to'OZImageNodeRender::filteredEdges(OZImageNodeRender *this)
{
  return 0;
}

uint64_t OZImageNodeRender::pixelTransformSupport(OZImageNodeRender *this, const LiRenderParameters *a2)
{
  return 3;
}

uint64_t `virtual thunk to'OZImageNodeRender::pixelTransformSupport(OZImageNodeRender *this, const LiRenderParameters *a2)
{
  return 3;
}

CGColorSpace **OZImageNodeRender::getHelium(OZImageNodeRender *this, LiAgent *a2)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  CGColorSpace *CGColorSpace;
  int v17;
  int v18;
  char v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t RequestedColorDescription;
  CGColorSpace *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t HeliumRenderer;
  double v32;
  char v34;
  FxColorDescription v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45[3];

  v43 = 0.0;
  v44 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)v45 = _Q0;
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  if (v9
  {
    v11 = v10;
    v34 = 0;
    v12 = 185;
    v9 = v10;
  }
  else
  {
    v11 = 0;
    v34 = 1;
    v12 = 2;
  }
  (*(void (**)(_QWORD *, double *, char *))(*v9 + 8 * v12))(v9, &v43, (char *)this + 16);
  v13 = vcvtpd_s64_f64(v44 + v45[1]) - vcvtmd_s64_f64(v44 + 0.0000001);
  v14 = *((_DWORD *)this + 85);
  v15 = *((_DWORD *)this + 86);
  OZRenderParams::setWidth((OZImageNodeRender *)((char *)this + 16), vcvtpd_s64_f64(v43 + v45[0]) - vcvtmd_s64_f64(v43 + 0.0000001));
  OZRenderParams::setHeight((OZImageNodeRender *)((char *)this + 16), v13);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace((FxColorDescription *)((char *)this + 16), CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)this + 16, *(float *)(*((_QWORD *)a2 + 6) + 192));
  v17 = *((_DWORD *)this + 84);
  if (*(_DWORD *)(*(_QWORD *)LiAgent::getRenderDevice((LiRenderParameters **)a2) + 8))
    v18 = 2;
  else
    v18 = 1;
  OZRenderParams::setImageType((uint64_t)this + 16, v18);
  v19 = *((_BYTE *)this + 376);
  *((_BYTE *)this + 376) = 1;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  v20 = (__int128 *)*((_QWORD *)a2 + 20);
  v21 = v20[3];
  v23 = *v20;
  v22 = v20[1];
  v37 = v20[2];
  v38 = v21;
  v36[0] = v23;
  v36[1] = v22;
  v24 = v20[7];
  v26 = v20[4];
  v25 = v20[5];
  v41 = v20[6];
  v42 = v24;
  v39 = v26;
  v40 = v25;
  RequestedColorDescription = LiAgent::getRequestedColorDescription(a2);
  v28 = *(CGColorSpace **)RequestedColorDescription;
  v35._pcColorDesc._colorSpaceRef._obj = v28;
  if (v28)
    PCCFRefTraits<CGColorSpace *>::retain(v28);
  v29 = *(_QWORD *)(RequestedColorDescription + 8);
  v35._pcColorDesc._toneMapMethod._gain = *(float *)(RequestedColorDescription + 16);
  *(_QWORD *)&v35._pcColorDesc._dynamicRange = v29;
  v35._isPremultiplied = *(_BYTE *)(RequestedColorDescription + 24);
  v30 = *((_QWORD *)this + 1);
  HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  (*(void (**)(uint64_t, char *, uint64_t, FxColorDescription *, _OWORD *))(*(_QWORD *)v30 + 192))(v30, (char *)this + 16, HeliumRenderer, &v35, v36);
  LiAgent::setActualColorDescription((CGColorSpace **)a2, &v35);
  OZRenderParams::setWidth((OZImageNodeRender *)((char *)this + 16), v14);
  OZRenderParams::setHeight((OZImageNodeRender *)((char *)this + 16), v15);
  OZRenderParams::setImageType((uint64_t)this + 16, v17);
  *((_BYTE *)this + 376) = v19;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  if ((v34 & 1) == 0)
  {
    v32 = (*(double (**)(_QWORD *))(*v11 + 1328))(v11);
    if (v32 != 1.0)
    {
      *(double *)v36 = v32 * *(double *)v36;
      *(double *)&v37 = v32 * *(double *)&v37;
      *(double *)&v39 = v32 * *(double *)&v39;
      *(double *)&v41 = v32 * *(double *)&v41;
    }
  }
  LiAgent::setPixelTransform((uint64_t)a2, (uint64_t)v36);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v35._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2EE993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **`virtual thunk to'OZImageNodeRender::getHelium(OZImageNodeRender *this, LiAgent *a2)
{
  return OZImageNodeRender::getHelium((OZImageNodeRender *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 184)), a2);
}

unint64_t OZImageNodeRender::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  const void *v3;
  OZImageElement *v5;

  v3 = *(const void **)(a1 + 8);
  if (v3
  {
    return OZImageElement::estimateRenderMemory(v5, a2, (unsigned int *)(a1 + 16));
  }
  else
  {
    return 0;
  }
}

unint64_t `virtual thunk to'OZImageNodeRender::estimateRenderMemory(_QWORD *a1, uint64_t a2)
{
  return OZImageNodeRender::estimateRenderMemory((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2);
}

_QWORD *OZImageNodeRender::print(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  PCString *Name;
  char *CStr;
  char *v16;
  size_t v17;

  LiImageSource::printIndent(a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"OZImageNodeRender:\n", 19);
  LiImageSource::printIndent(a2, a3 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"_imageNode = ", 13);
  result = (_QWORD *)std::ostream::operator<<();
  if (*(_QWORD *)(a1 + 8))
  {
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", type = ", 9);
    v8 = *(_QWORD **)(a1 + 8);
    if (!v8)
      __cxa_bad_typeid();
    v9 = v7;
    v10 = (const char *)(*(_QWORD *)(*(_QWORD *)(*v8 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    result = *(_QWORD **)(a1 + 8);
    if (result)
    {
      if (result)
      {
        v12 = result;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", name = ", 9);
        Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v12 + 2));
        CStr = PCString::createCStr(Name);
        if (CStr)
        {
          v16 = CStr;
          v17 = strlen(CStr);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v16, v17);
          free(v16);
        }
        return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      }
    }
  }
  return result;
}

void OZChannelRetimeFrame::OZChannelRetimeFrame(OZChannelRetimeFrame *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  _QWORD *v6;

  OZChannelDouble::OZChannelDouble(this, a2, a3, a4, a5, a6, 0, 0);
  *v6 = &off_1E65AC4C0;
  v6[2] = &unk_1E65AC820;
  v6[7] |= 0x100uLL;
}

void OZChannelRetimeFrame::OZChannelRetimeFrame(OZChannelRetimeFrame *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannel::OZChannel((OZChannel *)this, a2, a3);
  *v3 = &off_1E65AC4C0;
  v3[2] = &unk_1E65AC820;
  v3[7] |= 0x100uLL;
}

void `non-virtual thunk to'OZChannelRetimeFrame::~OZChannelRetimeFrame(OZChannelRetimeFrame *this)
{
  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));
}

{
  OZChannel::~OZChannel((OZChannel *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelRetimeFrame::~OZChannelRetimeFrame(OZChannel *this)
{
  OZChannel::~OZChannel(this);
  JUMPOUT(0x1B5E29170);
}

OZChannel *OZChannelRetimeFrame::clone(const OZChannelBase *this)
{
  OZChannel *v2;

  v2 = (OZChannel *)operator new();
  OZChannel::OZChannel(v2, this, 0);
  v2->var0 = (void **)&off_1E65AC4C0;
  v2->var2 = (void **)&unk_1E65AC820;
  v2->var7 |= 0x100uLL;
  return v2;
}

void sub_1B2EE9C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChanFootageRef::OZChanFootageRef(OZChanFootageRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t v5;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5);
  *(_QWORD *)v5 = &off_1E65AC890;
  *(_QWORD *)(v5 + 16) = &unk_1E65ACC10;
  *(_WORD *)(v5 + 157) = 0;
}

void OZChanFootageRef::OZChanFootageRef(OZChanFootageRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  _QWORD *v5;
  _BYTE *v6;
  char v7;
  char v8;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *v5 = &off_1E65AC890;
  v5[2] = &unk_1E65ACC10;
  if (v6)
  {
    v7 = v6[157];
    v8 = v6[158];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *((_BYTE *)this + 157) = v7;
  *((_BYTE *)this + 158) = v8;
}

void `non-virtual thunk to'OZChanFootageRef::~OZChanFootageRef(OZChanFootageRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanFootageRef *)((char *)this - 16));
}

{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanFootageRef *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChanFootageRef::~OZChanFootageRef(OZChanFootageRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);
  JUMPOUT(0x1B5E29170);
}

OZChanFootageRef *OZChanFootageRef::clone(OZChanFootageRef *this)
{
  OZChanFootageRef *v2;

  v2 = (OZChanFootageRef *)operator new();
  OZChanFootageRef::OZChanFootageRef(v2, this, 0);
  return v2;
}

void sub_1B2EE9DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C7FA5B0DLL);
  _Unwind_Resume(a1);
}

uint64_t OZChanFootageRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *lpsrc)
{
  void *v4;
  unsigned int (*v5)(void);

  if (!lpsrc)
    return 0;
  if (BYTE5(this[1].var5))
  {
    if (!v4)
      return 0;
    v5 = *(unsigned int (**)(void))(*(_QWORD *)v4 + 1352);
  }
  else
  {
    if (!BYTE6(this[1].var5))
    {
      if (v4)
        return OZChanSceneNodeRef::canReferenceObject(this, lpsrc);
      return 0;
    }
    if (!v4)
      return 0;
    v5 = *(unsigned int (**)(void))(*(_QWORD *)v4 + 1360);
  }
  if (v5())
    return OZChanSceneNodeRef::canReferenceObject(this, lpsrc);
  return 0;
}

void OZ3DEnginePhysicsBehavior::OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;
  PCString v7;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 536));
  *(_QWORD *)this = &off_1E65ACC80;
  *((_QWORD *)this + 2) = &unk_1E65ACF48;
  *((_QWORD *)this + 6) = &unk_1E65AD1A0;
  *((_QWORD *)this + 42) = &unk_1E65AD1F8;
  *((_QWORD *)this + 67) = &unk_1E65AD220;
  PCString::PCString(&v7, "None;Static;Dynamic;Kinematic");
  PCString::PCString(&v6, "Type");
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsBehavior *)((char *)this + 736), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
}

void sub_1B2EE9F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  *(_QWORD *)(v10 + 536) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v10 + 664));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v10 + 544));
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)v10);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior::OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this, const OZ3DEnginePhysicsBehavior *a2, char a3)
{
  uint64_t v5;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 536));
  *(_QWORD *)this = &off_1E65ACC80;
  *((_QWORD *)this + 2) = &unk_1E65ACF48;
  *((_QWORD *)this + 6) = &unk_1E65AD1A0;
  *((_QWORD *)this + 42) = &unk_1E65AD1F8;
  *((_QWORD *)this + 67) = &unk_1E65AD220;
  OZChannelEnum::OZChannelEnum((OZ3DEnginePhysicsBehavior *)((char *)this + 736), (const OZ3DEnginePhysicsBehavior *)((char *)a2 + 736), (OZChannelFolder *)((char *)this + 56));
}

void sub_1B2EEA014(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 536) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v1 + 664));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v1 + 544));
  OZChannelBehavior::~OZChannelBehavior((OZChannelBehavior *)v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this)
{
  *(_QWORD *)this = &off_1E65ACC80;
  *((_QWORD *)this + 2) = &unk_1E65ACF48;
  *((_QWORD *)this + 6) = &unk_1E65AD1A0;
  *((_QWORD *)this + 42) = &unk_1E65AD1F8;
  *((_QWORD *)this + 67) = &unk_1E65AD220;
  OZChannelEnum::~OZChannelEnum((OZ3DEnginePhysicsBehavior *)((char *)this + 736));
  *((_QWORD *)this + 67) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 664));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 544));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior(OZ3DEnginePhysicsBehavior *this)
{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 16));
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 48));
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 336));
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEnginePhysicsBehavior::~OZ3DEnginePhysicsBehavior((OZ3DEnginePhysicsBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DEnginePhysicsBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  return OZChannelBase::operator=(a1 + 736, (uint64_t)v4 + 736);
}

void OZ3DEnginePhysicsBehavior::didAddToNode(OZ3DEnginePhysicsBehavior *this, OZSceneNode *lpsrc)
{
  char *v4;
  char *v5;
  OZChannel *v6;
  OZBehaviorCurveNode *v7;

  if (lpsrc)
  {
    if (v4)
    {
      v5 = v4;
      OZChannelBehavior::didAddToNode(this, lpsrc);
      v6 = (OZChannel *)(v5 + 20872);
      v7 = (OZBehaviorCurveNode *)operator new();
      OZBehaviorCurveNode::OZBehaviorCurveNode(v7, this, v6);
      *(_QWORD *)v7 = &off_1E65AD2A0;
      *((_QWORD *)v7 + 4) = this;
      OZChannel::appendCurveProcessingNode(v6, v7);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v6);
    }
  }
}

void sub_1B2EEA29C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t OZ3DEnginePhysicsBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _QWORD *i;
  unint64_t v9;
  OZScene *v10;
  char *v11;

  v6 = result;
  v7 = (char *)(result + 536);
  for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
  {
    v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7)
        return result;
      ++i;
    }
  }
  v11 = (char *)(result + 536);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t `non-virtual thunk to'OZ3DEnginePhysicsBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEnginePhysicsBehavior::getLockDependencies(a1 - 536, a2, a3, a4);
}

uint64_t OZ3DEnginePhysicsBehavior::getLockingGroups(OZ3DEnginePhysicsBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZ3DEnginePhysicsBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return (*(uint64_t (**)(OZ3DEnginePhysicsBehavior *))(*(_QWORD *)this + 336))(this) + 1784;
  return result;
}

uint64_t `non-virtual thunk to'OZ3DEnginePhysicsBehavior::getLockingGroups(OZ3DEnginePhysicsBehavior *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 536;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 67) + 336))((char *)this - 536);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 336))(v1) + 1784;
  return result;
}

void OZ3DEnginePhysicsBehaviorNode::~OZ3DEnginePhysicsBehaviorNode(OZ3DEnginePhysicsBehaviorNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZ3DEnginePhysicsBehaviorNode::solveNode(OZ3DEnginePhysicsBehaviorNode *this, const CMTime *a2, double a3, double a4)
{
  OZChannelBase *v7;
  uint64_t v8;
  __int128 v10;
  CMTimeEpoch epoch;

  v7 = (OZChannelBase *)(*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 4) + 312))(*((_QWORD *)this + 4), a3);
  if (OZChannelBase::isEnabled(v7, 0, 1))
  {
    if ((*(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 320))(*((_QWORD *)this + 4)) + 1024) & 2) == 0)
    {
      v8 = *((_QWORD *)this + 4);
      v10 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      if ((*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 296))(v8, &v10, 1, 1, 1))
      {
        return (double)OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 4) + 736), a2, 0.0);
      }
    }
  }
  return a4;
}

double OZ3DEnginePhysicsBehaviorNode::solveNode(OZ3DEnginePhysicsBehaviorNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v6;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v2 = *((_QWORD *)a2 + 19);
  v9 = *(CMTime *)((_BYTE *)a2 + 5);
  v3 = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v8.value = v3;
  v8.epoch = *((_QWORD *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      *(double *)(v2 + 8 * v6) = (double)OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 4) + 736), &v8, 0.0);
      v11 = v8;
      v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      *(_QWORD *)&v3 = v12.value;
      v8 = v12;
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
  return *(double *)&v3;
}

uint64_t `non-virtual thunk to'OZ3DEnginePhysicsBehavior::getLockingID(OZ3DEnginePhysicsBehavior *this)
{
  return *((unsigned int *)this - 114);
}

void OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(OZChanFootageRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  uint64_t v11;
  __int128 v12;

  Instance = (OZFactory *)OZChanFootageRefWithPicker_Factory::getInstance(this);
  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &unk_1E65AD398;
  *((_QWORD *)this + 2) = &unk_1E65AD728;
  v12 = xmmword_1B355DB10;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID(v11, (__n128 *)&v12);
}

void sub_1B2EEA644(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanFootageRefWithPicker_Factory::getInstance(OZChanFootageRefWithPicker_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChanFootageRefWithPicker_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChanFootageRefWithPicker_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanFootageRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanFootageRefWithPicker_Factory::_instance;
}

void OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(OZChanFootageRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;
  __int128 v5;

  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, a2, a3, a4);
  *v4 = &unk_1E65AD398;
  v4[2] = &unk_1E65AD728;
  v5 = xmmword_1B355DB10;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)v4, (__n128 *)&v5);
}

void sub_1B2EEA710(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(OZChanFootageRefWithPicker *this, const OZChanFootageRefWithPicker *a2, OZChannelFolder *a3)
{
  _QWORD *v3;
  __int128 v4;

  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, a2, a3);
  *v3 = &unk_1E65AD398;
  v3[2] = &unk_1E65AD728;
  v4 = xmmword_1B355DB10;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)v3, (__n128 *)&v4);
}

void sub_1B2EEA77C(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanFootageRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChanFootageRefWithPicker_Factory *v0;

  v0 = (OZChanFootageRefWithPicker_Factory *)operator new();
  OZChanFootageRefWithPicker_Factory::OZChanFootageRefWithPicker_Factory(v0);
  OZChanFootageRefWithPicker_Factory::_instance = (uint64_t)v0;
}

void sub_1B2EEA7DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanFootageRefWithPicker_Factory::OZChanFootageRefWithPicker_Factory(OZChanFootageRefWithPicker_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E3F0;
  v4 = xmmword_1B3560710;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65AD780;
  *((_QWORD *)this + 16) = &unk_1E65AD850;
}

void sub_1B2EEA87C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChanFootageRefWithPicker *OZChanFootageRefWithPicker_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChanFootageRefWithPicker *v6;

  v6 = (OZChanFootageRefWithPicker *)operator new();
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(v6, this, a2, a3);
  return v6;
}

void sub_1B2EEA8EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChanFootageRefWithPicker *OZChanFootageRefWithPicker_Factory::createCopy(OZChanFootageRefWithPicker_Factory *this, OZFactoryBase *a2)
{
  OZChanFootageRefWithPicker *v3;
  const OZChanFootageRefWithPicker *v4;

  v3 = (OZChanFootageRefWithPicker *)operator new();
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2EEA978(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChanFootageRefWithPicker *OZChanFootageRefWithPicker_Factory::createChannelCopy(OZChanFootageRefWithPicker_Factory *this, OZChannelBase *a2)
{
  OZChanFootageRefWithPicker *v3;
  const OZChanFootageRefWithPicker *v4;

  v3 = (OZChanFootageRefWithPicker *)operator new();
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2EEAA04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZLockingElement::OZLockingElement(OZLockingElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v8;

  OZLocking::OZLocking(this);
  OZElement::OZElement((OZElement *)(v8 + 200), a2, a3, a4);
  *(_QWORD *)this = off_1E65AD8A8;
  *((_QWORD *)this + 25) = &unk_1E65AD908;
  *((_QWORD *)this + 27) = &unk_1E65AE1E0;
  *((_QWORD *)this + 31) = &unk_1E65AE438;
  *((_QWORD *)this + 841) = &unk_1E65AE490;
}

void sub_1B2EEAAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v1 + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v1 + 8));
  _Unwind_Resume(a1);
}

void OZLockingElement::OZLockingElement(OZLockingElement *this, const OZElement *a2, uint64_t a3)
{
  uint64_t v6;

  OZLocking::OZLocking(this);
  OZElement::OZElement((OZElement *)(v6 + 200), a2, a3);
  *(_QWORD *)this = off_1E65AD8A8;
  *((_QWORD *)this + 25) = &unk_1E65AD908;
  *((_QWORD *)this + 27) = &unk_1E65AE1E0;
  *((_QWORD *)this + 31) = &unk_1E65AE438;
  *((_QWORD *)this + 841) = &unk_1E65AE490;
}

void sub_1B2EEAB3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v1 + 128));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t OZLockingElement::willRemoveFromScene(OZLockingElement *this, OZScene *a2)
{
  OZSceneNode::willRemoveFromScene((uint64_t)this + 200, (uint64_t)a2);
  return OZLocking::removeFromLockingGroup(this);
}

uint64_t `non-virtual thunk to'OZLockingElement::willRemoveFromScene(OZLockingElement *this, OZScene *a2)
{
  OZLocking *v2;

  v2 = (OZLockingElement *)((char *)this - 200);
  OZSceneNode::willRemoveFromScene((uint64_t)this, (uint64_t)a2);
  return OZLocking::removeFromLockingGroup(v2);
}

uint64_t OZLockingElement::getLockingGroups(OZLockingElement *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this + 200;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 272))(v1) + 1784;
  return result;
}

char *OZLockingElement::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return OZLocking::getLockDependenciesForElement((char *)(a1 + 200), a2, a3, a4);
}

void OZMoShape::OZMoShape(OZMoShape *this, OZRotoshape *a2, OZChannelFolder *a3, OZChannelFolder *a4, unsigned int a5)
{
  _QWORD *v9;
  uint64_t v10;
  OZChannelBase *v11;
  uint64_t NextUniqueID;
  OZChannelBase *v13;
  uint64_t v14;
  uint64_t v15;
  OZChannelBase *v16;
  void *v17;
  PCString v18;
  PCString v19[2];

  OZShape::OZShape(this, a4);
  *v9 = &off_1E65AE5A0;
  PCString::PCString(v19, "Particle Subobjects");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18728), v19, a3, 0x8Cu, 2u, 0);
  PCString::~PCString(v19);
  PCSharedMutex::PCSharedMutex((OZMoShape *)((char *)this + 18944));
  PCWorkingColorVector::PCWorkingColorVector((OZMoShape *)((char *)this + 19048));
  *(_OWORD *)((char *)this + 19064) = 0u;
  *((_QWORD *)this + 2386) = 0;
  *(_OWORD *)((char *)this + 19096) = 0u;
  *((_QWORD *)this + 2385) = (char *)this + 19088;
  *((_QWORD *)this + 2389) = a2;
  OZChannelBase::setID((OZChannelBase *)((char *)this + 80), a5);
  if (*(_BYTE *)(theApp + 80))
  {
    *((_OWORD *)this + 1180) = 0u;
  }
  else
  {
    OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)a2 + 70));
    v10 = theApp;
    *(_OWORD *)&v19[0].var0 = xmmword_1B355CF50;
    PCURL::PCURL((PCURL *)&v18, CFSTR("Emitter Name"));
    NextUniqueID = OZChannelBase::getNextUniqueID(v11);
    *((_QWORD *)this + 2360) = OZApplication::createSceneNode(v10, (unsigned int *)v19, (uint64_t)&v18, NextUniqueID);
    PCString::~PCString(&v18);
    v13 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2360) + 640))(*((_QWORD *)this + 2360));
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18728), v13);
    v14 = *((_QWORD *)this + 2389);
    if (v14)
      v15 = v14 + 200;
    else
      v15 = 0;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2360) + 256))(*((_QWORD *)this + 2360), v15);
    v16 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2360) + 640))(*((_QWORD *)this + 2360));
    OZChannelBase::setFlag(v16, 8, 0);
    v17 = (void *)*((_QWORD *)this + 2360);
    if (v17)
    *((_QWORD *)this + 2361) = v17;
  }
  *((_DWORD *)this + 4719) = 0;
  *(_OWORD *)((char *)this + 18856) = 0u;
  *((_BYTE *)this + 18872) = 0;
  *((_OWORD *)this + 1181) = 0u;
  *((_OWORD *)this + 1182) = 0u;
  *((_OWORD *)this + 1183) = 0u;
}

void sub_1B2EEAE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZShape *v11;
  OZChannelFolder *v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  uint64_t v18;

  v18 = *((_QWORD *)v11 + 2388);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(v15, *v16);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v14);
  PCSharedMutex::~PCSharedMutex(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  OZShape::~OZShape(v11);
  _Unwind_Resume(a1);
}

void OZMoShape::OZMoShape(OZMoShape *this, const OZMoShape *a2, OZRotoshape *a3, OZChannelFolder *a4, OZChannelFolder *a5, unsigned int a6, int a7)
{
  uint64_t v13;
  OZChannelFolder *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  OZChannelBase *v19;
  uint64_t NextUniqueID;
  OZChannelBase *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  OZChannelBase *v25;
  void *v26;
  CMTime v27;
  CMTime v28[2];
  PCString v29;

  OZShape::OZShape(this, a2, a5);
  *(_QWORD *)v13 = &off_1E65AE5A0;
  v14 = (OZChannelFolder *)(v13 + 18728);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v13 + 18728), (const OZChannelFolder *)((char *)a2 + 18728), a4);
  PCSharedMutex::PCSharedMutex((OZMoShape *)((char *)this + 18944));
  PCWorkingColorVector::PCWorkingColorVector((OZMoShape *)((char *)this + 19048));
  *(_OWORD *)((char *)this + 19064) = 0u;
  *((_QWORD *)this + 2386) = 0;
  *(_OWORD *)((char *)this + 19096) = 0u;
  *((_QWORD *)this + 2385) = (char *)this + 19088;
  *((_QWORD *)this + 2389) = a3;
  OZChannelBase::setID((OZChannelBase *)((char *)this + 80), a6);
  v15 = (_QWORD *)((char *)this + 18880);
  *((_OWORD *)this + 1180) = 0u;
  if ((a7 & 0x60) == 0x20 || (v16 = *((_QWORD *)a2 + 2360)) == 0)
  {
    if (*(_BYTE *)(theApp + 80))
      goto LABEL_15;
    OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)a3 + 70));
    v18 = theApp;
    *(_OWORD *)&v28[0].value = xmmword_1B355CF50;
    PCURL::PCURL((PCURL *)&v29, CFSTR("Emitter Name"));
    NextUniqueID = OZChannelBase::getNextUniqueID(v19);
    *((_QWORD *)this + 2360) = OZApplication::createSceneNode(v18, (unsigned int *)v28, (uint64_t)&v29, NextUniqueID);
    PCString::~PCString(&v29);
    (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 1128))(v28, *((_QWORD *)this + 2389) + 200);
    v27 = v28[0];
    OZMoShape::initPPaintTime(this, &v27, (const PCTimeRange *)v28);
    v21 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 640))(*v15);
    OZChannelBase::setFlag(v21, 8, 0);
    v22 = *((_QWORD *)this + 2360);
    (*(void (**)(OZMoShape *))(*(_QWORD *)this + 416))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 1344))(v22);
    v17 = (void *)*v15;
    if (!*v15)
      goto LABEL_15;
    goto LABEL_9;
  }
  v17 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v16 + 8) + 24))(*(_QWORD *)(v16 + 8), v16, a7 & 0xFFFFFFFE);
  if (v17)
  *v15 = v17;
  if (v17)
  {
LABEL_9:
    v23 = *((_QWORD *)this + 2389);
    if (v23)
      v24 = v23 + 200;
    else
      v24 = 0;
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v17 + 256))(v17, v24);
    v25 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 640))(*v15);
    OZChannelFolder::push_front(v14, v25);
    v26 = (void *)*v15;
    if (*v15)
    *((_QWORD *)this + 2361) = v26;
  }
LABEL_15:
  *((_BYTE *)this + 18872) = 0;
  *(_OWORD *)((char *)this + 18856) = 0u;
  *((_OWORD *)this + 1181) = 0u;
  *((_OWORD *)this + 1182) = 0u;
  *((_OWORD *)this + 1183) = 0u;
  *((_DWORD *)this + 4719) = *((_DWORD *)a2 + 4719);
}

void sub_1B2EEB148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCString a20)
{
  OZShape *v20;
  OZChannelFolder *v21;
  std::mutex *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  uint64_t v27;

  v27 = *((_QWORD *)v20 + 2388);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(v24, *v25);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v23);
  PCSharedMutex::~PCSharedMutex(v22);
  OZChannelFolder::~OZChannelFolder(v21);
  OZShape::~OZShape(v20);
  _Unwind_Resume(a1);
}

_QWORD *OZMoShape::initPPaintTime(_QWORD *this, CMTime *a2, const PCTimeRange *a3)
{
  uint64_t v3;
  _QWORD *v6;
  __int128 v7;
  CMTimeEpoch epoch;
  CMTime v9;

  v3 = this[2360];
  if (v3)
  {
    (*(void (**)(_QWORD, const PCTimeRange *, _QWORD))(*(_QWORD *)v3 + 1136))(this[2360], a3, 0);
    v9 = *a2;
    (*(void (**)(uint64_t, CMTime *, _QWORD))(*(_QWORD *)v3 + 1120))(v3, &v9, 0);
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 976))(v3, 0);
    if (this)
    {
      if (this)
      {
        v6 = this;
        (*(void (**)(_QWORD *, const PCTimeRange *, _QWORD))(*this + 1136))(this, a3, 0);
        v7 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *, _QWORD))(*v6 + 1120))(v6, &v7, 0);
      }
    }
  }
  return this;
}

void OZMoShape::~OZMoShape(OZMoShape *this)
{
  PCMutex *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E65AE5A0;
  v2 = (PCMutex *)((char *)this + 8);
  PCMutex::lock((PCMutex *)((char *)this + 8));
  v3 = *((_QWORD *)this + 2360);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 2360) = 0;
  *((_QWORD *)this + 2389) = 0;
  PCMutex::unlock(v2);
  v4 = *((_QWORD *)this + 2388);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy((uint64_t)this + 19080, *((_QWORD **)this + 2386));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 19064);
  PCSharedMutex::~PCSharedMutex((std::mutex *)this + 296);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18728));
  OZShape::~OZShape(this);
}

{
  OZMoShape::~OZMoShape(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZMoShape::operator=(uint64_t a1, uint64_t a2)
{
  PCMutex *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  OZChannelBase *v12;

  v4 = (PCMutex *)(a1 + 8);
  PCMutex::lock((PCMutex *)(a1 + 8));
  OZShape::operator=(a1, a2);
  if (*(_QWORD *)(a1 + 18880))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 18888) + 96))(*(_QWORD *)(a1 + 18888), *(_QWORD *)(a2 + 18880));
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 18880);
    if (v5)
    {
      v6 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8), v5, 2);
      *(_QWORD *)(a1 + 18880) = v7;
      v8 = *(_QWORD *)(a1 + 19112);
      if (v8)
        v9 = v8 + 200;
      else
        v9 = 0;
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v7 + 256))(v7, v9);
      v10 = *(_QWORD *)(a1 + 18880);
      if (v10)
      else
        v11 = 0;
      *(_QWORD *)(a1 + 18888) = v11;
      v12 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
      OZChannelFolder::push_front((OZChannelFolder *)(a1 + 18728), v12);
    }
  }
  *(_OWORD *)(a1 + 18928) = 0u;
  *(_OWORD *)(a1 + 18912) = 0u;
  *(_OWORD *)(a1 + 18896) = 0u;
  *(_DWORD *)(a1 + 18876) = *(_DWORD *)(a2 + 18876);
  return PCMutex::unlock(v4);
}

void sub_1B2EEB4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void OZMoShape::reparentChannels(OZMoShape *this, OZChannelFolder *a2, int a3)
{
  OZChannelFolder *v5;
  OZChannelBase *v6;
  OZChannelBase *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  OZChannelBase *v16;
  OZChannelBase *v17;
  OZChannelBase *v18;
  OZChannelBase *v19;
  OZChannelBase *v20;
  OZChannelBase *v21;
  OZChannelBase *v22;
  OZChannelBase *v23;
  OZChannelBase *v24;
  OZChannelBase *v25;
  OZChannelBase *v26;
  OZChannelBase *v27;
  OZChannelBase *v28;
  OZChannelBase *v29;
  OZChannelBase *v30;
  OZChannelBase *v31;

  v5 = (OZChannelFolder *)((char *)this + 80);
  if (a3)
  {
    v31 = (OZChannelBase *)((char *)this + 208);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 80), (OZChannelBase *)((char *)this + 208));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1072));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1328));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1480));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1632));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 1784));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 2784));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 6800));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 11512));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13008));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13264));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13416));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13568));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13720));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 13872));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 14024));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 14904));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 15608));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 16312));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 17016));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 17720));
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 17872));
    OZChannelBase::setID(v31, 0x13Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1072), 0x12Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1328), 0x13Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1480), 0x158u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1632), 0x160u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1784), 0x149u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 2784), 0x139u);
    OZChannelBase::setID((OZChannelBase *)this + 26, 0x13Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 3168), 0x137u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4176), 0x155u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4328), 0x130u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6800), 0x134u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6928), 0x153u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 7184), 0x133u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 0x2000), 0x156u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8344), 0x131u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8496), 0x143u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8648), 0x138u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8904), 0x13Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9160), 0x14Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9416), 0x14Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9568), 0x14Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9720), 0x132u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9976), 0x146u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10128), 0x147u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10280), 0x14Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10440), 0x148u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10592), 0x14Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10744), 0x150u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10904), 0x151u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11352), 0x152u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11512), 0x12Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13008), 0x12Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13264), 0x13Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13416), 0x140u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13568), 0x141u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13720), 0x14Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13872), 0x159u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14024), 0x157u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14904), 0x15Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 15608), 0x15Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 16312), 0x15Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17016), 0x15Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17720), 0x15Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17872), 0x15Fu);
    OZChannelFolder::push_back(a2, v31);
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1072));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1328));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1480));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1632));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 1784));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 2784));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 6800));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 11512));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 12856));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13008));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13264));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13416));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13568));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13720));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 13872));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 14024));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 14904));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 15608));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 16312));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 17016));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 17720));
    OZChannelFolder::push_back(a2, (OZChannelBase *)((char *)this + 17872));
  }
  else
  {
    v23 = (OZChannelBase *)((char *)this + 12856);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 80), (OZChannelBase *)((char *)this + 12856));
    v22 = (OZChannelBase *)((char *)this + 2488);
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 2488));
    v24 = (OZChannelBase *)((char *)this + 14280);
    OZChannelFolder::removeDescendant(v5, (OZChannelBase *)((char *)this + 14280));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 208));
    v21 = (OZChannelBase *)((char *)this + 1072);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1072));
    v19 = (OZChannelBase *)((char *)this + 1328);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1328));
    v18 = (OZChannelBase *)((char *)this + 1480);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1480));
    v17 = (OZChannelBase *)((char *)this + 1632);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1632));
    v16 = (OZChannelBase *)((char *)this + 1784);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 1784));
    v20 = (OZChannelBase *)((char *)this + 2784);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 2784));
    v15 = (OZChannelBase *)((char *)this + 6800);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 6800));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 11512));
    v30 = (OZChannelBase *)((char *)this + 13008);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13008));
    v25 = (OZChannelBase *)((char *)this + 13264);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13264));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13416));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13568));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13720));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 13872));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 14024));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 14904));
    v29 = (OZChannelBase *)((char *)this + 15608);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 15608));
    v28 = (OZChannelBase *)((char *)this + 16312);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 16312));
    v27 = (OZChannelBase *)((char *)this + 17016);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 17016));
    v26 = (OZChannelBase *)((char *)this + 17720);
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 17720));
    OZChannelFolder::removeDescendant(a2, (OZChannelBase *)((char *)this + 17872));
    OZChannelBase::setID((OZChannelBase *)((char *)this + 208), 0x75u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1072), 0x64u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1328), 0x74u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1480), 0x90u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1632), 0x98u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 1784), 0x81u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 2784), 0x71u);
    OZChannelBase::setID((OZChannelBase *)this + 26, 0x72u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 3168), 0x6Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4176), 0x8Du);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 4328), 0x68u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6800), 0x6Cu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 6928), 0x8Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 7184), 0x6Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 0x2000), 0x8Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8344), 0x69u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8496), 0x7Bu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8648), 0x70u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 8904), 0x77u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9160), 0x86u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9416), 0x84u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9568), 0x85u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9720), 0x6Au);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 9976), 0x7Eu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10128), 0x7Fu);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10280), 0x87u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10440), 0x80u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10592), 0x83u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10744), 0x88u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 10904), 0x89u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11352), 0x8Au);
    v6 = (OZChannelBase *)((char *)this + 11512);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 11512), 0x66u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13008), 0x67u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13264), 0x73u);
    v7 = (OZChannelBase *)((char *)this + 13416);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13416), 0x78u);
    v8 = (OZChannelBase *)((char *)this + 13568);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13568), 0x79u);
    v9 = (OZChannelBase *)((char *)this + 13720);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13720), 0x82u);
    v10 = (OZChannelBase *)((char *)this + 13872);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 13872), 0x91u);
    v11 = (OZChannelBase *)((char *)this + 14024);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14024), 0x8Fu);
    v12 = (OZChannelBase *)((char *)this + 14904);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 14904), 0x92u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 15608), 0x93u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 16312), 0x94u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17016), 0x95u);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17720), 0x96u);
    v13 = (OZChannelBase *)((char *)this + 17872);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 17872), 0x97u);
    v14 = (OZChannelBase *)((char *)this + 208);
    OZChannelFolder::push_back(v5, v14);
    OZChannelFolder::push_back(v5, v21);
    OZChannelFolder::push_back(v5, v19);
    OZChannelFolder::push_back(v5, v18);
    OZChannelFolder::push_back(v5, v17);
    OZChannelFolder::push_back(v5, v16);
    OZChannelFolder::push_back(v5, v22);
    OZChannelFolder::push_back(v5, v20);
    OZChannelFolder::push_back(v5, v15);
    OZChannelFolder::push_back(v5, v6);
    OZChannelFolder::push_back(v5, v23);
    OZChannelFolder::push_back(v5, v30);
    OZChannelFolder::push_back(v5, v25);
    OZChannelFolder::push_back(v5, v7);
    OZChannelFolder::push_back(v5, v8);
    OZChannelFolder::push_back(v5, v9);
    OZChannelFolder::push_back(v5, v10);
    OZChannelFolder::push_back(v5, v11);
    OZChannelFolder::push_back(v5, v24);
    OZChannelFolder::push_back(v5, v12);
    OZChannelFolder::push_back(v5, v29);
    OZChannelFolder::push_back(v5, v28);
    OZChannelFolder::push_back(v5, v27);
    OZChannelFolder::push_back(v5, v26);
    OZChannelFolder::push_back(v5, v13);
    OZChannelBase::resetFlag(v14, 0x40000000, 0);
  }
}

void *OZMoShape::completeLoading(OZMoShape *this, double a2)
{
  OZScene *v3;
  uint64_t v4;
  OZSceneNode *v5;
  OZScene *v6;
  PCColorSpaceCache *v7;
  CGColorSpace *v8;
  int shouldDrawParticles;
  void *result;
  uint64_t v16;
  OZChannelBase *v17;
  uint64_t NextUniqueID;
  OZChannelBase *v19;
  uint64_t v20;
  uint64_t v21;
  OZChannelBase *v22;
  void *v23;
  OZScene *v24;
  OZScene *v25;
  uint64_t v26;
  CMTime var0;
  CMTime v28;
  CMTime v29;
  __int16 var10;
  BOOL var16;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CGColorSpace *v37;
  int v38;
  OZRenderState v39;

  if (*((_QWORD *)this + 2360))
  {
    if (a2 < 3.0)
    {
      (*(void (**)(OZRenderState *__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200)
                                                                   + 1128))(&v39, *((_QWORD *)this + 2389) + 200);
      var0 = (CMTime)v39.var0;
      OZMoShape::initPPaintTime(this, &var0, (const PCTimeRange *)&v39);
      v3 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
      OZScene::registerNode(v3, *((OZSceneNode **)this + 2360));
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
      v5 = (OZSceneNode *)*((_QWORD *)this + 2360);
      return (void *)OZScene::addAllDependencies(v4, v5);
    }
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
    if (result)
    {
      v24 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
      result = OZScene::getNode(v24, *(_DWORD *)(*((_QWORD *)this + 2360) + 80));
      if (!result)
      {
        v25 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
        OZScene::registerNode(v25, *((OZSceneNode **)this + 2360));
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
        return (void *)OZScene::addAllDependencies(v26, *((OZSceneNode **)this + 2360));
      }
    }
  }
  else
  {
    v6 = (OZScene *)(*(uint64_t (**)(uint64_t, double))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200, a2);
    if (!*(_BYTE *)(theApp + 80))
      goto LABEL_8;
    if ((OZBehavior::IsChannelAffectedByBehaviors((OZMoShape *)((char *)this + 6928), 0) & 1) != 0)
      goto LABEL_8;
    if ((OZScene::isChannelPublished(v6, (OZChannelBase *)((char *)this + 6928)) & 1) != 0)
      goto LABEL_8;
    v7 = (PCColorSpaceCache *)OZRenderState::OZRenderState(&v39);
    v8 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(v7);
    __asm { FMOV            V0.2D, #1.0 }
    v35 = 0;
    v36 = 0;
    v34 = 0;
    PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v37, v8);
    v29 = (CMTime)v39.var0;
    var10 = v39.var10;
    var16 = v39.var16;
    v32 = *(_OWORD *)&v39.var1;
    v38 = 1065353216;
    v33 = 1;
    shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)this, &v29);
    result = PCCFRef<CGColorSpace *>::~PCCFRef(&v37);
    if (shouldDrawParticles)
    {
LABEL_8:
      v16 = theApp;
      *(_OWORD *)&v39.var0.var0 = xmmword_1B355CF50;
      PCURL::PCURL((PCURL *)&v29, CFSTR("Emitter Name"));
      NextUniqueID = OZChannelBase::getNextUniqueID(v17);
      *((_QWORD *)this + 2360) = OZApplication::createSceneNode(v16, (unsigned int *)&v39, (uint64_t)&v29, NextUniqueID);
      PCString::~PCString((PCString *)&v29);
      v19 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2360) + 640))(*((_QWORD *)this + 2360));
      OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18728), v19);
      v20 = *((_QWORD *)this + 2389);
      if (v20)
        v21 = v20 + 200;
      else
        v21 = 0;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2360) + 256))(*((_QWORD *)this + 2360), v21);
      v22 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2360) + 640))(*((_QWORD *)this + 2360));
      OZChannelBase::setFlag(v22, 8, 0);
      v23 = (void *)*((_QWORD *)this + 2360);
      if (v23)
      *((_QWORD *)this + 2361) = v23;
      (*(void (**)(OZRenderState *__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200)
                                                                   + 1128))(&v39, *((_QWORD *)this + 2389) + 200);
      v28 = (CMTime)v39.var0;
      OZMoShape::initPPaintTime(this, &v28, (const PCTimeRange *)&v39);
      OZScene::registerNode(v6, *((OZSceneNode **)this + 2360));
      v5 = (OZSceneNode *)*((_QWORD *)this + 2360);
      v4 = (uint64_t)v6;
      return (void *)OZScene::addAllDependencies(v4, v5);
    }
  }
  return result;
}

void sub_1B2EEC3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17)
{
  CGColorSpace **v17;

  PCCFRef<CGColorSpace *>::~PCCFRef(v17);
  _Unwind_Resume(a1);
}

void OZMoShape::validateChannels(OZMoShape *this, const CMTime *a2, OZShapeRenderParams *a3, BOOL a4, int a5)
{
  double v9;
  int v11;

  OZChannel::getValueAsDouble((OZChannel *)(*((_QWORD *)this + 2389) + 6880), a2, 0.0);
  if (*((double *)a3 + 20) != v9 && a5 != 0)
    *((double *)a3 + 20) = v9;
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2389) + 384))(*((_QWORD *)this + 2389));
  if (*((unsigned __int8 *)a3 + 240) != v11 && a5 != 0)
  {
    *((_BYTE *)a3 + 240) = v11;
    *((_WORD *)a3 + 596) = 257;
    *((_BYTE *)a3 + 1194) = 1;
  }
  OZShape::validateChannels(this, (const OZShapeRenderState *)a2, a3);
}

void OZMoShape::getHelium(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  int v11;
  _BOOL4 v12;
  void **HostApplicationDelegate;
  int v14;
  HGGPURenderer *v15;
  OZScene **v16;
  char v17;
  int v18;
  _BYTE *v19;
  int v20;
  int v21;
  OZScene **v22;
  int v23;
  HGNode *v24;
  uint16x4_t v25;
  BOOL v26;
  uint64_t MetalContext;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  HGBitmapLoader *v34;
  uint64_t v35;
  CGColorSpace *WorkingColorSpace;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int v44;
  int v45;
  uint64_t v46;
  void *v47;
  void *v48;
  PGContext *v49;
  PGInfo *VirtualScreen;
  int BitsPerChannel;
  uint64_t MaxTextureSize;
  uint64_t v53;
  uint64_t *v54;
  HGBitmap *v55;
  uint64_t v56;
  HGObject *v57;
  HGObject *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  HGBitmap *v64;
  HGBitmapLoader *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int Name;
  uint64_t v71;
  HGBitmap *v72;
  HGObject *v73;
  HGObject *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  HGBitmapLoader *v82;
  HGBitmapLoader *v83;
  HGBitmap *v84;
  uint64_t v85;
  uint64_t v86;
  std::mutex *v88;
  HGRect v89;
  uint64_t v90;
  int32x4_t v91;
  HGRect v92;
  HGRect v93;
  HGNode *v94;
  HGRect v95;

  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 128))(*(_QWORD *)(a2 + 56), 43);
  v12 = v11 == 1;
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  v14 = OZHostApplicationDelegateHandler::wantsToCacheTopLevelGroupRender(HostApplicationDelegate);
  v15 = *(HGGPURenderer **)(a2 + 56);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v95);
  v16 = (OZScene **)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 19112));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v92, v16);
  OZMoShape::calcHashkey(a1);
  v86 = a3;
  v95 = v93;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v92);
  v88 = (std::mutex *)(a1 + 18944);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 18944));
  v85 = (uint64_t)v15;
  if (v14
    || *(_BYTE *)(a2 + 24)
    || !*(_QWORD *)&vorr_s8(*(int8x8_t *)&v95.var0, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL)))
  {
    v17 = 0;
    v19 = (_BYTE *)(a2 + 25);
    v18 = *(unsigned __int8 *)(a2 + 25);
    v20 = 1;
    goto LABEL_4;
  }
  v25 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v95, *(int32x4_t *)(a1 + 19048))));
  v25.i16[0] = vmaxv_u16(v25);
  v20 = v25.i32[0];
  v17 = v25.i8[0] ^ 1;
  v19 = (_BYTE *)(a2 + 25);
  v18 = *(unsigned __int8 *)(a2 + 25);
  if ((v25.i8[0] & 1) != 0 || (v11 == 1 ? (v26 = v18 == 0) : (v26 = 0), !v26))
  {
LABEL_4:
    if (v18)
    {
      if (*(_QWORD *)(a1 + 19104))
        goto LABEL_10;
    }
    else if (*(_QWORD *)(a1 + 19064))
    {
LABEL_10:
      v21 = 1;
      goto LABEL_11;
    }
    if (v11 != 1)
    {
      v21 = 1;
      v12 = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  MetalContext = HGGPURenderer::GetMetalContext(v15);
  v28 = OZMetalUtils::registryID(*(_QWORD *)(*(_QWORD *)(MetalContext + 16) + 16));
  v29 = *(_QWORD **)(a1 + 19088);
  if (!v29)
    goto LABEL_39;
  v30 = a1 + 19088;
  do
  {
    v31 = v29[4];
    v32 = v31 >= v28;
    if (v31 >= v28)
      v33 = v29;
    else
      v33 = v29 + 1;
    if (v32)
      v30 = (uint64_t)v29;
    v29 = (_QWORD *)*v33;
  }
  while (*v33);
  if (v30 == a1 + 19088 || v28 < *(_QWORD *)(v30 + 32) || (v84 = *(HGBitmap **)(v30 + 40)) == 0)
  {
LABEL_39:
    v18 = *v19;
    v17 = 1;
    goto LABEL_4;
  }
  v34 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
  HGBitmapLoader::HGBitmapLoader(v34, v84);
  v21 = 0;
  v12 = 0;
  *a6 = v34;
  v17 = 1;
LABEL_11:
  PCSharedMutex::unlock_shared(v88);
  if (!v21)
    return;
  v94 = 0;
  if (((v20 | v12) & 1) != 0)
  {
    OZShapeRenderParams::OZShapeRenderParams((OZShapeRenderParams *)&v93);
    v22 = (OZScene **)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 19112));
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v92, v22);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, HGRect *))(*(_QWORD *)a1 + 72))(a1, a2, v86, a4, a5, &v93);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v92);
    if (v23)
    {
      (*(void (**)(HGRect *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, HGRect *))(*(_QWORD *)a1 + 80))(&v92, a1, a2, v86, a4, &v93);
      v24 = *(HGNode **)&v92.var0;
      if (v94 != *(HGNode **)&v92.var0)
      {
        if (v94)
        {
          (*(void (**)(void))(*(_QWORD *)v94 + 24))();
          v24 = *(HGNode **)&v92.var0;
        }
        v94 = v24;
        if (!v24)
          goto LABEL_48;
        goto LABEL_42;
      }
      if (v94)
      {
        (*(void (**)(void))(*(_QWORD *)v94 + 24))();
        if (v94)
        {
LABEL_42:
          OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)&v93);
          goto LABEL_43;
        }
      }
    }
LABEL_48:
    *a6 = 0;
    OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)&v93);
    goto LABEL_111;
  }
LABEL_43:
  PCSharedMutex::lock(v88);
  if ((v17 & 1) == 0)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(HGRect *)(a1 + 19048) = v95;
      *(_QWORD *)&v93.var0 = 0;
      *(_QWORD *)&v93.var2 = 0;
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1 + 19064, (__int128 *)&v93.var0);
      v38 = *(std::__shared_weak_count **)&v93.var2;
      if (*(_QWORD *)&v93.var2)
      {
        v39 = (unint64_t *)(*(_QWORD *)&v93.var2 + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(a1 + 19080, *(_QWORD **)(a1 + 19088));
      *(_QWORD *)(a1 + 19080) = a1 + 19088;
      *(_QWORD *)(a1 + 19096) = 0;
      *(_QWORD *)(a1 + 19088) = 0;
      v41 = *(_QWORD *)(a1 + 19104);
      if (v41)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
        *(_QWORD *)(a1 + 19104) = 0;
      }
    }
    goto LABEL_57;
  }
  if (!v12)
    goto LABEL_97;
  v35 = *(_QWORD *)(a2 + 72);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)v35);
  *(_QWORD *)&v92.var0 = 0;
  *(_QWORD *)&v92.var2 = 0;
  *(_QWORD *)&v92.var0 = HGRenderer::GetDOD(*(HGRenderer **)(a2 + 56), v94);
  *(_QWORD *)&v92.var2 = v37;
  HGRect::Init(&v93, -1, -1, 1, 1);
  HGRect::Grow(&v92, v93);
  v91 = (int32x4_t)xmmword_1B30503B0;
  if (!HGRectIsNull(*(uint64_t *)&v92.var0, *(uint64_t *)&v92.var2))
  {
    v42 = vmax_s32(*(int32x2_t *)&v92.var0, vdup_n_s32(0xC0000001));
    v43 = vsub_s32(vmin_s32(*(int32x2_t *)&v92.var2, vdup_n_s32(0x3FFFFFFEu)), v42);
    *(int32x2_t *)v91.i8 = v42;
    v91.u64[1] = (unint64_t)v43;
    if ((v43.i32[0] - 100001) < 0xFFFE7960 || v43.i32[1] < 1 || v43.i32[1] >= 0x186A1u)
      goto LABEL_47;
    if (v11 == 1)
    {
      v44 = PGHelium::convertBitsPerChannel((PGHelium *)*(unsigned int *)(v35 + 336), *(_DWORD *)(v35 + 332), 0);
      if (HGGPURenderer::ShouldAllocateTexture(v85, v92.var2 - v92.var0, v92.var3 - v92.var1, v44, 1, 0))
      {
        PGHelium::renderNodeToMetalTexture(*(const void **)(a2 + 56), (uint64_t *)&v94, (unsigned int *)&v91, *(_DWORD *)(v35 + 340), (HGGLBlendingInfo *)(v35 + 1316), &v89);
        if (*(_QWORD *)&v89.var0)
        {
          if ((*(_DWORD *)(*(_QWORD *)&v89.var0 + 28) - *(_DWORD *)(*(_QWORD *)&v89.var0 + 20)) >= v91.i32[2]
            && (*(_DWORD *)(*(_QWORD *)&v89.var0 + 32) - *(_DWORD *)(*(_QWORD *)&v89.var0 + 24)) >= v91.i32[3])
          {
            v90 = 0;
            v90 = OZMetalUtils::registryID(*(_QWORD *)(*(_QWORD *)&v89.var0 + 136));
            *(_QWORD *)&v93.var0 = &v90;
            v54 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>((uint64_t **)(a1 + 19080), (unint64_t *)&v90, (uint64_t)&std::piecewise_construct, (uint64_t **)&v93);
            v55 = (HGBitmap *)v54[5];
            v56 = *(_QWORD *)&v89.var0;
            if (v55 != *(HGBitmap **)&v89.var0)
            {
              if (v55)
              {
                (*(void (**)(HGBitmap *))(*(_QWORD *)v55 + 24))(v55);
                v56 = *(_QWORD *)&v89.var0;
              }
              v54[5] = v56;
              if (v56)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
                v55 = *(HGBitmap **)&v89.var0;
              }
              else
              {
                v55 = 0;
              }
            }
            *(HGRect *)(a1 + 19048) = v95;
            v83 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
            HGBitmapLoader::HGBitmapLoader(v83, v55);
            *a6 = v83;
            if (*(_QWORD *)&v89.var0)
              (*(void (**)(_QWORD))(**(_QWORD **)&v89.var0 + 24))(*(_QWORD *)&v89.var0);
            goto LABEL_110;
          }
          (*(void (**)(void))(**(_QWORD **)&v89.var0 + 24))();
        }
      }
      goto LABEL_57;
    }
    if (*v19)
    {
      *(_QWORD *)&v89.var0 = 0;
      *(_QWORD *)&v89.var2 = 0;
      if (v43.i32[0] > 0x7FFu
        || v43.i32[1] > 0x7FFu
        || (PGHelium::renderNodeToBitmap(*(HGRenderer **)(a2 + 56), (uint64_t *)&v94, (unsigned int *)&v91, *(unsigned int *)(v35 + 340), (uint64_t)WorkingColorSpace, (HGGLBlendingInfo *)(v35 + 1316), (uint64_t *)&v93.var0), std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)&v89, (__int128 *)&v93.var0), std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v93), !*(_QWORD *)&v89.var0))
      {
        *a6 = (HGBitmapLoader *)v94;
        v94 = 0;
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v89);
        goto LABEL_110;
      }
      v45 = PGHelium::convertBitsPerChannel((PGHelium *)*(unsigned int *)(*(_QWORD *)&v89.var0 + 40), *(_DWORD *)(*(_QWORD *)&v89.var0 + 36), 0);
      v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v89.var0 + 64) + 16))(*(_QWORD *)(*(_QWORD *)&v89.var0 + 64));
      v47 = HGObject::operator new(0x80uLL);
      HGBitmap::HGBitmap((uint64_t)v47, *(uint64_t *)&v92.var0, *(uint64_t *)&v92.var2, v45, v46);
      v48 = *(void **)(a1 + 19104);
      if (v48 == v47)
      {
        if (v47)
          (*(void (**)(void *))(*(_QWORD *)v47 + 24))(v47);
      }
      else
      {
        if (v48)
          (*(void (**)(void *))(*(_QWORD *)v48 + 24))(v48);
        *(_QWORD *)(a1 + 19104) = v47;
      }
      v57 = (HGObject *)HGObject::operator new(0x20uLL);
      v58 = v57;
      v93 = v89;
      if (*(_QWORD *)&v89.var2)
      {
        v59 = (unint64_t *)(*(_QWORD *)&v89.var2 + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      HGObject::HGObject(v57);
      *(_QWORD *)v58 = &unk_1E65A2598;
      v61 = *(_QWORD *)&v93.var2;
      *((_QWORD *)v58 + 2) = *(_QWORD *)&v93.var0;
      *((_QWORD *)v58 + 3) = v61;
      if (v61)
      {
        v62 = (unint64_t *)(v61 + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v93);
      HGBitmap::SetStorage(*(HGBitmap **)(a1 + 19104), v58);
      *(HGRect *)(a1 + 19048) = v95;
      (*(void (**)(HGObject *))(*(_QWORD *)v58 + 24))(v58);
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v89);
LABEL_97:
      if (*v19)
      {
        v64 = *(HGBitmap **)(a1 + 19104);
        v65 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v65, v64);
        *a6 = v65;
      }
      else
      {
        v66 = PGHelium::convertBitsPerChannel((PGHelium *)*(unsigned int *)(*(_QWORD *)(a1 + 19064) + 40), *(_DWORD *)(*(_QWORD *)(a1 + 19064) + 36), 0);
        v92 = (HGRect)xmmword_1B35579A0;
        PGTexture::getTexCoords(*(_QWORD *)(a1 + 19064), (float32x4_t *)&v92);
        v67 = HGRectMake4i((int)*(float *)&v92.var0, (int)*(float *)&v92.var1, (int)*(float *)&v92.var2 + (int)*(float *)&v92.var0, (int)*(float *)&v92.var3 + (int)*(float *)&v92.var1);
        v69 = v68;
        Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)(*(_QWORD *)(a1 + 19064) + 64));
        v71 = *(_QWORD *)(a2 + 56);
        v72 = (HGBitmap *)HGObject::operator new(0xC8uLL);
        HGGLTexture::HGGLTexture((uint64_t)v72, v67, v69, v66, v71, Name, 1);
        v73 = (HGObject *)HGObject::operator new(0x20uLL);
        v74 = v73;
        v75 = *(_QWORD *)(a1 + 19064);
        v76 = *(std::__shared_weak_count **)(a1 + 19072);
        *(_QWORD *)&v93.var0 = v75;
        *(_QWORD *)&v93.var2 = v76;
        if (v76)
        {
          p_shared_owners = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(p_shared_owners);
          while (__stxr(v78 + 1, p_shared_owners));
        }
        HGObject::HGObject(v73);
        *(_QWORD *)v74 = &unk_1E65A2598;
        *((_QWORD *)v74 + 2) = v75;
        *((_QWORD *)v74 + 3) = v76;
        if (v76)
        {
          v79 = (unint64_t *)&v76->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
          do
            v81 = __ldaxr(v79);
          while (__stlxr(v81 - 1, v79));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        HGBitmap::SetStorage(v72, v74);
        v82 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v82, v72);
        *a6 = v82;
        (*(void (**)(HGObject *))(*(_QWORD *)v74 + 24))(v74);
        if (v72)
          (*(void (**)(HGBitmap *))(*(_QWORD *)v72 + 24))(v72);
      }
      goto LABEL_110;
    }
    v49 = (PGContext *)PGGetPerThreadContext();
    VirtualScreen = (PGInfo *)PGContext::getVirtualScreen(v49);
    BitsPerChannel = PCPixelFormat::getBitsPerChannel(*(_DWORD *)(v35 + 340));
    MaxTextureSize = PGInfo::getMaxTextureSize(VirtualScreen, BitsPerChannel);
    if (v91.i32[2] >= 1 && MaxTextureSize > v91.u32[2] && v91.i32[3] >= 1 && MaxTextureSize > v91.u32[3])
    {
      PGHelium::renderNodeToTexture(*(HGRenderer **)(a2 + 56), (uint64_t *)&v94, (uint64_t)&v91, *(unsigned int *)(v35 + 340), WorkingColorSpace, (HGGLBlendingInfo *)(v35 + 1316), 0, &v93);
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1 + 19064, (__int128 *)&v93.var0);
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v93);
    }
    v53 = *(_QWORD *)(a1 + 19064);
    if (v53)
    {
      v93 = (HGRect)vcvtq_f32_s32(v91);
      PGTexture::setTexCoords(v53, (float32x2_t *)&v93);
      *(HGRect *)(a1 + 19048) = v95;
      goto LABEL_97;
    }
LABEL_57:
    *a6 = (HGBitmapLoader *)v94;
    v94 = 0;
    goto LABEL_110;
  }
  v91.i64[1] = -1;
LABEL_47:
  *a6 = 0;
LABEL_110:
  PCSharedMutex::unlock(v88);
LABEL_111:
  if (v94)
    (*(void (**)(HGNode *))(*(_QWORD *)v94 + 24))(v94);
}

void sub_1B2EECEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  uint64_t v22;
  uint64_t v24;

  HGObject::operator delete(v21);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  PCSharedMutex::unlock(a13);
  v24 = *(_QWORD *)(v22 - 136);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  _Unwind_Resume(a1);
}

void OZMoShape::calcHashkey(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  PCWorkingColorVector *v5;
  PCWorkingColorVector *v6;
  __int128 v7;
  __int128 v8;
  CGColorSpace *v9;
  OZShapeRenderParams *CurrentRenderParams;
  int *v11;
  LiAgent *v12;
  int RenderQuality;
  double v14;
  char DoShapeAntialiasing;
  char shouldDrawSecondPassGradientInHelium;
  char shouldDrawSecondPassOutline;
  char shouldDrawAntialiasingOnFill;
  char shouldDrawSoftEdges;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  double v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t j;
  __int128 v27[8];
  _BYTE v28[128];
  _BYTE v29[128];
  _OWORD v30[5];
  CGColorSpace *v31;
  int v32;
  int8x8_t v33[521];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v33[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCWorkingColorVector::PCWorkingColorVector(v5);
  v7 = *(_OWORD *)(v3 + 48);
  v30[2] = *(_OWORD *)(v3 + 32);
  v30[3] = v7;
  v30[4] = *(_OWORD *)(v3 + 64);
  v8 = *(_OWORD *)(v3 + 16);
  v30[0] = *(_OWORD *)v3;
  v30[1] = v8;
  v9 = *(CGColorSpace **)(v3 + 80);
  v31 = v9;
  if (v9)
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  v32 = *(_DWORD *)(v3 + 88);
  CurrentRenderParams = (OZShapeRenderParams *)OZShape::getCurrentRenderParams(v4, (uint64_t)v30);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v31);
  v12 = *(LiAgent **)(v3 + 64);
  v11 = *(int **)(v3 + 72);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v33);
  if (!*((_BYTE *)CurrentRenderParams + 12)
    || ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 18888) + 80))(*(_QWORD *)(v4 + 18888), v3) & 1) == 0)
  {
    RenderQuality = OZRenderParams::getRenderQuality((OZRenderParams *)v11);
    PCHashWriteStream::writeValue(v33, RenderQuality);
    PCHashWriteStream::writeValue(v33, *(double *)(v3 + 32));
    PCHashWriteStream::writeValue(v33, *(double *)(v3 + 40));
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 416))(v4);
    PCHashWriteStream::writeValue(v33, v14);
    PCHashWriteStream::writeValue(v33, v11[81]);
    PCHashWriteStream::writeValue(v33, v11[82]);
    PCHashWriteStream::writeValue(v33, v11[83]);
    PCHashWriteStream::writeValue(v33, v11[80]);
    PCHashWriteStream::writeValue(v33, v11[84]);
    PCHashWriteStream::writeValue(v33, v11[85]);
    PCHashWriteStream::writeValue(v33, v11[88]);
    PCHashWriteStream::writeValue(v33, v11[89]);
    DoShapeAntialiasing = OZRenderParams::getDoShapeAntialiasing((OZRenderParams *)v11);
    PCHashWriteStream::writeValue(v33, DoShapeAntialiasing);
    PCHashWriteStream::writeValue(v33, v11[123]);
    shouldDrawSecondPassGradientInHelium = OZShape::shouldDrawSecondPassGradientInHelium((OZShape *)v4, v3, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawSecondPassGradientInHelium);
    shouldDrawSecondPassOutline = OZShape::shouldDrawSecondPassOutline((OZShape *)v4, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawSecondPassOutline);
    shouldDrawAntialiasingOnFill = OZShape::shouldDrawAntialiasingOnFill((OZShape *)v4, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawAntialiasingOnFill);
    shouldDrawSoftEdges = OZShape::shouldDrawSoftEdges((OZShape *)v4, CurrentRenderParams);
    PCHashWriteStream::writeValue(v33, shouldDrawSoftEdges);
    PCHashWriteStream::writeValue(v33, *((_BYTE *)CurrentRenderParams + 240));
    PCColorSpaceHandle::getMD5((CGColorSpace **)(v3 + 80), (PCWorkingColorVector *)v29);
    PCHashWriteStream::writeValue(v33, (const PCHash128 *)v29);
    PCHashWriteStream::writeValue(v33, *((_BYTE *)CurrentRenderParams + 112));
    v20 = 0;
    v21 = *((_QWORD *)v12 + 20);
    do
    {
      for (i = 0; i != 32; i += 8)
        (*(void (**)(int8x8_t *, double))(*(_QWORD *)v33 + 88))(v33, *(double *)(v21 + i));
      ++v20;
      v21 += 32;
    }
    while (v20 != 4);
    v23 = OZRotoshape::calcHashForStateSelfOnly(*(OZRotoshape **)(v4 + 19112), (PCSerializerWriteStream *)v33, (CMTime *)v11);
    if (*((_BYTE *)CurrentRenderParams + 12))
    {
      if ((*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(v4 + 18888) + 64))(*(_QWORD *)(v4 + 18888), v23))
      {
        LiAgent::getImageToWorldTransform(v12, (uint64_t)v28);
        LiAgent::getWorldToFilmTransform(v12, (uint64_t)v27);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v28, v27, (uint64_t)v29);
        v24 = 0;
        v25 = v29;
        do
        {
          for (j = 0; j != 32; j += 8)
            (*(void (**)(int8x8_t *, double))(*(_QWORD *)v33 + 88))(v33, *(double *)&v25[j]);
          ++v24;
          v25 += 32;
        }
        while (v24 != 4);
      }
      (*(void (**)(_QWORD, int8x8_t *, int *))(**(_QWORD **)(v4 + 18888) + 88))(*(_QWORD *)(v4 + 18888), v33, v11);
    }
    *(_OWORD *)v6 = *(_OWORD *)PCHashWriteStream::getHash(v33)->i8;
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v33);
}

void sub_1B2EED464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;

  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a70);
  _Unwind_Resume(a1);
}

PCMutex *OZMoShape::getEdgeTextureHeliumNode@<X0>(const void *a1@<X1>, unsigned int a2@<W2>, HGBitmapLoader **a3@<X8>)
{
  LiEdgeTexture *v4;

  if (a2 - 1 >= 6)
    v4 = 0;
  else
    v4 = (LiEdgeTexture *)a2;
  return LiEdgeTexture::getHeliumNode(a1, v4, a3);
}

uint64_t OZMoShape::getScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  OZRenderState v9;

  v7 = *(_QWORD *)(a1 + 19112);
  OZRenderState::OZRenderState(&v9);
  *(_OWORD *)&v9.var0.var0 = *(_OWORD *)a4;
  v9.var0.var3 = *(_QWORD *)(a4 + 16);
  v9.var10 = *(_BYTE *)(a4 + 24);
  v9.var16 = *(_BYTE *)(a4 + 26);
  *(_OWORD *)&v9.var1 = *(_OWORD *)(a4 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, OZRenderState *, _QWORD))(*(_QWORD *)(v7 + 200)
                                                                                               + 1312))(v7 + 200, a2, a3, 0, &v9, 0);
}

void OZMoShape::getShear(uint64_t a1, double *a2, double *a3, const CMTime *a4)
{
  OZTransformNode::getShear((OZTransformNode *)(*(_QWORD *)(a1 + 19112) + 200), a2, a3, a4);
}

unint64_t OZMoShape::calcHashForState(OZMoShape *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  int ValueAsInt;
  unint64_t result;

  OZShape::calcHashForState(this, a2, a3);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 6928), MEMORY[0x1E0CA2E68], 0.0);
  result = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 6800), 0, 1);
  if ((_DWORD)result)
  {
    if ((ValueAsInt - 1) <= 1)
      return OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 18728), a2, a3);
  }
  return result;
}

void OZMoShape::getShapeBounds(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  OZRenderState v7;

  if (*(_BYTE *)(a4 + 12) && !*(_DWORD *)(a4 + 120))
  {
    v6 = *(_QWORD *)(a1 + 18888);
    OZRenderState::OZRenderState(&v7);
    *(_OWORD *)&v7.var0.var0 = *(_OWORD *)a3;
    v7.var0.var3 = *(_QWORD *)(a3 + 16);
    v7.var10 = *(_BYTE *)(a3 + 24);
    v7.var16 = *(_BYTE *)(a3 + 26);
    *(_OWORD *)&v7.var1 = *(_OWORD *)(a3 + 32);
    (*(void (**)(uint64_t, float64x2_t *, OZRenderState *))(*(_QWORD *)v6 + 48))(v6, a2, &v7);
  }
  else
  {
    OZShape::getShapeBounds(a1, a2, a3, a4);
  }
}

uint64_t OZMoShape::setShapeTranslation(OZMoShape *this, double a2, double a3, const CMTime *a4)
{
  return OZTransformNode::setTranslation((OZTransformNode *)(*((_QWORD *)this + 2389) + 200), a2, a3, a4);
}

uint64_t OZMoShape::setDirty(OZMoShape *this, char a2, int a3)
{
  uint64_t result;

  OZShape::setDirty((uint64_t)this, a2, a3);
  result = *((_QWORD *)this + 2361);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
  return result;
}

uint64_t OZMoShape::hasShapeBehaviors(OZChannelBase **this)
{
  return OZChannelBase::isObjectRef(this[2389]);
}

uint64_t OZMoShape::hasWriteOnBehavior(OZChannelBase **this)
{
  return OZChannelBase::isObjectRef(this[2389]);
}

CGColorSpace **OZMoShape::finishCurve(OZMoShape *this, const CMTime *a2)
{
  OZChannel *v4;
  double v5;

  v4 = (OZChannel *)((char *)this + 2488);
  v5 = (*(double (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 1328))(*((_QWORD *)this + 2389) + 200);
  OZChannel::setValue(v4, MEMORY[0x1E0CA2E68], v5, 0);
  return OZShape::finishCurve(this, a2, 1);
}

uint64_t OZMoShape::getPixelAspectRatio(OZMoShape *this)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 1328))(*((_QWORD *)this + 2389) + 200);
}

uint64_t OZMoShape::offsetIntrinsicPosition(OZMoShape *this, CMTime *a2, double a3, double a4)
{
  return OZTransformNode::offsetTranslation((OZTransformNode *)(*((_QWORD *)this + 2389) + 200), a3, a4, a2);
}

uint64_t OZMoShape::setIntrinsicRotation(OZMoShape *this, CMTime *a2, double a3)
{
  return OZTransformNode::setRotation((OZTransformNode *)(*((_QWORD *)this + 2389) + 200), a3, a2);
}

CGColorSpace **OZMoShape::getOriginalBounds(uint64_t a1, uint64_t a2, __int128 *a3)
{
  PCMutex *v6;
  __int128 v7;
  __int128 v8;
  CGColorSpace *v9;
  uint64_t CurrentRenderParams;
  __int128 v11;
  __int128 v12;
  CGColorSpace *v13;
  uint64_t v15;
  OZRenderState v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGColorSpace *v22;
  int v23;
  _OWORD v24[5];
  CGColorSpace *v25;
  int v26;
  uint64_t v27;
  char v28;

  v6 = (PCMutex *)(a1 + 8);
  v27 = a1 + 8;
  PCMutex::lock((PCMutex *)(a1 + 8));
  v28 = 1;
  v7 = a3[3];
  v24[2] = a3[2];
  v24[3] = v7;
  v24[4] = a3[4];
  v8 = a3[1];
  v24[0] = *a3;
  v24[1] = v8;
  v9 = (CGColorSpace *)*((_QWORD *)a3 + 10);
  v25 = v9;
  if (v9)
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  v26 = *((_DWORD *)a3 + 22);
  CurrentRenderParams = OZShape::getCurrentRenderParams(a1, (uint64_t)v24);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v25);
  v11 = a3[3];
  v19 = a3[2];
  v20 = v11;
  v21 = a3[4];
  v12 = a3[1];
  v17 = *a3;
  v18 = v12;
  v13 = (CGColorSpace *)*((_QWORD *)a3 + 10);
  v22 = v13;
  if (v13)
    PCCFRefTraits<CGColorSpace *>::retain(v13);
  v23 = *((_DWORD *)a3 + 22);
  BYTE10(v18) = 0;
  (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 64))(a1, &v17, CurrentRenderParams, 0, 1);
  if (*(_BYTE *)(CurrentRenderParams + 12) && !*(_DWORD *)(CurrentRenderParams + 120))
  {
    PCMutex::unlock(v6);
    v28 = 0;
    v15 = *(_QWORD *)(a1 + 18888);
    OZRenderState::OZRenderState(&v16);
    *(_OWORD *)&v16.var0.var0 = *a3;
    v16.var0.var3 = *((_QWORD *)a3 + 2);
    v16.var10 = *((_BYTE *)a3 + 24);
    v16.var16 = *((_BYTE *)a3 + 26);
    *(_OWORD *)&v16.var1 = a3[2];
    (*(void (**)(uint64_t, uint64_t, OZRenderState *))(*(_QWORD *)v15 + 48))(v15, a2, &v16);
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, &v17, CurrentRenderParams);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
    return (CGColorSpace **)PCMutex::unlock(v6);
  }
}

void sub_1B2EED920(_Unwind_Exception *a1)
{
  CGColorSpace **v1;
  uint64_t v2;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 80);
  _Unwind_Resume(a1);
}

uint64_t OZMoShape::getUIBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCMutex *v6;
  __int128 v7;
  __int128 v8;
  CGColorSpace *v9;
  uint64_t CurrentRenderParams;
  uint64_t v12;
  OZRenderState v13;
  _OWORD v14[5];
  CGColorSpace *v15;
  int v16;
  uint64_t v17;
  char v18;

  v6 = (PCMutex *)(a1 + 8);
  v17 = a1 + 8;
  PCMutex::lock((PCMutex *)(a1 + 8));
  v18 = 1;
  v7 = *(_OWORD *)(a3 + 48);
  v14[2] = *(_OWORD *)(a3 + 32);
  v14[3] = v7;
  v14[4] = *(_OWORD *)(a3 + 64);
  v8 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v8;
  v9 = *(CGColorSpace **)(a3 + 80);
  v15 = v9;
  if (v9)
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  v16 = *(_DWORD *)(a3 + 88);
  CurrentRenderParams = OZShape::getCurrentRenderParams(a1, (uint64_t)v14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 64))(a1, a3, CurrentRenderParams, 0, 1);
  if (*(_BYTE *)(CurrentRenderParams + 12) && !*(_DWORD *)(CurrentRenderParams + 120))
  {
    PCMutex::unlock(v6);
    v18 = 0;
    v12 = *(_QWORD *)(a1 + 18888);
    OZRenderState::OZRenderState(&v13);
    *(_OWORD *)&v13.var0.var0 = *(_OWORD *)a3;
    v13.var0.var3 = *(_QWORD *)(a3 + 16);
    v13.var10 = *(_BYTE *)(a3 + 24);
    v13.var16 = *(_BYTE *)(a3 + 26);
    *(_OWORD *)&v13.var1 = *(_OWORD *)(a3 + 32);
    return (*(uint64_t (**)(uint64_t, uint64_t, OZRenderState *))(*(_QWORD *)v12 + 48))(v12, a2, &v13);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3, CurrentRenderParams);
    return PCMutex::unlock(v6);
  }
}

void sub_1B2EEDAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCLockSentry<PCMutex>::~PCLockSentry(v1 - 80);
  _Unwind_Resume(a1);
}

void OZMoShape::createSnapSet(uint64_t a1, double *a2, uint64_t **a3, uint64_t a4, int a5, int a6, int a7)
{
  PCMutex *v14;
  __int128 v15;
  __int128 v16;
  CGColorSpace *v17;
  OZShapeRenderParams *CurrentRenderParams;
  double *Contour;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  _BOOL4 v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  _BYTE v67[16];
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  char *v73;
  char *v74;
  _OWORD v75[5];
  CGColorSpace *v76;
  int v77;
  uint64_t v78;
  char v79;

  v14 = (PCMutex *)(a1 + 8);
  v78 = a1 + 8;
  PCMutex::lock((PCMutex *)(a1 + 8));
  v79 = 1;
  v15 = *(_OWORD *)(a4 + 48);
  v75[2] = *(_OWORD *)(a4 + 32);
  v75[3] = v15;
  v75[4] = *(_OWORD *)(a4 + 64);
  v16 = *(_OWORD *)(a4 + 16);
  v75[0] = *(_OWORD *)a4;
  v75[1] = v16;
  v17 = *(CGColorSpace **)(a4 + 80);
  v76 = v17;
  if (v17)
    PCCFRefTraits<CGColorSpace *>::retain(v17);
  v77 = *(_DWORD *)(a4 + 88);
  CurrentRenderParams = (OZShapeRenderParams *)OZShape::getCurrentRenderParams(a1, (uint64_t)v75);
  Contour = (double *)OZShape::getContour((OZShape *)a1, (const CMTime *)a4, CurrentRenderParams);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v76);
  if (Contour[5] >= 0.0
    && Contour[6] >= 0.0
    && ((int)OZDynamicCurve::getNumberOfValidKeypoints((os_unfair_lock_s *)(a1 + 496), (const CMTime *)a4) > 3
     || OZShape::isGeometricShape((OZShape *)a1)))
  {
    v21 = Contour[3];
    v20 = Contour[4];
    v22 = Contour[5];
    v23 = Contour[6];
    PCMutex::unlock(v14);
    v79 = 0;
    v24 = a2[12];
    v25 = a2[13];
    v26 = v21 * v24;
    v27 = (v20 + v23) * v25;
    v28 = a2[15];
    v29 = v28 + v21 * v24 + v27;
    v30 = a2[1];
    v31 = v21 * *a2;
    v32 = (v20 + v23) * v30;
    v33 = a2[3];
    v34 = a2[4];
    v35 = (v33 + v31 + v32) / v29;
    v36 = v21 * v34;
    v37 = a2[5];
    v38 = (v20 + v23) * v37;
    v39 = a2[7];
    v40 = (v39 + v21 * v34 + v38) / v29;
    v41 = COERCE__INT64(fabs(v40)) < 0x7FF0000000000000;
    if (COERCE__INT64(fabs(v35)) <= 0x7FEFFFFFFFFFFFFFLL && v41)
    {
      v42 = (v21 + v22) * v24;
      v43 = v28 + v42 + v27;
      v44 = (v21 + v22) * *a2;
      v45 = (v33 + v44 + v32) / v43;
      v46 = (v21 + v22) * v34;
      v47 = (v39 + v46 + v38) / v43;
      if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v48 = v20 * v25;
        v49 = v28 + v26 + v20 * v25;
        v50 = v20 * v30;
        v51 = (v33 + v31 + v50) / v49;
        v52 = (v39 + v36 + v20 * v37) / v49;
        if ((*(_QWORD *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v53 = v28 + v42 + v48;
          v54 = (v33 + v44 + v50) / v53;
          v55 = (v39 + v46 + v20 * v37) / v53;
          if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)&v55 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (v54 <= v51)
              v56 = v54;
            else
              v56 = v51;
            if (v54 < v51)
              v54 = v51;
            if (v45 <= v56)
              v56 = v45;
            if (v35 <= v56)
              v57 = v35;
            else
              v57 = v56;
            if (v45 >= v54)
              v54 = v45;
            if (v35 >= v54)
              v58 = v35;
            else
              v58 = v54;
            if (v55 <= v52)
              v59 = v55;
            else
              v59 = v52;
            if (v55 < v52)
              v55 = v52;
            if (v47 <= v59)
              v59 = v47;
            if (v40 <= v59)
              v60 = v40;
            else
              v60 = v59;
            if (v47 >= v55)
              v61 = v47;
            else
              v61 = v55;
            if (v40 >= v61)
              v62 = v40;
            else
              v62 = v61;
            if (*(_BYTE *)(a1 + 18872))
            {
              if (a7)
              {
                OZChannelCurve::getEnabledVerticesList((os_unfair_lock_s *)(a1 + 208), (const CMTime *)a4, &v73);
                v64 = v73;
                v63 = v74;
                if (v73 != v74)
                {
                  do
                  {
                    v65 = *(char **)v64;
                    if (*(_QWORD *)v64 != *(_QWORD *)(a1 + 18856))
                    {
                      v66 = (char *)*((_QWORD *)v64 + 1);
                      if (v66 != *(char **)(a1 + 18864))
                      {
                        v70 = 0.0;
                        v71 = 0.0;
                        v72 = 0;
                        v68 = 0.0;
                        v69 = 0.0;
                        OZChannelCurve::getVertexValue(a1 + 208, v65, v66, (CMTime *)a4, &v69, &v68);
                        v70 = v69;
                        v71 = v68;
                        v72 = 0;
                        PCMatrix44Tmpl<double>::transform<double>(a2, &v70, &v70);
                        if ((*(_QWORD *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                          && (*(_QWORD *)&v71 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                          && (v72 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                        {
                          OZSnap::OZSnap((OZSnap *)v67, 258, v70, v60, v62);
                          std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v67, (uint64_t)v67);
                          OZSnap::OZSnap((OZSnap *)v67, 514, v71, v57, v58);
                          std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v67, (uint64_t)v67);
                        }
                        v63 = v74;
                      }
                    }
                    v64 += 16;
                  }
                  while (v64 != v63);
                  v64 = v73;
                }
                if (v64)
                {
                  v74 = v64;
                  operator delete(v64);
                }
              }
            }
            else
            {
              if (a5)
              {
                OZSnap::OZSnap((OZSnap *)&v73, 258, (v57 + v58) * 0.5, v60, v62);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 514, (v60 + v62) * 0.5, v57, v58);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
              }
              if (a6)
              {
                OZSnap::OZSnap((OZSnap *)&v73, 257, v57, v60, v62);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 260, v58, v60, v62);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 513, v60, v57, v58);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
                OZSnap::OZSnap((OZSnap *)&v73, 516, v62, v57, v58);
                std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)&v73, (uint64_t)&v73);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    PCMutex::unlock(v14);
  }
}

void sub_1B2EEE038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  PCLockSentry<PCMutex>::~PCLockSentry(v17 - 136);
  _Unwind_Resume(a1);
}

uint64_t OZMoShape::getCurveSamplesForOSC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  PCMutex *v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (PCMutex *)(a1 + 8);
  PCMutex::lock((PCMutex *)(a1 + 8));
  return PCMutex::unlock(v2);
}

uint64_t OZMoShape::getHasPenPropertyInfo(OZMoShape *this)
{
  if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 1343) + 560))((char *)this + 10744) & 1) != 0
    || ((*(uint64_t (**)(char *))(*((_QWORD *)this + 1363) + 560))((char *)this + 10904) & 1) != 0
    || ((*(uint64_t (**)(char *))(*((_QWORD *)this + 1419) + 560))((char *)this + 11352) & 1) != 0
    || ((*(uint64_t (**)(char *))(*((_QWORD *)this + 1380) + 560))((char *)this + 11040) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(char *))(*((_QWORD *)this + 1399) + 560))((char *)this + 11192);
  }
}

uint64_t OZMoShape::getFreehandPaintVertices(OZMoShape *this)
{
  return *((_QWORD *)this + 2362);
}

uint64_t OZMoShape::getFreehandPaintLengthAccums(OZMoShape *this)
{
  return *((_QWORD *)this + 2363);
}

uint64_t OZMoShape::getFreehandPaintPressures(OZMoShape *this)
{
  return *((_QWORD *)this + 2364);
}

uint64_t OZMoShape::getFreehandPaintTilts(OZMoShape *this)
{
  return *((_QWORD *)this + 2365);
}

uint64_t OZMoShape::getFreehandPaintTimes(OZMoShape *this)
{
  return *((_QWORD *)this + 2366);
}

uint64_t OZMoShape::getPaintInteractiveValuesLock(OZMoShape *this)
{
  return *((_QWORD *)this + 2367);
}

uint64_t OZMoShape::getStrokeWidthOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2361) + 120))(*((_QWORD *)this + 2361));
}

uint64_t OZMoShape::getStrokeSpacingOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2361) + 128))(*((_QWORD *)this + 2361));
}

uint64_t OZMoShape::getStrokeJitterOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2361) + 136))(*((_QWORD *)this + 2361));
}

uint64_t OZMoShape::getStrokeRotationOSChan(OZMoShape *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2361) + 144))(*((_QWORD *)this + 2361));
}

OZChannelBase *OZMoShape::setParticlePaint(OZMoShape *this, OZSceneNode *lpsrc, unsigned int a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;

  if (lpsrc)
  {
    v7 = v6;
    *((_QWORD *)this + 2360) = v6;
    if (v6)
  }
  else
  {
    v7 = 0;
    v6 = 0;
    *((_QWORD *)this + 2360) = 0;
  }
  *((_QWORD *)this + 2361) = v6;
  OZChannelBase::setID((OZChannelBase *)(v7 + 56), a3);
  v8 = *((_QWORD *)this + 2389);
  if (v8)
    v9 = v8 + 200;
  else
    v9 = 0;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2360) + 256))(*((_QWORD *)this + 2360), v9);
  v10 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2360) + 640))(*((_QWORD *)this + 2360));
  OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18728), v10);
  v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 640))(lpsrc);
  return OZChannelBase::resetFlag(v11, 64, 0);
}

uint64_t OZMoShape::resetParticlePaint(OZMoShape *this)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)((char *)this + 18880);
  result = *((_QWORD *)this + 2360);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *v1 = 0;
  v1[1] = 0;
  return result;
}

void OZMoShape::applyStyle(OZMoShape *this, const OZMoShape *a2)
{
  OZGradientGroupShader *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  OZScene *v8;
  OZScene *v9;
  OZChannelBase *v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  OZChannelBase *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  OZScene *v25;
  uint64_t v26;
  CMTime v27;
  CMTime v28[2];

  v4 = (OZGradientGroupShader *)*((_QWORD *)this + 2340);
  if (v4)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v4);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)this + 2340) = 0;
  }
  OZShapeRenderParams::operator=(*((_QWORD *)this + 333), *((_QWORD *)a2 + 333));
  OZShapeRenderParams::operator=(*((_QWORD *)this + 334), *((_QWORD *)a2 + 334));
  OZChannelFolder::operator=((uint64_t)this + 2784);
  OZChannelGradientPositioned::operator=((uint64_t)this + 4328, (uint64_t)a2 + 4328);
  OZChannelBase::operator=((uint64_t)this + 6928, (uint64_t)a2 + 6928);
  OZChannelBase::operator=((uint64_t)this + 8496, (uint64_t)a2 + 8496);
  OZChannelBase::operator=((uint64_t)this + 8648, (uint64_t)a2 + 8648);
  OZChannelBase::operator=((uint64_t)this + 8904, (uint64_t)a2 + 8904);
  OZChannelBase::operator=((uint64_t)this + 9160, (uint64_t)a2 + 9160);
  OZChannelBase::operator=((uint64_t)this + 9416, (uint64_t)a2 + 9416);
  OZChannelBase::operator=((uint64_t)this + 9568, (uint64_t)a2 + 9568);
  OZChannelBase::operator=((uint64_t)this + 9720, (uint64_t)a2 + 9720);
  OZChannelBase::operator=((uint64_t)this + 9976, (uint64_t)a2 + 9976);
  OZChannelBase::operator=((uint64_t)this + 10128, (uint64_t)a2 + 10128);
  OZChannelBase::operator=((uint64_t)this + 10440, (uint64_t)a2 + 10440);
  OZChannelBase::operator=((uint64_t)this + 10592, (uint64_t)a2 + 10592);
  OZChannelBase::operator=((uint64_t)this + 11512, (uint64_t)a2 + 11512);
  OZChannelBase::operator=((uint64_t)this + 11664, (uint64_t)a2 + 11664);
  *((_BYTE *)this + 2640) = *((_BYTE *)a2 + 2640);
  v5 = *((_QWORD *)this + 2360);
  if (v5)
  {
    v6 = *((_QWORD *)this + 2389);
    v7 = (uint64_t *)(v6 + 1200);
    if (v6 + 1200 != *(_QWORD *)(v6 + 1208))
    {
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*v7 + 16) + 120))(*(_QWORD *)(*v7 + 16));
        v7 = (uint64_t *)*v7;
      }
      while (v7 != *(uint64_t **)(v6 + 1208));
      v6 = *((_QWORD *)this + 2389);
    }
    v8 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 200) + 272))(v6 + 200);
    if (v8)
    {
      v9 = v8;
      OZScene::unregisterNode(v8, *((OZSceneNode **)this + 2360));
      OZScene::removeAllDependencies(v9, *((OZSceneNode **)this + 2360));
    }
    v10 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2360) + 640))(*((_QWORD *)this + 2360));
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18728), v10);
    v11 = *((_QWORD *)this + 2360);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *((_QWORD *)this + 2360) = 0;
  }
  v12 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)a2 + 2360) + 8)
                                                                         + 24))(*(_QWORD *)(*((_QWORD *)a2 + 2360) + 8), *((_QWORD *)a2 + 2360), 2);
  *((_QWORD *)this + 2360) = v13;
  v14 = *((_QWORD *)this + 2389);
  if (v14)
    v15 = v14 + 200;
  else
    v15 = 0;
  (*(void (**)(void *, uint64_t))(*(_QWORD *)v13 + 256))(v13, v15);
  v16 = *((_QWORD *)this + 2360);
  if (v16)
  else
    v17 = 0;
  *((_QWORD *)this + 2361) = v17;
  v18 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 640))(v16);
  OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18728), v18);
  v19 = *((_QWORD *)this + 2389);
  if (v5)
  {
    v20 = (uint64_t *)(v19 + 1200);
    if (v19 + 1200 != *(_QWORD *)(v19 + 1208))
    {
      do
      {
        v21 = *((_QWORD *)this + 2389);
        if (v21)
          v22 = v21 + 200;
        else
          v22 = 0;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*v20 + 16) + 96))(*(_QWORD *)(*v20 + 16), v22);
        v20 = (uint64_t *)*v20;
      }
      while (v20 != *(uint64_t **)(v19 + 1208));
      v19 = *((_QWORD *)this + 2389);
    }
  }
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)(v19 + 200) + 1128))(v28, v19 + 200);
  v27 = v28[0];
  OZMoShape::initPPaintTime(this, &v27, (const PCTimeRange *)v28);
  v23 = *((_QWORD *)this + 2360);
  (*(void (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 1328))(*((_QWORD *)this + 2389) + 200);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 1344))(v23);
  *((_QWORD *)this + 2361) = v24;
  (*(void (**)(void *))(*(_QWORD *)v24 + 32))(v24);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200))
  {
    v25 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
    OZScene::registerNode(v25, *((OZSceneNode **)this + 2360));
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2389) + 200) + 272))(*((_QWORD *)this + 2389) + 200);
    OZDocument::postNotification(*(OZDocument **)(v26 + 1584), 0x80000);
  }
}

uint64_t OZMoShape::openMedia(OZMoShape *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2360);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
  return result;
}

uint64_t OZMoShape::prerollBegin(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 18880);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t OZMoShape::prerollEnd(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 18880);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

uint64_t OZMoShape::setRate(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 18880);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t OZMoShape::scheduleTokens(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 18880);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  return result;
}

uint64_t OZMoShape::hintTokensWillImage(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 18880);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

uint64_t OZMoShape::getTokensImage(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 18880);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
  return result;
}

uint64_t OZMoShape::pruneTokensAtTime(OZMoShape *this, CMTime *a2, const char *a3)
{
  uint64_t result;
  CMTime v4;

  result = *((_QWORD *)this + 2360);
  if (result)
  {
    v4 = *a2;
    return (*(uint64_t (**)(uint64_t, CMTime *, const char *))(*(_QWORD *)result + 160))(result, &v4, a3);
  }
  return result;
}

uint64_t OZMoShape::pruneTokensExceptAtTime(OZMoShape *this, CMTime *a2, const char *a3)
{
  uint64_t result;
  CMTime v4;

  result = *((_QWORD *)this + 2360);
  if (result)
  {
    v4 = *a2;
    return (*(uint64_t (**)(uint64_t, CMTime *, const char *))(*(_QWORD *)result + 168))(result, &v4, a3);
  }
  return result;
}

uint64_t OZMoShape::pruneAllTokens(OZMoShape *this, const char *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 2360);
  if (result)
    return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)result + 176))(result, a2);
  return result;
}

OZShape *OZShape::clone(OZShape *this)
{
  OZShape *v2;

  v2 = (OZShape *)operator new();
  OZShape::OZShape(v2, this, 0);
  return v2;
}

void sub_1B2EEE888(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C401D7E3A3CLL);
  _Unwind_Resume(a1);
}

void OZShape::getPixelAspectRatio(OZShape *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2488), MEMORY[0x1E0CA2E68], 0.0);
}

BOOL OZShape::shouldApplyScaleToFeathering(OZShape *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 14752), MEMORY[0x1E0CA2E68], 0.0) == 0;
}

double OZShape::getIntrinsicTransform@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a1 = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void OZShape::getIntrinsicPosition(OZShape *this, CMTime *a2, double *a3, double *a4)
{
  if (a3)
    *a3 = 0.0;
  if (a4)
    *a4 = 0.0;
}

void OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(OZChanSceneNodeRefWithPicker *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  _QWORD *v6;

  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(this, a2, a3, a4, a5, a6);
  *v6 = &unk_1E65AE7D0;
  v6[2] = &unk_1E65AEB60;
}

void OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(OZChanSceneNodeRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(this, a2, a3, a4);
  *v4 = &unk_1E65AE7D0;
  v4[2] = &unk_1E65AEB60;
}

void OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(OZChanSceneNodeRefWithPicker *this, const OZChanSceneNodeRefWithPicker *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(this, a2, a3);
  *v3 = &unk_1E65AE7D0;
  v3[2] = &unk_1E65AEB60;
}

uint64_t OZCrop::getBoundary(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    throw_PCNullPointerException(1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, float64x2_t *))(*(_QWORD *)v5 + 24))(v5, a2, a3);
  if ((_DWORD)v6)
    PCRect<double>::operator&=(a3, (float64x2_t *)(a1 + 40));
  return v6;
}

void OZCrop::getHelium(OZCrop *this@<X0>, __n128 *a2@<X1>, HGNode **a3@<X8>)
{
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int32x2_t v18;
  int32x2_t v19;
  const LiImagePolygon *Crop;
  unint64_t v21;
  __n128 v22[8];
  uint64_t *v23[14];
  float64x2_t v24[2];
  _OWORD v25[8];
  float64x2_t v26;
  float64x2_t v27;
  __int128 v28;

  if (*((double *)this + 7) <= 0.0 || *((double *)this + 8) <= 0.0)
  {
    *a3 = 0;
    return;
  }
  v26 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v27 = _Q0;
  v28 = xmmword_1B30503B0;
  v11 = (__int128 *)a2[10].n128_u64[0];
  v12 = v11[3];
  v14 = *v11;
  v13 = v11[1];
  v25[2] = v11[2];
  v25[3] = v12;
  v25[0] = v14;
  v25[1] = v13;
  v15 = v11[7];
  v17 = v11[4];
  v16 = v11[5];
  v25[6] = v11[6];
  v25[7] = v15;
  v25[4] = v17;
  v25[5] = v16;
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)v25, (double *)this + 5, (uint64_t)&v26))
  {
    v18 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v26, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    v19 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v26, v27))));
    *(int32x2_t *)&v28 = v18;
    *((int32x2_t *)&v28 + 1) = vsub_s32(v19, v18);
    v21 = *((_QWORD *)&v28 + 1);
    if ((LiAgent::haveROI((LiAgent *)a2) & 1) != 0)
    {
      LiAgent::getROI(a2, v22);
      if ((v21 & 0x80000000) == 0 && (v21 & 0x8000000000000000) == 0)
      {
        *(int32x2_t *)&v28 = vmax_s32(v18, (int32x2_t)v22[0].n128_u64[0]);
        *((int32x2_t *)&v28 + 1) = vsub_s32(vmin_s32(v19, vadd_s32(*(int32x2_t *)&v22[0].n128_i8[8], (int32x2_t)v22[0].n128_u64[0])), *(int32x2_t *)&v28);
      }
    }
    goto LABEL_11;
  }
  if ((LiAgent::haveROI((LiAgent *)a2) & 1) != 0)
  {
    LiAgent::getROI(a2, (__n128 *)&v28);
LABEL_11:
    LiAgent::setInputROI((uint64_t)a2, (__n128 *)&v28);
  }
  a2[2].n128_u32[0] = 1;
  LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 2), a3);
  LiAgent::getBoundary((LiAgent *)a2, (uint64_t)v24);
  PCRect<double>::operator&=(v24, (float64x2_t *)((char *)this + 40));
  Crop = (const LiImagePolygon *)LiAgent::getCrop((LiAgent *)a2);
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v23, Crop);
  if ((((char *)v23[9] - (char *)v23[8]) & 0x1FFFFFFFE0) != 0)
  {
    LiAgent::getInversePixelTransform((LiAgent *)a2, 0.0, (uint64_t)v22);
    liTransformAndClip(v24[0].f64, v22[0].n128_f64, v23);
  }
  else
  {
    LiImagePolygon::set((uint64_t)v23, v24[0].f64, 0);
    LiAgent::projectAndClipPolygon((double **)a2, v23, 2.0);
  }
  LiAgent::outCrop((LiAgent *)a2, (const LiImagePolygon *)v23);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v23);
}

void sub_1B2EEEC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a27);
  if (*v27)
    (*(void (**)(_QWORD))(*(_QWORD *)*v27 + 24))(*v27);
  _Unwind_Resume(a1);
}

void OZCrop::~OZCrop(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E65AED18;
  this[9].var0 = (PC_Sp_counted_base *)off_1E65AEE00;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65AECD0);
  this[9].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[11].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[10].var0);
}

{
  OZCrop::~OZCrop(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZCrop::~OZCrop(OZCrop *this)
{
  OZCrop::~OZCrop((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  OZCrop::~OZCrop((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

void OZLiElementTimeRender::getSourceAtTime(OZLiElementTimeRender *this, CMTime *a2, BOOL a3, const OZRenderParams *a4)
{
  CMTimeEpoch epoch;
  __int128 v7;
  CMTimeEpoch v8;
  uint64_t v9;
  uint64_t v10;

  OZRenderParams::OZRenderParams((OZRenderParams *)&v7, a4);
  v7 = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  v9 = 0;
  v10 = 0;
  v8 = epoch;
  (*(void (**)(_QWORD, __int128 *, char *, _QWORD))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2), &v7, (char *)this + 24, 0);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v7);
}

void sub_1B2EEEDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZLiElementTimeRender::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 328);
  if (!v2)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 112))(v2, a2);
}

uint64_t OZLiElementTimeRender::print(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;

  LiImageSource::printIndent(a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"OZLiElementTimeRender:\n", 23);
  v6 = *(_QWORD *)(a1 + 328);
  if (!v6)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v6 + 128))(v6, a2, (a3 + 1));
}

uint64_t OZLiElementTimeRender::adjustCasterLocalToWorld(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 328);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

void OZLiElementTimeRender::~OZLiElementTimeRender(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E65AEFA0;
  this[43].var0 = (PC_Sp_counted_base *)&unk_1E65AF070;
  PCSharedCount::~PCSharedCount(this + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&this[31]);
  std::__list_imp<unsigned int>::clear(&this[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65AF090);
  this[43].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[45].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[44].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E65AEFA0;
  this[43].var0 = (PC_Sp_counted_base *)&unk_1E65AF070;
  PCSharedCount::~PCSharedCount(this + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&this[31]);
  std::__list_imp<unsigned int>::clear(&this[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65AF090);
  this[43].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[45].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[44].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZLiElementTimeRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 328);
  if (!v3)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2, a3);
}

uint64_t OZLiElementTimeRender::filteredEdges(OZLiElementTimeRender *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 41);
  if (!v1)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
}

uint64_t OZLiElementTimeRender::pixelTransformSupport(OZLiElementTimeRender *this, const LiRenderParameters *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 41);
  if (!v2)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, const LiRenderParameters *))(*(_QWORD *)v2 + 56))(v2, a2);
}

uint64_t OZLiElementTimeRender::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 328);
  if (!v4)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a2, a3, a4);
}

uint64_t OZLiElementTimeRender::imageSpace(OZLiElementTimeRender *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 41);
  if (!v1)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 80))(v1);
}

uint64_t OZLiElementTimeRender::setImageSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 328);
  if (!v2)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 88))(v2, a2);
}

uint64_t *OZLiElementTimeRender::getHelium@<X0>(OZLiElementTimeRender *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  LiImageSource *v3;

  v3 = (LiImageSource *)*((_QWORD *)this + 41);
  if (!v3)
    throw_PCNullPointerException(1);
  return LiImageSource::getHeliumPublic(a3, v3, a2);
}

void `virtual thunk to'OZLiElementTimeRender::~OZLiElementTimeRender(OZLiElementTimeRender *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65AEFA0;
  v1[43].var0 = (PC_Sp_counted_base *)&unk_1E65AF070;
  PCSharedCount::~PCSharedCount(v1 + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v1[31]);
  std::__list_imp<unsigned int>::clear(&v1[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65AF090);
  v1[43].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[45].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[44].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65AEFA0;
  v1[43].var0 = (PC_Sp_counted_base *)&unk_1E65AF070;
  PCSharedCount::~PCSharedCount(v1 + 42);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v1[31]);
  std::__list_imp<unsigned int>::clear(&v1[11].var0);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65AF090);
  v1[43].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[45].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[44].var0);
  JUMPOUT(0x1B5E29170);
}

_OWORD *OZChannelColorCorrection::Register(OZChannelColorCorrection *this)
{
  _anonymous_namespace_::OZChannelColorCorrection_Factory *Instance;
  OZFactory *v2;

  Instance = (_anonymous_namespace_::OZChannelColorCorrection_Factory *)OZFactories::getInstance(this);
  return OZFactories::addFactory((uint64_t **)Instance, v2);
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::getInstance(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
  }
}

void OZChannelColorCorrection::commonInitOZColorCorrectionUIChannel(OZChannelColorCorrection *this)
{
  uint64_t v2;

  {
    v2 = operator new();
    OZChannelInfo::OZChannelInfo((OZChannelInfo *)v2, 0.0, 4294967300.0, 1.0, 1.0, 1.0, "");
    PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
    *(_QWORD *)v2 = &off_1E65AF730;
    *(_QWORD *)(v2 + 80) = &unk_1E65AF750;
  }
  *((_QWORD *)this + 16) = v2;
  *((_QWORD *)this + 17) = v2;
}

void sub_1B2EEF3B0(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<`anonymous namespace'::OZChannelColorCorrection_Factory::getInstance(void)::{lambda(void)#1} &&>>()
{
  _QWORD *v0;
  __int128 v1;
  __int128 v2;

  v0 = (_QWORD *)operator new();
  v1 = xmmword_1B3555A90;
  v2 = xmmword_1B35607A0;
  OZFactory::OZFactory((uint64_t)v0, &v2, &v1, 1);
  *v0 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v0 + 16), 0);
  *v0 = &off_1E65AF238;
  v0[16] = &unk_1E65AF308;
}

void sub_1B2EEF47C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::~OZChannelColorCorrection_Factory(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrection_Factory *)((char *)this + 128));
  OZFactory::~OZFactory((OZFactory *)this);
}

{
  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrection_Factory *)((char *)this + 128));
  OZFactory::~OZFactory((OZFactory *)this);
  JUMPOUT(0x1B5E29170);
}

OZChannelColorCorrection *`anonymous namespace'::OZChannelColorCorrection_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelColorCorrection *v6;

  v6 = (OZChannelColorCorrection *)operator new();
  OZChannelColorCorrection::OZChannelColorCorrection(v6, this, a2, a3, 0);
  return v6;
}

void sub_1B2EEF574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::createCopy(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZFactoryBase *a2)
{
  uint64_t v3;
  OZChannelBase *v4;

  v3 = operator new();
  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E65AF360;
  *(_QWORD *)(v3 + 16) = &unk_1E65AF6C0;
  return v3;
}

void sub_1B2EEF618(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::createInstance(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZFactoryBase *a2)
{
  return 0;
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::description(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("Channel"));
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::unlocalizedDescription(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return (*(uint64_t (**)(_anonymous_namespace_::OZChannelColorCorrection_Factory *))(*(_QWORD *)this + 40))(this);
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::manufacturer(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("Apple"));
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::version(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return 1;
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::revision(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return 0;
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::getCategoryName(PCSharedCount *a1@<X8>)
{
  PCSharedCount::PCSharedCount(a1);
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::getEnglishCategoryName(PCSharedCount *a1@<X8>)
{
  PCSharedCount::PCSharedCount(a1);
}

const char *`anonymous namespace'::OZChannelColorCorrection_Factory::getBundleID(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return "";
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::getIconNameInternal(PCSharedCount *a1@<X8>)
{
  PCSharedCount::PCSharedCount(a1);
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::getIconNameBWInternal(PCSharedCount *a1@<X8>)
{
  PCSharedCount::PCSharedCount(a1);
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::getIconIDInternal(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  return 0xFFFFFFFFLL;
}

void `anonymous namespace'::OZChannelColorCorrection_Factory::getLibraryIconNameInternal(PCSharedCount *a1@<X8>)
{
  PCSharedCount::PCSharedCount(a1);
}

OZChannelColorCorrection *`anonymous namespace'::OZChannelColorCorrection_Factory::createChannel(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelColorCorrection *v6;

  v6 = (OZChannelColorCorrection *)operator new();
  OZChannelColorCorrection::OZChannelColorCorrection(v6, this, a2, a3, 0);
  return v6;
}

void sub_1B2EEF71C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::createChannelCopy(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZChannelBase *a2)
{
  uint64_t v3;
  OZChannelBase *v4;

  v3 = operator new();
  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E65AF360;
  *(_QWORD *)(v3 + 16) = &unk_1E65AF6C0;
  return v3;
}

void sub_1B2EEF7C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::OZChannelColorCorrection_Factory::createChannelInstance(_anonymous_namespace_::OZChannelColorCorrection_Factory *this, OZChannelBase *a2)
{
  return 0;
}

void `non-virtual thunk to'`anonymous namespace'::OZChannelColorCorrection_Factory::~OZChannelColorCorrection_Factory(_anonymous_namespace_::OZChannelColorCorrection_Factory *this)
{
  OZFactory *v1;

  v1 = (OZFactory *)((char *)this - 128);
  PCSingleton::~PCSingleton(this);
  OZFactory::~OZFactory(v1);
}

{
}

void OZChannelColorCorrection::OZChannelColorCorrection(OZChannelColorCorrection *this, OZFactory *a2, const PCString *a3, unsigned int a4, char a5)
{
  OZChannelColorCorrection *v5;

  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)this, a2, a3, a4, a5, 0, 0, 0, 0);
  *(_QWORD *)v5 = &unk_1E65AF360;
  *((_QWORD *)v5 + 2) = &unk_1E65AF6C0;
  OZChannelColorCorrection::commonInitOZColorCorrectionUIChannel(v5);
}

void sub_1B2EEF870(_Unwind_Exception *a1)
{
  OZChannelBlindData *v1;

  OZChannelBlindData::~OZChannelBlindData(v1);
  _Unwind_Resume(a1);
}

void OZChannelColorCorrection::~OZChannelColorCorrection(OZChannelBlindData *this)
{
  OZChannelBlindData::~OZChannelBlindData(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelColorCorrection::clone(OZChannelBase *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)v2, this, 0);
  *(_QWORD *)v2 = &unk_1E65AF360;
  *(_QWORD *)(v2 + 16) = &unk_1E65AF6C0;
  return v2;
}

void sub_1B2EEF90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40BD757BB5);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZChannelColorCorrection::~OZChannelColorCorrection(OZChannelColorCorrection *this)
{
  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)((char *)this - 16));
}

{
  OZChannelBlindData::~OZChannelBlindData((OZChannelBlindData *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void `anonymous namespace'::OZChannelColorCorrectionInfo::~OZChannelColorCorrectionInfo(_anonymous_namespace_::OZChannelColorCorrectionInfo *this)
{
  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrectionInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
}

{
  PCSingleton::~PCSingleton((_anonymous_namespace_::OZChannelColorCorrectionInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'`anonymous namespace'::OZChannelColorCorrectionInfo::~OZChannelColorCorrectionInfo(_anonymous_namespace_::OZChannelColorCorrectionInfo *this)
{
  OZChannelInfo *v1;

  v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);
}

{
  OZChannelInfo *v1;

  v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);
  JUMPOUT(0x1B5E29170);
}

void OZLiFxGenerator::OZLiFxGenerator(OZLiFxGenerator *this, id *a2, const OZRenderParams *a3, int a4)
{
  CMTime v8;

  *((_QWORD *)this + 181) = &off_1E65EB048;
  *((_QWORD *)this + 182) = 0;
  *((_BYTE *)this + 1464) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E65AF898);
  *(_QWORD *)this = &off_1E65AF7B0;
  *((_QWORD *)this + 181) = &unk_1E65AF878;
  *((_QWORD *)this + 2) = a2;
  OZRenderParams::OZRenderParams((OZLiFxGenerator *)((char *)this + 24), a3);
  v8 = *(CMTime *)((_BYTE *)this + 1);
  if ((OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(a2 + 2423, &v8) | a4) == 1)
    (*(void (**)(OZLiFxGenerator *, uint64_t))(*(_QWORD *)this + 88))(this, 2);
}

void sub_1B2EEFAF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65AF898);
  *(_QWORD *)(v1 + 1448) = v2 + 16;
  *(_BYTE *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
  _Unwind_Resume(a1);
}

uint64_t OZLiFxGenerator::supportsHeliumCPURendering(OZLiFxGenerator *this)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 2) + 19384) + 240))(*((_QWORD *)this + 2) + 19384);
}

void OZLiFxGenerator::getHelium(OZFxGenerator **this@<X0>, LiAgent *a2@<X1>, _QWORD *a3@<X8>)
{
  CGColorSpace *CGColorSpace;
  uint64_t *RenderDevice;
  OZFxGenerator *v8;
  CMTime pcColorDesc;
  FxColorDescription v10[44];

  if ((*((unsigned int (**)(OZFxGenerator **, _QWORD))*this + 7))(this, *((_QWORD *)a2 + 6)) == 6)
    *((_DWORD *)a2 + 8) = 1;
  OZRenderParams::OZRenderParams((OZRenderParams *)v10, (const OZRenderParams *)(this + 3));
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace(v10, CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)v10, *(float *)(*((_QWORD *)a2 + 6) + 192));
  if (!*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v10) + 8)
    && ((*((uint64_t (**)(OZFxGenerator **))*this + 13))(this) & 1) == 0)
  {
    RenderDevice = (uint64_t *)LiAgent::getRenderDevice((LiRenderParameters **)a2);
    OZRenderParams::setRenderDevice((uint64_t)v10, RenderDevice);
  }
  v8 = this[2];
  pcColorDesc = (CMTime)v10[0]._pcColorDesc;
  OZFxGenerator::getHelium(v8, a2, &pcColorDesc, (OZRenderParams *)v10, a3);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
}

void sub_1B2EEFC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZLiFxGenerator::pixelTransformSupport(OZLiFxGenerator *this, const LiRenderParameters *a2)
{
  uint64_t result;

  LODWORD(result) = (*(uint64_t (**)(_QWORD, const LiRenderParameters *, char *))(**((_QWORD **)this + 2)
                                                                                          + 2288))(*((_QWORD *)this + 2), a2, (char *)this + 24);
  if ((_DWORD)result)
    return result;
  else
    return 2;
}

double OZLiFxGenerator::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  __n128 Resolution;
  int v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  __n128 v14;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a4);
  if (v6 != 6)
  {
    v8 = v6;
    Resolution = OZRenderParams::getResolution((OZRenderParams *)(a1 + 24), &v14);
    v9 = v14;
    v10 = *(double *)(a3 + 120);
    if (v10 <= -0.0000001 || (Resolution.n128_u64[0] = 0, v11 = 0.0, v10 >= 0.0000001))
    {
      v12 = v10 + *(double *)(a3 + 96) * 0.0 + *(double *)(a3 + 104) * 0.0;
      Resolution.n128_f64[0] = (*(double *)(a3 + 24) + *(double *)a3 * 0.0 + *(double *)(a3 + 8) * 0.0) / v12;
      v11 = (*(double *)(a3 + 56) + *(double *)(a3 + 32) * 0.0 + *(double *)(a3 + 40) * 0.0) / v12;
    }
    *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_QWORD *)a3 = v9.n128_u64[0];
    *(_QWORD *)(a3 + 40) = v9.n128_u64[1];
    if ((v8 - 3) <= 2)
      Resolution.n128_u64[0] = *(_OWORD *)&PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, (float64x2_t)Resolution, v11, 0.0);
  }
  return Resolution.n128_f64[0];
}

uint64_t OZLiFxGenerator::filteredEdges(OZLiFxGenerator *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 2) + 19570));
  return v1 & 1;
}

uint64_t OZLiFxGenerator::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 1480))(*(_QWORD *)(a1 + 16), a3, a1 + 24);
  return 1;
}

uint64_t OZLiFxGenerator::estimateRenderMemory()
{
  return 0;
}

void OZLiFxGenerator::~OZLiFxGenerator(OZLiFxGenerator *this)
{
  *(_QWORD *)this = &off_1E65AF7B0;
  *((_QWORD *)this + 181) = &unk_1E65AF878;
  OZRenderParams::~OZRenderParams((OZLiFxGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65AF898);
  *((_QWORD *)this + 181) = &off_1E65EB048;
  *((_BYTE *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);
}

{
  *(_QWORD *)this = &off_1E65AF7B0;
  *((_QWORD *)this + 181) = &unk_1E65AF878;
  OZRenderParams::~OZRenderParams((OZLiFxGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65AF898);
  *((_QWORD *)this + 181) = &off_1E65EB048;
  *((_BYTE *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZLiFxGenerator::~OZLiFxGenerator(OZLiFxGenerator *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65AF7B0;
  *((_QWORD *)v1 + 181) = &unk_1E65AF878;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65AF898);
  *((_QWORD *)v1 + 181) = &off_1E65EB048;
  v1[1464] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65AF7B0;
  *((_QWORD *)v1 + 181) = &unk_1E65AF878;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65AF898);
  *((_QWORD *)v1 + 181) = &off_1E65EB048;
  v1[1464] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);
  JUMPOUT(0x1B5E29170);
}

void OZEnvironmentMeshSceneElement::OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3, a4);
  *v5 = &off_1E65AFA40;
  v5[2] = &unk_1E65B0378;
  v5[6] = &unk_1E65B05D0;
  v5[816] = &unk_1E65B0628;
  PCString::PCString(&v6, "Subdivision Level");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24408), 0, &v6, (OZChannelFolder *)((char *)this + 448), 0x190u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Placeholder Width");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24560), 4000, &v6, (OZChannelFolder *)((char *)this + 448), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Placeholder Height");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24712), 3600, &v6, (OZChannelFolder *)((char *)this + 448), 0x192u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Placeholder Height");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 24864), 9000, &v6, (OZChannelFolder *)((char *)this + 448), 0x193u, 0, 0, 0);
  PCString::~PCString(&v6);
  Li3DEngineScene::Li3DEngineScene((OZEnvironmentMeshSceneElement *)((char *)this + 25016));
  *((_QWORD *)this + 3148) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 25192), 1);
  *((_QWORD *)this + 3149) = &unk_1E64E2000;
  OZChannel::setMin((OZChannel *)((char *)this + 24408), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 24408), 10.0);
}

void sub_1B2EF0190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZ3DEngineSceneElement *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannel *v14;
  Li3DEngineScene *v15;

  Li3DEngineScene::~Li3DEngineScene(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v10);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement::OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this, const OZEnvironmentMeshSceneElement *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannel *v6;
  OZChannelFolder *v7;

  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65AFA40;
  *(_QWORD *)(v5 + 16) = &unk_1E65B0378;
  *(_QWORD *)(v5 + 48) = &unk_1E65B05D0;
  *(_QWORD *)(v5 + 6528) = &unk_1E65B0628;
  v6 = (OZChannel *)(v5 + 24408);
  v7 = (OZChannelFolder *)(v5 + 448);
  OZChannel::OZChannel((OZChannel *)(v5 + 24408), (const OZChannelBase *)((char *)a2 + 24408), (OZChannelFolder *)(v5 + 448));
  *((_QWORD *)this + 3051) = &off_1E6551AF8;
  *((_QWORD *)this + 3053) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24560), (const OZChannelBase *)((char *)a2 + 24560), v7);
  *((_QWORD *)this + 3070) = &off_1E6551AF8;
  *((_QWORD *)this + 3072) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24712), (const OZChannelBase *)((char *)a2 + 24712), v7);
  *((_QWORD *)this + 3089) = &off_1E6551AF8;
  *((_QWORD *)this + 3091) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24864), (const OZChannelBase *)a2 + 222, v7);
  *((_QWORD *)this + 3108) = &off_1E6551AF8;
  *((_QWORD *)this + 3110) = &unk_1E6551E58;
  Li3DEngineScene::Li3DEngineScene((OZEnvironmentMeshSceneElement *)((char *)this + 25016));
  *((_QWORD *)this + 3148) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 25192), 1);
  *((_QWORD *)this + 3149) = &unk_1E64E2000;
  OZChannel::setMin(v6, 0.0);
  OZChannel::setMax(v6, 10.0);
}

void sub_1B2EF03A4(_Unwind_Exception *a1)
{
  OZ3DEngineSceneElement *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;
  OZChannel *v5;
  Li3DEngineScene *v6;

  Li3DEngineScene::~Li3DEngineScene(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v1);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this)
{
  *(_QWORD *)this = &off_1E65AFA40;
  *((_QWORD *)this + 2) = &unk_1E65B0378;
  *((_QWORD *)this + 6) = &unk_1E65B05D0;
  *((_QWORD *)this + 816) = &unk_1E65B0628;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 25192));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 25160, *((PCSharedCount **)this + 3146));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 25136, *((_QWORD **)this + 3143));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3141);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 25096, *((id **)this + 3138));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3135);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 25016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24408));
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(this);
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement(OZEnvironmentMeshSceneElement *this)
{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 16));
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 48));
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 6528));
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZEnvironmentMeshSceneElement::~OZEnvironmentMeshSceneElement((OZEnvironmentMeshSceneElement *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

void OZEnvironmentMeshSceneElement::buildRenderGraph(OZEnvironmentMeshSceneElement *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  uint64_t v8;
  uint64_t i;
  _OWORD v10[8];
  _OWORD v11[4];
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  OZRenderState v13;

  OZRenderState::OZRenderState(&v13, a2);
  var0 = a2->var0;
  v8 = (*(uint64_t (**)(OZEnvironmentMeshSceneElement *))(*(_QWORD *)this + 2336))(this);
  OZ3DEngineSceneElement::getUnitScaleMatrix(this, (const CMTime *)&v13, (uint64_t)v10);
  for (i = 0; i != 4; ++i)
    v11[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v10[2 * i]), (float64x2_t)v10[2 * i + 1]);
  OZ3DEngineCore::buildRenderGraph((uint64_t)this + 18872, (const OZRenderParams *)a2, a3, a4, (uint64_t)v11, (CMTime *)&var0, (OZChannel *)this, v8);
}

void `non-virtual thunk to'OZEnvironmentMeshSceneElement::buildRenderGraph(OZEnvironmentMeshSceneElement *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZEnvironmentMeshSceneElement::buildRenderGraph((OZEnvironmentMeshSceneElement *)((char *)this - 6528), a2, a3, a4);
}

double OZEnvironmentMeshSceneElement::calcAutomaticUnitSize(OZEnvironmentMeshSceneElement *this)
{
  return 1.0;
}

void OZEnvironmentMeshSceneElement::getLocalVolume(uint64_t a1, _OWORD *a2)
{
  std::recursive_mutex *v3;
  SCNScene *Representation;
  __int128 v5;
  _OWORD v6[3];

  if (a2)
  {
    v3 = (std::recursive_mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2336))(a1);
    std::recursive_mutex::lock(v3);
    Representation = (SCNScene *)PCBitmap::getRepresentation((PCBitmap *)v3);
    getSceneBoundingBox(Representation, (uint64_t)v6);
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v6[2];
    std::recursive_mutex::unlock(v3);
  }
}

void sub_1B2EF070C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZEnvironmentMeshSceneElement::get3DScene(OZEnvironmentMeshSceneElement *this)
{
  PCMutex *v2;
  void *v3;
  char *v5;
  uint64_t v6;

  v2 = (PCMutex *)((char *)this + 25192);
  v5 = (char *)this + 25192;
  PCMutex::lock((PCMutex *)((char *)this + 25192));
  LOBYTE(v6) = 1;
  if (!*((_QWORD *)this + 3148))
  {
    v3 = (void *)objc_opt_new();
    *((_QWORD *)this + 3148) = v3;
    objc_msgSend((id)objc_msgSend(v3, "rootNode", v5, v6), "setName:", CFSTR("OZEnvironmentMeshSceneElement scene root"));
    objc_msgSend((id)objc_msgSend(*((id *)this + 3148), "rootNode"), "setRenderingOrder:", -1);
    Li3DEngineScene::set((OZEnvironmentMeshSceneElement *)((char *)this + 25016), *((SCNScene **)this + 3148));
    Li3DEngineScene::setUseOriginalScene((uint64_t)this + 25016, 1);
  }
  PCMutex::unlock(v2);
  return (uint64_t)this + 25016;
}

void sub_1B2EF07D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZEnvironmentMeshSceneElement::didCreateRootNodeClone(id *this)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(this[2360], "setCategoryBitMask:", +[OZSceneComposer sceneMeshCategoryBitMask](OZSceneComposer, "sceneMeshCategoryBitMask"));
  v2 = (void *)objc_msgSend(this[2360], "childNodesPassingTest:", &__block_literal_global_82);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * v6);
        objc_msgSend(v7, "setCategoryBitMask:", +[OZSceneComposer sceneMeshCategoryBitMask](OZSceneComposer, "sceneMeshCategoryBitMask"));
        objc_msgSend(v7, "setName:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("child of %u"), *((unsigned int *)this + 20)));
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

BOOL ___ZN29OZEnvironmentMeshSceneElement22didCreateRootNodeCloneEv_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

uint64_t OZEnvironmentMeshSceneElement::physicsShape(OZEnvironmentMeshSceneElement *this, const CMTime *a2)
{
  return 3;
}

void OZEnvironmentMeshSceneElement::setMeshNode(OZEnvironmentMeshSceneElement *this, SCNNode *a2, float a3)
{
  const void *v4;
  OZGroup *v7;
  std::recursive_mutex *v8;
  std::recursive_mutex *v9;
  void *v10;
  SCNNode *v11;
  double v12;
  double v13;
  double v14;
  SCNNode *v15;

  v4 = (const void *)*((_QWORD *)this + 120);
  if (v4)
  {
    if (v7)
    {
      v8 = (std::recursive_mutex *)OZGroup::masterScene(v7);
      std::recursive_mutex::lock(v8);
      v9 = (std::recursive_mutex *)(*(uint64_t (**)(OZEnvironmentMeshSceneElement *))(*(_QWORD *)this + 2336))(this);
      std::recursive_mutex::lock(v9);
      v10 = (void *)objc_msgSend((id)PCBitmap::getRepresentation((PCBitmap *)v9), "rootNode");
      v11 = (SCNNode *)objc_msgSend((id)objc_msgSend(v10, "childNodes"), "firstObject");
      if (-[SCNNode name](v11, "name")
        && -[NSString compare:](-[SCNNode name](v11, "name"), "compare:", -[SCNNode name](a2, "name")) == NSOrderedSame)
      {
        v15 = v11;
      }
      else
      {
        v15 = -[SCNNode clone](a2, "clone");
        -[SCNNode removeFromParentNode](v11, "removeFromParentNode");
        objc_msgSend(v10, "addChildNode:", v15);
        -[SCNNode setRenderingOrder:](v15, "setRenderingOrder:", -1);
        OZEnvironmentMeshSceneElement::updateMeshMaterials(this, v15);
        objc_msgSend(*((id *)this + 2360), "removeFromParentNode");

        *((_QWORD *)this + 2360) = 0;
        *((_QWORD *)this + 2372) = 0;
        OZ3DEngineSceneElement::applyShader(this);
      }
      *(float *)&v12 = a3;
      *(float *)&v13 = a3;
      *(float *)&v14 = a3;
      -[SCNNode setScale:](v15, "setScale:", v12, v13, v14);
      std::recursive_mutex::unlock(v9);
      std::recursive_mutex::unlock(v8);
    }
  }
}

void sub_1B2EF0AE0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement::updateMeshMaterials(OZEnvironmentMeshSceneElement *this, SCNNode *a2)
{
  NSArray *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OZChannel *v10;
  const CMTime *v11;
  uint64_t i;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  _QWORD v20[3];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = -[SCNNode childNodesPassingTest:](a2, "childNodesPassingTest:", &__block_literal_global_9_0);
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "setLightingModelName:", *MEMORY[0x1E0CD5AF8]);
  if (OZ3DEngineSceneElement::hasShader(this))
    v5 = 15;
  else
    v5 = 0;
  objc_msgSend(v4, "setColorBufferWriteMask:", v5);
  objc_msgSend(v4, "setReadsFromDepthBuffer:", 1);
  objc_msgSend(v4, "setWritesToDepthBuffer:", 1);
  objc_msgSend(v4, "setDoubleSided:", 1);
  v14 = v4;
  v20[0] = v4;
  v6 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v16;
    v10 = (OZChannel *)((char *)this + 24408);
    v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v3);
        v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v13, "setGeometry:", objc_msgSend(MEMORY[0x1E0CD5978], "geometryWithSources:elements:", objc_msgSend((id)objc_msgSend(v13, "geometry"), "geometrySources"), objc_msgSend((id)objc_msgSend(v13, "geometry"), "geometryElements")));
        objc_msgSend((id)objc_msgSend(v13, "geometry"), "setMaterials:", v6);
        objc_msgSend((id)objc_msgSend(v13, "geometry"), "setSubdivisionLevel:", (int)OZChannel::getValueAsInt(v10, v11, 0.0));
        objc_msgSend(v13, "setCategoryBitMask:", +[OZSceneComposer sceneMeshCategoryBitMask](OZSceneComposer, "sceneMeshCategoryBitMask"));
      }
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v8);
  }

}

BOOL ___ZN29OZEnvironmentMeshSceneElement19updateMeshMaterialsEP7SCNNode_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

void OZEnvironmentMeshSceneElement::buildContour(_QWORD *a1@<X0>, float64x2_t *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v16;
  char *v17;
  std::recursive_mutex *v18;
  PCBitmap *v19;
  uint64_t Representation;
  OZScene *v21;
  void *SceneComposer;
  int v23;
  float v24;
  float32x4_t v25;
  float v26;
  float v27;
  unsigned int v28;
  int8x16_t v29;
  float v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float v41;
  float v42;
  double v43;
  double v44;
  float64x2_t v45;
  double v46;
  float64x2_t *v47;
  uint64_t v48;
  float64x2_t *v49;
  uint64_t v50;
  float64x2_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float32x4_t v55;
  double v56;
  float64x2_t v57;
  double v58;
  _BYTE v59[32];
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  v16 = (const void *)a1[120];
  if (v16)
  else
    v17 = 0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v17 + 20744), 1, 1))
    v18 = (std::recursive_mutex *)OZGroup::masterScene((OZGroup *)v17);
  else
    v18 = (std::recursive_mutex *)(*(uint64_t (**)(_QWORD *))(*a1 + 2336))(a1);
  v19 = (PCBitmap *)v18;
  std::recursive_mutex::lock(v18);
  Representation = PCBitmap::getRepresentation(v19);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v21 = (OZScene *)(*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  SceneComposer = (void *)OZScene::getSceneComposer(v21);
  v23 = 0;
  v56 = COERCE_DOUBLE(vcvt_f32_f64(*a2));
  v24 = -1.0;
  if (a7 >= 0.0)
    v24 = 1.0;
  v25.i64[0] = 0;
  v25.i32[2] = 0;
  if (a3)
    v26 = 0.0;
  else
    v26 = 1.0;
  if (a3)
    v27 = 1.0;
  else
    v27 = 0.0;
  if (a3)
    v28 = -1;
  else
    v28 = 0;
  v29 = vbslq_s8((int8x16_t)vdupq_n_s32(v28), (int8x16_t)xmmword_1B3523FD0, (int8x16_t)LODWORD(v24));
  v30 = (float)(a7 * -11.25) * 0.0174532925;
  v31.i64[0] = 0;
  v31.i64[1] = v29.u32[2];
  v52 = v31;
  v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1);
  v25.i32[3] = v29.i32[3];
  v54 = *(float *)v29.i32;
  v55 = v25;
  v51 = (float64x2_t)vdupq_n_s64(0x3FECCCCCC0000000uLL);
  do
  {
    v64 = 1065353216;
    v61 = 1065353216;
    *(_DWORD *)&v59[20] = 1065353216;
    *(_DWORD *)v59 = 1065353216;
    *(_OWORD *)&v59[4] = 0uLL;
    *(_QWORD *)&v59[24] = 0;
    v60 = 0;
    v62 = 0;
    v63 = 0;
    LODWORD(v57.f64[0]) = 0;
    *((float *)v57.f64 + 1) = v26;
    *(_QWORD *)&v57.f64[1] = LODWORD(v27);
    PCMatrix44Tmpl<float>::rotate((uint64_t)v59, (float *)&v57, 0, v30 * (float)v23);
    v57 = (float64x2_t)__PAIR64__(LODWORD(v27), LODWORD(v26));
    PCMatrix44Tmpl<float>::rotate((uint64_t)v59, (float *)&v57, 0, a8);
    v32 = *(int32x4_t *)v59;
    v32.i32[1] = *(_DWORD *)&v59[16];
    v33 = *(int32x4_t *)&v59[4];
    v33.i32[1] = *(_DWORD *)&v59[20];
    v35.i64[0] = __PAIR64__(v62, HIDWORD(v60));
    v34.i64[0] = __PAIR64__(v61, v60);
    v36 = *(int32x4_t *)&v59[8];
    v36.i32[1] = *(_DWORD *)&v59[24];
    v37 = *(int32x4_t *)&v59[12];
    v37.i32[1] = *(_DWORD *)&v59[28];
    v34.i64[1] = __PAIR64__(HIDWORD(v63), HIDWORD(v62));
    v38 = vzip1q_s32(v32, v36);
    v39 = vzip1q_s32(v33, v37);
    v35.i64[1] = __PAIR64__(v64, v63);
    objc_msgSend(SceneComposer, "intersectionTestFrom:lookingAt:scene:", Representation, v56, *(double *)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v38, v39), v54), v53, (float32x4_t)vzip2q_s32(v38, v39)), v52, (float32x4_t)vzip1q_s32(v34, v35)), v55, (float32x4_t)vzip2q_s32(v34, v35)).i64);
    if (v42 != 0.0)
    {
      v43 = a2[1].f64[0];
      v44 = (v41 - v43) * 0.899999976;
      v45 = vaddq_f64(*a2, vmulq_f64(vsubq_f64(vcvtq_f64_f32(v40), *a2), v51));
      v46 = v43 + v44;
      v57 = v45;
      v58 = v46;
      v47 = (float64x2_t *)a6[1];
      if ((unint64_t)v47 >= a6[2])
      {
        v48 = std::vector<PCVector3<double>>::__push_back_slow_path<PCVector3<double> const&>(a6, (uint64_t)&v57);
      }
      else
      {
        *v47 = v45;
        v47[1].f64[0] = v46;
        v48 = (uint64_t)&v47[1].f64[1];
      }
      a6[1] = v48;
    }
    ++v23;
  }
  while (v23 != 32);
  if (a6[1] != *a6)
  {
    if (a4)
      std::vector<PCVector3<double>>::insert(a6, (_OWORD *)*a6, (unint64_t)a2);
    if (a5)
    {
      v49 = (float64x2_t *)a6[1];
      if ((unint64_t)v49 >= a6[2])
      {
        v50 = std::vector<PCVector3<double>>::__push_back_slow_path<PCVector3<double> const&>(a6, (uint64_t)a2);
      }
      else
      {
        *v49 = *a2;
        v49[1].f64[0] = a2[1].f64[0];
        v50 = (uint64_t)&v49[1].f64[1];
      }
      a6[1] = v50;
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v19);
}

void sub_1B2EF111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void PCMatrix44Tmpl<float>::rotate(uint64_t a1, float *a2, int a3, float a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float sinval;
  float cosval;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18[11];
  uint64_t v19;
  uint64_t v20;
  int v21;

  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  if (a3)
  {
    v8 = sqrtf((float)((float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v7 * v7)) + (float)(a2[3] * a2[3]));
    v6 = v6 / v8;
    v5 = v5 / v8;
    v7 = v7 / v8;
  }
  sinval = 0.0;
  cosval = 1.0;
  if (a4 != 0.0)
  {
    sinval = 1.0;
    cosval = 0.0;
    if (fabsf(a4 + -1.5708) >= 0.00001 && fabsf(a4 + 4.7124) >= 0.00001)
    {
      sinval = -1.0;
      if (fabsf(a4 + 1.5708) >= 0.00001 && fabsf(a4 + -4.7124) >= 0.00001)
      {
        sinval = 0.0;
        cosval = -1.0;
        if (fabsf(a4 + -3.1416) >= 0.00001 && fabsf(a4 + 3.1416) >= 0.00001)
        {
          v11 = __sincosf_stret(a4);
          cosval = v11.__cosval;
          sinval = v11.__sinval;
        }
      }
    }
  }
  v12 = (float)(v5 * v6) * (float)(1.0 - cosval);
  v13 = (float)(v7 * v6) * (float)(1.0 - cosval);
  v14 = (float)(v7 * v5) * (float)(1.0 - cosval);
  v15 = v6 * sinval;
  v16 = v5 * sinval;
  v17 = v7 * sinval;
  v21 = 1065353216;
  v18[3] = 0.0;
  v18[7] = 0.0;
  v20 = 0;
  v19 = 0;
  v18[0] = cosval + (float)((float)(v6 * v6) * (float)(1.0 - cosval));
  v18[1] = v12 - v17;
  v18[2] = v13 + v16;
  v18[4] = v12 + v17;
  v18[5] = cosval + (float)((float)(v5 * v5) * (float)(1.0 - cosval));
  v18[6] = v14 - v15;
  v18[8] = v13 - v16;
  v18[9] = v14 + v15;
  v18[10] = cosval + (float)((float)(v7 * v7) * (float)(1.0 - cosval));
  PCMatrix44Tmpl<float>::rightMult(a1, v18);
}

unint64_t std::vector<PCVector3<double>>::insert(uint64_t *a1, _OWORD *a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *__p;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;

  v4 = (unint64_t)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  v11 = (uint64_t)(a1 + 2);
  v10 = a1[2];
  if (v6 >= v10)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    v27 = a1 + 2;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a1 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[8 * (v8 >> 3)];
    __p = v16;
    v24 = v17;
    v25 = v17;
    v26 = &v16[24 * v15];
    if (v9 == v15)
    {
      if (v8 < 1)
      {
        if (v7 == v4)
          v19 = 1;
        else
          v19 = 0x5555555555555556 * (v8 >> 3);
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v11, v19);
        v17 = &v20[24 * (v19 >> 2)];
        __p = v20;
        v24 = v17;
        v26 = &v20[24 * v21];
        if (v16)
          operator delete(v16);
      }
      else
      {
        v18 = v9 + 2;
        if (v9 >= -1)
          v18 = v9 + 1;
        v17 -= 24 * (v18 >> 1);
        v24 = v17;
      }
    }
    *(_OWORD *)v17 = *(_OWORD *)a3;
    *((_QWORD *)v17 + 2) = *(_QWORD *)(a3 + 16);
    v25 = v17 + 24;
    v4 = std::vector<PCVector3<double>>::__swap_out_circular_buffer(a1, &__p, v4);
    if (v25 != v24)
      v25 = &v24[(v25 - v24 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
  }
  else if (a2 == (_OWORD *)v6)
  {
    *a2 = *(_OWORD *)a3;
    *(_QWORD *)(v7 + 8 * (v8 >> 3) + 16) = *(_QWORD *)(a3 + 16);
    a1[1] = (uint64_t)a2 + 24;
  }
  else
  {
    std::vector<PCVector3<double>>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)a2 + 24);
    if (v4 <= a3)
      a3 += 24 * (a1[1] > a3);
    v12 = *(_OWORD *)a3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)v4 = v12;
  }
  return v4;
}

void sub_1B2EF1584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<PCVector3<double>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 result;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - a4;
  v6 = a2 + v4 - a4;
  v7 = v4;
  while (v6 < a3)
  {
    *(_OWORD *)v7 = *(_OWORD *)v6;
    result.n128_u64[0] = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v7 + 16) = result.n128_u64[0];
    v7 += 24;
    v6 += 24;
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v9 = (__n128 *)(v4 - 24);
    v10 = 8 * (v5 >> 3);
    v11 = a2 - 24;
    do
    {
      result = *(__n128 *)(v11 + v10);
      v9[1].n128_u64[0] = *(_QWORD *)(v11 + v10 + 16);
      *v9 = result;
      v9 = (__n128 *)((char *)v9 - 24);
      v10 -= 24;
    }
    while (v10);
  }
  return result;
}

uint64_t std::vector<PCVector3<double>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  for (i = a2[2]; a3 != v9; a3 += 24)
  {
    *(_OWORD *)i = *(_OWORD *)a3;
    *(_QWORD *)(i + 16) = *(_QWORD *)(a3 + 16);
    i += 24;
  }
  a2[2] = i;
  v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

float OZSnap::OZSnap(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

void OZSnap::OZSnap(OZSnap *this, int a2, double a3, double a4, double a5)
{
  float v5;
  float v6;
  float v7;

  *(_DWORD *)this = a2;
  v5 = a3;
  v6 = a4;
  *((float *)this + 1) = v5;
  *((float *)this + 2) = v6;
  v7 = a5;
  *((float *)this + 3) = v7;
}

BOOL OZSnap::operator<(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 0;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a2 + 4);
  if (v2 < v3)
    return 1;
  if (v2 > v3)
    return 0;
  v4 = *(float *)(a1 + 8);
  v5 = *(float *)(a2 + 8);
  if (v4 < v5)
    return 1;
  return v4 <= v5 && *(float *)(a1 + 12) < *(float *)(a2 + 12);
}

void OZSingleChannelBehavior::OZSingleChannelBehavior(OZSingleChannelBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65B0758;
  *(_QWORD *)(v5 + 16) = &unk_1E65B0A98;
  *(_QWORD *)(v5 + 48) = &unk_1E65B0CF0;
  *(_QWORD *)(v5 + 336) = &unk_1E65B0D48;
  *(_QWORD *)(v5 + 536) = &unk_1E65B0D70;
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)(v5 + 544));
  *((_OWORD *)this + 39) = xmmword_1B3560870;
  PCString::PCString(&v6, "Affecting Object (Hidden)");
  OZChanObjectManipRef::OZChanObjectManipRef((OZSingleChannelBehavior *)((char *)this + 640), &v6, (OZChannelFolder *)((char *)this + 56), 0xC7u, 2u);
  PCString::~PCString(&v6);
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 105);
  *((_DWORD *)this + 212) = 0;
  *((_BYTE *)this + 852) = 0;
  *((_QWORD *)this + 107) = 0x4014000000000000;
}

void sub_1B2EF1DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelBehavior *v10;
  OZChannelInfo *v11;
  OZChanObjectManipRef *v12;

  OZChanObjectManipRef::~OZChanObjectManipRef(v12);
  OZChannelInfo::~OZChannelInfo(v11);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::OZSingleChannelBehavior(OZSingleChannelBehavior *this, const OZSingleChannelBehavior *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  OZChannelBase *v7;
  OZObjectManipulator *ObjectManipulatorForChannel;
  const PCString *InternalName;
  const OZChannelBase *v10;
  OZChannelRef *v11;
  std::string *v12;
  const OZChannelBase *v13;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65B0758;
  *(_QWORD *)(v5 + 16) = &unk_1E65B0A98;
  *(_QWORD *)(v5 + 48) = &unk_1E65B0CF0;
  *(_QWORD *)(v5 + 336) = &unk_1E65B0D48;
  *(_QWORD *)(v5 + 536) = &unk_1E65B0D70;
  v6 = v5 + 544;
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)(v5 + 544));
  *((_OWORD *)this + 39) = *((_OWORD *)a2 + 39);
  OZChanObjectManipRef::OZChanObjectManipRef((OZSingleChannelBehavior *)((char *)this + 640), (const OZChannelBase *)((char *)a2 + 640), (OZChannelFolder *)((char *)this + 56));
  *((_OWORD *)this + 50) = *((_OWORD *)a2 + 50);
  *((_OWORD *)this + 51) = *((_OWORD *)a2 + 51);
  PCString::PCString((PCString *)this + 105, (const PCString *)a2 + 105);
  *((_DWORD *)this + 212) = *((_DWORD *)a2 + 212);
  *((_BYTE *)this + 852) = *((_BYTE *)a2 + 852);
  *((_QWORD *)this + 107) = *((_QWORD *)a2 + 107);
  if ((*(uint64_t (**)(const OZSingleChannelBehavior *))(*(_QWORD *)a2 + 320))(a2)
    && *((_QWORD *)a2 + 49)
    && (v7 = *(OZChannelBase **)(*((_QWORD *)a2 + 47) + 32)) != 0)
  {
    ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel(a2, v7);
    *((_OWORD *)this + 50) = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                                   + 8)
                                       + 8);
    *((_OWORD *)this + 51) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 47) + 32) + 8) + 8);
    OZChannelInfo::operator=(v6, (uint64_t)a2 + 544);
    InternalName = (const PCString *)OZObjectManipulator::getInternalName(ObjectManipulatorForChannel);
    PCString::set((PCString *)this + 105, InternalName);
    v10 = (const OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel
                                                                                  + 216))(ObjectManipulatorForChannel);
    v11 = (OZChannelRef *)operator new();
    v12 = (std::string *)v11;
    if (*((_QWORD *)a2 + 49))
      v13 = *(const OZChannelBase **)(*((_QWORD *)a2 + 47) + 32);
    else
      v13 = 0;
    OZChannelRef::OZChannelRef(v11, v13, v10);
  }
  else
  {
    *((_OWORD *)this + 50) = *((_OWORD *)a2 + 50);
    *((_OWORD *)this + 51) = *((_OWORD *)a2 + 51);
    PCString::set((PCString *)this + 105, (const PCString *)a2 + 105);
    OZChannelInfo::operator=(v6, (uint64_t)a2 + 544);
    if (*((_QWORD *)a2 + 104))
    {
      v12 = (std::string *)operator new();
      OZChannelRef::OZChannelRef(v12, *((const OZChannelRef **)a2 + 104));
    }
    else
    {
      v12 = 0;
    }
  }
  *((_QWORD *)this + 104) = v12;
}

void sub_1B2EF2010(_Unwind_Exception *a1)
{
  OZChannelBehavior *v1;
  OZChannelInfo *v2;
  OZChanObjectManipRef *v3;
  PCString *v4;
  uint64_t v5;

  MEMORY[0x1B5E29170](v5, 0x1012C40EC159624);
  PCString::~PCString(v4);
  OZChanObjectManipRef::~OZChanObjectManipRef(v3);
  OZChannelInfo::~OZChannelInfo(v2);
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::getChanBase(OZSingleChannelBehavior *this)
{
  if (*((_QWORD *)this + 49))
    return *(_QWORD *)(*((_QWORD *)this + 47) + 32);
  else
    return 0;
}

_QWORD *OZSingleChannelBehavior::getObjectManipulatorForChannel(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  _QWORD *ObjectManipulator;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  ObjectManipulator = (_QWORD *)OZChannelBase::getObjectManipulator(a2);
  v4 = ObjectManipulator;
  if (ObjectManipulator)
  {
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 216))(v4);
      return (_QWORD *)OZChannelBase::getObjectManipulator(*(OZChannelBase **)(v5 + 48));
    }
    v7 = (*(uint64_t (**)(_QWORD *))(*v4 + 232))(v4);
    if (v7 != (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 320))(this))
    {
      v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v4 + 256))(v4) + 8);
      v9 = xmmword_1B355E440;
      if (OZFactory::isKindOfClass(v8, (int32x4_t *)&v9))
      {
        v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 232))(v4);
        if (v4)
        {
          while ((_QWORD *)(*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 320))(this) != v4)
          {
            v4 = (_QWORD *)v4[120];
            if (!v4)
              return v4;
          }
          v4 += 2;
        }
      }
    }
  }
  return v4;
}

void OZSingleChannelBehavior::~OZSingleChannelBehavior(OZSingleChannelBehavior *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E65B0758;
  *((_QWORD *)this + 2) = &unk_1E65B0A98;
  *((_QWORD *)this + 6) = &unk_1E65B0CF0;
  *((_QWORD *)this + 42) = &unk_1E65B0D48;
  *((_QWORD *)this + 67) = &unk_1E65B0D70;
  v2 = (void **)*((_QWORD *)this + 104);
  if (v2)
  {
    OZChannelRef::~OZChannelRef(v2);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 104) = 0;
  PCString::~PCString((PCString *)this + 105);
  OZChanObjectManipRef::~OZChanObjectManipRef((OZSingleChannelBehavior *)((char *)this + 640));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)((char *)this + 544));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZSingleChannelBehavior::~OZSingleChannelBehavior(OZSingleChannelBehavior *this)
{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 16));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 336));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 536));
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZSingleChannelBehavior::operator=(uint64_t a1, const void *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  OZChannelBase *v7;
  OZObjectManipulator *ObjectManipulatorForChannel;
  const PCString *InternalName;
  const OZChannelBase *v10;
  void **v11;
  OZChannelRef *v12;
  std::string *v13;
  const OZChannelBase *v14;
  void **v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;

  OZChannelBehavior::operator=();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  OZChannelInfo::operator=(a1 + 544, (uint64_t)(v5 + 544));
  *(_OWORD *)(a1 + 624) = *((_OWORD *)v6 + 39);
  *(_DWORD *)(a1 + 848) = *((_DWORD *)v6 + 212);
  if ((*(uint64_t (**)(char *))(*(_QWORD *)v6 + 320))(v6))
  {
    if (*((_QWORD *)v6 + 49))
    {
      v7 = *(OZChannelBase **)(*((_QWORD *)v6 + 47) + 32);
      if (v7)
      {
        ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)v6, v7);
        *(_OWORD *)(a1 + 800) = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                                      + 8)
                                          + 8);
        *(_OWORD *)(a1 + 816) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 47) + 32) + 8) + 8);
        InternalName = (const PCString *)OZObjectManipulator::getInternalName(ObjectManipulatorForChannel);
        PCString::set((PCString *)(a1 + 840), InternalName);
        v10 = (const OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel
                                                                                      + 216))(ObjectManipulatorForChannel);
        v11 = *(void ***)(a1 + 832);
        if (v11)
        {
          OZChannelRef::~OZChannelRef(v11);
          MEMORY[0x1B5E29170]();
        }
        *(_QWORD *)(a1 + 832) = 0;
        v12 = (OZChannelRef *)operator new();
        v13 = (std::string *)v12;
        if (*((_QWORD *)v6 + 49))
          v14 = *(const OZChannelBase **)(*((_QWORD *)v6 + 47) + 32);
        else
          v14 = 0;
        OZChannelRef::OZChannelRef(v12, v14, v10);
        goto LABEL_17;
      }
    }
  }
  OZChanObjectManipRef::operator=(a1 + 640, v6 + 640);
  *(_OWORD *)(a1 + 800) = *((_OWORD *)v6 + 50);
  *(_OWORD *)(a1 + 816) = *((_OWORD *)v6 + 51);
  PCString::set((PCString *)(a1 + 840), (const PCString *)v6 + 105);
  v15 = *(void ***)(a1 + 832);
  if (v15)
  {
    OZChannelRef::~OZChannelRef(v15);
    MEMORY[0x1B5E29170]();
  }
  *(_QWORD *)(a1 + 832) = 0;
  if (*((_QWORD *)v6 + 104))
  {
    v13 = (std::string *)operator new();
    OZChannelRef::OZChannelRef(v13, *((const OZChannelRef **)v6 + 104));
LABEL_17:
    *(_QWORD *)(a1 + 832) = v13;
  }
  if (v4)
  {
    v16 = v4 + 1000;
    for (i = *(_QWORD *)(v4 + 1008); i != v16; i = *(_QWORD *)(i + 8))
    {
      if (*(_QWORD *)(i + 16) == a1)
        goto LABEL_24;
    }
    i = v4 + 1000;
LABEL_24:
    v18 = *(_QWORD *)(i + 8);
    if (v18 == v16)
      v19 = 0;
    else
      v19 = *(_QWORD *)(v18 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v4, v19);
  }
}

void sub_1B2EF25BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::didAddToNode(OZSingleChannelBehavior *this, OZSceneNode *a2)
{
  uint64_t result;

  result = OZChannelBehavior::didAddToNode(this, a2);
  if (!*((_BYTE *)this + 852))
  {
    result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
    if (result)
      return (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 808))(this);
  }
  return result;
}

void **OZSingleChannelBehavior::commonDidAddToNode(void **this)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  PCString *InternalName;
  _BOOL4 v24;
  uint64_t v25;
  OZChannelBase *v26;
  OZSingleChannelBehavior *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!this[104])
    return this;
  v1 = this;
  v2 = (*((uint64_t (**)(void **))*this + 40))(this);
  this = (void **)OZChanObjectManipRef::getObjectID((OZChannel *)(v1 + 80));
  v3 = this;
  if (!(_DWORD)this || *(_DWORD *)(v2 + 80) == (_DWORD)this)
  {
    v5 = v2 + 16;
    goto LABEL_15;
  }
  if (OZSceneNode::getEffect((OZSceneNode *)v2, (int)this))
  {
    this = (void **)OZSceneNode::getEffect((OZSceneNode *)v2, (int)v3);
    v4 = this + 6;
  }
  else
  {
    if (OZSceneNode::getBehavior((OZSceneNode *)v2, (int)v3))
    {
      this = (void **)OZSceneNode::getBehavior((OZSceneNode *)v2, (int)v3);
    }
    else
    {
      this = (void **)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 328))(v2, v3);
      if (!this)
      {
        v5 = 0;
        goto LABEL_15;
      }
      this = (void **)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 328))(v2, v3);
    }
    v4 = this + 2;
  }
  if (this)
    v5 = (uint64_t)v4;
  else
    v5 = 0;
LABEL_15:
  v6 = *((_DWORD *)v1 + 200);
  v7 = *((_DWORD *)v1 + 201);
  v8 = *((_DWORD *)v1 + 202);
  v9 = *((_DWORD *)v1 + 203);
  if (!(v7 | v6 | v8 | v9))
  {
    v24 = 0;
    if (!v5)
      return this;
    goto LABEL_52;
  }
  if (v5)
  {
    this = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 256))(v5);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)this[1] + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)
    {
      v24 = 0;
      goto LABEL_52;
    }
    v6 = *((_OWORD *)v1 + 50);
    v7 = HIDWORD(v1[100]);
    v8 = v1[101];
    v9 = HIDWORD(*((_OWORD *)v1 + 50));
  }
  v10 = *(_DWORD **)(v2 + 8);
  v11 = v10[2];
  v12 = v10[3];
  v14 = v10[4];
  v13 = v10[5];
  if (v11 == v6 && v12 == v7 && v14 == v8 && v13 == v9)
  {
    v24 = 0;
    v5 = v2 + 16;
  }
  else
  {
    v18 = *(_QWORD *)(v2 + 984);
    if (v18 == v2 + 976)
      goto LABEL_74;
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(v18 + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v21 + 40) + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)
      {
        v22 = v21 + 48;
        if (v20)
        {
          InternalName = (PCString *)OZObjectManipulator::getInternalName((OZObjectManipulator *)(v21 + 48));
          this = (void **)PCString::size(InternalName);
          if ((_DWORD)this)
          {
            this = (void **)PCString::compare(InternalName, (const PCString *)v1 + 105);
            if (!(_DWORD)this)
              goto LABEL_46;
          }
        }
        else
        {
          v20 = *(_QWORD *)(v18 + 16);
          v19 = v21 + 48;
        }
      }
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18 != v2 + 976);
    v22 = v19;
    if (!v19)
    {
LABEL_74:
      if (*((_BYTE *)v1 + 321) || (v29 = *(_QWORD *)(v2 + 1008), v29 == v2 + 1000))
      {
LABEL_45:
        v22 = 0;
      }
      else
      {
        while (1)
        {
          v30 = *(_QWORD *)(v29 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v30 + 8)+ 8), *((int32x4_t *)v1 + 50))))) & 1) == 0&& (void **)v30 != v1)
          {
            break;
          }
          v29 = *(_QWORD *)(v29 + 8);
          if (v29 == v2 + 1000)
            goto LABEL_45;
        }
        v22 = v30 + 16;
      }
    }
LABEL_46:
    v25 = v2 + 16;
    if (!v2)
      v25 = 0;
    v24 = v22 == 0;
    if (v22)
      v5 = v22;
    else
      v5 = v25;
    if (!v5)
      return this;
  }
LABEL_52:
  this = (void **)(*(uint64_t (**)(uint64_t, void *, double))(*(_QWORD *)v5 + 224))(v5, v1[104], *((double *)v1 + 107));
  v27 = (OZSingleChannelBehavior *)this;
  if ((_DWORD)v3)
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 256))(v5);
    this = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
    if (!v27)
      return this;
    if ((_DWORD)this != (_DWORD)v3)
    {
      this = (void **)(*((uint64_t (**)(void **, OZSingleChannelBehavior *))*v1 + 96))(v1, v27);
      if (!(_DWORD)this)
        return this;
    }
  }
  else if (!this)
  {
    return this;
  }
  if (*((double *)v1 + 107) < 3.0)
    *((_DWORD *)v1 + 212) = OZSingleChannelBehavior::GetDefaultExcludeFlagsForChan(v27, v26);
  this = (void **)OZSingleChannelBehavior::addToChannelHelper((OZSingleChannelBehavior *)v1, (OZChannelBase *)v27, (OZChannelBase *)v27, v24);
  if ((_DWORD)this)
  {
    this = (void **)v1[104];
    if (this)
    {
      OZChannelRef::~OZChannelRef(this);
      this = (void **)MEMORY[0x1B5E29170]();
    }
    v1[104] = 0;
  }
  return this;
}

uint64_t OZSingleChannelBehavior::GetDefaultExcludeFlagsForChan(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  if (!this)
    return 0;
  {
    return 4;
  }
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

uint64_t OZSingleChannelBehavior::addToChannelHelper(OZSingleChannelBehavior *this, OZChannelBase *a2, OZChannelBase *a3, int a4)
{
  uint64_t v4;
  int8x16_t v8;
  OZChannel *v9;
  _QWORD *v10;
  void *v11;
  const void ***v12;
  const void **v13;
  int v14;
  const void *v15;
  OZChannel *v16;
  OZChannelBase *v17;
  _BYTE v19[80];

  LODWORD(v4) = a4;
  if (a4
    && (v8 = *((int8x16_t *)this + 51),
        *(_QWORD *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))))
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a2->var1 + 8), (int32x4_t)v8)))) & 1) != 0)return 0;
  }
  else if (!a2)
  {
    return 1;
  }
  if (!v9)
  {
    if (v10)
    {
      v12 = (const void ***)v10[14];
      if (v12)
      {
        v13 = *v12;
        if (*v12 != v12[1])
        {
          v14 = 1;
          while (1)
          {
            v15 = *v13;
            if (*v13)
            {
              if (v16)
              {
                if ((*((_DWORD *)this + 212) & v14) == 0)
                {
                  if (((*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 792))(this) & 1) != 0
                    || (*((unsigned int (**)(OZChannel *))v16->var0 + 64))(v16))
                  {
                    OZChannelInfo::OZChannelInfo((OZChannelInfo *)v19, v16->var16);
                    if ((v4 & 1) != 0 && !OZChannelInfo::operator==((uint64_t)v19, (uint64_t)this + 544))
                      goto LABEL_28;
                    OZChannelBehavior::setAffectedChannel(this, a3);
                    v4 = (*(uint64_t (**)(OZSingleChannelBehavior *, OZChannel *))(*(_QWORD *)this + 648))(this, v16);
                    OZChannel::appendCurveProcessingNode(v16, (void *)v4);
                    OZChannelBehavior::didAddCurveNode((uint64_t)this, v4);
                    OZChannelInfo::~OZChannelInfo((OZChannelInfo *)v19);
                    LOBYTE(v4) = 0;
                  }
                  else
                  {
                    (*(void (**)(OZSingleChannelBehavior *, OZChannel *))(*(_QWORD *)this + 800))(this, v16);
                  }
                }
                v14 *= 2;
              }
              else if (v17)
              {
                OZSingleChannelBehavior::addToChannelHelper(this, v17, a3, v4 & 1);
              }
            }
            if (++v13 == v12[1])
              return 1;
          }
        }
      }
    }
    return 1;
  }
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)v19, v9->var16);
  if (!(_DWORD)v4 || OZChannelInfo::operator==((uint64_t)v19, (uint64_t)this + 544))
  {
    OZChannelBehavior::setAffectedChannel(this, a2);
    v11 = (void *)(*(uint64_t (**)(OZSingleChannelBehavior *, OZChannel *))(*(_QWORD *)this + 648))(this, v9);
    OZChannel::appendCurveProcessingNode(v9, v11);
    OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v11);
    OZChannelInfo::~OZChannelInfo((OZChannelInfo *)v19);
    return 1;
  }
LABEL_28:
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)v19);
  return 0;
}

void sub_1B2EF2CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)va);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::willRemove(PCString *this)
{
  uint64_t v2;
  __CFString *var0;
  const OZChannelBase *isa;
  OZObjectManipulator *ObjectManipulatorForChannel;
  const PCString *InternalName;
  void **p_isa;
  OZChannelRef *v9;
  const OZChannelBase *v10;

  v2 = ((uint64_t (*)(PCString *))this->var0[10].isa)(this);
  if (this[49].var0)
  {
    var0 = this[47].var0;
    isa = (const OZChannelBase *)var0[1].isa;
    if (v2 && isa != 0)
    {
      ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)this, (OZChannelBase *)var0[1].isa);
      *(_OWORD *)&this[100].var0 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                                         + 8)
                                             + 8);
      InternalName = (const PCString *)OZObjectManipulator::getInternalName(ObjectManipulatorForChannel);
      PCString::set(this + 105, InternalName);
      p_isa = &this[104].var0->isa;
      if (p_isa)
      {
        OZChannelRef::~OZChannelRef(p_isa);
        MEMORY[0x1B5E29170]();
      }
      this[104].var0 = 0;
      v9 = (OZChannelRef *)operator new();
      v10 = (const OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel
                                                                                    + 216))(ObjectManipulatorForChannel);
      OZChannelRef::OZChannelRef(v9, isa, v10);
      this[104].var0 = (__CFString *)v9;
    }
  }
  OZChannelBehavior::willRemove((OZChannelBehavior *)this);
}

void sub_1B2EF2DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::sceneNodeDidLoad(OZSingleChannelBehavior *this)
{
  uint64_t result;
  uint64_t v3;
  OZSingleChannelBehavior *v4;
  OZSingleChannelBehavior *v5;

  (*(void (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 808))(this);
  result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 320))(this);
  v3 = *(_QWORD *)(result + 1008);
  if (v3 != result + 1000)
  {
    v4 = *(OZSingleChannelBehavior **)(v3 + 16);
    if (v4 != this)
    {
      do
      {
        v5 = v4;
        v3 = *(_QWORD *)(v3 + 8);
        if (v3 == result + 1000)
          break;
        v4 = *(OZSingleChannelBehavior **)(v3 + 16);
      }
      while (v4 != this);
      if (v5)
        result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 112))(this);
    }
  }
  *((_BYTE *)this + 852) = 0;
  return result;
}

uint64_t OZSingleChannelBehavior::didAddSceneNodeToScene(OZSingleChannelBehavior *this, OZScene *a2)
{
  uint64_t result;
  uint64_t v4;
  OZSingleChannelBehavior *v5;
  OZSingleChannelBehavior *v6;

  result = OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((_BYTE *)this + 852))
  {
    (*(void (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 808))(this);
    result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 320))(this);
    v4 = *(_QWORD *)(result + 1008);
    if (v4 != result + 1000)
    {
      v5 = *(OZSingleChannelBehavior **)(v4 + 16);
      if (v5 == this)
      {
        v6 = 0;
      }
      else
      {
        do
        {
          v6 = v5;
          v4 = *(_QWORD *)(v4 + 8);
          if (v4 == result + 1000)
            break;
          v5 = *(OZSingleChannelBehavior **)(v4 + 16);
        }
        while (v5 != this);
      }
      if (v6)
        return (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 112))(this);
    }
  }
  return result;
}

void OZSingleChannelBehavior::willDeleteMaterialLayer(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  OZChannelBase *v4;
  int ObjectID;
  uint64_t ObjectManipulator;
  uint64_t v7;
  uint64_t v8;
  _QWORD *ObjectManipulatorForChannel;
  const PCString *var5;
  void **v11;
  OZChannelRef *v12;
  const OZChannelBase *v13;
  void **v14;

  if (*((_QWORD *)this + 49))
    v4 = *(OZChannelBase **)(*((_QWORD *)this + 47) + 32);
  else
    v4 = 0;
  OZChannelBehavior::willDeleteMaterialLayer(this, a2);
  ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 640));
  ObjectManipulator = OZChannelBase::getObjectManipulator(a2);
  if (ObjectManipulator)
    v7 = ObjectManipulator - 16;
  else
    v7 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 192))(v7);
  if (ObjectID == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8))
  {
    if (v4 && OZChannelBase::getObjectManipulator(v4))
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel(this, v4);
      *((_OWORD *)this + 50) = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel
                                                                                           + 256))(ObjectManipulatorForChannel)
                                                     + 8)
                                         + 8);
      if (v4->var5)
        var5 = v4->var5;
      else
        var5 = &v4->var4;
      PCString::set((PCString *)this + 105, var5);
      v11 = (void **)*((_QWORD *)this + 104);
      if (v11)
      {
        OZChannelRef::~OZChannelRef(v11);
        MEMORY[0x1B5E29170]();
      }
      *((_QWORD *)this + 104) = 0;
      v12 = (OZChannelRef *)operator new();
      v13 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
      OZChannelRef::OZChannelRef(v12, v4, v13);
      *((_QWORD *)this + 104) = v12;
    }
    else
    {
      *((_OWORD *)this + 50) = 0u;
      PCString::clear((PCString *)this + 105);
      v14 = (void **)*((_QWORD *)this + 104);
      if (v14)
      {
        OZChannelRef::~OZChannelRef(v14);
        MEMORY[0x1B5E29170]();
      }
      *((_QWORD *)this + 104) = 0;
    }
    OZChannelBehavior::clearChannels(this);
  }
}

void sub_1B2EF30C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::willDeleteObject(OZSingleChannelBehavior *this, OZObjectManipulator *a2)
{
  OZChannelBase *v4;
  int ObjectID;
  uint64_t v6;
  _QWORD *ObjectManipulatorForChannel;
  const PCString *var5;
  void **v9;
  OZChannelRef *v10;
  const OZChannelBase *v11;
  void **v12;

  if (*((_QWORD *)this + 49))
    v4 = *(OZChannelBase **)(*((_QWORD *)this + 47) + 32);
  else
    v4 = 0;
  OZChannelBehavior::willDeleteObject(this, a2);
  ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 640));
  v6 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  if (ObjectID == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6))
  {
    if (v4 && OZChannelBase::getObjectManipulator(v4))
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel(this, v4);
      *((_OWORD *)this + 50) = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel
                                                                                           + 256))(ObjectManipulatorForChannel)
                                                     + 8)
                                         + 8);
      if (v4->var5)
        var5 = v4->var5;
      else
        var5 = &v4->var4;
      PCString::set((PCString *)this + 105, var5);
      v9 = (void **)*((_QWORD *)this + 104);
      if (v9)
      {
        OZChannelRef::~OZChannelRef(v9);
        MEMORY[0x1B5E29170]();
      }
      *((_QWORD *)this + 104) = 0;
      v10 = (OZChannelRef *)operator new();
      v11 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
      OZChannelRef::OZChannelRef(v10, v4, v11);
      *((_QWORD *)this + 104) = v10;
    }
    else
    {
      *((_OWORD *)this + 50) = 0u;
      PCString::clear((PCString *)this + 105);
      v12 = (void **)*((_QWORD *)this + 104);
      if (v12)
      {
        OZChannelRef::~OZChannelRef(v12);
        MEMORY[0x1B5E29170]();
      }
      *((_QWORD *)this + 104) = 0;
    }
    OZChannelBehavior::clearChannels(this);
  }
}

void sub_1B2EF3260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::didUndoDeleteOfObject(OZSingleChannelBehavior *this, OZObjectManipulator *a2)
{
  int ObjectID;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  OZSingleChannelBehavior *v8;
  OZSingleChannelBehavior *v9;

  ObjectID = OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 640));
  v5 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  if (ObjectID == (_DWORD)result)
  {
    (*(void (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 808))(this);
    result = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 320))(this);
    v7 = *(_QWORD *)(result + 1008);
    if (v7 != result + 1000)
    {
      v8 = *(OZSingleChannelBehavior **)(v7 + 16);
      if (v8 != this)
      {
        do
        {
          v9 = v8;
          v7 = *(_QWORD *)(v7 + 8);
          if (v7 == result + 1000)
            break;
          v8 = *(OZSingleChannelBehavior **)(v7 + 16);
        }
        while (v8 != this);
        if (v9)
          return (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 112))(this);
      }
    }
  }
  return result;
}

void OZSingleChannelBehavior::willDeleteChannel(PCString *this, OZChannelBase *a2)
{
  OZChannelBase *isa;
  _QWORD *ObjectManipulatorForChannel;
  PCString *var5;
  void **p_isa;
  OZChannelRef *v8;
  const OZChannelBase *v9;
  void **v10;

  if (this[49].var0)
    isa = (OZChannelBase *)this[47].var0[1].isa;
  else
    isa = 0;
  OZChannelBehavior::willDeleteChannel((OZChannelBehavior *)this, a2);
  if (isa && isa == a2)
  {
    if (OZChannelBase::getObjectManipulator(a2))
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)this, a2);
      *(_OWORD *)&this[100].var0 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel
                                                                                               + 256))(ObjectManipulatorForChannel)
                                                         + 8)
                                             + 8);
      if (a2->var5)
        var5 = a2->var5;
      else
        var5 = &a2->var4;
      PCString::set(this + 105, var5);
      p_isa = &this[104].var0->isa;
      if (p_isa)
      {
        OZChannelRef::~OZChannelRef(p_isa);
        MEMORY[0x1B5E29170]();
      }
      this[104].var0 = 0;
      v8 = (OZChannelRef *)operator new();
      v9 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
      OZChannelRef::OZChannelRef(v8, a2, v9);
      this[104].var0 = (__CFString *)v8;
    }
    else
    {
      *(_OWORD *)&this[100].var0 = 0u;
      PCString::clear(this + 105);
      v10 = &this[104].var0->isa;
      if (v10)
      {
        OZChannelRef::~OZChannelRef(v10);
        MEMORY[0x1B5E29170]();
      }
      this[104].var0 = 0;
    }
    OZChannelBehavior::clearChannels((OZChannelBehavior *)this);
  }
}

void sub_1B2EF34B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::didUndoDeleteChannel(unsigned __int8 **this, OZChannelBase *a2)
{
  _QWORD *ObjectManipulatorForChannel;
  const OZChannelBase *v5;
  uint64_t v6;
  uint64_t v7;
  OZSingleChannelBehavior *v8;
  OZSingleChannelBehavior *v9;
  void *v10[3];

  if ((!this[49] || !*((_QWORD *)this[47] + 4)) && this[104])
  {
    ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel((OZSingleChannelBehavior *)this, a2);
    v5 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel + 216))(ObjectManipulatorForChannel);
    OZChannelRef::OZChannelRef((OZChannelRef *)v10, a2, v5);
    if (OZChannelRef::operator==((unsigned __int8 *)v10, this[104]))
    {
      (*((void (**)(unsigned __int8 **))*this + 101))(this);
      v6 = (*((uint64_t (**)(unsigned __int8 **))*this + 40))(this);
      v7 = *(_QWORD *)(v6 + 1008);
      if (v7 != v6 + 1000)
      {
        v8 = *(OZSingleChannelBehavior **)(v7 + 16);
        if (v8 != (OZSingleChannelBehavior *)this)
        {
          do
          {
            v9 = v8;
            v7 = *(_QWORD *)(v7 + 8);
            if (v7 == v6 + 1000)
              break;
            v8 = *(OZSingleChannelBehavior **)(v7 + 16);
          }
          while (v8 != (OZSingleChannelBehavior *)this);
          if (v9)
            (*((void (**)(unsigned __int8 **))*this + 14))(this);
        }
      }
    }
    OZChannelRef::~OZChannelRef(v10);
  }
}

void sub_1B2EF35D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior::updateChanRef(_QWORD *a1, uint64_t **a2)
{
  unint64_t v4;
  const char *v5;
  __CFString *v6;
  const __CFArray *ArrayBySeparatingStrings;
  uint64_t Count;
  CFIndex v9;
  __CFArray *MutableCopy;
  uint64_t **v11;
  const __CFString *ValueAtIndex;
  unsigned int IntValue;
  uint64_t *v14;
  uint64_t **v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  CFStringRef v24;
  __CFArray *v25;
  _BOOL4 v26;
  void **v27;
  CFIndex i;
  const void *v29;
  OZChannelRef *v30;
  const __CFAllocator *allocator;
  PCString v32;
  PCString v33;
  PCSharedCount v34[2];

  if (a1[104])
  {
    v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 320))(a1) + 8);
    *(_OWORD *)&v34[0].var0 = xmmword_1B30541C0;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)v34))
    {
      v5 = (const char *)a1[104];
      if (v5[23] < 0)
        v5 = *(const char **)v5;
      PCString::PCString(&v33, v5);
      v6 = PCString::cf_str(&v33);
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, CFSTR("/"));
      Count = CFArrayGetCount(ArrayBySeparatingStrings);
      if (Count < 1)
      {
        v26 = 0;
        v25 = 0;
      }
      else
      {
        v9 = 0;
        MutableCopy = 0;
        v11 = a2 + 1;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v9);
          if (CFStringCompare(ValueAtIndex, CFSTR("."), 0))
          {
            IntValue = CFStringGetIntValue(ValueAtIndex);
            v14 = *v11;
            if (*v11)
            {
              v15 = a2 + 1;
              do
              {
                v16 = *((_DWORD *)v14 + 7);
                v17 = v16 >= IntValue;
                if (v16 >= IntValue)
                  v18 = v14;
                else
                  v18 = v14 + 1;
                if (v17)
                  v15 = (uint64_t **)v14;
                v14 = (uint64_t *)*v18;
              }
              while (*v18);
              if (v15 != v11 && IntValue >= *((_DWORD *)v15 + 7) && (int)IntValue >= 10000)
              {
                LODWORD(v32.var0) = IntValue;
                v34[0].var0 = (PC_Sp_counted_base *)&v32;
                v20 = *((unsigned int *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a2, (unsigned int *)&v32, (uint64_t)&std::piecewise_construct, (unsigned int **)v34)+ 8);
                v21 = *(uint64_t **)((*(uint64_t (**)(_QWORD *))(*a1 + 320))(a1) + 944);
                v22 = *v21;
                v23 = v21[1];
                while (v22 != v23)
                {
                  if ((_DWORD)v20 == *(_DWORD *)(*(_QWORD *)v22 + 24))
                  {
                    if (!MutableCopy)
                      MutableCopy = CFArrayCreateMutableCopy(allocator, Count, ArrayBySeparatingStrings);
                    v24 = CFStringCreateWithFormat(allocator, 0, CFSTR("%u"), v20);
                    if (v24)
                    {
                      v25 = MutableCopy;
                      CFArraySetValueAtIndex(MutableCopy, v9, v24);
                      CFRelease(v24);
                      v26 = MutableCopy != 0;
                      if (MutableCopy)
                      {
                        v27 = (void **)a1[104];
                        if (v27)
                        {
                          OZChannelRef::~OZChannelRef(v27);
                          MEMORY[0x1B5E29170]();
                        }
                        a1[104] = 0;
                        PCSharedCount::PCSharedCount(v34);
                        for (i = 0; i != Count; ++i)
                        {
                          v29 = CFArrayGetValueAtIndex(MutableCopy, i);
                          PCURL::PCURL((PCURL *)&v32, v29);
                          PCString::append((PCString *)v34, &v32);
                          PCString::~PCString(&v32);
                          if (Count - 1 != i)
                            PCString::append((PCString *)v34, "/");
                        }
                        v30 = (OZChannelRef *)operator new();
                        OZChannelRef::OZChannelRef(v30, (PCString *)v34);
                        a1[104] = v30;
                        PCString::~PCString((PCString *)v34);
                        v26 = 1;
                      }
                      goto LABEL_32;
                    }
                    break;
                  }
                  v22 += 8;
                }
              }
            }
          }
          ++v9;
        }
        while (v9 < Count);
        v25 = MutableCopy;
        v26 = MutableCopy != 0;
      }
LABEL_32:
      CFRelease(ArrayBySeparatingStrings);
      if (v26)
        CFRelease(v25);
      PCString::~PCString(&v33);
    }
  }
}

void sub_1B2EF3904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12, PCString a13)
{
  uint64_t v13;

  MEMORY[0x1B5E29170](v13, 0x1012C40EC159624);
  PCString::~PCString(&a13);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

_QWORD *OZSingleChannelBehavior::updateReferenceIDs(_QWORD *a1, uint64_t **a2)
{
  _QWORD *result;

  result = OZChannelObjectRoot::updateReferenceIDs(a1 + 7, a2);
  if (*((_BYTE *)a1 + 852) || a1[104])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 320))(a1);
    if (result)
    {
      OZSingleChannelBehavior::updateChanRef(a1, a2);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 808))(a1);
      *((_BYTE *)a1 + 852) = 0;
    }
  }
  return result;
}

_QWORD *`non-virtual thunk to'OZSingleChannelBehavior::updateReferenceIDs(uint64_t a1, uint64_t **a2)
{
  return OZSingleChannelBehavior::updateReferenceIDs((_QWORD *)(a1 - 16), a2);
}

uint64_t OZSingleChannelBehavior::getAffectedObject(OZSingleChannelBehavior *this)
{
  OZChannelBase *v1;

  if (*((_QWORD *)this + 49) && (v1 = *(OZChannelBase **)(*((_QWORD *)this + 47) + 32)) != 0)
    return OZChannelBase::getObjectManipulator(v1);
  else
    return 0;
}

void OZSingleChannelBehavior::setChannelRef(OZSingleChannelBehavior *this, OZChannelBase *a2, int a3)
{
  void **v6;
  OZObjectManipulator *ObjectManipulatorForChannel;
  const OZChannelBase *v8;
  uint64_t v9;
  unsigned int v10;
  std::string *v11;
  const PCString *InternalName;
  void *v13[3];

  v6 = (void **)*((_QWORD *)this + 104);
  if (v6)
  {
    OZChannelRef::~OZChannelRef(v6);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)this + 104) = 0;
  }
  ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel(this, a2);
  v8 = (const OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel
                                                                               + 216))(ObjectManipulatorForChannel);
  OZChannelRef::OZChannelRef((OZChannelRef *)v13, a2, v8);
  v9 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  OZChannel::setValue((OZChannel *)((char *)this + 640), MEMORY[0x1E0CA2E68], (double)v10, 0);
  v11 = (std::string *)operator new();
  OZChannelRef::OZChannelRef(v11, (const OZChannelRef *)v13);
  *((_QWORD *)this + 104) = v11;
  *((_OWORD *)this + 50) = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                                 + 8)
                                     + 8);
  InternalName = (const PCString *)OZObjectManipulator::getInternalName(ObjectManipulatorForChannel);
  PCString::set((PCString *)this + 105, InternalName);
  *((_DWORD *)this + 212) = a3;
  OZChannelRef::~OZChannelRef(v13);
}

void sub_1B2EF3B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1B5E29170](v2, 0x1012C40EC159624);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *OZSingleChannelBehavior::addToOneChannel(OZSingleChannelBehavior *this, OZChannel *a2)
{
  void *v4;

  v4 = (void *)(*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 648))(this);
  OZChannel::appendCurveProcessingNode(a2, v4);
  return OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v4);
}

uint64_t OZSingleChannelBehavior::addToChannel(OZSingleChannelBehavior *this, OZChannelBase *a2)
{
  void **v4;
  OZChannelBase *v5;
  OZChannelBehavior *SceneNodeFromChan;
  OZObjectManipulator *ObjectManipulatorForChannel;

  v4 = (void **)*((_QWORD *)this + 104);
  if (v4)
  {
    OZChannelRef::~OZChannelRef(v4);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)this + 104) = 0;
  }
  OZSingleChannelBehavior::addToChannelHelper(this, a2, a2, 0);
  if (!(*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 320))(this))
  {
    SceneNodeFromChan = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)a2, v5);
    (*(void (**)(OZSingleChannelBehavior *, OZChannelBehavior *))(*(_QWORD *)this + 776))(this, SceneNodeFromChan);
  }
  ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel(this, a2);
  return OZChanObjectManipRef::setObject((OZSingleChannelBehavior *)((char *)this + 640), ObjectManipulatorForChannel, 0);
}

double OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double `non-virtual thunk to'OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

__n128 OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  unint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  v3 = *((_QWORD *)a3 + 19);
  v4 = *((_QWORD *)a3 + 10);
  v11 = *(CMTime *)((_BYTE *)a3 + 5);
  result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.value = result;
  v10.epoch = *((_QWORD *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZSingleChannelBehavior *, uint64_t, CMTime *, double, double))(*(_QWORD *)this + 680))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      result = *(__n128 *)&v14.value;
      v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZSingleChannelBehavior::solveNode(OZSingleChannelBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  double result;

  *(_QWORD *)&result = OZSingleChannelBehavior::solveNode((OZSingleChannelBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZSingleChannelBehavior::getNeededRange(OZSingleChannelBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

__n128 `non-virtual thunk to'OZSingleChannelBehavior::getNeededRange(OZSingleChannelBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

void OZSingleChannelBehavior::conformToChannel(OZSingleChannelBehavior *this, OZChannel *a2, int a3, __n128 a4)
{
  OZChannelInfo *var16;
  double v8;
  double v9;
  __n128 v10;
  double v11;

  var16 = a2->var16;
  v8 = *((double *)var16 + 5);
  a4.n128_u64[0] = *((_QWORD *)this + 78);
  if (v8 != a4.n128_f64[0])
  {
    if (a3)
    {
      *((double *)this + 78) = v8;
      a4.n128_f64[0] = v8;
    }
    (*(void (**)(OZSingleChannelBehavior *, __n128))(*(_QWORD *)this + 752))(this, a4);
    var16 = a2->var16;
  }
  if (!OZChannelInfo::operator==((uint64_t)this + 544, (uint64_t)var16))
  {
    if (a3)
      OZChannelInfo::operator=((uint64_t)this + 544, (uint64_t)a2->var16);
    (*(void (**)(OZSingleChannelBehavior *, char *, OZChannel *))(*(_QWORD *)this + 760))(this, (char *)this + 544, a2);
  }
  if (a3)
  {
    v9 = *((double *)a2->var16 + 2);
    (*((void (**)(OZChannel *))a2->var0 + 101))(a2);
    v11 = 3.40282347e38;
    if (v9 != -3.40282347e38 && v10.n128_f64[0] != 3.40282347e38)
      v11 = (*((double (**)(OZChannel *, __n128, double))a2->var0 + 101))(a2, v10, 3.40282347e38)
          - *((double *)a2->var16 + 2);
    *((double *)this + 79) = v11;
  }
}

OZSingleChanCurveNode *OZSingleChannelBehavior::createCurveNode(OZSingleChannelBehavior *this, OZChannel *a2, __n128 a3)
{
  OZSingleChanCurveNode *v5;

  OZSingleChannelBehavior::conformToChannel(this, a2, 1, a3);
  v5 = (OZSingleChanCurveNode *)operator new();
  OZSingleChanCurveNode::OZSingleChanCurveNode(v5, (OZSingleChannelBehavior *)((char *)this + 536), a2);
  return v5;
}

void sub_1B2EF3F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChannelBehavior::addToSceneNode(OZSingleChannelBehavior *this, OZSceneNode *a2)
{
  return (*(uint64_t (**)(OZSceneNode *, OZSingleChannelBehavior *, _QWORD))(*(_QWORD *)a2 + 360))(a2, this, 0);
}

uint64_t OZSingleChannelBehavior::writeBody(OZSingleChannelBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  OZChannelBase *v10;
  _QWORD *ObjectManipulatorForChannel;
  _QWORD *v12;
  const OZChannelBase *v13;
  const char *v14;
  void *v16[2];
  char v17;
  __int128 v18;
  PCSharedCount v19;

  if (*((_QWORD *)this + 49) && *(_QWORD *)(*((_QWORD *)this + 47) + 32))
  {
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelBehaviorScope);
    if (*((_QWORD *)this + 49))
      v10 = *(OZChannelBase **)(*((_QWORD *)this + 47) + 32);
    else
      v10 = 0;
    PCSharedCount::PCSharedCount(&v19);
    v18 = 0uLL;
    if (v10)
    {
      ObjectManipulatorForChannel = OZSingleChannelBehavior::getObjectManipulatorForChannel(this, v10);
      v12 = ObjectManipulatorForChannel;
      if (ObjectManipulatorForChannel)
      {
        v18 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*ObjectManipulatorForChannel + 256))(ObjectManipulatorForChannel)
                                    + 8)
                        + 8);
        v13 = (const OZChannelBase *)(*(uint64_t (**)(_QWORD *))(*v12 + 216))(v12);
        OZChannelRef::OZChannelRef((OZChannelRef *)v16, v10, v13);
        if (v17 >= 0)
          v14 = (const char *)v16;
        else
          v14 = (const char *)v16[0];
        PCString::set((PCString *)&v19, v14);
        OZChannelRef::~OZChannelRef(v16);
      }
    }
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 71);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, __int128 *))(*(_QWORD *)a2 + 192))(a2, 1, &v18);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCSharedCount *))(*(_QWORD *)a2 + 200))(a2, 2, &v19);
    if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(_QWORD *)a2 + 184))(a2, 3, *((double *)this + 79));
    if (*((_DWORD *)this + 212))
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCSerializerWriteStream::popScope((uint64_t)a2);
    PCString::~PCString((PCString *)&v19);
  }
  return OZBehavior::writeBody(this, a2, a3, a4, a5);
}

void sub_1B2EF4140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCString a16)
{
  OZChannelRef::~OZChannelRef(&a10);
  PCString::~PCString(&a16);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZSingleChannelBehavior::writeBody(OZSingleChannelBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZSingleChannelBehavior::writeBody((OZSingleChannelBehavior *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZSingleChannelBehavior::parseBegin(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  unint64_t v4;

  OZBehavior::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBehaviorScope);
  *((_BYTE *)this + 852) = 1;
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 107) = (double)v4;
  return 1;
}

uint64_t `non-virtual thunk to'OZSingleChannelBehavior::parseBegin(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  unint64_t v4;

  OZBehavior::parseBegin((OZSingleChannelBehavior *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelBehaviorScope);
  *((_BYTE *)this + 804) = 1;
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  *((double *)this + 101) = (double)v4;
  return 1;
}

uint64_t OZSingleChannelBehavior::parseEnd(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZSingleChannelBehavior::parseEnd(OZSingleChannelBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseEnd((OZSingleChannelBehavior *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZSingleChannelBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  _OWORD *AttributeAsUUID;
  _OWORD *v7;
  void **v8;
  OZChannelRef *v9;
  PCSharedCount v11;

  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 71)
  {
    AttributeAsUUID = (_OWORD *)PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 1);
    v7 = this + 100;
    if (AttributeAsUUID)
    {
      *v7 = *AttributeAsUUID;
      MEMORY[0x1B5E29170]();
    }
    else
    {
      *(_QWORD *)v7 = 0;
      this[101] = 0;
    }
    PCSharedCount::PCSharedCount(&v11);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v11);
    v8 = (void **)this[104];
    if (v8)
    {
      OZChannelRef::~OZChannelRef(v8);
      MEMORY[0x1B5E29170]();
    }
    this[104] = 0;
    v9 = (OZChannelRef *)operator new();
    OZChannelRef::OZChannelRef(v9, (PCString *)&v11);
    this[104] = v9;
    PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)(this + 79));
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)(this + 106));
    PCString::~PCString((PCString *)&v11);
  }
  return 1;
}

void sub_1B2EF4364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  MEMORY[0x1B5E29170](v10, 0x1012C40EC159624);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZSingleChannelBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZSingleChannelBehavior::parseElement(this - 6, a2, a3);
  return 1;
}

void OZMotionToForcesBehavior::OZMotionToForcesBehavior(OZMotionToForcesBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t i;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  v5 = 0;
  *(_QWORD *)(v6 + 16) = &unk_1E65B1100;
  *(_QWORD *)(v6 + 48) = &unk_1E65B1358;
  *(_QWORD *)v6 = &off_1E65B0E08;
  *(_QWORD *)(v6 + 336) = &unk_1E65B13B0;
  *(_QWORD *)(v6 + 344) = 0;
  *(_BYTE *)(v6 + 448) = 1;
  *(_QWORD *)(v6 + 456) = 0;
  *(_QWORD *)(v6 + 464) = 0;
  *(_BYTE *)(v6 + 552) = 1;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_QWORD *)(v6 + 472) = 0;
  *(_QWORD *)(v6 + 480) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_QWORD *)(v6 + 488) = 0;
  *(_QWORD *)(v6 + 680) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 640) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 600) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 560) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  do
  {
    v7 = (char *)this + v5;
    *((_QWORD *)v7 + 91) = 0;
    *(_OWORD *)((char *)this + v5 + 712) = 0uLL;
    *((_QWORD *)v7 + 92) = 0x3FF0000000000000;
    *((_QWORD *)v7 + 93) = 0;
    *((_OWORD *)v7 + 47) = 0uLL;
    v5 += 88;
  }
  while (v5 != 528);
  PCMutex::PCMutex((PCMutex *)this + 17);
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 10, 0);
  for (i = 768; i != 1296; i += 88)
    *((_BYTE *)this + i) = 0;
  *((_DWORD *)this + 304) = 0;
}

void sub_1B2EF44C0(_Unwind_Exception *a1)
{
  OZSimulationBehavior *v1;
  PCMutex *v2;

  PCMutex::~PCMutex(v2);
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior::OZMotionToForcesBehavior(OZMotionToForcesBehavior *this, OZMotionToForcesBehavior *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  v5 = 0;
  *(_QWORD *)v6 = &off_1E65B0E08;
  *(_QWORD *)(v6 + 16) = &unk_1E65B1100;
  *(_QWORD *)(v6 + 48) = &unk_1E65B1358;
  v7 = v6 + 344;
  *(_QWORD *)(v6 + 336) = &unk_1E65B13B0;
  *(_QWORD *)(v6 + 344) = 0;
  *(_QWORD *)(v6 + 456) = 0;
  *(_QWORD *)(v6 + 464) = 0;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_QWORD *)(v6 + 472) = 0;
  *(_QWORD *)(v6 + 480) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_QWORD *)(v6 + 488) = 0;
  *(_QWORD *)(v6 + 680) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 640) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 600) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 560) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  do
  {
    v8 = (char *)this + v5;
    *((_QWORD *)v8 + 91) = 0;
    *(_OWORD *)((char *)this + v5 + 712) = 0uLL;
    *((_QWORD *)v8 + 92) = 0x3FF0000000000000;
    *((_QWORD *)v8 + 93) = 0;
    *((_OWORD *)v8 + 47) = 0uLL;
    v5 += 88;
  }
  while (v5 != 528);
  PCMutex::PCMutex((PCMutex *)this + 17);
  if ((a3 & 0x20) != 0)
  {
    v9 = OZSimulationBehavior::_MTF_IDGenerator--;
    OZChannelBase::setID((OZChannelBase *)((char *)this + 56), v9);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 2, 0);
  *(_QWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  v10 = 768;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  do
  {
    *((_BYTE *)this + v10) = 0;
    v10 += 88;
  }
  while (v10 != 1296);
  *((_DWORD *)this + 304) = 0;
}

void sub_1B2EF4614(_Unwind_Exception *a1)
{
  OZSimulationBehavior *v1;

  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior::~OZMotionToForcesBehavior(PCMutex *this)
{
  uint64_t v2;

  this->_vptr$PCMutex = (void **)&off_1E65B0E08;
  *(_QWORD *)this->_Mutex.__opaque = &unk_1E65B1100;
  *(_QWORD *)&this->_Mutex.__opaque[32] = &unk_1E65B1358;
  *(_QWORD *)&this[4]._Mutex.__opaque[32] = &unk_1E65B13B0;
  v2 = *(_QWORD *)&this[4]._Mutex.__opaque[40];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCMutex::~PCMutex(this + 17);
  OZSimulationBehavior::~OZSimulationBehavior((OZSimulationBehavior *)this);
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZMotionToForcesBehavior::~OZMotionToForcesBehavior(OZMotionToForcesBehavior *this)
{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 16));
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 48));
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 336));
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZMotionToForcesBehavior::~OZMotionToForcesBehavior((PCMutex *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZMotionToForcesBehavior::operator=(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344), 16);
}

OZScene *OZMotionToForcesBehavior::didAddToNode(OZMotionToForcesBehavior *this, OZSceneNode *a2)
{
  _QWORD *v4;
  OZScene *result;
  uint64_t v6;
  OZObjectSimulator *v7;
  OZCurveNode *v8;
  OZCurveNode *v9;
  OZCurveNode *v10;
  OZCurveNode *v11;
  OZCurveNode *v12;
  OZCurveNode *v13;
  OZCurveNode *v14;
  OZCurveNode *v15;
  OZCurveNode *v16;
  OZCurveNode *v17;
  OZCurveNode *v18;
  OZCurveNode *v19;

  OZSimulationBehavior::didAddToNode((uint64_t)this, a2);
  v4 = (_QWORD *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  OZChannelObjectRoot::addBehavior(v4, (uint64_t)this);
  if (result)
  {
    v6 = (uint64_t)result;
    if (!*((_QWORD *)this + 43))
    {
      v7 = (OZObjectSimulator *)operator new();
      OZObjectSimulator::OZObjectSimulator(v7, (OZTransformNode *)v6);
      *((_QWORD *)this + 43) = v7;
    }
    v8 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v8, *((_QWORD *)this + 43), 1);
    *((_QWORD *)this + 44) = v8;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 1352), v8);
    v9 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v9, *((_QWORD *)this + 43), 2);
    *((_QWORD *)this + 45) = v9;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 1504), v9);
    v10 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v10, *((_QWORD *)this + 43), 3);
    *((_QWORD *)this + 46) = v10;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 1952), v10);
    v11 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v11, *((_QWORD *)this + 43), 7);
    *((_QWORD *)this + 47) = v11;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 2240), v11);
    v12 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v12, *((_QWORD *)this + 43), 8);
    *((_QWORD *)this + 48) = v12;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 2392), v12);
    v13 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v13, *((_QWORD *)this + 43), 9);
    *((_QWORD *)this + 49) = v13;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 2544), v13);
    v14 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v14, *((_QWORD *)this + 43), 4);
    *((_QWORD *)this + 50) = v14;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 3096), v14);
    v15 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v15, *((_QWORD *)this + 43), 5);
    *((_QWORD *)this + 51) = v15;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 3248), v15);
    v16 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v16, *((_QWORD *)this + 43), 6);
    *((_QWORD *)this + 52) = v16;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 3696), v16);
    v17 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v17, *((_QWORD *)this + 43), 10);
    *((_QWORD *)this + 53) = v17;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 3984), v17);
    v18 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v18, *((_QWORD *)this + 43), 11);
    *((_QWORD *)this + 54) = v18;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 4136), v18);
    v19 = (OZCurveNode *)operator new();
    OZSimulationCurveNode::OZSimulationCurveNode(v19, *((_QWORD *)this + 43), 12);
    *((_QWORD *)this + 55) = v19;
    OZChannel::appendCurveProcessingNode((OZChannel *)(v6 + 4288), v19);
    result = (OZScene *)(*(uint64_t (**)(OZMotionToForcesBehavior *))(*(_QWORD *)this + 336))(this);
    if (result)
      return (OZScene *)OZObjectSimulator::didAddToScene(*((_QWORD **)this + 43), result);
  }
  return result;
}

void sub_1B2EF4AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40FB7B41F7);
  _Unwind_Resume(a1);
}

OZScene *OZMotionToForcesBehavior::willRemove(void **this)
{
  char *TransformNode;
  _QWORD *v3;
  OZScene *result;

  TransformNode = (char *)OZSimulationBehavior::getTransformNode((OZSimulationBehavior *)this);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 1352), this[44]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 1504), this[45]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 1952), this[46]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 2240), this[47]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 2392), this[48]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 2544), this[49]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3096), this[50]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3248), this[51]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3696), this[52]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 3984), this[53]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 4136), this[54]);
  OZChannel::deleteCurveProcessingNode((OZChannel *)(TransformNode + 4288), this[55]);
  v3 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)TransformNode + 640))(TransformNode);
  OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  result = (OZScene *)(*((uint64_t (**)(void **))*this + 42))(this);
  if (result)
    result = (OZScene *)OZObjectSimulator::willRemoveFromScene(this[43], result);
  this[41] = 0;
  return result;
}

uint64_t OZMotionToForcesBehavior::sceneNodeDidLoad(OZMotionToForcesBehavior *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 43) + 16))(*((_QWORD *)this + 43), 16);
}

_QWORD *OZMotionToForcesBehavior::didAddSceneNodeToScene(OZMotionToForcesBehavior *this, OZScene *a2)
{
  return OZObjectSimulator::didAddToScene(*((_QWORD **)this + 43), a2);
}

_QWORD *OZMotionToForcesBehavior::willRemoveSceneNodeFromScene(OZMotionToForcesBehavior *this, OZScene *a2)
{
  return OZObjectSimulator::willRemoveFromScene(*((_QWORD **)this + 43), a2);
}

uint64_t OZMotionToForcesBehavior::didFinishLoadingIntoMotionEffect(OZMotionToForcesBehavior *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 43) + 16))(*((_QWORD *)this + 43), 16);
}

uint64_t `non-virtual thunk to'OZMotionToForcesBehavior::didFinishLoadingIntoMotionEffect(OZMotionToForcesBehavior *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 41) + 16))(*((_QWORD *)this + 41), 16);
}

OZObjectSimulator *OZMotionToForcesBehavior::dirty(OZObjectSimulator **this)
{
  OZObjectSimulator *result;

  OZBehavior::dirty((OZBehavior *)this);
  result = this[43];
  if (result)
    return (OZObjectSimulator *)OZObjectSimulator::dirty(result);
  return result;
}

OZObjectSimulator *`non-virtual thunk to'OZMotionToForcesBehavior::dirty(OZObjectSimulator **this)
{
  return OZMotionToForcesBehavior::dirty(this - 2);
}

double OZMotionToForcesBehavior::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  int8x8_t *v6;
  int8x8_t *v7;
  int8x8_t *Hash;
  double result;
  __n128 v10;

  if (!v6)
    __cxa_bad_cast();
  v7 = v6;
  OZBehavior::calcStaticHash(a1, lpsrc, a3);
  v10 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v7 + 40))(v7);
  OZObjectSimulator::calcStaticHash(*(_QWORD *)(a1 + 344), lpsrc, a3);
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v10, (int *)Hash);
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v7, &v10).n128_u64[0];
  return result;
}

double `non-virtual thunk to'OZMotionToForcesBehavior::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZMotionToForcesBehavior::calcStaticHash(a1 - 16, a2, a3);
}

uint64_t OZMotionToForcesBehavior::calcHashForState(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 344);
  if (*(_BYTE *)(v3 + 208))
  {
    if (!*(_BYTE *)(v3 + 372))
    {
      v4 = *a3;
      v5 = *((_QWORD *)a3 + 2);
      return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v4);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'OZMotionToForcesBehavior::calcHashForState(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 328);
  if (*(_BYTE *)(v3 + 208))
  {
    if (!*(_BYTE *)(v3 + 372))
    {
      v4 = *a3;
      v5 = *((_QWORD *)a3 + 2);
      return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v4);
    }
  }
  return result;
}

BOOL OZMotionToForcesBehavior::canAddToSceneNode(OZMotionToForcesBehavior *this, OZSceneNode *a2)
{
  unint64_t v3;
  _BOOL8 result;
  __int128 v5;

  result = 1;
  if ((OZSimulationBehavior::canAddToSceneNode(this, a2) & 1) == 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    v5 = xmmword_1B3054C60;
    if (!OZFactory::isKindOfClass(v3, (int32x4_t *)&v5)
      || (OZSceneNode::isDescendantOf360Group((uint64_t)a2) & 1) == 0)
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZMotionToForcesBehavior::willBake(OZMotionToForcesBehavior *this)
{
  return OZObjectSimulator::willBake(*((_QWORD *)this + 43));
}

uint64_t OZMotionToForcesBehavior::didBake(OZMotionToForcesBehavior *this)
{
  return OZObjectSimulator::didBake(*((_QWORD *)this + 43));
}

uint64_t OZMotionToForcesBehavior::accumForces(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  char *TransformNode;
  _OWORD *v6;
  double v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  __n128 *v14;
  _OWORD *v15;
  uint64_t v16;
  CMTimeValue v17;
  uint64_t v18;
  CMTimeValue v19;
  double *v20;
  double v21;
  __double2 v22;
  double v23;
  __double2 v24;
  double v25;
  __double2 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CMTime *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  double *p_epoch;
  double v49;
  __double2 v50;
  double v51;
  __double2 v52;
  double v53;
  __double2 v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  const void *v63;
  void *v64;
  void *v65;
  char *v66;
  unint64_t v67;
  __n128 *v68;
  unint64_t i;
  int64_t *v70;
  int64_t v71;
  int64_t v72;
  unint64_t v73;
  uint64_t *v74;
  CMTime *p_time2;
  int v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  CMTime *v80;
  char *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  _QWORD *v109;
  double v111;
  double v112;
  CMTime v113;
  CMTime *p_time1;
  CMTime v115;
  CMTime v116;
  unsigned int v117;
  CMTime v118;
  CMTime v119;
  CMTime v120;
  __int128 v121;
  int64_t v122;
  __int16 v123;
  char v124;
  CMTime v125;
  CMTime v126;
  CMTime v127;
  CMTime v128;
  CMTime v129;
  CMTime v130;
  OZRenderState time1;
  _QWORD v132[3];
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  CMTime time2;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  _OWORD v144[3];
  __int128 v145;
  uint64_t v146;
  __n128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  double v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  memset(&v127, 0, sizeof(v127));
  TransformNode = (char *)OZSimulationBehavior::getTransformNode(this);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(TransformNode + 56), &v147);
  v6 = (_OWORD *)((char *)a2 + 176);
  *(_OWORD *)&time1.var0.var0 = *((_OWORD *)a2 + 11);
  time1.var0.var3 = *((_QWORD *)a2 + 24);
  *(__n128 *)&time2.value = v147;
  time2.epoch = v148;
  v7 = PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v127);
  memset(&v126, 0, sizeof(v126));
  v8 = (*(uint64_t (**)(OZTransformNode *, double))(*(_QWORD *)a3 + 272))(a3, v7);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v126);
  memset(&v125, 0, sizeof(v125));
  operator*(&v126, &v125, 0.5001);
  *(_OWORD *)&time1.var0.var0 = *((_OWORD *)a2 + 11);
  time1.var0.var3 = *((_QWORD *)a2 + 24);
  time2 = *(CMTime *)((_BYTE *)this + 22);
  v9 = (_OWORD *)((char *)this + 528);
  if (CMTimeCompare((CMTime *)&time1, &time2) < 1)
    goto LABEL_56;
  *(_OWORD *)&time1.var0.var0 = *v6;
  time1.var0.var3 = *((_QWORD *)a2 + 24);
  *(_OWORD *)&time2.value = *v9;
  time2.epoch = *((_QWORD *)this + 68);
  PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v147);
  *(__n128 *)&time1.var0.var0 = v147;
  time1.var0.var3 = v148;
  time2 = v125;
  result = CMTimeCompare((CMTime *)&time1, &time2);
  if ((result & 0x80000000) == 0)
  {
LABEL_56:
    *(_OWORD *)&time1.var0.var0 = *v6;
    time1.var0.var3 = *((_QWORD *)a2 + 24);
    *(_OWORD *)&time2.value = *v9;
    time2.epoch = *((_QWORD *)this + 68);
    result = CMTimeCompare((CMTime *)&time1, &time2);
    if ((int)result > 0)
      goto LABEL_57;
    *(_OWORD *)&time1.var0.var0 = *v9;
    time1.var0.var3 = *((_QWORD *)this + 68);
    *(_OWORD *)&time2.value = *v6;
    time2.epoch = *((_QWORD *)a2 + 24);
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)v144);
    *(_OWORD *)&time1.var0.var0 = v144[0];
    time1.var0.var3 = *(_QWORD *)&v144[1];
    time2 = v125;
    result = CMTimeCompare((CMTime *)&time1, &time2);
    if ((result & 0x80000000) == 0)
    {
LABEL_57:
      if (*((_BYTE *)this + 448) || *((_BYTE *)this + 552))
      {
        v11 = 0;
        v151 = 0.0;
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        v146 = 0;
        v145 = 0u;
        memset(v144, 0, sizeof(v144));
        do
        {
          v12 = (CMTimeValue *)((char *)&time2.value + v11);
          *v12 = 0x3FF0000000000000;
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = 0;
          v11 += 32;
        }
        while (v11 != 96);
        v124 = 0;
        v123 = 0;
        v121 = 0uLL;
        v122 = 0;
        v120 = v127;
        v119 = v126;
        PC_CMTimeFloorToSampleDuration(&v120, &v119, (uint64_t)&v121);
        memset(&v118, 0, sizeof(v118));
        *(_OWORD *)&time1.var0.var0 = v121;
        time1.var0.var3 = v122;
        v130 = v126;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &v130, (uint64_t)&v118);
        v117 = 3;
        v109 = OZSimulationBehavior::getTransformNode(this);
        if (*((_BYTE *)this + 448))
        {
          var0.var0 = (int64_t)(v109 + 169);
          *(_QWORD *)&var0.var1 = v109 + 188;
          var0.var3 = (int64_t)(v109 + 244);
          v132[0] = v109 + 280;
          v132[1] = v109 + 299;
          v132[2] = v109 + 318;
          v116 = v118;
          v115 = v126;
          p_time1 = (CMTime *)&time1;
          if ((OZMotionToForcesBehavior::findCachedValues((PCMutex *)this, (uint64_t)&v147, (uint64_t)&time2, (uint64_t)&v123, v117, &v116, &v115) & 1) != 0)
          {
            v113 = v118;
            if (v117)
            {
              v13 = 0;
              v14 = &v147;
              v15 = v144;
              do
              {
                if (!*((_BYTE *)&v123 + v13))
                {
                  v16 = 0;
                  v17 = (CMTimeValue)v14;
                  do
                  {
                    v130.value = v17;
                    LODWORD(v129.value) = 1;
                    OZChannel::getSamples(*(OZChannel **)((char *)&var0.var0 + v16), 0, &v113, &v126, (unsigned int *)&v129, &p_time1, (double **)&v130);
                    v16 += 8;
                    v17 += 24;
                  }
                  while (v16 != 24);
                  v18 = 0;
                  v19 = (CMTimeValue)v15;
                  do
                  {
                    v130.value = v19;
                    LODWORD(v129.value) = 1;
                    OZChannel::getSamples((OZChannel *)v132[v18++], 0, &v113, &v126, (unsigned int *)&v129, &p_time1, (double **)&v130);
                    v19 += 24;
                  }
                  while (v18 != 3);
                  v20 = (double *)v144 + v13;
                  v21 = v20[3];
                  v111 = v20[6];
                  v22 = __sincos_stret(*v20 * 0.5);
                  v23 = v22.__sinval * 0.0;
                  v24 = __sincos_stret(v21 * 0.5);
                  v25 = v24.__sinval * 0.0;
                  v26 = __sincos_stret(v111 * 0.5);
                  v27 = v22.__cosval * v24.__cosval - (v23 * v25 + v23 * v24.__sinval + v22.__sinval * v25);
                  v28 = v22.__sinval * v24.__cosval + v22.__cosval * v25 + v23 * v24.__sinval - v23 * v25;
                  v29 = v23 * v24.__cosval + v22.__cosval * v24.__sinval + v22.__sinval * v25 - v23 * v25;
                  v30 = v23 * v25 - v22.__sinval * v24.__sinval + v23 * v24.__cosval + v22.__cosval * v25;
                  v31 = v26.__sinval * 0.0 * v28;
                  v32 = v26.__sinval * 0.0 * v29;
                  v33 = v26.__sinval * 0.0 * v27;
                  v34 = v26.__sinval * 0.0 * v30;
                  v35 = (double *)(&time2.value + 4 * v13);
                  *v35 = v26.__cosval * v27 - (v26.__sinval * v30 + v31 + v32);
                  v35[1] = v26.__sinval * v29 - v34 + v26.__cosval * v28 + v33;
                  v35[2] = v34 - v26.__sinval * v28 + v26.__cosval * v29 + v33;
                  v35[3] = v31 - v32 + v26.__cosval * v30 + v26.__sinval * v27;
                }
                v129 = v113;
                v128 = v126;
                PC_CMTimeSaferAdd(&v129, &v128, (uint64_t)&v130);
                ++v13;
                v113 = v130;
                v14 = (__n128 *)((char *)v14 + 8);
                v15 = (_OWORD *)((char *)v15 + 8);
              }
              while (v13 < v117);
            }
          }
          else
          {
            v43 = 0;
            v44 = &v147;
            do
            {
              v130.value = (CMTimeValue)v44;
              OZChannel::getSamples(*(OZChannel **)((char *)&var0.var0 + v43), 0, &v118, &v126, &v117, &p_time1, (double **)&v130);
              v44 = (__n128 *)((char *)v44 + 24);
              v43 += 8;
            }
            while (v43 != 24);
            v45 = 0;
            v46 = v144;
            do
            {
              v130.value = (CMTimeValue)v46;
              OZChannel::getSamples((OZChannel *)v132[v45], 0, &v118, &v126, &v117, &p_time1, (double **)&v130);
              v46 = (_OWORD *)((char *)v46 + 24);
              ++v45;
            }
            while (v45 != 3);
            v47 = 0;
            p_epoch = (double *)&time2.epoch;
            do
            {
              v49 = *(double *)((char *)&v144[1] + v47 + 8);
              v112 = *(double *)((char *)&v145 + v47);
              v50 = __sincos_stret(*(double *)((char *)v144 + v47) * 0.5);
              v51 = v50.__sinval * 0.0;
              v52 = __sincos_stret(v49 * 0.5);
              v53 = v52.__sinval * 0.0;
              v54 = __sincos_stret(v112 * 0.5);
              v55 = v50.__cosval * v52.__cosval - (v51 * v53 + v51 * v52.__sinval + v50.__sinval * v53);
              v56 = v50.__sinval * v52.__cosval + v50.__cosval * v53 + v51 * v52.__sinval - v51 * v53;
              v57 = v51 * v52.__cosval + v50.__cosval * v52.__sinval + v50.__sinval * v53 - v51 * v53;
              v58 = v51 * v53 - v50.__sinval * v52.__sinval + v51 * v52.__cosval + v50.__cosval * v53;
              v59 = v54.__sinval * 0.0 * v56;
              v60 = v54.__sinval * 0.0 * v57;
              v61 = v54.__sinval * 0.0 * v55;
              v62 = v54.__sinval * 0.0 * v58;
              *(p_epoch - 2) = v54.__cosval * v55 - (v54.__sinval * v58 + v59 + v60);
              *(p_epoch - 1) = v54.__sinval * v57 - v62 + v54.__cosval * v56 + v61;
              *p_epoch = v62 - v54.__sinval * v56 + v54.__cosval * v57 + v61;
              p_epoch[1] = v59 - v60 + v54.__cosval * v58 + v54.__sinval * v55;
              p_epoch += 4;
              v47 += 8;
            }
            while (v47 != 24);
          }
        }
        else
        {
          v36 = 0;
          v37 = *((_QWORD *)this + 57);
          v38 = *((_QWORD *)this + 58);
          v39 = *((_QWORD *)this + 59);
          v40 = (CMTime *)((char *)this + 480);
          v41 = (_QWORD *)&v148 + 1;
          do
          {
            *(v41 - 3) = v37;
            *v41 = v38;
            v41[3] = v39;
            v42 = (char *)&time2 + v36;
            if ((CMTime *)((char *)&time2 + v36) != v40)
            {
              *(_QWORD *)v42 = v40->value;
              *(_OWORD *)(v42 + 8) = *(_OWORD *)((char *)this + 488);
              *((_QWORD *)v42 + 3) = *((_QWORD *)this + 63);
            }
            v36 += 32;
            ++v41;
          }
          while (v36 != 96);
        }
        v63 = (const void *)v109[120];
        if (v63)
        {
          if (v64)
          {
            v65 = v64;
            memset(&var0, 0, sizeof(var0));
            v66 = (char *)OZSimulationBehavior::getTransformNode(this);
            OZChannelObjectRootBase::getTimeOffset((__n128 *)(v66 + 56), (__n128 *)&v129);
            time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v118;
            v130 = v129;
            PC_CMTimeSaferAdd((CMTime *)&time1, &v130, (uint64_t)&var0);
            if (*((_BYTE *)this + 552))
            {
              OZRenderState::OZRenderState(&time1);
              if (v117)
              {
                v67 = 0;
                v68 = &v147;
                do
                {
                  if (!*((_BYTE *)&v123 + v67))
                  {
                    time1.var0 = var0;
                    time1.var8 = 0;
                    (*(void (**)(void *, __n128 *, uint64_t *, __n128 *, OZRenderState *))(*(_QWORD *)v65 + 1224))(v65, v68, &v68[1].n128_i64[1], v68 + 3, &time1);
                  }
                  v129 = (CMTime)var0;
                  v128 = v126;
                  PC_CMTimeSaferAdd(&v129, &v128, (uint64_t)&v130);
                  ++v67;
                  var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v130;
                  v68 = (__n128 *)((char *)v68 + 8);
                }
                while (v67 < v117);
              }
            }
            else if (v117)
            {
              for (i = 0; i < v117; ++i)
              {
                if (!*((_BYTE *)&v123 + i))
                {
                  v70 = &v147.n128_i64[i];
                  v71 = v70[3];
                  v72 = v70[6];
                  time1.var0.var0 = *v70;
                  *(_QWORD *)&time1.var0.var1 = v71;
                  time1.var0.var3 = v72;
                  PCMatrix44Tmpl<double>::transform<double>((double *)this + 70, (double *)&time1.var0.var0, (double *)&time1.var0.var0);
                  *v70 = time1.var0.var0;
                  v70[3] = *(_QWORD *)&time1.var0.var1;
                  v70[6] = time1.var0.var3;
                }
                v130 = (CMTime)var0;
                v129 = v126;
                PC_CMTimeSaferAdd(&v130, &v129, (uint64_t)&time1);
                var0 = time1.var0;
              }
            }
          }
        }
        PCMutex::lock((PCMutex *)this + 17);
        v129 = v118;
        if (v117)
        {
          v73 = 0;
          v74 = (uint64_t *)&v148 + 1;
          p_time2 = &time2;
          do
          {
            if (!*((_BYTE *)&v123 + v73))
            {
              v76 = *((_DWORD *)this + 304);
              *((_DWORD *)this + 304) = (v76 + 1) % 6;
              v77 = (char *)this + 88 * v76;
              *(CMTime *)(v77 + 688) = v129;
              v78 = *v74;
              v79 = v74[3];
              *((_QWORD *)v77 + 89) = *(v74 - 3);
              *((_QWORD *)v77 + 90) = v78;
              *((_QWORD *)v77 + 91) = v79;
              v80 = (CMTime *)(v77 + 736);
              if (p_time2 != v80)
              {
                v80->value = p_time2->value;
                v81 = (char *)this + 88 * v76;
                *((_QWORD *)v81 + 95) = p_time2[1].value;
                *(_OWORD *)(v81 + 744) = *(_OWORD *)&p_time2->timescale;
              }
              *((_BYTE *)this + 88 * v76 + 768) = 1;
            }
            time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v129;
            v130 = v126;
            PC_CMTimeSaferAdd((CMTime *)&time1, &v130, (uint64_t)&v129);
            ++v73;
            p_time2 = (CMTime *)((char *)p_time2 + 32);
            ++v74;
          }
          while (v73 < v117);
        }
        result = PCMutex::unlock((PCMutex *)this + 17);
        v82 = *((double *)this + 64);
        v83 = v82 * (v82 * (v151 - *((double *)&v150 + 1)) - v82 * (*((double *)&v150 + 1) - *(double *)&v150));
        v84 = v82
            * (v82 * (*((double *)&v149 + 1) - *(double *)&v149) - v82 * (*(double *)&v149 - *((double *)&v148 + 1)))
            + *((double *)a2 + 17);
        *((double *)a2 + 16) = *((double *)a2 + 16)
                             + v82
                             * (v82 * (*(double *)&v148 - v147.n128_f64[1]) - v82
                                                                            * (v147.n128_f64[1] - v147.n128_f64[0]));
        *((double *)a2 + 17) = v84;
        v85 = (v82 + v82) * (v136 - *(double *)&time2.value);
        v86 = (v82 + v82) * (v137 - *(double *)&time2.timescale);
        v87 = (v82 + v82) * (v138 - *(double *)&time2.epoch);
        v88 = (v82 + v82) * (v139 - v135);
        v89 = *(double *)&time2.value * v87 - v85 * *(double *)&time2.epoch;
        v90 = *(double *)&time2.value * v88 - v85 * v135;
        v91 = *(double *)&time2.timescale * v87 - *(double *)&time2.epoch * v86;
        v92 = *(double *)&time2.value * v86
            - *(double *)&time2.timescale * v85
            + *(double *)&time2.epoch * v88
            - v135 * v87;
        v93 = v89 + v86 * v135 - *(double *)&time2.timescale * v88;
        v94 = v91 + v90;
        v95 = (v82 + v82) * (v140 - v136);
        v96 = (v82 + v82) * (v141 - v137);
        v97 = (v82 + v82) * (v142 - v138);
        v98 = (v82 + v82) * (v143 - v139);
        v99 = v136 * v97 - v138 * v95;
        v100 = v136 * v98 - v139 * v95;
        v101 = v136 * v96 - v137 * v95 + v138 * v98 - v139 * v97;
        v102 = v99 + v139 * v96 - v137 * v98;
        v103 = v137 * v97 - v138 * v96 + v100;
        v104 = v103 * 0.0 + v101 + v102 * 0.0;
        v105 = v101 * 0.0;
        v106 = *((double *)a2 + 19) + v82 * (v104 - (v94 * 0.0 + v92 + v93 * 0.0));
        *((double *)a2 + 18) = v83 + *((double *)a2 + 18);
        *((double *)a2 + 19) = v106;
        v107 = *((double *)a2 + 20) + v82 * (v103 * 0.0 + v102 + v105 - (v94 * 0.0 + v93 + v92 * 0.0));
        v108 = *((double *)a2 + 21) + v82 * (v103 + v105 + v102 * 0.0 - (v94 + v92 * 0.0 + v93 * 0.0));
        *((double *)a2 + 20) = v107;
        *((double *)a2 + 21) = v108;
      }
    }
  }
  return result;
}

uint64_t OZMotionToForcesBehavior::findCachedValues(PCMutex *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, CMTime *a6, CMTime *a7)
{
  char v14;
  uint64_t v15;
  char *v16;
  CMTime *v17;
  uint64_t SampleNumber;
  char *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  PCMutex *v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime time2;
  CMTime time1;

  v25 = a1 + 17;
  PCMutex::lock(a1 + 17);
  v14 = 0;
  v15 = -528;
  do
  {
    v16 = (char *)a1 + v15;
    if (*((_BYTE *)&a1[18]._vptr$PCMutex + v15))
    {
      v17 = (CMTime *)(v16 + 1216);
      time1 = *a6;
      time2 = *(CMTime *)(v16 + 1216);
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        memset(&v28, 0, sizeof(v28));
        time1 = *v17;
        time2 = *a6;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        v27 = v28;
        v26 = *a7;
        SampleNumber = PC_CMTimeGetSampleNumber(&v27, &v26);
        if (SampleNumber < a5)
        {
          v19 = (char *)a1 + v15;
          v20 = (_QWORD *)(a2 + 8 * SampleNumber);
          *v20 = *(_QWORD *)&a1[17]._Mutex.__opaque[v15];
          v20[3] = *(_QWORD *)&a1[17]._Mutex.__opaque[v15 + 8];
          v20[6] = *(_QWORD *)&a1[17]._Mutex.__opaque[v15 + 16];
          v21 = &a1[17]._Mutex.__opaque[v15 + 24];
          v22 = a3 + 32 * SampleNumber;
          if (v21 != (char *)v22)
          {
            *(_QWORD *)v22 = *(_QWORD *)v21;
            v23 = *(_OWORD *)(v19 + 1272);
            *(_QWORD *)(v22 + 24) = *((_QWORD *)v19 + 161);
            *(_OWORD *)(v22 + 8) = v23;
          }
          v14 = 1;
          *(_BYTE *)(a4 + SampleNumber) = 1;
        }
      }
    }
    v15 += 88;
  }
  while (v15);
  PCMutex::unlock(v25);
  return v14 & 1;
}

void OZMotionToForcesBehavior::accumInitialValuesHelper(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3, int a4)
{
  char *TransformNode;
  double v9;
  uint64_t v10;
  CMTimeEpoch v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  __n128 *v17;
  double v18;
  __double2 v19;
  double v20;
  __double2 v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  __double2 v38;
  __double2 v39;
  __double2 v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  void *v44;
  void *v45;
  char *v46;
  unint64_t v47;
  __n128 *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double *v52;
  float64x2_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v102;
  CMTime *v103;
  unsigned int v104;
  CMTime v105;
  CMTime v106;
  CMTime v107;
  CMTime v108;
  __int128 v109;
  CMTimeEpoch v110;
  __int128 v111;
  CMTimeEpoch v112;
  int v113;
  uint64_t v114;
  char v115;
  CMTime v116;
  CMTime v117;
  unsigned int v118;
  __n128 *v119;
  char v120;
  CMTime v121;
  CMTime v122;
  CMTime v123;
  CMTime v124;
  CMTime v125;
  OZRenderState v126;
  char v127;
  _QWORD v128[3];
  _QWORD v129[3];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __n128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  memset(&v122, 0, sizeof(v122));
  TransformNode = (char *)OZSimulationBehavior::getTransformNode(this);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(TransformNode + 56), &v133);
  *(_OWORD *)&v126.var0.var0 = *((_OWORD *)a2 + 11);
  v126.var0.var3 = *((_QWORD *)a2 + 24);
  *(__n128 *)&v108.value = v133;
  v108.epoch = v134;
  v9 = PC_CMTimeSaferSubtract((CMTime *)&v126, &v108, (uint64_t)&v122);
  memset(&v121, 0, sizeof(v121));
  v10 = (*(uint64_t (**)(OZTransformNode *, double))(*(_QWORD *)a3 + 272))(a3, v9);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v121);
  LOWORD(v108.value) = 1;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v109 = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_QWORD *)&v108.timescale = 0;
  v110 = v11;
  v111 = v109;
  v112 = v11;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  *(_OWORD *)&v116.value = v109;
  *(_OWORD *)&v117.value = v109;
  v116.epoch = v11;
  v117.epoch = v11;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  memset(&v107, 0, sizeof(v107));
  v106 = v122;
  v105 = v121;
  PC_CMTimeFloorToSampleDuration(&v106, &v105, (uint64_t)&v107);
  if (a4)
    v12 = 2;
  else
    v12 = 1;
  v104 = v12;
  v116 = v107;
  v118 = v12;
  v117 = v121;
  v13 = OZSimulationBehavior::getTransformNode(this);
  v14 = 0;
  v129[0] = v13 + 169;
  v129[1] = v13 + 188;
  v129[2] = v13 + 244;
  v128[0] = v13 + 280;
  v128[1] = v13 + 299;
  v128[2] = v13 + 318;
  v15 = &v133;
  v103 = (CMTime *)&v127;
  do
  {
    v126.var0.var0 = (int64_t)v15;
    v119 = v15;
    OZChannel::getSamples((OZChannel *)v129[v14++], 0, &v107, &v121, &v104, &v103, (double **)&v126);
    ++v15;
  }
  while (v14 != 3);
  v16 = 0;
  v17 = (__n128 *)&v130;
  do
  {
    v126.var0.var0 = (int64_t)v17;
    v119 = v17;
    OZChannel::getSamples((OZChannel *)v128[v16++], 0, &v107, &v121, &v104, &v103, (double **)&v126);
    ++v17;
  }
  while (v16 != 3);
  v18 = *(double *)&v131;
  v101 = *(double *)&v132;
  v19 = __sincos_stret(*(double *)&v130 * 0.5);
  v20 = v19.__sinval * 0.0;
  v21 = __sincos_stret(v18 * 0.5);
  v22 = v21.__sinval * 0.0;
  v23 = __sincos_stret(v101 * 0.5);
  v24 = v19.__cosval * v21.__cosval - (v20 * v22 + v20 * v21.__sinval + v19.__sinval * v22);
  v25 = v19.__sinval * v21.__cosval + v19.__cosval * v22 + v20 * v21.__sinval - v20 * v22;
  v26 = v20 * v21.__cosval + v19.__cosval * v21.__sinval + v19.__sinval * v22 - v20 * v22;
  v27 = v20 * v22 - v19.__sinval * v21.__sinval + v20 * v21.__cosval + v19.__cosval * v22;
  v28 = v23.__sinval * 0.0 * v25;
  v29 = v23.__sinval * 0.0 * v26;
  v30 = v23.__cosval * v24 - (v23.__sinval * v27 + v28 + v29);
  v31 = v23.__sinval * 0.0 * v24;
  v32 = v23.__sinval * 0.0 * v27;
  v33 = v23.__sinval * v26 - v32 + v23.__cosval * v25 + v31;
  v34 = v32 - v23.__sinval * v25 + v23.__cosval * v26 + v31;
  v35 = v28 - v29 + v23.__cosval * v27 + v23.__sinval * v24;
  v36 = *((double *)&v131 + 1);
  v37 = *((double *)&v132 + 1);
  v38 = __sincos_stret(*((double *)&v130 + 1) * 0.5);
  v39 = __sincos_stret(v36 * 0.5);
  v40 = __sincos_stret(v37 * 0.5);
  if (!*((_BYTE *)this + 448))
  {
    v41 = v134;
    v42 = v135;
    *((_QWORD *)this + 57) = v133.n128_u64[0];
    *((_QWORD *)this + 58) = v41;
    *((_QWORD *)this + 59) = v42;
    *((double *)this + 60) = v30;
    *((double *)this + 61) = v33;
    *((double *)this + 62) = v34;
    *((double *)this + 63) = v35;
  }
  v43 = (const void *)v13[120];
  if (v43)
  {
    if (v44)
    {
      v45 = v44;
      OZRenderState::OZRenderState(&v126);
      memset(&v102, 0, sizeof(v102));
      v46 = (char *)OZSimulationBehavior::getTransformNode(this);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)(v46 + 56), (__n128 *)&v123);
      v125 = v107;
      v124 = v123;
      PC_CMTimeSaferAdd(&v125, &v124, (uint64_t)&v102);
      if (v104)
      {
        v47 = 0;
        v48 = &v133;
        do
        {
          v126.var0 = v102;
          v126.var8 = 0;
          (*(void (**)(void *, __n128 *, __n128 *, __n128 *, OZRenderState *))(*(_QWORD *)v45 + 1224))(v45, v48, v48 + 1, v48 + 2, &v126);
          v124 = (CMTime)v102;
          v123 = v121;
          PC_CMTimeSaferAdd(&v124, &v123, (uint64_t)&v125);
          v102 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v125;
          ++v47;
          v48 = (__n128 *)((char *)v48 + 8);
        }
        while (v47 < v104);
      }
    }
  }
  v49 = (*(uint64_t (**)(OZMotionToForcesBehavior *))(*(_QWORD *)this + 336))(this);
  if (v49)
  {
    v50 = *(double *)(v49 + 368);
    if (a4)
      goto LABEL_17;
LABEL_21:
    v53 = 0uLL;
    v54 = 0.0;
    goto LABEL_22;
  }
  v50 = 30.0;
  if (!a4)
    goto LABEL_21;
LABEL_17:
  v51 = 0;
  v52 = &v133.n128_f64[1];
  do
  {
    *(double *)((char *)&v126.var0.var0 + v51) = v50 * (*v52 - *(v52 - 1));
    v51 += 8;
    v52 += 2;
  }
  while (v51 != 24);
  v53 = *(float64x2_t *)&v126.var0.var0;
  v54 = *(double *)&v126.var0.var3;
LABEL_22:
  v55 = v134;
  v56 = v135;
  *(_QWORD *)a2 = v133.n128_u64[0];
  *((_QWORD *)a2 + 1) = v55;
  v57 = *((double *)a2 + 9) + v54;
  *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), v53);
  *((double *)a2 + 9) = v57;
  *((_QWORD *)a2 + 2) = v56;
  *((double *)a2 + 3) = v30;
  *((double *)a2 + 4) = v33;
  *((double *)a2 + 5) = v34;
  *((double *)a2 + 6) = v35;
  if (a4)
  {
    v58 = v38.__sinval * (v39.__sinval * 0.0);
    v59 = v38.__sinval * 0.0 * v39.__sinval;
    v60 = v38.__sinval * 0.0 * (v39.__sinval * 0.0);
    v61 = v38.__sinval * 0.0 * v39.__cosval;
    v62 = v38.__cosval * (v39.__sinval * 0.0);
    v63 = v59 + v58;
    v64 = v38.__sinval * v39.__cosval + v62;
    v65 = v61 + v38.__cosval * v39.__sinval;
    v66 = v61 + v62;
    v67 = v60 - v38.__sinval * v39.__sinval;
    v68 = v64 + v59 - v60;
    v69 = v65 + v58 - v60;
    v70 = v38.__cosval * v39.__cosval - (v60 + v63);
    v71 = v67 + v66;
    v72 = v40.__sinval * 0.0 * v68;
    v73 = v40.__sinval * 0.0 * v69;
    v74 = v40.__sinval * v71;
    v75 = v40.__sinval * 0.0 * v70;
    v76 = v40.__cosval * v71;
    v77 = v40.__sinval * 0.0 * v71;
    v78 = v74 + v72 + v73;
    v79 = v40.__cosval * v68 + v75;
    v80 = v40.__cosval * v69 + v75;
    v81 = v40.__sinval * v69 - v77;
    v82 = v77 - v40.__sinval * v68;
    v83 = v50 + v50;
    v84 = v83 * (v40.__cosval * v70 - v78 - v30);
    v85 = v83 * (v81 + v79 - v33);
    v86 = v83 * (v82 + v80 - v34);
    v87 = v83 * (v72 - v73 + v76 + v40.__sinval * v70 - v35);
    v88 = v30 * v85 - v33 * v84;
    v89 = v30 * v86 - v34 * v84;
    v90 = v30 * v87 - v84 * v35;
    v91 = v88 + v34 * v87 - v35 * v86;
    v92 = v89 + v35 * v85 - v33 * v87;
    v93 = v33 * v86 - v34 * v85 + v90;
    v94 = *((double *)a2 + 11) + v92;
    *((double *)a2 + 10) = *((double *)a2 + 10) + v91;
    *((double *)a2 + 11) = v94;
    v95 = *((double *)a2 + 13);
    v96 = v92 * 0.0;
    v97 = v93 * 0.0 + v91 + v92 * 0.0;
    v98 = v91 * 0.0;
    v99 = v93 * 0.0 + v92 + v98;
    *((double *)a2 + 12) = v93 + *((double *)a2 + 12);
    *((double *)a2 + 13) = v95 + v97;
    v100 = v93 + v98 + v96 + *((double *)a2 + 15);
    *((double *)a2 + 14) = v99 + *((double *)a2 + 14);
    *((double *)a2 + 15) = v100;
  }
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v108);
}

void sub_1B2EF64C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&a29);
  _Unwind_Resume(a1);
}

__n128 OZMotionToForcesBehavior::accumInitialValues(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  __int128 v3;
  __n128 result;

  v3 = *((_OWORD *)a2 + 11);
  *((_QWORD *)this + 68) = *((_QWORD *)a2 + 24);
  *((_OWORD *)this + 33) = v3;
  OZMotionToForcesBehavior::accumInitialValuesHelper(this, a2, a3, 1);
  return result;
}

void OZMotionToForcesBehavior::getInitialPosition(OZMotionToForcesBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  OZMotionToForcesBehavior::accumInitialValuesHelper(this, a2, a3, 0);
}

_QWORD *OZMotionToForcesBehavior::updateCache(OZMotionToForcesBehavior *this)
{
  _QWORD *result;
  _QWORD *v3;
  OZRigWidget *v4;
  uint64_t IsChannelRigged;
  const OZChannelBase *v6;
  const OZChannelBase *v7;
  OZSceneNode *v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t i;
  OZRenderState v13;

  *((_BYTE *)this + 448) = 1;
  *((_BYTE *)this + 552) = 1;
  result = (_QWORD *)(*(uint64_t (**)(OZMotionToForcesBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
  {
    *((_QWORD *)this + 64) = result[46];
    *((_QWORD *)this + 65) = result[48];
    result = OZSimulationBehavior::getTransformNode(this);
    if (result)
    {
      v3 = result;
      v4 = (OZRigWidget *)(result + 152);
      IsChannelRigged = (*(uint64_t (**)(_QWORD *))(result[152] + 560))(result + 152);
      if ((IsChannelRigged & 1) == 0)
      {
        IsChannelRigged = (*(uint64_t (**)(_QWORD *))(v3[263] + 560))(v3 + 263);
        if ((IsChannelRigged & 1) == 0)
        {
          IsChannelRigged = OZRigWidget::IsChannelRigged(v4, v6);
          if ((IsChannelRigged & 1) == 0)
          {
            IsChannelRigged = OZRigWidget::IsChannelRigged((OZRigWidget *)(v3 + 263), v7);
            if ((IsChannelRigged & 1) == 0)
              *((_BYTE *)this + 448) = 0;
          }
        }
      }
      v8 = (OZSceneNode *)v3;
      while (v8)
      {
        v8 = (OZSceneNode *)*((_QWORD *)v8 + 120);
        IsChannelRigged = OZMotionToForcesBehavior::isSceneNodeAnimated((OZMotionToForcesBehavior *)IsChannelRigged, v8);
        if ((_DWORD)IsChannelRigged)
        {
          *((_BYTE *)this + 552) = 1;
          goto LABEL_15;
        }
      }
      *((_BYTE *)this + 552) = 0;
      OZRenderState::OZRenderState(&v13);
      v13.var8 = 0;
      v9 = (const void *)v3[120];
      *((_QWORD *)this + 85) = 0x3FF0000000000000;
      *((_QWORD *)this + 80) = 0x3FF0000000000000;
      *((_QWORD *)this + 75) = 0x3FF0000000000000;
      *((_QWORD *)this + 70) = 0x3FF0000000000000;
      *(_OWORD *)((char *)this + 584) = 0u;
      *(_OWORD *)((char *)this + 568) = 0u;
      *((_OWORD *)this + 38) = 0u;
      *((_OWORD *)this + 39) = 0u;
      *(_OWORD *)((char *)this + 664) = 0u;
      *(_OWORD *)((char *)this + 648) = 0u;
      if (v9)
      {
        if (v10)
          (*(void (**)(void *, char *, OZRenderState *))(*(_QWORD *)v10 + 1256))(v10, (char *)this + 560, &v13);
      }
LABEL_15:
      v11 = MEMORY[0x1E0CA2E68];
      *((_OWORD *)this + 33) = *MEMORY[0x1E0CA2E68];
      *((_QWORD *)this + 68) = *(_QWORD *)(v11 + 16);
      PCMutex::lock((PCMutex *)this + 17);
      for (i = 0; i != 528; i += 88)
        *((_BYTE *)this + i + 768) = 0;
      *((_DWORD *)this + 304) = 0;
      return (_QWORD *)PCMutex::unlock((PCMutex *)this + 17);
    }
  }
  return result;
}

void OZMotionToForcesBehavior::getSimState(OZObjectSimulator **this, CMTime *a2, CMTime *a3)
{
  OZObjectSimulator::getState(this[43], a2, a3);
}

void `non-virtual thunk to'OZMotionToForcesBehavior::getSimState(OZObjectSimulator **this, CMTime *a2, CMTime *a3)
{
  OZObjectSimulator::getState(this[1], a2, a3);
}

uint64_t OZMotionToForcesBehavior::isSceneNodeAnimated(OZMotionToForcesBehavior *this, OZSceneNode *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (!lpsrc)
    return 0;
  if (!v2)
    return 0;
  v3 = v2;
  if (((*(uint64_t (**)(_QWORD *))(v2[152] + 560))(v2 + 152) & 1) != 0
    || ((*(uint64_t (**)(_QWORD *))(v3[318] + 560))(v3 + 318) & 1) != 0
    || ((*(uint64_t (**)(_QWORD *))(v3[555] + 560))(v3 + 555) & 1) != 0
    || ((*(uint64_t (**)(_QWORD *))(v3[629] + 560))(v3 + 629) & 1) != 0)
  {
    return 1;
  }
  v4 = 1;
  if ((OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 169), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 188), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 318), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 572), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 591), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 610), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 646), (const OZChannelBase *)1) & 1) != 0)
  {
    return v4;
  }
  return OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 665), (const OZChannelBase *)1);
}

double OZSimulationState::stepFrom(OZSimulationState *this, OZSimulationState *a2, CMTime *a3, double a4)
{
  return OZSimulationState::stepFrom((uint64_t)this, (uint64_t)a2, (uint64_t)a2, a3, a4);
}

double OZSimulationState::stepFrom(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4, double a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  __int128 v30;
  uint64_t v31;
  CMTime v32;
  CMTime v33;

  v6 = *(double *)(a3 + 72) * a5 + *(double *)(a2 + 16);
  *(float64x2_t *)a1 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 56), a5), *(float64x2_t *)a2);
  *(double *)(a1 + 16) = v6;
  v7 = *(double *)(a3 + 144) * a5 + *(double *)(a2 + 72);
  *(float64x2_t *)(a1 + 56) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 128), a5), *(float64x2_t *)(a2 + 56));
  *(double *)(a1 + 72) = v7;
  v8 = a5 * 0.5 * 0.125;
  v9 = v8 * 0.0;
  v10 = v8 * *(double *)(a3 + 80);
  v11 = v8 * *(double *)(a3 + 88);
  v12 = v8 * *(double *)(a3 + 96);
  v13 = *(double *)(a2 + 24);
  v14 = *(double *)(a2 + 32);
  v15 = *(double *)(a2 + 40);
  v16 = *(double *)(a2 + 48);
  v17 = 8;
  do
  {
    v18 = v10 * v13 + v9 * v14 + v11 * v16 - v12 * v15;
    v19 = v11 * v13 + v9 * v15 + v12 * v14 - v10 * v16;
    v20 = v10 * v15 - v11 * v14 + v12 * v13 + v9 * v16;
    v21 = v13 + v9 * v13 - (v10 * v14 + v11 * v15 + v12 * v16);
    v22 = v14 + v18;
    v23 = v15 + v19;
    v24 = v16 + v20;
    v25 = sqrt(v21 * v21 + v24 * v24 + v22 * v22 + v23 * v23);
    if (v25 == 0.0)
    {
      v13 = 1.0;
      v14 = 0.0;
      v15 = 0.0;
      v16 = 0.0;
    }
    else
    {
      v13 = v21 / v25;
      v14 = v22 / v25;
      v15 = v23 / v25;
      v16 = v24 / v25;
    }
    --v17;
  }
  while (v17);
  *(double *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = v14;
  *(double *)(a1 + 40) = v15;
  *(double *)(a1 + 48) = v16;
  v26 = *(double *)(a3 + 168) * a5 + *(double *)(a2 + 120);
  *(float64x2_t *)(a1 + 104) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 152), a5), *(float64x2_t *)(a2 + 104));
  *(double *)(a1 + 120) = v26;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 120);
  v27 = *(_QWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a3 + 128);
  *(_QWORD *)(a1 + 144) = v27;
  v28 = *(_QWORD *)(a3 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a3 + 152);
  *(_QWORD *)(a1 + 168) = v28;
  v33 = *(CMTime *)(a2 + 176);
  v32 = *a4;
  PC_CMTimeSaferAdd(&v33, &v32, (uint64_t)&v30);
  result = *(double *)&v30;
  *(_OWORD *)(a1 + 176) = v30;
  *(_QWORD *)(a1 + 192) = v31;
  return result;
}

void *OZSimulationState::GetCommonGroup(OZSimulationState *this, OZTransformNode *a2, OZTransformNode *a3)
{
  OZSceneNode *CommonAncestor;

  if (this && a2 && (CommonAncestor = OZSceneNode::getCommonAncestor(this, (OZSceneNode *)a2, 1)) != 0)
  else
    return 0;
}

void *OZSimulationState::TransformToWorld(uint64_t a1, uint64_t a2, OZSimulationState *a3, uint64_t a4)
{
  void *result;
  void *v9;
  OZTransformNode *v10;
  OZTransformNode *CommonGroup;
  OZTransformNode *v12;
  char v13;
  OZRenderState v14;

  result = *(void **)(a2 + 960);
  if (result)
  {
    if (result)
    {
      v9 = result;
      OZRenderState::OZRenderState(&v14);
      *(_OWORD *)&v14.var0.var0 = *(_OWORD *)a1;
      v14.var0.var3 = *(_QWORD *)(a1 + 16);
      if (a3)
      {
        CommonGroup = (OZTransformNode *)OZSimulationState::GetCommonGroup(a3, (OZTransformNode *)a2, v10);
        v12 = CommonGroup;
        if (CommonGroup)
        {
          v13 = 0;
          v14.var3 = (*(double (**)(OZTransformNode *))(*(_QWORD *)CommonGroup + 1328))(CommonGroup);
          goto LABEL_8;
        }
      }
      else
      {
        v12 = 0;
      }
      v13 = 1;
LABEL_8:
      v14.var5 = v12;
      result = (void *)(*(uint64_t (**)(void *, uint64_t, OZRenderState *))(*(_QWORD *)v9 + 1232))(v9, a4, &v14);
      if ((v13 & 1) == 0)
      {
        v14.var3 = 1.0;
        v14.var5 = 0;
        v14.var8 = 0;
        return (void *)(*(uint64_t (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(_QWORD *)v12 + 1232))(v12, a4, &v14);
      }
    }
  }
  return result;
}

void *OZSimulationState::GetNodePosition(CMTime *a1, uint64_t a2, OZSimulationState *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  __n128 v19;
  CMTimeEpoch v20;
  CMTime v21;
  CMTime v22;

  v19 = 0uLL;
  v20 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v19);
  memset(&v18, 0, sizeof(v18));
  v16 = *a1;
  *(__n128 *)&v15.value = v19;
  v15.epoch = v20;
  PC_CMTimeFloorToSampleDuration(&v16, &v15, (uint64_t)&v17);
  v22 = v17;
  *(__n128 *)&v21.value = v19;
  v21.epoch = v20;
  PC_CMTimeSaferSubtract(&v22, &v21, (uint64_t)&v18);
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 1352), &v18, 0.0);
  v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 1504), &v18, 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 1952), &v18, 0.0);
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v13;
  return OZSimulationState::TransformToWorld((uint64_t)&v18, a2, a3, (uint64_t)a4);
}

void *OZSimulationState::getNodePosition(uint64_t a1, CMTime *a2, uint64_t a3, OZSimulationState *a4, _QWORD *a5)
{
  return OZSimulationState::GetNodePosition(a2, a3, a4, a5);
}

double OZSimulationState::getTransformedCorners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v12;
  double v13;
  double v14;
  const void *v15;
  void *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t i;
  _OWORD *v33;
  __int128 v34;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double result;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[40];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v58[40];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  double v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  OZRenderState v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64_t v81;
  double v82;
  double v83;
  double v84;

  v83 = 0.0;
  v84 = 0.0;
  v81 = 0.0;
  v82 = 0.0;
  v79 = 0.0;
  v80 = 0.0;
  v77 = 0.0;
  v78 = 0.0;
  v13 = *(double *)a1;
  v12 = *(double *)(a1 + 8);
  v14 = *(double *)(a1 + 16);
  OZRenderState::OZRenderState(&v76);
  *(_OWORD *)&v76.var0.var0 = *(_OWORD *)(a1 + 176);
  v76.var0.var3 = *(_QWORD *)(a1 + 192);
  v76.var8 = 0;
  (*(void (**)(uint64_t, double *, double *, double *, OZRenderState *, _QWORD))(*(_QWORD *)a2 + 1312))(a2, &v84, &v83, &v82, &v76, 0);
  OZTransformNode::getShear((OZTransformNode *)a2, &v81, &v80, (const CMTime *)(a1 + 176));
  OZTransformNode::getPivot((OZTransformNode *)a2, &v79, &v78, &v77, (const CMTime *)(a1 + 176));
  v75 = 0x3FF0000000000000;
  v72 = 0x3FF0000000000000;
  v69 = 0x3FF0000000000000;
  v66 = 1.0;
  v67 = 0u;
  v68 = 0u;
  v70 = 0u;
  v71 = 0u;
  v73 = 0u;
  v74 = 0u;
  v15 = *(const void **)(a2 + 960);
  if (v15)
  else
    v16 = 0;
  v17 = *(double *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) + 384);
  if (v16)
  {
    v18 = (*(double (**)(void *))(*(_QWORD *)v16 + 1328))(v16);
    v76.var3 = v17;
    v17 = v18;
  }
  if (v17 == 0.0)
    v17 = 1.0;
  v24 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 1328))(a2);
  v25 = v84 * (v24 / v17);
  v84 = v25;
  if (v16)
  {
    v65 = 0x3FF0000000000000;
    v62 = 0x3FF0000000000000;
    v59 = 0x3FF0000000000000;
    v57 = 0x3FF0000000000000;
    *(_QWORD *)v58 = 0x3FF0000000000000;
    memset(&v58[8], 0, 32);
    v60 = 0u;
    v61 = 0u;
    v63 = 0u;
    v64 = 0u;
    v54 = 0x3FF0000000000000;
    v51 = 0x3FF0000000000000;
    *(_QWORD *)v50 = 0x3FF0000000000000;
    memset(&v50[8], 0, 32);
    v52 = 0u;
    v53 = 0u;
    v55 = 0u;
    v56 = 0u;
    (*(void (**)(void *, _BYTE *, OZRenderState *))(*(_QWORD *)v16 + 1264))(v16, v50, &v76);
    *(double *)&v48 = v13;
    *((double *)&v48 + 1) = v12;
    *(double *)&v49 = v14;
    *((_QWORD *)&v49 + 1) = 0x3FF0000000000000;
    PCMatrix44Tmpl<double>::transform<double>((double *)v50, (double *)&v48, (double *)&v48);
    v31 = PCMatrix44Tmpl<double>::setTransformation((uint64_t)&v66, (double *)(a1 + 24), 0, *(double *)&v48, *((double *)&v48 + 1), *(double *)&v49, v84, v83, v82, v81, v80, v26, v27, v28, v29, v30, v79, v78, v77,
            *(uint64_t *)&v17);
    (*(void (**)(void *, _BYTE *, OZRenderState *, double))(*(_QWORD *)v16 + 1256))(v16, v58, &v76, v31);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v58, (__int128 *)&v66, (uint64_t)&v46);
    for (i = 0; i != 128; i += 32)
    {
      v33 = (_OWORD *)((char *)&v66 + i);
      v34 = *(__int128 *)((char *)&v46 + i + 16);
      *v33 = *(__int128 *)((char *)&v46 + i);
      v33[1] = v34;
    }
  }
  else
  {
    PCMatrix44Tmpl<double>::setTransformation((uint64_t)&v66, (double *)(a1 + 24), 0, v13, v12, v14, v25, v83, v82, v81, v80, v19, v20, v21, v22, v23, v79, v78, v77,
      *(uint64_t *)&v17);
  }
  *(_OWORD *)v58 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v58[16] = _Q0;
  (*(void (**)(uint64_t, _BYTE *, OZRenderState *))(*(_QWORD *)a2 + 1488))(a2, v58, &v76);
  *(_QWORD *)v50 = *(_QWORD *)v58;
  *(double *)&v50[8] = *(double *)&v58[8] + *(double *)&v58[24];
  *(_OWORD *)&v50[16] = xmmword_1B304EEE0;
  *(double *)&v46 = *(double *)v58 + *(double *)&v58[16];
  *((double *)&v46 + 1) = *(double *)&v58[8] + *(double *)&v58[24];
  v47 = xmmword_1B304EEE0;
  v48 = *(_OWORD *)v58;
  v49 = xmmword_1B304EEE0;
  *(double *)&v44 = *(double *)v58 + *(double *)&v58[16];
  *((_QWORD *)&v44 + 1) = *(_QWORD *)&v58[8];
  v45 = xmmword_1B304EEE0;
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)v50, (double *)v50);
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)&v46, (double *)&v46);
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)&v48, (double *)&v48);
  PCMatrix44Tmpl<double>::transform<double>(&v66, (double *)&v44, (double *)&v44);
  v40 = *(_QWORD *)&v50[16];
  *(_OWORD *)a3 = *(_OWORD *)v50;
  *(_QWORD *)(a3 + 16) = v40;
  v41 = v47;
  *(_OWORD *)a4 = v46;
  *(_QWORD *)(a4 + 16) = v41;
  v42 = v45;
  *(_OWORD *)a5 = v44;
  *(_QWORD *)(a5 + 16) = v42;
  result = *(double *)&v49;
  *(_OWORD *)a6 = v48;
  *(double *)(a6 + 16) = result;
  return result;
}

double PCMatrix44Tmpl<double>::setTransformation(uint64_t a1, double *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, float64_t a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, double a17, double a18, double a19, uint64_t a20)
{
  uint64_t v26;
  double v27;
  double v28;
  double v29;

  v27 = a19;
  v26 = a20;
  v29 = a17;
  v28 = a18;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  switch(a3)
  {
    case 0:
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      goto LABEL_5;
    case 1:
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      goto LABEL_8;
    case 2:
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
LABEL_5:
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      goto LABEL_11;
    case 3:
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      goto LABEL_10;
    case 4:
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
LABEL_8:
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
      goto LABEL_11;
    case 5:
      PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a10, a11);
      PCMatrix44Tmpl<double>::rightScale((double *)a1, a7, a8, a9);
      PCMatrix44Tmpl<double>::rightRotate(a1, a2);
LABEL_10:
      PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
LABEL_11:
      v28 = a18;
      v27 = a19;
      v29 = a17;
      v26 = a20;
      break;
    default:
      break;
  }
  *(double *)(a1 + 32) = *(double *)(a1 + 32) * *(double *)&v26;
  *(double *)(a1 + 64) = *(double *)(a1 + 64) * *(double *)&v26;
  *(float64x2_t *)(a1 + 8) = vdivq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vdupq_lane_s64(v26, 0));
  return PCMatrix44Tmpl<double>::rightTranslate((double *)a1, -v29, -v28, -v27);
}

__n128 OZSimulationState::initializeState(__n128 *this, const CMTime *a2)
{
  __n128 result;

  this->n128_u64[0] = 0;
  this->n128_u64[1] = 0;
  this[1].n128_u64[0] = 0;
  this[1].n128_u64[1] = 0x3FF0000000000000;
  this[2] = 0u;
  this[3] = 0u;
  this[4] = 0u;
  this[5] = 0u;
  this[6] = 0u;
  this[7] = 0u;
  this[8] = 0u;
  this[9] = 0u;
  this[10] = 0u;
  result = *(__n128 *)&a2->value;
  this[12].n128_u64[0] = a2->epoch;
  this[11] = result;
  return result;
}

void OZRetimingBehavior::OZRetimingBehavior(OZRetimingBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E65B1420;
  *(_QWORD *)(v4 + 16) = &unk_1E65B1710;
  *(_QWORD *)(v4 + 48) = &unk_1E65B1968;
  *(_QWORD *)(v4 + 336) = &unk_1E65B19C0;
  *(_QWORD *)(v4 + 536) = &unk_1E65B19E8;
  *(_BYTE *)(v4 + 544) = 0;
  v5 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v4 + 548) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(v4 + 564) = *(_QWORD *)(v5 + 16);
}

void OZRetimingBehavior::OZRetimingBehavior(OZRetimingBehavior *this, const OZRetimingBehavior *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v3 = &off_1E65B1420;
  *(_QWORD *)(v3 + 16) = &unk_1E65B1710;
  *(_QWORD *)(v3 + 48) = &unk_1E65B1968;
  *(_QWORD *)(v3 + 336) = &unk_1E65B19C0;
  *(_QWORD *)(v3 + 536) = &unk_1E65B19E8;
  *(_BYTE *)(v3 + 544) = 0;
  v4 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v3 + 548) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(v3 + 564) = *(_QWORD *)(v4 + 16);
}

void `non-virtual thunk to'OZRetimingBehavior::~OZRetimingBehavior(OZRetimingBehavior *this)
{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 16));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 48));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 336));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 536));
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBehavior::~OZChannelBehavior((OZRetimingBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

void OZRetimingBehavior::~OZRetimingBehavior(OZRetimingBehavior *this)
{
  OZChannelBehavior::~OZChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

double OZRetimingBehavior::addRetimingNode(OZRetimingBehavior *this, OZSceneNode *a2)
{
  OZRetimingUtil *v4;
  OZChannelObjectRoot *v5;
  uint64_t RetimeFrameChannel;
  double result;
  OZChannel *v8;
  OZSingleChanCurveNode *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;

  v4 = (OZRetimingUtil *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  RetimeFrameChannel = OZRetimingUtil::GetRetimeFrameChannel(v4, v5);
  if (RetimeFrameChannel)
  {
    v8 = (OZChannel *)RetimeFrameChannel;
    v9 = (OZSingleChanCurveNode *)operator new();
    OZSingleChanCurveNode::OZSingleChanCurveNode(v9, (OZRetimingBehavior *)((char *)this + 536), v8);
    OZChannel::appendCurveProcessingNode(v8, v9);
    OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v9);
    OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v8);
    v10 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v11);
    result = v11.n128_f64[0];
    *(__n128 *)((char *)this + 548) = v11;
    *(_QWORD *)((char *)this + 564) = v12;
  }
  return result;
}

void sub_1B2EF75CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

void OZRetimingBehavior::didAddSceneNodeToScene(OZRetimingBehavior *this, OZScene *a2)
{
  OZSceneNode *v3;
  OZImageElement *v4;
  OZChannelObjectRoot *v5;

  OZChannelBehavior::didAddSceneNodeToScene(this, a2);
  if (!*((_BYTE *)this + 544))
  {
    v3 = (OZSceneNode *)(*(uint64_t (**)(OZRetimingBehavior *))(*(_QWORD *)this + 320))(this);
    OZRetimingBehavior::addRetimingNode(this, v3);
    if (v3)
    {
      if (v4)
        OZImageElement::updateRetimingState(v4, v5);
    }
    *((_BYTE *)this + 544) = 1;
  }
}

void OZRetimingBehavior::willRemove(OZRetimingBehavior *this)
{
  const void *v2;
  OZChannelBase *v3;
  const CMTime *v4;
  OZImageElement *v5;
  OZChannelObjectRoot *v6;
  CMTime v7;

  *((_BYTE *)this + 544) = 0;
  v2 = (const void *)(*(uint64_t (**)(OZRetimingBehavior *))(*(_QWORD *)this + 320))(this);
  v3 = (OZChannelBase *)(*(uint64_t (**)(const void *))(*(_QWORD *)v2 + 640))(v2);
  v7 = *(CMTime *)((char *)this + 548);
  OZRetimingUtil::FixForRemovedBehavior(v3, &v7, v4);
  OZChannelBehavior::willRemove(this);
  if (v5)
    OZImageElement::updateRetimingState(v5, v6);
}

unint64_t OZRetimingBehavior::canAddToSceneNode(OZRetimingBehavior *this, OZSceneNode *a2)
{
  unint64_t result;
  OZSceneNode *v4;

  result = OZBehavior::canAddToSceneNode(this, a2);
  if ((_DWORD)result)
    return OZRetimingUtil::CanRetimeFull(a2, v4);
  return result;
}

double OZRetimingBehavior::solveNode(OZRetimingBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

double `non-virtual thunk to'OZRetimingBehavior::solveNode(OZRetimingBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return a5;
}

__n128 OZRetimingBehavior::solveNode(OZRetimingBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  unint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  v3 = *((_QWORD *)a3 + 19);
  v4 = *((_QWORD *)a3 + 10);
  v11 = *(CMTime *)((_BYTE *)a3 + 5);
  result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.value = result;
  v10.epoch = *((_QWORD *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZRetimingBehavior *, uint64_t, CMTime *, double, double))(*(_QWORD *)this + 672))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      result = *(__n128 *)&v14.value;
      v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZRetimingBehavior::solveNode(OZRetimingBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  double result;

  *(_QWORD *)&result = OZRetimingBehavior::solveNode((OZRetimingBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

__n128 OZRetimingBehavior::getNeededRange(OZRetimingBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

__n128 `non-virtual thunk to'OZRetimingBehavior::getNeededRange(OZRetimingBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  __n128 result;

  *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
  result = *(__n128 *)((char *)a3 + 120);
  *((__n128 *)a3 + 3) = result;
  *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
  *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
  *((_BYTE *)a3 + 88) = 0;
  *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  return result;
}

uint64_t OZChannelEnumDimension_Factory::getInstance(OZChannelEnumDimension_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelEnumDimension_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelEnumDimension_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumDimension_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumDimension_Factory::_instance;
}

void OZChannelEnumDimension::OZChannelEnumDimension(OZChannelEnumDimension *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8)
{
  OZChannelEnumDimension_Factory *v9;

  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, a8, 0);
  *(_QWORD *)v9 = &unk_1E65A1740;
  *((_QWORD *)v9 + 2) = &unk_1E65A1AB0;
  *((_QWORD *)this + 1) = OZChannelEnumDimension_Factory::getInstance(v9);
}

void sub_1B2EF7954(_Unwind_Exception *a1)
{
  PCString *v1;

  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumDimension_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelEnumDimension_Factory *v0;

  v0 = (OZChannelEnumDimension_Factory *)operator new();
  OZChannelEnumDimension_Factory::OZChannelEnumDimension_Factory(v0);
  OZChannelEnumDimension_Factory::_instance = (uint64_t)v0;
}

void sub_1B2EF79B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumDimension_Factory::OZChannelEnumDimension_Factory(OZChannelEnumDimension_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B35558F0;
  v4 = xmmword_1B3560900;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65B1A80;
  *((_QWORD *)this + 16) = &unk_1E65B1B50;
}

void sub_1B2EF7A50(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannel *OZChannelEnumDimension_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannel *v6;

  v6 = (OZChannel *)operator new();
  OZChannelEnum::OZChannelEnum(v6, this, a2, a3, 0, 0);
  v6->var0 = (void **)&unk_1E65A1740;
  v6->var2 = (void **)&unk_1E65A1AB0;
  return v6;
}

void sub_1B2EF7AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumDimension_Factory::createCopy(OZChannelEnumDimension_Factory *this, OZFactoryBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E65A1740;
  *((_QWORD *)v3 + 2) = &unk_1E65A1AB0;
  return v3;
}

void sub_1B2EF7B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumDimension_Factory::createChannelCopy(OZChannelEnumDimension_Factory *this, OZChannelBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E65A1740;
  *((_QWORD *)v3 + 2) = &unk_1E65A1AB0;
  return v3;
}

void sub_1B2EF7C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZLiFilter::OZLiFilter(OZLiFilter *this, OZEffect *a2, const OZRenderParams *a3, const OZRenderParams *a4, char a5)
{
  uint64_t v9;
  uint64_t v10;

  LiImageFilter::LiImageFilter(this, (_QWORD *)a2 + 1);
  v9 = *(_QWORD *)a2;
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_QWORD *)(v10 + *(_QWORD *)(v9 - 24)) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(v10 + 40) = a3;
  *(_BYTE *)(v10 + 48) = a5;
  OZRenderParams::OZRenderParams((OZRenderParams *)(v10 + 56), a4);
}

void sub_1B2EF7CC0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  const PCString *v2;

  LiImageFilter::~LiImageFilter(v1, v2);
  _Unwind_Resume(a1);
}

void OZLiFilter::OZLiFilter(OZLiFilter *this, OZEffect *a2, const OZRenderParams *a3, char a4)
{
  *((_QWORD *)this + 185) = &off_1E65EB048;
  *((_QWORD *)this + 186) = 0;
  *((_BYTE *)this + 1496) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E65B1CB8);
  *(_QWORD *)this = &off_1E65B1BB0;
  *((_QWORD *)this + 185) = &unk_1E65B1C98;
  *((_QWORD *)this + 5) = a2;
  *((_BYTE *)this + 48) = a4;
  OZRenderParams::OZRenderParams((OZLiFilter *)((char *)this + 56), a3);
}

void sub_1B2EF7D64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E65B1CB8);
  *(_QWORD *)(v1 + 1480) = v2 + 16;
  *(_BYTE *)(v1 + 1496) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1488));
  _Unwind_Resume(a1);
}

void OZLiFilter::clone(OZLiFilter *this@<X0>, PCSharedCount *a2@<X8>)
{
  OZLiFilter *v4;
  LiImageFilter *v5;
  PCSharedCount v6;

  v4 = (OZLiFilter *)operator new();
  OZLiFilter::OZLiFilter(v4, *((OZEffect **)this + 5), (OZLiFilter *)((char *)this + 56), *((_BYTE *)this + 48));
  v5 = v4;
  PCSharedCount::PCSharedCount(&v6, (OZLiFilter *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  LiImageFilter::copyFrom((PCSharedCount *)v4, (const PCSharedCount *)this);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, (const PCSharedCount *)&v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2EF7E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40D5751B1ALL);
  _Unwind_Resume(a1);
}

void OZLiFilter::getSourceAtTime(OZLiFilter *this@<X0>, CMTime *a2@<X1>, const OZRenderParams *a3@<X3>, uint64_t a4@<X2>, PCSharedCount *a5@<X8>)
{
  int v6;
  uint64_t v10;
  CMTimeEpoch epoch;
  PCSharedCount v12;
  PCSharedCount v13;
  PCSharedCount v14;
  PCSharedCount v15;
  __int128 v16;
  CMTimeEpoch v17;
  uint64_t v18;
  uint64_t v19;
  CMTime v20;
  PC_Sp_counted_base *v21;
  PCSharedCount v22;

  v6 = a4;
  v10 = *((_QWORD *)this + 2);
  if (!v10)
    throw_PCNullPointerException(1);
  v20 = *a2;
  (*(void (**)(PC_Sp_counted_base **__return_ptr, uint64_t, CMTime *, uint64_t, const OZRenderParams *))(*(_QWORD *)v10 + 136))(&v21, v10, &v20, a4, a3);
  if (v6)
  {
    a5->var0 = v21;
    PCSharedCount::PCSharedCount(a5 + 1, &v22);
  }
  else
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)&v16, a3);
    v16 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    v18 = 0;
    v19 = 0;
    v17 = epoch;
    (*(void (**)(PCSharedCount *__return_ptr, _QWORD, __int128 *))(**((_QWORD **)this + 5) + 648))(&v12, *((_QWORD *)this + 5), &v16);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v14, &v12);
    PCSharedCount::~PCSharedCount(&v13);
    if (v14.var0)
    {
      (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v14.var0 + 168))(v14.var0, v21);
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, &v14);
    }
    else
    {
      a5->var0 = v21;
      PCSharedCount::PCSharedCount(a5 + 1, &v22);
    }
    PCSharedCount::~PCSharedCount(&v15);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v16);
  }
  PCSharedCount::~PCSharedCount(&v22);
}

void sub_1B2EF7FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  PCSharedCount *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  PCSharedCount::~PCSharedCount(v5 + 1);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v6 - 72));
  _Unwind_Resume(a1);
}

void OZLiFilter::getHelium(const PCSharedCount *this, LiAgent *a2)
{
  FxColorDescription *v4;
  CGColorSpace *CGColorSpace;
  PC_Sp_counted_base *var0;
  __int128 v7;
  PC_Sp_counted_base *v8;
  PC_Sp_counted_base *v9;
  PCSharedCount v10;

  v4 = (FxColorDescription *)&this[7];
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace(v4, CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)v4, *(float *)(*((_QWORD *)a2 + 6) + 192));
  var0 = this[5].var0;
  v9 = this[2].var0;
  PCSharedCount::PCSharedCount(&v10, this + 3);
  v7 = *(_OWORD *)&this[7].var0;
  v8 = this[9].var0;
  (*(void (**)(PC_Sp_counted_base *, LiAgent *, PC_Sp_counted_base **, __int128 *, FxColorDescription *))(*(_QWORD *)var0 + 224))(var0, a2, &v9, &v7, v4);
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B2EF80E4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLiFilter::pixelTransformSupport(OZLiFilter *this, const LiRenderParameters *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    if (result)
    {
      v4 = result;
      v7 = *(_OWORD *)((char *)this + 56);
      v8 = *((_QWORD *)this + 9);
      if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)result + 656))(result, &v7) & 1) != 0)
      {
        return 6;
      }
      else
      {
        v5 = *(_OWORD *)((char *)this + 56);
        v6 = *((_QWORD *)this + 9);
        return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(v4 + 368) + 248))(v4 + 368, &v5);
      }
    }
  }
  return result;
}

uint64_t OZLiFilter::filteredEdges(OZLiFilter *this)
{
  return 0;
}

uint64_t OZLiFilter::setFilmSpace(OZLiFilter *this, int a2)
{
  uint64_t v2;

  *((_BYTE *)this + 48) = a2;
  if (a2)
    v2 = 2;
  else
    v2 = 1;
  return (*(uint64_t (**)(OZLiFilter *, uint64_t))(*(_QWORD *)this + 88))(this, v2);
}

uint64_t OZLiFilter::getBoundary(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v11;
  float64x2_t v13[2];

  (*(void (**)(_QWORD, float64x2_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a3, a1 + 56);
  v13[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v13[1] = _Q0;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    throw_PCNullPointerException(1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, float64x2_t *))(*(_QWORD *)v11 + 24))(v11, a2, v13))
    PCRect<double>::operator|=(a3, v13);
  return 1;
}

void OZLiFilter::~OZLiFilter(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E65B1BB0;
  this[185].var0 = (PC_Sp_counted_base *)&unk_1E65B1C98;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  this->var0 = (PC_Sp_counted_base *)off_1E65B1D08;
  this[185].var0 = (PC_Sp_counted_base *)off_1E65B1DF0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65B1CC0);
  this[185].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[187].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[186].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E65B1BB0;
  this[185].var0 = (PC_Sp_counted_base *)&unk_1E65B1C98;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  this->var0 = (PC_Sp_counted_base *)off_1E65B1D08;
  this[185].var0 = (PC_Sp_counted_base *)off_1E65B1DF0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65B1CC0);
  this[185].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[187].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[186].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZLiFilter::~OZLiFilter(OZLiFilter *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65B1BB0;
  v1[185].var0 = (PC_Sp_counted_base *)&unk_1E65B1C98;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[7]);
  v1->var0 = (PC_Sp_counted_base *)off_1E65B1D08;
  v1[185].var0 = (PC_Sp_counted_base *)off_1E65B1DF0;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65B1CC0);
  v1[185].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[187].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[186].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65B1BB0;
  v1[185].var0 = (PC_Sp_counted_base *)&unk_1E65B1C98;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[7]);
  v1->var0 = (PC_Sp_counted_base *)off_1E65B1D08;
  v1[185].var0 = (PC_Sp_counted_base *)off_1E65B1DF0;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65B1CC0);
  v1[185].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[187].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[186].var0);
  JUMPOUT(0x1B5E29170);
}

BOOL GLRenderer::inDesperationMode(GLRenderer *this)
{
  unsigned int v1;

  return v1 != 0;
}

uint64_t GLRenderer::getFrameNode@<X0>(GLRenderer *this@<X0>, OZScene *a2@<X1>, HGRenderJob *a3@<X2>, PCString *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t RenderNodeList;
  PGContext *v13;
  int v14;
  CGColorSpace *WorkingColorSpace;
  CGColorSpace *v16;
  uint64_t v17;
  uint64_t v18;
  const PCString *v19;
  uint64_t v21;
  char v22;
  _BYTE _F[81];

  RenderNodeList = HGRenderJob::GetRenderNodeList(a3);
  if (*(_DWORD *)(*(_QWORD *)RenderNodeList + 8))
    FxDeviceGetVirtualScreenForComputeDevice(RenderNodeList);
  v13 = (PGContext *)PGGetPerThreadContext();
  PGContext::setVirtualScreen(v13);
  v14 = *((unsigned __int8 *)a3 + 496);
  OZChannelBase::setRangeName((OZChannelBase *)_F, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&v22, a4);
  *a6 = 0;
  if (v14)
    GLRenderer::getFrameNodeWithMotionBlur(this, a2, (OZRenderParams *)a3, (HGRenderer *)a4, a5, &v21);
  else
    GLRenderer::getFrameNodeIncludingFields(this, a2, (OZRenderParams *)a3, (HGRenderer *)a4, a5, &v21);
  if (v21)
    *a6 = v21;
  if (OZRenderParams::isDynamicRangeTrackingRender((FxColorDescription *)a3)
    && OZRenderParams::wantsHLGToPQPostProcessingStep((OZRenderParams *)a3))
  {
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
    v16 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
    FxConvertHLGToPQ(a6, WorkingColorSpace, (CGColorSpace *)1, v16, (char *)1, &v21, 1000.0);
    v17 = *a6;
    v18 = v21;
    if (*a6 == v21)
    {
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    }
    else
    {
      if (v17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
        v18 = v21;
      }
      *a6 = v18;
    }
  }
  OZImageElementFinalizer::~OZImageElementFinalizer((OZImageElementFinalizer *)&v22);
  return OZChannelBase::setRangeName((OZChannelBase *)_F, v19);
}

void sub_1B2EF8630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, OZChannelBase *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _QWORD *v13;
  const PCString *v15;

  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, OZChannelBase *))(*(_QWORD *)a9 + 24))(a9, a2, a3, a4, a5);
  if (*v13)
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, OZChannelBase *))(*(_QWORD *)*v13 + 24))(*v13, a2, a3, a4, a5);
  OZImageElementFinalizer::~OZImageElementFinalizer((OZImageElementFinalizer *)&a12);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void GLRenderer::getFrameNodeWithMotionBlur(GLRenderer *this@<X0>, OZScene *a2@<X1>, OZRenderParams *a3@<X2>, HGRenderer *a4@<X3>, uint64_t *a5@<X4>, CMTimeValue *a6@<X8>)
{
  unint64_t v12;
  char *OutputColorDescription;
  CGColorSpace *v14;
  uint64_t v15;
  uint64_t WorkingColorDescription;
  CGColorSpace *v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  float v22;
  float v23;
  float v24;
  int v25;
  FxBalancedBlendRecord *v26;
  CGColorSpace *obj;
  uint64_t v28;
  uint64_t v29;
  FxBalancedBlendRecord *v31;
  HGNode *v32;
  unsigned int v33;
  HGNode *v34;
  int hasHGAnisotropicXForm;
  FxBalancedBlendRecord *v36;
  int v37;
  double *v38;
  CMTimeValue v39;
  FxColorDescription v40;
  uint64_t v41;
  uint64_t v42;
  FxBalancedBlendRecord *v43;
  FxBalancedBlendRecord *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  FxColorDescription v48;
  FxColorDescription v49;

  v12 = *((int *)a3 + 125);
  if ((_DWORD)v12 == 1)
  {
    GLRenderer::getFrameNodeIncludingFields(this, a2, a3, a4, a5, a6);
  }
  else
  {
    *a6 = 0;
    OutputColorDescription = OZRenderParams::getOutputColorDescription(a3);
    v14 = *(CGColorSpace **)OutputColorDescription;
    v49._pcColorDesc._colorSpaceRef._obj = v14;
    if (v14)
      PCCFRefTraits<CGColorSpace *>::retain(v14);
    v15 = *((_QWORD *)OutputColorDescription + 1);
    v49._pcColorDesc._toneMapMethod._gain = *((float *)OutputColorDescription + 4);
    *(_QWORD *)&v49._pcColorDesc._dynamicRange = v15;
    v49._isPremultiplied = OutputColorDescription[24];
    WorkingColorDescription = OZRenderParams::getWorkingColorDescription(a3);
    v17 = *(CGColorSpace **)WorkingColorDescription;
    v48._pcColorDesc._colorSpaceRef._obj = v17;
    if (v17)
      PCCFRefTraits<CGColorSpace *>::retain(v17);
    v18 = *(_QWORD *)(WorkingColorDescription + 8);
    v48._pcColorDesc._toneMapMethod._gain = *(float *)(WorkingColorDescription + 16);
    *(_QWORD *)&v48._pcColorDesc._dynamicRange = v18;
    v48._isPremultiplied = *(_BYTE *)(WorkingColorDescription + 24);
    OZRenderParams::setOutputColorDescription((CGColorSpace **)a3, &v48);
    if (*((_DWORD *)a3 + 123))
      v19 = *((double *)a3 + 63) * 0.5;
    else
      v19 = *((double *)a3 + 63);
    v46 = *(_OWORD *)a3;
    v47 = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v40._pcColorDesc._colorSpaceRef._obj = *(_OWORD *)a3;
    *(_QWORD *)&v40._pcColorDesc._toneMapMethod._gain = *((_QWORD *)a3 + 2);
    v20 = FigTimeToFrameWithRate((const CMTime *)&v40, *((double *)a2 + 46));
    v43 = 0;
    v44 = 0;
    v45 = 0;
    std::vector<FxBalancedBlendRecord>::reserve((uint64_t *)&v43, v12);
    if ((_DWORD)v12)
    {
      v21 = 0;
      v22 = v19;
      v23 = (float)(1.0 / (float)(int)v12) * v22;
      v24 = v20;
      v25 = v12 - 1;
      do
      {
        OZScene::getTimeForFrame(a2, (float)((float)(v23 * (float)v21) + v24), (__n128 *)&v40);
        *(_OWORD *)a3 = *(_OWORD *)&v40._pcColorDesc._colorSpaceRef._obj;
        *((_QWORD *)a3 + 2) = *(_QWORD *)&v40._pcColorDesc._toneMapMethod._gain;
        *((_QWORD *)a3 + 49) = 0;
        *((_QWORD *)a3 + 50) = 0;
        GLRenderer::getFrameNodeIncludingFields(this, a2, a3, a4, a5, &v42);
        FxBalancedBlendRecord::FxBalancedBlendRecord((uint64_t)&v40, &v42, 1.0);
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v26 = v44;
        if ((unint64_t)v44 >= v45)
        {
          v28 = std::vector<FxBalancedBlendRecord>::__push_back_slow_path<FxBalancedBlendRecord const&>((uint64_t *)&v43, (uint64_t *)&v40);
        }
        else
        {
          obj = v40._pcColorDesc._colorSpaceRef._obj;
          *(_QWORD *)v44 = v40._pcColorDesc._colorSpaceRef._obj;
          if (obj)
            (*(void (**)(CGColorSpace *))(*(_QWORD *)obj + 16))(obj);
          *((_QWORD *)v26 + 1) = *(_QWORD *)&v40._pcColorDesc._dynamicRange;
          v28 = (uint64_t)v26 + 16;
        }
        v44 = (FxBalancedBlendRecord *)v28;
        v29 = *a5;
        if (v40._pcColorDesc._colorSpaceRef._obj)
          (*(void (**)(CGColorSpace *))(*(_QWORD *)v40._pcColorDesc._colorSpaceRef._obj + 24))(v40._pcColorDesc._colorSpaceRef._obj);
        if (v29)
          break;
      }
      while (v25 != v21++);
    }
    if (*a5)
    {
      OZRenderParams::setOutputColorDescription((CGColorSpace **)a3, &v49);
    }
    else
    {
      v31 = v43;
      if (v43 == v44)
      {
        v37 = 0;
        v38 = (double *)v43;
      }
      else
      {
        while (1)
        {
          FxBalancedBlendRecord::node(v31, &v40);
          v33 = LiHeUtil::isLiHeLightSurfaceFinalPass(v40._pcColorDesc._colorSpaceRef._obj, v32);
          if (v40._pcColorDesc._colorSpaceRef._obj)
            (*(void (**)(CGColorSpace *))(*(_QWORD *)v40._pcColorDesc._colorSpaceRef._obj + 24))(v40._pcColorDesc._colorSpaceRef._obj);
          if (v33)
          {
            v37 = 1;
            v36 = v44;
            goto LABEL_38;
          }
          FxBalancedBlendRecord::node(v31, &v40);
          hasHGAnisotropicXForm = LiHeUtil::hasHGAnisotropicXForm(v40._pcColorDesc._colorSpaceRef._obj, v34);
          if (v40._pcColorDesc._colorSpaceRef._obj)
            (*(void (**)(CGColorSpace *))(*(_QWORD *)v40._pcColorDesc._colorSpaceRef._obj + 24))(v40._pcColorDesc._colorSpaceRef._obj);
          v36 = v44;
          if ((hasHGAnisotropicXForm & 1) != 0)
            break;
          v31 = (FxBalancedBlendRecord *)((char *)v31 + 16);
          if (v31 == v44)
          {
            v37 = 0;
            goto LABEL_38;
          }
        }
        v37 = 1;
LABEL_38:
        v38 = (double *)v43;
        v31 = v36;
      }
      makeBalancedBlendTree<std::__wrap_iter<FxBalancedBlendRecord *>>(v38, (double *)v31, &v41, v37);
      v40._pcColorDesc._colorSpaceRef._obj = v49._pcColorDesc._colorSpaceRef._obj;
      if (v49._pcColorDesc._colorSpaceRef._obj)
        PCCFRefTraits<CGColorSpace *>::retain(v49._pcColorDesc._colorSpaceRef._obj);
      *(_QWORD *)&v40._pcColorDesc._dynamicRange = *(_QWORD *)&v49._pcColorDesc._dynamicRange;
      v40._pcColorDesc._toneMapMethod._gain = v49._pcColorDesc._toneMapMethod._gain;
      v40._isPremultiplied = v49._isPremultiplied;
      FxApplyColorConform(&v41, &v48, &v40, &v39);
      if (v39)
        *a6 = v39;
      OZRenderParams::setOutputColorDescription((CGColorSpace **)a3, &v40);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v40._pcColorDesc._colorSpaceRef._obj);
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
    }
    *(_OWORD *)a3 = v46;
    *((_QWORD *)a3 + 2) = v47;
    *((_QWORD *)a3 + 49) = 0;
    *((_QWORD *)a3 + 50) = 0;
    v40._pcColorDesc._colorSpaceRef._obj = (CGColorSpace *)&v43;
    std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v48._pcColorDesc._colorSpaceRef._obj);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v49._pcColorDesc._colorSpaceRef._obj);
  }
}

void sub_1B2EF8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  va_copy((va_list)v5, va1);
  std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v3 - 136));
  _Unwind_Resume(a1);
}

void GLRenderer::getFrameNodeIncludingFields(GLRenderer *this@<X0>, OZScene *a2@<X1>, OZRenderParams *a3@<X2>, HGRenderer *a4@<X3>, uint64_t *a5@<X4>, CMTimeValue *a6@<X8>)
{
  int v12;
  double v13;
  double v14;
  uint64_t i;
  _OWORD *v16;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v21;
  int8x16_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  CMTimeValue value;
  HGXForm *v27;
  float64x2_t v28;
  double v29;
  double v30;
  CMTime v31;
  double v32;
  CMTime v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  CMTime v42;
  _BYTE v43[24];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  CMTime v50;
  double v51;
  double v52;
  CMTime v53[16];
  __int128 v54;
  __int128 v55;
  int v56;
  int32x2_t v57;
  int32x2_t v58;
  _BYTE v59[616];

  *a5 = 0;
  v12 = *((_DWORD *)a3 + 123);
  if ((v12 - 1) >= 2)
  {
    if ((v12 - 3) >= 2)
    {
      value = 0;
      if (v12)
        goto LABEL_28;
      GLRenderer::getFrameNodeForSingleTime(this, a2, a3, a4, 1.0, 0.0, a5, v53);
      value = v53[0].value;
    }
    else
    {
      OZRenderParams::getPixelTransform(a3, (uint64_t)&v50);
      *(_OWORD *)&v42.timescale = 0u;
      *(_OWORD *)v43 = 0u;
      v42.value = 0x3FF0000000000000;
      *(_QWORD *)&v43[16] = 0x4000000000000000;
      v44 = 0u;
      v45 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0x3FF0000000000000;
      v49 = 0x3FF0000000000000;
      v13 = -0.5;
      if (v12 == 3)
        v13 = 0.5;
      if (*(double *)&v50.value * v52 - *(double *)&v50.timescale * v51 >= 0.0)
        v14 = v13;
      else
        v14 = -v13;
      if (v14 != 0.0)
      {
        *(float64x2_t *)&v43[8] = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v14 * 0.0), 0), (float64x2_t)xmmword_1B304EF70);
        *(_QWORD *)&v44 = *(_QWORD *)&v43[8];
        *((double *)&v44 + 1) = v14;
      }
      v41 = 0x3FF0000000000000;
      v38 = 0x3FF0000000000000;
      v35 = 0x3FF0000000000000;
      v33.value = 0x3FF0000000000000;
      *(_OWORD *)&v33.timescale = 0uLL;
      v34 = 0uLL;
      v36 = 0uLL;
      v37 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v33, (double *)&v42.value, 0.0);
      OZRenderParams::OZRenderParams((OZRenderParams *)v53, a3);
      OZRenderParams::getPixelTransform(a3, (uint64_t)&v28);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v42, (__int128 *)&v28, (uint64_t)&v31);
      for (i = 0; i != 128; i += 32)
      {
        v16 = &v59[i];
        v17 = *(_OWORD *)((char *)&v31.epoch + i);
        *v16 = *(_OWORD *)((char *)&v31.value + i);
        v16[1] = v17;
      }
      v59[128] = 1;
      if (OZRenderParams::hasROI(a3))
      {
        OZRenderParams::getROI(a3, &v28);
        *(double *)&v31.value = (double)SLODWORD(v28.f64[0]);
        *(double *)&v31.timescale = (double)SHIDWORD(v28.f64[0]);
        *(double *)&v31.epoch = (double)SLODWORD(v28.f64[1]);
        v32 = (double)SHIDWORD(v28.f64[1]);
        v18 = (double)SHIDWORD(v28.f64[0]) + 0.5;
        v19 = (double)SLODWORD(v28.f64[1]) + -1.0;
        v20 = (double)SHIDWORD(v28.f64[1]) + -1.0;
        v28.f64[0] = (double)SLODWORD(v28.f64[0]) + 0.5;
        v28.f64[1] = v18;
        v29 = v19;
        v30 = v20;
        PCMatrix44Tmpl<double>::transformRect<double>((double *)&v42.value, v28.f64, (uint64_t)&v31);
        *(_QWORD *)&v21.f64[0] = v31.value;
        v22 = (int8x16_t)vaddq_f64(*(float64x2_t *)&v31.timescale, (float64x2_t)xmmword_1B3560940);
        v23 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
        v21.f64[1] = v32;
        v24 = vaddq_f64(v21, (float64x2_t)xmmword_1B3560940);
        v25 = vaddq_f64(v23, v24);
        v23.f64[0] = v24.f64[0];
        v57 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v23, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
        v58 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v25))), v57);
      }
      v56 = 0;
      v54 = 0u;
      v55 = 0u;
      GLRenderer::getFrameNodeForSingleTime(this, a2, (OZRenderParams *)v53, a4, 1.0, 0.0, a5, &v31);
      value = v31.value;
      v27 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v27);
      (*(void (**)(HGXForm *, _QWORD, CMTimeValue))(*(_QWORD *)v27 + 120))(v27, 0, value);
      (*(void (**)(HGXForm *, _QWORD))(*(_QWORD *)v27 + 160))(v27, 0);
      (*(void (**)(HGXForm *, _QWORD, float))(*(_QWORD *)v27 + 592))(v27, 0, 0.0);
      (*(void (**)(HGXForm *, uint64_t, uint64_t))(*(_QWORD *)v27 + 136))(v27, 0xFFFFFFFFLL, 32);
      (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v27 + 136))(v27, 0, 32);
      PGHelium::convertPCMatrix44((__int128 *)&v33.value, (HGTransform **)&v31);
      (*(void (**)(HGXForm *, CMTimeValue))(*(_QWORD *)v27 + 576))(v27, v31.value);
      if ((HGXForm *)value != v27)
      {
        if (value)
          (*(void (**)(CMTimeValue))(*(_QWORD *)value + 24))(value);
        value = (CMTimeValue)v27;
        (*(void (**)(HGXForm *))(*(_QWORD *)v27 + 16))(v27);
      }
      if (v31.value)
        (*(void (**)(CMTimeValue))(*(_QWORD *)v31.value + 24))(v31.value);
      (*(void (**)(HGXForm *))(*(_QWORD *)v27 + 24))(v27);
      OZRenderParams::~OZRenderParams((OZRenderParams *)v53);
    }
    if (*a5)
    {
      *a6 = 0;
      if (value)
        (*(void (**)(CMTimeValue))(*(_QWORD *)value + 24))(value);
      return;
    }
LABEL_28:
    *a6 = value;
    return;
  }
  memset(&v42, 0, sizeof(v42));
  OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)&v42);
  v42.value /= 2;
  v33.epoch = *((_QWORD *)a3 + 2);
  v53[0].epoch = *((_QWORD *)a3 + 2);
  *(_OWORD *)&v33.value = *(_OWORD *)a3;
  memset(&v31, 0, sizeof(v31));
  *(_OWORD *)&v53[0].value = *(_OWORD *)a3;
  v50 = v42;
  PC_CMTimeSaferAdd(v53, &v50, (uint64_t)&v31);
  OZRenderParams::OZRenderParams((OZRenderParams *)v53, a3);
  v53[0] = v33;
  v54 = 0uLL;
  GLRenderer::getFrameNodeForSingleTime(this, a2, (OZRenderParams *)v53, a4, 0.5, -0.25, a5, &v50);
  if (*a5)
  {
    *a6 = 0;
  }
  else
  {
    v53[0] = v31;
    v54 = 0uLL;
    GLRenderer::getFrameNodeForSingleTime(this, a2, (OZRenderParams *)v53, a4, 0.5, -0.75, a5, &v28);
    *a6 = 0;
    if (*(_QWORD *)&v28.f64[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v28.f64[0] + 24))(*(_QWORD *)&v28.f64[0]);
  }
  if (v50.value)
    (*(void (**)(CMTimeValue))(*(_QWORD *)v50.value + 24))(v50.value);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v53);
}

void sub_1B2EF9154(_Unwind_Exception *a1)
{
  if (STACK[0x200])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x200] + 24))(STACK[0x200]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void GLRenderer::getFrameNodeForSingleTime(GLRenderer *this@<X0>, OZScene *a2@<X1>, OZRenderParams *a3@<X2>, HGRenderer *a4@<X3>, double a5@<D0>, double a6@<D1>, uint64_t *a7@<X4>, _QWORD *a8@<X8>)
{
  char *v16;
  uint64_t RenderNodeList;
  PGContext *v18;
  uint64_t v19;
  uint64_t v20;
  LiGroup *v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t CGColorSpace;
  uint64_t v31;
  PC_Sp_counted_base *v32;
  HGNode *v33;
  uint64_t i;
  _OWORD *v35;
  __int128 v36;
  PC_Sp_counted_base *v37;
  PCSharedCount v38;
  PCSharedCount v39;
  PCSharedCount v40;
  PC_Sp_counted_base *v41;
  PCSharedCount v42[8];
  LiAnimCamera *v43[2];
  _QWORD v44[20];
  _QWORD v45[10];
  FxColorDescription v46[6];
  PC_Sp_counted_base *var0;
  PCSharedCount v48;
  _BYTE v49[32];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  GLRenderer *v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57[81];
  CMTime time;
  PCSharedCount v59;
  PCString v60;
  PCSharedCount v61[2];

  v50 = *(_OWORD *)a3;
  v51 = *((_QWORD *)a3 + 2);
  v16 = (char *)a2 + 336;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)v43);
  operator/(&v50, (uint64_t)v43, (uint64_t)&time);
  CMTimeGetSeconds(&time);
  *a7 = 0;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v50, a3);
  v54 = this;
  RenderNodeList = HGRenderJob::GetRenderNodeList((HGRenderJob *)a3);
  if (*(_DWORD *)(*(_QWORD *)RenderNodeList + 8))
    FxDeviceGetVirtualScreenForComputeDevice(RenderNodeList);
  v18 = (PGContext *)PGGetPerThreadContext();
  PGContext::setVirtualScreen(v18);
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v49);
  var0 = 0;
  PCSharedCount::PCSharedCount(&v48);
  v19 = v52;
  v52 = 0x3FF0000000000000;
  v55 = 0u;
  v56 = 0u;
  v20 = v53;
  OZScene::setupFxPlugRenderContext(a2, a3);
  if (v20)
  {
    v21 = (LiGroup *)operator new();
    LiGroup::LiGroup(v21);
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&var0, v21);
    OZChannelBase::setRangeName((OZChannelBase *)a3, &v60);
    LiGraphBuilder::LiGraphBuilder(v46, &var0, &v60);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v43);
    v45[9] = v46;
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&v41, (OZImageNode *)(v20 + 6528), (OZRenderParams *)&v50);
    (*(void (**)(uint64_t, __int128 *, FxColorDescription *, LiAnimCamera **))(*(_QWORD *)v20 + 2016))(v20, &v50, v46, v43);
    LiGraphBuilder::worldRoot((const PCSharedCount *)v46, &v39);
    var0 = v39.var0;
    PCSharedCount::PCSharedCount(&v59, &v40);
    PCSharedCount::operator=((uint64_t *)&v48, (uint64_t *)&v59);
    PCSharedCount::~PCSharedCount(&v59);
    PCSharedCount::~PCSharedCount(&v40);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&v41);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v45);
    std::__list_imp<unsigned int>::clear(v44);
    LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v46);
  }
  else
  {
    OZScene::buildSceneRenderGraph((int32x2_t *)a2, (OZRenderParams *)&v50, (PCSharedCount *)v43);
    var0 = (PC_Sp_counted_base *)v43[0];
    PCSharedCount::PCSharedCount((PCSharedCount *)v46, (const PCSharedCount *)&v43[1]);
    PCSharedCount::operator=((uint64_t *)&v48, (uint64_t *)v46);
    PCSharedCount::~PCSharedCount((PCSharedCount *)v46);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v43[1]);
    v37 = var0;
    PCSharedCount::PCSharedCount(&v38, &v48);
    v43[0] = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v43[1]);
    PCPtr<LiAnimCamera>::operator=<LiCamera>(v43, v57[62]);
    if (v43[0])
    {
      v46[0]._pcColorDesc._colorSpaceRef._obj = 0;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v46[0]._pcColorDesc._dynamicRange);
      if (!v43[0])
        throw_PCNullPointerException(1);
      PCPtr<OZNodeCamera>::operator=<LiCamera>(v46, *((_QWORD **)v43[0] + 64));
      if (v46[0]._pcColorDesc._colorSpaceRef._obj)
      {
        if (!v43[0])
          throw_PCNullPointerException(1);
        v22 = LiAnimCamera::getTime(v43[0]);
        if (v22 <= 1.0)
          v23 = 1.0 - v22;
        else
          v23 = 0.0;
        v41 = v37;
        PCSharedCount::PCSharedCount(v42, &v38);
        if (!v46[0]._pcColorDesc._colorSpaceRef._obj)
          throw_PCNullPointerException(1);
        v24 = *(unsigned int *)((*(uint64_t (**)(CGColorSpace *))(*(_QWORD *)v46[0]._pcColorDesc._colorSpaceRef._obj
                                                                          + 768))(v46[0]._pcColorDesc._colorSpaceRef._obj)
                              + 80);
        v25 = 1.0;
        if (v22 >= 0.0)
          v25 = v23;
        fadeObjects2(&v41, v24, v25);
        PCSharedCount::~PCSharedCount(v42);
      }
      if (!v43[0])
        throw_PCNullPointerException(1);
      PCPtr<OZNodeCamera>::operator=<LiCamera>(v46, *((_QWORD **)v43[0] + 62));
      if (v46[0]._pcColorDesc._colorSpaceRef._obj)
      {
        if (!v43[0])
          throw_PCNullPointerException(1);
        v26 = LiAnimCamera::getTime(v43[0]);
        v27 = 1.0;
        if (v26 <= 1.0)
          v27 = v26;
        if (v26 >= 0.0)
          v28 = v27;
        else
          v28 = 0.0;
        if (!v46[0]._pcColorDesc._colorSpaceRef._obj)
          throw_PCNullPointerException(1);
        if ((*(uint64_t (**)(CGColorSpace *))(*(_QWORD *)v46[0]._pcColorDesc._colorSpaceRef._obj + 768))(v46[0]._pcColorDesc._colorSpaceRef._obj))
        {
          v60.var0 = (__CFString *)v37;
          PCSharedCount::PCSharedCount(v61, &v38);
          if (!v46[0]._pcColorDesc._colorSpaceRef._obj)
            throw_PCNullPointerException(1);
          v29 = (*(uint64_t (**)(CGColorSpace *))(*(_QWORD *)v46[0]._pcColorDesc._colorSpaceRef._obj + 768))(v46[0]._pcColorDesc._colorSpaceRef._obj);
          fadeObjects2(&v60, *(unsigned int *)(v29 + 80), v28);
          PCSharedCount::~PCSharedCount(v61);
        }
      }
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v46[0]._pcColorDesc._dynamicRange);
    }
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v43[1]);
    PCSharedCount::~PCSharedCount(&v38);
  }
  OZScene::teardownFxPlugRenderContext(a2);
  v52 = v19;
  v55 = 0u;
  v56 = 0u;
  PCColorDescription::PCColorDescription(&v46[0]._pcColorDesc);
  v46[0]._isPremultiplied = 1;
  GLRenderer::getSceneHeNodeFromLiWorld(a2, (uint64_t)v16, (uint64_t)&v50, &var0, a4, (uint64_t)v46, a7, &v41, a5, a6);
  if (*a7)
  {
    *a8 = 0;
    if (v41)
      (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v41 + 24))(v41);
  }
  else
  {
    if (v41)
    {
      if (PCColorSpaceHandle::getCGColorSpace((OZRenderParams *)((char *)a3 + 784)))
      {
        CGColorSpace = FxColorDescription::getCGColorSpace(v46);
        v31 = PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)v57);
        OZAddGamutClip((uint64_t)&v41, CGColorSpace, v31, 1, (uint64_t *)v43);
        v32 = (PC_Sp_counted_base *)v43[0];
        if (v41 == (PC_Sp_counted_base *)v43[0])
        {
          if (v41)
            (*(void (**)(void))(*(_QWORD *)v41 + 24))();
        }
        else
        {
          if (v41)
          {
            (*(void (**)(void))(*(_QWORD *)v41 + 24))();
            v32 = (PC_Sp_counted_base *)v43[0];
          }
          v41 = v32;
        }
      }
    }
    else
    {
      v33 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v33);
      if (v41 == (PC_Sp_counted_base *)v33)
      {
        if (v33)
          (*(void (**)(HGNode *))(*(_QWORD *)v33 + 24))(v33);
      }
      else
      {
        if (v41)
          (*(void (**)(void))(*(_QWORD *)v41 + 24))();
        v41 = (PC_Sp_counted_base *)v33;
      }
    }
    OZRenderParams::getROI((OZRenderParams *)&v50, (float64x2_t *)v43);
    *(_OWORD *)((char *)a3 + 648) = *(_OWORD *)v43;
    OZRenderParams::getPixelTransform((OZRenderParams *)&v50, (uint64_t)v43);
    if ((LiAnimCamera **)((char *)a3 + 808) != v43)
    {
      for (i = 0; i != 16; i += 4)
      {
        v35 = (_OWORD *)((char *)a3 + i * 8 + 808);
        v36 = *(_OWORD *)&v43[i + 2];
        *v35 = *(_OWORD *)&v43[i];
        v35[1] = v36;
      }
    }
    *((_BYTE *)a3 + 936) = 1;
    *a8 = v41;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v46[0]._pcColorDesc._colorSpaceRef._obj);
  PCSharedCount::~PCSharedCount(&v48);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v49);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v50);
}

void sub_1B2EF98A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,CGColorSpace *a63)
{
  PCSharedCount *v63;
  uint64_t v64;

  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 24))(a16);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a63);
  PCSharedCount::~PCSharedCount(v63);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&STACK[0x290]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void GLRenderer::getSceneHeNodeFromLiWorld(OZScene *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, HGRenderer *a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X7>, PC_Sp_counted_base **a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  char v17;
  CGColorSpace *v18;
  CGColorSpace *obj;
  CGColorSpace *v21;
  PCShared_base *v22;
  double v23;
  double v24;
  unsigned int v25;
  unsigned __int32 v26;
  LiRenderer *v27;
  uint64_t WorkingColorDescription;
  CGColorSpace *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t DynamicRange;
  uint64_t ToneMapMethod;
  __n128 *v35;
  __n128 v36;
  uint64_t v37;
  float BlendingGamma;
  uint64_t RenderNodeList;
  __int128 v40;
  unsigned int v41;
  OZCrop *v42;
  PC_Sp_counted_base *var0;
  __int128 v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  char *OutputColorDescription;
  uint64_t v52;
  PC_Sp_counted_base *v53;
  PC_Sp_counted_base *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  int v59;
  __int128 v60;
  PCColorDescription v64[19];
  PCSharedCount v65;
  PCSharedCount v66;
  LiImageSource *v67;
  PCSharedCount v68;
  FxColorDescription v69;
  void *v70;
  int v71;
  uint64_t v72;
  int v73;
  char Do3DIntersectionAntialiasing;
  char v75;
  __int128 v76;
  _OWORD v77[2];
  int v78;
  char DoHighQualityResampling;
  char v80;
  char v81;
  char RasterizeEdges;
  char v83;
  CGColorSpace *v84;
  std::__shared_weak_count *v85;
  PCSharedCount v86;
  PCSharedCount v87;
  __int128 v88;
  float64x2_t v89;
  double v90[4];
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  float64x2_t v94;
  float64x2_t v95;
  CGColorSpace *v96;
  PCSharedCount v97[3];

  memset(v64, 0, 32);
  PCColorDescription::PCColorDescription(v64);
  v17 = 1;
  LOBYTE(v64[1]._colorSpaceRef._obj) = 1;
  v18 = *(CGColorSpace **)a6;
  obj = v64[0]._colorSpaceRef._obj;
  if (*(_QWORD *)a6)
    _ZF = v18 == v64[0]._colorSpaceRef._obj;
  else
    _ZF = 1;
  if (!_ZF)
  {
    PCCFRefTraits<CGColorSpace *>::release(v18);
    obj = v64[0]._colorSpaceRef._obj;
    v17 = (char)v64[1]._colorSpaceRef._obj;
  }
  *(_QWORD *)a6 = obj;
  v64[0]._colorSpaceRef._obj = 0;
  *(_DWORD *)(a6 + 8) = v64[0]._dynamicRange;
  *(PCToneMapMethod *)(a6 + 12) = v64[0]._toneMapMethod;
  *(_BYTE *)(a6 + 24) = v17;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v64[0]._colorSpaceRef._obj);
  *a7 = 0;
  v21 = *(CGColorSpace **)(a3 + 1280);
  v96 = v21;
  if (v21)
    v22 = (CGColorSpace *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24));
  else
    v22 = 0;
  PCSharedCount::PCSharedCount(v97, v22);
  if (!v96)
    throw_PCNullPointerException(1);
  if (((*(uint64_t (**)(CGColorSpace *))(*(_QWORD *)v96 + 704))(v96) & 1) != 0)
  {
    OZRenderParams::getPixelTransform((OZRenderParams *)a3, (uint64_t)v90);
    if (!v96)
      throw_PCNullPointerException(1);
    v23 = (*(double (**)(CGColorSpace *))(*(_QWORD *)v96 + 688))(v96);
    if (v23 != 1.0)
    {
      v90[0] = v23 * v90[0];
      v91.f64[0] = v23 * v91.f64[0];
      v93 = v23 * v93;
      v94.f64[0] = v23 * v94.f64[0];
    }
    OZRenderParams::getROI((OZRenderParams *)a3, &v89);
    v88 = xmmword_1B30503B0;
    OZRenderParams::getROI((OZRenderParams *)a3, (float64x2_t *)v64);
    v88 = *(_OWORD *)&v64[0]._colorSpaceRef._obj;
    if (LiRenderingTechnology::getUseHalfHeightFields((LiRenderingTechnology *)(a3 + 1316)))
    {
      v24 = (double)SDWORD1(v88) * a9 + a10;
      v25 = vcvtmd_s64_f64((double)(int)v88 + 0.0000001);
      v26 = vcvtpd_s64_f64((double)(int)v88 + (double)SDWORD2(v88)) - v25;
      *(_QWORD *)&v88 = __PAIR64__(vcvtmd_s64_f64(v24 + 0.0000001), v25);
      DWORD2(v88) = v26;
      HIDWORD(v88) = vcvtpd_s64_f64(v24 + (double)SHIDWORD(v88) * a9) - DWORD1(v88);
    }
    if (LiRenderingTechnology::getUseHalfHeightFields((LiRenderingTechnology *)(a3 + 1316)))
    {
      if (a9 != 1.0)
      {
        v91 = vmulq_n_f64(v91, a9);
        v92 = vmulq_n_f64(v92, a9);
      }
      if (a10 != 0.0)
      {
        v91 = vaddq_f64(v91, vmulq_n_f64(v94, a10));
        v92 = vaddq_f64(v92, vmulq_n_f64(v95, a10));
      }
    }
    v27 = (LiRenderer *)operator new();
    LiRenderer::LiRenderer(v27);
    v86.var0 = (PC_Sp_counted_base *)v27;
    PCSharedCount::PCSharedCount(&v87, (LiRenderer *)((char *)v27 + *(_QWORD *)(*(_QWORD *)v27 - 24)));
    if (!v86.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v86.var0 + 168))(v86.var0, *a4);
    if (!v86.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, CGColorSpace *))(*(_QWORD *)v86.var0 + 184))(v86.var0, v96);
    if (!v86.var0)
      throw_PCNullPointerException(1);
    if (!*(_QWORD *)(a3 + 1240))
      throw_PCNullPointerException(1);
    if (*(int *)(a3 + 576) >= 1)
    {
      WorkingColorDescription = OZRenderParams::getWorkingColorDescription((OZRenderParams *)a3);
      v29 = *(CGColorSpace **)WorkingColorDescription;
      v69._pcColorDesc._colorSpaceRef._obj = v29;
      if (v29)
        PCCFRefTraits<CGColorSpace *>::retain(v29);
      v30 = *(_QWORD *)(WorkingColorDescription + 8);
      v69._pcColorDesc._toneMapMethod._gain = *(float *)(WorkingColorDescription + 16);
      *(_QWORD *)&v69._pcColorDesc._dynamicRange = v30;
      v69._isPremultiplied = *(_BYTE *)(WorkingColorDescription + 24);
      OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)&v69);
      v32 = v31;
      DynamicRange = FxColorDescription::getDynamicRange(&v69);
      ToneMapMethod = FxColorDescription::getToneMapMethod(&v69);
      PCWorkingColor::PCWorkingColor(v64, a3 + 520, v32, DynamicRange, ToneMapMethod);
      v35 = (__n128 *)operator new();
      LiSolidSource::LiSolidSource((LiSolidSource *)v35);
      v36 = PCWorkingColor::operator=(v35 + 1, (__n128 *)v64);
      if (!v86.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, __n128 *, __n128))(*(_QWORD *)v86.var0 + 208))(v86.var0, v35, v36);
      if (!v86.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(void))(*(_QWORD *)v86.var0 + 224))();
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v64[0]._toneMapMethod._gain);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v69._pcColorDesc._colorSpaceRef._obj);
    }
    if (!v86.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v86.var0 + 51) = *(_BYTE *)(a3 + 1313);
    *a8 = 0;
    v37 = OZRenderParams::getWorkingColorDescription((OZRenderParams *)a3);
    BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a3);
    RenderNodeList = HGRenderJob::GetRenderNodeList((HGRenderJob *)a3);
    LiRenderParameters::LiRenderParameters(&v69, v37, RenderNodeList, BlendingGamma);
    v78 = *(_DWORD *)(a3 + 340);
    Do3DIntersectionAntialiasing = OZRenderParams::getDo3DIntersectionAntialiasing((OZRenderParams *)a3);
    v75 = *(_BYTE *)(a3 + 516);
    v40 = *(_OWORD *)(a3 + 1332);
    v76 = *(_OWORD *)(a3 + 1316);
    v77[0] = v40;
    *(_OWORD *)((char *)v77 + 14) = *(_OWORD *)(a3 + 1346);
    v69._pcColorDesc._colorSpaceRef._obj = v96;
    v73 = *(_DWORD *)(a2 + 176);
    DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling((OZRenderParams *)a3);
    RasterizeEdges = LiRenderingTechnology::getRasterizeEdges((LiRenderingTechnology *)(a3 + 1316));
    v80 = *(_BYTE *)(a3 + 512);
    LiRenderParameters::setHeliumRenderer((uint64_t)&v69, a5);
    v83 = *(_BYTE *)(a3 + 242);
    if (a1 && OZScene::setNeedsDesperationMode(a1, 0))
    {
      do
    }
    v81 = 0;
    v67 = 0;
    PCSharedCount::PCSharedCount(&v68);
    if (*(_BYTE *)(a3 + 1211))
    {
      v42 = (OZCrop *)operator new();
      OZCrop::OZCrop(v42);
      v65.var0 = (PC_Sp_counted_base *)v42;
      PCSharedCount::PCSharedCount(&v66, (OZCrop *)((char *)v42 + *(_QWORD *)(*(_QWORD *)v42 - 24)));
      OZRenderParams::getRenderBounds((OZRenderParams *)a3, (uint64_t)v64);
      __asm { FMOV            V0.2D, #-0.5 }
      *(float64x2_t *)&v64[0]._colorSpaceRef._obj = vaddq_f64(*(float64x2_t *)&v64[0]._colorSpaceRef._obj, vmulq_f64(*(float64x2_t *)&v64[0]._toneMapMethod._gain, _Q0));
      var0 = v65.var0;
      if (!v65.var0)
        throw_PCNullPointerException(1);
      v48 = *(_OWORD *)&v64[0]._toneMapMethod._gain;
      *(_OWORD *)((char *)v65.var0 + 40) = *(_OWORD *)&v64[0]._colorSpaceRef._obj;
      *(_OWORD *)((char *)var0 + 56) = v48;
      (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)var0 + 168))(var0, v86.var0);
      PCPtr<LiImageSource>::operator=<TXTextureDecal>((PC_Sp_counted_base **)&v67, &v65);
      PCSharedCount::~PCSharedCount(&v66);
    }
    else
    {
      PCPtr<LiImageSource>::operator=<TXTextureDecal>((PC_Sp_counted_base **)&v67, &v86);
    }
    LiAgent::LiAgent(v64, &v69, v90, 0);
    if (OZRenderParams::hasROI((OZRenderParams *)a3))
      LiAgent::setInputROI((uint64_t)v64, (__n128 *)&v88);
    OutputColorDescription = OZRenderParams::getOutputColorDescription((OZRenderParams *)a3);
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a6, (CGColorSpace **)OutputColorDescription);
    v52 = *((_QWORD *)OutputColorDescription + 1);
    *(_DWORD *)(a6 + 16) = *((_DWORD *)OutputColorDescription + 4);
    *(_QWORD *)(a6 + 8) = v52;
    *(_BYTE *)(a6 + 24) = OutputColorDescription[24];
    LiAgent::setRequestedColorDescription(&v64[0]._colorSpaceRef._obj, (const FxColorDescription *)a6);
    LiAgent::getHelium((LiAgent *)v64, v67, (HGNode **)&v65);
    v53 = *a8;
    v54 = v65.var0;
    if (*a8 == v65.var0)
    {
      if (v53)
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v53 + 24))(v53);
    }
    else
    {
      if (v53)
      {
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v53 + 24))(v53);
        v54 = v65.var0;
      }
      *a8 = v54;
    }
    v55 = *(_QWORD *)(a3 + 272);
    if (v55 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55))
      *a7 = 1;
    LiAgent::~LiAgent((LiAgent *)v64);
    PCSharedCount::~PCSharedCount(&v68);
    v56 = v85;
    if (v85)
    {
      p_shared_owners = (unint64_t *)&v85->__shared_owners_;
      do
        v58 = __ldaxr(p_shared_owners);
      while (__stlxr(v58 - 1, p_shared_owners));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v84);
    v70 = &unk_1E64FC2F8;
    if (v71 < 0)
      v59 = 1;
    else
      v59 = v71;
    PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v70, 0, v59);
    if (v72)
      MEMORY[0x1B5E2914C](v72, 0x1000C8077774924);
    v72 = 0;
    v71 = 0;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v69._isPremultiplied);
    OZRenderParams::getRenderGate((OZRenderParams *)a3, (uint64_t)v64);
    v60 = *(_OWORD *)&v64[0]._toneMapMethod._gain;
    *(_OWORD *)(a3 + 664) = *(_OWORD *)&v64[0]._colorSpaceRef._obj;
    *(_OWORD *)(a3 + 680) = v60;
    PCSharedCount::~PCSharedCount(&v87);
  }
  else
  {
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"GLRenderer::renderSingleFrame: error: invalid camera", 52);
    std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
    v50 = std::locale::use_facet((const std::locale *)v64, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
    std::locale::~locale((std::locale *)v64);
    std::ostream::put();
    std::ostream::flush();
    *a7 = 2;
    *a8 = 0;
  }
  PCSharedCount::~PCSharedCount(v97);
}

void sub_1B2EFA2B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  _QWORD *v16;
  PCSharedCount *v17;
  void *v20;

  PCSharedCount::~PCSharedCount(v17);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x238]);
  if (a2 == 3)
  {
    __cxa_begin_catch(a1);
    *v16 = 1;
    __cxa_end_catch();
  }
  else if (a2 == 2)
  {
    v20 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(_QWORD *)v20 + 40))(v20);
    *v16 = 2;
    __cxa_end_catch();
  }
  else
  {
    if (a2 != 1)
    {
      if (*a16)
        (*(void (**)(_QWORD))(*(_QWORD *)*a16 + 24))(*a16);
      PCSharedCount::~PCSharedCount(a13);
      PCSharedCount::~PCSharedCount(a10);
      _Unwind_Resume(a1);
    }
    __cxa_begin_catch(a1);
    *v16 = 2;
    __cxa_end_catch();
  }
  JUMPOUT(0x1B2EFA264);
}

void **std::vector<FxBalancedBlendRecord>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<FxBalancedBlendRecord>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B2EFA56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void makeBalancedBlendTree<std::__wrap_iter<FxBalancedBlendRecord *>>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>, int a4@<W2>)
{
  if (a4 == 1)
    makeBalancedBlendTree_RetimeAddBlend2<std::__wrap_iter<FxBalancedBlendRecord *>>(a1, a2, a3);
  else
    makeBalancedBlendTree_RetimeAddBlend6<std::__wrap_iter<FxBalancedBlendRecord *>>(a1, a2, a3);
}

_QWORD *PCPtr<LiAnimCamera>::operator=<LiCamera>(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  PCSharedCount *v4;
  PCSharedCount v6;
  PCSharedCount v7;
  void *lpsrc;
  PCSharedCount v9;

  lpsrc = a2;
  if (a2)
    a2 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  PCSharedCount::PCSharedCount(&v9, (PCShared_base *)a2);
  if (!lpsrc)
  {
    *a1 = 0;
    goto LABEL_7;
  }
  *a1 = v3;
  if (!v3)
  {
LABEL_7:
    PCSharedCount::PCSharedCount(&v7);
    v4 = &v7;
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v7);
    goto LABEL_8;
  }
  PCSharedCount::PCSharedCount(&v6, &v9);
  v4 = &v6;
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v6);
LABEL_8:
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(&v9);
  return a1;
}

void sub_1B2EFA658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount((PCSharedCount *)&a9);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

_QWORD *PCPtr<OZNodeCamera>::operator=<LiCamera>(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  PCSharedCount *v4;
  PCSharedCount v6;
  PCSharedCount v7;
  void *lpsrc;
  PCSharedCount v9;

  lpsrc = a2;
  if (a2)
    a2 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  PCSharedCount::PCSharedCount(&v9, (PCShared_base *)a2);
  if (!lpsrc)
  {
    *a1 = 0;
    goto LABEL_7;
  }
  *a1 = v3;
  if (!v3)
  {
LABEL_7:
    PCSharedCount::PCSharedCount(&v7);
    v4 = &v7;
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v7);
    goto LABEL_8;
  }
  PCSharedCount::PCSharedCount(&v6, &v9);
  v4 = &v6;
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v6);
LABEL_8:
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(&v9);
  return a1;
}

void sub_1B2EFA750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount((PCSharedCount *)&a9);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void fadeObjects2(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  double *v10;
  double *v11;
  _QWORD *v12;
  int v13;
  PCSharedCount *v15;
  _QWORD *v16;
  _QWORD *v17;
  PCSharedCount v18;
  _QWORD *v19;
  PCSharedCount v20;

  v6 = *a1;
  if (!v6)
    throw_PCNullPointerException(1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6);
  if (v7 >= 1)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      if (!*a1)
        throw_PCNullPointerException(1);
      v10 = (double *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 144))(*a1, v9);
      v11 = v10;
      if (v10)
      {
        v13 = *((_DWORD *)v11 + 130);
        if (v13 == (_DWORD)a2 && v12 != 0)
          goto LABEL_20;
        if (v12)
        {
          v19 = v12;
          PCSharedCount::PCSharedCount(&v20, (PCShared_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
          fadeObjects2(&v19, a2, a3);
          v15 = &v20;
          goto LABEL_19;
        }
      }
      else
      {
        v13 = MEMORY[0x208];
      }
      if (v13 == (_DWORD)a2)
        goto LABEL_20;
      v11[68] = v11[68] * a3;
      if (!v16)
        goto LABEL_20;
      v17 = v16;
      PCSharedCount::PCSharedCount(&v18, (PCShared_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
      fadeObjects2(&v17, a2, a3);
      v15 = &v18;
LABEL_19:
      PCSharedCount::~PCSharedCount(v15);
LABEL_20:
      v9 = (v9 + 1);
    }
    while (v8 != (_DWORD)v9);
  }
}

void sub_1B2EFA918(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void makeBalancedBlendTree_RetimeAddBlend2<std::__wrap_iter<FxBalancedBlendRecord *>>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  FxBalancedBlendRecord *v13;
  double InitialValue;
  FxBalancedBlendRecord *v15;
  double v16;
  HgcRetimeAddBlend2 *v17;
  double v18;
  double v19;
  float v20;
  HgcRetimeAddBlend2 *v21;
  float v22;
  BOOL v23;
  HgcRetimeAddBlend2 *v24;
  HgcRetimeAddBlend2 *v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  double v29[2];

  v27 = 0;
  v28 = 0;
  v26 = (uint64_t *)&v27;
  *(_QWORD *)&v29[0] = &v26;
  *(_QWORD *)&v29[1] = &v27;
  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      std::insert_iterator<std::multiset<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>>::operator=[abi:ne180100]((uint64_t)v29, v5);
      v5 += 2;
    }
    while (v5 != a2);
    if (v28 >= 2)
    {
      v6 = v28 >> 1;
      v7 = 1;
      do
      {
        v8 = v26;
        v9 = (uint64_t *)v26[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          v11 = v26;
          do
          {
            v10 = (uint64_t *)v11[2];
            v12 = *v10 == (_QWORD)v11;
            v11 = v10;
          }
          while (!v12);
        }
        FxSupport::makeRetimeAddBlend2(&v25);
        v13 = (FxBalancedBlendRecord *)(v8 + 4);
        InitialValue = OZConstantNode::getInitialValue((OZConstantNode *)(v8 + 4));
        v15 = (FxBalancedBlendRecord *)(v10 + 4);
        v16 = OZConstantNode::getInitialValue((OZConstantNode *)(v10 + 4));
        v17 = v25;
        FxBalancedBlendRecord::node(v13, v29);
        (*(void (**)(HgcRetimeAddBlend2 *, _QWORD, _QWORD))(*(_QWORD *)v17 + 120))(v17, 0, *(_QWORD *)&v29[0]);
        if (*(_QWORD *)&v29[0])
          (*(void (**)(_QWORD))(**(_QWORD **)&v29[0] + 24))(*(_QWORD *)&v29[0]);
        v18 = InitialValue + v16;
        v19 = InitialValue / v18;
        v20 = v19;
        (*(void (**)(HgcRetimeAddBlend2 *, _QWORD, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 0, v20, v20, v20, v20);
        v21 = v25;
        FxBalancedBlendRecord::node(v15, v29);
        (*(void (**)(HgcRetimeAddBlend2 *, uint64_t, _QWORD))(*(_QWORD *)v21 + 120))(v21, 1, *(_QWORD *)&v29[0]);
        if (*(_QWORD *)&v29[0])
          (*(void (**)(_QWORD))(**(_QWORD **)&v29[0] + 24))(*(_QWORD *)&v29[0]);
        v22 = 1.0 - v19;
        (*(void (**)(HgcRetimeAddBlend2 *, uint64_t, float, float, float, float))(*(_QWORD *)v25 + 96))(v25, 1, v22, v22, v22, v22);
        if ((v7 & 1) != 0)
          (*(void (**)(HgcRetimeAddBlend2 *, uint64_t, uint64_t))(*(_QWORD *)v25 + 136))(v25, 0xFFFFFFFFLL, 2);
        std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::erase(&v26, v26);
        std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::erase(&v26, v26);
        v24 = v25;
        if (v25)
          (*(void (**)(HgcRetimeAddBlend2 *))(*(_QWORD *)v25 + 16))(v25);
        FxBalancedBlendRecord::FxBalancedBlendRecord((uint64_t)v29, (uint64_t *)&v24, v18);
        if (v24)
          (*(void (**)(HgcRetimeAddBlend2 *))(*(_QWORD *)v24 + 24))(v24);
        std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_multi<FxBalancedBlendRecord const&>(&v26, v29);
        v23 = v28 == v6;
        if (v28 == v6)
          v6 = v28 >> 1;
        if (*(_QWORD *)&v29[0])
          (*(void (**)(void))(**(_QWORD **)&v29[0] + 24))();
        if (v25)
          (*(void (**)(HgcRetimeAddBlend2 *))(*(_QWORD *)v25 + 24))(v25);
        v7 ^= v23;
      }
      while (v28 > 1);
    }
  }
  FxBalancedBlendRecord::node((FxBalancedBlendRecord *)(v26 + 4), a3);
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy((uint64_t)&v26, v27);
}

void sub_1B2EFABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void OZCloneGenerator::registerRetiming(OZCloneGenerator *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      OZRetimingUtil::RetimingExaminer::RetimingExaminer((uint64_t)&OZCloneGenerator::registerRetiming(void)::sRetimer);
      OZCloneGenerator::registerRetiming(void)::sRetimer = (uint64_t)&unk_1E65B2C48;
      __cxa_atexit((void (*)(void *))OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate, &OZCloneGenerator::registerRetiming(void)::sRetimer, &dword_1B2737000);
    }
  }
}

void sub_1B2EFAD44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OZCloneGenerator::OZCloneGenerator(OZCloneGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v6;
  OZChannelFolder *v7;
  PCString v8;
  PCString v9;

  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *(_QWORD *)v6 = &off_1E65B1FA0;
  *(_QWORD *)(v6 + 16) = &unk_1E65B28A8;
  *(_QWORD *)(v6 + 48) = &unk_1E65B2B00;
  *(_QWORD *)(v6 + 6528) = &unk_1E65B2B58;
  v7 = (OZChannelFolder *)(v6 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 18776), a3, (OZChannelFolder *)(v6 + 448), 1u, 0, 0);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Source Node"));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((OZCloneGenerator *)((char *)this + 18904), &v9, v7, 0x12Cu, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Time Remap Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Clone Time Remap Label"));
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19064), 0, &v9, &v8, (OZChannelFolder *)((char *)this + 320), 0x130u, 2, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Time Scale"));
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 19320), 1.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x131u, 4259840, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Time Reverse"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19472), 0, &v9, (OZChannelFolder *)((char *)this + 320), 0x132u, 0x410000u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone End Condition Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Clone End Condition Label"));
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19624), &v9, &v8, (OZChannelFolder *)((char *)this + 320), 0x133u, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Loop Duration"));
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 19880), 0.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x134u, 32770, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Retime Frame"));
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 20032), 1.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x135u, 131074, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Retime Sampling Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Clone Retime Sampling Label"));
  OZChannelEnumRetime::OZChannelEnumRetime((OZCloneGenerator *)((char *)this + 20184), &v9, &v8, (OZChannelFolder *)((char *)this + 320), 0x136u, 2u);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Retime Frame Cache"));
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 20440), 1.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x137u, 131074, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Clone Duration Cache"));
  OZChannelDouble::OZChannelDouble((OZCloneGenerator *)((char *)this + 20592), 0.0, &v9, (OZChannelFolder *)((char *)this + 320), 0x138u, 2, 0, 0);
  PCString::~PCString(&v9);
  *((_DWORD *)this + 5186) = 0;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19880), 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 20032), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19320), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19472), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19064), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 20184), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19624), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 19880), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 19880), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 19880), 3.40282347e38);
}

void sub_1B2EFB22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, OZChanElementOrFootageRef *a12, OZChannelFolder *a13, OZChannelEnum *a14, PCString a15, PCString a16)
{
  OZElement *v16;
  OZChannel *v17;
  PCString *v18;
  OZChannel *v19;
  OZChannelBool *v20;
  OZChannelEnum *v21;
  OZChannel *v22;
  OZChannel *v23;

  PCString::~PCString(&a16);
  OZChannel::~OZChannel(v17);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v22);
  OZChannelEnum::~OZChannelEnum(v21);
  OZChannelBool::~OZChannelBool(v20);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a12);
  OZChannelFolder::~OZChannelFolder(a13);
  OZElement::~OZElement(v16);
  _Unwind_Resume(a1);
}

void OZCloneGenerator::OZCloneGenerator(OZCloneGenerator *this, const OZCloneGenerator *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *(_QWORD *)v5 = &off_1E65B1FA0;
  *(_QWORD *)(v5 + 16) = &unk_1E65B28A8;
  *(_QWORD *)(v5 + 48) = &unk_1E65B2B00;
  *(_QWORD *)(v5 + 6528) = &unk_1E65B2B58;
  v6 = (OZChannelFolder *)(v5 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 18776), (const OZChannelFolder *)((char *)a2 + 18776), (OZChannelFolder *)(v5 + 448));
  OZChanElementOrFootageRef::OZChanElementOrFootageRef((OZCloneGenerator *)((char *)this + 18904), (const OZCloneGenerator *)((char *)a2 + 18904), v6);
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19064), (const OZCloneGenerator *)((char *)a2 + 19064), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19320), (const OZChannelBase *)((char *)a2 + 19320), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2415) = &off_1E6551358;
  *((_QWORD *)this + 2417) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19472), (const OZChannelBase *)((char *)a2 + 19472), (OZChannelFolder *)((char *)this + 320));
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 19624), (const OZCloneGenerator *)((char *)a2 + 19624), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19880), (const OZChannelBase *)((char *)a2 + 19880), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2485) = &off_1E6551358;
  *((_QWORD *)this + 2487) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20032), (const OZChannelBase *)((char *)a2 + 20032), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2504) = &off_1E6551358;
  *((_QWORD *)this + 2506) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZCloneGenerator *)((char *)this + 20184), (const OZCloneGenerator *)((char *)a2 + 20184), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2523) = &unk_1E658E9B8;
  *((_QWORD *)this + 2525) = &unk_1E658ED28;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20440), (const OZChannelBase *)((char *)a2 + 20440), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2555) = &off_1E6551358;
  *((_QWORD *)this + 2557) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 20592), (const OZChannelBase *)((char *)a2 + 20592), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2574) = &off_1E6551358;
  *((_QWORD *)this + 2576) = &unk_1E65516B8;
  *((_DWORD *)this + 5186) = 0;
}

void sub_1B2EFB5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannel *a11, OZChannelEnum *a12, OZChanElementOrFootageRef *a13, OZChannelFolder *a14)
{
  OZElement *v14;
  OZChannel *v15;
  PCString *v16;
  OZChannel *v17;
  OZChannelEnum *v18;
  OZChannel *v19;

  OZChannel::~OZChannel(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(a13);
  OZChannelFolder::~OZChannelFolder(a14);
  OZElement::~OZElement(v14);
  _Unwind_Resume(a1);
}

void sub_1B2EFB648()
{
  JUMPOUT(0x1B2EFB610);
}

void sub_1B2EFB650()
{
  JUMPOUT(0x1B2EFB618);
}

void sub_1B2EFB658()
{
  JUMPOUT(0x1B2EFB620);
}

void sub_1B2EFB660()
{
  JUMPOUT(0x1B2EFB628);
}

void sub_1B2EFB668()
{
  JUMPOUT(0x1B2EFB630);
}

void sub_1B2EFB670()
{
  JUMPOUT(0x1B2EFB638);
}

void OZCloneGenerator::~OZCloneGenerator(OZCloneGenerator *this)
{
  *(_QWORD *)this = &off_1E65B1FA0;
  *((_QWORD *)this + 2) = &unk_1E65B28A8;
  *((_QWORD *)this + 6) = &unk_1E65B2B00;
  *((_QWORD *)this + 816) = &unk_1E65B2B58;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 5186);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20592));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20440));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2523);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20032));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19880));
  OZChannelEnum::~OZChannelEnum((OZCloneGenerator *)((char *)this + 19624));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19320));
  OZChannelEnum::~OZChannelEnum((OZCloneGenerator *)((char *)this + 19064));
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef((OZCloneGenerator *)((char *)this + 18904));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18776));
  OZElement::~OZElement((OZElement *)this);
}

{
  OZCloneGenerator::~OZCloneGenerator(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZCloneGenerator::~OZCloneGenerator(OZCloneGenerator *this)
{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 16));
}

{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 48));
}

{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 6528));
}

{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZCloneGenerator::~OZCloneGenerator((OZCloneGenerator *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZCloneGenerator::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 18904, (uint64_t)v4 + 18904);
  OZChannelBase::operator=(a1 + 19320, (uint64_t)v5 + 19320);
  OZChannelBase::operator=(a1 + 19472, (uint64_t)v5 + 19472);
  OZChannelBase::operator=(a1 + 19064, (uint64_t)v5 + 19064);
  OZChannelBase::operator=(a1 + 20032, (uint64_t)v5 + 20032);
  OZChannelBase::operator=(a1 + 20440, (uint64_t)v5 + 20440);
  OZChannelBase::operator=(a1 + 20184, (uint64_t)v5 + 20184);
  OZChannelBase::operator=(a1 + 19624, (uint64_t)v5 + 19624);
  OZChannelBase::operator=(a1 + 19880, (uint64_t)v5 + 19880);
  return OZChannelBase::operator=(a1 + 20592, (uint64_t)v5 + 20592);
}

uint64_t OZCloneGenerator::getTimeScale(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 19320;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 19320;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 19320;
  if (v2 == 1)
    return (uint64_t)this + 19320;
  return 0;
}

uint64_t OZCloneGenerator::getTimeReverse(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 19472;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 19472;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 19472;
  if (v2 == 1)
    return (uint64_t)this + 19472;
  return 0;
}

uint64_t OZCloneGenerator::getTimeRemap(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 19064;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 19064;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 19064;
  if (v2 == 1)
    return (uint64_t)this + 19064;
  return 0;
}

uint64_t OZCloneGenerator::getRetimeFrame(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 20032;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 20032;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 20032;
  if (v2 == 1)
    return (uint64_t)this + 20032;
  return 0;
}

uint64_t OZCloneGenerator::getRetimeFrameCache(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 20440;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 20440;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 20440;
  if (v2 == 1)
    return (uint64_t)this + 20440;
  return 0;
}

uint64_t OZCloneGenerator::getEndCondition(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 19624;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 19624;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 19624;
  if (v2 == 1)
    return (uint64_t)this + 19624;
  return 0;
}

uint64_t OZCloneGenerator::getLoopDuration(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 19880;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 19880;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 19880;
  if (v2 == 1)
    return (uint64_t)this + 19880;
  return 0;
}

uint64_t OZCloneGenerator::getDurationCache(OZCloneGenerator *this)
{
  int v2;

  if (!(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this))
    return (uint64_t)this + 20592;
  if (!*(_QWORD *)((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this) + 1584))
    return (uint64_t)this + 20592;
  v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 121) + 1584) + 320);
  if (!v2)
    return (uint64_t)this + 20592;
  if (v2 == 1)
    return (uint64_t)this + 20592;
  return 0;
}

uint64_t OZCloneGenerator::eval(OZCloneGenerator *this, OZRenderParams *a2)
{
  void *SourceNode;
  void *v5;
  void *v6;
  double TimeRemappedParams;
  uint64_t v8;
  _BYTE v10[1424];

  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode)
    return 0;
  if (!v5)
    return 0;
  v6 = v5;
  TimeRemappedParams = OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)v10);
  v8 = (*(uint64_t (**)(void *, _BYTE *, double))(*(_QWORD *)v6 + 96))(v6, v10, TimeRemappedParams);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
  return v8;
}

void sub_1B2EFBD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

void *OZCloneGenerator::getSourceNode(OZCloneGenerator *this)
{
  OZChannelBase *v1;
  unsigned int ValueAsUint;
  uint64_t ObjectManipulator;
  OZScene *v4;
  void *Node;

  v1 = (OZChannelBase *)((char *)this + 18904);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 18904), MEMORY[0x1E0CA2E68], 0.0);
  ObjectManipulator = OZChannelBase::getObjectManipulator(v1);
  v4 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
  if (v4 && (Node = OZScene::getNode(v4, ValueAsUint)) != 0)
  else
    return 0;
}

double OZCloneGenerator::getTimeRemappedParams@<D0>(OZCloneGenerator *this@<X0>, const OZRenderParams *a2@<X1>, OZRenderParams *a3@<X8>)
{
  double result;
  CMTime v7;
  __int128 v8;
  uint64_t v9;

  OZRenderParams::OZRenderParams(a3, a2);
  v7 = *(CMTime *)a2;
  OZCloneGenerator::getTimeRemappedFrame(this, &v7, (uint64_t)&v8);
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *((_QWORD *)a3 + 2) = v9;
  *((_QWORD *)a3 + 49) = 0;
  *((_QWORD *)a3 + 50) = 0;
  return result;
}

void sub_1B2EFBE10(_Unwind_Exception *a1)
{
  OZRenderParams *v1;

  OZRenderParams::~OZRenderParams(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZCloneGenerator::buildRenderGraph(OZCloneGenerator *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  _QWORD *result;
  uint64_t i;
  _BYTE *v10;
  __int128 v11;
  uint64_t j;
  _BYTE *v13;
  __int128 v14;
  void *SourceNode;
  void *v16;
  void *v17;
  OZImageElement *v18;
  int v19;
  int v20;
  _BYTE v21[128];
  OZRenderState v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[64];
  _QWORD v34[4];
  uint64_t v35;
  _BYTE v36[80];

  result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v33, a4);
    LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)&v22);
    for (i = 0; i != 128; i += 32)
    {
      v10 = &v33[i];
      v11 = *(_OWORD *)((char *)&v22.var0.var3 + i);
      *((_OWORD *)v10 + 6) = *(_OWORD *)((char *)&v22.var0.var0 + i);
      *((_OWORD *)v10 + 7) = v11;
    }
    v32 = 0x3FF0000000000000;
    v29 = 0x3FF0000000000000;
    v26 = 0x3FF0000000000000;
    v23 = 0x3FF0000000000000;
    v24 = 0u;
    v25 = 0u;
    v27 = 0u;
    v28 = 0u;
    v30 = 0u;
    v31 = 0u;
    OZRenderState::OZRenderState(&v22, a2);
    v22.var4 = 1;
    (*(void (**)(OZCloneGenerator *, uint64_t *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v23, &v22);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v35, (__int128 *)&v23, (uint64_t)v21);
    for (j = 0; j != 128; j += 32)
    {
      v13 = &v33[j];
      v14 = *(_OWORD *)&v21[j + 16];
      *((_OWORD *)v13 + 6) = *(_OWORD *)&v21[j];
      *((_OWORD *)v13 + 7) = v14;
    }
    SourceNode = OZCloneGenerator::getSourceNode(this);
    if (SourceNode)
    {
      if (v16)
      {
        v17 = v16;
        v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 1608))(v17);
        if (v18)
          v20 = v19;
        else
          v20 = 0;
        if (v20 == 1 && OZImageElement::isBackgroundDropZone(v18))
          v36[32] = 0;
      }
    }
    OZElement::buildRenderGraph((OZElement *)this, (CMTime *)a2, a3, (const OZRenderGraphState *)v33);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v36);
    return std::__list_imp<unsigned int>::clear(v34);
  }
  return result;
}

void sub_1B2EFBFE4(_Unwind_Exception *a1)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x2F0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x250]);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'OZCloneGenerator::buildRenderGraph(OZCloneGenerator *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  return OZCloneGenerator::buildRenderGraph((OZCloneGenerator *)((char *)this - 6528), a2, a3, a4);
}

void OZCloneGenerator::makeRenderImageSource(OZCloneGenerator *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, LiPadImage **a4@<X8>)
{
  void *SourceNode;
  char *v9;
  char *v10;
  int v11;
  LiPadImage *v17;
  __n128 v18;
  PCSharedCount v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[64];
  uint64_t v24[20];
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  char v29;
  OZRenderState v30;
  _BYTE v31[72];
  OZRenderState v32;
  PCSharedCount v33;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (SourceNode
  {
    v10 = v9;
    OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)&v32);
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v31, (OZImageNode *)(v10 + 6528), (OZRenderParams *)&v32);
    OZRenderState::OZRenderState(&v30, &v32);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v10 + 1600))(v10))
      v30.var19 = 0;
    OZRenderParams::setState((OZRenderParams *)&v32, &v30);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v23, a3);
    v21 = 0;
    *(_QWORD *)&v22 = 0;
    v20 = &unk_1E64FC250;
    BYTE8(v22) = 0;
    if (v26 < 0)
      v11 = 1;
    else
      v11 = v26;
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)&v25, 0, v11);
    v27 = BYTE8(v22);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v20);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v10 + 1608))(v10))
      v28 = 0;
    v29 = 1;
    (*(void (**)(char *, OZRenderState *, _BYTE *, uint64_t))(*(_QWORD *)v10 + 1936))(v10, &v32, v23, 1);
    if (OZElement::isOwner360((OZElement *)this))
    {
      v20 = 0;
      v21 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      v22 = _Q0;
      (*(void (**)(OZCloneGenerator *, void **, OZRenderState *))(*(_QWORD *)this + 1480))(this, &v20, &v30);
      v17 = (LiPadImage *)operator new();
      LiPadImage::LiPadImage(v17);
      v18 = LiPadImage::SetDOD((uint64_t)v17, (uint64_t)&v20);
      (*(void (**)(LiPadImage *, LiPadImage *, __n128))(*(_QWORD *)v17 + 168))(v17, *a4, v18);
      PCSharedCount::PCSharedCount(&v19, (LiPadImage *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
      *a4 = v17;
      PCSharedCount::PCSharedCount(&v33, &v19);
      PCSharedCount::operator=((uint64_t *)a4 + 1, (uint64_t *)&v33);
      PCSharedCount::~PCSharedCount(&v33);
      PCSharedCount::~PCSharedCount(&v19);
    }
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v25);
    std::__list_imp<unsigned int>::clear(v24);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v31);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v32);
  }
  else
  {
    *a4 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)a4 + 1, 0);
  }
}

void sub_1B2EFC2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  PCSharedCount *v16;
  uint64_t v17;
  PCSharedCount *v18;
  uint64_t v19;
  va_list va;

  va_start(va, a16);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v19 - 72));
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v16 + 1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v17);
  std::__list_imp<unsigned int>::clear(va);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x270]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZCloneGenerator::makeRenderImageSource(OZCloneGenerator *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, LiPadImage **a4@<X8>)
{
  OZCloneGenerator::makeRenderImageSource((OZCloneGenerator *)((char *)this - 6528), a2, a3, a4);
}

uint64_t OZCloneGenerator::doesTransformFromLocalToScreenSpace(OZCloneGenerator *this, const OZRenderParams *a2)
{
  return 0;
}

uint64_t OZCloneGenerator::areEffectsAppliedInScreenSpace(OZCloneGenerator *this)
{
  void *SourceNode;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  return (*(uint64_t (**)(void *))(*(_QWORD *)SourceNode + 144))(SourceNode);
}

uint64_t `non-virtual thunk to'OZCloneGenerator::areEffectsAppliedInScreenSpace(OZCloneGenerator *this)
{
  void *SourceNode;

  SourceNode = OZCloneGenerator::getSourceNode((OZCloneGenerator *)((char *)this - 6528));
  return (*(uint64_t (**)(void *))(*(_QWORD *)SourceNode + 144))(SourceNode);
}

__n128 OZCloneGenerator::getImageBounds(OZCloneGenerator *a1, __n128 *a2, const OZRenderState *a3)
{
  _QWORD *SourceNode;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __n128 result;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  __int128 v18;
  int64_t v19;
  OZRenderState v20;

  SourceNode = OZCloneGenerator::getSourceNode(a1);
  if (SourceNode)
  {
    v7 = SourceNode;
    OZRenderState::OZRenderState(&v20, a3);
    var0 = a3->var0;
    OZCloneGenerator::getTimeRemappedFrame(a1, (CMTime *)&var0, (uint64_t)&v18);
    *(_OWORD *)&v20.var0.var0 = v18;
    v20.var0.var3 = v19;
    if (v8)
    {
      v9 = v8;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v8 + 1608))(v8))
        v20.var18 = 0;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v9 + 1600))(v9))
        v20.var19 = 0;
    }
    v11 = 16;
    if (!v10)
      v11 = 80;
    (*(void (**)(_QWORD *, __n128 *, OZRenderState *))(*v7 + v11))(v7, a2, &v20);
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = result;
  }
  return result;
}

double OZCloneGenerator::getTimeRemappedFrame@<D0>(OZCloneGenerator *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  OZChannelBase *v6;
  uint64_t v7;
  uint64_t v8;
  CMTimeEpoch epoch;
  void *SourceNode;
  double result;
  void *v12;
  CMTime v13[2];
  __n128 v14;
  CMTimeEpoch v15;
  CMTime v16;
  CMTime v17;
  CMTime time2;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = (OZChannelBase *)(*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 640))(this);
  OZRetimingUtil::RemapTimeValue(v6, (OZChannelObjectRoot *)a2, (uint64_t *)a3);
  memset(&v16, 0, sizeof(v16));
  (*(void (**)(CMTime *__return_ptr, OZCloneGenerator *))(*(_QWORD *)this + 2264))(&v16, this);
  v13[0] = *(CMTime *)a3;
  v7 = MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(v13, &time2) < 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)v7;
    epoch = *(_QWORD *)(v7 + 16);
  }
  else
  {
    v13[0] = *(CMTime *)a3;
    time2 = v16;
    if (CMTimeCompare(v13, &time2) < 0)
      goto LABEL_6;
    v8 = (*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v14);
    v13[0] = v16;
    *(__n128 *)&time2.value = v14;
    time2.epoch = v15;
    PC_CMTimeSaferSubtract(v13, &time2, (uint64_t)&v17);
    *(_OWORD *)a3 = *(_OWORD *)&v17.value;
    epoch = v17.epoch;
  }
  *(_QWORD *)(a3 + 16) = epoch;
LABEL_6:
  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (SourceNode)
  {
    if (v12)
    {
      (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v12 + 1128))(v13);
      v17 = v13[0];
      time2 = *(CMTime *)a3;
      PC_CMTimeSaferAdd(&time2, &v17, (uint64_t)v13);
      result = *(double *)&v13[0].value;
      *(CMTime *)a3 = v13[0];
    }
  }
  return result;
}

double `non-virtual thunk to'OZCloneGenerator::getImageBounds(uint64_t a1, __n128 *a2, const OZRenderState *a3)
{
  double result;

  *(_QWORD *)&result = OZCloneGenerator::getImageBounds((OZCloneGenerator *)(a1 - 6528), a2, a3).n128_u64[0];
  return result;
}

uint64_t OZCloneGenerator::getImageBoundsWithEffects(OZCloneGenerator *a1, uint64_t a2, const OZRenderState *a3)
{
  void *SourceNode;
  void *v7;
  void *v8;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  __int128 v11;
  int64_t v12;
  OZRenderState v13;

  if (((*(uint64_t (**)(OZCloneGenerator *))(*(_QWORD *)a1 + 416))(a1) & 1) == 0)
    return (*(uint64_t (**)(OZCloneGenerator *, uint64_t, const OZRenderState *))(*(_QWORD *)a1 + 1520))(a1, a2, a3);
  OZRenderState::OZRenderState(&v13, a3);
  var0 = a3->var0;
  OZCloneGenerator::getTimeRemappedFrame(a1, (CMTime *)&var0, (uint64_t)&v11);
  *(_OWORD *)&v13.var0.var0 = v11;
  v13.var0.var3 = v12;
  SourceNode = OZCloneGenerator::getSourceNode(a1);
  if (SourceNode)
  {
    if (v7)
    {
      v8 = v7;
      {
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v8 + 1608))(v8))
          v13.var18 = 0;
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v8 + 1600))(v8))
          v13.var19 = 0;
      }
    }
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 122) + 16) + 24) = (char *)a1 + 6528;
  return (*(uint64_t (**)(_QWORD, uint64_t, OZRenderState *))(**(_QWORD **)(*((_QWORD *)a1 + 123) + 16) + 80))(*(_QWORD *)(*((_QWORD *)a1 + 123) + 16), a2, &v13);
}

uint64_t `non-virtual thunk to'OZCloneGenerator::getImageBoundsWithEffects(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  return OZCloneGenerator::getImageBoundsWithEffects((OZCloneGenerator *)(a1 - 6528), a2, a3);
}

uint64_t OZCloneGenerator::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1560))(a1);
}

uint64_t `non-virtual thunk to'OZCloneGenerator::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 6528) + 1560))(a1 - 6528);
}

uint64_t OZCloneGenerator::getOriginalBounds(uint64_t a1, uint64_t a2, OZRenderState *a3)
{
  OZRenderState v6;

  OZRenderState::OZRenderState(&v6, a3);
  *(_WORD *)&v6.var18 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, OZRenderState *))(*(_QWORD *)a1 + 1488))(a1, a2, &v6);
}

void OZCloneGenerator::getDimensions(OZCloneGenerator *this, float *a2, float *a3, const OZRenderState *a4)
{
  void *SourceNode;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  __int128 v10;
  int64_t v11;
  OZRenderState v12;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  *a3 = 0.0;
  *a2 = 0.0;
  OZRenderState::OZRenderState(&v12, a4);
  var0 = a4->var0;
  OZCloneGenerator::getTimeRemappedFrame(this, (CMTime *)&var0, (uint64_t)&v10);
  *(_OWORD *)&v12.var0.var0 = v10;
  v12.var0.var3 = v11;
  *(_WORD *)&v12.var18 = 0;
  if (SourceNode)
    (*(void (**)(void *, float *, float *, OZRenderState *))(*(_QWORD *)SourceNode + 96))(SourceNode, a2, a3, &v12);
}

void `non-virtual thunk to'OZCloneGenerator::getDimensions(OZCloneGenerator *this, float *a2, float *a3, const OZRenderState *a4)
{
  OZCloneGenerator::getDimensions((OZCloneGenerator *)((char *)this - 6528), a2, a3, a4);
}

uint64_t OZCloneGenerator::hasDescendants(OZCloneGenerator *this)
{
  return 0;
}

uint64_t OZCloneGenerator::hasEnabledMasks(OZCloneGenerator *this)
{
  void *SourceNode;
  void *v3;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (SourceNode
  {
    return 1;
  }
  else
  {
    return OZElement::hasEnabledMasks((OZElement *)this);
  }
}

void *OZCloneGenerator::shouldWrapTexture(OZCloneGenerator *this)
{
  void *SourceNode;
  void *result;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (SourceNode)
  {
    if (result)
      return (void *)((*(unsigned int (**)(void *))(*(_QWORD *)result + 1864))(result) ^ 1);
  }
  result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result)
      return (void *)((*(unsigned int (**)(void *))(*(_QWORD *)result + 1864))(result) ^ 1);
  }
  return result;
}

_QWORD *OZCloneGenerator::getMasks(OZCloneGenerator *a1, _QWORD *a2)
{
  void *SourceNode;
  void *v5;

  SourceNode = OZCloneGenerator::getSourceNode(a1);
  if (SourceNode)
  {
    if (v5)
      (*(void (**)(void *, _QWORD *))(*(_QWORD *)v5 + 1904))(v5, a2);
  }
  return OZElement::getMasks((uint64_t)a1, a2);
}

void OZCloneGenerator::setName(OZCloneGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18776), a2, 0);
  OZObjectManipulator::setName((OZCloneGenerator *)((char *)this + 16), a2, a3);
}

void `non-virtual thunk to'OZCloneGenerator::setName(OZCloneGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18760), a2, 0);
  OZObjectManipulator::setName(this, a2, a3);
}

uint64_t OZCloneGenerator::numberOfDescendants(OZCloneGenerator *this)
{
  return 0;
}

_QWORD *OZCloneGenerator::getNaturalDuration@<X0>(OZCloneGenerator *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  __int128 v7;
  uint64_t v8;

  result = OZCloneGenerator::getSourceNode(this);
  if (result
  {
    result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*result + 1128))(v6);
    *(_OWORD *)a2 = v7;
    v4 = v8;
  }
  else
  {
    v5 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    v4 = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)(a2 + 16) = v4;
  return result;
}

_QWORD *`non-virtual thunk to'OZCloneGenerator::getNaturalDuration@<X0>(OZCloneGenerator *this@<X0>, uint64_t a2@<X8>)
{
  return OZCloneGenerator::getNaturalDuration((OZCloneGenerator *)((char *)this - 16), a2);
}

uint64_t OZCloneGenerator::getNaturalDurationFlags(OZCloneGenerator *this)
{
  return 6;
}

uint64_t `non-virtual thunk to'OZCloneGenerator::getNaturalDurationFlags(OZCloneGenerator *this)
{
  return 6;
}

double OZCloneGenerator::getPixelAspectRatio(OZCloneGenerator *this)
{
  void *SourceNode;
  void *v2;
  double result;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode)
    return 1.0;
  if (!v2)
    return 1.0;
  (*(void (**)(void *))(*(_QWORD *)v2 + 1328))(v2);
  return result;
}

double OZCloneGenerator::getPixelAspectRatioRN(OZCloneGenerator *this)
{
  void *SourceNode;
  void *v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  double result;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (SourceNode)
  {
    if (v2)
    {
      v3 = v2;
      if (v4)
      {
        v6 = 166;
        v5 = v4;
LABEL_7:
        (*(void (**)(void))(*v5 + 8 * v6))();
        return result;
      }
      if (v5)
      {
        v6 = 171;
        goto LABEL_7;
      }
    }
  }
  return 1.0;
}

double `non-virtual thunk to'OZCloneGenerator::getPixelAspectRatioRN(OZCloneGenerator *this)
{
  return OZCloneGenerator::getPixelAspectRatioRN((OZCloneGenerator *)((char *)this - 6528));
}

uint64_t OZCloneGenerator::parseEnd(OZCloneGenerator *this, PCSerializerReadStream *a2)
{
  OZElement::parseEnd((OZElement *)this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20032), 0x20000, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20440), 0x20000, 1);
  return 1;
}

uint64_t `non-virtual thunk to'OZCloneGenerator::parseEnd(OZCloneGenerator *this, PCSerializerReadStream *a2)
{
  OZCloneGenerator::parseEnd((OZCloneGenerator *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZCloneGenerator::didFinishLoadingIntoScene(OZElement *this)
{
  OZRetimingUtil *v2;
  uint64_t v3;
  const CMTime *v4;
  __n128 v6;

  OZElement::didFinishLoadingIntoScene(this);
  v2 = (OZRetimingUtil *)(*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 640))(this);
  v3 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), &v6);
  return OZRetimingUtil::FixLoadedRetimingState(v2, (OZChannelObjectRoot *)&v6, v4);
}

uint64_t `non-virtual thunk to'OZCloneGenerator::didFinishLoadingIntoScene(OZCloneGenerator *this)
{
  return OZCloneGenerator::didFinishLoadingIntoScene((OZElement *)((char *)this - 16));
}

uint64_t OZCloneGenerator::openMedia(OZCloneGenerator *this)
{
  void *SourceNode;
  void *v2;

  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (SourceNode
  {
    return (*(uint64_t (**)(void *))(*(_QWORD *)v2 + 104))(v2);
  }
  else
  {
    return 0;
  }
}

uint64_t OZCloneGenerator::prerollBegin(OZCloneGenerator *a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  void *SourceNode;
  void *v11;
  void *v12;
  uint64_t v13;
  _BYTE v15[1424];

  OZSceneNode::prerollBegin((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
  SourceNode = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode)
    return 0;
  if (!v11)
    return 0;
  v12 = v11;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v15);
  v13 = (*(uint64_t (**)(void *, _BYTE *, uint64_t, uint64_t, double))(*(_QWORD *)v12 + 112))(v12, v15, a3, a4, a5);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v13;
}

void sub_1B2EFCEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZCloneGenerator::prerollEnd(OZCloneGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  void *SourceNode;
  void *v7;
  void *v8;
  double TimeRemappedParams;
  uint64_t v10;
  _BYTE v12[1424];

  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode)
    return 0;
  if (!v7)
    return 0;
  v8 = v7;
  TimeRemappedParams = OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)v12);
  v10 = (*(uint64_t (**)(void *, _BYTE *, PMFrameRequest *, double))(*(_QWORD *)v8 + 120))(v8, v12, a3, TimeRemappedParams);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v12);
  return v10;
}

void sub_1B2EFCF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZCloneGenerator::setRate(OZCloneGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  void *SourceNode;
  void *v9;
  void *v10;
  uint64_t v11;
  _BYTE v13[1424];

  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  SourceNode = OZCloneGenerator::getSourceNode(this);
  if (!SourceNode)
    return 0;
  if (!v9)
    return 0;
  v10 = v9;
  OZCloneGenerator::getTimeRemappedParams(this, a2, (OZRenderParams *)v13);
  v11 = (*(uint64_t (**)(void *, _BYTE *, PMFrameRequest *, double))(*(_QWORD *)v10 + 128))(v10, v13, a3, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v13);
  return v11;
}

void sub_1B2EFD03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZCloneGenerator::scheduleTokens(OZCloneGenerator *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  void *SourceNode;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v15[3];
  _BYTE v16[1424];
  void **v17;

  OZSceneNode::scheduleTokens((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  SourceNode = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode)
    return 0;
  if (!v11)
    return 0;
  v12 = v11;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v16);
  memset(v15, 0, sizeof(v15));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v15, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZCloneGenerator *, const OZRenderParams *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v15, a4);
  v13 = (*(uint64_t (**)(void *, _BYTE *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v12 + 136))(v12, v16, v15, a4, a5);
  v17 = (void **)v15;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v17);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v16);
  return v13;
}

void sub_1B2EFD16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCloneGenerator::hintTokensWillImage(OZCloneGenerator *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  void *SourceNode;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[3];
  _BYTE v14[1424];
  void **v15;

  OZSceneNode::hintTokensWillImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  SourceNode = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode)
    return 0;
  if (!v9)
    return 0;
  v10 = v9;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v14);
  memset(v13, 0, sizeof(v13));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZCloneGenerator *, const OZRenderParams *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v13, a4);
  v11 = (*(uint64_t (**)(void *, _BYTE *, _QWORD *, uint64_t))(*(_QWORD *)v10 + 144))(v10, v14, v13, a4);
  v15 = (void **)v13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v14);
  return v11;
}

void sub_1B2EFD2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZCloneGenerator::getTokensImage(OZCloneGenerator *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  void *SourceNode;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[3];
  _BYTE v14[1424];
  void **v15;

  OZSceneNode::getTokensImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  SourceNode = OZCloneGenerator::getSourceNode(a1);
  if (!SourceNode)
    return 0;
  if (!v9)
    return 0;
  v10 = v9;
  OZCloneGenerator::getTimeRemappedParams(a1, a2, (OZRenderParams *)v14);
  memset(v13, 0, sizeof(v13));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZCloneGenerator *, const OZRenderParams *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v13, a4);
  v11 = (*(uint64_t (**)(void *, _BYTE *, _QWORD *, uint64_t))(*(_QWORD *)v10 + 152))(v10, v14, v13, a4);
  v15 = (void **)v13;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v14);
  return v11;
}

void sub_1B2EFD3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void OZCloneGenerator::remapTokens(OZCloneGenerator *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  CMTime v20;
  __int128 v21;
  uint64_t v22;
  CMTime v23;

  OZSceneNode::remapTokens((uint64_t)a1, a2, (uint64_t)a3, a4);
  v7 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + 48 * v8;
      v13 = *(_QWORD *)(v10 + 24);
      v12 = (uint64_t *)(v10 + 24);
      v11 = v13;
      if (v12[1] != v13)
      {
        v14 = 0;
        v15 = 1;
        do
        {
          v16 = 3 * v14;
          v23 = *(CMTime *)(v11 + 24 * v14);
          v21 = 0uLL;
          v22 = 0;
          v20 = v23;
          OZCloneGenerator::getTimeRemappedFrame(a1, &v20, (uint64_t)&v21);
          v17 = *(_QWORD *)(*a3 + 48 * v8 + 24) + 8 * v16;
          v18 = v21;
          *(_QWORD *)(v17 + 16) = v22;
          *(_OWORD *)v17 = v18;
          v14 = v15;
          v11 = *v12;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 3) > v15++);
        v7 = *a3;
        v6 = a3[1];
      }
      v8 = ++v9;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) > v9);
  }
}

void *OZCloneGenerator::pruneTokensAtTime(OZCloneGenerator *this, CMTime *a2, const char *a3)
{
  void *result;
  __int128 v7;
  CMTimeEpoch epoch;
  CMTime v9;

  v9 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v9, a3);
  result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result)
    {
      v7 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 160))(result, &v7, a3);
    }
  }
  return result;
}

void *OZCloneGenerator::pruneTokensExceptAtTime(OZCloneGenerator *this, CMTime *a2, const char *a3)
{
  void *result;
  __int128 v7;
  CMTimeEpoch epoch;
  CMTime v9;

  v9 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v9, a3);
  result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result)
    {
      v7 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 168))(result, &v7, a3);
    }
  }
  return result;
}

void *OZCloneGenerator::pruneAllTokens(OZCloneGenerator *this, const char *a2)
{
  void *result;

  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  result = OZCloneGenerator::getSourceNode(this);
  if (result)
  {
    if (result)
      return (void *)(*(uint64_t (**)(void *, const char *))(*(_QWORD *)result + 176))(result, a2);
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimingGroupChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (v3)
      return v3 + 18264;
    else
      return 0;
  }
  return result;
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimeScaleChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getTimeScale(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimeReverseChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getTimeReverse(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getTimeRemapChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getTimeRemap(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getRetimeFrameChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getRetimeFrame(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getRetimeFrameCacheChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getRetimeFrameCache(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getEndConditionChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getEndCondition(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getLoopDurationChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getLoopDuration(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t OZRetimingUtil::RetimingExaminerTemplate<OZCloneGenerator>::getDurationCacheChannel(uint64_t a1, uint64_t a2)
{
  const void *v2;
  OZCloneGenerator *v3;

  v2 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (v2
  {
    return OZCloneGenerator::getDurationCache(v3);
  }
  else
  {
    return 0;
  }
}

void OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(OZChan3DEngineSceneFileRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  uint64_t v11;
  __int128 v12;

  Instance = (OZFactory *)OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(this);
  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65B2CC8;
  *((_QWORD *)this + 2) = &unk_1E65B3058;
  v12 = xmmword_1B355DE50;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID(v11, (__n128 *)&v12);
}

void sub_1B2EFD9F4(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(OZChan3DEngineSceneFileRefWithPicker_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChan3DEngineSceneFileRefWithPicker_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChan3DEngineSceneFileRefWithPicker_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChan3DEngineSceneFileRefWithPicker_Factory::_instance;
}

void OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(OZChan3DEngineSceneFileRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;
  __int128 v5;

  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, a2, a3, a4);
  *v4 = &off_1E65B2CC8;
  v4[2] = &unk_1E65B3058;
  v5 = xmmword_1B355DE50;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)v4, (__n128 *)&v5);
}

void sub_1B2EFDABC(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(OZChan3DEngineSceneFileRefWithPicker *this, const OZChan3DEngineSceneFileRefWithPicker *a2, OZChannelFolder *a3)
{
  _QWORD *v3;
  __int128 v4;

  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, a2, a3);
  *v3 = &off_1E65B2CC8;
  v3[2] = &unk_1E65B3058;
  v4 = xmmword_1B355DE50;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)v3, (__n128 *)&v4);
}

void sub_1B2EFDB24(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChan3DEngineSceneFileRefWithPicker::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  unint64_t v4;
  uint64_t result;
  __int128 v6;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)((*(uint64_t (**)(const OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2) + 8);
  v6 = xmmword_1B355DE50;
  result = OZFactory::isKindOfClass(v4, (int32x4_t *)&v6);
  if ((_DWORD)result)
    return OZChanObjectRefWithPicker::canReferenceObject(this, a2);
  return result;
}

void std::__call_once_param<std::tuple<OZChan3DEngineSceneFileRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChan3DEngineSceneFileRefWithPicker_Factory *v0;

  v0 = (OZChan3DEngineSceneFileRefWithPicker_Factory *)operator new();
  OZChan3DEngineSceneFileRefWithPicker_Factory::OZChan3DEngineSceneFileRefWithPicker_Factory(v0);
  OZChan3DEngineSceneFileRefWithPicker_Factory::_instance = (uint64_t)v0;
}

void sub_1B2EFDBEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChan3DEngineSceneFileRefWithPicker_Factory::OZChan3DEngineSceneFileRefWithPicker_Factory(OZChan3DEngineSceneFileRefWithPicker_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E3F0;
  v4 = xmmword_1B355E400;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65B30C8;
  *((_QWORD *)this + 16) = &unk_1E65B3198;
}

void sub_1B2EFDC8C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChan3DEngineSceneFileRefWithPicker *OZChan3DEngineSceneFileRefWithPicker_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChan3DEngineSceneFileRefWithPicker *v6;

  v6 = (OZChan3DEngineSceneFileRefWithPicker *)operator new();
  OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(v6, this, a2, a3);
  return v6;
}

void sub_1B2EFDCFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChan3DEngineSceneFileRefWithPicker *OZChan3DEngineSceneFileRefWithPicker_Factory::createCopy(OZChan3DEngineSceneFileRefWithPicker_Factory *this, OZFactoryBase *a2)
{
  OZChan3DEngineSceneFileRefWithPicker *v3;
  const OZChan3DEngineSceneFileRefWithPicker *v4;

  v3 = (OZChan3DEngineSceneFileRefWithPicker *)operator new();
  OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2EFDD88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChan3DEngineSceneFileRefWithPicker *OZChan3DEngineSceneFileRefWithPicker_Factory::createChannelCopy(OZChan3DEngineSceneFileRefWithPicker_Factory *this, OZChannelBase *a2)
{
  OZChan3DEngineSceneFileRefWithPicker *v3;
  const OZChan3DEngineSceneFileRefWithPicker *v4;

  v3 = (OZChan3DEngineSceneFileRefWithPicker *)operator new();
  OZChan3DEngineSceneFileRefWithPicker::OZChan3DEngineSceneFileRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2EFDE14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

uint64_t **OZRenderParams::setFFInputPixelTransform(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t **result;
  uint64_t **v6;
  uint64_t i;
  uint64_t j;
  unsigned int v9;
  unsigned int *v10;

  v9 = a2;
  v4 = *(_QWORD *)(a1 + 1240);
  if (!v4)
    throw_PCNullPointerException(1);
  v10 = &v9;
  result = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v4 + 64), &v9, (uint64_t)&std::piecewise_construct, &v10);
  v6 = result + 5;
  if (result + 5 != a3)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        v6[j] = a3[j];
      v6 += 4;
      a3 += 4;
    }
  }
  return result;
}

uint64_t OZXGetFrameAsRenderGraph(_QWORD *a1, CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8, void *a9, HGRenderer *a10, METimeRemap **a11)
{
  uint64_t i;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t **v26;
  uint64_t **v27;
  __int128 v28;
  unsigned int v29;
  int v30;
  uint64_t *v31;
  int var0;
  unsigned int v33;
  uint64_t **v34;
  float v35;
  float v36;
  float64x2_t v37;
  float v38;
  int64x2_t v39;
  float64x2_t v40;
  int32x2_t v41;
  int (*v42)(void);
  OZScene *v43;
  uint64_t v44;
  int64x2_t v45;
  int ActiveCamera;
  OZSceneCamera *v47;
  METimeRemap *v48;
  METimeRemap *v49;
  PCMutex *v51;
  _QWORD *v52;
  _BYTE v53[1424];
  PCSharedCount v54;
  PCSharedCount v55;
  CMTime v56;
  METimeRemap *v57;
  PCSharedCount v58;
  float64x2_t v59[3];
  double v60;
  CMTime v61;
  _BYTE v62[272];
  float64x2_t *v63;
  __int128 v64;
  __int128 v65;
  int v66;
  __int128 v67;
  float64x2_t v68;
  int32x2_t v69;
  int32x2_t v70;
  _BYTE v71[132];
  _DWORD v72[15];
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75[20];
  char v76;
  int v77;
  id v78;
  PCMutex *RenderEngineMutex;
  char v80;

  RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
  v51 = RenderEngineMutex;
  PCMutex::lock(RenderEngineMutex);
  v80 = 1;
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v78);
  OZRenderParams::OZRenderParams((OZRenderParams *)v62);
  if (v71 != a8)
  {
    for (i = 0; i != 128; i += 32)
    {
      v20 = &v71[i];
      v21 = *(_OWORD *)&a8[i + 16];
      *v20 = *(_OWORD *)&a8[i];
      v20[1] = v21;
    }
  }
  v71[128] = 1;
  v22 = *(_QWORD *)(a7 + 64);
  v23 = *(_QWORD *)(a7 + 72);
  if (a1)
  {
    if (*a1)
    {
      v24 = *(_QWORD *)(*a1 + 24);
      if (v24)
        OZScene::setRawWorkingGamut(v24, *(unsigned __int8 *)(a7 + 80));
    }
  }
  v61 = *a2;
  OZX_prepareForRender(a1, &v61, *(_DWORD *)(a7 + 48), *(_DWORD *)(a7 + 56) != 0, *(_DWORD *)(a7 + 52), *(float *)a7, *(float *)(a7 + 4), v22, v23, *(_BYTE *)(a7 + 80), *(_DWORD *)(a7 + 84), 1, 1, 0, (HGComputeDeviceManager *)v62);
  OZPlaybackEngine::OZPlaybackEngine(&v60, 1);
  OZPlaybackEngine::operator=((double *)v72, &v60);
  v66 = *(_DWORD *)(a7 + 56);
  v64 = 0u;
  v65 = 0u;
  LiRenderingTechnology::setRasterizeEdges((uint64_t)&v77, 0);
  OZRenderParams::setTextRenderQuality((uint64_t)v62, 0);
  v52 = a1;
  *(_QWORD *)&v72[13] = a3;
  LODWORD(v54.var0) = 0;
  if (*(_DWORD *)(a5 + 16))
  {
    v25 = 0;
    do
    {
      *(_QWORD *)&v59[0].f64[0] = &v54;
      v26 = std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a5, (unsigned int *)&v54, (uint64_t)&std::piecewise_construct, v59);
      LODWORD(v57) = v25;
      *(_QWORD *)&v59[0].f64[0] = &v57;
      v27 = std::__tree<std::__value_type<unsigned int,PCRect<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCRect<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCRect<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v73, (unsigned int *)&v57, (uint64_t)&std::piecewise_construct, v59);
      v28 = *(_OWORD *)(v26 + 5);
      *(_OWORD *)(v27 + 7) = *(_OWORD *)(v26 + 7);
      *(_OWORD *)(v27 + 5) = v28;
      v25 = LODWORD(v54.var0) + 1;
      LODWORD(v54.var0) = v25;
    }
    while (v25 < *(_DWORD *)(a5 + 16));
  }
  LODWORD(v54.var0) = 0;
  if (*(_DWORD *)(a4 + 16))
  {
    v29 = 0;
    do
    {
      *(_QWORD *)&v59[0].f64[0] = &v54;
      v30 = *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a4, (unsigned int *)&v54, (uint64_t)&std::piecewise_construct, (unsigned int **)v59)+ 8);
      LODWORD(v57) = v29;
      *(_QWORD *)&v59[0].f64[0] = &v57;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(&v74, (unsigned int *)&v57, (uint64_t)&std::piecewise_construct, (unsigned int **)v59)+ 8) = v30;
      *(_QWORD *)&v59[0].f64[0] = &v54;
      v31 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a4, (unsigned int *)&v54, (uint64_t)&std::piecewise_construct, (unsigned int **)v59);
      var0 = (int)v54.var0;
      LODWORD(v57) = *((_DWORD *)v31 + 8);
      *(_QWORD *)&v59[0].f64[0] = &v57;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v75, (unsigned int *)&v57, (uint64_t)&std::piecewise_construct, (unsigned int **)v59)+ 8) = var0;
      v29 = LODWORD(v54.var0) + 1;
      LODWORD(v54.var0) = v29;
    }
    while (v29 < *(_DWORD *)(a4 + 16));
  }
  LODWORD(v57) = 0;
  if (*(_DWORD *)(a6 + 16))
  {
    v33 = 0;
    do
    {
      *(_QWORD *)&v59[0].f64[0] = &v57;
      v34 = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a6, (unsigned int *)&v57, (uint64_t)&std::piecewise_construct, v59);
      OZRenderParams::setFFInputPixelTransform((uint64_t)v62, v33, v34 + 5);
      v33 = (_DWORD)v57 + 1;
      LODWORD(v57) = v33;
    }
    while (v33 < *(_DWORD *)(a6 + 16));
  }
  *(double *)&v75[3] = *(float *)(a7 + 8);
  if (CGRectIsEmpty(*(CGRect *)(a7 + 16)))
  {
    OZRenderParams::getROI((OZRenderParams *)v62, v59);
    v35 = 0.0;
    v36 = 0.0;
    if (*(float *)a7 != 0.0)
      v36 = fabsf(*(float *)(a7 + 8) / *(float *)a7);
    v37.f64[0] = v36;
    v38 = *(float *)(a7 + 4);
    if (v38 != 0.0)
      v35 = fabsf(*(float *)(a7 + 8) / v38);
    v69 = 0;
    v39.i64[0] = SLODWORD(v59[0].f64[1]);
    v39.i64[1] = SHIDWORD(v59[0].f64[1]);
    v37.f64[1] = v35;
    v70 = vmovn_s64(vcvtq_s64_f64(vmulq_f64(v37, vcvtq_f64_s64(v39))));
  }
  else
  {
    v40 = *(float64x2_t *)(a7 + 16);
    v41 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v40, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    *(int32x2_t *)&v40.f64[0] = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v40, *(float64x2_t *)(a7 + 32))))), v41);
    v69 = v41;
    v70 = *(int32x2_t *)&v40.f64[0];
  }
  OZProcessControl::OZProcessControl((OZProcessControl *)v59);
  OZProcessControl::setHeliumRenderer((uint64_t)v59, a10);
  v63 = v59;
  if (v52)
  {
    v42 = (int (*)(void))v52[2];
    if (v42)
      OZProcessControl::setProgressHandler((uint64_t)v59, v42);
    if (*v52)
    {
      v43 = *(OZScene **)(*v52 + 24);
      if (v43)
      {
        v44 = *((_QWORD *)v43 + 43);
        v45.i64[0] = (int)v44;
        v45.i64[1] = SHIDWORD(v44);
        v67 = 0u;
        v68 = vcvtq_f64_s64(v45);
        v64 = 0u;
        v65 = 0u;
        v76 = *(_BYTE *)(a7 + 88);
        ActiveCamera = OZScene::getActiveCamera(v43, a2);
        if (ActiveCamera)
        {
          v47 = (OZSceneCamera *)operator new();
          OZSceneCamera::OZSceneCamera(v47, v43, ActiveCamera);
          v57 = (METimeRemap *)v47;
          PCSharedCount::PCSharedCount(&v58, (OZSceneCamera *)((char *)v47 + *(_QWORD *)(*(_QWORD *)v47 - 24)));
          if (!v57)
            throw_PCNullPointerException(1);
          LiRenderingTechnology::setRasterizeEdges((uint64_t)v57, 0);
          if (!v57)
            throw_PCNullPointerException(1);
          v56 = *a2;
          METimeRemap::setOutroDuration(v57, &v56);
          PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v54, (const PCSharedCount *)&v57);
          OZRenderParams::setCamera((uint64_t)v62, &v54);
          PCSharedCount::~PCSharedCount(&v55);
          PCSharedCount::~PCSharedCount(&v58);
        }
      }
    }
    else
    {
      v43 = 0;
    }
    OZRenderParams::OZRenderParams((OZRenderParams *)v53, (const OZRenderParams *)v62);
    OZXGetRenderGraph(v43, (uint64_t)v53, a9, (GLRenderer *)v52[1], (PCString *)a10, (HGSolidColor **)&v57);
    v48 = *a11;
    v49 = v57;
    if (*a11 == v57)
    {
      if (v48)
        (*(void (**)(METimeRemap *))(v48->_introDuration.value + 24))(v48);
    }
    else
    {
      if (v48)
      {
        (*(void (**)(METimeRemap *))(v48->_introDuration.value + 24))(v48);
        v49 = v57;
      }
      *a11 = v49;
      v57 = 0;
    }
    OZRenderParams::~OZRenderParams((OZRenderParams *)v53);
  }
  OZProcessControl::~OZProcessControl((OZProcessControl *)v59);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v62);
  PCAutoreleasePool::~PCAutoreleasePool(&v78);
  if (v51)
    PCMutex::unlock(v51);
  return 0;
}

void sub_1B2EFE500(void *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  PCSharedCount::~PCSharedCount(v1 + 1);
  PCSharedCount::~PCSharedCount(v2);
  OZProcessControl::~OZProcessControl((OZProcessControl *)&STACK[0x610]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x668]);
  PCAutoreleasePool::~PCAutoreleasePool((id *)(v3 - 120));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(_QWORD *)(v3 - 112))
    JUMPOUT(0x1B2EFE4D8);
  JUMPOUT(0x1B2EFE4D0);
}

void sub_1B2EFE5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCConsoleLock::~PCConsoleLock((PCMutex **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZRigWidget,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2EFE68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZXSetRigValueWithName(void *a1, PCString *a2, double a3)
{
  uint64_t v3;
  const void *v6;
  _QWORD **v7;
  PCString *Name;
  _OWORD v10[2];
  int v11;
  uint64_t v12[4];
  uint64_t v13;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  OZScene::begin_t<OZRigWidget,false,true>(*(uint64_t **)(*(_QWORD *)a1 + 24), (uint64_t)v12);
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  while (v12[0] != v3 + 1200)
  {
    if (v12[0] == v12[2] || (v6 = *(const void **)(v12[0] + 16)) == 0)
      v7 = 0;
    else
    Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v7 + 2));
    if (!PCString::compare(Name, a2))
    {
      (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*v7[136] + 712))(v7[136], MEMORY[0x1E0CA2E68], 0, a3);
      break;
    }
    OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::operator++(v12);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
  return 0;
}

void sub_1B2EFE864(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFE848);
}

CFComparisonResult OZXSetPublishedTextSize(void *a1, PCString *a2, float a3)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZPublishSettings *v6;
  OZChannel *v7;
  OZChannelBase *TargetChannelForProxy;
  BOOL v9;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  void *v12;
  void *v13;
  OZChannel *v15;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v15 = 0;
  v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!(_DWORD)v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy)
      v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    else
      v9 = 1;
    if (!v9)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13)
              (*(void (**)(void *, float))(*(_QWORD *)v13 + 112))(v13, a3);
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B2EFE988(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFE970);
}

CFComparisonResult __OZXGetPublishedChannel(void *a1, const PCString *a2, OZChannel **a3)
{
  uint64_t v3;
  const void ***v4;
  const void **i;
  OZChannelBase *v8;
  OZChannel *v9;
  CFComparisonResult result;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v4 = *(const void ****)(v3 + 864);
  if (v4)
  {
    for (i = *v4; i != v4[1]; ++i)
    {
      v8 = (OZChannelBase *)*i;
      if (*i)
      {
        if (!OZChannelBase::testFlag(v8, 2))
        {
          if (v9)
          {
            result = PCString::compare(&v9->var4, a2);
            if (!(_DWORD)result)
            {
              *a3 = v9;
              return result;
            }
          }
        }
      }
      else
      {
        OZChannelBase::testFlag(0, 2);
      }
    }
  }
  return 11;
}

CFComparisonResult OZXSetPublishedTextScale(void *a1, PCString *a2, float a3)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZPublishSettings *v6;
  OZChannel *v7;
  OZChannelBase *TargetChannelForProxy;
  BOOL v9;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  void *v12;
  void *v13;
  OZChannel *v15;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v15 = 0;
  v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!(_DWORD)v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy)
      v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    else
      v9 = 1;
    if (!v9)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13)
              (*(void (**)(void *, float))(*(_QWORD *)v13 + 104))(v13, a3);
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B2EFEB7C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFEB64);
}

CFComparisonResult OZXSetPublishedTextLocale(void *a1, PCString *a2, NSString *a3)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZPublishSettings *v6;
  OZChannel *v7;
  OZChannelBase *TargetChannelForProxy;
  BOOL v9;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  void *v12;
  void *v13;
  OZChannel *v15;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v15 = 0;
  v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!(_DWORD)v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy)
      v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    else
      v9 = 1;
    if (!v9)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13)
              (*(void (**)(void *, NSString *))(*(_QWORD *)v13 + 136))(v13, a3);
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B2EFEC80(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFEC68);
}

CFComparisonResult OZXSetPublishedTextFont(void *a1, PCString *a2, NSString *a3)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZChannel *v6;
  OZChannelBase *TargetChannelForProxy;
  OZChannelBase *v8;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  void *v12;
  void *v13;
  OZChannelBase *v15;
  const void *v16;
  void *v17;
  OZChannel *v18;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v18 = 0;
  v5 = __OZXGetPublishedChannel(a1, a2, &v18);
  if (!(_DWORD)v5)
  {
    v6 = v18;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v3 + 720), (OZChannelBase *)v18);
    v8 = TargetChannelForProxy;
    if (TargetChannelForProxy && TargetChannelForProxy != (OZChannelBase *)v6)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (!ObjectManipulator)
          return v5;
        if (!v12)
          return v5;
      }
      else
      {
        if (!v15)
          return v5;
        v16 = (const void *)OZChannelBase::getObjectManipulator(v15);
        v13 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 280))(v17);
      }
      if (v13)
        (*(void (**)(void *, NSString *))(*(_QWORD *)v13 + 96))(v13, a3);
    }
  }
  return v5;
}

void sub_1B2EFEDD8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFED60);
}

uint64_t OZXSetPublishedRGBColor(void *a1, PCString *a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  OZPublishSettings *v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  BOOL v16;
  char v17;
  OZChannelBase *TargetChannelForProxy;
  void *v19;
  void *v20;
  CGColorSpace *DeviceRGB;
  PCColor v23;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v5)
    return 7;
  v6 = *(_QWORD *)(v5 + 864);
  if (!v6)
    return 11;
  v7 = *(const void ***)v6;
  if (*(_QWORD *)v6 == *(_QWORD *)(v6 + 8))
    return 11;
  v9 = (OZPublishSettings *)(v5 + 720);
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = 11;
  do
  {
    v14 = (OZChannelBase *)*v7;
    if (*v7)
    else
      v15 = 0;
    v16 = OZChannelBase::testFlag(v14, 2);
    if (v15)
      v17 = v16;
    else
      v17 = 1;
    if ((v17 & 1) == 0 && !PCString::compare(&v15->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v9, v15);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v14)
        {
          if (v19)
          {
            v20 = v19;
            DeviceRGB = CGColorSpaceCreateDeviceRGB();
            PCColor::PCColor(&v23, v10, v11, v12, 1.0, DeviceRGB);
            (*(void (**)(void *, _QWORD, PCColor *, _QWORD))(*(_QWORD *)v20 + 840))(v20, MEMORY[0x1E0CA2E68], &v23, 0);
            CGColorSpaceRelease(DeviceRGB);
            PCCFRef<CGColorSpace *>::~PCCFRef(&v23.var1._obj);
            v13 = 0;
          }
        }
      }
    }
    ++v7;
  }
  while (v7 != *(const void ***)(v6 + 8));
  return v13;
}

uint64_t OZXSetPublishedPopup(void *a1, PCString *a2, unsigned int Tag)
{
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  OZPublishSettings *v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  BOOL v12;
  char v13;
  OZChannelBase *TargetChannelForProxy;
  OZChannelEnum *v15;
  OZChannelEnum *v16;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v4 = *(_QWORD *)(v3 + 864);
  if (!v4)
    return 11;
  v5 = *(const void ***)v4;
  if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8))
    return 11;
  v8 = (OZPublishSettings *)(v3 + 720);
  v9 = 11;
  do
  {
    v10 = (OZChannelBase *)*v5;
    if (*v5)
    else
      v11 = 0;
    v12 = OZChannelBase::testFlag(v10, 2);
    if (v11)
      v13 = v12;
    else
      v13 = 1;
    if ((v13 & 1) == 0 && !PCString::compare(&v11->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v8, v11);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v10)
        {
          if (v15)
          {
            v16 = v15;
            if (Tag < OZChannelEnum::getNumberOfStrings(v15))
            {
              if (*((_QWORD *)v16 + 22) != *((_QWORD *)v16 + 21))
                Tag = OZChannelEnum::getTag(v16, Tag);
              (*(void (**)(OZChannelEnum *, _QWORD, _QWORD, double))(*(_QWORD *)v16 + 712))(v16, MEMORY[0x1E0CA2E68], 0, (double)Tag);
              v9 = 0;
            }
          }
        }
      }
    }
    ++v5;
  }
  while (v5 != *(const void ***)(v4 + 8));
  return v9;
}

uint64_t OZXSetPublishedPosition(void *a1, PCString *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  OZPublishSettings *v10;
  uint64_t v11;
  OZChannelBase *v12;
  OZChannelBase *v13;
  BOOL v14;
  char v15;
  OZChannelBase *TargetChannelForProxy;
  OZChannelPosition *v17;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  v5 = *(_QWORD *)(v4 + 864);
  if (!v5)
    return 11;
  v6 = *(const void ***)v5;
  if (*(_QWORD *)v5 == *(_QWORD *)(v5 + 8))
    return 11;
  v10 = (OZPublishSettings *)(v4 + 720);
  v11 = 11;
  do
  {
    v12 = (OZChannelBase *)*v6;
    if (*v6)
    else
      v13 = 0;
    v14 = OZChannelBase::testFlag(v12, 2);
    if (v13)
      v15 = v14;
    else
      v15 = 1;
    if ((v15 & 1) == 0 && !PCString::compare(&v13->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v10, v13);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v12)
        {
          if (v17)
          {
            OZChannelPosition::setPosition(v17, MEMORY[0x1E0CA2E68], a3, a4, 0);
            v11 = 0;
          }
        }
      }
    }
    ++v6;
  }
  while (v6 != *(const void ***)(v5 + 8));
  return v11;
}

uint64_t OZXSetPublishedCheckBox(void *a1, PCString *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  double v8;
  OZPublishSettings *v9;
  uint64_t v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  BOOL v13;
  char v14;
  OZChannelBase *TargetChannelForProxy;
  OZChannelBase *v16;
  void *v17;
  void *v18;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v4 = *(_QWORD *)(v3 + 864);
  if (!v4)
    return 11;
  v5 = *(const void ***)v4;
  if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8))
    return 11;
  v8 = (double)a3;
  v9 = (OZPublishSettings *)(v3 + 720);
  v10 = 11;
  do
  {
    v11 = (OZChannelBase *)*v5;
    if (*v5)
    else
      v12 = 0;
    v13 = OZChannelBase::testFlag(v11, 2);
    if (v12)
      v14 = v13;
    else
      v14 = 1;
    if ((v14 & 1) == 0 && !PCString::compare(&v12->var4, a2))
    {
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v9, v12);
      v16 = TargetChannelForProxy;
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v11)
        {
          if (v17)
          {
            (*(void (**)(void *, _QWORD, _QWORD, double))(*(_QWORD *)v17 + 712))(v17, MEMORY[0x1E0CA2E68], 0, v8);
            v10 = 0;
          }
          else if (v18)
          {
            (*(void (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v18 + 104))(v18, a3, 0);
            v10 = 0;
          }
        }
      }
    }
    ++v5;
  }
  while (v5 != *(const void ***)(v4 + 8));
  return v10;
}

uint64_t OZXSetSeedValue(void *a1, unsigned int a2)
{
  OZScene *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  OZChannelBase ***v9;
  OZChannelBase **j;
  OZChannelBase *v11;
  unint64_t var1;
  void *v13;
  _QWORD v15[4];
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;
  __int128 v19;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  OZScene::begin(*(OZScene **)(*(_QWORD *)a1 + 24), (uint64_t)v17);
  OZScene::end_sel(v2, (uint64_t)v15);
  v4 = MEMORY[0x1E0CA2E68];
  while (v17[0] != v15[0])
  {
    if (v17[0] != v17[2])
    {
      v5 = *(_QWORD *)(v17[0] + 16);
      if (v5)
      {
        v6 = v5 + 1000;
        for (i = *(_QWORD *)(v5 + 1008); i != v6; i = *(_QWORD *)(i + 8))
        {
          v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 312))(*(_QWORD *)(i + 16));
          if (v8)
          {
            v9 = *(OZChannelBase ****)(v8 + 112);
            if (v9)
            {
              for (j = *v9; j != v9[1]; ++j)
              {
                if (!OZChannelBase::testFlag(*j, 2))
                {
                  v11 = *j;
                  var1 = (unint64_t)(*j)->var1;
                  v19 = xmmword_1B3555A50;
                  if (OZFactory::isKindOfClass(var1, (int32x4_t *)&v19))
                  {
                    (*(void (**)(void *, uint64_t, _QWORD, double))(*(_QWORD *)v13 + 712))(v13, v4, 0, (double)a2);
                  }
                }
              }
            }
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v18);
  return 0;
}

void sub_1B2EFF608(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFF5E4);
}

uint64_t OZXSetBorderScaleAndTranslation(void *a1, double a2, double a3, double a4, double a5)
{
  OZScene *v5;
  const CMTime *v10;
  const void *v11;
  char *v12;
  OZTransformNode *v13;
  _QWORD v15[4];
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v5 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v5)
    return 7;
  OZScene::begin(*(OZScene **)(*(_QWORD *)a1 + 24), (uint64_t)v17);
  OZScene::end_sel(v5, (uint64_t)v15);
  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while (v17[0] != v15[0])
  {
    if (v17[0] != v17[2])
    {
      v11 = *(const void **)(v17[0] + 16);
      if (v11)
      {
        if (v12)
        {
          v13 = (OZTransformNode *)(v12 + 200);
          OZTransformNode::setScale((OZTransformNode *)(v12 + 200), a2, a3, 1.0, v10);
          OZTransformNode::setTranslation(v13, a4, a5, 0.0, v10);
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v18);
  return 0;
}

void sub_1B2EFF788(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFF76CLL);
}

uint64_t OZXSetCutawayFadeInOut(void *a1, const CMTime *a2, const CMTime *a3)
{
  OZScene *v3;
  const void *v6;
  char *v7;
  OZChannel *v8;
  void *FirstEnabledKeyframe;
  uint64_t NextEnabledKeyframe;
  void *LastEnabledKeyframe;
  uint64_t PreviousEnabledKeyframe;
  double v13;
  _BYTE v15[24];
  double v16;
  CMTime v17;
  CMTime v18;
  CMTime time;
  _QWORD v20[4];
  uint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  CMTime v24;
  CMTime v25;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  OZScene::begin(*(OZScene **)(*(_QWORD *)a1 + 24), (uint64_t)v22);
  OZScene::end_sel(v3, (uint64_t)v20);
  while (v22[0] != v20[0])
  {
    if (v22[0] != v22[2])
    {
      v6 = *(const void **)(v22[0] + 16);
      if (v6)
      {
        if (v7)
        {
          v8 = (OZChannel *)(v7 + 6680);
          if (OZChannel::isAnimated((OZChannel *)(v7 + 6680)))
          {
            time = *a2;
            if (CMTimeGetSeconds(&time) > 0.0)
            {
              FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe(v8);
              OZChannel::setKeyframeValue(v8, FirstEnabledKeyframe, 0.0);
              NextEnabledKeyframe = OZChannel::getNextEnabledKeyframe(v8, FirstEnabledKeyframe);
              (*((void (**)(OZChannel *, uint64_t, const CMTime *, _QWORD, _QWORD))v8->var0 + 105))(v8, NextEnabledKeyframe, a2, 0, 0);
            }
            v18 = *a3;
            if (CMTimeGetSeconds(&v18) > 0.0)
            {
              v16 = 0.0;
              LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v8);
              OZChannel::setKeyframeValue(v8, LastEnabledKeyframe, 0.0);
              OZChannel::getKeyframe(v8, LastEnabledKeyframe, &v17, &v16);
              PreviousEnabledKeyframe = OZChannel::getPreviousEnabledKeyframe(v8, LastEnabledKeyframe);
              v25 = v17;
              v24 = *a3;
              v13 = PC_CMTimeSaferSubtract(&v25, &v24, (uint64_t)v15);
              (*((void (**)(OZChannel *, uint64_t, _BYTE *, _QWORD, _QWORD, double))v8->var0 + 105))(v8, PreviousEnabledKeyframe, v15, 0, 0, v13);
            }
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v22);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  return 0;
}

void sub_1B2EFF9F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a38);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFF9D4);
}

__n128 OZXGetPosterFrameTime(void *a1, CMTime *a2)
{
  uint64_t v3;
  OZTimeMarkerSet *v4;
  char *i;
  __n128 result;
  __n128 *v7;
  CMTime v8;
  CMTime v9;

  if (a1)
  {
    if (a2)
    {
      if (*(_QWORD *)a1)
      {
        v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
        if (v3)
        {
          v4 = *(OZTimeMarkerSet **)(v3 + 1136);
          v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          for (i = OZTimeMarkerSet::findNextMarker(v4, &v9);
                (char *)v4 + 16 != i;
                i = OZTimeMarkerSet::findNextMarker(v4, &v8))
          {
            v7 = (__n128 *)(i + 40);
            if (*((_DWORD *)i + 27) == 8)
            {
              result = *v7;
              a2->epoch = *((_QWORD *)i + 7);
              *(__n128 *)&a2->value = result;
              return result;
            }
            *(__n128 *)&v8.value = *v7;
            v8.epoch = *((_QWORD *)i + 7);
          }
        }
      }
    }
  }
  return result;
}

void sub_1B2EFFB18(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFFB04);
}

uint64_t OZXGetTopLevelGroupID(void *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void **HostApplicationDelegate;
  _QWORD *Node;
  CMTimeEpoch v12;
  CMTimeEpoch v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int32x4_t v17;
  CMTimeEpoch v18;
  __int128 v19;
  uint64_t v20;
  __n128 v21;
  CMTimeEpoch v22;
  int32x4_t v23;
  CMTimeEpoch v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 120))(*(_QWORD *)(*(_QWORD *)a1 + 24));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
  if (v4 == v5)
  {
LABEL_7:
    v8 = 13;
  }
  else
  {
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 16);
      v7 = *(_QWORD *)(v6 + 8);
      v23 = (int32x4_t)xmmword_1B355DCD0;
      if (OZFactory::isKindOfClass(v7, &v23))
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v5)
        goto LABEL_7;
    }
    v8 = 0;
    *a2 = *(_DWORD *)(v6 + 80);
  }
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  if (OZHostApplicationDelegateHandler::wantsToAssertThatTopLevelGroupSpansEntireScene(HostApplicationDelegate))
  {
    Node = OZScene::getNode((OZScene *)v2, *a2);
    v12 = *(_QWORD *)(v2 + 1368);
    v23 = *(int32x4_t *)(v2 + 1352);
    *(_OWORD *)&v25.value = *(_OWORD *)(v2 + 1376);
    v13 = *(_QWORD *)(v2 + 1392);
    v24 = v12;
    v25.epoch = v13;
    v21 = 0uLL;
    v22 = 0;
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v2 + 336), &v21);
    v19 = 0uLL;
    v20 = 0;
    *(int32x4_t *)&v28.value = v23;
    v28.epoch = v24;
    v27 = v25;
    PC_CMTimeSaferAdd(&v28, &v27, (uint64_t)&v26);
    v28 = v26;
    *(__n128 *)&v27.value = v21;
    v27.epoch = v22;
    PC_CMTimeSaferSubtract(&v28, &v27, (uint64_t)&v19);
    v18 = v24;
    v14 = Node[2];
    Node += 2;
    v17 = v23;
    (*(void (**)(_QWORD *, int32x4_t *, uint64_t, uint64_t, uint64_t))(v14 + 104))(Node, &v17, 1, 1, 1);
    v16 = v20;
    v15 = v19;
    (*(void (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(*Node + 104))(Node, &v15, 1, 1, 1);
  }
  return v8;
}

void sub_1B2EFFD28(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFFBCCLL);
}

uint64_t OZXGetObjectBounds(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  OZScene *v5;
  void *Node;
  void *v10;
  void *v11;
  OZRenderState v13;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v5 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v5)
    return 7;
  Node = OZScene::getNode(v5, a3);
  if (!Node)
    return 11;
  if (!v10)
    return 11;
  v11 = v10;
  OZRenderState::OZRenderState(&v13);
  *(_OWORD *)&v13.var0.var0 = *(_OWORD *)a2;
  v13.var0.var3 = *(_QWORD *)(a2 + 16);
  v13.var20 = a4 & 1;
  v13.var26 = (a4 & 4) != 0;
  v13.var27 = (a4 & 2) != 0;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*(_QWORD *)v11 + 1488))(v11, a5, &v13);
  return 0;
}

uint64_t OZXGetWorldToFilmTransform(uint64_t *a1, CMTime *a2, __n128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int ActiveCamera;
  OZSceneCamera *v8;
  uint64_t i;
  __n128 *v10;
  __n128 v11;
  const PCString *v13;
  unint64_t j;
  __n128 *v15;
  __n128 v16;
  METimeRemap *v17[16];
  float64x2_t v18;
  __n128 v19[30];
  CMTime v20;

  if (!a1)
    return 7;
  v3 = *a1;
  if (!*a1)
    return 7;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return 7;
  ActiveCamera = OZScene::getActiveCamera(*(OZScene **)(v3 + 24), a2);
  if (ActiveCamera)
  {
    v8 = (OZSceneCamera *)operator new();
    OZSceneCamera::OZSceneCamera(v8, (OZScene *)v4, ActiveCamera);
    v17[0] = (METimeRemap *)v8;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v17[1], (OZSceneCamera *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    if (!v8)
      throw_PCNullPointerException(1);
    LiRenderingTechnology::setRasterizeEdges((uint64_t)v8, 0);
    v20 = *a2;
    METimeRemap::setOutroDuration(v17[0], &v20);
    OZScene::calcWorldToFilmSpaceMatrixForCamera((OZScene *)v4, (const LiCamera *)v17[0], v19);
    if (v19 != a3)
    {
      for (i = 0; i != 8; i += 2)
      {
        v10 = &a3[i];
        v11 = v19[i + 1];
        *v10 = v19[i];
        v10[1] = v11;
      }
    }
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v17[1]);
  }
  else
  {
    LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)v19);
    v18 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)(v4 + 344)));
    LiSimpleCamera::setFilmback(v19, (__n128 *)&v18);
    LiSimpleCamera::setPixelAspectRatio((uint64_t)v19, *(double *)(v4 + 384));
    OZScene::calcWorldToFilmSpaceMatrixForCamera((OZScene *)v4, (const LiCamera *)v19, v17);
    if (v17 != (METimeRemap **)a3)
    {
      for (j = 0; j != 16; j += 4)
      {
        v15 = &a3[j / 2];
        v16 = *(__n128 *)&v17[j + 2];
        *v15 = *(__n128 *)&v17[j];
        v15[1] = v16;
      }
    }
    LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)v19, v13);
  }
  return 0;
}

void sub_1B2F00008(void *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&a28, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2EFFFF0);
}

uint64_t OZXGetObjectTransform(uint64_t a1, uint64_t a2, char a3, unsigned int a4, uint64_t a5)
{
  OZScene *v5;
  void *Node;
  void *v10;
  void *v11;
  OZRenderState v13;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v5 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v5)
    return 7;
  Node = OZScene::getNode(v5, a4);
  if (!Node)
    return 11;
  if (!v10)
    return 11;
  v11 = v10;
  OZRenderState::OZRenderState(&v13);
  *(_OWORD *)&v13.var0.var0 = *(_OWORD *)a2;
  v13.var0.var3 = *(_QWORD *)(a2 + 16);
  v13.var16 = (a3 & 2) != 0;
  v13.var8 = a3 & 1;
  v13.var4 = a3 & 4;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*(_QWORD *)v11 + 1256))(v11, a5, &v13);
  return 0;
}

uint64_t OZXSetObjectTransform(uint64_t a1, const CMTime *a2, unsigned int a3, __int128 *a4)
{
  OZScene *v4;
  void *Node;
  OZTransformNode *v8;
  OZTransformNode *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  double v17;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  Node = OZScene::getNode(v4, a3);
  if (!Node)
    return 11;
  if (!v8)
    return 11;
  v9 = v8;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  v14 = 4;
  v15 = 0u;
  v16 = 0u;
  v17 = 0.0;
  if (!PCMatrix44Tmpl<double>::getTransformation(a4, (uint64_t)&v11))
    return 11;
  OZTransformNode::setTranslation(v9, *(double *)&v11, *((double *)&v11 + 1), *(double *)&v12, a2);
  OZTransformNode::setRotation(v9, *(double *)&v15, *((double *)&v15 + 1), *(double *)&v16, a2);
  OZTransformNode::setScale(v9, *((double *)&v12 + 1), *(double *)&v13, *((double *)&v13 + 1), a2);
  OZTransformNode::setShear(v9, *((double *)&v16 + 1), v17, a2);
  return 0;
}

uint64_t OZXGetObjectOpacity(void *a1, const CMTime *a2, unsigned int a3, double *a4)
{
  OZScene *v4;
  void *Node;
  OZElement *v8;
  uint64_t result;
  uint64_t v10;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  Node = OZScene::getNode(v4, a3);
  if (!Node)
    return 11;
  if (!v8)
    return 11;
  OZElement::getOpacity(v8, a2, 0);
  result = 0;
  *(_QWORD *)a4 = v10;
  return result;
}

uint64_t OZXSetObjectOpacity(void *a1, const CMTime *a2, unsigned int a3, double a4)
{
  OZScene *v4;
  void *Node;
  OZElement *v8;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  Node = OZScene::getNode(v4, a3);
  if (!Node)
    return 11;
  if (!v8)
    return 11;
  OZElement::setOpacity(v8, a4, a2);
  return 0;
}

uint64_t OZXDisableRenderingObject(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  void *Node;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  BOOL v38;
  void *v39;
  uint64_t *v40;
  _QWORD *v41[2];
  void *v42;

  if (!a1)
    return 7;
  v3 = *a1;
  if (!*a1)
    return 7;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return 7;
  Node = OZScene::getNode(*(OZScene **)(v3 + 24), a2);
  if (!Node)
    return 11;
  v42 = v8;
  if (!v8)
    return 11;
  v9 = (_QWORD *)(v4 + 1248);
  v10 = *(_QWORD **)(v4 + 1248);
  if (a3)
  {
    if (!v10)
      goto LABEL_19;
    v11 = (_QWORD *)(v4 + 1248);
    do
    {
      v12 = v10[4];
      v13 = v12 >= (unint64_t)v8;
      if (v12 >= (unint64_t)v8)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 == v9 || (v15 = v11[4], (unint64_t)v8 < v15) || v15 == *(_QWORD *)(v4 + 1280))
LABEL_19:
      std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)(v4 + 1240), (unint64_t *)&v42, (uint64_t *)&v42);
  }
  else if (v10)
  {
    v17 = (_QWORD *)(v4 + 1248);
    do
    {
      v18 = v10[4];
      v19 = v18 >= (unint64_t)v8;
      if (v18 >= (unint64_t)v8)
        v20 = v10;
      else
        v20 = v10 + 1;
      if (v19)
        v17 = v10;
      v10 = (_QWORD *)*v20;
    }
    while (*v20);
    if (v17 != v9)
    {
      v21 = v17[4];
      if ((unint64_t)v8 >= v21 && v21 != *(_QWORD *)(v4 + 1280))
        std::__tree<OZLocking *>::__erase_unique<OZLocking *>(v4 + 1240, (unint64_t *)&v42);
    }
  }
  v41[0] = 0;
  v41[1] = 0;
  v40 = (uint64_t *)v41;
  OZScene::getCloneNodes((uint64_t *)v4, a2, &v40);
  v22 = v40;
  if (v40 != (uint64_t *)v41)
  {
    do
    {
      v39 = 0;
      v23 = OZScene::getNode((OZScene *)v4, *((_DWORD *)v22 + 7));
      if (v23)
      {
        v39 = v24;
        if (v24)
        {
          v25 = (_QWORD *)*v9;
          if (a3)
          {
            if (!v25)
              goto LABEL_51;
            v26 = (_QWORD *)(v4 + 1248);
            do
            {
              v27 = v25[4];
              v28 = v27 >= (unint64_t)v24;
              if (v27 >= (unint64_t)v24)
                v29 = v25;
              else
                v29 = v25 + 1;
              if (v28)
                v26 = v25;
              v25 = (_QWORD *)*v29;
            }
            while (*v29);
            if (v26 == v9 || (v30 = v26[4], (unint64_t)v24 < v30) || v30 == *(_QWORD *)(v4 + 1280))
LABEL_51:
              std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)(v4 + 1240), (unint64_t *)&v39, (uint64_t *)&v39);
          }
          else if (v25)
          {
            v31 = (_QWORD *)(v4 + 1248);
            do
            {
              v32 = v25[4];
              v33 = v32 >= (unint64_t)v24;
              if (v32 >= (unint64_t)v24)
                v34 = v25;
              else
                v34 = v25 + 1;
              if (v33)
                v31 = v25;
              v25 = (_QWORD *)*v34;
            }
            while (*v34);
            if (v31 != v9)
            {
              v35 = v31[4];
              if ((unint64_t)v24 >= v35 && v35 != *(_QWORD *)(v4 + 1280))
                std::__tree<OZLocking *>::__erase_unique<OZLocking *>(v4 + 1240, (unint64_t *)&v39);
            }
          }
        }
      }
      v36 = (uint64_t *)v22[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (uint64_t *)v22[2];
          v38 = *v37 == (_QWORD)v22;
          v22 = v37;
        }
        while (!v38);
      }
      v22 = v37;
    }
    while (v37 != (uint64_t *)v41);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v40, v41[0]);
  return 0;
}

CFComparisonResult OZXDisableElementWithPublishedParam(void *a1, PCString *a2, int a3)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZPublishSettings *v6;
  OZChannel *v7;
  OZChannelBase *TargetChannelForProxy;
  OZChannelBase *ChannelRootBase;
  _QWORD *ObjectManipulator;
  uint64_t v12;
  OZChannel *v14;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v14 = 0;
  v5 = __OZXGetPublishedChannel(a1, a2, &v14);
  if (!(_DWORD)v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v14;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v14);
    if (TargetChannelForProxy && TargetChannelForProxy != (OZChannelBase *)v7)
    {
      ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(TargetChannelForProxy);
      if (ChannelRootBase)
      {
        ObjectManipulator = (_QWORD *)OZChannelBase::getObjectManipulator(ChannelRootBase);
        if (ObjectManipulator)
        {
          v12 = 32;
          if (a3)
            v12 = 40;
          (*(void (**)(void))(*ObjectManipulator + v12))();
        }
      }
    }
  }
  return v5;
}

void sub_1B2F00724(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F0070CLL);
}

CFComparisonResult OZXEnableTextDynamicLineSpacing(void *a1, PCString *a2, uint64_t a3)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZPublishSettings *v6;
  OZChannel *v7;
  OZChannelBase *TargetChannelForProxy;
  BOOL v9;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  void *v12;
  void *v13;
  OZChannel *v15;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v15 = 0;
  v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!(_DWORD)v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy)
      v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    else
      v9 = 1;
    if (!v9)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13)
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v13 + 80))(v13, a3);
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B2F00828(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F00810);
}

CFComparisonResult OZXSetTextOneLineScaleThreshold(void *a1, PCString *a2, double a3)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZPublishSettings *v6;
  OZChannel *v7;
  OZChannelBase *TargetChannelForProxy;
  BOOL v9;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  void *v12;
  void *v13;
  OZChannel *v15;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v15 = 0;
  v5 = __OZXGetPublishedChannel(a1, a2, &v15);
  if (!(_DWORD)v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v15;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v15);
    if (TargetChannelForProxy)
      v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    else
      v9 = 1;
    if (!v9)
    {
      if (v10)
      {
        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10);
        if (ObjectManipulator)
        {
          if (v12)
          {
            if (v13)
              (*(void (**)(void *, double))(*(_QWORD *)v13 + 88))(v13, a3);
          }
        }
      }
    }
  }
  return v5;
}

void sub_1B2F0092C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F00914);
}

uint64_t OZXGetTextAttributedString(void *a1, unsigned int a2, NSMutableAttributedString *a3)
{
  OZScene *v4;
  void *Node;
  void *v7;
  void *v8;
  void *v9;
  __n128 v10;
  int v11;
  void *v13;
  CMTime v14;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  Node = OZScene::getNode(v4, a2);
  if (Node)
  {
    if (v7)
    {
      if (v8)
      {
        v9 = v8;
        v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v10 = OZXGetPosterFrameTime(a1, &v14);
        if (v11)
        {
          NSLog(CFSTR("Warning: could not get poster frame time"), v10.n128_f64[0]);
        }
        else if ((v14.flags & 1) != 0)
        {
LABEL_13:
          v13 = (void *)(*(uint64_t (**)(void *, CMTime *, _QWORD, __n128))(*(_QWORD *)v9 + 120))(v9, &v14, 0, v10);
          -[NSMutableAttributedString setAttributedString:](a3, "setAttributedString:", v13);

          return 0;
        }
        v10 = *(__n128 *)MEMORY[0x1E0CA2E68];
        v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        goto LABEL_13;
      }
    }
  }
  return 11;
}

uint64_t OZXClearTranscription(uint64_t a1)
{
  uint64_t result;
  void (***v2)(_QWORD);

  v2 = 0;
  result = __OZXGetTranscriptionDelegate(a1, &v2);
  if (!(_DWORD)result)
  {
    if (v2)
    {
      (**v2)(v2);
      return 0;
    }
  }
  return result;
}

void sub_1B2F00AC4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F00AB8);
}

uint64_t __OZXGetTranscriptionDelegate(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[2];
  int v12;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  _OWORD v16[2];
  int v17;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  if (!a2)
    return 11;
  v4 = v2 + 1200;
  v5 = *(_QWORD *)(v2 + 1208);
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v13[0] = v5;
  v13[1] = v5;
  v14 = v4;
  v15 = 0;
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  v10 = v4;
  while (1)
  {
    if (v13[0] == v10)
    {
      v8 = 11;
      goto LABEL_15;
    }
    if (v13[0] != v14)
    {
      v6 = *(const void **)(v13[0] + 16);
      if (v6)
      {
        if (v7)
          break;
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v13);
  }
  v8 = 0;
  *a2 = v7;
LABEL_15:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  return v8;
}

uint64_t OZXSetLoopMarkerFromTranscription(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  Float64 v11;
  uint64_t *v12;
  uint64_t **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t *v17;
  CMTime v18;
  PCString v19;
  CMTime v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[32];
  int v26;
  _QWORD v27[2];
  uint64_t v28;
  char v29;
  _OWORD v30[2];
  int v31;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v1)
    return 7;
  v2 = *(_QWORD *)(v1 + 1208);
  memset(v30, 0, sizeof(v30));
  v31 = 1065353216;
  v27[0] = v2;
  v27[1] = v2;
  v28 = v1 + 1200;
  v29 = 0;
  memset(v25, 0, sizeof(v25));
  v26 = 1065353216;
  v21 = v1 + 1200;
  v22 = v2;
  v23 = v1 + 1200;
  v24 = 0;
  while (1)
  {
    if (v27[0] == v21)
      goto LABEL_20;
    if (v27[0] != v28)
    {
      v3 = *(const void **)(v27[0] + 16);
      if (v3)
      {
        if (v4)
          break;
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v27);
  }
  (*(void (**)(void *, uint64_t))(*(_QWORD *)v4 + 48))(v4, 1);
  v7 = *(_QWORD *)(v1 + 1136);
  v10 = *(uint64_t ***)(v7 + 8);
  v9 = (uint64_t **)(v7 + 8);
  v8 = v10;
  if (v10 == v9 + 1)
  {
LABEL_20:
    v5 = 11;
    goto LABEL_21;
  }
  v11 = v6;
  while (*((_DWORD *)v8 + 27) != 7)
  {
    v12 = v8[1];
    if (v12)
    {
      do
      {
        v13 = (uint64_t **)v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (uint64_t **)v8[2];
        v14 = *v13 == (uint64_t *)v8;
        v8 = v13;
      }
      while (!v14);
    }
    v8 = v13;
    if (v13 == v9 + 1)
      goto LABEL_20;
  }
  v16 = (uint64_t)(v8 + 4);
  OZTimeMarker::OZTimeMarker((OZTimeMarker *)&v19, (const OZTimeMarker *)(v8 + 4));
  OZFigTimeForChannelSeconds(&v18, v11, 0x40000);
  v20 = v18;
  v17 = std::__tree<OZTimeMarker>::find<OZTimeMarker>((uint64_t)v9, v16);
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v9, v17);
  (*(void (**)(uint64_t *))v17[4])(v17 + 4);
  operator delete(v17);
  std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(v9, (uint64_t)&v19, (const OZTimeMarker *)&v19);
  OZTimeMarker::~OZTimeMarker(&v19);
  v5 = 0;
LABEL_21:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v30);
  return v5;
}

void sub_1B2F00E14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  OZTimeMarker::~OZTimeMarker((PCString *)va);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F00D70);
}

double OZXGetTranscriptionDuration(uint64_t a1, CMTime *a2)
{
  double result;
  Float64 v4;
  CMTime v5;
  uint64_t v6;

  v6 = 0;
  if (!__OZXGetTranscriptionDelegate(a1, &v6))
  {
    if (v6)
    {
      v4 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(v6, 0);
      OZFigTimeForChannelSeconds(&v5, v4, 0x40000);
      result = *(double *)&v5.value;
      *a2 = v5;
    }
  }
  return result;
}

void sub_1B2F00EC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F00EB8);
}

uint64_t OZXResetToDefaultTranscription(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  result = __OZXGetTranscriptionDelegate(a1, &v2);
  if (!(_DWORD)result)
  {
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      return 0;
    }
  }
  return result;
}

void sub_1B2F00F20(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F00F14);
}

uint64_t OZXSetTranscriptionLocale(uint64_t a1, NSString *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = __OZXGetTranscriptionDelegate(a1, &v4);
  if (!(_DWORD)result)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, NSString *))(*(_QWORD *)v4 + 72))(v4, a2);
      return 0;
    }
  }
  return result;
}

void sub_1B2F00F84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F00F74);
}

uint64_t OZXSetTranscriptionText(uint64_t a1, NSString *a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  v3 = __OZXGetTranscriptionDelegate(a1, &v5);
  if (!(_DWORD)v3 && v5)
    (*(void (**)(uint64_t, NSString *))(*(_QWORD *)v5 + 16))(v5, a2);
  return v3;
}

uint64_t OZXAdjustTranscriptionLineSpacingForCurrentFont(_QWORD *a1, const PCString *a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 7;
  if (!*a1)
    return 7;
  v4 = 0;
  v5 = 0;
  v2 = __OZXGetTranscriptionDelegateAndLineSpacingChannel(a1, a2, &v4, &v5);
  result = 11;
  if (!v2 && v5)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      return 0;
    }
  }
  return result;
}

CFComparisonResult __OZXGetTranscriptionDelegateAndLineSpacingChannel(void *a1, const PCString *a2, _QWORD *a3, _QWORD *a4)
{
  CFComparisonResult result;
  uint64_t v8;
  OZChannelBase *TargetChannelForProxy;
  void *v10;
  OZChannel *v11;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v11 = 0;
  result = __OZXGetPublishedChannel(a1, a2, &v11);
  if ((_DWORD)result)
    return result;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v8)
    return 7;
  if (v11)
  {
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v8 + 720), (OZChannelBase *)v11);
    if (TargetChannelForProxy)
    {
      if (a4)
      {
        if (v10)
          *a4 = v10;
      }
    }
  }
  return __OZXGetTranscriptionDelegate((uint64_t)a1, a3);
}

void sub_1B2F01110(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F010FCLL);
}

uint64_t OZXSetTranscriptionMediaOffset(uint64_t a1, const CMTime *a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  v3 = __OZXGetTranscriptionDelegate(a1, &v5);
  if (!(_DWORD)v3 && v5)
    (*(void (**)(uint64_t, const CMTime *))(*(_QWORD *)v5 + 24))(v5, a2);
  return v3;
}

uint64_t OZXSetTranscription(uint64_t a1, void *a2, const __CFString *a3, const CMTime *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  result = __OZXGetTranscriptionDelegate(a1, &v10);
  if (!(_DWORD)result)
  {
    if (v10)
    {
      (*(void (**)(uint64_t, void *, const __CFString *, const CMTime *, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2, a3, a4, a5);
      return 0;
    }
  }
  return result;
}

void sub_1B2F011EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F011D8);
}

uint64_t OZXTranscriptionHitTest(void *a1, CGPoint a2, const CMTime *a3, BOOL *a4)
{
  double y;
  double x;
  OZScene *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  OZSceneCamera *v14;
  int ActiveCamera;
  __n128 v16;
  float v17;
  float v18;
  _DWORD v20[2];
  _QWORD v21[3];
  CMTime v22;
  CMTime v23;
  OZRenderState v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _OWORD v29[2];
  int v30;
  _QWORD v31[2];
  _QWORD *v32;
  char v33;
  _BYTE v34[32];
  int v35;

  y = a2.y;
  x = a2.x;
  if (a4)
    *a4 = 0;
  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v8 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v8)
    return 7;
  v9 = *((_QWORD *)v8 + 151);
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  v31[0] = v9;
  v31[1] = v9;
  v32 = (_QWORD *)((char *)v8 + 1200);
  v33 = 0;
  memset(v29, 0, sizeof(v29));
  v30 = 1065353216;
  v25 = (_QWORD *)((char *)v8 + 1200);
  v26 = v9;
  v27 = (_QWORD *)((char *)v8 + 1200);
  v28 = 0;
  while (1)
  {
    if ((_QWORD *)v31[0] == v25)
    {
      v12 = 11;
      goto LABEL_18;
    }
    if ((_QWORD *)v31[0] != v32)
    {
      v10 = *(_QWORD *)(v31[0] + 16);
      if (v10)
      {
        if (v11)
          break;
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v31);
  }
  v13 = v11;
  OZRenderState::OZRenderState(&v24);
  v23 = *a3;
  v24.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v23;
  v24.var20 = 0;
  v24.var25 = 0;
  v14 = (OZSceneCamera *)operator new();
  OZSceneCamera::OZSceneCamera(v14, v8, 0);
  ActiveCamera = OZScene::getActiveCamera(v8, &v23);
  HGUserJob::SetState((uint64_t)v14, ActiveCamera);
  LiRenderingTechnology::setRasterizeEdges((uint64_t)v14, 0);
  v22 = v23;
  v16 = METimeRemap::setOutroDuration((METimeRemap *)v14, &v22);
  (*(void (**)(void *, OZRenderState *, __n128))(*(_QWORD *)v13 + 40))(v13, &v24, v16);
  memset(v21, 0, sizeof(v21));
  if (a4)
  {
    v17 = x;
    v18 = y;
    *(float *)v20 = v17;
    *(float *)&v20[1] = v18;
    if ((*(uint64_t (**)(uint64_t, _DWORD *, OZRenderState *, OZSceneCamera *, _QWORD *, uint64_t))(*(_QWORD *)v10 + 936))(v10, v20, &v24, v14, v21, 536870920))
    {
      *a4 = 1;
    }
  }
  (*(void (**)(OZSceneCamera *))(*(_QWORD *)v14 + 8))(v14);
  v12 = 0;
LABEL_18:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v29);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v34);
  return v12;
}

void sub_1B2F01440(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F01418);
}

uint64_t OZXSetShapePoints(uint64_t a1, void *a2, int a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v8;
  const void *v9;
  char *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  char *v17;
  OZChannelBase *v19;
  uint64_t NextUniqueID;
  uint64_t SceneNode;
  uint64_t v22;
  OZRotoshape *v23;
  OZChannelBase *v24;
  uint64_t v25;
  OZSceneNode *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t Behavior;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  _QWORD *v54;
  void *v55;
  char **v56;
  int v57;
  uint64_t v58;
  CMTime *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char **v98;
  unsigned int v99;
  int v100;
  const CMTime *v101;
  const void *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *__p;
  char *v112;
  char *v113;
  CMTime v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  void *v119[2];
  char *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123[4];
  uint64_t v124;
  _QWORD v125[4];
  uint64_t v126;
  CMTime v127;
  _BYTE v128[128];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  v127 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  OZScene::begin((OZScene *)v4, (uint64_t)v125);
  OZScene::end_sel((OZScene *)v4, (uint64_t)v123);
  if (!a3 || (v8 = v125[0], v125[0] == v123[0]))
  {
LABEL_22:
    v19 = (OZChannelBase *)PCString::PCString((PCString *)&__p, "Rotoshape");
    NextUniqueID = OZChannelBase::getNextUniqueID(v19);
    *(_OWORD *)v119 = xmmword_1B355CCA0;
    SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)v119, (uint64_t)&__p, NextUniqueID);
    v22 = SceneNode;
    v11 = SceneNode - 200;
    if (SceneNode)
      v23 = (OZRotoshape *)(SceneNode - 200);
    else
      v23 = 0;
    PCString::~PCString((PCString *)&__p);
    OZRotoshape::setInterpolation(v23, 1u);
    if (*a4)
      (*(void (**)(_QWORD *))(*((_QWORD *)v23 + 2372) + 344))((_QWORD *)v23 + 2372);
    v24 = (OZChannelBase *)PCString::PCString((PCString *)&__p, "Group");
    v25 = OZChannelBase::getNextUniqueID(v24);
    *(_OWORD *)v119 = xmmword_1B355DCD0;
    v26 = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)v119, (uint64_t)&__p, v25);
    PCString::~PCString((PCString *)&__p);
    v121 = *(_OWORD *)(v4 + 1376);
    v27 = *(_QWORD *)(v4 + 1392);
    *(_OWORD *)v119 = *MEMORY[0x1E0CA2E68];
    v28 = *(char **)(MEMORY[0x1E0CA2E68] + 16);
    v122 = v27;
    v120 = v28;
    (*(void (**)(OZSceneNode *, void **, _QWORD))(*(_QWORD *)v26 + 1136))(v26, v119, 0);
    OZScene::addRootNode((OZScene *)v4, v26);
    v29 = (_QWORD *)((char *)v23 + 200);
    if (v22)
      v30 = (_QWORD *)((char *)v23 + 200);
    else
      v30 = 0;
    (*(void (**)(OZSceneNode *, _QWORD *, _QWORD))(*(_QWORD *)v26 + 984))(v26, v30, 0);
    v121 = *(_OWORD *)(v4 + 1376);
    v31 = *(_QWORD *)(v4 + 1392);
    *(_OWORD *)v119 = *MEMORY[0x1E0CA2E68];
    v32 = *(char **)(MEMORY[0x1E0CA2E68] + 16);
    v122 = v31;
    v120 = v32;
    (*(void (**)(OZRotoshape *, void **, _QWORD))(*(_QWORD *)v23 + 336))(v23, v119, 0);
    if (a4[8])
    {
      *(_OWORD *)v119 = xmmword_1B355DD40;
      Behavior = OZApplication::createBehavior(theApp, (unsigned int *)v119);
      (*(void (**)(void **__return_ptr, _QWORD *))(*v29 + 1128))(v119, (_QWORD *)v23 + 25);
      OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(Behavior + 56), (const PCTimeRange *)v119, 0);
      OZWriteOnBehavior::setDefaultSpeedType((OZWriteOnBehavior *)Behavior, 0);
      (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v29 + 360))((_QWORD *)v23 + 25, Behavior, 0);
    }
  }
  else
  {
    do
    {
      if (v8 == v125[2] || (v9 = *(const void **)(v8 + 16)) == 0)
      {
        v11 = 0;
      }
      else
      {
        v11 = (uint64_t)v10;
        if (v10)
        {
          v12 = *a4;
          if (v12 == OZShape::isMask((OZShape *)(v10 + 18976)))
          {
            v102 = *(const void **)(v11 + 1160);
            if (v102)
            goto LABEL_14;
          }
        }
      }
      OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v125);
      v8 = v125[0];
    }
    while (v125[0] != v123[0]);
    if (!v11)
      goto LABEL_22;
LABEL_14:
    OZRotoshape::deleteAll((OZRotoshape *)v11);
    if (a4[8])
    {
      v14 = *(_QWORD *)(v11 + 1208);
      if (v14 != v11 + 1200)
      {
        while (1)
        {
          v15 = *(const void **)(v14 + 16);
          if (v15)
          {
            if (v16)
            {
              v17 = v16;
              if (((*(uint64_t (**)(char *))(*(_QWORD *)v16 + 480))(v16) & 1) == 0)
                break;
            }
          }
          v14 = *(_QWORD *)(v14 + 8);
          if (v14 == v11 + 1200)
            goto LABEL_32;
        }
        (*(void (**)(char *))(*(_QWORD *)v17 + 488))(v17);
        v121 = *(_OWORD *)(v4 + 1376);
        v103 = *(_QWORD *)(v4 + 1392);
        *(_OWORD *)v119 = *MEMORY[0x1E0CA2E68];
        v104 = *(char **)(MEMORY[0x1E0CA2E68] + 16);
        v122 = v103;
        v120 = v104;
        OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v17 + 56), (const PCTimeRange *)v119, 0);
      }
    }
  }
LABEL_32:
  if (!*a4)
  {
    LODWORD(v13) = *((_DWORD *)a4 + 4);
    (*(void (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)(v11 + 27320) + 712))(v11 + 27320, MEMORY[0x1E0CA2E68], 0, (double)v13);
    (*(void (**)(uint64_t, _QWORD, unsigned __int8 *, uint64_t))(*(_QWORD *)(v11 + 26160) + 840))(v11 + 26160, MEMORY[0x1E0CA2E68], a4 + 24, 1);
  }
  v119[0] = 0;
  v119[1] = 0;
  v120 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v34 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v115, v128, 16);
  if (v34)
  {
    v35 = *(_QWORD *)v116;
    do
    {
      for (i = 0; i != v34; ++i)
      {
        if (*(_QWORD *)v116 != v35)
          objc_enumerationMutation(a2);
        objc_msgSend(*(id *)(*((_QWORD *)&v115 + 1) + 8 * i), "CGPointValue");
        v39 = v37;
        v40 = v38;
        v41 = v119[1];
        if (v119[1] >= v120)
        {
          v43 = ((char *)v119[1] - (char *)v119[0]) >> 4;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v45 = v120 - (char *)v119[0];
          if ((v120 - (char *)v119[0]) >> 3 > v44)
            v44 = v45 >> 3;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
            v46 = 0xFFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v120, v46);
          v49 = &v48[16 * v43];
          *(_QWORD *)v49 = v39;
          *((_QWORD *)v49 + 1) = v40;
          v50 = (char *)v119[0];
          v51 = (char *)v119[1];
          v52 = v49;
          while (v51 != v50)
          {
            v53 = *((_OWORD *)v51 - 1);
            v51 -= 16;
            *((_OWORD *)v52 - 1) = v53;
            v52 -= 16;
          }
          v42 = v49 + 16;
          v119[0] = v52;
          v119[1] = v49 + 16;
          v120 = &v48[16 * v47];
          if (v50)
            operator delete(v50);
        }
        else
        {
          *(_QWORD *)v119[1] = v37;
          v41[1] = v38;
          v42 = v41 + 2;
        }
        v119[1] = v42;
      }
      v34 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v115, v128, 16);
    }
    while (v34);
  }
  if (v119[1] != v119[0])
  {
    v114 = v127;
    OZRotoshape::addVertices(v11, &v114, (double **)v119);
  }
  if (*a4)
    OZRotoshape::closeCurve((OZRotoshape *)v11);
  OZRotoshape::finishCurve((OZRotoshape *)v11);
  OZShape::setInterpolation((OZShape *)(v11 + 18976), *((_DWORD *)a4 + 1));
  if (a4[2])
  {
    __p = 0;
    v112 = 0;
    v113 = 0;
    v54 = (_QWORD *)(v11 + 19184);
    OZChannelCurve::getEnabledVerticesList((os_unfair_lock_s *)(v11 + 19184), MEMORY[0x1E0CA2E68], (char **)&v109);
    v56 = (char **)v109;
    v55 = v110;
    if (v109 != v110)
    {
      v57 = 0;
      v58 = (((_BYTE *)v110 - (_BYTE *)v109) >> 4) - 1;
      v59 = (CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        if (v57 && v58 != v57)
        {
          OZChannelCurve::setVertexInterpolation((uint64_t)v54, *v56, v56[1], 4);
          v107 = 0;
          v108 = 0;
          v105 = 0;
          v106 = 0;
          OZChannelCurve::getVertexDerivatives(v54, *v56, v56[1], v59, (double *)&v108, (double *)&v107, (double *)&v106, (double *)&v105);
          v61 = v112;
          v60 = v113;
          if (v112 >= v113)
          {
            v63 = (char *)__p;
            v64 = (v112 - (_BYTE *)__p) >> 3;
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 61)
              goto LABEL_147;
            v66 = v113 - (_BYTE *)__p;
            if ((v113 - (_BYTE *)__p) >> 2 > v65)
              v65 = v66 >> 2;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
            {
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v113, v67);
              v63 = (char *)__p;
              v61 = v112;
            }
            else
            {
              v68 = 0;
            }
            v69 = &v68[8 * v64];
            *(_QWORD *)v69 = v108;
            v62 = v69 + 8;
            while (v61 != v63)
            {
              v70 = *((_QWORD *)v61 - 1);
              v61 -= 8;
              *((_QWORD *)v69 - 1) = v70;
              v69 -= 8;
            }
            v60 = &v68[8 * v67];
            __p = v69;
            v112 = v62;
            v113 = v60;
            if (v63)
            {
              operator delete(v63);
              v60 = v113;
            }
          }
          else
          {
            *(_QWORD *)v112 = v108;
            v62 = v61 + 8;
          }
          v112 = v62;
          if (v62 >= v60)
          {
            v72 = (char *)__p;
            v73 = (v62 - (_BYTE *)__p) >> 3;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61)
              goto LABEL_147;
            v75 = v60 - (_BYTE *)__p;
            if (v75 >> 2 > v74)
              v74 = v75 >> 2;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76)
            {
              v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v113, v76);
              v72 = (char *)__p;
              v62 = v112;
            }
            else
            {
              v77 = 0;
            }
            v78 = &v77[8 * v73];
            *(_QWORD *)v78 = v107;
            v71 = v78 + 8;
            while (v62 != v72)
            {
              v79 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *((_QWORD *)v78 - 1) = v79;
              v78 -= 8;
            }
            v60 = &v77[8 * v76];
            __p = v78;
            v112 = v71;
            v113 = v60;
            if (v72)
            {
              operator delete(v72);
              v60 = v113;
            }
          }
          else
          {
            *(_QWORD *)v62 = v107;
            v71 = v62 + 8;
          }
          v112 = v71;
          if (v71 >= v60)
          {
            v81 = (char *)__p;
            v82 = (v71 - (_BYTE *)__p) >> 3;
            v83 = v82 + 1;
            if ((unint64_t)(v82 + 1) >> 61)
              goto LABEL_147;
            v84 = v60 - (_BYTE *)__p;
            if (v84 >> 2 > v83)
              v83 = v84 >> 2;
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
              v85 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v85 = v83;
            if (v85)
            {
              v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v113, v85);
              v81 = (char *)__p;
              v71 = v112;
            }
            else
            {
              v86 = 0;
            }
            v87 = &v86[8 * v82];
            *(_QWORD *)v87 = v106;
            v80 = v87 + 8;
            while (v71 != v81)
            {
              v88 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *((_QWORD *)v87 - 1) = v88;
              v87 -= 8;
            }
            v60 = &v86[8 * v85];
            __p = v87;
            v112 = v80;
            v113 = v60;
            if (v81)
            {
              operator delete(v81);
              v60 = v113;
            }
          }
          else
          {
            *(_QWORD *)v71 = v106;
            v80 = v71 + 8;
          }
          v112 = v80;
          if (v80 >= v60)
          {
            v90 = (char *)__p;
            v91 = (v80 - (_BYTE *)__p) >> 3;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 61)
LABEL_147:
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v93 = v60 - (_BYTE *)__p;
            if (v93 >> 2 > v92)
              v92 = v93 >> 2;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
              v94 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
            {
              v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v113, v94);
              v90 = (char *)__p;
              v80 = v112;
            }
            else
            {
              v95 = 0;
            }
            v96 = &v95[8 * v91];
            *(_QWORD *)v96 = v105;
            v89 = v96 + 8;
            while (v80 != v90)
            {
              v97 = *((_QWORD *)v80 - 1);
              v80 -= 8;
              *((_QWORD *)v96 - 1) = v97;
              v96 -= 8;
            }
            __p = v96;
            v112 = v89;
            v113 = &v95[8 * v94];
            if (v90)
              operator delete(v90);
          }
          else
          {
            *(_QWORD *)v80 = v105;
            v89 = v80 + 8;
          }
          v112 = v89;
          v55 = v110;
        }
        ++v57;
        v56 += 2;
      }
      while (v56 != v55);
      v98 = (char **)v109;
      if (v109 != v55)
      {
        v99 = 0;
        v100 = 0;
        v101 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          if (v100 && v58 != v100)
          {
            OZChannelCurve::setInputTangents((uint64_t)v54, *v98, v98[1], v101, *((double *)__p + v99), *((double *)__p + v99 + 1));
            OZChannelCurve::setOutputTangents((uint64_t)v54, *v98, v98[1], v101, *((double *)__p + v99 + 2), *((double *)__p + v99 + 3));
            v99 += 4;
            v55 = v110;
          }
          ++v100;
          v98 += 2;
        }
        while (v98 != v55);
        v55 = v109;
      }
    }
    if (v55)
    {
      v110 = v55;
      operator delete(v55);
    }
    if (__p)
    {
      v112 = (char *)__p;
      operator delete(__p);
    }
  }
  if (v119[0])
  {
    v119[1] = v119[0];
    operator delete(v119[0]);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v124);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v126);
  return 0;
}

void sub_1B2F01EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a41);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a50);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B2F01DFCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZXCreateFontWithName(const __CFString *a1, CGFloat a2, const CGAffineTransform *a3, const __CTFont **a4)
{
  const __CTFont *v5;
  uint64_t result;

  if (!a4)
    return 11;
  v5 = OZCreateFontWithName(a1, a2, a3);
  if (!v5)
    return 11;
  result = 0;
  *a4 = v5;
  return result;
}

void *OZXSetValueForChannel(void *result, uint64_t a2, void *a3, _DWORD *a4)
{
  const void *v7;
  void *v8;
  void *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  OZChannelEnum *v16;
  OZChannelEnum *v17;
  unsigned int Tag;
  void *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  void *v23;
  CGColorSpace *DeviceRGB;
  float v25;
  float v26;
  float v27;
  void *v28;
  void *v29;
  OZChannel2D *v30;
  OZChannel2D *v31;
  double v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  PCColor v40;
  double v41;
  double v42;
  double v43;
  PCString v44;

  if (result)
  {
    v7 = result;
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "intValue");
      if ((*(uint64_t (**)(void *))(*(_QWORD *)v9 + 840))(v9))
      {
        v11 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 840))(v9);
        v12 = 32;
        if (!v10)
          v12 = 40;
        (*(void (**)(_QWORD *, uint64_t))(*v11 + v12))(v11, 1);
      }
      *a4 = 0;
    }
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "intValue");
      (*(void (**)(void *, _QWORD, _QWORD, double))(*(_QWORD *)v14 + 712))(v14, MEMORY[0x1E0CA2E68], 0, (double)v15);
      *a4 = 0;
    }
    if (v16)
    {
      v17 = v16;
      Tag = objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "unsignedIntValue");
      OZChannelEnum::getNumberOfStrings(v17);
      if (*((_QWORD *)v17 + 22) != *((_QWORD *)v17 + 21))
        Tag = OZChannelEnum::getTag(v17, Tag);
      (*(void (**)(OZChannelEnum *, _QWORD, _QWORD, double))(*(_QWORD *)v17 + 712))(v17, MEMORY[0x1E0CA2E68], 0, (double)Tag);
      *a4 = 0;
    }
    if (v19)
    {
      v20 = v19;
      v21 = (const __CFString *)objc_msgSend(a3, "valueForKeyPath:", a2);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v44.var0 = 0;
        PCString::set(&v44, v21);
        (*(void (**)(void *, PCString *, uint64_t, uint64_t))(*(_QWORD *)v20 + 864))(v20, &v44, 1, 1);
        PCString::~PCString(&v44);
      }
      *a4 = 0;
    }
    if (v22)
    {
      v23 = v22;
      v42 = 0.0;
      v43 = 0.0;
      v41 = 0.0;
      objc_msgSend((id)objc_msgSend(a3, "valueForKeyPath:", a2), "getRed:green:blue:alpha:", &v43, &v42, &v41, 0);
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      v25 = v43;
      v26 = v42;
      v27 = v41;
      PCColor::PCColor(&v40, v25, v26, v27, 1.0, DeviceRGB);
      (*(void (**)(void *, _QWORD, PCColor *, _QWORD))(*(_QWORD *)v23 + 840))(v23, MEMORY[0x1E0CA2E68], &v40, 0);
      CGColorSpaceRelease(DeviceRGB);
      *a4 = 0;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v40.var1._obj);
    }
    if (v28)
    {
      v29 = v28;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v29 + 712))(v29, MEMORY[0x1E0CA2E68], 0);
      *a4 = 0;
    }
    if (v30)
    {
      v31 = v30;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      OZChannel2D::setValue(v31, MEMORY[0x1E0CA2E68], v32, v32, 0);
      *a4 = 0;
    }
    if (v33)
    {
      v34 = v33;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v34 + 712))(v34, MEMORY[0x1E0CA2E68], 0);
      *a4 = 0;
    }
    if (v35)
    {
      v36 = v35;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v36 + 712))(v36, MEMORY[0x1E0CA2E68], 0);
      *a4 = 0;
    }
    if (v37)
    {
      v38 = v37;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v38 + 712))(v38, MEMORY[0x1E0CA2E68], 0);
      *a4 = 0;
    }
    if (result)
    {
      v39 = result;
      objc_msgSend((id)objc_msgSend(a3, "valueForKey:", a2), "doubleValue");
      result = (void *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(v39[55] + 712))(v39 + 55, MEMORY[0x1E0CA2E68], 0);
      *a4 = 0;
    }
  }
  return result;
}

void sub_1B2F02500(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 72));
  _Unwind_Resume(a1);
}

void *__OZXGetPublishedSettingDictionary(NSString *a1, NSNumber *a2, NSString *a3, NSObject *a4, NSArray *a5, NSString *a6)
{
  void *v12;

  v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 6);
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a2, CFSTR("PVEffectParam_ObjectIDKey"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a1, CFSTR("PVEffectParam_NameKey"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a3, CFSTR("PVEffectParam_TypeKey"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a4, CFSTR("PVEffectParam_ValueKey"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a5, CFSTR("PVEffectParam_ValuesArrayKey"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a6, CFSTR("PVEffectParam_ChanRefKey"));
  return v12;
}

void *__OZXGetPublishedSettingForOZChannelObjectRoot(void *result, uint64_t a2, NSString *a3, NSString *a4)
{
  void *v4;
  NSObject *v7;

  if (result)
  {
    v4 = result;
    result = 0;
    if (a2)
    {
      if (*(_QWORD *)v4)
      {
        result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
        if (result)
        {
          if (*(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, 1, 1));
            return __OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.BOOL"), v7, 0, a4);
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *__OZXGetPublishedSettingForOZChannelBool(uint64_t *result, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  uint64_t *v5;
  uint64_t v6;
  NSObject *v9;

  if (result)
  {
    v5 = result;
    result = 0;
    if (this)
    {
      v6 = *v5;
      if (v6)
      {
        if ((a5->flags & 1) != 0 && *(_QWORD *)(v6 + 24))
        {
          v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", OZChannel::getValueAsInt(this, a5, 0.0) != 0);
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.BOOL"), v9, 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void *__OZXGetPublishedSettingForOZChannelEnum(uint64_t a1, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  void *v6;
  uint64_t ValueAsInt;
  NSArray *v10;
  int NumberOfStrings;
  unsigned int v12;

  if (!a1)
    return 0;
  v6 = 0;
  if (!this || !*(_QWORD *)a1)
    return v6;
  if ((a5->flags & 1) == 0 || !*(_QWORD *)(*(_QWORD *)a1 + 24))
    return 0;
  ValueAsInt = OZChannel::getValueAsInt(this, a5, 0.0);
  if (*(void ***)&this[1].var3 == this[1].var2)
  {
    v10 = 0;
  }
  else
  {
    v10 = (NSArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    NumberOfStrings = OZChannelEnum::getNumberOfStrings((OZChannelEnum *)this);
    if (NumberOfStrings >= 1)
    {
      v12 = 0;
      do
        -[NSArray addObject:](v10, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", OZChannelEnum::getTag((OZChannelEnum *)this, v12++)));
      while (NumberOfStrings != v12);
    }
  }
  v6 = __OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.enum"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", ValueAsInt), v10, a4);

  return v6;
}

void *__OZXGetPublishedSettingForOZChannelText(uint64_t a1, OZChannelBase *a2, NSString *a3, NSString *a4, uint64_t a5)
{
  void *v6;
  const void *ObjectManipulator;
  unsigned int *v11;
  unsigned int *v12;
  NSNumber *v13;
  uint64_t v14;
  void *v15;
  __CFString *v16;
  NSObject *v17;
  PCString v19;

  if (!a1)
    return 0;
  v6 = 0;
  if (a2 && *(_QWORD *)a1)
  {
    if ((*(_BYTE *)(a5 + 12) & 1) != 0 && *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      (*((void (**)(PCString *__return_ptr, OZChannelBase *))a2->var0 + 106))(&v19, a2);
      ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a2);
      if (ObjectManipulator
      {
        v12 = v11;
        v13 = (NSNumber *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v11[70]);
        v14 = (*(uint64_t (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)v12 + 120))(v12, a5, 0);
        v15 = (void *)v14;
        if (v14)
        {
          v16 = CFSTR("effect.param.attributedstring");
          v17 = v14;
LABEL_12:
          v6 = __OZXGetPublishedSettingDictionary(a3, v13, &v16->isa, v17, 0, a4);

          PCString::~PCString(&v19);
          return v6;
        }
      }
      else
      {
        v13 = 0;
      }
      v17 = PCString::ns_str(&v19);
      v15 = 0;
      v16 = CFSTR("effect.param.string");
      goto LABEL_12;
    }
    return 0;
  }
  return v6;
}

void *__OZXGetPublishedSettingForOZChannelColorNoAlpha(uint64_t a1, uint64_t a2, NSString *a3, NSString *a4, uint64_t a5)
{
  void *v6;
  CGColorSpace *v11;
  float v12;
  uint64_t v13;
  PCColor v14;

  if (!a1)
    return 0;
  v6 = 0;
  if (a2 && *(_QWORD *)a1)
  {
    if ((*(_BYTE *)(a5 + 12) & 1) != 0 && *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      PCColor::PCColor(&v14);
      (*(void (**)(uint64_t, uint64_t, PCColor *, double))(*(_QWORD *)a2 + 824))(a2, a5, &v14, 0.0);
      v13 = 0;
      v12 = 0.0;
      PCColor::getColorSpace(&v14, &v11);
      PCColor::getRGB(&v14, (float *)&v13 + 1, (float *)&v13, &v12, (const PCColorSpaceHandle *)&v11);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
      v6 = __OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.color"), objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", *((float *)&v13 + 1), *(float *)&v13, v12, 1.0), 0, a4);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v14.var1._obj);
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t *__OZXGetPublishedSettingForOZChannelUint32(uint64_t *result, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  uint64_t *v5;
  uint64_t v6;
  NSObject *v9;

  if (result)
  {
    v5 = result;
    result = 0;
    if (this)
    {
      v6 = *v5;
      if (v6)
      {
        if ((a5->flags & 1) != 0 && *(_QWORD *)(v6 + 24))
        {
          v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", OZChannel::getValueAsUint(this, a5, 0.0));
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.uint"), v9, 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *__OZXGetPublishedSettingForOZChannelDouble(uint64_t *result, OZChannel *this, NSString *a3, NSString *a4, CMTime *a5)
{
  uint64_t *v5;
  uint64_t v6;

  if (result)
  {
    v5 = result;
    result = 0;
    if (this)
    {
      v6 = *v5;
      if (v6)
      {
        if ((a5->flags & 1) != 0 && *(_QWORD *)(v6 + 24))
        {
          OZChannel::getValueAsDouble(this, a5, 0.0);
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.double"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:"), 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *__OZXGetPublishedSettingForOZChannelScale(uint64_t *result, uint64_t a2, NSString *a3, NSString *a4, CMTime *a5)
{
  uint64_t *v6;
  uint64_t v7;
  double v11;
  double v12;

  if (result)
  {
    v6 = result;
    result = 0;
    if (a2)
    {
      v7 = *v6;
      if (v7)
      {
        if ((a5->flags & 1) != 0 && *(_QWORD *)(v7 + 24))
        {
          OZChannel::getValueAsDouble((OZChannel *)(a2 + 136), a5, 0.0);
          v12 = v11;
          OZChannel::getValueAsDouble((OZChannel *)(a2 + 288), a5, 0.0);
          return (uint64_t *)__OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.double"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12), 0, a4);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void *__OZXGetPublishedSettingForOZChannelShape(uint64_t a1, uint64_t a2, NSString *a3, NSString *a4, __int128 *a5)
{
  void *v5;
  uint64_t v9;
  _BYTE *v10;
  NSArray *v11;
  unint64_t v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  CGColorSpace *v23;

  if (!a1)
    return 0;
  v5 = 0;
  if (!a2 || !*(_QWORD *)a1)
    return v5;
  if ((*((_BYTE *)a5 + 12) & 1) == 0 || !*(_QWORD *)(*(_QWORD *)a1 + 24))
    return 0;
  v9 = *(_QWORD *)(a2 + 856);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v21);
  v21 = *a5;
  v22 = *((_QWORD *)a5 + 2);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  __p = 0;
  v16 = 0;
  v17 = 0;
  OZShape::getSamples(v9, (uint64_t)&v21, (char *)&v18, (char *)&__p);
  v10 = __p;
  if (v19 == v18 || (v19 - (_BYTE *)v18) >> 3 != (v16 - (_BYTE *)__p) >> 3)
  {
    v5 = 0;
  }
  else
  {
    v11 = (NSArray *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:");
    if (v19 != v18)
    {
      v12 = 0;
      if ((unint64_t)((v19 - (_BYTE *)v18) >> 3) <= 1)
        v13 = 1;
      else
        v13 = (v19 - (_BYTE *)v18) >> 3;
      do
      {
        if (v12 >= (v19 - (_BYTE *)v18) >> 3 || v12 >= (v16 - (_BYTE *)__p) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        -[NSArray addObject:](v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", *((double *)v18 + v12), *((double *)__p + v12)));
        ++v12;
      }
      while (v13 != v12);
    }
    v5 = __OZXGetPublishedSettingDictionary(a3, 0, CFSTR("effect.param.point"), 0, v11, a4);
    v10 = __p;
  }
  if (v10)
  {
    v16 = v10;
    operator delete(v10);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v23);
  return v5;
}

void *__OZXAddPublishedSettingsToArray(void *result, _QWORD *a2, OZChannelBase *this, NSString *a4, __int128 *a5, int a6, __int128 *a7)
{
  void *v13;
  OZChannelRef *Ref;
  void **v15;
  OZChannelRef *v16;
  NSString *v17;
  void *v18;
  void *v19;
  OZChannel *v20;
  uint64_t *v21;
  OZChannel *v22;
  void *v23;
  OZChannelBase *v24;
  __int128 *v25;
  void *v26;
  void *v27;
  void *v28;
  OZChannel *v29;
  uint64_t *v30;
  OZChannel *v31;
  uint64_t *v32;
  void *v33;
  uint64_t *v34;
  void *v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  CMTime v46;
  CMTime v47;

  if (result && a2 && this && *a2 && (*((_BYTE *)a5 + 12) & 1) != 0)
  {
    v13 = result;
    Ref = OZChannelBase::getRef(this, 1);
    v15 = (void **)Ref;
    v16 = Ref;
    if (*((char *)Ref + 23) < 0)
      v16 = *(OZChannelRef **)Ref;
    v17 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v16, 4);
    if (v18)
    {
      v19 = __OZXGetPublishedSettingForOZChannelObjectRoot(a2, (uint64_t)v18, a4, v17);
      if (v19)
        objc_msgSend(v13, "addObject:", v19);
    }
    if (v20)
    {
      v47 = *(CMTime *)a5;
      v21 = __OZXGetPublishedSettingForOZChannelBool(a2, v20, a4, v17, &v47);
      if (v21)
        objc_msgSend(v13, "addObject:", v21);
    }
    if (v22)
    {
      v46 = *(CMTime *)a5;
      v23 = __OZXGetPublishedSettingForOZChannelEnum((uint64_t)a2, v22, a4, v17, &v46);
      if (v23)
        objc_msgSend(v13, "addObject:", v23);
    }
    if (v24)
    {
      v25 = a6 ? a7 : a5;
      v44 = *v25;
      v45 = *((_QWORD *)v25 + 2);
      v26 = __OZXGetPublishedSettingForOZChannelText((uint64_t)a2, v24, a4, v17, (uint64_t)&v44);
      if (v26)
        objc_msgSend(v13, "addObject:", v26);
    }
    if (v27)
    {
      v42 = *a5;
      v43 = *((_QWORD *)a5 + 2);
      v28 = __OZXGetPublishedSettingForOZChannelColorNoAlpha((uint64_t)a2, (uint64_t)v27, a4, v17, (uint64_t)&v42);
      if (v28)
        objc_msgSend(v13, "addObject:", v28);
    }
    if (v29)
    {
      v41 = *(CMTime *)a5;
      v30 = __OZXGetPublishedSettingForOZChannelUint32(a2, v29, a4, v17, &v41);
      if (v30)
        objc_msgSend(v13, "addObject:", v30);
    }
    if (v31)
    {
      v40 = *(CMTime *)a5;
      v32 = __OZXGetPublishedSettingForOZChannelDouble(a2, v31, a4, v17, &v40);
      if (v32)
        objc_msgSend(v13, "addObject:", v32);
    }
    if (v33)
    {
      v39 = *(CMTime *)a5;
      v34 = __OZXGetPublishedSettingForOZChannelScale(a2, (uint64_t)v33, a4, v17, &v39);
      if (v34)
        objc_msgSend(v13, "addObject:", v34);
    }
    if (v35)
    {
      v37 = *a5;
      v38 = *((_QWORD *)a5 + 2);
      v36 = __OZXGetPublishedSettingForOZChannelShape((uint64_t)a2, (uint64_t)v35, a4, v17, &v37);
      if (v36)
        objc_msgSend(v13, "addObject:", v36);
    }
    OZChannelRef::~OZChannelRef(v15);
    return (void *)MEMORY[0x1B5E29170]();
  }
  return result;
}

void *__OZXGetPublishedSettings(_QWORD *a1, char a2, CMTime *a3, int a4, CMTime *a5)
{
  uint64_t v6;
  uint64_t v11;
  OZChannelBase ***v12;
  void *v13;
  OZChannelBase **v14;
  OZChannelBase *v15;
  BOOL v16;
  char v17;
  PCString *v18;
  OZChannelBase *v19;
  __CFString *v20;
  OZChannelBase *TargetChannelForProxy;
  int v23;
  OZPublishSettings *v24;
  __int128 v25;
  CMTimeEpoch v26;
  __int128 v27;
  CMTimeEpoch epoch;

  if (!a1)
    return 0;
  if (!*a1)
    return 0;
  v6 = *(_QWORD *)(*a1 + 24);
  if (!v6)
    return 0;
  v11 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 21);
  v12 = *(OZChannelBase ****)(v6 + 864);
  if (!v12)
    return 0;
  v13 = (void *)v11;
  v23 = a4;
  v14 = *v12;
  if (*v12 != v12[1])
  {
    v24 = (OZPublishSettings *)(v6 + 720);
    while (1)
    {
      v15 = *v14;
      if ((a2 & 1) == 0)
        break;
      if (v15)
        goto LABEL_14;
LABEL_18:
      if (++v14 == v12[1])
        return v13;
    }
    v16 = OZChannelBase::testFlag(*v14, 2);
    if (v15)
      v17 = v16;
    else
      v17 = 1;
    if ((v17 & 1) != 0)
      goto LABEL_18;
LABEL_14:
    if (v18)
    {
      v19 = (OZChannelBase *)v18;
      v20 = (__CFString *)PCString::ns_str(v18 + 4);
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v24, v19);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != v15)
        {
          v27 = *(_OWORD *)&a3->value;
          epoch = a3->epoch;
          v25 = *(_OWORD *)&a5->value;
          v26 = a5->epoch;
          __OZXAddPublishedSettingsToArray(v13, a1, TargetChannelForProxy, &v20->isa, &v27, v23, &v25);
        }
      }
    }
    goto LABEL_18;
  }
  return v13;
}

void *OZXGetPublishedSettings(_QWORD *a1)
{
  CMTime *v2;
  int v3;
  CMTime v5;
  CMTime v6;
  CMTime v7;
  CMTime v8;

  v2 = (CMTime *)MEMORY[0x1E0CA2E68];
  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  OZXGetPosterFrameTime(a1, &v7);
  if (v3 || (v7.flags & 1) == 0)
    v7 = *v2;
  v6 = v8;
  v5 = v7;
  return __OZXGetPublishedSettings(a1, 0, &v6, 1, &v5);
}

uint64_t OZXGetPublishedSetting(_QWORD *a1, PCString *a2, CMTime *a3, char a4)
{
  void *v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  CMTime v15;
  CMTime v16;

  v15 = *a3;
  v16 = v15;
  v5 = __OZXGetPublishedSettings(a1, a4, &v16, 0, &v15);
  v9 = 0;
  v10 = &v9;
  v11 = 0x3052000000;
  v12 = __Block_byref_object_copy__17;
  v13 = __Block_byref_object_dispose__17;
  v14 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___Z22OZXGetPublishedSettingPvR8PCString6CMTimeb_block_invoke;
  v8[3] = &unk_1E65B31E8;
  v8[4] = &v9;
  v8[5] = a2;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v8);
  v6 = v10[5];
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1B2F03608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t ___Z22OZXGetPublishedSettingPvR8PCString6CMTimeb_block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = -[__CFString isEqualToString:]((id)PCString::ns_str(*(PCString **)(a1 + 40)), "isEqualToString:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("PVEffectParam_NameKey")));
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = a2;
    *a4 = 1;
  }
  return result;
}

uint64_t OZXSetPublishedSettings(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  OZNotificationManager *v5;
  uint64_t v6;
  const void **v7;
  OZChannelBase *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  OZChannelBase *TargetChannelForProxy;
  OZChannelBase *v16;
  void *v17;
  void *v18;
  int v19;
  OZChannelEnum *v20;
  OZChannelEnum *v21;
  unsigned int Tag;
  void *v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  CGColorSpace *DeviceRGB;
  float v29;
  float v30;
  float v31;
  void *v32;
  void *v33;
  OZChannel2D *v34;
  OZChannel2D *v35;
  double v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  const void *ObjectManipulator;
  OZRigWidget *v46;
  OZRigWidget *v47;
  uint64_t CurrentSnapshot;
  uint64_t v49;
  OZNotificationManager *v50;
  OZDocument **v52;
  uint64_t v53;
  const void **v54;
  OZChannelBase *v55;
  OZChannelBase *v56;
  PCColor v57;
  double v58;
  double v59;
  double v60;
  PCString v61;
  PCString v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unsigned int v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 7;
  v2 = *a1;
  if (!*a1)
    return 7;
  v67 = 11;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 7;
  v5 = *(OZNotificationManager **)(*(_QWORD *)(v3 + 1584) + 168);
  if (v5)
    OZNotificationManager::processNotifications(v5);
  v6 = *(_QWORD *)(v3 + 864);
  if (!v6)
    return 11;
  v52 = (OZDocument **)v3;
  v7 = *(const void ***)v6;
  if (*(_QWORD *)v6 != *(_QWORD *)(v6 + 8))
  {
    v53 = v6;
    do
    {
      v8 = (OZChannelBase *)*v7;
      if (*v7)
      else
        v56 = 0;
      v54 = v7;
      v55 = v8;
      v9 = OZChannelBase::testFlag(v8, 2);
      if (v56)
        v10 = v9;
      else
        v10 = 1;
      if ((v10 & 1) == 0)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
        if (v11)
        {
          v12 = *(_QWORD *)v64;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v64 != v12)
                objc_enumerationMutation(a2);
              v14 = *(const __CFString **)(*((_QWORD *)&v63 + 1) + 8 * v13);
              v62.var0 = 0;
              PCString::set(&v62, v14);
              if (!PCString::compare(&v56->var4, &v62))
              {
                TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v52 + 90), v56);
                v16 = TargetChannelForProxy;
                if (TargetChannelForProxy)
                {
                  if (TargetChannelForProxy != v55)
                  {
                    OZXSetValueForChannel(TargetChannelForProxy, (uint64_t)v14, a2, &v67);
                    if (v17)
                    {
                      v18 = v17;
                      v19 = objc_msgSend((id)objc_msgSend(a2, "valueForKeyPath:", v14), "intValue");
                      (*(void (**)(void *, _QWORD, _QWORD, double))(*(_QWORD *)v18 + 712))(v18, MEMORY[0x1E0CA2E68], 0, (double)v19);
                      v67 = 0;
                    }
                    if (v20)
                    {
                      v21 = v20;
                      Tag = objc_msgSend((id)objc_msgSend(a2, "valueForKeyPath:", v14), "unsignedIntValue");
                      if (Tag < OZChannelEnum::getNumberOfStrings(v21))
                      {
                        if (*((_QWORD *)v21 + 22) != *((_QWORD *)v21 + 21))
                          Tag = OZChannelEnum::getTag(v21, Tag);
                        (*(void (**)(OZChannelEnum *, _QWORD, _QWORD, double))(*(_QWORD *)v21 + 712))(v21, MEMORY[0x1E0CA2E68], 0, (double)Tag);
                        v67 = 0;
                      }
                    }
                    if (v23)
                    {
                      v24 = v23;
                      v25 = (const __CFString *)objc_msgSend(a2, "valueForKeyPath:", v14);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        v61.var0 = 0;
                        PCString::set(&v61, v25);
                        (*(void (**)(void *, PCString *, uint64_t, uint64_t))(*(_QWORD *)v24 + 864))(v24, &v61, 1, 1);
                        PCString::~PCString(&v61);
                      }
                      v67 = 0;
                    }
                    if (v26)
                    {
                      v27 = v26;
                      v59 = 0.0;
                      v60 = 0.0;
                      v58 = 0.0;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKeyPath:", v14), "getRed:green:blue:alpha:", &v60, &v59, &v58, 0);
                      DeviceRGB = CGColorSpaceCreateDeviceRGB();
                      v29 = v60;
                      v30 = v59;
                      v31 = v58;
                      PCColor::PCColor(&v57, v29, v30, v31, 1.0, DeviceRGB);
                      (*(void (**)(void *, _QWORD, PCColor *, _QWORD))(*(_QWORD *)v27 + 840))(v27, MEMORY[0x1E0CA2E68], &v57, 0);
                      CGColorSpaceRelease(DeviceRGB);
                      v67 = 0;
                      PCCFRef<CGColorSpace *>::~PCCFRef(&v57.var1._obj);
                    }
                    if (v32)
                    {
                      v33 = v32;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v33 + 712))(v33, MEMORY[0x1E0CA2E68], 0);
                      v67 = 0;
                    }
                    if (v34)
                    {
                      v35 = v34;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      OZChannel2D::setValue(v35, MEMORY[0x1E0CA2E68], v36, v36, 0);
                      v67 = 0;
                    }
                    if (v37)
                    {
                      v38 = v37;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v38 + 712))(v38, MEMORY[0x1E0CA2E68], 0);
                      v67 = 0;
                    }
                    if (v39)
                    {
                      v40 = v39;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v40 + 712))(v40, MEMORY[0x1E0CA2E68], 0);
                      v67 = 0;
                    }
                    if (v41)
                    {
                      v42 = v41;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v42 + 712))(v42, MEMORY[0x1E0CA2E68], 0);
                      v67 = 0;
                    }
                    if (v43)
                    {
                      v44 = v43;
                      objc_msgSend((id)objc_msgSend(a2, "valueForKey:", v14), "doubleValue");
                      (*(void (**)(_QWORD *, _QWORD, _QWORD))(v44[55] + 712))(v44 + 55, MEMORY[0x1E0CA2E68], 0);
                      v67 = 0;
                    }
                    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v16);
                    if (ObjectManipulator)
                    {
                      if (v46)
                      {
                        v47 = v46;
                        if (*((OZChannelBase **)v46 + 136) == v16)
                        {
                          CurrentSnapshot = OZRigWidget::getCurrentSnapshot((OZChannel **)v46);
                          if (CurrentSnapshot)
                            OZRigWidget::setActiveSnapshot(v47, *(_DWORD *)(CurrentSnapshot + 32), 1);
                        }
                      }
                    }
                  }
                }
              }
              PCString::~PCString(&v62);
              ++v13;
            }
            while (v11 != v13);
            v49 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v63, v68, 16);
            v11 = v49;
          }
          while (v49);
        }
      }
      v7 = v54 + 1;
    }
    while (v54 + 1 != *(const void ***)(v53 + 8));
  }
  OZDocument::postNotification(v52[198], 12);
  v50 = (OZNotificationManager *)*((_QWORD *)v52[198] + 21);
  if (v50)
    OZNotificationManager::processNotifications(v50);
  OZScene::dirty((OZScene *)v52);
  return v67;
}

uint64_t OZXSetDuration(void *a1, const CMTime *a2)
{
  uint64_t v2;
  __n128 v4;
  _QWORD *v5;
  _QWORD *i;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *j;
  uint64_t v10;
  CMTimeEpoch v12;
  CMTimeEpoch v13;
  CMTime time2;
  __int128 v15;
  CMTimeEpoch epoch;
  CMTime v17;
  CMTime time1;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  uint64_t v23;
  CMTime v24;
  uint64_t v25;
  CMTime v26;
  CMTime v27;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  memset(&v26, 0, sizeof(v26));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v2 + 336), (__n128 *)&time1);
  v24 = *(CMTime *)(v2 + 1352);
  v22 = *(CMTime *)(v2 + 1376);
  PC_CMTimeSaferAdd(&v24, &v22, (uint64_t)&v20);
  v24 = v20;
  v22 = time1;
  PC_CMTimeSaferSubtract(&v24, &v22, (uint64_t)&v26);
  OZScene::begin((OZScene *)v2, (uint64_t)&v24);
  v4.n128_f64[0] = OZScene::end_sel((OZScene *)v2, (uint64_t)&v22);
  while (v24.value != v22.value)
  {
    if (v24.value != v24.epoch)
    {
      v5 = *(_QWORD **)(v24.value + 16);
      if (v5)
      {
        (*(void (**)(CMTime *__return_ptr, _QWORD, __n128))(*v5 + 1128))(&v20, *(_QWORD *)(v24.value + 16), v4);
        time1 = v20;
        time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v27);
        time1 = v27;
        time2 = v26;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          time1 = v20;
          v19 = *a2;
          (*(void (**)(_QWORD *, CMTime *, _QWORD))(*v5 + 1136))(v5, &time1, 0);
        }
        for (i = (_QWORD *)v5[126]; i != v5 + 125; i = (_QWORD *)i[1])
        {
          v7 = i[2];
          (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)v7 + 608))(&time1, v7);
          time2 = time1;
          v27 = v19;
          PC_CMTimeSaferAdd(&time2, &v27, (uint64_t)&v17);
          time2 = v17;
          v27 = v26;
          if ((CMTimeCompare(&time2, &v27) & 0x80000000) == 0)
          {
            time2 = time1;
            v15 = *(_OWORD *)&a2->value;
            epoch = a2->epoch;
            OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v7 + 56), (const PCTimeRange *)&time2, 0);
          }
        }
        v8 = v5 + 122;
        for (j = (_QWORD *)v5[123]; j != v8; j = (_QWORD *)j[1])
        {
          v10 = j[2];
          (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)v10 + 592))(&time1, v10);
          time2 = time1;
          v27 = v19;
          PC_CMTimeSaferAdd(&time2, &v27, (uint64_t)&v17);
          time2 = v17;
          v27 = v26;
          if ((CMTimeCompare(&time2, &v27) & 0x80000000) == 0)
          {
            time2 = time1;
            v15 = *(_OWORD *)&a2->value;
            epoch = a2->epoch;
            OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)(v10 + 88), (const PCTimeRange *)&time2, 0);
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(&v24);
  }
  *(_OWORD *)&v20.value = *(_OWORD *)(v2 + 1352);
  v12 = *(_QWORD *)(v2 + 1368);
  *(_OWORD *)&v21.value = *(_OWORD *)&a2->value;
  v13 = a2->epoch;
  v20.epoch = v12;
  v21.epoch = v13;
  OZScene::setTimeRange((OZScene *)v2, (const PCTimeRange *)&v20);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
  return 0;
}

void sub_1B2F041AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v37 - 192);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F0418CLL);
}

uint64_t OZXSetCameraQuaternion(uint64_t *a1, const CMTime *a2, double *a3)
{
  uint64_t v3;
  OZScene *v4;
  unsigned int ActiveCamera;
  void *Node;
  _QWORD *v8;
  _QWORD *v9;
  OZChannelBase *v10;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[3];
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  if (!a1)
    return 7;
  v3 = *a1;
  if (!*a1)
    return 7;
  v4 = *(OZScene **)(v3 + 24);
  if (!v4)
    return 7;
  ActiveCamera = OZScene::getActiveCamera(*(OZScene **)(v3 + 24), a2);
  Node = OZScene::getNode(v4, ActiveCamera);
  if (!Node)
    return 11;
  if (!v8)
    return 11;
  v9 = v8;
  v10 = (OZChannelBase *)*((_QWORD *)v4 + 188);
  if (v10)
    OZChannelBase::setRangeName(v10, (const PCString *)1);
  v28 = 0x3FF0000000000000;
  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  v26 = 0u;
  v27 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v19, a3);
  memset(v14, 0, sizeof(v14));
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v15 = 4;
  PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v19, (uint64_t)v14);
  v12 = v16;
  v13 = v17;
  OZTransformNode::setRotation(v9, (double *)&v12, MEMORY[0x1E0CA2E68]);
  return 0;
}

uint64_t OZXFindFilter(uint64_t a1, const PCString *a2, _QWORD *a3)
{
  OZScene *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  PCString *InternalName;
  void *v12;
  _QWORD v14[4];
  uint64_t v15;
  _QWORD v16[4];
  uint64_t v17;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  OZScene::begin(*(OZScene **)(*(_QWORD *)a1 + 24), (uint64_t)v16);
  OZScene::end_sel(v3, (uint64_t)v14);
  v6 = 11;
  while (v16[0] != v14[0])
  {
    if (v16[0] != v16[2])
    {
      v7 = *(_QWORD *)(v16[0] + 16);
      if (v7)
      {
        v8 = v7 + 976;
        for (i = *(_QWORD *)(v7 + 984); i != v8; i = *(_QWORD *)(i + 8))
        {
          v10 = *(_QWORD *)(i + 16);
          InternalName = (PCString *)OZObjectManipulator::getInternalName((OZObjectManipulator *)(v10 + 48));
          if (!PCString::compare(InternalName, a2))
          {
            if (v10)
            else
              v12 = 0;
            v6 = 0;
            *a3 = v12;
          }
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v16);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v17);
  return v6;
}

void sub_1B2F04484(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F04464);
}

uint64_t OZXEquirectProjectFilterSetFrontFacing(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  CFComparisonResult v6;
  OZPublishSettings *v7;
  OZChannel *v8;
  OZChannelBase *TargetChannelForProxy;
  BOOL v10;
  void *v11;
  PCString v13;
  OZChannel *v14;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  v14 = 0;
  PCString::PCString(&v13, "SelfieEffectUsesCameraFacing");
  v6 = __OZXGetPublishedChannel(a1, &v13, &v14);
  PCString::~PCString(&v13);
  if (!(_DWORD)v6)
  {
    v7 = (OZPublishSettings *)(v4 + 720);
    v8 = v14;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v7, (OZChannelBase *)v14);
    if (TargetChannelForProxy)
      v10 = TargetChannelForProxy == (OZChannelBase *)v8;
    else
      v10 = 1;
    if (!v10)
    {
      if (v11)
        (*(void (**)(void *, _QWORD, _QWORD, double))(*(_QWORD *)v11 + 712))(v11, MEMORY[0x1E0CA2E68], 0, (double)a3);
    }
  }
  return v6;
}

void sub_1B2F045A0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F04588);
}

uint64_t OZXEquirectProjectFilterSetQuaternion(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  OZPublishSettings *v8;
  uint64_t v9;
  CFComparisonResult v10;
  OZChannel *v11;
  OZChannelBase *TargetChannelForProxy;
  void *v13;
  PCString v15;
  OZChannel *v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v6)
    return 7;
  v7 = 0;
  v8 = (OZPublishSettings *)(v6 + 720);
  *(double *)v17 = a2;
  *(double *)&v17[1] = a3;
  *(double *)&v17[2] = a4;
  *(double *)&v17[3] = a5;
  v9 = MEMORY[0x1E0CA2E68];
  do
  {
    v16 = 0;
    PCString::PCString(&v15, off_1E65B3208[v7]);
    v10 = __OZXGetPublishedChannel(a1, &v15, &v16);
    PCString::~PCString(&v15);
    if (!(_DWORD)v10)
    {
      v11 = v16;
      TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v8, (OZChannelBase *)v16);
      if (TargetChannelForProxy)
      {
        if (TargetChannelForProxy != (OZChannelBase *)v11)
        {
          if (v13)
            (*(void (**)(void *, uint64_t, _QWORD, double))(*(_QWORD *)v13 + 712))(v13, v9, 0, *(double *)&v17[v7]);
        }
      }
    }
    ++v7;
  }
  while (v7 != 4);
  return v10;
}

void sub_1B2F0471C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B2F046DCLL);
  }
  _Unwind_Resume(exception_object);
}

CFComparisonResult OZXSetSelfieRollRadians(void *a1, double a2)
{
  uint64_t v3;
  CFComparisonResult v5;
  OZPublishSettings *v6;
  OZChannel *v7;
  OZChannelBase *TargetChannelForProxy;
  BOOL v9;
  void *v10;
  PCString v12;
  OZChannel *v13;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v13 = 0;
  PCString::PCString(&v12, "SelfieDeviceRollAngle");
  v5 = __OZXGetPublishedChannel(a1, &v12, &v13);
  PCString::~PCString(&v12);
  if (!(_DWORD)v5)
  {
    v6 = (OZPublishSettings *)(v3 + 720);
    v7 = v13;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy(v6, (OZChannelBase *)v13);
    if (TargetChannelForProxy)
      v9 = TargetChannelForProxy == (OZChannelBase *)v7;
    else
      v9 = 1;
    if (!v9)
    {
      if (v10)
        (*(void (**)(void *, _QWORD, _QWORD, double))(*(_QWORD *)v10 + 712))(v10, MEMORY[0x1E0CA2E68], 0, a2 / 6.28318531);
    }
  }
  return v5;
}

void sub_1B2F04840(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F04828);
}

uint64_t OZXSetUseRenderCache(void *a1, unsigned int a2, int a3)
{
  OZScene *v3;
  void *Node;
  OZElement *v6;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  Node = OZScene::getNode(v3, a2);
  if (!Node)
    return 11;
  if (!v6)
    return 11;
  OZElement::cacheRenders(v6, a3);
  return 0;
}

uint64_t OZXClearCachedRender(void *a1, unsigned int a2)
{
  OZScene *v2;
  void *Node;
  OZElement *v4;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  Node = OZScene::getNode(v2, a2);
  if (!Node)
    return 11;
  if (!v4)
    return 11;
  OZElement::clearCachedRender(v4);
  return 0;
}

uint64_t OZXCreateGroupWithGroup(OZDocument **a1, uint64_t a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  OZDocument *v6;
  OZChannelBase **v7;
  void *Node;
  char *v12;
  char *v13;
  OZChannelBase *v14;
  uint64_t NextUniqueID;
  OZSceneNode *SceneNode;
  __n128 TimeOffset;
  OZNotificationManager *v19;
  unsigned int v20[14];
  __n128 v21;

  if (!a1)
    return 7;
  v6 = *a1;
  if (!*a1)
    return 7;
  v7 = (OZChannelBase **)*((_QWORD *)v6 + 3);
  if (!v7)
    return 7;
  Node = OZScene::getNode(*((OZScene **)v6 + 3), a3);
  if (!Node)
    return 7;
  if (!v12)
    return 7;
  v13 = v12;
  v14 = (OZChannelBase *)OZChannelBase::setRangeName(v7[188], (const PCString *)1);
  NextUniqueID = OZChannelBase::getNextUniqueID(v14);
  *a5 = NextUniqueID;
  *(_OWORD *)v20 = xmmword_1B355DCD0;
  SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, v20, a2, NextUniqueID);
  if (OZGroup::is360Group((OZGroup *)v13))
    return 11;
  OZScene::addRootNodeBefore((OZScene *)v7, SceneNode, (OZSceneNode *)v13);
  OZTransformNode::setTranslation((OZTransformNode *)SceneNode, 0.0, 0.0, 0.0, MEMORY[0x1E0CA2E68]);
  OZGroup::setDimensionType((uint64_t)SceneNode, a4, 1);
  OZSceneNode::removeFromParent((OZSceneNode *)v13);
  (*(void (**)(OZSceneNode *, char *, _QWORD))(*(_QWORD *)SceneNode + 992))(SceneNode, v13, 0);
  TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)(v13 + 56), &v21);
  (*(void (**)(OZSceneNode *, __n128 *, _QWORD, __n128))(*(_QWORD *)SceneNode + 1120))(SceneNode, &v21, 0, TimeOffset);
  (*(void (**)(unsigned int *__return_ptr, char *))(*(_QWORD *)v13 + 1128))(v20, v13);
  (*(void (**)(OZSceneNode *, unsigned int *, _QWORD))(*(_QWORD *)SceneNode + 1136))(SceneNode, v20, 0);
  OZScene::setCurrentObject((OZScene *)v7, SceneNode);
  OZDocument::postNotification(*a1, 60);
  v19 = (OZNotificationManager *)*((_QWORD *)*a1 + 21);
  if (v19)
    OZNotificationManager::processNotifications(v19);
  OZScene::dirty((OZScene *)v7);
  return 0;
}

void sub_1B2F04B28(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F04A18);
}

uint64_t OZXCreateCamera(OZChannelBase *a1, PCString a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t NextUniqueID;
  OZSceneNode *SceneNode;
  OZNotificationManager *v9;
  float64x2_t v11;
  CMTime v12;
  __int128 v13;

  if (!a1)
    return 7;
  if (!a1->var0)
    return 7;
  v4 = *((_QWORD *)a1->var0 + 3);
  if (!v4)
    return 7;
  NextUniqueID = OZChannelBase::getNextUniqueID(a1);
  *a3 = NextUniqueID;
  v13 = xmmword_1B355CF40;
  SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v13, (uint64_t)a2.var0, NextUniqueID);
  (*(void (**)(OZSceneNode *, uint64_t, _QWORD))(*(_QWORD *)SceneNode + 1136))(SceneNode, v4 + 1352, 0);
  OZScene::addRootNode((OZScene *)v4, SceneNode);
  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  OZCamera::cameraAtTime(SceneNode, &v12, (PCSharedCount *)&v13);
  if (!(_QWORD)v13)
    throw_PCNullPointerException(1);
  v11 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)(v4 + 344)));
  (*(void (**)(_QWORD, float64x2_t *))(*(_QWORD *)v13 + 288))(v13, &v11);
  (*(void (**)(OZSceneNode *, double))(*(_QWORD *)SceneNode + 1344))(SceneNode, *(double *)(v4 + 384));
  (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*((_QWORD *)SceneNode + 819) + 712))((_QWORD *)SceneNode + 819, MEMORY[0x1E0CA2E68], 0, 0.0);
  (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(*((_QWORD *)SceneNode + 851) + 712))((_QWORD *)SceneNode + 851, MEMORY[0x1E0CA2E68], 0, 90.0);
  (*(void (**)(_QWORD *, _QWORD))(*((_QWORD *)SceneNode + 2) + 40))((_QWORD *)SceneNode + 2, 0);
  OZDocument::postNotification((OZDocument *)a1->var0, 48);
  v9 = (OZNotificationManager *)*((_QWORD *)a1->var0 + 21);
  if (v9)
    OZNotificationManager::processNotifications(v9);
  OZScene::dirty((OZScene *)v4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v13 + 1);
  return 0;
}

void sub_1B2F04CEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F04CD0);
}

uint64_t OZXSetCameraTransform(uint64_t a1, int a2, __int128 *a3)
{
  OZScene *v3;
  OZChannelBase *v6;
  CMTime v8;
  METimeRemap v9;
  uint64_t v10;
  _OWORD v11[3];
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v6 = (OZChannelBase *)*((_QWORD *)v3 + 188);
  if (v6)
    OZChannelBase::setRangeName(v6, (const PCString *)1);
  memset(v11, 0, sizeof(v11));
  v12 = 4;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  *(_QWORD *)&v9._isIntroOptional = 0x3FF0000000000000;
  v9._pBuildInEnableChan = 0;
  v9._pBuildOutEnableChan = 0;
  v10 = 0;
  if (!PCMatrix44Tmpl<double>::getTransformation(a3, (uint64_t)v11, (double *)&v9._isIntroOptional))
    return 11;
  OZSceneCamera::OZSceneCamera((OZSceneCamera *)&v9, v3, a2);
  LiRenderingTechnology::setRasterizeEdges((uint64_t)&v9, 0);
  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  METimeRemap::setOutroDuration(&v9, &v8);
  OZSceneCamera::setTranslation((uint64_t)&v9, (double *)v11);
  OZSceneCamera::setRotation((uint64_t)&v9, (double *)&v9._isIntroOptional);
  OZSceneCamera::~OZSceneCamera((OZSceneCamera *)&v9);
  return 0;
}

uint64_t OZXGetCameraTransform(uint64_t a1, int a2, _QWORD *a3)
{
  OZScene *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t i;
  _OWORD *v9;
  __int128 v10;
  _QWORD v12[6];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19[4];
  unint64_t v20;
  double v21;
  double v22;
  CMTime v23;
  METimeRemap v24;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v5 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v5)
    return 7;
  OZSceneCamera::OZSceneCamera((OZSceneCamera *)&v24, v5, a2);
  LiRenderingTechnology::setRasterizeEdges(v6, 0);
  v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  METimeRemap::setOutroDuration(&v24, &v23);
  v20 = 0;
  v21 = 0.0;
  v22 = 0.0;
  OZSceneCamera::getTranslation((uint64_t)&v24, (uint64_t)&v20);
  v19[0] = 1.0;
  memset(&v19[1], 0, 24);
  OZSceneCamera::getRotation((uint64_t)&v24, v19);
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12[5] = 0x3FF0000000000000;
  v12[0] = 0x3FF0000000000000;
  memset(&v12[1], 0, 32);
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = PCMatrix44Tmpl<double>::leftRotate((__int128 *)v12, v19);
  v7.n128_u64[0] = v20;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v12, (float64x2_t)v7, v21, v22);
  if (v12 != a3)
  {
    for (i = 0; i != 16; i += 4)
    {
      v9 = &a3[i];
      v10 = *(_OWORD *)&v12[i + 2];
      *v9 = *(_OWORD *)&v12[i];
      v9[1] = v10;
    }
  }
  OZSceneCamera::~OZSceneCamera((OZSceneCamera *)&v24);
  return 0;
}

void sub_1B2F04F90(void *a1)
{
  uint64_t v1;

  OZSceneCamera::~OZSceneCamera((OZSceneCamera *)(v1 - 104));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F04F74);
}

uint64_t OZXSetCameraProjection(uint64_t a1, unsigned int a2, double *a3)
{
  OZScene *v3;
  OZChannelBase *v6;
  void *Node;
  char *v8;
  _QWORD *v9;
  long double v10;
  double v11;
  double v12;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v6 = (OZChannelBase *)*((_QWORD *)v3 + 188);
  if (v6)
    OZChannelBase::setRangeName(v6, (const PCString *)1);
  Node = OZScene::getNode(v3, a2);
  if (!Node)
    return 6;
  if (!v8)
    return 6;
  v9 = v8;
  OZChannel::getValueAsInt((OZChannel *)(v8 + 6552), MEMORY[0x1E0CA2E68], 0.0);
  v10 = atan(1.0 / *a3);
  (*(void (**)(_QWORD *, _QWORD, _QWORD, long double))(v9[851] + 712))(v9 + 851, MEMORY[0x1E0CA2E68], 0, (v10 + v10) * 180.0 / 3.14159265);
  v11 = a3[10];
  v12 = a3[11];
  (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(v9[870] + 712))(v9 + 870, MEMORY[0x1E0CA2E68], 0, v12 / v11);
  (*(void (**)(_QWORD *, _QWORD, _QWORD, double))(v9[889] + 712))(v9 + 889, MEMORY[0x1E0CA2E68], 0, -v12 / (-1.0 - v11));
  return 0;
}

void sub_1B2F05120(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F0510CLL);
}

uint64_t OZXGetCameraLocalToClipMatrix(uint64_t a1, unsigned int a2, PCSharedCount *a3)
{
  OZScene *v3;
  void *Node;
  OZCamera *v6;
  uint64_t i;
  PCSharedCount *v8;
  __int128 v9;
  PCSharedCount v11;
  PCSharedCount v12[15];
  CMTime v13;
  PCSharedCount v14;
  PCSharedCount v15;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  Node = OZScene::getNode(v3, a2);
  if (!Node)
    return 6;
  if (!v6)
    return 6;
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  OZCamera::cameraAtTime(v6, &v13, &v11);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v14, &v11);
  PCSharedCount::~PCSharedCount(v12);
  if (!v14.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PCSharedCount *__return_ptr))(*(_QWORD *)v14.var0 + 56))(&v11);
  if (&v11 != a3)
  {
    for (i = 0; i != 16; i += 4)
    {
      v8 = &a3[i];
      v9 = *(_OWORD *)&v12[i + 1].var0;
      *(_OWORD *)&v8->var0 = *(_OWORD *)((char *)&v11.var0 + i * 8);
      *(_OWORD *)&v8[2].var0 = v9;
    }
  }
  PCSharedCount::~PCSharedCount(&v15);
  return 0;
}

void sub_1B2F05254(void *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F05244);
}

uint64_t getCameraWorldUnitScale(void *a1, unsigned int a2, double *a3, uint64_t a4)
{
  OZScene *v4;
  void *Node;
  OZCamera *v8;
  double v9;
  uint64_t v10;
  CMTime v12;
  PCSharedCount v13;
  PCSharedCount v14;
  PCSharedCount v15;
  PCSharedCount v16;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  Node = OZScene::getNode(v4, a2);
  if (!Node)
    return 6;
  if (!v8)
    return 6;
  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  OZCamera::cameraAtTime(v8, &v12, &v13);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v15, &v13);
  PCSharedCount::~PCSharedCount(&v14);
  if (v15.var0)
  {
    v9 = (*(double (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)v15.var0 + 248))(v15.var0, a4);
    v10 = 0;
    *a3 = v9;
  }
  else
  {
    v10 = 6;
  }
  PCSharedCount::~PCSharedCount(&v16);
  return v10;
}

void sub_1B2F05380(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F0534CLL);
}

uint64_t OZXGetCameraWorldUnitScaleIgnoringAspect(void *a1, unsigned int a2, double *a3)
{
  return getCameraWorldUnitScale(a1, a2, a3, 1);
}

uint64_t OZXEnableCamera(void *a1, unsigned int a2, int a3)
{
  OZScene *v3;
  OZChannelBase *v6;
  void *Node;
  OZCamera *v8;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  v6 = (OZChannelBase *)*((_QWORD *)v3 + 188);
  if (v6)
    OZChannelBase::setRangeName(v6, (const PCString *)1);
  Node = OZScene::getNode(v3, a2);
  if (!Node)
    return 6;
  if (!v8)
    return 6;
  if (a3)
    OZCamera::enable(v8);
  else
    (*(void (**)(_QWORD *, _QWORD))(*((_QWORD *)v8 + 2) + 40))((_QWORD *)v8 + 2, 0);
  return 0;
}

void sub_1B2F05478(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F05468);
}

uint64_t OZXGetIsCameraEnabled(void *a1, unsigned int a2, BOOL *a3)
{
  OZScene *v3;
  void *Node;
  _QWORD *v6;
  char v7;
  uint64_t result;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  Node = OZScene::getNode(v3, a2);
  if (!Node)
    return 6;
  if (!v6)
    return 6;
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6[2] + 24))(v6 + 2, 1, 1);
  result = 0;
  *a3 = v7;
  return result;
}

void sub_1B2F05518(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F0550CLL);
}

uint64_t OZXSetImageElementFootage(uint64_t *a1, unsigned int a2, char *a3, OZChannelObjectRoot *a4, int a5)
{
  uint64_t v6;
  OZGroup **v7;
  const void *Object;
  OZImageElement *v12;
  uint64_t v13;
  OZImageElement *v14;
  PMMediaManager *v15;
  PMMediaManager *Instance;
  char v17;
  OZChannelBase *v19;
  uint64_t NextUniqueID;
  OZSceneNode *SceneNode;
  unint64_t v22;
  uint64_t v23;
  OZChannelBase *v24;
  double LoopOffset;
  OZChannelBase *v26;
  void *Footage;
  void *v28;
  BOOL v29;
  uint64_t v30;
  OZRetimingUtil *v31;
  OZChannelBase *v32;
  const CMTime *v33;
  OZChannelBase *v34;
  OZChannelBase *v35;
  OZChannelBase *v36;
  const CMTime *v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime time;
  CMTime v42;
  PMClip *v43;
  CFURLRef v44;
  CMTime time2;
  CMTime time1;
  _BYTE __dst[336];
  int64_t value;
  double v49;
  PCString v50[3];
  CGColorSpace *v51[4];

  v51[3] = *(CGColorSpace **)MEMORY[0x1E0C80C00];
  if (!a1)
    return 7;
  v6 = *a1;
  if (!*a1)
    return 7;
  v7 = *(OZGroup ***)(v6 + 24);
  if (!v7)
    return 7;
  Object = (const void *)OZScene::getObject(*(OZScene **)(v6 + 24), a2);
  if (!Object)
    return 11;
  v13 = 11;
  if (a3)
  {
    v14 = v12;
    if (v12)
    {
      if (*a3)
      {
        v15 = PCURL::PCURL((PCURL *)&v44, a3, 0);
        v43 = 0;
        Instance = (PMMediaManager *)PMMediaManager::getInstance(v15);
        if (PMMediaManager::open(Instance, (const PCURL *)&v44, &v43, 0))
          goto LABEL_36;
        PCSharedCount::PCSharedCount((PCSharedCount *)v50);
        v51[0] = 0;
        if (PMClip::getVideoDescription((uint64_t)v43, __dst))
        {
          PMClip::close(v43);
          if (v43)
          {
            PMClip::~PMClip(v43);
            MEMORY[0x1B5E29170]();
          }
          v17 = 0;
        }
        else
        {
          PCURL::getShortFilename(&v44, (PCString *)&time1);
          NextUniqueID = OZChannelBase::getNextUniqueID(v19);
          *(_OWORD *)&v40.value = xmmword_1B355DB10;
          SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v40, (uint64_t)&time1, NextUniqueID);
          PCString::~PCString((PCString *)&time1);
          if (SceneNode)
          {
            memset(&v42, 0, sizeof(v42));
            CMTimeMake(&v42, value, (int)v49);
            LODWORD(v22) = value;
            CMTimeMakeWithSeconds(&v40, (double)v22 / v49, 0x40000);
            v42 = v40;
            time = v40;
            CMTimeConvertScale(&v40, &time, (int)v49, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            v42 = v40;
            if (a5)
              OZXSetDuration(a1, &v42);
            PCSharedCount::PCSharedCount((PCSharedCount *)&v40);
            OZScene::addNode(v7, SceneNode, (PCString *)&v40, 1, 0, 0);
            PCString::~PCString((PCString *)&v40);
            OZFootage::setClip(SceneNode, v43, 1, 1, 0);
            (*(void (**)(CMTime *__return_ptr, OZSceneNode *))(*(_QWORD *)SceneNode + 1128))(&v40, SceneNode);
            v23 = *((_QWORD *)v14 + 120);
            memset(&v39, 0, sizeof(v39));
            v24 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)v14 + 640))(v14);
            LoopOffset = OZRetimingUtil::GetLoopOffset(v24, &v39);
            memset(&v38, 0, sizeof(v38));
            v26 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *, double))(*(_QWORD *)v14 + 640))(v14, LoopOffset);
            OZRetimingUtil::GetMaxLoopOffset(v26, (uint64_t)&v38);
            Footage = OZImageElement::getFootage(v14);
            v28 = Footage;
            if (Footage)
              v29 = (*(unsigned int (**)(void *))(*(_QWORD *)Footage + 1376))(Footage) == 1;
            else
              v29 = 0;
            (*(void (**)(OZImageElement *, OZSceneNode *, _QWORD, _QWORD))(*(_QWORD *)v14 + 1448))(v14, SceneNode, 0, 0);
            OZScene::recalcDependencies((OZScene *)v7);
            if (v28 && ((*(uint64_t (**)(void *))(*(_QWORD *)v28 + 1336))(v28) & 1) == 0)
            {
              v30 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 640))(v28);
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v28 + 608))(v28, v30);
            }
            v31 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)v14 + 640))(v14);
            OZRetimingUtil::SetEndCondition(v31, a4);
            v32 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)v14 + 640))(v14);
            time1 = v40;
            OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 42), (__n128 *)&time2);
            OZRetimingUtil::SetTimeOffsetAndExtent(v32, &time1, &v40, &time2, v33);
            if (v23)
            {
              v34 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 640))(v23);
              OZChannelObjectRoot::recomputeTimeRangeFromChildren(v34, 1, 1, 1, 1, 0);
            }
            if ((_DWORD)a4)
            {
              if (v29 || (time1 = v39, time2 = v38, !CMTimeCompare(&time1, &time2)))
              {
                v35 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)v14 + 640))(v14);
                v36 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)v14 + 640))(v14);
                OZRetimingUtil::GetMaxLoopOffset(v36, (uint64_t)&time1);
                OZRetimingUtil::SetLoopOffset(v35, &time1, v37);
              }
            }
            v17 = 1;
          }
          else
          {
            PMClip::close(v43);
            if (v43)
            {
              PMClip::~PMClip(v43);
              MEMORY[0x1B5E29170]();
            }
            v17 = 0;
          }
          v13 = 2;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(v51);
        PCString::~PCString(v50);
        if ((v17 & 1) != 0)
        {
LABEL_36:
          PCURL::~PCURL((PCURL *)&v44);
          return 0;
        }
        else
        {
          PCURL::~PCURL((PCURL *)&v44);
        }
      }
    }
  }
  return v13;
}

uint64_t OZXSetStickerPathWithPublishedParam(void *a1, PCString *a2, PCString *a3)
{
  uint64_t v6;
  uint64_t v7;
  OZChannel *v8;
  OZChannelBase *TargetChannelForProxy;
  OZChannelBase *v10;
  const void *ObjectManipulator;
  void *v12;
  unsigned int v13;
  char *CStr;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t *v24;
  PCString v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30[8];
  PCString v31;
  OZChannel *v32;
  id v33;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v33);
  if (!a1 || !*(_QWORD *)a1)
    goto LABEL_23;
  if (PCString::empty(a3))
  {
    v6 = 11;
    goto LABEL_24;
  }
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v7)
  {
LABEL_23:
    v6 = 7;
    goto LABEL_24;
  }
  v32 = 0;
  v6 = __OZXGetPublishedChannel(a1, a2, &v32);
  if (!(_DWORD)v6)
  {
    v8 = v32;
    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v7 + 720), (OZChannelBase *)v32);
    v6 = 0;
    if (TargetChannelForProxy)
    {
      if (TargetChannelForProxy != (OZChannelBase *)v8)
      {
        if (v10
          && (ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v10)) != 0
        {
          if (v6)
          {
            PCString::PCString(&v31, a3);
            PCURL::PCURL((PCURL *)v30, &v31, 0);
            v13 = *(_DWORD *)(v6 + 80);
            CStr = PCString::createCStr(a3);
            v6 = OZXSetImageElementFootage((uint64_t *)a1, v13, CStr, (OZChannelObjectRoot *)1, 1);
            if (!(_DWORD)v6)
            {
              v28 = *(_OWORD *)(v7 + 1376);
              v29 = *(_QWORD *)(v7 + 1392);
              v15 = *(_QWORD *)(v7 + 1136);
              v18 = *(uint64_t ***)(v15 + 8);
              v17 = (uint64_t **)(v15 + 8);
              v16 = v18;
              if (v18 != v17 + 1)
              {
                while (*((_DWORD *)v16 + 27) != 7)
                {
                  v19 = v16[1];
                  if (v19)
                  {
                    do
                    {
                      v20 = (uint64_t **)v19;
                      v19 = (uint64_t *)*v19;
                    }
                    while (v19);
                  }
                  else
                  {
                    do
                    {
                      v20 = (uint64_t **)v16[2];
                      v21 = *v20 == (uint64_t *)v16;
                      v16 = v20;
                    }
                    while (!v21);
                  }
                  v16 = v20;
                  if (v20 == v17 + 1)
                    goto LABEL_27;
                }
                v23 = (uint64_t)(v16 + 4);
                OZTimeMarker::OZTimeMarker((OZTimeMarker *)&v25, (const OZTimeMarker *)(v16 + 4));
                v26 = v28;
                v27 = v29;
                v24 = std::__tree<OZTimeMarker>::find<OZTimeMarker>((uint64_t)v17, v23);
                std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v17, v24);
                (*(void (**)(uint64_t *))v24[4])(v24 + 4);
                operator delete(v24);
                std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(v17, (uint64_t)&v25, (const OZTimeMarker *)&v25);
                OZTimeMarker::~OZTimeMarker(&v25);
              }
LABEL_27:
              v6 = 0;
            }
            PCURL::~PCURL((PCURL *)v30);
            PCString::~PCString(&v31);
          }
        }
        else
        {
          v6 = 0;
        }
      }
    }
  }
LABEL_24:
  PCAutoreleasePool::~PCAutoreleasePool(&v33);
  return v6;
}

void sub_1B2F05CF8(void *a1)
{
  uint64_t v1;

  PCURL::~PCURL((PCURL *)(v1 - 80));
  PCString::~PCString((PCString *)(v1 - 72));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F05AE0);
}

void sub_1B2F05D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCAutoreleasePool::~PCAutoreleasePool((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t OZXIsUsingSubstituteFont(uint64_t a1, BOOL *a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;

  if (a2)
    *a2 = 0;
  v5 = 0;
  result = __OZXGetTranscriptionDelegate(a1, &v5);
  if (a2 && !(_DWORD)result)
  {
    if (v5)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
      result = 0;
      *a2 = v4;
    }
  }
  return result;
}

void sub_1B2F05DC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F05DB8);
}

uint64_t OZXTranscriptionGetLineCount(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;

  if (a2)
    *a2 = 0;
  v5 = 0;
  result = __OZXGetTranscriptionDelegate(a1, &v5);
  if (a2 && !(_DWORD)result)
  {
    if (v5)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
      result = 0;
      *a2 = v4;
    }
  }
  return result;
}

void sub_1B2F05E3C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F05E2CLL);
}

uint64_t OZXTranscriptionSetShouldDisableFadeOut(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = __OZXGetTranscriptionDelegate(a1, &v4);
  if (!(_DWORD)result)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, a2);
      return 0;
    }
  }
  return result;
}

void sub_1B2F05EA0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F05E90);
}

_QWORD *OZObject::iterator_t<OZRigWidget,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

void sub_1B2F06458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_1B2F06798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, PCString a12)
{
  PCString::~PCString(&a12);
  PCURL::~PCURL((PCURL *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B2F06F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,PCString a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a65;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a61, (_QWORD *)a62);
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

void sub_1B2F07824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a11);
  PCURL::~PCURL((PCURL *)&a12);
  _Unwind_Resume(a1);
}

void OZImageMask::OZImageMask(OZImageMask *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;
  PCString v7;

  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1088));
  *(_QWORD *)this = &off_1E65B32B0;
  *((_QWORD *)this + 2) = &unk_1E65B37F8;
  *((_QWORD *)this + 6) = &unk_1E65B3A50;
  *((_QWORD *)this + 136) = &unk_1E65B3AA8;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Mask Source"));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZImageMask *)((char *)this + 1120), &v7, (OZChannelFolder *)((char *)this + 448), 0x64u, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Color Channel Choices"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Mask Color Channel"));
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2704), 3u, &v7, &v6, (OZChannelFolder *)((char *)this + 448), 0x65u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Mask Blend Mode Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Mask Blend Mode"));
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2960), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 448), 0x67u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Mask Invert"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3216), &v7, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Mask Stencil Mode"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3368), 1, &v7, (OZChannelFolder *)((char *)this + 448), 0x68u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Mask Stretch"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3520), &v7, (OZChannelFolder *)((char *)this + 448), 0x69u, 0, 0, 0);
  PCString::~PCString(&v7);
  *((_BYTE *)this + 3672) = 0;
  (*(void (**)(OZImageMask *))(*(_QWORD *)this + 1040))(this);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 1120), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1120));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Mask Image"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1256), &v7, 0);
  PCString::~PCString(&v7);
  *((_QWORD *)this + 460) = 0;
}

void sub_1B2F07C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZSceneNode *v12;
  OZChannelBase *v13;
  OZChannelImageWithOptions *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;
  OZChannelBool *v17;
  OZChannelBool *v18;
  OZChannelBool *v19;
  const PCString *v21;

  PCString::~PCString(&a12);
  OZChannelBool::~OZChannelBool(v19);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelBool::~OZChannelBool(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v14);
  OZChannelBase::setRangeName(v13, v21);
  OZSceneNode::~OZSceneNode(v12);
  _Unwind_Resume(a1);
}

void OZImageMask::OZImageMask(OZImageMask *this, const OZImageMask *a2, char a3)
{
  uint64_t v5;

  OZSceneNode::OZSceneNode(this, a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 1088));
  *(_QWORD *)this = &off_1E65B32B0;
  *((_QWORD *)this + 2) = &unk_1E65B37F8;
  *((_QWORD *)this + 6) = &unk_1E65B3A50;
  *((_QWORD *)this + 136) = &unk_1E65B3AA8;
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZImageMask *)((char *)this + 1120), (const OZImageMask *)((char *)a2 + 1120), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2704), (const OZImageMask *)((char *)a2 + 2704), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageMask *)((char *)this + 2960), (const OZImageMask *)((char *)a2 + 2960), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3216), (const OZChannelBase *)((char *)a2 + 3216), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3368), (const OZChannelBase *)((char *)a2 + 3368), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3520), (const OZChannelBase *)((char *)a2 + 3520), (OZChannelFolder *)((char *)this + 448));
  *((_BYTE *)this + 3672) = *((_BYTE *)a2 + 3672);
  *((_QWORD *)this + 460) = 0;
}

void sub_1B2F07E3C(_Unwind_Exception *a1)
{
  OZSceneNode *v1;
  OZChannelBase *v2;
  OZChannelImageWithOptions *v3;
  OZChannelEnum *v4;
  OZChannelEnum *v5;
  OZChannelBool *v6;
  OZChannelBool *v7;
  const PCString *v9;

  OZChannelBool::~OZChannelBool(v7);
  OZChannelBool::~OZChannelBool(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v3);
  OZChannelBase::setRangeName(v2, v9);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F07EA0()
{
  JUMPOUT(0x1B2F07E88);
}

void sub_1B2F07EA8()
{
  JUMPOUT(0x1B2F07E90);
}

void OZImageMask::~OZImageMask(OZImageMask *this)
{
  OZChannelBase *v2;
  const PCString *v3;

  *(_QWORD *)this = &off_1E65B32B0;
  *((_QWORD *)this + 2) = &unk_1E65B37F8;
  *((_QWORD *)this + 6) = &unk_1E65B3A50;
  v2 = (OZChannelBase *)((char *)this + 1088);
  *((_QWORD *)this + 136) = &unk_1E65B3AA8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3520));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3368));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3216));
  OZChannelEnum::~OZChannelEnum((OZImageMask *)((char *)this + 2960));
  OZChannelEnum::~OZChannelEnum((OZImageMask *)((char *)this + 2704));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZImageMask *)((char *)this + 1120));
  OZChannelBase::setRangeName(v2, v3);
  OZSceneNode::~OZSceneNode(this);
}

{
  OZImageMask::~OZImageMask(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZImageMask::~OZImageMask(OZImageMask *this)
{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 16));
}

{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 48));
}

{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 1088));
}

{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZImageMask::~OZImageMask((OZImageMask *)((char *)this - 1088));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZImageMask::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;
  uint64_t result;

  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelFolder::operator=(a1 + 1120);
  OZChanSceneNodeRef::operator=(a1 + 1256, (uint64_t)v5 + 1256);
  OZChannelBase::operator=(a1 + 1440, (uint64_t)v5 + 1440);
  OZChannelBase::operator=(a1 + 1592, (uint64_t)v5 + 1592);
  OZChannelPosition::operator=(a1 + 1744, (uint64_t)v5 + 1744);
  OZChannelBase::operator=(a1 + 2448, (uint64_t)v5 + 2448);
  OZChannelBase::operator=(a1 + 2704, (uint64_t)v5 + 2704);
  OZChannelBase::operator=(a1 + 2960, (uint64_t)v5 + 2960);
  OZChannelBase::operator=(a1 + 3216, (uint64_t)v5 + 3216);
  result = OZChannelBase::operator=(a1 + 3368, (uint64_t)v5 + 3368);
  *(_QWORD *)(a1 + 3680) = 0;
  return result;
}

void *OZImageMask::eval(OZImageMask *this, OZRenderParams *a2)
{
  const void *MaskSource;
  void *v5;
  CMTime v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MaskSource = OZImageMask::getMaskSource(this);
  if (!MaskSource)
    return 0;
  if (v5)
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)&v10, a2);
    v7 = *(CMTime *)a2;
    OZImageMask::getMaskSourceTime(this, &v7, &v8);
    v10 = v8;
    v12 = 0;
    v13 = 0;
    v11 = v9;
    v5 = (void *)(*(uint64_t (**)(void *, __n128 *))(*(_QWORD *)v5 + 96))(v5, &v10);
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v10);
  }
  return v5;
}

void sub_1B2F08178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

const void *OZImageMask::getMaskSource(OZImageMask *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 460);
  if (!result)
  {
    result = OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 1256));
    *((_QWORD *)this + 460) = result;
    if (!result)
    {
      result = (const void *)*((_QWORD *)this + 120);
      if (result)
      *((_QWORD *)this + 460) = result;
    }
  }
  return result;
}

double OZImageMask::getMaskSourceTime@<D0>(OZImageMask *this@<X0>, CMTime *a2@<X1>, __n128 *a3@<X8>)
{
  double result;
  CMTime v6;
  CMTime v7;
  CMTime v8;
  __n128 v9;
  unint64_t v10;

  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  OZChannelImageWithOptions::getFrame((OZImageMask *)((char *)this + 1120), a2, a3);
  (*(void (**)(CMTime *__return_ptr, OZImageMask *))(*(_QWORD *)this + 1128))(&v6, this);
  v7 = v6;
  v8 = *(CMTime *)a3->n128_u8;
  PC_CMTimeSaferAdd(&v8, &v7, (uint64_t)&v9);
  result = v9.n128_f64[0];
  *a3 = v9;
  a3[1].n128_u64[0] = v10;
  return result;
}

__n128 OZImageMask::getImageBounds(OZImageMask *a1, __n128 *a2, const OZRenderState *a3)
{
  _QWORD *MaskSource;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  __n128 result;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  __n128 v16;
  int64_t v17;
  OZRenderState v18;

  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    v7 = MaskSource;
    OZRenderState::OZRenderState(&v18, a3);
    var0 = a3->var0;
    OZImageMask::getMaskSourceTime(a1, (CMTime *)&var0, &v16);
    *(__n128 *)&v18.var0.var0 = v16;
    v18.var0.var3 = v17;
    v9 = 16;
    if (!v8)
      v9 = 80;
    (*(void (**)(_QWORD *, __n128 *, OZRenderState *))(*v7 + v9))(v7, a2, &v18);
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = result;
  }
  return result;
}

double `non-virtual thunk to'OZImageMask::getImageBounds(uint64_t a1, __n128 *a2, const OZRenderState *a3)
{
  double result;

  *(_QWORD *)&result = OZImageMask::getImageBounds((OZImageMask *)(a1 - 1088), a2, a3).n128_u64[0];
  return result;
}

uint64_t OZImageMask::getImageBoundsWithEffects(OZImageMask *a1, uint64_t a2, const OZRenderState *a3)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  __n128 v8;
  int64_t v9;
  OZRenderState v10;

  if (((*(uint64_t (**)(OZImageMask *))(*(_QWORD *)a1 + 416))(a1) & 1) == 0)
    return (*(uint64_t (**)(OZImageMask *, uint64_t, const OZRenderState *))(*(_QWORD *)a1 + 1208))(a1, a2, a3);
  OZRenderState::OZRenderState(&v10, a3);
  var0 = a3->var0;
  OZImageMask::getMaskSourceTime(a1, (CMTime *)&var0, &v8);
  *(__n128 *)&v10.var0.var0 = v8;
  v10.var0.var3 = v9;
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 122) + 16) + 24) = (char *)a1 + 1088;
  return (*(uint64_t (**)(_QWORD, uint64_t, OZRenderState *))(**(_QWORD **)(*((_QWORD *)a1 + 123) + 16) + 80))(*(_QWORD *)(*((_QWORD *)a1 + 123) + 16), a2, &v10);
}

uint64_t `non-virtual thunk to'OZImageMask::getImageBoundsWithEffects(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  return OZImageMask::getImageBoundsWithEffects((OZImageMask *)(a1 - 1088), a2, a3);
}

uint64_t OZImageMask::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1216))(a1);
}

uint64_t `non-virtual thunk to'OZImageMask::getBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 1088) + 1216))(a1 - 1088);
}

void OZImageMask::getDimensions(OZImageMask *this, float *a2, float *a3, const OZRenderState *a4)
{
  const void *MaskSource;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0;
  __n128 v10;
  int64_t v11;
  OZRenderState v12;

  MaskSource = OZImageMask::getMaskSource(this);
  *a3 = 0.0;
  *a2 = 0.0;
  OZRenderState::OZRenderState(&v12, a4);
  var0 = a4->var0;
  OZImageMask::getMaskSourceTime(this, (CMTime *)&var0, &v10);
  *(__n128 *)&v12.var0.var0 = v10;
  v12.var0.var3 = v11;
  if (MaskSource)
    (*(void (**)(const void *, float *, float *, OZRenderState *))(*(_QWORD *)MaskSource + 96))(MaskSource, a2, a3, &v12);
}

void `non-virtual thunk to'OZImageMask::getDimensions(OZImageMask *this, float *a2, float *a3, const OZRenderState *a4)
{
  OZImageMask::getDimensions((OZImageMask *)((char *)this - 1088), a2, a3, a4);
}

uint64_t OZImageMask::hitCheck()
{
  return 0;
}

__n128 OZImageMask::getNaturalDuration@<Q0>(OZImageMask *this@<X0>, uint64_t a2@<X8>)
{
  const void *MaskSource;
  _QWORD *v4;
  __n128 result;
  uint64_t v6;

  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    (*(void (**)(_QWORD *))(v4[2] + 280))(v4 + 2);
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v6 + 16);
  }
  return result;
}

double `non-virtual thunk to'OZImageMask::getNaturalDuration@<D0>(OZImageMask *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = OZImageMask::getNaturalDuration((OZImageMask *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

double OZImageMask::getPixelAspectRatioRN(OZImageMask *this)
{
  const void *MaskSource;
  void *v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  double result;

  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource)
  {
    if (v2)
    {
      v3 = v2;
      if (v4)
      {
        v6 = 166;
        v5 = v4;
LABEL_7:
        (*(void (**)(void))(*v5 + 8 * v6))();
        return result;
      }
      if (v5)
      {
        v6 = 171;
        goto LABEL_7;
      }
    }
  }
  return 1.0;
}

double `non-virtual thunk to'OZImageMask::getPixelAspectRatioRN(OZImageMask *this)
{
  return OZImageMask::getPixelAspectRatioRN((OZImageMask *)((char *)this - 1088));
}

uint64_t OZImageMask::getNaturalDurationFlags(OZImageMask *this)
{
  const void *MaskSource;
  _QWORD *v2;

  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    return (*(uint64_t (**)(_QWORD *))(v2[2] + 288))(v2 + 2);
  }
  else
  {
    return 6;
  }
}

uint64_t `non-virtual thunk to'OZImageMask::getNaturalDurationFlags(OZImageMask *this)
{
  return OZImageMask::getNaturalDurationFlags((OZImageMask *)((char *)this - 16));
}

unint64_t OZImageMask::isActiveAtTime(OZImageMask *this, CMTime *a2, int a3, int a4, int a5)
{
  const void *MaskSource;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  CMTimeEpoch epoch;
  uint64_t v17;
  __n128 v18;
  CMTimeEpoch v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  __n128 v24;
  CMTimeEpoch v25;
  CMTime time2;
  CMTime time1;

  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    v12 = v11;
    if ((*(_BYTE *)(*((_QWORD *)this + 120) + 1024) & 4) != 0)
      return 0;
  }
  else
  {
    result = 0;
    *((_BYTE *)this + 3672) = 0;
    v12 = (_BYTE *)*((_QWORD *)this + 120);
    if ((v12[1024] & 4) != 0)
      return result;
  }
  v14 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v12 + 640))(v12);
  v15 = (*(uint64_t (**)(OZImageMask *))(*(_QWORD *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), &v24);
  v20 = *a2;
  *(__n128 *)&time1.value = v24;
  time1.epoch = v25;
  PC_CMTimeFloorToSampleDuration(&v20, &time1, (uint64_t)&time2);
  *(_OWORD *)&a2->value = *(_OWORD *)&time2.value;
  epoch = time2.epoch;
  a2->epoch = time2.epoch;
  *(_OWORD *)&v22.value = *(_OWORD *)&a2->value;
  v22.epoch = epoch;
  result = OZObjectManipulator::isActiveAtTime((OZImageMask *)((char *)this + 16), &v22, a3, a4, a5);
  if (!(_DWORD)result)
    return result;
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)v14 + 712))(&v20, v14);
  v17 = (*(uint64_t (**)(OZImageMask *))(*(_QWORD *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v17 + 336), &v18);
  time1 = v20;
  time2 = *a2;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    time1 = v20;
    time2 = v21;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v24);
    *(__n128 *)&time1.value = v24;
    time1.epoch = v25;
    *(__n128 *)&time2.value = v18;
    time2.epoch = v19;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
    time1 = *a2;
    time2 = v23;
    if (CMTimeCompare(&time1, &time2) < 1)
      return 1;
    if ((v21.flags & 1) != 0)
      return (v21.flags >> 4) & 1;
  }
  return 0;
}

unint64_t `non-virtual thunk to'OZImageMask::isActiveAtTime(OZImageMask *this, CMTime *a2, int a3, int a4, int a5)
{
  return OZImageMask::isActiveAtTime((OZImageMask *)((char *)this - 16), a2, a3, a4, a5);
}

unint64_t OZImageMask::isActiveInTimeRange(OZImageMask *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  const void *MaskSource;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  CMTime v16[2];
  CMTime v17[2];
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime time2;
  CMTime time1;

  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    v12 = v11;
    if ((*(_BYTE *)(*((_QWORD *)this + 120) + 1024) & 4) != 0)
      return 0;
  }
  else
  {
    result = 0;
    *((_BYTE *)this + 3672) = 0;
    v12 = (_BYTE *)*((_QWORD *)this + 120);
    if ((v12[1024] & 4) != 0)
      return result;
  }
  v14 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v12 + 640))(v12);
  memset(&v18, 0, sizeof(v18));
  v15 = (*(uint64_t (**)(OZImageMask *))(*(_QWORD *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)&v18);
  PCTimeRange::getRangeEnclosingWholeFrames(a2, &v18, (uint64_t)v17);
  result = OZObjectManipulator::isActiveInTimeRange((OZImageMask *)((char *)this + 16), (const PCTimeRange *)v17, a3, a4, a5);
  if (!(_DWORD)result)
    return result;
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)v14 + 712))(v16, v14);
  v22 = v16[0];
  time1 = v16[0];
  time2 = v16[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v21);
  v20 = v17[0];
  time1 = v17[0];
  time2 = v17[1];
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
  time1 = v19;
  time2 = v22;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    time1 = v20;
    time2 = v21;
    return CMTimeCompare(&time1, &time2) < 1;
  }
  return 0;
}

unint64_t `non-virtual thunk to'OZImageMask::isActiveInTimeRange(OZImageMask *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  return OZImageMask::isActiveInTimeRange((OZImageMask *)((char *)this - 16), a2, a3, a4, a5);
}

void OZImageMask::allowDrag(OZImageMask *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  void *v14;
  void *v15;
  _BOOL4 v16;
  BOOL v18;
  uint64_t v19;

  *a5 = 0;
  if (lpsrc)
  {
    v16 = v14 != 0;
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v18 = (OZChannelBase *)(*(uint64_t (**)(OZImageMask *))(*(_QWORD *)this + 640))(this) != a3
     || !v16
     || v15 == 0;
  if (!v18
    && (v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 272))(v15),
        v19 == (*(uint64_t (**)(OZImageMask *))(*(_QWORD *)this + 272))(this)))
  {
    *a6 = 1;
    *a5 = a4 & 8;
  }
  else
  {
    OZSceneNode::allowDrag(this, lpsrc, a3, a4, a5, a6, a7);
  }
}

void `non-virtual thunk to'OZImageMask::allowDrag(OZImageMask *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZImageMask::allowDrag((OZImageMask *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

uint64_t OZImageMask::performDragOperation(OZChannelBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  OZImageNode *v15;
  _QWORD *v16;
  uint64_t v19;
  uint64_t v20;
  OZDocument **var9;
  PCSharedCount v24;

  if (lpsrc)
  {
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  if ((OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))this->var0 + 80))(this) != a3
    || v15 == 0
    || v16 == 0)
  {
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  v19 = (*(uint64_t (**)(_QWORD *))(*v16 + 272))(v16);
  v20 = (*((uint64_t (**)(OZChannelBase *))this->var0 + 34))(this);
  if (a5 != 1 || v19 != v20)
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  PCSharedCount::PCSharedCount(&v24);
  OZChannelBase::addToUndo(this + 10, (const PCString *)&v24);
  PCString::~PCString((PCString *)&v24);
  OZChanElementOrFootageRef::setImageNode((OZChanElementOrFootageRef *)&this[11].var3, v15);
  (*((void (**)(OZChannelBase *))this->var0 + 62))(this);
  (*(void (**)(_QWORD *, _QWORD))(v16[2] + 40))(v16 + 2, 0);
  var9 = (OZDocument **)this[8].var9;
  if (var9)
    OZDocument::postNotification(var9[198], 8);
  return 1;
}

void sub_1B2F08DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZImageMask::performDragOperation(OZImageMask *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZImageMask::performDragOperation((OZChannelBase *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZImageMask::parseEnd(OZImageMask *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseEnd(this, a2);
  if (OZChannel::getValueAsUint((OZChannel *)((char *)this + 1256), MEMORY[0x1E0CA2E68], 0.0))
    *((_BYTE *)this + 3672) = 1;
  if (*((_QWORD *)this + 124))
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 122) + 16) + 24) = (char *)this + 1088;
  return 1;
}

uint64_t `non-virtual thunk to'OZImageMask::parseEnd(OZImageMask *this, PCSerializerReadStream *a2)
{
  OZImageMask::parseEnd((OZImageMask *)((char *)this - 48), a2);
  return 1;
}

PCSharedCount *OZImageMask::makeRender@<X0>(OZImageMask *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v7;
  void *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;

  v7 = (const void *)*((_QWORD *)this + 120);
  if (v7
  {
    v9 = (*(uint64_t (**)(void *, OZRenderParams *))(*(_QWORD *)v8 + 2008))(v8, a2);
  }
  else
  {
    v9 = 1;
  }
  v10 = (uint64_t *)operator new();
  OZImageMaskRender::OZImageMaskRender((uint64_t)v10, (OZImageMask *)((char *)this + 1088), a2, v9);
  v11 = *v10;
  a3->var0 = (PC_Sp_counted_base *)((char *)v10 + *(_QWORD *)(*v10 - 24));
  return PCSharedCount::PCSharedCount(a3 + 1, (PCShared_base *)((char *)v10 + *(_QWORD *)(v11 - 32)));
}

void sub_1B2F08F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C401B86770FLL);
  _Unwind_Resume(a1);
}

PCSharedCount *`non-virtual thunk to'OZImageMask::makeRender@<X0>(OZImageMask *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  return OZImageMask::makeRender((OZImageMask *)((char *)this - 1088), a2, a3);
}

uint64_t OZImageMask::openMedia(OZImageMask *this)
{
  const void *MaskSource;
  void *v2;
  const void *v3;
  void *v4;
  void *v5;

  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource
  {
    return (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 104))(v4);
  }
  else
  {
    return 0;
  }
}

uint64_t OZImageMask::prerollBegin(OZImageMask *a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  const void *MaskSource;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  CMTime v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OZSceneNode::prerollBegin((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    v12 = v11;
    if (v11)
    {
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v19, a2);
  v17 = 0uLL;
  v18 = 0;
  v16 = *(CMTime *)a2;
  OZImageMask::getMaskSourceTime(a1, &v16, &v17);
  v19 = v17;
  v21 = 0;
  v22 = 0;
  v20 = v18;
  if (v12 || (v12 = v13) != 0)
    v14 = (*(uint64_t (**)(void *, __n128 *, uint64_t, uint64_t, double))(*(_QWORD *)v12 + 112))(v12, &v19, a3, a4, a5);
  else
    v14 = 0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v19);
  return v14;
}

void sub_1B2F09164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::prerollEnd(OZImageMask *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  const void *MaskSource;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  CMTime v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource)
  {
    v8 = v7;
    if (v7)
    {
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v15, a2);
  v13 = 0uLL;
  v14 = 0;
  v12 = *(CMTime *)a2;
  OZImageMask::getMaskSourceTime(this, &v12, &v13);
  v15 = v13;
  v17 = 0;
  v18 = 0;
  v16 = v14;
  if (v8 || (v8 = v9) != 0)
    v10 = (*(uint64_t (**)(void *, __n128 *, PMFrameRequest *))(*(_QWORD *)v8 + 120))(v8, &v15, a3);
  else
    v10 = 0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v15);
  return v10;
}

void sub_1B2F092C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::setRate(OZImageMask *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  const void *MaskSource;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  CMTime v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  MaskSource = OZImageMask::getMaskSource(this);
  if (MaskSource)
  {
    v10 = v9;
    if (v9)
    {
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)&v17, a2);
  v15 = 0uLL;
  v16 = 0;
  v14 = *(CMTime *)a2;
  OZImageMask::getMaskSourceTime(this, &v14, &v15);
  v17 = v15;
  v19 = 0;
  v20 = 0;
  v18 = v16;
  if (v10 || (v10 = v11) != 0)
    v12 = (*(uint64_t (**)(void *, __n128 *, PMFrameRequest *, double))(*(_QWORD *)v10 + 128))(v10, &v17, a3, a4);
  else
    v12 = 0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v17);
  return v12;
}

void sub_1B2F09434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::scheduleTokens(OZImageMask *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4, uint64_t a5)
{
  const void *MaskSource;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[3];
  _BYTE v17[1424];
  void **v18;

  OZSceneNode::scheduleTokens((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    v12 = v11;
    if (v11)
    {
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v17, a2);
  memset(v16, 0, sizeof(v16));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZImageMask *, const OZRenderParams *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v16, a4);
  if (v12 || (v12 = v13) != 0)
    v14 = (*(uint64_t (**)(void *, _BYTE *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v12 + 136))(v12, v17, v16, a4, a5);
  else
    v14 = 0;
  v18 = (void **)v16;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v17);
  return v14;
}

void sub_1B2F095C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::hintTokensWillImage(OZImageMask *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  const void *MaskSource;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[3];
  _BYTE v15[1424];
  void **v16;

  OZSceneNode::hintTokensWillImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    v10 = v9;
    if (v9)
    {
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v15, a2);
  memset(v14, 0, sizeof(v14));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v14, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZImageMask *, const OZRenderParams *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v14, a4);
  if (v10 || (v10 = v11) != 0)
    v12 = (*(uint64_t (**)(void *, _BYTE *, _QWORD *, uint64_t))(*(_QWORD *)v10 + 144))(v10, v15, v14, a4);
  else
    v12 = 0;
  v16 = (void **)v14;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v16);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v12;
}

void sub_1B2F09760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageMask::getTokensImage(OZImageMask *a1, const OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  const void *MaskSource;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[3];
  _BYTE v15[1424];
  void **v16;

  OZSceneNode::getTokensImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  MaskSource = OZImageMask::getMaskSource(a1);
  if (MaskSource)
  {
    v10 = v9;
    if (v9)
    {
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v15, a2);
  memset(v14, 0, sizeof(v14));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v14, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(OZImageMask *, const OZRenderParams *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v14, a4);
  if (v10 || (v10 = v11) != 0)
    v12 = (*(uint64_t (**)(void *, _BYTE *, _QWORD *, uint64_t))(*(_QWORD *)v10 + 152))(v10, v15, v14, a4);
  else
    v12 = 0;
  v16 = (void **)v14;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v16);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v12;
}

void sub_1B2F098F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void OZImageMask::remapTokens(OZImageMask *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  CMTime v20;
  __n128 v21;
  uint64_t v22;
  CMTime v23;

  OZSceneNode::remapTokens((uint64_t)a1, a2, (uint64_t)a3, a4);
  v7 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + 48 * v8;
      v13 = *(_QWORD *)(v10 + 24);
      v12 = (uint64_t *)(v10 + 24);
      v11 = v13;
      if (v12[1] != v13)
      {
        v14 = 0;
        v15 = 1;
        do
        {
          v16 = 3 * v14;
          v23 = *(CMTime *)(v11 + 24 * v14);
          v21 = 0uLL;
          v22 = 0;
          v20 = v23;
          OZImageMask::getMaskSourceTime(a1, &v20, &v21);
          v17 = *(_QWORD *)(*a3 + 48 * v8 + 24) + 8 * v16;
          v18 = v21;
          *(_QWORD *)(v17 + 16) = v22;
          *(__n128 *)v17 = v18;
          v14 = v15;
          v11 = *v12;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 3) > v15++);
        v7 = *a3;
        v6 = a3[1];
      }
      v8 = ++v9;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) > v9);
  }
}

const void *OZImageMask::pruneTokensAtTime(OZImageMask *this, CMTime *a2, const char *a3)
{
  const void *result;
  const void *v7;
  void *v8;
  __int128 v9;
  CMTimeEpoch v10;
  __int128 v11;
  CMTimeEpoch epoch;
  CMTime v13;

  v13 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v13, a3);
  result = OZImageMask::getMaskSource(this);
  if (result)
  {
    if (result)
    {
      v7 = result;
      if (v8)
      {
        v11 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        return (const void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)v8 + 160))(v8, &v11, a3);
      }
      else
      {
        if (result)
        {
          v9 = *(_OWORD *)&a2->value;
          v10 = a2->epoch;
          return (const void *)(*(uint64_t (**)(const void *, __int128 *, const char *))(*(_QWORD *)result
                                                                                                 + 160))(result, &v9, a3);
        }
      }
    }
  }
  return result;
}

const void *OZImageMask::pruneTokensExceptAtTime(OZImageMask *this, CMTime *a2, const char *a3)
{
  const void *result;
  const void *v7;
  void *v8;
  __int128 v9;
  CMTimeEpoch v10;
  __int128 v11;
  CMTimeEpoch epoch;
  CMTime v13;

  v13 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v13, a3);
  result = OZImageMask::getMaskSource(this);
  if (result)
  {
    if (result)
    {
      v7 = result;
      if (v8)
      {
        v11 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        return (const void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)v8 + 168))(v8, &v11, a3);
      }
      else
      {
        if (result)
        {
          v9 = *(_OWORD *)&a2->value;
          v10 = a2->epoch;
          return (const void *)(*(uint64_t (**)(const void *, __int128 *, const char *))(*(_QWORD *)result
                                                                                                 + 168))(result, &v9, a3);
        }
      }
    }
  }
  return result;
}

const void *OZImageMask::pruneAllTokens(OZImageMask *this, const char *a2)
{
  const void *result;
  const void *v5;

  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  result = OZImageMask::getMaskSource(this);
  if (result)
  {
    if (result)
    {
      v5 = result;
      if (result)
        return (const void *)(*(uint64_t (**)(const void *, const char *))(*(_QWORD *)result + 176))(result, a2);
      if (result)
        return (const void *)(*(uint64_t (**)(const void *, const char *))(*(_QWORD *)result + 176))(result, a2);
    }
  }
  return result;
}

uint64_t OZImageMask::getMaskBlendMode(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2960), MEMORY[0x1E0CA2E68], 0.0);
}

BOOL OZImageMask::getInvert(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 3216), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL OZImageMask::getStencil(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 3368), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL OZImageMask::getStretch(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 3520), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

_QWORD *`non-virtual thunk to'OZImageMask::getHashForStateRN@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 - 1072), a2, a3, a4, a5);
}

_OWORD *`non-virtual thunk to'OZImageMask::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 - 1072), a2, a3);
}

uint64_t `non-virtual thunk to'OZImageMask::getWorkingColorDescription@<X0>(OZImageMask *this@<X0>, uint64_t a2@<X8>)
{
  return OZSceneNode::getWorkingColorDescription((OZImageMask *)((char *)this - 1088), a2);
}

float `non-virtual thunk to'OZImageMask::getBlendingGamma(OZImageMask *this)
{
  return OZSceneNode::getBlendingGamma((OZImageMask *)((char *)this - 1088));
}

uint64_t `non-virtual thunk to'OZImageMask::getObjectManipulator(OZImageMask *this)
{
  return (uint64_t)this - 1072;
}

uint64_t `non-virtual thunk to'OZImageMask::getMaskBlendMode(OZImageMask *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1872), MEMORY[0x1E0CA2E68], 0.0);
}

BOOL `non-virtual thunk to'OZImageMask::getStencil(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 15, MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL `non-virtual thunk to'OZImageMask::getInvert(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 14, MEMORY[0x1E0CA2E68], 0.0) != 0;
}

void OZNodeCamera::OZNodeCamera(OZNodeCamera *this, OZScene *a2, int a3, OZViewerState *a4)
{
  uint64_t v8;
  void *v9;
  float64x2_t v10;

  *((_QWORD *)this + 66) = &off_1E65EB048;
  *((_QWORD *)this + 67) = 0;
  *((_BYTE *)this + 544) = 1;
  LiSimpleCamera::LiSimpleCamera(this, (uint64_t *)&off_1E65B3F38);
  *(_QWORD *)this = &off_1E65B3BF0;
  *((_QWORD *)this + 66) = &unk_1E65B3F18;
  *((_QWORD *)this + 58) = a2;
  *((_DWORD *)this + 118) = a3;
  *((_QWORD *)this + 60) = a4;
  *((_BYTE *)this + 488) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_BYTE *)this + 520) = 0;
  LiSimpleCamera::setCameraModel((uint64_t)this, 1);
  (*(void (**)(OZNodeCamera *, double))(*(_QWORD *)this + 512))(this, 45.0);
  v8 = *((_QWORD *)this + 58);
  v10 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)(v8 + 344)));
  (*(void (**)(OZNodeCamera *, float64x2_t *))(*(_QWORD *)this + 288))(this, &v10);
  (*(void (**)(OZNodeCamera *, double))(*(_QWORD *)this + 696))(this, *(double *)(v8 + 384));
  v9 = (void *)(*(uint64_t (**)(OZNodeCamera *))(*(_QWORD *)this + 768))(this);
  if (v9)
  {
    if (v9)
      LOBYTE(v9) = OZGroup::shouldLockToCamera((OZGroup *)v9, *((_DWORD *)a4 + 60) == 9);
  }
  *((_BYTE *)this + 520) = (_BYTE)v9;
}

void sub_1B2F09F48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)v1, (const PCString *)&off_1E65B3F38);
  *(_QWORD *)(v1 + 528) = v2 + 16;
  *(_BYTE *)(v1 + 544) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 536));
  _Unwind_Resume(a1);
}

uint64_t OZNodeCamera::getCrop(OZNodeCamera *this)
{
  return 0;
}

uint64_t OZNodeCamera::update(OZNodeCamera *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __int128 v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[24];
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  OZRenderState v39;

  v2 = (*(uint64_t (**)(OZNodeCamera *))(*(_QWORD *)this + 768))(this);
  if (!*((_BYTE *)this + 520))
  {
    v3 = *((_QWORD *)this + 58);
    if (*((_BYTE *)this + 488))
    {
      v4 = (void *)v2;
      OZRenderState::OZRenderState(&v39);
      v37 = *((_OWORD *)this + 31);
      v38 = *((_QWORD *)this + 64);
      OZScene::getCurrentTime(*((OZScene **)this + 58), (__n128 *)v28);
      *(_OWORD *)&v39.var0.var0 = *(_OWORD *)v28;
      v39.var0.var3 = *(_QWORD *)&v28[16];
      v39.var3 = *(double *)(v3 + 384);
      *(_WORD *)&v39.var8 = 256;
      if (v4)
      v36 = 0x3FF0000000000000;
      v33 = 0x3FF0000000000000;
      v30 = 0x3FF0000000000000;
      *(_QWORD *)v28 = 0x3FF0000000000000;
      v5 = 0uLL;
      *(_OWORD *)&v28[8] = 0u;
      v29 = 0u;
      v31 = 0u;
      v32 = 0u;
      v34 = 0u;
      v35 = 0u;
      if (v4)
      {
        (*(void (**)(void *, _BYTE *, OZRenderState *))(*(_QWORD *)v4 + 1256))(v4, v28, &v39);
        v5 = 0uLL;
      }
      v22 = v5;
      v23 = v5;
      v21 = v5;
      v24 = 4;
      v25 = v5;
      v26 = v5;
      v27 = 0;
      PCMatrix44Tmpl<double>::getTransformation((__int128 *)v28, (uint64_t)&v21);
      v19 = v25;
      v20 = v26;
      (*(void (**)(OZNodeCamera *, __int128 *))(*(_QWORD *)this + 400))(this, &v19);
      v39.var9 = 0;
      if (v4)
        (*(void (**)(void *, _BYTE *, OZRenderState *))(*(_QWORD *)v4 + 1256))(v4, v28, &v39);
      PCMatrix44Tmpl<double>::getTransformation((__int128 *)v28, (uint64_t)&v21);
      v18 = 0x3FF0000000000000;
      v15 = 0x3FF0000000000000;
      v12 = 0x3FF0000000000000;
      v9 = 0x3FF0000000000000;
      v10 = 0u;
      v11 = 0u;
      v13 = 0u;
      v14 = 0u;
      v16 = 0u;
      v17 = 0u;
      *((_QWORD *)&v23 + 1) = 0x3FF0000000000000;
      if (*((double *)&v22 + 1) != 1.0)
      {
        v9 = *((_QWORD *)&v22 + 1);
        *(double *)&v10 = *((double *)&v22 + 1) * 0.0;
        *((double *)&v10 + 1) = *((double *)&v22 + 1) * 0.0;
        *(double *)&v11 = *((double *)&v22 + 1) * 0.0;
      }
      if (*(double *)&v23 != 1.0)
      {
        *((double *)&v11 + 1) = *(double *)&v23 * 0.0;
        v12 = v23;
        *(double *)&v13 = *(double *)&v23 * 0.0;
        *((double *)&v13 + 1) = *(double *)&v23 * 0.0;
      }
      (*(void (**)(OZNodeCamera *, uint64_t *, __n128))(*(_QWORD *)this + 432))(this, &v9, (__n128)(unint64_t)v23);
      PCMatrix44Tmpl<double>::transform<double>((double *)v28, (double *)&v37, (double *)&v37);
      PCMatrix44Tmpl<double>::invert((double *)&v9, (double *)&v9, 0.0);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v9, (double *)&v37, (double *)&v37);
      (*(void (**)(OZNodeCamera *, __int128 *))(*(_QWORD *)this + 448))(this, &v37);
    }
    else
    {
      v39.var7.var0[1][2] = 1.0;
      v39.var7.var0[0][1] = 1.0;
      v39.var3 = 1.0;
      v39.var0.var0 = 0x3FF0000000000000;
      memset(&v39.var0.var1, 0, 32);
      memset(&v39.var4, 0, 32);
      memset(&v39.var7.var0[0][2], 0, 32);
      (*(void (**)(OZNodeCamera *, OZRenderState *))(*(_QWORD *)this + 432))(this, &v39);
      (*(void (**)(OZNodeCamera *, char *))(*(_QWORD *)this + 448))(this, (char *)this + 496);
      v39.var0.var0 = 0x3FF0000000000000;
      memset(&v39.var0.var1, 0, 24);
      (*(void (**)(OZNodeCamera *, OZRenderState *))(*(_QWORD *)this + 480))(this, &v39);
      v6 = *(_QWORD *)(v3 + 344);
      v7.i64[0] = (int)v6;
      v7.i64[1] = SHIDWORD(v6);
      *(float64x2_t *)&v39.var0.var0 = vcvtq_f64_s64(v7);
      (*(void (**)(OZNodeCamera *, OZRenderState *))(*(_QWORD *)this + 288))(this, &v39);
    }
  }
  return 1;
}

uint64_t OZNodeCamera::setAnimTime(uint64_t this, double a2)
{
  if (a2 != 1.0)
    *(_BYTE *)(this + 488) = 1;
  return this;
}

void OZNodeCamera::~OZNodeCamera(OZNodeCamera *this)
{
  uint64_t v1;

  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1E65B3F38);
  *(_QWORD *)(v1 + 528) = &off_1E65EB048;
  *(_BYTE *)(v1 + 544) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 536));
}

{
  uint64_t v1;

  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1E65B3F38);
  *(_QWORD *)(v1 + 528) = &off_1E65EB048;
  *(_BYTE *)(v1 + 544) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 536));
  JUMPOUT(0x1B5E29170);
}

void *OZNodeCamera::getNode(OZNodeCamera *this)
{
  return OZScene::getNode(*((OZScene **)this + 58), *((_DWORD *)this + 118));
}

void `virtual thunk to'OZNodeCamera::~OZNodeCamera(OZNodeCamera *this)
{
  uint64_t v1;

  LiSimpleCamera::~LiSimpleCamera((OZNodeCamera *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (const PCString *)&off_1E65B3F38);
  *(_QWORD *)(v1 + 528) = &off_1E65EB048;
  *(_BYTE *)(v1 + 544) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 536));
}

{
  OZNodeCamera::~OZNodeCamera((OZNodeCamera *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void OZChannelGradientWithTransform::OZChannelGradientWithTransform(OZChannelGradientWithTransform *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  _QWORD *v6;
  PCString v7;
  PCString v8;

  OZChannelGradientPositioned::OZChannelGradientPositioned(this, a2, a3, a4, a5);
  *v6 = &off_1E65B4798;
  v6[2] = &unk_1E65B4A78;
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Gradient Inherit Transform Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Gradient Inherit Transform Label"));
  OZChannelEnum::OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2472), 2u, &v8, &v7, (OZChannelFolder *)this, 7u, 65538, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Map Transform Mode Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Map Transform Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2728), 0, &v8, &v7, (OZChannelFolder *)this, 9u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Gradient Placement Mode Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Gradient Placement Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2984), 0, &v8, &v7, (OZChannelFolder *)this, 8u, 0x10000, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
}

void sub_1B2F0A538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelGradientPositioned *v12;
  OZChannelEnum *v13;
  OZChannelEnum *v14;

  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelGradientPositioned::~OZChannelGradientPositioned(v12);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithTransform::OZChannelGradientWithTransform(OZChannelGradientWithTransform *this, const OZChannelGradientWithTransform *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZChannelGradientPositioned::OZChannelGradientPositioned(this, a2, a3);
  *v5 = &off_1E65B4798;
  v5[2] = &unk_1E65B4A78;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 309), (const OZChannelGradientWithTransform *)((char *)a2 + 2472), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2728), (const OZChannelGradientWithTransform *)((char *)a2 + 2728), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2984), (const OZChannelGradientWithTransform *)((char *)a2 + 2984), (OZChannelFolder *)this);
  (*(void (**)(OZChannelGradientWithTransform *, const OZChannelGradientWithTransform *, uint64_t))(*(_QWORD *)this + 232))(this, a2, 1);
}

void sub_1B2F0A670(_Unwind_Exception *a1)
{
  OZChannelGradientPositioned *v1;
  OZChannelEnum *v2;
  OZChannelEnum *v3;
  OZChannelEnum *v4;

  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelGradientPositioned::~OZChannelGradientPositioned(v1);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithTransform::~OZChannelGradientWithTransform(OZChannelGradientWithTransform *this)
{
  *(_QWORD *)this = &off_1E65B4798;
  *((_QWORD *)this + 2) = &unk_1E65B4A78;
  OZChannelEnum::~OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2984));
  OZChannelEnum::~OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2728));
  OZChannelEnum::~OZChannelEnum((OZChannelGradientWithTransform *)((char *)this + 2472));
  OZChannelGradientPositioned::~OZChannelGradientPositioned(this);
}

{
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelGradientWithTransform::~OZChannelGradientWithTransform(OZChannelGradientWithTransform *this)
{
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform((OZChannelGradientWithTransform *)((char *)this - 16));
}

{
  OZChannelGradientWithTransform::~OZChannelGradientWithTransform((OZChannelGradientWithTransform *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChannelGradientWithTransform *OZChannelGradientWithTransform::clone(OZChannelGradientWithTransform *this)
{
  OZChannelGradientWithTransform *v2;

  v2 = (OZChannelGradientWithTransform *)operator new();
  OZChannelGradientWithTransform::OZChannelGradientWithTransform(v2, this, 0);
  return v2;
}

void sub_1B2F0A7A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4058F95B6ELL);
  _Unwind_Resume(a1);
}

void OZChannelGradientWithTransform::copy(PCString *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZChannelGradientPositioned::copy(this, a2, a3);
  if (v4)
  OZChannelEnum::copy(this + 309, (const OZChannelBase *)((char *)v4 + 2472), a3);
  OZChannelEnum::copy(this + 341, (const OZChannelBase *)((char *)v4 + 2728), a3);
  OZChannelEnum::copy(this + 373, (const OZChannelBase *)((char *)v4 + 2984), a3);
}

uint64_t OZChannelGradientWithTransform::parseEnd(OZChannelGradientWithTransform *this, PCSerializerReadStream *a2)
{
  uint64_t v3;
  const CMTime *v4;
  int ValueAsInt;
  double v6;

  v3 = OZChannelGradient::parseEnd(this, a2);
  if ((*((_BYTE *)this + 2528) & 2) == 0)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2472), MEMORY[0x1E0CA2E68], 0.0);
    v6 = 1.0;
    if (ValueAsInt != 2)
      v6 = 0.0;
    OZChannel::setValue((OZChannel *)((char *)this + 2728), v4, v6, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2472), 2, 0);
  }
  return v3;
}

uint64_t `non-virtual thunk to'OZChannelGradientWithTransform::parseEnd(OZChannelGradientWithTransform *this, PCSerializerReadStream *a2)
{
  return OZChannelGradientWithTransform::parseEnd((OZChannelGradientWithTransform *)((char *)this - 16), a2);
}

uint64_t OZMaterialRootChannelResetCallback(OZChannelBase *a1, void *a2)
{
  const void *ObjectManipulator;
  PCString *v3;
  const CMTime *v4;
  unsigned int ValueAsInt;
  PCString v7;

  ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a1);
  if (ObjectManipulator)
  else
    v3 = 0;
  v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)&v3[71], MEMORY[0x1E0CA2E68], 0.0);
  ((void (*)(PCString *))v3->var0[11].data)(v3);
  ((void (*)(PCString *))v3->var0[11].length)(v3);
  OZChannel::setValue((OZChannel *)&v3[71], v4, (double)ValueAsInt, 0);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Default Name"));
  PCString::set(v3 + 162, &v7);
  PCString::~PCString(&v7);
  return ((uint64_t (*)(PCString *))v3->var0[12].isa)(v3);
}

void sub_1B2F0A9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZMaterialBase::OZMaterialBase(OZMaterialBase *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  char *v7;
  OZLiCachingDelegate *v8;
  PCString v9[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  PCString v13;

  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  v7 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZMaterialBase *)((char *)this + 32));
  *((_QWORD *)this + 6) = &unk_1E64F6BA8;
  OZImageNode::OZImageNode((OZMaterialBase *)((char *)this + 56));
  *(_QWORD *)this = off_1E65B4AE8;
  *((_QWORD *)this + 2) = &unk_1E65B4CA8;
  *((_QWORD *)this + 6) = &unk_1E65B4F00;
  *((_QWORD *)this + 7) = &unk_1E65B4F58;
  PCMutex::PCMutex((PCMutex *)((char *)this + 80));
  OZChannelMaterialRoot::OZChannelMaterialRoot((OZMaterialBase *)((char *)this + 152), a3, 0, a4, 8);
  PCString::PCString(v9, "Material");
  OZChannelDouble::OZChannelDouble((OZMaterialBase *)((char *)this + 416), 0, v9, (OZChannelFolder *)((char *)this + 152), 3u, 10, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Material Facet Assignment"));
  OZChannelUint16::OZChannelUint16((OZChannelUint16 *)((char *)this + 568), 31, v9, (OZChannelFolder *)((char *)this + 152), 1u, 2, 0, 0);
  PCString::~PCString(v9);
  PCString::PCString(v9, "Sequence ID");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 720), 0, v9, (OZChannelFolder *)((char *)this + 152), 2u, 130, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Material Wrap Around Enum"));
  PCURL::PCURL((PCURL *)&v13, CFSTR("Material Wrap Around"));
  OZChannelEnum::OZChannelEnum((OZMaterialBase *)((char *)this + 872), 0, v9, &v13, (OZChannelFolder *)((char *)this + 152), 4u, 2, 0, 0);
  PCString::~PCString(&v13);
  PCString::~PCString(v9);
  PCString::PCString(v9, "Is Edited");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1128), 0, v9, (OZChannelFolder *)((char *)this + 152), 5u, 0x82u, 0, 0);
  PCString::~PCString(v9);
  *((_QWORD *)this + 160) = 0;
  *((_BYTE *)this + 1288) = 0;
  PCURL::PCURL((OZMaterialBase *)((char *)this + 1296), CFSTR("Material Default Name"));
  *((_BYTE *)this + 1304) = 0;
  OZLiCachingDelegate::instance(v8);
  OZChannelSceneNode::setSceneNode((uint64_t)this + 152, this);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 152), 0x400000);
  *((_QWORD *)this + 45) = v7;
  *(_OWORD *)&v9[0].var0 = *MEMORY[0x1E0CA2E68];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v11 = *(_OWORD *)&v9[0].var0;
  v12 = v10;
  OZChannelObjectRootBase::setTimeExtent((OZMaterialBase *)((char *)this + 152), (const PCTimeRange *)v9, 0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 152), 0x20000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 152), 0x80000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 152));
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 152), (void (*)(OZChannelBase *, void *))OZMaterialRootChannelResetCallback, 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 568), 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 568));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 720), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 720), 0x100000000, 0);
}

void sub_1B2F0AD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCMutex *a11, OZChannelBase *a12, PCString a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCString a20)
{
  uint64_t v20;
  OZChannelMaterialRoot *v21;
  OZChannel *v22;
  OZChannel *v23;
  OZChannel *v24;
  OZChannelEnum *v25;
  OZChannelBool *v26;
  PCString *v27;
  const PCString *v29;
  uint64_t v30;

  PCString::~PCString(v27);
  OZChannelBool::~OZChannelBool(v26);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannel::~OZChannel(v24);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v22);
  OZChannelMaterialRoot::~OZChannelMaterialRoot(v21);
  PCMutex::~PCMutex(a11);
  OZChannelBase::setRangeName(a12, v29);
  *(_QWORD *)(v20 + 16) = &unk_1E6588EA0;
  v30 = *(_QWORD *)(v20 + 24);
  if (v30)
  {
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v20 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZMaterialBase::OZMaterialBase(OZMaterialBase *this, const OZMaterialBase *a2, char a3)
{
  char *v6;
  OZLiCachingDelegate *v7;
  OZChannelBase *v8;
  unsigned int NextUniqueID;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  v6 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZMaterialBase *)((char *)this + 32));
  *((_QWORD *)this + 6) = &unk_1E64F6BA8;
  OZImageNode::OZImageNode((OZMaterialBase *)((char *)this + 56));
  *(_QWORD *)this = off_1E65B4AE8;
  *((_QWORD *)this + 2) = &unk_1E65B4CA8;
  *((_QWORD *)this + 6) = &unk_1E65B4F00;
  *((_QWORD *)this + 7) = &unk_1E65B4F58;
  PCMutex::PCMutex((PCMutex *)((char *)this + 80));
  OZChannelMaterialRoot::OZChannelMaterialRoot((OZMaterialBase *)((char *)this + 152), (const OZTimeMarkerSet **)a2 + 19, 0);
  OZChannel::OZChannel((OZChannel *)((char *)this + 416), (const OZChannelBase *)((char *)a2 + 416), (OZChannelFolder *)((char *)this + 152));
  *((_QWORD *)this + 52) = &off_1E6551358;
  *((_QWORD *)this + 54) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 568), (const OZChannelBase *)((char *)a2 + 568), (OZChannelFolder *)((char *)this + 152));
  *((_QWORD *)this + 71) = &off_1E6551EC8;
  *((_QWORD *)this + 73) = &unk_1E6552228;
  OZChannel::OZChannel((OZChannel *)((char *)this + 720), (const OZChannelBase *)((char *)a2 + 720), (OZChannelFolder *)((char *)this + 152));
  *((_QWORD *)this + 90) = &off_1E6551AF8;
  *((_QWORD *)this + 92) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((OZMaterialBase *)((char *)this + 872), (const OZMaterialBase *)((char *)a2 + 872), (OZChannelFolder *)((char *)this + 152));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1128), (const OZChannelBase *)((char *)a2 + 1128), (OZChannelFolder *)((char *)this + 152));
  *((_QWORD *)this + 160) = *((_QWORD *)a2 + 160);
  *((_BYTE *)this + 1288) = 0;
  PCString::PCString((PCString *)this + 162, (const PCString *)a2 + 162);
  *((_BYTE *)this + 1304) = *((_BYTE *)a2 + 1304);
  OZLiCachingDelegate::instance(v7);
  OZChannelSceneNode::setSceneNode((uint64_t)this + 152, this);
  *((_QWORD *)this + 45) = v6;
  v10 = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v12 = v10;
  v13 = v11;
  OZChannelObjectRootBase::setTimeExtent((OZMaterialBase *)((char *)this + 152), (const PCTimeRange *)&v10, 1);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 152), (void (*)(OZChannelBase *, void *))OZMaterialRootChannelResetCallback, 0, 0);
  if ((a3 & 2) != 0)
  {
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 152), NextUniqueID);
  }
}

void sub_1B2F0B098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, PCMutex *a11, OZChannelBase *a12)
{
  uint64_t v12;
  OZChannelBool *v13;
  PCString *v14;
  OZChannelMaterialRoot *v15;
  OZChannel *v16;
  OZChannel *v17;
  OZChannelEnum *v18;
  const PCString *v20;
  uint64_t v21;

  PCString::~PCString(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(a10);
  OZChannelMaterialRoot::~OZChannelMaterialRoot(v15);
  PCMutex::~PCMutex(a11);
  OZChannelBase::setRangeName(a12, v20);
  *(_QWORD *)(v12 + 16) = &unk_1E6588EA0;
  v21 = *(_QWORD *)(v12 + 24);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v12 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t OZMaterialBase::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = a1 + 152;
  OZChannelBehaviorRoot::operator=(a1 + 152, a2 + 152);
  return OZChannelSceneNode::setSceneNode(v3, (OZSceneNode *)a1);
}

void OZMaterialBase::~OZMaterialBase(OZMaterialBase *this)
{
  OZObjectManipulator *v2;
  OZChannelBase *v3;
  uint64_t v4;
  OZScene *v5;
  OZObjectManipulator ***v6;
  const PCString *v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E65B4AE8;
  *((_QWORD *)this + 2) = &unk_1E65B4CA8;
  v2 = (OZMaterialBase *)((char *)this + 16);
  *((_QWORD *)this + 6) = &unk_1E65B4F00;
  *((_QWORD *)this + 7) = &unk_1E65B4F58;
  v3 = (OZChannelBase *)((char *)this + 56);
  v4 = *((_QWORD *)this + 160);
  if (v4)
  {
    v5 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4);
    v6 = (OZObjectManipulator ***)v5;
    if (v5)
    {
      OZScene::unregisterObject(v5, v2);
      OZScene::removeObjectFromLoadObjectsWithDuplicateIDs(v6, v2);
    }
  }
  PCString::~PCString((PCString *)this + 162);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1128));
  OZChannelEnum::~OZChannelEnum((OZMaterialBase *)((char *)this + 872));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 720));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 416));
  OZChannelMaterialRoot::~OZChannelMaterialRoot((OZMaterialBase *)((char *)this + 152));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 80));
  OZChannelBase::setRangeName(v3, v7);
  *((_QWORD *)this + 2) = &unk_1E6588EA0;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    *((_QWORD *)this + 3) = 0;
  }
}

char *OZMaterialBase::removeThisFromBehaviors(char *this)
{
  const void *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  v1 = (const void *)*((_QWORD *)this + 160);
  if (v1)
  {
    v2 = this;
    if (this
    {
      v3 = this + 1000;
      v4 = *((_QWORD *)this + 126);
      if ((char *)v4 != this + 1000)
      {
        v5 = v2 + 16;
        do
        {
          this = (char *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v4 + 16) + 152))(*(_QWORD *)(v4 + 16), v5);
          v4 = *(_QWORD *)(v4 + 8);
        }
        while ((char *)v4 != v3);
      }
    }
  }
  return this;
}

uint64_t OZMaterialBase::setOwner(uint64_t this, OZObjectManipulator *a2)
{
  *(_QWORD *)(this + 1280) = a2;
  return this;
}

uint64_t OZMaterialBase::getScene(OZMaterialBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZMaterialBase::getScene(OZMaterialBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 158);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  return result;
}

uint64_t OZMaterialBase::getSceneNode(OZMaterialBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
  return result;
}

uint64_t `non-virtual thunk to'OZMaterialBase::getSceneNode(OZMaterialBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 158);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
  return result;
}

uint64_t OZMaterialBase::getSceneNodeConst(OZMaterialBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
  return result;
}

uint64_t OZMaterialBase::getWorkingColorDescription@<X0>(OZMaterialBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)this + 112))(this);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 288))(v3);
  else
    return FxGetDefaultWorkingColorDescription(a2);
}

uint64_t `non-virtual thunk to'OZMaterialBase::getWorkingColorDescription@<X0>(OZMaterialBase *this@<X0>, uint64_t a2@<X8>)
{
  return OZMaterialBase::getWorkingColorDescription((OZMaterialBase *)((char *)this - 56), a2);
}

float OZMaterialBase::getBlendingGamma(OZMaterialBase *this)
{
  uint64_t v1;
  float result;

  v1 = (*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)this + 112))(this);
  if (!v1)
    return PCRenderModel::getDefaultBlendingGamma(0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 296))(v1);
  return result;
}

float `non-virtual thunk to'OZMaterialBase::getBlendingGamma(OZMaterialBase *this)
{
  uint64_t v1;
  float result;

  v1 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 7) + 112))((char *)this - 56);
  if (!v1)
    return PCRenderModel::getDefaultBlendingGamma(0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 296))(v1);
  return result;
}

void OZMaterialBase::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 152), a2, a3);
}

void `non-virtual thunk to'OZMaterialBase::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 136), a2, a3);
}

uint64_t OZMaterialBase::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  OZChannel *v4;
  const CMTime *v5;
  int ValueAsInt;
  double v7;

  v4 = (OZChannel *)(a1 + 1128);
  v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 1128), MEMORY[0x1E0CA2E68], 0.0);
  OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 152), a2);
  v7 = 1.0;
  if (!ValueAsInt)
    v7 = 0.0;
  return OZChannel::setValue(v4, v5, v7, 1);
}

uint64_t OZMaterialBase::setIsEdited(OZMaterialBase *this, unsigned int a2, char a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 1128), MEMORY[0x1E0CA2E68], (double)a2, a3);
}

uint64_t `non-virtual thunk to'OZMaterialBase::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZMaterialBase::updateReferenceIDs(a1 - 16, a2);
}

uint64_t OZMaterialBase::setNewName(OZMaterialBase *this, const PCString *a2, uint64_t a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t, const PCString *, OZMaterialBase *, uint64_t, _QWORD))(*(_QWORD *)result + 488))(result, a2, this, a3, 0);
  return result;
}

uint64_t `non-virtual thunk to'OZMaterialBase::setNewName(OZMaterialBase *this, const PCString *a2, uint64_t a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 158);
  if (result)
    return (*(uint64_t (**)(uint64_t, const PCString *, char *, uint64_t, _QWORD))(*(_QWORD *)result + 488))(result, a2, (char *)this - 16, a3, 0);
  return result;
}

BOOL OZMaterialBase::isSimilarToMaterial(OZMaterialBase *this, OZMaterialBase *a2)
{
  const CMTime *v3;
  int ValueAsInt;

  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 568), MEMORY[0x1E0CA2E68], 0.0);
  return ValueAsInt == OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 568), v3, 0.0);
}

uint64_t OZMaterialBase::copyMaterial(OZMaterialBase *this, OZMaterialBase *a2)
{
  const CMTime *v3;
  double ValueAsInt;

  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = (double)OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 568), MEMORY[0x1E0CA2E68], 0.0);
  return OZChannel::setValue((OZChannel *)((char *)this + 568), v3, ValueAsInt, 0);
}

uint64_t OZMaterialBase::deleteThis(OZMaterialBase *this, OZChannelBase *a2)
{
  uint64_t v3;

  if ((OZChannelBase *)((char *)this + 152) == a2 && (v3 = *((_QWORD *)this + 160)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3);
  else
    return 0;
}

uint64_t `non-virtual thunk to'OZMaterialBase::deleteThis(OZMaterialBase *this, OZChannelBase *a2)
{
  uint64_t v3;

  if ((OZChannelBase *)((char *)this + 136) == a2 && (v3 = *((_QWORD *)this + 158)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3);
  else
    return 0;
}

uint64_t OZMaterialBase::isSelected(OZMaterialBase *this)
{
  return *((unsigned __int8 *)this + 1304);
}

uint64_t `non-virtual thunk to'OZMaterialBase::isSelected(OZMaterialBase *this)
{
  return *((unsigned __int8 *)this + 1288);
}

uint64_t OZMaterialBase::select(uint64_t this)
{
  *(_BYTE *)(this + 1304) = 1;
  return this;
}

uint64_t `non-virtual thunk to'OZMaterialBase::select(uint64_t this)
{
  *(_BYTE *)(this + 1288) = 1;
  return this;
}

uint64_t OZMaterialBase::deselect(uint64_t this)
{
  *(_BYTE *)(this + 1304) = 0;
  return this;
}

uint64_t `non-virtual thunk to'OZMaterialBase::deselect(uint64_t this)
{
  *(_BYTE *)(this + 1288) = 0;
  return this;
}

uint64_t OZMaterialBase::setPresetFromMaterial(OZMaterialBase *this, OZMaterialBase *a2)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 1128), MEMORY[0x1E0CA2E68], 0.0, 0);
}

uint64_t OZMaterialBase::willResetMaterial(OZMaterialBase *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD, OZMaterialBase *))(**((_QWORD **)this + 160) + 520))(*((_QWORD *)this + 160), this);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 160) + 496))(*((_QWORD *)this + 160), v2);
}

uint64_t OZMaterialBase::doResetMaterial(OZMaterialBase *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD, OZMaterialBase *))(**((_QWORD **)this + 160) + 520))(*((_QWORD *)this + 160), this);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 160) + 504))(*((_QWORD *)this + 160), v2);
}

uint64_t OZMaterialBase::didResetMaterial(OZMaterialBase *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD, OZMaterialBase *))(**((_QWORD **)this + 160) + 520))(*((_QWORD *)this + 160), this);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 160) + 512))(*((_QWORD *)this + 160), v2);
}

uint64_t OZMaterialBase::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZMaterialBaseScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 81);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 184);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 44));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZMaterialBase::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZMaterialBase::writeHeader(this - 6, a2);
}

uint64_t OZMaterialBase::writeBody(OZMaterialBase *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t v9;

  if ((v8 & 1) == 0
  {
    PCMutex::PCMutex(&OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock);
    __cxa_atexit((void (*)(void *))PCMutex::~PCMutex, &OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock, &dword_1B2737000);
  }
  PCMutex::lock(&OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZMaterialBaseScope);
  v9 = *((unsigned __int8 *)this + 1288);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 200);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  OZChannelObjectRoot::writeBody((OZMaterialBase *)((char *)this + 152), a2, 0, 1, a5);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return PCMutex::unlock(&OZMaterialBase::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::lock);
}

void sub_1B2F0B964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZMaterialBase::writeBody(OZMaterialBase *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZMaterialBase::writeBody((OZMaterialBase *)((char *)this - 48), a2, 0, 0, a5);
}

uint64_t OZMaterialBase::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  return OZChannelObjectRoot::markChannelFactoriesForSerialization((OZChannelObjectRoot *)(this + 19), a2);
}

uint64_t `non-virtual thunk to'OZMaterialBase::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZFactory::setNeedsSaving(*(this - 5), (const OZFactory *)1);
  return OZChannelObjectRoot::markChannelFactoriesForSerialization((OZChannelObjectRoot *)(this + 13), a2);
}

uint64_t OZMaterialBase::parseBegin(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZMaterialBaseScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 152), a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZMaterialBase::parseBegin(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZMaterialBaseScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 104), a2);
  return 1;
}

uint64_t OZMaterialBase::parseEnd(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  OZChannelFolder *v3;

  v3 = (OZChannelFolder *)((char *)this + 152);
  (*(void (**)(OZMaterialBase *, PCSerializerReadStream *))(*(_QWORD *)this + 200))(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 568), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 568), 0x400000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 872), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 872), 0x400000, 0);
  OZChannelBase::setFlags((OZChannelBase *)((char *)this + 416), 2uLL);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 416), 0x400000, 0);
  OZChannelFolder::setFoldFlag(v3, 0x400000);
  OZChannelBase::setFlag((OZChannelBase *)v3, 8, 0);
  OZChannelBase::resetFlag((OZChannelBase *)v3, 32, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 720), 128, 0);
  OZChannelFolder::setFoldFlag(v3, 0x80000);
  OZChannelBase::resetFlag((OZChannelBase *)v3, 1, 0);
  return 1;
}

uint64_t `non-virtual thunk to'OZMaterialBase::parseEnd(OZMaterialBase *this, PCSerializerReadStream *a2)
{
  OZMaterialBase::parseEnd((OZMaterialBase *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZMaterialBase::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  char v6;

  OZChannelObjectRoot::parseElement(this + 19, a2, a3);
  if (*((_DWORD *)a3 + 2) == 200)
  {
    v6 = 0;
    (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, &v6);
    *((_BYTE *)this + 1288) = v6;
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZMaterialBase::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZMaterialBase::parseElement(this - 6, a2, a3);
  return 1;
}

void OZMaterialBase::allowDrag(OZMaterialBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (lpsrc)
  {
    {
      *a5 = a4 & 1;
    }
  }
}

void `non-virtual thunk to'OZMaterialBase::allowDrag(OZMaterialBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (lpsrc)
  {
    {
      *a5 = a4 & 1;
    }
  }
}

uint64_t OZMaterialBase::prepareForDragOperation()
{
  return 1;
}

uint64_t `non-virtual thunk to'OZMaterialBase::prepareForDragOperation()
{
  return 1;
}

uint64_t OZMaterialBase::performDragOperation(OZMaterialBase *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  int v8;
  uint64_t v12;
  void *v13;
  uint64_t result;
  const void *ObjectManipulator;
  char *v16;
  uint64_t v17;
  const PCString *v18;
  const CMTime *v19;
  unsigned int ValueAsInt;
  int v21;
  OZChannelFolder *v22;
  PCString v23;

  v8 = a6;
  if (!(*(uint64_t (**)(OZMaterialBase *, OZFactoryBase *, OZChannelBase *, uint64_t, uint64_t, uint64_t, uint64_t, const CMTime *))(*(_QWORD *)this + 96))(this, a2, a3, a4, a5, a6, a7, a8))
  {
    v12 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
    if (a2)
      goto LABEL_3;
    return 0;
  }
  v12 = (*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)this + 96))(this);
  if (!a2)
    return 0;
LABEL_3:
  result = 0;
  if (v8 == 1 && v13)
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a3);
    if (ObjectManipulator)
    else
      v16 = 0;
    v17 = *(_QWORD *)(v12 + 1584);
    PCURL::PCURL((PCURL *)&v23, CFSTR("Undo Material Change"));
    OZDocument::startCaptureModifiedChannels(v17, &v23);
    PCString::~PCString(&v23);
    if (v16)
    {
      v19 = (const CMTime *)MEMORY[0x1E0CA2E68];
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v16 + 568), MEMORY[0x1E0CA2E68], 0.0);
      v21 = *(_DWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v16 + 208))(v16) + 120);
      (*(void (**)(char *, void *))(*(_QWORD *)v16 + 80))(v16, v13);
      v22 = (OZChannelFolder *)(*(uint64_t (**)(char *))(*(_QWORD *)v16 + 208))(v16);
      OZChannelFolder::setFoldFlags(v22, v21);
      OZChannel::setValue((OZChannel *)(v16 + 568), v19, (double)ValueAsInt, 0);
    }
    OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v12 + 1584), v18);
    return 1;
  }
  return result;
}

void sub_1B2F0BE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZMaterialBase::performDragOperation(OZMaterialBase *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZMaterialBase::performDragOperation((OZMaterialBase *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZMaterialBase::buildRenderGraph(OZMaterialBase *this, OZRenderParams *a2, PCMutex *a3, const OZRenderGraphState *a4)
{
  LiGroup *v8;
  PCArray_base *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int WorkingGamut;
  PCSharedCount v20;
  PCSharedCount v21;
  PC_Sp_counted_base *var0;
  PCSharedCount v23;
  _BYTE v24[16];
  _QWORD *v25[3];
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[12];
  int v58;
  uint64_t v59;
  FxColorDescription v60;
  PCSharedCount v61;
  PCSharedCount v62;
  PCSharedCount v63;

  v8 = (LiGroup *)operator new();
  LiGroup::LiGroup(v8);
  v61.var0 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v62, (LiGroup *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  (*(void (**)(__int128 *__return_ptr, OZMaterialBase *))(*(_QWORD *)this + 408))(&v26, this);
  FxColorDescription::FxColorDescription((uint64_t)&v60, (uint64_t)&v26, 0);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v26);
  OZLightingStyle::getLightSet((OZLightingStyle *)1, &v60, (uint64_t)v57);
  v10 = v58;
  if (v58)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if ((v12 & 0x80000000) != 0 || v10 <= (int)v12)
        PCArray_base::badIndex(v9);
      *(_BYTE *)(v59 + 944 * SHIDWORD(v11) + 721) = 0;
      ++v12;
      v11 += 0x100000000;
    }
    while (v12 < v10);
  }
  LiGraphBuilder::setLights((uint64_t)a3, (uint64_t)v57);
  v55 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v56 = _Q0;
  (*(void (**)(OZMaterialBase *, __int128 *, OZRenderParams *))(*(_QWORD *)this + 392))(this, &v55, a2);
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  v36 = 0u;
  v37 = 0u;
  v39 = 0u;
  v40 = 0u;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  v51 = v55;
  v52 = v56;
  v29 = xmmword_1B3560A80;
  v30 = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  v26 = _Q1;
  v27 = 0x3FF0000000000000;
  v28 = 0;
  v32 = 0x3FF0000000000000;
  v35 = 0x3FF0000000000000;
  v38 = _Q1;
  v41 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v53 = xmmword_1B3560A90;
  v54 = 1;
  OZMaterialStatistics::OZMaterialStatistics((OZMaterialStatistics *)v24);
  var0 = 0;
  PCSharedCount::PCSharedCount(&v23);
  (*(void (**)(PCSharedCount *__return_ptr, OZMaterialBase *, OZRenderParams *, const OZRenderGraphState *, __int128 *, _BYTE *))(*(_QWORD *)this + 424))(&v20, this, a2, a4, &v26, v24);
  var0 = v20.var0;
  PCSharedCount::PCSharedCount(&v63, &v21);
  PCSharedCount::operator=((uint64_t *)&v23, (uint64_t *)&v63);
  PCSharedCount::~PCSharedCount(&v63);
  PCSharedCount::~PCSharedCount(&v21);
  if (!var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)var0 + 160))(var0, 255);
  if (!v61.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v61.var0 + 152))(v61.var0, var0);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v20, &v61);
  WorkingGamut = OZRenderParams::getWorkingGamut(a2);
  LiGraphBuilder::add3d(a3, &v20, WorkingGamut);
  PCSharedCount::~PCSharedCount(&v21);
  PCSharedCount::~PCSharedCount(&v23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v25, v25[1]);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v57);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v60._pcColorDesc._colorSpaceRef._obj);
  PCSharedCount::~PCSharedCount(&v62);
}

void sub_1B2F0C188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  PCSharedCount *v17;
  PCSharedCount *v18;
  uint64_t v19;

  PCSharedCount::~PCSharedCount(v18);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a16, a17);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v19 - 168);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v19 - 136));
  PCSharedCount::~PCSharedCount(v17);
  _Unwind_Resume(a1);
}

void LiVramLimitsExceededMaterial::LiVramLimitsExceededMaterial(LiVramLimitsExceededMaterial *this)
{
  *((_QWORD *)this + 87) = &off_1E65EB048;
  *((_QWORD *)this + 88) = 0;
  *((_BYTE *)this + 712) = 1;
  LiMaterial::LiMaterial(this, (uint64_t *)off_1E65778A8);
  *(_QWORD *)this = &unk_1E65777A0;
  *((_QWORD *)this + 87) = &unk_1E6577888;
  *((_QWORD *)this + 83) = 0x3FF0000000000000;
  *((_OWORD *)this + 42) = xmmword_1B304EED0;
  *((_QWORD *)this + 86) = 0x3FF0000000000000;
}

void sub_1B2F0C370(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 696) = v4;
  *(_BYTE *)(v1 + 712) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZMaterialBase::buildRenderGraph(OZMaterialBase *this, OZRenderParams *a2, PCMutex *a3, const OZRenderGraphState *a4)
{
  OZMaterialBase::buildRenderGraph((OZMaterialBase *)((char *)this - 56), a2, a3, a4);
}

uint64_t OZMaterialBase::channelValueWillBeSet(OZMaterialBase *this, OZChannel *a2, const CMTime *a3, double a4)
{
  uint64_t result;

  result = *((_QWORD *)this + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t, OZChannel *, const CMTime *, BOOL))(*(_QWORD *)result + 552))(result, a2, a3, a4 != 0.0);
  return result;
}

void OZChannelUint16::OZChannelUint16(OZChannelUint16 *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelUint16_FactoryBase;
  OZChannelUint16 *v17;
  OZChannelUint16 *OZChannelUint16Info;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelUint16_FactoryBase = (OZFactory *)getOZChannelUint16_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint16_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E6551EC8;
  this->var2 = (void **)&unk_1E6552228;
  OZChannelUint16Info = (OZChannelUint16 *)OZChannelUint16::createOZChannelUint16Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
    this->var17 = (OZChannelInfo *)OZChannelUint16::_OZChannelUint16Info;
  }
  this->var16 = var17;
  OZChannelUint16::createOZChannelUint16Impl(OZChannelUint16Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint16::_OZChannelUint16Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B2F0C4BC(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  _QWORD *v11;

  Instance = (OZFactory *)OZChanObjectRefWithPicker_Factory::getInstance(this);
  OZChanObjectManipRef::OZChanObjectManipRef(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65B5088;
  *((_QWORD *)this + 2) = &unk_1E65B5418;
  *((_QWORD *)this + 21) = (char *)this + 168;
  *((_QWORD *)this + 22) = (char *)this + 168;
  *((_QWORD *)this + 23) = 0;
  v11 = (_QWORD *)operator new();
  *v11 = v11;
  v11[1] = v11;
  v11[2] = 0;
  *((_QWORD *)this + 20) = v11;
  *((_BYTE *)this + 155) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
}

void sub_1B2F0C580(_Unwind_Exception *a1)
{
  OZChanObjectManipRef *v1;
  _QWORD *v2;

  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectRefWithPicker_Factory::getInstance(OZChanObjectRefWithPicker_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChanObjectRefWithPicker_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChanObjectRefWithPicker_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanObjectRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanObjectRefWithPicker_Factory::_instance;
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  _QWORD *v7;
  _QWORD *v8;

  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4, a5, a6);
  *v7 = &off_1E65B5088;
  v7[2] = &unk_1E65B5418;
  v7[21] = v7 + 21;
  v7[22] = v7 + 21;
  v7[23] = 0;
  v8 = (_QWORD *)operator new();
  *v8 = v8;
  v8[1] = v8;
  v8[2] = 0;
  *((_QWORD *)this + 20) = v8;
  *((_BYTE *)this + 155) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
}

void sub_1B2F0C678(_Unwind_Exception *a1)
{
  OZChanObjectManipRef *v1;
  _QWORD *v2;

  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  _QWORD *v6;

  OZChanObjectManipRef::OZChanObjectManipRef(this, a2, a3, a4);
  *v5 = &off_1E65B5088;
  v5[2] = &unk_1E65B5418;
  v5[21] = v5 + 21;
  v5[22] = v5 + 21;
  v5[23] = 0;
  v6 = (_QWORD *)operator new();
  *v6 = v6;
  v6[1] = v6;
  v6[2] = 0;
  *((_QWORD *)this + 20) = v6;
  *((_BYTE *)this + 155) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
}

void sub_1B2F0C710(_Unwind_Exception *a1)
{
  OZChanObjectManipRef *v1;
  _QWORD *v2;

  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this, const OZChanObjectRefWithPicker *a2, OZChannelFolder *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  __n128 *v7;
  __n128 *i;

  OZChanObjectManipRef::OZChanObjectManipRef(this, (const OZChannelBase *)a2, a3);
  *v5 = &off_1E65B5088;
  v5[2] = &unk_1E65B5418;
  std::list<PCUUID>::list((uint64_t)(v5 + 21), (__n128 *)((char *)a2 + 168));
  v6 = (_QWORD *)operator new();
  *v6 = v6;
  v6[1] = v6;
  v6[2] = 0;
  *((_QWORD *)this + 20) = v6;
  v7 = (__n128 *)*((_QWORD *)a2 + 20);
  for (i = v7; ; std::list<PCUUID>::push_back(*((__n128 ***)this + 20), i + 1))
  {
    i = (__n128 *)i->n128_u64[1];
    if (i == v7)
      break;
  }
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_WORD *)this + 100) = *((_WORD *)a2 + 100);
  *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
  OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
}

void sub_1B2F0C7F0(_Unwind_Exception *a1)
{
  OZChanObjectManipRef *v1;
  _QWORD *v2;

  std::__list_imp<unsigned int>::clear(v2);
  OZChanObjectManipRef::~OZChanObjectManipRef(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65B5088;
  *((_QWORD *)this + 2) = &unk_1E65B5418;
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    std::__list_imp<unsigned int>::clear(*((_QWORD **)this + 20));
    MEMORY[0x1B5E29170](v2, 0x1020C4062D53EE8);
  }
  *((_QWORD *)this + 20) = 0;
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 21);
  OZChanObjectManipRef::~OZChanObjectManipRef(this);
}

{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(OZChanObjectRefWithPicker *this)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanObjectRefWithPicker *)((char *)this - 16));
}

{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanObjectRefWithPicker *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

OZChanObjectRefWithPicker *OZChanObjectRefWithPicker::clone(OZChanObjectRefWithPicker *this)
{
  OZChanObjectRefWithPicker *v2;

  v2 = (OZChanObjectRefWithPicker *)operator new();
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(v2, this, 0);
  return v2;
}

void sub_1B2F0C928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectRefWithPicker::resetAcceptedObjects(uint64_t this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  int32x4_t *i;
  unint64_t v5;
  int32x4_t *j;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int32x4_t v18[2];

  v1 = this;
  *(_DWORD *)(this + 194) = 0;
  v2 = (_BYTE *)(this + 194);
  *(_DWORD *)(this + 197) = 0;
  v3 = *(_QWORD *)(this + 160);
  for (i = *(int32x4_t **)(v3 + 8); i != (int32x4_t *)v3; i = (int32x4_t *)i->i64[1])
  {
    v18[0] = i[1];
    this = OZFactories::findFactory(*(_QWORD *)(theApp + 32), (unsigned int *)v18);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18[0], (int32x4_t)xmmword_1B355DCA0)))) & 1) != 0)
    {
      v5 = this;
      v17 = xmmword_1B355DB10;
      this = OZFactory::isKindOfClass(this, (int32x4_t *)&v17);
      if ((_DWORD)this)
      {
        *(_BYTE *)(v1 + 195) = 1;
      }
      else
      {
        v16 = xmmword_1B355EAE0;
        this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v16);
        if ((_DWORD)this)
        {
          *(_BYTE *)(v1 + 196) = 1;
        }
        else
        {
          v15 = xmmword_1B355CFE0;
          this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v15);
          if ((_DWORD)this)
          {
            *(_BYTE *)(v1 + 198) = 1;
          }
          else
          {
            v14 = xmmword_1B355CFF0;
            this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v14);
            if ((_DWORD)this)
            {
              *(_BYTE *)(v1 + 199) = 1;
            }
            else
            {
              v13 = xmmword_1B355CF30;
              this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v13);
              if ((_DWORD)this)
                *(_BYTE *)(v1 + 200) = 1;
            }
          }
        }
      }
    }
    else
    {
      *v2 = 1;
    }
  }
  for (j = *(int32x4_t **)(v1 + 176); j != (int32x4_t *)(v1 + 168); j = (int32x4_t *)j->i64[1])
  {
    v18[0] = j[1];
    this = OZFactories::findFactory(*(_QWORD *)(theApp + 32), (unsigned int *)v18);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18[0], (int32x4_t)xmmword_1B355DCA0)))) & 1) != 0)
    {
      v7 = this;
      v12 = xmmword_1B355DB10;
      this = OZFactory::isKindOfClass(this, (int32x4_t *)&v12);
      if ((_DWORD)this)
      {
        *(_BYTE *)(v1 + 195) = 0;
      }
      else
      {
        v11 = xmmword_1B355EAE0;
        this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v11);
        if ((_DWORD)this)
        {
          *(_BYTE *)(v1 + 196) = 0;
        }
        else
        {
          v10 = xmmword_1B355CFE0;
          this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v10);
          if ((_DWORD)this)
          {
            *(_BYTE *)(v1 + 198) = 0;
          }
          else
          {
            v9 = xmmword_1B355CFF0;
            this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v9);
            if ((_DWORD)this)
            {
              *(_BYTE *)(v1 + 199) = 0;
            }
            else
            {
              v8 = xmmword_1B355CF30;
              this = OZFactory::isKindOfClass(v7, (int32x4_t *)&v8);
              if ((_DWORD)this)
                *(_BYTE *)(v1 + 200) = 0;
            }
          }
        }
      }
    }
    else
    {
      *(_WORD *)(v1 + 195) = 0;
      *(_BYTE *)(v1 + 197) = 0;
    }
  }
  return this;
}

uint64_t OZChanObjectRefWithPicker::copy(OZChannelBase *this, const OZChannelBase *a2)
{
  OZChannelFolder *var6;
  __n128 *i;

  OZChanSceneNodeRef::removeDependency(this);
  OZChannel::copy((OZChannel *)this, a2, 0);
  std::__list_imp<unsigned int>::clear(this[1].var6);
  if (a2)
  var6 = a2[1].var6;
  for (i = (__n128 *)*((_QWORD *)var6 + 1); i != (__n128 *)var6; i = (__n128 *)i->n128_u64[1])
    std::list<PCUUID>::push_back((__n128 **)this[1].var6, i + 1);
  if (a2 != this)
    std::list<PCUUID>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>((uint64_t *)&this[1].var7, a2[1].var8, (uint64_t)&a2[1].var7);
  return OZChanSceneNodeRef::setDependency(this);
}

uint64_t OZChanObjectRefWithPicker::assign(OZChanObjectRefWithPicker *this, const OZChannelBase *a2)
{
  OZChanObjectRefWithPicker *v4;
  OZChanObjectRefWithPicker *v5;
  uint64_t v6;
  __n128 *i;

  OZChanSceneNodeRef::removeDependency((OZChannelBase *)this);
  OZChannel::assign((OZChannel *)this, a2);
  if (a2)
  {
    if (v4)
    {
      v5 = v4;
      std::__list_imp<unsigned int>::clear(*((_QWORD **)this + 20));
      v6 = *((_QWORD *)v5 + 20);
      for (i = *(__n128 **)(v6 + 8); i != (__n128 *)v6; i = (__n128 *)i->n128_u64[1])
        std::list<PCUUID>::push_back(*((__n128 ***)this + 20), i + 1);
      if (v5 != this)
        std::list<PCUUID>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>((uint64_t *)this + 21, *((_QWORD *)v5 + 22), (uint64_t)v5 + 168);
    }
  }
  return OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
}

uint64_t OZChanObjectRefWithPicker::setValue(OZChannelBase *this, double a2, double a3)
{
  OZChanSceneNodeRef::removeDependency(this);
  OZChannel::setValue((OZChannel *)this, MEMORY[0x1E0CA2E68], a3, 0);
  return OZChanSceneNodeRef::setDependency(this);
}

uint64_t OZChanObjectRefWithPicker::operator=(uint64_t a1, uint64_t a2)
{
  OZChannelBase::operator=(a1, a2);
  return a1;
}

unint64_t OZChanObjectRefWithPicker::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t ObjectManipulator;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int (*v13)(void);
  const struct __class_type_info *v14;
  const OZObjectManipulator *v15;
  ptrdiff_t v16;
  BOOL v17;
  unint64_t v18;
  int32x4_t v19;
  uint64_t *v20;
  _QWORD *v21[2];

  result = OZChanObjectManipRef::canReferenceObject(this, a2);
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(const OZObjectManipulator *))(*(_QWORD *)a2 + 232))(a2);
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    v7 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator);
    v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 272))(v7);
    if ((_DWORD *)v5 == v7 && !BYTE1(this[1].var11))
      return 0;
    if (!BYTE3(this[1].var5) && v8)
    {
      v21[0] = 0;
      v21[1] = 0;
      v20 = (uint64_t *)v21;
      v9 = v7[20];
      OZScene::getReferencedNodes(v8, *(_DWORD *)(v5 + 80), &v20);
      v10 = v20;
      if (v20 != (uint64_t *)v21)
      {
        while (*((_DWORD *)v10 + 7) != v9)
        {
          v11 = (uint64_t *)v10[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (uint64_t *)v10[2];
              v17 = *v12 == (_QWORD)v10;
              v10 = v12;
            }
            while (!v17);
          }
          v10 = v12;
          if (v12 == (uint64_t *)v21)
            goto LABEL_14;
        }
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, v21[0]);
        return 0;
      }
LABEL_14:
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, v21[0]);
    }
    if (BYTE3(this[1].var10))
    {
      if (LOBYTE(this[1].var10))
      {
        if (!result)
          return result;
        v13 = *(unsigned int (**)(void))(*(_QWORD *)result + 1352);
LABEL_25:
        v17 = v13() == 0;
        return !v17;
      }
      if (BYTE1(this[1].var10))
      {
        if (!result)
          return result;
        v13 = *(unsigned int (**)(void))(*(_QWORD *)result + 1360);
        goto LABEL_25;
      }
LABEL_31:
      v17 = result == 0;
      return !v17;
    }
    if (BYTE2(this[1].var10))
    {
LABEL_21:
      v15 = a2;
      v16 = 16;
LABEL_30:
      goto LABEL_31;
    }
    if (BYTE6(this[1].var10))
    {
      v15 = a2;
      v16 = 48;
      goto LABEL_30;
    }
    if (HIBYTE(this[1].var10))
    {
      goto LABEL_21;
    }
    if (LOBYTE(this[1].var11))
    {
      v18 = *(_QWORD *)((*(uint64_t (**)(const OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2) + 8);
      v19 = (int32x4_t)xmmword_1B355CF30;
      return OZFactory::isKindOfClass(v18, &v19);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1B2F0D004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectRefWithPicker::addAcceptedFactoryUUID(uint64_t a1, __n128 *a2)
{
  std::list<PCUUID>::push_back(*(__n128 ***)(a1 + 160), a2);
  return OZChanObjectRefWithPicker::resetAcceptedObjects(a1);
}

uint64_t OZChanObjectRefWithPicker::removeAcceptedFactoryUUID(uint64_t a1, int32x4_t *a2)
{
  int32x4_t *v3;
  int32x4_t *v4;
  uint64_t v5;

  v3 = *(int32x4_t **)(a1 + 160);
  v4 = v3;
  while (1)
  {
    v4 = (int32x4_t *)v4->i64[1];
    if (v4 == v3)
      break;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v4[1], *a2)))) & 1) == 0)
    {
      v5 = v4->i64[0];
      *(_QWORD *)(v5 + 8) = v4->i64[1];
      *(_QWORD *)v4->i64[1] = v5;
      --v3[1].i64[0];
      operator delete(v4);
      return OZChanObjectRefWithPicker::resetAcceptedObjects(a1);
    }
  }
  std::list<PCUUID>::push_back((__n128 **)(a1 + 168), (__n128 *)a2);
  return OZChanObjectRefWithPicker::resetAcceptedObjects(a1);
}

uint64_t OZChanObjectRefWithPicker::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  OZChanSceneNodeRef::removeDependency(this);
  return OZChannel::parseBegin((OZChannel *)this, a2);
}

uint64_t `non-virtual thunk to'OZChanObjectRefWithPicker::parseBegin(OZChanObjectRefWithPicker *this, PCSerializerReadStream *a2)
{
  OZChannel *v3;

  v3 = (OZChannel *)((char *)this - 16);
  OZChanSceneNodeRef::removeDependency((OZChannelBase *)((char *)this - 16));
  return OZChannel::parseBegin(v3, a2);
}

uint64_t OZChanObjectRefWithPicker::parseEnd(OZChannel *this, PCSerializerReadStream *a2)
{
  OZChannel::parseEnd(this, a2);
  OZChanSceneNodeRef::setDependency((OZChannelBase *)this);
  return 1;
}

uint64_t `non-virtual thunk to'OZChanObjectRefWithPicker::parseEnd(OZChanObjectRefWithPicker *this, PCSerializerReadStream *a2)
{
  OZChannelBase *v2;

  v2 = (OZChannelBase *)((char *)this - 16);
  OZChannel::parseEnd((OZChannel *)((char *)this - 16), a2);
  OZChanSceneNodeRef::setDependency(v2);
  return 1;
}

void std::__call_once_param<std::tuple<OZChanObjectRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChanObjectRefWithPicker_Factory *v0;

  v0 = (OZChanObjectRefWithPicker_Factory *)operator new();
  OZChanObjectRefWithPicker_Factory::OZChanObjectRefWithPicker_Factory(v0);
  OZChanObjectRefWithPicker_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F0D1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanObjectRefWithPicker_Factory::OZChanObjectRefWithPicker_Factory(OZChanObjectRefWithPicker_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E8F0;
  v4 = xmmword_1B355E3F0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65B5488;
  *((_QWORD *)this + 16) = &unk_1E65B5558;
}

void sub_1B2F0D260(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChanObjectRefWithPicker *OZChanObjectRefWithPicker_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChanObjectRefWithPicker *v6;

  v6 = (OZChanObjectRefWithPicker *)operator new();
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(v6, this, a2, a3);
  return v6;
}

void sub_1B2F0D2D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChanObjectRefWithPicker *OZChanObjectRefWithPicker_Factory::createCopy(OZChanObjectRefWithPicker_Factory *this, OZFactoryBase *a2)
{
  OZChanObjectRefWithPicker *v3;
  const OZChanObjectRefWithPicker *v4;

  v3 = (OZChanObjectRefWithPicker *)operator new();
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2F0D35C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChanObjectRefWithPicker *OZChanObjectRefWithPicker_Factory::createChannelCopy(OZChanObjectRefWithPicker_Factory *this, OZChannelBase *a2)
{
  OZChanObjectRefWithPicker *v3;
  const OZChanObjectRefWithPicker *v4;

  v3 = (OZChanObjectRefWithPicker *)operator new();
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2F0D3E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

uint64_t std::list<PCUUID>::list(uint64_t a1, __n128 *a2)
{
  __n128 *i;

  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  for (i = a2; ; std::list<PCUUID>::push_back((__n128 **)a1, i + 1))
  {
    i = (__n128 *)i->n128_u64[1];
    if (i == a2)
      break;
  }
  return a1;
}

void sub_1B2F0D460(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<PCUUID>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    *((_OWORD *)i + 1) = *(_OWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return std::list<PCUUID>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>((uint64_t)a1, a1, a2, a3);
  else
    return std::list<std::pair<CMTime,double>>::erase((uint64_t)a1, i, a1);
}

uint64_t *std::list<PCUUID>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<PCUUID,void *>,std::__list_const_iterator<PCUUID,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x20uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x20uLL);
        *v8 = v12;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B2F0D594(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B2F0D5B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t OZChannelEnumRetime_Factory::getInstance(OZChannelEnumRetime_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelEnumRetime_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelEnumRetime_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelEnumRetime_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelEnumRetime_Factory::_instance;
}

void OZChannelEnumRetime::OZChannelEnumRetime(OZChannelEnumRetime *this, const PCString *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZFactory *Instance;
  OZChannelEnumRetime_Factory *v13;

  Instance = (OZFactory *)OZChannelEnumRetime_Factory::getInstance(this);
  OZChannelEnum::OZChannelEnum((OZChannel *)this, a2, Instance, a3, a4, a5, a6, 0, 0);
  *(_QWORD *)this = &unk_1E658E9B8;
  *((_QWORD *)this + 2) = &unk_1E658ED28;
  *((_QWORD *)this + 1) = OZChannelEnumRetime_Factory::getInstance(v13);
}

void sub_1B2F0D6BC(_Unwind_Exception *a1)
{
  PCString *v1;

  OZChannelEnum::~OZChannelEnum(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelEnumRetime_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelEnumRetime_Factory *v0;

  v0 = (OZChannelEnumRetime_Factory *)operator new();
  OZChannelEnumRetime_Factory::OZChannelEnumRetime_Factory(v0);
  OZChannelEnumRetime_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F0D718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelEnumRetime_Factory::OZChannelEnumRetime_Factory(OZChannelEnumRetime_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555760;
  v4 = xmmword_1B3560B00;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65B55B0;
  *((_QWORD *)this + 16) = &unk_1E65B5680;
}

void sub_1B2F0D7B8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannel *OZChannelEnumRetime_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannel *v6;

  v6 = (OZChannel *)operator new();
  OZChannelEnum::OZChannelEnum(v6, this, a2, a3, 0, 0);
  v6->var0 = (void **)&unk_1E658E9B8;
  v6->var2 = (void **)&unk_1E658ED28;
  return v6;
}

void sub_1B2F0D848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumRetime_Factory::createCopy(OZChannelEnumRetime_Factory *this, OZFactoryBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E658E9B8;
  *((_QWORD *)v3 + 2) = &unk_1E658ED28;
  return v3;
}

void sub_1B2F0D8EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

OZChannelEnum *OZChannelEnumRetime_Factory::createChannelCopy(OZChannelEnumRetime_Factory *this, OZChannelBase *a2)
{
  OZChannelEnum *v3;
  const OZChannelEnum *v4;

  v3 = (OZChannelEnum *)operator new();
  OZChannelEnum::OZChannelEnum(v3, v4, 0);
  *(_QWORD *)v3 = &unk_1E658E9B8;
  *((_QWORD *)v3 + 2) = &unk_1E658ED28;
  return v3;
}

void sub_1B2F0D990(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void OZImageGenerator::OZImageGenerator(OZImageGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v6;
  OZChannelFolder *v7;
  PCString v8;

  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *(_QWORD *)v6 = &off_1E65B56D8;
  *(_QWORD *)(v6 + 16) = &unk_1E65B5FF0;
  *(_QWORD *)(v6 + 48) = &unk_1E65B6248;
  *(_QWORD *)(v6 + 6528) = &unk_1E65B62A0;
  v7 = (OZChannelFolder *)(v6 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 18776), a3, (OZChannelFolder *)(v6 + 448), 1u, 0, 0);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Generator Width"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 18904), &v8, v7, 0x12Cu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Generator Height"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19056), &v8, v7, 0x12Du, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Generator Pixel Aspect Ratio"));
  OZChannelAspectRatio::OZChannelAspectRatio((OZChannelAspectRatio *)((char *)this + 19208), &v8, v7, 0x12Eu, 0, 0, 0);
  PCString::~PCString(&v8);
  *(_OWORD *)((char *)this + 19368) = 0u;
  *(_QWORD *)((char *)this + 18396) = 0x100000002;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19208), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 19208));
  OZChannel::setMin((OZChannel *)((char *)this + 18904), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 18904), 1.0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18904), 0x100000000, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 19056), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 19056), 1.0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19056), 0x100000000, 0);
  *((_BYTE *)this + 19360) = 0;
}

void sub_1B2F0DBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZElement *v10;
  OZChannelFolder *v11;
  OZChannel *v12;
  OZChannel *v13;

  PCString::~PCString(&a10);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZElement::~OZElement(v10);
  _Unwind_Resume(a1);
}

void OZImageGenerator::OZImageGenerator(OZImageGenerator *this, const OZImageGenerator *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *(_QWORD *)v5 = &off_1E65B56D8;
  *(_QWORD *)(v5 + 16) = &unk_1E65B5FF0;
  *(_QWORD *)(v5 + 48) = &unk_1E65B6248;
  *(_QWORD *)(v5 + 6528) = &unk_1E65B62A0;
  v6 = (OZChannelFolder *)(v5 + 18776);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 18776), (const OZChannelFolder *)((char *)a2 + 18776), (OZChannelFolder *)(v5 + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 18904), (const OZChannelBase *)((char *)a2 + 18904), v6);
  *((_QWORD *)this + 2363) = &off_1E6551AF8;
  *((_QWORD *)this + 2365) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19056), (const OZChannelBase *)((char *)a2 + 19056), v6);
  *((_QWORD *)this + 2382) = &off_1E6551AF8;
  *((_QWORD *)this + 2384) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19208), (const OZChannelBase *)((char *)a2 + 19208), v6);
  *((_QWORD *)this + 2401) = &off_1E6552668;
  *((_BYTE *)this + 19360) = *((_BYTE *)a2 + 19360);
  *((_QWORD *)this + 2403) = &unk_1E65529C8;
  *(_OWORD *)((char *)this + 19368) = 0u;
}

void sub_1B2F0DD5C(_Unwind_Exception *a1)
{
  OZElement *v1;
  OZChannelFolder *v2;
  OZChannel *v3;
  OZChannel *v4;

  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZElement::~OZElement(v1);
  _Unwind_Resume(a1);
}

void OZImageGenerator::~OZImageGenerator(OZImageGenerator *this)
{
  *(_QWORD *)this = &off_1E65B56D8;
  *((_QWORD *)this + 2) = &unk_1E65B5FF0;
  *((_QWORD *)this + 6) = &unk_1E65B6248;
  *((_QWORD *)this + 816) = &unk_1E65B62A0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 19368);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19208));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19056));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 18904));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18776));
  OZElement::~OZElement((OZElement *)this);
}

{
  OZImageGenerator::~OZImageGenerator(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZImageGenerator::~OZImageGenerator(OZImageGenerator *this)
{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 16));
}

{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 48));
}

{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 6528));
}

{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZImageGenerator::~OZImageGenerator((OZImageGenerator *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZImageGenerator::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZElement::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 18904, (uint64_t)v4 + 18904);
  return OZChannelBase::operator=(a1 + 19056, (uint64_t)v5 + 19056);
}

uint64_t OZImageGenerator::eval(OZImageGenerator *this, OZRenderParams *a2)
{
  return 0;
}

void OZImageGenerator::getPixelAspectRatio(OZImageGenerator *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19208), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t OZImageGenerator::hasDescendants(OZImageGenerator *this)
{
  return 0;
}

uint64_t OZImageGenerator::numberOfDescendants(OZImageGenerator *this)
{
  return 0;
}

void OZImageGenerator::setName(OZImageGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18776), a2, 0);
  OZObjectManipulator::setName((OZImageGenerator *)((char *)this + 16), a2, a3);
}

void `non-virtual thunk to'OZImageGenerator::setName(OZImageGenerator *this, const PCString *a2, int a3)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 18760), a2, 0);
  OZObjectManipulator::setName(this, a2, a3);
}

__n128 OZImageGenerator::getNaturalDuration@<Q0>(OZImageGenerator *this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v4;
  __n128 result;

  if ((*(uint64_t (**)(OZImageGenerator *))(*(_QWORD *)this + 272))(this))
    v4 = (__n128 *)((*(uint64_t (**)(OZImageGenerator *))(*(_QWORD *)this + 272))(this) + 1376);
  else
    v4 = (__n128 *)MEMORY[0x1E0CA2E68];
  result = *v4;
  *a2 = *v4;
  a2[1].n128_u64[0] = v4[1].n128_u64[0];
  return result;
}

__n128 `non-virtual thunk to'OZImageGenerator::getNaturalDuration@<Q0>(OZImageGenerator *this@<X0>, __n128 *a2@<X8>)
{
  char *v3;
  __n128 *v4;
  __n128 result;

  v3 = (char *)this - 16;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this - 2) + 272))((char *)this - 16))
    v4 = (__n128 *)((*(uint64_t (**)(char *))(*(_QWORD *)v3 + 272))(v3) + 1376);
  else
    v4 = (__n128 *)MEMORY[0x1E0CA2E68];
  result = *v4;
  *a2 = *v4;
  a2[1].n128_u64[0] = v4[1].n128_u64[0];
  return result;
}

uint64_t OZImageGenerator::getNaturalDurationFlags(OZImageGenerator *this)
{
  return 6;
}

uint64_t `non-virtual thunk to'OZImageGenerator::getNaturalDurationFlags(OZImageGenerator *this)
{
  return 6;
}

void OZImageGenerator::getOriginalBounds(uint64_t a1, double *a2, CMTime *a3)
{
  double v6;
  double v7;
  double v8;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 18904), a3, 0.0);
  v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 19056), a3, 0.0);
  *a2 = v7 * -0.5;
  a2[1] = v8 * -0.5;
  a2[2] = v7;
  a2[3] = v8;
}

OZChannelInfo *OZImageGenerator::didAddToScene(OZImageGenerator *this, CMTimeEpoch *a2)
{
  CMTime *v4;
  OZPreferenceManager *v5;
  OZPreferenceManager *v6;
  OZPreferenceManager *UseProjectDurationForStills;
  CMTimeEpoch epoch;
  double v9;
  double v10;
  double v11;
  float v12;
  double v13;
  float v14;
  float v15;
  __int128 v17;
  uint64_t v18;
  CMTime v19;
  double v20;
  CGColorSpace *v21;
  PCString v22;
  CMTime v23;
  CMTime time2;
  CMTime time1;

  v4 = (CMTime *)MEMORY[0x1E0CA2E68];
  v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  OZTransformNode::didAddToScene((OZTransformNode *)this, (OZScene *)a2);
  if (a2)
  {
    v5 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v17, (const OZSceneSettings *)(a2 + 42));
    if (*(_BYTE *)(theApp + 80)
      || (v6 = (OZPreferenceManager *)OZPreferenceManager::Instance(v5),
          UseProjectDurationForStills = (OZPreferenceManager *)OZPreferenceManager::getUseProjectDurationForStills(v6),
          (_DWORD)UseProjectDurationForStills))
    {
      *(_OWORD *)&v23.value = *((_OWORD *)a2 + 86);
      epoch = a2[174];
    }
    else
    {
      OZPreferenceManager::Instance(UseProjectDurationForStills);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(a2 + 42), (__n128 *)&time2);
      OZPreferenceManager::getDefaultStillDuration(&time2, (uint64_t)&time1);
      *(_OWORD *)&v23.value = *(_OWORD *)&time1.value;
      epoch = time1.epoch;
    }
    v23.epoch = epoch;
    v9 = (float)SDWORD2(v17);
    v10 = (float)SHIDWORD(v17);
    v11 = v20;
    *(_QWORD *)&v17 = &off_1E658F368;
    PCString::~PCString(&v22);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v21);
    v12 = v11;
  }
  else
  {
    v12 = 1.0;
    v10 = 486.0;
    v9 = 720.0;
  }
  v17 = *((_OWORD *)this + 13);
  v18 = *((_QWORD *)this + 28);
  v19 = *(CMTime *)((char *)this + 232);
  if (!*((_BYTE *)this + 19360)
    || (OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19208), MEMORY[0x1E0CA2E68], 0.0), v13 == 0.0))
  {
    v14 = v9;
    v15 = v10;
    OZImageGenerator::initializeGeneratorBounds(this, v14, v15, v12);
    v19 = v23;
    OZChannelObjectRootBase::setTimeExtent((OZImageGenerator *)((char *)this + 56), (const PCTimeRange *)&v17, 0);
  }
  time2 = v19;
  time1 = *v4;
  if (!CMTimeCompare(&time1, &time2))
  {
    v19 = v23;
    OZChannelObjectRootBase::setTimeExtent((OZImageGenerator *)((char *)this + 56), (const PCTimeRange *)&v17, 0);
  }
  OZChannel::setSliderMax((OZChannel *)((char *)this + 18904), v9);
  return OZChannel::setSliderMax((OZChannel *)((char *)this + 19056), v10);
}

void sub_1B2F0E380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CGColorSpace *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,PCString a32)
{
  PCString::~PCString(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a25);
  _Unwind_Resume(a1);
}

void OZImageGenerator::initializeGeneratorBounds(OZImageGenerator *this, float a2, float a3, float a4)
{
  OZChannelBase *v7;

  v7 = (OZChannelBase *)((char *)this + 18904);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 18904), a2);
  OZChannelBase::reset(v7, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 19056), a3);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 19056), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 19208), a4);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 19208), 0);
  *((_BYTE *)this + 19360) = 1;
}

uint64_t OZImageGenerator::setTimeOffsetAndDuration(OZImageGenerator *this, CMTime *a2, CMTime *a3)
{
  uint64_t v5;
  uint64_t v6;
  CMTime v8;
  CMTime time1;
  CMTime v10;
  CGColorSpace *v11;
  PCString v12;
  CMTime v13;
  CMTime time2;

  v13 = *a3;
  time1 = *a3;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) <= 0
    && (*(uint64_t (**)(OZImageGenerator *))(*(_QWORD *)this + 272))(this))
  {
    v5 = (*(uint64_t (**)(OZImageGenerator *))(*(_QWORD *)this + 272))(this);
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)&time1, (const OZSceneSettings *)(v5 + 336));
    v6 = (*(uint64_t (**)(OZImageGenerator *))(*(_QWORD *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v8);
    operator*(&v8, time1.epoch, &time2);
    v13 = time2;
    time1.value = (CMTimeValue)&off_1E658F368;
    PCString::~PCString(&v12);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  }
  time1 = *a2;
  v10 = v13;
  return OZChannelObjectRootBase::setTimeExtent((OZImageGenerator *)((char *)this + 56), (const PCTimeRange *)&time1, 0);
}

void sub_1B2F0E59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 + 184));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 128));
  _Unwind_Resume(a1);
}

uint64_t OZImageGenerator::parseBegin(OZImageGenerator *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 19360) = 1;
  return OZElement::parseBegin((OZElement *)this, a2);
}

uint64_t `non-virtual thunk to'OZImageGenerator::parseBegin(OZImageGenerator *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 19312) = 1;
  return OZElement::parseBegin((OZElement *)((char *)this - 48), a2);
}

uint64_t OZImageGenerator::variesOverTime(OZImageGenerator *this)
{
  return 0;
}

PCSharedCount *OZImageGenerator::makeRenderImageSource@<X0>(OZImageGenerator *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZLiGenerator *v7;

  v7 = (OZLiGenerator *)operator new();
  OZLiGenerator::OZLiGenerator(v7, this, a2);
  a3->var0 = (PC_Sp_counted_base *)v7;
  return PCSharedCount::PCSharedCount(a3 + 1, (OZLiGenerator *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
}

void sub_1B2F0E660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4049CE406CLL);
  _Unwind_Resume(a1);
}

PCSharedCount *`non-virtual thunk to'OZImageGenerator::makeRenderImageSource@<X0>(OZImageGenerator *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  return OZImageGenerator::makeRenderImageSource((OZImageGenerator *)((char *)this - 6528), a2, a3);
}

void OZImageGenerator::pixelTransformSupport(OZImageGenerator *this, const LiRenderParameters *a2, OZRenderParams *a3)
{
  PCException *exception;
  PCString v4;
  PCString v5;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v5, "subclass must implement");
  PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageGenerator.mm");
  PCException::PCException(exception, &v5, &v4, 226);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2F0E71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void OZImageGenerator::getHelium(OZImageGenerator *this, LiAgent *a2, const OZRenderParams *a3)
{
  PCException *exception;
  PCString v4;
  PCString v5;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v5, "subclass must implement");
  PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageGenerator.mm");
  PCException::PCException(exception, &v5, &v4, 231);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2F0E7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageGenerator::filteredEdges(OZImageGenerator *this)
{
  return 0;
}

void OZNULLBehavior::OZNULLBehavior(OZNULLBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  _QWORD *v6;
  PCString v7;

  OZBehavior::OZBehavior(this, a2, a3, a4);
  *v5 = &off_1E65B6390;
  v5[2] = &unk_1E65B6610;
  v6 = v5 + 2;
  v5[6] = &unk_1E65B6868;
  PCURL::PCURL((PCURL *)&v7, CFSTR("NULL Behavior Missing"));
  PCString::append(&v7, a3);
  (*(void (**)(_QWORD *, PCString *, _QWORD))(*v6 + 120))(v6, &v7, 0);
  PCString::~PCString(&v7);
}

void sub_1B2F0E8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZBehavior *v10;

  OZBehavior::~OZBehavior(v10);
  _Unwind_Resume(a1);
}

void OZNULLBehavior::OZNULLBehavior(OZNULLBehavior *this, const OZNULLBehavior *a2, char a3)
{
  _QWORD *v3;

  OZBehavior::OZBehavior(this, a2, a3);
  *v3 = &off_1E65B6390;
  v3[2] = &unk_1E65B6610;
  v3[6] = &unk_1E65B6868;
}

void `non-virtual thunk to'OZNULLBehavior::~OZNULLBehavior(OZNULLBehavior *this)
{
  OZBehavior::~OZBehavior((OZNULLBehavior *)((char *)this - 16));
}

{
  OZBehavior::~OZBehavior((OZNULLBehavior *)((char *)this - 48));
}

{
  OZBehavior::~OZBehavior((OZNULLBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZBehavior::~OZBehavior((OZNULLBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

void OZNULLBehavior::~OZNULLBehavior(OZNULLBehavior *this)
{
  OZBehavior::~OZBehavior(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelBehaviorRoot_Factory::getInstance(OZChannelBehaviorRoot_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBehaviorRoot_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBehaviorRoot_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBehaviorRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBehaviorRoot_Factory::_instance;
}

void OZChannelBehaviorRoot::OZChannelBehaviorRoot(OZChannelBehaviorRoot *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelBehaviorRoot_Factory::getInstance(this);
  OZChannelObjectRoot::OZChannelObjectRoot(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65B68D8;
  *((_QWORD *)this + 2) = &unk_1E65B6C70;
  *((_QWORD *)this + 32) = 0;
}

void OZChannelBehaviorRoot::OZChannelBehaviorRoot(OZChannelBehaviorRoot *this, const OZTimeMarkerSet **a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelObjectRoot::OZChannelObjectRoot(this, a2, a3);
  *v3 = &off_1E65B68D8;
  v3[2] = &unk_1E65B6C70;
  v3[32] = 0;
}

void `non-virtual thunk to'OZChannelBehaviorRoot::~OZChannelBehaviorRoot(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
}

{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
  JUMPOUT(0x1B5E29170);
}

void OZChannelBehaviorRoot::~OZChannelBehaviorRoot(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelBehaviorRoot::operator=(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 232))(a1, a2, 0);
}

__CFString *OZChannelBehaviorRoot::reset(OZChannelBase *this, uint64_t a2)
{
  __CFString *var0;
  __CFString *result;

  var0 = this[2].var4.var0;
  if (var0)
    (*((void (**)(__CFString *))var0->isa + 59))(var0);
  OZChannelBase::reset(this, a2);
  result = this[2].var4.var0;
  if (result)
    return (__CFString *)(*((uint64_t (**)(__CFString *))result->isa + 58))(result);
  return result;
}

OZChannelObjectRoot *OZChannelBehaviorRoot::clone(const OZTimeMarkerSet **this)
{
  OZChannelObjectRoot *v2;

  v2 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v2, this, 0);
  *(_QWORD *)v2 = &off_1E65B68D8;
  *((_QWORD *)v2 + 2) = &unk_1E65B6C70;
  *((_QWORD *)v2 + 32) = 0;
  return v2;
}

void sub_1B2F0EE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelBehaviorRoot::compare(OZChannelBehaviorRoot *this, const OZChannelBase *lpsrc)
{
  const OZChannelBase *result;

  if (!lpsrc)
    return 0;
  if (result)
    return (const OZChannelBase *)((__CFString *)*((_QWORD *)this + 32) == result[2].var4.var0
                                && (OZChannelFolder::compare((OZChannelFolder *)this, result) & 1) != 0);
  return result;
}

void std::__call_once_param<std::tuple<OZChannelBehaviorRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBehaviorRoot_Factory *v0;

  v0 = (OZChannelBehaviorRoot_Factory *)operator new();
  OZChannelBehaviorRoot_Factory::OZChannelBehaviorRoot_Factory(v0);
  OZChannelBehaviorRoot_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F0EF00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelBehaviorRoot_Factory::OZChannelBehaviorRoot_Factory(OZChannelBehaviorRoot_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E9A0;
  v4 = xmmword_1B3560B60;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65B6CE0;
  *((_QWORD *)this + 16) = &unk_1E65B6DB0;
}

void sub_1B2F0EFA0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelBehaviorRoot_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelObjectRoot *v6;

  v6 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v6, this, a2, a3);
  *(_QWORD *)v6 = &off_1E65B68D8;
  *((_QWORD *)v6 + 2) = &unk_1E65B6C70;
  *((_QWORD *)v6 + 32) = 0;
  return v6;
}

void sub_1B2F0F028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelBehaviorRoot_Factory::createCopy(OZChannelBehaviorRoot_Factory *this, OZFactoryBase *a2)
{
  OZChannelObjectRoot *v3;
  const OZTimeMarkerSet **v4;

  v3 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65B68D8;
  *((_QWORD *)v3 + 2) = &unk_1E65B6C70;
  *((_QWORD *)v3 + 32) = 0;
  return v3;
}

void sub_1B2F0F0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

OZChannelObjectRoot *OZChannelBehaviorRoot_Factory::createChannelCopy(OZChannelBehaviorRoot_Factory *this, OZChannelBase *a2)
{
  OZChannelObjectRoot *v3;
  const OZTimeMarkerSet **v4;

  v3 = (OZChannelObjectRoot *)operator new();
  OZChannelObjectRoot::OZChannelObjectRoot(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65B68D8;
  *((_QWORD *)v3 + 2) = &unk_1E65B6C70;
  *((_QWORD *)v3 + 32) = 0;
  return v3;
}

void sub_1B2F0F170(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

void OZSingleChanCurveNode::OZSingleChanCurveNode(OZSingleChanCurveNode *this, OZSingleChanBehaviorIF *a2, OZChannel *a3)
{
  OZBehavior *v6;

  v6 = (OZBehavior *)(*(uint64_t (**)(OZSingleChanBehaviorIF *))(*(_QWORD *)a2 + 72))(a2);
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, v6, a3);
  *(_QWORD *)this = &off_1E65B6E08;
  *((_QWORD *)this + 4) = a2;
  *((_DWORD *)this + 10) = a3->var3;
}

void OZSingleChanCurveNode::OZSingleChanCurveNode(OZSingleChanCurveNode *this, OZSingleChanBehaviorIF *a2, OZChannel *a3, int a4)
{
  OZBehavior *v8;

  v8 = (OZBehavior *)(*(uint64_t (**)(OZSingleChanBehaviorIF *))(*(_QWORD *)a2 + 72))(a2);
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, v8, a3);
  *(_QWORD *)this = &off_1E65B6E08;
  *((_QWORD *)this + 4) = a2;
  *((_DWORD *)this + 10) = a4;
}

void OZSingleChanCurveNode::~OZSingleChanCurveNode(OZSingleChanCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSingleChanCurveNode::solveNode(OZSingleChanCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, const CMTime *, double, double))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), *((unsigned int *)this + 10), a2, a3, a4);
  return result;
}

uint64_t OZSingleChanCurveNode::solveNode(OZSingleChanCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, OZCurveNodeParam *))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), *((unsigned int *)this + 10), a2);
  return result;
}

uint64_t OZSingleChanCurveNode::getNeededRange(OZSingleChanCurveNode *this, OZCurveNodeParam *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, OZCurveNodeParam *))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4), *((unsigned int *)this + 10), a2);
}

uint64_t OZSingleChanCurveNode::getNeededTime(OZSingleChanCurveNode *this, const CMTime *a2)
{
  return (*(uint64_t (**)(_QWORD, const CMTime *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
}

uint64_t OZSingleChanCurveNode::isPointToPoint(OZSingleChanCurveNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 48))(*((_QWORD *)this + 4));
}

uint64_t OZSingleChanCurveNode::isRemappingTime(OZSingleChanCurveNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
}

uint64_t OZSingleChanCurveNode::cloneNode(OZSingleChanCurveNode *this)
{
  uint64_t v2;

  v2 = operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode((OZBehaviorCurveNode *)v2, this);
  *(_QWORD *)v2 = &off_1E65B6E08;
  *(_QWORD *)(v2 + 32) = *((_QWORD *)this + 4);
  *(_DWORD *)(v2 + 40) = *((_DWORD *)this + 10);
  return v2;
}

void sub_1B2F0F3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C404232B382);
  _Unwind_Resume(a1);
}

uint64_t OZSingleChanCurveNode::compare(OZSingleChanCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

void OZFontFace::OZFontFace(OZFontFace *this, const PCString *a2, const PCString *a3, OZFontFamily *a4)
{
  PCString *v7;

  *(_QWORD *)this = &off_1E65B6F00;
  v7 = (PCString *)((char *)this + 16);
  PCString::PCString((PCString *)this + 1, a2);
  PCString::PCString(v7, a3);
  *((_QWORD *)this + 3) = a4;
}

void sub_1B2F0F4B8(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZFontFace::~OZFontFace(PCString *this)
{
  PCString *v1;

  this->var0 = (__CFString *)&off_1E65B6F00;
  v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
}

{
  PCString *v1;

  this->var0 = (__CFString *)&off_1E65B6F00;
  v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
  JUMPOUT(0x1B5E29170);
}

void OZCoreTextTypeface::OZCoreTextTypeface(OZCoreTextTypeface *this, const PCString *a2, const PCString *a3, int a4, OZFontFamily *a5)
{
  uint64_t v6;

  OZFontFace::OZFontFace(this, a2, a3, a5);
  *(_QWORD *)v6 = &off_1E65B6F28;
  *(_DWORD *)(v6 + 32) = a4;
}

void OZCoreTextTypeface::~OZCoreTextTypeface(PCString *this)
{
  PCString *v1;

  this->var0 = (__CFString *)&off_1E65B6F00;
  v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
}

{
  PCString *v1;

  this->var0 = (__CFString *)&off_1E65B6F00;
  v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
}

{
  PCString *v1;

  this->var0 = (__CFString *)&off_1E65B6F00;
  v1 = this + 1;
  PCString::~PCString(this + 2);
  PCString::~PCString(v1);
  JUMPOUT(0x1B5E29170);
}

void OZChanTransformNodeRef::OZChanTransformNodeRef(OZChanTransformNodeRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  _QWORD *v5;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5);
  *v5 = &off_1E65B6F78;
  v5[2] = &unk_1E65B72F8;
}

void OZChanTransformNodeRef::OZChanTransformNodeRef(OZChanTransformNodeRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *v3 = &off_1E65B6F78;
  v3[2] = &unk_1E65B72F8;
}

void `non-virtual thunk to'OZChanTransformNodeRef::~OZChanTransformNodeRef(OZChanTransformNodeRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanTransformNodeRef *)((char *)this - 16));
}

{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanTransformNodeRef *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChanTransformNodeRef::~OZChanTransformNodeRef(OZChanTransformNodeRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);
  JUMPOUT(0x1B5E29170);
}

OZChanSceneNodeRef *OZChanTransformNodeRef::clone(OZChanTransformNodeRef *this)
{
  OZChanSceneNodeRef *v2;

  v2 = (OZChanSceneNodeRef *)operator new();
  OZChanSceneNodeRef::OZChanSceneNodeRef(v2, this, 0);
  *(_QWORD *)v2 = &off_1E65B6F78;
  *((_QWORD *)v2 + 2) = &unk_1E65B72F8;
  return v2;
}

void sub_1B2F0F764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanTransformNodeRef::getTransformNode(OZChannelBase *this)
{
  const void *result;

  result = OZChanSceneNodeRef::getNode(this);
  if (result)
  return result;
}

uint64_t OZChanTransformNodeRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *lpsrc)
{
  if (lpsrc
  {
    return OZChanSceneNodeRef::canReferenceObject(this, lpsrc);
  }
  else
  {
    return 0;
  }
}

void OZAlignSimBehavior::OZAlignSimBehavior(OZAlignSimBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65B7368;
  v5[2] = &unk_1E65B7660;
  v5[6] = &unk_1E65B78B8;
  v5[42] = &unk_1E65B7910;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Align Sim Behavior Rotation Axis Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Align Sim Behavior Rotation Axis"));
  OZChannelEnum::OZChannelEnum((OZAlignSimBehavior *)((char *)this + 504), 2u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Align Sim Behavior Axis Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Align Sim Behavior Axis"));
  OZChannelEnum::OZChannelEnum((OZAlignSimBehavior *)((char *)this + 760), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Align Sim Behavior Invert Axis"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1016), &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Align Sim Behavior Spring Coefficient"));
  OZChannelDouble::OZChannelDouble((OZAlignSimBehavior *)((char *)this + 1168), 100.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Align Sim Behavior Drag Coefficient"));
  OZChannelDouble::OZChannelDouble((OZAlignSimBehavior *)((char *)this + 1320), 15.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1168), 500.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1320), 40.0);
}

void sub_1B2F0FA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZReflexiveBehavior *v12;
  OZChannelEnum *v13;
  OZChannelEnum *v14;
  OZChannelBool *v15;
  OZChannel *v16;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZReflexiveBehavior::~OZReflexiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior::OZAlignSimBehavior(OZAlignSimBehavior *this, OZAlignSimBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65B7368;
  *(_QWORD *)(v5 + 16) = &unk_1E65B7660;
  *(_QWORD *)(v5 + 48) = &unk_1E65B78B8;
  *(_QWORD *)(v5 + 336) = &unk_1E65B7910;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 504), (OZAlignSimBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((OZAlignSimBehavior *)((char *)this + 760), (OZAlignSimBehavior *)((char *)a2 + 760), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1016), (const OZChannelBase *)((char *)a2 + 1016), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1168), (const OZChannelBase *)((char *)a2 + 1168), v6);
  *((_QWORD *)this + 146) = &off_1E6551358;
  *((_QWORD *)this + 148) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1320), (const OZChannelBase *)((char *)a2 + 1320), v6);
  *((_QWORD *)this + 165) = &off_1E6551358;
  *((_QWORD *)this + 167) = &unk_1E65516B8;
}

void sub_1B2F0FC3C(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChannelEnum *v2;
  OZChannelEnum *v3;
  OZChannelBool *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannelBool::~OZChannelBool(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void OZAlignSimBehavior::~OZAlignSimBehavior(OZAlignSimBehavior *this)
{
  *(_QWORD *)this = &off_1E65B7368;
  *((_QWORD *)this + 2) = &unk_1E65B7660;
  *((_QWORD *)this + 6) = &unk_1E65B78B8;
  *((_QWORD *)this + 42) = &unk_1E65B7910;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1320));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1168));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1016));
  OZChannelEnum::~OZChannelEnum((OZAlignSimBehavior *)((char *)this + 760));
  OZChannelEnum::~OZChannelEnum((OZAlignSimBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZAlignSimBehavior::~OZAlignSimBehavior(OZAlignSimBehavior *this)
{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 16));
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 48));
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 336));
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAlignSimBehavior::~OZAlignSimBehavior((OZAlignSimBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZAlignSimBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 760, (uint64_t)v5 + 760);
  OZChannelBase::operator=(a1 + 1016, (uint64_t)v5 + 1016);
  OZChannelBase::operator=(a1 + 1168, (uint64_t)v5 + 1168);
  return OZChannelBase::operator=(a1 + 1320, (uint64_t)v5 + 1320);
}

void OZAlignSimBehavior::accumForces(OZAlignSimBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  signed int ValueAsInt;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  int v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  int8x16_t v29;
  int8x16_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v49;
  double v50;
  double v51;
  long double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  _BYTE v64[72];
  CMTime v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[9];
  CMTime v72;
  CMTime v73;
  CMTime v74;

  v74 = *(CMTime *)((char *)a2 + 176);
  v73 = v74;
  if ((*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v73, 0, 1, 1))
  {
    v5 = *((double *)a2 + 7);
    v6 = *((double *)a2 + 8);
    v7 = *((double *)a2 + 9);
    v72 = v74;
    v8 = 0.0;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v72, 0.0);
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    if (ValueAsInt <= 2)
    {
      v8 = dbl_1B3560C18[ValueAsInt];
      v10 = dbl_1B3560C30[ValueAsInt];
      v11 = dbl_1B3560C48[ValueAsInt];
      v12 = dbl_1B3560C60[ValueAsInt];
      v13 = dbl_1B3560C78[ValueAsInt];
      v14 = dbl_1B3560C90[ValueAsInt];
    }
    v15 = v5 * v14;
    v16 = v6 * v13;
    v17 = v7 * v12;
    v18 = v17 * v17 + v16 * v16 + v15 * v15;
    if (v18 <= -0.0000001 || v18 >= 0.0000001)
    {
      v19 = sqrt(v18);
      if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
      {
        v15 = v15 / v19;
        v16 = v16 / v19;
        v17 = v17 / v19;
      }
      v20 = 0.0;
      v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v74, 0.0);
      v22 = -v15;
      v23 = -v16;
      v24 = -v17;
      if (!v21)
      {
        v22 = v15;
        v23 = v16;
        v24 = v17;
      }
      *(double *)v71 = v22;
      *(double *)&v71[1] = v10 * v24 - v8 * v23;
      *(double *)&v71[6] = v24;
      *(double *)&v71[7] = v11 * v23 - v10 * v22;
      *(double *)&v71[2] = v11;
      *(double *)&v71[3] = v23;
      *(double *)&v71[4] = v8 * v22 - v11 * v24;
      *(double *)&v71[5] = v10;
      *(double *)&v71[8] = v8;
      v66 = 0x3FF0000000000000uLL;
      v67 = 0uLL;
      v68 = 0x3FF0000000000000uLL;
      v69 = 0uLL;
      v70 = 0x3FF0000000000000;
      v65 = v74;
      v25 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v65, 0.0);
      if (v25 == 2)
      {
        v66 = 0uLL;
        v67 = xmmword_1B304EED0;
        v68 = xmmword_1B304EED0;
        v69 = xmmword_1B3058A90;
      }
      else
      {
        if (v25 != 1)
        {
LABEL_16:
          *(double *)v26.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v71, (double *)&v66, (uint64_t)v64);
          v60 = 1.0;
          v61 = 0.0;
          v62 = 0.0;
          v63 = 0.0;
          PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v64, (uint64_t)&v60, v26, v27, v28, v29, v30);
          v32 = *((double *)a2 + 3);
          v31 = *((double *)a2 + 4);
          v33 = *((double *)a2 + 5);
          v34 = *((double *)a2 + 6);
          v35 = v32 * v32 + v31 * v31 + v33 * v33 + v34 * v34;
          if (v35 != 0.0)
          {
            v32 = v32 / v35;
            v31 = -v31 / v35;
            v33 = -v33 / v35;
            v34 = -v34 / v35;
          }
          v36 = v60 * v32 - (v63 * v34 + v62 * v33 + v61 * v31);
          v37 = v61 * v33 - v62 * v31;
          v38 = v62 * v34 - v63 * v33 + v60 * v31 + v61 * v32;
          v39 = v63 * v31 - v61 * v34 + v60 * v33 + v62 * v32;
          v40 = v37 + v60 * v34 + v63 * v32;
          v41 = sqrt(v36 * v36 + v38 * v38 + v39 * v39 + v40 * v40);
          v42 = 1.0;
          if (v41 == 0.0)
          {
            v44 = 0.0;
            v45 = 0.0;
            v46 = 0.0;
            v43 = 1.0;
          }
          else
          {
            v43 = v36 / v41;
            v44 = v38 / v41;
            v45 = v39 / v41;
            v46 = v40 / v41;
          }
          v47 = sqrt(v44 * v44 + v45 * v45 + v46 * v46);
          if (v47 >= 0.000000100000001 || v47 <= -0.000000100000001)
            v42 = v47;
          v49 = v44 / v42;
          v50 = v45 / v42;
          v51 = v46 / v42;
          v52 = acos(v43);
          v53 = v52 + v52;
          if (v53 > 3.14159265)
            v53 = v53 + -6.28318531;
          if (v53 >= -3.14159265)
            v54 = v53;
          else
            v54 = v53 + 6.28318531;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), &v74, 0.0);
          v56 = v55;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), &v74, 0.0);
          v58 = *((double *)a2 + 12);
          v59 = v50 * (v56 * v54) - v57 * *((double *)a2 + 11) + *((double *)a2 + 20);
          *((double *)a2 + 19) = *((double *)a2 + 19) + v49 * (v56 * v54) - v57 * *((double *)a2 + 10);
          *((double *)a2 + 20) = v59;
          *((double *)a2 + 21) = v51 * (v56 * v54) - v57 * v58 + *((double *)a2 + 21);
          return;
        }
        v69 = 0uLL;
        v66 = xmmword_1B304EEE0;
        v67 = xmmword_1B305A270;
        v68 = 0uLL;
        v20 = 1.0;
      }
      v70 = *(_QWORD *)&v20;
      goto LABEL_16;
    }
  }
}

double PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7)
{
  double v7;
  float64x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;

  a3.i64[0] = *(_QWORD *)a1;
  a4.i64[0] = *(_QWORD *)(a1 + 32);
  v7 = *(double *)(a1 + 64);
  *(double *)a7.i64 = *(double *)a1 + 1.0;
  *(double *)a2 = sqrt(fmax(*(double *)a7.i64 + *(double *)a4.i64 + v7, 0.0)) * 0.5;
  *(double *)a7.i64 = sqrt(fmax(*(double *)a7.i64 - *(double *)a4.i64 - v7, 0.0)) * 0.5;
  *(double *)a3.i64 = 1.0 - *(double *)a3.i64;
  *(double *)a6.i64 = sqrt(fmax(*(double *)a3.i64 + *(double *)a4.i64 - v7, 0.0)) * 0.5;
  *(double *)a3.i64 = sqrt(fmax(*(double *)a3.i64 - *(double *)a4.i64 + v7, 0.0)) * 0.5;
  *(double *)a4.i64 = *(double *)(a1 + 56) - *(double *)(a1 + 40);
  v8.f64[0] = NAN;
  v8.f64[1] = NAN;
  v9 = (int8x16_t)vnegq_f64(v8);
  v10 = vbslq_s8(v9, a7, a4);
  *(_QWORD *)(a2 + 8) = v10.i64[0];
  *(double *)v10.i64 = *(double *)(a1 + 16) - *(double *)(a1 + 48);
  v11 = vbslq_s8(v9, a6, v10);
  *(_QWORD *)(a2 + 16) = v11.i64[0];
  *(double *)v11.i64 = *(double *)(a1 + 24) - *(double *)(a1 + 8);
  a3.i64[0] = vbslq_s8(v9, a3, v11).u64[0];
  *(_QWORD *)(a2 + 24) = a3.i64[0];
  return *(double *)a3.i64;
}

void OZAlignSimBehavior::accumForces(OZAlignSimBehavior *this, OZSimStateArray *a2)
{
  unsigned int ValueAsInt;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int8x16_t v23;
  int8x16_t v24;
  double v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v45;
  double v46;
  double v47;
  long double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  _BYTE v62[72];
  _QWORD v63[9];
  CMTime v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  CMTime v70;
  CMTime v71;
  CMTime v72;

  v72 = *(CMTime *)((_BYTE *)a2 + 1);
  v71 = v72;
  if (!(*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 296))(this, &v71, 0, 1, 1))return;
  v70 = v72;
  v57 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v70, 0.0);
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  if (ValueAsInt <= 2)
  {
    v57 = dbl_1B3560C18[ValueAsInt];
    v5 = dbl_1B3560C30[ValueAsInt];
    v6 = dbl_1B3560C48[ValueAsInt];
    v7 = dbl_1B3560C60[ValueAsInt];
    v8 = dbl_1B3560C78[ValueAsInt];
    v9 = dbl_1B3560C90[ValueAsInt];
  }
  v65 = 0x3FF0000000000000uLL;
  v66 = 0uLL;
  v67 = 0x3FF0000000000000uLL;
  v68 = 0uLL;
  v69 = 0x3FF0000000000000;
  v64 = v72;
  v10 = 0.0;
  v11 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v64, 0.0);
  if (v11 == 2)
  {
    v65 = 0uLL;
    v66 = xmmword_1B304EED0;
    v67 = xmmword_1B304EED0;
    v68 = xmmword_1B3058A90;
  }
  else
  {
    if (v11 != 1)
      goto LABEL_9;
    v68 = 0uLL;
    v65 = xmmword_1B304EEE0;
    v66 = xmmword_1B305A270;
    v67 = 0uLL;
    v10 = 1.0;
  }
  v69 = *(_QWORD *)&v10;
LABEL_9:
  v12 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v72, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1168), &v72, 0.0);
  v56 = v13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1320), &v72, 0.0);
  v16 = *(double **)a2;
  v15 = (double *)*((_QWORD *)a2 + 1);
  if (*(double **)a2 != v15)
  {
    v17 = v14;
    v54 = v8;
    v55 = v7;
    v53 = v9;
    do
    {
      v18 = v9 * v16[7];
      v19 = v8 * v16[8];
      v20 = v7 * v16[9];
      v21 = v18 * v18 + v19 * v19 + v20 * v20;
      if (v21 <= -0.0000001 || v21 >= 0.0000001)
      {
        v22 = sqrt(v21);
        if (v22 <= -0.000000100000001 || v22 >= 0.000000100000001)
        {
          v18 = v18 / v22;
          v19 = v19 / v22;
          v20 = v20 / v22;
        }
        if (v12)
        {
          v18 = -v18;
          v19 = -v19;
          v20 = -v20;
        }
        *(double *)v63 = v18;
        *(double *)&v63[1] = v5 * v20 - v57 * v19;
        *(double *)&v63[6] = v20;
        *(double *)&v63[7] = v6 * v19 - v5 * v18;
        *(double *)&v63[2] = v6;
        *(double *)&v63[3] = v19;
        *(double *)&v63[4] = v57 * v18 - v6 * v20;
        *(double *)&v63[5] = v5;
        *(double *)&v63[8] = v57;
        *(double *)v23.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v63, (double *)&v65, (uint64_t)v62);
        v58 = 1.0;
        v60 = 0.0;
        v61 = 0.0;
        v59 = 0.0;
        PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v62, (uint64_t)&v58, v23, v24, v25, v26, v27);
        v29 = v16[3];
        v28 = v16[4];
        v30 = v16[5];
        v31 = v16[6];
        v32 = v29 * v29 + v28 * v28 + v30 * v30 + v31 * v31;
        if (v32 != 0.0)
        {
          v29 = v29 / v32;
          v28 = -v28 / v32;
          v30 = -v30 / v32;
          v31 = -v31 / v32;
        }
        v33 = v58 * v29 - (v61 * v31 + v60 * v30 + v59 * v28);
        v34 = v58 * v28 + v59 * v29;
        v35 = v58 * v30 + v60 * v29;
        v36 = v58 * v31 + v61 * v29;
        v37 = v60 * v31 - v61 * v30;
        v38 = v61 * v28 - v59 * v31;
        v39 = v59 * v30 - v60 * v28;
        v40 = v37 + v34;
        v41 = v38 + v35;
        v42 = v39 + v36;
        v43 = sqrt(v40 * v40 + v41 * v41 + v42 * v42);
        if (v43 < 0.000000100000001 && v43 > -0.000000100000001)
          v43 = 1.0;
        v45 = v40 / v43;
        v46 = v41 / v43;
        v47 = v42 / v43;
        v48 = acos(v33);
        v49 = v48 + v48;
        if (v49 > 3.14159265)
          v49 = v49 + -6.28318531;
        if (v49 < -3.14159265)
          v49 = v49 + 6.28318531;
        v50 = v56 * v49;
        v51 = v17 * v16[12];
        v52 = v16[20] + v46 * v50 - v17 * v16[11];
        v16[19] = v16[19] + v45 * v50 - v17 * v16[10];
        v16[20] = v52;
        v16[21] = v47 * v50 - v51 + v16[21];
        v15 = (double *)*((_QWORD *)a2 + 1);
        v8 = v54;
        v7 = v55;
        v9 = v53;
      }
      v16 += 31;
    }
    while (v16 != v15);
  }
}

void OZAlignSimBehavior::accumInitialValues(OZAlignSimBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  unsigned int ValueAsInt;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  int v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[72];
  CMTime v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[9];
  CMTime v42;
  CMTime v43;
  CMTime v44;

  v44 = *(CMTime *)((char *)a2 + 176);
  v43 = v44;
  if ((*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v43, 0, 1, 1))
  {
    v5 = *((double *)a2 + 7);
    v6 = *((double *)a2 + 8);
    v7 = *((double *)a2 + 9);
    v42 = v44;
    v8 = 0.0;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v42, 0.0);
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    if (ValueAsInt <= 2)
    {
      v8 = dbl_1B3560C90[ValueAsInt];
      v10 = dbl_1B3560C78[ValueAsInt];
      v11 = dbl_1B3560C60[ValueAsInt];
      v12 = dbl_1B3560C48[ValueAsInt];
      v13 = dbl_1B3560C30[ValueAsInt];
      v14 = dbl_1B3560C18[ValueAsInt];
    }
    v15 = v5 * v8;
    v16 = v6 * v10;
    v17 = v7 * v11;
    v18 = v15 * v15 + v16 * v16 + v17 * v17;
    if (v18 <= -0.0000001 || v18 >= 0.0000001)
    {
      v19 = sqrt(v18);
      if (v19 <= -0.000000100000001 || v19 >= 0.000000100000001)
      {
        v15 = v15 / v19;
        v16 = v16 / v19;
        v17 = v17 / v19;
      }
      v20 = 0.0;
      v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v44, 0.0);
      v22 = -v15;
      v23 = -v16;
      v24 = -v17;
      if (!v21)
      {
        v24 = v17;
        v23 = v16;
        v22 = v15;
      }
      *(double *)v41 = v22;
      *(double *)&v41[1] = v13 * v24 - v14 * v23;
      *(double *)&v41[6] = v24;
      *(double *)&v41[7] = v12 * v23 - v13 * v22;
      *(double *)&v41[2] = v12;
      *(double *)&v41[3] = v23;
      *(double *)&v41[4] = v14 * v22 - v12 * v24;
      *(double *)&v41[5] = v13;
      *(double *)&v41[8] = v14;
      v36 = 0x3FF0000000000000uLL;
      v37 = 0uLL;
      v38 = 0x3FF0000000000000uLL;
      v39 = 0uLL;
      v40 = 0x3FF0000000000000;
      v35 = v44;
      v25 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v35, 0.0);
      if (v25 == 2)
      {
        v36 = 0uLL;
        v37 = xmmword_1B304EED0;
        v38 = xmmword_1B304EED0;
        v39 = xmmword_1B3058A90;
      }
      else
      {
        if (v25 != 1)
          goto LABEL_16;
        v39 = 0uLL;
        v36 = xmmword_1B304EEE0;
        v37 = xmmword_1B305A270;
        v38 = 0uLL;
        v20 = 1.0;
      }
      v40 = *(_QWORD *)&v20;
LABEL_16:
      *(double *)v26.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v41, (double *)&v36, (uint64_t)v34);
      v31 = 0x3FF0000000000000;
      v32 = 0uLL;
      v33 = 0;
      PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v34, (uint64_t)&v31, v26, v27, v28, v29, v30);
      if (&v31 != (uint64_t *)((char *)a2 + 24))
      {
        *((_QWORD *)a2 + 3) = v31;
        *((_OWORD *)a2 + 2) = v32;
        *((_QWORD *)a2 + 6) = v33;
      }
    }
  }
}

void OZAlignSimBehavior::accumInitialValues(OZAlignSimBehavior *this, OZSimStateArray *a2, int a3)
{
  double v6;
  unsigned int ValueAsInt;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  OZSimStateArray *v18;
  int v19;
  uint64_t v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int8x16_t v27;
  int8x16_t v28;
  double v29;
  int8x16_t v30;
  int8x16_t v31;
  __int128 v32;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[72];
  _QWORD v38[9];
  CMTime v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;

  v47 = *(CMTime *)((_BYTE *)a2 + 1);
  v46 = v47;
  if (!(*(unsigned int (**)(OZAlignSimBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 296))(this, &v46, 0, 1, 1))return;
  v45 = v47;
  v6 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 504), &v45, 0.0);
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  if (ValueAsInt <= 2)
  {
    v6 = dbl_1B3560C18[ValueAsInt];
    v8 = dbl_1B3560C30[ValueAsInt];
    v9 = dbl_1B3560C48[ValueAsInt];
    v10 = dbl_1B3560C60[ValueAsInt];
    v11 = dbl_1B3560C78[ValueAsInt];
    v12 = dbl_1B3560C90[ValueAsInt];
  }
  v40 = 0x3FF0000000000000uLL;
  v41 = 0uLL;
  v42 = 0x3FF0000000000000uLL;
  v43 = 0uLL;
  v44 = 0x3FF0000000000000;
  v39 = v47;
  v13 = 0.0;
  v14 = OZChannel::getValueAsInt((OZChannel *)this + 5, &v39, 0.0);
  if (v14 == 2)
  {
    v40 = 0uLL;
    v41 = xmmword_1B304EED0;
    v42 = xmmword_1B304EED0;
    v43 = xmmword_1B3058A90;
    goto LABEL_8;
  }
  if (v14 == 1)
  {
    v43 = 0uLL;
    v40 = xmmword_1B304EEE0;
    v41 = xmmword_1B305A270;
    v42 = 0uLL;
    v13 = 1.0;
LABEL_8:
    v44 = *(_QWORD *)&v13;
  }
  v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1016), &v47, 0.0);
  v18 = a2;
  v17 = *(_QWORD *)a2;
  v16 = *((_QWORD *)v18 + 1);
  if (v16 != v17 && a3 >= 1)
  {
    v19 = v15;
    v20 = v16 - 248;
    v21 = 1;
    do
    {
      v22 = v12 * *(double *)(v20 + 56);
      v23 = v11 * *(double *)(v20 + 64);
      v24 = v10 * *(double *)(v20 + 72);
      v25 = v22 * v22 + v23 * v23 + v24 * v24;
      if (v25 <= -0.0000001 || v25 >= 0.0000001)
      {
        v26 = sqrt(v25);
        if (v26 <= -0.000000100000001 || v26 >= 0.000000100000001)
        {
          v22 = v22 / v26;
          v23 = v23 / v26;
          v24 = v24 / v26;
        }
        if (v19)
        {
          v24 = -v24;
          v23 = -v23;
          v22 = -v22;
        }
        *(double *)v38 = v22;
        *(double *)&v38[1] = v8 * v24 - v6 * v23;
        *(double *)&v38[6] = v24;
        *(double *)&v38[7] = v9 * v23 - v8 * v22;
        *(double *)&v38[2] = v9;
        *(double *)&v38[3] = v23;
        *(double *)&v38[4] = v6 * v22 - v9 * v24;
        *(double *)&v38[5] = v8;
        *(double *)&v38[8] = v6;
        *(double *)v27.i64 = PCMatrix33Tmpl<double>::operator*((uint64_t)v38, (double *)&v40, (uint64_t)v37);
        v34 = 0x3FF0000000000000;
        v36 = 0;
        v35 = 0uLL;
        PCMatrix33Tmpl<double>::getQuaternionFromRotationMatrix((uint64_t)v37, (uint64_t)&v34, v27, v28, v29, v30, v31);
        if ((uint64_t *)(v20 + 24) != &v34)
        {
          *(_QWORD *)(v20 + 24) = v34;
          v32 = v35;
          *(_QWORD *)(v20 + 48) = v36;
          *(_OWORD *)(v20 + 32) = v32;
        }
      }
      if (v20 == v17)
        break;
      v20 -= 248;
    }
    while (v21++ < a3);
  }
}

void OZLinkBehavior::OZLinkBehavior(OZLinkBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCURL *v11;
  OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *v12;
  OZChannelImpl *Instance;
  PCURL *v14;
  OZLinkBehavior::OZLinkBehavior_scaleChanImpl *v15;
  OZLinkBehavior::OZLinkBehavior_scaleChanInfo *v16;
  OZChannelInfo *v17;
  PCURL *v18;
  OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *v19;
  OZChannelImpl *v20;
  PCURL *v21;
  OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *v22;
  OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *v23;
  OZChannelInfo *v24;
  PCURL *v25;
  OZLinkBehavior::OZLinkBehavior_customMixChanImpl *v26;
  OZLinkBehavior::OZLinkBehavior_customMixChanInfo *v27;
  OZChannelInfo *v28;
  PCURL *v29;
  OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *v30;
  OZChannelImpl *v31;
  PCURL *v32;
  PCString *v33;
  PCString *v34;
  PCURL *v35;
  PCURL *v36;
  PCURL *v37;
  PCString *v38;
  __int128 v39;
  __int128 v40;
  PCString v41;
  PCString v42;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 864));
  *(_QWORD *)this = &off_1E65B7950;
  *((_QWORD *)this + 2) = &unk_1E65B7CC8;
  *((_QWORD *)this + 6) = &unk_1E65B7F20;
  *((_QWORD *)this + 42) = &unk_1E65B7F78;
  *((_QWORD *)this + 67) = &unk_1E65B7FA0;
  *((_QWORD *)this + 108) = &unk_1E65B8000;
  PCURL::PCURL((PCURL *)&v42, CFSTR("Link Behavior Source Object"));
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZLinkBehavior *)((char *)this + 1064), &v42, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0);
  PCString::~PCString(&v42);
  OZChannelRef::OZChannelRef((OZLinkBehavior *)((char *)this + 1272));
  PCURL::PCURL((PCURL *)&v42, CFSTR("Link Behavior Source Attribute"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 1296), 0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD5u, 2, 0, 0);
  PCString::~PCString(&v42);
  *((_BYTE *)this + 1450) = 0;
  *((_BYTE *)this + 1464) = 0;
  *((_OWORD *)this + 92) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 93) = _Q0;
  *((_QWORD *)this + 190) = 0;
  *((_QWORD *)this + 189) = 0;
  *((_QWORD *)this + 188) = (char *)this + 1512;
  *((_QWORD *)this + 193) = 0;
  *((_QWORD *)this + 192) = 0;
  *((_QWORD *)this + 191) = (char *)this + 1536;
  PCURL::PCURL(v11, CFSTR("Link Behavior Apply Mode Enum"));
  PCURL::PCURL((PCURL *)&v41, CFSTR("Link Behavior Apply Mode"));
  Instance = (OZChannelImpl *)OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(v12);
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1552), 2u, &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, Instance, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCURL::PCURL(v14, CFSTR("Link Behavior Scale"));
  v16 = (OZLinkBehavior::OZLinkBehavior_scaleChanInfo *)OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(v15);
  v17 = (OZChannelInfo *)OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(v16);
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 1808), &v42, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, (OZChannelImpl *)v16, v17);
  PCString::~PCString(&v42);
  PCURL::PCURL(v18, CFSTR("Link Behavior Mix Mode Enum"));
  PCURL::PCURL((PCURL *)&v41, CFSTR("Link Behavior Mix Mode"));
  v20 = (OZChannelImpl *)OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(v19);
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1960), 6u, &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, v20, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCURL::PCURL(v21, CFSTR("Link Behavior Ease Range"));
  v23 = (OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *)OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(v22);
  v24 = (OZChannelInfo *)OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(v23);
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 2216), 10, &v42, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, (OZChannelImpl *)v23, v24);
  PCString::~PCString(&v42);
  PCURL::PCURL(v25, CFSTR("Link Behavior Custom Mix"));
  v27 = (OZLinkBehavior::OZLinkBehavior_customMixChanInfo *)OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(v26);
  v28 = (OZChannelInfo *)OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(v27);
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 2368), 1.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, (OZChannelImpl *)v27, v28);
  PCString::~PCString(&v42);
  PCURL::PCURL(v29, CFSTR("Link Behavior Apply Link When Enum"));
  PCURL::PCURL((PCURL *)&v41, CFSTR("Link Behavior Apply Link When"));
  v31 = (OZChannelImpl *)OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(v30);
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2520), 0, &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, v31, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCURL::PCURL(v32, CFSTR("Link Behavior Clamp Source Value Within Range"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2776), 1, &v42, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCString::PCString(v33, "Continuous;Fixed");
  PCString::PCString(&v41, "Source Frame Mode");
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2928), &v42, &v41, (OZChannelFolder *)((char *)this + 56), 0xD9u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::~PCString(&v42);
  PCString::PCString(v34, "Source Frame");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3184), &v42, (OZChannelFolder *)((char *)this + 56), 0xDAu, 0, 0, 0);
  PCString::~PCString(&v42);
  PCURL::PCURL(v35, CFSTR("Link Behavior Size Offset X"));
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 3336), 0.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD6u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCURL::PCURL(v36, CFSTR("Link Behavior Size Offset Y"));
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 3488), 0.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCURL::PCURL(v37, CFSTR("Link Behavior Edge Offset"));
  OZChannelDouble::OZChannelDouble((OZLinkBehavior *)((char *)this + 3640), 0.0, &v42, (OZChannelFolder *)((char *)this + 56), 0xD8u, 0, 0, 0);
  PCString::~PCString(&v42);
  PCString::PCString(v38, "Disable Automatic Channel Scale");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3792), 0, &v42, (OZChannelFolder *)((char *)this + 56), 0xDBu, 0, 0, 0);
  PCString::~PCString(&v42);
  v40 = xmmword_1B355DCA0;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1064, (__n128 *)&v40);
  v39 = xmmword_1B355DCE0;
  OZChanObjectRefWithPicker::removeAcceptedFactoryUUID((uint64_t)this + 1064, (int32x4_t *)&v39);
  *((_BYTE *)this + 1265) = 1;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1064, 1);
  *((_QWORD *)this + 493) = 0;
  *((_BYTE *)this + 1449) = 1;
  OZLinkBehavior::initChannelRanges(this);
}

void sub_1B2F1147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannelEnum *a11, OZChannel *a12, OZChannel *a13, OZChannelEnum *a14, OZChannel *a15, OZChannelEnum *a16, _QWORD **a17, _QWORD **a18, OZChannel *a19, void **a20)
{
  uint64_t v20;
  OZChanObjectRefWithPicker *v21;
  OZChannelBool *v22;
  OZChannelEnum *v23;
  OZChannelPercent *v24;
  OZChannel *v25;
  OZChannel *v26;
  OZChannel *v27;
  uint64_t v28;

  PCString::~PCString((PCString *)(v28 - 88));
  OZChannel::~OZChannel(v27);
  OZChannel::~OZChannel(v26);
  OZChannel::~OZChannel(v25);
  OZChannelPercent::~OZChannelPercent(v24);
  OZChannelEnum::~OZChannelEnum(v23);
  OZChannelBool::~OZChannelBool(v22);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannel::~OZChannel(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 1528, *a17);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 1504, *a18);
  OZChannel::~OZChannel(a19);
  OZChannelRef::~OZChannelRef(a20);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v21);
  *(_QWORD *)(v20 + 864) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v20 + 992));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v20 + 872));
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)v20);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::initChannelRanges(OZLinkBehavior *this)
{
  OZChannel *v2;

  v2 = (OZChannel *)((char *)this + 1552);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1552), 0);
  OZChannel::setDefaultValue(v2, 2.0);
  OZChannelBase::reset((OZChannelBase *)v2, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1960), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1960), 6.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1960), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 2216), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2216), 100.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2216), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2216), 100.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2216), 10.0);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2216), 1.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2216), 10.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2216), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 2368), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 2368), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 2368), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2368), 1.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2368), 0.1);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2368), 0.01);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2368), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2368), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2520), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2520), 0.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2520), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 2776), 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2776), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2776), 0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1808), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1808), 10.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1808), 0.5);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 1808), 0.1);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1808), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1808), 0);
  *((_QWORD *)this + 182) = 0x3FF0000000000000;
}

void OZLinkBehavior::OZLinkBehavior(OZLinkBehavior *this, const OZLinkBehavior *a2, char a3)
{
  uint64_t v5;
  __int128 v11;
  __int128 v12;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 864));
  *(_QWORD *)this = &off_1E65B7950;
  *((_QWORD *)this + 2) = &unk_1E65B7CC8;
  *((_QWORD *)this + 6) = &unk_1E65B7F20;
  *((_QWORD *)this + 42) = &unk_1E65B7F78;
  *((_QWORD *)this + 67) = &unk_1E65B7FA0;
  *((_QWORD *)this + 108) = &unk_1E65B8000;
  OZChanObjectRefWithPicker::OZChanObjectRefWithPicker((OZLinkBehavior *)((char *)this + 1064), (const OZLinkBehavior *)((char *)a2 + 1064), (OZChannelFolder *)((char *)this + 56));
  OZChannelRef::OZChannelRef((OZLinkBehavior *)((char *)this + 1272));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1296), (const OZChannelBase *)((char *)a2 + 1296), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 162) = &off_1E6551AF8;
  *((_QWORD *)this + 164) = &unk_1E6551E58;
  *((_BYTE *)this + 1450) = 0;
  *((_BYTE *)this + 1464) = 0;
  *((_OWORD *)this + 92) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 93) = _Q0;
  *((_QWORD *)this + 190) = 0;
  *((_QWORD *)this + 189) = 0;
  *((_QWORD *)this + 188) = (char *)this + 1512;
  *((_QWORD *)this + 193) = 0;
  *((_QWORD *)this + 192) = 0;
  *((_QWORD *)this + 191) = (char *)this + 1536;
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1552), (const OZLinkBehavior *)((char *)a2 + 1552), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1808), (const OZChannelBase *)((char *)a2 + 1808), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 226) = &off_1E6551358;
  *((_QWORD *)this + 228) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 1960), (const OZLinkBehavior *)((char *)a2 + 1960), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2216), (const OZChannelBase *)((char *)a2 + 2216), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 277) = &off_1E6551358;
  *((_QWORD *)this + 279) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2368), (const OZChannelBase *)((char *)a2 + 2368), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 296) = &off_1E6551358;
  *((_QWORD *)this + 298) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2520), (const OZLinkBehavior *)((char *)a2 + 2520), (OZChannelFolder *)((char *)this + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2776), (const OZChannelBase *)((char *)a2 + 2776), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZLinkBehavior *)((char *)this + 2928), (const OZLinkBehavior *)((char *)a2 + 2928), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3184), (const OZChannelBase *)((char *)a2 + 3184), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3336), (const OZChannelBase *)((char *)a2 + 3336), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 417) = &off_1E6551358;
  *((_QWORD *)this + 419) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 3488), (const OZChannelBase *)((char *)a2 + 3488), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 436) = &off_1E6551358;
  *((_QWORD *)this + 438) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 3640), (const OZChannelBase *)((char *)a2 + 3640), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 455) = &off_1E6551358;
  *((_QWORD *)this + 457) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3792), (const OZChannelBase *)((char *)a2 + 3792), (OZChannelFolder *)((char *)this + 56));
  v12 = xmmword_1B355DCA0;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)this + 1064, (__n128 *)&v12);
  v11 = xmmword_1B355DCE0;
  OZChanObjectRefWithPicker::removeAcceptedFactoryUUID((uint64_t)this + 1064, (int32x4_t *)&v11);
  *((_BYTE *)this + 1265) = 1;
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 1064, 1);
  *((_BYTE *)this + 1218) = 1;
  *((_BYTE *)this + 1449) = 0;
  OZLinkBehavior::setSourceChannelRef(this, (std::string *)a2 + 53, 1);
  OZLinkBehavior::copy(this, a2);
}

void sub_1B2F11C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZChannelBool *a10, OZChannelEnum *a11, OZChannel *a12, OZChannel *a13, OZChannelEnum *a14, OZChannel *a15, OZChannelEnum *a16, _QWORD **a17, _QWORD **a18, OZChannel *a19, void **a20)
{
  uint64_t v20;
  OZChanObjectRefWithPicker *v21;
  OZChannel *v22;
  OZChannelPercent *v23;
  OZChannel *v24;
  OZChannel *v25;

  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v25);
  OZChannel::~OZChannel(v24);
  OZChannelPercent::~OZChannelPercent(v23);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel::~OZChannel(a12);
  OZChannel::~OZChannel(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannel::~OZChannel(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 1528, *a17);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 1504, *a18);
  OZChannel::~OZChannel(a19);
  OZChannelRef::~OZChannelRef(a20);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v21);
  *(_QWORD *)(v20 + 864) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v20 + 992));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v20 + 872));
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZSingleChannelBehavior *)v20);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::setSourceChannelRef(OZLinkBehavior *this, std::string *a2, int a3)
{
  std::string *v6;
  OZChannelBase *SourceChannel;
  OZChannelBase *ChanBase;

  v6 = (std::string *)((char *)this + 1272);
  if (OZChannelRef::operator!=((unsigned __int8 *)a2, (unsigned __int8 *)this + 1272))
  {
    OZChannelRef::operator=(v6, a2);
    SourceChannel = OZLinkBehavior::getSourceChannel(this);
    ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
    if (OZLinkBehavior::areChannelsCompatible(this, SourceChannel, ChanBase, 0))
      OZLinkBehavior::buildExpressions(this);
    else
      OZLinkBehavior::clearExpressions(this, a3);
  }
}

double OZLinkBehavior::copy(OZLinkBehavior *this, const OZBehavior *lpsrc)
{
  char *v3;
  double result;
  char *v5;
  char *v6;
  const OZLinkChannelExpression *v7;
  OZLinkChannelExpression *v8;
  char *v9;
  char *v10;
  BOOL v11;

  if (v3)
  {
    v5 = v3;
    OZChannel::setValue((OZChannel *)this + 7, (const OZChannelBase *)(v3 + 1064));
    OZChannelRef::operator=((std::string *)this + 53, (const std::string *)v5 + 53);
    OZChannelBase::operator=((uint64_t)this + 1296, (uint64_t)(v5 + 1296));
    OZChannel::setValue((OZChannel *)((char *)this + 1552), (const OZChannelBase *)(v5 + 1552));
    OZChannel::setValue((OZChannel *)((char *)this + 1808), (const OZChannelBase *)(v5 + 1808));
    OZChannel::setValue((OZChannel *)((char *)this + 1960), (const OZChannelBase *)(v5 + 1960));
    OZChannel::setValue((OZChannel *)((char *)this + 2216), (const OZChannelBase *)(v5 + 2216));
    OZChannel::setValue((OZChannel *)((char *)this + 2368), (const OZChannelBase *)(v5 + 2368));
    OZChannel::setValue((OZChannel *)((char *)this + 2520), (const OZChannelBase *)(v5 + 2520));
    OZChannel::setValue((OZChannel *)((char *)this + 2776), (const OZChannelBase *)(v5 + 2776));
    OZChannel::setValue((OZChannel *)((char *)this + 2928), (const OZChannelBase *)(v5 + 2928));
    OZChannel::setValue((OZChannel *)((char *)this + 3184), (const OZChannelBase *)(v5 + 3184));
    *((_QWORD *)this + 182) = *((_QWORD *)v5 + 182);
    *((_BYTE *)this + 1464) = v5[1464];
    v6 = (char *)*((_QWORD *)v5 + 188);
    if (v6 != v5 + 1512)
    {
      do
      {
        v7 = (const OZLinkChannelExpression *)*((_QWORD *)v6 + 5);
        if (!*((_QWORD *)v7 + 5) || !*((_QWORD *)v7 + 6) || !*((_QWORD *)v7 + 7))
          OZLinkBehavior::resolveExpressionChannels((OZChannel *)v5);
        v8 = (OZLinkChannelExpression *)operator new();
        OZLinkChannelExpression::OZLinkChannelExpression(v8, v7, this);
        OZLinkBehavior::addExpression((uint64_t **)this, *((_DWORD *)v6 + 8), v8);
        v9 = (char *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (char *)*((_QWORD *)v6 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v5 + 1512);
    }
    result = *((double *)v5 + 182);
    *((double *)this + 182) = result;
  }
  return result;
}

void sub_1B2F11FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B3C40905E94F1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::~OZLinkBehavior(OZLinkBehavior *this)
{
  int v2;

  *(_QWORD *)this = &off_1E65B7950;
  *((_QWORD *)this + 2) = &unk_1E65B7CC8;
  *((_QWORD *)this + 6) = &unk_1E65B7F20;
  *((_QWORD *)this + 42) = &unk_1E65B7F78;
  *((_QWORD *)this + 67) = &unk_1E65B7FA0;
  *((_QWORD *)this + 108) = &unk_1E65B8000;
  v2 = theApp
    && OZBehavior::getScene(this)
    && *(_BYTE *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this) + 1848) == 0;
  OZLinkBehavior::clearAll(this, v2);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3792));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3640));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3488));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3336));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3184));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 2928));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2776));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 2520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2368));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2216));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 1960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1808));
  OZChannelEnum::~OZChannelEnum((OZLinkBehavior *)((char *)this + 1552));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1528, *((_QWORD **)this + 192));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1504, *((_QWORD **)this + 189));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1296));
  OZChannelRef::~OZChannelRef((void **)this + 159);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZLinkBehavior *)((char *)this + 1064));
  *((_QWORD *)this + 108) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 992));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 872));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  OZLinkBehavior::~OZLinkBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZLinkBehavior::clearAll(OZLinkBehavior *this, int a2)
{
  PCString v4;
  std::string v5;

  OZChanObjectManipRef::setObject((OZLinkBehavior *)((char *)this + 1064), 0, a2 ^ 1u);
  OZLinkBehavior::clearExpressions(this, a2);
  PCString::PCString(&v4, "");
  OZChannelRef::OZChannelRef((OZChannelRef *)&v5, &v4);
  OZLinkBehavior::setSourceChannelRef(this, &v5, a2);
  OZChannelRef::~OZChannelRef((void **)&v5.__r_.__value_.__l.__data_);
  PCString::~PCString(&v4);
}

void sub_1B2F121AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, void *a10)
{
  OZChannelRef::~OZChannelRef(&a10);
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZLinkBehavior::~OZLinkBehavior(OZLinkBehavior *this)
{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 16));
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 48));
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 336));
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 536));
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  OZLinkBehavior::~OZLinkBehavior((OZLinkBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

OZChannel *OZLinkBehavior::resolveExpressionChannels(OZChannel *this)
{
  OZChannelInfo *var17;
  OZCurve **p_var18;
  OZChannelInfo *v3;
  OZChannelInfo **v4;
  BOOL v5;

  var17 = this[9].var17;
  p_var18 = &this[9].var18;
  if (var17 != (OZChannelInfo *)&this[9].var18)
  {
    do
    {
      OZLinkChannelExpression::resolveChannelRefs(*((OZLinkChannelExpression **)var17 + 5));
      this = OZLinkChannelExpression::syncChannelRanges(*((OZLinkChannelExpression **)var17 + 5), 0);
      v3 = (OZChannelInfo *)*((_QWORD *)var17 + 1);
      if (v3)
      {
        do
        {
          v4 = (OZChannelInfo **)v3;
          v3 = *(OZChannelInfo **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (OZChannelInfo **)*((_QWORD *)var17 + 2);
          v5 = *v4 == var17;
          var17 = (OZChannelInfo *)v4;
        }
        while (!v5);
      }
      var17 = (OZChannelInfo *)v4;
    }
    while (v4 != (OZChannelInfo **)p_var18);
  }
  return this;
}

void OZLinkBehavior::addExpression(uint64_t **this, unsigned int a2, OZLinkChannelExpression *a3)
{
  OZScene **v6;
  unsigned int v7;
  OZLinkChannelExpression *v8;
  _BYTE v9[8];

  v6 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)(this + 108));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v6);
  v7 = a2;
  v8 = a3;
  std::__tree<std::__value_type<unsigned int,OZLinkChannelExpression *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZLinkChannelExpression *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZLinkChannelExpression *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,OZLinkChannelExpression *>>(this + 188, &v7, (uint64_t)&v7);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B2F12398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

char *OZLinkBehavior::allowDrag(OZLinkBehavior *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  char *result;
  const OZObjectManipulator *v15;
  uint64_t v16;

  if (!lpsrc)
  {
    *a5 = 0;
    return OZBehavior::allowDrag((char *)this, lpsrc, a3, a4, a5, a6, a7);
  }
  *a5 = 0;
  if (!result || (_DWORD)a7 != 1 || *a6 != 1)
    return OZBehavior::allowDrag((char *)this, lpsrc, a3, a4, a5, a6, a7);
  if ((OZChannelBase *)((char *)this + 56) == a3)
  {
    v15 = (const OZObjectManipulator *)result;
    v16 = (*(uint64_t (**)(char *))(*(_QWORD *)result + 264))(result);
    result = (char *)(*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
    if ((char *)v16 == result)
    {
      result = (char *)OZChanObjectRefWithPicker::canReferenceObject((OZChannelBase *)((char *)this + 1064), v15);
      if ((_DWORD)result)
      {
        *a6 = 1;
        *a5 = a4 & 8;
      }
    }
  }
  return result;
}

char *`non-virtual thunk to'OZLinkBehavior::allowDrag(OZLinkBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  return OZLinkBehavior::allowDrag((OZLinkBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

unint64_t OZLinkBehavior::performDragOperation(OZLinkBehavior *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  const OZObjectManipulator *v16;
  const OZObjectManipulator *v17;
  uint64_t v18;
  unint64_t result;
  uint64_t v20;
  PCString v21;

  if (!lpsrc)
    return OZBehavior::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a6 != 1)
    return OZBehavior::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a5 != 1)
    return OZBehavior::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  v17 = v16;
  if (!v16)
    return OZBehavior::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  if ((OZChannelBase *)((char *)this + 56) != a3)
    return 0;
  v18 = (*(uint64_t (**)(const OZObjectManipulator *))(*(_QWORD *)v16 + 264))(v16);
  if (v18 != (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this))
    return 0;
  result = OZChanObjectRefWithPicker::canReferenceObject((OZChannelBase *)((char *)this + 1064), v17);
  if ((_DWORD)result)
  {
    PCString::PCString(&v21, "source object selection");
    OZChannelBase::addToUndo((OZChannelBase *)((char *)this + 1064), &v21);
    PCString::~PCString(&v21);
    OZChanObjectManipRef::setObject((OZLinkBehavior *)((char *)this + 1064), v17, 0);
    if ((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this))
    {
      v20 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
      OZDocument::postNotification(*(OZDocument **)(v20 + 1584), 8);
    }
    return 1;
  }
  return result;
}

void sub_1B2F12660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

unint64_t `non-virtual thunk to'OZLinkBehavior::performDragOperation(OZLinkBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZLinkBehavior::performDragOperation((OZLinkBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZLinkBehavior::setChannelRef(OZLinkBehavior *this, OZChannelBase *a2, int a3)
{
  uint64_t v6;

  if ((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v6 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::postNotification(*(OZDocument **)(v6 + 1584), 0x8000000);
  }
  OZSingleChannelBehavior::setChannelRef(this, a2, a3);
}

uint64_t OZLinkBehavior::setSourceAttribute(OZLinkBehavior *this, int a2)
{
  uint64_t result;

  OZChannel::setValue((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], (double)a2, 0);
  result = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return OZScene::dirtyLockDependencies(result);
  return result;
}

uint64_t OZLinkBehavior::areChannelsCompatible(OZLinkBehavior *this, OZChannelBase *lpsrc, OZChannelBase *a3, BOOL *a4)
{
  uint64_t v8;
  unint64_t var7;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  if (a4)
    *a4 = 0;
  v8 = 0;
  if (lpsrc && a3)
  {
      || OZChannelBase::testFlag(lpsrc, 2))
    {
      return 0;
    }
    var7 = a3->var7;
    if ((lpsrc->var7 & 0x1000) == 0)
    {
      if ((var7 & 0x1000) == 0)
      {
LABEL_12:
        v25 = &v25;
        v26 = &v25;
        v27 = 0;
        v10 = operator new(0x18uLL);
        v11 = (char *)this + 16;
        if (!this)
          v11 = 0;
        v10[1] = &v25;
        v10[2] = v11;
        *v10 = &v25;
        v25 = v10;
        v26 = v10;
        v27 = 1;
        v8 = OZBehavior::IsChanAAffectedByChanB(lpsrc, a3, (uint64_t)&v25) ^ 1;
        std::__list_imp<unsigned int>::clear(&v25);
        return v8;
      }
      return 0;
    }
    if ((var7 & 0x1000) == 0)
      return 0;
    if (a4)
      *a4 = 1;
    v8 = 0;
    v14 = (uint64_t *)v12[14];
    if (v14)
    {
      v15 = (uint64_t *)v13[14];
      if (v15)
      {
        v17 = *v14;
        v16 = v14[1];
        v18 = v16 - *v14;
        v20 = *v15;
        v19 = *(_QWORD *)(v13[14] + 8);
        if (v18 == v19 - v20)
        {
          if (v17 == v16 || v20 == v19)
            goto LABEL_12;
          v21 = v17 + 8;
          v22 = v20 + 8;
          while ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(*(_QWORD *)(v21 - 8) + 8)+ 8), *(int32x4_t *)(*(_QWORD *)(*(_QWORD *)(v22 - 8) + 8)+ 8))))) & 1) == 0)
          {
            if (v21 != v16)
            {
              v21 += 8;
              v23 = v22 == v19;
              v22 += 8;
              if (!v23)
                continue;
            }
            goto LABEL_12;
          }
        }
        return 0;
      }
    }
  }
  return v8;
}

void sub_1B2F12964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZLinkBehavior::getSourceChannel(OZLinkBehavior *this)
{
  uint64_t Object;
  OZChannelBase *v3;

  if (!(*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this)
    || !OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064)))
  {
    return 0;
  }
  Object = OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064));
  v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Object + 216))(Object);
  return OZChannelRef::getChannel((OZLinkBehavior *)((char *)this + 1272), v3);
}

void OZLinkBehavior::buildExpressions(OZLinkBehavior *this)
{
  OZChannelBase *SourceChannel;
  _QWORD *v3;
  const void ***v4;
  const void **v5;
  unsigned int v6;
  OZChannelBase *v7;
  OZChannelBase *v8;
  uint64_t ObjectManipulator;
  uint64_t v10;
  const OZChannelBase *v11;
  OZLinkChannelExpression *v12;
  OZChannelBase *v13;
  OZChannelBase *v14;
  uint64_t v15;
  uint64_t v16;
  const OZChannelBase *v17;
  OZLinkChannelExpression *v18;
  uint64_t ChanBase;
  uint64_t v20;
  void *v21[3];

  OZLinkBehavior::clearExpressions(this, 1);
  if (OZSingleChannelBehavior::getChanBase(this))
  {
    if (OZLinkBehavior::getSourceChannel(this))
    {
      SourceChannel = OZLinkBehavior::getSourceChannel(this);
      if (SourceChannel
      {
        v4 = (const void ***)v3[14];
        if (v4)
        {
          v5 = *v4;
          if (*v4 != v4[1])
          {
            v6 = 1;
            do
            {
              if (*v5)
              {
                if (v7)
                {
                  v8 = v7;
                  if (!OZChannelBase::testFlag(v7, 2))
                  {
                    ObjectManipulator = OZChannelBase::getObjectManipulator(v8);
                    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator);
                    v11 = (const OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
                    OZChannelRef::OZChannelRef((OZChannelRef *)v21, v8, v11);
                    v12 = (OZLinkChannelExpression *)operator new();
                    OZLinkChannelExpression::OZLinkChannelExpression(v12, this, (const OZChannelRef *)v21, 1);
                    OZLinkBehavior::addExpression((uint64_t **)this, v6, v12);
                    OZLinkChannelExpression::syncChannelRanges(v12, 1);
                    OZChannelRef::~OZChannelRef(v21);
                  }
                }
              }
              ++v6;
              ++v5;
            }
            while (v5 != v4[1]);
          }
        }
      }
      else
      {
        v13 = OZLinkBehavior::getSourceChannel(this);
        if (v13)
        else
          v14 = 0;
        v15 = OZChannelBase::getObjectManipulator(v14);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 232))(v15);
        v17 = (const OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 640))(v16);
        OZChannelRef::OZChannelRef((OZChannelRef *)v21, v14, v17);
        v18 = (OZLinkChannelExpression *)operator new();
        OZLinkChannelExpression::OZLinkChannelExpression(v18, this, (const OZChannelRef *)v21, 1);
        ChanBase = OZSingleChannelBehavior::getChanBase(this);
        OZLinkBehavior::addExpression((uint64_t **)this, *(_DWORD *)(ChanBase + 24), v18);
        OZLinkChannelExpression::syncChannelRanges(v18, 1);
        OZChannelRef::~OZChannelRef(v21);
      }
    }
    OZLinkBehavior::calcInternalScale(this);
  }
  OZLinkBehavior::validateParamStates(this);
  v20 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
  OZDocument::postNotification(*(OZDocument **)(v20 + 1584), 0x8000000);
}

void sub_1B2F12C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1B5E29170](v2, 0x10B3C40905E94F1);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZLinkBehavior::clearExpressions(OZLinkBehavior *this, int a2)
{
  OZScene **v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD *v13[2];
  _BYTE v14[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v14, v4);
  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  v5 = (_QWORD *)*((_QWORD *)this + 188);
  v6 = (_OWORD *)((char *)this + 1512);
  if (v5 != (_QWORD *)((char *)this + 1512))
  {
    do
    {
      OZLinkBehavior::deleteExpressionParamChannels((uint64_t **)this, v5[5], (uint64_t)&v12);
      v7 = v5[5];
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v5[5] = 0;
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (_QWORD *)v6);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1504, *((_QWORD **)this + 189));
  *((_QWORD *)this + 188) = v6;
  *v6 = 0u;
  if (a2)
  {
    if ((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this))
      v10 = theApp == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
      OZDocument::postNotification(*(OZDocument **)(v11 + 1584), 0x8000000);
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13[0]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v14);
}

void sub_1B2F12DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a9, a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a12);
  _Unwind_Resume(a1);
}

OZChannelBase *OZLinkBehavior::getSourceChannelUUID@<X0>(OZLinkBehavior *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  OZChannelBase *result;
  OZChannelFolder *var6;

  result = OZLinkBehavior::getSourceChannel(this);
  if (result)
  {
    result = OZLinkBehavior::getSourceChannel(this);
    *(_OWORD *)a3 = *(_OWORD *)((char *)result->var1 + 8);
    if (a2)
    {
      result = OZLinkBehavior::getSourceChannel(this);
      var6 = result->var6;
      if (var6)
        *(_OWORD *)a3 = *(_OWORD *)(*((_QWORD *)var6 + 1) + 8);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t OZLinkBehavior::getTargetChannelUUID@<X0>(OZLinkBehavior *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = OZSingleChannelBehavior::getChanBase(this);
  if (result)
  {
    result = OZSingleChannelBehavior::getChanBase(this);
    *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(result + 8) + 8);
    if (a2)
    {
      result = OZSingleChannelBehavior::getChanBase(this);
      v7 = *(_QWORD *)(result + 48);
      if (v7)
        *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v7 + 8) + 8);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void OZLinkBehavior::getMixFactor(OZLinkBehavior *this, const CMTime *a2)
{
  CMTimeEpoch epoch;
  OZLinkBehavior *v5;
  CMTimeEpoch v6;
  OZLinkBehavior *v7;
  _BOOL4 v8;
  CMTimeEpoch v9;
  OZLinkBehavior *v10;
  CMTimeEpoch v11;
  OZLinkBehavior *v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  OZLinkBehavior *v16;
  OZLinkBehavior *v17;
  OZLinkBehavior *v18;
  OZLinkBehavior *v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime time1;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime time2;

  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 1960), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      v26 = time1;
      epoch = time1.epoch;
      *(_OWORD *)&v23.value = *(_OWORD *)&time1.value;
      goto LABEL_3;
    case 1u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      v6 = time1.epoch;
      v26 = time1;
      v27 = v25;
      goto LABEL_5;
    case 2u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      v26 = time1;
      v27 = v25;
      time2 = time1;
      time1 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v8 = 0;
      }
      else
      {
        OZLinkBehavior::getEaseRange(this, &v22);
        time1 = v26;
        time2 = v22;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
        time1 = *a2;
        time2 = v23;
        v8 = CMTimeCompare(&time1, &time2) < 1;
      }
      time1 = v26;
      time2 = v27;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
      OZLinkBehavior::getEaseRange(this, &v21);
      time1 = v22;
      time2 = v21;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      time1 = *a2;
      time2 = v23;
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        v14 = 0;
      }
      else
      {
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        time1 = *a2;
        time2 = v20;
        v14 = CMTimeCompare(&time1, &time2) >> 31;
      }
      if ((v8 | v14) != 1)
        return;
      if ((v8 & v14) == 1)
      {
        v23 = v26;
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v26;
        time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseInFactor(v16, a2, &v23, &v22);
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v22;
        time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getEaseOutFactor(v17, a2, &v23, &v20);
      }
      else if (v8)
      {
        *(_OWORD *)&v23.value = *(_OWORD *)&v26.value;
        epoch = v26.epoch;
LABEL_3:
        v23.epoch = epoch;
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v26;
        time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseInFactor(v5, a2, &v23, &v22);
      }
      else
      {
        *(_OWORD *)&time1.value = *(_OWORD *)&v26.value;
        v6 = v26.epoch;
LABEL_5:
        time1.epoch = v6;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v22;
        time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getEaseOutFactor(v7, a2, &v23, &v20);
      }
      break;
    case 3u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      v26 = time1;
      v9 = time1.epoch;
      *(_OWORD *)&v23.value = *(_OWORD *)&time1.value;
      goto LABEL_9;
    case 4u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      v11 = time1.epoch;
      v26 = time1;
      v27 = v25;
      goto LABEL_11;
    case 5u:
      (*(void (**)(CMTime *__return_ptr, OZLinkBehavior *))(*(_QWORD *)this + 608))(&time1, this);
      v26 = time1;
      v27 = v25;
      time2 = time1;
      time1 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v13 = 0;
      }
      else
      {
        OZLinkBehavior::getEaseRange(this, &v22);
        time1 = v26;
        time2 = v22;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
        time1 = *a2;
        time2 = v23;
        v13 = CMTimeCompare(&time1, &time2) < 1;
      }
      time1 = v26;
      time2 = v27;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
      OZLinkBehavior::getEaseRange(this, &v21);
      time1 = v22;
      time2 = v21;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      time1 = *a2;
      time2 = v23;
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        v15 = 0;
      }
      else
      {
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        time1 = *a2;
        time2 = v20;
        v15 = CMTimeCompare(&time1, &time2) >> 31;
      }
      if ((v13 | v15) != 1)
        return;
      if ((v13 & v15) == 1)
      {
        v23 = v26;
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v26;
        time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getAccelerationFactor(v18, a2, &v23, &v22);
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v22;
        time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getDecelerationFactor(v19, a2, &v23, &v20);
      }
      else if (v13)
      {
        *(_OWORD *)&v23.value = *(_OWORD *)&v26.value;
        v9 = v26.epoch;
LABEL_9:
        v23.epoch = v9;
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v26;
        time2 = v21;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getAccelerationFactor(v10, a2, &v23, &v22);
      }
      else
      {
        *(_OWORD *)&time1.value = *(_OWORD *)&v26.value;
        v11 = v26.epoch;
LABEL_11:
        time1.epoch = v11;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        OZLinkBehavior::getEaseRange(this, &v21);
        time1 = v22;
        time2 = v21;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
        time1 = v26;
        time2 = v27;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
        OZLinkBehavior::getDecelerationFactor(v12, a2, &v23, &v20);
      }
      break;
    default:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2368), a2, 0.0);
      return;
  }
}

double OZLinkBehavior::getEaseInFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  int32_t v7;
  double result;
  double Seconds;
  double v10;
  BOOL v11;
  double v12;
  _BYTE v13[24];
  __int128 v14;
  CMTime time;
  CMTime time2;
  CMTime time1;

  time1 = *a2;
  time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0 || (time1 = *a2, time2 = *a4, CMTimeCompare(&time1, &time2) > 0))
  {
    time1 = *a2;
    time2 = *a3;
    v7 = CMTimeCompare(&time1, &time2);
    result = 1.0;
    if (v7 < 0)
      return 0.0;
  }
  else
  {
    time1 = *a2;
    time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    time1 = *a4;
    time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v13);
    operator/(&v14, (uint64_t)v13, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    v10 = 1.0;
    if (Seconds <= 1.0)
      v10 = Seconds;
    v11 = Seconds < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    return v12 * v12 * (3.0 - (v12 + v12));
  }
  return result;
}

CMTime *OZLinkBehavior::getEaseRange@<X0>(OZLinkBehavior *this@<X0>, CMTime *a2@<X8>)
{
  double v4;
  Float64 v5;
  CMTime v7;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2216), MEMORY[0x1E0CA2E68], 0.0);
  v5 = v4;
  OZBehavior::getFrameDuration(this, (__n128 *)&v7);
  return operator*(&v7, a2, v5);
}

double OZLinkBehavior::getEaseOutFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  int32_t v7;
  double result;
  double Seconds;
  double v10;
  BOOL v11;
  double v12;
  _BYTE v13[24];
  __int128 v14;
  CMTime time;
  CMTime time2;
  CMTime time1;

  time1 = *a2;
  time2 = *a3;
  if (CMTimeCompare(&time1, &time2) < 0 || (time1 = *a2, time2 = *a4, CMTimeCompare(&time1, &time2) > 0))
  {
    time1 = *a2;
    time2 = *a3;
    v7 = CMTimeCompare(&time1, &time2);
    result = 0.0;
    if (v7 < 0)
      return 1.0;
  }
  else
  {
    time1 = *a4;
    time2 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
    time1 = *a4;
    time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v13);
    operator/(&v14, (uint64_t)v13, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    v10 = 1.0;
    if (Seconds <= 1.0)
      v10 = Seconds;
    v11 = Seconds < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    return v12 * v12 * (3.0 - (v12 + v12));
  }
  return result;
}

void OZLinkBehavior::getAccelerationFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  CMTime v7;
  CMTime time;
  CMTime time2;
  CMTime time1;

  time1 = *a2;
  time2 = *a4;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    time1 = *a2;
    time2 = *a3;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = *a4;
      time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      CMTimeGetSeconds(&time);
      time1 = *a2;
      time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v7);
      CMTimeGetSeconds(&v7);
    }
  }
}

void OZLinkBehavior::getDecelerationFactor(OZLinkBehavior *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime time;
  CMTime time2;
  CMTime time1;

  time1 = *a2;
  time2 = *a4;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    time1 = *a2;
    time2 = *a3;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      time1 = *a4;
      time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
      CMTimeGetSeconds(&time);
      time1 = *a4;
      time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v8);
      time1 = *a2;
      time2 = *a3;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v7);
      time1 = v8;
      time2 = v7;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v9);
      CMTimeGetSeconds(&v9);
    }
  }
}

double OZLinkBehavior::getInternalScale(OZLinkBehavior *this)
{
  int ValueAsInt;
  double result;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3792), MEMORY[0x1E0CA2E68], 0.0);
  result = 1.0;
  if (!ValueAsInt)
    return *((double *)this + 182);
  return result;
}

void OZLinkBehavior::calcInternalScale(OZLinkBehavior *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int var3;
  uint64_t v12;
  double v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  double v18;
  int v19;
  OZLinkBehavior *v20;
  double v21;
  OZLinkChannelExpression *v22;
  double v23;
  long double SourceSliderRange;
  double v25;
  long double v26;
  BOOL v27;
  OZLinkBehavior *v28;
  OZLinkBehavior *v29;
  OZLinkBehavior *v30;
  double v31;
  uint64_t TargetChannel;
  _QWORD *v33;
  __CFString *var0;
  double v35;
  double v36;
  long double v37;
  OZLinkBehavior *v39;
  OZLinkBehavior *v40;
  double v41;
  BOOL v42;
  OZChannelBase *ChanBase;
  const void *ObjectManipulator;
  const PCString *v45;
  int v46;
  PCString v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _BYTE v56[12];
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  PCString v61;

  OZLinkBehavior::getSourceChannelUUID(this, 0, (uint64_t)&v58);
  OZLinkBehavior::getSourceChannelUUID(this, 1, (uint64_t)v56);
  OZLinkBehavior::getTargetChannelUUID(this, 0, (uint64_t)&v52);
  OZLinkBehavior::getTargetChannelUUID(this, 1, (uint64_t)&v48);
  v3 = v58;
  v2 = HIDWORD(v58);
  v5 = v59;
  v4 = v60;
  if (*(_QWORD *)v56 == v58 && *(_DWORD *)&v56[8] == v59 && v57 == v60)
  {
    v4 = v57;
    v5 = *(_DWORD *)&v56[8];
    v2 = *(_DWORD *)&v56[4];
    v3 = *(_DWORD *)v56;
  }
  else if (*(_DWORD *)v56 == -1740272879 && *(_QWORD *)&v56[4] == 0x97C399D625BC4998 && v57 == -786165934
         || *(_DWORD *)&v56[4] == 579932631
         && *(_DWORD *)v56 == 813156494
         && *(_DWORD *)&v56[8] == -1183318013
         && v57 == -1819691262
         || *(_DWORD *)v56 == -1206155824
         && *(_DWORD *)&v56[4] == -1939336745
         && *(_DWORD *)&v56[8] == -1836449789
         && v57 == -1821413486
         || *(_DWORD *)v56 == 1683370175
         && *(_DWORD *)&v56[4] == -1267840585
         && *(_DWORD *)&v56[8] == -2073336591
         && v57 == -229854912
         || *(_DWORD *)v56 == -2020973379
         && *(_DWORD *)&v56[4] == 422580696
         && *(_DWORD *)&v56[8] == -1161625590
         && v57 == -1783652482
         || *(_DWORD *)&v56[4] == 579932631
         && *(_DWORD *)v56 == 229652390
         && *(_DWORD *)&v56[8] == -1522466813
         && v57 == -1819691262)
  {
    v58 = *(_QWORD *)v56;
    v4 = v57;
    v5 = *(_DWORD *)&v56[8];
    v2 = *(_DWORD *)&v56[4];
    v3 = *(_DWORD *)v56;
    v59 = *(_DWORD *)&v56[8];
    v60 = v57;
  }
  v6 = v52;
  v7 = v53;
  v8 = v54;
  v9 = v55;
  if (v48 == v52 && v49 == v53 && v50 == v54 && v51 == v55)
  {
    v9 = v51;
    v8 = v50;
    v7 = v49;
    v6 = v48;
  }
  else if (v48 == -1740272879 && v49 == 633096600 && v50 == -1748788778 && v51 == -786165934
         || v49 == 579932631 && v48 == 813156494 && v50 == -1183318013 && v51 == -1819691262
         || v48 == -1206155824 && v49 == -1939336745 && v50 == -1836449789 && v51 == -1821413486
         || v48 == 1683370175 && v49 == -1267840585 && v50 == -2073336591 && v51 == -229854912
         || v48 == -2020973379 && v49 == 422580696 && v50 == -1161625590 && v51 == -1783652482
         || v49 == 579932631 && v48 == 229652390 && v50 == -1522466813 && v51 == -1819691262)
  {
    v52 = v48;
    v53 = v49;
    v9 = v51;
    v8 = v50;
    v7 = v49;
    v6 = v48;
    v54 = v50;
    v55 = v51;
  }
  if (v3 == -1740272879 && v2 == 633096600 && v5 == -1748788778 && v4 == -786165934
    || v4 == -1819691262 && v2 == 579932631 && v3 == 813156494 && v5 == -1183318013)
  {
    if (OZLinkBehavior::getSourceChannel(this)->var3 == 1)
    {
      v10 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this) + 344);
    }
    else
    {
      var3 = OZLinkBehavior::getSourceChannel(this)->var3;
      v12 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
      if (var3 == 2)
      {
        v10 = *(_DWORD *)(v12 + 348);
      }
      else
      {
        v14 = *(_DWORD *)(v12 + 344);
        v10 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this) + 348);
        if (v14 > v10)
          v10 = v14;
      }
    }
    v13 = (double)v10;
  }
  else if (v3 == 1683370175 && v2 == -1267840585 && v5 == -2073336591 && v4 == -229854912)
  {
    v13 = 6.28318531;
  }
  else if (v3 == -2020973379 && v2 == 422580696 && v5 == -1161625590 && v4 == -1783652482
         || (v13 = 0.0, v4 == -1819691262) && v2 == 579932631 && v3 == 229652390 && v5 == -1522466813)
  {
    v13 = 1.0;
  }
  if (v6 == -1740272879 && v7 == 633096600 && v8 == -1748788778 && v9 == -786165934
    || v6 == 813156494 && v7 == 579932631 && v8 == -1183318013 && v9 == -1819691262)
  {
    if (*(_DWORD *)(OZSingleChannelBehavior::getChanBase(this) + 24) == 1)
    {
      v15 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this) + 344);
    }
    else
    {
      v16 = *(_DWORD *)(OZSingleChannelBehavior::getChanBase(this) + 24);
      v17 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
      if (v16 == 2)
      {
        v15 = *(_DWORD *)(v17 + 348);
      }
      else
      {
        v19 = *(_DWORD *)(v17 + 344);
        v15 = *(_DWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this) + 348);
        if (v19 > v15)
          v15 = v19;
      }
    }
    v18 = (double)v15;
  }
  else if (v6 == 1683370175 && v7 == -1267840585 && v8 == -2073336591 && v9 == -229854912)
  {
    v18 = 6.28318531;
  }
  else
  {
    v18 = 1.0;
    if ((v6 != -2020973379 || v7 != 422580696 || v8 != -1161625590 || v9 != -1783652482)
      && (v3 != 229652390 || v2 != 579932631 || v5 != -1522466813 || v4 != -1819691262))
    {
      v18 = 0.0;
      if (v6 == 362132562 && v7 == 579998167 && v8 == -1937833981 && v9 == -1819691262)
      {
        if (OZSingleChannelBehavior::getChanBase(this))
        {
          ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
          ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(ChanBase);
          if (ObjectManipulator)
          {
            if (v45)
            {
              OZFxPlugSharedBase::getPluginUUID(v45, &v61);
              PCString::PCString(&v47, "E61FE95E-0108-47DA-8F29-3CB3C47428EF");
              v46 = PCString::compare(&v61, &v47);
              PCString::~PCString(&v47);
              PCString::~PCString(&v61);
              if (v46)
                v18 = 0.0;
              else
                v18 = v13;
            }
          }
        }
      }
    }
  }
  if (v13 != 0.0 || (v20 = (OZLinkBehavior *)*((_QWORD *)this + 188), v20 == (OZLinkBehavior *)((char *)this + 1512)))
  {
    v21 = v13;
  }
  else
  {
    v21 = v13;
    do
    {
      v22 = (OZLinkChannelExpression *)*((_QWORD *)v20 + 5);
      OZLinkChannelExpression::getSourceValueRange(v22);
      if (v23 > v13)
        v13 = v23;
      SourceSliderRange = OZLinkChannelExpression::getSourceSliderRange(v22);
      v25 = 1.0;
      if (SourceSliderRange >= 10.0)
      {
        v26 = log10(SourceSliderRange);
        v25 = __exp10((double)(int)vcvtmd_s64_f64(v26 + 0.5 + 0.0000001));
      }
      v27 = v25 < v21 || v21 == 0.0;
      if (v27)
        v21 = v25;
      v28 = (OZLinkBehavior *)*((_QWORD *)v20 + 1);
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = *(OZLinkBehavior **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (OZLinkBehavior *)*((_QWORD *)v20 + 2);
          v27 = *(_QWORD *)v29 == (_QWORD)v20;
          v20 = v29;
        }
        while (!v27);
      }
      v20 = v29;
    }
    while (v29 != (OZLinkBehavior *)((char *)this + 1512));
  }
  if (v18 != 0.0 || (v30 = (OZLinkBehavior *)*((_QWORD *)this + 188), v30 == (OZLinkBehavior *)((char *)this + 1512)))
  {
    v31 = v18;
  }
  else
  {
    v31 = v18;
    do
    {
      TargetChannel = OZLinkBehavior::getTargetChannel(this, *((OZLinkChannelExpression **)v30 + 5));
      if (TargetChannel)
      {
        v33 = (_QWORD *)TargetChannel;
        *(double *)&v61.var0 = 0.0;
        (*(void (**)(_QWORD, PCString *))(**(_QWORD **)(*(_QWORD *)(TargetChannel + 112) + 8) + 256))(*(_QWORD *)(*(_QWORD *)(TargetChannel + 112) + 8), &v61);
        var0 = v61.var0;
        *(double *)&v61.var0 = 0.0;
        (*(void (**)(_QWORD, PCString *))(**(_QWORD **)(v33[14] + 8) + 264))(*(_QWORD *)(v33[14] + 8), &v61);
        if (*(double *)&var0 - *(double *)&v61.var0 > v18)
          v18 = *(double *)&var0 - *(double *)&v61.var0;
        v35 = (*(double (**)(_QWORD *))(*v33 + 808))(v33) - *(double *)(v33[16] + 16);
        v36 = 1.0;
        if (v35 >= 10.0)
        {
          v37 = log10(v35);
          v36 = __exp10((double)(int)vcvtmd_s64_f64(v37 + 0.5 + 0.0000001));
        }
        if (v36 < v31 || v31 == 0.0)
          v31 = v36;
      }
      v39 = (OZLinkBehavior *)*((_QWORD *)v30 + 1);
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = *(OZLinkBehavior **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (OZLinkBehavior *)*((_QWORD *)v30 + 2);
          v27 = *(_QWORD *)v40 == (_QWORD)v30;
          v30 = v40;
        }
        while (!v27);
      }
      v30 = v40;
    }
    while (v40 != (OZLinkBehavior *)((char *)this + 1512));
  }
  v41 = 1.0;
  v42 = v13 == v18 && v21 == v31;
  if (!v42 && v13 != 0.0 && v18 != 0.0)
  {
    if (v13 >= 3.40282347e38 || v18 >= 3.40282347e38)
    {
      if (v21 != 0.0 && v31 != 0.0)
        v41 = v31 / v21;
    }
    else
    {
      v41 = v31 / v13;
    }
  }
  *((double *)this + 182) = v41;
}

void sub_1B2F1498C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a18);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::getTargetChannel(OZLinkBehavior *this, OZLinkChannelExpression *a2)
{
  OZScene **v4;
  int TargetChannelID;
  uint64_t v6;
  const void *ChanBase;
  OZChannelFolder *v8;
  uint64_t Descendant;
  _BYTE v11[8];

  v4 = (OZScene **)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v4);
  TargetChannelID = OZLinkBehavior::getTargetChannelID((uint64_t)this, (uint64_t)a2);
  v6 = 0;
  if (OZSingleChannelBehavior::getChanBase(this) && TargetChannelID != -1)
  {
    ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(this);
    if (ChanBase
    {
      Descendant = OZChannelFolder::getDescendant(v8, TargetChannelID);
    }
    else
    {
      Descendant = OZSingleChannelBehavior::getChanBase(this);
    }
    v6 = Descendant;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
  return v6;
}

void sub_1B2F14A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

BOOL OZLinkBehavior::allExpressionsWithinLimits(OZLinkBehavior *this, const CMTime *a2, OZLinkChannelExpression *a3)
{
  char *v5;
  char *v6;
  _BOOL8 v7;
  OZLinkChannelExpression *v8;
  BOOL v9;
  char *v10;
  char *v11;
  BOOL v12;

  if (!*((_QWORD *)this + 190))
    return 1;
  v5 = (char *)*((_QWORD *)this + 188);
  v6 = (char *)this + 1512;
  do
  {
    v7 = v5 == v6;
    if (v5 == v6)
      break;
    v8 = (OZLinkChannelExpression *)*((_QWORD *)v5 + 5);
    v9 = v8 == a3 || OZLinkChannelExpression::isWithinLimits((OZLinkBehavior **)v8, a2);
    v10 = (char *)*((_QWORD *)v5 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (char *)*((_QWORD *)v5 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v12);
    }
    v5 = v11;
  }
  while (v9);
  return v7;
}

double OZLinkBehavior::solveNode(OZLinkBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  double v9;
  uint64_t *v11;
  OZLinkBehavior **v12;
  double v13;
  CMTime v14;
  CMTime v15;

  if (OZLinkBehavior::getSourceChannel(this)
    || OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], 0.0))
  {
    memset(&v15, 0, sizeof(v15));
    (*(void (**)(CMTime *__return_ptr, _QWORD, const CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                         + 336))(&v15, *(_QWORD *)(*((_QWORD *)this + 47) + 32), a3);
    v14 = v15;
    if ((*(unsigned int (**)(OZLinkBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v14, 0, 1, 1))
    {
      if (OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], 0.0))
      {
        return OZLinkBehavior::solveWithSourceAttributes(this, a2, a3, v9, a5);
      }
      else
      {
        v11 = OZLinkBehavior::expressionForChannel(this, a2);
        if (v11)
        {
          v12 = (OZLinkBehavior **)v11;
          if (OZLinkBehavior::allExpressionsWithinLimits(this, &v15, (OZLinkChannelExpression *)v11))
          {
            v13 = 0.0;
            OZLinkChannelExpression::solve(v12, a5, &v15, &v13, 0);
            return v13;
          }
        }
      }
    }
  }
  return a5;
}

double OZLinkBehavior::solveWithSourceAttributes(OZLinkBehavior *this, int a2, const CMTime *a3, double a4, double a5)
{
  OZScene **v9;
  const void *Object;
  OZSceneNode *v12;
  OZSceneNode *v13;
  OZSceneNode *TargetElement;
  uint64_t ChanBase;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  double Offset;
  char v28;
  double v29;
  double v30;
  int ValueAsInt;
  double v32;
  _OWORD v33[2];
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  OZRenderState v37;
  _BYTE v38[8];

  v9 = (OZScene **)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v38, v9);
  if (!*((_BYTE *)this + 1450))
  {
    Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064));
    if (Object)
    {
      if (v12)
      {
        v13 = v12;
        TargetElement = (OZSceneNode *)OZLinkBehavior::getTargetElement(this);
        if (TargetElement)
        {
          *((_BYTE *)this + 1450) = 1;
          OZRenderState::OZRenderState(&v37);
          OZLinkBehavior::getSourceFrame(this, a3, (uint64_t)&v35);
          *(_OWORD *)&v37.var0.var0 = v35;
          v37.var0.var3 = v36;
          v37.var29 = OZLinkBehavior::getBoundsType(this);
          OZRenderState::TransformSet::rotation((uint64_t *)&v37.var30, 0);
          (*(void (**)(__int128 *__return_ptr, OZSceneNode *, OZRenderState *))(*(_QWORD *)v13 + 1496))(&v35, v13, &v37);
          if (*(double *)&v36 < 0.0 || *((double *)&v36 + 1) < 0.0)
          {
            *((_BYTE *)this + 1450) = 0;
            a5 = 0.0;
          }
          else
          {
            ChanBase = OZSingleChannelBehavior::getChanBase(this);
            v16 = *(_DWORD **)(ChanBase + 8);
            v18 = v16[2];
            v17 = v16[3];
            v20 = v16[4];
            v19 = v16[5];
            if (v18 == 291593097 && v17 == -876591041 && v20 == -1188129301 && v19 == 209773980
              || (v21 = *(_DWORD **)(*(_QWORD *)(ChanBase + 48) + 8),
                  v23 = v21[2],
                  v22 = v21[3],
                  v25 = v21[4],
                  v24 = v21[5],
                  v23 == 291593097)
              && v22 == -876591041
              && v25 == -1188129301
              && v24 == 209773980
              || v18 == -1250726091 && v17 == 686887383 && v20 == -1122435069 && v19 == -1819691262
              || v23 == -1250726091 && v22 == 686887383 && v25 == -1122435069 && v24 == -1819691262)
            {
              v34[0] = v35;
              v34[1] = v36;
              v26 = OZLinkBehavior::computeScale((uint64_t)this, TargetElement, v13, (double *)v34, a2, &v37);
              Offset = 0.0;
              v28 = 1;
            }
            else
            {
              v33[0] = v35;
              v33[1] = v36;
              v26 = OZLinkBehavior::computeValue((uint64_t)this, (uint64_t)TargetElement, (uint64_t)v13, (double *)v33, a2, (uint64_t)&v37);
              Offset = OZLinkBehavior::getOffset(this, a2, a3);
              v28 = 0;
            }
            *((_BYTE *)this + 1450) = 0;
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1808), a3, 0.0);
            v30 = Offset + v26 * v29;
            if ((v28 & 1) == 0)
            {
              ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1552), MEMORY[0x1E0CA2E68], 0.0);
              if (ValueAsInt)
              {
                if (ValueAsInt == 1)
                  v30 = v30 * a5;
              }
              else
              {
                v30 = v30 + a5;
              }
            }
            OZLinkBehavior::getMixFactor(this, a3);
            a5 = (v30 - a5) * v32 + a5;
          }
        }
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v38);
  return a5;
}

void sub_1B2F14F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t *OZLinkBehavior::expressionForChannel(OZLinkBehavior *this, unsigned int a2)
{
  OZScene **v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  _BYTE v12[8];
  unsigned int v13;
  unsigned int *v14;

  v13 = a2;
  v4 = (OZScene **)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v4);
  v5 = *((_QWORD *)this + 189);
  if (!v5)
    goto LABEL_12;
  v6 = (_DWORD *)((char *)this + 1512);
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (v8)
      v6 = (_DWORD *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != (_DWORD *)((char *)this + 1512) && v6[8] <= a2)
  {
    v14 = &v13;
    v10 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 188, &v13, (uint64_t)&std::piecewise_construct, &v14)[5];
  }
  else
  {
LABEL_12:
    v10 = 0;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return v10;
}

void sub_1B2F15058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZLinkBehavior::solveNode(OZLinkBehavior *this, unsigned int a2, const CMTime *a3, double a4, double a5)
{
  return OZLinkBehavior::solveNode((OZLinkBehavior *)((char *)this - 536), a2, a3, a4, a5);
}

void OZLinkBehavior::getSourceFrame(OZLinkBehavior *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  const void *Object;
  void *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;
  Float64 Seconds;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17[2];
  CMTime v18;
  CMTime v19;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2928), MEMORY[0x1E0CA2E68], 0.0)
    && (Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064))) != 0
  {
    v8 = v7;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 3184), MEMORY[0x1E0CA2E68], 0.0);
    v10 = v9;
    (*(void (**)(CMTime *__return_ptr, void *))(*(_QWORD *)v8 + 1128))(v17, v8);
    memset(&v16, 0, sizeof(v16));
    v15 = v17[1];
    v11 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), (__n128 *)&v14);
    v19 = v15;
    v18 = v14;
    PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&v16);
    v15 = v17[0];
    v13 = v16;
    Seconds = CMTimeGetSeconds(&v13);
    OZFigTimeForChannelSeconds(&v14, v10 * Seconds, 0x40000);
    v19 = v15;
    v18 = v14;
    PC_CMTimeSaferAdd(&v19, &v18, a3);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a3 + 16) = a2->epoch;
  }
}

double OZLinkBehavior::computeScale(uint64_t a1, OZSceneNode *a2, OZSceneNode *a3, double *a4, int a5, const OZRenderState *a6)
{
  __int128 v11;
  double *v12;
  uint64_t ChanBase;
  int ValueAsUint;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double *v20;
  double result;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v33 = 0x3FF0000000000000;
  v34 = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  v40 = 0u;
  v41 = 0u;
  v29 = 0x3FF0000000000000;
  v26 = 0x3FF0000000000000;
  v23 = 0x3FF0000000000000;
  v24 = 0u;
  v25 = 0u;
  v27 = 0u;
  v28 = 0u;
  v30 = 0u;
  v31 = 0u;
  OZTransformNode::getCommonAncestorTransforms(a3, a2, a6, (uint64_t)&v33, (uint64_t)&v23);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v33, a4, (uint64_t)a4);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v23, a4, (uint64_t)a4);
  if (*(double *)(a1 + 1488) < 0.0 || *(double *)(a1 + 1496) < 0.0)
  {
    (*(void (**)(_OWORD *__return_ptr, OZSceneNode *, const OZRenderState *))(*(_QWORD *)a2 + 1496))(v22, a2, a6);
    v11 = v22[1];
    *(_OWORD *)(a1 + 1472) = v22[0];
    *(_OWORD *)(a1 + 1488) = v11;
  }
  v12 = (double *)(a1 + 1488);
  ChanBase = OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)a1);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a1 + 1296), MEMORY[0x1E0CA2E68], 0.0);
  v15 = *(_DWORD **)(ChanBase + 8);
  v17 = v15[2];
  v16 = v15[3];
  v19 = v15[4];
  v18 = v15[5];
  if ((v17 == 291593097 && v16 == -876591041 && v19 == -1188129301 && v18 == 209773980
     || v17 == -1250726091 && v16 == 686887383 && v19 == -1122435069 && v18 == -1819691262)
    && (ValueAsUint & 0xFFFFFFFE) == 2)
  {
    v20 = a4 + 3;
    if (ValueAsUint == 2)
      v20 = a4 + 2;
    else
      v12 = (double *)(a1 + 1496);
  }
  else if (a5 == 2)
  {
    v20 = a4 + 3;
    v12 = (double *)(a1 + 1496);
  }
  else
  {
    result = 1.0;
    if (a5 != 1)
      return result;
    v20 = a4 + 2;
  }
  return *v20 / *v12;
}

double OZLinkBehavior::computeValue(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, int a5, uint64_t a6)
{
  OZChannel *v11;
  unsigned int ValueAsUint;
  unsigned int v14;
  const void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v11 = (OZChannel *)(a1 + 1296);
  ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a1 + 1296), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsUint <= 0xD && ((1 << ValueAsUint) & 0x3F0E) != 0)
    OZRenderState::TransformSet::translation((uint64_t *)(a6 + 248), 0);
  v40 = 0x3FF0000000000000;
  v37 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  v31 = 0x3FF0000000000000;
  v32 = 0u;
  v33 = 0u;
  v35 = 0u;
  v36 = 0u;
  v38 = 0u;
  v39 = 0u;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 1256))(a3, &v31, a6);
  PCMatrix44Tmpl<double>::transformRect<double>((double *)&v31, a4, (uint64_t)a4);
  v14 = OZChannel::getValueAsUint(v11, MEMORY[0x1E0CA2E68], 0.0);
  if (v14 <= 0xD && ((1 << v14) & 0x3F0E) != 0)
    OZRenderState::TransformSet::translation((uint64_t *)(a6 + 248), 1);
  v15 = *(const void **)(a2 + 960);
  if (v15)
  {
    if (v16)
    {
      v30 = 0x3FF0000000000000;
      v27 = 0x3FF0000000000000;
      v24 = 0x3FF0000000000000;
      v21 = 0x3FF0000000000000;
      v22 = 0u;
      v23 = 0u;
      v25 = 0u;
      v26 = 0u;
      v28 = 0u;
      v29 = 0u;
      (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v16 + 1264))(v16, &v21, a6);
      PCMatrix44Tmpl<double>::transformRect<double>((double *)&v21, a4, (uint64_t)a4);
    }
  }
  v17 = 0.0;
  switch(OZChannel::getValueAsUint(v11, MEMORY[0x1E0CA2E68], 0.0))
  {
    case 1u:
    case 8u:
      if (a5 == 2)
        goto LABEL_13;
      if (a5 == 1)
        goto LABEL_16;
      break;
    case 2u:
LABEL_16:
      v17 = a4[2];
      break;
    case 3u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
LABEL_13:
      v17 = a4[3];
      break;
    case 4u:
      v17 = *a4;
      break;
    case 5u:
      v18 = *a4;
      v19 = a4[2];
      goto LABEL_21;
    case 6u:
      v17 = a4[1];
      break;
    case 7u:
      v18 = a4[1];
      v19 = a4[3];
LABEL_21:
      v17 = v18 + v19;
      break;
    default:
      return v17;
  }
  return v17;
}

double OZLinkBehavior::getOffset(OZLinkBehavior *this, int a2, const CMTime *a3)
{
  OZChannel *v6;
  double result;

  switch(OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 1u:
    case 8u:
      if (a2 == 2)
        goto LABEL_2;
      if (a2 != 1)
        goto LABEL_8;
      goto LABEL_6;
    case 2u:
LABEL_6:
      v6 = (OZChannel *)((char *)this + 3336);
      goto LABEL_7;
    case 3u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
LABEL_2:
      v6 = (OZChannel *)((char *)this + 3488);
      goto LABEL_7;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      v6 = (OZChannel *)((char *)this + 3640);
LABEL_7:
      OZChannel::getValueAsDouble(v6, a3, 0.0);
      break;
    default:
LABEL_8:
      result = 0.0;
      break;
  }
  return result;
}

const PCString *OZLinkBehavior::getTargetElement(OZLinkBehavior *this)
{
  const PCString *result;
  const PCString *v3;
  OZChannelBase *ChanBase;
  int v5;
  PCString v6;
  PCString v7;

  result = (const PCString *)OZSingleChannelBehavior::getAffectedObject(this);
  if (result)
  {
    v3 = result;
    if (!result)
    {
      if (result)
      {
        result = (const PCString *)OZSingleChannelBehavior::getChanBase(this);
        if (result)
        {
          ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(this);
          result = (const PCString *)OZChannelBase::getObjectManipulator(ChanBase);
          if (result)
          {
            if (result)
            {
              OZFxPlugSharedBase::getPluginUUID(result, &v7);
              PCString::PCString(&v6, "546352EB-956A-4DDA-9071-C82CC50B7F73");
              v5 = PCString::compare(&v7, &v6);
              PCString::~PCString(&v6);
              PCString::~PCString(&v7);
              if (v5)
              {
                return 0;
              }
              else
              {
                result = (const PCString *)((uint64_t (*)(const PCString *))v3->var0[7].info)(v3);
                if (result)
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B2F157FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::getBoundsType(OZLinkBehavior *this)
{
  unsigned int v1;

  v1 = OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], 0.0) - 8;
  if (v1 > 4)
    return 0;
  else
    return dword_1B3560EC0[v1];
}

__n128 OZLinkBehavior::solveNode(OZLinkBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  unint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  v3 = *((_QWORD *)a3 + 19);
  v4 = *((_QWORD *)a3 + 10);
  v11 = *(CMTime *)((_BYTE *)a3 + 5);
  result = *((__n128 *)a3 + 6);
  *(__n128 *)&v10.value = result;
  v10.epoch = *((_QWORD *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = (*(double (**)(OZLinkBehavior *, uint64_t, CMTime *, double, double))(*(_QWORD *)this + 680))(this, a2, &v10, 0.0, *(double *)(v4 + 8 * v9));
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v14);
      result = *(__n128 *)&v14.value;
      v10 = v14;
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
  return result;
}

double `non-virtual thunk to'OZLinkBehavior::solveNode(OZLinkBehavior *this, uint64_t a2, OZCurveNodeParam *a3)
{
  double result;

  *(_QWORD *)&result = OZLinkBehavior::solveNode((OZLinkBehavior *)((char *)this - 536), a2, a3).n128_u64[0];
  return result;
}

uint64_t OZLinkBehavior::enable(OZLinkBehavior *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  OZObjectManipulator::enable((OZLinkBehavior *)((char *)this + 16), a2);
  result = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    v4 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this);
    return (*(uint64_t (**)(uint64_t, OZLinkBehavior *))(*(_QWORD *)v4 + 240))(v4, this);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZLinkBehavior::enable(OZLinkBehavior *this, uint64_t a2)
{
  return OZLinkBehavior::enable((OZLinkBehavior *)((char *)this - 16), a2);
}

uint64_t OZLinkBehavior::disable(OZLinkBehavior *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  OZObjectManipulator::disable((OZLinkBehavior *)((char *)this + 16), a2);
  result = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    v4 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this);
    return (*(uint64_t (**)(uint64_t, OZLinkBehavior *))(*(_QWORD *)v4 + 240))(v4, this);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZLinkBehavior::disable(OZLinkBehavior *this, uint64_t a2)
{
  return OZLinkBehavior::disable((OZLinkBehavior *)((char *)this - 16), a2);
}

uint64_t OZLinkBehavior::willRemoveSceneNodeFromScene(OZLinkBehavior *this, OZScene *a2)
{
  OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);
  return OZLocking::removeFromLockingGroup((OZLinkBehavior *)((char *)this + 864));
}

uint64_t OZLinkBehavior::willRemove(PCString *this)
{
  uint64_t v2;

  v2 = ((uint64_t (*)(PCString *))this->var0[10].isa)(this);
  OZSingleChannelBehavior::willRemove(this);
  return (*(uint64_t (**)(uint64_t, PCString *))(*(_QWORD *)v2 + 240))(v2, this);
}

uint64_t OZLinkBehavior::didAddToNode(OZLinkBehavior *this, OZSceneNode *a2)
{
  OZChannelBehavior::didAddToNode(this, a2);
  if (!*((_BYTE *)this + 852) && (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2))
  {
    (*(void (**)(OZLinkBehavior *))(*(_QWORD *)this + 808))(this);
    OZLinkBehavior::validateLinkedChannels((uint64_t **)this);
  }
  return OZLinkBehavior::validateParamStates(this);
}

void OZLinkBehavior::validateLinkedChannels(uint64_t **this)
{
  OZChannel *v2;
  int ValueAsUint;
  OZLinkBehavior *ChanBase;
  OZChannelBase *SourceChannel;
  OZChannelBase *v6;
  uint64_t **v7;
  std::string::size_type v8;
  PCString v9;
  std::string v10;
  BOOL v11;

  v2 = (OZChannel *)(this + 162);
  if (OZChannel::getValueAsUint((OZChannel *)(this + 162), MEMORY[0x1E0CA2E68], 0.0))
  {
    ValueAsUint = OZChannel::getValueAsUint(v2, MEMORY[0x1E0CA2E68], 0.0);
    ChanBase = (OZLinkBehavior *)OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this);
    if ((OZLinkBehavior::isAttributeCompatibleToDestChannel(ChanBase, ValueAsUint, (OZChannelBase *)ChanBase) & 1) == 0)
      OZLinkBehavior::setSourceAttribute((OZLinkBehavior *)this, 0);
  }
  else
  {
    v11 = 0;
    SourceChannel = OZLinkBehavior::getSourceChannel((OZLinkBehavior *)this);
    v6 = (OZChannelBase *)OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this);
    if (OZLinkBehavior::areChannelsCompatible((OZLinkBehavior *)this, SourceChannel, v6, &v11))
    {
      if (!v11)
      {
        v7 = (uint64_t **)this[188];
        if (v7 != this + 189)
        {
          v8 = (std::string::size_type)v7[5];
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(this + 188, this[188]);
          operator delete(v7);
          v10.__r_.__value_.__r.__words[0] = *(unsigned int *)(OZSingleChannelBehavior::getChanBase((OZSingleChannelBehavior *)this)
                                                             + 24);
          v10.__r_.__value_.__l.__size_ = v8;
          std::__tree<std::__value_type<unsigned int,OZLinkChannelExpression *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZLinkChannelExpression *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZLinkChannelExpression *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,OZLinkChannelExpression *>>(this + 188, (unsigned int *)&v10, (uint64_t)&v10);
        }
      }
      OZLinkBehavior::calcInternalScale((OZLinkBehavior *)this);
    }
    else
    {
      PCString::PCString(&v9, "");
      OZChannelRef::OZChannelRef((OZChannelRef *)&v10, &v9);
      OZLinkBehavior::setSourceChannelRef((OZLinkBehavior *)this, &v10, 1);
      OZChannelRef::~OZChannelRef((void **)&v10.__r_.__value_.__l.__data_);
      PCString::~PCString(&v9);
    }
  }
}

void sub_1B2F15C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, void *a11)
{
  OZChannelRef::~OZChannelRef(&a11);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::validateParamStates(OZLinkBehavior *this)
{
  TXParagraphStyleFolder_Factory *v2;
  uint64_t v3;
  OZObjectManipulator *Object;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;

  v2 = (TXParagraphStyleFolder_Factory *)(*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
  if (v2)
  {
    if ((v3 = *((_QWORD *)v2 + 198)) != 0 && *(_BYTE *)(v3 + 184)
      || TXParagraphStyleFolder_Factory::version(v2))
    {
      if (OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064))
        && (OZLinkBehavior::getSourceChannel(this)
         || OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], 0.0))
        && (Object = (OZObjectManipulator *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064)),
            !OZLinkBehavior::checkForRecursion(this, Object)))
      {
        v5 = 103;
      }
      else
      {
        v5 = 104;
      }
      (*(void (**)(OZLinkBehavior *, uint64_t))(*(_QWORD *)this + 8 * v5))(this, 1);
    }
  }
  OZLinkBehavior::mixModeChanged(this);
  OZLinkBehavior::applyModeChanged(this);
  OZLinkBehavior::applyLinkWhenChanged(this);
  v7 = *((_QWORD *)this + 2);
  v6 = (char *)this + 16;
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 24))(v6, 0, 1);
  v6[1449] = result;
  return result;
}

uint64_t OZLinkBehavior::addToChannel(OZLinkBehavior *this, OZChannelBase *lpsrc)
{
  void **v4;
  OZChannelBase *v5;
  OZChannelBehavior *SceneNodeFromChan;
  OZObjectManipulator *ObjectManipulatorForChannel;

  v4 = (void **)*((_QWORD *)this + 104);
  if (v4)
  {
    OZChannelRef::~OZChannelRef(v4);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)this + 104) = 0;
  }
  OZLinkBehavior::addToChannelHelper(this, lpsrc);
  if (!(*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this))
  {
    SceneNodeFromChan = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)lpsrc, v5);
    (*(void (**)(OZChannelBehavior *, OZLinkBehavior *, _QWORD))(*(_QWORD *)SceneNodeFromChan + 360))(SceneNodeFromChan, this, 0);
  }
  ObjectManipulatorForChannel = (OZObjectManipulator *)OZSingleChannelBehavior::getObjectManipulatorForChannel(this, lpsrc);
  return OZChanObjectManipRef::setObject((OZLinkBehavior *)((char *)this + 640), ObjectManipulatorForChannel, 0);
}

uint64_t OZLinkBehavior::addToChannelHelper(OZLinkBehavior *this, OZChannelBase *lpsrc)
{
  OZChannel *v4;
  _QWORD *v5;
  const void ***v7;
  const void **i;
  OZChannel *v9;
  OZChannel *v10;

  if (lpsrc)
  {
    if (v4)
    {
      OZChannelBehavior::setAffectedChannel(this, lpsrc);
      OZSingleChannelBehavior::addToOneChannel(this, v4);
    }
    else if (v5)
    {
      v7 = (const void ***)v5[14];
      if (v7)
      {
        for (i = *v7; i != v7[1]; ++i)
        {
          if (*i)
          {
            if (v9)
            {
              v10 = v9;
              if ((*((unsigned int (**)(OZChannel *))v9->var0 + 64))(v9))
              {
                OZChannelBehavior::setAffectedChannel(this, lpsrc);
                OZSingleChannelBehavior::addToOneChannel(this, v10);
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

OZSingleChannelBehavior *OZLinkBehavior::commonDidAddToNode(OZSingleChannelBehavior *this)
{
  OZSingleChannelBehavior *v1;
  uint64_t v2;
  int v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  PCString *InternalName;
  uint64_t v24;
  OZSingleChannelBehavior *v25;
  uint64_t v26;
  OZChannelBase *v27;
  OZChannelBase *v28;

  if (!*((_QWORD *)this + 104))
    return this;
  v1 = this;
  v2 = (*(uint64_t (**)(OZSingleChannelBehavior *))(*(_QWORD *)this + 320))(this);
  this = (OZSingleChannelBehavior *)OZChanObjectManipRef::getObjectID((OZChannel *)((char *)v1 + 640));
  if (!(_DWORD)this || (v3 = (int)this, *(_DWORD *)(v2 + 80) == (_DWORD)this))
  {
    v5 = v2 + 16;
    goto LABEL_12;
  }
  if (OZSceneNode::getEffect((OZSceneNode *)v2, (int)this))
  {
    this = (OZSingleChannelBehavior *)OZSceneNode::getEffect((OZSceneNode *)v2, v3);
    v4 = (char *)this + 48;
  }
  else
  {
    this = (OZSingleChannelBehavior *)OZSceneNode::getBehavior((OZSceneNode *)v2, v3);
    if (!this)
    {
      v5 = 0;
      goto LABEL_12;
    }
    this = (OZSingleChannelBehavior *)OZSceneNode::getBehavior((OZSceneNode *)v2, v3);
    v4 = (char *)this + 16;
  }
  if (this)
    v5 = (uint64_t)v4;
  else
    v5 = 0;
LABEL_12:
  v6 = *((_DWORD *)v1 + 200);
  v7 = *((_DWORD *)v1 + 201);
  v8 = *((_DWORD *)v1 + 202);
  v9 = *((_DWORD *)v1 + 203);
  if (!(v7 | v6 | v8 | v9))
    goto LABEL_50;
  if (v5)
  {
    this = (OZSingleChannelBehavior *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 256))(v5);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)this + 1) + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)goto LABEL_51;
    v6 = *((_OWORD *)v1 + 50);
    v7 = HIDWORD(*((_QWORD *)v1 + 100));
    v8 = *((_QWORD *)v1 + 101);
    v9 = HIDWORD(*((_OWORD *)v1 + 50));
  }
  v10 = *(_DWORD **)(v2 + 8);
  v11 = v10[2];
  v12 = v10[3];
  v14 = v10[4];
  v13 = v10[5];
  if (v11 != v6 || v12 != v7 || v14 != v8 || v13 != v9)
  {
    v18 = *(_QWORD *)(v2 + 984);
    if (v18 == v2 + 976)
      goto LABEL_38;
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(v18 + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v21 + 40) + 8), *((int32x4_t *)v1 + 50))))) & 1) == 0)
      {
        v22 = (_QWORD *)(v21 + 48);
        if (v20)
        {
          InternalName = (PCString *)OZObjectManipulator::getInternalName((OZObjectManipulator *)(v21 + 48));
          this = (OZSingleChannelBehavior *)PCString::size(InternalName);
          if ((_DWORD)this)
          {
            this = (OZSingleChannelBehavior *)PCString::compare(InternalName, (const PCString *)v1 + 105);
            if (!(_DWORD)this)
              goto LABEL_45;
          }
        }
        else
        {
          v20 = *(_QWORD *)(v18 + 16);
          v19 = (_QWORD *)(v21 + 48);
        }
      }
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18 != v2 + 976);
    v22 = v19;
    if (!v19)
    {
LABEL_38:
      v24 = *(_QWORD *)(v2 + 1008);
      if (v24 == v2 + 1000)
      {
LABEL_42:
        v22 = 0;
      }
      else
      {
        while (1)
        {
          v25 = *(OZSingleChannelBehavior **)(v24 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)v25 + 1)+ 8), *((int32x4_t *)v1 + 50))))) & 1) == 0&& v25 != v1)
          {
            break;
          }
          v24 = *(_QWORD *)(v24 + 8);
          if (v24 == v2 + 1000)
            goto LABEL_42;
        }
        v22 = (_QWORD *)((char *)v25 + 16);
      }
    }
LABEL_45:
    v26 = v2 + 16;
    if (!v2)
      v26 = 0;
    if (v22)
      v5 = (uint64_t)v22;
    else
      v5 = v26;
LABEL_50:
    if (!v5)
      return this;
    goto LABEL_51;
  }
  v5 = v2 + 16;
LABEL_51:
  this = (OZSingleChannelBehavior *)(*(uint64_t (**)(uint64_t, _QWORD, double))(*(_QWORD *)v5 + 224))(v5, *((_QWORD *)v1 + 104), *((double *)v1 + 107));
  v28 = (OZChannelBase *)this;
  if (*((double *)v1 + 107) < 3.0)
  {
    this = (OZSingleChannelBehavior *)OZSingleChannelBehavior::GetDefaultExcludeFlagsForChan(this, v27);
    *((_DWORD *)v1 + 212) = (_DWORD)this;
  }
  if (v28)
  {
    OZLinkBehavior::addToChannelHelper(v1, v28);
    this = (OZSingleChannelBehavior *)*((_QWORD *)v1 + 104);
    if (this)
    {
      OZChannelRef::~OZChannelRef((void **)this);
      this = (OZSingleChannelBehavior *)MEMORY[0x1B5E29170]();
    }
    *((_QWORD *)v1 + 104) = 0;
  }
  return this;
}

uint64_t `non-virtual thunk to'OZLinkBehavior::sceneDidChange(OZLinkBehavior *this)
{
  return OZLinkBehavior::validateParamStates((OZLinkBehavior *)((char *)this - 16));
}

void OZLinkBehavior::notify(OZLinkBehavior *this, char a2)
{
  OZNotificationManager *v4;
  OZNotificationManager *v5;
  OZNotificationManager *v6;
  uint64_t v7;
  OZNotificationManager *v8;
  const void *Object;
  void *v10;

  OZChannelBehavior::notify(this, a2);
  if ((a2 & 0x10) != 0)
    (*(void (**)(OZLinkBehavior *))(*(_QWORD *)this + 816))(this);
  if ((a2 & 0xC) != 0
    && (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this)
    && *(_QWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this) + 1584))
  {
    (*(void (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
    v4 = *(OZNotificationManager **)(*(_QWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this)
                                               + 1584)
                                   + 168);
    if (v4 && OZNotificationManager::wasChannelModified(v4, (const OZChannelBase *)((char *)this + 1960)))
    {
      OZLinkBehavior::mixModeChanged(this);
    }
    else
    {
      (*(void (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
      v5 = *(OZNotificationManager **)(*(_QWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this)
                                                 + 1584)
                                     + 168);
      if (v5 && OZNotificationManager::wasChannelModified(v5, (const OZChannelBase *)((char *)this + 1552)))
      {
        OZLinkBehavior::applyModeChanged(this);
      }
      else
      {
        (*(void (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
        v6 = *(OZNotificationManager **)(*(_QWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this
                                                                                                 + 336))(this)
                                                   + 1584)
                                       + 168);
        if (!v6 || !OZNotificationManager::wasChannelModified(v6, (const OZChannelBase *)((char *)this + 2520)))
        {
          (*(void (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
          v8 = *(OZNotificationManager **)(*(_QWORD *)((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this)
                                                     + 1584)
                                         + 168);
          if (v8)
          {
            if (OZNotificationManager::wasChannelModified(v8, (const OZChannelBase *)((char *)this + 1296)))
            {
              if (OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], 0.0))
              {
                Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)((char *)this + 1064));
                if (Object)
                {
                  if (v10)
                    (*(void (**)(void *))(*(_QWORD *)v10 + 496))(v10);
                }
              }
            }
          }
          goto LABEL_24;
        }
        OZLinkBehavior::applyLinkWhenChanged(this);
      }
    }
    if ((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this))
    {
      v7 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this);
      (*(void (**)(uint64_t, OZLinkBehavior *))(*(_QWORD *)v7 + 240))(v7, this);
    }
LABEL_24:
    OZLinkBehavior::updateApplyMode(this);
  }
}

void OZLinkBehavior::mixModeChanged(OZLinkBehavior *this)
{
  int ValueAsInt;
  OZChannelBase *v3;
  uint64_t v4;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1960), MEMORY[0x1E0CA2E68], 0.0);
  v3 = (OZChannelBase *)((char *)this + 2368);
  if (ValueAsInt == 6)
  {
    OZChannelBase::resetFlag(v3, 2, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2216), 2, 1);
  }
  else
  {
    OZChannelBase::setFlag(v3, 2, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2216), 2, 1);
  }
  if ((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v4 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::postNotification(*(OZDocument **)(v4 + 1584), 134742016);
  }
}

void OZLinkBehavior::applyModeChanged(OZLinkBehavior *this)
{
  char *v2;
  char *v3;
  const CMTime *v4;
  OZChannelBase *v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;

  v2 = (char *)*((_QWORD *)this + 188);
  v3 = (char *)this + 1512;
  if (v2 != (char *)this + 1512)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v5 = *(OZChannelBase **)(*((_QWORD *)v2 + 5) + 40);
      if (v5)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1552), v4, 0.0))
        {
          OZChannelBase::resetFlag(v5, 2, 1);
        }
        else
        {
          (*((void (**)(OZChannelBase *, _QWORD))v5->var0 + 36))(v5, 0);
          OZChannelBase::setFlag(v5, 2, 1);
        }
      }
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  if ((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v9 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::postNotification(*(OZDocument **)(v9 + 1584), 134742016);
  }
}

void OZLinkBehavior::applyLinkWhenChanged(OZLinkBehavior *this)
{
  char *v2;
  char *v3;
  const CMTime *v4;
  OZChannelBase *v5;
  OZChannelBase *v6;
  char *v7;
  char *v8;
  BOOL v9;
  int ValueAsInt;
  OZChannelBase *v11;
  uint64_t v12;

  v2 = (char *)*((_QWORD *)this + 188);
  v3 = (char *)this + 1512;
  if (v2 != (char *)this + 1512)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v5 = *(OZChannelBase **)(*((_QWORD *)v2 + 5) + 48);
      if (v5)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 1
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 3
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 4)
        {
          OZChannelBase::resetFlag(v5, 2, 1);
        }
        else
        {
          OZChannelBase::setFlag(v5, 2, 1);
        }
      }
      v6 = *(OZChannelBase **)(*((_QWORD *)v2 + 5) + 56);
      if (v6)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 2
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 3
          || OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), v4, 0.0) == 4)
        {
          OZChannelBase::resetFlag(v6, 2, 1);
        }
        else
        {
          OZChannelBase::setFlag(v6, 2, 1);
        }
      }
      v7 = (char *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v2 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 2520), MEMORY[0x1E0CA2E68], 0.0);
  v11 = (OZChannelBase *)((char *)this + 2776);
  if (ValueAsInt)
    OZChannelBase::resetFlag(v11, 2, 1);
  else
    OZChannelBase::setFlag(v11, 2, 1);
  if ((*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v12 = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::postNotification(*(OZDocument **)(v12 + 1584), 134742016);
  }
}

uint64_t OZLinkBehavior::updateApplyMode(OZLinkBehavior *this)
{
  uint64_t result;
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  PCString v24;

  result = OZChannel::getValueAsUint((OZChannel *)((char *)this + 1296), MEMORY[0x1E0CA2E68], 0.0);
  if (!(_DWORD)result)
    goto LABEL_49;
  result = OZSingleChannelBehavior::getChanBase(this);
  if (!result)
    goto LABEL_49;
  v3 = *(_DWORD **)(result + 8);
  v4 = v3[2];
  v5 = v3[3];
  v6 = v3[4];
  v7 = v3[5];
  v8 = v4 == 291593097 && v5 == -876591041;
  v9 = v8 && v6 == -1188129301;
  if (v9 && v7 == 209773980)
    goto LABEL_50;
  v11 = *(_DWORD **)(*(_QWORD *)(result + 48) + 8);
  v12 = v11[2];
  v13 = v11[3];
  v14 = v11[4];
  result = v11[5];
  v15 = v12 == 291593097 && v13 == -876591041;
  v16 = v15 && v14 == -1188129301;
  v17 = v16 && (_DWORD)result == 209773980;
  if (v17
    || (v4 == -1250726091 ? (v18 = v5 == 686887383) : (v18 = 0),
        v18 ? (v19 = v6 == -1122435069) : (v19 = 0),
        v19 ? (v20 = v7 == -1819691262) : (v20 = 0),
        v20
     || (v12 == -1250726091 ? (v21 = v13 == 686887383) : (v21 = 0),
         v21 ? (v22 = v14 == -1122435069) : (v22 = 0),
         v22 ? (v23 = (_DWORD)result == -1819691262) : (v23 = 0),
         v23)))
  {
LABEL_50:
    if (!*((_BYTE *)this + 1464))
    {
      *((_BYTE *)this + 1464) = 1;
      PCURL::PCURL((PCURL *)&v24, CFSTR("Link Behavior Apply Mode Convert Pixels to Scale"));
      (*(void (**)(char *, PCString *, uint64_t))(*((_QWORD *)this + 194) + 848))((char *)this + 1552, &v24, 1);
      PCString::~PCString(&v24);
      return (*(uint64_t (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)this + 194) + 712))((char *)this + 1552, MEMORY[0x1E0CA2E68], 0, 0.0);
    }
  }
  else
  {
LABEL_49:
    if (*((_BYTE *)this + 1464))
    {
      *((_BYTE *)this + 1464) = 0;
      PCURL::PCURL((PCURL *)&v24, CFSTR("Link Behavior Apply Mode Enum"));
      (*(void (**)(char *, PCString *, uint64_t))(*((_QWORD *)this + 194) + 848))((char *)this + 1552, &v24, 1);
      PCString::~PCString(&v24);
      return (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)this + 194) + 280))((char *)this + 1552, 0);
    }
  }
  return result;
}

void sub_1B2F16968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZLinkBehavior::notify(OZLinkBehavior *this, char a2)
{
  OZLinkBehavior::notify((OZLinkBehavior *)((char *)this - 336), a2);
}

BOOL OZLinkBehavior::isRebuildUIChannel(OZLinkBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 2928) == a2;
}

void OZLinkBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const CMTime *v4;
  const void *v5;
  char *v6;
  int ValueAsInt;
  OZChannelBase *v8;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v5 = *(const void **)(v2 + 16);
      if (v5)
      else
        v6 = 0;
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v6 + 2928), v4, 0.0);
      v8 = (OZChannelBase *)(v6 + 3184);
      if (ValueAsInt)
        OZChannelBase::resetFlag(v8, 0x400000, 1);
      else
        OZChannelBase::setFlag(v8, 0x400000, 1);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void *OZLinkBehavior::checkForRecursion(OZLinkBehavior *this, OZObjectManipulator *a2)
{
  void *result;
  OZGroup *v4;
  void *v5;
  OZSceneNode *v6;

  if (!a2)
    return 0;
  result = (void *)(*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      v4 = (OZGroup *)result;
      if (v5)
        v6 = (OZSceneNode *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
      else
      return (void *)((OZGroup::hasDescendant(v4, v6) & 1) != 0);
    }
  }
  return result;
}

void OZLinkBehavior::updateReferenceIDs(std::string *a1, uint64_t a2)
{
  unsigned int ID;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  std::string::__raw *v12;
  std::string::__raw *v13;
  std::string::__raw *v14;
  std::string::__raw *v15;
  BOOL v16;
  OZChannelRef **v17;
  OZChannelRef *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  PCString v25;
  void *__p;
  OZChannelRef **v27;
  uint64_t v28;

  OZSingleChannelBehavior::updateReferenceIDs(a1, (uint64_t **)a2);
  ID = OZChannelRef::getID((OZChannelRef *)&a1[53]);
  v7 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(a2 + 8);
  v5 = v7;
  if (v7)
  {
    v8 = v6;
    do
    {
      v9 = *(_DWORD *)(v5 + 28);
      v10 = v9 >= ID;
      if (v9 >= ID)
        v11 = (uint64_t *)v5;
      else
        v11 = (uint64_t *)(v5 + 8);
      if (v10)
        v8 = (_QWORD *)v5;
      v5 = *v11;
    }
    while (*v11);
    if (v8 != v6 && ID >= *((_DWORD *)v8 + 7))
      OZChannelRef::setID(a1 + 53, *((_DWORD *)v8 + 8));
  }
  __p = 0;
  v27 = 0;
  v28 = 0;
  v12 = (std::string::__raw *)a1[62].__r_.__value_.__r.__words[2];
  v13 = (std::string::__raw *)&a1[63];
  if (v12 == v13)
  {
    v17 = 0;
  }
  else
  {
    do
    {
      OZLinkChannelExpression::getParamChannelRefs(v12[1].__words[2], &__p);
      v14 = (std::string::__raw *)v12->__words[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (std::string::__raw *)v14->__words[0];
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (std::string::__raw *)v12->__words[2];
          v16 = v15->__words[0] == (_QWORD)v12;
          v12 = v15;
        }
        while (!v16);
      }
      v12 = v15;
    }
    while (v15 != v13);
    v17 = (OZChannelRef **)__p;
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&v25);
  while (v17 != v27)
  {
    v18 = *v17;
    v19 = OZChannelRef::getID(*v17);
    v20 = *v6;
    if (*v6)
    {
      v21 = v6;
      do
      {
        v22 = *(_DWORD *)(v20 + 28);
        v23 = v22 >= v19;
        if (v22 >= v19)
          v24 = (uint64_t *)v20;
        else
          v24 = (uint64_t *)(v20 + 8);
        if (v23)
          v21 = (_QWORD *)v20;
        v20 = *v24;
      }
      while (*v24);
      if (v21 != v6 && v19 >= *((_DWORD *)v21 + 7))
        OZChannelRef::setID((std::string *)v18, *((_DWORD *)v21 + 8));
    }
    ++v17;
  }
  PCString::~PCString(&v25);
  if (__p)
  {
    v27 = (OZChannelRef **)__p;
    operator delete(__p);
  }
}

void sub_1B2F16C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'OZLinkBehavior::updateReferenceIDs(uint64_t a1, uint64_t a2)
{
  OZLinkBehavior::updateReferenceIDs((std::string *)(a1 - 16), a2);
}

void OZLinkBehavior::willReset(OZLinkBehavior *this)
{
  OZLinkBehavior::clearAll(this, 1);
}

uint64_t OZLinkBehavior::isAttributeCompatibleToDestChannel(OZLinkBehavior *this, int a2, OZChannelBase *a3)
{
  OZFactory *var1;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  char v17;

  if (a2 != 1)
  {
    if (a3)
    {
      v17 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)a3->var1 + 8), (int32x4_t)xmmword_1B3555770)))) ^ 1;
      return v17 & 1;
    }
LABEL_37:
    v17 = 0;
    return v17 & 1;
  }
  if (!a3)
    goto LABEL_37;
  var1 = a3->var1;
  v5 = *((_DWORD *)var1 + 2);
  v4 = *((_DWORD *)var1 + 3);
  v7 = *((_DWORD *)var1 + 4);
  v6 = *((_DWORD *)var1 + 5);
  v10 = v5 == -725694774 && v4 == 686756311 && v7 == -1640300541 && v6 == -1819691262;
  v17 = v10
     || (v5 == 291593097 ? (v11 = v4 == -876591041) : (v11 = 0),
         v11 ? (v12 = v7 == -1188129301) : (v12 = 0),
         v12 ? (v13 = v6 == 209773980) : (v13 = 0),
         v13)
     || v5 == -1250726091 && v4 == 686887383 && v7 == -1122435069 && v6 == -1819691262;
  return v17 & 1;
}

OZLinkBehavior *OZLinkBehavior::getEvalDepChansForRef(OZLinkBehavior *this, _QWORD *a2, uint64_t a3, OZLinkBehavior **a4)
{
  OZLinkBehavior *v4;
  OZChannelBase *SourceChannel;
  OZLinkBehavior *v7;

  if (a3)
  {
    v4 = this;
    if ((_QWORD *)((char *)this + 1064) == a2)
    {
      this = (OZLinkBehavior *)OZLinkBehavior::getSourceChannel(this);
      if (this)
      {
        SourceChannel = OZLinkBehavior::getSourceChannel(v4);
        this = (OZLinkBehavior *)operator new(0x18uLL);
        *((_QWORD *)this + 1) = a4;
        *((_QWORD *)this + 2) = SourceChannel;
        v7 = *a4;
        *(_QWORD *)this = *a4;
        *((_QWORD *)v7 + 1) = this;
        *a4 = this;
        a4[2] = (OZLinkBehavior *)((char *)a4[2] + 1);
      }
    }
  }
  return this;
}

void OZLinkBehavior::addExpressionParamChannel(uint64_t **this, OZLinkChannelExpression *a2, OZChannelBase *a3, int a4)
{
  OZChannelFolder *v7;
  __int128 v8;

  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__emplace_multi<std::pair<OZLinkChannelExpression *,OZChannelBase *>>(this + 191, &v8);
  if (a4)
  {
    v7 = (OZChannelFolder *)((uint64_t (*)(uint64_t **))(*this)[39])(this);
    OZChannelFolder::push_back(v7, a3);
  }
}

void OZLinkBehavior::fixParamChannelNames(OZLinkBehavior *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 188);
  v2 = (char *)this + 1512;
  if (v1 != (char *)this + 1512)
  {
    do
    {
      OZLinkChannelExpression::fixParamChannelNames(*((OZChannelBase ***)v1 + 5));
      v3 = (char *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

uint64_t *OZLinkBehavior::deleteExpressionParamChannels(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  OZChannelBase *v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  OZChannelFolder *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  OZChannelBase *v20;
  unint64_t v21;

  v21 = a2;
  v5 = a1 + 191;
  v6 = std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__equal_range_multi<OZLinkChannelExpression *>((uint64_t)(a1 + 191), &v21);
  v7 = v6;
  v9 = v8;
  if (v6 != v8)
  {
    v10 = v6;
    do
    {
      v11 = (OZChannelBase *)v10[5];
      v20 = v11;
      if (a3)
      {
        for (i = *(_QWORD **)(a3 + 8); i; i = (_QWORD *)*i)
        {
          v13 = i[4];
          if ((unint64_t)v11 >= v13)
          {
            if (v13 >= (unint64_t)v11)
              goto LABEL_14;
            ++i;
          }
        }
        std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a3, (unint64_t *)&v20, (uint64_t *)&v20);
      }
      if (((uint64_t (*)(uint64_t **))(*a1)[40])(a1))
      {
        v14 = ((uint64_t (*)(uint64_t **))(*a1)[40])(a1);
        (*(void (**)(uint64_t, OZChannelBase *))(*(_QWORD *)v14 + 888))(v14, v20);
      }
      v15 = (OZChannelFolder *)((uint64_t (*)(uint64_t **))(*a1)[39])(a1);
      OZChannelFolder::removeDescendant(v15, v20);
      if (v20)
        (*((void (**)(OZChannelBase *))v20->var0 + 1))(v20);
LABEL_14:
      v16 = (uint64_t *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v9);
  }
  return std::__tree<unsigned int>::erase(v5, v7, v9);
}

uint64_t OZLinkBehavior::getTargetChannelID(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v2 = *(_QWORD **)(a1 + 1504);
  if (v2 == (_QWORD *)(a1 + 1512))
    return 0xFFFFFFFFLL;
  while (v2[5] != a2)
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    v2 = v4;
    if (v4 == (_QWORD *)(a1 + 1512))
      return 0xFFFFFFFFLL;
  }
  return *((unsigned int *)v2 + 8);
}

void OZLinkBehavior::writeBody(OZLinkBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  OZScene **v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  BOOL v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t TargetChannelID;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  char *v29;
  PCString v30;
  _BYTE v31[8];

  v10 = (OZScene **)Li3DEngineScene::sceneManager((OZLinkBehavior *)((char *)this + 864));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v31, v10);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZLinkBehaviorScope);
  v11 = (char *)*((_QWORD *)this + 188);
  v12 = (char *)this + 1512;
  if (v11 != (char *)this + 1512)
  {
    do
    {
      v13 = (_QWORD *)*((_QWORD *)v11 + 5);
      if (v13[5] && v13[6] && v13[7])
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1007);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 1030, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v11 + 5) + 40) + 24));
        (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 1031, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v11 + 5) + 48) + 24));
        (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 1032, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v11 + 5) + 56) + 24));
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
      v14 = (char *)*((_QWORD *)v11 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char *)*((_QWORD *)v11 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v11;
          v11 = v15;
        }
        while (!v16);
      }
      v11 = v15;
    }
    while (v15 != v12);
  }
  OZSingleChannelBehavior::writeBody(this, a2, a3, a4, a5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1002);
  if (OZLinkBehavior::getSourceChannel(this))
  {
    v17 = (char *)this + 1272;
    if (*((char *)this + 1295) < 0)
      v17 = *(const char **)v17;
    PCString::PCString(&v30, v17);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v30);
    PCString::~PCString(&v30);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v18 = (char *)*((_QWORD *)this + 188);
  if (v18 != v12)
  {
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1003);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1005);
      v19 = *((_QWORD *)v18 + 5);
      v20 = (const char *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0)
        v20 = *(const char **)v20;
      PCString::PCString(&v30, v20);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1006);
      TargetChannelID = OZLinkBehavior::getTargetChannelID((uint64_t)this, *((_QWORD *)v18 + 5));
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, TargetChannelID);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1020);
      v22 = *((_QWORD *)v18 + 5);
      v23 = (const char *)(v22 + 64);
      if (*(char *)(v22 + 87) < 0)
        v23 = *(const char **)v23;
      PCString::PCString(&v30, v23);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1021);
      v24 = *((_QWORD *)v18 + 5);
      v25 = (const char *)(v24 + 88);
      if (*(char *)(v24 + 111) < 0)
        v25 = *(const char **)v25;
      PCString::PCString(&v30, v25);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1022);
      v26 = *((_QWORD *)v18 + 5);
      v27 = (const char *)(v26 + 112);
      if (*(char *)(v26 + 135) < 0)
        v27 = *(const char **)v27;
      PCString::PCString(&v30, v27);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v30);
      PCString::~PCString(&v30);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v28 = (char *)*((_QWORD *)v18 + 1);
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (char *)*((_QWORD *)v18 + 2);
          v16 = *(_QWORD *)v29 == (_QWORD)v18;
          v18 = v29;
        }
        while (!v16);
      }
      v18 = v29;
    }
    while (v29 != v12);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v31);
}

void sub_1B2F174A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZLinkBehavior::writeBody(OZLinkBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  OZLinkBehavior::writeBody((OZLinkBehavior *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZLinkBehavior::parseBegin(OZLinkBehavior *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZLinkBehaviorScope);
  OZSingleChannelBehavior::parseBegin(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZLinkBehavior::parseBegin(OZLinkBehavior *this, PCSerializerReadStream *a2)
{
  OZSingleChannelBehavior *v3;

  v3 = (OZLinkBehavior *)((char *)this - 48);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZLinkBehaviorScope);
  OZSingleChannelBehavior::parseBegin(v3, a2);
  return 1;
}

uint64_t OZLinkBehavior::parseElement(OZLinkBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  uint64_t v7;
  OZLinkChannelExpression *v8;
  OZLinkChannelExpression *v9;
  OZChannelDouble *v10;
  OZChannelDouble *v11;
  OZChannelDouble *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  unsigned int v17;
  PCSharedCount v18;

  PCSharedCount::PCSharedCount(&v18);
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > 1019)
  {
    switch(v6)
    {
      case 1020:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v18);
        v13 = *((_QWORD *)this + 493);
        if (!v13)
          goto LABEL_18;
        OZChannelRef::OZChannelRef((OZChannelRef *)&v16, (PCString *)&v18);
        OZChannelRef::operator=((std::string *)(v13 + 64), &v16);
        break;
      case 1021:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v18);
        v14 = *((_QWORD *)this + 493);
        if (!v14)
          goto LABEL_18;
        OZChannelRef::OZChannelRef((OZChannelRef *)&v16, (PCString *)&v18);
        OZChannelRef::operator=((std::string *)(v14 + 88), &v16);
        break;
      case 1022:
        PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v18);
        v7 = *((_QWORD *)this + 493);
        if (!v7)
          goto LABEL_18;
        OZChannelRef::OZChannelRef((OZChannelRef *)&v16, (PCString *)&v18);
        OZChannelRef::operator=((std::string *)(v7 + 112), &v16);
        break;
      default:
        goto LABEL_18;
    }
LABEL_17:
    OZChannelRef::~OZChannelRef((void **)&v16.__r_.__value_.__l.__data_);
    goto LABEL_18;
  }
  switch(v6)
  {
    case 1002:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v18);
      OZChannelRef::OZChannelRef((OZChannelRef *)&v16, (PCString *)&v18);
      OZLinkBehavior::setSourceChannelRef(this, &v16, 1);
      goto LABEL_17;
    case 1005:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v18);
      v8 = (OZLinkChannelExpression *)operator new();
      OZChannelRef::OZChannelRef((OZChannelRef *)&v16, (PCString *)&v18);
      OZLinkChannelExpression::OZLinkChannelExpression(v8, this, (const OZChannelRef *)&v16, 0);
      OZChannelRef::~OZChannelRef((void **)&v16.__r_.__value_.__l.__data_);
      *((_QWORD *)this + 493) = v8;
      break;
    case 1006:
      LODWORD(v16.__r_.__value_.__l.__data_) = 0;
      PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v16);
      v9 = (OZLinkChannelExpression *)*((_QWORD *)this + 493);
      if (v9)
        OZLinkBehavior::addExpression((uint64_t **)this, v16.__r_.__value_.__l.__data_, v9);
      break;
    case 1007:
      v17 = 0;
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 1030, (uint64_t)&v17);
      v10 = (OZChannelDouble *)operator new();
      PCURL::PCURL((PCURL *)&v16, CFSTR("Link Behavior Value Offset"));
      OZChannelDouble::OZChannelDouble(v10, (const PCString *)&v16, (OZChannelFolder *)((char *)this + 56), v17, 0, 0, 0);
      PCString::~PCString((PCString *)&v16);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 1031, (uint64_t)&v17);
      v11 = (OZChannelDouble *)operator new();
      PCURL::PCURL((PCURL *)&v16, CFSTR("Link Behavior Value Range Min"));
      OZChannelDouble::OZChannelDouble(v11, (const PCString *)&v16, (OZChannelFolder *)((char *)this + 56), v17, 0, 0, 0);
      PCString::~PCString((PCString *)&v16);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 1032, (uint64_t)&v17);
      v12 = (OZChannelDouble *)operator new();
      PCURL::PCURL((PCURL *)&v16, CFSTR("Link Behavior Value Range Max"));
      OZChannelDouble::OZChannelDouble(v12, (const PCString *)&v16, (OZChannelFolder *)((char *)this + 56), v17, 0, 0, 0);
      PCString::~PCString((PCString *)&v16);
      break;
    default:
      break;
  }
LABEL_18:
  OZSingleChannelBehavior::parseElement((OZTimeMarkerSet **)this, a2, a3);
  PCString::~PCString((PCString *)&v18);
  return 1;
}

void sub_1B2F178F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  OZChannelRef::~OZChannelRef((void **)&a10.var0);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZLinkBehavior::parseElement(OZLinkBehavior *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZLinkBehavior::parseElement((OZLinkBehavior *)((char *)this - 48), a2, a3);
  return 1;
}

uint64_t OZLinkBehavior::didFinishLoadingIntoScene(OZChannel *this)
{
  OZLinkBehavior::resolveExpressionChannels(this);
  OZLinkBehavior::calcInternalScale((OZLinkBehavior *)this);
  OZLinkBehavior::fixParamChannelNames((OZLinkBehavior *)this);
  OZLinkBehavior::validateParamStates((OZLinkBehavior *)this);
  return OZLinkBehavior::updateApplyMode((OZLinkBehavior *)this);
}

uint64_t `non-virtual thunk to'OZLinkBehavior::didFinishLoadingIntoScene(OZLinkBehavior *this)
{
  return OZLinkBehavior::didFinishLoadingIntoScene((OZChannel *)((char *)this - 16));
}

uint64_t OZLinkBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  _QWORD *i;
  unint64_t v11;
  char *TargetElement;
  const void *Object;
  char *v14;
  OZScene *v15;
  unint64_t v16;
  unint64_t *v17;

  result = OZChannel::getValueAsUint((OZChannel *)(a1 + 1296), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result)
  {
    v9 = a1 + 864;
    for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
    {
      v11 = i[4];
      if (v9 >= v11)
      {
        if (v11 >= v9)
          return result;
        ++i;
      }
    }
    v17 = (unint64_t *)(a1 + 864);
    std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v17, (uint64_t *)&v17);
    if (a2)
    {
      PCDirectedGraph<OZLocking *>::addEdge(a3, a2, a1 + 864);
    }
    else
    {
      v16 = a1 + 864;
      v17 = &v16;
      std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, &v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17);
    }
    TargetElement = (char *)OZLinkBehavior::getTargetElement((OZLinkBehavior *)a1);
    if (TargetElement)
      OZLocking::getLockDependenciesForElement(TargetElement, a1 + 864, a3, a4);
    Object = (const void *)OZChanObjectManipRef::getObject((OZChannelBase *)(a1 + 1064));
    if (Object)
    {
      if (v14)
        OZLocking::getLockDependenciesForElement(v14, a1 + 864, a3, a4);
    }
    v15 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
    OZLocking::addLockDependenciesForDependents((char *)(a1 + 864), v15, (uint64_t)a3, a4);
    v17 = (unint64_t *)(a1 + 864);
    return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v17);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZLinkBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return OZLinkBehavior::getLockDependencies(a1 - 864, a2, a3, a4);
}

uint64_t OZLinkBehavior::getLockingGroups(OZLinkBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return (*(uint64_t (**)(OZLinkBehavior *))(*(_QWORD *)this + 336))(this) + 1784;
  return result;
}

uint64_t `non-virtual thunk to'OZLinkBehavior::getLockingGroups(OZLinkBehavior *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 864;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 108) + 336))((char *)this - 864);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 336))(v1) + 1784;
  return result;
}

uint64_t OZLinkBehavior::canReferenceBehavior(OZLinkBehavior *this, OZObjectManipulator *a2)
{
  return OZLinkBehavior::checkForRecursion(this, a2) ^ 1;
}

uint64_t `non-virtual thunk to'OZLinkBehavior::getLockingID(OZLinkBehavior *this)
{
  return *((unsigned int *)this - 196);
}

uint64_t OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::OZLinkBehavior_applyModeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::OZLinkBehavior_applyModeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::_OZLinkBehavior_applyModeChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *v0;

  if (!OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::_OZLinkBehavior_applyModeChan)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *)operator new();
    OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::OZLinkBehavior_applyModeChanImpl(v0);
    OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::_OZLinkBehavior_applyModeChan = (uint64_t)v0;
  }
}

void sub_1B2F17CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *OZLinkBehavior::OZLinkBehavior_applyModeChanImpl::OZLinkBehavior_applyModeChanImpl(OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 2.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 2.0, 0, 1);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_applyModeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65B8080;
  *((_QWORD *)this + 5) = &unk_1E65B80A0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2F17D70(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_scaleChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::OZLinkBehavior_scaleChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::OZLinkBehavior_scaleChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_scaleChanImpl::_OZLinkBehavior_scaleChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_scaleChanImpl *v0;

  if (!OZLinkBehavior::OZLinkBehavior_scaleChanImpl::_OZLinkBehavior_scaleChan)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_scaleChanImpl *)operator new();
    OZLinkBehavior::OZLinkBehavior_scaleChanImpl::OZLinkBehavior_scaleChanImpl(v0);
    OZLinkBehavior::OZLinkBehavior_scaleChanImpl::_OZLinkBehavior_scaleChan = (uint64_t)v0;
  }
}

void sub_1B2F17E3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_scaleChanImpl *OZLinkBehavior::OZLinkBehavior_scaleChanImpl::OZLinkBehavior_scaleChanImpl(OZLinkBehavior::OZLinkBehavior_scaleChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_scaleChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65B80F8;
  *((_QWORD *)this + 5) = &unk_1E65B8118;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F17EF0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(OZLinkBehavior::OZLinkBehavior_scaleChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::OZLinkBehavior_scaleChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::OZLinkBehavior_scaleChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_scaleChanInfo::_OZLinkBehavior_scaleChanInfo;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_scaleChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_scaleChanInfo *v0;

  if (!OZLinkBehavior::OZLinkBehavior_scaleChanInfo::_OZLinkBehavior_scaleChanInfo)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_scaleChanInfo *)operator new();
    OZLinkBehavior::OZLinkBehavior_scaleChanInfo::OZLinkBehavior_scaleChanInfo(v0);
    OZLinkBehavior::OZLinkBehavior_scaleChanInfo::_OZLinkBehavior_scaleChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F17FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_scaleChanInfo *OZLinkBehavior::OZLinkBehavior_scaleChanInfo::OZLinkBehavior_scaleChanInfo(OZLinkBehavior::OZLinkBehavior_scaleChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 0.5, 0.1, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_scaleChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65B8170;
  *((_QWORD *)this + 10) = &unk_1E65B8190;
  return this;
}

void sub_1B2F18068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::OZLinkBehavior_mixModeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::OZLinkBehavior_mixModeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::_OZLinkBehavior_mixModeChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *v0;

  if (!OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::_OZLinkBehavior_mixModeChan)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *)operator new();
    OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::OZLinkBehavior_mixModeChanImpl(v0);
    OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::_OZLinkBehavior_mixModeChan = (uint64_t)v0;
  }
}

void sub_1B2F18134(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *OZLinkBehavior::OZLinkBehavior_mixModeChanImpl::OZLinkBehavior_mixModeChanImpl(OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 6.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 6.0, 0, 1);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_mixModeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65B81E8;
  *((_QWORD *)this + 5) = &unk_1E65B8208;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2F181E4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::OZLinkBehavior_easeRangeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::OZLinkBehavior_easeRangeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::_OZLinkBehavior_easeRangeChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *v0;

  if (!OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::_OZLinkBehavior_easeRangeChan)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *)operator new();
    OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::OZLinkBehavior_easeRangeChanImpl(v0);
    OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::_OZLinkBehavior_easeRangeChan = (uint64_t)v0;
  }
}

void sub_1B2F182B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl::OZLinkBehavior_easeRangeChanImpl(OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 10.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 10.0, 1, 1);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_easeRangeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65B8260;
  *((_QWORD *)this + 5) = &unk_1E65B8280;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 100.0);
  return this;
}

void sub_1B2F18360(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::OZLinkBehavior_easeRangeChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::OZLinkBehavior_easeRangeChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::_OZLinkBehavior_easeRangeChanInfo;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *v0;

  if (!OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::_OZLinkBehavior_easeRangeChanInfo)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *)operator new();
    OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::OZLinkBehavior_easeRangeChanInfo(v0);
    OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::_OZLinkBehavior_easeRangeChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F1842C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo::OZLinkBehavior_easeRangeChanInfo(OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 10.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_easeRangeChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65B82D8;
  *((_QWORD *)this + 10) = &unk_1E65B82F8;
  return this;
}

void sub_1B2F184D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_customMixChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::OZLinkBehavior_customMixChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::OZLinkBehavior_customMixChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_customMixChanImpl::_OZLinkBehavior_customMixChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_customMixChanImpl *v0;

  if (!OZLinkBehavior::OZLinkBehavior_customMixChanImpl::_OZLinkBehavior_customMixChan)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_customMixChanImpl *)operator new();
    OZLinkBehavior::OZLinkBehavior_customMixChanImpl::OZLinkBehavior_customMixChanImpl(v0);
    OZLinkBehavior::OZLinkBehavior_customMixChanImpl::_OZLinkBehavior_customMixChan = (uint64_t)v0;
  }
}

void sub_1B2F185A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_customMixChanImpl *OZLinkBehavior::OZLinkBehavior_customMixChanImpl::OZLinkBehavior_customMixChanImpl(OZLinkBehavior::OZLinkBehavior_customMixChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_customMixChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65B8350;
  *((_QWORD *)this + 5) = &unk_1E65B8370;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2F18650(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(OZLinkBehavior::OZLinkBehavior_customMixChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::OZLinkBehavior_customMixChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::OZLinkBehavior_customMixChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_customMixChanInfo::_OZLinkBehavior_customMixChanInfo;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_customMixChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_customMixChanInfo *v0;

  if (!OZLinkBehavior::OZLinkBehavior_customMixChanInfo::_OZLinkBehavior_customMixChanInfo)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_customMixChanInfo *)operator new();
    OZLinkBehavior::OZLinkBehavior_customMixChanInfo::OZLinkBehavior_customMixChanInfo(v0);
    OZLinkBehavior::OZLinkBehavior_customMixChanInfo::_OZLinkBehavior_customMixChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F1871C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_customMixChanInfo *OZLinkBehavior::OZLinkBehavior_customMixChanInfo::OZLinkBehavior_customMixChanInfo(OZLinkBehavior::OZLinkBehavior_customMixChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 0.1, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_customMixChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65B83C8;
  *((_QWORD *)this + 10) = &unk_1E65B83E8;
  return this;
}

void sub_1B2F187CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::OZLinkBehavior_applyLinkWhenChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::OZLinkBehavior_applyLinkWhenChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::_OZLinkBehavior_applyLinkWhenChan;
}

void std::__call_once_param<std::tuple<OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *v0;

  if (!OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::_OZLinkBehavior_applyLinkWhenChan)
  {
    v0 = (OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *)operator new();
    OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::OZLinkBehavior_applyLinkWhenChanImpl(v0);
    OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::_OZLinkBehavior_applyLinkWhenChan = (uint64_t)v0;
  }
}

void sub_1B2F18898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl::OZLinkBehavior_applyLinkWhenChanImpl(OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZLinkBehavior::OZLinkBehavior_applyLinkWhenChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65B8440;
  *((_QWORD *)this + 5) = &unk_1E65B8460;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2F18948(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,OZLinkChannelExpression *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZLinkChannelExpression *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZLinkChannelExpression *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,OZLinkChannelExpression *>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  _DWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__emplace_multi<std::pair<OZLinkChannelExpression *,OZChannelBase *>>(uint64_t **a1, __int128 *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x30uLL);
  v5 = *a2;
  *((_OWORD *)v4 + 2) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if ((unint64_t)v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

_QWORD *std::__tree<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::__map_value_compare<OZLinkChannelExpression *,std::__value_type<OZLinkChannelExpression *,OZChannelBase *>,std::less<OZLinkChannelExpression *>,true>,std::allocator<std::__value_type<OZLinkChannelExpression *,OZChannelBase *>>>::__equal_range_multi<OZLinkChannelExpression *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = v3[4];
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (_QWORD *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = v7[4];
      v9 = v8 >= v4;
      if (v8 >= v4)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        result = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  v11 = (_QWORD *)v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= v11[4])
        v12 = v11 + 1;
      else
        v12 = v11;
      v11 = (_QWORD *)*v12;
    }
    while (*v12);
  }
  return result;
}

void OZCollisionBehavior::OZCollisionBehavior(OZCollisionBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v4 = &off_1E65B84B8;
  v4[2] = &unk_1E65B87B0;
  v4[6] = &unk_1E65B8A08;
  v4[42] = &unk_1E65B8A60;
}

void OZCollisionBehavior::OZCollisionBehavior(OZCollisionBehavior *this, OZCollisionBehavior *a2, char a3)
{
  _QWORD *v3;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *v3 = &off_1E65B84B8;
  v3[2] = &unk_1E65B87B0;
  v3[6] = &unk_1E65B8A08;
  v3[42] = &unk_1E65B8A60;
}

void `non-virtual thunk to'OZCollisionBehavior::~OZCollisionBehavior(OZCollisionBehavior *this)
{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 16));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 48));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 336));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZCollisionBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void OZCollisionBehavior::~OZCollisionBehavior(OZCollisionBehavior *this)
{
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZCollisionBehavior::handleCollisions(OZCollisionBehavior *this, OZTransformNode *a2, OZSimulationState *a3, OZSimulationState *a4, BOOL a5, BOOL *a6)
{
  *a6 = 0;
}

__n128 OZCollisionBehavior::handleCollisions(OZCollisionBehavior *this, OZTransformNode *a2, OZSimStateArray *a3, OZSimStateArray *a4, unsigned int a5, BOOL *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 result;
  __int128 *v37;
  uint64_t v38;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[4];
  __int128 v50;
  _QWORD v51[4];
  __int128 v52;
  _QWORD v53[4];
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;

  v6 = *(_QWORD *)a4;
  if (*(_QWORD *)a4 != *((_QWORD *)a4 + 1))
  {
    v7 = 0;
    v8 = *(_QWORD *)a3;
    v44 = (char *)a3 + 24;
    v37 = (__int128 *)((char *)a4 + 24);
    v38 = *(_QWORD *)a4;
    do
    {
      v9 = v6 + v7;
      v60 = 0x3FF0000000000000;
      v62 = 0;
      v61 = 0uLL;
      v47 = 0x3FF0000000000000;
      v57 = 0;
      v56 = 0uLL;
      v48 = 0u;
      memset(v49, 0, sizeof(v49));
      v50 = 0u;
      memset(v51, 0, sizeof(v51));
      v52 = 0u;
      memset(v53, 0, sizeof(v53));
      v10 = *(_OWORD *)(v6 + v7);
      v59 = *(_QWORD *)(v6 + v7 + 16);
      v11 = (uint64_t *)(v6 + v7 + 24);
      v58 = v10;
      if (v11 != &v60)
      {
        v60 = *v11;
        v12 = *(_OWORD *)(v9 + 32);
        v62 = *(_QWORD *)(v9 + 48);
        v61 = v12;
      }
      v13 = *(_OWORD *)(v9 + 56);
      v64 = *(_QWORD *)(v9 + 72);
      v63 = v13;
      v14 = *(_OWORD *)(v9 + 80);
      v66 = *(_QWORD *)(v9 + 96);
      v65 = v14;
      v15 = *(_OWORD *)(v9 + 104);
      v68 = *(_QWORD *)(v9 + 120);
      v67 = v15;
      v16 = *(_OWORD *)(v9 + 128);
      v70 = *(_QWORD *)(v9 + 144);
      v69 = v16;
      v17 = *(__n128 *)(v9 + 152);
      v72 = *(_QWORD *)(v9 + 168);
      v71 = v17;
      v73 = *v37;
      v74 = *((_QWORD *)a4 + 5);
      v18 = *(_QWORD *)(v9 + 192);
      v75 = *(_OWORD *)(v9 + 176);
      v76 = v18;
      v19 = *(_QWORD *)(v8 + v7 + 16);
      v20 = (uint64_t *)(v8 + v7 + 24);
      v45 = *(_OWORD *)(v8 + v7);
      v46 = v19;
      if (v20 != &v47)
      {
        v47 = *v20;
        v21 = *(_OWORD *)(v8 + v7 + 32);
        v49[0] = *(_QWORD *)(v8 + v7 + 48);
        v48 = v21;
      }
      v22 = v8;
      v23 = *(_OWORD *)(v8 + v7 + 56);
      v49[3] = *(_QWORD *)(v8 + v7 + 72);
      *(_OWORD *)&v49[1] = v23;
      v24 = *(_OWORD *)(v8 + v7 + 80);
      v51[0] = *(_QWORD *)(v8 + v7 + 96);
      v50 = v24;
      v25 = *(_OWORD *)(v8 + v7 + 104);
      v51[3] = *(_QWORD *)(v8 + v7 + 120);
      *(_OWORD *)&v51[1] = v25;
      v26 = *(_OWORD *)(v8 + v7 + 128);
      v53[0] = *(_QWORD *)(v8 + v7 + 144);
      v52 = v26;
      v27 = *(_OWORD *)(v8 + v7 + 152);
      v53[3] = *(_QWORD *)(v8 + v7 + 168);
      *(_OWORD *)&v53[1] = v27;
      v54 = *(_OWORD *)v44;
      v55 = *((_QWORD *)v44 + 2);
      v28 = *(_QWORD *)(v8 + v7 + 192);
      v56 = *(_OWORD *)(v8 + v7 + 176);
      v57 = v28;
      (*(void (**)(OZCollisionBehavior *, OZTransformNode *, __int128 *, __int128 *, _QWORD, BOOL *))(*(_QWORD *)this + 728))(this, a2, &v45, &v58, a5, a6);
      v29 = v58;
      *(_QWORD *)(v9 + 16) = v59;
      *(_OWORD *)v9 = v29;
      v6 = v38;
      if (v11 != &v60)
      {
        *v11 = v60;
        v30 = v38 + v7;
        v31 = v61;
        *(_QWORD *)(v30 + 48) = v62;
        *(_OWORD *)(v30 + 32) = v31;
      }
      v32 = v63;
      *(_QWORD *)(v9 + 72) = v64;
      *(_OWORD *)(v9 + 56) = v32;
      v33 = v65;
      *(_QWORD *)(v9 + 96) = v66;
      *(_OWORD *)(v9 + 80) = v33;
      v34 = v67;
      *(_QWORD *)(v9 + 120) = v68;
      *(_OWORD *)(v9 + 104) = v34;
      v35 = v69;
      *(_QWORD *)(v9 + 144) = v70;
      *(_OWORD *)(v9 + 128) = v35;
      result = v71;
      *(_QWORD *)(v9 + 168) = v72;
      *(__n128 *)(v9 + 152) = result;
      v7 += 248;
      v8 = v22;
    }
    while (v38 + v7 != *((_QWORD *)a4 + 1));
  }
  return result;
}

void OZReflexiveBehavior::OZReflexiveBehavior(OZReflexiveBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  *v5 = &off_1E65B8AA0;
  v5[2] = &unk_1E65B8D88;
  v5[6] = &unk_1E65B8FE0;
  v5[42] = &unk_1E65B9038;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Behavior Affects Leaf Nodes"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 344), 0, &v6, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0, 0);
  PCString::~PCString(&v6);
  *(_DWORD *)((char *)this + 497) = 0x1000000;
}

void sub_1B2F190B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSimulationBehavior *v10;

  PCString::~PCString(&a10);
  OZSimulationBehavior::~OZSimulationBehavior(v10);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior::OZReflexiveBehavior(OZReflexiveBehavior *this, OZReflexiveBehavior *a2, char a3)
{
  uint64_t v5;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65B8AA0;
  *(_QWORD *)(v5 + 16) = &unk_1E65B8D88;
  *(_QWORD *)(v5 + 48) = &unk_1E65B8FE0;
  *(_QWORD *)(v5 + 336) = &unk_1E65B9038;
  OZChannelBool::OZChannelBool((OZChannelBool *)(v5 + 344), (const OZChannelBase *)((char *)a2 + 344), (OZChannelFolder *)((char *)this + 56));
  *((_BYTE *)this + 497) = 0;
  *((_BYTE *)this + 498) = *((_BYTE *)a2 + 498);
  *(_WORD *)((char *)this + 499) = *(_WORD *)((char *)a2 + 499);
}

void sub_1B2F19150(_Unwind_Exception *a1)
{
  OZSimulationBehavior *v1;

  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior::~OZReflexiveBehavior(OZReflexiveBehavior *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E65B8AA0;
  *((_QWORD *)this + 2) = &unk_1E65B8D88;
  *((_QWORD *)this + 6) = &unk_1E65B8FE0;
  *((_QWORD *)this + 42) = &unk_1E65B9038;
  if (OZBehavior::getSceneNode(this))
  {
    v2 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(_QWORD *)this + 320))(this);
    v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 640))(v2);
    OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  }
  if (*((_BYTE *)this + 497))
  {
    v4 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::removeCPPObserver(*(_QWORD *)(v4 + 1584));
    *((_BYTE *)this + 497) = 0;
  }
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 344));
  OZSimulationBehavior::~OZSimulationBehavior(this);
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZReflexiveBehavior::~OZReflexiveBehavior(OZReflexiveBehavior *this)
{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 16));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 48));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 336));
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZReflexiveBehavior::~OZReflexiveBehavior((OZReflexiveBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZReflexiveBehavior::operator=(uint64_t a1, const void *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;

  OZSimulationBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  result = OZChannelBase::operator=(a1 + 344, (uint64_t)(v4 + 344));
  *(_BYTE *)(a1 + 496) = v5[496];
  *(_WORD *)(a1 + 498) = *((_WORD *)v5 + 249);
  return result;
}

void *OZReflexiveBehavior::findPreviousSimulationBehavior(OZReflexiveBehavior *this, OZSceneNode **a2)
{
  OZSceneNode *v2;
  OZReflexiveBehavior *v5;
  OZReflexiveBehavior *v6;
  unint64_t v7;
  __int128 v9;

  v2 = (OZSceneNode *)(a2 + 125);
  if (a2 + 125 == (OZSceneNode **)a2[126])
    return 0;
  v5 = 0;
  do
  {
    v6 = *(OZReflexiveBehavior **)(*(_QWORD *)v2 + 16);
    if (v6 == this)
      break;
    v7 = *((_QWORD *)v6 + 1);
    v9 = xmmword_1B355DD20;
    if (OZFactory::isKindOfClass(v7, (int32x4_t *)&v9))
      v5 = v6;
    v2 = *(OZSceneNode **)v2;
  }
  while (v2 != a2[126]);
  if (!v5)
    return 0;
  else
}

uint64_t OZReflexiveBehavior::didAddToNode(OZReflexiveBehavior *this, OZSceneNode **a2)
{
  void *PreviousSimulationBehavior;
  _QWORD *v5;
  int v6;
  OZSceneNode *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;

  PreviousSimulationBehavior = OZReflexiveBehavior::findPreviousSimulationBehavior(this, a2);
  v5 = (_QWORD *)(*((uint64_t (**)(OZSceneNode **))*a2 + 80))(a2);
  OZChannelObjectRoot::insertBehaviorAfter(v5, (uint64_t)this, (uint64_t)PreviousSimulationBehavior);
  v6 = (*((uint64_t (**)(OZSceneNode **))*a2 + 126))(a2);
  *((_BYTE *)this + 496) = v6;
  if (v6 && !*((_BYTE *)this + 499))
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 344), 2, 0);
  else
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 344), 2, 0);
  if (*((_BYTE *)this + 500))
  {
    if (*((_BYTE *)this + 496) && !*((_BYTE *)this + 499))
    {
      v7 = a2[1];
      v9 = *((_DWORD *)v7 + 2);
      v8 = *((_DWORD *)v7 + 3);
      v11 = *((_DWORD *)v7 + 4);
      v10 = *((_DWORD *)v7 + 5);
      v12 = v9 == -351952328 && v8 == -1278930473;
      v13 = v12 && v11 == -1492189181;
      v14 = v13 && v10 == -1821967528;
      if (v14 || v9 == -1953631563 && v8 == -1287843369 && v11 == -1417084925 && v10 == -1821967528)
      {
        OZChannel::setDefaultValue((OZChannel *)((char *)this + 344), 1.0);
        OZChannelBase::reset((OZChannelBase *)((char *)this + 344), 0);
        *((_BYTE *)this + 498) = 1;
      }
    }
    *((_BYTE *)this + 500) = 0;
  }
  if (!*((_BYTE *)this + 497))
  {
    v15 = (*((uint64_t (**)(OZSceneNode **))*a2 + 34))(a2);
    if (v15)
    {
      OZDocument::addCPPObserver(*(_QWORD *)(v15 + 1584), (uint64_t)this + 336, 1001);
      *((_BYTE *)this + 497) = 1;
    }
  }
  return OZSimulationBehavior::didAddToNode((uint64_t)this, (OZSceneNode *)a2);
}

uint64_t OZReflexiveBehavior::didInsert(OZReflexiveBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  return (*(uint64_t (**)(OZReflexiveBehavior *, OZSceneNode *))(*(_QWORD *)this + 96))(this, a2);
}

void OZReflexiveBehavior::willRemove(OZReflexiveBehavior *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(_QWORD *)this + 320))(this);
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 640))(v2);
  OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  if (*((_BYTE *)this + 497))
  {
    v4 = (*(uint64_t (**)(OZReflexiveBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::removeCPPObserver(*(_QWORD *)(v4 + 1584));
    *((_BYTE *)this + 497) = 0;
  }
}

uint64_t *OZReflexiveBehavior::didAddSceneNodeToScene(uint64_t *this, OZScene *a2)
{
  uint64_t *v2;

  if (!*((_BYTE *)this + 497))
  {
    v2 = this;
    this = OZDocument::addCPPObserver(*((_QWORD *)a2 + 198), (uint64_t)(this + 42), 1001);
    *((_BYTE *)v2 + 497) = 1;
  }
  return this;
}

uint64_t OZReflexiveBehavior::willRemoveSceneNodeFromScene(uint64_t this, OZScene *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 497))
  {
    v2 = this;
    this = OZDocument::removeCPPObserver(*((_QWORD *)a2 + 198));
    *(_BYTE *)(v2 + 497) = 0;
  }
  return this;
}

BOOL OZReflexiveBehavior::affectsSelf(OZReflexiveBehavior *this)
{
  return !*((_BYTE *)this + 496) || *((_BYTE *)this + 498) == 0;
}

uint64_t OZReflexiveBehavior::setAffectsLeafNodes(OZReflexiveBehavior *this, unsigned int a2)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 344), MEMORY[0x1E0CA2E68], (double)a2, 0);
}

OZChannelBase *OZReflexiveBehavior::hideAffectsLeafNodes(OZReflexiveBehavior *this, int a2)
{
  char v2;
  OZChannelBase *v4;
  OZChannelBase *result;

  v2 = a2;
  v4 = (OZChannelBase *)((char *)this + 344);
  if (a2)
    result = OZChannelBase::setFlag(v4, 2, 0);
  else
    result = OZChannelBase::resetFlag(v4, 2, 0);
  *((_BYTE *)this + 499) = v2;
  return result;
}

uint64_t OZReflexiveBehavior::notify(OZReflexiveBehavior *this, char a2)
{
  uint64_t result;
  uint64_t v5;
  OZChannelBase *v6;

  result = (*(uint64_t (**)(OZReflexiveBehavior *))(*(_QWORD *)this + 336))(this);
  if ((a2 & 8) != 0)
  {
    v5 = result;
    result = *(_QWORD *)(*(_QWORD *)(result + 1584) + 168);
    if (result)
    {
      result = OZNotificationManager::wasChannelModified((OZNotificationManager *)result, (const OZChannelBase *)((char *)this + 344));
      if ((_DWORD)result)
      {
        v6 = *(OZChannelBase **)(v5 + 1504);
        if (v6)
          OZChannelBase::setRangeName(v6, (const PCString *)1);
        result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E0CA2E68], 0.0);
        *((_BYTE *)this + 498) = (_DWORD)result != 0;
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'OZReflexiveBehavior::notify(OZReflexiveBehavior *this, char a2)
{
  return OZReflexiveBehavior::notify((OZReflexiveBehavior *)((char *)this - 336), a2);
}

uint64_t OZReflexiveBehavior::parseEnd(OZReflexiveBehavior *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 500) = 0;
  *((_BYTE *)this + 498) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E0CA2E68], 0.0) != 0;
  return OZBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZReflexiveBehavior::parseEnd(OZReflexiveBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior *v3;

  v3 = (OZReflexiveBehavior *)((char *)this - 48);
  *((_BYTE *)this + 452) = 0;
  *((_BYTE *)this + 450) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 296), MEMORY[0x1E0CA2E68], 0.0) != 0;
  return OZBehavior::parseEnd(v3, a2);
}

uint64_t OZMetalTextureCache::instance(OZMetalTextureCache *this)
{
  if (OZMetalTextureCache::instance(void)::once != -1)
    dispatch_once(&OZMetalTextureCache::instance(void)::once, &__block_literal_global_83);
  return _instance;
}

void ___ZN19OZMetalTextureCache8instanceEv_block_invoke()
{
  OZMetalTextureCache *v0;

  v0 = (OZMetalTextureCache *)operator new();
  OZMetalTextureCache::OZMetalTextureCache(v0);
  _instance = (uint64_t)v0;
}

void sub_1B2F19884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void OZMetalTextureCache::OZMetalTextureCache(OZMetalTextureCache *this)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t *GPUComputeDeviceList;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  size_t v16;
  size_t *v17;
  int v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  PCSingleton::PCSingleton(this, 100);
  *v1 = (uint64_t *)&unk_1E65B90B8;
  v1[2] = 0;
  v1[1] = (uint64_t *)(v1 + 2);
  v2 = v1 + 1;
  v1[3] = 0;
  GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList((HGComputeDeviceManager *)v1);
  v4 = *GPUComputeDeviceList;
  v5 = GPUComputeDeviceList[1];
  if (*GPUComputeDeviceList != v5)
  {
    do
    {
      v6 = (_QWORD *)operator new();
      v7 = operator new();
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = v7 + 32;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 88) = -1;
      *(_QWORD *)(v7 + 96) = -1;
      *(_QWORD *)(v7 + 104) = 0;
      *v6 = v7;
      std::shared_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::shared_ptr[abi:ne180100]<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>,void>(&v14, (uint64_t)v6);
      v8 = v14;
      v16 = 8;
      v17 = 0;
      *(_QWORD *)v18 = 0x1800000006;
      sysctl(v18, 2u, &v17, &v16, 0, 0);
      if ((unint64_t)v17 >= 0x20000001)
      {
        if ((unint64_t)v17 >= 0x40000001)
          v9 = (unint64_t)((double)(unint64_t)v17 * 0.2);
        else
          v9 = 0x2000000;
      }
      else
      {
        v9 = 12582912;
      }
      PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::setMaxCost(*v8, v9);
      v16 = *(_QWORD *)(*(_QWORD *)v4 + 96);
      v17 = &v16;
      v10 = std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v2, &v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17);
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v10 + 5, (uint64_t *)&v14);
      v11 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
}

void sub_1B2F19AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSingleton *a10)
{
  uint64_t v10;

  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(v10, *((_QWORD **)a10 + 2));
  PCSingleton::~PCSingleton(a10);
  _Unwind_Resume(a1);
}

unint64_t OZMetalTextureCache::getCache@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  result = objc_msgSend(a2, "registryID");
  v8 = *(_QWORD **)(a1 + 16);
  v7 = (_QWORD *)(a1 + 16);
  v6 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = v7;
  do
  {
    v10 = v6[4];
    v11 = v10 >= result;
    if (v10 >= result)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (v11)
      v9 = v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || result < v9[4])
LABEL_12:
    v9 = v7;
  v14 = v9[5];
  v13 = v9[6];
  *a3 = v14;
  a3[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return result;
}

uint64_t OZMetalTextureCache::add(OZMetalTextureCache *a1, uint64_t *a2, void *a3, PCHash128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v8 = 0x3FF0000000000000;
  v5 = 0x3FF0000000000000;
  v6 = 0u;
  v7 = 0u;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  OZMetalTextureCache::add(a1, a2, (__int128 *)&v5, a3, a4);
  return 1;
}

uint64_t OZMetalTextureCache::add(OZMetalTextureCache *this, uint64_t *a2, __int128 *a3, void *a4, PCHash128 *a5)
{
  uint64_t v7;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v7 = *a2;
  if (*a2)
  {
    v21 = *a2;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    v11 = a3[5];
    v26 = a3[4];
    v27 = v11;
    v12 = a3[7];
    v28 = a3[6];
    v29 = v12;
    v13 = a3[1];
    v22 = *a3;
    v23 = v13;
    v14 = a3[3];
    v24 = a3[2];
    v25 = v14;
    OZMetalTextureCache::getCache((uint64_t)this, a4, &v19);
    PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::addValue(*v19, a5, &v21, *(_QWORD *)(*a2 + 72));
    v15 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  }
  else
  {
    OZMetalTextureCache::remove(this, a5);
  }
  return 1;
}

void sub_1B2F19D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(a1);
}

void OZMetalTextureCache::remove(OZMetalTextureCache *this, const PCHash128 *a2)
{
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::removeKey(**((_QWORD **)v2 + 5), a2);
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void OZMetalTextureCache::find(uint64_t a1@<X0>, void *a2@<X1>, const PCHash128 *a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _OWORD *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _BYTE v17[128];
  uint64_t *v18;
  std::__shared_weak_count *v19;
  char v20;

  OZMetalTextureCache::getCache(a1, a2, &v18);
  v8 = *v18;
  v20 = 0;
  PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::findValue(v8, a3, &v20, (uint64_t)&v16);
  v9 = v16;
  if (v16)
  {
    if (a4 && v17 != a4)
    {
      for (i = 0; i != 128; i += 32)
      {
        v11 = &a4[i];
        v12 = *(_OWORD *)&v17[i + 16];
        *v11 = *(_OWORD *)&v17[i];
        v11[1] = v12;
      }
    }
    *a5 = v9;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  }
  else
  {
    *a5 = 0;
  }
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B2F19ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v9 - 56);
  _Unwind_Resume(a1);
}

void OZMetalTextureCache::clear(OZMetalTextureCache *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 1);
  v2 = (char *)this + 16;
  if (v1 != (char *)this + 16)
  {
    do
    {
      PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::clear(**((os_unfair_lock_s ***)v1 + 5));
      v3 = (char *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

void OZMetalTextureCache::~OZMetalTextureCache(OZMetalTextureCache *this)
{
  *(_QWORD *)this = &unk_1E65B90B8;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  PCSingleton::~PCSingleton(this);
}

{
  *(_QWORD *)this = &unk_1E65B90B8;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::shared_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::shared_ptr[abi:ne180100]<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E65B90F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2F1A060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100]((os_unfair_lock_s ***)va, 0);
  _Unwind_Resume(a1);
}

os_unfair_lock_s **std::__shared_ptr_pointer<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>> *,std::shared_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::__shared_ptr_default_delete<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>,PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>,std::allocator<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>>::__on_zero_shared(uint64_t a1)
{
  os_unfair_lock_s **result;

  result = *(os_unfair_lock_s ***)(a1 + 24);
  if (result)
  {
    PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCache(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>> *,std::shared_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::__shared_ptr_default_delete<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>,PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>,std::allocator<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

os_unfair_lock_s **PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCache(os_unfair_lock_s **a1)
{
  PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::clear(*a1);
  std::unique_ptr<PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100]((uint64_t *)a1, 0);
  return a1;
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::clear(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _QWORD *v3;

  v1 = a1;
  v2 = a1 + 4;
  PCSpinLock::lock(a1 + 4);
  v3 = *(_QWORD **)&v1[8]._os_unfair_lock_opaque;
  v1 += 8;
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy((uint64_t)&v1[-2], v3);
  *(_QWORD *)&v1[-2]._os_unfair_lock_opaque = v1;
  *(_QWORD *)&v1->_os_unfair_lock_opaque = 0;
  *(_QWORD *)&v1[2]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&v1[6]._os_unfair_lock_opaque = *(_QWORD *)&v1[4]._os_unfair_lock_opaque;
  *(_QWORD *)&v1[12]._os_unfair_lock_opaque = 0;
  PCSpinLock::unlock(v2);
}

void std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1, a2[1]);
    v4 = a2[6];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCacheImpl(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 16));
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

os_unfair_lock_s **std::unique_ptr<PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>>::reset[abi:ne180100](os_unfair_lock_s ***a1, os_unfair_lock_s **a2)
{
  os_unfair_lock_s **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCache<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::~PCCache(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::setMaxCost(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;

  v4 = (os_unfair_lock_s *)(a1 + 16);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  *(_QWORD *)(a1 + 88) = a2;
  if (!*(_QWORD *)(a1 + 104))
  {
    while (*(_QWORD *)(a1 + 80) > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
    {
      v5 = *(uint64_t ***)(a1 + 48);
      if (v5 == *(uint64_t ***)(a1 + 56))
        break;
      v7 = *v5;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v7);
      v6 = v7;
      *(_QWORD *)(a1 + 80) -= v7[23];
      std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::erase((uint64_t **)(a1 + 24), v6);
    }
  }
  PCSpinLock::unlock(v4);
}

void sub_1B2F1A35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a9);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 200) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 192) <= *(_QWORD *)(v17 + 192))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 200) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 200) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 192);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 192);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 192);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 192))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 200) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 200) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 200);
    goto LABEL_24;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, a2);
  v4 = a2[6];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  operator delete(a2);
  return v3;
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::addValue(uint64_t a1, const PCHash128 *a2, _QWORD *a3, unint64_t a4)
{
  os_unfair_lock_s *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t *v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];
  _QWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v8 = (os_unfair_lock_s *)(a1 + 16);
  v47[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
    v10 = v9;
    v47[0] = v9;
    if ((_QWORD *)(a1 + 32) == v9)
    {
      v24 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v24;
      v25 = *a3;
      if (*a3)
        (*(void (**)(_QWORD))(*(_QWORD *)v25 + 16))(*a3);
      v26 = *(_OWORD *)(a3 + 11);
      v52 = *(_OWORD *)(a3 + 9);
      v53 = v26;
      v27 = *(_OWORD *)(a3 + 15);
      v54 = *(_OWORD *)(a3 + 13);
      v55 = v27;
      v28 = *(_OWORD *)(a3 + 3);
      v48 = *(_OWORD *)(a3 + 1);
      v49 = v28;
      v29 = *(_OWORD *)(a3 + 7);
      v50 = *(_OWORD *)(a3 + 5);
      v51 = v29;
      v33 = *(_OWORD *)a2;
      v34 = v25;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      v39 = v52;
      v40 = v53;
      v41 = v54;
      v42 = v55;
      v35 = v48;
      v36 = v49;
      v37 = v50;
      v38 = v51;
      v43 = a4;
      v44 = v24;
      v45 = 0;
      v46[0] = (uint64_t)std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>((uint64_t **)(a1 + 24), (const PCHash128 *)&v33, (uint64_t)&v33);
      v46[1] = v30;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v46);
      *(_QWORD *)(a1 + 80) += a4;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (*(_QWORD *)(a1 + 80) > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v32 = *(_QWORD **)(a1 + 48);
          if (v32 == *(_QWORD **)(a1 + 56))
            break;
          *(_QWORD *)&v33 = *v32;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v33);
          v31 = (uint64_t *)v33;
          *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v33 + 184);
          std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::erase((uint64_t **)(a1 + 24), v31);
        }
      }
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    }
    else
    {
      v12 = v9 + 6;
      v11 = v9[6];
      v13 = *a3;
      if (v11 != *a3)
      {
        if (v11)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v11 + 24))(v10[6]);
          v13 = *a3;
        }
        *v12 = v13;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      }
      if (v12 != a3)
      {
        v14 = 0;
        v15 = v10 + 7;
        v16 = a3 + 1;
        do
        {
          for (i = 0; i != 4; ++i)
            v15[i] = v16[i];
          ++v14;
          v15 += 4;
          v16 += 4;
        }
        while (v14 != 4);
      }
      v18 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v18;
      v10[24] = v18;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v47);
      v19 = v47[0];
      v20 = a4 - *(_QWORD *)(v47[0] + 184);
      if (v20)
      {
        v21 = *(_QWORD *)(a1 + 80) + v20;
        *(_QWORD *)(a1 + 80) = v21;
        *(_QWORD *)(v19 + 184) = a4;
        if (!*(_QWORD *)(a1 + 104))
        {
          while (v21 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
          {
            v23 = *(_QWORD **)(a1 + 48);
            if (v23 == *(_QWORD **)(a1 + 56))
              break;
            *(_QWORD *)&v33 = *v23;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v33);
            v22 = (uint64_t *)v33;
            *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v33 + 184);
            std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::erase((uint64_t **)(a1 + 24), v22);
            v21 = *(_QWORD *)(a1 + 80);
          }
        }
      }
    }
  }
  PCSpinLock::unlock(v8);
}

void sub_1B2F1A8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 200) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 200);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 192) <= *(_QWORD *)(v23 + 192))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 200) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 200) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

uint64_t *std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__construct_node<std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::__construct_node<std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0xD0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2F1AB54(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<PCHash128 const,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  v11 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[6];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::findValue(uint64_t a1@<X0>, const PCHash128 *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  os_unfair_lock_s *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v8 = (os_unfair_lock_s *)(a1 + 16);
  v13[1] = a1 + 16;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  v9 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
  v10 = v9;
  v13[0] = v9;
  if ((_QWORD *)(a1 + 32) == v9)
  {
    *a3 = 0;
    *(_QWORD *)(a4 + 128) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 88) = 0x3FF0000000000000;
    *(_QWORD *)(a4 + 48) = 0x3FF0000000000000;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
  }
  else
  {
    v11 = v9[6];
    *(_QWORD *)a4 = v11;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    *(_OWORD *)(a4 + 72) = *(_OWORD *)(v10 + 15);
    *(_OWORD *)(a4 + 88) = *(_OWORD *)(v10 + 17);
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(v10 + 19);
    *(_OWORD *)(a4 + 120) = *(_OWORD *)(v10 + 21);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v10 + 7);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v10 + 9);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v10 + 11);
    *(_OWORD *)(a4 + 56) = *(_OWORD *)(v10 + 13);
    v12 = *(_QWORD *)(a1 + 72) + 1;
    *(_QWORD *)(a1 + 72) = v12;
    v10[24] = v12;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)v13);
    *a3 = 1;
  }
  PCSpinLock::unlock(v8);
}

void sub_1B2F1AD98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::removeKey(uint64_t a1, const PCHash128 *a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t *v6[2];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  v6[1] = (uint64_t *)(a1 + 16);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 16));
  v5 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
  v6[0] = v5;
  if ((uint64_t *)(a1 + 32) != v5)
  {
    *(_QWORD *)(a1 + 80) -= v5[23];
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)v6);
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,OZMetalTextureCache::CacheData,PCSpinLock,std::less<PCHash128>>::Data>>>::erase((uint64_t **)(a1 + 24), v6[0]);
  }
  PCSpinLock::unlock(v4);
}

void sub_1B2F1AE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelAffectedNodes_Factory::getInstance(OZChannelAffectedNodes_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelAffectedNodes_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelAffectedNodes_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAffectedNodes_Factory::_instance;
}

const __CFString *OZChannelAffectedNodes::getObjCWrapperName(OZChannelAffectedNodes *this)
{
  return CFSTR("CHChannel");
}

void OZTransitiveBehavior::OZTransitiveBehavior(OZTransitiveBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  *v5 = &off_1E65B9168;
  v5[2] = &unk_1E65B9458;
  v5[6] = &unk_1E65B96B0;
  v5[42] = &unk_1E65B9708;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Transitive Behavior Scope Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Transitive Behavior Scope"));
  OZChannelEnum::OZChannelEnum((OZTransitiveBehavior *)((char *)this + 344), 1u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x12Cu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Transitive Behavior Affected Nodes"));
  OZChannelAffectedNodes::OZChannelAffectedNodes((OZTransitiveBehavior *)((char *)this + 600), &v7, (OZChannelFolder *)((char *)this + 56), 0x12Du, 0, 0, 0);
  PCString::~PCString(&v7);
  *((_QWORD *)this + 94) = (char *)this + 752;
  *((_QWORD *)this + 95) = (char *)this + 752;
  *((_QWORD *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((_BYTE *)this + 780) = 0;
  *((_DWORD *)this + 196) = 3;
  *((_BYTE *)this + 788) = 1;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 600), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 600));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 600), 0);
}

void sub_1B2F1B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZSimulationBehavior *v12;
  OZChannelEnum *v13;

  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZSimulationBehavior::~OZSimulationBehavior(v12);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior::OZTransitiveBehavior(OZTransitiveBehavior *this, OZTransitiveBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65B9168;
  *(_QWORD *)(v5 + 16) = &unk_1E65B9458;
  *(_QWORD *)(v5 + 48) = &unk_1E65B96B0;
  *(_QWORD *)(v5 + 336) = &unk_1E65B9708;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 344), (OZTransitiveBehavior *)((char *)a2 + 344), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 600), (const OZChannelBase *)((char *)a2 + 600), v6);
  *((_QWORD *)this + 75) = &off_1E65B9768;
  *((_QWORD *)this + 77) = &unk_1E65B9AC8;
  std::list<unsigned int>::list((_QWORD *)this + 94, (uint64_t)a2 + 752);
  *((_DWORD *)this + 194) = 0;
  *((_BYTE *)this + 780) = 0;
  *((_DWORD *)this + 196) = 3;
  *((_BYTE *)this + 788) = 1;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 600), 0);
}

void sub_1B2F1B198(_Unwind_Exception *a1)
{
  OZSimulationBehavior *v1;
  OZChannelEnum *v2;
  OZChannel *v3;
  _QWORD *v4;

  std::__list_imp<unsigned int>::clear(v4);
  OZChannel::~OZChannel(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior::~OZTransitiveBehavior(OZTransitiveBehavior *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65B9168;
  *((_QWORD *)this + 2) = &unk_1E65B9458;
  *((_QWORD *)this + 6) = &unk_1E65B96B0;
  *((_QWORD *)this + 42) = &unk_1E65B9708;
  OZTransitiveBehavior::clearScope(this);
  if (*((_BYTE *)this + 780))
  {
    v2 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::removeCPPObserver(*(_QWORD *)(v2 + 1584));
    *((_BYTE *)this + 780) = 0;
  }
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 94);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 600));
  OZChannelEnum::~OZChannelEnum((OZTransitiveBehavior *)((char *)this + 344));
  OZSimulationBehavior::~OZSimulationBehavior(this);
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void OZTransitiveBehavior::clearScope(OZTransitiveBehavior *this)
{
  int v2;
  uint64_t v3;
  OZScene *v4;
  OZScene *v5;
  uint64_t i;
  void *v7;
  _QWORD *v8;
  void *Node;
  _QWORD *v10;

  v2 = *((_DWORD *)this + 196);
  if ((*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this))
  {
    v3 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this);
    v4 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
    if (v4)
    {
      v5 = v4;
      if (v2 == 1)
      {
        Node = OZScene::getNode(v4, *((_DWORD *)this + 194));
        if (Node)
        {
          v10 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)Node + 640))(Node);
LABEL_13:
          OZChannelObjectRoot::removeBehavior(v10, (uint64_t)this);
LABEL_14:
          *((_DWORD *)this + 196) = 3;
          return;
        }
      }
      else if (v2)
      {
        for (i = *((_QWORD *)this + 95);
              (OZTransitiveBehavior *)i != (OZTransitiveBehavior *)((char *)this + 752);
              i = *(_QWORD *)(i + 8))
        {
          v7 = OZScene::getNode(v5, *(_DWORD *)(i + 16));
          if (v7)
          {
            v8 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 640))(v7);
            OZChannelObjectRoot::removeBehavior(v8, (uint64_t)this);
          }
        }
        goto LABEL_14;
      }
      v10 = (_QWORD *)((char *)v5 + 920);
      goto LABEL_13;
    }
  }
}

void `non-virtual thunk to'OZTransitiveBehavior::~OZTransitiveBehavior(OZTransitiveBehavior *this)
{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 16));
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 48));
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 336));
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZTransitiveBehavior::~OZTransitiveBehavior((OZTransitiveBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

_QWORD *OZTransitiveBehavior::operator=(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;

  OZSimulationBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZTransitiveBehavior::clearScope((OZTransitiveBehavior *)a1);
  if (v5 != (_QWORD *)a1)
    std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>((uint64_t *)(a1 + 752), v5[95], (uint64_t)(v5 + 94));
  *(_DWORD *)(a1 + 776) = *((_DWORD *)v5 + 194);
  *(_DWORD *)(a1 + 784) = *((_DWORD *)v5 + 196);
  result = OZTransitiveBehavior::updateScope((OZTransitiveBehavior *)a1);
  *(_BYTE *)(a1 + 788) = *((_BYTE *)v5 + 788);
  return result;
}

_QWORD *OZTransitiveBehavior::updateScope(OZTransitiveBehavior *this)
{
  int ValueAsInt;
  _QWORD *result;
  uint64_t v4;
  OZScene *v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t i;
  _QWORD *v11;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E0CA2E68], 0.0);
  result = (_QWORD *)(*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    v4 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 272))(v4);
    if (result)
    {
      v5 = (OZScene *)result;
      if (ValueAsInt == 1)
      {
        v7 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this);
        v8 = *(_DWORD **)(v7 + 960);
        if (v8)
        {
          v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 640))(*(_QWORD *)(v7 + 960));
          v9 = v8[20];
        }
        else
        {
          v9 = 0;
          v6 = (_QWORD *)((char *)v5 + 920);
        }
        *((_DWORD *)this + 194) = v9;
      }
      else
      {
        if (ValueAsInt)
        {
          for (i = *((_QWORD *)this + 95);
                (OZTransitiveBehavior *)i != (OZTransitiveBehavior *)((char *)this + 752);
                i = *(_QWORD *)(i + 8))
          {
            result = OZScene::getNode(v5, *(_DWORD *)(i + 16));
            if (result)
            {
              v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 640))(result);
              result = OZChannelObjectRoot::addBehavior(v11, (uint64_t)this);
            }
          }
          goto LABEL_16;
        }
        v6 = result + 115;
      }
      result = OZChannelObjectRoot::addBehavior(v6, (uint64_t)this);
LABEL_16:
      *((_DWORD *)this + 196) = ValueAsInt;
    }
  }
  return result;
}

_QWORD *OZTransitiveBehavior::didAddToNode(OZTransitiveBehavior *this, OZSceneNode *a2)
{
  _QWORD *result;

  OZSimulationBehavior::didAddToNode((uint64_t)this, a2);
  result = (_QWORD *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
  if (result)
  {
    result = OZTransitiveBehavior::updateScope(this);
    if (!*((_BYTE *)this + 780))
    {
      result = (_QWORD *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
      if (result)
      {
        result = OZDocument::addCPPObserver(result[198], (uint64_t)this + 336, 1001);
        *((_BYTE *)this + 780) = 1;
      }
    }
  }
  return result;
}

uint64_t OZTransitiveBehavior::didInsert(OZTransitiveBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  return (*(uint64_t (**)(OZTransitiveBehavior *, OZSceneNode *))(*(_QWORD *)this + 96))(this, a2);
}

void OZTransitiveBehavior::willRemove(OZTransitiveBehavior *this)
{
  uint64_t v2;

  OZTransitiveBehavior::clearScope(this);
  if (*((_BYTE *)this + 780))
  {
    v2 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::removeCPPObserver(*(_QWORD *)(v2 + 1584));
    *((_BYTE *)this + 780) = 0;
  }
  *((_QWORD *)this + 41) = 0;
}

uint64_t *OZTransitiveBehavior::didAddSceneNodeToScene(uint64_t *this, OZScene *a2)
{
  uint64_t *v2;

  *((_BYTE *)this + 788) = 1;
  if (!*((_BYTE *)this + 780))
  {
    v2 = this;
    this = OZDocument::addCPPObserver(*((_QWORD *)a2 + 198), (uint64_t)(this + 42), 1001);
    *((_BYTE *)v2 + 780) = 1;
  }
  return this;
}

void OZTransitiveBehavior::willRemoveSceneNodeFromScene(OZTransitiveBehavior *this, OZScene *a2)
{
  OZTransitiveBehavior::clearScope(this);
  if (*((_BYTE *)this + 780))
  {
    OZDocument::removeCPPObserver(*((_QWORD *)a2 + 198));
    *((_BYTE *)this + 780) = 0;
  }
}

BOOL OZTransitiveBehavior::isRebuildUIChannel(OZTransitiveBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 344) == a2;
}

void OZTransitiveBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const CMTime *v4;
  char *v5;
  int ValueAsInt;
  uint64_t v7;
  BOOL i;
  char *v10;
  OZChannelBase *v11;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v5 = *(char **)(v2 + 16);
      if (v5)
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v5 + 344), v4, 0.0);
      if (ValueAsInt == 2)
        break;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
    v7 = *(_QWORD *)(a2 + 8);
    for (i = ValueAsInt == 2 && *(_QWORD *)(a2 + 16) < 2uLL; v7 != a2; v7 = *(_QWORD *)(v7 + 8))
    {
      v10 = *(char **)(v7 + 16);
      if (v10)
      v11 = (OZChannelBase *)(v10 + 600);
      if (i)
        OZChannelBase::resetFlag(v11, 0x400000, 1);
      else
        OZChannelBase::setFlag(v11, 0x400000, 1);
    }
  }
}

unint64_t OZTransitiveBehavior::canAddToSceneNode(OZTransitiveBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 1);
  v6 = xmmword_1B355E430;
  if ((OZFactory::isKindOfClass(v4, (int32x4_t *)&v6) & 1) != 0)
    return 0;
  else
    return OZSimulationBehavior::canAddToSceneNode(this, a2);
}

BOOL OZTransitiveBehavior::affectsSelf(OZTransitiveBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E0CA2E68], 0.0) == 2;
}

uint64_t OZTransitiveBehavior::notify(OZTransitiveBehavior *this, char a2)
{
  uint64_t result;
  uint64_t v5;
  OZChannelBase *v6;

  result = (*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 336))(this);
  if ((a2 & 8) != 0)
  {
    v5 = result;
    result = *(_QWORD *)(*(_QWORD *)(result + 1584) + 168);
    if (result)
    {
      result = OZNotificationManager::wasChannelModified((OZNotificationManager *)result, (const OZChannelBase *)((char *)this + 344));
      if ((_DWORD)result)
      {
        v6 = *(OZChannelBase **)(v5 + 1504);
        if (v6)
          OZChannelBase::setRangeName(v6, (const PCString *)1);
        OZTransitiveBehavior::clearScope(this);
        result = (uint64_t)OZTransitiveBehavior::updateScope(this);
      }
    }
  }
  if ((a2 & 0x10) != 0 && (*((_BYTE *)this + 788) || *((_DWORD *)this + 196) == 2))
  {
    OZTransitiveBehavior::clearScope(this);
    result = (uint64_t)OZTransitiveBehavior::updateScope(this);
    *((_BYTE *)this + 788) = 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'OZTransitiveBehavior::notify(OZTransitiveBehavior *this, char a2)
{
  return OZTransitiveBehavior::notify((OZTransitiveBehavior *)((char *)this - 336), a2);
}

uint64_t OZTransitiveBehavior::dirtyAllDescendants(uint64_t this, int8x16_t *a2)
{
  OZTransitiveBehavior *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = (OZTransitiveBehavior *)this;
    this = (*(uint64_t (**)(int8x16_t *))(a2->i64[0] + 960))(a2);
    if ((this & 1) != 0)
    {
      v4 = (*(uint64_t (**)(int8x16_t *))(a2->i64[0] + 1024))(a2);
      this = (*(uint64_t (**)(int8x16_t *))(a2->i64[0] + 1032))(a2);
      if (v4 != this)
      {
        v5 = this;
        do
        {
          this = OZTransitiveBehavior::dirtyAllDescendants(v3, *(OZSceneNode **)(v4 + 16));
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4 != v5);
      }
    }
    else if (vorr_s8(*(int8x8_t *)a2[2].i8, (int8x8_t)*(_OWORD *)&vextq_s8(a2[2], a2[2], 8uLL)))
    {
      return (*(uint64_t (**)(int8x16_t *))(a2->i64[0] + 496))(a2);
    }
  }
  return this;
}

int8x8_t *OZTransitiveBehavior::dirty(OZTransitiveBehavior *this)
{
  int ValueAsInt;
  int8x8_t *result;
  uint64_t v4;
  OZScene *v5;
  int8x8_t *v6;
  int8x16_t *v7;
  char *v8;
  uint64_t i;
  _QWORD v10[4];
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;

  OZBehavior::dirty(this);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 344), MEMORY[0x1E0CA2E68], 0.0);
  result = (int8x8_t *)(*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    v4 = (*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this);
    result = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 272))(v4);
    if (result)
    {
      if (ValueAsInt == 1)
      {
        result = (int8x8_t *)(*(uint64_t (**)(OZTransitiveBehavior *))(*(_QWORD *)this + 320))(this);
        v7 = (int8x16_t *)result[120];
        if (v7)
          return (int8x8_t *)OZTransitiveBehavior::dirtyAllDescendants((uint64_t)this, v7);
      }
      else
      {
        v5 = (OZScene *)result;
        if (ValueAsInt)
        {
          v8 = (char *)this + 752;
          for (i = *((_QWORD *)this + 95); (char *)i != v8; i = *(_QWORD *)(i + 8))
          {
            result = (int8x8_t *)OZScene::getNode(v5, *(_DWORD *)(i + 16));
            if (result
              && *(_QWORD *)&vorr_s8(result[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[4].i8, *(int8x16_t *)result[4].i8, 8uLL)))
            {
              result = (int8x8_t *)(*(uint64_t (**)(int8x8_t *))(*(_QWORD *)result + 496))(result);
            }
          }
        }
        else
        {
          OZScene::begin((OZScene *)result, (uint64_t)v12);
          OZScene::end_sel(v5, (uint64_t)v10);
          while (v12[0] != v10[0])
          {
            if (v12[0] != v12[2])
            {
              v6 = *(int8x8_t **)(v12[0] + 16);
              if (v6)
              {
                if (vorr_s8(v6[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v6[4].i8, *(int8x16_t *)v6[4].i8, 8uLL)))
                {
                  (*(void (**)(int8x8_t *))(*(_QWORD *)v6 + 496))(v6);
                }
              }
            }
            OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v12);
          }
          std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v11);
          return (int8x8_t *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
        }
      }
    }
  }
  return result;
}

void sub_1B2F1BB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t *`non-virtual thunk to'OZTransitiveBehavior::dirty(OZTransitiveBehavior *this)
{
  return OZTransitiveBehavior::dirty((OZTransitiveBehavior *)((char *)this - 16));
}

BOOL OZTransitiveBehavior::canRigChannel(OZTransitiveBehavior *this, const OZChannelBase *a2)
{
  return (const OZChannelBase *)((char *)this + 600) != a2;
}

BOOL `non-virtual thunk to'OZTransitiveBehavior::canRigChannel(OZTransitiveBehavior *this, const OZChannelBase *a2)
{
  return (const OZChannelBase *)((char *)this + 584) != a2;
}

uint64_t OZTransitiveBehavior::writeBody(OZTransitiveBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  uint64_t i;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTransitiveBehaviorScope);
  for (i = *((_QWORD *)this + 95);
        (OZTransitiveBehavior *)i != (OZTransitiveBehavior *)((char *)this + 752);
        i = *(_QWORD *)(i + 8))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 301);
    (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(unsigned int *)(i + 16));
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZBehavior::writeBody(this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'OZTransitiveBehavior::writeBody(OZTransitiveBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZTransitiveBehavior::writeBody((OZTransitiveBehavior *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZTransitiveBehavior::parseBegin(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  OZTransitiveBehavior::clearScope(this);
  OZBehavior::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTransitiveBehaviorScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZTransitiveBehavior::parseBegin(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  OZTransitiveBehavior::parseBegin((OZTransitiveBehavior *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZTransitiveBehavior::parseEnd(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  OZTransitiveBehavior::updateScope(this);
  OZBehavior::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZTransitiveBehavior::parseEnd(OZTransitiveBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior *v3;

  v3 = (OZTransitiveBehavior *)((char *)this - 48);
  OZTransitiveBehavior::updateScope((OZTransitiveBehavior *)((char *)this - 48));
  OZBehavior::parseEnd(v3, a2);
  return 1;
}

uint64_t OZTransitiveBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  _DWORD *v6;
  OZTimeMarkerSet *v7;
  int v9;

  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 301)
  {
    v9 = 0;
    PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v9);
    v6 = operator new(0x18uLL);
    v6[4] = v9;
    v7 = this[94];
    *(_QWORD *)v6 = v7;
    *((_QWORD *)v6 + 1) = this + 94;
    *((_QWORD *)v7 + 1) = v6;
    this[94] = (OZTimeMarkerSet *)v6;
    this[96] = (OZTimeMarkerSet *)((char *)this[96] + 1);
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZTransitiveBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZTransitiveBehavior::parseElement(this - 6, a2, a3);
  return 1;
}

_QWORD *OZTransitiveBehavior::updateReferenceIDs(OZTransitiveBehavior *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;

  OZChannelObjectRoot::updateReferenceIDs((_QWORD *)a1 + 7, a2);
  OZTransitiveBehavior::clearScope(a1);
  v4 = *((_QWORD *)a1 + 95);
  if ((OZTransitiveBehavior *)v4 != (OZTransitiveBehavior *)((char *)a1 + 752))
  {
    v7 = a2[1];
    v6 = a2 + 1;
    v5 = v7;
    do
    {
      if (v5)
      {
        v8 = *(_DWORD *)(v4 + 16);
        v9 = v6;
        v10 = v5;
        do
        {
          v11 = *(_DWORD *)(v10 + 28);
          v12 = v11 >= v8;
          if (v11 >= v8)
            v13 = (uint64_t *)v10;
          else
            v13 = (uint64_t *)(v10 + 8);
          if (v12)
            v9 = (_QWORD *)v10;
          v10 = *v13;
        }
        while (*v13);
        if (v9 != v6 && v8 >= *((_DWORD *)v9 + 7))
          *(_DWORD *)(v4 + 16) = *((_DWORD *)v9 + 8);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((OZTransitiveBehavior *)v4 != (OZTransitiveBehavior *)((char *)a1 + 752));
  }
  return OZTransitiveBehavior::updateScope(a1);
}

_QWORD *`non-virtual thunk to'OZTransitiveBehavior::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZTransitiveBehavior::updateReferenceIDs((OZTransitiveBehavior *)(a1 - 16), a2);
}

OZChannel *OZChannelAffectedNodes::clone(const OZChannelBase *this)
{
  OZChannel *v2;

  v2 = (OZChannel *)operator new();
  OZChannel::OZChannel(v2, this, 0);
  v2->var0 = (void **)&off_1E65B9768;
  v2->var2 = (void **)&unk_1E65B9AC8;
  return v2;
}

void sub_1B2F1BF00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelAffectedNodes_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAffectedNodes_Factory *v0;

  v0 = (OZChannelAffectedNodes_Factory *)operator new();
  OZChannelAffectedNodes_Factory::OZChannelAffectedNodes_Factory(v0);
  OZChannelAffectedNodes_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F1BF68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes_Factory::OZChannelAffectedNodes_Factory(OZChannelAffectedNodes_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555760;
  v4 = xmmword_1B35610D0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65B9B38;
  *((_QWORD *)this + 16) = &unk_1E65B9C08;
}

void sub_1B2F1C008(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelAffectedNodes *OZChannelAffectedNodes_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelAffectedNodes *v6;

  v6 = (OZChannelAffectedNodes *)operator new();
  OZChannelAffectedNodes::OZChannelAffectedNodes(v6, this, a2, a3, 0, 0);
  return v6;
}

void sub_1B2F1C080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannel *OZChannelAffectedNodes_Factory::createCopy(OZChannelAffectedNodes_Factory *this, OZFactoryBase *a2)
{
  OZChannel *v3;
  const OZChannelBase *v4;

  v3 = (OZChannel *)operator new();
  OZChannel::OZChannel(v3, v4, 0);
  v3->var0 = (void **)&off_1E65B9768;
  v3->var2 = (void **)&unk_1E65B9AC8;
  return v3;
}

void sub_1B2F1C120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

OZChannel *OZChannelAffectedNodes_Factory::createChannelCopy(OZChannelAffectedNodes_Factory *this, OZChannelBase *a2)
{
  OZChannel *v3;
  const OZChannelBase *v4;

  v3 = (OZChannel *)operator new();
  OZChannel::OZChannel(v3, v4, 0);
  v3->var0 = (void **)&off_1E65B9768;
  v3->var2 = (void **)&unk_1E65B9AC8;
  return v3;
}

void sub_1B2F1C1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes::OZChannelAffectedNodes(OZChannelAffectedNodes *this, OZFactory *a2, const PCString *a3, unsigned int a4, OZChannelImpl *a5, OZChannelInfo *a6)
{
  OZChannelAffectedNodes *v9;
  OZChannelAffectedNodes *OZChannelAffectedNodesInfo;
  uint64_t v11;
  uint64_t v12;

  OZChannel::OZChannel((OZChannel *)this, a2, a3, 0, a4, 0, a5, a6);
  *(_QWORD *)v9 = &off_1E65B9768;
  *((_QWORD *)v9 + 2) = &unk_1E65B9AC8;
  OZChannelAffectedNodesInfo = (OZChannelAffectedNodes *)OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(v9);
  if (a6)
  {
    v11 = *((_QWORD *)this + 17);
  }
  else
  {
    v11 = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
    *((_QWORD *)this + 17) = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
  }
  *((_QWORD *)this + 16) = v11;
  OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(OZChannelAffectedNodesInfo);
  if (a5)
  {
    v12 = *((_QWORD *)this + 15);
  }
  else
  {
    v12 = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
    *((_QWORD *)this + 15) = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
  }
  *((_QWORD *)this + 14) = v12;
}

void sub_1B2F1C280(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(OZChannelAffectedNodes *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::_OZChannelAffectedNodesInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::_OZChannelAffectedNodesInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
}

uint64_t OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(OZChannelAffectedNodes *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::_OZChannelAffectedNodesImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::_OZChannelAffectedNodesImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
}

void std::__call_once_param<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAffectedNodesInfo *v0;

  if (!OZChannelAffectedNodes::_OZChannelAffectedNodesInfo)
  {
    v0 = (OZChannelAffectedNodesInfo *)operator new();
    OZChannelAffectedNodesInfo::OZChannelAffectedNodesInfo(v0);
    OZChannelAffectedNodes::_OZChannelAffectedNodesInfo = (uint64_t)v0;
  }
}

void sub_1B2F1C398(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodesInfo::OZChannelAffectedNodesInfo(OZChannelAffectedNodesInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E65B9C60;
  *((_QWORD *)this + 10) = &unk_1E65B9C80;
}

void sub_1B2F1C420(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  OZCurveEnum *v1;

  if (!OZChannelAffectedNodes::_OZChannelAffectedNodesImpl)
  {
    v0 = operator new();
    v1 = (OZCurveEnum *)operator new();
    OZCurveEnum::OZCurveEnum(v1, 0.0);
    OZChannelImpl::OZChannelImpl((OZChannelImpl *)v0, (OZCurve *)v1, 0.0, 0, 1);
    PCSingleton::PCSingleton((PCSingleton *)(v0 + 40), 100);
    *(_QWORD *)v0 = &unk_1E65B9CD8;
    *(_QWORD *)(v0 + 40) = &unk_1E65B9CF8;
    OZChannelAffectedNodes::_OZChannelAffectedNodesImpl = v0;
  }
}

void sub_1B2F1C4EC(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZChannelAffectedNodes::OZChannelAffectedNodes(OZChannelAffectedNodes *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *Instance;
  OZChannelAffectedNodes *v15;
  OZChannelAffectedNodes *OZChannelAffectedNodesInfo;
  uint64_t v17;
  uint64_t v18;

  Instance = (OZFactory *)OZChannelAffectedNodes_Factory::getInstance(this);
  OZChannel::OZChannel((OZChannel *)this, Instance, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)this = &off_1E65B9768;
  *((_QWORD *)this + 2) = &unk_1E65B9AC8;
  OZChannelAffectedNodesInfo = (OZChannelAffectedNodes *)OZChannelAffectedNodes::createOZChannelAffectedNodesInfo(v15);
  if (a7)
  {
    v17 = *((_QWORD *)this + 17);
  }
  else
  {
    v17 = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
    *((_QWORD *)this + 17) = OZChannelAffectedNodes::_OZChannelAffectedNodesInfo;
  }
  *((_QWORD *)this + 16) = v17;
  OZChannelAffectedNodes::createOZChannelAffectedNodesImpl(OZChannelAffectedNodesInfo);
  if (a6)
  {
    v18 = *((_QWORD *)this + 15);
  }
  else
  {
    v18 = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
    *((_QWORD *)this + 15) = OZChannelAffectedNodes::_OZChannelAffectedNodesImpl;
  }
  *((_QWORD *)this + 14) = v18;
}

void sub_1B2F1C610(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZProcessControl::OZProcessControl(OZProcessControl *this)
{
  PCMutex *v2;

  *(_QWORD *)this = &off_1E65B9D50;
  *((_BYTE *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  v2 = (PCMutex *)operator new();
  PCMutex::PCMutex(v2);
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = OZGetTime();
}

void sub_1B2F1C68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4076DFA842);
  _Unwind_Resume(a1);
}

void OZProcessControl::~OZProcessControl(OZProcessControl *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E65B9D50;
  v1 = *((_QWORD *)this + 3);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E65B9D50;
  v1 = *((_QWORD *)this + 3);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZProcessControl::setProgressHandler(uint64_t this, int (*a2)(void))
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t OZProcessControl::setHeliumRenderer(uint64_t this, HGRenderer *a2)
{
  *(_QWORD *)(this + 48) = a2;
  return this;
}

BOOL OZProcessControl::isAborted(OZProcessControl *this)
{
  unsigned __int8 v1;
  unsigned int (*v2)(void);

  v1 = atomic_load((unsigned __int8 *)this + 8);
  if ((v1 & 1) != 0)
    return 1;
  v2 = (unsigned int (*)(void))*((_QWORD *)this + 5);
  return v2 && v2() != 0;
}

__darwin_time_t OZGetTime(void)
{
  timeval v1;

  gettimeofday(&v1, 0);
  return 1000 * v1.tv_sec + v1.tv_usec / 1000;
}

uint64_t OZGetCornersFromBounds3d(float a1, float a2, float a3, float a4, uint64_t result)
{
  *(float *)result = a1;
  *(float *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = 0;
  *(float *)(result + 12) = a2;
  *(float *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = 0;
  *(float *)(result + 24) = a2;
  *(float *)(result + 28) = a4;
  *(_DWORD *)(result + 32) = 0;
  *(float *)(result + 36) = a1;
  *(float *)(result + 40) = a4;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void OZClampBoundsToMaxTextureSize(OZChannelBase *a1, double *a2, double *a3)
{
  int v6;
  PCString v7;

  if (a2 && *a2 > 4096.0)
  {
    *a2 = 4096.0;
    v6 = 1;
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    v6 = 0;
    if (!a3)
      goto LABEL_8;
  }
  if (*a3 > 4096.0)
  {
    *a3 = 4096.0;
LABEL_9:
    PCURL::PCURL((PCURL *)&v7, CFSTR("Object is too big message"));
    OZChannelBase::setRangeName(a1, &v7);
    PCString::~PCString(&v7);
    goto LABEL_10;
  }
LABEL_8:
  if (v6)
    goto LABEL_9;
LABEL_10:
  if (a2 && *a2 == 0.0)
    *a2 = 1.0;
  if (a3)
  {
    if (*a3 == 0.0)
      *a3 = 1.0;
  }
}

void sub_1B2F1C904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

double OZClampBoundsToMaxTextureSize(OZChannelBase *a1, uint64_t a2)
{
  double v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  double v7;

  if (a2)
  {
    v3 = *(double *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = v3;
    OZClampBoundsToMaxTextureSize(a1, &v7, (double *)&v6);
    v5 = v6;
    result = v7;
    *(double *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v5;
  }
  return result;
}

void OZLiGenerator::OZLiGenerator(OZLiGenerator *this, OZImageGenerator *a2, const OZRenderParams *a3)
{
  *((_QWORD *)this + 181) = &off_1E65EB048;
  *((_QWORD *)this + 182) = 0;
  *((_BYTE *)this + 1464) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E65B9E80);
  *(_QWORD *)this = &off_1E65B9D90;
  *((_QWORD *)this + 181) = &unk_1E65B9E60;
  *((_QWORD *)this + 2) = a2;
  OZRenderParams::OZRenderParams((OZLiGenerator *)((char *)this + 24), a3);
}

void sub_1B2F1C9DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65B9E80);
  *(_QWORD *)(v1 + 1448) = v2 + 16;
  *(_BYTE *)(v1 + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1456));
  _Unwind_Resume(a1);
}

uint64_t OZLiGenerator::pixelTransformSupport(OZLiGenerator *this, const LiRenderParameters *a2)
{
  return (*(uint64_t (**)(_QWORD, const LiRenderParameters *, char *))(**((_QWORD **)this + 2) + 2288))(*((_QWORD *)this + 2), a2, (char *)this + 24);
}

uint64_t OZLiGenerator::getHelium(OZLiGenerator *this, LiAgent *a2)
{
  FxColorDescription *v4;
  CGColorSpace *CGColorSpace;

  v4 = (FxColorDescription *)((char *)this + 24);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  OZRenderParams::setWorkingColorSpace(v4, CGColorSpace);
  OZRenderParams::setBlendingGamma((uint64_t)v4, *(float *)(*((_QWORD *)a2 + 6) + 192));
  return (*(uint64_t (**)(_QWORD, LiAgent *, FxColorDescription *))(**((_QWORD **)this + 2) + 2296))(*((_QWORD *)this + 2), a2, v4);
}

uint64_t OZLiGenerator::filteredEdges(OZLiGenerator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 2304))(*((_QWORD *)this + 2));
}

uint64_t OZLiGenerator::estimateRenderMemory()
{
  return 0;
}

void *OZLiGenerator::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *result;

  result = *(void **)(a1 + 16);
  if (result)
  {
    if (result)
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 2360))(result, a2, a3);
  }
  return result;
}

void OZLiGenerator::~OZLiGenerator(OZLiGenerator *this)
{
  *(_QWORD *)this = &off_1E65B9D90;
  *((_QWORD *)this + 181) = &unk_1E65B9E60;
  OZRenderParams::~OZRenderParams((OZLiGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65B9E80);
  *((_QWORD *)this + 181) = &off_1E65EB048;
  *((_BYTE *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);
}

{
  *(_QWORD *)this = &off_1E65B9D90;
  *((_QWORD *)this + 181) = &unk_1E65B9E60;
  OZRenderParams::~OZRenderParams((OZLiGenerator *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65B9E80);
  *((_QWORD *)this + 181) = &off_1E65EB048;
  *((_BYTE *)this + 1464) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 182);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZLiGenerator::~OZLiGenerator(OZLiGenerator *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65B9D90;
  *((_QWORD *)v1 + 181) = &unk_1E65B9E60;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65B9E80);
  *((_QWORD *)v1 + 181) = &off_1E65EB048;
  v1[1464] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E65B9D90;
  *((_QWORD *)v1 + 181) = &unk_1E65B9E60;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65B9E80);
  *((_QWORD *)v1 + 181) = &off_1E65EB048;
  v1[1464] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 182);
  JUMPOUT(0x1B5E29170);
}

void OZImageMaskRender::makeImageSource(OZImageMaskRender *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  int ValueAsInt;
  OZImageNode *MaskSource;
  int v9;
  LiGroup *v10;
  _QWORD *v11;
  _QWORD *v12;
  const void *v13;
  void *v14;
  int v15;
  LiImageTransform *v16;
  PCShared_base *v17;
  PCSharedCount *v18;
  LiGroup *v19;
  const LiCamera *v20;
  const void *v21;
  LiImageTransform *v22;
  PCShared_base *v23;
  char *v24;
  uint64_t v25;
  PCString *v26;
  uint64_t i;
  PC_Sp_counted_base *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  PCSharedCount v32;
  PCSharedCount v33;
  PCString v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  PCSharedCount v43;
  PCSharedCount v44;
  LiGroup *v45;
  PCSharedCount v46[7];
  _QWORD v47[20];
  _BYTE v48[72];
  PCSharedCount *v49;
  PCSharedCount v50;
  PCSharedCount v51;
  PCString v52;
  PC_Sp_counted_base *v53;
  PCSharedCount v54;
  _BYTE v55[72];
  PC_Sp_counted_base *v56;
  PCSharedCount v57;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 181) + 1248))(*((_QWORD *)this + 181));
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 181) + 2448), MEMORY[0x1E0CA2E68], 0.0);
  MaskSource = (OZImageNode *)OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  v56 = 0;
  PCSharedCount::PCSharedCount(&v57);
  Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v55, MaskSource, a2);
  if (ValueAsInt)
    v9 = 0;
  else
    v9 = v6;
  if (v9 == 1)
  {
    v10 = (LiGroup *)operator new();
    LiGroup::LiGroup(v10);
    v53 = (PC_Sp_counted_base *)v10;
    PCSharedCount::PCSharedCount(&v54, (LiGroup *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    OZChannelBase::setRangeName((OZChannelBase *)a2, &v52);
    LiGraphBuilder::LiGraphBuilder(&v50, &v53, &v52);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v45);
    v49 = &v50;
    if (!MaskSource
    {
      (*(void (**)(OZImageNode *, OZRenderParams *, LiGroup **, uint64_t))(*(_QWORD *)MaskSource + 152))(MaskSource, a2, &v45, 1);
      PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v48);
      std::__list_imp<unsigned int>::clear(v47);
      LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&v50);
      PCSharedCount::~PCSharedCount(&v54);
      goto LABEL_43;
    }
    v12 = v11;
    v13 = (const void *)v11[120];
    if (v13)
    {
      if (v14)
        (*(void (**)(void *, PCSharedCount *, OZRenderParams *))(*(_QWORD *)v14 + 1992))(v14, &v50, a2);
    }
    (*(void (**)(_QWORD *, OZRenderParams *, PCSharedCount *, LiGroup **))(*v12 + 2016))(v12, a2, &v50, &v45);
    LiGraphBuilder::render(&v50, &v43);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&v56, &v43);
    v15 = *((_DWORD *)this + 377);
    if (*((_BYTE *)a2 + 242))
    {
      *((PCSharedCount *)this + 191) = v43;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v34, &v44);
      PCSharedCount::operator=((uint64_t *)this + 192, (uint64_t *)&v34);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v34);
      if (v15 != 1)
      {
LABEL_32:
        PCSharedCount::~PCSharedCount(&v44);
        PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v48);
        std::__list_imp<unsigned int>::clear(v47);
        LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&v50);
        PCSharedCount::~PCSharedCount(&v54);
        goto LABEL_33;
      }
      v16 = (LiImageTransform *)operator new();
      LiImageTransform::LiImageTransform(v16);
      v34.var0 = (__CFString *)v16;
      v17 = (LiImageTransform *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24));
      v18 = (PCSharedCount *)v35;
      PCSharedCount::PCSharedCount((PCSharedCount *)v35, v17);
      if (!v34.var0)
        throw_PCNullPointerException(1);
      (*((void (**)(__CFString *, PC_Sp_counted_base *))v34.var0->isa + 21))(v34.var0, v56);
      PCPtr<LiImageSource>::operator=<TXTextureDecal>(&v56, (const PCSharedCount *)&v34);
      *((PCString *)this + 189) = v34;
      PCSharedCount::PCSharedCount(&v32, (const PCSharedCount *)v35);
      PCSharedCount::operator=((uint64_t *)this + 190, (uint64_t *)&v32);
      PCSharedCount::~PCSharedCount(&v32);
    }
    else
    {
      v20 = (const LiCamera *)*((_QWORD *)a2 + 160);
      if (!v43.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v43.var0 + 184))(v43.var0, *((_QWORD *)a2 + 160));
      v21 = *(const void **)(*((_QWORD *)this + 181) + 960);
      if (!v21)
        goto LABEL_32;
      if (v15 != 1)
        goto LABEL_32;
      v42 = 0x3FF0000000000000;
      v39 = 0x3FF0000000000000;
      v36 = 0x3FF0000000000000;
      v34.var0 = (__CFString *)0x3FF0000000000000;
      memset(v35, 0, sizeof(v35));
      v37 = 0u;
      v38 = 0u;
      v40 = 0u;
      v41 = 0u;
      if (!OZImageMaskRender::calculateBackProjection((uint64_t)this, v20, (const OZRenderState *)a2, (uint64_t)&v34))goto LABEL_32;
      v22 = (LiImageTransform *)operator new();
      LiImageTransform::LiImageTransform(v22);
      v32.var0 = (PC_Sp_counted_base *)v22;
      v23 = (LiImageTransform *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24));
      v18 = &v33;
      PCSharedCount::PCSharedCount(&v33, v23);
      if (!v32.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v32.var0 + 168))(v32.var0, v56);
      v24 = (char *)v32.var0 + 40;
      if (&v34 != (PCString *)v32.var0 + 5)
      {
        v25 = 0;
        v26 = &v34;
        do
        {
          for (i = 0; i != 4; ++i)
            *(PCString *)&v24[i * 8] = v26[i];
          ++v25;
          v24 += 32;
          v26 += 4;
        }
        while (v25 != 4);
      }
      PCPtr<LiImageSource>::operator=<TXTextureDecal>(&v56, &v32);
    }
    PCSharedCount::~PCSharedCount(v18);
    goto LABEL_32;
  }
  OZChannelBase::setRangeName((OZChannelBase *)a2, &v34);
  v19 = (LiGroup *)operator new();
  LiGroup::LiGroup(v19);
  v45 = v19;
  PCSharedCount::PCSharedCount(v46, (LiGroup *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
  LiGraphBuilder::LiGraphBuilder(&v50, &v45, &v34);
  PCSharedCount::~PCSharedCount(v46);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v45);
  v49 = &v50;
  (*(void (**)(PC_Sp_counted_base **__return_ptr, OZImageNode *, OZRenderParams *, LiGroup **, uint64_t))(*(_QWORD *)MaskSource + 152))(&v53, MaskSource, a2, &v45, 1);
  v56 = v53;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v52, &v54);
  PCSharedCount::operator=((uint64_t *)&v57, (uint64_t *)&v52);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v52);
  PCSharedCount::~PCSharedCount(&v54);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v48);
  std::__list_imp<unsigned int>::clear(v47);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&v50);
LABEL_33:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 181) + 416))(*((_QWORD *)this + 181)))
  {
    std::list<OZEffect *>::list(&v45, *((_QWORD *)this + 181) + 976);
    if (&v45 != (LiGroup **)v46[0].var0)
    {
      v28 = (PC_Sp_counted_base *)&v45;
      do
      {
        v29 = *(_QWORD *)(*(_QWORD *)v28 + 16);
        v30 = *(_OWORD *)a2;
        v31 = *((_QWORD *)a2 + 2);
        if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v29 + 280))(v29, &v30, 0, 1, 1))
        {
          (*(void (**)(PCSharedCount *__return_ptr, _QWORD, OZRenderParams *))(**(_QWORD **)(*(_QWORD *)v28 + 16)
                                                                                        + 648))(&v50, *(_QWORD *)(*(_QWORD *)v28 + 16), a2);
          if (v50.var0)
          {
            (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v50.var0 + 168))(v50.var0, v56);
            PCPtr<LiImageSource>::operator=<TXTextureDecal>(&v56, &v50);
          }
          PCSharedCount::~PCSharedCount(&v51);
        }
        v28 = *(PC_Sp_counted_base **)v28;
      }
      while (v28 != v46[0].var0);
    }
    std::__list_imp<unsigned int>::clear(&v45);
  }
  a3->var0 = v56;
  PCSharedCount::PCSharedCount(a3 + 1, &v57);
LABEL_43:
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v55);
  PCSharedCount::~PCSharedCount(&v57);
}

void sub_1B2F1D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,PCSharedCount a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  PCSharedCount *v70;
  PCSharedCount *v71;
  uint64_t v72;
  uint64_t v73;

  MEMORY[0x1B5E29170](v72, 0x10B1C40DE3F20C5);
  PCSharedCount::~PCSharedCount(&a31);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a60);
  std::__list_imp<unsigned int>::clear(&a40);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&a70);
  PCSharedCount::~PCSharedCount(v71);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)(v73 - 152));
  PCSharedCount::~PCSharedCount(v70);
  _Unwind_Resume(a1);
}

uint64_t OZImageMaskRender::OZImageMaskRender(uint64_t a1, const OZRenderParams *a2, const OZRenderParams *a3, int a4)
{
  void *v13;
  OZImageMask *v14;
  OZImageNode *MaskSource;
  OZImageNode *v16;
  LiGroup *v17;
  uint64_t v19;
  PCSharedCount v20;
  __n128 v21;
  uint64_t v22;
  _QWORD v23[20];
  _QWORD v24[10];
  PCSharedCount v25;
  PCString v26;
  _BYTE v27[72];
  CMTime v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  PCSharedCount v33;

  *(_QWORD *)(a1 + 1560) = &off_1E65EB048;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_BYTE *)(a1 + 1576) = 1;
  LiImageSource::LiImageSource((LiImageSource *)(a1 + 1544), (uint64_t *)&off_1E65BA240);
  OZImageNodeRender::OZImageNodeRender((OZImageNodeRender *)a1, (OZImageNode *)&off_1E65BA218, a2, a3);
  *(_QWORD *)a1 = &off_1E65BA038;
  *(_QWORD *)(a1 + 1544) = &unk_1E65BA130;
  *(_QWORD *)(a1 + 1560) = &unk_1E65BA1F8;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1456) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1464));
  *(_OWORD *)(a1 + 1472) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1488) = _Q0;
  *(_DWORD *)(a1 + 1508) = a4;
  *(_QWORD *)(a1 + 1512) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1520));
  *(_QWORD *)(a1 + 1528) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1536));
  *(int64x2_t *)(a1 + 1472) = vdupq_n_s64(0xC12E848000000000);
  *(int64x2_t *)(a1 + 1488) = vdupq_n_s64(0x413E848000000000uLL);
  if (a2)
  else
    v13 = 0;
  *(_QWORD *)(a1 + 1448) = v13;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v29, a3);
  v14 = *(OZImageMask **)(a1 + 1448);
  v28 = *(CMTime *)a3;
  OZImageMask::getMaskSourceTime(v14, &v28, &v21);
  v29 = v21;
  v32 = 0;
  v30 = v22;
  v31 = 0;
  MaskSource = (OZImageNode *)OZImageMask::getMaskSource(*(OZImageMask **)(a1 + 1448));
  v16 = *(OZImageNode **)(*(_QWORD *)(a1 + 1448) + 960);
  if (v16)
  if (MaskSource == v16)
  {
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v27, MaskSource, (OZRenderParams *)&v29);
    if (MaskSource)
    OZChannelBase::setRangeName((OZChannelBase *)a3, &v26);
    v17 = (LiGroup *)operator new();
    LiGroup::LiGroup(v17);
    v21.n128_u64[0] = (unint64_t)v17;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v21.n128_i8[8], (LiGroup *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
    LiGraphBuilder::LiGraphBuilder(&v25, &v21, &v26);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v21.n128_i8[8]);
    OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v21);
    v24[9] = &v25;
    (*(void (**)(uint64_t *__return_ptr, OZImageNode *, __n128 *, __n128 *, _QWORD))(*(_QWORD *)MaskSource
                                                                                             + 1928))(&v19, MaskSource, &v29, &v21, 0);
    *(_QWORD *)(a1 + 1456) = v19;
    PCSharedCount::PCSharedCount(&v33, &v20);
    PCSharedCount::operator=((uint64_t *)(a1 + 1464), (uint64_t *)&v33);
    PCSharedCount::~PCSharedCount(&v33);
    PCSharedCount::~PCSharedCount(&v20);
    *(_BYTE *)(a1 + 1504) = 0;
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v24);
    std::__list_imp<unsigned int>::clear(v23);
    LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&v25);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v27);
  }
  else
  {
    OZImageMaskRender::makeImageSource((OZImageMaskRender *)a1, (OZRenderParams *)&v29, (PCSharedCount *)&v21);
    *(_QWORD *)(a1 + 1456) = v21.n128_u64[0];
    PCSharedCount::PCSharedCount(&v25, (const PCSharedCount *)&v21.n128_i8[8]);
    PCSharedCount::operator=((uint64_t *)(a1 + 1464), (uint64_t *)&v25);
    PCSharedCount::~PCSharedCount(&v25);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v21.n128_i8[8]);
    *(_BYTE *)(a1 + 1504) = 1;
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v29);
  return a1;
}

void sub_1B2F1D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,PCSharedCount a50)
{
  uint64_t v50;
  OZChannelBase *v51;
  PCSharedCount *v52;
  PCSharedCount *v53;
  PCSharedCount *v54;
  PCSharedCount *v55;
  uint64_t v56;
  uint64_t v57;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v57 - 88));
  PCSharedCount::~PCSharedCount(v55);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a40);
  std::__list_imp<unsigned int>::clear(&a20);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&a50);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x228]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x290]);
  PCSharedCount::~PCSharedCount(v54);
  PCSharedCount::~PCSharedCount(v53);
  PCSharedCount::~PCSharedCount(v52);
  *(_QWORD *)v50 = &off_1E65BA280;
  *(_QWORD *)(v50 + 1544) = &off_1E65BA378;
  *(_QWORD *)(v50 + 1560) = &off_1E65BA440;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v50 + 16));
  OZChannelBase::setRangeName(v51, (const PCString *)&off_1E65BA240);
  *(_QWORD *)(v50 + 1560) = v56 + 16;
  *(_BYTE *)(v50 + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v50 + 1568));
  _Unwind_Resume(a1);
}

void sub_1B2F1D958()
{
  JUMPOUT(0x1B2F1D8F0);
}

void sub_1B2F1D960()
{
  JUMPOUT(0x1B2F1D8F8);
}

void sub_1B2F1D968()
{
  JUMPOUT(0x1B2F1D900);
}

void sub_1B2F1D970()
{
  JUMPOUT(0x1B2F1D908);
}

void sub_1B2F1D978()
{
  JUMPOUT(0x1B2F1D92CLL);
}

void sub_1B2F1D980()
{
  JUMPOUT(0x1B2F1D93CLL);
}

void *OZImageMaskRender::calculateBackProjection(uint64_t a1, const LiCamera *a2, const OZRenderState *a3, uint64_t a4)
{
  void *result;
  void *v8;
  _QWORD v9[6];
  double v10[16];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  OZRenderState v21;

  result = *(void **)(*(_QWORD *)(a1 + 1448) + 960);
  if (result)
  {
    if (result)
    {
      v8 = result;
      OZRenderState::OZRenderState(&v21, a3);
      OZRenderState::setEyeMatrix(&v21, a2);
      v20 = 0x3FF0000000000000;
      v17 = 0x3FF0000000000000;
      v14 = 0x3FF0000000000000;
      v11 = 0x3FF0000000000000;
      v12 = 0u;
      v13 = 0u;
      v15 = 0u;
      v16 = 0u;
      v18 = 0u;
      v19 = 0u;
      (*(void (**)(void *, uint64_t *, OZRenderState *))(*(_QWORD *)v8 + 1256))(v8, &v11, &v21);
      (*(void (**)(_QWORD *__return_ptr, const LiCamera *))(*(_QWORD *)a2 + 48))(v9, a2);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v9, (__int128 *)&v11, (uint64_t)v10);
      return (void *)PCMatrix44Tmpl<double>::planarInverseZ(a4, v10, 0.0);
    }
  }
  return result;
}

void OZImageMaskRender::calcStretch(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  double v14;
  double v15;
  PCException *exception;
  PCException *v17;
  PCString v18;
  double v19;
  double v20;
  __int128 v21;
  double v22;
  double v23;
  __int128 v24;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 181) + 1256))(*((_QWORD *)this + 181)))
  {
    v22 = 0.0;
    v23 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v24 = _Q0;
    v19 = 0.0;
    v20 = 0.0;
    v21 = _Q0;
    v11 = *((_QWORD *)this + 180);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 16);
    }
    else
    {
      v12 = *((_QWORD *)this + 182);
      if (!v12)
        throw_PCNullPointerException(1);
    }
    if (((*(uint64_t (**)(uint64_t, LiAgent *, double *))(*(_QWORD *)v12 + 24))(v12, a2, &v22) & 1) == 0)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v18, "OZImageMaskRender::getHelium: couldn't get input boundary");
      PCException::PCException(exception, &v18);
    }
    if (((**(uint64_t (***)(OZImageMaskRender *, LiAgent *, double *))this)(this, a2, &v19) & 1) == 0)
    {
      v17 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v18, "OZImageMaskRender::getHelium: couldn't get mask boundary");
      PCException::PCException(v17, &v18);
    }
    v14 = *(double *)&v24 / *(double *)&v21;
    v13.f64[0] = *(double *)&v24 * 0.5 + v22 - (*(double *)&v21 * 0.5 + v19);
    v15 = *((double *)&v24 + 1) / *((double *)&v21 + 1);
    PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, v13, *((double *)&v24 + 1) * 0.5 + v23 - (*((double *)&v21 + 1) * 0.5 + v20), 0.0);
    PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v14, v15, 1.0);
  }
}

void sub_1B2F1DC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

HGNode *OZImageMaskRender::getClampNode@<X0>(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  const void *MaskSource;
  const void *v7;
  double v8;
  const void *v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  CMTime v19;
  __int128 v20;
  double v21[4];
  double v22;
  double v23;
  double v24;

  OZImageMaskRender::calcStretch(this, a2, (uint64_t)v21);
  MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  v7 = MaskSource;
  if (MaskSource)
    v8 = (*(double (**)(const void *))(*(_QWORD *)MaskSource + 40))(MaskSource);
  else
    v8 = 1.0;
  v9 = *(const void **)(*((_QWORD *)this + 181) + 960);
  if (v9)
  {
    if (!v7)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if (!v7)
      goto LABEL_14;
  }
  if (v11)
  {
    v12 = v11[1];
    v20 = xmmword_1B30541C0;
    if (OZFactory::isKindOfClass(v12, (int32x4_t *)&v20))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 181) + 1256))(*((_QWORD *)this + 181));
  }
  if (v10)
  {
    v13 = v8 / (*(double (**)(void *))(*(_QWORD *)v10 + 1328))(v10);
    if (v13 != 1.0)
    {
      v21[0] = v13 * v21[0];
      v22 = v13 * v22;
      v23 = v13 * v23;
      v24 = v13 * v24;
    }
  }
LABEL_14:
  v14 = *((_QWORD *)this + 181);
  v19 = *(CMTime *)((char *)this + 16);
  OZChannel::getValueAsDouble((OZChannel *)(v14 + 1880), &v19, 0.0);
  v16 = v15;
  OZChannel::getValueAsDouble((OZChannel *)(v14 + 2032), &v19, 0.0);
  PCMatrix44Tmpl<double>::rightTranslate(v21, v16, v17, 0.0);
  LiAgent::loadTransform((uint64_t)a2, (uint64_t)v21);
  return LiAgent::getHelium(a2, *((LiImageSource **)this + 182), a3);
}

HGNode *OZImageMaskRender::getStencilClampNode@<X0>(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  const void *MaskSource;
  const void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  LiSimpleCamera *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t i;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  const LiCamera *v37;
  PCSharedCount v38;
  CMTime v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  v7 = *(const void **)(*((_QWORD *)this + 181) + 960);
  if (v7)
  {
    if (!MaskSource)
      goto LABEL_17;
  }
  else
  {
    v8 = 0;
    if (!MaskSource)
      goto LABEL_17;
  }
  if (v9)
  {
    v10 = v9;
    v11 = v9[1];
    v40 = xmmword_1B30541C0;
    if (OZFactory::isKindOfClass(v11, (int32x4_t *)&v40))
    {
      if (((*(uint64_t (**)(_QWORD *))(*v10 + 1632))(v10) & 1) != 0)
      {
        v12 = 0;
        if (v8)
        {
LABEL_9:
          (*(void (**)(void *))(*(_QWORD *)v8 + 1328))(v8);
          goto LABEL_12;
        }
      }
      else
      {
        v12 = (*(uint64_t (**)(_QWORD *))(*v10 + 1664))(v10);
        if (v8)
          goto LABEL_9;
      }
      v13 = *((double *)this + 7);
LABEL_12:
      if (v13 == 1.0)
        v14 = 0;
      else
        v14 = v12;
      if (v14 == 1)
      {
        v41 = *(_QWORD *)&v13;
        *((double *)&v43 + 1) = v13 * 0.0;
        *(double *)&v46 = v13 * 0.0;
        *((double *)&v48 + 1) = v13 * 0.0;
      }
    }
  }
LABEL_17:
  v15 = *((_QWORD *)this + 181);
  v39 = *(CMTime *)((char *)this + 16);
  OZChannel::getValueAsDouble((OZChannel *)(v15 + 1880), &v39, 0.0);
  v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)(v15 + 2032), &v39, 0.0);
  PCMatrix44Tmpl<double>::rightTranslate((double *)&v41, v17, v18, 0.0);
  LiAgent::loadTransform((uint64_t)a2, (uint64_t)&v41);
  if (*((_QWORD *)this + 189) && v8)
  {
    v19 = (LiSimpleCamera *)operator new();
    LiSimpleCamera::LiSimpleCamera(v19);
    v37 = v19;
    PCSharedCount::PCSharedCount(&v38, (LiSimpleCamera *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
    if (!v19)
      throw_PCNullPointerException(1);
    (*(void (**)(LiSimpleCamera *, _QWORD))(*(_QWORD *)v37 + 168))(v19, **((_QWORD **)a2 + 6));
    v20 = *((_QWORD *)this + 191);
    if (!v20)
      throw_PCNullPointerException(1);
    (*(void (**)(uint64_t, const LiCamera *))(*(_QWORD *)v20 + 184))(v20, v37);
    v36 = 0x3FF0000000000000;
    v33 = 0x3FF0000000000000;
    v30 = 0x3FF0000000000000;
    v27 = 0x3FF0000000000000;
    v28 = 0u;
    v29 = 0u;
    v31 = 0u;
    v32 = 0u;
    v34 = 0u;
    v35 = 0u;
    if (OZImageMaskRender::calculateBackProjection((uint64_t)this, v37, (const OZRenderState *)((char *)this + 16), (uint64_t)&v27))
    {
      v21 = *((_QWORD *)this + 189);
      if (!v21)
        throw_PCNullPointerException(1);
      v22 = (uint64_t *)(v21 + 40);
      if (&v27 != v22)
      {
        v23 = 0;
        v24 = &v27;
        do
        {
          for (i = 0; i != 4; ++i)
            v22[i] = v24[i];
          ++v23;
          v22 += 4;
          v24 += 4;
        }
        while (v23 != 4);
      }
    }
    PCSharedCount::~PCSharedCount(&v38);
  }
  return LiAgent::getHelium(a2, *((LiImageSource **)this + 182), a3);
}

void sub_1B2F1E170(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40DA4F106CLL);
  _Unwind_Resume(a1);
}

double OZImageMaskRender::getStencilWrapPixelXForm@<D0>(OZImageMaskRender *this@<X0>, LiAgent *a2@<X1>, _OWORD *a3@<X8>)
{
  const void *MaskSource;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t i;
  char *v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  _QWORD v24[16];
  OZRenderState v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
  v7 = (__int128 *)*((_QWORD *)a2 + 20);
  v8 = v7[3];
  v10 = *v7;
  v9 = v7[1];
  a3[2] = v7[2];
  a3[3] = v8;
  *a3 = v10;
  a3[1] = v9;
  v11 = v7[7];
  v13 = v7[4];
  v12 = v7[5];
  a3[6] = v7[6];
  a3[7] = v11;
  a3[4] = v13;
  a3[5] = v12;
  v55 = 0x3FF0000000000000;
  v52 = 0x3FF0000000000000;
  v49 = 0x3FF0000000000000;
  v46 = 0x3FF0000000000000;
  v47 = 0u;
  v48 = 0u;
  v50 = 0u;
  v51 = 0u;
  v53 = 0u;
  v54 = 0u;
  v45 = 0x3FF0000000000000;
  v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v37 = 0u;
  v38 = 0u;
  v40 = 0u;
  v41 = 0u;
  v43 = 0u;
  v44 = 0u;
  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29 = 0x3FF0000000000000;
  v26 = 0x3FF0000000000000;
  v27 = 0u;
  v28 = 0u;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  if (MaskSource)
  {
    if (v14)
    {
      v15 = v14;
      OZRenderState::OZRenderState(&v25, (const OZRenderState *)((char *)this + 16));
      v16 = *((_QWORD *)this + 162);
      v25.var6 = 1;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v16 + 16))(v24, v16);
      for (i = 0; i != 16; i += 4)
      {
        v18 = (char *)&v25 + i * 8;
        v19 = *(_OWORD *)&v24[i + 2];
        *(_OWORD *)(v18 + 72) = *(_OWORD *)&v24[i];
        *(_OWORD *)(v18 + 88) = v19;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 632))(v16))
      {
        v20 = (*(double (**)(uint64_t))(*(_QWORD *)v16 + 320))(v16);
        if (v20 != 0.0)
        {
          v25.var7.var0[0][3] = v25.var7.var0[0][3] - v20 * v25.var7.var0[0][2];
          v25.var7.var0[1][3] = v25.var7.var0[1][3] - v20 * v25.var7.var0[1][2];
          v25.var7.var0[2][3] = v25.var7.var0[2][3] - v20 * v25.var7.var0[2][2];
          v25.var7.var0[3][3] = v25.var7.var0[3][3] - v20 * v25.var7.var0[3][2];
        }
      }
      v21 = (*(double (**)(uint64_t))(*(_QWORD *)v16 + 488))(v16);
      if (v21 != 1.0)
      {
        *(float64x2_t *)&v25.var7.var0[0][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[0][0], v21);
        *(float64x2_t *)&v25.var7.var0[1][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[1][0], v21);
        *(float64x2_t *)&v25.var7.var0[2][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[2][0], v21);
        *(float64x2_t *)&v25.var7.var0[3][0] = vmulq_n_f64(*(float64x2_t *)&v25.var7.var0[3][0], v21);
        v25.var7.var0[0][2] = v21 * v25.var7.var0[0][2];
        v25.var7.var0[1][2] = v21 * v25.var7.var0[1][2];
        v25.var7.var0[2][2] = v21 * v25.var7.var0[2][2];
        v25.var7.var0[3][2] = v21 * v25.var7.var0[3][2];
      }
      (*(void (**)(void *, uint64_t *, OZRenderState *))(*(_QWORD *)v15 + 1256))(v15, &v36, &v25);
    }
  }
  v22 = PCMatrix44Tmpl<double>::leftMult((uint64_t)&v46, (double *)&v36);
  (*(void (**)(_QWORD, uint64_t *, char *, double))(**(_QWORD **)(*((_QWORD *)this + 180) + 96) + 1264))(*(_QWORD *)(*((_QWORD *)this + 180) + 96), &v26, (char *)this + 16, v22);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v46, (double *)&v26);
  return PCMatrix44Tmpl<double>::rightMult((uint64_t)a3, (double *)&v46);
}

void OZImageMaskRender::getWrapNode(OZImageMaskRender *this@<X0>, double **a2@<X1>, HGNode **a3@<X8>)
{
  int ValueAsInt;
  int v7;
  uint64_t i;
  _OWORD *v9;
  __int128 v10;
  double *v11;
  uint64_t v12;
  double *v13;
  uint64_t j;
  const void *MaskSource;
  double v16;
  double v17;
  const void *v18;
  void *v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  HWrapMirror *v25;
  HGNode *v26;
  _BYTE v27[32];
  _OWORD v28[10];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  CMTime v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  double v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 181) + 2448), MEMORY[0x1E0CA2E68], 0.0);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 181) + 1248))(*((_QWORD *)this + 181));
  v60 = 0x3FF0000000000000;
  v57 = 0x3FF0000000000000;
  v54 = 0x3FF0000000000000;
  v51 = 1.0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v58 = 0u;
  v59 = 0u;
  v50 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  if (v7)
  {
    OZImageMaskRender::getStencilWrapPixelXForm(this, (LiAgent *)a2, v28);
    for (i = 0; i != 8; i += 2)
    {
      v9 = (_OWORD *)((char *)&v51 + i * 16);
      v10 = v28[i + 1];
      *v9 = v28[i];
      v9[1] = v10;
    }
  }
  else
  {
    v11 = a2[20];
    if (v11 != &v51)
    {
      v12 = 0;
      v13 = &v51;
      do
      {
        for (j = 0; j != 4; ++j)
          v13[j] = v11[j];
        ++v12;
        v13 += 4;
        v11 += 4;
      }
      while (v12 != 4);
    }
    MaskSource = OZImageMask::getMaskSource(*((OZImageMask **)this + 181));
    v16 = 1.0;
    v17 = 1.0;
    if (MaskSource)
      v17 = (*(double (**)(const void *))(*(_QWORD *)MaskSource + 40))(MaskSource);
    v18 = *(const void **)(*((_QWORD *)this + 181) + 960);
    if (v18)
    {
      if (v19)
        v16 = (*(double (**)(void *))(*(_QWORD *)v19 + 1328))(v19);
    }
    if (v16 != 1.0 || v17 != 1.0)
    {
      v20 = v17 / v16;
      if (v17 / v16 != 1.0)
      {
        v51 = v20 * v51;
        *((double *)&v53 + 1) = v20 * *((double *)&v53 + 1);
        *(double *)&v56 = v20 * *(double *)&v56;
        *((double *)&v58 + 1) = v20 * *((double *)&v58 + 1);
      }
    }
  }
  v21 = *((_QWORD *)this + 181);
  v40 = *(CMTime *)((char *)this + 16);
  OZChannel::getValueAsDouble((OZChannel *)(v21 + 1880), &v40, 0.0);
  v23 = v22;
  OZChannel::getValueAsDouble((OZChannel *)(v21 + 2032), &v40, 0.0);
  PCMatrix44Tmpl<double>::rightTranslate(&v51, v23, v24, 0.0);
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v41, &v51, 0.0);
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v33 = 0x3FF0000000000000;
  v30 = 0x3FF0000000000000;
  v31 = 0u;
  v32 = 0u;
  v34 = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  LiAgent::LiAgent((LiAgent *)v28, (const LiAgent *)a2);
  LiAgent::setPixelTransform((uint64_t)v28, (uint64_t)&v30);
  LiAgent::setImageSpace((uint64_t)v28, 1);
  LiRenderingTechnology::setEnableMetalRendering((uint64_t)v28, 1);
  LiAgent::getHelium((LiAgent *)v28, *((LiImageSource **)this + 182), a3);
  if (*a3)
  {
    LiAgent::getBoundary((LiAgent *)v28, (uint64_t)v27);
    if (ValueAsInt == 2)
    {
      v25 = (HWrapMirror *)HGObject::operator new(0x2C0uLL);
      HWrapMirror::HWrapMirror(v25);
      (*(void (**)(HWrapMirror *, _BYTE *))(*(_QWORD *)v25 + 576))(v25, v27);
      (*(void (**)(HWrapMirror *, uint64_t *))(*(_QWORD *)v25 + 584))(v25, &v41);
      (*(void (**)(HWrapMirror *, uint64_t))(*(_QWORD *)v25 + 592))(v25, v29);
      (*(void (**)(HWrapMirror *))(*(_QWORD *)v25 + 16))(v25);
      (*(void (**)(HWrapMirror *))(*(_QWORD *)v25 + 24))(v25);
    }
    else if (ValueAsInt == 1)
    {
      v25 = (HWrapMirror *)HGObject::operator new(0x2C0uLL);
      HWrapRepeat::HWrapRepeat(v25);
      (*(void (**)(HWrapMirror *, _BYTE *))(*(_QWORD *)v25 + 576))(v25, v27);
      (*(void (**)(HWrapMirror *, uint64_t *))(*(_QWORD *)v25 + 584))(v25, &v41);
      (*(void (**)(HWrapMirror *, uint64_t))(*(_QWORD *)v25 + 592))(v25, v29);
      (*(void (**)(HWrapMirror *))(*(_QWORD *)v25 + 16))(v25);
      (*(void (**)(HWrapMirror *))(*(_QWORD *)v25 + 24))(v25);
    }
    else
    {
      v25 = 0;
    }
    (*(void (**)(HWrapMirror *, _QWORD, HGNode *))(*(_QWORD *)v25 + 120))(v25, 0, *a3);
    v26 = *a3;
    if (*a3 != (HGNode *)v25)
    {
      if (v26)
        (*(void (**)(HGNode *))(*(_QWORD *)v26 + 24))(v26);
      *a3 = (HGNode *)v25;
      (*(void (**)(HWrapMirror *))(*(_QWORD *)v25 + 16))(v25);
    }
    (*(void (**)(HWrapMirror *))(*(_QWORD *)v25 + 24))(v25);
  }
  LiAgent::~LiAgent((LiAgent *)v28);
}

void sub_1B2F1E8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _QWORD *v13;
  void *v14;

  HGObject::operator delete(v14);
  if (*v13)
    (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
  LiAgent::~LiAgent((LiAgent *)&a13);
  _Unwind_Resume(a1);
}

void OZImageMaskRender::getHelium(OZImageMaskRender *this@<X0>, double **a2@<X1>, HGNode **a3@<X8>)
{
  int ValueAsInt;
  int v7;
  BOOL v8;

  if (*((_BYTE *)this + 1504))
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 181) + 2448), MEMORY[0x1E0CA2E68], 0.0);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 181) + 1248))(*((_QWORD *)this + 181));
    if (ValueAsInt)
      v8 = 1;
    else
      v8 = v7 == 0;
    if (v8)
    {
      if (ValueAsInt && *((_QWORD *)this + 180))
        OZImageMaskRender::getWrapNode(this, a2, a3);
      else
        OZImageMaskRender::getClampNode(this, (LiAgent *)a2, a3);
    }
    else
    {
      OZImageMaskRender::getStencilClampNode(this, (LiAgent *)a2, a3);
    }
  }
  else
  {
    LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 182), a3);
  }
}

void `virtual thunk to'OZImageMaskRender::getHelium(OZImageMaskRender *this@<X0>, double **a2@<X1>, HGNode **a3@<X8>)
{
  OZImageMaskRender::getHelium((OZImageMaskRender *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 184)), a2, a3);
}

void OZImageMaskRender::~OZImageMaskRender(PCSharedCount *this)
{
  uint64_t v2;

  OZChannelBase::setRangeName((OZChannelBase *)(v2 + 1544), (const PCString *)&off_1E65BA240);
  this[195].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[197].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[196].var0);
}

{
  OZImageMaskRender::~OZImageMaskRender(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZImageMaskRender::~OZImageMaskRender(OZImageMaskRender *this)
{
  OZImageMaskRender::~OZImageMaskRender((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

{
  OZImageMaskRender::~OZImageMaskRender((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
  JUMPOUT(0x1B5E29170);
}

{
  OZImageMaskRender::~OZImageMaskRender((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  OZImageMaskRender::~OZImageMaskRender((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

void OZImageMaskRender::~OZImageMaskRender(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  PC_Sp_counted_base *v4;
  PC_Sp_counted_base *v5;

  v4 = *a2;
  this->var0 = *a2;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)v4 - 3)) = a2[4];
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)this->var0 - 4)) = a2[5];
  PCSharedCount::~PCSharedCount(this + 192);
  PCSharedCount::~PCSharedCount(this + 190);
  PCSharedCount::~PCSharedCount(this + 183);
  v5 = a2[1];
  this->var0 = v5;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)v5 - 3)) = a2[2];
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)this->var0 - 4)) = a2[3];
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[2]);
}

void HWrapRepeat::HWrapRepeat(HWrapRepeat *this)
{
  uint64_t v1;

  HgcWrapRepeat::HgcWrapRepeat(this);
  *(_QWORD *)v1 = &unk_1E65BA678;
  *(_QWORD *)(v1 + 416) = 0;
  *(_QWORD *)(v1 + 424) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v1 + 432) = _Q0;
  *(_QWORD *)(v1 + 568) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 488) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_QWORD *)(v1 + 696) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 656) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 616) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 576) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 680) = 0u;
  *(_OWORD *)(v1 + 664) = 0u;
  HGNode::SetFlags((HGNode *)v1, 0, 2);
}

void sub_1B2F1EC70(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcWrapRepeat::~HgcWrapRepeat(v1);
  _Unwind_Resume(a1);
}

void HWrapRepeat::~HWrapRepeat(HGNode *this)
{
  void *v1;

  HgcWrapRepeat::~HgcWrapRepeat(this);
  HGObject::operator delete(v1);
}

uint64_t HWrapRepeat::GetDOD(HWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v5;

  if (a3)
    return 0;
  if (HGRectIsNull(*(uint64_t *)&a4.var0, *(uint64_t *)&a4.var2))
    v5 = &HGRectNull;
  else
    v5 = &HGRectInfinite;
  return *(_QWORD *)v5;
}

uint64_t HWrapRepeat::GetROI(HWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  double v10;
  double v11;
  __int128 v12;

  if (a3)
    return 0;
  v10 = 0.0;
  v11 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v12 = _Q0;
  if (!PCMatrix44Tmpl<double>::transformRect<double>((double *)this + 72, (double *)this + 52, (uint64_t)&v10))
    return 0;
  else
    return HGRectMake4i(vcvtmd_s64_f64(v10 + -1.1 + 0.0000001), vcvtmd_s64_f64(v11 + -1.1 + 0.0000001), vcvtpd_s64_f64(v10 + -1.1 + *(double *)&v12 + 2.2), vcvtpd_s64_f64(v11 + -1.1 + *((double *)&v12 + 1) + 2.2));
}

uint64_t HWrapRepeat::setMaskRect(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  float v3;
  float v4;
  float v5;

  v2 = *(_OWORD *)(a2 + 16);
  a1[26] = *(_OWORD *)a2;
  a1[27] = v2;
  v3 = *(double *)a2;
  *(float *)&v2 = *(double *)(a2 + 8);
  v4 = *(double *)(a2 + 16);
  v5 = *(double *)(a2 + 24);
  return (*(uint64_t (**)(_OWORD *, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 0, v3, *(float *)&v2, v4, v5);
}

uint64_t HWrapRepeat::setMatrix(uint64_t a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t i;

  v2 = a1 + 448;
  if ((double *)(a1 + 448) != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        *(double *)(v2 + i * 8) = v4[i];
      ++v3;
      v2 += 32;
      v4 += 4;
    }
    while (v3 != 4);
  }
}

uint64_t HWrapRepeat::setInvMatrix(uint64_t a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t i;

  v2 = a1 + 576;
  if ((double *)(a1 + 576) != a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      for (i = 0; i != 4; ++i)
        *(double *)(v2 + i * 8) = v4[i];
      ++v3;
      v2 += 32;
      v4 += 4;
    }
    while (v3 != 4);
  }
}

uint64_t `anonymous namespace'::setShaderMatrixParam(uint64_t a1, double *a2, uint64_t a3)
{
  int v3;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v3 = a3;
  v6 = *a2;
  v7 = a2[4];
  v8 = a2[8];
  v9 = a2[12];
  (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, a3, v6, v7, v8, v9);
  v10 = a2[1];
  v11 = a2[5];
  v12 = a2[9];
  v13 = a2[13];
  (*(void (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, (v3 + 1), v10, v11, v12, v13);
  v14 = a2[2];
  v15 = a2[6];
  v16 = a2[10];
  v17 = a2[14];
  (*(void (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, (v3 + 2), v14, v15, v16, v17);
  v18 = a2[3];
  v19 = a2[7];
  v20 = a2[11];
  v21 = a2[15];
  return (*(uint64_t (**)(uint64_t, _QWORD, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, (v3 + 3), v18, v19, v20, v21);
}

void HWrapMirror::HWrapMirror(HWrapMirror *this)
{
  uint64_t v1;

  HgcWrapMirror::HgcWrapMirror(this);
  *(_QWORD *)v1 = &unk_1E65BA8F8;
  *(_QWORD *)(v1 + 416) = 0;
  *(_QWORD *)(v1 + 424) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v1 + 432) = _Q0;
  *(_QWORD *)(v1 + 568) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 488) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_QWORD *)(v1 + 696) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 656) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 616) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 576) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 680) = 0u;
  *(_OWORD *)(v1 + 664) = 0u;
  HGNode::SetFlags((HGNode *)v1, 0, 2);
}

void sub_1B2F1EFF4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcWrapMirror::~HgcWrapMirror(v1);
  _Unwind_Resume(a1);
}

void HWrapMirror::~HWrapMirror(HGNode *this)
{
  void *v1;

  HgcWrapMirror::~HgcWrapMirror(this);
  HGObject::operator delete(v1);
}

uint64_t OZFolderLightShadow::initChannels(OZFolderLightShadow *this)
{
  OZChannel *v2;

  v2 = (OZChannel *)((char *)this + 280);
  OZChannel::setMin((OZChannel *)((char *)this + 280), 0.0);
  OZChannel::setMax(v2, 500.0);
  OZChannel::setSliderMax(v2, 20.0);
  OZChannel::setMax((OZChannel *)((char *)this + 128), 10.0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 15);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)this, 0x20000);
  (*(void (**)(OZFolderLightShadow *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 0, 0);
  return (*(uint64_t (**)(OZFolderLightShadow *))(*(_QWORD *)this + 128))(this);
}

void OZFolderLightShadow::OZFolderLightShadow(OZFolderLightShadow *this, const OZFolderLightShadow *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E65BAB78;
  *(_QWORD *)(v5 + 16) = &unk_1E65BAE50;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 280), (const OZChannelBase *)((char *)a2 + 280), (OZChannelFolder *)this);
  *((_QWORD *)this + 35) = &off_1E6551358;
  *((_QWORD *)this + 37) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), (const OZChannelBase *)((char *)a2 + 432), (OZChannelFolder *)this);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFolderLightShadow *)((char *)this + 584), (const OZFolderLightShadow *)((char *)a2 + 584), (OZChannelFolder *)this);
}

void sub_1B2F1F160(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;
  OZChannelPercent *v2;
  OZChannel *v3;
  OZChannelBool *v4;

  OZChannelBool::~OZChannelBool(v4);
  OZChannel::~OZChannel(v3);
  OZChannelPercent::~OZChannelPercent(v2);
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZFolderLightShadow::OZFolderLightShadow(OZFolderLightShadow *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  _QWORD *v6;
  PCString v7;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, 0);
  *v6 = &off_1E65BAB78;
  v6[2] = &unk_1E65BAE50;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Lighting Shadow Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 128), 1.0, &v7, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Lighting Shadow Softness"));
  OZChannelDouble::OZChannelDouble((OZFolderLightShadow *)((char *)this + 280), 0.0, &v7, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Lighting Shadow Uniform Softness"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 432), 1, &v7, (OZChannelFolder *)this, 3u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Channel Lighting Shadow Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZFolderLightShadow *)((char *)this + 584), 0.0, 0.0, 0.0, &v7, (OZChannelFolder *)this, 5u, 0, 5u);
  PCString::~PCString(&v7);
  OZFolderLightShadow::initChannels(this);
}

void sub_1B2F1F340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder *v10;
  OZChannelPercent *v11;
  OZChannel *v12;
  OZChannelBool *v13;
  OZChannelColorNoAlpha *v14;
  OZChannelColorNoAlpha *v15;

  v15 = v14;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v15);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelPercent::~OZChannelPercent(v11);
  OZChannelFolder::~OZChannelFolder(v10);
  _Unwind_Resume(a1);
}

void sub_1B2F1F3A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2F1F390);
}

void sub_1B2F1F3B8()
{
  JUMPOUT(0x1B2F1F390);
}

void sub_1B2F1F3C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2F1F398);
}

void sub_1B2F1F3D0()
{
  JUMPOUT(0x1B2F1F398);
}

void OZFolderLightShadow::~OZFolderLightShadow(OZFolderLightShadow *this)
{
  *(_QWORD *)this = &off_1E65BAB78;
  *((_QWORD *)this + 2) = &unk_1E65BAE50;
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZFolderLightShadow *)((char *)this + 584));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 432));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 280));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  OZFolderLightShadow::~OZFolderLightShadow(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFolderLightShadow::~OZFolderLightShadow(OZFolderLightShadow *this)
{
  OZFolderLightShadow::~OZFolderLightShadow((OZFolderLightShadow *)((char *)this - 16));
}

{
  OZFolderLightShadow::~OZFolderLightShadow((OZFolderLightShadow *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

unint64_t OZFolderLightShadow::hasShadows(OZChannelBase *this, const CMTime *a2)
{
  return OZChannelBase::isEnabled(this, 0, 0);
}

uint64_t OZFolderLightShadow::hasShadows(OZFolderLightShadow *this, const CMTime *a2, uint64_t a3)
{
  return (*(uint64_t (**)(OZFolderLightShadow *, uint64_t, _QWORD))(*(_QWORD *)this + 104))(this, a3, 0);
}

uint64_t OZFolderLightShadow::opacity(OZFolderLightShadow *this)
{
  return (uint64_t)this + 128;
}

uint64_t OZFolderLightShadow::softness(OZFolderLightShadow *this)
{
  return (uint64_t)this + 280;
}

uint64_t OZFolderLightShadow::uniformSoftness(OZFolderLightShadow *this)
{
  return (uint64_t)this + 432;
}

uint64_t OZFolderLightShadow::color(OZFolderLightShadow *this)
{
  return (uint64_t)this + 584;
}

const void *EnvironmentResetCallback(const void *result, void *a2)
{
  _QWORD *v2;

  if (result)
  {
    if (result)
    {
      v2 = result;
      (*(void (**)(const void *, _QWORD))(*(_QWORD *)result + 280))(result, 0);
      result = (const void *)v2[6];
      if (result)
    }
  }
  return result;
}

uint64_t OZ3DExtrusionProperties::init(OZ3DExtrusionProperties *this)
{
  PCString v3;
  CMTime v4;
  PCString v5[2];
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 2592), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 3128), 8519684);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 3128), 0, 0);
  OZChannel::setMin((OZChannel *)((char *)this + 3408), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 3408), 500.0);
  OZChannel::setMax((OZChannel *)((char *)this + 3256), 10.0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3128));
  (*(void (**)(OZ3DExtrusionProperties *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, 0, 0);
  PCURL::PCURL((PCURL *)v5, CFSTR("Bevel Properties Edge Width"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1336), v5, 0);
  PCString::~PCString(v5);
  PCURL::PCURL((PCURL *)v5, CFSTR("Bevel Properties Edge Depth"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 1488), v5, 0);
  PCString::~PCString(v5);
  PCURL::PCURL((PCURL *)v5, CFSTR("Bevel Properties Edge Width"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2032), v5, 0);
  PCString::~PCString(v5);
  PCURL::PCURL((PCURL *)v5, CFSTR("Bevel Properties Edge Depth"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 2184), v5, 0);
  PCString::~PCString(v5);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1200), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1896), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5848), 0x800000);
  OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 2.0, 0);
  OZChannel::setDefaultToCurrentValue((OZChannel *)((char *)this + 536));
  OZChannel::setMin((OZChannel *)((char *)this + 128), 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 792), -5.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 792), 5.0);
  OZChannel::setValue((OZChannel *)((char *)this + 2336), &v4, 0.0, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2336), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1336), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1488), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2032), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2184), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1336), 10.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1488), 10.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2032), 10.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2184), 10.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1336), 0.1);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1488), 0.1);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2032), 0.1);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 2184), 0.1);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 1336), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 1488), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2032), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 2184), 0.01);
  (*(void (**)(char *, CMTime *, _QWORD, double))(*((_QWORD *)this + 167) + 712))((char *)this + 1336, &v4, 0, 4.0);
  (*(void (**)(char *, CMTime *, _QWORD, double))(*((_QWORD *)this + 186) + 712))((char *)this + 1488, &v4, 0, 4.0);
  (*(void (**)(char *, CMTime *, _QWORD, double))(*((_QWORD *)this + 254) + 712))((char *)this + 2032, &v4, 0, 4.0);
  (*(void (**)(char *, CMTime *, _QWORD, double))(*((_QWORD *)this + 273) + 712))((char *)this + 2184, &v4, 0, 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1336), 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1488), 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2032), 4.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 2184), 4.0);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 7440), CFSTR("TXMaterialAssignmentFolderController"));
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 8080), CFSTR("TXMaterialAssignmentController"));
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)((char *)this + 7568), CFSTR("TXMaterialAssignmentLabelController"));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1200), 0x400000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1896), 0x400000, 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 3944), CFSTR("OZEnvironmentMapController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 5848), CFSTR("OZEnvironmentRotationController"));
  OZChannel::setMax((OZChannel *)((char *)this + 5544), 1000000.0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 944), CFSTR("OZChanEnumWithImagesController"));
  PCString::PCString(v5, "Square;Bevel;Round;Concave;Groove;Ridge;Double_Round;Square_Ring;Bevel_Ring;Round_Ring;Outline");
  OZChannelEnum::setImages((OZ3DExtrusionProperties *)((char *)this + 944), v5);
  PCString::~PCString(v5);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 1640), CFSTR("OZChanEnumWithImagesController"));
  PCString::PCString(v5, "-;-;Square;Bevel;Round;Concave;Groove;Ridge;Double_Round;Square_Ring;Bevel_Ring;Round_Ring;Outline");
  OZChannelEnum::setImages((OZ3DExtrusionProperties *)((char *)this + 1640), v5);
  PCString::~PCString(v5);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 3560), 4);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 3560), (void (*)(OZChannelBase *, void *))EnvironmentResetCallback, 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 3560), 0x20000);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3560), 0x100000000, 0);
  *(_OWORD *)&v5[0].var0 = xmmword_1B35611F0;
  v6[0] = unk_1B3561200;
  *(_OWORD *)((char *)v6 + 12) = unk_1B356120C;
  OZChannelEnum::setTags((OZ3DExtrusionProperties *)((char *)this + 3944), (char *)v5, 11);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4744), 0x400000, 0);
  OZChannel::setMax((OZChannel *)((char *)this + 2976), 1000000.0);
  PCString::PCString(&v3, "-;Lighting_Style_Standard;Lighting_Style_Medium_Center;Lighting_Style_Medium_Left;Lighting_Style_Medium_Right;Lighti"
    "ng_Style_Above;Lighting_Style_Backlit;Lighting_Style_Below;Lighting_Style_Diagonal_Left;Lighting_Style_Diagonal_Righ"
    "t;Lighting_Style_Drama_Top_Left;Lighting_Style_Drama_Top_Right");
  OZChannelEnum::setImages((OZ3DExtrusionProperties *)((char *)this + 2720), &v3);
  PCString::~PCString(&v3);
  return (*(uint64_t (**)(OZ3DExtrusionProperties *))(*(_QWORD *)this + 128))(this);
}

void sub_1B2F1FAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  PCString::~PCString((PCString *)&a9);
  _Unwind_Resume(a1);
}

void OZ3DExtrusionProperties::OZ3DExtrusionProperties(OZ3DExtrusionProperties *this, OZFactory *a2, const PCString *a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v6;
  PCURL *v7;
  PCURL *v8;
  PCURL *v9;
  PCURL *v10;
  PCURL *v11;
  PCURL *v12;
  PCURL *v13;
  PCURL *v14;
  PCURL *v15;
  PCURL *v16;
  PCURL *v17;
  PCURL *v18;
  PCURL *v19;
  PCURL *v20;
  PCURL *v21;
  PCURL *v22;
  PCURL *v23;
  PCURL *v24;
  PCURL *v25;
  PCURL *v26;
  PCURL *v27;
  PCURL *v28;
  PCURL *v29;
  PCURL *v30;
  PCURL *v31;
  PCString *v32;
  PCURL *v33;
  PCString *v34;
  PCURL *v35;
  PCURL *v36;
  PCURL *v37;
  PCString *v38;
  PCString *v39;
  PCString v40;
  PCString v41;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5);
  *v6 = &off_1E65BAEC0;
  v6[2] = &unk_1E65BB1A0;
  PCURL::PCURL((PCURL *)&v41, CFSTR("3D Property Extrusion Depth"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 128), 10.0, &v41, (OZChannelFolder *)this, 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v7, CFSTR("Bevel Properties Extrude Direction Deprecated Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Bevel Properties Extrude Direction"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280), &v41, &v40, (OZChannelFolder *)this, 0x1F9u, 0xAu, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v8, CFSTR("Bevel Properties Extrude Direction Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Bevel Properties Extrude Direction"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536), &v41, &v40, (OZChannelFolder *)this, 0x1FAu, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v9, CFSTR("3D Property Extrusion Weight"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 792), 0.0, &v41, (OZChannelFolder *)this, 0x207u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v10, CFSTR("Bevel Properties Front Profile Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Bevel Properties Front Edge Profile"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944), 2u, &v41, &v40, (OZChannelFolder *)this, 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v11, CFSTR("Bevel Properties Front Edge Size"));
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200), &v41, (OZChannelFolder *)this, 0x1F6u, 0, 2u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v12, CFSTR("Bevel Properties Back Profile Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Bevel Properties Back Corner Profile"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640), 0, &v41, &v40, (OZChannelFolder *)this, 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v13, CFSTR("Bevel Properties Back Corner Size"));
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896), &v41, (OZChannelFolder *)this, 0x1F7u, 0, 2u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v14, CFSTR("Bevel Properties Corner Style Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Bevel Properties Corner Style"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336), &v41, &v40, (OZChannelFolder *)this, 0x20Cu, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v15, CFSTR("Extrusion Properties Lighting Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2592), &v41, (OZChannelFolder *)this, 0x20Fu, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v16, CFSTR("Bevel Properties Lighting Style Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Bevel Properties Lighting Style"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720), 1u, &v41, &v40, (OZChannelFolder *)((char *)this + 2592), 0x1FCu, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v17, CFSTR("Bevel Properties Lighting Style Intensity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2976), 1.0, &v41, (OZChannelFolder *)((char *)this + 2592), 0x20Eu, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v18, CFSTR("Extrusion Properties Self Shadows Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3128), &v41, (OZChannelFolder *)((char *)this + 2592), 0x211u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v19, CFSTR("Extrusion Properties Self Shadows Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3256), 1.0, &v41, (OZChannelFolder *)((char *)this + 3128), 0x212u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v20, CFSTR("Extrusion Properties Self Shadows Softness"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 3408), 0.0, &v41, (OZChannelFolder *)((char *)this + 3128), 0x213u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v21, CFSTR("Material Environment Properties"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), &v41, (OZChannelFolder *)((char *)this + 2592), 0x200u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v22, CFSTR("Material Environment Type Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Material Environment Type"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688), &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x209u, 0xAu, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v23, CFSTR("Material Environment Map Selection Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Material Environment Map Selection"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944), 3u, &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x215u, 0, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v24, CFSTR("Material Environment Map Deprecated Selection Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Material Environment Map Selection"));
  OZChannelStringEnum::OZChannelStringEnum((OZ3DExtrusionProperties *)((char *)this + 4200), 4u, &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x208u, 0xAu);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v25, CFSTR("four; five; six"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Material Environment Map Selection"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488), &v41, &v40, (OZChannelFolder *)((char *)this + 3560), 0x201u, 0xAu, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v26, CFSTR("Material Environment Gradient"));
  OZChannelGradient::OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744), &v41, (OZChannelFolder *)((char *)this + 3560), 0x20Au, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v27, CFSTR("Material Environment Intensity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5544), 1.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x202u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v28, CFSTR("Material Environment Reflectivity"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 5696), 50.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x203u, 2, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v29, CFSTR("Material Environment Rotation"));
  OZChannelRotation3D::OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848), 0.0, 0.0, 0.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x204u, 0, 4u, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v30, CFSTR("Material Environment Contrast"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6704), 100.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x205u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v31, CFSTR("Material Environment Saturation"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6856), 100.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x20Du, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::PCString(v32, "Environment Normalization");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 7008), 1.0, &v41, (OZChannelFolder *)((char *)this + 3560), 0x20Bu, 134217730, 0, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v33, CFSTR("Material Environment Anisotropy Enable"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7160), 0, &v41, (OZChannelFolder *)this, 0x216u, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::PCString(v34, "");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7312), &v41, (OZChannelFolder *)this, 0x257u, 0xAu, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v35, CFSTR("Extrusion Properties Material Assignment Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7440), &v41, (OZChannelFolder *)this, 0x1FDu, 2u, 0);
  PCString::~PCString(&v41);
  PCURL::PCURL(v36, CFSTR("Extrusion Properties Material Assignment Mode Enum"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Extrusion Properties Material Assignment Mode"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568), 0, &v41, &v40, (OZChannelFolder *)((char *)this + 7440), 0x210u, 2, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCURL::PCURL(v37, CFSTR("Extrusion Properties Material Assignment Mode Multiple Materials"));
  PCURL::PCURL((PCURL *)&v40, CFSTR("Extrusion Properties Material Assignment Mode"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824), 2u, &v41, &v40, (OZChannelFolder *)((char *)this + 7440), 0x1FEu, 32778, 0, 0);
  PCString::~PCString(&v40);
  PCString::~PCString(&v41);
  PCString::PCString(v38, "");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 8080), 0, &v41, (OZChannelFolder *)((char *)this + 7440), 0x1FFu, 0, 0, 0);
  PCString::~PCString(&v41);
  PCString::PCString(v39, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), 0, &v41, (OZChannelFolder *)this, 0x214u, 2u, 0, 0);
  PCString::~PCString(&v41);
  OZ3DExtrusionProperties::init(this);
}

void sub_1B2F20704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannel *a11, OZChannel *a12, OZChannelRotation3D *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelGradient *a16, OZChannelEnum *a17, PCString *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelPercent *a22,OZChannelPercent *a23,OZChannelEnum *a24,OZChannelEnum *a25,OZChannel2D *a26,OZChannelEnum *a27,OZChannel2D *a28,OZChannelEnum *a29)
{
  OZChannelFolder *v29;
  OZChannelBool *v30;
  OZChannelEnum *v31;
  OZChannel *v32;
  OZChannelFolder *v33;
  OZChannel *v34;
  OZChannelBool *v35;
  OZChannelFolder *v36;
  OZChannelFolder *v37;
  OZChannelEnum *v38;
  uint64_t v39;

  OZChannelBool::~OZChannelBool(v30);
  OZChannel::~OZChannel(v32);
  OZChannelEnum::~OZChannelEnum(v31);
  OZChannelEnum::~OZChannelEnum(v38);
  OZChannelFolder::~OZChannelFolder(v33);
  OZChannelFolder::~OZChannelFolder(v37);
  OZChannelBool::~OZChannelBool(v35);
  OZChannel::~OZChannel(v34);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannelRotation3D::~OZChannelRotation3D(a13);
  OZChannel::~OZChannel(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradient::~OZChannelGradient(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelStringEnum::~OZChannelStringEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelFolder::~OZChannelFolder(v36);
  OZChannel::~OZChannel(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 112));
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 120));
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannel2D::~OZChannel2D(a26);
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannel2D::~OZChannel2D(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 152));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 128));
  OZChannelFolder::~OZChannelFolder(v29);
  _Unwind_Resume(a1);
}

void sub_1B2F208A8()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207B0);
}

void sub_1B2F208B8()
{
  JUMPOUT(0x1B2F207B0);
}

void sub_1B2F208C0()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207B8);
}

void sub_1B2F208D0()
{
  JUMPOUT(0x1B2F207B8);
}

void sub_1B2F208D8()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207C0);
}

void sub_1B2F208E8()
{
  JUMPOUT(0x1B2F207C0);
}

void sub_1B2F208F0()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207C8);
}

void sub_1B2F20900()
{
  JUMPOUT(0x1B2F207C8);
}

void sub_1B2F20908()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207D0);
}

void sub_1B2F20918()
{
  JUMPOUT(0x1B2F207D0);
}

void sub_1B2F20920()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207D8);
}

void sub_1B2F20930()
{
  JUMPOUT(0x1B2F207D8);
}

void sub_1B2F20938()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207E0);
}

void sub_1B2F20948()
{
  JUMPOUT(0x1B2F207E0);
}

void sub_1B2F20950()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207E8);
}

void sub_1B2F20960()
{
  JUMPOUT(0x1B2F207E8);
}

void sub_1B2F20968()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207F0);
}

void sub_1B2F20978()
{
  JUMPOUT(0x1B2F207F0);
}

void sub_1B2F20980()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F207F8);
}

void sub_1B2F20990()
{
  JUMPOUT(0x1B2F207F8);
}

void sub_1B2F20998()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20800);
}

void sub_1B2F209B8()
{
  JUMPOUT(0x1B2F20800);
}

void sub_1B2F209C0()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20808);
}

void sub_1B2F209E0()
{
  JUMPOUT(0x1B2F20808);
}

void sub_1B2F209E8()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20810);
}

void sub_1B2F20A08()
{
  JUMPOUT(0x1B2F20810);
}

void sub_1B2F20A10()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20818);
}

void sub_1B2F20A30()
{
  JUMPOUT(0x1B2F20818);
}

void sub_1B2F20A38()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20820);
}

void sub_1B2F20A48()
{
  JUMPOUT(0x1B2F20820);
}

void sub_1B2F20A50()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20828);
}

void sub_1B2F20A60()
{
  JUMPOUT(0x1B2F20828);
}

void sub_1B2F20A68()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20830);
}

void sub_1B2F20A78()
{
  JUMPOUT(0x1B2F20830);
}

void sub_1B2F20A80()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20838);
}

void sub_1B2F20A90()
{
  JUMPOUT(0x1B2F20838);
}

void sub_1B2F20A98()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20840);
}

void sub_1B2F20AA8()
{
  JUMPOUT(0x1B2F20840);
}

void sub_1B2F20AB0()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20848);
}

void sub_1B2F20AD0()
{
  JUMPOUT(0x1B2F20848);
}

void sub_1B2F20AD8()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20850);
}

void sub_1B2F20AE8()
{
  JUMPOUT(0x1B2F20850);
}

void sub_1B2F20AF0()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20858);
}

void sub_1B2F20B10()
{
  JUMPOUT(0x1B2F20858);
}

void sub_1B2F20B18()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20860);
}

void sub_1B2F20B28()
{
  JUMPOUT(0x1B2F20860);
}

void sub_1B2F20B30()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20868);
}

void sub_1B2F20B50()
{
  JUMPOUT(0x1B2F20868);
}

void sub_1B2F20B58()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20870);
}

void sub_1B2F20B68()
{
  JUMPOUT(0x1B2F20870);
}

void sub_1B2F20B70()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20878);
}

void sub_1B2F20B90()
{
  JUMPOUT(0x1B2F20878);
}

void sub_1B2F20B98()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20880);
}

void sub_1B2F20BA8()
{
  JUMPOUT(0x1B2F20880);
}

void sub_1B2F20BB0()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20888);
}

void sub_1B2F20BD0()
{
  JUMPOUT(0x1B2F20888);
}

void sub_1B2F20BD8()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20890);
}

void sub_1B2F20BF8()
{
  JUMPOUT(0x1B2F20890);
}

void sub_1B2F20C00()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F20898);
}

void sub_1B2F20C10()
{
  JUMPOUT(0x1B2F20898);
}

void OZ3DExtrusionProperties::OZ3DExtrusionProperties(OZ3DExtrusionProperties *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, unsigned int a6)
{
  OZFactory *Instance;
  PCURL *v13;
  PCURL *v14;
  PCURL *v15;
  PCURL *v16;
  PCURL *v17;
  PCURL *v18;
  PCURL *v19;
  PCURL *v20;
  PCURL *v21;
  PCURL *v22;
  PCURL *v23;
  PCURL *v24;
  PCURL *v25;
  PCURL *v26;
  PCURL *v27;
  PCURL *v28;
  PCURL *v29;
  PCURL *v30;
  PCURL *v31;
  PCURL *v32;
  PCURL *v33;
  PCURL *v34;
  PCURL *v35;
  PCURL *v36;
  PCURL *v37;
  PCString *v38;
  PCURL *v39;
  PCString *v40;
  PCURL *v41;
  PCURL *v42;
  PCURL *v43;
  PCString *v44;
  PCString *v45;
  PCString v46;
  PCString v47;

  Instance = (OZFactory *)OZ3DExtrusionProperties_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, a6);
  *(_QWORD *)this = &off_1E65BAEC0;
  *((_QWORD *)this + 2) = &unk_1E65BB1A0;
  PCURL::PCURL((PCURL *)&v47, CFSTR("3D Property Extrusion Depth"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 128), 10.0, &v47, (OZChannelFolder *)this, 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v13, CFSTR("Bevel Properties Extrude Direction Deprecated Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Bevel Properties Extrude Direction"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280), &v47, &v46, (OZChannelFolder *)this, 0x1F9u, 0xAu, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v14, CFSTR("Bevel Properties Extrude Direction Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Bevel Properties Extrude Direction"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536), &v47, &v46, (OZChannelFolder *)this, 0x1FAu, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v15, CFSTR("3D Property Extrusion Weight"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 792), 0.0, &v47, (OZChannelFolder *)this, 0x207u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v16, CFSTR("Bevel Properties Front Profile Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Bevel Properties Front Edge Profile"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944), 2u, &v47, &v46, (OZChannelFolder *)this, 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v17, CFSTR("Bevel Properties Front Edge Size"));
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200), &v47, (OZChannelFolder *)this, 0x1F6u, 0, 2u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v18, CFSTR("Bevel Properties Back Profile Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Bevel Properties Back Edge Profile"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640), 0, &v47, &v46, (OZChannelFolder *)this, 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v19, CFSTR("Bevel Properties Back Edge Size"));
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896), &v47, (OZChannelFolder *)this, 0x1F7u, 0, 2u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v20, CFSTR("Bevel Properties Corner Style Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Bevel Properties Corner Style"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336), &v47, &v46, (OZChannelFolder *)this, 0x20Cu, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v21, CFSTR("Extrusion Properties Lighting Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2592), &v47, (OZChannelFolder *)this, 0x20Fu, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v22, CFSTR("Bevel Properties Lighting Style Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Bevel Properties Lighting Style"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720), 1u, &v47, &v46, (OZChannelFolder *)((char *)this + 2592), 0x1FCu, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v23, CFSTR("Bevel Properties Lighting Style Intensity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2976), 1.0, &v47, (OZChannelFolder *)((char *)this + 2592), 0x20Eu, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v24, CFSTR("Extrusion Properties Self Shadows Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3128), &v47, (OZChannelFolder *)((char *)this + 2592), 0x211u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v25, CFSTR("Extrusion Properties Self Shadows Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3256), 1.0, &v47, (OZChannelFolder *)((char *)this + 3128), 0x212u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v26, CFSTR("Extrusion Properties Self Shadows Softness"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 3408), 0.0, &v47, (OZChannelFolder *)((char *)this + 3128), 0x213u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v27, CFSTR("Material Environment Properties"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), &v47, (OZChannelFolder *)((char *)this + 2592), 0x200u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v28, CFSTR("Material Environment Type Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Material Environment Type"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688), &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x209u, 0xAu, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v29, CFSTR("Material Environment Map Selection Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Material Environment Map Selection"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944), 3u, &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x215u, 0, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v30, CFSTR("Material Environment Map Deprecated Selection Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Material Environment Map Selection"));
  OZChannelStringEnum::OZChannelStringEnum((OZ3DExtrusionProperties *)((char *)this + 4200), 4u, &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x208u, 0xAu);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v31, CFSTR("Material Environment Map Selection Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Material Environment Map Selection"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488), &v47, &v46, (OZChannelFolder *)((char *)this + 3560), 0x201u, 0xAu, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v32, CFSTR("Material Environment Gradient"));
  OZChannelGradient::OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744), &v47, (OZChannelFolder *)((char *)this + 3560), 0x20Au, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v33, CFSTR("Material Environment Intensity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5544), 1.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x202u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v34, CFSTR("Material Environment Reflectivity"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 5696), 50.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x203u, 2, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v35, CFSTR("Material Environment Rotation"));
  OZChannelRotation3D::OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848), 0.0, 0.0, 0.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x204u, 0, 4u, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v36, CFSTR("Material Environment Contrast"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6704), 100.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x205u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v37, CFSTR("Material Environment Saturation"));
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 6856), 100.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x20Du, 0, 0, 0);
  PCString::~PCString(&v47);
  PCString::PCString(v38, "Environment Normalization");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 7008), 1.0, &v47, (OZChannelFolder *)((char *)this + 3560), 0x20Bu, 134217730, 0, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v39, CFSTR("Material Environment Anisotropy Enable"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7160), 0, &v47, (OZChannelFolder *)this, 0x216u, 0, 0, 0);
  PCString::~PCString(&v47);
  PCString::PCString(v40, "");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7312), &v47, (OZChannelFolder *)this, 0x257u, 0xAu, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v41, CFSTR("Extrusion Properties Material Assignment Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7440), &v47, (OZChannelFolder *)this, 0x1FDu, 2u, 0);
  PCString::~PCString(&v47);
  PCURL::PCURL(v42, CFSTR("Extrusion Properties Material Assignment Mode Enum"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Extrusion Properties Material Assignment Mode"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568), 0, &v47, &v46, (OZChannelFolder *)((char *)this + 7440), 0x210u, 2, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCURL::PCURL(v43, CFSTR("Extrusion Properties Material Assignment Mode Multiple Materials"));
  PCURL::PCURL((PCURL *)&v46, CFSTR("Extrusion Properties Material Assignment Mode"));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824), 2u, &v47, &v46, (OZChannelFolder *)((char *)this + 7440), 0x1FEu, 32778, 0, 0);
  PCString::~PCString(&v46);
  PCString::~PCString(&v47);
  PCString::PCString(v44, "");
  OZChannelDouble::OZChannelDouble((OZ3DExtrusionProperties *)((char *)this + 8080), 0, &v47, (OZChannelFolder *)((char *)this + 7440), 0x1FFu, 0, 0, 0);
  PCString::~PCString(&v47);
  PCString::PCString(v45, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), 0, &v47, (OZChannelFolder *)this, 0x214u, 2u, 0, 0);
  PCString::~PCString(&v47);
  OZ3DExtrusionProperties::init(this);
}

void sub_1B2F21820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannel *a11, OZChannel *a12, OZChannelRotation3D *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelGradient *a16, OZChannelEnum *a17, PCString *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelPercent *a22,OZChannelPercent *a23,OZChannelEnum *a24,OZChannelEnum *a25,OZChannel2D *a26,OZChannelEnum *a27,OZChannel2D *a28,OZChannelEnum *a29)
{
  OZChannelFolder *v29;
  OZChannelBool *v30;
  OZChannelEnum *v31;
  OZChannel *v32;
  OZChannelFolder *v33;
  OZChannel *v34;
  OZChannelBool *v35;
  OZChannelFolder *v36;
  OZChannelFolder *v37;
  OZChannelEnum *v38;
  uint64_t v39;

  OZChannelBool::~OZChannelBool(v30);
  OZChannel::~OZChannel(v32);
  OZChannelEnum::~OZChannelEnum(v31);
  OZChannelEnum::~OZChannelEnum(v38);
  OZChannelFolder::~OZChannelFolder(v33);
  OZChannelFolder::~OZChannelFolder(v37);
  OZChannelBool::~OZChannelBool(v35);
  OZChannel::~OZChannel(v34);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannelRotation3D::~OZChannelRotation3D(a13);
  OZChannel::~OZChannel(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradient::~OZChannelGradient(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelStringEnum::~OZChannelStringEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelFolder::~OZChannelFolder(v36);
  OZChannel::~OZChannel(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 112));
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 120));
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannel2D::~OZChannel2D(a26);
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannel2D::~OZChannel2D(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 152));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 128));
  OZChannelFolder::~OZChannelFolder(v29);
  _Unwind_Resume(a1);
}

void sub_1B2F219C4()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F218CCLL);
}

void sub_1B2F219D4()
{
  JUMPOUT(0x1B2F218CCLL);
}

void sub_1B2F219DC()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F218D4);
}

void sub_1B2F219EC()
{
  JUMPOUT(0x1B2F218D4);
}

void sub_1B2F219F4()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F218DCLL);
}

void sub_1B2F21A04()
{
  JUMPOUT(0x1B2F218DCLL);
}

void sub_1B2F21A0C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F218E4);
}

void sub_1B2F21A1C()
{
  JUMPOUT(0x1B2F218E4);
}

void sub_1B2F21A24()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F218ECLL);
}

void sub_1B2F21A34()
{
  JUMPOUT(0x1B2F218ECLL);
}

void sub_1B2F21A3C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F218F4);
}

void sub_1B2F21A4C()
{
  JUMPOUT(0x1B2F218F4);
}

void sub_1B2F21A54()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F218FCLL);
}

void sub_1B2F21A64()
{
  JUMPOUT(0x1B2F218FCLL);
}

void sub_1B2F21A6C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21904);
}

void sub_1B2F21A7C()
{
  JUMPOUT(0x1B2F21904);
}

void sub_1B2F21A84()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2190CLL);
}

void sub_1B2F21A94()
{
  JUMPOUT(0x1B2F2190CLL);
}

void sub_1B2F21A9C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21914);
}

void sub_1B2F21AAC()
{
  JUMPOUT(0x1B2F21914);
}

void sub_1B2F21AB4()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2191CLL);
}

void sub_1B2F21AD4()
{
  JUMPOUT(0x1B2F2191CLL);
}

void sub_1B2F21ADC()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21924);
}

void sub_1B2F21AFC()
{
  JUMPOUT(0x1B2F21924);
}

void sub_1B2F21B04()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2192CLL);
}

void sub_1B2F21B24()
{
  JUMPOUT(0x1B2F2192CLL);
}

void sub_1B2F21B2C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21934);
}

void sub_1B2F21B4C()
{
  JUMPOUT(0x1B2F21934);
}

void sub_1B2F21B54()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2193CLL);
}

void sub_1B2F21B64()
{
  JUMPOUT(0x1B2F2193CLL);
}

void sub_1B2F21B6C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21944);
}

void sub_1B2F21B7C()
{
  JUMPOUT(0x1B2F21944);
}

void sub_1B2F21B84()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2194CLL);
}

void sub_1B2F21B94()
{
  JUMPOUT(0x1B2F2194CLL);
}

void sub_1B2F21B9C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21954);
}

void sub_1B2F21BAC()
{
  JUMPOUT(0x1B2F21954);
}

void sub_1B2F21BB4()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2195CLL);
}

void sub_1B2F21BC4()
{
  JUMPOUT(0x1B2F2195CLL);
}

void sub_1B2F21BCC()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21964);
}

void sub_1B2F21BEC()
{
  JUMPOUT(0x1B2F21964);
}

void sub_1B2F21BF4()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2196CLL);
}

void sub_1B2F21C04()
{
  JUMPOUT(0x1B2F2196CLL);
}

void sub_1B2F21C0C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21974);
}

void sub_1B2F21C2C()
{
  JUMPOUT(0x1B2F21974);
}

void sub_1B2F21C34()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2197CLL);
}

void sub_1B2F21C44()
{
  JUMPOUT(0x1B2F2197CLL);
}

void sub_1B2F21C4C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21984);
}

void sub_1B2F21C6C()
{
  JUMPOUT(0x1B2F21984);
}

void sub_1B2F21C74()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2198CLL);
}

void sub_1B2F21C84()
{
  JUMPOUT(0x1B2F2198CLL);
}

void sub_1B2F21C8C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F21994);
}

void sub_1B2F21CAC()
{
  JUMPOUT(0x1B2F21994);
}

void sub_1B2F21CB4()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F2199CLL);
}

void sub_1B2F21CC4()
{
  JUMPOUT(0x1B2F2199CLL);
}

void sub_1B2F21CCC()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F219A4);
}

void sub_1B2F21CEC()
{
  JUMPOUT(0x1B2F219A4);
}

void sub_1B2F21CF4()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 104));
  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F219ACLL);
}

void sub_1B2F21D14()
{
  JUMPOUT(0x1B2F219ACLL);
}

void sub_1B2F21D1C()
{
  uint64_t v0;

  PCString::~PCString((PCString *)(v0 - 96));
  JUMPOUT(0x1B2F219B4);
}

void sub_1B2F21D2C()
{
  JUMPOUT(0x1B2F219B4);
}

uint64_t OZ3DExtrusionProperties_Factory::getInstance(OZ3DExtrusionProperties_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DExtrusionProperties_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DExtrusionProperties_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DExtrusionProperties_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DExtrusionProperties_Factory::_instance;
}

void OZ3DExtrusionProperties::OZ3DExtrusionProperties(OZ3DExtrusionProperties *this, const OZ3DExtrusionProperties *a2, OZChannelFolder *a3)
{
  uint64_t v5;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, (const OZChannelBase *)a2, a3);
  *(_QWORD *)v5 = &off_1E65BAEC0;
  *(_QWORD *)(v5 + 16) = &unk_1E65BB1A0;
  OZChannel::OZChannel((OZChannel *)(v5 + 128), (const OZChannelBase *)((char *)a2 + 128), (OZChannelFolder *)this);
  *((_QWORD *)this + 16) = &off_1E6551358;
  *((_QWORD *)this + 18) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280), (const OZ3DExtrusionProperties *)((char *)a2 + 280), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536), (const OZ3DExtrusionProperties *)((char *)a2 + 536), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)this);
  *((_QWORD *)this + 99) = &off_1E6551358;
  *((_QWORD *)this + 101) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944), (const OZ3DExtrusionProperties *)((char *)a2 + 944), (OZChannelFolder *)this);
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200), (const OZ3DExtrusionProperties *)((char *)a2 + 1200), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640), (const OZ3DExtrusionProperties *)((char *)a2 + 1640), (OZChannelFolder *)this);
  OZChannel2D::OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896), (const OZ3DExtrusionProperties *)((char *)a2 + 1896), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336), (const OZ3DExtrusionProperties *)((char *)a2 + 2336), (OZChannelFolder *)this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2592), (const OZChannelFolder *)((char *)a2 + 2592), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720), (const OZ3DExtrusionProperties *)((char *)a2 + 2720), (OZChannelFolder *)((char *)this + 2592));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2976), (const OZChannelBase *)((char *)a2 + 2976), (OZChannelFolder *)((char *)this + 2592));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3128), (const OZChannelFolder *)((char *)a2 + 3128), (OZChannelFolder *)((char *)this + 2592));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3256), (const OZChannelBase *)((char *)a2 + 3256), (OZChannelFolder *)((char *)this + 3128));
  OZChannel::OZChannel((OZChannel *)((char *)this + 3408), (const OZChannelBase *)((char *)a2 + 3408), (OZChannelFolder *)((char *)this + 3128));
  *((_QWORD *)this + 426) = &off_1E6551358;
  *((_QWORD *)this + 428) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), (const OZChannelFolder *)((char *)a2 + 3560), (OZChannelFolder *)((char *)this + 2592));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688), (const OZ3DExtrusionProperties *)((char *)a2 + 3688), (OZChannelFolder *)((char *)this + 3560));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944), (const OZ3DExtrusionProperties *)((char *)a2 + 3944), (OZChannelFolder *)((char *)this + 3560));
  OZChannelStringEnum::OZChannelStringEnum((OZ3DExtrusionProperties *)((char *)this + 4200), (const OZ3DExtrusionProperties *)((char *)a2 + 4200), (OZChannelFolder *)((char *)this + 3560));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488), (const OZ3DExtrusionProperties *)((char *)a2 + 4488), (OZChannelFolder *)((char *)this + 3560));
  OZChannelGradient::OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744), (const OZ3DExtrusionProperties *)((char *)a2 + 4744), (OZChannelFolder *)((char *)this + 3560));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5544), (const OZChannelBase *)((char *)a2 + 5544), (OZChannelFolder *)((char *)this + 3560));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5696), (const OZChannelBase *)((char *)a2 + 5696), (OZChannelFolder *)((char *)this + 3560));
  *((_QWORD *)this + 712) = &off_1E6551358;
  *((_QWORD *)this + 714) = &unk_1E65516B8;
  OZChannelRotation3D::OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848), (const OZ3DExtrusionProperties *)((char *)a2 + 5848), (OZChannelFolder *)((char *)this + 3560));
  OZChannel::OZChannel((OZChannel *)((char *)this + 6704), (const OZChannelBase *)((char *)a2 + 6704), (OZChannelFolder *)((char *)this + 3560));
  *((_QWORD *)this + 838) = &off_1E6551358;
  *((_QWORD *)this + 840) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 6856), (const OZChannelBase *)((char *)a2 + 6856), (OZChannelFolder *)((char *)this + 3560));
  *((_QWORD *)this + 857) = &off_1E6551358;
  *((_QWORD *)this + 859) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 7008), (const OZChannelBase *)((char *)a2 + 7008), (OZChannelFolder *)((char *)this + 3560));
  *((_QWORD *)this + 876) = &off_1E6551358;
  *((_QWORD *)this + 878) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7160), (const OZChannelBase *)((char *)a2 + 7160), (OZChannelFolder *)((char *)this + 3560));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7312), (const OZChannelFolder *)((char *)a2 + 7312), (OZChannelFolder *)this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7440), (const OZChannelFolder *)((char *)a2 + 7440), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568), (const OZ3DExtrusionProperties *)((char *)a2 + 7568), (OZChannelFolder *)((char *)this + 7440));
  OZChannelEnum::OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824), (const OZ3DExtrusionProperties *)((char *)a2 + 7824), (OZChannelFolder *)((char *)this + 7440));
  OZChannel::OZChannel((OZChannel *)((char *)this + 8080), (const OZChannelBase *)((char *)a2 + 8080), (OZChannelFolder *)((char *)this + 7440));
  *((_QWORD *)this + 1010) = &off_1E6551358;
  *((_QWORD *)this + 1012) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), (const OZChannelBase *)((char *)a2 + 8232), (OZChannelFolder *)this);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 3560), (void (*)(OZChannelBase *, void *))EnvironmentResetCallback, 0, 0);
}

void sub_1B2F22198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannel *a11, OZChannel *a12, OZChannelRotation3D *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelGradient *a16, OZChannelEnum *a17, PCString *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelPercent *a22,OZChannelFolder *a23,OZChannelPercent *a24,OZChannelEnum *a25,OZChannelEnum *a26,OZChannel2D *a27,OZChannelEnum *a28)
{
  OZChannelFolder *v28;
  OZChannelBool *v29;
  OZChannelFolder *v30;
  OZChannelFolder *v31;
  OZChannelEnum *v32;
  OZChannelEnum *v33;
  OZChannelFolder *v34;
  OZChannel *v35;
  OZChannelBool *v36;
  uint64_t v37;

  OZChannelBool::~OZChannelBool(v29);
  OZChannel::~OZChannel(v35);
  OZChannelEnum::~OZChannelEnum(v33);
  OZChannelEnum::~OZChannelEnum(v32);
  OZChannelFolder::~OZChannelFolder(v31);
  OZChannelFolder::~OZChannelFolder(v30);
  OZChannelBool::~OZChannelBool(v36);
  OZChannel::~OZChannel(a10);
  OZChannel::~OZChannel(a11);
  OZChannel::~OZChannel(a12);
  OZChannelRotation3D::~OZChannelRotation3D(a13);
  OZChannel::~OZChannel(a14);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelGradient::~OZChannelGradient(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelStringEnum::~OZChannelStringEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelFolder::~OZChannelFolder(v34);
  OZChannel::~OZChannel(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelFolder::~OZChannelFolder(a23);
  OZChannelPercent::~OZChannelPercent(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v37 - 96));
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel2D::~OZChannel2D(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v37 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v37 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v37 - 128));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v37 - 120));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v37 - 112));
  OZChannel::~OZChannel(*(OZChannel **)(v37 - 104));
  OZChannelFolder::~OZChannelFolder(v28);
  _Unwind_Resume(a1);
}

void sub_1B2F222DC()
{
  JUMPOUT(0x1B2F221E4);
}

void sub_1B2F222E4()
{
  JUMPOUT(0x1B2F221ECLL);
}

void sub_1B2F222EC()
{
  JUMPOUT(0x1B2F221F4);
}

void sub_1B2F222F4()
{
  JUMPOUT(0x1B2F221FCLL);
}

void sub_1B2F222FC()
{
  JUMPOUT(0x1B2F22204);
}

void sub_1B2F22304()
{
  JUMPOUT(0x1B2F2220CLL);
}

void sub_1B2F2230C()
{
  JUMPOUT(0x1B2F22214);
}

void sub_1B2F22314()
{
  JUMPOUT(0x1B2F2221CLL);
}

void sub_1B2F2231C()
{
  JUMPOUT(0x1B2F22224);
}

void sub_1B2F22324()
{
  JUMPOUT(0x1B2F2222CLL);
}

void sub_1B2F2232C()
{
  JUMPOUT(0x1B2F22234);
}

void sub_1B2F22334()
{
  JUMPOUT(0x1B2F2223CLL);
}

void sub_1B2F2233C()
{
  JUMPOUT(0x1B2F22244);
}

void sub_1B2F22344()
{
  JUMPOUT(0x1B2F2224CLL);
}

void sub_1B2F2234C()
{
  JUMPOUT(0x1B2F22254);
}

void sub_1B2F22354()
{
  JUMPOUT(0x1B2F2225CLL);
}

void sub_1B2F2235C()
{
  JUMPOUT(0x1B2F22264);
}

void sub_1B2F22364()
{
  JUMPOUT(0x1B2F2226CLL);
}

void sub_1B2F2236C()
{
  JUMPOUT(0x1B2F22274);
}

void sub_1B2F22374()
{
  JUMPOUT(0x1B2F2227CLL);
}

void sub_1B2F2237C()
{
  JUMPOUT(0x1B2F22284);
}

void sub_1B2F22384()
{
  JUMPOUT(0x1B2F2228CLL);
}

void sub_1B2F2238C()
{
  JUMPOUT(0x1B2F22294);
}

void sub_1B2F22394()
{
  JUMPOUT(0x1B2F2229CLL);
}

void sub_1B2F2239C()
{
  JUMPOUT(0x1B2F222A4);
}

void sub_1B2F223A4()
{
  JUMPOUT(0x1B2F222ACLL);
}

void sub_1B2F223AC()
{
  JUMPOUT(0x1B2F222B4);
}

void sub_1B2F223B4()
{
  JUMPOUT(0x1B2F222BCLL);
}

void sub_1B2F223BC()
{
  JUMPOUT(0x1B2F222C4);
}

void sub_1B2F223C4()
{
  JUMPOUT(0x1B2F222CCLL);
}

uint64_t OZ3DExtrusionProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    OZChannelFolder::operator=(a1);
  return a1;
}

OZChannelBase *OZ3DExtrusionProperties::enable(OZ3DExtrusionProperties *this, int a2, char a3)
{
  OZChannelBase *result;

  result = OZChannelBase::enable((OZChannelBase *)this, a2, a3);
  if (a2)
    return (OZChannelBase *)OZChannel::setValue((OZChannel *)((char *)this + 8232), MEMORY[0x1E0CA2E68], 1.0, 0);
  return result;
}

void OZ3DExtrusionProperties::~OZ3DExtrusionProperties(OZ3DExtrusionProperties *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E65BAEC0;
  *((_QWORD *)this + 2) = &unk_1E65BB1A0;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 8232));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 8080));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7824));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 7568));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7440));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7312));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6856));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6704));
  OZChannelRotation3D::~OZChannelRotation3D((OZ3DExtrusionProperties *)((char *)this + 5848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5696));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 5544));
  OZChannelGradient::~OZChannelGradient((OZ3DExtrusionProperties *)((char *)this + 4744));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 4488));
  *((_QWORD *)this + 525) = off_1E659C5E0;
  *((_QWORD *)this + 527) = &unk_1E659C950;
  PCString::~PCString((PCString *)this + 560);
  v2 = (void **)((char *)this + 4456);
  std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZChannelEnum::~OZChannelEnum((PCString *)this + 525);
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3944));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 3688));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 3560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3408));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 3256));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 3128));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 2976));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2720));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 2592));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 2336));
  OZChannel2D::~OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1896));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 1640));
  OZChannel2D::~OZChannel2D((OZ3DExtrusionProperties *)((char *)this + 1200));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 944));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 536));
  OZChannelEnum::~OZChannelEnum((OZ3DExtrusionProperties *)((char *)this + 280));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DExtrusionProperties::~OZ3DExtrusionProperties(OZ3DExtrusionProperties *this)
{
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties((OZ3DExtrusionProperties *)((char *)this - 16));
}

{
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties((OZ3DExtrusionProperties *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DExtrusionProperties::environmentType(OZ3DExtrusionProperties *this)
{
  char isDisabled;
  uint64_t result;

  isDisabled = OZChannelBase::isDisabled((OZChannelBase *)((char *)this + 3560), 0);
  result = 0;
  if ((isDisabled & 1) == 0)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3944), MEMORY[0x1E0CA2E68], 0.0))
      return 2;
    else
      return 1;
  }
  return result;
}

uint64_t `non-virtual thunk to'OZ3DExtrusionProperties::writeBody(OZ3DExtrusionProperties *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZ3DExtrusionProperties::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  double v4;
  unsigned int ValueAsInt;
  unsigned int v6;
  const CMTime *v7;
  unsigned int ValueAsUint;
  const CMTime *v9;
  int v10;
  double v11;
  double DefaultValue;

  if (*(_BYTE *)(theApp + 81))
    OZChannelFolder::setFoldFlag(this, 4);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 7440), 0x800000);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 7440), 4);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 7440), 2, 0);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 280), 2))
  {
    v4 = 0.0;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 280), MEMORY[0x1E0CA2E68], 0.0);
    if (ValueAsInt != 1)
    {
      v4 = 1.0;
      if ((ValueAsInt & 0xFFFFFFFE) != 2)
      {
        if (ValueAsInt == 4)
          v6 = 2;
        else
          v6 = ValueAsInt;
        v4 = (double)v6;
      }
    }
    OZChannel::setValue((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], v4, 0);
  }
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 4488), 2))
  {
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 4488), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setValue((OZChannel *)((char *)this + 3944), v7, (double)ValueAsUint, 0);
    if (ValueAsUint >= OZChannelEnum::getNumberOfStrings((OZChannelEnum *)((char *)this + 3944)))
      OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E0CA2E68], 0.0, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 5544), 0x100000000, 0);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 280), 10, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4488), 10, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1200), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1896), 0x800000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5848), 0x800000);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 3688), 2))
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 3688), MEMORY[0x1E0CA2E68], 0.0) == 1)
      OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E0CA2E68], 1.0, 0);
    if (OZChannelBase::isDisabled((OZChannelBase *)((char *)this + 3560), 1))
      OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E0CA2E68], 0.0, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3688), 2, 0);
  }
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 7824), 0x8000))
  {
    v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v10 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 7824), MEMORY[0x1E0CA2E68], 0.0);
    v11 = 1.0;
    if (v10)
      v11 = 0.0;
    OZChannel::setValue((OZChannel *)((char *)this + 7568), v9, v11, 0);
  }
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 4200), 2))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 4200), 10, 0);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 4200), MEMORY[0x1E0CA2E68], 0.0))
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 3560), 1, 1);
      DefaultValue = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 4200), MEMORY[0x1E0CA2E68], 0.0);
    }
    else
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 3560), 0, 1);
      DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 3944));
    }
    OZChannel::setValue((OZChannel *)((char *)this + 3944), MEMORY[0x1E0CA2E68], DefaultValue, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3560), 0x100000000, 0);
  }
  if (OZChannelBase::isEnabled((OZChannelBase *)this, 1, 1))
    OZChannel::setValue((OZChannel *)((char *)this + 8232), MEMORY[0x1E0CA2E68], 1.0, 0);
  return OZChannelFolder::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZ3DExtrusionProperties::parseEnd(OZ3DExtrusionProperties *this, PCSerializerReadStream *a2)
{
  return OZ3DExtrusionProperties::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
}

void std::__call_once_param<std::tuple<OZ3DExtrusionProperties_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DExtrusionProperties_Factory *v0;

  v0 = (OZ3DExtrusionProperties_Factory *)operator new();
  OZ3DExtrusionProperties_Factory::OZ3DExtrusionProperties_Factory(v0);
  OZ3DExtrusionProperties_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F22AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZ3DExtrusionProperties_Factory::OZ3DExtrusionProperties_Factory(OZ3DExtrusionProperties_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B35611E0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65BB210;
  *((_QWORD *)this + 16) = &unk_1E65BB2E0;
}

void sub_1B2F22B54(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZ3DExtrusionProperties *OZ3DExtrusionProperties_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZ3DExtrusionProperties *v6;

  v6 = (OZ3DExtrusionProperties *)operator new();
  OZ3DExtrusionProperties::OZ3DExtrusionProperties(v6, this, a2, a3, 0);
  return v6;
}

void sub_1B2F22BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C402ADE992BLL);
  _Unwind_Resume(a1);
}

OZ3DExtrusionProperties *OZ3DExtrusionProperties_Factory::createCopy(OZ3DExtrusionProperties_Factory *this, OZFactoryBase *a2)
{
  OZ3DExtrusionProperties *v3;
  const OZ3DExtrusionProperties *v4;

  v3 = (OZ3DExtrusionProperties *)operator new();
  OZ3DExtrusionProperties::OZ3DExtrusionProperties(v3, v4, 0);
  return v3;
}

void sub_1B2F22C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C402ADE992BLL);
  _Unwind_Resume(a1);
}

OZ3DExtrusionProperties *OZ3DExtrusionProperties_Factory::createChannelCopy(OZ3DExtrusionProperties_Factory *this, OZChannelBase *a2)
{
  OZ3DExtrusionProperties *v3;
  const OZ3DExtrusionProperties *v4;

  v3 = (OZ3DExtrusionProperties *)operator new();
  OZ3DExtrusionProperties::OZ3DExtrusionProperties(v3, v4, 0);
  return v3;
}

void sub_1B2F22CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C402ADE992BLL);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl *v11;
  OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *v12;
  OZChannelInfo *v13;
  PCString v14;
  PCString v15;

  Instance = (OZFactory *)OZChannelImageWithOptions_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, 0);
  *(_QWORD *)this = &off_1E65BB338;
  *((_QWORD *)this + 2) = &unk_1E65BB690;
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Image Label"));
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136), &v15, (OZChannelFolder *)this, 1u, 0x10000u);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Image Frame"));
  v12 = (OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(v11);
  v13 = (OZChannelInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(v12);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 320), &v15, (OZChannelFolder *)this, 2u, 0x10000, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Image Hold Frame"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), &v15, (OZChannelFolder *)this, 3u, 0x10000u, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Image Offset Label"));
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), 0.0, 0.0, &v15, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v15);
  PCURL::PCURL((PCURL *)&v15, CFSTR("Channel Image Wrap Mode Enum"));
  PCURL::PCURL((PCURL *)&v14, CFSTR("Channel Image Wrap Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), &v15, &v14, (OZChannelFolder *)this, 5u, 0x10000u, 0, 0);
  PCString::~PCString(&v14);
  PCString::~PCString(&v15);
  *((_QWORD *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelImageWithOptions *)((char *)this + 624));
  *((_BYTE *)this + 1064) = 0;
}

void sub_1B2F22F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelImageForImageWithOptions *v11;
  OZChannel *v12;
  OZChannelBool *v13;
  OZChannelPosition *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;

  v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  _QWORD *v7;
  OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl *v8;
  OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *Instance;
  OZChannelInfo *v10;
  PCString v11;
  PCString v12;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, 0);
  *v7 = &off_1E65BB338;
  v7[2] = &unk_1E65BB690;
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Image Label"));
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136), &v12, (OZChannelFolder *)this, 1u, 0x10000u);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Image Frame"));
  Instance = (OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(v8);
  v10 = (OZChannelInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(Instance);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 320), &v12, (OZChannelFolder *)this, 2u, 0x10000, (OZChannelImpl *)Instance, v10);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Image Hold Frame"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), &v12, (OZChannelFolder *)this, 3u, 0x10000u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Image Offset Label"));
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), 0.0, 0.0, &v12, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Channel Image Wrap Mode Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Channel Image Wrap Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), &v12, &v11, (OZChannelFolder *)this, 5u, 0x10000u, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  *((_QWORD *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelImageWithOptions *)((char *)this + 624));
  *((_BYTE *)this + 1064) = 0;
}

void sub_1B2F23234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelImageForImageWithOptions *v11;
  OZChannel *v12;
  OZChannelBool *v13;
  OZChannelPosition *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;

  v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl *v6;
  OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *Instance;
  OZChannelInfo *v8;
  PCString v9;
  PCString v10;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, 0);
  *v5 = &off_1E65BB338;
  v5[2] = &unk_1E65BB690;
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Image Label"));
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136), &v10, (OZChannelFolder *)this, 1u, 0x10000u);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Image Frame"));
  Instance = (OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(v6);
  v8 = (OZChannelInfo *)OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(Instance);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 320), &v10, (OZChannelFolder *)this, 2u, 0x10000, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Image Hold Frame"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), &v10, (OZChannelFolder *)this, 3u, 0x10000u, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Image Offset Label"));
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), 50.0, 50.0, &v10, (OZChannelFolder *)this, 4u, 0, 2u, 0, 0);
  PCString::~PCString(&v10);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Channel Image Wrap Mode Enum"));
  PCURL::PCURL((PCURL *)&v9, CFSTR("Channel Image Wrap Mode Label"));
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), &v10, &v9, (OZChannelFolder *)this, 5u, 0x10000u, 0, 0);
  PCString::~PCString(&v9);
  PCString::~PCString(&v10);
  *((_QWORD *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelImageWithOptions *)((char *)this + 624));
}

void sub_1B2F23514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelImageForImageWithOptions *v11;
  OZChannel *v12;
  OZChannelBool *v13;
  OZChannelPosition *v14;
  OZChannelEnum *v15;
  OZChannelEnum *v16;

  v16 = v15;
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelPosition::~OZChannelPosition(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannel::~OZChannel(v12);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::OZChannelImageWithOptions(OZChannelImageWithOptions *this, const OZChannelImageWithOptions *a2, OZChannelFolder *a3)
{
  _QWORD *v5;
  uint64_t v6;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *v5 = &off_1E65BB338;
  v5[2] = &unk_1E65BB690;
  v6 = (uint64_t)(v5 + 17);
  OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions((OZChannelImageForImageWithOptions *)(v5 + 17), (const OZChannelImageWithOptions *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 320), (const OZChannelBase *)((char *)a2 + 320), (OZChannelFolder *)this);
  *((_QWORD *)this + 40) = &off_1E6551AF8;
  *((_QWORD *)this + 42) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 472), (const OZChannelBase *)((char *)a2 + 472), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624), (const OZChannelImageWithOptions *)((char *)a2 + 624), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328), (const OZChannelImageWithOptions *)((char *)a2 + 1328), (OZChannelFolder *)this);
  *((_QWORD *)this + 7) |= 0x1000000000uLL;
  OZChannelMoveableImage::setOffsetChannel(v6, (OZChannelImageWithOptions *)((char *)this + 624));
}

void sub_1B2F236C8(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelImageForImageWithOptions *v2;
  OZChannel *v3;
  OZChannelBool *v4;
  OZChannelPosition *v5;
  OZChannelEnum *v6;

  OZChannelEnum::~OZChannelEnum(v6);
  OZChannelPosition::~OZChannelPosition(v5);
  OZChannelBool::~OZChannelBool(v4);
  OZChannel::~OZChannel(v3);
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F23724()
{
  JUMPOUT(0x1B2F23714);
}

const __CFString *OZChannelImageWithOptions::getObjCWrapperName(OZChannelImageWithOptions *this)
{
  return CFSTR("CHChannelImageWithOptions");
}

OZChannelImageWithOptions *OZChannelImageWithOptions::clone(OZChannelImageWithOptions *this)
{
  OZChannelImageWithOptions *v2;

  v2 = (OZChannelImageWithOptions *)operator new();
  OZChannelImageWithOptions::OZChannelImageWithOptions(v2, this, 0);
  return v2;
}

void sub_1B2F23784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::copy(OZChannelImageWithOptions *this, const OZChannelBase *a2, uint64_t a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannelMoveableImage::copy((OZChannelImageWithOptions *)((char *)this + 136), (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannel::copy((OZChannel *)((char *)this + 320), (const OZChannelBase *)((char *)v4 + 320), a3);
  OZChannel::copy((OZChannel *)((char *)this + 472), (const OZChannelBase *)((char *)v4 + 472), a3);
  OZChannelPosition::copy((OZChannelImageWithOptions *)((char *)this + 624), (const OZChannelBase *)((char *)v4 + 624), a3);
  OZChannelEnum::copy((PCString *)this + 166, (const OZChannelBase *)((char *)v4 + 1328), a3);
}

uint64_t OZChannelImageWithOptions::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  uint64_t result;

  result = OZChannelFolder::parseEnd(this, a2);
  *((_QWORD *)this + 7) |= 0x1000000000uLL;
  return result;
}

uint64_t `non-virtual thunk to'OZChannelImageWithOptions::parseEnd(OZChannelImageWithOptions *this, PCSerializerReadStream *a2)
{
  uint64_t result;

  result = OZChannelFolder::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  *((_QWORD *)this + 5) |= 0x1000000000uLL;
  return result;
}

uint64_t OZChannelImageWithOptions::getFrame@<X0>(OZChannelImageWithOptions *this@<X0>, const CMTime *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OZScene *v10;
  CMTime *v11;
  double v12;
  void *ChannelRootBase;
  CMTimeEpoch v14;
  CMTimeEpoch epoch;
  uint64_t v16;
  CMTime v17;
  __n128 v18;
  CMTimeEpoch v19;
  CMTime v20;
  CMTime time2;
  CMTime time1;

  result = (uint64_t)OZChannelBase::getChannelRootBase((OZChannelBase *)this);
  if (!result
    || (v7 = result, (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 840))(result)) == 0)
    || (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 840))(v7),
        (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 264))(v8)) == 0))
  {
    v16 = MEMORY[0x1E0CA2E68];
    *a3 = *(__n128 *)MEMORY[0x1E0CA2E68];
    epoch = *(_QWORD *)(v16 + 16);
    goto LABEL_8;
  }
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 840))(v7);
  v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 264))(v9);
  v11 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 320), MEMORY[0x1E0CA2E68], 0.0);
  OZScene::getTimeForFrame(v10, v12, a3);
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 472), v11, 0.0);
  if (!(_DWORD)result)
  {
    ChannelRootBase = OZChannelBase::getChannelRootBase((OZChannelBase *)this);
    (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)ChannelRootBase + 712))(&v20);
    time2 = v20;
    time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
    time1 = *(CMTime *)a3->n128_u8;
    time2 = v17;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
    *a3 = v18;
    v14 = v19;
    a3[1].n128_u64[0] = v19;
    *(__n128 *)&time1.value = *a3;
    time1.epoch = v14;
    time2 = *v11;
    result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      *a3 = *(__n128 *)&v11->value;
      epoch = v11->epoch;
LABEL_8:
      a3[1].n128_u64[0] = epoch;
    }
  }
  return result;
}

void OZChannelImageWithOptions::setTimeRange(OZChannelImageWithOptions *this)
{
  const void *ImageNode;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double Seconds;
  __n128 v10;
  __int128 v11;
  uint64_t v12;
  CMTime time;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;

  ImageNode = OZChanElementOrFootageRef::getImageNode((OZChannelBase *)((char *)this + 136));
  if (ImageNode)
  {
    v3 = (*(uint64_t (**)(const void *))(*(_QWORD *)ImageNode + 104))(ImageNode);
    if (v3)
    {
      v4 = v3;
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 216))(v3);
      if (v5)
      {
        v6 = v5;
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4);
        if (v7)
        {
          v8 = v7;
          (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v6 + 712))(v14, v6);
          v11 = v15;
          v12 = v16;
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v10);
          operator/(&v11, (uint64_t)&v10, (uint64_t)&time);
          Seconds = CMTimeGetSeconds(&time);
          OZChannel::setMax((OZChannel *)((char *)this + 320), Seconds);
        }
      }
    }
  }
}

void `non-virtual thunk to'OZChannelImageWithOptions::~OZChannelImageWithOptions(OZChannelImageWithOptions *this)
{
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZChannelImageWithOptions *)((char *)this - 16));
}

{
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZChannelImageWithOptions *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::OZChannelImageWithOptions_frameImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::OZChannelImageWithOptions_frameImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::_OZChannelImageWithOptions_frame;
}

void std::__call_once_param<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::_OZChannelImageWithOptions_frame)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::OZChannelImageWithOptions_frameImpl(v0);
    OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::_OZChannelImageWithOptions_frame = (uint64_t)v0;
  }
}

void sub_1B2F23C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZChannelImageWithOptions::OZChannelImageWithOptions_frameImpl::OZChannelImageWithOptions_frameImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65BB700;
  this->var5 = (PCString *)&unk_1E65BB720;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2F23CD8(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::OZChannelImageWithOptions_frameInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::OZChannelImageWithOptions_frameInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::_OZChannelImageWithOptions_frameInfo;
}

void std::__call_once_param<std::tuple<OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *v0;

  if (!OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::_OZChannelImageWithOptions_frameInfo)
  {
    v0 = (OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)operator new();
    OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::OZChannelImageWithOptions_frameInfo(v0);
    OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::_OZChannelImageWithOptions_frameInfo = (uint64_t)v0;
  }
}

void sub_1B2F23DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo::OZChannelImageWithOptions_frameInfo(OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZChannelImageWithOptions::OZChannelImageWithOptions_frameInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65BB778;
  *((_QWORD *)this + 10) = &unk_1E65BB798;
  return this;
}

void sub_1B2F23E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  void *v11;

  Instance = (OZFactory *)OZChannelImageForImageWithOptions_Factory::getInstance(this);
  OZChannelMoveableImage::OZChannelMoveableImage(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65BB7F0;
  *((_QWORD *)this + 2) = &unk_1E65BBB78;
  if (a3)
  else
    v11 = 0;
  *((_QWORD *)this + 22) = v11;
}

uint64_t OZChannelImageForImageWithOptions_Factory::getInstance(OZChannelImageForImageWithOptions_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelImageForImageWithOptions_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelImageForImageWithOptions_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageForImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageForImageWithOptions_Factory::_instance;
}

void OZChannelImageForImageWithOptions::OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this, const OZChannelImageForImageWithOptions *a2, OZChannelFolder *a3)
{
  _QWORD *v5;
  void *v6;

  OZChannelMoveableImage::OZChannelMoveableImage(this, a2, a3);
  *v5 = &off_1E65BB7F0;
  v5[2] = &unk_1E65BBB78;
  if (a3)
  else
    v6 = 0;
  *((_QWORD *)this + 22) = v6;
}

void `non-virtual thunk to'OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this)
{
  OZChannelMoveableImage::~OZChannelMoveableImage((OZChannelImageForImageWithOptions *)((char *)this - 16));
}

{
  OZChannelMoveableImage::~OZChannelMoveableImage((OZChannelImageForImageWithOptions *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions(OZChannelImageForImageWithOptions *this)
{
  OZChannelMoveableImage::~OZChannelMoveableImage(this);
  JUMPOUT(0x1B5E29170);
}

OZChannelMoveableImage *OZChannelImageForImageWithOptions::clone(OZChannelImageForImageWithOptions *this)
{
  OZChannelMoveableImage *v2;

  v2 = (OZChannelMoveableImage *)operator new();
  OZChannelMoveableImage::OZChannelMoveableImage(v2, this, 0);
  *(_QWORD *)v2 = &off_1E65BB7F0;
  *((_QWORD *)v2 + 2) = &unk_1E65BBB78;
  *((_QWORD *)v2 + 22) = 0;
  return v2;
}

void sub_1B2F24098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions::setObjectID(OZChannelBase *this, unsigned int a2)
{
  OZChannelImageWithOptions *var8;

  OZChanObjectManipRef::setObjectID(this, a2, 0);
  var8 = (OZChannelImageWithOptions *)this[1].var8;
  if (var8)
    OZChannelImageWithOptions::setTimeRange(var8);
}

void std::__call_once_param<std::tuple<OZChannelImageForImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelImageForImageWithOptions_Factory *v0;

  v0 = (OZChannelImageForImageWithOptions_Factory *)operator new();
  OZChannelImageForImageWithOptions_Factory::OZChannelImageForImageWithOptions_Factory(v0);
  OZChannelImageForImageWithOptions_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F24138(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelImageForImageWithOptions_Factory::OZChannelImageForImageWithOptions_Factory(OZChannelImageForImageWithOptions_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3561310;
  v4 = xmmword_1B3561300;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65BBBE8;
  *((_QWORD *)this + 16) = &unk_1E65BBCB8;
}

void sub_1B2F241D8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelMoveableImage *OZChannelImageForImageWithOptions_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelMoveableImage *v6;

  v6 = (OZChannelMoveableImage *)operator new();
  OZChannelMoveableImage::OZChannelMoveableImage(v6, this, a2, a3);
  *(_QWORD *)v6 = &off_1E65BB7F0;
  *((_QWORD *)v6 + 2) = &unk_1E65BBB78;
  *((_QWORD *)v6 + 22) = 0;
  return v6;
}

void sub_1B2F24260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

OZChannelMoveableImage *OZChannelImageForImageWithOptions_Factory::createCopy(OZChannelImageForImageWithOptions_Factory *this, OZFactoryBase *a2)
{
  OZChannelMoveableImage *v3;
  const OZChannelMoveableImage *v4;

  v3 = (OZChannelMoveableImage *)operator new();
  OZChannelMoveableImage::OZChannelMoveableImage(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65BB7F0;
  *((_QWORD *)v3 + 2) = &unk_1E65BBB78;
  *((_QWORD *)v3 + 22) = 0;
  return v3;
}

void sub_1B2F24304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

OZChannelMoveableImage *OZChannelImageForImageWithOptions_Factory::createChannelCopy(OZChannelImageForImageWithOptions_Factory *this, OZChannelBase *a2)
{
  OZChannelMoveableImage *v3;
  const OZChannelMoveableImage *v4;

  v3 = (OZChannelMoveableImage *)operator new();
  OZChannelMoveableImage::OZChannelMoveableImage(v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65BB7F0;
  *((_QWORD *)v3 + 2) = &unk_1E65BBB78;
  *((_QWORD *)v3 + 22) = 0;
  return v3;
}

void sub_1B2F243A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4076F15E2FLL);
  _Unwind_Resume(a1);
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChanElementOrFootageRef_Factory::getInstance(this);
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65BBD10;
  *((_QWORD *)this + 2) = &unk_1E65BC090;
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  _QWORD *v6;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5, a6);
  *v6 = &off_1E65BBD10;
  v6[2] = &unk_1E65BC090;
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4);
  *v4 = &off_1E65BBD10;
  v4[2] = &unk_1E65BC090;
}

void OZChanElementOrFootageRef::OZChanElementOrFootageRef(OZChanElementOrFootageRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *v3 = &off_1E65BBD10;
  v3[2] = &unk_1E65BC090;
}

void `non-virtual thunk to'OZChanElementOrFootageRef::~OZChanElementOrFootageRef(OZChanElementOrFootageRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanElementOrFootageRef *)((char *)this - 16));
}

{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanElementOrFootageRef *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChanElementOrFootageRef::~OZChanElementOrFootageRef(OZChanElementOrFootageRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);
  JUMPOUT(0x1B5E29170);
}

OZChanSceneNodeRef *OZChanElementOrFootageRef::clone(OZChanElementOrFootageRef *this)
{
  OZChanSceneNodeRef *v2;

  v2 = (OZChanSceneNodeRef *)operator new();
  OZChanSceneNodeRef::OZChanSceneNodeRef(v2, this, 0);
  *(_QWORD *)v2 = &off_1E65BBD10;
  *((_QWORD *)v2 + 2) = &unk_1E65BC090;
  return v2;
}

void sub_1B2F2456C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanElementOrFootageRef::getImageNode(OZChannelBase *this)
{
  const void *result;

  result = OZChanSceneNodeRef::getNode(this);
  if (result)
  return result;
}

uint64_t OZChanElementOrFootageRef::setImageNode(OZChanElementOrFootageRef *this, OZImageNode *lpsrc)
{
  if (lpsrc)
  return OZChanSceneNodeRef::setNode(this, lpsrc);
}

unint64_t OZChanElementOrFootageRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  unint64_t v4;
  unint64_t result;
  __int128 v6;
  __int128 v7;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)((*(uint64_t (**)(const OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2) + 8);
  v7 = xmmword_1B3054BC0;
  if ((OZFactory::isKindOfClass(v4, (int32x4_t *)&v7) & 1) != 0)
    return OZChanSceneNodeRef::canReferenceObject(this, a2);
  v6 = xmmword_1B355DB10;
  result = OZFactory::isKindOfClass(v4, (int32x4_t *)&v6);
  if ((_DWORD)result)
    return OZChanSceneNodeRef::canReferenceObject(this, a2);
  return result;
}

void OZChannelMoveableImage::OZChannelMoveableImage(OZChannelMoveableImage *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t v6;

  OZChanElementOrFootageRef::OZChanElementOrFootageRef(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v6 = &off_1E65BC100;
  *(_QWORD *)(v6 + 16) = &unk_1E65BC480;
  *(_QWORD *)(v6 + 160) = 0;
  *(_BYTE *)(v6 + 168) = 0;
}

void OZChannelMoveableImage::OZChannelMoveableImage(OZChannelMoveableImage *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChanElementOrFootageRef::OZChanElementOrFootageRef(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E65BC100;
  *(_QWORD *)(v4 + 16) = &unk_1E65BC480;
  *(_QWORD *)(v4 + 160) = 0;
  *(_BYTE *)(v4 + 168) = 0;
}

void OZChannelMoveableImage::OZChannelMoveableImage(OZChannelMoveableImage *this, const OZChannelMoveableImage *a2, OZChannelFolder *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;

  OZChanElementOrFootageRef::OZChanElementOrFootageRef(this, a2, a3);
  *v5 = &off_1E65BC100;
  v5[2] = &unk_1E65BC480;
  v6 = *((_QWORD *)a2 + 20);
  if (v6)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)this + 20) = v6;
  *((_BYTE *)this + 168) = v7;
}

void sub_1B2F24764(_Unwind_Exception *a1)
{
  OZChanElementOrFootageRef *v1;

  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(v1);
  _Unwind_Resume(a1);
}

void OZChannelMoveableImage::~OZChannelMoveableImage(OZChannelMoveableImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E65BC100;
  *((_QWORD *)this + 2) = &unk_1E65BC480;
  if (*((_BYTE *)this + 168))
  {
    v2 = *((_QWORD *)this + 20);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 20) = 0;
  }
  OZChanElementOrFootageRef::~OZChanElementOrFootageRef(this);
}

{
  OZChannelMoveableImage::~OZChannelMoveableImage(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChannelMoveableImage::~OZChannelMoveableImage(OZChannelMoveableImage *this)
{
  OZChannelMoveableImage::~OZChannelMoveableImage((OZChannelMoveableImage *)((char *)this - 16));
}

{
  OZChannelMoveableImage::~OZChannelMoveableImage((OZChannelMoveableImage *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelMoveableImage::copy(OZChannelMoveableImage *this, const OZChannelBase *a2, uint64_t a3)
{
  uint64_t v6;

  OZChanSceneNodeRef::copy(this, a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 232))(*((_QWORD *)this + 20), v6, a3);
}

OZChannelMoveableImage *OZChannelMoveableImage::clone(OZChannelMoveableImage *this)
{
  OZChannelMoveableImage *v2;

  v2 = (OZChannelMoveableImage *)operator new();
  OZChannelMoveableImage::OZChannelMoveableImage(v2, this, 0);
  return v2;
}

void sub_1B2F248D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4071F57909);
  _Unwind_Resume(a1);
}

uint64_t OZChannelMoveableImage::setOffsetChannel(uint64_t this, OZChannel2D *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_BYTE *)(this + 168))
  {
    this = *(_QWORD *)(this + 160);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_BYTE *)(v3 + 168) = 0;
  }
  *(_QWORD *)(v3 + 160) = a2;
  return this;
}

void OZMaskComp::OZMaskComp(OZMaskComp *this)
{
  *((_QWORD *)this + 14) = &off_1E65EB048;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E65BC608);
  *(_QWORD *)this = &off_1E65BC4F8;
  *((_QWORD *)this + 14) = &unk_1E65BC5E8;
  *((_BYTE *)this + 104) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
}

void sub_1B2F249B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 112) = v4;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void OZMaskComp::setMasks(uint64_t a1, uint64_t a2)
{
  LiGroup *v4;
  uint64_t v5;
  uint64_t v6;
  OZImageNode *v7;
  OZImageNode *v8;
  __int128 *v9;
  __int128 v10;
  char *v11;
  float v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  char v16;
  double v17;
  PCSharedCount *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  PCException *exception;
  char **v54;
  OZRenderState v55;
  PCSharedCount v56;
  PCSharedCount v57;
  __int128 v58;
  _BYTE v59[48];
  __int128 v60;
  __int128 v61;
  _BYTE v62[48];
  uint64_t v63;
  PCSharedCount v64;
  PCSharedCount v65;
  _BYTE v66[72];
  __int128 v67;
  uint64_t v68;
  LiGroup *v69;
  PCSharedCount v70[7];
  uint64_t v71[20];
  _QWORD v72[10];
  _BYTE v73[208];
  PCString v74;

  OZChannelBase::setRangeName(*(OZChannelBase **)(a1 + 88), &v74);
  v4 = (LiGroup *)operator new();
  LiGroup::LiGroup(v4);
  v69 = v4;
  PCSharedCount::PCSharedCount(v70, (LiGroup *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  LiGraphBuilder::LiGraphBuilder(v73, &v69, &v74);
  PCSharedCount::~PCSharedCount(v70);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v69);
  v72[9] = v73;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 != a2)
  {
    v54 = (char **)(a1 + 64);
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 16);
      if (!v6
      {
        exception = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCException::PCException(exception);
        *(_QWORD *)exception = &unk_1E656D028;
      }
      v8 = v7;
      v9 = *(__int128 **)(a1 + 88);
      v10 = *v9;
      v68 = *((_QWORD *)v9 + 2);
      v67 = v10;
      if (!(*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + 104))(v6 + 16, &v67, 0, 1, 1))goto LABEL_46;
      v11 = *(char **)(v5 + 16);
      v12 = 1.0;
      if (!v11)
        break;
      if (!v13)
        goto LABEL_12;
      v14 = *(_QWORD *)(a1 + 88);
      v15 = *(_QWORD *)(v14 + 16);
      *(_OWORD *)&v55.var0.var0 = *(_OWORD *)v14;
      v55.var0.var3 = v15;
      OZElement::getOpacity((OZElement *)(v13 + 200), (const CMTime *)&v55, 0);
      v16 = 0;
      v12 = v17;
      if (v12 <= -0.00001 || v12 >= 0.00001)
        goto LABEL_13;
LABEL_46:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == a2)
        goto LABEL_47;
    }
    v13 = 0;
LABEL_12:
    v16 = 1;
LABEL_13:
    Render360GroupAsEquirectSentry::Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v66, v8, *(OZRenderParams **)(a1 + 88));
    (*(void (**)(PCSharedCount *__return_ptr, OZImageNode *, _QWORD, LiGroup **, uint64_t))(*(_QWORD *)v8 + 152))(&v64, v8, *(_QWORD *)(a1 + 88), &v69, 1);
    if (v64.var0)
    {
      v18 = *(PCSharedCount **)(a1 + 48);
      if ((unint64_t)v18 >= *(_QWORD *)(a1 + 56))
      {
        v19 = std::vector<PCPtr<LiImageSource>>::__push_back_slow_path<PCPtr<LiImageSource> const&>((uint64_t *)(a1 + 40), &v64);
      }
      else
      {
        v18->var0 = v64.var0;
        PCSharedCount::PCSharedCount(v18 + 1, &v65);
        v19 = (uint64_t)&v18[2];
        *(_QWORD *)(a1 + 48) = v18 + 2;
      }
      *(_QWORD *)(a1 + 48) = v19;
      *(_QWORD *)&v58 = 0x100000000;
      *(_QWORD *)&v62[40] = 0x3FF0000000000000;
      *(_QWORD *)v62 = 0x3FF0000000000000;
      *(_QWORD *)&v59[40] = 0x3FF0000000000000;
      *(_QWORD *)v59 = 0x3FF0000000000000;
      memset(&v59[8], 0, 32);
      v60 = 0u;
      v61 = 0u;
      memset(&v62[8], 0, 32);
      LODWORD(v63) = 1065353216;
      if (v11)
      {
        v55.var0.var0 = 0;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v55.var0.var1);
        while (!*PCPtr<OZImageMaskRender>::operator=<LiImageSource>(&v55, (const void **)&v64.var0))
        {
          PCPtr<LiImageFilter>::PCPtr<LiImageSource>(&v56, &v64);
          if (!v56.var0)
            throw_PCNullPointerException(1);
          PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v64, *((PCShared_base **)v56.var0 + 2));
          PCSharedCount::~PCSharedCount(&v57);
        }
        if (!v55.var0.var0)
          throw_PCNullPointerException(1);
        *(_QWORD *)(v55.var0.var0 + 1440) = a1;
        LODWORD(v58) = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 1232))(v11);
        DWORD2(v58) = OZChannel::getValueAsInt((OZChannel *)(v11 + 2704), MEMORY[0x1E0CA2E68], 0.0);
        BYTE5(v58) = OZChannel::getValueAsInt((OZChannel *)(v11 + 2704), MEMORY[0x1E0CA2E68], 0.0) == 4;
        BYTE6(v58) = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 1240))(v11);
        LODWORD(v63) = 1065353216;
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v55.var0.var1);
      }
      else if ((v16 & 1) == 0)
      {
        OZRenderState::OZRenderState(&v55, *(const OZRenderState **)(a1 + 88));
        v55.var4 = 1;
        (*(void (**)(char *, _BYTE *, OZRenderState *))(*((_QWORD *)v13 + 25) + 1256))(v13 + 200, v59, &v55);
        LODWORD(v58) = OZChannel::getValueAsInt((OZChannel *)(v13 + 31984), MEMORY[0x1E0CA2E68], 0.0);
        DWORD2(v58) = 3;
        BYTE5(v58) = 0;
        BYTE6(v58) = OZChannel::getValueAsInt((OZChannel *)(v13 + 32240), MEMORY[0x1E0CA2E68], 0.0) != 0;
      }
      *(float *)&v63 = v12;
      v20 = *(_QWORD *)(a1 + 72);
      v21 = *(_QWORD *)(a1 + 80);
      if (v20 >= v21)
      {
        v30 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v20 - (_QWORD)*v54) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0x1AF286BCA1AF286)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v32 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v21 - (_QWORD)*v54) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0xD79435E50D7943)
          v33 = 0x1AF286BCA1AF286;
        else
          v33 = v31;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(a1 + 80, v33);
        else
          v34 = 0;
        v35 = &v34[152 * v30];
        v36 = *(_OWORD *)v59;
        *(_OWORD *)v35 = v58;
        *((_OWORD *)v35 + 1) = v36;
        v37 = *(_OWORD *)&v59[16];
        v38 = *(_OWORD *)&v59[32];
        v39 = v61;
        *((_OWORD *)v35 + 4) = v60;
        *((_OWORD *)v35 + 5) = v39;
        *((_OWORD *)v35 + 2) = v37;
        *((_OWORD *)v35 + 3) = v38;
        v40 = *(_OWORD *)v62;
        v41 = *(_OWORD *)&v62[16];
        v42 = *(_OWORD *)&v62[32];
        *((_QWORD *)v35 + 18) = v63;
        *((_OWORD *)v35 + 7) = v41;
        *((_OWORD *)v35 + 8) = v42;
        *((_OWORD *)v35 + 6) = v40;
        v44 = *(char **)(a1 + 64);
        v43 = *(char **)(a1 + 72);
        v45 = v35;
        if (v43 != v44)
        {
          do
          {
            v46 = *(_OWORD *)(v43 - 152);
            *(_OWORD *)(v45 - 136) = *(_OWORD *)(v43 - 136);
            *(_OWORD *)(v45 - 152) = v46;
            v47 = *(_OWORD *)(v43 - 120);
            v48 = *(_OWORD *)(v43 - 104);
            v49 = *(_OWORD *)(v43 - 88);
            *(_OWORD *)(v45 - 72) = *(_OWORD *)(v43 - 72);
            *(_OWORD *)(v45 - 88) = v49;
            *(_OWORD *)(v45 - 104) = v48;
            *(_OWORD *)(v45 - 120) = v47;
            v50 = *(_OWORD *)(v43 - 56);
            v51 = *(_OWORD *)(v43 - 40);
            v52 = *(_OWORD *)(v43 - 24);
            *((_QWORD *)v45 - 1) = *((_QWORD *)v43 - 1);
            *(_OWORD *)(v45 - 24) = v52;
            *(_OWORD *)(v45 - 40) = v51;
            *(_OWORD *)(v45 - 56) = v50;
            v45 -= 152;
            v43 -= 152;
          }
          while (v43 != v44);
          v43 = *v54;
        }
        v29 = v35 + 152;
        *(_QWORD *)(a1 + 64) = v45;
        *(_QWORD *)(a1 + 72) = v35 + 152;
        *(_QWORD *)(a1 + 80) = &v34[152 * v33];
        if (v43)
          operator delete(v43);
      }
      else
      {
        v22 = *(_OWORD *)v59;
        *(_OWORD *)v20 = v58;
        *(_OWORD *)(v20 + 16) = v22;
        v23 = *(_OWORD *)&v59[16];
        v24 = *(_OWORD *)&v59[32];
        v25 = v61;
        *(_OWORD *)(v20 + 64) = v60;
        *(_OWORD *)(v20 + 80) = v25;
        *(_OWORD *)(v20 + 32) = v23;
        *(_OWORD *)(v20 + 48) = v24;
        v26 = *(_OWORD *)v62;
        v27 = *(_OWORD *)&v62[16];
        v28 = *(_OWORD *)&v62[32];
        *(_QWORD *)(v20 + 144) = v63;
        *(_OWORD *)(v20 + 112) = v27;
        *(_OWORD *)(v20 + 128) = v28;
        *(_OWORD *)(v20 + 96) = v26;
        v29 = (char *)(v20 + 152);
      }
      *(_QWORD *)(a1 + 72) = v29;
    }
    PCSharedCount::~PCSharedCount(&v65);
    Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)v66);
    goto LABEL_46;
  }
LABEL_47:
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v72);
  std::__list_imp<unsigned int>::clear(v71);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)v73);
}

void sub_1B2F25058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCSharedCount *a17, PCSharedCount *a18)
{
  PCSharedCount::~PCSharedCount(a18);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&STACK[0x218]);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x358]);
  std::__list_imp<unsigned int>::clear(&STACK[0x2B8]);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x3A8]);
  _Unwind_Resume(a1);
}

_QWORD *PCPtr<OZImageMaskRender>::operator=<LiImageSource>(_QWORD *a1, const void **a2)
{
  void *v4;
  const PCSharedCount *v5;
  PCSharedCount *v6;
  PCSharedCount v8;
  PCSharedCount v9;

  if (!*a2)
  {
    *a1 = 0;
    goto LABEL_5;
  }
  *a1 = v4;
  if (!v4)
  {
LABEL_5:
    v6 = &v9;
    PCSharedCount::PCSharedCount(&v9);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v9);
    goto LABEL_6;
  }
  v5 = (const PCSharedCount *)(a2 + 1);
  v6 = &v8;
  PCSharedCount::PCSharedCount(&v8, v5);
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v8);
LABEL_6:
  PCSharedCount::~PCSharedCount(v6);
  return a1;
}

void sub_1B2F251D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a9);
  _Unwind_Resume(a1);
}

CGColorSpace **OZMaskComp::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  LiAgent *v3;
  HGRenderer *HeliumRenderer;
  uint64_t RequestedColorDescription;
  CGColorSpace *v8;
  uint64_t v9;
  unsigned __int8 v10;
  int isDynamicRangeManaged;
  CGColorSpace *CGColorSpace;
  uint64_t Crop;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  LiImageSource *v17;
  float *v18;
  LiImageSource *v19;
  LiImageSource *v20;
  double *v21;
  double *v22;
  LiAgent *v23;
  HGRenderer *v24;
  unint64_t DOD;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  HGNode *v34;
  FxColorDescription *ActualColorDescription;
  const LiImagePolygon *v36;
  int v37;
  _BOOL4 v38;
  char *v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  _BOOL4 v43;
  _BOOL4 v45;
  BOOL v46;
  HGNode *v47;
  HGNode *v48;
  HGNode *v49;
  HgcMaskCompFirstPass *v50;
  int v51;
  __n128 v52;
  HGNode **v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  HGNode *v61;
  int v62;
  unint64_t v63;
  HMaskElem *v64;
  FxColorDescription *v65;
  float64_t v66;
  void (*v67)(HMaskElem *, _QWORD, float, float, float, float);
  float v68;
  float64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 IsNull;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  HGNode *v81;
  int v83;
  HGNode **v84;
  OZMaskComp *v85;
  HGNode *v86;
  float64x2_t v87;
  double v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  HGNode *v92;
  HMaskElem *v93;
  uint64_t v94;
  _BYTE v95[64];
  uint64_t v96;
  uint64_t v97;
  HGNode *v98;
  uint64_t *v99[8];
  uint64_t v100;
  uint64_t v101;
  HGNode *v102;
  FxColorDescription v103;
  FxColorDescription v104;
  uint64_t v105;
  int v106;
  uint64_t v107;

  v3 = a2;
  v107 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)a2 + 8) = 1;
  HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  RequestedColorDescription = LiAgent::getRequestedColorDescription(v3);
  v8 = *(CGColorSpace **)RequestedColorDescription;
  v104._pcColorDesc._colorSpaceRef._obj = v8;
  if (v8)
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  v9 = *(_QWORD *)(RequestedColorDescription + 8);
  v104._pcColorDesc._toneMapMethod._gain = *(float *)(RequestedColorDescription + 16);
  *(_QWORD *)&v104._pcColorDesc._dynamicRange = v9;
  v104._isPremultiplied = *(_BYTE *)(RequestedColorDescription + 24);
  v85 = (OZMaskComp *)this;
  if ((FxColorDescription::isDynamicRangeManaged(&v104) & 1) != 0)
  {
    if ((v10 & 1) == 0
    {
      makeMaskingColorDescription(FxColorDescription const&)::maskingSpace = (uint64_t)PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
    }
    FxColorDescription::FxColorDescription((uint64_t)&v103, (CGColorSpace *)makeMaskingColorDescription(FxColorDescription const&)::maskingSpace, 0, &makeMaskingColorDescription(FxColorDescription const&)::toneMapMethod, 1);
  }
  else
  {
    memset(&v103, 0, sizeof(v103));
    PCColorDescription::PCColorDescription(&v103._pcColorDesc);
    v103._isPremultiplied = 1;
  }
  isDynamicRangeManaged = FxColorDescription::isDynamicRangeManaged(&v104);
  v106 = 1038174126;
  v105 = 0x3F170A3D3E99999ALL;
  if (isDynamicRangeManaged)
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace(&v103);
    PCGetColorSpaceLuminanceCoefficients(CGColorSpace, (float *)&v105);
  }
  LiAgent::getHelium(v3, this[2], &v102);
  if (v102)
  {
    LiImagePolygon::LiImagePolygon((LiImagePolygon *)v99);
    Crop = LiAgent::getCrop(v3);
    LiImagePolygon::operator=((uint64_t)v99, Crop);
    v14 = this[6] - this[5];
    if ((v14 >> 4))
    {
      v83 = isDynamicRangeManaged;
      v84 = a3;
      v98 = 0;
      LiImagePolygon::LiImagePolygon((LiImagePolygon *)v95);
      if ((int)(v14 >> 4) >= 1)
      {
        v15 = (v14 >> 4) + 1;
        while (1)
        {
          v16 = (v15 - 2);
          v17 = this[8];
          v18 = (float *)((char *)v17 + 152 * v16);
          if (v18[36] != 0.0)
            break;
LABEL_106:
          if ((unint64_t)--v15 <= 1)
            goto LABEL_107;
        }
        v93 = 0;
        v94 = 0;
        if (*((_BYTE *)v17 + 152 * v16 + 5))
        {
          v93 = (HMaskElem *)v105;
          LODWORD(v94) = v106;
        }
        else
        {
          *((_DWORD *)&v93 + *((int *)v17 + 38 * v16 + 2)) = 1065353216;
        }
        LiAgent::loadTransform((uint64_t)v3, (uint64_t)v17 + 152 * v16 + 16);
        v19 = this[5];
        v20 = (LiImageSource *)*((_QWORD *)v19 + 2 * v16);
        if (v20)
        {
          if (v21)
          {
            v22 = v21;
            v23 = v3;
            v24 = HeliumRenderer;
            DOD = HGRenderer::GetDOD(HeliumRenderer, v102);
            v27 = v26;
            if (HGRectIsNull(DOD, v26))
            {
              v28 = 0;
              LODWORD(v29) = 0;
              v30 = -1;
              v31 = -1;
            }
            else
            {
              v29 = HIDWORD(DOD);
              if ((int)DOD <= -1073741823)
                v28 = -1073741823;
              else
                v28 = DOD;
              if (SHIDWORD(DOD) <= -1073741823)
                LODWORD(v29) = -1073741823;
              if ((int)v27 >= 1073741822)
                v32 = 1073741822;
              else
                v32 = v27;
              v33 = HIDWORD(v27);
              if (SHIDWORD(v27) >= 1073741822)
                LODWORD(v33) = 1073741822;
              v30 = v32 - v28;
              v31 = v33 - v29;
            }
            HeliumRenderer = v24;
            v22[184] = (double)v28;
            v22[185] = (double)(int)v29;
            v22[186] = (double)v30;
            v22[187] = (double)v31;
            v3 = v23;
            this = (LiImageSource **)v85;
          }
        }
        LiAgent::getHelium(v3, v20, &v92);
        if (!v92)
        {
          v34 = (HGNode *)HGObject::operator new(0x1A0uLL);
          HGNode::HGNode(v34);
          if (v92 == v34)
          {
            if (v34)
              (*(void (**)(HGNode *))(*(_QWORD *)v34 + 24))(v34);
          }
          else
          {
            if (v92)
              (*(void (**)(void))(*(_QWORD *)v92 + 24))();
            v92 = v34;
          }
        }
        ActualColorDescription = (FxColorDescription *)LiAgent::getActualColorDescription(v3);
        v36 = (const LiImagePolygon *)LiAgent::getCrop(v3);
        LiImagePolygon::LiImagePolygon((LiImagePolygon *)&v87, v36);
        v37 = *(_DWORD *)v18;
        v38 = *(_DWORD *)v18 != 1;
        v39 = (char *)v17 + 152 * v16;
        v42 = v39[6];
        v41 = (unsigned __int8 *)(v39 + 6);
        v40 = v42;
        v43 = *(_DWORD *)v18 == 3;
        if (!v42)
          v38 = 1;
        if (v40)
          v43 = 0;
        if (!v38 || v43)
        {
          intersect(HeliumRenderer, (uint64_t)v95, &v98, (uint64_t)&v87, &v92);
LABEL_89:
          v91 = v90;
          goto LABEL_90;
        }
        if (v40)
          v45 = 0;
        else
          v45 = v37 == 1;
        if (v40)
          v46 = v37 != 3;
        else
          v46 = 1;
        if (!v45 && v46)
        {
          if (v37 == 2)
          {
            if (v40)
            {
              v97 = v96;
              if (((v91 - v90) & 0x1FFFFFFFE0) != 0)
              {
                cropToPolygon(HeliumRenderer, &v92, (LiImagePolygon *)&v87, ActualColorDescription, 1, 0, (uint64_t *)&v86);
                v47 = v86;
                if (v92 != v86)
                {
                  if (v92)
                    goto LABEL_66;
                  goto LABEL_67;
                }
                if (!v92)
                  goto LABEL_89;
                goto LABEL_88;
              }
              goto LABEL_90;
            }
          }
          else if (v98 || v40)
          {
            if (((v97 - v96) & 0x1FFFFFFFE0) != 0)
            {
              cropToPolygon(HeliumRenderer, &v98, (LiImagePolygon *)v95, ActualColorDescription, 1, 0, (uint64_t *)&v86);
              v48 = v86;
              if (v98 == v86)
              {
                if (v98)
                  (*(void (**)(void))(*(_QWORD *)v98 + 24))();
              }
              else
              {
                if (v98)
                {
                  (*(void (**)(void))(*(_QWORD *)v98 + 24))();
                  v48 = v86;
                }
                v98 = v48;
              }
              v97 = v96;
            }
            if (((v91 - v90) & 0x1FFFFFFFE0) == 0)
              goto LABEL_90;
            cropToPolygon(HeliumRenderer, &v92, (LiImagePolygon *)&v87, ActualColorDescription, 1, 0, (uint64_t *)&v86);
            v47 = v86;
            if (v92 != v86)
            {
              if (!v92)
                goto LABEL_67;
              goto LABEL_66;
            }
            if (!v92)
              goto LABEL_89;
            goto LABEL_88;
          }
          LiImagePolygon::operator=((uint64_t)v95, (uint64_t)&v87);
          goto LABEL_89;
        }
        if (((v91 - v90) & 0x1FFFFFFFE0) != 0)
        {
          cropToPolygon(HeliumRenderer, &v92, (LiImagePolygon *)&v87, ActualColorDescription, 1, 0, (uint64_t *)&v86);
          v47 = v86;
          if (v92 != v86)
          {
            if (v92)
            {
LABEL_66:
              (*(void (**)(void))(*(_QWORD *)v92 + 24))();
              v47 = v86;
            }
LABEL_67:
            v92 = v47;
            goto LABEL_89;
          }
          if (!v92)
            goto LABEL_89;
LABEL_88:
          (*(void (**)(void))(*(_QWORD *)v92 + 24))();
          goto LABEL_89;
        }
LABEL_90:
        conformWithToneMap(ActualColorDescription, (uint64_t *)&v92, &v103, (uint64_t *)&v86);
        v49 = v86;
        if (v92 == v86)
        {
          if (v92)
            (*(void (**)(void))(*(_QWORD *)v92 + 24))();
        }
        else
        {
          if (v92)
          {
            (*(void (**)(void))(*(_QWORD *)v92 + 24))();
            v49 = v86;
          }
          v92 = v49;
        }
        if (v98)
          __asm { BR              X9 }
        v50 = (HgcMaskCompFirstPass *)HGObject::operator new(0x1A0uLL);
        HgcMaskCompFirstPass::HgcMaskCompFirstPass(v50);
        *(_QWORD *)v50 = &unk_1E65BD278;
        HGNode::SetInput((HGNode *)v50, 0, v92);
        v51 = *(_DWORD *)v18;
        (*(void (**)(HgcMaskCompFirstPass *))(*(_QWORD *)v50 + 16))(v50);
        if ((v51 - 1) >= 3)
          v51 = 0;
        (*(void (**)(HgcMaskCompFirstPass *))(*(_QWORD *)v50 + 24))(v50);
        v52 = ((__n128 (*)(HgcMaskCompFirstPass *, _QWORD, float, float, float, float))*(_QWORD *)(*(_QWORD *)v50 + 96))(v50, 0, *(float *)&v93, *((float *)&v93 + 1), *(float *)&v94, *((float *)&v94 + 1));
        v52.n128_u8[0] = *v41;
        (*(void (**)(HgcMaskCompFirstPass *, uint64_t, float, float, float, float))(*(_QWORD *)v50 + 96))(v50, 1, (float)v52.n128_u32[0], v18[36], (float)v51, 0.0);
        if (v98 != (HGNode *)v50)
        {
          if (v98)
            (*(void (**)(void))(*(_QWORD *)v98 + 24))();
          v98 = (HGNode *)v50;
          (*(void (**)(HgcMaskCompFirstPass *))(*(_QWORD *)v50 + 16))(v50);
        }
        (*(void (**)(HgcMaskCompFirstPass *))(*(_QWORD *)v50 + 24))(v50);
        LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&v87);
        if (v92)
          (*(void (**)(HGNode *))(*(_QWORD *)v92 + 24))(v92);
        goto LABEL_106;
      }
LABEL_107:
      LiAgent::clearTransform(v3);
      v53 = v84;
      if (((v101 - v100) & 0x1FFFFFFFE0) != 0 && v98)
      {
        v54 = HGRenderer::GetDOD(HeliumRenderer, v98);
        v56 = v55;
        if (HGRectIsNull(v54, v55))
        {
          v57 = 0;
          v58 = 0;
          v59 = -1;
          v60 = -1;
        }
        else
        {
          if ((int)v54 <= -1073741823)
            v58 = -1073741823;
          else
            v58 = v54;
          if (SHIDWORD(v54) <= -1073741823)
            v57 = -1073741823;
          else
            v57 = HIDWORD(v54);
          if ((int)v56 >= 1073741822)
            v62 = 1073741822;
          else
            v62 = v56;
          v63 = HIDWORD(v56);
          if (SHIDWORD(v56) >= 1073741822)
            LODWORD(v63) = 1073741822;
          v59 = v62 - v58;
          v60 = v63 - v57;
        }
        v87.f64[0] = (double)v58;
        v87.f64[1] = (double)v57;
        v88 = (double)v59;
        v89 = (double)v60;
        if (LiPolygon::contains(v99, &v87))
          v101 = v100;
      }
      intersect(HeliumRenderer, (uint64_t)v99, &v102, (uint64_t)v95, &v98);
      if (v102 && v98)
      {
        v64 = (HMaskElem *)HGObject::operator new(0x1B0uLL);
        HMaskElem::HMaskElem(v64);
        v65 = (FxColorDescription *)LiAgent::getActualColorDescription(v3);
        conformWithToneMap(v65, (uint64_t *)&v102, &v103, (uint64_t *)&v87);
        v66 = v87.f64[0];
        if (v102 == *(HGNode **)&v87.f64[0])
        {
          if (v102)
            (*(void (**)(HGNode *))(*(_QWORD *)v102 + 24))(v102);
        }
        else
        {
          if (v102)
          {
            (*(void (**)(HGNode *))(*(_QWORD *)v102 + 24))(v102);
            v66 = v87.f64[0];
          }
          v102 = *(HGNode **)&v66;
        }
        (*(void (**)(HMaskElem *, _QWORD))(*(_QWORD *)v64 + 120))(v64, 0);
        (*(void (**)(HMaskElem *, uint64_t, HGNode *))(*(_QWORD *)v64 + 120))(v64, 1, v98);
        v67 = *(void (**)(HMaskElem *, _QWORD, float, float, float, float))(*(_QWORD *)v64 + 96);
        if (v83)
        {
          v68 = 1.0;
          v67(v64, 0, 0.0, 0.0, 0.0, 0.0);
        }
        else
        {
          v67(v64, 0, -3.4028e38, 0.0, 0.0, 0.0);
          v68 = 3.4028e38;
        }
        (*(void (**)(HMaskElem *, uint64_t, float, float, float, float))(*(_QWORD *)v64 + 96))(v64, 1, v68, 0.0, 0.0, 0.0);
        if (*((_BYTE *)this + 104))
          *((_BYTE *)v64 + 416) = 1;
        v93 = v64;
        (*(void (**)(HMaskElem *))(*(_QWORD *)v64 + 16))(v64);
        conformWithToneMap(&v103, (uint64_t *)&v93, &v104, (uint64_t *)&v87);
        v69 = v87.f64[0];
        if (v102 == *(HGNode **)&v87.f64[0])
        {
          if (v102)
            (*(void (**)(HGNode *))(*(_QWORD *)v102 + 24))(v102);
        }
        else
        {
          if (v102)
          {
            (*(void (**)(HGNode *))(*(_QWORD *)v102 + 24))(v102);
            v69 = v87.f64[0];
          }
          v102 = *(HGNode **)&v69;
          v87.f64[0] = 0.0;
        }
        if (v93)
          (*(void (**)(HMaskElem *))(*(_QWORD *)v93 + 24))(v93);
        (*(void (**)(HMaskElem *))(*(_QWORD *)v64 + 24))(v64);
      }
      if (((v101 - v100) & 0x1FFFFFFFE0) != 0)
      {
        v70 = HGRenderer::GetDOD(HeliumRenderer, v102);
        v72 = v71;
        IsNull = HGRectIsNull(v70, v71);
        if ((int)v70 <= -1073741823)
          v74 = -1073741823;
        else
          v74 = v70;
        if (SHIDWORD(v70) <= -1073741823)
          v75 = -1073741823;
        else
          v75 = HIDWORD(v70);
        if ((int)v72 >= 1073741822)
          v76 = 1073741822;
        else
          v76 = v72;
        if (SHIDWORD(v72) >= 1073741822)
          v77 = 1073741822;
        else
          v77 = HIDWORD(v72);
        v78 = v76 - v74;
        v79 = v77 - v75;
        if (IsNull)
        {
          v75 = 0;
          v74 = 0;
          v78 = -1;
          v80 = -1;
        }
        else
        {
          v80 = v79;
        }
        v87.f64[0] = (double)v74 + -1.0;
        v87.f64[1] = (double)v75 + -1.0;
        v88 = (double)v78 + 2.0;
        v89 = (double)v80 + 2.0;
        LiImagePolygon::clip(v99, v87.f64, 1);
        v53 = v84;
        if (((v101 - v100) & 0x1FFFFFFFE0) != 0)
        {
          LiAgent::outCrop(v3, (const LiImagePolygon *)v99);
        }
        else
        {
          v81 = (HGNode *)HGObject::operator new(0x1A0uLL);
          HGNode::HGNode(v81);
          if (v102 == v81)
          {
            if (v81)
              (*(void (**)(HGNode *))(*(_QWORD *)v81 + 24))(v81);
          }
          else
          {
            if (v102)
              (*(void (**)(HGNode *))(*(_QWORD *)v102 + 24))(v102);
            v102 = v81;
          }
        }
      }
      *v53 = v102;
      v102 = 0;
      LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v95);
      if (v98)
        (*(void (**)(HGNode *))(*(_QWORD *)v98 + 24))(v98);
    }
    else
    {
      v61 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v61);
      *a3 = v61;
    }
    LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v99);
    if (v102)
      (*(void (**)(HGNode *))(*(_QWORD *)v102 + 24))(v102);
  }
  else
  {
    *a3 = 0;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v103._pcColorDesc._colorSpaceRef._obj);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v104._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2F25EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 160));
  _Unwind_Resume(a1);
}

BOOL intersect(HGRenderer *this, uint64_t a2, HGNode **a3, uint64_t a4, HGNode **a5)
{
  uint64_t v9;
  HGNode *v10;
  HGNode *v11;
  uint64_t DOD;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BOOL8 result;
  float64x2_t v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  double v40;

  v9 = (*(_QWORD *)(a4 + 72) - *(_QWORD *)(a4 + 64)) & 0x1FFFFFFFE0;
  if (((*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) & 0x1FFFFFFFE0) != 0)
  {
    if (v9)
    {
      LiImagePolygon::operator&=((uint64_t **)a2, a4);
      if (((*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) & 0x1FFFFFFFE0) == 0)
      {
        v10 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v10);
        v11 = *a3;
        if (*a3 == v10)
        {
          if (v10)
            (*(void (**)(HGNode *))(*(_QWORD *)v10 + 24))(v10);
        }
        else
        {
          if (v11)
            (*(void (**)(HGNode *))(*(_QWORD *)v11 + 24))(v11);
          *a3 = v10;
        }
      }
    }
  }
  else if (v9)
  {
    LiImagePolygon::operator=(a2, a4);
  }
  DOD = HGRenderer::GetDOD(this, *a3);
  v14 = v13;
  v15 = 3.0;
  v16 = -2.0;
  v17 = -2.0;
  v18 = -2.0;
  v19 = 3.0;
  v20 = 3.0;
  if (!HGRectIsNull(DOD, v13))
  {
    if ((int)DOD <= -1073741823)
      v21 = -1073741823;
    else
      v21 = DOD;
    if (SHIDWORD(DOD) <= -1073741823)
      v22 = -1073741823;
    else
      v22 = HIDWORD(DOD);
    if ((int)v14 >= 1073741822)
      v23 = 1073741822;
    else
      v23 = v14;
    if (SHIDWORD(v14) >= 1073741822)
      v24 = 1073741822;
    else
      v24 = HIDWORD(v14);
    v17 = (double)(v21 - 2);
    v18 = (double)(v22 - 2);
    v19 = (double)(v23 - v21) + 4.0;
    v20 = (double)(v24 - v22) + 4.0;
  }
  v25 = HGRenderer::GetDOD(this, *a5);
  v27 = v26;
  v28 = -2.0;
  v29 = 3.0;
  if (!HGRectIsNull(v25, v26))
  {
    if ((int)v25 <= -1073741823)
      v30 = -1073741823;
    else
      v30 = v25;
    if (SHIDWORD(v25) <= -1073741823)
      v31 = -1073741823;
    else
      v31 = HIDWORD(v25);
    if ((int)v27 >= 1073741822)
      v32 = 1073741822;
    else
      v32 = v27;
    if (SHIDWORD(v27) >= 1073741822)
      v33 = 1073741822;
    else
      v33 = HIDWORD(v27);
    v28 = (double)(v30 - 2);
    v16 = (double)(v31 - 2);
    v15 = (double)(v32 - v30) + 4.0;
    v29 = (double)(v33 - v31) + 4.0;
  }
  v38.f64[0] = v17;
  v38.f64[1] = v18;
  v39 = v19;
  v40 = v20;
  result = LiPolygon::contains((_QWORD **)a2, &v38);
  if (result
    || (v35.f64[0] = v28, v35.f64[1] = v16, v36 = v15, v37 = v29, result = LiPolygon::contains((_QWORD **)a2, &v35)))
  {
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 64);
  }
  return result;
}

void sub_1B2F264E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1B2F268D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t OZMaskComp::filteredEdges(OZMaskComp *this)
{
  return 1;
}

uint64_t OZMaskComp::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = LiImageFilter::estimateRenderMemory(a1);
  v6 = *(_QWORD **)(a1 + 40);
  v5 = *(_QWORD **)(a1 + 48);
  while (v6 != v5)
  {
    if (!*v6)
      throw_PCNullPointerException(1);
    v4 += (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 112))(*v6, a2);
    v6 += 2;
  }
  return v4;
}

void OZMaskComp::~OZMaskComp(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = &off_1E65EB048;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 120));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = &off_1E65EB048;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 120));
  JUMPOUT(0x1B5E29170);
}

OZRenderParams *OZMaskComp::setRenderParams(OZMaskComp *this, const OZRenderParams *a2)
{
  OZRenderParams *v4;
  OZRenderParams *v5;
  OZRenderParams *result;

  v4 = (OZRenderParams *)*((_QWORD *)this + 11);
  if (v4)
  {
    OZRenderParams::~OZRenderParams(v4);
    MEMORY[0x1B5E29170]();
  }
  v5 = (OZRenderParams *)operator new();
  result = OZRenderParams::OZRenderParams(v5, a2);
  *((_QWORD *)this + 11) = v5;
  return result;
}

void sub_1B2F26B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E0C40DE5FDD4ELL);
  _Unwind_Resume(a1);
}

void `virtual thunk to'OZMaskComp::~OZMaskComp(OZMaskComp *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = &off_1E65EB048;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 120));
}

{
  OZMaskComp::~OZMaskComp((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void OZMaskComp::~OZMaskComp(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;
  OZRenderParams *v5;
  PC_Sp_counted_base *v6;
  __CFString *v7;
  PCSharedCount *v8;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  v5 = (OZRenderParams *)this[11].var0;
  if (v5)
  {
    OZRenderParams::~OZRenderParams(v5);
    MEMORY[0x1B5E29170]();
  }
  v6 = this[8].var0;
  if (v6)
  {
    this[9].var0 = v6;
    operator delete(v6);
  }
  v8 = this + 5;
  std::vector<PCPtr<LiMaterialLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v7 = a2[1].var0;
  this->var0 = (PC_Sp_counted_base *)v7;
  *(__CFString **)((char *)this + v7[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

uint64_t std::vector<PCPtr<LiImageSource>>::__push_back_slow_path<PCPtr<LiImageSource> const&>(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  PCSharedCount *v11;
  uint64_t v12;
  _QWORD v14[2];
  PCSharedCount *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  else
    v10 = 0;
  v11 = (PCSharedCount *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[16 * v9];
  v11->var0 = a2->var0;
  PCSharedCount::PCSharedCount(v11 + 1, a2 + 1);
  v15 += 2;
  std::vector<PCPtr<LiImageSource>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2F26D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCPtr<LiMaterialLayer>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCPtr<LiImageSource>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiImageSource>>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCPtr<LiImageSource>>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>,std::reverse_iterator<PCPtr<LiImageSource>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v12;
  PCSharedCount *v13;

  for (i = 24; ; i -= 16)
  {
    v12 = a3 + i;
    if (a3 + i - 24 == a5)
      break;
    *(_QWORD *)(a7 + i - 40) = *(_QWORD *)(v12 - 40);
    v13 = (PCSharedCount *)(a7 + i - 32);
    PCSharedCount::PCSharedCount(v13, (const PCSharedCount *)(v12 - 32));
  }
  return a6;
}

PCSharedCount *PCPtr<LiImageFilter>::PCPtr<LiImageSource>(PCSharedCount *a1, const PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  PCSharedCount v6;

  var0 = a2->var0;
  if (a2->var0)
  a1->var0 = var0;
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B2F26ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void HMaskCompAdd::~HMaskCompAdd(HGNode *this)
{
  void *v1;

  HgcMaskCompAdd::~HgcMaskCompAdd(this);
  HGObject::operator delete(v1);
}

uint64_t HMaskCompAdd::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  HGNode *Input;
  unint64_t DOD;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  HGNode *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int32x2_t v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  float v37;
  float v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = &HGRectNull;
    return *(_QWORD *)v4;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v10 = v9;
  v34 = 0;
  if (HGRectIsNull(DOD, v9))
  {
    v11 = -1;
    v12 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823)
      v13 = -1073741823;
    else
      v13 = DOD;
    v14 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823)
      LODWORD(v14) = -1073741823;
    if ((int)v10 >= 1073741822)
      v15 = 1073741822;
    else
      v15 = v10;
    v16 = HIDWORD(v10);
    if (SHIDWORD(v10) >= 1073741822)
      LODWORD(v16) = 1073741822;
    v34 = __PAIR64__(v14, v13);
    v11 = v15 - v13;
    v12 = v16 - v14;
  }
  v35 = v11;
  v36 = v12;
  v17 = HGRenderer::GetInput(a2, this, 1u);
  v18 = HGRenderer::GetDOD(a2, v17);
  v20 = v19;
  v31 = 0;
  if (HGRectIsNull(v18, v19))
  {
    v21 = 0;
    v22 = 0;
    v23 = -1;
    v24 = -1;
  }
  else
  {
    if ((int)v18 <= -1073741823)
      v22 = -1073741823;
    else
      v22 = v18;
    if (SHIDWORD(v18) <= -1073741823)
      v21 = -1073741823;
    else
      v21 = HIDWORD(v18);
    if ((int)v20 >= 1073741822)
      v25 = 1073741822;
    else
      v25 = v20;
    if (SHIDWORD(v20) >= 1073741822)
      v26 = 1073741822;
    else
      v26 = HIDWORD(v20);
    v31 = __PAIR64__(v21, v22);
    v23 = v25 - v22;
    v24 = v26 - v21;
  }
  v32 = v23;
  v33 = v24;
  (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v37);
  if (v37 <= -0.00001 || v37 >= 0.00001)
  {
    v4 = &HGRectInfinite;
    return *(_QWORD *)v4;
  }
  if (v38 <= -0.00001 || v38 >= 0.00001)
  {
    operator|<int>((int32x2_t *)&v34, (int32x2_t *)&v31, &v28);
    v22 = v28.i32[0];
    v21 = v28.u32[1];
    v23 = v29;
    v24 = v30;
  }
  return HGRectMake4i(v22, v21, v22 + v23, v21 + v24);
}

uint64_t HMaskCompAdd::GetROI(HMaskCompAdd *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 <= 1)
    return *(_QWORD *)&a4.var0;
  else
    return 0;
}

void HMaskCompSubtract::~HMaskCompSubtract(HGNode *this)
{
  void *v1;

  HgcMaskCompSubtract::~HgcMaskCompSubtract(this);
  HGObject::operator delete(v1);
}

uint64_t HMaskCompSubtract::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  unint64_t DOD;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  HGNode *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int32x2_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  float v36[4];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v10 = v9;
  v33 = 0;
  if (HGRectIsNull(DOD, v9))
  {
    v11 = -1;
    v12 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823)
      v13 = -1073741823;
    else
      v13 = DOD;
    v14 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823)
      LODWORD(v14) = -1073741823;
    if ((int)v10 >= 1073741822)
      v15 = 1073741822;
    else
      v15 = v10;
    v16 = HIDWORD(v10);
    if (SHIDWORD(v10) >= 1073741822)
      LODWORD(v16) = 1073741822;
    v33 = __PAIR64__(v14, v13);
    v11 = v15 - v13;
    v12 = v16 - v14;
  }
  v34 = v11;
  v35 = v12;
  v17 = HGRenderer::GetInput(a2, this, 1u);
  v18 = HGRenderer::GetDOD(a2, v17);
  v20 = v19;
  v30 = 0;
  if (HGRectIsNull(v18, v19))
  {
    v21 = 0;
    v22 = 0;
    v23 = -1;
    v24 = -1;
  }
  else
  {
    if ((int)v18 <= -1073741823)
      v22 = -1073741823;
    else
      v22 = v18;
    if (SHIDWORD(v18) <= -1073741823)
      v21 = -1073741823;
    else
      v21 = HIDWORD(v18);
    if ((int)v20 >= 1073741822)
      v25 = 1073741822;
    else
      v25 = v20;
    if (SHIDWORD(v20) >= 1073741822)
      v26 = 1073741822;
    else
      v26 = HIDWORD(v20);
    v30 = __PAIR64__(v21, v22);
    v23 = v25 - v22;
    v24 = v26 - v21;
  }
  v31 = v23;
  v32 = v24;
  (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, v36);
  if (v36[0] <= -0.00001 || v36[0] >= 0.00001)
  {
    operator|<int>((int32x2_t *)&v33, (int32x2_t *)&v30, &v27);
    v22 = v27.i32[0];
    v21 = v27.u32[1];
    v23 = v28;
    v24 = v29;
  }
  return HGRectMake4i(v22, v21, v22 + v23, v21 + v24);
}

void HMaskCompReplace::~HMaskCompReplace(HGNode *this)
{
  void *v1;

  HgcMaskCompReplace::~HgcMaskCompReplace(this);
  HGObject::operator delete(v1);
}

uint64_t HMaskCompReplace::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 IsNull;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  float v23;
  float v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    DOD = HGRenderer::GetDOD(a2, Input);
    v10 = v9;
    IsNull = HGRectIsNull(DOD, v9);
    if ((int)DOD <= -1073741823)
      v12 = -1073741823;
    else
      v12 = DOD;
    if (SHIDWORD(DOD) <= -1073741823)
      v13 = -1073741823;
    else
      v13 = HIDWORD(DOD);
    if ((int)v10 >= 1073741822)
      v14 = 1073741822;
    else
      v14 = v10;
    if (SHIDWORD(v10) >= 1073741822)
      v15 = 1073741822;
    else
      v15 = HIDWORD(v10);
    v16 = v14 - v12;
    v17 = v15 - v13;
    if (IsNull)
      v18 = 0;
    else
      v18 = v13;
    if (IsNull)
      v19 = 0;
    else
      v19 = v12;
    if (IsNull)
      v20 = -1;
    else
      v20 = v16;
    if (IsNull)
      v21 = -1;
    else
      v21 = v17;
    (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v23);
    if (v23 <= -0.00001 || v23 >= 0.00001)
    {
      v4 = &HGRectInfinite;
      return *(_QWORD *)v4;
    }
    if (v24 <= -0.00001 || v24 >= 0.00001)
      return HGRectMake4i(v19, v18, v20 + v19, v21 + v18);
  }
  v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

void HMaskCompIntersect::~HMaskCompIntersect(HGNode *this)
{
  void *v1;

  HgcMaskCompIntersect::~HgcMaskCompIntersect(this);
  HGObject::operator delete(v1);
}

uint64_t HMaskCompIntersect::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  unint64_t DOD;
  uint64_t v9;
  unint64_t v10;
  _BOOL4 IsNull;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  signed int v19;
  int v20;
  int v21;
  HGNode *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  signed int v33;
  signed int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  float v39;
  float v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v10 = v9;
  IsNull = HGRectIsNull(DOD, v9);
  if ((int)DOD <= -1073741823)
    v12 = -1073741823;
  else
    v12 = DOD;
  v13 = HIDWORD(DOD);
  if (SHIDWORD(DOD) <= -1073741823)
    LODWORD(v13) = -1073741823;
  if ((int)v10 >= 1073741822)
    v14 = 1073741822;
  else
    v14 = v10;
  v15 = HIDWORD(v10);
  if (SHIDWORD(v10) >= 1073741822)
    LODWORD(v15) = 1073741822;
  v16 = v14 - v12;
  v17 = v15 - v13;
  if (IsNull)
    v18 = 0;
  else
    v18 = v12;
  if (IsNull)
    v19 = 0;
  else
    v19 = v13;
  if (IsNull)
    v20 = -1;
  else
    v20 = v16;
  if (IsNull)
    v21 = -1;
  else
    v21 = v17;
  v22 = HGRenderer::GetInput(a2, this, 1u);
  v23 = HGRenderer::GetDOD(a2, v22);
  v25 = v24;
  v26 = HGRectIsNull(v23, v24);
  if ((int)v23 <= -1073741823)
    v27 = -1073741823;
  else
    v27 = v23;
  v28 = HIDWORD(v23);
  if (SHIDWORD(v23) <= -1073741823)
    LODWORD(v28) = -1073741823;
  if ((int)v25 >= 1073741822)
    v29 = 1073741822;
  else
    v29 = v25;
  v30 = HIDWORD(v25);
  if (SHIDWORD(v25) >= 1073741822)
    LODWORD(v30) = 1073741822;
  v31 = v29 - v27;
  v32 = v30 - v28;
  if (v26)
    v33 = 0;
  else
    v33 = v28;
  if (v26)
    v34 = 0;
  else
    v34 = v27;
  if (v26)
    v35 = -1;
  else
    v35 = v31;
  if (v26)
    v36 = -1;
  else
    v36 = v32;
  (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v39);
  if (v39 > -0.00001 && v39 < 0.00001)
  {
    if (v40 > -0.00001 && v40 < 0.00001)
      return 0;
    v37 = v35 + v34;
    if (v18 > v34)
      v34 = v18;
    if (v20 + v18 < v37)
      v37 = v20 + v18;
    v38 = v36 + v33;
    if (v19 > v33)
      v33 = v19;
    if (v21 + v19 < v38)
      v38 = v21 + v19;
    v35 = v37 - v34;
    v36 = v38 - v33;
  }
  return HGRectMake4i(v34, v33, v34 + v35, v33 + v36);
}

void HMaskCompFirstPass::~HMaskCompFirstPass(HGNode *this)
{
  void *v1;

  HgcMaskCompFirstPass::~HgcMaskCompFirstPass(this);
  HGObject::operator delete(v1);
}

double HMaskCompFirstPass::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  __int128 v5;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 IsNull;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  float v25;
  float v26;
  float v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    DOD = HGRenderer::GetDOD(a2, Input);
    v11 = v10;
    IsNull = HGRectIsNull(DOD, v10);
    if ((int)DOD <= -1073741823)
      v13 = -1073741823;
    else
      v13 = DOD;
    if (SHIDWORD(DOD) <= -1073741823)
      v14 = -1073741823;
    else
      v14 = HIDWORD(DOD);
    if ((int)v11 >= 1073741822)
      v15 = 1073741822;
    else
      v15 = v11;
    if (SHIDWORD(v11) >= 1073741822)
      v16 = 1073741822;
    else
      v16 = HIDWORD(v11);
    v17 = v15 - v13;
    v18 = v16 - v14;
    if (IsNull)
      v19 = 0;
    else
      v19 = v14;
    if (IsNull)
      v20 = 0;
    else
      v20 = v13;
    if (IsNull)
      v21 = -1;
    else
      v21 = v17;
    if (IsNull)
      v22 = -1;
    else
      v22 = v18;
    (*(void (**)(HGNode *, uint64_t, float *))(*(_QWORD *)this + 104))(this, 1, &v25);
    v23 = v25 > -0.00001;
    if (v25 >= 0.00001)
      v23 = 0;
    switch((int)(v27 + 0.5))
    {
      case 0:
      case 2:
      case 3:
        if (!v23)
          goto LABEL_37;
        if (v26 > -0.00001 && v26 < 0.00001)
          break;
        goto LABEL_38;
      case 1:
        if (!v23)
          goto LABEL_38;
LABEL_37:
        v4 = &HGRectInfinite;
        goto LABEL_3;
      default:
        v19 = 0;
        v20 = 0;
        v22 = -1;
        v21 = -1;
LABEL_38:
        *(_QWORD *)&v5 = HGRectMake4i(v20, v19, v20 + v21, v19 + v22);
        return *(double *)&v5;
    }
  }
  v4 = &HGRectNull;
LABEL_3:
  v5 = *v4;
  return *(double *)&v5;
}

uint64_t HMaskCompFirstPass::GetROI(HMaskCompFirstPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 <= 0)
    return *(_QWORD *)&a4.var0;
  else
    return 0;
}

void HMaskElem::HMaskElem(HMaskElem *this)
{
  uint64_t v1;

  HgcMaskElem::HgcMaskElem(this);
  *(_QWORD *)v1 = &unk_1E65BD4E0;
  *(_BYTE *)(v1 + 416) = 0;
  HGNode::SetFlags((HGNode *)v1, 0xFFFFFFFFLL, 2);
}

void sub_1B2F278FC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HgcMaskElem::~HgcMaskElem(v1);
  _Unwind_Resume(a1);
}

void HMaskElem::~HMaskElem(HGNode *this)
{
  void *v1;

  HgcMaskElem::~HgcMaskElem(this);
  HGObject::operator delete(v1);
}

uint64_t HMaskElem::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  unint64_t DOD;
  uint64_t v9;
  unint64_t v10;
  _BOOL4 IsNull;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  signed int v18;
  int v19;
  int v20;
  int v21;
  HGNode *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  signed int v38;
  signed int v39;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v10 = v9;
  IsNull = HGRectIsNull(DOD, v9);
  if ((int)DOD <= -1073741823)
    v12 = -1073741823;
  else
    v12 = DOD;
  v13 = HIDWORD(DOD);
  if (SHIDWORD(DOD) <= -1073741823)
    LODWORD(v13) = -1073741823;
  if ((int)v10 >= 1073741822)
    v14 = 1073741822;
  else
    v14 = v10;
  v15 = HIDWORD(v10);
  if (SHIDWORD(v10) >= 1073741822)
    LODWORD(v15) = 1073741822;
  v16 = v14 - v12;
  v17 = v15 - v13;
  if (IsNull)
    v18 = 0;
  else
    v18 = v12;
  if (IsNull)
    v19 = 0;
  else
    v19 = v13;
  if (IsNull)
    v20 = -1;
  else
    v20 = v16;
  if (IsNull)
    v21 = -1;
  else
    v21 = v17;
  v22 = HGRenderer::GetInput(a2, this, 1u);
  v23 = HGRenderer::GetDOD(a2, v22);
  v25 = v24;
  v26 = HGRectIsNull(v23, v24);
  if ((int)v23 <= -1073741823)
    v27 = -1073741823;
  else
    v27 = v23;
  v28 = HIDWORD(v23);
  if (SHIDWORD(v23) <= -1073741823)
    LODWORD(v28) = -1073741823;
  if ((int)v25 >= 1073741822)
    v29 = 1073741822;
  else
    v29 = v25;
  v30 = HIDWORD(v25);
  if (SHIDWORD(v25) >= 1073741822)
    LODWORD(v30) = 1073741822;
  v31 = v29 - v27;
  v32 = v30 - v28;
  if (v26)
  {
    LODWORD(v28) = 0;
    v27 = 0;
    v31 = -1;
    v33 = -1;
  }
  else
  {
    v33 = v32;
  }
  if (*((_BYTE *)this + 416))
  {
    v34 = v20 + v18;
    v35 = v21 + v19;
    v36 = v18;
    v37 = v19;
  }
  else
  {
    if (v18 <= v27)
      v36 = v27;
    else
      v36 = v18;
    v38 = v31 + v27;
    if (v20 + v18 >= v38)
      v34 = v38;
    else
      v34 = v20 + v18;
    if (v19 <= (int)v28)
      v37 = v28;
    else
      v37 = v19;
    v39 = v33 + v28;
    if (v21 + v19 >= v39)
      v35 = v39;
    else
      v35 = v21 + v19;
  }
  return HGRectMake4i(v36, v37, v34, v35);
}

void AppendDiffuseLayerToLayeredMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CMTimeEpoch v5;
  uint64_t v6;
  double v7;
  DiffuseMaterialLayer *v8;
  os_unfair_lock_s *v9;
  LiLayeredMaterial *DstAlphaFactor;
  _QWORD *v11;
  CGColorSpace *WorkingColorSpace;
  __int128 *v13;
  uint64_t v14;
  OZChannelBase *v15;
  int isEnabled;
  int v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  float32x2_t v21;
  float32x2_t v22;
  signed int os_unfair_lock_opaque;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  os_unfair_lock_s *v29;
  signed int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  os_unfair_lock_s *v36;
  signed int v37;
  int v38;
  uint64_t v39;
  OZChannel *v40;
  double v41;
  double v42;
  double v43;
  OZChannel *v44;
  double v45;
  os_unfair_lock_s *v46;
  signed int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  CGColorSpace *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  const void *v58;
  void *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[80];
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _QWORD v75[2];
  CGColorSpace *v76;
  PCSharedCount v77;
  PCSharedCount v78;
  CMTime v79;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  *(_OWORD *)&v79.value = *(_OWORD *)v4;
  v79.epoch = v5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v7 = *(double *)(a2 + 104);
  v8 = (DiffuseMaterialLayer *)operator new();
  DiffuseMaterialLayer::DiffuseMaterialLayer(v8, a1);
  v77.var0 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v78, (DiffuseMaterialLayer *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  if (!v8)
    throw_PCNullPointerException(1);
  DiffuseMaterialLayer::setBlendMode((uint64_t)v8, 2);
  v9 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v68, &v77);
  LiLayeredMaterial::appendLayer((uint64_t *)v9, (const PCSharedCount *)v68);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v68[8]);
  if (!v77.var0)
    throw_PCNullPointerException(1);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)v77.var0);
  v11 = (_QWORD *)LiMaterialLayerUniform::get(*(os_unfair_lock_s **)a2, DstAlphaFactor);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*(FxColorDescription **)(a2 + 16));
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)v75, 1.0, 1.0, 1.0, 1.0, WorkingColorSpace);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
  {
    PCColor::PCColor((PCColor *)v68);
    v13 = *(__int128 **)(a2 + 16);
    v14 = *((_QWORD *)v13 + 2);
    v73 = *v13;
    v74 = v14;
    (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, &v73, v68);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1))
    {
      v15 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
      isEnabled = OZChannelBase::isEnabled(v15, 1, 1);
      v17 = *(double *)(a2 + 104) == -1.0 ? 0 : isEnabled;
      if (v17 == 1)
      {
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
        (*(void (**)(uint64_t, CMTime *, _BYTE *, uint64_t))(*(_QWORD *)v18 + 840))(v18, &v79, v68, 1);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
        (*(void (**)(uint64_t, CMTime *, _BYTE *, double))(*(_QWORD *)v19 + 824))(v19, &v79, v68, *(double *)(a2 + 104));
      }
    }
    PCWorkingColor::operator=((uint64_t)v75, (int *)v68);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v68[48]);
  }
  v20 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v22 = (float32x2_t)v75[0];
  v21 = (float32x2_t)v75[1];
  os_unfair_lock_opaque = v20[147]._os_unfair_lock_opaque;
  if ((signed int)v20[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v24 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v24 = v20[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v20[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v24);
  v25 = *(_QWORD *)&v20[148]._os_unfair_lock_opaque + 152 * (int)v20[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v25 - 152) = v11[2];
  *(float64x2_t *)v68 = vcvtq_f64_f32(v22);
  *(float64x2_t *)&v68[16] = vcvtq_f64_f32(v21);
  ProShade::Value::set(v25 - 144, (const PCString *)3, 4, v68);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  OZChannel::getValueAsDouble((OZChannel *)(v26 + 136), &v79, 0.0);
  v28 = v27;
  v29 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v30 = v29[147]._os_unfair_lock_opaque;
  if ((signed int)v29[146]._os_unfair_lock_opaque <= v30)
    v31 = (2 * (v30 + 1)) | 1;
  else
    v31 = v29[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v29[144]._os_unfair_lock_opaque, v30 + 1, v31);
  v32 = *(_QWORD *)&v29[148]._os_unfair_lock_opaque + 152 * (int)v29[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v32 - 152) = v11[18];
  *(double *)v68 = v28;
  ProShade::Value::set(v32 - 144, (const PCString *)3, 1, v68);
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  OZChannel::getValueAsDouble((OZChannel *)(v33 + 288), &v79, 0.0);
  v35 = v34;
  v36 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v37 = v36[147]._os_unfair_lock_opaque;
  if ((signed int)v36[146]._os_unfair_lock_opaque <= v37)
    v38 = (2 * (v37 + 1)) | 1;
  else
    v38 = v36[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v36[144]._os_unfair_lock_opaque, v37 + 1, v38);
  v39 = *(_QWORD *)&v36[148]._os_unfair_lock_opaque + 152 * (int)v36[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v39 - 152) = v11[38];
  *(double *)v68 = v35;
  ProShade::Value::set(v39 - 144, (const PCString *)3, 1, v68);
  if (!v77.var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)v77.var0 + 8) = v35 != v28;
  v40 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  OZChannel::getValueAsDouble(v40, &v79, 0.0);
  v42 = v41;
  v43 = 1.0;
  if (*(double *)(a2 + 104) != -1.0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    v44 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    OZChannel::getValueAsDouble(v44, &v79, v7);
    v43 = v45;
  }
  v46 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v47 = v46[147]._os_unfair_lock_opaque;
  if ((signed int)v46[146]._os_unfair_lock_opaque <= v47)
    v48 = (2 * (v47 + 1)) | 1;
  else
    v48 = v46[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v46[144]._os_unfair_lock_opaque, v47 + 1, v48);
  v49 = *(_QWORD *)&v46[148]._os_unfair_lock_opaque + 152 * (int)v46[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v49 - 152) = v11[22];
  *(double *)v68 = v42 * v43;
  ProShade::Value::set(v49 - 144, (const PCString *)3, 1, v68);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) == 1)
  {
    v50 = *(_QWORD *)(a2 + 16);
    v51 = *(_QWORD *)(v50 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v50;
    *(_QWORD *)&v68[16] = v51;
    OZRenderParams::getRenderGPU(v50, (void (****)(HGGPUComputeDevice *__hidden))&v73);
    v52 = *(os_unfair_lock_s **)a2;
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v54 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*(FxColorDescription **)(a2 + 16));
    OZRenderParams::getBlendingGamma(*(OZRenderParams **)(a2 + 16));
    AddGradientToMaterial((uint64_t)v68, (uint64_t)&v73, (uint64_t)v52, (uint64_t)(v11 + 44), (uint64_t)(v11 + 212), v53, a2 + 72, 1, v54);
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) == 2)
  {
    v58 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    if (v58)
    else
      v59 = 0;
    v72 = 0x3FF0000000000000;
    v69 = 0x3FF0000000000000;
    *(_QWORD *)&v68[40] = 0x3FF0000000000000;
    *(_QWORD *)v68 = 0x3FF0000000000000;
    memset(&v68[8], 0, 32);
    memset(&v68[48], 0, 32);
    v70 = 0u;
    v71 = 0u;
    LODWORD(v73) = 0;
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v61 = *(double *)(a2 + 104);
    if (v6)
    {
      v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 736))(v6);
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 744))(v6);
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 752))(v6);
    }
    else
    {
      v63 = 0;
      v62 = 0;
      v64 = 0;
    }
    LOBYTE(v67) = *(_BYTE *)(a2 + 120);
    MaterialTextureTransformer::composeTextureTransform(&v79, v60 + 1840, (uint64_t)v59, v61 != -1.0, v62, v63, v64, (int)v7, *(double *)(a2 + 40), v67, v68, (unsigned int *)&v73);
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    AddTextureToMaterial(a2, v65, v66, (uint64_t)v11, (uint64_t)(v11 + 44), (uint64_t)(v11 + 212), (uint64_t)v68, v73, 1);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v76);
  PCSharedCount::~PCSharedCount(&v78);
}

void sub_1B2F281EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34)
{
  PCSharedCount *v34;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  PCSharedCount::~PCSharedCount(v34);
  _Unwind_Resume(a1);
}

void AppendFlatLayerToLayeredMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CMTimeEpoch v5;
  FlatMaterialLayer *v6;
  OZChannel *v7;
  int ValueAsInt;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  os_unfair_lock_s *v11;
  LiLayeredMaterial *DstAlphaFactor;
  double v13;
  _QWORD *v14;
  int v15;
  CGColorSpace *WorkingColorSpace;
  __int128 *v17;
  uint64_t v18;
  OZChannelBase *v19;
  int isEnabled;
  int v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  float32x2_t v25;
  float32x2_t v26;
  signed int os_unfair_lock_opaque;
  int v28;
  uint64_t v29;
  OZChannel *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  OZChannel *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  os_unfair_lock_s *v39;
  signed int v40;
  int v41;
  uint64_t v42;
  OZChannel *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  signed int v49;
  int v50;
  uint64_t v51;
  OZChannelBase *v52;
  OZChannel *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  signed int v59;
  int v60;
  uint64_t v61;
  OZChannel *v62;
  uint64_t v63;
  uint64_t v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  CGColorSpace *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  const void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[80];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  _QWORD v89[2];
  CGColorSpace *v90;
  PCSharedCount v91;
  PCSharedCount v92;
  CMTime v93;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  *(_OWORD *)&v93.value = *(_OWORD *)v4;
  v93.epoch = v5;
  v6 = (FlatMaterialLayer *)operator new();
  FlatMaterialLayer::FlatMaterialLayer(v6, a1);
  v91.var0 = (PC_Sp_counted_base *)v6;
  PCSharedCount::PCSharedCount(&v92, (FlatMaterialLayer *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  v7 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  ValueAsInt = OZChannel::getValueAsInt(v7, &v93, 0.0);
  if (ValueAsInt)
  {
    if (ValueAsInt == 1)
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = &off_1E65EB048;
      *(_QWORD *)(v9 + 24) = 0;
      *(_BYTE *)(v9 + 32) = 1;
      *(_QWORD *)v9 = &off_1E6573A10;
      *(_QWORD *)(v9 + 16) = &unk_1E6573A40;
      *(_QWORD *)v9 = &unk_1E6573998;
      *(_QWORD *)(v9 + 16) = &off_1E65739E0;
      var0 = v91.var0;
      *(PCSharedCount *)(v9 + 8) = v91;
      *(_QWORD *)(v9 + 16) = &unk_1E6573938;
      *(_QWORD *)v9 = &unk_1E65738F0;
      if (!var0)
        throw_PCNullPointerException(1);
    }
    else
    {
      if (ValueAsInt != 2)
        goto LABEL_13;
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = &off_1E65EB048;
      *(_QWORD *)(v9 + 24) = 0;
      *(_BYTE *)(v9 + 32) = 1;
      *(_QWORD *)v9 = &off_1E6573BA8;
      *(_QWORD *)(v9 + 16) = &unk_1E6573BD8;
      *(_QWORD *)v9 = &unk_1E6573B30;
      *(_QWORD *)(v9 + 16) = &off_1E6573B78;
      var0 = v91.var0;
      *(PCSharedCount *)(v9 + 8) = v91;
      *(_QWORD *)(v9 + 16) = &unk_1E6573AD0;
      *(_QWORD *)v9 = &unk_1E6573A88;
      if (!var0)
        throw_PCNullPointerException(1);
    }
  }
  else
  {
    v9 = operator new();
    *(_QWORD *)(v9 + 16) = &off_1E65EB048;
    *(_QWORD *)(v9 + 24) = 0;
    *(_BYTE *)(v9 + 32) = 1;
    *(_QWORD *)v9 = &off_1E6573878;
    *(_QWORD *)(v9 + 16) = &unk_1E65738A8;
    *(_QWORD *)v9 = &unk_1E6573800;
    *(_QWORD *)(v9 + 16) = &off_1E6573848;
    var0 = v91.var0;
    *(PCSharedCount *)(v9 + 8) = v91;
    *(_QWORD *)(v9 + 16) = &unk_1E65737A0;
    *(_QWORD *)v9 = &unk_1E6573758;
    if (!var0)
      throw_PCNullPointerException(1);
  }
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)var0 + 4, (PCShared_base *)v9);
LABEL_13:
  v11 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)v82, &v91);
  LiLayeredMaterial::appendLayer((uint64_t *)v11, (const PCSharedCount *)v82);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v82[8]);
  if (!v91.var0)
    throw_PCNullPointerException(1);
  DstAlphaFactor = (LiLayeredMaterial *)HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)v91.var0);
  v13 = *(double *)(a2 + 104);
  v14 = (_QWORD *)LiMaterialLayerUniform::get(*(os_unfair_lock_s **)a2, DstAlphaFactor);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*(FxColorDescription **)(a2 + 16));
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)v89, 0.0, 0.0, 0.0, 1.0, WorkingColorSpace);
  if (!v15)
  {
    PCColor::PCColor((PCColor *)v82);
    v17 = *(__int128 **)(a2 + 16);
    v18 = *((_QWORD *)v17 + 2);
    v87 = *v17;
    v88 = v18;
    (*(void (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)a1 + 152))(a1, &v87, v82);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1))
    {
      v19 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
      isEnabled = OZChannelBase::isEnabled(v19, 1, 1);
      v21 = *(double *)(a2 + 104) == -1.0 ? 0 : isEnabled;
      if (v21 == 1)
      {
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
        (*(void (**)(uint64_t, CMTime *, _BYTE *, uint64_t))(*(_QWORD *)v22 + 840))(v22, &v93, v82, 1);
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
        (*(void (**)(uint64_t, CMTime *, _BYTE *, double))(*(_QWORD *)v23 + 824))(v23, &v93, v82, *(double *)(a2 + 104));
      }
    }
    PCWorkingColor::operator=((uint64_t)v89, (int *)v82);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v82[48]);
  }
  v24 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v26 = (float32x2_t)v89[0];
  v25 = (float32x2_t)v89[1];
  os_unfair_lock_opaque = v24[147]._os_unfair_lock_opaque;
  if ((signed int)v24[146]._os_unfair_lock_opaque <= os_unfair_lock_opaque)
    v28 = (2 * (os_unfair_lock_opaque + 1)) | 1;
  else
    v28 = v24[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v24[144]._os_unfair_lock_opaque, os_unfair_lock_opaque + 1, v28);
  v29 = *(_QWORD *)&v24[148]._os_unfair_lock_opaque + 152 * (int)v24[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v29 - 152) = v14[2];
  *(float64x2_t *)v82 = vcvtq_f64_f32(v26);
  *(float64x2_t *)&v82[16] = vcvtq_f64_f32(v25);
  ProShade::Value::set(v29 - 144, (const PCString *)3, 4, v82);
  v30 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(v31 + 16);
  *(_OWORD *)v82 = *(_OWORD *)v31;
  *(_QWORD *)&v82[16] = v32;
  OZChannel::getValueAsDouble(v30, (const CMTime *)v82, 0.0);
  v34 = v33;
  if (*(double *)(a2 + 104) != -1.0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    v35 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    v36 = *(_QWORD *)(a2 + 16);
    v37 = *(_QWORD *)(v36 + 16);
    *(_OWORD *)v82 = *(_OWORD *)v36;
    *(_QWORD *)&v82[16] = v37;
    OZChannel::getValueAsDouble(v35, (const CMTime *)v82, *(double *)(a2 + 104));
    v34 = v34 * v38;
  }
  v39 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v40 = v39[147]._os_unfair_lock_opaque;
  if ((signed int)v39[146]._os_unfair_lock_opaque <= v40)
    v41 = (2 * (v40 + 1)) | 1;
  else
    v41 = v39[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v39[144]._os_unfair_lock_opaque, v40 + 1, v41);
  v42 = *(_QWORD *)&v39[148]._os_unfair_lock_opaque + 152 * (int)v39[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v42 - 152) = v14[22];
  *(double *)v82 = v34;
  ProShade::Value::set(v42 - 144, (const PCString *)3, 1, v82);
  v43 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v44 = *(_QWORD *)(a2 + 16);
  v45 = *(_QWORD *)(v44 + 16);
  *(_OWORD *)v82 = *(_OWORD *)v44;
  *(_QWORD *)&v82[16] = v45;
  OZChannel::getValueAsDouble(v43, (const CMTime *)v82, 0.0);
  v47 = v46;
  v48 = *(os_unfair_lock_s **)a2;
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v49 = v48[147]._os_unfair_lock_opaque;
  if ((signed int)v48[146]._os_unfair_lock_opaque <= v49)
    v50 = (2 * (v49 + 1)) | 1;
  else
    v50 = v48[146]._os_unfair_lock_opaque;
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v48[144]._os_unfair_lock_opaque, v49 + 1, v50);
  v51 = *(_QWORD *)&v48[148]._os_unfair_lock_opaque + 152 * (int)v48[147]._os_unfair_lock_opaque;
  *(_QWORD *)(v51 - 152) = v14[18];
  *(_QWORD *)v82 = v47;
  ProShade::Value::set(v51 - 144, (const PCString *)3, 1, v82);
  if (!v91.var0)
    throw_PCNullPointerException(1);
  *((_WORD *)v91.var0 + 24) = 0;
  v52 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (OZChannelBase::isEnabled(v52, 1, 1))
  {
    if (!v91.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v91.var0 + 48) = 1;
    v53 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v54 = *(_QWORD *)(a2 + 16);
    v55 = *(_QWORD *)(v54 + 16);
    *(_OWORD *)v82 = *(_OWORD *)v54;
    *(_QWORD *)&v82[16] = v55;
    OZChannel::getValueAsDouble(v53, (const CMTime *)v82, 0.0);
    v57 = v56;
    v58 = *(os_unfair_lock_s **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v59 = v58[147]._os_unfair_lock_opaque;
    if ((signed int)v58[146]._os_unfair_lock_opaque <= v59)
      v60 = (2 * (v59 + 1)) | 1;
    else
      v60 = v58[146]._os_unfair_lock_opaque;
    PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(&v58[144]._os_unfair_lock_opaque, v59 + 1, v60);
    v61 = *(_QWORD *)&v58[148]._os_unfair_lock_opaque + 152 * (int)v58[147]._os_unfair_lock_opaque;
    *(_QWORD *)(v61 - 152) = v14[30];
    *(_QWORD *)v82 = v57;
    ProShade::Value::set(v61 - 144, (const PCString *)3, 1, v82);
    v62 = (OZChannel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if (OZChannel::getValueAsInt(v62, MEMORY[0x1E0CA2E68], 0.0))
    {
      if (!v91.var0)
        throw_PCNullPointerException(1);
      *((_BYTE *)v91.var0 + 49) = 1;
    }
  }
  if (v15 == 2)
  {
    v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v72 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    if (v72)
    else
      v73 = 0;
    v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v75 = v74;
    v86 = 0x3FF0000000000000;
    v83 = 0x3FF0000000000000;
    *(_QWORD *)&v82[40] = 0x3FF0000000000000;
    *(_QWORD *)v82 = 0x3FF0000000000000;
    memset(&v82[8], 0, 32);
    memset(&v82[48], 0, 32);
    v84 = 0u;
    v85 = 0u;
    LODWORD(v87) = 0;
    v76 = *(double *)(a2 + 104);
    if (v74)
    {
      v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 736))(v74);
      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 744))(v75);
      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 752))(v75);
    }
    else
    {
      v78 = 0;
      v77 = 0;
      v79 = 0;
    }
    LOBYTE(v81) = *(_BYTE *)(a2 + 120);
    MaterialTextureTransformer::composeTextureTransform(&v93, v71 + 1840, (uint64_t)v73, v76 != -1.0, v77, v78, v79, (int)v13, *(double *)(a2 + 40), v81, v82, (unsigned int *)&v87);
    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    AddTextureToMaterial(a2, v71, v80, (uint64_t)v14, (uint64_t)(v14 + 44), (uint64_t)(v14 + 212), (uint64_t)v82, v87, 1);
  }
  else if (v15 == 1)
  {
    v63 = *(_QWORD *)(a2 + 16);
    v64 = *(_QWORD *)(v63 + 16);
    *(_OWORD *)v82 = *(_OWORD *)v63;
    *(_QWORD *)&v82[16] = v64;
    OZRenderParams::getRenderGPU(v63, (void (****)(HGGPUComputeDevice *__hidden))&v87);
    v65 = *(os_unfair_lock_s **)a2;
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v67 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(*(FxColorDescription **)(a2 + 16));
    OZRenderParams::getBlendingGamma(*(OZRenderParams **)(a2 + 16));
    AddGradientToMaterial((uint64_t)v82, (uint64_t)&v87, (uint64_t)v65, (uint64_t)(v14 + 44), (uint64_t)(v14 + 212), v66, a2 + 72, 1, v67);
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
    if (*((_QWORD *)&v87 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v90);
  PCSharedCount::~PCSharedCount(&v92);
}

void sub_1B2F28C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34)
{
  PCSharedCount *v34;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  PCSharedCount::~PCSharedCount(v34);
  _Unwind_Resume(a1);
}

uint64_t OZFxPixelTransformsAPIData::pixelTransform@<X0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t i;
  _BYTE v9[128];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v11 = 0u;
  v12 = 0u;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v18 = 0u;
  if (*(_QWORD *)this)
  {
    v4 = *(uint64_t **)(*(_QWORD *)this + 160);
    if (v4 != &v10)
    {
      v5 = 0;
      v6 = &v10;
      do
      {
        for (i = 0; i != 4; ++i)
          v6[i] = v4[i];
        ++v5;
        v6 += 4;
        v4 += 4;
      }
      while (v5 != 4);
    }
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)this + 136, (__int128 *)&v10, (uint64_t)v9);
  return PCMatrix44Tmpl<double>::operator*((uint64_t)v9, (__int128 *)((char *)this + 8), a2);
}

__n128 OZFxPixelTransformsAPIData::inversePixelTransform@<Q0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  LiAgent *v4;
  uint64_t i;
  _OWORD *v6;
  __int128 v7;
  uint64_t j;
  _OWORD *v9;
  __int128 v10;
  __n128 result;
  uint64_t k;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = *(LiAgent **)this;
  if (v4)
  {
    LiAgent::getInversePixelTransform(v4, 0.0, (uint64_t)v15);
    if (v15 != (_BYTE *)a2)
    {
      for (i = 0; i != 128; i += 32)
      {
        v6 = (_OWORD *)(a2 + i);
        v7 = *(_OWORD *)&v15[i + 16];
        *v6 = *(_OWORD *)&v15[i];
        v6[1] = v7;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 1, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v16, (__int128 *)a2, (uint64_t)v15);
    if (v15 != (_BYTE *)a2)
    {
      for (j = 0; j != 128; j += 32)
      {
        v9 = (_OWORD *)(a2 + j);
        v10 = *(_OWORD *)&v15[j + 16];
        *v9 = *(_OWORD *)&v15[j];
        v9[1] = v10;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 17, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*(a2, (__int128 *)&v16, (uint64_t)v15);
    if (v15 != (_BYTE *)a2)
    {
      for (k = 0; k != 128; k += 32)
      {
        v13 = a2 + k;
        result = *(__n128 *)&v15[k];
        v14 = *(_OWORD *)&v15[k + 16];
        *(__n128 *)v13 = result;
        *(_OWORD *)(v13 + 16) = v14;
      }
    }
  }
  return result;
}

uint64_t OZFxPixelTransformsAPIData::destinationPixelTransform@<X0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  double **v4;
  uint64_t i;
  _OWORD *v6;
  __int128 v7;
  _BYTE v9[128];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v11 = 0u;
  v12 = 0u;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = *(double ***)this;
  if (v4)
  {
    LiAgent::getClientPixelTransform(v4, (uint64_t)v9);
    for (i = 0; i != 128; i += 32)
    {
      v6 = (_OWORD *)((char *)&v10 + i);
      v7 = *(_OWORD *)&v9[i + 16];
      *v6 = *(_OWORD *)&v9[i];
      v6[1] = v7;
    }
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)this + 136, (__int128 *)&v10, (uint64_t)v9);
  return PCMatrix44Tmpl<double>::operator*((uint64_t)v9, (__int128 *)((char *)this + 8), a2);
}

__n128 OZFxPixelTransformsAPIData::destinationInversePixelTransform@<Q0>(OZFxPixelTransformsAPIData *this@<X0>, uint64_t a2@<X8>)
{
  LiAgent *v4;
  uint64_t i;
  _OWORD *v6;
  __int128 v7;
  uint64_t j;
  _OWORD *v9;
  __int128 v10;
  __n128 result;
  uint64_t k;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = *(LiAgent **)this;
  if (v4)
  {
    LiAgent::getInverseClientPixelTransform(v4, (uint64_t)v15);
    if (v15 != (_BYTE *)a2)
    {
      for (i = 0; i != 128; i += 32)
      {
        v6 = (_OWORD *)(a2 + i);
        v7 = *(_OWORD *)&v15[i + 16];
        *v6 = *(_OWORD *)&v15[i];
        v6[1] = v7;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 1, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v16, (__int128 *)a2, (uint64_t)v15);
    if (v15 != (_BYTE *)a2)
    {
      for (j = 0; j != 128; j += 32)
      {
        v9 = (_OWORD *)(a2 + j);
        v10 = *(_OWORD *)&v15[j + 16];
        *v9 = *(_OWORD *)&v15[j];
        v9[1] = v10;
      }
    }
  }
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v16, (double *)this + 17, 0.0))
  {
    PCMatrix44Tmpl<double>::operator*(a2, (__int128 *)&v16, (uint64_t)v15);
    if (v15 != (_BYTE *)a2)
    {
      for (k = 0; k != 128; k += 32)
      {
        v13 = a2 + k;
        result = *(__n128 *)&v15[k];
        v14 = *(_OWORD *)&v15[k + 16];
        *(__n128 *)v13 = result;
        *(_OWORD *)(v13 + 16) = v14;
      }
    }
  }
  return result;
}

char *getPixelTransformsAPIData(void)
{
  unsigned __int8 v0;
  char *v1;

  {
    pthread_key_create((pthread_key_t *)&getPixelTransformsAPIData(void)::transformsData, (void (__cdecl *)(void *))PCThreadSpecific<OZFxPixelTransformsAPIData>::destroy);
  }
  v1 = (char *)pthread_getspecific(getPixelTransformsAPIData(void)::transformsData);
  if (!v1)
  {
    v1 = (char *)operator new();
    *((_QWORD *)v1 + 11) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 6) = 0x3FF0000000000000;
    *(_QWORD *)v1 = 0;
    *((_QWORD *)v1 + 1) = 0x3FF0000000000000;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *((_QWORD *)v1 + 32) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 27) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 22) = 0x3FF0000000000000;
    __asm { FMOV            V1.2D, #1.0 }
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 10) = 0u;
    *((_OWORD *)v1 + 8) = _Q1;
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 184) = 0u;
    *((_OWORD *)v1 + 14) = 0u;
    *((_OWORD *)v1 + 15) = 0u;
    pthread_setspecific(getPixelTransformsAPIData(void)::transformsData, v1);
  }
  return v1;
}

void sub_1B2F29290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PCThreadSpecific<OZFxPixelTransformsAPIData>::destroy(uint64_t result)
{
  if (result)
    JUMPOUT(0x1B5E29170);
  return result;
}

void OZFxFilter::OZFxFilter(OZFxFilter *this, OZFactory *a2, PCString *a3, unsigned int a4, int a5, char a6)
{
  uint64_t v10;
  void *v11;

  OZEffect::OZEffect(this, a2, a3, a4);
  *(_QWORD *)v10 = &off_1E65BD748;
  *(_QWORD *)(v10 + 32) = &unk_1E65BDAB8;
  *(_QWORD *)(v10 + 48) = &unk_1E65BDB18;
  *(_QWORD *)(v10 + 80) = &unk_1E65BDD70;
  *(_QWORD *)(v10 + 368) = &unk_1E65BDDC8;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v10 + 368), a3, (OZChannelFolder *)(v10 + 88), a5, a6);
  *(_QWORD *)this = &off_1E65BD748;
  *((_QWORD *)this + 4) = &unk_1E65BDAB8;
  *((_QWORD *)this + 6) = &unk_1E65BDB18;
  *((_QWORD *)this + 10) = &unk_1E65BDD70;
  *((_QWORD *)this + 46) = &unk_1E65BDDC8;
  *((_BYTE *)this + 812) = 0;
  *((_DWORD *)this + 204) = 10001;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_DWORD *)this + 214) = 1065353216;
  PCMutex::PCMutex((PCMutex *)this + 12, 1);
  *((_QWORD *)this + 108) = &unk_1E64E2000;
  if ((a6 & 1) == 0)
  {
    v11 = (void *)*((_QWORD *)this + 50);
    objc_msgSend(v11, "addMixSlider:", 10001);
    objc_msgSend(v11, "addFlipCheckbox:", 10002);
    objc_msgSend(v11, "addInputPointsCheckbox:", 10003);
  }
}

void sub_1B2F2953C(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  OZFxPlugSharedBase *v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZEffect::~OZEffect(v1);
  _Unwind_Resume(a1);
}

void OZFxFilter::OZFxFilter(OZFxFilter *this, const OZFxFilter *a2, char a3)
{
  uint64_t v5;

  OZEffect::OZEffect(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65BD748;
  *(_QWORD *)(v5 + 32) = &unk_1E65BDAB8;
  *(_QWORD *)(v5 + 48) = &unk_1E65BDB18;
  *(_QWORD *)(v5 + 80) = &unk_1E65BDD70;
  *(_QWORD *)(v5 + 368) = &unk_1E65BDDC8;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v5 + 368), (const OZFxFilter *)((char *)a2 + 368), (OZChannelFolder *)(v5 + 88), 0);
  *(_QWORD *)this = &off_1E65BD748;
  *((_QWORD *)this + 4) = &unk_1E65BDAB8;
  *((_QWORD *)this + 6) = &unk_1E65BDB18;
  *((_QWORD *)this + 10) = &unk_1E65BDD70;
  *((_QWORD *)this + 46) = &unk_1E65BDDC8;
  *((_BYTE *)this + 812) = *((_BYTE *)a2 + 812);
  *((_DWORD *)this + 204) = *((_DWORD *)a2 + 204);
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_DWORD *)this + 214) = 1065353216;
  PCMutex::PCMutex((PCMutex *)this + 12, 1);
  *((_QWORD *)this + 108) = &unk_1E64E2000;
  objc_msgSend(*((id *)this + 47), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 50), &unk_1EF0A5330, 1);
}

void sub_1B2F29670(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  OZFxPlugSharedBase *v2;
  uint64_t v3;
  PCMutex *v4;

  PCMutex::~PCMutex(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZEffect::~OZEffect(v1);
  _Unwind_Resume(a1);
}

void OZFxFilter::~OZFxFilter(OZFxFilter *this)
{
  OZFxPlugSharedBase *v2;

  *(_QWORD *)this = &off_1E65BD748;
  *((_QWORD *)this + 4) = &unk_1E65BDAB8;
  *((_QWORD *)this + 6) = &unk_1E65BDB18;
  *((_QWORD *)this + 10) = &unk_1E65BDD70;
  v2 = (OZFxFilter *)((char *)this + 368);
  *((_QWORD *)this + 46) = &unk_1E65BDDC8;
  OZFxPlugSharedBase::resetFxLock((OZFxPlugSharedLock **)this + 46);
  objc_msgSend(*((id *)this + 47), "unregisterAPIForProtocol:", &unk_1EF0A5330);
  PCMutex::~PCMutex((PCMutex *)this + 12);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)this + 824);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZEffect::~OZEffect((OZChannelBase *)this);
}

{
  OZFxFilter::~OZFxFilter(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFxFilter::~OZFxFilter(OZFxFilter *this)
{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 32));
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 48));
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 80));
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 368));
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 32));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 80));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxFilter::~OZFxFilter((OZFxFilter *)((char *)this - 368));
  JUMPOUT(0x1B5E29170);
}

void OZFxFilter::getBoundsWithInput(id *a1, __int128 *a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  int v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  double v17;
  float v18;
  float v19;
  int v20;
  const void *v21;
  const void *v22;
  void *v23;
  double *v24;
  unsigned int v25;
  double v26;
  int32x2_t v27;
  int32x2_t v28;
  int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  const OZSceneNode *v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  const OZSceneNode *v50;
  int v51;
  __int128 v52;
  unint64_t v53;
  id v54;
  double v55;
  double v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  BOOL v62;
  double v63;
  double v64;
  double v65;
  OZChannelBase *Name;
  unint64_t v72;
  float64x2_t v73;
  unint64_t v74;
  float64x2_t v75;
  unint64_t v76;
  unsigned int SceneBitDepth;
  CMTime v78;
  _QWORD v79[6];
  _QWORD v80[7];
  char v81;
  _BYTE v82[7];
  double v83;
  _QWORD v84[6];
  _QWORD v85[7];
  char v86;
  _BYTE v87[7];
  double v88;
  PCString v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  CMTime v99;
  double v100;
  double v101;
  float64x2_t v102;
  CMTime v103;
  _BYTE v104[80];
  CMTime v105;
  __int128 v106;
  uint64_t v107;
  CMTime v108;
  double v109;
  double v110;
  double v111;
  unint64_t v112;
  unint64_t v113;
  _DWORD v114[5];

  v112 = 0;
  v113 = 0;
  v110 = 0.0;
  v111 = 0.0;
  v109 = 0.0;
  v108 = *(CMTime *)a2;
  v6 = a1[50];
  v7 = objc_msgSend(v6, "figTimeToFxTime:withConversionData:", &v108, 0);
  objc_msgSend(v6, "_getFloatValue:fromParm:atTime:", &v109, 10001, v7);
  v106 = *a2;
  v107 = *((_QWORD *)a2 + 2);
  if (!(*((unsigned int (**)(id *, __int128 *, _QWORD, uint64_t, uint64_t))*a1 + 35))(a1, &v106, 0, 1, 1)|| !v6|| !a1[49]|| v109 == 0.0|| *(double *)(a3 + 32) <= 0.0|| *(double *)(a3 + 40) <= 0.0)
  {
    v11 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a3 + 80) = v11;
    return;
  }
  v8 = a1 + 46;
  v9 = a1[3];
  if (v9)
    v10 = (*(uint64_t (**)(id))(*(_QWORD *)v9 + 144))(v9);
  else
    v10 = 0;
  SceneBitDepth = OZFxFilter::getSceneBitDepth((OZFxFilter *)a1);
  OZEffect::getResolution((OZEffect *)a1, &v111, &v110);
  v13 = v110;
  v12 = v111;
  v15 = *(double *)(a3 + 32);
  v14 = *(double *)(a3 + 40);
  v105 = v108;
  v16 = 0;
  if (((*((uint64_t (**)(id *, CMTime *))a1[46] + 29))(a1 + 46, &v105) & 1) == 0 && (v10 & 1) == 0)
  {
    v17 = v14 * v13;
    v16 = v15 * v12 > 4096.0;
    if (v15 * v12 > 4096.0)
    {
      v18 = *(double *)(a3 + 16);
      *(double *)(a3 + 16) = (float)((float)((int)(v15 * v12 + -4096.0) / 2) + v18);
      *(double *)(a3 + 32) = 4096.0 / v111;
    }
    if (v17 > 4096.0)
    {
      v20 = (int)(v17 + -4096.0);
      v19 = *(double *)(a3 + 24);
      *(double *)(a3 + 24) = (float)((float)(v20 / 2) + v19);
      *(double *)(a3 + 40) = 4096.0 / v110;
      v16 = 1;
    }
  }
  v21 = (const void *)(*((uint64_t (**)(id *))*a1 + 32))(a1);
  if (v21)
  {
    v22 = v21;
    OZExportSettings::OZExportSettings((OZExportSettings *)v104);
    v24 = (double *)(*(uint64_t (**)(const void *))(*(_QWORD *)v22 + 272))(v22);
    OZScene::getSceneSettings((OZScene *)v24, (OZExportSettings *)v104);
  }
  else
  {
    OZExportSettings::OZExportSettings((OZExportSettings *)v104);
    v23 = 0;
    v24 = 0;
  }
  v73 = *(float64x2_t *)(a3 + 32);
  v75 = *(float64x2_t *)(a3 + 16);
  v103 = v108;
  v25 = OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(a1 + 46, &v103);
  if (v25)
  {
    v26 = v24[48];
  }
  else if (v23)
  {
    v26 = (*(double (**)(void *))(*(_QWORD *)v23 + 1328))(v23);
  }
  else
  {
    v26 = 1.0;
  }
  v27 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v75, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  v28 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v75, v73)))), v27);
  v76 = v28.i32[0];
  v74 = v28.i32[1];
  v29 = v27.i32[1];
  v30 = (double)v27.i32[0];
  if (v104[44])
    v31 = 2;
  else
    v31 = 1;
  v33 = *((_QWORD *)a2 + 3);
  v32 = *((_QWORD *)a2 + 4);
  v34.i64[0] = v28.i32[0];
  v34.i64[1] = v28.i32[1];
  v100 = v30;
  v101 = (double)v29;
  v102 = vcvtq_f64_s64(v34);
  v35 = *(double *)(a3 + 16);
  v36 = *(double *)(a3 + 24);
  v37 = *(double *)(a3 + 32);
  v38 = *(double *)(a3 + 40);
  if (v25)
  {
    v39 = (*((uint64_t (**)(id *))*a1 + 32))(a1);
    if (v39 && (v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 272))(v39)) != 0)
    {
      v41 = *(_DWORD *)(v40 + 344);
      v42 = *(_DWORD *)(v40 + 348);
    }
    else
    {
      v41 = 0;
      v42 = 0;
    }
    v112 = v42;
    v113 = v41;
    if ((OZFxFilter::isText((OZFxFilter *)a1) & 1) != 0
      || (v50 = (const OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 32))(a1), OZFxPlug_IsCloneTextSceneNode(v50)))
    {
      v51 = 0;
      v45 = *(double *)(a3 + 40) * -0.5;
      goto LABEL_53;
    }
    goto LABEL_45;
  }
  OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)(a1 + 46));
  v99 = v108;
  if (!(*(unsigned int (**)(id *, CMTime *))(*v8 + 136))(a1 + 46, &v99))
  {
LABEL_47:
    v52 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a3 + 80) = v52;
    if (!v16)
      goto LABEL_75;
    goto LABEL_74;
  }
  v112 = v74;
  v113 = v76;
  v43 = objc_opt_respondsToSelector();
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if ((v43 & 1) != 0)
    {
LABEL_45:
      v51 = 0;
LABEL_46:
      v45 = 0.0;
      goto LABEL_53;
    }
    goto LABEL_47;
  }
  if ((OZFxFilter::isText((OZFxFilter *)a1) & 1) == 0)
  {
    v44 = (const OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 32))(a1);
    if (!OZFxPlug_IsCloneTextSceneNode(v44))
    {
      v51 = 1;
      goto LABEL_46;
    }
  }
  v45 = 0.0;
  if ((*(unsigned int (**)(id))(*(_QWORD *)a1[3] + 144))(a1[3]))
  {
    v46 = (*((uint64_t (**)(id *))*a1 + 32))(a1);
    if (v46 && (v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 272))(v46)) != 0)
    {
      v48 = *(_DWORD *)(v47 + 344);
      v49 = *(_DWORD *)(v47 + 348);
    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    v53 = v48;
    v72 = v49;
    v112 = v49;
    v113 = v48;
    v98 = 0x3FF0000000000000;
    v95 = 0x3FF0000000000000;
    v92 = 0x3FF0000000000000;
    v89.var0 = (__CFString *)0x3FF0000000000000;
    v90 = 0u;
    v91 = 0u;
    v93 = 0u;
    v94 = 0u;
    v96 = 0u;
    v97 = 0u;
    (*(void (**)(void *, PCString *, __int128 *))(*(_QWORD *)v23 + 1256))(v23, &v89, a2);
    v37 = (double)v53;
    v38 = (double)v72;
    v35 = (double)v53 * -0.5 - *(double *)&v91;
    v36 = (double)v72 * -0.5 - *((double *)&v93 + 1);
  }
  v51 = 1;
LABEL_53:
  objc_msgSend(a1[58], "beginLightAccess:", a2);
  v54 = a1[49];
  if (v51)
  {
    v85[0] = v76;
    v85[1] = v74;
    v85[2] = SceneBitDepth;
    v85[3] = 4;
    memset(&v85[4], 0, 24);
    v86 = 1;
    *(_DWORD *)v87 = v114[0];
    *(_DWORD *)&v87[3] = *(_DWORD *)((char *)v114 + 3);
    v88 = v26;
    v84[0] = v7;
    v84[1] = v31;
    v84[2] = 0;
    v84[3] = v33;
    v84[4] = v32;
    v84[5] = SceneBitDepth;
    objc_msgSend(v54, "getOutputBounds:withInputBounds:withInputInfo:withRenderInfo:", &v100, v85, v84, v35, v36, v37, v38);
    v112 = (unint64_t)v102.f64[1];
    v113 = (unint64_t)v102.f64[0];
  }
  else
  {
    v80[0] = v76;
    v80[1] = v74;
    v80[2] = SceneBitDepth;
    v80[3] = 4;
    memset(&v80[4], 0, 24);
    v81 = 1;
    *(_DWORD *)v82 = v114[0];
    *(_DWORD *)&v82[3] = *(_DWORD *)((char *)v114 + 3);
    v83 = v26;
    v79[0] = v7;
    v79[1] = v31;
    v79[2] = 0;
    v79[3] = v33;
    v79[4] = v32;
    v79[5] = SceneBitDepth;
    objc_msgSend(v54, "getOutputWidth:height:withInput:withInfo:", &v113, &v112, v80, v79);
  }
  objc_msgSend(a1[58], "endLightAccess");
  v56 = v110;
  v55 = v111;
  v58 = v112;
  v57 = v113;
  v78 = v108;
  if ((((*(unsigned int (**)(id *, CMTime *))(*v8 + 232))(a1 + 46, &v78) | v10) & 1) != 0)
  {
    v59 = (double)v113;
LABEL_65:
    v63 = (double)v112;
    goto LABEL_66;
  }
  v60 = v55 * (double)v57;
  v61 = v56 * (double)v58;
  v62 = v60 > 4096.0;
  if (v61 > 4096.0)
    v62 = 1;
  LOBYTE(v16) = v16 | v62;
  if (v60 <= 4096.0)
    v59 = (double)v113;
  else
    v59 = 4096.0 / v111;
  if (v61 <= 4096.0)
    goto LABEL_65;
  v63 = 4096.0 / v110;
LABEL_66:
  if (v59 <= 0.0 || v63 <= 0.0)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a3 + 80) = _Q0;
    if ((v16 & 1) == 0)
      goto LABEL_75;
  }
  else
  {
    if (v51)
    {
      v64 = v100;
      v65 = v101;
    }
    else
    {
      v64 = *(double *)(a3 + 16) - (double)((uint64_t)(v113 - v76) / 2);
      v65 = v45 + *(double *)(a3 + 24) - (double)((uint64_t)(v112 - v74) / 2);
    }
    *(double *)(a3 + 64) = v64;
    *(double *)(a3 + 72) = v65;
    *(double *)(a3 + 80) = v59;
    *(double *)(a3 + 88) = v63;
    if ((v16 & 1) == 0)
      goto LABEL_75;
  }
LABEL_74:
  Name = (OZChannelBase *)OZObjectManipulator::getName((OZObjectManipulator *)(a1 + 6));
  PCURL::PCURL((PCURL *)&v89, CFSTR("Filter is too big message"));
  OZChannelBase::setRangeName(Name, &v89);
  PCString::~PCString(&v89);
LABEL_75:
  OZExportSettings::~OZExportSettings((OZExportSettings *)v104);
}

void sub_1B2F2A070(_Unwind_Exception *a1)
{
  OZExportSettings::~OZExportSettings((OZExportSettings *)&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::getSceneBitDepth(OZFxFilter *this)
{
  uint64_t v1;
  OZSceneSettings *v2;

  v1 = (*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this);
  if (v1 && (v2 = (OZSceneSettings *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 272))(v1)) != 0)
    return OZSceneSettings::getBitDepth(v2);
  else
    return 0;
}

uint64_t OZFxFilter::isText(OZFxFilter *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = (*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 672))(v2)+ 8)+ 8), (int32x4_t)xmmword_1B3053B10)))) & 1) != 0)
  {
    v3 = (*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this);
    v4 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 672))(v3) + 8)+ 24), (int32x4_t)xmmword_1B3054200)))) ^ 1;
  }
  else
  {
    v4 = 1;
  }
  return v4 & 1;
}

__n128 OZFxFilter::getBounds(PCMutex *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v12;
  __n128 result;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;

  v9 = *(_QWORD *)&a1->_Mutex.__opaque[8];
  if (v9)
  {
    if (!a2)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", 0, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
      pcAbortImpl();
    }
    v20 = xmmword_1B30503B0;
    v12 = v21;
    v21[0] = 0;
    v21[1] = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    v22 = _Q1;
    v23 = xmmword_1B30503B0;
    v24[0] = 0;
    v24[1] = 0;
    v25 = _Q1;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v9 + 80))(v9, v21, a3);
    if (!OZFxFilter::inTemporalOperation(a1))
    {
      v12 = v24;
      (*((void (**)(PCMutex *, uint64_t, __int128 *))a1->_vptr$PCMutex + 102))(a1, a3, &v20);
    }
    result = *(__n128 *)v12;
    v19 = *((_OWORD *)v12 + 1);
    *a2 = *(_OWORD *)v12;
    a2[1] = v19;
  }
  return result;
}

BOOL OZFxFilter::inTemporalOperation(PCMutex *this)
{
  PCMutex *v2;
  _QWORD *v3;
  _BOOL8 v4;
  _QWORD v6[2];
  char v7;

  v2 = this + 12;
  v6[1] = this + 12;
  PCMutex::lock(this + 12);
  v7 = 1;
  v6[0] = pthread_self();
  v3 = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,BOOL>>>::find<_opaque_pthread_t *>(&this[11]._Mutex.__opaque[16], v6);
  if (v3)
    v4 = *((_BYTE *)v3 + 24) != 0;
  else
    v4 = 0;
  PCMutex::unlock(v2);
  return v4;
}

void sub_1B2F2A2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  _Unwind_Resume(a1);
}

void *OZFxFilter::shouldDrawOSCBounds(OZFxFilter *this)
{
  void *result;

  result = (void *)OZFxPlugSharedBase::getStaticProperty((OZFxFilter *)((char *)this + 368), CFSTR("SuppressBoundsDrawing"));
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

uint64_t OZFxFilter::process(OZFxFilter *this, OZRenderParams *a2)
{
  return 0;
}

void OZFxFilter::updateChannelsForMisbehavingPlugin(id *this)
{
  uint64_t v2;

  objc_msgSend(this[50], "softDisableAllChannels");
  v2 = (*((uint64_t (**)(id *))*this + 37))(this);
  if (v2)
    OZDocument::postNotification(*(OZDocument **)(v2 + 1584), 557056);
}

void `non-virtual thunk to'OZFxFilter::updateChannelsForMisbehavingPlugin(id *this)
{
  OZFxFilter::updateChannelsForMisbehavingPlugin(this - 46);
}

OZChannelBase *OZFxFilter::getChannelFromRefAndVersion(OZFxFilter *this, OZChannelRef *a2, double a3)
{
  OZChannelRef *v3;
  OZChannelBase *result;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  result = OZObjectManipulator::getChannelFromRefAndVersion((OZFxFilter *)((char *)this + 48), a2, a3);
  if (v3 && !result)
  {
    if (*((char *)v3 + 23) < 0)
    {
      v3 = *(OZChannelRef **)v3;
      if (!v3)
        return 0;
    }
    result = (OZChannelBase *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v3, 1), "lastPathComponent");
    if (!result)
      return result;
    if ((int)-[OZChannelBase intValue](result, "intValue") >= 10001
      && (v6 = (_QWORD *)*((_QWORD *)this + 25)) != 0
      && (v7 = v6[1], (int)((unint64_t)(v7 - *v6) >> 3) >= 1))
    {
      return *(OZChannelBase **)(v7 - 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

OZChannelBase *`non-virtual thunk to'OZFxFilter::getChannelFromRefAndVersion(OZFxFilter *this, OZChannelRef *a2, double a3)
{
  return OZFxFilter::getChannelFromRefAndVersion((OZFxFilter *)((char *)this - 48), a2, a3);
}

uint64_t OZFxFilter::setupObservers(OZFxFilter *this, OZScene *a2)
{
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = (char *)this + 368;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 256))(v3);
    if (a2)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *((_QWORD *)a2 + 198);
        if (v5)
        {
          OZDocument::addCPPObserver(v5, (uint64_t)v3, 1001);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 264))(v3, 1);
        }
      }
    }
  }
  result = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 272))(v3);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v3 + 280))(v3, 1);
  return result;
}

uint64_t OZFxFilter::renumberID(id *this, unsigned int *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;

  result = objc_msgSend(this[50], "channelMap");
  if (result)
  {
    v5 = *(_QWORD *)(result + 8);
    result += 8;
    v4 = v5;
    if (!v5)
      goto LABEL_13;
    v6 = *a2;
    v7 = result;
    do
    {
      v8 = *(_DWORD *)(v4 + 32);
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = (uint64_t *)v4;
      else
        v10 = (uint64_t *)(v4 + 8);
      if (v9)
        v7 = v4;
      v4 = *v10;
    }
    while (*v10);
    if (v7 == result || v6 < *(_DWORD *)(v7 + 32))
LABEL_13:
      v7 = result;
    *a2 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 24);
  }
  return result;
}

uint64_t OZFxFilter::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 88), a2, a3);
  OZFxFilter::renumberID((id *)a1, (unsigned int *)(a1 + 816));
  return objc_msgSend(*(id *)(a1 + 400), "updateChannelMap");
}

uint64_t `non-virtual thunk to'OZFxFilter::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  id *v4;

  v4 = (id *)(a1 - 48);
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 40), a2, a3);
  OZFxFilter::renumberID(v4, (unsigned int *)(a1 + 768));
  return objc_msgSend(*(id *)(a1 + 352), "updateChannelMap");
}

uint64_t OZFxFilter::didChangeChannelState(OZFxFilter *this, OZChannelBase *a2)
{
  char *v3;
  OZScene *v4;

  v3 = (char *)this + 368;
  v4 = (OZScene *)(*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 296))(this);
  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

uint64_t `non-virtual thunk to'OZFxFilter::didChangeChannelState(OZFxFilter *this, OZChannelBase *a2)
{
  char *v3;
  OZScene *v4;

  v3 = (char *)this + 320;
  v4 = (OZScene *)(*(uint64_t (**)(void))(*((_QWORD *)this - 6) + 296))();
  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

BOOL OZFxFilter::shouldRenumberChannel(OZFxFilter *this, OZChannelBase *a2)
{
  unsigned int v2;

  v2 = a2->var3 - 10001;
  return (v2 >= 5 || ((0x17u >> v2) & 1) == 0)
      && OZObjectManipulator::shouldRenumberChannel((OZFxFilter *)((char *)this + 48), a2);
}

BOOL `non-virtual thunk to'OZFxFilter::shouldRenumberChannel(OZFxFilter *this, OZChannelBase *a2)
{
  unsigned int v2;

  v2 = a2->var3 - 10001;
  return (v2 >= 5 || ((0x17u >> v2) & 1) == 0) && OZObjectManipulator::shouldRenumberChannel(this, a2);
}

void *OZFxFilter::completeConstruction(id *this)
{
  OZFxPlugSharedBase *v1;

  v1 = (OZFxPlugSharedBase *)(this + 46);
  objc_msgSend(this[47], "registerAPIObject:forProtocol:version:", this[50], &unk_1EF0A5330, 1);
  OZFxPlugSharedBase::updateFlipChannel((uint64_t)v1);
  OZFxPlugSharedBase::updateInputPointsChannel(v1);
  return OZFxPlugSharedBase::updateAbsolutePointsChannel(v1);
}

void *`non-virtual thunk to'OZFxFilter::completeConstruction(id *this)
{
  return OZFxFilter::completeConstruction(this - 46);
}

uint64_t OZFxFilter::didAddToNode(const PCString *this, OZSceneNode *a2, int a3)
{
  uint64_t v6;
  __CFString *var0;
  uint64_t v8;
  OZFxPlugRenderContextManager *v9;
  float v10;
  OZChannelBase *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  BOOL v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t *v59;
  uint64_t result;
  const PCString *v61;
  FxColorDescription v62;

  v6 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
  ((void (*)(const PCString *, uint64_t))this->var0[14].length)(this, v6);
  var0 = this[50].var0;
  if (var0)
  {
    v8 = -[__CFString contextManager](this[50].var0, "contextManager");
    if (v8)
    {
      v9 = (OZFxPlugRenderContextManager *)v8;
      (*(void (**)(FxColorDescription *__return_ptr, OZSceneNode *))(*(_QWORD *)a2 + 288))(&v62, a2);
      OZFxPlugRenderContextManager::setWorkingColorDescription(v9, &v62);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v62._pcColorDesc._colorSpaceRef._obj);
      v10 = (*(float (**)(OZSceneNode *))(*(_QWORD *)a2 + 296))(a2);
      OZFxPlugRenderContextManager::setBlendingGamma(v9, v10);
    }
    -[__CFString setObjectID](var0, "setObjectID");
  }
  v11 = (OZChannelBase *)&this[46];
  OZFxPlugSharedBase::doPostConstructionActions((id *)&this[46].var0);
  if (a3)
    OZFxPlugSharedBase::finishPluginSetup((OZFxPlugSharedBase *)&this[46]);
  OZFxPlugSharedBase::getPluginUUID(this + 46, (PCString *)&v62);
  v12 = (__CFString *)PCString::ns_str((PCString *)&v62);
  PCString::~PCString((PCString *)&v62);
  if (-[__CFString compare:](v12, "compare:", CFSTR("41122549-B8A6-470E-94DA-211294D20B62")))
  {
    if (-[__CFString compare:](v12, "compare:", CFSTR("7E9178C5-7B0F-4B86-884D-FE79F568B6CE")))
      goto LABEL_120;
    v13 = -[__CFString channelMap](this[50].var0, "channelMap");
    if (!v13)
      goto LABEL_120;
    v15 = (_QWORD *)(v13 + 8);
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      goto LABEL_21;
    v16 = v13 + 8;
    do
    {
      v17 = *(_DWORD *)(v14 + 32);
      v18 = v17 >= 0x22;
      if (v17 >= 0x22)
        v19 = (uint64_t *)v14;
      else
        v19 = (uint64_t *)(v14 + 8);
      if (v18)
        v16 = v14;
      v14 = *v19;
    }
    while (*v19);
    if ((_QWORD *)v16 == v15 || *(_DWORD *)(v16 + 32) >= 0x23u)
LABEL_21:
      v16 = v13 + 8;
    OZChannelBase::setFlag(*(OZChannelBase **)(v16 + 40), 0x1000000000, 0);
    v20 = *v15;
    if (*v15)
    {
      v21 = v15;
      do
      {
        v22 = *(_DWORD *)(v20 + 32);
        v23 = v22 >= 5;
        if (v22 >= 5)
          v24 = (uint64_t *)v20;
        else
          v24 = (uint64_t *)(v20 + 8);
        if (v23)
          v21 = (_QWORD *)v20;
        v20 = *v24;
      }
      while (*v24);
      if (v21 != v15 && *((_DWORD *)v21 + 8) < 6u)
        goto LABEL_119;
    }
    goto LABEL_118;
  }
  v25 = -[__CFString channelMap](this[50].var0, "channelMap");
  if (!v25)
    goto LABEL_120;
  v15 = (_QWORD *)(v25 + 8);
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26)
    goto LABEL_46;
  v27 = v25 + 8;
  do
  {
    v28 = *(_DWORD *)(v26 + 32);
    v29 = v28 >= 0x13;
    if (v28 >= 0x13)
      v30 = (uint64_t *)v26;
    else
      v30 = (uint64_t *)(v26 + 8);
    if (v29)
      v27 = v26;
    v26 = *v30;
  }
  while (*v30);
  if ((_QWORD *)v27 == v15 || *(_DWORD *)(v27 + 32) >= 0x14u)
LABEL_46:
    v27 = v25 + 8;
  OZChannelBase::setFlag(*(OZChannelBase **)(v27 + 40), 0x1000000000, 0);
  v31 = *v15;
  if (!*v15)
    goto LABEL_58;
  v32 = v15;
  do
  {
    v33 = *(_DWORD *)(v31 + 32);
    v34 = v33 >= 0x24;
    if (v33 >= 0x24)
      v35 = (uint64_t *)v31;
    else
      v35 = (uint64_t *)(v31 + 8);
    if (v34)
      v32 = (_QWORD *)v31;
    v31 = *v35;
  }
  while (*v35);
  if (v32 == v15 || *((_DWORD *)v32 + 8) >= 0x25u)
LABEL_58:
    v32 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v32[5], 0x1000000000, 0);
  v36 = *v15;
  if (!*v15)
    goto LABEL_70;
  v37 = v15;
  do
  {
    v38 = *(_DWORD *)(v36 + 32);
    v39 = v38 >= 0x22;
    if (v38 >= 0x22)
      v40 = (uint64_t *)v36;
    else
      v40 = (uint64_t *)(v36 + 8);
    if (v39)
      v37 = (_QWORD *)v36;
    v36 = *v40;
  }
  while (*v40);
  if (v37 == v15 || *((_DWORD *)v37 + 8) >= 0x23u)
LABEL_70:
    v37 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v37[5], 0x1000000000, 0);
  v41 = *v15;
  if (!*v15)
    goto LABEL_82;
  v42 = v15;
  do
  {
    v43 = *(_DWORD *)(v41 + 32);
    v44 = v43 >= 5;
    if (v43 >= 5)
      v45 = (uint64_t *)v41;
    else
      v45 = (uint64_t *)(v41 + 8);
    if (v44)
      v42 = (_QWORD *)v41;
    v41 = *v45;
  }
  while (*v45);
  if (v42 == v15 || *((_DWORD *)v42 + 8) >= 6u)
LABEL_82:
    v42 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v42[5], 0x1000000000, 0);
  v46 = *v15;
  if (!*v15)
    goto LABEL_94;
  v47 = v15;
  do
  {
    v48 = *(_DWORD *)(v46 + 32);
    v49 = v48 >= 6;
    if (v48 >= 6)
      v50 = (uint64_t *)v46;
    else
      v50 = (uint64_t *)(v46 + 8);
    if (v49)
      v47 = (_QWORD *)v46;
    v46 = *v50;
  }
  while (*v50);
  if (v47 == v15 || *((_DWORD *)v47 + 8) >= 7u)
LABEL_94:
    v47 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v47[5], 0x1000000000, 0);
  v51 = *v15;
  if (!*v15)
    goto LABEL_106;
  v52 = v15;
  do
  {
    v53 = *(_DWORD *)(v51 + 32);
    v54 = v53 >= 0x25;
    if (v53 >= 0x25)
      v55 = (uint64_t *)v51;
    else
      v55 = (uint64_t *)(v51 + 8);
    if (v54)
      v52 = (_QWORD *)v51;
    v51 = *v55;
  }
  while (*v55);
  if (v52 == v15 || *((_DWORD *)v52 + 8) >= 0x26u)
LABEL_106:
    v52 = v15;
  OZChannelBase::setFlag((OZChannelBase *)v52[5], 0x1000000000, 0);
  v56 = *v15;
  if (!*v15)
    goto LABEL_118;
  v21 = v15;
  do
  {
    v57 = *(_DWORD *)(v56 + 32);
    v58 = v57 >= 0x2D;
    if (v57 >= 0x2D)
      v59 = (uint64_t *)v56;
    else
      v59 = (uint64_t *)(v56 + 8);
    if (v58)
      v21 = (_QWORD *)v56;
    v56 = *v59;
  }
  while (*v59);
  if (v21 == v15 || *((_DWORD *)v21 + 8) >= 0x2Eu)
LABEL_118:
    v21 = v15;
LABEL_119:
  OZChannelBase::setFlag((OZChannelBase *)v21[5], 0x1000000000, 0);
LABEL_120:
  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.motionapp"));
  if ((_DWORD)result)
    return OZChannelBase::setRangeName(v11, v61);
  return result;
}

void sub_1B2F2AAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::willRemove(OZFxFilter *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)this + 368;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 46) + 256))((char *)this + 368))
  {
    v3 = (*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 296))(this);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 1584);
      if (v4)
      {
        OZDocument::removeCPPObserver(v4);
        (*(void (**)(char *, _QWORD))(*(_QWORD *)v2 + 264))(v2, 0);
      }
    }
  }
  return (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v2 + 280))(v2, 0);
}

void *OZFxFilter::didAddSceneNodeToScene(OZFxFilter *this, OZScene *a2)
{
  void *result;

  (*(void (**)(OZFxFilter *, OZScene *))(*(_QWORD *)this + 472))(this, a2);
  result = (void *)*((_QWORD *)this + 50);
  if (result)
    return (void *)objc_msgSend(result, "setObjectID");
  return result;
}

uint64_t OZFxFilter::willRemoveSceneNodeFromScene(OZFxFilter *this, OZScene *a2)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 368;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 46) + 256))((char *)this + 368))
  {
    v4 = *((_QWORD *)a2 + 198);
    if (v4)
    {
      OZDocument::removeCPPObserver(v4);
      (*(void (**)(char *, _QWORD))(*(_QWORD *)v3 + 264))(v3, 0);
    }
  }
  return (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v3 + 280))(v3, 0);
}

void OZFxFilter::calcStaticHash(const PCString *a1, void *a2, uint64_t **a3)
{
  void *v5;
  void *v6;
  PCString v7;

  OZEffect::calcStaticHash((uint64_t)a1, a2, a3);
  if (!v5)
    __cxa_bad_cast();
  if (a1[49].var0)
  {
    v6 = v5;
    OZFxPlugSharedBase::getPluginUUID(a1 + 46, &v7);
    (*(void (**)(void *, PCString *))(*(_QWORD *)v6 + 104))(v6, &v7);
    PCString::~PCString(&v7);
  }
}

void sub_1B2F2ACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZFxFilter::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  OZFxFilter::calcStaticHash((const PCString *)(a1 - 48), a2, a3);
}

double OZFxFilter::calcHashForState(const PCString *a1, void *lpsrc, CMTime *a3, uint64_t **a4)
{
  __CFString *var0;
  PCString v10;
  __int128 v11;
  CMTimeEpoch epoch;

  var0 = a1[49].var0;
  if (var0)
  {
    if (-[__CFString variesOverTime](var0, "variesOverTime"))
    {
      epoch = a3->epoch;
      v11 = *(_OWORD *)&a3->value;
      (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
      (*(void (**)(void *, __int128 *))(*(_QWORD *)lpsrc + 112))(lpsrc, &v11);
      (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
    }
    OZFxPlugSharedBase::getPluginUUID(a1 + 46, &v10);
    (*(void (**)(void *, PCString *))(*(_QWORD *)lpsrc + 104))(lpsrc, &v10);
    PCString::~PCString(&v10);
  }
  return OZEffect::calcHashForState((uint64_t)a1, lpsrc, a3, a4);
}

void sub_1B2F2ADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'OZFxFilter::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZFxFilter::calcHashForState((const PCString *)(a1 - 48), a2, a3, a4);
}

uint64_t OZFxFilter::markFactoriesForSerialization(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  OZChannelObjectRoot *v4;

  v4 = (OZFxFilter *)((char *)this + 88);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 88), 8))
    OZFactory::setNeedsSaving(*((OZFactory **)this + 5), (const OZFactory *)1);
  OZFxPlugSharedBase::markDynamicParameterFactoriesForSerialization((id *)this + 46);
  return OZChannelObjectRoot::markChannelFactoriesForSerialization(v4, a2);
}

uint64_t `non-virtual thunk to'OZFxFilter::markFactoriesForSerialization(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  return OZFxFilter::markFactoriesForSerialization((OZFxFilter *)((char *)this - 80), a2);
}

uint64_t OZFxFilter::writeHeader(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  PCString v10;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFxFilterScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 68);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 120);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 28));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(*((OZFactory **)this + 5), v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  OZFxPlugSharedBase::getPluginUUID((const PCString *)this + 46, &v10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 7, &v10);
  PCString::~PCString(&v10);
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 46) + 192))((char *)this + 368);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, 8, v6);
  if ((*(unsigned int (**)(OZFxFilter *))(*(_QWORD *)this + 584))(this))
  {
    if (*((_QWORD *)this + 16))
      v7 = (char *)*((_QWORD *)this + 16);
    else
      v7 = (char *)this + 120;
    (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 118, v7);
  }
  v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 46) + 208))((char *)this + 368);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, 9, v8);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2F2AFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFxFilter::writeHeader(OZFxFilter *this, PCSerializerWriteStream *a2)
{
  return OZFxFilter::writeHeader((OZFxFilter *)((char *)this - 80), a2);
}

uint64_t OZFxFilter::writeBody(id *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  OZChannelFolder *v8;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZFxFilterScope);
  if ((*((unsigned int (**)(char *))this[46] + 26))((char *)this + 368))
  {
    v8 = (OZChannelFolder *)objc_msgSend(this[50], "baseChannel");
    if (v8)
      OZFxPlugSharedBase::writeDynamicParams((OZFxPlugSharedBase *)(this + 46), a2, v8);
  }
  OZChannelObjectRoot::writeBody((OZChannelObjectRoot *)(this + 11), a2, 0, 1, a5);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZFxFilter::writeBody(id *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZFxFilter::writeBody(this - 10, a2, 0, 0, a5);
}

uint64_t OZFxFilter::parseBegin(OZFxFilter *this, PCSerializerReadStream *a2)
{
  OZFxPlugSharedBase *v4;

  v4 = (OZFxFilter *)((char *)this + 368);
  *((_DWORD *)this + 202) = *((_DWORD *)a2 + 26);
  OZFxPlugSharedBase::updateFlipChannel((uint64_t)this + 368);
  OZFxPlugSharedBase::updateInputPointsChannel(v4);
  OZFxPlugSharedBase::updateAbsolutePointsChannel(v4);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZFxFilterScope);
  if ((*(unsigned int (**)(OZFxPlugSharedBase *))(*((_QWORD *)this + 46) + 208))(v4))
    OZFxPlugSharedBase::pushDynamicParamScope(v4, a2);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 88), a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZFxFilter::parseBegin(OZFxFilter *this, PCSerializerReadStream *a2)
{
  OZFxFilter::parseBegin((OZFxFilter *)((char *)this - 80), a2);
  return 1;
}

uint64_t OZFxFilter::parseEnd(OZFxFilter *this, PCSerializerReadStream *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t **v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  OZChannelBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  _QWORD *v34;
  unsigned int v35;
  BOOL v36;
  uint64_t *v37;
  void *v38;
  const __CFString *v39;
  uint64_t v40;
  const __CFURL **v41;
  const PCURL *v42;
  unsigned int v44[3];
  PCString v45;

  OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this + 88), a2);
  if (*((_DWORD *)a2 + 26) <= 4u)
  {
    if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 46) + 208))((char *)this + 368))
    {
      v4 = (uint64_t *)*((_QWORD *)this + 25);
      if (v4)
      {
        v6 = *v4;
        v5 = v4[1];
        if (v5 != *v4)
        {
          while (1)
          {
            v8 = *(_DWORD **)(v5 - 8);
            v5 -= 8;
            v7 = v8;
            if (v8)
            {
              {
                v9 = v7[6];
                if (v9 >> 4 >= 0x271)
                  break;
              }
            }
            if (v5 == v6)
              goto LABEL_11;
          }
          *((_DWORD *)this + 204) = v9;
        }
      }
    }
LABEL_11:
    if (*((_DWORD *)this + 204) != 10001)
    {
      v10 = objc_msgSend(*((id *)this + 50), "channelMap");
      if (v10)
      {
        v11 = (uint64_t **)v10;
        v12 = (unsigned int *)((char *)this + 816);
        v13 = *(_QWORD *)(v10 + 8);
        if (!v13)
          goto LABEL_24;
        v14 = *v12;
        v15 = v10 + 8;
        do
        {
          v16 = *(_DWORD *)(v13 + 32);
          v17 = v16 >= v14;
          if (v16 >= v14)
            v18 = (uint64_t *)v13;
          else
            v18 = (uint64_t *)(v13 + 8);
          if (v17)
            v15 = v13;
          v13 = *v18;
        }
        while (*v18);
        if (v15 == v10 + 8 || v14 < *(_DWORD *)(v15 + 32))
LABEL_24:
          v15 = v10 + 8;
        v19 = *(OZChannelBase **)(v15 + 40);
        OZChannelBase::setID(v19, 0x2711u);
        v44[0] = 10001;
        v45.var0 = (__CFString *)v44;
        std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v11, v44, (uint64_t)&std::piecewise_construct, &v45)[5] = (uint64_t *)v19;
        std::__tree<std::__value_type<unsigned int,OZChannelBase *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZChannelBase *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZChannelBase *>>>::__erase_unique<unsigned int>((uint64_t)v11, (unsigned int *)this + 204);
        *v12 = 10001;
      }
    }
  }
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 46) + 208))((char *)this + 368))
  {
    v20 = (void *)*((_QWORD *)this + 50);
    v21 = objc_msgSend(v20, "channelMap");
    if (v21)
    {
      v23 = (_QWORD *)(v21 + 8);
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        v24 = v21 + 8;
        v25 = *(_QWORD *)(v21 + 8);
        do
        {
          v26 = *(_DWORD *)(v25 + 32);
          v27 = v26 >= 0x2711;
          if (v26 >= 0x2711)
            v28 = (uint64_t *)v25;
          else
            v28 = (uint64_t *)(v25 + 8);
          if (v27)
            v24 = v25;
          v25 = *v28;
        }
        while (*v28);
        if ((_QWORD *)v24 != v23 && *(_DWORD *)(v24 + 32) <= 0x2711u)
        {
          objc_msgSend(v20, "addMixSlider:withChannel:", 10001, *(_QWORD *)(v24 + 40));
          v22 = *v23;
        }
        if (v22)
        {
          v29 = v23;
          v30 = v22;
          do
          {
            v31 = *(_DWORD *)(v30 + 32);
            v32 = v31 >= 0x2712;
            if (v31 >= 0x2712)
              v33 = (uint64_t *)v30;
            else
              v33 = (uint64_t *)(v30 + 8);
            if (v32)
              v29 = (_QWORD *)v30;
            v30 = *v33;
          }
          while (*v33);
          if (v29 != v23 && *((_DWORD *)v29 + 8) <= 0x2712u)
          {
            objc_msgSend(v20, "addFlipCheckbox:withChannel:", 10002, v29[5]);
            v22 = *v23;
          }
          if (v22)
          {
            v34 = v23;
            do
            {
              v35 = *(_DWORD *)(v22 + 32);
              v36 = v35 >= 0x2713;
              if (v35 >= 0x2713)
                v37 = (uint64_t *)v22;
              else
                v37 = (uint64_t *)(v22 + 8);
              if (v36)
                v34 = (_QWORD *)v22;
              v22 = *v37;
            }
            while (*v37);
            if (v34 != v23 && *((_DWORD *)v34 + 8) >> 2 <= 0x9C4u)
              objc_msgSend(v20, "addInputPointsCheckbox:withChannel:", 10003, v34[5]);
          }
        }
      }
    }
  }
  v38 = (void *)*((_QWORD *)this + 50);
  if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 46) + 288))((char *)this + 368) & 1) != 0
    || objc_msgSend(v38, "hasPointParameters"))
  {
    objc_msgSend(v38, "movePublishOSCChannelToEnd");
  }
  v39 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  if (!v39
    || CFStringCompare(v39, CFSTR("com.apple.FinalCutApp"), 1uLL)
    || (OZFxPlugSharedBase::isHMTCompatible((PCString *)this + 46) & 1) != 0)
  {
    v40 = (*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 296))(this);
    if (!v40)
      return 1;
    v41 = *(const __CFURL ***)(v40 + 1584);
    if (!v41)
      return 1;
    OZDocument::getFilename(v41, (PCURL *)&v45);
    PCURL::PCURL((PCURL *)v44, &v45, 0);
    if (!OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)v44, v42)
      || (OZFxPlugSharedBase::isHMTCompatible((PCString *)this + 46) & 1) != 0)
    {
      PCURL::~PCURL((PCURL *)v44);
      PCString::~PCString(&v45);
      return 1;
    }
    (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
    PCURL::~PCURL((PCURL *)v44);
    PCString::~PCString(&v45);
  }
  else
  {
    (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  return 0;
}

void sub_1B2F2B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFxFilter::parseEnd(OZFxFilter *this, PCSerializerReadStream *a2)
{
  return OZFxFilter::parseEnd((OZFxFilter *)((char *)this - 80), a2);
}

uint64_t OZFxFilter::updateParameterID(uint64_t this, OZChannelBase *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t **v7;
  unsigned int v8;
  unsigned int *v9;

  v8 = a4;
  if (a2)
  {
    v6 = this;
    OZChannelBase::setID(a2, a4);
    v7 = (uint64_t **)objc_msgSend(*(id *)(v6 + 400), "channelMap");
    v9 = &v8;
    std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, &v8, (uint64_t)&std::piecewise_construct, &v9)[5] = (uint64_t *)a2;
    this = std::__tree<std::__value_type<unsigned int,OZChannelBase *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZChannelBase *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZChannelBase *>>>::__erase_unique<unsigned int>((uint64_t)v7, a3);
    *a3 = v8;
  }
  return this;
}

uint64_t OZFxFilter::parseElement(OZFxFilter *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZFxPlugSharedBase *v6;
  __CFString *v7;
  int v8;
  int v9;
  OZChannelBase *Descendant;
  PCSharedCount v12;
  PCString v13;
  unsigned int v14;

  v6 = (OZFxFilter *)((char *)this + 368);
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 46) + 208))((char *)this + 368))
    OZFxPlugSharedBase::parseDynamicParamElement(v6, a2, a3);
  v14 = 0;
  if (*((_DWORD *)a3 + 2) == 110)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v14);
    if (!OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 88), v14))
    {
      PCURL::PCURL((PCURL *)&v13, CFSTR("Channel Mix"));
      PCSharedCount::PCSharedCount(&v12);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v12);
      v7 = (__CFString *)PCString::ns_str((PCString *)&v12);
      v8 = -[__CFString isEqualToString:](v7, "isEqualToString:", PCString::ns_str(&v13));
      if (v14 >> 4 > 0x270)
        v9 = v8;
      else
        v9 = 0;
      if (v9 == 1)
      {
        Descendant = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)((char *)this + 88), *((_DWORD *)this + 204));
        OZFxFilter::updateParameterID((uint64_t)this, Descendant, (unsigned int *)this + 204, v14);
      }
      PCString::~PCString((PCString *)&v12);
      PCString::~PCString(&v13);
    }
  }
  OZChannelObjectRoot::parseElement((OZTimeMarkerSet **)this + 11, a2, a3);
  return 1;
}

void sub_1B2F2B6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFxFilter::parseElement(OZFxFilter *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZFxFilter::parseElement((OZFxFilter *)((char *)this - 80), a2, a3);
  return 1;
}

void OZFxFilter::setInternalName(OZFxFilter *this, const PCString *a2)
{
  OZChannelBase::setInternalName((OZChannelBase *)((char *)this + 88), a2);
}

BOOL OZFxFilter::needsToRender(OZFxFilter *this, CMTime *a2)
{
  void *v3;
  BOOL v4;
  double v6;

  v3 = (void *)*((_QWORD *)this + 50);
  v6 = 0.0;
  objc_msgSend(v3, "_getFloatValue:fromParm:atTime:", &v6, 10001, objc_msgSend(v3, "figTimeToFxTime:withConversionData:", a2, 0));
  if (v3)
    v4 = *((_QWORD *)this + 49) == 0;
  else
    v4 = 1;
  return !v4 && v6 > 0.0;
}

uint64_t OZFxFilter::rescaleInput(id *a1, uint64_t a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  OZSceneNode *v15;
  _BOOL4 v16;
  CMTime v17;

  v17 = *a3;
  if ((OZFxPlugSharedBase::isPixelIndependent(a1 + 46, &v17) & 1) != 0)
    return 0;
  v10 = (*((uint64_t (**)(id *))*a1 + 32))(a1);
  if (v10
    && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v10)) != 0
    && (v12 = *(_QWORD *)(v11 + 1584)) != 0)
  {
    v13 = *(_DWORD *)(v12 + 260);
    v14 = *(_DWORD *)(v12 + 264);
  }
  else
  {
    v14 = 13;
    v13 = 5;
  }
  v15 = (OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 31))(a1);
  v16 = OZFxPlug_InputWillBeScaledBasedOnChannel(v15, v13, v14);
  return OZFxPlug_setPixelTransformToRestrictInputSizeForFilter(a2, a6, v16, 0);
}

uint64_t OZFxFilter::rescaleInput(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10;
  double v11;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)(a2 + 160);
  v4 = *(float64x2_t *)(v3 + 48);
  v6 = *(float64x2_t *)v3;
  v5 = *(float64x2_t *)(v3 + 16);
  v15 = *(float64x2_t *)(v3 + 32);
  v16 = v4;
  v13 = v6;
  v14 = v5;
  v7 = *(_OWORD *)(v3 + 112);
  v9 = *(_OWORD *)(v3 + 64);
  v8 = *(_OWORD *)(v3 + 80);
  v19 = *(_OWORD *)(v3 + 96);
  v20 = v7;
  v17 = v9;
  v18 = v8;
  v11 = *a3;
  v10 = a3[1];
  if (*a3 != 1.0)
  {
    v13 = vmulq_n_f64(v13, v11);
    v14 = vmulq_n_f64(v14, v11);
  }
  if (v10 != 1.0)
  {
    v15 = vmulq_n_f64(v15, v10);
    v16 = vmulq_n_f64(v16, v10);
  }
  return LiAgent::setPixelTransform(a2, (uint64_t)&v13);
}

BOOL OZFxFilter::getSceneDimensionsBounds(uint64_t a1, LiAgent *this, uint64_t a3, OZRenderParams *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  int v12;
  int v13;
  int v14;
  double *v15;
  int v16;
  double v18[16];
  __n128 v19;

  LiAgent::getDOD((uint64_t)this, (uint64_t)v18);
  *(_OWORD *)a3 = *(_OWORD *)v18;
  LiAgent::getInversePixelTransform(this, 0.0, (uint64_t)v18);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  if (v8 && (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8)) != 0)
    v10 = *(_QWORD *)(v9 + 344);
  else
    v10 = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = v10;
  OZRenderParams::getResolution(a4, &v19);
  v11 = v19;
  v12 = (int)(v19.n128_f64[0] * (double)*(int *)(a3 + 48));
  v13 = (int)(v19.n128_f64[1] * (double)*(int *)(a3 + 52));
  *(_DWORD *)(a3 + 48) = v12;
  *(_DWORD *)(a3 + 52) = v13;
  v14 = (int)(v11.n128_f64[0] * (double)*(int *)(a3 + 56));
  *(_DWORD *)(a3 + 56) = v14;
  *(double *)(a3 + 64) = (double)v12;
  v15 = (double *)(a3 + 64);
  v16 = (int)(v11.n128_f64[1] * (double)*((int *)v15 - 1));
  *((_DWORD *)v15 - 1) = v16;
  v15[1] = (double)v13;
  v15[2] = (double)v14;
  v15[3] = (double)v16;
  return PCMatrix44Tmpl<double>::transformRect<double>(v18, v15, (uint64_t)v15);
}

BOOL OZFxFilter::getOutputPixelBoundsFromImageBounds(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  float64x2_t *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  _BOOL8 result;
  int32x2_t v13;
  int32x2_t v14;
  float64x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  float64x2_t v18;
  float64x2_t v19;

  v6 = (float64x2_t *)(a4 + 16);
  v7 = *(double *)(a4 + 16);
  v9 = *(double *)(a4 + 24);
  v8 = *(double *)(a4 + 32);
  v10 = *(double *)(a4 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 816))(a1, a3, a4);
  if (v7 != v6->f64[0] || v9 != *(double *)(a4 + 24) || v8 != *(double *)(a4 + 32) || v10 != *(double *)(a4 + 40))
  {
    v11 = v6[1];
    v18 = *v6;
    v19 = v11;
    result = PCMatrix44Tmpl<double>::transformRect<double>(a2, v18.f64, (uint64_t)&v18);
    if (!result)
      return result;
    v13 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v18, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    v14 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v18, v19)))), v13);
    *(int32x2_t *)a4 = v13;
    *(int32x2_t *)(a4 + 8) = v14;
  }
  v15 = *(float64x2_t *)(a4 + 80);
  v18 = *(float64x2_t *)(a4 + 64);
  v19 = v15;
  result = PCMatrix44Tmpl<double>::transformRect<double>(a2, v18.f64, (uint64_t)&v18);
  if (result)
  {
    v16 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v18, (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0000000uLL)), (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    v17 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(vaddq_f64(v18, v19), (float64x2_t)vdupq_n_s64(0xBEB0C6F7A0000000))))), v16);
    *(int32x2_t *)(a4 + 48) = v16;
    *(int32x2_t *)(a4 + 56) = v17;
  }
  return result;
}

double OZFxFilter::getAgentROI@<D0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  double result;

  if (LiAgent::haveROI((LiAgent *)a1))
  {
    *(_QWORD *)&result = LiAgent::getROI(a1, a2).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = (__n128)xmmword_1B30503B0;
  }
  return result;
}

float64x2_t OZFxFilter::getAgentImageSpaceBounds@<Q0>(OZFxFilter *this@<X0>, __n128 *a2@<X1>, const OZRenderParams *a3@<X2>, uint64_t a4@<X8>)
{
  float64x2_t result;
  int v9;
  int v10;
  int64x2_t v13;
  const void *v14;
  void *v15;
  uint64_t v20;
  int v21;
  int v22;
  int64x2_t v23;
  _DWORD v24[4];
  char v25;
  __n128 v26;

  OZFxFilter::getAgentROI(a2, &v26);
  LiAgent::getDOD((uint64_t)a2, (uint64_t)v24);
  v10 = v26.n128_i32[2];
  v9 = v26.n128_i32[3];
  if (v26.n128_i32[3] >= 1 && (signed __int32)v26.n128_u32[2] >= 1 || v25 == 0)
  {
    if (v25)
    {
      v13.i64[0] = v26.n128_i32[0];
      v13.i64[1] = v26.n128_i32[1];
      *(float64x2_t *)a4 = vcvtq_f64_s64(v13);
      result.f64[0] = (double)v10;
      *(double *)(a4 + 16) = (double)v10;
      *(double *)(a4 + 24) = (double)v9;
    }
    else
    {
      v23.i64[0] = v24[0];
      v23.i64[1] = v24[1];
      result = vcvtq_f64_s64(v23);
      v23.i64[0] = v24[2];
      v23.i64[1] = v24[3];
      *(float64x2_t *)a4 = result;
      *(float64x2_t *)(a4 + 16) = vcvtq_f64_s64(v23);
    }
  }
  else
  {
    v14 = (const void *)(*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 248))(this);
    if (!v14)
      goto LABEL_15;
    if (!v15)
      goto LABEL_15;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a4 + 16) = _Q0;
    (*(void (**)(void *, uint64_t, const OZRenderParams *))(*(_QWORD *)v15 + 1488))(v15, a4, a3);
    if (*(double *)(a4 + 16) < 0.0 || (result.f64[0] = *(float64_t *)(a4 + 24), result.f64[0] < 0.0))
    {
LABEL_15:
      v20 = (*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 296))(this);
      if (!v20
        || (*(_QWORD *)a4 = 0,
            *(_QWORD *)(a4 + 8) = 0,
            v21 = *(_DWORD *)(v20 + 344),
            v22 = *(_DWORD *)(v20 + 348),
            *(double *)(a4 + 16) = (double)v21,
            *(double *)(a4 + 24) = (double)v22,
            v21 < 0)
        || v22 < 0)
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(float64x2_t *)(a4 + 16) = result;
      }
      else
      {
        result.f64[0] = 0.0 - ((double)v22 * 0.5 + 0.0);
        *(double *)a4 = 0.0 - ((double)v21 * 0.5 + 0.0);
        *(float64_t *)(a4 + 8) = result.f64[0];
      }
    }
  }
  return result;
}

int32x2_t OZFxFilter::getBoundingRectangles@<D0>(id *this@<X0>, LiAgent *a2@<X1>, const OZRenderParams *a3@<X2>, CMTime *a4@<X3>, uint64_t a5@<X8>)
{
  float64x2_t *v10;
  id *v16;
  float64x2_t v17;
  int32x2_t result;
  int32x2_t v19;
  int64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  CMTime v23;
  float64x2_t v24;
  float64x2_t v25;
  CMTime v26;

  *(_OWORD *)a5 = xmmword_1B30503B0;
  *(_QWORD *)(a5 + 16) = 0;
  v10 = (float64x2_t *)(a5 + 16);
  *(_QWORD *)(a5 + 24) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a5 + 32) = _Q1;
  *(_OWORD *)(a5 + 48) = xmmword_1B30503B0;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_OWORD *)(a5 + 80) = _Q1;
  v16 = this + 46;
  v26 = *a4;
  if (OZFxPlugSharedBase::isPixelIndependent(this + 46, &v26) && !*((_BYTE *)this + 584))
  {
    OZFxFilter::getAgentImageSpaceBounds((OZFxFilter *)this, (__n128 *)a2, a3, (uint64_t)&v24);
    result = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v24, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    v19 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v24, v25)))), result);
    *(int32x2_t *)a5 = result;
    *(int32x2_t *)(a5 + 8) = v19;
    v20.i64[0] = result.i32[0];
    v20.i64[1] = result.i32[1];
    v21 = vcvtq_f64_s64(v20);
    v20.i64[0] = v19.i32[0];
    v20.i64[1] = v19.i32[1];
    v22 = vcvtq_f64_s64(v20);
    *(float64x2_t *)(a5 + 16) = v21;
    *(float64x2_t *)(a5 + 32) = v22;
    *(int32x2_t *)(a5 + 48) = result;
    *(int32x2_t *)(a5 + 56) = v19;
    *(float64x2_t *)(a5 + 64) = v21;
    *(float64x2_t *)(a5 + 80) = v22;
  }
  else
  {
    LiAgent::getBoundary(a2, (uint64_t)&v24);
    v17 = v25;
    *v10 = v24;
    v10[1] = v17;
    v23 = *a4;
    if (OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(v16, &v23))
    {
      OZFxFilter::getSceneDimensionsBounds((uint64_t)this, a2, a5, a3);
    }
    else
    {
      OZFxFilter::getInputPixelBoundsFromImageBounds((uint64_t)this, (uint64_t)a2, v10, a5);
      if (*(double *)(a5 + 32) < 1.0)
        *(_QWORD *)(a5 + 32) = 0x3FF0000000000000;
      if (*(double *)(a5 + 40) < 1.0)
        *(_QWORD *)(a5 + 40) = 0x3FF0000000000000;
      OZFxFilter::getOutputPixelBoundsFromImageBounds((uint64_t)this, *((double **)a2 + 20), (uint64_t)a3, a5);
    }
  }
  return result;
}

void sub_1B2F2BEE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14)
{
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;

  __cxa_begin_catch(a1);
  v16 = **(_QWORD **)(v14 + 48);
  if (v16)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v16 + 280))(&a13);
    v17 = a14;
    *v15 = a13;
    v15[1] = v17;
  }
  __cxa_end_catch();
  JUMPOUT(0x1B2F2BDCCLL);
}

void sub_1B2F2BF18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::getInputPixelBoundsFromImageBounds(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4)
{
  int32x2_t v6;
  int32x2_t v7;
  int64x2_t v8;
  float64x2_t v9;
  uint64_t result;
  int32x2_t v11;
  int32x2_t v12;
  int32x4_t v13;
  int32x4_t v14;
  _BYTE v15[20];
  float64x2_t v16;
  float64x2_t v17;

  v6 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(*a3, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  v7 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(*a3, a3[1])))), v6);
  *(int32x2_t *)a4 = v6;
  *(int32x2_t *)(a4 + 8) = v7;
  v8.i64[0] = v6.i32[0];
  v8.i64[1] = v6.i32[1];
  v9 = vcvtq_f64_s64(v8);
  v8.i64[0] = v7.i32[0];
  v8.i64[1] = v7.i32[1];
  v16 = v9;
  v17 = vcvtq_f64_s64(v8);
  result = PCMatrix44Tmpl<double>::transformRect<double>(*(double **)(a2 + 160), v16.f64, (uint64_t)&v16);
  if ((result & 1) != 0)
  {
    v11 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v16, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    v12 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v16, v17)))), v11);
    *(int32x2_t *)a4 = v11;
    *(int32x2_t *)(a4 + 8) = v12;
  }
  else
  {
    result = LiAgent::getDOD(a2, (uint64_t)v15);
    if (v15[16])
    {
      v13 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(a4 + 16)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(a4 + 32)));
    }
    else
    {
      result = LiAgent::getDOD(a2, (uint64_t)&v14);
      v13 = v14;
    }
    *(int32x4_t *)a4 = v13;
  }
  return result;
}

void sub_1B2F2C044(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  LiAgent *v3;
  int v4;

  if (a2 == 1)
  {
    v4 = __cxa_begin_catch(exception_object);
    OZFxFilter::fromDODXFormToSource(v4, v3, v2);
    __cxa_end_catch();
    JUMPOUT(0x1B2F2C030);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t OZFxFilter::fromDODXFormToSource(int a1, LiAgent *this, uint64_t a3)
{
  int64x2_t v5;
  uint64_t v6;
  int32x2_t result;
  uint64_t v8;
  int64x2_t v9;
  float64x2_t v10;
  int32x2_t v11;
  double v12[16];

  LiAgent::getDOD((uint64_t)this, (uint64_t)v12);
  *(_OWORD *)a3 = *(_OWORD *)v12;
  v5.i64[0] = (int)*(_QWORD *)a3;
  v5.i64[1] = (int)HIDWORD(*(_QWORD *)a3);
  *(float64x2_t *)(a3 + 16) = vcvtq_f64_s64(v5);
  v6 = *(_QWORD *)(a3 + 8);
  v5.i64[0] = (int)v6;
  v5.i64[1] = SHIDWORD(v6);
  *(float64x2_t *)(a3 + 32) = vcvtq_f64_s64(v5);
  LiAgent::getInversePixelTransform(this, 0.0, (uint64_t)v12);
  if (!PCMatrix44Tmpl<double>::transformRect<double>(v12, (double *)(a3 + 16), a3 + 16))
  {
    v8 = *(_QWORD *)(a3 + 8);
    v9.i64[0] = (int)*(_QWORD *)a3;
    v9.i64[1] = (int)HIDWORD(*(_QWORD *)a3);
    v10 = vcvtq_f64_s64(v9);
    v9.i64[0] = (int)v8;
    v9.i64[1] = SHIDWORD(v8);
    v11 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v10, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    result = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v10, vcvtq_f64_s64(v9))))), v11);
    *(int32x2_t *)a3 = v11;
    *(int32x2_t *)(a3 + 8) = result;
  }
  return result;
}

void OZFxFilter::prepareHandlersForRendering(uint64_t a1, const LiAgent *a2, const PCSharedCount *a3, CMTime *a4, uint64_t a5, uint64_t a6)
{
  OZFxPlugSharedBase::prepareHandlersForRendering((id *)(a1 + 368), a2, a3, a4, a5, a6);
}

double OZFxFilter::getRenderScale@<D0>(OZFxFilter *this@<X0>, const LiAgent *a2@<X1>, const OZRenderParams *a3@<X2>, __n128 *a4@<X8>)
{
  double result;
  __n128 v9;
  uint64_t v10;

  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  if (!OZFxFilter::isAnyKindOfText(this)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this)+ 8)+ 8), (int32x4_t)xmmword_1B355CCA0)))) & 1) != 0&& (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this)+ 8)+ 8), (int32x4_t)xmmword_1B3561450)))) & 1) != 0&& !OZFxFilter::isGroup(this))
  {
    OZRenderParams::getResolution(a3, &v9);
  }
  else
  {
    v9 = 0uLL;
    v10 = 0;
    if (!OZFxPlug_GetScale((uint64_t)a2, (uint64_t)&v9))
      return result;
  }
  result = v9.n128_f64[0];
  *a4 = v9;
  return result;
}

BOOL OZFxFilter::isAnyKindOfText(OZFxFilter *this)
{
  const OZSceneNode *v3;

  if ((OZFxFilter::isText(this) & 1) != 0)
    return 1;
  v3 = (const OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this);
  return OZFxPlug_IsCloneTextSceneNode(v3);
}

const void *OZFxFilter::isGroup(OZFxFilter *this)
{
  const void *result;

  result = (const void *)(*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this);
  if (result)
  return result;
}

uint64_t OZFxFilter::initialRescaleInput(OZFxFilter *this, LiAgent *a2)
{
  OZSceneNode *v4;
  OZSceneNode *v5;
  _BOOL4 Scale;
  _BOOL4 v7;
  uint64_t result;
  double v9;
  double v10;
  double v11[2];
  double v12;
  double v13;
  uint64_t v14;

  v4 = (OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 248))(this);
  if (!OZFxPlug_IsEmitter(v4))
    return 1;
  v5 = (OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 248))(this);
  if ((OZFxPlug_EmitterThatNeedsResampling(v5) & 1) != 0)
    return 1;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0;
  Scale = OZFxPlug_GetScale((uint64_t)a2, (uint64_t)&v12);
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v7 = Scale;
  result = 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7)
  {
    v9 = 1.0 / v12;
    if (v12 <= 2.22044605e-16)
      v9 = 4.50359963e15;
    if (v13 <= 2.22044605e-16)
      v10 = 4.50359963e15;
    else
      v10 = 1.0 / v13;
    v11[0] = v9;
    v11[1] = v10;
    OZFxFilter::rescaleInput(0, (uint64_t)a2, v11);
    return 1;
  }
  return result;
}

uint64_t OZFxFilter::shouldAgentUseSourcePixelSpace(OZFxFilter *this, const LiAgent *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)OZFxPlugSharedBase::pluginProperties((OZFxFilter *)((char *)this + 368));
  if (v3)
  {
    v4 = (void *)objc_msgSend(v3, "objectForKey:", CFSTR("UseSourcePixelSpace"));
    if (v4)
      return objc_msgSend(v4, "BOOLValue");
  }
  return *((int *)a2 + 9) < 4 && *((_DWORD *)a2 + 10) != 2;
}

uint64_t OZFxFilter::adjustAgent(OZFxFilter *this, LiAgent *a2, __int128 *a3)
{
  __int128 v5;
  OZFxPlugSharedBase *v6;
  uint64_t v7;
  void *v8;
  _OWORD v10[3];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v14 = 0;
  v5 = a3[1];
  v11 = *a3;
  v12 = v5;
  v13 = a3[2];
  v6 = (OZFxFilter *)((char *)this + 368);
  v7 = 0;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 46) + 320))((char *)this + 368))
  {
    OZFxPlugSharedBase::restartPluginXPCIfNecessary(v6);
    v8 = (void *)*((_QWORD *)this + 49);
    v10[0] = v11;
    v10[1] = v12;
    v10[2] = v13;
    objc_msgSend(v8, "getEdgeMode:withInfo:", &v14, v10);
    if (v14 == 1)
    {
      *((_DWORD *)a2 + 8) = 3;
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
  }
  if (OZFxFilter::shouldAgentUseSourcePixelSpace(this, a2))
  {
    v7 = 1;
    LiRenderingTechnology::setEnableMetalRendering((uint64_t)a2, 1);
  }
  return v7;
}

uint64_t OZFxFilter::doCenter(OZFxFilter *this, const LiAgent *a2, CMTime *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const OZSceneNode *v10;
  uint64_t result;

  v5 = (*(uint64_t (**)(OZFxFilter *, const LiAgent *, CMTime *))(*(_QWORD *)this + 256))(this, a2, a3);
  if (v5
    && (v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5)) != 0
    && (v7 = *(_QWORD *)(v6 + 1584)) != 0)
  {
    v8 = *(_DWORD *)(v7 + 260);
    v9 = *(_DWORD *)(v7 + 264);
  }
  else
  {
    v9 = 13;
    v8 = 5;
  }
  v10 = (const OZSceneNode *)(*(uint64_t (**)(OZFxFilter *))(*(_QWORD *)this + 256))(this);
  LODWORD(result) = OZFxPlug_IsSpecialLayer(v10, v8, v9);
  if (*((int *)a2 + 9) < 3)
    return result;
  else
    return 0;
}

uint64_t OZFxFilter::render(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[3];
  __int128 v31;
  uint64_t v32;

  v14 = a1 + 368;
  v31 = *(_OWORD *)a5;
  v32 = *(_QWORD *)(a5 + 16);
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 368) + 232))(a1 + 368, &v31))
    v22 = 1;
  else
    v22 = a3 == 0;
  if (!v22)
  {
    PCPrint("File %s, line %d should not have been reached:\n\t", v15, v16, v17, v18, v19, v20, v21, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
    pcAbortImpl();
  }
  v23 = *(void **)(a1 + 392);
  v24 = *(_QWORD *)(a5 + 272);
  v25 = a9[1];
  v30[0] = *a9;
  v30[1] = v25;
  v30[2] = a9[2];
  v26 = OZFxPlug_CallRender(a1, v23, v24, a8, a7, v30, a5);
  v28 = *(_OWORD *)a5;
  v29 = *(_QWORD *)(a5 + 16);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 368) + 472))(v14, &v28);
  return v26;
}

uint64_t OZFxFilter::heliumMix@<X0>(OZFxFilter *this@<X0>, const LiAgent *a2@<X1>, float a3@<S0>, FxImage *a4@<X3>, FxImage *a5@<X4>, CMTime *a6@<X5>, int a7@<W2>, HGLegacyBlend **a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t ActualColorSpace;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  HGLegacyBlend *v22;
  uint64_t v23;
  HGLegacyBlend *v24;
  uint64_t result;
  uint64_t v26;
  _BYTE v27[128];
  CMTime v28;
  __int128 v29;
  CMTimeEpoch epoch;
  uint64_t v31;

  if (!a4)
  {
    v31 = 0;
    if (a5)
      goto LABEL_3;
LABEL_7:
    *a8 = 0;
    goto LABEL_8;
  }
  -[FxImage heliumRef](a4, "heliumRef");
  if (!a5)
    goto LABEL_7;
LABEL_3:
  -[FxImage heliumRef](a5, "heliumRef");
  if (!a7 || !*a8)
  {
LABEL_8:
    v15 = -[FxImage width](a5, "width");
    v16 = -[FxImage height](a5, "height");
    ActualColorSpace = LiAgent::getActualColorSpace(a2);
    OZFxPlug_GenerateFailedRenderNode((uint64_t)this, v15, v16, ActualColorSpace, (uint64_t)a8, v18, v19, v20);
  }
  if (a3 < 1.0)
  {
    v21 = (id *)((char *)this + 368);
    v29 = *(_OWORD *)&a6->value;
    epoch = a6->epoch;
    if (((*(uint64_t (**)(char *, __int128 *))(*((_QWORD *)this + 46) + 112))((char *)this + 368, &v29) & 1) == 0)
    {
      v22 = (HGLegacyBlend *)HGObject::operator new(0x1C0uLL);
      HGLegacyBlend::HGLegacyBlend(v22);
      (*(void (**)(HGLegacyBlend *, uint64_t, HGLegacyBlend *))(*(_QWORD *)v22 + 120))(v22, 1, *a8);
      v23 = v31;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v28 = *a6;
      if (OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(v21, &v28))
      {
        LiAgent::getObjectToFilmTransform(a2, (uint64_t)v27);
        LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)v27, &v31, &v26);
        if (v23 == v26)
        {
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        }
        else
        {
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          v23 = v26;
        }
      }
      (*(void (**)(HGLegacyBlend *, _QWORD, uint64_t))(*(_QWORD *)v22 + 120))(v22, 0, v23);
      (*(void (**)(HGLegacyBlend *, _QWORD, float, float, float, float))(*(_QWORD *)v22 + 96))(v22, 0, 8.0, 0.0, 0.0, 0.0);
      (*(void (**)(HGLegacyBlend *, uint64_t, float, float, float, float))(*(_QWORD *)v22 + 96))(v22, 1, a3, 0.0, 0.0, 0.0);
      v24 = *a8;
      if (*a8 != v22)
      {
        if (v24)
          (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v24 + 24))(v24);
        *a8 = v22;
        (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v22 + 16))(v22);
      }
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      (*(void (**)(HGLegacyBlend *))(*(_QWORD *)v22 + 24))(v22);
    }
  }
  result = v31;
  if (v31)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  return result;
}

void sub_1B2F2C934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (*v10)
    (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
  v15 = *(_QWORD *)(v13 - 88);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::mix@<X0>(uint64_t a1@<X0>, const LiAgent *a2@<X1>, CMTime *a3@<X3>, _QWORD *a4@<X4>, int a5@<W7>, HGLegacyBlend **a6@<X8>, FxImage *a7, FxImage *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  CMTime v23;
  __int128 v24;
  CMTimeEpoch epoch;
  double v26;

  v26 = 0.0;
  v13 = a1 + 368;
  objc_msgSend(*(id *)(a1 + 400), "_getFloatValue:fromParm:atTime:", &v26, 10001, *a4);
  v24 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 368) + 232))(v13, &v24))
  {
    PCPrint("File %s, line %d should not have been reached:\n\t", v14, v15, v16, v17, v18, v19, v20, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
    pcAbortImpl();
  }
  v21 = v26;
  v23 = *a3;
  return OZFxFilter::heliumMix((OZFxFilter *)a1, a2, v21, a7, a8, &v23, a5, a6);
}

uint64_t OZFxFilter::getHelium@<X0>(id *a1@<X0>, uint64_t a2@<X1>, LiImageSource **a3@<X2>, CMTime *a4@<X3>, int *a5@<X4>, HGNode **a6@<X8>)
{
  id *v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t HeliumRenderer;
  int v17;
  uint64_t v18;
  HGNode *v19;
  double v20;
  CMTimeValue value;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  HGNode *v28;
  OZSceneNode *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  CMTime *v34;
  float64x2_t v35;
  int v36;
  int v37;
  int v38;
  FxMatrix44 *v39;
  id v40;
  uint64_t v41;
  id v42;
  const FxColorDescription *ActualColorDescription;
  CMTimeValue v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  CMTime *v50;
  char v51;
  double v52;
  double v53;
  int v54;
  FxImage *v55;
  FxImage *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  int v67;
  unint64_t v68;
  BOOL v69;
  uint64_t i;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  CMTime *v80;
  uint64_t v81;
  uint64_t v82;
  CGColorSpace **v83;
  CGColorSpace *v84;
  CGColorSpace *v85;
  int v86;
  uint64_t v87;
  CGColorSpace **v88;
  CGColorSpace *v89;
  CGColorSpace *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  uint64_t result;
  __int16 v98;
  HGNode **v99;
  void *v100;
  CGColorSpace *v101[2];
  int v102;
  char v103;
  CMTime v104;
  __int128 v105;
  CMTimeEpoch v106;
  _BYTE v107[128];
  BOOL v108[128];
  BOOL v109[8];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  BOOL v119[8];
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  CMTimeEpoch v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[16];
  char v134[72];
  CGColorSpace *v135[2];
  int v136;
  char v137;
  uint64_t v138;
  unsigned int *v139;
  std::__shared_weak_count *v140;
  int v141;
  FxColorDescription v142;
  FxColorDescription space;
  _OWORD v144[3];
  CMTime v145;
  _OWORD v146[3];
  __int16 v147;
  CMTime v148;
  CMTime v149;
  _OWORD v150[4];
  uint64_t v151;
  CMTime v152;
  CMTime v153;
  __int128 v154;
  CMTimeEpoch epoch;
  CMTime v156;
  float64x2_t v157[3];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  CMTimeValue v161;
  CMTime v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char v193[8];
  PCMutex *v194;
  char v195;
  uint64_t v196[3];

  v196[0] = 0;
  v12 = a1 + 46;
  v13 = (*((uint64_t (**)(id *))a1[46] + 11))(a1 + 46);
  v194 = (PCMutex *)(a1 + 92);
  v195 = 0;
  if ((v13 & 1) == 0)
  {
    PCMutex::lock((PCMutex *)(a1 + 92));
    v195 = 1;
  }
  OZFxPlugRenderContextSentinel::OZFxPlugRenderContextSentinel(v193, v12, a5, 1);
  v14 = a1[50];
  objc_msgSend(v14, "setIsRendering:", 1);
  if ((OZFxFilter::initialRescaleInput((OZFxFilter *)a1, (LiAgent *)a2) & 1) != 0)
  {
    v192 = 0;
    v192 = objc_msgSend(a1[50], "figTimeToFxTime:withConversionData:", a4, 0);
    v15 = (*((uint64_t (**)(id *))*a1 + 31))(a1);
    v100 = v14;
    OZFxFilter::getRenderScale((OZFxFilter *)a1, (const LiAgent *)a2, (const OZRenderParams *)a5, (__n128 *)&v179);
    HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)HeliumRenderer + 304))(HeliumRenderer))
      v17 = 32;
    else
      v17 = 16;
    OZFxPlugSharedBase::CalculateRenderInfo((int)v12, v15, &v192, &v179, v17, a5[123], &v189);
    v188 = 0x3FF0000000000000;
    v185 = 0x3FF0000000000000;
    v182 = 0x3FF0000000000000;
    v179 = 0x3FF0000000000000;
    v180 = 0u;
    v181 = 0u;
    v183 = 0u;
    v184 = 0u;
    v186 = 0u;
    v187 = 0u;
    v178 = 0x3FF0000000000000;
    v175 = 0x3FF0000000000000;
    v172 = 0x3FF0000000000000;
    v169 = 0x3FF0000000000000;
    v170 = 0u;
    v171 = 0u;
    v173 = 0u;
    v174 = 0u;
    v176 = 0u;
    v177 = 0u;
    if (*(_DWORD *)(a2 + 40) == 2)
    {
      v18 = **(_QWORD **)(a2 + 48);
      if (v18)
      {
        (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)v18 + 176))(&v163);
        PCMatrix44Tmpl<double>::rightMult((uint64_t)&v179, v163.f64);
      }
    }
    else
    {
      (*((void (**)(id *, uint64_t *))*v12 + 43))(v12, &v179);
    }
    OZFxFilter::adjustAgent((OZFxFilter *)a1, (LiAgent *)a2, &v189);
    v162 = *a4;
    if (OZFxPlugSharedBase::isPixelIndependent(v12, &v162) && (LiAgent::haveROI((LiAgent *)a2) & 1) == 0)
      *(_QWORD *)&v20 = LiAgent::passROI((LiAgent *)a2).n128_u64[0];
    v161 = 0;
    ProGL::CurrentContextSentry::CurrentContextSentry((ProGL::CurrentContextSentry *)&v163, (EAGLContext *)objc_msgSend(MEMORY[0x1E0CD0958], "currentContext", v20));
    LiAgent::getHelium((LiAgent *)a2, *a3, (HGNode **)&v148);
    value = v148.value;
    if (v161 == v148.value)
    {
      if (v161)
        (*(void (**)(void))(*(_QWORD *)v161 + 24))();
    }
    else
    {
      if (v161)
      {
        (*(void (**)(void))(*(_QWORD *)v161 + 24))();
        value = v148.value;
      }
      v161 = value;
    }
    ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)&v163);
    LiAgent::getDOD(a2, (uint64_t)&v163);
    if (LOBYTE(v164.f64[0]) || *(uint64_t *)((char *)v163.f64 + 4) > 0 && SHIDWORD(v163.f64[1]) > 0)
    {
      v156 = *a4;
      v22.n128_u64[0] = (unint64_t)OZFxFilter::getBoundingRectangles(a1, (LiAgent *)a2, (const OZRenderParams *)a5, &v156, (uint64_t)v157);
      if (DWORD2(v158) && HIDWORD(v158))
      {
        v154 = *(_OWORD *)&a4->value;
        epoch = a4->epoch;
        if ((*((unsigned int (**)(id *, __int128 *))*v12 + 15))(v12, &v154))
        {
          v153 = *a4;
          v25.i64[0] = SLODWORD(v157[0].f64[0]);
          v25.i64[1] = SHIDWORD(v157[0].f64[0]);
          v26 = vcvtq_f64_s64(v25);
          v25.i64[0] = SLODWORD(v157[0].f64[1]);
          v25.i64[1] = SHIDWORD(v157[0].f64[1]);
          v163 = v26;
          v164 = vcvtq_f64_s64(v25);
          if (OZFxFilter::rescaleInput(a1, a2, &v153, v23, v24, (uint64_t)&v163))
          {
            LiAgent::getHelium((LiAgent *)a2, *a3, (HGNode **)&v163);
            v27 = *(_QWORD *)&v163.f64[0];
            if (v161 == *(_QWORD *)&v163.f64[0])
            {
              if (v161)
                (*(void (**)(void))(*(_QWORD *)v161 + 24))();
            }
            else
            {
              if (v161)
              {
                (*(void (**)(void))(*(_QWORD *)v161 + 24))();
                v27 = *(_QWORD *)&v163.f64[0];
              }
              v161 = v27;
            }
            v152 = *a4;
            OZFxFilter::getBoundingRectangles(a1, (LiAgent *)a2, (const OZRenderParams *)a5, &v152, (uint64_t)&v163);
            v157[2] = v165;
            v158 = v166;
            v159 = v167;
            v160 = v168;
            v157[0] = v163;
            v157[1] = v164;
          }
        }
        if (*(_BYTE *)(a2 + 44))
          OZFxPlug_GetScale((const LiAgent *)a2, (double *)&v190 + 1, (double *)&v191);
        v99 = a6;
        LiAgent::getRenderDevice((LiRenderParameters **)a2);
        v151 = 0;
        memset(v150, 0, sizeof(v150));
        v29 = (OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 31))(a1);
        v30 = LODWORD(v157[0].f64[1]);
        v31 = HIDWORD(v157[0].f64[1]);
        v32 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 304))(v32))
          v33 = 32;
        else
          v33 = 16;
        v149 = *a4;
        OZFxPlug_CalculateImageInfo(v12, v29, v30, v31, v33, 1, (uint64_t)v150, &v149);
        if (OZFxFilter::doCenter((OZFxFilter *)a1, (const LiAgent *)a2, v34))
        {
          v36 = -(LODWORD(v157[0].f64[0]) + SLODWORD(v157[0].f64[1]) / 2);
          if (v157[0].f64[1] >= 0.0)
            v37 = HIDWORD(v157[0].f64[1]);
          else
            v37 = HIDWORD(v157[0].f64[1]) + 1;
          v38 = -(HIDWORD(v157[0].f64[0]) + (v37 >> 1));
          v35.f64[0] = (double)v36;
          v35 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v169, v35, (double)v38, 0.0);
        }
        else
        {
          v36 = 0;
          v38 = 0;
        }
        (*((void (**)(id *, uint64_t, LiImageSource **, int *, uint64_t *, uint64_t *, float64x2_t))*a1 + 106))(a1, a2, a3, a5, &v179, &v169, v35);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v169, *(__int128 **)(a2 + 160), (uint64_t)&v148);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v148, (__int128 *)&v179, (uint64_t)&v163);
        v39 = FxMatrixFromPCMatrix((uint64_t)&v163);
        OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)v12);
        v147 = 0;
        v40 = a1[49];
        v146[0] = v189;
        v146[1] = v190;
        v146[2] = v191;
        OZFxPlug_CallFrameSetup((uint64_t)a1, v40, v146, (uint64_t)v150, (_BYTE *)&v147 + 1, &v147);
        v148 = *a4;
        v119[0] = HIBYTE(v147);
        v109[0] = v147;
        OZFxPlugSharedBase::getBestRenderingBehavior((OZFxPlugSharedBase *)v12, (LiRenderParameters **)a2, v119, v109, &v148);
        HIBYTE(v147) = v119[0];
        LOBYTE(v147) = v109[0];
        v145 = *a4;
        if (OZFxPlugSharedBase::isPixelIndependent(v12, &v145))
        {
          if (!*a3)
            throw_PCNullPointerException(1);
          v41 = (*(uint64_t (**)(LiImageSource *))(*(_QWORD *)*a3 + 32))(*a3);
          (*((void (**)(id *, uint64_t))*v12 + 28))(v12, v41);
        }
        else
        {
          LOBYTE(v148.value) = 0;
          if ((*((unsigned int (**)(id *))*v12 + 41))(v12))
          {
            v42 = a1[49];
            v144[0] = v189;
            v144[1] = v190;
            v144[2] = v191;
            objc_msgSend(v42, "filteredEdges:withInfo:", &v148, v144);
          }
          (*((void (**)(id *, _QWORD))*v12 + 28))(v12, LOBYTE(v148.value));
        }
        OZFxPlugSharedBase::getPluginColorDescription(v12, (const LiAgent *)a2, &space);
        ActualColorDescription = (const FxColorDescription *)LiAgent::getActualColorDescription((LiAgent *)a2);
        v142._pcColorDesc._colorSpaceRef._obj = space._pcColorDesc._colorSpaceRef._obj;
        if (space._pcColorDesc._colorSpaceRef._obj)
          PCCFRefTraits<CGColorSpace *>::retain(space._pcColorDesc._colorSpaceRef._obj);
        *(_QWORD *)&v142._pcColorDesc._dynamicRange = *(_QWORD *)&space._pcColorDesc._dynamicRange;
        v142._pcColorDesc._toneMapMethod._gain = space._pcColorDesc._toneMapMethod._gain;
        v142._isPremultiplied = space._isPremultiplied;
        OZFxPlug_ConformToProcessingDescription(&v142, &v161, ActualColorDescription, &v148.value);
        v44 = v148.value;
        if (v161 == v148.value)
        {
          if (v161)
            (*(void (**)(void))(*(_QWORD *)v161 + 24))();
        }
        else
        {
          if (v161)
          {
            (*(void (**)(void))(*(_QWORD *)v161 + 24))();
            v44 = v148.value;
          }
          v161 = v44;
          v148.value = 0;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(&v142._pcColorDesc._colorSpaceRef._obj);
        v45 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 304))(v45))
          v46 = 32;
        else
          v46 = 16;
        v141 = v46;
        v140 = 0;
        v139 = 0;
        v138 = 0;
        v47 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 304))(v47);
        v49 = HIBYTE(v147);
        v51 = OZFxFilter::doCenter((OZFxFilter *)a1, (const LiAgent *)a2, v50);
        v52 = (double)v36;
        v53 = (double)v38;
        if (v48)
          v54 = 32;
        else
          v54 = 16;
        *(double *)&v148.value = (double)v36;
        *(double *)&v148.timescale = (double)v38;
        HIBYTE(v98) = v51;
        LOBYTE(v98) = v49 != 0;
        v55 = OZFxFilter::createInputFxImage((uint64_t)a1, (const LiAgent *)a2, &v139, (unsigned int *)&v141, (uint64_t)v150, (uint64_t)&v189, &v161, &v138, v157, v54, v98, &v148.value, (uint64_t)a5);
        -[FxImage setPixelTransform:](v55, "setPixelTransform:", v39);
        if (v55)
        {
          v56 = OZFxFilter::createOutputFxImage(a1, &v189, (uint64_t)v134, (LiRenderParameters **)a2, (uint64_t)v157, v141, HIBYTE(v147), (CMTime *)a5);
          -[FxImage setPixelTransform:](v56, "setPixelTransform:", v39);
          ProGL::CurrentContextSentry::CurrentContextSentry((ProGL::CurrentContextSentry *)v133);
          v132 = 0;
          v131 = 0;
          v129 = *(_OWORD *)&a4->value;
          v130 = a4->epoch;
          v57 = (*((uint64_t (**)(id *, __int128 *))*v12 + 29))(v12, &v129);
          v65 = v100;
          if (HIBYTE(v147))
            v66 = v57;
          else
            v66 = 1;
          if ((v66 & 1) == 0)
          {
            PCPrint("File %s, line %d should not have been reached:\n\t", v58, v59, v60, v61, v62, v63, v64, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
            pcAbortImpl();
          }
          v67 = OZFxFilter::render((uint64_t)a1, v58, HIBYTE(v147) != 0, v60, (uint64_t)a5, v62, (uint64_t)v55, (uint64_t)v56, &v189);
          FxMatrixToPCMatrix((FxMatrix44 *)-[FxImage pixelTransform](v56, "pixelTransform"), (uint64_t)&v148);
          v68 = 0;
          v69 = 0;
          while (2)
          {
            for (i = 0; i != 3; ++i)
            {
              if (vabdd_f64(*((double *)&v148.value + 4 * dword_1B3561490[v68] + dword_1B3561490[i]), v163.f64[4 * dword_1B3561490[v68] + dword_1B3561490[i]]) >= 0.0000001)
              {
                if (!v69)
                {
                  v128 = 0x3FF0000000000000;
                  v125 = 0x3FF0000000000000;
                  v122 = 0x3FF0000000000000;
                  *(double *)v119 = 1.0;
                  v120 = 0u;
                  v121 = 0u;
                  v123 = 0u;
                  v124 = 0u;
                  v126 = 0u;
                  v127 = 0u;
                  v118 = 0x3FF0000000000000;
                  v115 = 0x3FF0000000000000;
                  v112 = 0x3FF0000000000000;
                  *(_QWORD *)v109 = 0x3FF0000000000000;
                  v110 = 0u;
                  v111 = 0u;
                  v113 = 0u;
                  v114 = 0u;
                  v116 = 0u;
                  v117 = 0u;
                  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v119, (double *)&v179, 0.0)
                    && PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v109, (double *)&v169, 0.0))
                  {
                    PCMatrix44Tmpl<double>::operator*((uint64_t)v109, (__int128 *)&v148.value, (uint64_t)v107);
                    PCMatrix44Tmpl<double>::operator*((uint64_t)v107, (__int128 *)v119, (uint64_t)v108);
                    LiAgent::setPixelTransform(a2, (uint64_t)v108);
                  }
                }
                goto LABEL_85;
              }
            }
            v69 = v68++ > 1;
            if (v68 != 3)
              continue;
            break;
          }
LABEL_85:
          v105 = *(_OWORD *)&a4->value;
          v106 = a4->epoch;
          v71 = (*((uint64_t (**)(id *, __int128 *))*v12 + 29))(v12, &v105);
          if (HIBYTE(v147))
            v79 = v71;
          else
            v79 = 1;
          if ((v79 & 1) == 0)
          {
            PCPrint("File %s, line %d should not have been reached:\n\t", v72, v73, v74, v75, v76, v77, v78, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxFilter.mm");
            pcAbortImpl();
          }
          v104 = *a4;
          OZFxFilter::mix((uint64_t)a1, (const LiAgent *)a2, &v104, &v192, v67, (HGLegacyBlend **)v119, v55, v56);
          v81 = *(_QWORD *)v119;
          if (v196[0] == *(_QWORD *)v119)
          {
            if (v196[0])
              (*(void (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
          }
          else
          {
            if (v196[0])
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
              v81 = *(_QWORD *)v119;
            }
            v196[0] = v81;
          }
          if (OZFxFilter::doCenter((OZFxFilter *)a1, (const LiAgent *)a2, v80))
          {
            v86 = a5[123];
            *(double *)v119 = -v52;
            *(double *)&v120 = -v53;
            OZFxFilter::offsetNode(v196, (uint64_t *)v119, v86, v109);
            v87 = *(_QWORD *)v109;
            if (v196[0] == *(_QWORD *)v109)
            {
              if (v196[0])
                (*(void (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
            }
            else
            {
              if (v196[0])
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
                v87 = *(_QWORD *)v109;
              }
              v196[0] = v87;
            }
          }
          v88 = LiAgent::getActualColorDescription((LiAgent *)a2);
          v89 = *v88;
          v101[0] = v89;
          if (v89)
            PCCFRefTraits<CGColorSpace *>::retain(v89);
          v90 = v88[1];
          v102 = *((_DWORD *)v88 + 4);
          v101[1] = v90;
          v103 = *((_BYTE *)v88 + 24);
          OZFxPlug_ConformFromProcessingDescription(v119, v196, &space, v101);
          v91 = *(_QWORD *)v119;
          if (v196[0] == *(_QWORD *)v119)
          {
            if (v196[0])
              (*(void (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
          }
          else
          {
            if (v196[0])
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
              v91 = *(_QWORD *)v119;
            }
            v196[0] = v91;
            *(double *)v119 = 0.0;
          }
          PCCFRef<CGColorSpace *>::~PCCFRef(v101);
          objc_msgSend(v100, "clearImageList");
          objc_msgSend(a1[51], "clearImageList");
          if (-[FxImage imageType](v55, "imageType") == 1 && (-[FxImage _ownsData](v55, "_ownsData") & 1) == 0)
          {
            v92 = -[FxImage dataPtr](v55, "dataPtr");
            if (v92)
              MEMORY[0x1B5E29170](v92, 0x1000C4077774924);
          }
          if (-[FxImage imageType](v56, "imageType") == 1 && (-[FxImage _ownsData](v56, "_ownsData") & 1) == 0)
          {
            v93 = -[FxImage dataPtr](v56, "dataPtr");
            if (v93)
              MEMORY[0x1B5E2914C](v93, 0x1000C8077774924);
          }

          ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)v133);
        }
        else
        {
          objc_msgSend(a1[49], "frameCleanup");
          v82 = v161;
          if (v196[0] != v161)
          {
            if (v196[0])
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
              v82 = v161;
            }
            v196[0] = v82;
            if (v82)
              (*(void (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82);
          }
          objc_msgSend(v100, "setIsRendering:", 0);
          v83 = LiAgent::getActualColorDescription((LiAgent *)a2);
          v84 = *v83;
          v135[0] = v84;
          if (v84)
            PCCFRefTraits<CGColorSpace *>::retain(v84);
          v85 = v83[1];
          v136 = *((_DWORD *)v83 + 4);
          v135[1] = v85;
          v137 = *((_BYTE *)v83 + 24);
          OZFxPlug_ConformFromProcessingDescription(v99, v196, &space, v135);
          PCCFRef<CGColorSpace *>::~PCCFRef(v135);
          v65 = v100;
        }
        if (v138)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138);
        v94 = v140;
        if (v140)
        {
          p_shared_owners = (unint64_t *)&v140->__shared_owners_;
          do
            v96 = __ldaxr(p_shared_owners);
          while (__stlxr(v96 - 1, p_shared_owners));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (v55)
        {
          objc_msgSend(a1[49], "frameCleanup");
          objc_msgSend(v65, "setIsRendering:", 0);
          *v99 = (HGNode *)v196[0];
          v196[0] = 0;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(&space._pcColorDesc._colorSpaceRef._obj);
      }
      else
      {
        *a6 = (HGNode *)v161;
        v161 = 0;
      }
    }
    else
    {
      objc_msgSend(v14, "setIsRendering:", 0);
      v28 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v28);
      *a6 = v28;
    }
    if (v161)
      (*(void (**)(CMTimeValue, __n128))(*(_QWORD *)v161 + 24))(v161, v22);
  }
  else
  {
    objc_msgSend(v14, "setIsRendering:", 0);
    v19 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v19);
    *a6 = v19;
  }
  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)v193);
  if (v194 && v195)
    PCMutex::unlock(v194);
  result = v196[0];
  if (v196[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v196[0] + 24))(v196[0]);
  return result;
}

void sub_1B2F2D958(void *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  ProGL::CurrentContextSentry::~CurrentContextSentry((ProGL::CurrentContextSentry *)&STACK[0x2C8]);
  if (STACK[0x340])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x340] + 24))(STACK[0x340]);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x348]);
  __cxa_begin_catch(a1);
  objc_msgSend(*(id *)(v1 + 392), "frameCleanup");
  __cxa_rethrow();
}

void sub_1B2F2DBA0()
{
  JUMPOUT(0x1B2F2DBECLL);
}

void sub_1B2F2DBB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)(v1 - 144));
  PCLockSentry<PCMutex>::~PCLockSentry(v1 - 136);
  v3 = *(_QWORD *)(v1 - 120);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(a1);
}

void sub_1B2F2DBB8()
{
  __cxa_end_catch();
  JUMPOUT(0x1B2F2DBC0);
}

FxImage *OZFxFilter::createInputFxImage(uint64_t a1, const LiAgent *a2, unsigned int **a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, float64x2_t *a9, int a10, __int16 a11, uint64_t *a12, uint64_t a13)
{
  uint64_t v16;
  CGColorSpace *PluginColorSpace;
  uint64_t v18;
  FxImage *HeliumInputFxImage;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v29;
  uint64_t v30;

  *a4 = a10;
  v29 = *(_OWORD *)a13;
  v30 = *(_QWORD *)(a13 + 16);
  v16 = a1 + 368;
  PluginColorSpace = OZFxPlugSharedBase::getPluginColorSpace((id *)(a1 + 368), a2);
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 368) + 232))(v16, &v29))
  {
    HeliumInputFxImage = (FxImage *)OZFxFilter::createHeliumInputFxImage(a1, (uint64_t)a2, a5, a7, v18, a8, (uint64_t)a9, a10, SHIBYTE(a11), a12, a13);
    v20 = (_QWORD *)a6;
    if (!HeliumInputFxImage)
      return HeliumInputFxImage;
  }
  else
  {
    v20 = (_QWORD *)a6;
    HeliumInputFxImage = (FxImage *)OZFxFilter::createRawInputFxImage(0, (LiRenderParameters **)a2, a3, a4, a5, a6, a7, PluginColorSpace, a8, a9, a11, a12, a13);
    if (!HeliumInputFxImage)
      return HeliumInputFxImage;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    -[FxImage setIsInputImage:](HeliumInputFxImage, "setIsInputImage:", 1);
  OZFxFilter::setInputImageDOD((_QWORD *)a1, v21, v22, (unsigned int *)a9, HeliumInputFxImage, (__int128 *)a13);
  OZFxFilter::finalizeImage((id *)a1, a2, HeliumInputFxImage, v20, (const OZRenderParams *)a13);
  return HeliumInputFxImage;
}

FxImage *OZFxFilter::createOutputFxImage(id *a1, _QWORD *a2, uint64_t a3, LiRenderParameters **this, uint64_t a5, int a6, int a7, CMTime *a8)
{
  OZSceneNode *v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  FxHeliumImage *v20;
  __int128 v21;
  __int128 v22;
  FxImage *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _OWORD v30[4];
  uint64_t v31;
  __int128 v32;
  CMTimeEpoch epoch;
  CMTime v34;
  _OWORD v35[4];
  uint64_t v36;

  LiAgent::getRenderDevice(this);
  v15 = (OZSceneNode *)(*((uint64_t (**)(id *))*a1 + 31))(a1);
  v16 = *(_DWORD *)(a5 + 56);
  v17 = *(_DWORD *)(a5 + 60);
  v34 = *a8;
  OZFxPlug_CalculateImageInfo(a1 + 46, v15, v16, v17, a6, a7, (uint64_t)v35, &v34);
  v18 = v35[3];
  *(_OWORD *)(a3 + 32) = v35[2];
  *(_OWORD *)(a3 + 48) = v18;
  *(_QWORD *)(a3 + 64) = v36;
  v19 = v35[1];
  *(_OWORD *)a3 = v35[0];
  *(_OWORD *)(a3 + 16) = v19;
  if (*(double *)(a3 + 64) == 0.0)
    *(_QWORD *)(a3 + 64) = 0x3FF0000000000000;
  v32 = *(_OWORD *)&a8->value;
  epoch = a8->epoch;
  if ((*((unsigned int (**)(id *, __int128 *))a1[46] + 29))(a1 + 46, &v32))
  {
    v20 = [FxHeliumImage alloc];
    v21 = *(_OWORD *)(a3 + 48);
    v30[2] = *(_OWORD *)(a3 + 32);
    v30[3] = v21;
    v31 = *(_QWORD *)(a3 + 64);
    v22 = *(_OWORD *)(a3 + 16);
    v30[0] = *(_OWORD *)a3;
    v30[1] = v22;
    v23 = -[FxHeliumImage initWithInfo:](v20, "initWithInfo:", v30);
  }
  else
  {
    v23 = 0;
  }
  -[FxImage setBounds:](v23, "setBounds:", *(double *)(a5 + 64) * *(double *)(a3 + 64), *(double *)(a5 + 72), *(double *)(a3 + 64) * *(double *)(a5 + 80), *(double *)(a5 + 88));
  v24 = *(_DWORD *)(a5 + 56);
  v25 = *(_DWORD *)(a5 + 60);
  if (v24 >= 0)
    v26 = *(_DWORD *)(a5 + 56);
  else
    v26 = v24 + 1;
  if (v25 >= 0)
    v27 = *(_DWORD *)(a5 + 60);
  else
    v27 = v25 + 1;
  -[FxImage setDod:](v23, "setDod:", -(v26 >> 1) | ((unint64_t)-(v27 >> 1) << 32), (v24 - (v26 >> 1)) | ((unint64_t)(v25 - (v27 >> 1)) << 32));
  OZFxFilter::finalizeImage(a1, (const LiAgent *)this, v23, a2, (const OZRenderParams *)a8);
  return v23;
}

uint64_t OZFxFilter::createNewLithiumNode@<X0>(OZFxFilter *this@<X0>, const OZRenderParams *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  OZLiHeFilter *v7;
  CMTime v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)a3 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 8));
  v9 = *(_OWORD *)a2;
  v10 = *((_QWORD *)a2 + 2);
  result = (*(uint64_t (**)(OZFxFilter *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 280))(this, &v9, 0, 1, 1);
  if ((_DWORD)result)
  {
    v8 = *(CMTime *)a2;
    result = OZFxFilter::needsToRender(this, &v8);
    if ((_DWORD)result)
    {
      v7 = (OZLiHeFilter *)operator new();
      OZLiHeFilter::OZLiHeFilter(v7, this, a2, 0);
      return (uint64_t)PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a3, v7);
    }
  }
  return result;
}

void sub_1B2F2E014(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x10E1C40E36231BCLL);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

FxImage *OZFxFilter::finalizeImage(id *this, const LiAgent *a2, FxImage *a3, _QWORD *a4, const OZRenderParams *a5)
{
  OZChannelBase *v10;
  int v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  int v16;
  uint64_t v17;
  __n128 v19;
  FxColorDescription v20;
  unint64_t PluginNCLC;
  int v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v10 = (OZChannelBase *)(this + 46);
  PluginNCLC = OZFxPlugSharedBase::getPluginNCLC(this + 46, a2);
  v22 = v11;
  -[FxImage setNCLCValue:](a3, "setNCLCValue:", FxConvertPCNCLCCodeToFxNCLCValue(&PluginNCLC));
  -[FxImage setColorSpace:](a3, "setColorSpace:", OZFxPlugSharedBase::getPluginColorSpace((id *)&v10->var0, a2));
  OZFxPlugSharedBase::getPluginColorDescription((id *)&v10->var0, a2, &v20);
  -[FxImage setDynamicRangeType:](a3, "setDynamicRangeType:", OZFxPlug_ConvertDynamicRangeType(&v20));
  OZFxPlugSharedBase::SetImageColorPrimaries((OZFxPlugSharedBase *)v10, a3, a2);
  OZFxFilter::getRenderScale((OZFxFilter *)this, a2, a5, &v19);
  -[FxImage setScaleX:](a3, "setScaleX:", v19.n128_f64[0]);
  -[FxImage setScaleY:](a3, "setScaleY:", v19.n128_f64[1]);
  v12 = this[3];
  if (v12)
  {
    if (v13)
    {
      v14 = v13;
      v15 = this[50];
      v25 = 0uLL;
      v26 = 0;
      if (v15)
        objc_msgSend(v15, "fxTimeToFigTime:withConversionData:", *a4, 0);
      v23 = v25;
      v24 = v26;
      (*(uint64_t (**)(void *, __int128 *, const OZRenderParams *))(*(_QWORD *)v14 + 2320))(v14, &v23, a5);
    }
  }
  -[FxImage setFieldOrder:](a3, "setFieldOrder:");
  -[FxImage setField:](a3, "setField:", (int)OZChannelBase::isObjectRef(v10));
  -[FxImage setPixelTransform:](a3, "setPixelTransform:", FxMatrixFromPCMatrix(*((_QWORD *)a2 + 20)));
  v16 = *((_DWORD *)a5 + 175);
  if (v16 == 2)
    v17 = 2;
  else
    v17 = v16 == 1;
  -[FxImage setEyeType:](a3, "setEyeType:", v17);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v20._pcColorDesc._colorSpaceRef._obj);
  return a3;
}

void sub_1B2F2E218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::setInputImageDOD(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5, __int128 *a6)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  unint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v25;
  uint64_t v26;
  double v27;
  double v28;
  __int128 v29;

  v9 = HGRectMake4i(*a4, a4[1], a4[2] + *a4, a4[3] + a4[1]);
  v11 = v10;
  if (HGRectIsInfinite(v9, v10))
  {
    v12 = (const void *)(*(uint64_t (**)(_QWORD *))(*a1 + 248))(a1);
    if (v12)
    {
      if (v13)
      {
        v27 = 0.0;
        v28 = 0.0;
        __asm { FMOV            V0.2D, #-1.0 }
        v29 = _Q0;
        (*(void (**)(void *, double *, __int128 *))(*(_QWORD *)v13 + 1488))(v13, &v27, a6);
        v9 = HGRectMake4i(vcvtmd_s64_f64(v27), vcvtmd_s64_f64(v28), vcvtpd_s64_f64(v27 + *(double *)&v29), vcvtpd_s64_f64(v28 + *((double *)&v29 + 1)));
        v11 = v19;
      }
    }
  }
  v25 = *a6;
  v26 = *((_QWORD *)a6 + 2);
  v20 = (*(uint64_t (**)(_QWORD *, __int128 *))(a1[46] + 232))(a1 + 46, &v25);
  if ((v20 & 1) != 0)
    v21 = v9;
  else
    v21 = 0;
  if ((v20 & 1) != 0)
    v22 = v9 & 0xFFFFFFFF00000000;
  else
    v22 = 0;
  if ((v20 & 1) != 0)
    v23 = v11;
  else
    v23 = (v11 - (v9 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v11 - v9);
  return objc_msgSend(a5, "setDod:", v22 | v21, v23);
}

void OZFxFilter::renderNode(int a1, LiRenderParameters **this, uint64_t *a3, CGColorSpace *a4, unsigned int *a5, uint64_t a6, int a7, uint64_t a8, _QWORD *a9, _DWORD *a10, _DWORD *a11)
{
  HGRenderer *HeliumRenderer;
  HGGLBlendingInfo *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  PCImage *v39[2];

  HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer(this);
  v19 = (LiRenderParameters *)((char *)this[6] + 80);
  if (a7)
  {
    *a10 = 2;
    v39[0] = 0;
    v39[1] = 0;
    PGHelium::renderNodeToTexture(HeliumRenderer, a3, (uint64_t)a5, a6, a4, v19, 1, &v38);
    v20 = v38;
    v38 = 0uLL;
    v21 = (std::__shared_weak_count *)v39[1];
    *(_OWORD *)v39 = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_19;
    }
  }
  else
  {
    *a10 = 1;
    *a11 = 32;
    *(_QWORD *)(a8 + 40) = 3;
    v39[0] = 0;
    v39[1] = 0;
    PGHelium::renderNodeToBitmap(HeliumRenderer, a3, a5, 16, (uint64_t)a4, v19, (uint64_t *)&v38);
    v27 = v38;
    v38 = 0uLL;
    v28 = (std::__shared_weak_count *)v39[1];
    *(_OWORD *)v39 = v27;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v26 = __ldaxr(v31);
      while (__stlxr(v26 - 1, v31));
LABEL_19:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  if (v39[0])
  {
    PCImage::setIsPremultiplied((uint64_t)v39[0], 1);
    if ((a7 & 1) == 0)
    {
      PCDynamicCast<PCBitmap,PCImage>((uint64_t)v39, &v38);
      PCBitmap::swizzleTo((_QWORD **)v38, 0);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](a9, (uint64_t *)v39);
  }
  v35 = (std::__shared_weak_count *)v39[1];
  if (v39[1])
  {
    v36 = (unint64_t *)((char *)v39[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1B2F2E5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

FxHeliumImage *OZFxFilter::createHeliumInputFxImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, int a8, char a9, uint64_t *a10, uint64_t a11)
{
  double v15;
  int32x2_t v16;
  __int128 v17;
  FxHeliumImage *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;

  v15 = *(double *)(a3 + 64);
  v16 = vmax_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x100000001);
  *(_QWORD *)&v17 = v16.u32[0];
  *((_QWORD *)&v17 + 1) = v16.u32[1];
  v26 = v17;
  v29 = v17;
  v30 = a8;
  v31 = xmmword_1B3561470;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  v35 = v15;
  v18 = -[FxHeliumImage initWithInfo:]([FxHeliumImage alloc], "initWithInfo:", &v29);
  -[FxImage setPixelTransform:](v18, "setPixelTransform:", FxMatrixFromPCMatrix(*(_QWORD *)(a2 + 160)));
  v19 = *a4;
  v28 = v19;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    if (a9)
    {
      OZFxFilter::offsetNode(&v28, a10, *(_DWORD *)(a11 + 492), &v27);
      v20 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v20 = v27;
        }
        v28 = v20;
      }
    }
    v21 = *(double *)(a7 + 32);
    v22 = *(double *)(a7 + 40);
    if (v21 < 1.0)
      v21 = 1.0;
    if (v22 < 1.0)
      v22 = 1.0;
    -[FxImage setBounds:](v18, "setBounds:", v15 * *(double *)(a7 + 16), *(double *)(a7 + 24), v15 * v21, v22, v26);
    v23 = *a6;
    v24 = v28;
    if (*a6 != v28)
    {
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(*a6);
        v24 = v28;
      }
      *a6 = v24;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    }
    -[FxHeliumImage setHeliumRef:](v18, "setHeliumRef:", &v28);
  }
  else
  {

    v18 = 0;
  }
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  return v18;
}

void sub_1B2F2E7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t OZFxFilter::offsetNode@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X3>, int a3@<W4>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t result;
  float v8[2];
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (*a1)
  {
    v4 = *a2;
    v5 = a2[1];
    v9[1] = 0;
    v9[2] = 0;
    v9[0] = 0x3FF0000000000000;
    v9[3] = v4;
    v10 = xmmword_1B304EEE0;
    v11 = 0;
    v12 = v5;
    v13 = 0;
    v14 = 0;
    v15 = 0x3FF0000000000000;
    v16 = 0u;
    v17 = 0u;
    v18 = 0x3FF0000000000000;
    if (a3)
      v6 = 0.70711;
    else
      v6 = 1.0;
    v8[0] = 1.0;
    v8[1] = v6;
    return LiHelium::createTransformNode((uint64_t)v9, a1, 1, v8, a4);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

FxBitmap *OZFxFilter::createRawInputFxImage(int a1, LiRenderParameters **this, unsigned int **a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t *a7, CGColorSpace *a8, uint64_t *a9, float64x2_t *a10, __int16 a11, uint64_t *a12, uint64_t a13)
{
  uint64_t v19;
  uint64_t v20;
  double v21;
  unsigned int *v22;
  int32x4_t v23;
  FxBitmap *v24;
  float64x2_t v26;
  int32x4_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t v30;

  v19 = *a7;
  v30 = v19;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  v29 = *a10;
  if (HIBYTE(a11))
  {
    OZFxFilter::offsetNode(&v30, a12, *(_DWORD *)(a13 + 492), &v28);
    v19 = v28;
    if (v30 == v28)
    {
      if (v30)
      {
        (*(void (**)(void))(*(_QWORD *)v30 + 24))();
        v19 = v30;
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      if (v30)
      {
        (*(void (**)(void))(*(_QWORD *)v30 + 24))();
        v19 = v28;
      }
      v30 = v19;
    }
    LODWORD(v29.f64[0]) = SLODWORD(v29.f64[1]) / -2;
    HIDWORD(v29.f64[0]) = SHIDWORD(v29.f64[1]) / -2;
  }
  v20 = *a9;
  if (*a9 != v19)
  {
    if (v20)
    {
      LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v19 = v30;
    }
    *a9 = v19;
    if (v19)
      LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  }
  LODWORD(v28) = 0;
  OZFxFilter::renderNode(v20, this, &v30, a8, (unsigned int *)&v29, 13, a11, a6, a3, &v28, a4);
  v21 = *(double *)(a5 + 64);
  v22 = *a3;
  v23 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(a10[1]), (int32x4_t)vcvtq_s64_f64(a10[2]));
  v26 = *a10;
  v27 = v23;
  v24 = OZFxPlugImageConverter::convertImageWithROI(v22, v28, &v27, (int *)&v26, *a4, 0, v21);
  -[FxImage setBounds:](v24, "setBounds:", v21 * a10[1].f64[0], a10[1].f64[1], v21 * a10[2].f64[0], a10[2].f64[1]);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
  return v24;
}

void sub_1B2F2EA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 24))(a22);
  _Unwind_Resume(exception_object);
}

void OZFxFilter::makeRenderTemporalSource(id *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  _BYTE v10[1424];

  if ((objc_msgSend(this[50], "isRendering") & 1) != 0)
  {
    OZImageNode::makeRenderTemporalSource((OZImageNode *)this, a2, a3, a5);
  }
  else
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v10, a2);
    (*((void (**)(id *, _BYTE *, const OZRenderGraphState *, uint64_t))*this + 21))(this, v10, a3, a4);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
  }
}

void sub_1B2F2EB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

void OZFxFilter::makeRenderImageSource(OZFxFilter *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  OZLiHeFilter *v10;
  uint64_t v11;
  PCSharedCount v12;
  __int128 v13;
  uint64_t v14;

  v13 = *(_OWORD *)a2;
  v14 = *((_QWORD *)a2 + 2);
  if ((*(unsigned int (**)(char *, __int128 *))(*((_QWORD *)this + 46) + 232))((char *)this + 368, &v13))
  {
    v10 = (OZLiHeFilter *)operator new();
    OZLiHeFilter::OZLiHeFilter(v10, this, a2, 0);
  }
  else
  {
    v10 = (OZLiHeFilter *)operator new();
    OZLiFilter::OZLiFilter(v10, this, a2, 0);
  }
  a5->var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(a5 + 1, (OZLiHeFilter *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  (*(void (**)(uint64_t *__return_ptr, _QWORD, OZRenderParams *, const OZRenderGraphState *, uint64_t))(**((_QWORD **)this + 3) + 160))(&v11, *((_QWORD *)this + 3), a2, a3, a4);
  (*(void (**)(OZLiHeFilter *, uint64_t))(*(_QWORD *)v10 + 168))(v10, v11);
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2F2ECC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C404DF0D0E3);
  _Unwind_Resume(a1);
}

void OZFxFilter::getBlendOptions(id *this@<X0>, const OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  id v8;
  PC_Sp_counted_base *v9;
  PCSharedCount v10;
  double v11;
  __int128 v12;
  uint64_t v13;
  PCSharedCount v14;

  a3->var0 = 0;
  v6 = (uint64_t *)&a3[1];
  PCSharedCount::PCSharedCount(a3 + 1);
  if ((*((unsigned int (**)(char *))this[46] + 39))((char *)this + 368))
  {
    v12 = *(_OWORD *)a2;
    v13 = *((_QWORD *)a2 + 2);
    v7 = objc_msgSend(this[50], "figTimeToFxTime:withConversionData:", &v12, 0);
    v11 = 0.0;
    v8 = this[49];
    objc_msgSend(this[50], "_getFloatValue:fromParm:atTime:", &v11, *((unsigned int *)this + 204), v7);
    if (v11 > 0.0)
    {
      OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)(this + 46));
      OZFxPlug_GetBlendOptions(v8, v7, (uint64_t)&v9);
      a3->var0 = v9;
      PCSharedCount::PCSharedCount(&v14, &v10);
      PCSharedCount::operator=(v6, (uint64_t *)&v14);
      PCSharedCount::~PCSharedCount(&v14);
      PCSharedCount::~PCSharedCount(&v10);
    }
  }
}

void sub_1B2F2EE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16)
{
  PCSharedCount *v16;
  PCSharedCount *v17;

  PCSharedCount::~PCSharedCount(&a16);
  PCSharedCount::~PCSharedCount(v17);
  PCSharedCount::~PCSharedCount(v16);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter::isConnectionValid(OZFxFilter *this)
{
  return OZFxPlugSharedBase::isConnectionValid((OZFxFilter *)((char *)this + 368));
}

BOOL OZFxFilter::isPluginMissing(PCString *this, PCString *a2)
{
  return OZFxPlugSharedBase::isPluginMissing(this + 46, a2);
}

void *OZFxFilter::isPixelIndependent(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::isPixelIndependent(this + 46, &v3);
}

void *OZFxFilter::isPositionIndependent(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::isPositionIndependent(this + 46, &v3);
}

uint64_t OZFxFilter::isTimeIndependent(OZFxFilter *this)
{
  return OZFxPlugSharedBase::isTimeIndependent((OZFxFilter *)((char *)this + 368));
}

void *OZFxFilter::doesSupportLargeRenderScale(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::doesSupportLargeRenderScale(this + 46, &v3);
}

uint64_t OZFxFilter::openMedia(OZFxFilter *this)
{
  return OZFxPlugSharedBase::openMedia((OZFxFilter *)((char *)this + 368));
}

uint64_t OZFxFilter::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OZFxPlugSharedBase::scheduleTokens(a1 + 368, a2, a3, a4, a5);
}

uint64_t OZFxFilter::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::hintTokensWillImage(a1 + 368, a2, a3, a4);
}

uint64_t OZFxFilter::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::getTokensImage(a1 + 368, a2, a3, a4);
}

uint64_t OZFxFilter::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return OZFxPlugSharedBase::prerollBegin(a1 + 368, a2, a3, a4, a5);
}

uint64_t OZFxFilter::prerollEnd(OZFxFilter *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  return OZFxPlugSharedBase::prerollEnd((OZFxFilter *)((char *)this + 368), a2, a3);
}

uint64_t OZFxFilter::setRate(OZFxFilter *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  return OZFxPlugSharedBase::setRate((OZFxFilter *)((char *)this + 368), a2, a3, a4);
}

void OZFxFilter::pruneTokensAtTime(OZFxFilter *this, const CMTime *a2, const char *a3)
{
  OZFxPlugSharedBase::pruneTokensAtTime((OZFxFilter *)((char *)this + 368), a2, a3);
}

void OZFxFilter::pruneTokensExceptAtTime(OZFxFilter *this, const CMTime *a2, const char *a3)
{
  OZFxPlugSharedBase::pruneTokensExceptAtTime((OZFxFilter *)((char *)this + 368), a2, a3);
}

void OZFxFilter::pruneAllTokens(OZFxFilter *this, const char *a2)
{
  OZFxPlugSharedBase::pruneAllTokens((OZFxFilter *)((char *)this + 368), a2);
}

void *OZFxFilter::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(this + 46, &v3);
}

uint64_t `non-virtual thunk to'OZFxFilter::getSceneNode(OZFxFilter *this)
{
  return OZEffect::getSceneNode((OZFxFilter *)((char *)this - 48));
}

{
  return OZEffect::getSceneNode((OZFxFilter *)((char *)this - 368));
}

uint64_t `non-virtual thunk to'OZFxFilter::getSceneNodeConst(OZFxFilter *this)
{
  return OZEffect::getSceneNodeConst((OZFxFilter *)((char *)this - 368));
}

void *`non-virtual thunk to'OZFxFilter::isPixelIndependent(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::isPixelIndependent(this, &v3);
}

void *`non-virtual thunk to'OZFxFilter::isPositionIndependent(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::isPositionIndependent(this, &v3);
}

void *`non-virtual thunk to'OZFxFilter::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(this, &v3);
}

void *`non-virtual thunk to'OZFxFilter::doesSupportLargeRenderScale(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::doesSupportLargeRenderScale(this, &v3);
}

uint64_t OZFxPlugSharedBase::getPluginVersionAtCreation(OZFxPlugSharedBase *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t OZFxPlugSharedBase::setUsesDynamicParams(uint64_t this, char a2)
{
  *(_BYTE *)(this + 187) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::getUsesDynamicParams(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 187);
}

uint64_t OZFxPlugSharedBase::filteredEdges(OZFxPlugSharedBase *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 186);
  return v1 & 1;
}

uint64_t OZFxPlugSharedBase::setFilteredEdges(uint64_t this, unsigned __int8 a2)
{
  atomic_store(a2, (unsigned __int8 *)(this + 186));
  return this;
}

uint64_t OZFxPlugSharedBase::isObserving(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t OZFxPlugSharedBase::setObserving(uint64_t this, char a2)
{
  *(_BYTE *)(this + 184) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::blendModeSet(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 185);
}

uint64_t OZFxPlugSharedBase::setBlendModeSet(uint64_t this, char a2)
{
  *(_BYTE *)(this + 185) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::hasOSC(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 188);
}

uint64_t OZFxPlugSharedBase::OSCIsPoint(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 189);
}

uint64_t OZFxPlugSharedBase::implementsBlendOptions(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 196);
}

uint64_t OZFxPlugSharedBase::implementsGetEdgeMode(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 197);
}

uint64_t OZFxPlugSharedBase::implementsFilteredEdges(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 198);
}

uint64_t std::__tree<std::__value_type<unsigned int,OZChannelBase *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,OZChannelBase *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,OZChannelBase *>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

_QWORD *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,BOOL>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,BOOL>>>::find<_opaque_pthread_t *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void OZGradientGenerator::OZGradientGenerator(OZGradientGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  PCString v7;

  PCString::PCString(&v7, (const char *)kGradientFxPlugUUID);
  OZFxGenerator::OZFxGenerator(this, a2, &v7, a4, 0, 0);
  PCString::~PCString(&v7);
  *(_QWORD *)this = &off_1E65BDFF0;
  *((_QWORD *)this + 2) = &unk_1E65BE948;
  *((_QWORD *)this + 6) = &unk_1E65BEBA0;
  *((_QWORD *)this + 816) = &unk_1E65BEBF8;
  *((_QWORD *)this + 2423) = &unk_1E65BECD0;
}

void sub_1B2F2F31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZGradientGenerator::OZGradientGenerator(OZFxGenerator *a1, const OZFxGenerator *a2, uint64_t a3)
{
  _QWORD *v3;

  OZFxGenerator::OZFxGenerator(a1, a2, a3);
  *v3 = &off_1E65BDFF0;
  v3[2] = &unk_1E65BE948;
  v3[6] = &unk_1E65BEBA0;
  v3[816] = &unk_1E65BEBF8;
  v3[2423] = &unk_1E65BECD0;
}

void `non-virtual thunk to'OZGradientGenerator::~OZGradientGenerator(OZGradientGenerator *this)
{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 16));
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 48));
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 6528));
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 19384));
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxGenerator::~OZFxGenerator((OZGradientGenerator *)((char *)this - 19384));
  JUMPOUT(0x1B5E29170);
}

void OZGradientGenerator::~OZGradientGenerator(OZGradientGenerator *this)
{
  OZFxGenerator::~OZFxGenerator(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZFxGenerator::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return OZFxPlugSharedBase::prerollBegin(a1 + 19384, a2, a3, a4, a5);
}

uint64_t OZFxGenerator::prerollEnd(OZFxGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  return OZFxPlugSharedBase::prerollEnd((OZFxGenerator *)((char *)this + 19384), a2, a3);
}

uint64_t OZFxGenerator::setRate(OZFxGenerator *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  return OZFxPlugSharedBase::setRate((OZFxGenerator *)((char *)this + 19384), a2, a3, a4);
}

uint64_t OZFxGenerator::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OZFxPlugSharedBase::scheduleTokens(a1 + 19384, a2, a3, a4, a5);
}

uint64_t OZFxGenerator::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::hintTokensWillImage(a1 + 19384, a2, a3, a4);
}

uint64_t OZFxGenerator::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZFxPlugSharedBase::getTokensImage(a1 + 19384, a2, a3, a4);
}

void *OZFxGenerator::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(this + 2423, &v3);
}

BOOL OZFxGenerator::isPluginMissing(PCString *this, PCString *a2)
{
  return OZFxPlugSharedBase::isPluginMissing(this + 2423, a2);
}

uint64_t `non-virtual thunk to'OZFxGenerator::getSceneNode(OZFxGenerator *this)
{
  return (uint64_t)this - 19384;
}

uint64_t `non-virtual thunk to'OZFxGenerator::getObjectID(OZFxGenerator *this)
{
  return *((unsigned int *)this - 4826);
}

uint64_t OZAddGamutClip@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  HGColorClamp *v10;
  uint64_t result;
  HGColorClamp *v12;
  HGColorClamp *v13;

  FxApplyColorConform(a1, a2, a4, a3, 0);
  FxSupport::newHGRefWithInput<HGColorClamp>(*a5, &v13);
  v9 = *a5;
  v10 = v13;
  if ((HGColorClamp *)*a5 == v13)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v10 = v13;
    }
    *a5 = (uint64_t)v10;
  }
  FxApplyColorConform(a5, a3, 0, a2, a4);
  result = *a5;
  v12 = v13;
  if ((HGColorClamp *)*a5 == v13)
  {
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      v12 = v13;
    }
    *a5 = (uint64_t)v12;
  }
  return result;
}

void sub_1B2F2FE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (*v10)
    (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
  _Unwind_Resume(exception_object);
}

void PCUUIDFromNSUUID(NSUUID *a1@<X0>, uint64_t a2@<X8>)
{
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p;
  char *v25;
  char *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = -[NSString componentsSeparatedByString:](-[NSUUID UUIDString](a1, "UUIDString"), "componentsSeparatedByString:", CFSTR("-"));
    __p = 0;
    v25 = 0;
    v26 = 0;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v20, v27, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v21 != v5)
            objc_enumerationMutation(v3);
          v7 = objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "integerValue");
          v8 = v7;
          v9 = v25;
          if (v25 >= v26)
          {
            v11 = (char *)__p;
            v12 = (v25 - (_BYTE *)__p) >> 2;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 62)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v14 = v26 - (_BYTE *)__p;
            if ((v26 - (_BYTE *)__p) >> 1 > v13)
              v13 = v14 >> 1;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
              v15 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            if (v15)
            {
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v26, v15);
              v11 = (char *)__p;
              v9 = v25;
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[4 * v12];
            *(_DWORD *)v17 = v8;
            v10 = v17 + 4;
            while (v9 != v11)
            {
              v18 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v17 - 1) = v18;
              v17 -= 4;
            }
            __p = v17;
            v25 = v10;
            v26 = &v16[4 * v15];
            if (v11)
              operator delete(v11);
          }
          else
          {
            *(_DWORD *)v25 = v7;
            v10 = v9 + 4;
          }
          v25 = v10;
        }
        v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v20, v27, 16);
      }
      while (v4);
    }
    v19 = (char *)__p;
    *(_OWORD *)a2 = *(_OWORD *)__p;
    v25 = v19;
    operator delete(v19);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void sub_1B2F30070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double MakeRenderCamera@<D0>(OZScene *a1@<X0>, const CMTime *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t var0;
  int ActiveCamera;
  METimeRemap *v7;
  double result;
  CMTime v9;
  int v10;
  OZScene *v11;

  v11 = a1;
  v10 = 0;
  PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>(&v11, &v10, a3);
  var0 = (uint64_t)a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  ActiveCamera = OZScene::getActiveCamera(v11, a2);
  HGUserJob::SetState(var0, ActiveCamera);
  if (!a3->var0)
    throw_PCNullPointerException(1);
  LiRenderingTechnology::setRasterizeEdges((uint64_t)a3->var0, 0);
  v7 = (METimeRemap *)a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  v9 = *a2;
  *(_QWORD *)&result = METimeRemap::setOutroDuration(v7, &v9).n128_u64[0];
  return result;
}

void sub_1B2F30158(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t OZXEnableObject(void *a1, unsigned int a2, int a3)
{
  OZScene *v3;
  _QWORD *Object;
  uint64_t v6;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  Object = (_QWORD *)OZScene::getObject(v3, a2);
  if (!Object)
    return 11;
  v6 = 40;
  if (a3)
    v6 = 32;
  (*(void (**)(void))(*Object + v6))();
  return 0;
}

uint64_t OZXHitCheck(void *a1, CGPoint a2, const CMTime *a3, unsigned int *a4)
{
  OZScene *v4;
  double y;
  double x;
  uint64_t v8;
  float v9;
  float v10;
  const void *v11;
  _DWORD *v12;
  _DWORD *v13;
  OZImageElement *v14;
  BOOL v15;
  void *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  _DWORD *v22;
  unsigned int *v24;
  _DWORD v25[2];
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  _OWORD v30[2];
  int v31;
  uint64_t v32[4];
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _BYTE v38[32];
  int v39;
  uint64_t v40[4];
  uint64_t v41;
  LiCamera *v42[3];
  LiCamera *v43;
  PCSharedCount v44;
  OZRenderState v45;
  CMTime v46;

  *a4 = 0;
  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  y = a2.y;
  x = a2.x;
  v46 = *a3;
  OZRenderState::OZRenderState(&v45);
  v45.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v46;
  v45.var20 = 0;
  v45.var25 = 0;
  v45.var8 = 0;
  MakeRenderCamera(v4, &v46, (PCSharedCount *)&v43);
  OZRenderState::setEyeMatrix(&v45, v43);
  v24 = a4;
  memset(v42, 0, sizeof(v42));
  OZScene::begin_t<OZElement,false,true>((uint64_t *)v4, (uint64_t)v40);
  v8 = *((_QWORD *)v4 + 151);
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  v34 = (_QWORD *)((char *)v4 + 1200);
  v35 = v8;
  v36 = (_QWORD *)((char *)v4 + 1200);
  v37 = 0;
  v9 = x;
  v10 = y;
  while ((_QWORD *)v40[0] != v34)
  {
    if (v40[0] != v40[2])
    {
      v11 = *(const void **)(v40[0] + 16);
      if (v11)
      {
        if (v12)
        {
          v13 = v12;
          v15 = v14 && OZImageElement::isDropZone(v14);
          if (!v15 && !v16 && v17 == 0)
          {
            v32[0] = __PAIR64__(LODWORD(v10), LODWORD(v9));
            if ((*(uint64_t (**)(_DWORD *, uint64_t *, OZRenderState *, LiCamera *, LiCamera **, uint64_t))(*(_QWORD *)v13 + 936))(v13, v32, &v45, v43, v42, 536870920))
            {
              v19 = 0;
              *v24 = v13[20];
              goto LABEL_32;
            }
          }
        }
      }
    }
    OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++(v40);
  }
  OZScene::begin_t<OZLight,false,true>((uint64_t *)v4, (uint64_t)v32);
  v20 = *((_QWORD *)v4 + 151);
  memset(v30, 0, sizeof(v30));
  v31 = 1065353216;
  v26 = (_QWORD *)((char *)v4 + 1200);
  v27 = v20;
  v28 = (_QWORD *)((char *)v4 + 1200);
  v29 = 0;
  while (1)
  {
    if ((_QWORD *)v32[0] == v26)
    {
      v19 = 11;
      goto LABEL_31;
    }
    if (v32[0] == v32[2] || (v21 = *(const void **)(v32[0] + 16)) == 0)
      v22 = 0;
    else
    *(float *)v25 = v9;
    *(float *)&v25[1] = v10;
    if ((*(uint64_t (**)(_DWORD *, _DWORD *, OZRenderState *, LiCamera *, LiCamera **, uint64_t))(*(_QWORD *)v22 + 936))(v22, v25, &v45, v43, v42, 536870920))
    {
      break;
    }
    OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++(v32);
  }
  v19 = 0;
  *v24 = v22[20];
LABEL_31:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v30);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v33);
LABEL_32:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v38);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v41);
  PCSharedCount::~PCSharedCount(&v44);
  return v19;
}

void sub_1B2F3052C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,PCSharedCount a52)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a43);
  PCSharedCount::~PCSharedCount(&a52);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F304F0);
}

uint64_t OZXSetMatteInputMode(void *a1, NSNumber *a2)
{
  uint64_t v2;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  if (a2)
    *(_DWORD *)(v2 + 144) = -[NSNumber integerValue](a2, "integerValue");
  else
    *(_DWORD *)(v2 + 144) = 0;
  return 11;
}

void sub_1B2F30600(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F305F0);
}

uint64_t OZXForceSetPlaneAnchorUUID(void *a1, NSString *a2, NSUUID *a3)
{
  uint64_t v3;
  uint64_t v6;
  const void *v7;
  char *v8;
  PCString *Name;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD v16[2];
  int v17;
  uint64_t v18[4];
  uint64_t v19;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  OZScene::begin_t<OZARPlaneAnchorElement,false,true>(*(uint64_t **)(*(_QWORD *)a1 + 24), (uint64_t)v18);
  v6 = *(_QWORD *)(v3 + 1208);
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v12 = v3 + 1200;
  v13 = v6;
  v14 = v3 + 1200;
  v15 = 0;
  while (v18[0] != v12)
  {
    if (v18[0] == v18[2] || (v7 = *(const void **)(v18[0] + 16)) == 0)
      v8 = 0;
    else
    Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v8 + 16));
    if (-[__CFString isEqualToString:]((id)PCString::ns_str(Name), "isEqualToString:", a2))
    {
      PCUUIDFromNSUUID(a3, (uint64_t)&v11);
      *(_OWORD *)(v8 + 24408) = v11;
      break;
    }
    OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++(v18);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  return 11;
}

void sub_1B2F30744(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F30728);
}

uint64_t *OZScene::begin_t<OZARPlaneAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2F307F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZXClearARAnchors(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  char *v6;
  int32x4_t v9;
  _BYTE v10[32];
  int v11;
  uint64_t v12[4];
  uint64_t v13;
  int32x4_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v16 != v4)
          objc_enumerationMutation(a2);
        PCUUIDFromNSUUID((NSUUID *)objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * i), "identifier"), (uint64_t)&v14);
        OZScene::begin_t<OZARAnchorElement,false,true>(v2, (uint64_t)v12);
        memset(v10, 0, sizeof(v10));
        v11 = 1065353216;
        v9 = v14;
        while ((uint64_t *)v12[0] != v2 + 150)
        {
          if (v12[0] == v12[2])
          {
            v6 = 0;
          }
          else
          {
            v6 = *(char **)(v12[0] + 16);
            if (v6)
          }
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v6 + 24408), v9)))) & 1) == 0)
          {
            *((_QWORD *)v6 + 3051) = 0;
            *((_QWORD *)v6 + 3052) = 0;
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)v6 + 120) + 16) + 40))(*((_QWORD *)v6 + 120) + 16, 0);
          }
          OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++(v12);
        }
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
      }
      v3 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v3);
  }
  return 11;
}

void sub_1B2F30A94(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B2F30A4CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *OZScene::begin_t<OZARAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2F30B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZXApplyARFrame(uint64_t *a1, ARFrame *a2, double a3, double a4, const OZARFrameInfo *a5)
{
  uint64_t v6;
  uint64_t *v7;
  ARCamera *v12;
  ARCamera *v13;
  int v14;
  double v15;
  uint64_t v17;
  float v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  uint64_t i;
  int v25;
  int v26;
  double v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  uint64_t j;
  simd_float4 v36;
  simd_float4 v37;
  simd_float4 v38;
  simd_float4 v39;
  simd_float4 v40;
  simd_float4 v41;
  simd_float4 v42;
  simd_float4 v43;
  double v44;
  NSArray *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  ARFaceAnchor *v49;
  float v50;
  uint64_t v51;
  double v52;
  const CMTime *v53;
  const void *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 *v59;
  __int128 v60;
  __int128 v61;
  uint64_t k;
  const void *v63;
  OZTransformNode *v64;
  NSDictionary *v65;
  CMTime *v66;
  NSDictionary *v67;
  NSArray *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  double v75;
  double v76;
  double v77;
  int v78;
  double v79;
  double v80;
  double v81;
  int v82;
  int v83;
  double v84;
  double v85;
  double v86;
  int v87;
  int v88;
  double v89;
  uint64_t v90;
  _BOOL4 v91;
  _BOOL4 v92;
  void *v93;
  double v94;
  double v95;
  double v96;
  int v97;
  int v98;
  double v99;
  double v100;
  double v101;
  int v102;
  int v103;
  double v104;
  double v105;
  double v106;
  int v107;
  int v108;
  double v109;
  double v110;
  int v111;
  int v112;
  int v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  int v119;
  int v120;
  double v121;
  _BOOL4 v122;
  double v123;
  uint64_t v124;
  int v125;
  const __CFString *v126;
  int v127;
  uint64_t v128;
  BOOL v130;
  const __CFString *v131;
  const __CFString *v132;
  const __CFString *v133;
  NSDictionary *v134;
  double v135;
  uint64_t *v136;
  float v137;
  uint64_t v138;
  _DWORD *v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  const CMTime *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  const void *v148;
  char *v149;
  int v150;
  int v151;
  int ValueAsInt;
  int v153;
  CMTime *v154;
  BOOL v155;
  char v156;
  BOOL v157;
  char v158;
  int32x4_t *v159;
  int32x4_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  int8x16_t v165;
  int8x16_t v166;
  int v167;
  uint64_t v168;
  __int128 *v169;
  uint64_t m;
  unint64_t v171;
  unint64_t v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  float v178;
  float v179;
  NSDictionary *v180;
  uint64_t v181;
  const void *v182;
  char *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  float v190;
  float v191;
  float v192;
  uint64_t v193;
  double v194;
  double v195;
  uint64_t v196;
  float64_t v197;
  float64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 *v206;
  __int128 v207;
  __int128 v208;
  uint64_t n;
  const __CFString *v210;
  ARFrame *v211;
  uint64_t *v212;
  id obj;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  float v219;
  int8x16_t v220;
  int8x16_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t *v225;
  __int128 v226;
  uint64_t v227;
  id v228;
  double v229;
  simd_float4x4 v230;
  simd_float4x4 v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  _BYTE v252[72];
  int32x4_t v253;
  __int128 v254;
  __int128 v255;
  _QWORD v256[4];
  int v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  int v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  _BYTE v274[24];
  __int128 v275;
  uint64_t v276;
  float64x2_t v277;
  uint64_t v278[2];
  uint64_t *v279;
  char v280;
  _BYTE v281[32];
  int v282;
  CMTime v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288[8];
  uint64_t v289;

  v289 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 7;
  v6 = *a1;
  if (!*a1)
    return 7;
  v7 = *(uint64_t **)(v6 + 24);
  if (!v7)
    return 7;
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders(*(_QWORD *)(v6 + 24), 1);
  v12 = -[ARFrame camera](a2, "camera");
  v13 = v12;
  if (!v12)
    return 1;
  v14 = *((_DWORD *)a5 + 30) - 1;
  if (v14 > 2)
    v15 = 282.743339;
  else
    v15 = dbl_1B35614E8[v14];
  -[ARCamera intrinsics](v12, "intrinsics");
  v17 = 0;
  v18 = v15 / 180.0;
  v19 = v18;
  v288[0] = v20;
  v288[1] = v21;
  v288[2] = v22;
  v23 = v252;
  do
  {
    for (i = 0; i != 3; ++i)
      *(double *)&v23[8 * i] = *(float *)((unint64_t)&v288[i] & 0xFFFFFFFFFFFFFFF3 | (4 * (v17 & 3)));
    ++v17;
    v23 += 24;
  }
  while (v17 != 3);
  v25 = *((_DWORD *)v7 + 86);
  v212 = v7;
  v26 = *((_DWORD *)v7 + 87);
  -[ARCamera imageResolution](v13, "imageResolution");
  v251 = 0x3FF0000000000000;
  v248 = 0x3FF0000000000000;
  v245 = 0x3FF0000000000000;
  v242 = 0x3FF0000000000000;
  v243 = 0u;
  v244 = 0u;
  v246 = 0u;
  v247 = 0u;
  v249 = 0u;
  v250 = 0u;
  PCMatrix44Tmpl<double>::setPerspectiveForRotatedViewportWithIntrinsics((uint64_t)&v242, (uint64_t)v252, v19, (double)v25, (double)v26, v27, v28, a3, a4);
  v241 = 0x3FF0000000000000;
  v238 = 0x3FF0000000000000;
  v235 = 0x3FF0000000000000;
  v232 = 0x3FF0000000000000;
  v233 = 0u;
  v234 = 0u;
  v236 = 0u;
  v237 = 0u;
  v239 = 0u;
  v240 = 0u;
  PCMatrix44Tmpl<double>::leftRotate((double *)&v232, 2, v19);
  -[ARCamera transform](v13, "transform");
  v29 = 0;
  v284 = v30;
  v285 = v31;
  v32 = v288;
  v286 = v33;
  v287 = v34;
  do
  {
    for (j = 0; j != 4; ++j)
      *((double *)v32 + j) = *(float *)((unint64_t)(&v284 + j) & 0xFFFFFFFFFFFFFFF3 | (4 * (v29 & 3)));
    ++v29;
    v32 += 2;
  }
  while (v29 != 4);
  v211 = a2;
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v232, (double *)v288);
  *(double *)v36.i64 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v242);
  v231.columns[0] = v36;
  v231.columns[1] = v37;
  v231.columns[2] = v38;
  v231.columns[3] = v39;
  *(double *)v40.i64 = PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v232);
  v230.columns[0] = v40;
  v230.columns[1] = v41;
  v230.columns[2] = v42;
  v230.columns[3] = v43;
  v229 = 1.0;
  setUpCamera((OZScene *)v7, &v231, &v230, (const simd_float4x4 *)((char *)a5 + 32), a3, a4, &v229);
  OZScene::setVideoOrientation((uint64_t)v7, *((_DWORD *)a5 + 30));
  v44 = v229;
  v258 = 0u;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v45 = -[ARFrame anchors](a2, "anchors");
  v46 = -[NSArray countByEnumeratingWithState:objects:count:](v45, "countByEnumeratingWithState:objects:count:", &v258, v288, 16);
  if (v46)
  {
    v47 = *(_QWORD *)v259;
LABEL_20:
    v48 = 0;
    while (1)
    {
      if (*(_QWORD *)v259 != v47)
        objc_enumerationMutation(v45);
      v49 = *(ARFaceAnchor **)(*((_QWORD *)&v258 + 1) + 8 * v48);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      if (v46 == ++v48)
      {
        v46 = -[NSArray countByEnumeratingWithState:objects:count:](v45, "countByEnumeratingWithState:objects:count:", &v258, v288, 16);
        if (v46)
          goto LABEL_20;
        goto LABEL_26;
      }
    }
  }
  else
  {
LABEL_26:
    v49 = 0;
  }
  OZScene::begin_t<OZARFaceAnchorElement,false,true>(v212, (uint64_t)v278);
  v225 = a1;
  v50 = v44;
  v51 = v212[151];
  v268 = 0u;
  v269 = 0u;
  v270 = 1065353216;
  *(_QWORD *)&v266 = v212 + 150;
  *((_QWORD *)&v266 + 1) = v51;
  *(_QWORD *)&v267 = v212 + 150;
  BYTE8(v267) = 0;
  v52 = v50;
  v53 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while (v278[0] != (_QWORD)v266)
  {
    if ((uint64_t *)v278[0] == v279 || (v54 = *(const void **)(v278[0] + 16)) == 0)
      v55 = 0;
    else
    OZARFaceAnchorElement::setFaceAnchor((id *)v55, v49);
    if (v49)
    {
      PCUUIDFromNSUUID((NSUUID *)-[ARFaceAnchor identifier](v49, "identifier"), (uint64_t)&v284);
      *(_OWORD *)(v55 + 24408) = v284;
    }
    (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)v55 + 2435) + 712))(v55 + 19480, MEMORY[0x1E0CA2E68], 0, 2.0);
    (*(void (**)(char *, _QWORD, _QWORD, double))(*((_QWORD *)v55 + 2467) + 712))(v55 + 19736, MEMORY[0x1E0CA2E68], 0, v52);
    -[ARFaceAnchor transform](v49, "transform");
    v56 = 0;
    v271 = v57;
    v272 = v58;
    v59 = &v284;
    v273 = v60;
    *(_OWORD *)v274 = v61;
    do
    {
      for (k = 0; k != 4; ++k)
        *((double *)v59 + k) = *(float *)((unint64_t)(&v271 + k) & 0xFFFFFFFFFFFFFFF3 | (4 * (v56 & 3)));
      ++v56;
      v59 += 2;
    }
    while (v56 != 4);
    v272 = 0u;
    v273 = 0u;
    v271 = 0u;
    *(_DWORD *)v274 = 4;
    *(_OWORD *)&v274[8] = 0u;
    v275 = 0u;
    v276 = 0;
    PCMatrix44Tmpl<double>::getTransformation(&v284, (uint64_t)&v271);
    v63 = (const void *)*((_QWORD *)v55 + 120);
    if (v63)
    else
      v64 = 0;
    OZTransformNode::setTranslation(v64, *(double *)&v271 * v52, *((double *)&v271 + 1) * v52, *(double *)&v272 * v52, v53);
    OZTransformNode::setRotation(v64, *(double *)&v274[8], *(double *)&v274[16], *(double *)&v275, v53);
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::operator++(v278);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v268);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v281);
  v65 = (NSDictionary *)objc_opt_new();
  v66 = (CMTime *)MEMORY[0x1E0CA2E68];
  v67 = v65;
  -[NSDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", &unk_1E6649398, CFSTR("Thought Opacity"));
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", &unk_1E66493A8, CFSTR("Emoji Opacity"));
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", &unk_1E6649398, CFSTR("Emitter Opacity"));
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", &unk_1E6649398, CFSTR("Heart Opacity"));
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", CFSTR("Face Joy"), CFSTR("Face Emotion"));
  v286 = 0u;
  v287 = 0u;
  v284 = 0u;
  v285 = 0u;
  v68 = -[ARFrame anchors](v211, "anchors");
  v69 = -[NSArray countByEnumeratingWithState:objects:count:](v68, "countByEnumeratingWithState:objects:count:", &v284, v288, 16);
  v70 = 0.0;
  if (v69)
  {
    v71 = *(_QWORD *)v285;
LABEL_45:
    v72 = 0;
    while (1)
    {
      if (*(_QWORD *)v285 != v71)
        objc_enumerationMutation(v68);
      v73 = *(void **)(*((_QWORD *)&v284 + 1) + 8 * v72);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      if (v69 == ++v72)
      {
        v69 = -[NSArray countByEnumeratingWithState:objects:count:](v68, "countByEnumeratingWithState:objects:count:", &v284, v288, 16);
        if (v69)
          goto LABEL_45;
        goto LABEL_70;
      }
    }
    v74 = (void *)objc_msgSend(v73, "blendShapes");
    if (!objc_msgSend(v74, "count"))
    {
      LODWORD(v69) = 0;
      goto LABEL_70;
    }
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89358]), "doubleValue");
    v76 = v75;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89360]), "doubleValue");
    if (v77 <= 0.5)
      v78 = 2 * (v76 > 0.5);
    else
      v78 = (2 * (v76 > 0.5)) | 4;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C893E0]), "doubleValue");
    v80 = v79;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C893E8]), "doubleValue");
    v82 = v78 | 0x80;
    if (v80 <= 0.5)
      v82 = v78;
    if (v81 <= 0.5)
      v83 = v82;
    else
      v83 = v82 | 0x100;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C893D0]), "doubleValue");
    v85 = v84;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C893D8]), "doubleValue");
    v87 = v83 | 0x20;
    if (v85 <= 0.3)
      v87 = v83;
    if (v86 <= 0.3)
      v88 = v87;
    else
      v88 = v87 | 0x40;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89368]), "doubleValue");
    if (v89 > 0.5)
    {
      -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", &unk_1E66493A8, CFSTR("Emitter Opacity"));
      if ((v88 & 6) != 0)
        v90 = objc_msgSend(MEMORY[0x1E0CEA478], "greenColor");
      else
        v90 = objc_msgSend(MEMORY[0x1E0CEA478], "whiteColor");
      -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", v90, CFSTR("Emitter Color"));
      if ((v88 & 0x18) != 0)
        v93 = &unk_1E66493B8;
      else
        v93 = &unk_1E6649398;
      -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", v93, CFSTR("Life"));
      v88 |= 0x200u;
    }
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89370]), "doubleValue");
    v95 = v94;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89378]), "doubleValue");
    v97 = v88 | 0x400;
    if (v95 <= 0.3)
      v97 = v88;
    if (v96 <= 0.3)
      v98 = v97;
    else
      v98 = v97 | 0x800;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C894C8]), "doubleValue");
    v100 = v99;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C894D0]), "doubleValue");
    v102 = v98 | 0x1000;
    if (v100 <= 0.45)
      v102 = v98;
    if (v101 <= 0.45)
      v103 = v102;
    else
      v103 = v102 | 0x2000;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89380]), "doubleValue");
    v105 = v104;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89388]), "doubleValue");
    v107 = v103 | 8;
    if (v105 <= 0.7)
      v107 = v103;
    if (v106 <= 0.7)
      v108 = v107;
    else
      v108 = v107 | 0x10;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89410]), "doubleValue");
    if (v109 > 0.15)
      v108 |= 0x40000u;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89400]), "doubleValue");
    v111 = v108 | 0x10000;
    if (v110 <= 0.15)
      v111 = v108;
    if (v110 <= 0.7)
      v112 = v111;
    else
      v112 = v111 | 0x20000;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89468]), "doubleValue");
    v113 = v112;
    if (v114 > 0.8)
    {
      v113 = v112 | 0x80000;
      if ((v112 & 0x18) != 0)
        -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", &unk_1E66493A8, CFSTR("Heart Opacity"));
    }
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89438]), "doubleValue");
    if (v115 > 0.7)
      v113 |= 0x100000u;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C89498]), "doubleValue");
    v117 = v116;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C894A0]), "doubleValue");
    v119 = v113 | 0x4000;
    if (v117 <= 0.15)
      v119 = v113;
    if (v118 <= 0.15)
      v120 = v119;
    else
      v120 = v119 | 0x8000;
    objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E0C894D8]), "doubleValue");
    if (v121 <= 0.2)
      LODWORD(v69) = v120;
    else
      LODWORD(v69) = v120 | 0x200000;
    v92 = (v69 & 6) == 0;
    v91 = (v69 & 0x20000) == 0;
    v122 = (v69 & 0x20000) == 0 || (v69 & 6) == 0;
    v123 = 100.0;
    if ((v69 & 0xC000) != 0)
      v123 = 0.0;
    if (v122)
      v70 = 0.0;
    else
      v70 = v123;
    if ((v69 & 0x200000) != 0)
    {
      v124 = objc_msgSend(MEMORY[0x1E0CEA478], "purpleColor", v123);
      v125 = 0;
      goto LABEL_121;
    }
  }
  else
  {
LABEL_70:
    v91 = 1;
    v92 = 1;
  }
  v124 = objc_msgSend(MEMORY[0x1E0CEA478], "blueColor");
  v125 = 1;
LABEL_121:
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v70), CFSTR("Thought Opacity"));
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", v124, CFSTR("Thought Color"));
  if ((v69 & 0x200) != 0)
  {
    v126 = CFSTR("🤢");
    goto LABEL_126;
  }
  if ((v69 & 0x18) == 0)
  {
    if ((v69 & 0xC000) != 0)
    {
      if ((v69 & 0x10000) != 0)
      {
        v131 = CFSTR("😃");
        v132 = CFSTR("😀");
        v130 = !v92;
      }
      else
      {
        v130 = (v69 & 0x60) == 0 || (v69 & 0xC00) == 0;
        v131 = CFSTR("🙂");
        v132 = CFSTR("😊");
      }
      if (v130)
        v126 = v131;
      else
        v126 = v132;
    }
    else if ((v69 & 0x10000) != 0)
    {
      v210 = CFSTR("😲");
      if (v92)
        v210 = CFSTR("😮");
      if (v125)
        v126 = v210;
      else
        v126 = CFSTR("😛");
    }
    else if ((v69 & 0x80000) != 0)
    {
      v126 = CFSTR("😗");
    }
    else
    {
      v126 = CFSTR("😐");
    }
LABEL_126:
    -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", v126, CFSTR("Emoji Text"));
    if ((v125 & 1) != 0)
      goto LABEL_127;
    goto LABEL_157;
  }
  if ((v69 & 0x18) == 0x18)
  {
    v126 = CFSTR("😑");
    goto LABEL_126;
  }
  if (v125)
  {
    if ((v69 & 0x80000) != 0)
      v133 = CFSTR("😘");
    else
      v133 = CFSTR("😉");
    -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", v133, CFSTR("Emoji Text"));
LABEL_127:
    v127 = (v69 & 0x180) == 0 || v92;
    if ((v69 & 0xC000) != 0 || v91 | v127)
    {
      if (v92 && !v91 && (v69 & 0xC000) == 0)
        v128 = 0;
      else
        v128 = 2;
      if ((!v92 || v91) && (v69 & 0xC000) == 0)
      {
        if ((v69 & 0x10000) != 0 || (v69 & 0x60) == 0)
          v128 = 3;
        else
          v128 = 4;
      }
    }
    else
    {
      v128 = 1;
    }
    goto LABEL_158;
  }
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", CFSTR("😜"), CFSTR("Emoji Text"));
LABEL_157:
  v128 = 5;
LABEL_158:
  -[NSDictionary setObject:forKeyedSubscript:](v67, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v128), CFSTR("Face Pop-up"));
  OZXSetSceneSettings((OZScene *)v212, v67);

  v134 = (NSDictionary *)*((_QWORD *)a5 + 14);
  v135 = v229;
  if (v134)
    obj = OZARMakePlaneListFromPlanesDict(v134);
  else
    obj = OZARMakePlaneListFromARFrame(v211);
  v136 = *(uint64_t **)(*v225 + 24);
  v283.epoch = 0;
  *(_QWORD *)&v283.timescale = 0;
  v283.value = (CMTimeValue)&v283.timescale;
  OZScene::begin_t<OZARPlaneAnchorElement,false,true>(v136, (uint64_t)v278);
  v137 = v135;
  v219 = v137;
  v138 = v136[151];
  v268 = 0u;
  v269 = 0u;
  v270 = 1065353216;
  *(_QWORD *)&v266 = v136 + 150;
  *((_QWORD *)&v266 + 1) = v138;
  v215 = v136 + 150;
  *(_QWORD *)&v267 = v136 + 150;
  BYTE8(v267) = 0;
  while (v278[0] != (_QWORD)v266)
  {
    v140 = v139[6103];
    v141 = v139[6104];
    v142 = v139[6105];
    if (v140 | v139[6102] | v141 | v142)
    {
      LODWORD(v288[0]) = v139[6102];
      *(_QWORD *)((char *)v288 + 4) = __PAIR64__(v141, v140);
      HIDWORD(v288[0]) = v142;
      std::__tree<PCUUID>::__emplace_unique_key_args<PCUUID,PCUUID>((uint64_t **)&v283, (unsigned int *)v288, v288);
    }
    OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++(v278);
  }
  v216 = v136;
  v264 = 0u;
  v265 = 0u;
  v262 = 0u;
  v263 = 0u;
  v143 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v262, &v284, 16);
  if (v143)
  {
    v214 = *(_QWORD *)v263;
    v144 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v145 = 0;
      v217 = v143;
      do
      {
        if (*(_QWORD *)v263 != v214)
          objc_enumerationMutation(obj);
        v218 = v145;
        v146 = *(void **)(*((_QWORD *)&v262 + 1) + 8 * v145);
        OZScene::begin_t<OZARPlaneAnchorElement,false,true>(v216, (uint64_t)&v258);
        v147 = v216[151];
        memset(v256, 0, sizeof(v256));
        v257 = 1065353216;
        *(_QWORD *)&v254 = v215;
        *((_QWORD *)&v254 + 1) = v147;
        *(_QWORD *)&v255 = v215;
        BYTE8(v255) = 0;
        while ((_QWORD)v258 != (_QWORD)v254)
        {
          if ((_QWORD)v258 == (_QWORD)v259 || (v148 = *(const void **)(v258 + 16)) == 0)
            v149 = 0;
          else
          PCUUIDFromNSUUID((NSUUID *)objc_msgSend(v146, "identifier"), (uint64_t)&v253);
          v150 = objc_msgSend((id)objc_msgSend(v146, "alignment"), "intValue");
          v151 = objc_msgSend((id)objc_msgSend(v146, "classification"), "intValue");
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v149 + 24808), v144, 0.0);
          v153 = OZChannel::getValueAsInt((OZChannel *)(v149 + 24552), v144, 0.0);
          v154 = (CMTime *)std::__tree<PCUUID>::find<PCUUID>((uint64_t)&v283, (unsigned int *)&v253);
          if (ValueAsInt)
            v155 = ValueAsInt - 1 == v150;
          else
            v155 = 1;
          v156 = !v155;
          if (v153)
            v157 = v151 == v153;
          else
            v157 = 1;
          v158 = !v157;
          v159 = (int32x4_t *)(v149 + 24408);
          v160 = *(int32x4_t *)(v149 + 24408);
          v66 = (CMTime *)MEMORY[0x1E0CA2E68];
          if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v160.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL))&& (v156 & 1) == 0&& &v283.timescale == (CMTimeScale *)v154&& (v158 & 1) == 0)
          {
            *v159 = v253;
            std::__tree<PCUUID>::__emplace_unique_key_args<PCUUID,PCUUID>((uint64_t **)&v283, (unsigned int *)&v253, &v253);
            v160 = *v159;
          }
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v160, v253)))) & 1) == 0)
          {
            objc_msgSend(v146, "simdTransform");
            v222 = v162;
            v223 = v161;
            v224 = v164;
            v226 = v163;
            objc_msgSend((id)objc_msgSend(v146, "center"), "PCSIMDFloat3Value");
            v221 = v165;
            objc_msgSend((id)objc_msgSend(v146, "extent"), "PCSIMDFloat3Value");
            v220 = v166;
            v167 = objc_msgSend((id)objc_msgSend(v146, "alignment"), "intValue");
            v277 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v220.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)), v219));
            OZARPlaneAnchorElement::setPlaneSize((uint64_t)v149, v144, v277.f64);
            v168 = 0;
            v271 = v223;
            v272 = v222;
            v169 = v288;
            v273 = v226;
            *(_OWORD *)v274 = v224;
            do
            {
              for (m = 0; m != 4; ++m)
                *((double *)v169 + m) = *(float *)((unint64_t)(&v271 + m) & 0xFFFFFFFFFFFFFFF3 | (4 * (v168 & 3)));
              ++v168;
              v169 += 2;
            }
            while (v168 != 4);
            v272 = 0u;
            v273 = 0u;
            v271 = 0u;
            *(_DWORD *)v274 = 4;
            *(_OWORD *)&v274[8] = 0u;
            v275 = 0u;
            v276 = 0;
            PCMatrix44Tmpl<double>::getTransformation(v288, (uint64_t)&v271);
            *(float *)&v171 = -*(float *)&v221.i32[2];
            HIDWORD(v171) = v221.i32[2];
            v172 = vextq_s8(v221, v221, 4uLL).u64[0];
            if (!v167)
              v171 = v172;
            v173 = *(float *)&v171;
            v174 = *((float *)&v171 + 1);
            if (v167)
              v174 = 0.0;
            OZTransformNode::setTranslation((OZTransformNode *)v149, (*(double *)&v271 + *(float *)v221.i32) * v219, (*((double *)&v271 + 1) + v173) * v219, (*(double *)&v272 + v174) * v219, v144);
            if (objc_msgSend((id)objc_msgSend(v146, "alignment"), "intValue") == 1)
            {
              v175 = 0.0;
              v176 = *(double *)&v274[16];
              v177 = 0.0;
            }
            else
            {
              v176 = *(double *)&v274[16];
              v175 = *(double *)&v274[8] + 1.57;
              v177 = *(double *)&v275;
            }
            OZTransformNode::setRotation((OZTransformNode *)v149, v175, v176, v177, v144);
          }
          OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)&v258);
        }
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v256);
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v260);
        v145 = v218 + 1;
      }
      while (v218 + 1 != v217);
      v143 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v262, &v284, 16);
    }
    while (v143);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v268);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v281);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v283, *(_QWORD **)&v283.timescale);

  v178 = v229;
  SetUpEnvironmentMeshNode(v212, *((SCNNode **)a5 + 17), v178);
  v179 = v229;
  v180 = (NSDictionary *)*((_QWORD *)a5 + 13);
  if (v180)
    v228 = OZARMakePersonList(v211, (OZScene *)v212, v179, v180);
  else
    v228 = OZARMakePersonList(v211, (int *)v212, *((_DWORD *)a5 + 30), v179);
  v283 = *v66;
  OZScene::begin_t<OZARPersonAnchorElement,false,true>(v212, (uint64_t)&v271);
  v181 = v212[151];
  memset(v281, 0, sizeof(v281));
  v282 = 1065353216;
  v278[0] = (uint64_t)(v212 + 150);
  v278[1] = v181;
  v279 = v212 + 150;
  v280 = 0;
  while ((_QWORD)v271 != v278[0])
  {
    if ((_QWORD)v271 == (_QWORD)v272 || (v182 = *(const void **)(v271 + 16)) == 0)
      v183 = 0;
    else
    OZARPersonAnchorElement::setIsPersonInScene((OZARPersonAnchorElement *)v183, &v283, 0);
    v184 = OZChannel::getValueAsInt((OZChannel *)(v183 + 24736), &v283, 0.0);
    v268 = 0u;
    v269 = 0u;
    v266 = 0u;
    v267 = 0u;
    v185 = objc_msgSend(v228, "countByEnumeratingWithState:objects:count:", &v266, v288, 16);
    if (v185)
    {
      v186 = (v184 - 1);
      v187 = *(_QWORD *)v267;
      do
      {
        v188 = 0;
        v227 = v185;
        do
        {
          if (*(_QWORD *)v267 != v187)
            objc_enumerationMutation(v228);
          v189 = *(void **)(*((_QWORD *)&v266 + 1) + 8 * v188);
          if ((_DWORD)v186 == objc_msgSend((id)objc_msgSend(v189, "index"), "unsignedIntValue"))
          {
            OZARPersonAnchorElement::setIsPersonInScene((OZARPersonAnchorElement *)v183, &v283, 1);
            objc_msgSend(v189, "simdTransform");
            OZTransformNode::setTranslation((OZTransformNode *)v183, v190, v191, v192, &v283);
            if (objc_msgSend(v189, "boundingBox"))
            {
              objc_msgSend((id)objc_msgSend(v189, "boundingBox"), "CGRectValue");
              *(_QWORD *)&v262 = v193;
              *((double *)&v262 + 1) = v194 - v195;
              *(_QWORD *)&v263 = v196;
              *((double *)&v263 + 1) = v195;
              OZARPersonAnchorElement::setBoundingBox(v183, (double *)&v262, (uint64_t)&v283);
            }
            if (objc_msgSend(v189, "worldSize"))
            {
              objc_msgSend((id)objc_msgSend(v189, "worldSize"), "CGSizeValue");
              v277.f64[0] = v197;
              v277.f64[1] = v198;
              OZARPersonAnchorElement::setSize((uint64_t)v183, v277.f64, (uint64_t)&v283);
            }
            v199 = v187;
            v200 = v186;
            v201 = 0;
            v254 = xmmword_1B30508F0;
            v255 = xmmword_1B35614C0;
            v256[0] = 9;
            do
            {
              v202 = *((_QWORD *)&v254 + v201);
              objc_msgSend(v189, "simdTransform:", v202);
              v203 = 0;
              v258 = v204;
              v259 = v205;
              v206 = &v284;
              v260 = v207;
              v261 = v208;
              do
              {
                for (n = 0; n != 4; ++n)
                  *((double *)v206 + n) = *(float *)((unint64_t)(&v258 + n) & 0xFFFFFFFFFFFFFFF3 | (4 * (v203 & 3)));
                ++v203;
                v206 += 2;
              }
              while (v203 != 4);
              OZARPersonAnchorElement::setTransform((OZARPersonAnchorElement *)v183, &v283, &v284, v202);
              ++v201;
            }
            while (v201 != 5);
            v186 = v200;
            v187 = v199;
            v185 = v227;
          }
          ++v188;
        }
        while (v188 != v185);
        v185 = objc_msgSend(v228, "countByEnumeratingWithState:objects:count:", &v266, v288, 16);
      }
      while (v185);
    }
    OZObject::iterator_t<OZARPersonAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)&v271);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v281);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v273);

  return 11;
}

void PCMatrix44Tmpl<double>::setPerspectiveForRotatedViewportWithIntrinsics(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  __int128 v14;
  __int128 v15;
  _OWORD v16[4];
  uint64_t v17;

  v14 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v14;
  v15 = *(_OWORD *)(a2 + 48);
  v16[2] = *(_OWORD *)(a2 + 32);
  v16[3] = v15;
  v17 = *(_QWORD *)(a2 + 64);
  PCMatrix33Tmpl<double>::adjustIntrinsicsForOrientationAndViewport((double *)v16, a3, a4, a5, a6, a7);
  PCMatrix44Tmpl<double>::setPerspectiveForViewportWithIntrinsics(a1, (double *)v16, a4, a5, a8, a9);
}

void setUpCamera(OZScene *a1, const simd_float4x4 *a2, const simd_float4x4 *a3, const simd_float4x4 *a4, double a5, double a6, double *a7)
{
  CMTime *v14;
  unsigned int ActiveCamera;
  void *Node;
  OZSceneNode *SceneNode;
  OZChannelBase *v18;
  uint64_t NextUniqueID;
  double v20;
  long double v21;
  float v22;
  float32x4_t v23;
  uint64_t v24;
  simd_float4 v25;
  simd_float4 v26;
  simd_float4 v27;
  __int128 *v28;
  uint64_t i;
  _BOOL8 Transformation;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CMTime v36;
  PCSharedCount v37;
  PCSharedCount v38;
  __int128 v39;
  double v40;
  PCString v41[2];
  simd_float4 v42;
  simd_float4 v43;
  _BYTE v44[24];
  __int128 v45;
  uint64_t v46;
  __int128 v47[8];

  v14 = (CMTime *)MEMORY[0x1E0CA2E68];
  ActiveCamera = OZScene::getActiveCamera(a1, MEMORY[0x1E0CA2E68]);
  Node = OZScene::getNode(a1, ActiveCamera);
  if (!Node
  {
    v18 = (OZChannelBase *)PCString::PCString(v41, "Motion Camera");
    NextUniqueID = OZChannelBase::getNextUniqueID(v18);
    v47[0] = xmmword_1B355CF40;
    SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)v47, (uint64_t)v41, NextUniqueID);
    PCString::~PCString(v41);
    (*(void (**)(OZSceneNode *, char *, _QWORD))(*(_QWORD *)SceneNode + 1136))(SceneNode, (char *)a1 + 1352, 0);
    OZScene::addRootNode(a1, SceneNode);
  }
  (*(void (**)(_QWORD *, CMTime *, _QWORD, double))(*((_QWORD *)SceneNode + 819) + 712))((_QWORD *)SceneNode + 819, v14, 0, 0.0);
  (*(void (**)(_QWORD *, CMTime *, _QWORD, double))(*((_QWORD *)SceneNode + 870) + 712))((_QWORD *)SceneNode + 870, v14, 0, a5);
  (*(void (**)(_QWORD *, CMTime *, _QWORD, double))(*((_QWORD *)SceneNode + 889) + 712))((_QWORD *)SceneNode + 889, v14, 0, a6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)SceneNode + 169) + 96))((_QWORD *)SceneNode + 169, 0, 1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)SceneNode + 188) + 96))((_QWORD *)SceneNode + 188, 0, 1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)SceneNode + 244) + 96))((_QWORD *)SceneNode + 244, 0, 1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)SceneNode + 280) + 96))((_QWORD *)SceneNode + 280, 0, 1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)SceneNode + 299) + 96))((_QWORD *)SceneNode + 299, 0, 1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)SceneNode + 318) + 96))((_QWORD *)SceneNode + 318, 0, 1);
  v20 = 1.0;
  v21 = atan(1.0 / a2->columns[0].f32[0]);
  (*(void (**)(_QWORD *, CMTime *, _QWORD, long double))(*((_QWORD *)SceneNode + 851) + 712))((_QWORD *)SceneNode + 851, v14, 0, (v21 + v21) * 180.0 / 3.14159265);
  v36 = *v14;
  OZCamera::cameraAtTime(SceneNode, &v36, (PCSharedCount *)v47);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v37, (const PCSharedCount *)v47);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v47 + 1);
  if (v37.var0)
    v20 = (*(double (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v37.var0 + 248))(v37.var0, 0);
  if (a7)
    *a7 = v20;
  v22 = v20;
  v23 = vmulq_n_f32(vsubq_f32((float32x4_t)a3->columns[3], (float32x4_t)a4->columns[3]), v22);
  OZTransformNode::setTranslation((OZTransformNode *)SceneNode, v23.f32[0], v23.f32[1], v23.f32[2], MEMORY[0x1E0CA2E68]);
  v24 = 0;
  v25 = a3->columns[1];
  v26 = a3->columns[2];
  v27 = a3->columns[3];
  *(simd_float4 *)&v41[0].var0 = a3->columns[0];
  v42 = v25;
  v43 = v26;
  *(simd_float4 *)v44 = v27;
  v28 = v47;
  do
  {
    for (i = 0; i != 4; ++i)
      *((double *)v28 + i) = *(float *)((unint64_t)&v41[2 * i] & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    ++v24;
    v28 += 2;
  }
  while (v24 != 4);
  v42 = 0u;
  v43 = 0u;
  *(_OWORD *)&v41[0].var0 = 0u;
  *(_OWORD *)&v44[8] = 0u;
  v45 = 0u;
  v46 = 0;
  *(_DWORD *)v44 = 4;
  Transformation = PCMatrix44Tmpl<double>::getTransformation(v47, (uint64_t)v41);
  _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Application/OZSceneController.mm", 752, v31, v32, v33, v34, v35);
  v39 = *(_OWORD *)&v44[8];
  v40 = *(double *)&v45 + 0.0;
  OZTransformNode::setRotation(SceneNode, (double *)&v39, MEMORY[0x1E0CA2E68]);
  PCSharedCount::~PCSharedCount(&v38);
}

void sub_1B2F32704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
  PCSharedCount *v19;

  PCSharedCount::~PCSharedCount(v19 + 1);
  _Unwind_Resume(a1);
}

uint64_t *SetUpEnvironmentMeshNode(uint64_t *result, SCNNode *a2, float a3)
{
  uint64_t *v5;
  void *v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9[4];
  uint64_t v10;

  if (a2)
  {
    v5 = result;
    OZScene::begin_t<OZEnvironmentMeshSceneElement,false,true>(result, (uint64_t)v9);
    memset(v7, 0, sizeof(v7));
    v8 = 1065353216;
    while ((uint64_t *)v9[0] != v5 + 150)
    {
      if (v9[0] == v9[2])
      {
        v6 = 0;
      }
      else
      {
        v6 = *(void **)(v9[0] + 16);
        if (v6)
      }
      OZEnvironmentMeshSceneElement::setMeshNode((OZEnvironmentMeshSceneElement *)v6, a2, a3);
      OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++(v9);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v7);
    return (uint64_t *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v10);
  }
  return result;
}

void sub_1B2F32824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZXApplyARFrameInfo(uint64_t *a1, const simd_float4x4 *a2, const simd_float4x4 *a3, double a4, double a5, const OZARFrameInfo *a6)
{
  uint64_t v6;
  OZScene *v7;
  double v13;
  float v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v21;
  const CMTime *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const void *v26;
  char *v27;
  int v28;
  int v29;
  int ValueAsInt;
  int v31;
  _DWORD *v32;
  BOOL v33;
  char v34;
  BOOL v35;
  char v36;
  int32x4_t *v37;
  int32x4_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t i;
  unint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float v56;
  const OZARFrameInfo *v57;
  id obj;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  int8x16_t v63;
  int8x16_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  double v69;
  int32x4_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  _BYTE v75[32];
  int v76;
  uint64_t v77[4];
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  char v86;
  _BYTE v87[32];
  int v88;
  uint64_t v89[4];
  uint64_t v90;
  uint64_t *v91;
  _QWORD *v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[24];
  __int128 v97;
  uint64_t v98;
  __int128 v99[8];
  float64x2_t v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 7;
  v6 = *a1;
  if (!*a1)
    return 7;
  v7 = *(OZScene **)(v6 + 24);
  if (!v7)
    return 7;
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders(*(_QWORD *)(v6 + 24), 1);
  v69 = 1.0;
  setUpCamera(v7, a2, a3, (const simd_float4x4 *)((char *)a6 + 32), a4, a5, &v69);
  OZScene::setVideoOrientation((uint64_t)v7, *((_DWORD *)a6 + 30));
  v13 = v69;
  obj = (id)*((_QWORD *)a6 + 14);
  if (objc_msgSend(obj, "count"))
  {
    v92[1] = 0;
    v92[0] = 0;
    v91 = (uint64_t *)v92;
    OZScene::begin_t<OZARPlaneAnchorElement,false,true>((uint64_t *)v7, (uint64_t)v89);
    v14 = v13;
    v62 = v14;
    v15 = *((_QWORD *)v7 + 151);
    memset(v87, 0, sizeof(v87));
    v88 = 1065353216;
    v83 = (_QWORD *)((char *)v7 + 1200);
    v84 = v15;
    v85 = (_QWORD *)((char *)v7 + 1200);
    v86 = 0;
    while ((_QWORD *)v89[0] != v83)
    {
      v17 = v16[6103];
      v18 = v16[6104];
      v19 = v16[6105];
      if (v17 | v16[6102] | v18 | v19)
      {
        LODWORD(v99[0]) = v16[6102];
        *(_QWORD *)((char *)v99 + 4) = __PAIR64__(v18, v17);
        HIDWORD(v99[0]) = v19;
        std::__tree<PCUUID>::__emplace_unique_key_args<PCUUID,PCUUID>(&v91, (unsigned int *)v99, v99);
      }
      OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++(v89);
    }
    v57 = a6;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v101, 16);
    if (v21)
    {
      v59 = *(_QWORD *)v80;
      v22 = (const CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        v23 = 0;
        v60 = v21;
        do
        {
          if (*(_QWORD *)v80 != v59)
            objc_enumerationMutation(obj);
          v61 = v23;
          v24 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * v23);
          OZScene::begin_t<OZARPlaneAnchorElement,false,true>((uint64_t *)v7, (uint64_t)v77);
          v25 = *((_QWORD *)v7 + 151);
          memset(v75, 0, sizeof(v75));
          v76 = 1065353216;
          v71 = (_QWORD *)((char *)v7 + 1200);
          v72 = v25;
          v73 = (_QWORD *)((char *)v7 + 1200);
          v74 = 0;
          while ((_QWORD *)v77[0] != v71)
          {
            if (v77[0] == v77[2] || (v26 = *(const void **)(v77[0] + 16)) == 0)
              v27 = 0;
            else
            PCUUIDFromNSUUID((NSUUID *)objc_msgSend(v24, "identifier"), (uint64_t)&v70);
            v28 = objc_msgSend((id)objc_msgSend(v24, "alignment"), "intValue");
            v29 = objc_msgSend((id)objc_msgSend(v24, "classification"), "intValue");
            ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v27 + 24808), v22, 0.0);
            v31 = OZChannel::getValueAsInt((OZChannel *)(v27 + 24552), v22, 0.0);
            v32 = std::__tree<PCUUID>::find<PCUUID>((uint64_t)&v91, (unsigned int *)&v70);
            if (ValueAsInt)
              v33 = ValueAsInt - 1 == v28;
            else
              v33 = 1;
            v34 = !v33;
            if (v31)
              v35 = v29 == v31;
            else
              v35 = 1;
            v36 = !v35;
            v37 = (int32x4_t *)(v27 + 24408);
            v38 = *(int32x4_t *)(v27 + 24408);
            if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL))&& (v34 & 1) == 0&& v92 == (_QWORD **)v32&& (v36 & 1) == 0)
            {
              *v37 = v70;
              std::__tree<PCUUID>::__emplace_unique_key_args<PCUUID,PCUUID>(&v91, (unsigned int *)&v70, &v70);
              v38 = *v37;
            }
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v38, v70)))) & 1) == 0)
            {
              objc_msgSend(v24, "simdTransform");
              v65 = v40;
              v66 = v39;
              v67 = v42;
              v68 = v41;
              objc_msgSend((id)objc_msgSend(v24, "center"), "PCSIMDFloat3Value");
              v64 = v43;
              objc_msgSend((id)objc_msgSend(v24, "extent"), "PCSIMDFloat3Value");
              v63 = v44;
              v45 = objc_msgSend((id)objc_msgSend(v24, "alignment"), "intValue");
              v100 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v63.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), v62));
              OZARPlaneAnchorElement::setPlaneSize((uint64_t)v27, v22, v100.f64);
              v46 = 0;
              v93 = v66;
              v94 = v65;
              v47 = v99;
              v95 = v68;
              *(_OWORD *)v96 = v67;
              do
              {
                for (i = 0; i != 4; ++i)
                  *((double *)v47 + i) = *(float *)((unint64_t)(&v93 + i) & 0xFFFFFFFFFFFFFFF3 | (4 * (v46 & 3)));
                ++v46;
                v47 += 2;
              }
              while (v46 != 4);
              v94 = 0u;
              v95 = 0u;
              v93 = 0u;
              *(_DWORD *)v96 = 4;
              *(_OWORD *)&v96[8] = 0u;
              v97 = 0u;
              v98 = 0;
              PCMatrix44Tmpl<double>::getTransformation(v99, (uint64_t)&v93);
              *(float *)&v49 = -*(float *)&v64.i32[2];
              HIDWORD(v49) = v64.i32[2];
              v50 = vextq_s8(v64, v64, 4uLL).u64[0];
              if (v45 == 1)
                v49 = v50;
              v51 = *(float *)&v49;
              v52 = *((float *)&v49 + 1);
              if (v45 != 1)
                v52 = 0.0;
              OZTransformNode::setTranslation((OZTransformNode *)v27, (*(double *)&v93 + *(float *)v64.i32) * v62, (*((double *)&v93 + 1) + v51) * v62, (*(double *)&v94 + v52) * v62, v22);
              if (objc_msgSend((id)objc_msgSend(v24, "alignment"), "intValue") == 2)
              {
                v53 = 0.0;
                v54 = *(double *)&v96[16];
                v55 = 0.0;
              }
              else
              {
                v54 = *(double *)&v96[16];
                v53 = *(double *)&v96[8] + 1.57;
                v55 = *(double *)&v97;
              }
              OZTransformNode::setRotation((OZTransformNode *)v27, v53, v54, v55, v22);
            }
            OZObject::iterator_t<OZARPlaneAnchorElement,false,true,OZObject::defaultValidator>::operator++(v77);
          }
          std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v75);
          std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v78);
          v23 = v61 + 1;
        }
        while (v61 + 1 != v60);
        v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v101, 16);
      }
      while (v21);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v87);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v90);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v91, v92[0]);
    a6 = v57;
  }
  v56 = v69;
  SetUpEnvironmentMeshNode((uint64_t *)v7, *((SCNNode **)a6 + 17), v56);
  return 11;
}

void sub_1B2F32E68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a10);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&STACK[0x220]);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&STACK[0x248], (_QWORD *)STACK[0x250]);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B2F32E20);
  }
  _Unwind_Resume(a1);
}

uint64_t OZXSetSceneSettings(OZScene *a1, NSDictionary *a2)
{
  uint64_t result;
  OZNotificationManager *v5;
  uint64_t v6;
  const void **v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  BOOL v10;
  char v11;
  NSUInteger v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  OZChannelBase *TargetChannelForProxy;
  OZChannelBase *v17;
  const void *ObjectManipulator;
  OZRigWidget *v19;
  OZRigWidget *v20;
  uint64_t CurrentSnapshot;
  NSUInteger v22;
  OZNotificationManager *v23;
  OZDocument **v24;
  uint64_t v25;
  const void **v26;
  PCString v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = 11;
  v32 = 11;
  if (a1)
  {
    v5 = *(OZNotificationManager **)(*((_QWORD *)a1 + 198) + 168);
    if (v5)
      OZNotificationManager::processNotifications(v5);
    v6 = *((_QWORD *)a1 + 108);
    if (v6)
    {
      v24 = (OZDocument **)a1;
      v7 = *(const void ***)v6;
      if (*(_QWORD *)v6 != *(_QWORD *)(v6 + 8))
      {
        v25 = v6;
        do
        {
          v8 = (OZChannelBase *)*v7;
          if (*v7)
          else
            v9 = 0;
          v26 = v7;
          v10 = OZChannelBase::testFlag(v8, 2);
          if (v9)
            v11 = v10;
          else
            v11 = 1;
          if ((v11 & 1) == 0)
          {
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v12 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
            if (v12)
            {
              v13 = *(_QWORD *)v29;
              do
              {
                v14 = 0;
                do
                {
                  if (*(_QWORD *)v29 != v13)
                    objc_enumerationMutation(a2);
                  v15 = *(const __CFString **)(*((_QWORD *)&v28 + 1) + 8 * v14);
                  v27.var0 = 0;
                  PCString::set(&v27, v15);
                  if (!PCString::compare(&v9->var4, &v27))
                  {
                    TargetChannelForProxy = OZPublishSettings::getTargetChannelForProxy((OZPublishSettings *)(v24 + 90), v9);
                    v17 = TargetChannelForProxy;
                    if (TargetChannelForProxy)
                    {
                      if (TargetChannelForProxy != v8)
                      {
                        OZXSetValueForChannel(TargetChannelForProxy, (uint64_t)v15, a2, &v32);
                        ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v17);
                        if (ObjectManipulator)
                        {
                          if (v19)
                          {
                            v20 = v19;
                            if (*((OZChannelBase **)v19 + 136) == v17)
                            {
                              CurrentSnapshot = OZRigWidget::getCurrentSnapshot((OZChannel **)v19);
                              if (CurrentSnapshot)
                                OZRigWidget::setActiveSnapshot(v20, *(_DWORD *)(CurrentSnapshot + 32), 1);
                            }
                          }
                        }
                      }
                    }
                  }
                  PCString::~PCString(&v27);
                  ++v14;
                }
                while (v12 != v14);
                v22 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
                v12 = v22;
              }
              while (v22);
            }
          }
          v7 = v26 + 1;
        }
        while (v26 + 1 != *(const void ***)(v25 + 8));
      }
      OZDocument::postNotification(v24[198], 12);
      v23 = (OZNotificationManager *)*((_QWORD *)v24[198] + 21);
      if (v23)
        OZNotificationManager::processNotifications(v23);
      OZScene::dirty((OZScene *)v24);
    }
    return v32;
  }
  return result;
}

void sub_1B2F33188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B2F3314CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZXSetEnvironmentMap(void *a1, CGImage *a2)
{
  OZScene *v2;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v2 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 7;
  OZScene::setCustomEnvironmentMap(v2, a2);
  return 11;
}

void sub_1B2F3321C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F33200);
}

uint64_t OZXResetScene(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  const void *v4;
  OZ3DEngineSceneElement *v5;
  _BYTE v7[32];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD v13[2];
  int v14;
  _QWORD v15[4];
  uint64_t v16;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (!v1)
    return 7;
  OZScene::begin_t<OZ3DEngineSceneElement,false,true>(*(uint64_t **)(*(_QWORD *)a1 + 24), (uint64_t)v15);
  v2 = *(_QWORD *)(v1 + 1208);
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v9 = v1 + 1200;
  v10 = v2;
  v11 = v1 + 1200;
  v12 = 0;
  for (i = v15[0]; v15[0] != v9; i = v15[0])
  {
    if (i != v15[2])
    {
      v4 = *(const void **)(i + 16);
      if (v4)
      {
        if (v5)
          OZ3DEngineSceneElement::resetLastActiveState(v5);
      }
    }
    OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t)v15, (uint64_t)v7);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v8);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  return 11;
}

void sub_1B2F33344(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F33318);
}

uint64_t *OZScene::begin_t<OZARFaceAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2F333F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

_QWORD *OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

char *std::__tree<PCUUID>::__emplace_unique_key_args<PCUUID,PCUUID>(uint64_t **a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<PCUUID>::__find_equal<PCUUID>((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<PCUUID>::__find_equal<PCUUID>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    v9 = a3[3];
    while (1)
    {
      v10 = v4;
      v11 = *((_DWORD *)v4 + 7);
      if (v6 != v11)
        break;
      v12 = *((_DWORD *)v10 + 8);
      if (v7 == v12)
      {
        v13 = *((_DWORD *)v10 + 9);
        v14 = v8 >= v13;
        if (v8 == v13)
          v14 = v9 >= *((_DWORD *)v10 + 10);
        if (!v14)
          goto LABEL_18;
        v15 = *((_DWORD *)v10 + 9);
        v16 = v15 >= v8;
        if (v15 != v8)
          goto LABEL_14;
        if (*((_DWORD *)v10 + 10) >= v9)
          goto LABEL_23;
LABEL_15:
        result = v10 + 1;
        v4 = (uint64_t *)v10[1];
        if (!v4)
          goto LABEL_23;
      }
      else
      {
        if (v7 >= v12)
        {
          if (v12 >= v7)
            goto LABEL_23;
          goto LABEL_15;
        }
LABEL_18:
        v4 = (uint64_t *)*v10;
        result = v10;
        if (!*v10)
          goto LABEL_23;
      }
    }
    if (v6 >= v11)
    {
      v16 = v11 >= v6;
LABEL_14:
      if (v16)
        goto LABEL_23;
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  v10 = result;
LABEL_23:
  *a2 = v10;
  return result;
}

_DWORD *std::__tree<PCUUID>::find<PCUUID>(uint64_t a1, unsigned int *a2)
{
  _DWORD *v3;
  _DWORD *result;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (_DWORD *)(a1 + 8);
  result = std::__tree<PCUUID>::__lower_bound<PCUUID>(a1, a2, *(_DWORD **)(a1 + 8), (_DWORD *)(a1 + 8));
  if (v3 == result)
    return v3;
  v5 = result[7];
  v6 = *a2 >= v5;
  if (*a2 == v5)
  {
    v7 = a2[1];
    v8 = result[8];
    v6 = v7 >= v8;
    if (v7 == v8)
    {
      v9 = a2[2];
      v10 = result[9];
      v6 = v9 >= v10;
      if (v9 == v10)
        v6 = a2[3] >= result[10];
    }
  }
  if (!v6)
    return v3;
  return result;
}

_DWORD *std::__tree<PCUUID>::__lower_bound<PCUUID>(uint64_t a1, unsigned int *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;

  result = a4;
  if (a3)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    do
    {
      v8 = a3[7];
      v9 = v8 >= v5;
      if (v8 == v5)
      {
        v10 = a3[8];
        v9 = v10 >= v6;
        if (v10 == v6)
        {
          v11 = a3[9];
          v9 = v11 >= v7;
          if (v11 == v7)
            v9 = a3[10] >= a2[3];
        }
      }
      v12 = !v9;
      v13 = v12 == 0;
      if (v12)
        v14 = a3 + 2;
      else
        v14 = a3;
      if (v13)
        result = a3;
      a3 = (_DWORD *)*v14;
    }
    while (*v14);
  }
  return result;
}

uint64_t *OZScene::begin_t<OZEnvironmentMeshSceneElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZEnvironmentMeshSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2F338FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZARPersonAnchorElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZARPersonAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZARPersonAnchorElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2F3398C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZARPersonAnchorElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZARFaceAnchorElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

double PCMatrix33Tmpl<double>::adjustIntrinsicsForOrientationAndViewport(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v7;
  double i;
  double v12;
  double v13;

  v7 = a5;
  i = a2;
  v12 = a6 - (a1[5] + 0.5);
  a1[2] = a1[2] + 0.5;
  a1[5] = v12;
  PCMatrix33Tmpl<double>::adjustIntrinsicsByRotating(a1, a2, a5, a6);
  if (i < 0.0 || i >= 6.28318531)
  {
    for (i = fmod(i, 6.28318531); i < 0.0; i = i + 6.28318531)
      ;
  }
  if (fabs(i + -1.57079633) >= 0.785398163 && fabs(i + -4.71238898) >= 0.785398163)
  {
    v13 = v7;
    v7 = a6;
  }
  else
  {
    v13 = a6;
  }
  return PCMatrix33Tmpl<double>::adjustIntrinsicsForViewport(a1, a3, a4, v13, v7);
}

double PCMatrix44Tmpl<double>::setPerspectiveForViewportWithIntrinsics(uint64_t a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double result;

  v6 = 1.0 - (a2[2] + a2[2]) / a3;
  v7 = 1.0 - (a2[5] + a2[5]) / a4;
  v8 = (a2[4] + a2[4]) / a4;
  *(double *)a1 = (*a2 + *a2) / a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(double *)(a1 + 16) = v6;
  *(double *)(a1 + 40) = v8;
  *(double *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(double *)(a1 + 80) = a6 / (a5 - a6);
  *(double *)(a1 + 88) = a5 * a6 / (a5 - a6);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = xmmword_1B3058A90;
  return result;
}

void PCMatrix33Tmpl<double>::adjustIntrinsicsByRotating(double *a1, double i, double a3, double a4)
{
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;

  if (i < 0.0 || i >= 6.28318531)
  {
    for (i = fmod(i, 6.28318531); i < 0.0; i = i + 6.28318531)
      ;
  }
  if (fabs(i) >= 0.785398163)
  {
    v7 = a1[2];
    v8 = *a1;
    v10 = *((_QWORD *)a1 + 4);
    v9 = a1[5];
    if (fabs(i + -1.57079633) >= 0.785398163)
    {
      if (fabs(i + -3.14159265) >= 0.785398163)
      {
        if (fabs(i + -4.71238898) >= 0.785398163)
          return;
        *(_QWORD *)a1 = v10;
        a1[4] = v8;
        v9 = a4 - v9;
      }
      else
      {
        v11 = a3 - v7;
        v7 = a4 - v9;
        v9 = v11;
      }
    }
    else
    {
      *(_QWORD *)a1 = v10;
      a1[4] = v8;
      v7 = a3 - v7;
    }
    a1[2] = v9;
    a1[5] = v7;
  }
}

double PCMatrix33Tmpl<double>::adjustIntrinsicsForViewport(double *a1, double result, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (vabdd_f64(a4, result) >= 0.0000001 || vabdd_f64(a5, a3) >= 0.0000001)
  {
    v5 = a1[2];
    v6 = a1[4];
    v7 = a1[5];
    v8 = result / a3 < a4 / a5;
    v9 = result / a4;
    v10 = result / a4 * v5;
    v11 = result / a4 * v7 + (result / a4 * a5 - a3) * -0.5;
    v12 = a3 / a5;
    v13 = v12 * v5 + (v12 * a4 - result) * -0.5;
    if (v8)
    {
      v14 = v12 * v7;
    }
    else
    {
      v12 = v9;
      v14 = v11;
    }
    if (!v8)
      v13 = v10;
    *a1 = *a1 * v12;
    a1[2] = v13;
    result = v6 * v12;
    a1[4] = v6 * v12;
    a1[5] = v14;
  }
  return result;
}

void sub_1B2F33E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, OZLocking *a13)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F3403C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, OZLocking *a13)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1B2F340CC()
{
  return 0;
}

void sub_1B2F34200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F342F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelMaterialRoot_Factory::getInstance(OZChannelMaterialRoot_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelMaterialRoot_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelMaterialRoot_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialRoot_Factory::_instance;
}

void OZChannelMaterialRoot::OZChannelMaterialRoot(OZChannelMaterialRoot *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelMaterialRoot_Factory::getInstance(this);
  OZChannelObjectRoot::OZChannelObjectRoot(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E65BEF90;
  *((_QWORD *)this + 2) = &unk_1E65BF328;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 201) = 0;
}

void OZChannelMaterialRoot::OZChannelMaterialRoot(OZChannelMaterialRoot *this, const OZTimeMarkerSet **a2, OZChannelFolder *a3)
{
  uint64_t v4;

  OZChannelObjectRoot::OZChannelObjectRoot(this, a2, a3);
  *(_QWORD *)v4 = &off_1E65BEF90;
  *(_QWORD *)(v4 + 16) = &unk_1E65BF328;
  *(_QWORD *)(v4 + 256) = 0;
  *(_BYTE *)(v4 + 201) = *((_BYTE *)a2 + 201);
}

void `non-virtual thunk to'OZChannelMaterialRoot::~OZChannelMaterialRoot(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
}

{
  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);
  JUMPOUT(0x1B5E29170);
}

void OZChannelMaterialRoot::~OZChannelMaterialRoot(PCString *this)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZChannelMaterialRoot::clone(const OZTimeMarkerSet **this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannelObjectRoot::OZChannelObjectRoot((OZChannelObjectRoot *)v2, this, 0);
  *(_QWORD *)v2 = &off_1E65BEF90;
  *(_QWORD *)(v2 + 16) = &unk_1E65BF328;
  *(_QWORD *)(v2 + 256) = 0;
  *(_BYTE *)(v2 + 201) = *((_BYTE *)this + 201);
  return v2;
}

void sub_1B2F34610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

const OZChannelBase *OZChannelMaterialRoot::compare(OZChannelMaterialRoot *this, const OZChannelBase *lpsrc)
{
  const OZChannelBase *result;

  if (!lpsrc)
    return 0;
  if (result)
    return (const OZChannelBase *)((__CFString *)*((_QWORD *)this + 32) == result[2].var4.var0
                                && (OZChannelFolder::compare((OZChannelFolder *)this, result) & 1) != 0);
  return result;
}

void OZChannelMaterialRoot::willModifyChannel(OZChannelMaterialRoot *this, OZChannelBase *a2, int a3)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4) & 1) == 0)
      OZChannelObjectRoot::willModifyChannel(this, a2, a3);
  }
}

OZMaterialBase *OZChannelMaterialRoot::channelValueWillBeSet(OZMaterialBase **this, OZChannel *a2, const CMTime *a3, double a4)
{
  OZMaterialBase *result;

  OZChannelObjectRootBase::channelValueWillBeSet((OZChannelObjectRootBase *)this, a2, a3, a4);
  result = this[32];
  if (result)
  {
    (*(void (**)(OZMaterialBase *, OZChannel *, const CMTime *, double))(*(_QWORD *)result + 240))(result, a2, a3, a4);
    result = this[32];
    if ((OZChannel *)((char *)result + 720) != a2 && (OZChannel *)((char *)result + 1128) != a2)
    {
      result = (OZMaterialBase *)(*(uint64_t (**)(OZMaterialBase *))(*(_QWORD *)result + 216))(result);
      if (result != (OZMaterialBase *)a2)
        return (OZMaterialBase *)OZMaterialBase::setIsEdited(this[32], 1u, 0);
    }
  }
  return result;
}

uint64_t OZChannelMaterialRoot::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZChannelObjectRoot::parseEnd(this, a2);
  OZChannelBase::resetFlag((OZChannelBase *)this, 32, 0);
  return v3;
}

uint64_t `non-virtual thunk to'OZChannelMaterialRoot::parseEnd(OZChannelMaterialRoot *this, PCSerializerReadStream *a2)
{
  OZChannelBase *v2;
  uint64_t v3;

  v2 = (OZChannelBase *)((char *)this - 16);
  v3 = OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this - 16), a2);
  OZChannelBase::resetFlag(v2, 32, 0);
  return v3;
}

BOOL OZChannelMaterialRoot::isObjectSelected(OZChannelBase *this)
{
  const void *ObjectManipulator;
  _QWORD *v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  OZChannelBase *v7;

  ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator)
    return OZChannelObjectRoot::isObjectSelected(this);
  if (!v3)
    return OZChannelObjectRoot::isObjectSelected(this);
  v4 = (const void *)v3[160];
  if (!v4)
    return OZChannelObjectRoot::isObjectSelected(this);
  if (!v5)
    return OZChannelObjectRoot::isObjectSelected(this);
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 120))(v5);
  v7 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 640))(v6);
  return OZChannelBase::testFlag(v7, 1);
}

void std::__call_once_param<std::tuple<OZChannelMaterialRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelMaterialRoot_Factory *v0;

  v0 = (OZChannelMaterialRoot_Factory *)operator new();
  OZChannelMaterialRoot_Factory::OZChannelMaterialRoot_Factory(v0);
  OZChannelMaterialRoot_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F348FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialRoot_Factory::OZChannelMaterialRoot_Factory(OZChannelMaterialRoot_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355E9A0;
  v4 = xmmword_1B3561520;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65BF398;
  *((_QWORD *)this + 16) = &unk_1E65BF468;
}

void sub_1B2F3499C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelMaterialRoot_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = operator new();
  OZChannelObjectRoot::OZChannelObjectRoot((OZChannelObjectRoot *)v6, this, a2, a3);
  *(_QWORD *)v6 = &off_1E65BEF90;
  *(_QWORD *)(v6 + 16) = &unk_1E65BF328;
  *(_QWORD *)(v6 + 256) = 0;
  *(_BYTE *)(v6 + 201) = 0;
  return v6;
}

void sub_1B2F34A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

uint64_t OZChannelMaterialRoot_Factory::createCopy(OZChannelMaterialRoot_Factory *this, OZFactoryBase *a2)
{
  uint64_t v3;
  const OZTimeMarkerSet **v4;

  v3 = operator new();
  OZChannelObjectRoot::OZChannelObjectRoot((OZChannelObjectRoot *)v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65BEF90;
  *(_QWORD *)(v3 + 16) = &unk_1E65BF328;
  *(_QWORD *)(v3 + 256) = 0;
  *(_BYTE *)(v3 + 201) = *((_BYTE *)v4 + 201);
  return v3;
}

void sub_1B2F34AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

uint64_t OZChannelMaterialRoot_Factory::createChannelCopy(OZChannelMaterialRoot_Factory *this, OZChannelBase *a2)
{
  uint64_t v3;
  const OZTimeMarkerSet **v4;

  v3 = operator new();
  OZChannelObjectRoot::OZChannelObjectRoot((OZChannelObjectRoot *)v3, v4, 0);
  *(_QWORD *)v3 = &off_1E65BEF90;
  *(_QWORD *)(v3 + 16) = &unk_1E65BF328;
  *(_QWORD *)(v3 + 256) = 0;
  *(_BYTE *)(v3 + 201) = *((_BYTE *)v4 + 201);
  return v3;
}

void sub_1B2F34B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40A0E50374);
  _Unwind_Resume(a1);
}

FxBitmap *OZFxPlugImageConverter::convertImageWithROI(unsigned int *a1, int a2, _DWORD *a3, int *a4, unsigned int a5, int a6, double a7)
{
  uint64_t v13;
  FxBitmapPriv *v14;
  uint64_t v15;
  PCBitmap *v16;
  PGTexture *v17;
  PGTexture *v18;
  BOOL v19;
  _BOOL4 v20;
  unsigned int BytesPerRow;
  unsigned int v22;
  size_t v23;
  void *v24;
  const void *v25;
  size_t v26;
  FxBitmap *v27;
  FxTexture *v28;
  HGGLBlendingInfo *Name;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  ProGL::Private::TextureImpl *Format;
  __int32 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  FxBitmap *v50;
  const unsigned __int8 *v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int8x8_t v58;
  int16x8_t v59;
  const unsigned __int8 *v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  int *v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  _BYTE *v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  __int16 *v80;
  int v81;
  __int16 v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  int *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v94;
  int v95;
  FxBitmapPriv *v96;
  char v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD v101[7];
  char v102;
  double v103;
  double v104;
  double v105;
  FxBitmap v106;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char v111;
  double v112;
  FxBitmap v113;
  uint64_t v114;
  _QWORD v115[4];
  __int128 v116;
  uint64_t v117;
  char v118;
  _BYTE v119[7];
  double v120;
  _QWORD v121[4];
  __int128 v122;
  uint64_t v123;
  char v124;
  double v125;
  _QWORD v126[4];
  __int128 v127;
  uint64_t v128;
  char v129;
  double v130;
  _DWORD v131[3];

  if (!a1)
    return 0;
  v13 = a4[2];
  v14 = (FxBitmapPriv *)a4[3];
  v15 = (int)v13;
  v99 = a5;
  v100 = a1[10];
  v98 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 48))(a1);
  v18 = v17;
  v19 = a2 == 1;
  v20 = a2 == 1;
  if (v19)
  {
    v95 = (int)v14;
    v96 = v14;
    if (v16)
    {
      BytesPerRow = PCBitmap::getBytesPerRow(v16);
      v22 = a1[9];
      if ((a6 & 1) != 0 || v22 != a5)
      {
        v126[0] = (int)v13;
        v126[1] = v14;
        v126[2] = v99;
        v126[3] = v100;
        v127 = xmmword_1B3056A60;
        v128 = 2;
        v129 = v98;
        v130 = a7;
        v50 = -[FxBitmap initWithInfo:]([FxBitmap alloc], "initWithInfo:", v126);
        v27 = v50;
        if (v22 == a5)
        {
          if (a6)
          {
            v63 = -[FxBitmap rowBytes](v50, "rowBytes");
            v64 = -[FxBitmap dataPtr](v27, "dataPtr");
            v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 8) + 16))(*((_QWORD *)v16 + 8));
            if (v95)
            {
              v66 = 0;
              LODWORD(v67) = 0;
              do
              {
                v68 = v64 + (v67 * v63);
                if (a5 == 8)
                {
                  if ((_DWORD)v13)
                  {
                    v73 = (_BYTE *)(v65 + 1 + v66);
                    v74 = 1;
                    do
                    {
                      *(_BYTE *)v68 = v73[2];
                      *(_BYTE *)(v68 + 1) = *(v73 - 1);
                      *(_BYTE *)(v68 + 2) = *v73;
                      v75 = v74;
                      *(_BYTE *)(v68 + 3) = v73[1];
                      ++v74;
                      v73 += 4;
                      v68 += 4;
                    }
                    while (v75 < (int)v13);
                  }
                }
                else if (a5 == 32 && (_DWORD)v13)
                {
                  v69 = (int *)(v65 + 8 + v66);
                  v70 = 1;
                  do
                  {
                    *(_DWORD *)v68 = v69[1];
                    *(_DWORD *)(v68 + 4) = *(v69 - 2);
                    *(_DWORD *)(v68 + 8) = *(v69 - 1);
                    v71 = v70;
                    v72 = *v69;
                    v69 += 4;
                    *(_DWORD *)(v68 + 12) = v72;
                    ++v70;
                    v68 += 16;
                  }
                  while (v71 < (int)v13);
                }
                v67 = (v67 + 1);
                v66 += BytesPerRow;
              }
              while (v67 < (unint64_t)v96);
            }
          }
        }
        else
        {
          LODWORD(v113.super.super.isa) = 50462976;
          OZFxPlugImageConverter::convertBitmapDepthWithChannelMap(v16, (PCBitmap *)v50, &v113, v51);
        }
      }
      else
      {
        v23 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v16 + 40))(v16);
        v24 = malloc_type_malloc(v23, 0xCD794585uLL);
        v25 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 8) + 16))(*((_QWORD *)v16 + 8));
        v26 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v16 + 40))(v16);
        memcpy(v24, v25, v26);
        v121[0] = v15;
        v121[1] = v14;
        v121[2] = v99;
        v121[3] = v100;
        v122 = xmmword_1B3056A60;
        v123 = 2;
        v124 = v98;
        v125 = a7;
        v27 = -[FxBitmap initWithInfo:rowBytes:andData:]([FxBitmap alloc], "initWithInfo:rowBytes:andData:", v121, BytesPerRow, v24);
        -[FxBitmap _setOwned:](v27, "_setOwned:", 1);
      }
      v62 = a4;
    }
    else
    {
      v32 = *((_DWORD *)v17 + 10)
          * (*(unsigned int (**)(PGTexture *))(*(_QWORD *)v17 + 16))(v17)
          * (*((_DWORD *)v17 + 9) >> 3);
      (*(void (**)(PGTexture *))(*(_QWORD *)v18 + 24))(v18);
      v33 = operator new[]();
      Format = PGTexture::getFormat((ProGL::Private::TextureImpl **)v18);
      v35 = (int)Format;
      v36 = *((_DWORD *)v18 + 9);
      if (v36 == a5)
      {
        v94 = v33;
        v37 = 2 * v20;
        v38 = operator new[]();
        v39 = ((a4[1] - a3[1]) * v32);
        v40 = (int)(v99 >> 3) * (uint64_t)(4 * (*a4 - *a3));
        if (a5 == 8 && v35 == 32993)
        {
          v41 = v98;
          if ((_DWORD)v14)
          {
            v42 = 0;
            LODWORD(v43) = 0;
            v44 = v94 + v40 + v39;
            v45 = (_DWORD *)v38;
            do
            {
              if ((_DWORD)v13)
              {
                v46 = 0;
                do
                  *v45++ = *(_DWORD *)(v44 + v42 + 4 * v46++);
                while ((int)v13 > (unint64_t)v46);
              }
              v43 = (v43 + 1);
              v42 += v32;
            }
            while (v43 < (unint64_t)v14);
          }
        }
        else
        {
          v41 = v98;
          if (v35 == 6408)
          {
            if (a5 == 32)
            {
              if ((_DWORD)v14)
              {
                v83 = 0;
                v84 = 0;
                v85 = v40 + v39 + v94 + 8;
                v86 = (_DWORD *)v38;
                do
                {
                  if ((_DWORD)v13)
                  {
                    v87 = (int *)(v85 + v83);
                    v88 = v13;
                    do
                    {
                      v89 = *(v87 - 2);
                      v90 = *(v87 - 1);
                      v92 = *v87;
                      v91 = v87[1];
                      v87 += 4;
                      *v86 = v91;
                      v86[1] = v89;
                      v86[2] = v90;
                      v86[3] = v92;
                      v86 += 4;
                      --v88;
                    }
                    while (v88);
                  }
                  ++v84;
                  v83 += v32;
                }
                while (v84 != v14);
              }
            }
            else if (a5 == 16 && (_DWORD)v14)
            {
              v76 = 0;
              v77 = 0;
              v78 = v40 + v39 + v94 + 4;
              v79 = (_WORD *)v38;
              do
              {
                if ((_DWORD)v13)
                {
                  v80 = (__int16 *)(v78 + v76);
                  v81 = v13;
                  do
                  {
                    *v79 = v80[1];
                    v79[1] = *(v80 - 2);
                    v79[2] = *(v80 - 1);
                    v82 = *v80;
                    v80 += 4;
                    v79[3] = v82;
                    v79 += 4;
                    --v81;
                  }
                  while (v81);
                }
                ++v77;
                v76 += v32;
              }
              while (v77 != v14);
            }
          }
        }
        v115[0] = (int)v13;
        v115[1] = v14;
        v115[2] = v99;
        v115[3] = v100;
        v116 = xmmword_1B3056A60;
        v117 = v37;
        v118 = v41;
        *(_DWORD *)v119 = v131[0];
        *(_DWORD *)&v119[3] = *(_DWORD *)((char *)v131 + 3);
        v120 = a7;
        v27 = -[FxBitmap initWithInfo:rowBytes:andData:]([FxBitmap alloc], "initWithInfo:rowBytes:andData:", v115, v32, v38);
        v62 = a4;
        v33 = v94;
      }
      else
      {
        v52 = (char *)(v33
                     + ((a4[1] - a3[1]) * v32)
                     + (unint64_t)(((v36 >> 1) & 0x7FFFFFFC) * (*a4 - *a3)));
        if (v36 == 32)
          v53 = 16;
        else
          v53 = 5;
        if (v36 == 16)
          v54 = 13;
        else
          v54 = v53;
        v55 = PCColorSpaceCache::cgRec709Linear(Format);
        PCBitmap::PCBitmap((uint64_t)&v113, v13, v14, v54, v55, 1);
        PCBitmap::copyDataToBitmap((PCBitmap *)&v113, v52);
        v106.super._imagePriv = (FxImagePriv *)(int)v13;
        v106._bitmapPriv = v14;
        v107 = v99;
        v108 = v100;
        v109 = xmmword_1B3056A60;
        v110 = 2;
        v111 = v98;
        v112 = a7;
        v27 = -[FxBitmap initWithInfo:]([FxBitmap alloc], "initWithInfo:", &v106.super._imagePriv);
        v56.i32[0] = 6408;
        v57.i32[0] = v35;
        v58 = (int8x8_t)vceq_s32(v57, v56);
        *(int8x8_t *)v59.i8 = vbsl_s8((int8x8_t)vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v58, v58), 8uLL), 8uLL), (int8x8_t)0x2000100000003, (int8x8_t)0x3000200010000);
        LODWORD(v106.super.super.isa) = vmovn_s16(v59).u32[0];
        OZFxPlugImageConverter::convertBitmapDepthWithChannelMap((PCBitmap *)&v113, (PCBitmap *)v27, &v106, v60);
        v61 = v114;
        v113.super.super.isa = (Class)&off_1E6511638;
        v114 = 0;
        v62 = a4;
        if (v61)
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        PCImage::~PCImage(&v113.super.super.isa);
      }
      MEMORY[0x1B5E2914C](v33, 0x1000C8077774924);
    }
    v48 = (double)*v62;
    v49 = (double)v62[1];
    v47 = (double)v62[2];
    v31 = (double)v62[3];
  }
  else
  {
    if (v17)
    {
      v113.super.super.isa = 0;
      v105 = 0.0;
      v106.super.super.isa = 0;
      v104 = 0.0;
      PGTexture::getTexCoords(v17, (double *)&v113, (double *)&v106, &v105, &v104);
      v28 = [FxTexture alloc];
      v101[0] = v15;
      v101[1] = v14;
      v101[2] = v99;
      v101[3] = v100;
      v101[5] = 0;
      v101[6] = 0;
      v101[4] = 2;
      v102 = v98;
      v103 = a7;
      Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)v18 + 8);
      v27 = -[FxTexture initWithInfo:textureId:andTarget:](v28, "initWithInfo:textureId:andTarget:", v101, Name, ProGL::TextureHandle::getTarget((ProGL::Private::TextureImpl **)v18 + 8));
      v30 = *(double *)&v106.super.super.isa - *(double *)&v113.super.super.isa;
      v31 = v104 - v105;
    }
    else
    {
      v27 = 0;
      v30 = 0.0;
      v31 = 0.0;
    }
    v47 = v30 * a7;
    v48 = 0.0;
    v49 = 0.0;
  }
  -[FxImage setBounds:](v27, "setBounds:", v48, v49, v47, v31, v94);
  return v27;
}

void sub_1B2F3539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  PCBitmap::~PCBitmap((PCBitmap *)&a37);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugImageConverter::convertBitmapDepthWithChannelMap(PCBitmap *this, PCBitmap *a2, FxBitmap *a3, const unsigned __int8 *a4)
{
  if (a2)
    -[PCBitmap imageInfo](a2, "imageInfo", a3, a4);
  operator new[]();
  -[PCBitmap _setOwnedDataPtr:](a2, "_setOwnedDataPtr:");
  return PCBitmap::getBytesPerRow(this);
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  _QWORD *v6;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, a6, 0);
  *v6 = &off_1E65BF4C0;
  v6[2] = &unk_1E65BF7C8;
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *v4 = &off_1E65BF4C0;
  v4[2] = &unk_1E65BF7C8;
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelFolder_Factory::getInstance(this);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, Instance, a2, a3, a4, a5, 0);
  *(_QWORD *)this = &off_1E65BF4C0;
  *((_QWORD *)this + 2) = &unk_1E65BF7C8;
}

void OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3);
  *v3 = &off_1E65BF4C0;
  v3[2] = &unk_1E65BF7C8;
}

uint64_t OZMaterialLayerSequenceFolder::clone(const OZChannelBase *this)
{
  uint64_t v2;

  v2 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v2, this, 0);
  *(_QWORD *)v2 = &off_1E65BF4C0;
  *(_QWORD *)(v2 + 16) = &unk_1E65BF7C8;
  return v2;
}

void sub_1B2F35F04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(OZMaterialLayerSequenceFolder *this)
{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t *OZMaterialLayerSequenceFolder::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
}

uint64_t *`non-virtual thunk to'OZMaterialLayerSequenceFolder::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZFactory::setNeedsSaving(*(this - 1), (const OZFactory *)1);
}

uint64_t OZMaterialLayerSequenceFolder::writeHeader(OZMaterialLayerSequenceFolder *this, PCSerializerWriteStream *a2)
{
  const OZFactory *v4;
  uint64_t v5;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZMaterialLayerSequenceScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 110);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)this + 32);
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
    (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 160))(a2, 112, *((_QWORD *)this + 7));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v5 = OZFactory::fileRefID(*((OZFactory **)this + 1), v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t `non-virtual thunk to'OZMaterialLayerSequenceFolder::writeHeader(OZMaterialLayerSequenceFolder *this, PCSerializerWriteStream *a2)
{
  return OZMaterialLayerSequenceFolder::writeHeader((OZMaterialLayerSequenceFolder *)((char *)this - 16), a2);
}

void OZLightingStyle::getLights(OZLightingStyle *this@<X0>, void **a2@<X8>)
{
  CGColorSpace *v3;
  unint64_t v4;
  uint64_t v5;
  CGColorSpace *v6;
  unint64_t v7;
  uint64_t v8;
  CGColorSpace *v9;
  unint64_t v10;
  uint64_t v11;
  CGColorSpace *v12;
  unint64_t v13;
  uint64_t v14;
  CGColorSpace *v15;
  unint64_t v16;
  uint64_t v17;
  CGColorSpace *v18;
  unint64_t v19;
  uint64_t v20;
  CGColorSpace *v21;
  unint64_t v22;
  uint64_t v23;
  CGColorSpace *v24;
  unint64_t v25;
  uint64_t v26;
  CGColorSpace *v27;
  unint64_t v28;
  uint64_t v29;
  CGColorSpace *v30;
  unint64_t v31;
  uint64_t v32;
  CGColorSpace *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  const CMTime *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  PCException *exception;
  PCString v75;
  PCString v76;
  PCColor v77;
  __int128 v78;
  _OWORD v79[3];
  PCString v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD v83[2];

  v81 = 0;
  v82 = 0;
  v83[0] = 0;
  switch((int)this)
  {
    case 0:
      goto LABEL_93;
    case 1:
      v3 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v3);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35618F0;
      v79[0] = xmmword_1B3561900;
      v79[1] = xmmword_1B3561910;
      *(_QWORD *)&v79[2] = 0x3FB0FA8320000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Key Center - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v4 = v82;
      if (v82 >= v83[0])
      {
        v5 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v5 = v4 + 136;
      }
      v82 = v5;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561920;
      v79[0] = xmmword_1B3561930;
      v79[1] = xmmword_1B3561940;
      *(_QWORD *)&v79[2] = 0xBF81DF46A0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v43 = v82;
      if (v82 >= v83[0])
      {
        v44 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v44 = v43 + 136;
      }
      v82 = v44;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561950;
      v79[0] = xmmword_1B3561960;
      v79[1] = xmmword_1B3561970;
      *(_QWORD *)&v79[2] = 0xBF93A8CDC0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v53 = v82;
      if (v82 >= v83[0])
      {
        v54 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v54 = v53 + 136;
      }
      v82 = v54;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561980;
      v79[0] = xmmword_1B3561990;
      v79[1] = xmmword_1B35619A0;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Back");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      goto LABEL_92;
    case 2:
      LODWORD(v76.var0) = 0;
      v15 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v15);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561850;
      v79[0] = xmmword_1B3561860;
      v79[1] = xmmword_1B3561870;
      *(_QWORD *)&v79[2] = 0x3FA2C40A20000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Key Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v16 = v82;
      if (v82 >= v83[0])
      {
        v17 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v17 = v16 + 136;
      }
      v82 = v17;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561880;
      v79[0] = xmmword_1B3561760;
      v79[1] = xmmword_1B3561890;
      *(_QWORD *)&v79[2] = 0x3FB5E4B6A0000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Fill Left - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v39 = v82;
      if (v82 >= v83[0])
      {
        v40 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v40 = v39 + 136;
      }
      v82 = v40;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35618A0;
      v79[0] = xmmword_1B35618B0;
      v79[1] = xmmword_1B35618C0;
      *(_QWORD *)&v79[2] = 0x3FB41B2F80000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Fill Right - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v49 = v82;
      if (v82 >= v83[0])
      {
        v50 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v50 = v49 + 136;
      }
      v82 = v50;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35618D0;
      v79[0] = xmmword_1B35617C0;
      v79[1] = xmmword_1B35618E0;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Kick");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 3:
      LODWORD(v76.var0) = 0;
      v18 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v18);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561720;
      v79[0] = xmmword_1B35617E0;
      v79[1] = xmmword_1B3561740;
      *(_QWORD *)&v79[2] = 0x3FA6571860000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v19 = v82;
      if (v82 >= v83[0])
      {
        v20 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v20 = v19 + 136;
      }
      v82 = v20;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35617F0;
      v79[0] = xmmword_1B3561800;
      v79[1] = xmmword_1B3561810;
      *(_QWORD *)&v79[2] = 0x3FB57254E0000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Key Left - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v41 = v82;
      if (v82 >= v83[0])
      {
        v42 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v42 = v41 + 136;
      }
      v82 = v42;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561820;
      v79[0] = xmmword_1B3561830;
      v79[1] = xmmword_1B3561840;
      *(_QWORD *)&v79[2] = 0x3FB90562E0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v51 = v82;
      if (v82 >= v83[0])
      {
        v52 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v52 = v51 + 136;
      }
      v82 = v52;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35617B0;
      v79[0] = xmmword_1B35617C0;
      v79[1] = xmmword_1B35617D0;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Back");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 4:
      LODWORD(v76.var0) = 0;
      v9 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v9);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561720;
      v79[0] = xmmword_1B3561730;
      v79[1] = xmmword_1B3561740;
      *(_QWORD *)&v79[2] = 0x3FA6571860000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v10 = v82;
      if (v82 >= v83[0])
      {
        v11 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v11 = v10 + 136;
      }
      v82 = v11;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561750;
      v79[0] = xmmword_1B3561760;
      v79[1] = xmmword_1B3561770;
      *(_QWORD *)&v79[2] = 0x3FB90562E0000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v37 = v82;
      if (v82 >= v83[0])
      {
        v38 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v38 = v37 + 136;
      }
      v82 = v38;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561780;
      v79[0] = xmmword_1B3561790;
      v79[1] = xmmword_1B35617A0;
      *(_QWORD *)&v79[2] = 0x3FB57254E0000000;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Key Right - Casts Shadows");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v47 = v82;
      if (v82 >= v83[0])
      {
        v48 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v48 = v47 + 136;
      }
      v82 = v48;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35617B0;
      v79[0] = xmmword_1B35617C0;
      v79[1] = xmmword_1B35617D0;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Fill Back");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 5:
      LODWORD(v76.var0) = 0;
      v24 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v24);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35616E0;
      v79[0] = xmmword_1B35616F0;
      v79[1] = xmmword_1B3561600;
      *(_QWORD *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v25 = v82;
      if (v82 >= v83[0])
      {
        v26 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v26 = v25 + 136;
      }
      v82 = v26;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561700;
      v79[0] = xmmword_1B3561710;
      v79[1] = 0xBFF8DA7E40000000;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 6:
      LODWORD(v76.var0) = 0;
      v27 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v27);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561690;
      v79[0] = xmmword_1B35616A0;
      *(_QWORD *)&v79[2] = 0;
      v79[1] = 0x4004F1A6E0000000uLL;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Bottom");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v28 = v82;
      if (v82 >= v83[0])
      {
        v29 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v29 = v28 + 136;
      }
      v82 = v29;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561690;
      v79[0] = xmmword_1B35616B0;
      v79[1] = xmmword_1B35616C0;
      *(_QWORD *)&v79[2] = 0xC005CF4420000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v45 = v82;
      if (v82 >= v83[0])
      {
        v46 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v46 = v45 + 136;
      }
      v82 = v46;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561690;
      v79[0] = xmmword_1B35616B0;
      v79[1] = xmmword_1B35616D0;
      *(_QWORD *)&v79[2] = 0xC00BE22520000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v55 = v82;
      if (v82 >= v83[0])
      {
        v56 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v56 = v55 + 136;
      }
      v82 = v56;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561690;
      v79[0] = xmmword_1B35616B0;
      v79[1] = 0x400C5F4020000000uLL;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Back Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 7:
      LODWORD(v76.var0) = 0;
      v21 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v21);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35615E0;
      v79[0] = xmmword_1B35615F0;
      v79[1] = xmmword_1B3561600;
      *(_QWORD *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v22 = v82;
      if (v82 >= v83[0])
      {
        v23 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v23 = v22 + 136;
      }
      v82 = v23;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561670;
      v79[0] = xmmword_1B3561680;
      v79[1] = 0x3FF8DA7E40000000uLL;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Bottom");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 8:
      LODWORD(v76.var0) = 0;
      v33 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v33);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35615E0;
      v79[0] = xmmword_1B35615F0;
      v79[1] = xmmword_1B3561600;
      *(_QWORD *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v34 = v82;
      if (v82 >= v83[0])
      {
        v35 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v35 = v34 + 136;
      }
      v82 = v35;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561640;
      v79[0] = xmmword_1B3561650;
      v79[1] = xmmword_1B3561660;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Diagonal Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 9:
      LODWORD(v76.var0) = 0;
      v12 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v12);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B35615E0;
      v79[0] = xmmword_1B35615F0;
      v79[1] = xmmword_1B3561600;
      *(_QWORD *)&v79[2] = 0x406073B060000000;
      BYTE8(v79[2]) = 0;
      PCString::PCString(&v75, "Front");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v13 = v82;
      if (v82 >= v83[0])
      {
        v14 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v14 = v13 + 136;
      }
      v82 = v14;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = xmmword_1B3561610;
      v79[0] = xmmword_1B3561620;
      v79[1] = xmmword_1B3561630;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Diagonal Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 10:
      v30 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v30);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      *(_QWORD *)&v79[0] = 0;
      v78 = 0x4010000000000000uLL;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B35615A0;
      *((_QWORD *)&v79[1] + 1) = 0;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v31 = v82;
      if (v82 >= v83[0])
      {
        v32 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v32 = v31 + 136;
      }
      v82 = v32;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = 0x4010000000000000uLL;
      *(_QWORD *)&v79[0] = 0;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B35615B0;
      *(_OWORD *)((char *)&v79[1] + 8) = xmmword_1B35615D0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Left");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 < v83[0])
        goto LABEL_90;
      goto LABEL_76;
    case 11:
      v6 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
      PCColor::PCColor(&v77, 0.0, 0.0, 0.0, v6);
      memset(v79, 0, 41);
      v78 = 0u;
      PCString::PCString(&v80, "");
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      *(_QWORD *)&v79[0] = 0;
      v78 = 0x4010000000000000uLL;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B35615A0;
      *((_QWORD *)&v79[1] + 1) = 0;
      *(_QWORD *)&v79[2] = 0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Top");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v7 = v82;
      if (v82 >= v83[0])
      {
        v8 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v8 = v7 + 136;
      }
      v82 = v8;
      LODWORD(v76.var0) = 1;
      LightingStyleLight::setColor((LightingStyleLight *)&v76, 1.0, 1.0, 1.0);
      v78 = 0x4010000000000000uLL;
      *(_QWORD *)&v79[0] = 0;
      *(_OWORD *)((char *)v79 + 8) = xmmword_1B35615B0;
      *(_OWORD *)((char *)&v79[1] + 8) = xmmword_1B35615C0;
      BYTE8(v79[2]) = 1;
      PCString::PCString(&v75, "Right");
      PCString::set(&v80, &v75);
      PCString::~PCString(&v75);
      v36 = v82;
      if (v82 >= v83[0])
      {
LABEL_76:
        v57 = std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(&v81, (uint64_t)&v76);
      }
      else
      {
LABEL_90:
        std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)v83, v82, (uint64_t)&v76);
        v57 = v36 + 136;
      }
      v82 = v57;
LABEL_92:
      PCString::~PCString(&v80);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v77.var1._obj);
LABEL_93:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v58 = v81;
      if (v82 != v81)
      {
        v59 = 0;
        v60 = (const CMTime *)MEMORY[0x1E0CA2E68];
        do
        {
          PCURL::PCURL((PCURL *)&v76, CFSTR("Light Name"));
          v61 = OZLight::create((OZLight *)&v76, 0);
          PCString::~PCString(&v76);
          (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v61 + 16) + 120))(v61 + 16, v58 + 136 * v59 + 128, 0);
          (*(void (**)(uint64_t, const CMTime *, _QWORD, double))(*(_QWORD *)(v61 + 6624) + 712))(v61 + 6624, v60, 0, (double)*(int *)(v58 + 136 * v59));
          (*(void (**)(uint64_t, const CMTime *, unint64_t, _QWORD))(*(_QWORD *)(v61 + 6880) + 840))(v61 + 6880, v60, v58 + 136 * v59 + 8, 0);
          (*(void (**)(uint64_t, const CMTime *, _QWORD, double))(*(_QWORD *)(v61 + 7888) + 712))(v61 + 7888, v60, 0, *(double *)(v58 + 136 * v59 + 64));
          OZTransformNode::setTranslation((OZTransformNode *)v61, *(double *)(v58 + 136 * v59 + 72), *(double *)(v58 + 136 * v59 + 80), *(double *)(v58 + 136 * v59 + 88), v60);
          OZTransformNode::setRotation((OZTransformNode *)v61, *(double *)(v58 + 136 * v59 + 96), *(double *)(v58 + 136 * v59 + 104), *(double *)(v58 + 136 * v59 + 112), v60);
          OZFolderLightShadow::hasShadows((OZFolderLightShadow *)(v61 + 8776), v60, *(unsigned __int8 *)(v58 + 136 * v59 + 120));
          v63 = (uint64_t *)a2[1];
          v62 = (unint64_t)a2[2];
          if ((unint64_t)v63 >= v62)
          {
            v65 = ((char *)v63 - (_BYTE *)*a2) >> 3;
            if ((unint64_t)(v65 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v66 = v62 - (_QWORD)*a2;
            v67 = v66 >> 2;
            if (v66 >> 2 <= (unint64_t)(v65 + 1))
              v67 = v65 + 1;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
              v68 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v68 = v67;
            if (v68)
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v68);
            else
              v69 = 0;
            v70 = (uint64_t *)&v69[8 * v65];
            *v70 = v61;
            v64 = v70 + 1;
            v72 = (char *)*a2;
            v71 = (char *)a2[1];
            if (v71 != *a2)
            {
              do
              {
                v73 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *--v70 = v73;
              }
              while (v71 != v72);
              v71 = (char *)*a2;
            }
            *a2 = v70;
            a2[1] = v64;
            a2[2] = &v69[8 * v68];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *v63 = v61;
            v64 = v63 + 1;
          }
          a2[1] = v64;
          ++v59;
          v58 = v81;
        }
        while (v59 < 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v82 - v81) >> 3));
      }
      v76.var0 = (__CFString *)&v81;
      std::vector<LightingStyleLight>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      return;
    default:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v76, "not implemented yet");
      PCString::PCString(&v75, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZLightingStyle.cpp");
      PCException::PCException(exception, &v76, &v75, 444);
      *(_QWORD *)exception = &unk_1E64FFFA0;
  }
}

void sub_1B2F37D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, PCString a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  if (v15)
    __cxa_free_exception(v14);
  a14.var0 = (__CFString *)(v16 - 112);
  std::vector<LightingStyleLight>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

CGColorSpace **LightingStyleLight::setColor(LightingStyleLight *this, float a2, float a3, float a4)
{
  CGColorSpace *v8;
  __int128 v9;
  CGColorSpace *v10;
  CGColorSpace *obj;
  BOOL v12;
  PCColor v14;

  v8 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(this);
  PCColor::PCColor(&v14, a2, a3, a4, v8);
  v9 = *(_OWORD *)&v14.var0.var1[1];
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v14.var0.var0;
  *(_OWORD *)((char *)this + 24) = v9;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v14.var0.var1[3];
  v10 = (CGColorSpace *)*((_QWORD *)this + 7);
  obj = v14.var1._obj;
  if (v10)
    v12 = v10 == v14.var1._obj;
  else
    v12 = 1;
  if (!v12)
  {
    PCCFRefTraits<CGColorSpace *>::release(v10);
    obj = v14.var1._obj;
  }
  *((_QWORD *)this + 7) = obj;
  v14.var1._obj = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v14.var1._obj);
}

void sub_1B2F3808C(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void OZLightingStyle::getLightSet(OZLightingStyle *this@<X0>, const FxColorDescription *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  PCSharedCount v12[90];
  char v13;
  OZRenderState v14;
  char *v15;
  _QWORD *v16;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = &unk_1E64FC250;
  *(_BYTE *)(a3 + 24) = 0;
  OZLightingStyle::getLights(this, (void **)&v15);
  v6 = v15;
  v7 = v16;
  if ((int)((unint64_t)((char *)v16 - v15) >> 3) >= 1)
  {
    v8 = 0;
    v9 = ((char *)v16 - v15) & 0x7FFFFFFF8;
    do
    {
      OZLight::setLightWorkingColorDescription(*(CGColorSpace ***)&v15[v8], a2);
      OZRenderState::OZRenderState(&v14);
      OZLight::buildLiLight(*(OZLight **)&v15[v8], &v14, (uint64_t)v12);
      v13 = 1;
      LiLightSet::add(a3, (const LiLight *)v12);
      LiLight::~LiLight(v12);
      v8 += 8;
    }
    while (v9 != v8);
    v6 = v15;
    v7 = v16;
  }
  if (v7 != (_BYTE *)v6)
  {
    v10 = 0;
    do
    {
      v11 = v6[v10];
      if (v11)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v11 + 8))(v6[v10]);
        v6 = v15;
        v7 = v16;
      }
      ++v10;
    }
    while (v10 < (v7 - (_BYTE *)v6) >> 3);
  }
  if (v6)
  {
    v16 = v6;
    operator delete(v6);
  }
}

void sub_1B2F381B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

void std::vector<LightingStyleLight>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<LightingStyleLight>::__base_destruct_at_end[abi:ne180100]((CGColorSpace **)v2, (CGColorSpace *)*v2);
    operator delete(**a1);
  }
}

CGColorSpace **std::vector<LightingStyleLight>::__base_destruct_at_end[abi:ne180100](CGColorSpace **result, CGColorSpace *a2)
{
  CGColorSpace **v3;
  CGColorSpace *i;

  v3 = result;
  for (i = result[1]; i != a2; i = (CGColorSpace *)((char *)i - 136))
  {
    PCString::~PCString((PCString *)i - 1);
    result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)i - 10);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::vector<LightingStyleLight>::__push_back_slow_path<LightingStyleLight const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  CGColorSpace *v7;
  uint64_t v8;
  CGColorSpace *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (CGColorSpace *)std::__allocate_at_least[abi:ne180100]<std::allocator<LightingStyleLight>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (uint64_t)v7 + 136 * v3;
  v13 = (char *)v7 + 136 * v6;
  std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 136;
  std::vector<LightingStyleLight>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<LightingStyleLight>::~__split_buffer(&v10);
  return v8;
}

void sub_1B2F38384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LightingStyleLight>::~__split_buffer((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  CGColorSpace *v7;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = *(_OWORD *)(a3 + 8);
  v6 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  v7 = *(CGColorSpace **)(a3 + 56);
  *(_QWORD *)(a2 + 56) = v7;
  if (v7)
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_BYTE *)(a2 + 120) = *(_BYTE *)(a3 + 120);
  PCString::PCString((PCString *)(a2 + 128), (const PCString *)(a3 + 128));
}

void sub_1B2F38428(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LightingStyleLight>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LightingStyleLight>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>,std::reverse_iterator<LightingStyleLight*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 136;
      std::allocator<LightingStyleLight>::construct[abi:ne180100]<LightingStyleLight,LightingStyleLight const&>(a1, v7 - 136, v9);
      v7 = *((_QWORD *)&v16 + 1) - 136;
      *((_QWORD *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B2F385A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>::operator()[abi:ne180100]((CGColorSpace **)a1);
  return a1;
}

CGColorSpace **std::_AllocatorDestroyRangeReverse<std::allocator<LightingStyleLight>,std::reverse_iterator<LightingStyleLight*>>::operator()[abi:ne180100](CGColorSpace **result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)result[2] + 1);
  v2 = *((_QWORD *)result[1] + 1);
  while (v1 != v2)
  {
    PCString::~PCString((PCString *)(v1 + 128));
    result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 56));
    v1 += 136;
  }
  return result;
}

CGColorSpace **std::__split_buffer<LightingStyleLight>::~__split_buffer(CGColorSpace **a1)
{
  std::__split_buffer<LightingStyleLight>::__destruct_at_end[abi:ne180100](a1, a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

CGColorSpace **std::__split_buffer<LightingStyleLight>::__destruct_at_end[abi:ne180100](CGColorSpace **result, CGColorSpace *a2)
{
  CGColorSpace *v2;
  CGColorSpace **v4;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v4[2] = (CGColorSpace *)((char *)v2 - 136);
      PCString::~PCString((PCString *)v2 - 1);
      result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v2 - 10);
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1B2F387DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2F39508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, OZLocking *a18)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a18);
  _Unwind_Resume(a1);
}

void sub_1B2F397BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  id *v2;
  id v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, id);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va1);
  ProCore_Impl::PCNSRefImpl::release(v2);
  _Unwind_Resume(a1);
}

void sub_1B2F39A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t folderIsParameterType(unint64_t result)
{
  const void *v1;

  if (result)
  {
    v1 = (const void *)result;
    return ((*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 120))(result) & 1) != 0
  }
  return result;
}

void sub_1B2F39F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, OZLocking *a12, uint64_t a13, void *__p, uint64_t a15)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a12);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B2F3A2B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2F3A3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B2F3A8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B2F3AA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3AE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3AF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3B0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3B1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3B428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3B654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3B8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3BAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3C090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3C2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3C530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  uint64_t v12;

  PCString::~PCString(&a12);
  MEMORY[0x1B5E29170](v12, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3C964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C409BAC03F7);
  _Unwind_Resume(a1);
}

void sub_1B2F3CBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, OZLocking *a13)
{
  CGColorSpace **v13;

  PCCFRef<CGColorSpace *>::~PCCFRef(v13);
  OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&a9);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F3CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  CGColorSpace **v7;
  va_list va;

  va_start(va, a7);
  PCCFRef<CGColorSpace *>::~PCCFRef(v7);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  CGColorSpace **v5;
  va_list va;

  va_start(va, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef(v5);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F3D1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&a16);
  _Unwind_Resume(a1);
}

void sub_1B2F3D474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&a16);
  _Unwind_Resume(a1);
}

void sub_1B2F3D698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40D0902988);
  _Unwind_Resume(a1);
}

void sub_1B2F3D850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C4011F1C4E7);
  _Unwind_Resume(a1);
}

void sub_1B2F3DAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40479DDD51);
  _Unwind_Resume(a1);
}

void sub_1B2F3DD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
  uint64_t v12;

  PCString::~PCString(&a10);
  PCString::~PCString(&a12);
  MEMORY[0x1B5E29170](v12, 0x10F1C405E89EA5DLL);
  _Unwind_Resume(a1);
}

void sub_1B2F3DF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void sub_1B2F3E4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, OZLocking *a19)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a19);
  _Unwind_Resume(a1);
}

uint64_t interpolateCustomParameter(NSData *a1, NSData *a2, float a3, void *a4)
{
  const void *Object;
  TXParagraphStyleFolder_Factory *v5;
  OZFactoryBase *v7;
  OZScene *v8;

  if (!a4)
    return 0;
  objc_msgSend(a4, "getBytes:length:", &v7, 16);
  if (v8
    && (Object = (const void *)OZScene::getObject(v8, HIDWORD(v7))) != 0
  {
    return TXParagraphStyleFolder_Factory::createInstance(v5, (OZFactoryBase *)v7);
  }
  else
  {
    return 0;
  }
}

uint64_t compareCustomParameter(NSData *a1, NSData *a2, void *a3)
{
  const void *Object;
  OZChannelBase *v4;
  unsigned int v6[2];
  OZScene *v7;

  if (!a3)
    return 0;
  objc_msgSend(a3, "getBytes:length:", v6, 16);
  if (v7
    && (Object = (const void *)OZScene::getObject(v7, v6[1])) != 0
  {
    return OZChannelBase::isObjectRef(v4);
  }
  else
  {
    return 0;
  }
}

void sub_1B2F3E884()
{
  objc_end_catch();
  JUMPOUT(0x1B2F3E894);
}

void sub_1B2F3E8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  JUMPOUT(0x1B2F3E8ACLL);
}

void sub_1B2F3EA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  uint64_t v12;

  PCString::~PCString(&a12);
  MEMORY[0x1B5E29170](v12, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void sub_1B2F3EC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10E1C406E094D3BLL);
  _Unwind_Resume(a1);
}

void sub_1B2F3EE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40F1099EF6);
  _Unwind_Resume(a1);
}

void sub_1B2F3F020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C4072D3B705);
  _Unwind_Resume(a1);
}

void sub_1B2F3F1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCString::~PCString(&a10);
  MEMORY[0x1B5E29170](v10, 0x10F1C40C94B7CBALL);
  _Unwind_Resume(a1);
}

void sub_1B2F3F390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1B2F3F410()
{
  return 0;
}

void sub_1B2F3F5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F3F6C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F3F7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F3F950(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1B2F3FB1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1B2F3FE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  OZLocking *v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, OZLocking *);
  v11 = va_arg(va1, _QWORD);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  ProCore_Impl::PCNSRefImpl::release((id *)(v7 - 72));
  _Unwind_Resume(a1);
}

void sub_1B2F3FF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F403F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  OZRenderParams::~OZRenderParams((OZRenderParams *)&a51);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v51 - 176));
  ProCore_Impl::PCNSRefImpl::release((id *)(v51 - 104));
  _Unwind_Resume(a1);
}

LiAgent *std::make_unique[abi:ne180100]<LiAgent,LiAgent&>@<X0>(const LiAgent *a1@<X0>, LiAgent **a2@<X8>)
{
  LiAgent *v4;
  LiAgent *result;

  v4 = (LiAgent *)operator new();
  result = LiAgent::LiAgent(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B2F40500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F0C40F73640D2);
  _Unwind_Resume(a1);
}

void sub_1B2F40F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,CGColorSpace *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,OZLocking *a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 24))(a29);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a51);
  if (a58)
    (*(void (**)(uint64_t))(*(_QWORD *)a58 + 24))(a58);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a61);
  LiAgent::~LiAgent((LiAgent *)&a63);
  OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&STACK[0x380]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x398]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x3C0]);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v63 - 208));
  ProCore_Impl::PCNSRefImpl::release((id *)(v63 - 144));
  LiEdgeTextureCacheSentinel::~LiEdgeTextureCacheSentinel((LiEdgeTextureCacheSentinel *)(v63 - 129));
  _Unwind_Resume(a1);
}

void sub_1B2F41190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F413E0(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  objc_msgSend(v1, "error");
  NSLog(CFSTR("Unable to unarchive data in %s for parameter %d due to error: %@"));
  objc_end_catch();
  JUMPOUT(0x1B2F413A0);
}

void sub_1B2F41420()
{
  objc_end_catch();
  JUMPOUT(0x1B2F4143CLL);
}

void sub_1B2F41438(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 88));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1B2F4144C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1B2F41458);
}

void sub_1B2F4155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F41724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F41878(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1B2F41C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,CGColorSpace *a27)
{
  CGColorSpace **v27;
  uint64_t v28;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  PCCFRef<CGColorSpace *>::~PCCFRef(v27);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a27);
  ProCore_Impl::PCNSRefImpl::release((id *)(v28 - 104));
  _Unwind_Resume(a1);
}

void sub_1B2F41DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F42018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F420D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F42178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F42354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, char a13)
{
  uint64_t v13;

  PCString::~PCString(&a12);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v13 - 32));
  _Unwind_Resume(a1);
}

void sub_1B2F42544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F4272C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F42914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F42B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F42D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F43138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  uint64_t v9;

  PCString::~PCString(&a9);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v9 - 104));
  ProCore_Impl::PCNSRefImpl::release((id *)(v9 - 88));
  _Unwind_Resume(a1);
}

void sub_1B2F43368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4364C()
{
  objc_end_catch();
  JUMPOUT(0x1B2F43674);
}

void sub_1B2F43660(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1B2F4367CLL);
}

void sub_1B2F43670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  OZLocking *v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, OZLocking *);
  v7 = va_arg(va1, _QWORD);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  ProCore_Impl::PCNSRefImpl::release((id *)va1);
  _Unwind_Resume(a1);
}

void sub_1B2F43914()
{
  objc_end_catch();
  JUMPOUT(0x1B2F43940);
}

void sub_1B2F4392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1B2F43948);
}

void sub_1B2F4393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  ProCore_Impl::PCNSRefImpl::release((id *)(v10 - 56));
  _Unwind_Resume(a1);
}

void sub_1B2F43BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F43E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, char a16)
{
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F440A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F44230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2F4441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F445DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4471C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F44874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F44940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2F44BE0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F44D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F452F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2F4554C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F45664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  PCSharedCount *v48;
  PCSharedCount *v49;
  uint64_t v50;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v50 - 56));
  PCSharedCount::~PCSharedCount(v49);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)&a11);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a48);
  std::__list_imp<unsigned int>::clear(&a28);
  PCSharedCount::~PCSharedCount(v48);
  _Unwind_Resume(a1);
}

void sub_1B2F45A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 168));
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1B2F45B3C(void *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0xC400A2AC0F1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2F45B30);
}

void sub_1B2F46028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, char a13, uint64_t a14, OZLocking *a15)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a15);
  _Unwind_Resume(a1);
}

void sub_1B2F462C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2F465C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, PCString a13)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F468E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, PCString a13)
{
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)&a13);
  _Unwind_Resume(a1);
}

void sub_1B2F469C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F46E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZChannelColorCorrection::OZChannelColorCorrection(OZChannelColorCorrection *this, const PCString *a2, void *a3, OZChannelFolder *a4, unsigned int a5, int a6, char a7)
{
  OZChannelColorCorrection *v7;

  OZChannelBlindData::OZChannelBlindData((OZChannelBlindData *)this, a2, a3, a4, a5, a6, a7, 0, 0, 0, 0);
  *(_QWORD *)v7 = &unk_1E65AF360;
  *((_QWORD *)v7 + 2) = &unk_1E65AF6C0;
  OZChannelColorCorrection::commonInitOZColorCorrectionUIChannel(v7);
}

void sub_1B2F46E7C(_Unwind_Exception *a1)
{
  OZChannelBlindData *v1;

  OZChannelBlindData::~OZChannelBlindData(v1);
  _Unwind_Resume(a1);
}

void LiEdgeTextureCacheSentinel::~LiEdgeTextureCacheSentinel(LiEdgeTextureCacheSentinel *this)
{
  setUseLiEdgeTextureNodeCache(*(_BYTE *)this);
}

uint64_t std::deque<BOOL>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void OZFxPlugRenderContextManager::OZFxPlugRenderContextManager(OZFxPlugRenderContextManager *this)
{
  PCRenderModel *v2;

  this->_vptr$OZFxPlugRenderContextManager = (void **)&off_1E65C16F8;
  PCColorDescription::PCColorDescription(&this->_workingColorDescription._pcColorDesc);
  this->_workingColorDescription._isPremultiplied = 1;
  this->_blendingGamma = PCRenderModel::getDefaultBlendingGamma(v2);
  this->_contexts.__tree_.__pair3_.__value_ = 0;
  this->_contexts.__tree_.__pair1_.__value_.__left_ = 0;
  this->_contexts.__tree_.__begin_node_ = &this->_contexts.__tree_.__pair1_;
  this->_contextLock._lock._os_unfair_lock_opaque = 0;
}

void sub_1B2F46FB0(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void std::deque<OZChannelFolder *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZChannelFolder *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZChannelFolder *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2F47310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<BOOL>::push_back(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 9) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<BOOL>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_BYTE *)(*(_QWORD *)(v5 + ((v8 >> 9) & 0x7FFFFFFFFFFFF8)) + (v8 & 0xFFF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<BOOL>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2F476A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement::OZARPlaneAnchorElement(OZARPlaneAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZARAnchorElement::OZARAnchorElement(this, a2, a3, a4);
  *v5 = &off_1E65BF838;
  v5[2] = &unk_1E65C0170;
  v5[6] = &unk_1E65C03C8;
  v5[816] = &unk_1E65C0420;
  PCString::PCString(&v7, "Plane Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24424), &v7, (OZChannelFolder *)((char *)this + 448), 0x190u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "None;Wall;Floor;Ceiling;Table;Seat;Window;Door");
  PCString::PCString(&v6, "Plane Classification");
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24552), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 24424), 0x191u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Any;Horizontal;Vertical");
  PCString::PCString(&v6, "Plane Alignment");
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24808), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 24424), 0x192u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Plane Width");
  OZChannelDouble::OZChannelDouble((OZARPlaneAnchorElement *)((char *)this + 25064), 100, &v7, (OZChannelFolder *)((char *)this + 24424), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Plane Height");
  OZChannelDouble::OZChannelDouble((OZARPlaneAnchorElement *)((char *)this + 25216), 100, &v7, (OZChannelFolder *)((char *)this + 24424), 0x195u, 0, 0, 0);
  PCString::~PCString(&v7);
}

void sub_1B2F478D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZARAnchorElement *v12;
  OZChannelFolder *v13;
  OZChannelEnum *v14;
  OZChannelEnum *v15;
  OZChannel *v16;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelFolder::~OZChannelFolder(v13);
  OZARAnchorElement::~OZARAnchorElement(v12);
  _Unwind_Resume(a1);
}

void sub_1B2F47984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2F47974);
}

void sub_1B2F47994()
{
  JUMPOUT(0x1B2F47974);
}

void OZARPlaneAnchorElement::OZARPlaneAnchorElement(OZARPlaneAnchorElement *this, const OZARPlaneAnchorElement *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZARAnchorElement::OZARAnchorElement(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65BF838;
  *(_QWORD *)(v5 + 16) = &unk_1E65C0170;
  *(_QWORD *)(v5 + 48) = &unk_1E65C03C8;
  *(_QWORD *)(v5 + 6528) = &unk_1E65C0420;
  v6 = (OZChannelFolder *)(v5 + 24424);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 24424), (const OZChannelFolder *)((char *)a2 + 24424), (OZChannelFolder *)(v5 + 448));
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24552), (const OZARPlaneAnchorElement *)((char *)a2 + 24552), v6);
  OZChannelEnum::OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24808), (const OZARPlaneAnchorElement *)((char *)a2 + 24808), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 25064), (const OZChannelBase *)((char *)a2 + 25064), v6);
  *((_QWORD *)this + 3133) = &off_1E6551358;
  *((_QWORD *)this + 3135) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 25216), (const OZChannelBase *)((char *)a2 + 25216), v6);
  *((_QWORD *)this + 3152) = &off_1E6551358;
  *((_QWORD *)this + 3154) = &unk_1E65516B8;
}

void sub_1B2F47A98(_Unwind_Exception *a1)
{
  OZARAnchorElement *v1;
  OZChannelFolder *v2;
  OZChannelEnum *v3;
  OZChannelEnum *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZARAnchorElement::~OZARAnchorElement(v1);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement::~OZARPlaneAnchorElement(OZARPlaneAnchorElement *this)
{
  *(_QWORD *)this = &off_1E65BF838;
  *((_QWORD *)this + 2) = &unk_1E65C0170;
  *((_QWORD *)this + 6) = &unk_1E65C03C8;
  *((_QWORD *)this + 816) = &unk_1E65C0420;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25216));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 25064));
  OZChannelEnum::~OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24808));
  OZChannelEnum::~OZChannelEnum((OZARPlaneAnchorElement *)((char *)this + 24552));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24424));
  OZARAnchorElement::~OZARAnchorElement(this);
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZARPlaneAnchorElement::~OZARPlaneAnchorElement(OZARPlaneAnchorElement *this)
{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 16));
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 48));
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 6528));
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZARPlaneAnchorElement::~OZARPlaneAnchorElement((OZARPlaneAnchorElement *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

void OZARPlaneAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

void `non-virtual thunk to'OZARPlaneAnchorElement::makeRenderImageSource(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

uint64_t OZARPlaneAnchorElement::setPlaneSize(uint64_t a1, const CMTime *a2, double *a3)
{
  OZChannel::setValue((OZChannel *)(a1 + 25064), a2, *a3, 0);
  return OZChannel::setValue((OZChannel *)(a1 + 25216), a2, a3[1], 0);
}

void sub_1B2F47DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F47EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F47F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F48114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  ProCore_Impl::PCNSRefImpl::release((id *)(v14 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F48350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  ProCore_Impl::PCNSRefImpl::release((id *)(v14 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F4854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17, char a18)
{
  uint64_t v18;

  ProCore_Impl::PCNSRefImpl::release((id *)(v18 - 72));
  _Unwind_Resume(a1);
}

void sub_1B2F48818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  ProCore_Impl::PCNSRefImpl::release((id *)(v15 - 48));
  ProCore_Impl::PCNSRefImpl::release((id *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F48AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, char a13, uint64_t a14, id a15)
{
  uint64_t v15;

  ProCore_Impl::PCNSRefImpl::release(&a15);
  ProCore_Impl::PCNSRefImpl::release((id *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F48D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  id v11;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, id);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  ProCore_Impl::PCNSRefImpl::release((id *)va1);
  _Unwind_Resume(a1);
}

void sub_1B2F48F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v15 - 48));
  _Unwind_Resume(a1);
}

void sub_1B2F4913C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  ProCore_Impl::PCNSRefImpl::release((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1B2F49458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,id a25,id a26)
{
  ProCore_Impl::PCNSRefImpl::release(&a25);
  ProCore_Impl::PCNSRefImpl::release(&a26);
  _Unwind_Resume(a1);
}

void sub_1B2F49784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, OZLocking *a19, uint64_t a20,PCString a21)
{
  uint64_t v21;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a19);
  ProCore_Impl::PCNSRefImpl::release((id *)(v21 - 48));
  ProCore_Impl::PCNSRefImpl::release((id *)(v21 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F49A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F49DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,OZLocking *a23,uint64_t a24,PCString a25)
{
  uint64_t v25;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel(&a23);
  ProCore_Impl::PCNSRefImpl::release((id *)(v25 - 56));
  _Unwind_Resume(a1);
}

void sub_1B2F4A0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4A260(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_1B2F4A414(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1B2F4A5F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F4A7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1B2F4AA80(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B2F4ABE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1B2F4ADA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 48));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F4AFF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F4B31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 128));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1B2F4B530(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1B2F4B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  id v8;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, id);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  ProCore_Impl::PCNSRefImpl::release((id *)va1);
  _Unwind_Resume(a1);
}

void sub_1B2F4BA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 64));
  ProCore_Impl::PCNSRefImpl::release((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1B2F4BD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4C064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  ProCore_Impl::PCNSRefImpl::release((id *)(v10 - 64));
  ProCore_Impl::PCNSRefImpl::release((id *)(v10 - 56));
  _Unwind_Resume(a1);
}

void sub_1B2F4C374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4C550(_Unwind_Exception *a1)
{
  uint64_t v1;

  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1B2F4C640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlug_setPixelTransformToRestrictInputSizeForFilter(uint64_t a1, uint64_t a2, int a3, double *a4)
{
  uint64_t result;
  double v7;
  double v8;
  _BOOL4 Scale;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  __int128 v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;

  if (a4)
    *a4 = 1.0;
  result = 0;
  v7 = *(double *)(a2 + 16);
  if (v7 != 0.0)
  {
    v8 = *(double *)(a2 + 24);
    if (v8 != 0.0)
    {
      if (a3)
      {
        v25 = 0uLL;
        v26.f64[0] = 0.0;
        Scale = OZFxPlug_GetScale(a1, (uint64_t)&v25);
        v10 = v25.f64[0];
        if (!Scale)
          v10 = 1.0;
        v7 = v7 * v10;
        if (Scale)
          v11 = v25.f64[1];
        else
          v11 = 1.0;
        v8 = v8 * v11;
      }
      v12 = v7 + -4000.0;
      if (v7 <= 4000.0)
        v12 = 0.0;
      v13 = v8 + -4000.0;
      if (v8 <= 4000.0)
        v13 = 0.0;
      if (v12 >= v13)
        v14 = v12;
      else
        v14 = v13;
      if (v14 <= 0.0)
      {
        return 0;
      }
      else
      {
        if (v12 >= v13)
          v15 = v7;
        else
          v15 = v8;
        v16 = *(_QWORD *)(a1 + 160);
        v17 = *(float64x2_t *)(v16 + 48);
        v19 = *(float64x2_t *)v16;
        v18 = *(float64x2_t *)(v16 + 16);
        v20 = 1.0 / (v15 / 4000.0);
        v27 = *(float64x2_t *)(v16 + 32);
        v28 = v17;
        v25 = v19;
        v26 = v18;
        v21 = *(_OWORD *)(v16 + 112);
        v23 = *(float64x2_t *)(v16 + 64);
        v22 = *(float64x2_t *)(v16 + 80);
        v31 = *(_OWORD *)(v16 + 96);
        v32 = v21;
        v29 = v23;
        v30 = v22;
        if (v20 != 1.0)
        {
          v25 = vmulq_n_f64(v25, v20);
          v26 = vmulq_n_f64(v26, v20);
          v27 = vmulq_n_f64(v27, v20);
          v28 = vmulq_n_f64(v28, v20);
          v29 = vmulq_n_f64(v29, v20);
          v30 = vmulq_n_f64(v30, v20);
        }
        v24 = 1.0 / (v15 / 4000.0);
        LiAgent::setPixelTransform(a1, (uint64_t)&v25);
        if (a4)
          *a4 = v24;
        return 1;
      }
    }
  }
  return result;
}

BOOL OZFxPlug_GetScale(uint64_t a1, uint64_t a2)
{
  int32x2_t v4;
  int64x2_t v5;
  _BOOL8 v6;
  __int128 v13;
  uint64_t v14;
  float64x2_t v15;
  __int128 v16;
  __n128 v17[8];
  float64x2_t v18;
  double v19;

  v18 = 0uLL;
  v19 = 0.0;
  if (LiAgent::haveROI((LiAgent *)a1))
  {
    LiAgent::getROI((__n128 *)a1, v17);
    v4 = vsra_n_s32((int32x2_t)v17[0].n128_u64[0], (int32x2_t)vsra_n_u32(*(uint32x2_t *)&v17[0].n128_i8[8], *(uint32x2_t *)&v17[0].n128_i8[8], 0x1FuLL), 1uLL);
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    v18 = vcvtq_f64_s64(v5);
    v19 = 0.0;
  }
  LiAgent::getInversePixelTransform((LiAgent *)a1, 0.0, (uint64_t)v17);
  v15 = 0u;
  v16 = 0u;
  PCMatrix44Tmpl<double>::transform<double>(v17[0].n128_f64, v18.f64, v15.f64);
  v6 = *((double *)&v16 + 1) >= 0.0000001 || *((double *)&v16 + 1) <= -0.0000001;
  if (v6)
  {
    v18 = vmulq_n_f64(v15, 1.0 / *((double *)&v16 + 1));
    v19 = 1.0 / *((double *)&v16 + 1) * *(double *)&v16;
    __asm { FMOV            V0.2D, #1.0 }
    v13 = _Q0;
    v14 = 0;
    getScale(*(float64x2_t **)(a1 + 160), v18.f64, (double *)&v13, a2, 0);
  }
  return v6;
}

uint64_t OZFxPlug_setPixelTransformToRestrictInputSizeForTemporalAPI(uint64_t a1, uint64_t a2, int a3, double *a4)
{
  uint64_t result;
  double v7;
  double v8;
  _BOOL4 Scale;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  __int128 v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;

  if (a4)
    *a4 = 1.0;
  result = 0;
  v7 = *(double *)(a2 + 16);
  if (v7 != 0.0)
  {
    v8 = *(double *)(a2 + 24);
    if (v8 != 0.0)
    {
      if (a3)
      {
        v25 = 0uLL;
        v26.f64[0] = 0.0;
        Scale = OZFxPlug_GetScale(a1, (uint64_t)&v25);
        v10 = v25.f64[0];
        if (!Scale)
          v10 = 1.0;
        v7 = v7 * v10;
        if (Scale)
          v11 = v25.f64[1];
        else
          v11 = 1.0;
        v8 = v8 * v11;
      }
      v12 = v7 + -9000.0;
      if (v7 <= 9000.0)
        v12 = 0.0;
      v13 = v8 + -9000.0;
      if (v8 <= 9000.0)
        v13 = 0.0;
      if (v12 >= v13)
        v14 = v12;
      else
        v14 = v13;
      if (v14 <= 0.0)
      {
        return 0;
      }
      else
      {
        if (v12 >= v13)
          v15 = v7;
        else
          v15 = v8;
        v16 = *(_QWORD *)(a1 + 160);
        v17 = *(float64x2_t *)(v16 + 48);
        v19 = *(float64x2_t *)v16;
        v18 = *(float64x2_t *)(v16 + 16);
        v20 = 1.0 / (v15 / 9000.0);
        v27 = *(float64x2_t *)(v16 + 32);
        v28 = v17;
        v25 = v19;
        v26 = v18;
        v21 = *(_OWORD *)(v16 + 112);
        v23 = *(float64x2_t *)(v16 + 64);
        v22 = *(float64x2_t *)(v16 + 80);
        v31 = *(_OWORD *)(v16 + 96);
        v32 = v21;
        v29 = v23;
        v30 = v22;
        if (v20 != 1.0)
        {
          v25 = vmulq_n_f64(v25, v20);
          v26 = vmulq_n_f64(v26, v20);
          v27 = vmulq_n_f64(v27, v20);
          v28 = vmulq_n_f64(v28, v20);
          v29 = vmulq_n_f64(v29, v20);
          v30 = vmulq_n_f64(v30, v20);
        }
        v24 = 1.0 / (v15 / 9000.0);
        LiAgent::setPixelTransform(a1, (uint64_t)&v25);
        if (a4)
          *a4 = v24;
        return 1;
      }
    }
  }
  return result;
}

BOOL OZFxPlug_IsSpecialLayer(const OZSceneNode *a1, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v14;
  BOOL v15;
  BOOL v17;
  BOOL v18;

  v3 = *((_QWORD *)a1 + 1);
  v5 = *(_DWORD *)(v3 + 8);
  v4 = *(_DWORD *)(v3 + 12);
  v7 = *(_DWORD *)(v3 + 16);
  v6 = *(_DWORD *)(v3 + 20);
  if (a2 > 5 || a3 > 11)
  {
    if (OZFxPlug_IsTextLayer(a1))
      return 1;
    v14 = v5 == -294958824 && v4 == 947524055;
    v15 = v14 && v7 == -1608450045;
    if (v15 && v6 == -1820994886)
      return 1;
    v17 = v5 == 1155139328 && v4 == -156560938;
    v18 = v17 && v7 == -1943797757;
    if (v18 && v6 == -1821964494)
      return 1;
    if (v5 != -351952328 || v4 != -1278930473 || v7 != -1492189181)
      goto LABEL_53;
  }
  else
  {
    v10 = v5 == -1161836681 && v4 == 2135364055 && v7 == -1431896061 && v6 == -1820115094;
    if (v10
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v3 + 24), (int32x4_t)xmmword_1B3054200)))) & 1) == 0)
    {
      return 1;
    }
    v11 = v5 == -294958824 && v4 == 947524055;
    v12 = v11 && v7 == -1608450045;
    if (v12 && v6 == -1820994886)
      return 1;
    if (v5 != -351952328 || v4 != -1278930473 || v7 != -1492189181)
      goto LABEL_53;
  }
  if (v6 == -1821967528)
    return 1;
LABEL_53:
  if (v5 == 1136778330 && v4 == 308023769 && v7 == -1579941878 && v6 == -1783627174)
    return 1;
  return v5 == 1898209956 && v4 == 842600919 && v7 == -1887174653 && v6 == -1819691262;
}

BOOL OZFxPlug_IsTextLayer(const OZSceneNode *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  return (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v1 + 8), (int32x4_t)xmmword_1B3053B10)))) & 1) == 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v1 + 24), (int32x4_t)xmmword_1B3054200)))) & 1) == 0|| OZFxPlug_IsCloneTextSceneNode(a1);
}

BOOL OZFxPlug_IsEmitter(OZSceneNode *a1)
{
  return (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 1) + 8), (int32x4_t)xmmword_1B3561450)))) & 1) == 0;
}

uint64_t OZFxPlug_EmitterThatNeedsResampling(OZSceneNode *a1)
{
  uint64_t result;
  uint64_t v3;
  OZScene *v4;
  __n128 SceneSettings;
  _BYTE v6[80];

  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 1) + 8), (int32x4_t)xmmword_1B3561450)))) & 1) != 0)return 0;
  if (result)
  {
    v3 = result;
    result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a1 + 272))(a1);
    if (result)
    {
      v4 = (OZScene *)result;
      OZExportSettings::OZExportSettings((OZExportSettings *)v6);
      SceneSettings = OZScene::getSceneSettings(v4, (OZExportSettings *)v6);
      if (v6[44] && ((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v3 + 248))(v3, SceneSettings) & 1) == 0)
      {
        OZExportSettings::~OZExportSettings((OZExportSettings *)v6);
        return 1;
      }
      OZExportSettings::~OZExportSettings((OZExportSettings *)v6);
      return 0;
    }
  }
  return result;
}

void sub_1B2F4CDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZExportSettings::~OZExportSettings((OZExportSettings *)&a9);
  _Unwind_Resume(a1);
}

BOOL OZFxPlug_IsCloneTextSceneNode(const OZSceneNode *a1)
{
  OZCloneGenerator *v1;
  void *SourceNode;
  void *v3;
  void *v4;
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (v1)
    {
      SourceNode = OZCloneGenerator::getSourceNode(v1);
      if (SourceNode)
      {
        if (v3)
        {
          v4 = v3;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v3 + 672))(v3) + 8)+ 8), (int32x4_t)xmmword_1B3053B10)))) & 1) == 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v4 + 672))(v4) + 8)+ 24), (int32x4_t)xmmword_1B3054200)))) & 1) == 0)
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL OZFxPlug_InputWillBeScaledBasedOnChannel(OZSceneNode *a1, int a2, int a3)
{
  _BOOL8 result;

  result = OZFxPlug_IsSpecialLayer(a1, a2, a3);
  if ((_DWORD)result)
    return !OZFxPlug_IsTextLayer(a1);
  return result;
}

uint64_t OZFxPlug_DepthFromFxDepth(uint64_t a1)
{
  if (!a1)
    return 8;
  if (a1 == 3)
    return 32;
  if (a1 != 2)
  {
    NSLog(CFSTR("FxPlug requested invalid image depth: %lu"), a1);
    if (a1 == 32)
    {
      NSLog(CFSTR("Requested 32, did you intend to request kFxDepth_FLOAT32?"));
      return 32;
    }
    if (a1 != 16)
    {
      if (a1 == 8)
      {
        NSLog(CFSTR("Requested 8, did you intend to request kFxDepth_UINT8?"));
        return 8;
      }
      return 32;
    }
    NSLog(CFSTR("Requested 16, did you intend to request kFxDepth_FLOAT16?"));
  }
  return 16;
}

uint64_t OZFxPlug_FxDepthFromDepth(int a1)
{
  if (a1 == 32)
    return 3;
  else
    return 2 * (a1 == 16);
}

uint64_t OZFxPlug_ChannelOrderFromFxDepth(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 2)
    v1 = 13;
  else
    v1 = 3;
  if (a1 == 3)
    return 16;
  else
    return v1;
}

uint64_t OZFxPlug_CallFrameSetup(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  __int128 v12;
  _OWORD v13[3];
  _OWORD v14[4];
  uint64_t v15;
  _OWORD v16[3];

  if (a4)
  {
    v8 = a3[1];
    v16[0] = *a3;
    v16[1] = v8;
    v16[2] = a3[2];
    v9 = *(_OWORD *)(a4 + 48);
    v14[2] = *(_OWORD *)(a4 + 32);
    v14[3] = v9;
    v15 = *(_QWORD *)(a4 + 64);
    v10 = *(_OWORD *)(a4 + 16);
    v14[0] = *(_OWORD *)a4;
    v14[1] = v10;
    result = objc_msgSend(a2, "frameSetup:inputInfo:hardware:software:", v16, v14, a5, a6);
    if ((result & 1) != 0)
      return result;
  }
  else
  {
    v12 = a3[1];
    v13[0] = *a3;
    v13[1] = v12;
    v13[2] = a3[2];
    result = objc_msgSend(a2, "frameSetup:hardware:software:", v13, a5, a6);
    if ((result & 1) != 0)
      return result;
  }
  *a5 = 0;
  *a6 = 0;
  return result;
}

uint64_t OZFxPlug_CallRender(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  int LogFxPlugRenderTimeEnabled;
  __int128 v13;
  uint64_t v14;
  const PCString *v15;
  uint64_t v16;
  double Seconds;
  _OWORD v19[3];
  _OWORD v20[3];
  OZChannelBase v21;

  PGSetCurrentContextSentry::PGSetCurrentContextSentry((PGSetCurrentContextSentry *)&v21.var4);
  PCTimer::PCTimer((PCTimer *)&v21);
  LogFxPlugRenderTimeEnabled = LiRenderingTechnology::getLogFxPlugRenderTimeEnabled((LiRenderingTechnology *)(a7 + 1316));
  if (LogFxPlugRenderTimeEnabled)
    PCTimer::start((PCTimer *)&v21);
  v13 = a6[1];
  if (a5)
  {
    v20[0] = *a6;
    v20[1] = v13;
    v20[2] = a6[2];
    v14 = objc_msgSend(a2, "renderOutput:withInput:withInfo:", a4, a5, v20);
  }
  else
  {
    v19[0] = *a6;
    v19[1] = v13;
    v19[2] = a6[2];
    v14 = objc_msgSend(a2, "renderOutput:withInfo:", a4, v19);
  }
  v16 = v14;
  if (LogFxPlugRenderTimeEnabled)
  {
    PCTimer::stop((PCTimer *)&v21);
    Seconds = PCTimer::getSeconds((PCTimer *)&v21);
    printf("FxPlug Graph Building Time (ms) : %g\n", Seconds * 1000.0);
  }
  OZChannelBase::setRangeName(&v21, v15);
  PGSetCurrentContextSentry::~PGSetCurrentContextSentry((PGSetCurrentContextSentry *)&v21.var4);
  return v16;
}

void sub_1B2F4D170(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, OZChannelBase *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  OZChannelBase::setRangeName((OZChannelBase *)&a23, a2);
  PGSetCurrentContextSentry::~PGSetCurrentContextSentry((PGSetCurrentContextSentry *)(v23 - 80));
  _Unwind_Resume(a1);
}

void OZFxPlug_CalculateImageInfo(id *a1@<X0>, OZSceneNode *lpsrc@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>, CMTime *a8)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  CMTime v15;

  *(_QWORD *)a7 = (float)a3;
  *(_QWORD *)(a7 + 8) = (float)a4;
  *(_QWORD *)(a7 + 16) = a5;
  *(_QWORD *)(a7 + 24) = 4;
  if (a6)
    v11 = 2;
  else
    v11 = 1;
  v12 = 2;
  if (a6)
    v12 = 0;
  *(_QWORD *)(a7 + 40) = 0;
  *(_QWORD *)(a7 + 48) = v12;
  *(_QWORD *)(a7 + 32) = v11;
  *(_BYTE *)(a7 + 56) = 1;
  *(_QWORD *)(a7 + 64) = 0x3FF0000000000000;
  if (lpsrc)
  else
    v13 = 0;
  v15 = *a8;
  if (OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(a1, &v15))
  {
    v14 = *(double *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 272))(lpsrc) + 384);
  }
  else
  {
    if (!v13)
      return;
    v14 = (*(double (**)(void *))(*(_QWORD *)v13 + 1328))(v13);
  }
  *(double *)(a7 + 64) = v14;
  if (v14 == 0.0)
    *(_QWORD *)(a7 + 64) = 0x3FF0000000000000;
}

double OZFxPlug_GetScale(const LiAgent *a1, double *a2, double *a3)
{
  double result;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0.0;
  v8 = 0;
  v9 = 0;
  OZFxPlug_GetScale((uint64_t)a1, (uint64_t)&v7);
  result = v7;
  v6 = v8;
  *a2 = v7;
  *(_QWORD *)a3 = v6;
  return result;
}

double OZFxPlug_ClampRectToMaxTextureSize@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  double v3;
  unint64_t v4;
  double result;
  double v6;
  double v7;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  v3 = a2[1].f64[0];
  if (v3 > 4096.0)
  {
    *(double *)&v4 = ceil((v3 + -4096.0) * 0.5);
    *a2 = vaddq_f64((float64x2_t)v4, *a2);
    a2[1].f64[0] = v3 - (*(double *)&v4 + *(double *)&v4);
  }
  result = a2[1].f64[1];
  if (result > 4096.0)
  {
    v6 = ceil((result + -4096.0) * 0.5);
    v7 = v6 + a2->f64[1];
    a2->f64[0] = a2->f64[0] + 0.0;
    a2->f64[1] = v7;
    result = result - (v6 + v6);
    a2[1].f64[1] = result;
  }
  return result;
}

void OZFxPlug_GenerateFailedRenderNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxPlugUtilities.mm");
  pcAbortImpl();
}

void sub_1B2F4D4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  v8 = *(_QWORD *)(v6 - 40);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v6 - 32);
  _Unwind_Resume(a1);
}

void OZFxPlug_GetBlendOptions(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  PCBlendOptions *v14;
  PCShared_base *v15;
  PCSharedCount v16;
  PCSharedCount v17;

  v6 = objc_opt_respondsToSelector();
  *(_QWORD *)a3 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 8));
  if ((v6 & 1) != 0)
  {
    v7 = (void *)objc_msgSend(a1, "getBlendOptionsAtTime:", a2);
    if (v7)
    {
      v16.var0 = 0;
      PCSharedCount::PCSharedCount(&v17);
      v8 = operator new();
      *(_BYTE *)(v8 + 48) = 1;
      *(_QWORD *)v8 = &unk_1E658C800;
      *(_QWORD *)(v8 + 32) = &unk_1E658C830;
      *(_QWORD *)(v8 + 40) = 0;
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v16, (PCShared_base *)v8);
      v9 = objc_msgSend(v7, "getLRBlendMode");
      if (!v16.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)v16.var0 + 2) = v9;
      objc_msgSend(v7, "getAmount");
      if (!v16.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)v16.var0 + 3) = v10;
      objc_msgSend(v7, "getIntensity");
      if (!v16.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)v16.var0 + 4) = v11;
      objc_msgSend(v7, "getIntensityScale");
      if (!v16.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)v16.var0 + 5) = v12;
      objc_msgSend(v7, "getOpacity");
      if (!v16.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)v16.var0 + 6) = v13;
      v14 = (PCBlendOptions *)operator new();
      PCBlendOptions::PCBlendOptions(v14);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a3, v14);
      v15 = *(PCShared_base **)a3;
      if (!*(_QWORD *)a3)
        throw_PCNullPointerException(1);
      *((_DWORD *)v15 + 2) = 35;
      PCPtr<void>::operator=<PCLightWrapOptions>((_QWORD *)v15 + 2, &v16);
      PCSharedCount::~PCSharedCount(&v17);
    }
  }
}

void sub_1B2F4D6E0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  MEMORY[0x1B5E29170](v3, 0x10A1C40239A8A55);
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlug_GetBoundsFromSceneNode@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 16) = _Q0;
  if (v8)
    v9 = v8;
  v10 = 1552;
  if (!v8)
    v10 = 16;
  return (*(uint64_t (**)(void))(*v9 + v10))();
}

int32x2_t OZFxPlug_GetAgentBoundary(LiAgent *a1, int32x2_t *a2)
{
  int32x2_t result;
  int32x2_t v4;
  float64x2_t v5[2];

  LiAgent::getBoundary(a1, (uint64_t)v5);
  result = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v5[0], (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  v4 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v5[1], v5[0])))), result);
  *a2 = result;
  a2[1] = v4;
  return result;
}

BOOL OZFxPlug_GetInputNode(uint64_t *a1, uint64_t a2, int32x2_t *a3, __int128 *a4, uint64_t a5, int a6, OZRenderParams *a7, int a8, char a9, LiImageSource *a10, uint64_t a11, void *lpsrc, uint64_t a13)
{
  _BOOL8 v13;
  PCShared_base *v18;
  OZImageElement *v19;
  PCShared_base *v20;
  uint64_t v21;
  uint64_t v22;
  CGColorSpace *v23;
  const FxColorDescription *ActualColorDescription;
  uint64_t v25;
  float64_t v26;
  int32x2_t v27;
  int64x2_t v28;
  float64x2_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int32x2_t v37;
  int32x2_t v38;
  FxColorDescription v40;
  PCShared_base *v41;
  PCSharedCount v42;
  __int128 v43;
  uint64_t v44;
  LiImageSource *v45;
  PCSharedCount v46;
  float64x2_t v47;
  float64x2_t v48;
  _BYTE v49[48];
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  __n128 v53;

  if ((a9 & 1) != 0)
    return 0;
  if (a6)
  {
    v43 = *a4;
    v44 = *((_QWORD *)a4 + 2);
    (*(void (**)(LiImageSource **__return_ptr, LiImageSource *, __int128 *, uint64_t, OZRenderParams *))(*(_QWORD *)a10 + 136))(&v45, a10, &v43, a5, a7);
  }
  else
  {
    v45 = a10;
    if (a10)
      v18 = (PCShared_base *)((char *)a10 + *(_QWORD *)(*(_QWORD *)a10 - 24));
    else
      v18 = 0;
    PCSharedCount::PCSharedCount(&v46, v18);
  }
  v41 = 0;
  PCSharedCount::PCSharedCount(&v42);
  if (*(_DWORD *)(a2 + 36) != 2)
  {
    LiRenderingTechnology::setEnableMetalRendering(a2, 1);
    *(_QWORD *)&v52[40] = 0x3FF0000000000000;
    *(_QWORD *)v52 = 0x3FF0000000000000;
    *(_QWORD *)&v49[40] = 0x3FF0000000000000;
    *(_QWORD *)v49 = 0x3FF0000000000000;
    memset(&v49[8], 0, 32);
    v50 = 0u;
    v51 = 0u;
    memset(&v52[8], 0, 32);
    LiAgent::setPixelTransform(a2, (uint64_t)v49);
    if (lpsrc)
    {
      if (v19)
      {
        if (OZImageElement::isTransitionSource(v19))
        {
          OZRenderParams::getResolution(a7, &v53);
          memset(&v49[8], 0, 32);
          *(_QWORD *)&v49[40] = v53.n128_u64[1];
          *(_QWORD *)v49 = v53.n128_u64[0];
          v50 = 0u;
          v51 = 0u;
          memset(&v52[8], 0, 32);
          *(_QWORD *)v52 = 0x3FF0000000000000;
          *(_QWORD *)&v52[40] = 0x3FF0000000000000;
          PCMatrix44Tmpl<double>::operator*((uint64_t)v49, *(__int128 **)(a2 + 160), (uint64_t)&v47);
          LiRenderingTechnology::setEnableMetalRendering(a2, 0);
          LiAgent::setImageSpace(a2, 0);
          LiAgent::setPixelTransform(a2, (uint64_t)&v47);
        }
      }
    }
    v20 = (PCShared_base *)operator new();
    OZLiHePixelTransformFixer::OZLiHePixelTransformFixer((uint64_t)v20, *(_DWORD *)(a2 + 36));
    PCPtr<LiImageSource>::operator=<LiImageSource>(&v41, v20);
    *(_QWORD *)(a2 + 24) = v41;
  }
  LiAgent::getHelium((LiAgent *)a2, v45, (HGNode **)v49);
  v21 = *a1;
  v22 = *(_QWORD *)v49;
  if (*a1 == *(_QWORD *)v49)
  {
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  }
  else
  {
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v22 = *(_QWORD *)v49;
    }
    *a1 = v22;
  }
  v23 = *(CGColorSpace **)a13;
  *(_QWORD *)v49 = v23;
  if (v23)
    PCCFRefTraits<CGColorSpace *>::retain(v23);
  *(_QWORD *)&v49[8] = *(_QWORD *)(a13 + 8);
  *(_DWORD *)&v49[16] = *(_DWORD *)(a13 + 16);
  v49[24] = *(_BYTE *)(a13 + 24);
  ActualColorDescription = (const FxColorDescription *)LiAgent::getActualColorDescription((LiAgent *)a2);
  v40._pcColorDesc._colorSpaceRef._obj = *(CGColorSpace **)v49;
  if (*(_QWORD *)v49)
    PCCFRefTraits<CGColorSpace *>::retain(*(CGColorSpaceRef *)v49);
  *(_QWORD *)&v40._pcColorDesc._dynamicRange = *(_QWORD *)&v49[8];
  v40._pcColorDesc._toneMapMethod._gain = *(float *)&v49[16];
  v40._isPremultiplied = v49[24];
  OZFxPlug_ConformToProcessingDescription(&v40, a1, ActualColorDescription, (uint64_t *)&v47);
  v25 = *a1;
  v26 = v47.f64[0];
  if (*a1 == *(_QWORD *)&v47.f64[0])
  {
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  }
  else
  {
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
      v26 = v47.f64[0];
    }
    *(float64_t *)a1 = v26;
    v47.f64[0] = 0.0;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v40._pcColorDesc._colorSpaceRef._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v49);
  OZFxPlug_GetAgentBoundary((LiAgent *)a2, a3);
  if (*(_DWORD *)(a2 + 36) != 2)
    *(_QWORD *)(a2 + 24) = 0;
  v27 = a3[1];
  v28.i64[0] = a3->i32[0];
  v28.i64[1] = (int)HIDWORD(*(unint64_t *)a3);
  v29 = vcvtq_f64_s64(v28);
  v28.i64[0] = v27.i32[0];
  v28.i64[1] = v27.i32[1];
  v47 = v29;
  v48 = vcvtq_f64_s64(v28);
  v30 = *(__int128 **)(a2 + 160);
  v31 = v30[3];
  v33 = *v30;
  v32 = v30[1];
  *(_OWORD *)&v49[32] = v30[2];
  v50 = v31;
  *(_OWORD *)v49 = v33;
  *(_OWORD *)&v49[16] = v32;
  v34 = v30[7];
  v36 = v30[4];
  v35 = v30[5];
  *(_OWORD *)&v52[16] = v30[6];
  *(_OWORD *)&v52[32] = v34;
  v51 = v36;
  *(_OWORD *)v52 = v35;
  v13 = PCMatrix44Tmpl<double>::transformRect<double>((double *)v49, v47.f64, (uint64_t)&v47);
  if (v13)
  {
    v37 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v47, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
    v38 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v47, v48)))), v37);
    *a3 = v37;
    a3[1] = v38;
  }
  PCSharedCount::~PCSharedCount(&v42);
  PCSharedCount::~PCSharedCount(&v46);
  return v13;
}

void sub_1B2F4DC6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21)
{
  PCSharedCount *v21;
  uint64_t v22;

  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 24))(a21);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v22 - 208));
  PCSharedCount::~PCSharedCount(v21);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B2F4DC38);
  }
  PCSharedCount::~PCSharedCount(&a20);
  _Unwind_Resume(a1);
}

uint64_t OZLiHePixelTransformFixer::OZLiHePixelTransformFixer(uint64_t a1, int a2)
{
  *(_QWORD *)(a1 + 24) = &off_1E65EB048;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1E65C0600);
  *(_QWORD *)a1 = &unk_1E65C0518;
  *(_QWORD *)(a1 + 24) = &unk_1E65C05E0;
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

void sub_1B2F4DDDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 40) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

CGColorSpace **OZFxPlug_ConformToProcessingDescription@<X0>(FxColorDescription *this@<X2>, uint64_t *a2@<X0>, const FxColorDescription *a3@<X1>, uint64_t *a4@<X8>)
{
  const PCToneMapMethod *ToneMapMethod;
  FxColorDescription v10;

  ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(this);
  FxColorDescription::FxColorDescription(&v10, a3, ToneMapMethod);
  FxApplyColorConform(a2, &v10, this, a4);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v10._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2F4DE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

void OZFxPlug_TextureAndBitmapRetriever(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/Effects/FxFilter/OZFxPlugUtilities.mm");
  pcAbortImpl();
}

uint64_t sub_1B2F4DEB0()
{
  return 0;
}

uint64_t pixelFormatFromRendererIntermediateFormat(HGRenderer *a1)
{
  unsigned int v1;

  if (!a1)
    return 17;
  v1 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a1 + 128))(a1, 19) - 22;
  if (v1 > 5)
    return 17;
  else
    return dword_1B3561A5C[v1];
}

uint64_t OZFxPlug_ConvertDynamicRangeType(FxColorDescription *a1)
{
  if ((FxColorDescription::isHDR(a1) & 1) != 0)
    return 2;
  else
    return FxColorDescription::isSDR(a1);
}

void OZLiHePixelTransformFixer::~OZLiHePixelTransformFixer(OZChannelBase *this)
{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E65C0600);
  *(_QWORD *)(v1 + 24) = &off_1E65EB048;
  *(_BYTE *)(v1 + 40) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 32));
}

{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E65C0600);
  *(_QWORD *)(v1 + 24) = &off_1E65EB048;
  *(_BYTE *)(v1 + 40) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 32));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZLiHePixelTransformFixer::~OZLiHePixelTransformFixer(OZLiHePixelTransformFixer *this)
{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName((OZChannelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (const PCString *)&off_1E65C0600);
  *(_QWORD *)(v1 + 24) = &off_1E65EB048;
  *(_BYTE *)(v1 + 40) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 32));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65C0600);
  *((_QWORD *)v1 + 3) = &off_1E65EB048;
  v1[40] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 4);
  JUMPOUT(0x1B5E29170);
}

void sub_1B2F4E398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4E4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *get3DAPIData(void)
{
  unsigned __int8 v0;
  char *v1;

  {
    pthread_key_create((pthread_key_t *)&get3DAPIData(void)::apiData, (void (__cdecl *)(void *))PCThreadSpecific<OZFx3DAPIData>::destroy);
  }
  v1 = (char *)pthread_getspecific(get3DAPIData(void)::apiData);
  if (!v1)
  {
    v1 = (char *)operator new();
    *((_QWORD *)v1 + 96) = 0;
    *((_QWORD *)v1 + 10) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 5) = 0x3FF0000000000000;
    *(_QWORD *)v1 = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    *((_QWORD *)v1 + 26) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 21) = 0x3FF0000000000000;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)(v1 + 120) = _Q1;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 12) = 0u;
    *(_OWORD *)(v1 + 232) = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
    *((_QWORD *)v1 + 42) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 37) = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 248) = _Q1;
    *(_OWORD *)(v1 + 280) = 0u;
    *(_OWORD *)(v1 + 264) = 0u;
    *((_OWORD *)v1 + 19) = 0u;
    *((_OWORD *)v1 + 20) = 0u;
    *(_OWORD *)(v1 + 360) = 0u;
    *(_OWORD *)(v1 + 344) = 0u;
    *((_QWORD *)v1 + 58) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 53) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 47) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 48) = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 392) = 0u;
    *(_OWORD *)(v1 + 408) = 0u;
    *((_OWORD *)v1 + 27) = 0u;
    *((_OWORD *)v1 + 28) = 0u;
    *(_OWORD *)(v1 + 488) = 0u;
    *(_OWORD *)(v1 + 472) = 0u;
    *((_QWORD *)v1 + 79) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 74) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 69) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 63) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 64) = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 536) = 0u;
    *(_OWORD *)(v1 + 520) = 0u;
    *((_OWORD *)v1 + 35) = 0u;
    *((_OWORD *)v1 + 36) = 0u;
    *(_OWORD *)(v1 + 616) = 0u;
    *(_OWORD *)(v1 + 600) = 0u;
    *((_QWORD *)v1 + 95) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 90) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 85) = 0x3FF0000000000000;
    *((_QWORD *)v1 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(v1 + 664) = 0u;
    *(_OWORD *)(v1 + 648) = 0u;
    *((_OWORD *)v1 + 43) = 0u;
    *((_OWORD *)v1 + 44) = 0u;
    *(_OWORD *)(v1 + 744) = 0u;
    *(_OWORD *)(v1 + 728) = 0u;
    pthread_setspecific(get3DAPIData(void)::apiData, v1);
  }
  return v1;
}

void sub_1B2F4E6F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2F4EB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t PCThreadSpecific<OZFx3DAPIData>::destroy(uint64_t result)
{
  if (result)
    JUMPOUT(0x1B5E29170);
  return result;
}

double OZGetSystemFontWeightFromName(const __CFString *a1)
{
  uint64_t *v2;
  CFIndex location;

  if (CFStringFind(a1, CFSTR("UltraLight"), 1uLL).location == -1)
  {
    if (CFStringFind(a1, CFSTR("Light"), 1uLL).location == -1)
    {
      if (CFStringFind(a1, CFSTR("Thin"), 1uLL).location == -1)
      {
        if (CFStringFind(a1, CFSTR("Medium"), 1uLL).location == -1)
        {
          if (CFStringFind(a1, CFSTR("Semibold"), 1uLL).location == -1)
          {
            if (CFStringFind(a1, CFSTR("Bold"), 1uLL).location == -1)
            {
              if (CFStringFind(a1, CFSTR("Heavy"), 1uLL).location == -1)
              {
                location = CFStringFind(a1, CFSTR("Black"), 1uLL).location;
                v2 = &OZFontWeightBlack;
                if (location == -1)
                  v2 = &OZFontWeightRegular;
              }
              else
              {
                v2 = &OZFontWeightHeavy;
              }
            }
            else
            {
              v2 = &OZFontWeightBold;
            }
          }
          else
          {
            v2 = &OZFontWeightSemibold;
          }
        }
        else
        {
          v2 = &OZFontWeightMedium;
        }
      }
      else
      {
        v2 = &OZFontWeightThin;
      }
    }
    else
    {
      v2 = &OZFontWeightLight;
    }
  }
  else
  {
    v2 = &OZFontWeightUltraLight;
  }
  return *(double *)v2;
}

CTFontRef OZCreateFontWithName(const __CFString *a1, CGFloat a2, const CGAffineTransform *a3)
{
  void *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  CFIndex location;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v24;
  CTFontRef result;
  _OWORD v26[3];
  _QWORD v27[2];
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD v32[3];
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  if (CFStringHasPrefix(a1, CFSTR(".")))
  {
    if (CFStringHasPrefix(a1, CFSTR(".SFUI-ExtraCompressed")))
    {
      v6 = (void *)objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithName:size:traits:", a1, 4096, a2);
      if (!v6)
        goto LABEL_11;
LABEL_10:
      v17 = objc_msgSend(v6, "fontDescriptor");
      goto LABEL_19;
    }
    if (CFStringHasPrefix(a1, CFSTR(".SFUI-Compressed")))
    {
      v7 = OZGetSystemFontWeightFromName(a1);
      v33 = *MEMORY[0x1E0CEB510];
      v32[0] = CFSTR("NSCTFontUIFontDesignDefault");
      v8 = *MEMORY[0x1E0CEB608];
      v31[0] = CFSTR("NSCTFontUIFontDesignTrait");
      v31[1] = v8;
      v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
      v31[2] = *MEMORY[0x1E0CEB618];
      v32[1] = v9;
      v32[2] = &unk_1E66493C8;
      v34[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 3);
      v10 = (void *)MEMORY[0x1E0C99D80];
      v11 = v34;
      v12 = &v33;
    }
    else
    {
      if (!CFStringHasPrefix(a1, CFSTR(".SFUI-Heavy")))
        goto LABEL_11;
      v13 = OZGetSystemFontWeightFromName(a1);
      v29 = *MEMORY[0x1E0CEB510];
      v14 = *MEMORY[0x1E0CEB608];
      v27[0] = CFSTR("NSCTFontUIFontDesignTrait");
      v27[1] = v14;
      v28[0] = CFSTR("NSCTFontUIFontDesignDefault");
      v28[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v13);
      v30 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
      v10 = (void *)MEMORY[0x1E0C99D80];
      v11 = &v30;
      v12 = &v29;
    }
    v15 = objc_msgSend(v10, "dictionaryWithObjects:forKeys:count:", v11, v12, 1);
    v16 = objc_msgSend(MEMORY[0x1E0CEA5F0], "fontDescriptorWithFontAttributes:", v15);
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithDescriptor:size:", v16, a2);
    if (v6)
      goto LABEL_10;
LABEL_11:
    OZGetSystemFontWeightFromName(a1);
    if (CFStringFind(a1, CFSTR("SFCompactRounded"), 1uLL).location == -1)
    {
      if (CFStringFind(a1, CFSTR("SFCompactText"), 1uLL).location == -1)
      {
        CFStringFind(a1, CFSTR("SFUIDisplay"), 1uLL);
        v18 = CFSTR("NSCTFontUIFontDesignDefault");
      }
      else
      {
        v18 = CFSTR("NSCTFontUIFontDesignCompact");
      }
    }
    else
    {
      v18 = CFSTR("NSCTFontUIFontDesignCompactRounded");
    }
    location = CFStringFind(a1, CFSTR("Italic"), 1uLL).location;
    v20 = (void *)MEMORY[0x1E0CEA5E8];
    objc_msgSend(MEMORY[0x1E0CEA5E8], "systemFontSize");
    v21 = (void *)objc_msgSend(v20, "systemFontOfSize:weight:");
    if (!v21)
    {
LABEL_23:
      result = v21;
      if (result)
        return result;
      return CTFontCreateWithName(a1, a2, a3);
    }
    v22 = (void *)objc_msgSend((id)objc_msgSend(v21, "fontDescriptor"), "fontDescriptorWithDesign:", v18);
    v23 = v22;
    if (location == -1)
    {
LABEL_20:
      if (a3)
      {
        v24 = *(_OWORD *)&a3->c;
        v26[0] = *(_OWORD *)&a3->a;
        v26[1] = v24;
        v26[2] = *(_OWORD *)&a3->tx;
        v23 = (void *)objc_msgSend(v23, "fontDescriptorWithMatrix:", v26);
      }
      v21 = (void *)objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithDescriptor:size:", v23, a2);
      goto LABEL_23;
    }
    v17 = objc_msgSend(v22, "fontDescriptorWithSymbolicTraits:", objc_msgSend(v22, "symbolicTraits") | 1);
LABEL_19:
    v23 = (void *)v17;
    goto LABEL_20;
  }
  return CTFontCreateWithName(a1, a2, a3);
}

BOOL OZIsFontAppleColorEmoji(const __CTFont *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  _BOOL8 v3;

  v1 = CTFontCopyPostScriptName(a1);
  if (!v1)
    return 0;
  v2 = v1;
  if (CFStringCompare(v1, CFSTR("AppleColorEmoji"), 0))
    v3 = CFStringCompare(v2, CFSTR(".AppleColorEmojiUI"), 0) == kCFCompareEqualTo;
  else
    v3 = 1;
  CFRelease(v2);
  return v3;
}

void sub_1B2F4F2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4F420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2F4F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFComparisonResult KilledPlugin::compareUUIDs(CFUUIDRef uuid, const __CFUUID *a2, const __CFUUID *a3)
{
  const __CFAllocator *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFComparisonResult v7;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], uuid);
  v6 = CFUUIDCreateString(v4, a2);
  v7 = CFStringCompare(v5, v6, 1uLL);
  CFRelease(v5);
  CFRelease(v6);
  return v7;
}

void OZFxPlugSharedBase::OZFxPlugSharedBase(OZFxPlugSharedBase *this, PCString *a2, OZChannelFolder *a3, int a4, char a5)
{
  OZFxPlugAPIManager **v10;
  void **v11;
  __CFString *var0;
  uint64_t *p_info;
  unint64_t v14;
  PCString v15;
  id v16;
  __CFString *v17;
  CFUUIDRef v18;
  id v19;
  const __CFUUID *v20;
  const __CFAllocator *v21;
  CFStringRef v22;
  char *v23;
  objc_class *v24;
  const __CFString *v25;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  _OWORD *v30;
  __int128 v31;
  __CFString *v32;
  uint64_t v33;
  __CFString *v34;
  const __CFString *v35;
  BOOL v36;
  PCMutex *v37;
  uint64_t v38;
  OZFxPlugAPIManager *v39;
  void *v40;
  uint64_t v41;
  int v42;
  OZChannelFolder *v43;
  OZFxPlugParameterHandler *v44;
  void *v45;
  int v46;
  void *v47;
  CFUUIDRef v48;
  uint64_t v49;
  NSDictionary *v50;
  std::bad_alloc *v51;
  std::bad_alloc *v52;
  void *v53;
  void *v54;
  void *v55;
  void *exception;
  PCString *v57;
  PCString *v58;
  PCString v59[2];
  uint64_t v60;
  PCString v61;
  void *__p[2];
  uint64_t v63;
  PCMutex *v64;
  char v65;

  *(_QWORD *)this = off_1E65C07A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v10 = (OZFxPlugAPIManager **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  v57 = (PCString *)((char *)this + 152);
  PCString::PCString((PCString *)this + 19, a2);
  *((_QWORD *)this + 20) = 0;
  v11 = (void **)((char *)this + 160);
  *(_DWORD *)((char *)this + 183) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 187) = a5;
  *((_WORD *)this + 94) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_DWORD *)this + 48) = a4;
  *((_DWORD *)this + 49) = 0;
  *((_WORD *)this + 100) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_DWORD *)((char *)this + 231) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 272), 1);
  *((_QWORD *)this + 34) = &unk_1E64E2000;
  v58 = (PCString *)((char *)this + 344);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 43) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 368), 1);
  *((_DWORD *)this + 110) = 5;
  __p[0] = this;
  std::allocate_shared[abi:ne180100]<OZFxPlugSharedLock,std::allocator<OZFxPlugSharedLock>,OZFxPlugSharedBase *,void>((OZFxPlugSharedBase **)__p, v59);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)this + 352, (__int128 *)v59);
  var0 = v59[1].var0;
  if (v59[1].var0)
  {
    p_info = &v59[1].var0->info;
    do
      v14 = __ldaxr((unint64_t *)p_info);
    while (__stlxr(v14 - 1, (unint64_t *)p_info));
    if (!v14)
    {
      (*((void (**)(__CFString *))var0->isa + 2))(var0);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)var0);
    }
  }
  createPlatformDelegate(this, (OZFxPlugOOPDelegate **)v59);
  v15.var0 = v58->var0;
  v58->var0 = (__CFString *)v59[0];
  if (v15.var0)
    (*((void (**)(PCString))v15.var0->isa + 1))(v15);
  v16 = +[PROPlugInManager sharedPlugInManager](PROPlugInManager, "sharedPlugInManager");
  v17 = PCString::cf_str(a2);
  v18 = CFUUIDCreateFromString(0, v17);
  v19 = (id)objc_msgSend(v16, "plugInWithUUID:", v18);
  CFRelease(v18);
  if (v19 || (v19 = (id)objc_msgSend(v16, "plugInWithClassName:", PCString::ns_str(a2))) != 0)
  {
    *((_QWORD *)this + 2) = v19;
    goto LABEL_11;
  }
  PCString::PCString((PCString *)__p, a2);
  v32 = (__CFString *)PCString::ns_str((PCString *)__p);
  v33 = 0;
  while (!-[__CFString isEqualToString:](v32, "isEqualToString:", off_1E65C09A0[v33]))
  {
    v33 += 2;
    if (v33 == 126)
    {
      v34 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PAE%@"), v32);
      goto LABEL_35;
    }
  }
  v34 = off_1E65C09A0[v33 + 1];
LABEL_35:
  PCURL::PCURL((PCURL *)v59, v34);
  PCString::~PCString((PCString *)__p);
  v35 = PCString::ns_str(v59);
  PCString::~PCString(v59);
  if (!v35)
  {
    *((_QWORD *)this + 2) = 0;
    goto LABEL_67;
  }
  v19 = (id)objc_msgSend(v16, "plugInWithClassName:", v35);
  *((_QWORD *)this + 2) = v19;
  if (!v19)
  {
LABEL_67:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](exception, "Unable to create PROPlugIn in OZFxPlugSharedBase().");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
LABEL_11:
  v20 = (const __CFUUID *)objc_msgSend(v19, "uuid");
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20);
  PCURL::PCURL((PCURL *)&v61, v22);
  v23 = PCString::createCStr(&v61);
  std::string::basic_string[abi:ne180100]<0>(v59, v23);
  free(v23);
  if (*((char *)this + 183) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)&v59[0].var0;
  *((_QWORD *)this + 22) = v60;
  CFRelease(v22);
  if (objc_msgSend(*((id *)this + 2), "isBlocked"))
  {
    *((_BYTE *)this + 234) = 1;
    if (!objc_msgSend((id)objc_msgSend(+[PROPlugInManager sharedPlugInManager](PROPlugInManager, "sharedPlugInManager"), "blockedDocumentPlugins"), "objectForKey:", objc_msgSend(*((id *)this + 2), "blockedLookupKey")))objc_msgSend(+[PROPlugInManager sharedPlugInManager](PROPlugInManager, "sharedPlugInManager"), "addDocumentBlockedPlugin:", *((_QWORD *)this + 2));
    v53 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](v53, "Plugin blocked from loading due to known issues in OZFxPlugSharedBase().");
    __cxa_throw(v53, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v24 = (objc_class *)objc_msgSend(*((id *)this + 2), "plugInClass");
  v25 = (const __CFString *)objc_msgSend(*((id *)this + 2), "className");
  if (!v25)
  {
    v54 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](v54, "Unable to get plugin class from _proplug in OZFxPlugSharedBase().");
    __cxa_throw(v54, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v59[0].var0 = 0;
  PCString::set(v59, v25);
  PCString::set(v57, v59);
  PCString::~PCString(v59);
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v59);
  v26 = (void *)objc_msgSend((id)objc_msgSend(*((id *)this + 2), "bundle"), "bundleIdentifier");
  if ((objc_msgSend(v26, "isEqualToString:", CFSTR("com.apple.motion.filters")) & 1) == 0
    && (objc_msgSend(v26, "isEqualToString:", CFSTR("com.apple.motion.filtersLegacyPath")) & 1) == 0
    && (objc_msgSend(v26, "isEqualToString:", CFSTR("com.apple.motion.contentfilters")) & 1) == 0
    && (objc_msgSend(v26, "isEqualToString:", CFSTR("com.apple.filter.PAECIAdaptor")) & 1) == 0
    && (objc_msgSend(v26, "isEqualToString:", CFSTR("com.apple.InternalFiltersXPC")) & 1) == 0
    && (!objc_msgSend(v26, "hasPrefix:", CFSTR("com.apple."))
     || (objc_msgSend(v26, "hasSuffix:", CFSTR("ProVideoX")) & 1) == 0
     && (objc_msgSend(v26, "hasSuffix:", CFSTR("ProVideoiOS")) & 1) == 0))
  {
    *((_BYTE *)this + 216) = 1;
    v27 = objc_msgSend(*((id *)this + 2), "displayName");
    if ((v28 & 1) == 0
    {
      PCMutex::PCMutex(&warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnMutex);
      __cxa_atexit((void (*)(void *))PCMutex::~PCMutex, &warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnMutex, &dword_1B2737000);
    }
    v64 = &warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnMutex;
    PCMutex::lock(&warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnMutex);
    v65 = 1;
    if (objc_msgSend(v26, "hasPrefix:", CFSTR("com.apple.")))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v26, "UTF8String"));
      if ((v29 & 1) == 0
      {
        warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnList = 0;
        qword_1EF076788 = 0;
        qword_1EF076790 = 0;
        __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnList, &dword_1B2737000);
      }
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnList, qword_1EF076788, (unsigned __int8 **)__p) == qword_1EF076788)
      {
        NSLog(CFSTR("WARNING! 3rd Party FxPlug \"%@\" with invalid CFBundleIdentifier: %@. This plug-in will be blocked in the future."), v27, v26);
        v30 = (_OWORD *)qword_1EF076788;
        if (qword_1EF076788 >= (unint64_t)qword_1EF076790)
        {
          v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnList, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(v63) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)qword_1EF076788, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v31 = *(_OWORD *)__p;
            *(_QWORD *)(qword_1EF076788 + 16) = v63;
            *v30 = v31;
          }
          v38 = (uint64_t)v30 + 24;
          qword_1EF076788 = (uint64_t)v30 + 24;
        }
        qword_1EF076788 = v38;
      }
      if (SHIBYTE(v63) < 0)
        operator delete(__p[0]);
      v37 = v64;
      v36 = v65 == 0;
    }
    else
    {
      v36 = 0;
      v37 = &warnIfBundleIDHasApplePrefix(NSString *,NSString *)::warnMutex;
    }
    if (v37 && !v36)
      PCMutex::unlock(v37);
  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 80))(*((_QWORD *)this + 43), *((_QWORD *)this + 2));
  v39 = objc_alloc_init(OZFxPlugAPIManager);
  *v10 = v39;
  if (!v39)
    goto LABEL_60;
  -[OZFxPlugAPIManager registerAPIObject:forProtocol:version:](v39, "registerAPIObject:forProtocol:version:", +[OZFxPlugHostPropertiesAPI sharedHostPropertiesAPI](OZFxPlugHostPropertiesAPI, "sharedHostPropertiesAPI"), &unk_1EF0A80F0, 1);
  if (*((_DWORD *)this + 48) == -1)
  {
    v40 = (void *)*((_QWORD *)this + 2);
    *((_DWORD *)this + 48) = 0;
    if (objc_msgSend((id)objc_msgSend(v40, "version"), "length"))
      *((_DWORD *)this + 48) = objc_msgSend((id)objc_msgSend(v40, "version"), "intValue");
  }
  v41 = objc_msgSend([v24 alloc], "initWithAPIManager:", *v10);
  *((_QWORD *)this + 3) = v41;
  if (!v41)
  {
LABEL_60:
    v51 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v52 = std::bad_alloc::bad_alloc(v51);
    __cxa_throw(v52, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
  }
  *((_BYTE *)this + 196) = objc_opt_respondsToSelector() & 1;
  *((_BYTE *)this + 198) = objc_opt_respondsToSelector() & 1;
  *((_BYTE *)this + 197) = objc_opt_respondsToSelector() & 1;
  *((_BYTE *)this + 199) = objc_opt_respondsToSelector() & 1;
  v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 72))(*((_QWORD *)this + 43));
  OZFxPlugSharedBase::allocateAndRegisterParameterHandlers(this, v42, a3, 0, 0);
  if ((a5 & 1) == 0 && (objc_msgSend(*((id *)this + 3), "addParameters") & 1) == 0)
  {
    v55 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](v55, "Plugin was unable to add its parameters in OZFxPlugSharedBase()");
    __cxa_throw(v55, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(*((id *)this + 4), "setDoneAddingParams:", 1);
  objc_msgSend(*((id *)this + 4), "saveParameterFlags");
  OZFxPlugSharedBase::allocateAndRegisterRemainingHandlers(this, v42, v43, v44);
  v45 = (void *)*((_QWORD *)this + 2);
  v46 = *((_DWORD *)this + 48);
  v47 = (void *)*((_QWORD *)this + 4);
  v48 = CFUUIDCreateFromString(v21, CFSTR("FB917FD2-68DF-4BE7-A313-82124F6DE776"));
  v49 = objc_msgSend(v45, "uuid");
  if (v46 >= 1 && (CFUUIDRef)v49 == v48)
    objc_msgSend(v47, "setIsNewGradientColorize:", 1);
  CFRelease(v48);
  v50 = (NSDictionary *)OZFxPlugSharedBase::pluginProperties(this);
  queryStaticProps(v50, *((unsigned __int8 *)this + 216), (BOOL *)this + 201, (BOOL *)this + 232, (BOOL *)this + 233);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v59);
  PCString::~PCString(&v61);
}

#error "1B2F50048: call analysis failed (funcsize=49)"

void sub_1B2F500D4(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 != 2)
  {
    __cxa_end_catch();
    __cxa_end_catch();
    JUMPOUT(0x1B2F4FCF0);
  }
  __cxa_rethrow();
}

void sub_1B2F500F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCMutex *a14)
{
  PCMutex::~PCMutex(a14);
  JUMPOUT(0x1B2F5011CLL);
}

OZFxPlugOOPDelegate *createPlatformDelegate@<X0>(OZFxPlugSharedBase *a1@<X0>, OZFxPlugOOPDelegate **a2@<X8>)
{
  OZFxPlugOOPDelegate *v4;
  OZFxPlugOOPDelegate *result;

  v4 = (OZFxPlugOOPDelegate *)operator new();
  result = OZFxPlugOOPDelegate::OZFxPlugOOPDelegate(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B2F501BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::allocateAndRegisterParameterHandlers(OZFxPlugSharedBase *this, int a2, OZChannelFolder *a3, OZFxPlugParameterHandler *a4, uint64_t a5)
{
  OZFxPlugParameterHandler_v4 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  OZFxPlugParameterHandler_v4 *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  OZFxPlugParameterHandler *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  OZFxPlugParameterHandler *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  __CFString *v32;
  OZFxPlugVersioningAPI *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  FxPlugAPIHandler *v40;
  uint64_t v41;
  uint64_t result;
  void *exception;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  if (!a4)
  {
    if (a2)
    {
      v17 = [OZFxPlugParameterHandler_v4 alloc];
      v18 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
      v52 = *((_QWORD *)this + 44);
      v53 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      *((_QWORD *)this + 4) = -[OZFxPlugParameterHandler initWithBaseChannel:andPluginLock:](v17, "initWithBaseChannel:andPluginLock:", a3, &v52);
      v14 = v53;
      if (!v53)
        goto LABEL_33;
      v21 = (unint64_t *)&v53->__shared_owners_;
      do
        v16 = __ldaxr(v21);
      while (__stlxr(v16 - 1, v21));
    }
    else
    {
      v27 = [OZFxPlugParameterHandler alloc];
      v28 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
      v50 = *((_QWORD *)this + 44);
      v51 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      *((_QWORD *)this + 4) = -[OZFxPlugParameterHandler initWithBaseChannel:andPluginLock:](v27, "initWithBaseChannel:andPluginLock:", a3, &v50);
      v14 = v51;
      if (!v51)
        goto LABEL_33;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v16 = __ldaxr(v31);
      while (__stlxr(v16 - 1, v31));
    }
LABEL_31:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_33;
  }
  if (!a2)
  {
    v22 = [OZFxPlugParameterHandler alloc];
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    v46 = *((_QWORD *)this + 44);
    v47 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    *((_QWORD *)this + 4) = -[OZFxPlugParameterHandler initWithBaseChannel:andCopy:Skip:andPluginLock:](v22, "initWithBaseChannel:andCopy:Skip:andPluginLock:", a3, a4, a5, &v46);
    v14 = v47;
    if (!v47)
      goto LABEL_33;
    v26 = (unint64_t *)&v47->__shared_owners_;
    do
      v16 = __ldaxr(v26);
    while (__stlxr(v16 - 1, v26));
    goto LABEL_31;
  }
  v10 = [OZFxPlugParameterHandler_v4 alloc];
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v48 = *((_QWORD *)this + 44);
  v49 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *((_QWORD *)this + 4) = -[OZFxPlugParameterHandler initWithBaseChannel:andCopy:Skip:andPluginLock:](v10, "initWithBaseChannel:andCopy:Skip:andPluginLock:", a3, a4, a5, &v48);
  v14 = v49;
  if (v49)
  {
    v15 = (unint64_t *)&v49->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    goto LABEL_31;
  }
LABEL_33:
  v32 = (__CFString *)CFUUIDCreateString(0, (CFUUIDRef)objc_msgSend(*((id *)this + 2), "uuid"));
  if ((-[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("52A68C6D-B49C-41AA-B3EA-03945D0C8EB4")) & 1) != 0
    || (-[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("920273EF-948C-4556-8EB8-8EFEF7A34111")) & 1) != 0
    || -[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("23723AD7-62C4-4ED0-A8C6-FA5A2D7162E4")))
  {
    objc_msgSend(*((id *)this + 4), "setColorCorrection:", 1);
  }
  if (v32)
    CFRelease(v32);
  v33 = [OZFxPlugVersioningAPI alloc];
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v44 = *((_QWORD *)this + 44);
  v45 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  *((_QWORD *)this + 7) = -[OZFxPlugVersioningAPI initWithPluginLock:](v33, "initWithPluginLock:", &v44);
  v37 = v45;
  if (v45)
  {
    v38 = (unint64_t *)&v45->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = [FxPlugAPIHandler alloc];
  v41 = -[FxPlugAPIHandler initWithDelegate:](v40, "initWithDelegate:", *((_QWORD *)this + 4), v44);
  *((_QWORD *)this + 11) = v41;
  if (!*((_QWORD *)this + 4) || !*((_QWORD *)this + 7) || !v41)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](exception, "Unable to allocate some handlers in OZFxPlugSharedBase::allocateParameterHandlers()");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:");
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4260, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4358, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4A30, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4590, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4618, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A46C8, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4F90, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4858, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A48D8, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4980, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A5050, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4B18, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4BC8, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 7), &unk_1EF0A8190, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 11), &unk_1EF0AFFE0, 1);
  result = objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A52B8, 1);
  if (a2)
  {
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A6DD0, 1);
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A6E50, 1);
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A70B8, 1);
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A7358, 1);
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A7410, 1);
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A7268, 1);
    result = objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 11), &unk_1EF0B65A0, 1);
  }
  if (*((_QWORD *)this + 30))
    return objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0B6800, 1);
  return result;
}

void sub_1B2F5075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::allocateAndRegisterRemainingHandlers(OZFxPlugSharedBase *this, int a2, OZChannelFolder *a3, OZFxPlugParameterHandler *a4)
{
  OZFxPlugTimingAPI *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  OZFxPlugHostPrivateAPI *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  OZFxPlugColorGamutHandler *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t result;
  void *exception;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v6 = [OZFxPlugTimingAPI alloc];
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v33 = *((_QWORD *)this + 44);
  v34 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *((_QWORD *)this + 6) = -[OZFxPlugTimingAPI initWithPluginLock:](v6, "initWithPluginLock:", &v33);
  v10 = v34;
  if (v34)
  {
    v11 = (unint64_t *)&v34->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_QWORD *)this + 8) = objc_alloc_init(OZFxPlug3DAPI);
  *((_QWORD *)this + 10) = objc_alloc_init(OZFxPixelTransformsHandler);
  v13 = [OZFxPlugHostPrivateAPI alloc];
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v31 = *((_QWORD *)this + 44);
  v32 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *((_QWORD *)this + 13) = -[OZFxPlugHostPrivateAPI initWithPluginLock:](v13, "initWithPluginLock:", &v31);
  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = [OZFxPlugColorGamutHandler alloc];
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  v29 = *((_QWORD *)this + 44);
  v30 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)this + 16) = -[OZFxPlugColorGamutHandler initWithPluginLock:](v20, "initWithPluginLock:", &v29);
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (!*((_QWORD *)this + 6)
    || !*((_QWORD *)this + 8)
    || !*((_QWORD *)this + 10)
    || !*((_QWORD *)this + 13)
    || !*((_QWORD *)this + 16))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](exception, "Unable to allocate some handlers in OZFxPlugSharedBase::allocateHandlers()");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4E80, 1, v29);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 4), &unk_1EF0A4F00, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 11), &unk_1EF0AFB70, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 13), &unk_1EF0A3D08, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 8), &unk_1EF0A8308, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 8), &unk_1EF0A8250, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 13), &unk_1EF0A3D78, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 6), &unk_1EF0A79F8, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 10), &unk_1EF0A3A58, 1);
  objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 11), &unk_1EF0A0AE8, 1);
  result = objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 16), &unk_1EF0A2958, 1);
  if (a2)
  {
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 6), &unk_1EF0A7DB0, 1);
    objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 11), &unk_1EF0B6420, 1);
    return objc_msgSend(*((id *)this + 1), "registerAPIObject:forProtocol:version:", *((_QWORD *)this + 8), &unk_1EF0A8380, 1);
  }
  return result;
}

void sub_1B2F50AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t queryStaticProps(NSDictionary *a1, int a2, BOOL *a3, BOOL *a4, BOOL *a5)
{
  id v10;
  char v11;
  id v12;
  id v13;
  uint64_t result;

  v10 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("UsesRationalTime"));
  if (v10)
  {
    if (a2)
      v11 = objc_msgSend(v10, "BOOLValue");
    else
      v11 = 1;
  }
  else
  {
    v11 = a2 ^ 1;
  }
  *a3 = v11;
  v12 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("SupportsHeliumRendering"));
  if (v12)
    *a4 = objc_msgSend(v12, "BOOLValue");
  v13 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("SupportsHeliumCPURendering"));
  if (v13)
    result = objc_msgSend(v13, "BOOLValue");
  else
    result = 1;
  *a5 = result;
  return result;
}

unint64_t OZFxPlugSharedBase::pluginProperties(OZFxPlugSharedBase *this)
{
  unint64_t *v1;
  id v4;
  void *v5;
  void *v7;
  id v8;

  v1 = (unint64_t *)((char *)this + 224);
  if (!atomic_load((unint64_t *)this + 28))
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), *((_QWORD *)this + 2));
    v4 = (id)objc_msgSend(*((id *)this + 3), "properties");
    v5 = v4;
    while (!__ldaxr(v1))
    {
      if (!__stlxr((unint64_t)v4, v1))
      {
        v7 = (void *)atomic_load(v1);
        v8 = v7;
        goto LABEL_7;
      }
    }
    __clrex();
LABEL_7:

  }
  return atomic_load(v1);
}

void OZFxPlugSharedBase::OZFxPlugSharedBase(OZFxPlugSharedBase *this, const OZFxPlugSharedBase *a2, OZChannelFolder *a3, uint64_t a4)
{
  OZFxPlugAPIManager **v8;
  char *v9;
  __int128 v10;
  unsigned __int8 v11;
  __int16 v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  OZFxPlugAPIManager *v21;
  uint64_t v22;
  int v23;
  OZChannelFolder *v24;
  OZFxPlugParameterHandler *v25;
  NSDictionary *v26;
  void *exception;
  std::bad_alloc *v28;
  void (*v29)(void *);
  struct type_info *v30;
  char *v31;
  __int128 v32[2];
  OZFxPlugSharedBase *v33;

  *(_QWORD *)this = off_1E65C07A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v8 = (OZFxPlugAPIManager **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v9 = (char *)this + 152;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  PCString::PCString((PCString *)this + 19, (const PCString *)a2 + 19);
  v31 = v9;
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), *((const std::string::value_type **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 10);
    *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
    *((_OWORD *)this + 10) = v10;
  }
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  v11 = atomic_load((unsigned __int8 *)a2 + 186);
  *((_BYTE *)this + 186) = v11 & 1;
  *((_BYTE *)this + 187) = *((_BYTE *)a2 + 187);
  *((_WORD *)this + 94) = *((_WORD *)a2 + 94);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  v12 = *((_WORD *)a2 + 100);
  *(_WORD *)((char *)this + 233) = *(_WORD *)((char *)a2 + 233);
  *((_WORD *)this + 100) = v12;
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 216) = *((_BYTE *)a2 + 216);
  *((_QWORD *)this + 28) = 0;
  *((_BYTE *)this + 232) = *((_BYTE *)a2 + 232);
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)this + 33) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 272), 1);
  *((_QWORD *)this + 34) = &unk_1E64E2000;
  v13 = (_QWORD *)((char *)this + 344);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 43) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 368), 1);
  *((_DWORD *)this + 110) = *((_DWORD *)a2 + 110);
  v33 = this;
  std::allocate_shared[abi:ne180100]<OZFxPlugSharedLock,std::allocator<OZFxPlugSharedLock>,OZFxPlugSharedBase *,void>(&v33, v32);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)this + 352, v32);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v32[0] + 1);
  if (*((_QWORD *)&v32[0] + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v32[0] + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  createPlatformDelegate(this, (OZFxPlugOOPDelegate **)v32);
  v17 = *(_QWORD *)&v32[0];
  v18 = *v13;
  *v13 = *(_QWORD *)&v32[0];
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v17 = *v13;
  }
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 43) + 88))(*((_QWORD *)a2 + 43));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 96))(v17, v19);
  v20 = (id)objc_msgSend(+[PROPlugInManager sharedPlugInManager](PROPlugInManager, "sharedPlugInManager", (char *)this + 368, (char *)this + 272, v31), "plugInWithUUID:", objc_msgSend(*((id *)a2 + 2), "uuid"));
  *((_QWORD *)this + 2) = v20;
  if (!v20)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](exception, "Unable to create PROPlugIn in OZFxPlugSharedBase(src).");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v32);
  v21 = objc_alloc_init(OZFxPlugAPIManager);
  *v8 = v21;
  if (!v21)
  {
    v28 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    std::bad_alloc::bad_alloc(v28);
    v29 = (void (*)(void *))MEMORY[0x1E0DE4DC0];
    v30 = (struct type_info *)MEMORY[0x1E0DE4EA8];
    goto LABEL_18;
  }
  -[OZFxPlugAPIManager registerAPIObject:forProtocol:version:](v21, "registerAPIObject:forProtocol:version:", +[OZFxPlugHostPropertiesAPI sharedHostPropertiesAPI](OZFxPlugHostPropertiesAPI, "sharedHostPropertiesAPI"), &unk_1EF0A80F0, 1);
  v22 = objc_msgSend(objc_alloc((Class)objc_msgSend(*((id *)this + 2), "plugInClass")), "initWithAPIManager:", *v8);
  *((_QWORD *)this + 3) = v22;
  if (!v22)
  {
    v28 = (std::bad_alloc *)__cxa_allocate_exception(0x10uLL);
    MEMORY[0x1B5E28D14](v28, "Plugin instantiation failed in OZFxPlugSharedBase(src).");
    v29 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v30 = (struct type_info *)MEMORY[0x1E0DE4E80];
LABEL_18:
    __cxa_throw(v28, v30, v29);
  }
  v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 72))(*v13);
  OZFxPlugSharedBase::allocateAndRegisterParameterHandlers(this, v23, a3, *((OZFxPlugParameterHandler **)a2 + 4), a4);
  OZFxPlugSharedBase::allocateAndRegisterRemainingHandlers(this, v23, v24, v25);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "addObserver:selector:name:object:", *((_QWORD *)this + 4), sel_onVTBUserInteractionEventNotification_, CFSTR("VTBUserInteractionEventNotification"), 0);
  v26 = (NSDictionary *)OZFxPlugSharedBase::pluginProperties(this);
  queryStaticProps(v26, *((unsigned __int8 *)this + 216), (BOOL *)this + 201, (BOOL *)this + 232, (BOOL *)this + 233);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v32);
}

void sub_1B2F51038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString *a11)
{
  PCString::~PCString(a11);
  _Unwind_Resume(a1);
}

void sub_1B2F51040(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCMutex *a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  id *v14;
  void *v15;
  void *v17;
  void *v18;

  __cxa_free_exception(v15);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&a13);
  __cxa_begin_catch(a1);
  if (*(_QWORD *)(v13 + 240))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 344) + 24))(*(_QWORD *)(v13 + 344), *(_QWORD *)(v13 + 16));
    *(_QWORD *)(v13 + 240) = 0;
  }
  v17 = *(void **)(v13 + 24);
  if (v17)
  {

    *(_QWORD *)(v13 + 24) = 0;
  }
  v18 = *(void **)(v13 + 16);
  if (v18)
  {

    *(_QWORD *)(v13 + 16) = 0;
  }
  if (*v14)
  {

    *v14 = 0;
  }
  if (*(_BYTE *)(v13 + 200))
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *(_QWORD *)(v13 + 136));

  }
  __cxa_rethrow();
}

void sub_1B2F5111C(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 != 2)
  {
    __cxa_end_catch();
    __cxa_end_catch();
    JUMPOUT(0x1B2F50F88);
  }
  __cxa_rethrow();
}

void sub_1B2F51140(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCMutex *a9)
{
  __cxa_end_catch();
  __cxa_end_catch();
  PCMutex::~PCMutex(a9);
  JUMPOUT(0x1B2F51164);
}

void OZFxPlugSharedBase::resetFxLock(OZFxPlugSharedLock **this)
{
  OZFxPlugSharedLock::reset(this[44]);
}

void OZFxPlugSharedBase::~OZFxPlugSharedBase(OZFxPlugSharedBase *this)
{
  void *v2;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];

  *(_QWORD *)this = off_1E65C07A8;
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v6);
  if (*((_BYTE *)this + 200))
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 17));

  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), *((_QWORD *)this + 2));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 32))(*((_QWORD *)this + 43), *((_QWORD *)this + 2));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 96))(*((_QWORD *)this + 43), 0);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 3));

  *((_QWORD *)this + 3) = 0;
  v2 = (void *)atomic_load((unint64_t *)this + 28);

  v3 = (id *)((char *)this + 8);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A41C0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4260);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4358);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A6DD0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4A30);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4590);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4618);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A46C8);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A6E50);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A70B8);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4858);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A48D8);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4980);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A7268);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4B18);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A7358);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4BC8);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A7410);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A52B8);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4F90);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A5050);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0B0088);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0B66E0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0AFB70);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0B6420);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0AFFE0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0B65A0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4E80);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A8190);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A80F0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A79F8);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A7DB0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A8250);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A8308);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A8380);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A3A58);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A3D08);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A4F00);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0B6740);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0B67A0);
  objc_msgSend(*((id *)this + 1), "unregisterAPIForProtocol:", &unk_1EF0A0AE8);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 4));
  v4 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  objc_msgSend(*v3, "unregisterAPIForProtocol:", &unk_1EF0A3D78);

  *v3 = 0;
  *((_QWORD *)this + 2) = 0;
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v6);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 368));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  v5 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 272));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  PCString::~PCString((PCString *)this + 19);
}

uint64_t OZFxPlugSharedBase::restartPluginXPCIfNecessary(OZFxPlugSharedBase *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), *((_QWORD *)this + 2));
}

BOOL OZFxPlugSharedBase::isXPCBasedPlugin(OZFxPlugSharedBase *this)
{
  return *((_QWORD *)this + 30) != 0;
}

uint64_t OZFxPlugSharedBase::isConnectionValid(OZFxPlugSharedBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 56))(*((_QWORD *)this + 43));
}

uint64_t OZFxPlugSharedBase::doPostConstructionActions(id *this)
{
  uint64_t v2;
  CFUUIDRef v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const __CFAllocator *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  const __CFString *v12;
  CFUUIDRef v13;

  v2 = objc_msgSend(this[2], "uuid");
  if (v2
    && (v3 = (CFUUIDRef)v2,
        v4 = (void *)objc_msgSend((id)objc_msgSend(+[PROPlugInManager sharedPlugInManager](PROPlugInManager, "sharedPlugInManager"), "plugInsForProtocol:", &unk_1EF0B6860), "objectEnumerator"), (v5 = objc_msgSend(v4, "nextObject")) != 0))
  {
    v6 = (void *)v5;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v8 = (void *)objc_msgSend(v6, "infoDictionary");
      v9 = (void *)objc_msgSend(v8, "objectForKey:", kFxPlugInfoProprerty_SupportedPlugins);
      if (!v9)
        NSLog(CFSTR("Unable to find any supported plug-ins for OSC: %@"), objc_msgSend(v6, "displayName"));
      v10 = (void *)objc_msgSend(v9, "objectEnumerator");
      v11 = objc_msgSend(v10, "nextObject");
      if (v11)
        break;
LABEL_10:
      v6 = (void *)objc_msgSend(v4, "nextObject");
      if (!v6)
        goto LABEL_11;
    }
    v12 = (const __CFString *)v11;
    while (1)
    {
      v13 = CFUUIDCreateFromString(v7, v12);
      if (v13 == v3)
        break;
      CFRelease(v13);
      v12 = (const __CFString *)objc_msgSend(v10, "nextObject");
      if (!v12)
        goto LABEL_10;
    }
    CFRelease(v3);
    *((_BYTE *)this + 188) = 1;
  }
  else
  {
LABEL_11:
    *((_BYTE *)this + 188) = 0;
    if (!objc_msgSend(this[4], "hasPointParameters"))
      goto LABEL_19;
    if (!*((_BYTE *)this + 188))
      *((_BYTE *)this + 189) = 1;
  }
  if (((objc_opt_respondsToSelector() & 1) == 0 || objc_msgSend(this[3], "oscIsPublishable:", 0))
    && !*((_BYTE *)this + 187))
  {
    objc_msgSend(this[4], "addPublishOSCCheckbox:", 10005);
  }
LABEL_19:
  objc_msgSend(this[4], "setDoneAddingParams:", 1);
  objc_msgSend(this[4], "saveParameterFlags");
  return (*((uint64_t (**)(id *))*this + 57))(this);
}

void OZFxPlugSharedBase::finishPluginSetup(OZFxPlugSharedBase *this)
{
  void *v2;
  uint64_t v3;
  OZCoreGlobals *Instance;
  char v5;
  OZCoreGlobals *v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  PCString v16;
  PCString v17;
  id v18;

  v2 = (void *)*((_QWORD *)this + 3);
  v3 = objc_opt_respondsToSelector();
  if ((v3 & 1) != 0)
  {
    v18 = 0;
    Instance = (OZCoreGlobals *)OZCoreGlobals::getInstance((OZCoreGlobals *)v3);
    v5 = *((_BYTE *)Instance + 8);
    *(_BYTE *)(OZCoreGlobals::getInstance(Instance) + 8) = 0;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), *((_QWORD *)this + 2));
    v6 = (OZCoreGlobals *)objc_msgSend(v2, "finishInitialSetup:", &v18);
    v7 = (char)v6;
    *(_BYTE *)(OZCoreGlobals::getInstance(v6) + 8) = v5;
    if ((v7 & 1) == 0)
    {
      v8 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.ozone.framework"));
      v9 = objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("FxPlug::Error Base"), 0, 0);
      v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithValidatedFormat:validFormatSpecifiers:error:", v9, CFSTR("%@"), 0, objc_msgSend(*((id *)this + 2), "displayName"));
      v11 = (void *)MEMORY[0x1E0CB3940];
      if (v18)
      {
        v12 = objc_msgSend(v18, "localizedDescription");
        v13 = objc_msgSend(v11, "stringWithFormat:", CFSTR("%@\n%@\n%@"), v10, v12, objc_msgSend(v18, "localizedFailureReason"));
      }
      else
      {
        v13 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\n%@"), v10, objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("FxPlug::No Error Reason"), 0, 0), v15);
      }
      v14 = (const __CFString *)v13;
      v17.var0 = 0;
      PCString::set(&v17, (CFStringRef)objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("FxPlug::Error Title"), 0, 0));
      v16.var0 = 0;
      PCString::set(&v16, v14);
      OZChannelBase::setRangeName((OZChannelBase *)&v17, &v16);
      PCString::~PCString(&v16);
      PCString::~PCString(&v17);
    }
  }
}

void sub_1B2F51990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13)
{
  PCString::~PCString(&a12);
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

void OZFxPlugSharedBase::getPluginUUID(const PCString *this@<X0>, PCString *a2@<X8>)
{
  const __CFUUID *v4;
  __CFString *v5;

  v4 = (const __CFUUID *)-[__CFString uuid](this[2].var0, "uuid");
  if (v4)
  {
    v5 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
    a2->var0 = 0;
    PCString::set(a2, v5);

  }
  else
  {
    PCString::PCString(a2, this + 19);
  }
}

void sub_1B2F51A20(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZFxPlugSharedBase::getPluginGroupUUID(id *this@<X0>, PCString *a2@<X8>)
{
  void *v3;
  const __CFUUID *v4;
  __CFString *v5;

  v3 = (void *)objc_msgSend(this[2], "group");
  if (v3 && (v4 = (const __CFUUID *)objc_msgSend(v3, "uuid")) != 0)
  {
    v5 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
    a2->var0 = 0;
    PCString::set(a2, v5);

  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B2F51AA0(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

BOOL OZFxPlugSharedBase::isPluginKilled(PCString *this)
{
  unsigned __int8 v1;
  const __CFAllocator *v2;
  PCString *v3;
  const __CFString *v4;
  const __CFUUID *v5;
  const __CFUUID *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  const __CFUUID *v10;
  CFComparisonResult v11;
  OZFxPlugSharedBase *v13;
  int v14;

  if ((v1 & 1) != 0)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  else
  {
    v13 = (OZFxPlugSharedBase *)this;
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v14)
    {
      OZFxPlugSharedBase::isPluginKilled(void)const::killedPlugins = (uint64_t)CFSTR("CIEdgeWork");
      qword_1EF0766C0 = (uint64_t)CFUUIDCreateFromString(v2, CFSTR("A417EA22-7BF3-44E4-BA42-D091E3355BBB"));
      *(_QWORD *)algn_1EF0766C8 = CFSTR("Swirly");
      qword_1EF0766D0 = (uint64_t)CFUUIDCreateFromString(v2, CFSTR("D8FE4FA1-F495-47BC-8C43-1B257BA4842C"));
      *(_QWORD *)algn_1EF0766D8 = CFSTR("OpticalFlow");
      qword_1EF0766E0 = (uint64_t)CFUUIDCreateFromString(v2, CFSTR("B7F71E12-4E10-11D9-A0DA-000A95AFC10A"));
      *(_QWORD *)algn_1EF0766E8 = CFSTR("VectorizeColor");
      qword_1EF0766F0 = (uint64_t)CFUUIDCreateFromString(v2, CFSTR("8CB75514-C0FE-4418-B38D-93393EF651AF"));
      *(_QWORD *)algn_1EF0766F8 = CFSTR("CIRingLens");
      qword_1EF076700 = (uint64_t)CFUUIDCreateFromString(v2, CFSTR("9302994C-DDF4-4C33-AE10-A109894AB84A"));
      *(_QWORD *)algn_1EF076708 = CFSTR("SetMatte");
      qword_1EF076710 = (uint64_t)CFUUIDCreateFromString(v2, CFSTR("BFE68F8A-64F1-11D9-BCCC-000A95AF90F2"));
      *(_QWORD *)algn_1EF076718 = CFSTR("Simple3d");
      qword_1EF076720 = (uint64_t)CFUUIDCreateFromString(v2, CFSTR("7B3C336C-10B8-42B7-8114-FB87FECE240B"));
    }
    this = (PCString *)v13;
  }
  v3 = this + 19;
  v4 = PCString::ns_str(this + 19);
  v5 = CFUUIDCreateFromString(v2, v4);
  if (KilledPlugin::compareUUIDs(v5, (const __CFUUID *)qword_1EF0766C0, v6))
  {
    v7 = 0;
    v8 = 1;
    v9 = &OZFxPlugSharedBase::isPluginKilled(void)const::killedPlugins;
    while ((-[__CFString isEqualToString:]((id)PCString::ns_str(v3), "isEqualToString:", *v9) & 1) == 0)
    {
      if (v7 == 6)
      {
        v8 = 0;
        break;
      }
      v8 = v7 < 6;
      v11 = KilledPlugin::compareUUIDs(v5, (const __CFUUID *)v9[3], v10);
      v9 += 2;
      ++v7;
      if (v11 == kCFCompareEqualTo)
        break;
    }
  }
  else
  {
    v8 = 1;
  }
  CFRelease(v5);
  return v8;
}

void sub_1B2F51CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL OZFxPlugSharedBase::isPluginMissing(PCString *this, PCString *a2)
{
  if (this[3].var0 || OZFxPlugSharedBase::isPluginKilled(this))
  {
    if (BYTE2(this[29].var0))
    {
      PCString::set(a2, this + 19);
      return BYTE2(this[29].var0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    PCString::set(a2, this + 19);
    return 1;
  }
}

CFComparisonResult OZFxPlugSharedBase::isHMTCompatible(PCString *this)
{
  int var0_low;
  const PCString *v3;
  CFComparisonResult v4;
  PCString v6;
  PCString v7;

  var0_low = LOBYTE(this[27].var0);
  OZFxPlugSharedBase::getPluginGroupUUID((id *)&this->var0, &v7);
  OZFxPlugSharedBase::getPluginUUID(this, &v6);
  v4 = OZDocumentBundleFormatUtils::isSupportedFxPlug((OZDocumentBundleFormatUtils *)(var0_low != 0), &v7, &v6, v3);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  return v4;
}

void sub_1B2F51DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZFxPlugSharedBase::getDisplayName(id *this@<X0>, PCString *a2@<X8>)
{
  const __CFString *v4;

  if (objc_msgSend((id)objc_msgSend(this[2], "displayName"), "length"))
  {
    v4 = (const __CFString *)objc_msgSend(this[2], "displayName");
    a2->var0 = 0;
    PCString::set(a2, v4);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

BOOL OZFxPlugSharedBase::isPKPlugIn(OZFxPlugSharedBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 88))(*((_QWORD *)this + 43)) != 0;
}

uint64_t OZFxPlugSharedBase::getDynamicPropertyAtTime(id *this, const __CFString *a2, CMTime *a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  CMTimeEpoch epoch;

  result = objc_msgSend((id)OZFxPlugSharedBase::pluginProperties((OZFxPlugSharedBase *)this), "objectForKey:", a2);
  if (!result)
  {
    if (*((_BYTE *)this + 199))
    {
      (*(void (**)(id, id))(*(_QWORD *)this[43] + 40))(this[43], this[2]);
      v10 = *(_OWORD *)&a3->value;
      epoch = a3->epoch;
      v7 = objc_msgSend(this[4], "figTimeToFxTime:withConversionData:", &v10, 0);
      v9 = 0;
      v8 = (void *)objc_msgSend(this[3], "dynamicPropertiesAtTime:withError:", v7, &v9);
      result = 0;
      if (!v9)
        return objc_msgSend(v8, "objectForKey:", a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OZFxPlugSharedBase::variesOverTime(OZFxPlugSharedBase *this)
{
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), *((_QWORD *)this + 2));
  return objc_msgSend(*((id *)this + 3), "variesOverTime");
}

void *OZFxPlugSharedBase::isPixelIndependent(id *this, CMTime *a2)
{
  void *result;
  CMTime v3;
  CMTime v4;

  if (*((_BYTE *)this + 216))
  {
    v3 = *a2;
    return (void *)((*((unsigned int (**)(id *, CMTime *))*this + 31))(this, &v3) == 6);
  }
  else
  {
    v4 = *a2;
    result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("PixelIndependent"), &v4);
    if (result)
      return (void *)objc_msgSend(result, "BOOLValue");
  }
  return result;
}

void *OZFxPlugSharedBase::isPositionIndependent(id *this, CMTime *a2)
{
  void *result;
  CMTime v3;

  v3 = *a2;
  result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("PositionIndependent"), &v3);
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

uint64_t OZFxPlugSharedBase::isTimeIndependent(OZFxPlugSharedBase *this)
{
  void *v1;

  v1 = (void *)objc_msgSend((id)OZFxPlugSharedBase::pluginProperties(this), "objectForKey:", CFSTR("MayRemapTime"));
  if (v1)
    return objc_msgSend(v1, "BOOLValue") ^ 1;
  else
    return 1;
}

uint64_t OZFxPlugSharedBase::getStaticProperty(OZFxPlugSharedBase *this, const __CFString *a2)
{
  return objc_msgSend((id)OZFxPlugSharedBase::pluginProperties(this), "objectForKey:", a2);
}

void *OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(id *this, CMTime *a2)
{
  void *result;
  CMTime v3;

  v3 = *a2;
  result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("TransformsFromLocalToScreenSpace"), &v3);
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

void *OZFxPlugSharedBase::doesSupportLargeRenderScale(id *this, CMTime *a2)
{
  void *result;
  CMTime v3;

  v3 = *a2;
  result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("SupportsLargeRenderScale"), &v3);
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

void *OZFxPlugSharedBase::supportsInternalMixing(id *this, CMTime *a2)
{
  void *result;
  CMTime v3;

  v3 = *a2;
  result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("SupportsInternalMixing"), &v3);
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

void *OZFxPlugSharedBase::doesHaveInputSizeLimit(id *this, CMTime *a2)
{
  void *result;
  CMTime v3;

  v3 = *a2;
  result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("InputSizeLimit"), &v3);
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

void *OZFxPlugSharedBase::doesSupportStableAnimation(id *this, CMTime *a2)
{
  void *result;
  CMTime v3;

  v3 = *a2;
  result = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("SupportsStableAnimation"), &v3);
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

uint64_t OZFxPlugSharedBase::changesOutputSize(OZFxPlugSharedBase *this, CMTime *a2)
{
  return 1;
}

uint64_t OZFxPlugSharedBase::requiresPixelCasting(id *this, CMTime *a2)
{
  void *DynamicPropertyAtTime;
  CMTime v5;

  v5 = *a2;
  DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("UsesNonmatchingTextureLayout"), &v5);
  if (DynamicPropertyAtTime)
    return objc_msgSend(DynamicPropertyAtTime, "BOOLValue");
  else
    return this[30] == 0;
}

uint64_t OZFxPlugSharedBase::setPluginVersionAtCreation(uint64_t this, int a2)
{
  *(_DWORD *)(this + 192) = a2;
  return this;
}

uint64_t OZFxPlugSharedBase::doesSupportHeliumRendering(OZFxPlugSharedBase *this, CMTime *a2)
{
  return *((unsigned __int8 *)this + 232);
}

uint64_t OZFxPlugSharedBase::doesSupportHeliumCPURendering(OZFxPlugSharedBase *this)
{
  return *((unsigned __int8 *)this + 233);
}

uint64_t OZFxPlugSharedBase::getBestRenderingBehavior(OZFxPlugSharedBase *this, LiRenderParameters **a2, BOOL *a3, BOOL *a4, CMTime *a5)
{
  uint64_t result;
  BOOL v9;
  CMTime v10;

  v10 = *a5;
  result = (*(uint64_t (**)(OZFxPlugSharedBase *, CMTime *))(*(_QWORD *)this + 232))(this, &v10);
  if ((result & 1) == 0 && *a3 && *a4)
  {
    result = LiAgent::getRenderDevice(a2);
    v9 = *(_DWORD *)(*(_QWORD *)result + 8) == 0;
    *a3 = *(_DWORD *)(*(_QWORD *)result + 8) != 0;
    *a4 = v9;
  }
  return result;
}

uint64_t OZFxPlugSharedBase::getPixelTransformSupport(id *this, CMTime *a2)
{
  void *DynamicPropertyAtTime;
  uint64_t v5;
  void *v6;
  CMTime v8;

  v8 = *a2;
  DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("PixelTransformSupport"), &v8);
  if (DynamicPropertyAtTime)
    v5 = objc_msgSend(DynamicPropertyAtTime, "intValue");
  else
    v5 = 0;
  if (*((_BYTE *)this + 216))
  {
    v8 = *a2;
    v6 = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("PixelIndependent"), &v8);
    if (v6)
    {
      if (objc_msgSend(v6, "BOOLValue"))
        return 6;
      else
        return v5;
    }
  }
  return v5;
}

uint64_t OZFxPlugSharedBase::isOSCPublished(OZFxPlugSharedBase *this)
{
  void *v1;
  uint64_t result;
  OZChannel *v3;

  v1 = (void *)*((_QWORD *)this + 4);
  if (((*(uint64_t (**)(OZFxPlugSharedBase *))(*(_QWORD *)this + 288))(this) & 1) != 0
    || (result = objc_msgSend(v1, "hasPointParameters"), (_DWORD)result))
  {
    result = objc_msgSend(v1, "publishOSCChannel");
    if (result)
    {
      v3 = (OZChannel *)objc_msgSend(v1, "publishOSCChannel");
      return OZChannel::getValueAsInt(v3, MEMORY[0x1E0CA2E68], 0.0) == 1;
    }
  }
  return result;
}

void *OZFxPlugSharedBase::isThreadSafe(OZFxPlugSharedBase *this)
{
  void *result;

  result = (void *)objc_msgSend((id)OZFxPlugSharedBase::pluginProperties(this), "objectForKey:", CFSTR("IsThreadSafe"));
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

uint64_t OZFxPlugSharedBase::canRenderThreadSafely(OZFxPlugSharedBase *this)
{
  if (*((_BYTE *)this + 216))
    return (*(uint64_t (**)(OZFxPlugSharedBase *))(*(_QWORD *)this + 152))(this);
  else
    return 1;
}

BOOL OZFxPlugSharedBase::usesRationalTime(OZFxPlugSharedBase *this)
{
  return !*((_BYTE *)this + 216) || *((_BYTE *)this + 201) != 0;
}

unint64_t OZFxPlugSharedBase::decodePluginNCLCFromProperty(id *this, const __CFString *a2)
{
  uint64_t DynamicPropertyAtTime;
  void *v3;
  int v4;
  CMTime v6;

  v6 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  DynamicPropertyAtTime = OZFxPlugSharedBase::getDynamicPropertyAtTime(this, a2, &v6);
  if (DynamicPropertyAtTime)
  {
    v3 = (void *)DynamicPropertyAtTime;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v4 = objc_msgSend(v3, "unsignedIntegerValue");
      if (FxIsSupportedNCLCValue_Private(v4))
        return FxConvertFxNCLCValueToPCNCLCCode(v4);
      NSLog(CFSTR("color property was not a supported nclc value (the color primaries value was %lu and the transfer function value was %lu)"), BYTE2(v4), BYTE1(v4));
    }
    else
    {
      NSLog(CFSTR("unrecognized color property"));
    }
  }
  return 0x200000002;
}

unint64_t OZFxPlugSharedBase::getFallbackNCLC(id *a1, int a2)
{
  void *DynamicPropertyAtTime;
  unsigned int v4;
  uint64_t v5;
  CMTime v7;

  v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(a1, CFSTR("DesiredProcessingColorInfo"), &v7);
  if (DynamicPropertyAtTime)
    LODWORD(DynamicPropertyAtTime) = objc_msgSend(DynamicPropertyAtTime, "intValue");
  if (a2 == 1)
  {
    if ((_DWORD)DynamicPropertyAtTime == 2)
    {
      v4 = 9;
      goto LABEL_12;
    }
LABEL_8:
    v4 = 9;
    goto LABEL_9;
  }
  if (a2)
    goto LABEL_8;
  if ((_DWORD)DynamicPropertyAtTime == 2)
  {
    v4 = 1;
LABEL_12:
    v5 = 1;
    return PCMakeNCLCCode(v4, v5);
  }
  v4 = 1;
LABEL_9:
  v5 = 8;
  return PCMakeNCLCCode(v4, v5);
}

unint64_t OZFxPlugSharedBase::getDesiredPluginNCLC(id *a1, int a2)
{
  const __CFString *v4;
  int v5;
  unint64_t v7;
  int v8;

  if (a2 == 1)
    v4 = CFSTR("HDRWorkingSpace");
  else
    v4 = CFSTR("SDRWorkingSpace");
  v7 = OZFxPlugSharedBase::decodePluginNCLCFromProperty(a1, v4);
  v8 = v5;
  if (PCNCLCCodeIsKnownRGB(&v7))
    return v7;
  else
    return OZFxPlugSharedBase::getFallbackNCLC(a1, a2);
}

unint64_t OZFxPlugSharedBase::getPluginNCLC(id *this, const LiAgent *a2)
{
  CGColorSpace *CGColorSpace;
  int v6;

  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  if (CGColorSpace != (CGColorSpace *)PCColorSpaceCache::cgRec2020Linear(CGColorSpace))
    return PCGetNCLCCodeForColorSpace(CGColorSpace);
  v6 = (*((uint64_t (**)(id *, const LiAgent *))*this + 22))(this, a2);
  return OZFxPlugSharedBase::getDesiredPluginNCLC(this, v6);
}

CGColorSpaceRef OZFxPlugSharedBase::getPluginColorSpace(id *this, const LiAgent *a2)
{
  int v3;
  CGColorSpaceRef result;
  unint64_t PluginNCLC;
  int v6;

  PluginNCLC = OZFxPlugSharedBase::getPluginNCLC(this, a2);
  v6 = v3;
  result = PCGetNCLCColorSpace((unsigned int *)&PluginNCLC);
  if (!result)
    return (CGColorSpaceRef)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  return result;
}

uint64_t OZFxPlugSharedBase::getDynamicRangeTrackingSupport(id *this, const LiAgent *a2)
{
  FxColorDescription *RequestedColorDescription;
  uint64_t result;
  CMTime *v5;
  void *DynamicPropertyAtTime;
  CMTime v7;
  CMTime v8;

  RequestedColorDescription = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  result = FxColorDescription::isDynamicRangeManaged(RequestedColorDescription);
  if ((_DWORD)result)
  {
    v5 = (CMTime *)MEMORY[0x1E0CA2E68];
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    result = OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("AutoColorProcessingSupport"), &v7);
    if (result)
    {
      v8 = *v5;
      DynamicPropertyAtTime = (void *)OZFxPlugSharedBase::getDynamicPropertyAtTime(this, CFSTR("AutoColorProcessingSupport"), &v8);
      if (DynamicPropertyAtTime
        && (LODWORD(DynamicPropertyAtTime) = objc_msgSend(DynamicPropertyAtTime, "intValue"),
            DynamicPropertyAtTime > 3))
      {
        return 0;
      }
      else
      {
        return *((unsigned int *)&xmmword_1B3050090 + DynamicPropertyAtTime);
      }
    }
  }
  return result;
}

uint64_t OZFxPlugSharedBase::getPluginColorDescription@<X0>(id *this@<X0>, const LiAgent *a2@<X1>, FxColorDescription *a3@<X8>)
{
  CGColorSpace *PluginColorSpace;
  uint64_t result;
  PCColorSpaceCache *CGColorSpace;
  _BOOL8 v9;
  FxColorDescription *RequestedColorDescription;
  const PCToneMapMethod *ToneMapMethod;
  uint64_t v12;
  FxColorDescription *v13;
  FxColorDescription *v14;
  const PCToneMapMethod *v15;
  uint64_t DynamicRange;
  PCToneMapMethod v17;

  PluginColorSpace = OZFxPlugSharedBase::getPluginColorSpace(this, a2);
  FxMakeLegacyColorDescription(PluginColorSpace, 1, (uint64_t)a3);
  result = OZFxPlugSharedBase::getDynamicRangeTrackingSupport(this, a2);
  switch((int)result)
  {
    case 0:
      CGColorSpace = (PCColorSpaceCache *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
      v9 = CGColorSpace == (PCColorSpaceCache *)PCColorSpaceCache::cgRec2020Linear(CGColorSpace);
      FxColorDescription::setDynamicRange(a3, v9);
      result = FxColorDescription::setToneMapMethod(a3, (const PCToneMapMethod *)&kPCNoToneMapMethod);
      break;
    case 1:
      v17 = (PCToneMapMethod)3;
      FxColorDescription::setToneMapMethod(a3, &v17);
      v12 = 0;
      goto LABEL_7;
    case 2:
      RequestedColorDescription = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
      ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(RequestedColorDescription);
      FxColorDescription::setToneMapMethod(a3, ToneMapMethod);
      v12 = 1;
LABEL_7:
      result = FxColorDescription::setDynamicRange(a3, v12);
      break;
    case 3:
      v13 = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
      if (FxColorDescription::isSDR(v13))
      {
        v17 = (PCToneMapMethod)3;
        FxColorDescription::setToneMapMethod(a3, &v17);
      }
      else
      {
        v14 = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
        v15 = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(v14);
        FxColorDescription::setToneMapMethod(a3, v15);
      }
      DynamicRange = FxColorDescription::getDynamicRange(v13);
      result = FxColorDescription::setDynamicRange(a3, DynamicRange);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B2F528B0(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

double OZFxPlugSharedBase::getFxPlugPixelAspectRatio(OZFxPlugSharedBase *this)
{
  const void *v1;
  void *v2;
  double result;

  v1 = (const void *)(*(uint64_t (**)(OZFxPlugSharedBase *))(*(_QWORD *)this + 24))(this);
  if (!v1)
    return 1.0;
  if (!v2)
    return 1.0;
  (*(void (**)(void *))(*(_QWORD *)v2 + 1328))(v2);
  return result;
}

float64x2_t OZFxPlugSharedBase::adjustImageMatrix(uint64_t a1, float64x2_t *a2)
{
  float64x2_t result;
  float64x2_t v4;

  result.f64[0] = 1.0 / (*(double (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  if (result.f64[0] != 1.0)
  {
    v4 = vmulq_n_f64(*a2, result.f64[0]);
    result = vmulq_n_f64(a2[1], result.f64[0]);
    *a2 = v4;
    a2[1] = result;
  }
  return result;
}

void OZFxPlugSharedBase::setup3DAPI(OZFxPlugSharedBase *this, const LiAgent *a2, CMTime *a3)
{
  const void *v6;
  const void *v7;
  void *v8;
  PC_Sp_counted_base *var0;
  int ActiveCamera;
  OZScene *v11;
  unsigned int RGBOperation;
  void *Node;
  OZCamera *v14;
  const LiAgent *AgentForGettingState;
  __n128 EyeToWorldTransform;
  PC_Sp_counted_base *v17;
  double v18;
  double v19;
  unint64_t v20;
  double v21;
  _OWORD *v22;
  __int128 v23;
  const PCString *v24;
  uint64_t i;
  _OWORD *v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _OWORD v32[8];
  _OWORD v33[8];
  _OWORD v34[8];
  _OWORD v35[8];
  _OWORD v36[8];
  _OWORD v37[8];
  double v38[16];
  PCSharedCount v39;
  PCSharedCount v40[60];
  _OWORD v41[8];
  _OWORD v42[8];
  _OWORD v43[8];
  _OWORD v44[8];
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  _BYTE v49[48];
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  CMTime v53;
  PCSharedCount v54;
  PCSharedCount v55;
  OZScene *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v6 = (const void *)(*(uint64_t (**)(OZFxPlugSharedBase *))(*(_QWORD *)this + 24))(this);
  v66 = 0x3FF0000000000000;
  v63 = 0x3FF0000000000000;
  v60 = 0x3FF0000000000000;
  v57 = 0x3FF0000000000000;
  v58 = 0u;
  v59 = 0u;
  v61 = 0u;
  v62 = 0u;
  v64 = 0u;
  v65 = 0u;
  if (v6)
  {
    v7 = v6;
    if (v8)
    {
      (*(void (**)(void *, uint64_t *, CMTime *))(*(_QWORD *)v8 + 1256))(v8, &v57, a3);
      v56 = 0;
      v56 = (OZScene *)(*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 272))(v7);
      if (v56)
      {
        LODWORD(v39.var0) = 0;
        PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>(&v56, (int *)&v39, &v54);
        var0 = v54.var0;
        if (!v54.var0)
          throw_PCNullPointerException(1);
        ActiveCamera = OZScene::getActiveCamera(v56, a3);
        HGUserJob::SetState((uint64_t)var0, ActiveCamera);
        v11 = v56;
        if (!v54.var0)
          throw_PCNullPointerException(1);
        RGBOperation = HGGLBlendingInfo::GetRGBOperation((HGGLBlendingInfo *)v54.var0);
        Node = OZScene::getNode(v11, RGBOperation);
        if (Node)
        {
          if (v14)
          {
            v53 = *a3;
            OZCamera::cameraAtTime(v14, &v53, &v39);
            v54.var0 = v39.var0;
            PCSharedCount::PCSharedCount((PCSharedCount *)v49, v40);
            PCSharedCount::operator=((uint64_t *)&v55, (uint64_t *)v49);
            PCSharedCount::~PCSharedCount((PCSharedCount *)v49);
            PCSharedCount::~PCSharedCount(v40);
          }
        }
        AgentForGettingState = a2;
        if (!a2)
          AgentForGettingState = (const LiAgent *)OZFxPlugSharedBase::makeAgentForGettingState(this, (const OZRenderParams *)a3);
        *(_QWORD *)&v52[40] = 0x3FF0000000000000;
        *(_QWORD *)v52 = 0x3FF0000000000000;
        *(_QWORD *)&v49[40] = 0x3FF0000000000000;
        *(_QWORD *)v49 = 0x3FF0000000000000;
        memset(&v49[8], 0, 32);
        v50 = 0u;
        v51 = 0u;
        memset(&v52[8], 0, 32);
        *(_QWORD *)&v48[40] = 0x3FF0000000000000;
        *(_QWORD *)v48 = 0x3FF0000000000000;
        *(_QWORD *)&v45[40] = 0x3FF0000000000000;
        *(_QWORD *)v45 = 0x3FF0000000000000;
        memset(&v45[8], 0, 32);
        v46 = 0u;
        v47 = 0u;
        memset(&v48[8], 0, 32);
        LiAgent::getImageToWorldTransform(AgentForGettingState, (uint64_t)v44);
        LiAgent::getObjectToWorldTransform(AgentForGettingState, (uint64_t)v43);
        LiAgent::getObjectToWorldTransform(AgentForGettingState, (uint64_t)v42);
        EyeToWorldTransform = LiAgent::getEyeToWorldTransform(AgentForGettingState, (uint64_t)v41);
        v17 = v54.var0;
        if (v54.var0)
        {
          (*(void (**)(PC_Sp_counted_base *, _BYTE *, __n128))(*(_QWORD *)v54.var0 + 216))(v54.var0, v49, EyeToWorldTransform);
          v18 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v17 + 504))(v17);
          v19 = tan(v18 * 3.14159265 / 180.0 * 0.5);
          LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)&v39);
          LiCamera::copy((uint64_t)&v39, (uint64_t)v17);
          LiCamera::convertToModel((uint64_t)&v39, 0);
          LiCamera::eyeToWorldMatrix((LiCamera *)&v39, v38);
          v20 = 0;
          v21 = 36.0 / (v19 + v19);
          do
          {
            v22 = &v41[v20 / 2];
            v23 = *(_OWORD *)&v38[v20 + 2];
            *v22 = *(_OWORD *)&v38[v20];
            v22[1] = v23;
            v20 += 4;
          }
          while (v20 != 16);
          PCMatrix44Tmpl<double>::invert((double *)v41, (double *)v41, 0.0);
          LiCamera::localToClipMatrix((LiCamera *)&v39, (uint64_t)v38);
          for (i = 0; i != 16; i += 4)
          {
            v26 = &v45[i * 8];
            v27 = *(_OWORD *)&v38[i + 2];
            *v26 = *(_OWORD *)&v38[i];
            v26[1] = v27;
          }
          LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&v39, v24);
        }
        else
        {
          v21 = 0.0;
        }
        v28 = (void *)*((_QWORD *)this + 8);
        v37[4] = v51;
        v37[5] = *(_OWORD *)v52;
        v37[6] = *(_OWORD *)&v52[16];
        v37[7] = *(_OWORD *)&v52[32];
        v37[0] = *(_OWORD *)v49;
        v37[1] = *(_OWORD *)&v49[16];
        v37[2] = *(_OWORD *)&v49[32];
        v37[3] = v50;
        objc_msgSend(v28, "_setCameraMatrix:", v37);
        v36[4] = v47;
        v36[5] = *(_OWORD *)v48;
        v36[6] = *(_OWORD *)&v48[16];
        v36[7] = *(_OWORD *)&v48[32];
        v36[0] = *(_OWORD *)v45;
        v36[1] = *(_OWORD *)&v45[16];
        v36[2] = *(_OWORD *)&v45[32];
        v36[3] = v46;
        objc_msgSend(v28, "_setWorldToFilmMatrix:", v36);
        v35[4] = v44[4];
        v35[5] = v44[5];
        v35[6] = v44[6];
        v35[7] = v44[7];
        v35[0] = v44[0];
        v35[1] = v44[1];
        v35[2] = v44[2];
        v35[3] = v44[3];
        objc_msgSend(v28, "_setLayerMatrix:", v35);
        v34[4] = v43[4];
        v34[5] = v43[5];
        v34[6] = v43[6];
        v34[7] = v43[7];
        v34[0] = v43[0];
        v34[1] = v43[1];
        v34[2] = v43[2];
        v34[3] = v43[3];
        objc_msgSend(v28, "_setWorldToLayerMatrix:", v34);
        objc_msgSend(v28, "_setIs3D:", v17 != 0);
        objc_msgSend(v28, "_setFocalLength:", v21);
        v33[4] = v42[4];
        v33[5] = v42[5];
        v33[6] = v42[6];
        v33[7] = v42[7];
        v33[0] = v42[0];
        v33[1] = v42[1];
        v33[2] = v42[2];
        v33[3] = v42[3];
        objc_msgSend(v28, "_setWorldToObjectMatrix:", v33);
        v32[4] = v41[4];
        v32[5] = v41[5];
        v32[6] = v41[6];
        v32[7] = v41[7];
        v32[0] = v41[0];
        v32[1] = v41[1];
        v32[2] = v41[2];
        v32[3] = v41[3];
        objc_msgSend(v28, "_setWorldToEyeMatrix:", v32);
        if (!a2)
        {
          v29 = *((_QWORD *)AgentForGettingState + 6);
          std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v29 + 200);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v29 + 160));
          *(_QWORD *)(v29 + 32) = &unk_1E64FC2F8;
          if (*(int *)(v29 + 40) < 0)
            v30 = 1;
          else
            v30 = *(_DWORD *)(v29 + 40);
          PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v29 + 32, 0, v30);
          v31 = *(_QWORD *)(v29 + 48);
          if (v31)
            MEMORY[0x1B5E2914C](v31, 0x1000C8077774924);
          *(_QWORD *)(v29 + 48) = 0;
          *(_DWORD *)(v29 + 40) = 0;
          PCSharedCount::~PCSharedCount((PCSharedCount *)(v29 + 24));
          MEMORY[0x1B5E29170](v29, 0x10E0C4071C63EBFLL);
          MEMORY[0x1B5E29170](*((_QWORD *)AgentForGettingState + 20), 0x1000C40AE2C30F4);
          LiAgent::~LiAgent(AgentForGettingState);
          MEMORY[0x1B5E29170]();
        }
        PCSharedCount::~PCSharedCount(&v55);
      }
    }
  }
}

void sub_1B2F52F20(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 - 208));
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::makeAgentForGettingState(OZFxPlugSharedBase *this, const OZRenderParams *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  PCShared_base *v6;
  uint64_t WorkingColorDescription;
  float BlendingGamma;
  uint64_t RenderNodeList;
  __int128 v10;
  float64x2_t *v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  LiRenderParameters *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  int v29;
  float64x2_t v31;
  float64x2_t v32;
  _QWORD v33[3];
  PCSharedCount v34;
  void *v35;
  int v36;
  uint64_t v37;
  int v38;
  char Do3DIntersectionAntialiasing;
  char v40;
  __int128 v41;
  _OWORD v42[2];
  int v43;
  char DoHighQualityResampling;
  char v45;
  char v46;
  char RasterizeEdges;
  char v48;
  CGColorSpace *v49;
  std::__shared_weak_count *v50;
  _QWORD *v51;
  PCSharedCount v52;

  v3 = (*(uint64_t (**)(OZFxPlugSharedBase *))(*(_QWORD *)this + 24))(this);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
  v5 = (_QWORD *)*((_QWORD *)a2 + 160);
  v51 = v5;
  if (v5)
    v6 = (PCShared_base *)((char *)v5 + *(_QWORD *)(*v5 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount(&v52, v6);
  WorkingColorDescription = OZRenderParams::getWorkingColorDescription(a2);
  BlendingGamma = OZRenderParams::getBlendingGamma(a2);
  RenderNodeList = HGRenderJob::GetRenderNodeList((HGRenderJob *)a2);
  LiRenderParameters::LiRenderParameters(v33, WorkingColorDescription, RenderNodeList, BlendingGamma);
  v43 = *((_DWORD *)a2 + 85);
  Do3DIntersectionAntialiasing = OZRenderParams::getDo3DIntersectionAntialiasing(a2);
  v40 = *((_BYTE *)a2 + 516);
  v10 = *(_OWORD *)((char *)a2 + 1332);
  v41 = *(_OWORD *)((char *)a2 + 1316);
  v42[0] = v10;
  *(_OWORD *)((char *)v42 + 14) = *(_OWORD *)((char *)a2 + 1346);
  v33[0] = v51;
  v38 = *(_DWORD *)(v4 + 512);
  DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(a2);
  RasterizeEdges = LiRenderingTechnology::getRasterizeEdges((const OZRenderParams *)((char *)a2 + 1316));
  v45 = *((_BYTE *)a2 + 512);
  v48 = *((_BYTE *)a2 + 242);
  v46 = 0;
  v11 = (float64x2_t *)operator new();
  OZRenderParams::getPixelTransform(a2, (uint64_t)v11);
  if (v51)
  {
    v12 = (*(double (**)(_QWORD *))(*v51 + 688))(v51);
    if (v12 != 1.0)
    {
      v11->f64[0] = v12 * v11->f64[0];
      v11[2].f64[0] = v12 * v11[2].f64[0];
      v11[4].f64[0] = v12 * v11[4].f64[0];
      v11[6].f64[0] = v12 * v11[6].f64[0];
    }
  }
  OZRenderParams::getROI(a2, &v32);
  OZRenderParams::getROI(a2, &v31);
  v13 = -0.25;
  if ((LiRenderingTechnology::getUseHalfHeightFields((const OZRenderParams *)((char *)a2 + 1316)) & 1) != 0)
  {
    if (((*((_DWORD *)a2 + 123) - 2) & 0xFFFFFFFD) != 0)
      v13 = -0.25;
    else
      v13 = -0.75;
    v14 = (double)SHIDWORD(v31.f64[0]) * 0.5 + v13;
    v15 = vcvtmd_s64_f64((double)SLODWORD(v31.f64[0]) + 0.0000001);
    v16 = vcvtpd_s64_f64((double)SLODWORD(v31.f64[0]) + (double)SLODWORD(v31.f64[1])) - v15;
    *(_QWORD *)&v31.f64[0] = __PAIR64__(vcvtmd_s64_f64(v14 + 0.0000001), v15);
    LODWORD(v31.f64[1]) = v16;
    HIDWORD(v31.f64[1]) = vcvtpd_s64_f64(v14 + (double)SHIDWORD(v31.f64[1]) * 0.5) - HIDWORD(v31.f64[0]);
  }
  if (LiRenderingTechnology::getUseHalfHeightFields((const OZRenderParams *)((char *)a2 + 1316)))
  {
    __asm { FMOV            V0.2D, #0.5 }
    v22 = vmulq_f64(v11[2], _Q0);
    v23 = vmulq_f64(v11[3], _Q0);
    v11[2] = v22;
    v11[3] = v23;
    v23.f64[0] = 0.0;
    PCMatrix44Tmpl<double>::leftTranslate(v11, v23, v13, 0.0);
  }
  v24 = operator new();
  v25 = (LiRenderParameters *)operator new();
  LiRenderParameters::LiRenderParameters(v25, (const LiRenderParameters *)v33);
  LiAgent::LiAgent(v24, v25, v11, 0);
  v26 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v49);
  v35 = &unk_1E64FC2F8;
  if (v36 < 0)
    v29 = 1;
  else
    v29 = v36;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v35, 0, v29);
  if (v37)
    MEMORY[0x1B5E2914C](v37, 0x1000C8077774924);
  v37 = 0;
  v36 = 0;
  PCSharedCount::~PCSharedCount(&v34);
  PCSharedCount::~PCSharedCount(&v52);
  return v24;
}

void sub_1B2F5332C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  PCSharedCount *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a6);
  v9 = v8;
  MEMORY[0x1B5E29170](v9, 0x10E0C4071C63EBFLL);
  MEMORY[0x1B5E29170](v7, 0x10F0C40F73640D2);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)va);
  PCSharedCount::~PCSharedCount(v6);
  _Unwind_Resume(a1);
}

void OZFxPlugSharedBase::prepareHandlersForRendering(id *a1, const LiAgent *a2, const PCSharedCount *a3, CMTime *a4, uint64_t a5, uint64_t a6)
{
  PC_Sp_counted_base *var0;
  PCSharedCount v13;

  OZFxPlugSharedBase::setup3DAPI((OZFxPlugSharedBase *)a1, a2, a4);
  var0 = a3->var0;
  PCSharedCount::PCSharedCount(&v13, a3 + 1);
  objc_msgSend(a1[4], "setRenderParams:withLithiumInput:withLithiumAgent:", a4, &var0, a2);
  objc_msgSend(a1[10], "setAgent:", a2, var0);
  if (a5)
    objc_msgSend(a1[10], "setPreTransform:", a5);
  if (a6)
    objc_msgSend(a1[10], "setPostTransform:", a6);
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2F53480(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::cleanupHandlersAfterRendering(id *this, const CMTime *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  objc_msgSend(this[10], "setAgent:", 0);
  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v7 = 0x3FF0000000000000;
  v4 = 0x3FF0000000000000;
  v5 = 0u;
  v6 = 0u;
  v8 = 0u;
  v9 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(this[10], "setPreTransform:", &v4);
  return objc_msgSend(this[10], "setPostTransform:", &v4);
}

uint64_t OZFxPlugSharedBase::getColorGamutForPlugIn(id *this, const LiAgent *a2)
{
  uint64_t result;
  OZScene *v5;
  FxColorDescription *RequestedColorDescription;
  int DynamicRangeTrackingSupport;
  FxColorDescription *v8;

  result = (*((uint64_t (**)(id *))*this + 4))(this);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
    if (result)
    {
      v5 = (OZScene *)result;
      RequestedColorDescription = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
      if (!FxColorDescription::isDynamicRangeManaged(RequestedColorDescription))
        return OZScene::getComputedWorkingGamut(v5);
      DynamicRangeTrackingSupport = OZFxPlugSharedBase::getDynamicRangeTrackingSupport(this, a2);
      switch(DynamicRangeTrackingSupport)
      {
        case 3:
          v8 = (FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
          return FxColorDescription::isHDR(v8);
        case 2:
          return 1;
        case 0:
          return OZScene::getComputedWorkingGamut(v5);
        default:
          return 0;
      }
    }
  }
  return result;
}

BOOL OZFxPlugSharedBase::FxColorPrimariesForPlugIn(OZFxPlugSharedBase *this, const LiAgent *a2)
{
  return (*(unsigned int (**)(OZFxPlugSharedBase *, const LiAgent *))(*(_QWORD *)this + 176))(this, a2) == 1;
}

uint64_t OZFxPlugSharedBase::SetImageColorPrimaries(OZFxPlugSharedBase *this, FxImage *a2, const LiAgent *a3)
{
  return -[FxImage setFxColorPrimaries:](a2, "setFxColorPrimaries:", (*(int (**)(OZFxPlugSharedBase *, const LiAgent *))(*(_QWORD *)this + 168))(this, a3));
}

uint64_t OZFxPlugSharedBase::getPluginSessionID(OZFxPlugSharedBase *this)
{
  return *((_QWORD *)this + 30);
}

void OZFxPlugSharedBase::writeDynamicParameterChannel(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZChannelBase *lpsrc)
{
  OZChannel *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  OZChannelEnum *v10;
  void *v11;
  char *v12;
  const OZFactory *v13;
  uint64_t v14;
  OZChannel *v15;
  void **var0;
  void **v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double DefaultValue;
  int NumberOfStrings;
  int v24;
  unsigned int i;
  const PCString *String;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  char *v39;
  char *v40;
  OZChannel v41;
  OZChannel v42;
  OZChannel v43;
  OZChannel v44;
  PCString v45;

  if (lpsrc)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 20000);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 110, &lpsrc->var4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, lpsrc->var3);
    if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
    {
      v14 = OZFactory::fileRefID(lpsrc->var1, v13);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v14);
    }
    if (v6 || v7 || v8 || v9)
    {
      v44.var0 = 0;
      (*(void (**)(_QWORD, OZChannel *))(**(_QWORD **)(*((_QWORD *)v10 + 14) + 8) + 264))(*(_QWORD *)(*((_QWORD *)v10 + 14) + 8), &v44);
      var0 = v44.var0;
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21001);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, *(double *)&var0);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v44.var0 = 0;
      (*(void (**)(_QWORD, OZChannel *))(**(_QWORD **)(*((_QWORD *)v10 + 14) + 8) + 256))(*(_QWORD *)(*((_QWORD *)v10 + 14) + 8), &v44);
      v17 = v44.var0;
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21002);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, *(double *)&v17);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v18 = *(double *)(*((_QWORD *)v10 + 16) + 16);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21003);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v18);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v19 = (*(double (**)(OZChannelEnum *))(*(_QWORD *)v10 + 808))(v10);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21004);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v19);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v20 = *(double *)(*((_QWORD *)v10 + 16) + 32);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21005);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v20);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v21 = *(double *)(*((_QWORD *)v10 + 16) + 24);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21006);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v21);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
LABEL_11:
      v15 = (OZChannel *)v10;
      goto LABEL_12;
    }
    if (v5)
    {
      v15 = v5;
LABEL_12:
      DefaultValue = OZChannel::getDefaultValue(v15);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21008);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, DefaultValue);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
LABEL_13:
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      return;
    }
    if (v10)
    {
      NumberOfStrings = OZChannelEnum::getNumberOfStrings(v10);
      if (NumberOfStrings >= 1)
      {
        v24 = NumberOfStrings;
        for (i = 0; i != v24; ++i)
        {
          String = (const PCString *)OZChannelEnum::getString(v10, i);
          PCString::PCString(&v45, String);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21007);
          (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v45);
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
          PCString::~PCString(&v45);
        }
      }
      goto LABEL_11;
    }
    if (v40)
    {
      OZChannel::OZChannel(&v44, (const OZChannelBase *)(v40 + 136), 0);
      v44.var0 = (void **)&off_1E6551358;
      v44.var2 = (void **)&unk_1E65516B8;
      OZChannel::OZChannel(&v43, (const OZChannelBase *)(v40 + 288), 0);
      v43.var0 = (void **)&off_1E6551358;
      v43.var2 = (void **)&unk_1E65516B8;
      OZChannel::OZChannel(&v42, (const OZChannelBase *)(v40 + 440), 0);
      v42.var0 = (void **)&off_1E6551358;
      v42.var2 = (void **)&unk_1E65516B8;
      OZChannel::OZChannel(&v41, (const OZChannelBase *)v40 + 9, 0);
      v41.var0 = (void **)&off_1E6551358;
      v41.var2 = (void **)&unk_1E65516B8;
      v27 = OZChannel::getDefaultValue(&v44);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21009);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v27);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v28 = OZChannel::getDefaultValue(&v43);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21010);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v28);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v29 = OZChannel::getDefaultValue(&v42);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21011);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v29);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v30 = OZChannel::getDefaultValue(&v41);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21012);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v30);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      OZChannel::~OZChannel(&v41);
    }
    else
    {
      if (!v39)
      {
        if (v38)
        {
          OZChannel::OZChannel(&v44, (const OZChannelBase *)(v38 + 136), 0);
          v44.var0 = (void **)&off_1E6551358;
          v44.var2 = (void **)&unk_1E65516B8;
          OZChannel::OZChannel(&v43, (const OZChannelBase *)(v38 + 288), 0);
          v43.var0 = (void **)&off_1E6551358;
          v43.var2 = (void **)&unk_1E65516B8;
          v34 = OZChannel::getDefaultValue(&v44);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21013);
          (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v34);
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
          v35 = OZChannel::getDefaultValue(&v43);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21014);
          (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v35);
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        }
        else
        {
          if (v11 || !v12)
            goto LABEL_13;
          OZChannel::OZChannel(&v44, (const OZChannelBase *)(v12 + 136), 0);
          v44.var0 = (void **)&off_1E6551358;
          v44.var2 = (void **)&unk_1E65516B8;
          OZChannel::OZChannel(&v43, (const OZChannelBase *)(v12 + 288), 0);
          v43.var0 = (void **)&off_1E6551358;
          v43.var2 = (void **)&unk_1E65516B8;
          v36 = OZChannel::getDefaultValue(&v44);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21016);
          (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v36);
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
          v37 = OZChannel::getDefaultValue(&v43);
          (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21017);
          (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v37);
          (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        }
        goto LABEL_25;
      }
      OZChannel::OZChannel(&v44, (const OZChannelBase *)(v39 + 136), 0);
      v44.var0 = (void **)&off_1E6551358;
      v44.var2 = (void **)&unk_1E65516B8;
      OZChannel::OZChannel(&v43, (const OZChannelBase *)(v39 + 288), 0);
      v43.var0 = (void **)&off_1E6551358;
      v43.var2 = (void **)&unk_1E65516B8;
      OZChannel::OZChannel(&v42, (const OZChannelBase *)(v39 + 440), 0);
      v42.var0 = (void **)&off_1E6551358;
      v42.var2 = (void **)&unk_1E65516B8;
      v31 = OZChannel::getDefaultValue(&v44);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21009);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v31);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v32 = OZChannel::getDefaultValue(&v43);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21010);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v32);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v33 = OZChannel::getDefaultValue(&v42);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21011);
      (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v33);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
    OZChannel::~OZChannel(&v42);
LABEL_25:
    OZChannel::~OZChannel(&v43);
    OZChannel::~OZChannel(&v44);
    goto LABEL_13;
  }
}

void sub_1B2F53F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, OZChannel *a5, OZChannel *a6, OZChannel *a7, OZChannel *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  OZChannel::~OZChannel((OZChannel *)&a68);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::writeDynamicParameterGroup(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZFactory **a3)
{
  const OZFactory *v6;
  uint64_t v7;

  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 20000);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(_QWORD *)a2 + 200))(a2, 110, (char *)a3 + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)a3 + 6));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v7 = OZFactory::fileRefID(a3[1], v6);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v7);
  }
  OZFxPlugSharedBase::writeFolder(this, a2, (OZChannelFolder *)a3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21015);
  (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
}

void OZFxPlugSharedBase::writeFolder(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZChannelFolder *a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  OZChannelBase *Descendant;
  OZChannelBase *v7;
  OZFactory **v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v16;
  uint64_t *v17;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v3 = (uint64_t *)*((_QWORD *)a3 + 14);
  v4 = *v3;
  if (*v3 != v3[1])
  {
    v5 = (void *)*((_QWORD *)this + 4);
    v16 = v5;
    v17 = (uint64_t *)*((_QWORD *)a3 + 14);
    do
    {
      if (objc_msgSend(v5, "containsParameterWithID:", *(unsigned int *)(*(_QWORD *)v4 + 24)))
      {
        Descendant = (OZChannelBase *)OZChannelFolder::getDescendant(a3, *(_DWORD *)(*(_QWORD *)v4 + 24));
        v7 = Descendant;
        if (!Descendant)
          goto LABEL_20;
        if (!v8 || v23 || v22 || v21 || v20 || v9 || v10 || v11 || v12 || v13 || v14 || Descendant)
LABEL_20:
          OZFxPlugSharedBase::writeDynamicParameterChannel((OZFxPlugSharedBase *)Descendant, a2, v7);
        else
          OZFxPlugSharedBase::writeDynamicParameterGroup(this, a2, v8);
        v5 = v16;
        v3 = v17;
      }
      v4 += 8;
    }
    while (v4 != v3[1]);
  }
}

uint64_t OZFxPlugSharedBase::writeDynamicParams(OZFxPlugSharedBase *this, PCSerializerWriteStream *a2, OZChannelFolder *a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZDynamicChannelsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21000);
  OZFxPlugSharedBase::writeFolder(this, a2, a3);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZFxPlugSharedBase::parseDynamicParamElement(OZFxPlugSharedBase *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  void *v6;
  const void *v7;
  OZChannel *v8;
  int v9;
  const void *v10;
  OZChannelButton *v11;
  OZChannelButton *v12;
  void *v13;
  PCString v14;
  const void *v15;
  void *v16;
  const void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t (*v24)(const void *, PCSharedCount *, _QWORD);
  BOOL v25;
  uint64_t v29;
  const void *v30;
  char *v31;
  char *v32;
  const void *v33;
  char *v34;
  const void *v35;
  PCString *v36;
  const void *v37;
  char *v38;
  const void *v39;
  char *v40;
  const void *v41;
  char *v42;
  char *v43;
  const void *v44;
  char *v45;
  char *v46;
  const void *v47;
  const void *v48;
  char *v49;
  char *v50;
  PCString v52;
  PCSharedCount v53;
  double v54;
  PCSharedCount v55;
  unsigned int v56[2];

  *(_QWORD *)v56 = 0;
  PCSharedCount::PCSharedCount(&v55);
  v54 = 0.0;
  PCSharedCount::PCSharedCount(&v53);
  v6 = (void *)*((_QWORD *)this + 4);
  v7 = (const void *)*((_QWORD *)this + 26);
  if (v7)
  else
    v8 = 0;
  v9 = *((_DWORD *)a3 + 2);
  switch(v9)
  {
    case 21000:
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v53))
      {
        v10 = (const void *)*((_QWORD *)this + 26);
        if (v10)
        {
          if (v11)
          {
            if (!*((_QWORD *)this + 30))
            {
              v12 = v11;
              v13 = (void *)*((_QWORD *)this + 3);
              PCString::PCString(&v52, (const PCString *)&v53);
              v14.var0 = (__CFString *)&v52;
              OZChannelButton::setCallbackSelectorAsString(v12, v14, v13);
              PCString::~PCString(&v52);
            }
          }
        }
      }
      break;
    case 21001:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
        OZChannel::setMin(v8, v54);
      break;
    case 21002:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
        OZChannel::setMax(v8, v54);
      break;
    case 21003:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
        OZChannel::setSliderMin(v8, v54);
      break;
    case 21004:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
        OZChannel::setSliderMax(v8, v54);
      break;
    case 21005:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
        OZChannel::setCoarseDelta(v8, v54);
      break;
    case 21006:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
        OZChannel::setFineDelta(v8, v54);
      break;
    case 21007:
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v53))
      {
        v35 = (const void *)*((_QWORD *)this + 26);
        if (v35)
        {
          if (v36)
            OZChannelEnum::addString(v36, (PCString *)&v53);
        }
      }
      break;
    case 21008:
      if (v8 && PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        OZChannel::setDefaultValue(v8, v54);
        (*((void (**)(OZChannel *, _QWORD))v8->var0 + 36))(v8, 0);
      }
      break;
    case 21009:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v37 = (const void *)*((_QWORD *)this + 26);
        if (v37)
        {
          if (v38)
          {
            OZChannel::setDefaultValue((OZChannel *)(v38 + 136), v54);
            (*(void (**)(char *, _QWORD))(*((_QWORD *)v38 + 17) + 288))(v38 + 136, 0);
          }
          else if (v34)
          {
            goto LABEL_87;
          }
        }
      }
      break;
    case 21010:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v39 = (const void *)*((_QWORD *)this + 26);
        if (v39)
        {
          if (v40)
          {
            OZChannel::setDefaultValue((OZChannel *)(v40 + 288), v54);
            (*(void (**)(char *, _QWORD))(*((_QWORD *)v40 + 36) + 288))(v40 + 288, 0);
          }
          else if (v31)
          {
            goto LABEL_30;
          }
        }
      }
      break;
    case 21011:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v41 = (const void *)*((_QWORD *)this + 26);
        if (v41)
        {
          if (v42)
          {
            OZChannel::setDefaultValue((OZChannel *)(v42 + 440), v54);
            (*(void (**)(char *, _QWORD))(*((_QWORD *)v42 + 55) + 288))(v42 + 440, 0);
          }
          else if (v43)
          {
            v50 = v43 + 440;
            OZChannel::setDefaultValue((OZChannel *)(v43 + 440), v54);
            (*(void (**)(char *, _QWORD))(*(_QWORD *)v50 + 288))(v50, 0);
          }
        }
      }
      break;
    case 21012:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v44 = (const void *)*((_QWORD *)this + 26);
        if (v44)
        {
          if (v45)
          {
            v46 = v45 + 1008;
            OZChannel::setDefaultValue((OZChannel *)(v45 + 1008), v54);
            (*(void (**)(char *, _QWORD))(*(_QWORD *)v46 + 288))(v46, 0);
          }
        }
      }
      break;
    case 21013:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v47 = (const void *)*((_QWORD *)this + 26);
        if (v47)
        {
          if (v34)
            goto LABEL_87;
        }
      }
      break;
    case 21014:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v30 = (const void *)*((_QWORD *)this + 26);
        if (v30)
        {
          if (v31)
          {
LABEL_30:
            v32 = v31 + 288;
            OZChannel::setDefaultValue((OZChannel *)(v31 + 288), v54);
            (*(void (**)(char *, _QWORD))(*(_QWORD *)v32 + 288))(v32, 0);
          }
        }
      }
      break;
    case 21015:
      *((_QWORD *)this + 26) = 0;
      objc_msgSend(v6, "endParameterSubGroup");
      break;
    case 21016:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v33 = (const void *)*((_QWORD *)this + 26);
        if (v33)
        {
          if (v34)
            goto LABEL_87;
        }
      }
      break;
    case 21017:
      if (PCSerializerReadStream::getAsDouble((uint64_t)a2, (uint64_t)a3, (uint64_t)&v54))
      {
        v48 = (const void *)*((_QWORD *)this + 26);
        if (v48)
        {
          if (v34)
          {
LABEL_87:
            v49 = v34 + 136;
            OZChannel::setDefaultValue((OZChannel *)(v34 + 136), v54);
            (*(void (**)(char *, _QWORD))(*(_QWORD *)v49 + 288))(v49, 0);
          }
        }
      }
      break;
    default:
      if (v9 == 20000)
      {
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v56[1]);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v55);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v56);
        v15 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v56[0]);
        if (v15)
        {
          if (v16)
          {
            v17 = v16;
            v24 = *(uint64_t (**)(const void *, PCSharedCount *, _QWORD))(*(_QWORD *)v17 + 168);
            if (v18 | v19)
              v25 = v20 == 0;
            else
              v25 = 0;
            if (v25 && v21 == 0 && v22 == 0 && v23 == 0)
            {
              objc_msgSend(v6, "addExistingGroup:", v24(v17, &v55, v56[1]));
              *((_QWORD *)this + 26) = 0;
            }
            else
            {
              v29 = v24(v17, &v55, v56[1]);
              *((_QWORD *)this + 26) = v29;
              objc_msgSend(v6, "addExistingChannel:", v29);
            }
          }
        }
      }
      break;
  }
  PCString::~PCString((PCString *)&v53);
  PCString::~PCString((PCString *)&v55);
  return 1;
}

void sub_1B2F54C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, uint64_t a12, PCString a13)
{
  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

uint64_t *OZFxPlugSharedBase::markDynamicParameterFactoriesForSerialization(id *this)
{
  uint64_t *result;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  result = (uint64_t *)(*((uint64_t (**)(id *))*this + 26))(this);
  if ((_DWORD)result)
  {
    result = (uint64_t *)objc_msgSend(this[4], "channelMap");
    v3 = result + 1;
    v4 = (_QWORD *)*result;
    if ((uint64_t *)*result != result + 1)
    {
      do
      {
        result = OZFactory::setNeedsSaving(*(OZFactory **)(v4[5] + 8), (const OZFactory *)1);
        v5 = (uint64_t *)v4[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (uint64_t *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (uint64_t *)v4[2];
            v7 = *v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
    }
  }
  return result;
}

void OZFxPlugSharedBase::pushDynamicParamScope(OZFxPlugSharedBase *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZDynamicChannelsScope);
}

uint64_t OZFxPlugSharedBase::updateFlipChannel(uint64_t this)
{
  void *v1;
  double v2;

  v1 = *(void **)(this + 32);
  if (v1)
  {
    v2 = 0.0;
    if (*(_DWORD *)(this + 440) <= 4u)
    {
      if (objc_msgSend(*(id *)(this + 32), "absolutePointsChannel"))
        v2 = 0.0;
      else
        v2 = 1.0;
    }
    this = objc_msgSend(v1, "flipChannel");
    if (this)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)this + 712))(this, MEMORY[0x1E0CA2E68], 0, v2);
  }
  return this;
}

void *OZFxPlugSharedBase::updateInputPointsChannel(OZFxPlugSharedBase *this)
{
  double v1;
  void *result;

  if (*((_DWORD *)this + 110) >= 5u)
    v1 = 1.0;
  else
    v1 = 0.0;
  result = (void *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (void *)objc_msgSend(result, "inputPointsChannel");
    if (result)
      return (void *)(*(uint64_t (**)(void *, _QWORD, _QWORD, double))(*(_QWORD *)result + 712))(result, MEMORY[0x1E0CA2E68], 0, v1);
  }
  return result;
}

void *OZFxPlugSharedBase::updateAbsolutePointsChannel(OZFxPlugSharedBase *this)
{
  double v1;
  void *result;

  if (*((_DWORD *)this + 110) >= 5u)
    v1 = 0.0;
  else
    v1 = 1.0;
  result = (void *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (void *)objc_msgSend(result, "absolutePointsChannel");
    if (result)
      return (void *)(*(uint64_t (**)(void *, _QWORD, _QWORD, double))(*(_QWORD *)result + 712))(result, MEMORY[0x1E0CA2E68], 0, v1);
  }
  return result;
}

uint64_t OZFxPlugSharedBase::openMedia(OZFxPlugSharedBase *this)
{
  void *v1;
  unsigned int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;
  OZChannelBase *v12;
  void *Node;
  uint64_t v14;
  unsigned int *__p;
  unsigned int *v18;

  v1 = (void *)*((_QWORD *)this + 4);
  if (v1)
  {
    objc_msgSend(*((id *)this + 4), "imageParamIDs");
    v2 = __p;
  }
  else
  {
    v2 = 0;
    __p = 0;
    v18 = 0;
  }
  v3 = objc_msgSend(v1, "channelMap");
  if (v2 == v18)
  {
    v14 = 0;
  }
  else
  {
    v4 = (_QWORD *)(v3 + 8);
    do
    {
      v5 = *v4;
      if (!*v4)
        goto LABEL_17;
      v6 = *v2;
      v7 = v4;
      do
      {
        v8 = *(_DWORD *)(v5 + 32);
        v9 = v8 >= v6;
        if (v8 >= v6)
          v10 = (uint64_t *)v5;
        else
          v10 = (uint64_t *)(v5 + 8);
        if (v9)
          v7 = (_QWORD *)v5;
        v5 = *v10;
      }
      while (*v10);
      if (v7 == v4 || v6 < *((_DWORD *)v7 + 8))
LABEL_17:
        v7 = v4;
      v11 = (const void *)v7[5];
      if (v11
      {
        v14 = (*(uint64_t (**)(void *))(*(_QWORD *)Node + 104))(Node);
      }
      else
      {
        v14 = 0;
      }
      ++v2;
    }
    while (v2 != v18 && v14 == 0);
  }
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_1B2F54FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  OZChannelBase *v19;
  void *Node;
  void *v22[3];
  void *__p;
  unsigned int *v24;
  uint64_t v25;
  _BYTE v26[32];
  void **v27;

  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v26);
    v9 = *(void **)(a1 + 32);
    if (v9)
    {
      objc_msgSend(v9, "imageParamIDs");
      v10 = (unsigned int *)__p;
    }
    else
    {
      v10 = 0;
      __p = 0;
      v24 = 0;
      v25 = 0;
    }
    v11 = objc_msgSend(v9, "channelMap");
    if (v10 != v24)
    {
      v12 = (_QWORD *)(v11 + 8);
      do
      {
        memset(v22, 0, sizeof(v22));
        v13 = *v12;
        if (!*v12)
          goto LABEL_19;
        v14 = *v10;
        v15 = v12;
        do
        {
          v16 = *(_DWORD *)(v13 + 32);
          v17 = v16 >= v14;
          if (v16 >= v14)
            v18 = (uint64_t *)v13;
          else
            v18 = (uint64_t *)(v13 + 8);
          if (v17)
            v15 = (_QWORD *)v13;
          v13 = *v18;
        }
        while (*v18);
        if (v15 == v12 || v14 < *((_DWORD *)v15 + 8))
LABEL_19:
          v15 = v12;
        v19 = (OZChannelBase *)v15[5];
        if (v19)
        Node = OZChanSceneNodeRef::getNode(v19);
        (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)Node + 136))(Node, a2, v22, a4, a5);
        ++v10;
        v27 = v22;
        std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v27);
      }
      while (v10 != v24);
    }
    if (__p)
    {
      v24 = (unsigned int *)__p;
      operator delete(__p);
    }
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v26);
  }
  return 0;
}

void sub_1B2F55150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&a16);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  OZChannelBase *v17;
  void *Node;
  void *v20[3];
  void *__p;
  unsigned int *v22;
  uint64_t v23;
  void **v24;

  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v7 = *(void **)(a1 + 32);
    if (v7)
    {
      objc_msgSend(v7, "imageParamIDs");
      v8 = (unsigned int *)__p;
    }
    else
    {
      v8 = 0;
      __p = 0;
      v22 = 0;
      v23 = 0;
    }
    v9 = objc_msgSend(v7, "channelMap");
    if (v8 != v22)
    {
      v10 = (_QWORD *)(v9 + 8);
      do
      {
        memset(v20, 0, sizeof(v20));
        v11 = *v10;
        if (!*v10)
          goto LABEL_19;
        v12 = *v8;
        v13 = v10;
        do
        {
          v14 = *(_DWORD *)(v11 + 32);
          v15 = v14 >= v12;
          if (v14 >= v12)
            v16 = (uint64_t *)v11;
          else
            v16 = (uint64_t *)(v11 + 8);
          if (v15)
            v13 = (_QWORD *)v11;
          v11 = *v16;
        }
        while (*v16);
        if (v13 == v10 || v12 < *((_DWORD *)v13 + 8))
LABEL_19:
          v13 = v10;
        v17 = (OZChannelBase *)v13[5];
        if (v17)
        Node = OZChanSceneNodeRef::getNode(v17);
        (*(void (**)(void *, uint64_t, void **, uint64_t))(*(_QWORD *)Node + 144))(Node, a2, v20, a4);
        ++v8;
        v24 = v20;
        std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v24);
      }
      while (v8 != v22);
    }
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
  return 0;
}

void sub_1B2F55308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  OZChannelBase *v17;
  void *Node;
  void *v20[3];
  void *__p;
  unsigned int *v22;
  uint64_t v23;
  void **v24;

  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v7 = *(void **)(a1 + 32);
    if (v7)
    {
      objc_msgSend(v7, "imageParamIDs");
      v8 = (unsigned int *)__p;
    }
    else
    {
      v8 = 0;
      __p = 0;
      v22 = 0;
      v23 = 0;
    }
    v9 = objc_msgSend(v7, "channelMap");
    if (v8 != v22)
    {
      v10 = (_QWORD *)(v9 + 8);
      do
      {
        memset(v20, 0, sizeof(v20));
        v11 = *v10;
        if (!*v10)
          goto LABEL_19;
        v12 = *v8;
        v13 = v10;
        do
        {
          v14 = *(_DWORD *)(v11 + 32);
          v15 = v14 >= v12;
          if (v14 >= v12)
            v16 = (uint64_t *)v11;
          else
            v16 = (uint64_t *)(v11 + 8);
          if (v15)
            v13 = (_QWORD *)v11;
          v11 = *v16;
        }
        while (*v16);
        if (v13 == v10 || v12 < *((_DWORD *)v13 + 8))
LABEL_19:
          v13 = v10;
        v17 = (OZChannelBase *)v13[5];
        if (v17)
        Node = OZChanSceneNodeRef::getNode(v17);
        (*(void (**)(void *, uint64_t, void **, uint64_t))(*(_QWORD *)Node + 152))(Node, a2, v20, a4);
        ++v8;
        v24 = v20;
        std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v24);
      }
      while (v8 != v22);
    }
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
  return 0;
}

void sub_1B2F554B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  const void *v19;
  OZChannelBase *v20;
  void *Node;
  uint64_t v22;
  unsigned int *__p;
  unsigned int *v26;

  v9 = *(void **)(a1 + 32);
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "imageParamIDs");
    v10 = __p;
  }
  else
  {
    v10 = 0;
    __p = 0;
    v26 = 0;
  }
  v11 = objc_msgSend(v9, "channelMap");
  if (v10 == v26)
  {
    v22 = 0;
  }
  else
  {
    v12 = (_QWORD *)(v11 + 8);
    do
    {
      v13 = *v12;
      if (!*v12)
        goto LABEL_17;
      v14 = *v10;
      v15 = v12;
      do
      {
        v16 = *(_DWORD *)(v13 + 32);
        v17 = v16 >= v14;
        if (v16 >= v14)
          v18 = (uint64_t *)v13;
        else
          v18 = (uint64_t *)(v13 + 8);
        if (v17)
          v15 = (_QWORD *)v13;
        v13 = *v18;
      }
      while (*v18);
      if (v15 == v12 || v14 < *((_DWORD *)v15 + 8))
LABEL_17:
        v15 = v12;
      v19 = (const void *)v15[5];
      if (v19
      {
        v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)Node + 112))(Node, a2, a3, a4, a5);
      }
      else
      {
        v22 = 0;
      }
      ++v10;
    }
    while (v10 != v26 && v22 == 0);
  }
  if (__p)
    operator delete(__p);
  return v22;
}

void sub_1B2F55644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::prerollEnd(OZFxPlugSharedBase *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  const void *v15;
  OZChannelBase *v16;
  void *Node;
  uint64_t v18;
  unsigned int *__p;
  unsigned int *v22;

  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    objc_msgSend(*((id *)this + 4), "imageParamIDs");
    v6 = __p;
  }
  else
  {
    v6 = 0;
    __p = 0;
    v22 = 0;
  }
  v7 = objc_msgSend(v5, "channelMap");
  if (v6 == v22)
  {
    v18 = 0;
  }
  else
  {
    v8 = (_QWORD *)(v7 + 8);
    do
    {
      v9 = *v8;
      if (!*v8)
        goto LABEL_17;
      v10 = *v6;
      v11 = v8;
      do
      {
        v12 = *(_DWORD *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = (_QWORD *)v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 == v8 || v10 < *((_DWORD *)v11 + 8))
LABEL_17:
        v11 = v8;
      v15 = (const void *)v11[5];
      if (v15
      {
        v18 = (*(uint64_t (**)(void *, const OZRenderParams *, PMFrameRequest *))(*(_QWORD *)Node + 120))(Node, a2, a3);
      }
      else
      {
        v18 = 0;
      }
      ++v6;
    }
    while (v6 != v22 && v18 == 0);
  }
  if (__p)
    operator delete(__p);
  return v18;
}

void sub_1B2F557AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::setRate(OZFxPlugSharedBase *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  const void *v17;
  OZChannelBase *v18;
  void *Node;
  uint64_t v20;
  unsigned int *__p;
  unsigned int *v24;

  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    objc_msgSend(*((id *)this + 4), "imageParamIDs");
    v8 = __p;
  }
  else
  {
    v8 = 0;
    __p = 0;
    v24 = 0;
  }
  v9 = objc_msgSend(v7, "channelMap");
  if (v8 == v24)
  {
    v20 = 0;
  }
  else
  {
    v10 = (_QWORD *)(v9 + 8);
    do
    {
      v11 = *v10;
      if (!*v10)
        goto LABEL_17;
      v12 = *v8;
      v13 = v10;
      do
      {
        v14 = *(_DWORD *)(v11 + 32);
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = (uint64_t *)v11;
        else
          v16 = (uint64_t *)(v11 + 8);
        if (v15)
          v13 = (_QWORD *)v11;
        v11 = *v16;
      }
      while (*v16);
      if (v13 == v10 || v12 < *((_DWORD *)v13 + 8))
LABEL_17:
        v13 = v10;
      v17 = (const void *)v13[5];
      if (v17
      {
        v20 = (*(uint64_t (**)(void *, const OZRenderParams *, PMFrameRequest *, double))(*(_QWORD *)Node
                                                                                                  + 128))(Node, a2, a3, a4);
      }
      else
      {
        v20 = 0;
      }
      ++v8;
    }
    while (v8 != v24 && v20 == 0);
  }
  if (__p)
    operator delete(__p);
  return v20;
}

void sub_1B2F55924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZFxPlugSharedBase::pruneTokensAtTime(OZFxPlugSharedBase *this, const CMTime *a2, const char *a3)
{
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  const void *v15;
  OZChannelBase *v16;
  void *Node;
  __int128 v18;
  CMTimeEpoch epoch;
  void *__p;
  unsigned int *v21;
  uint64_t v22;

  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    objc_msgSend(*((id *)this + 4), "imageParamIDs");
    v6 = (unsigned int *)__p;
  }
  else
  {
    v6 = 0;
    __p = 0;
    v21 = 0;
    v22 = 0;
  }
  v7 = objc_msgSend(v5, "channelMap");
  if (v6 != v21)
  {
    v8 = (_QWORD *)(v7 + 8);
    do
    {
      v9 = *v8;
      if (!*v8)
        goto LABEL_17;
      v10 = *v6;
      v11 = v8;
      do
      {
        v12 = *(_DWORD *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = (_QWORD *)v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 == v8 || v10 < *((_DWORD *)v11 + 8))
LABEL_17:
        v11 = v8;
      v15 = (const void *)v11[5];
      if (v15)
      {
        if (v16)
        {
          Node = OZChanSceneNodeRef::getNode(v16);
          if (Node)
          {
            v18 = *(_OWORD *)&a2->value;
            epoch = a2->epoch;
            (*(void (**)(void *, __int128 *, const char *))(*(_QWORD *)Node + 160))(Node, &v18, a3);
          }
        }
      }
      ++v6;
    }
    while (v6 != v21);
  }
  if (__p)
  {
    v21 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1B2F55A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZFxPlugSharedBase::pruneTokensExceptAtTime(OZFxPlugSharedBase *this, const CMTime *a2, const char *a3)
{
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  const void *v15;
  OZChannelBase *v16;
  void *Node;
  __int128 v18;
  CMTimeEpoch epoch;
  void *__p;
  unsigned int *v21;
  uint64_t v22;

  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    objc_msgSend(*((id *)this + 4), "imageParamIDs");
    v6 = (unsigned int *)__p;
  }
  else
  {
    v6 = 0;
    __p = 0;
    v21 = 0;
    v22 = 0;
  }
  v7 = objc_msgSend(v5, "channelMap");
  if (v6 != v21)
  {
    v8 = (_QWORD *)(v7 + 8);
    do
    {
      v9 = *v8;
      if (!*v8)
        goto LABEL_17;
      v10 = *v6;
      v11 = v8;
      do
      {
        v12 = *(_DWORD *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = (_QWORD *)v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 == v8 || v10 < *((_DWORD *)v11 + 8))
LABEL_17:
        v11 = v8;
      v15 = (const void *)v11[5];
      if (v15)
      {
        if (v16)
        {
          Node = OZChanSceneNodeRef::getNode(v16);
          if (Node)
          {
            v18 = *(_OWORD *)&a2->value;
            epoch = a2->epoch;
            (*(void (**)(void *, __int128 *, const char *))(*(_QWORD *)Node + 168))(Node, &v18, a3);
          }
        }
      }
      ++v6;
    }
    while (v6 != v21);
  }
  if (__p)
  {
    v21 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1B2F55BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZFxPlugSharedBase::pruneAllTokens(OZFxPlugSharedBase *this, const char *a2)
{
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  const void *v13;
  OZChannelBase *v14;
  void *Node;
  unsigned int *__p;
  unsigned int *v17;

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    objc_msgSend(*((id *)this + 4), "imageParamIDs");
    v4 = __p;
  }
  else
  {
    v4 = 0;
    __p = 0;
    v17 = 0;
  }
  v5 = objc_msgSend(v3, "channelMap");
  if (v4 != v17)
  {
    v6 = (_QWORD *)(v5 + 8);
    do
    {
      v7 = *v6;
      if (!*v6)
        goto LABEL_17;
      v8 = *v4;
      v9 = v6;
      do
      {
        v10 = *(_DWORD *)(v7 + 32);
        v11 = v10 >= v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v7;
        else
          v12 = (uint64_t *)(v7 + 8);
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8))
LABEL_17:
        v9 = v6;
      v13 = (const void *)v9[5];
      if (v13)
      {
        if (v14)
        {
          Node = OZChanSceneNodeRef::getNode(v14);
          if (Node)
            (*(void (**)(void *, const char *))(*(_QWORD *)Node + 176))(Node, a2);
        }
      }
      ++v4;
    }
    while (v4 != v17);
  }
  if (__p)
    operator delete(__p);
}

void sub_1B2F55D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZFxPlugSharedBase::didChangeChannelState(uint64_t this, OZScene *a2, OZChannelBase *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)a2 + 198);
  v4 = *(_DWORD *)(v3 + 260);
  if (v4 < 5)
    return objc_msgSend(*(id *)(this + 32), "restoreParameterFlagsForChannel:", a3);
  v5 = *(_DWORD *)(v3 + 264);
  if (v4 == 5 && v5 <= 4)
    return objc_msgSend(*(id *)(this + 32), "restoreParameterFlagsForChannel:", a3);
  return this;
}

uint64_t OZFxPlugSharedBase::CalculateRenderInfo(int a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5, int a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  OZScene *v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[80];

  v11 = *a3;
  v12 = *a4;
  v13 = a4[1];
  if (a2)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
    if (v14)
    {
      v15 = (OZScene *)v14;
      OZExportSettings::OZExportSettings((OZExportSettings *)v18);
      OZScene::getSceneSettings(v15, (OZExportSettings *)v18);
      if (v18[44])
        v7 = 2;
      else
        v7 = 1;
      OZExportSettings::~OZExportSettings((OZExportSettings *)v18);
    }
  }
  result = OZFxPlug_FxDepthFromDepth(a5);
  v17 = a6 == 1;
  *a7 = v11;
  if (a6 == 2)
    v17 = 2;
  a7[1] = v7;
  a7[2] = v17;
  a7[3] = v12;
  a7[4] = v13;
  a7[5] = result;
  return result;
}

void sub_1B2F55E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZExportSettings::~OZExportSettings((OZExportSettings *)&a9);
  _Unwind_Resume(a1);
}

void *OZFxPlugSharedBase::footageFromSceneNode(void *this, OZSceneNode *a2)
{
  const void *v2;

  if (this)
  {
    v2 = this;
    if (!this)
    {
      if (this)
        return OZImageElement::getFootage((OZImageElement *)this);
    }
  }
  return this;
}

double OZFxPlugSharedBase::setupRenderParamsForRetrievingImage(OZFxPlugSharedBase *this, OZRenderParams *a2, void *lpsrc, OZSceneNode *a4, const CMTime *a5, GLRenderer *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  int FieldDominance;
  OZFootage *v19;
  OZProcessControl *v20;
  __int128 v21;
  int v22;
  PGContext *v23;
  OZScene *v24;
  CGColorSpace *WorkingColorSpace;
  int ComputedWorkingGamut;
  _QWORD *v27;
  uint64_t v28;
  double result;
  _QWORD v30[2];
  __int128 v31;
  CMTime v32;

  if (lpsrc)
  {
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v30[0] = 0;
  v30[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v31 = _Q0;
  FieldDominance = *((_DWORD *)this + 123);
  v19 = (OZFootage *)OZFxPlugSharedBase::footageFromSceneNode(lpsrc, a2);
  if (v19)
  {
    v32 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    FieldDominance = OZFootage::getFieldDominance(v19, &v32);
  }
  v20 = (OZProcessControl *)operator new();
  OZProcessControl::OZProcessControl(v20);
  *((_QWORD *)this + 34) = v20;
  v21 = *(_OWORD *)a4;
  *((_QWORD *)this + 2) = *((_QWORD *)a4 + 2);
  *(_OWORD *)this = v21;
  *((_DWORD *)this + 123) = FieldDominance;
  *((_BYTE *)this + 488) = FieldDominance != 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  OZRenderParams::setImageType((uint64_t)this, 2);
  v22 = OZFxPlug_DepthFromFxDepth(*((_QWORD *)a2 + 5));
  OZRenderParams::setDepth(this, v22);
  OZRenderParams::setNumChannels(this, 4);
  *((_DWORD *)this + 85) = OZFxPlug_ChannelOrderFromFxDepth(*((_QWORD *)a2 + 5));
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  v23 = (PGContext *)PGGetPerThreadContext();
  OZRenderParams::setImageContext(this, v23);
  *((_BYTE *)this + 202) = 0;
  if (!OZRenderParams::hasWorkingColorSpace((FxColorDescription *)this))
  {
    v24 = (OZScene *)(*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 272))(lpsrc);
    WorkingColorSpace = (CGColorSpace *)OZScene::getWorkingColorSpace(v24);
    OZRenderParams::setWorkingColorSpace((FxColorDescription *)this, WorkingColorSpace);
    ComputedWorkingGamut = OZScene::getComputedWorkingGamut(v24);
    OZRenderParams::setWorkingGamut((uint64_t)this, ComputedWorkingGamut);
  }
  if (v12)
    v27 = v12;
  else
    v27 = v11;
  v28 = 1552;
  if (!v12)
    v28 = 16;
  (*(void (**)(_QWORD *, _QWORD *))(*v27 + v28))(v27, v30);
  *((_QWORD *)this + 35) = a5;
  if (*(double *)&v31 > 0.0)
    OZRenderParams::setWidth(this, (int)*(double *)&v31);
  result = *((double *)&v31 + 1);
  if (*((double *)&v31 + 1) > 0.0)
    return OZRenderParams::setHeight(this, (int)*((double *)&v31 + 1));
  return result;
}

void sub_1B2F560C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C400F4F2387);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugSharedBase::cleanupRenderParams(OZFxPlugSharedBase *this, OZRenderParams *a2)
{
  uint64_t result;

  result = OZRenderParams::deleteControl(this);
  *((_QWORD *)this + 35) = 0;
  return result;
}

Float64 FigTimeToFrames(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  Float64 result;
  __n128 v7;
  CMTime time;
  uint64_t v9;
  uint64_t v10;

  result = 0.0;
  if (!a3)
  {
    v9 = v3;
    v10 = v4;
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(a2 + 336), &v7);
    operator/(a1, (uint64_t)&v7, (uint64_t)&time);
    return CMTimeGetSeconds(&time);
  }
  return result;
}

CMTime *FramesToFigTime@<X0>(CMTime *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, Float64 a4@<D0>)
{
  uint64_t v6;
  CMTime v7;
  CMTime v8;

  v6 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v6 + 16);
  if (!a2)
  {
    OZSceneSettings::getFrameDuration((OZSceneSettings *)&result[14], (__n128 *)&v7);
    result = operator*(&v7, &v8, a4);
    *(CMTime *)a3 = v8;
  }
  return result;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::allocate_shared[abi:ne180100]<OZFxPlugSharedLock,std::allocator<OZFxPlugSharedLock>,OZFxPlugSharedBase *,void>@<X0>(OZFxPlugSharedBase **a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x88uLL);
  result = std::__shared_ptr_emplace<OZFxPlugSharedLock>::__shared_ptr_emplace[abi:ne180100]<OZFxPlugSharedBase *,std::allocator<OZFxPlugSharedLock>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B2F56300(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<OZFxPlugSharedLock>::__shared_ptr_emplace[abi:ne180100]<OZFxPlugSharedBase *,std::allocator<OZFxPlugSharedLock>,0>(uint64_t a1, OZFxPlugSharedBase **a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E65C0DA0;
  OZFxPlugSharedLock::OZFxPlugSharedLock((OZFxPlugSharedLock *)(a1 + 24), *a2);
  return a1;
}

void sub_1B2F56350(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<OZFxPlugSharedLock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65C0DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<OZFxPlugSharedLock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65C0DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

void std::__shared_ptr_emplace<OZFxPlugSharedLock>::__on_zero_shared(uint64_t a1)
{
  OZFxPlugSharedLock::~OZFxPlugSharedLock((OZFxPlugSharedLock *)(a1 + 24));
}

void OZChannelFontBase::OZChannelFontBase(OZChannelFontBase *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  _QWORD *v7;
  PCString v8;
  PCSharedCount v9;

  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, a5, a6, 0, 0);
  *v7 = &off_1E65C0DF0;
  v7[2] = &unk_1E65C1160;
  PCSharedCount::PCSharedCount(&v9);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text Format Family"));
  OZChannelEnum::OZChannelEnum((OZChannelFontBase *)((char *)this + 136), (const PCString *)&v9, &v8, (OZChannelFolder *)this, 1u, 8u, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString((PCString *)&v9);
  PCSharedCount::PCSharedCount(&v9);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text Format Typeface"));
  OZChannelEnum::OZChannelEnum((OZChannelFontBase *)((char *)this + 392), (const PCString *)&v9, &v8, (OZChannelFolder *)this, 2u, 8u, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString((PCString *)&v9);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 81);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 82);
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)this, CFSTR("OZChanLabelController"));
}

void sub_1B2F564F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelObjectRootBase *v10;
  OZChannelEnum *v11;
  PCString *v12;
  OZChannelEnum *v13;
  PCString *v14;
  PCString *v15;

  v15 = v12;
  PCString::~PCString(v15);
  PCString::~PCString(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelEnum::~OZChannelEnum(v11);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v10);
  _Unwind_Resume(a1);
}

void OZChannelFontBase::OZChannelFontBase(OZChannelFontBase *this, const OZChannelFontBase *a2, OZChannelFolder *a3)
{
  _QWORD *v5;

  OZCompoundChannel::OZCompoundChannel(this, (const OZChannelBase *)a2, a3);
  *v5 = &off_1E65C0DF0;
  v5[2] = &unk_1E65C1160;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 17), (const OZChannelFontBase *)((char *)a2 + 136), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelFontBase *)((char *)this + 392), (const OZChannelFontBase *)((char *)a2 + 392), (OZChannelFolder *)this);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 81);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 82);
  PCString::set((PCString *)this + 81, (const PCString *)a2 + 81);
  PCString::set((PCString *)this + 82, (const PCString *)a2 + 82);
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
}

void sub_1B2F5663C(_Unwind_Exception *a1)
{
  OZChannelObjectRootBase *v1;
  OZChannelEnum *v2;
  OZChannelEnum *v3;
  PCString *v4;

  PCString::~PCString(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelFontBase::init(PCString *this, OZFontManagerBase *a2, const PCString *a3)
{
  PCString::set(this + 81, a3);
  PCString::set(this + 82, a3);
  LODWORD(this[83].var0) = 0;
}

const __CFString *OZChannelFontBase::getObjCWrapperName(OZChannelFontBase *this)
{
  return CFSTR("CHChannelFont");
}

OZChannelFontBase *OZChannelFontBase::clone(OZChannelFontBase *this)
{
  OZChannelFontBase *v2;

  v2 = (OZChannelFontBase *)operator new();
  OZChannelFontBase::OZChannelFontBase(v2, this, 0);
  return v2;
}

void sub_1B2F56720(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void OZChannelFontBase::copy(OZChannelFontBase *this, const OZChannelBase *a2, char a3)
{
  const OZChannelBase *v4;

  v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4)
  OZChannelEnum::copy((PCString *)this + 17, (const OZChannelBase *)((char *)v4 + 136), a3);
  OZChannelEnum::copy((PCString *)this + 49, (const OZChannelBase *)((char *)v4 + 392), a3);
  PCString::set((PCString *)this + 81, (const PCString *)&v4[5].var11);
  PCString::set((PCString *)this + 82, (const PCString *)&v4[5].var12);
  *((_DWORD *)this + 166) = v4[5].var13;
}

void OZChannelFontBase::assign(OZChannelFontBase *this, const OZChannelBase *a2)
{
  const OZChannelBase *v2;

  v2 = a2;
  OZChannelFolder::assign((OZChannelFolder *)this, a2);
  if (v2)
  PCString::set((PCString *)this + 81, (const PCString *)&v2[5].var11);
  PCString::set((PCString *)this + 82, (const PCString *)&v2[5].var12);
  *((_DWORD *)this + 166) = v2[5].var13;
}

uint64_t OZChannelFontBase::writeHeader(OZChannelBase *this, PCSerializerWriteStream *a2, int a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFontBaseScope);
  return OZChannelBase::writeHeader(this, (OZFactory *)a2, a3);
}

uint64_t `non-virtual thunk to'OZChannelFontBase::writeHeader(OZChannelFontBase *this, PCSerializerWriteStream *a2, int a3)
{
  OZChannelBase *v5;

  v5 = (OZChannelBase *)((char *)this - 16);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelFontBaseScope);
  return OZChannelBase::writeHeader(v5, (OZFactory *)a2, a3);
}

uint64_t OZChannelFontBase::writeBody(const PCString *this, PCSerializerWriteStream *a2)
{
  PCString v5;
  PCString v6;

  PCString::PCString(&v6, this + 81);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 114);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v6);
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    PCString::PCString(&v5, this + 82);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 115);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v5);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v5);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2F569B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelFontBase::writeBody(const PCString *this, PCSerializerWriteStream *a2)
{
  return OZChannelFontBase::writeBody(this - 2, a2);
}

uint64_t OZChannelFontBase::parseBegin(OZChannelBase *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelFontBaseScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZChannelFontBase::parseBegin(OZChannelFontBase *this, PCSerializerReadStream *a2)
{
  OZChannelBase::parseBegin((OZChannelBase *)((char *)this - 16), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZChannelFontBaseScope);
  return 1;
}

uint64_t OZChannelFontBase::parseElement(PCString *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v5;
  PCSharedCount v8;

  v5 = *((_DWORD *)a3 + 2);
  if (v5 == 115)
  {
    (*(void (**)(PCStreamElement *, PCString *))(*(_QWORD *)a3 + 16))(a3, this + 82);
  }
  else if (v5 == 114)
  {
    PCSharedCount::PCSharedCount(&v8);
    (*(void (**)(PCStreamElement *, PCSharedCount *))(*(_QWORD *)a3 + 16))(a3, &v8);
    OZChannelFontBase::validateAndSetFontName(this, (PCString *)&v8);
    ((void (*)(PCString *))this->var0[26].length)(this);
    OZChannelBase::parseElement((OZChannelBase *)this, a2, a3);
    PCString::~PCString((PCString *)&v8);
  }
  return 1;
}

void sub_1B2F56B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZChannelFontBase::validateAndSetFontName(PCString *this, PCString *a2)
{
  PCString v3;

  OZChannelFontBase::checkAndConvertToSystemFont((OZChannelFontBase *)this, a2, 48.0, &v3);
  PCString::set(this + 81, &v3);
  PCString::~PCString(&v3);
}

void sub_1B2F56B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZChannelFontBase::parseElement(PCString *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelFontBase::parseElement(this - 2, a2, a3);
  return 1;
}

void OZChannelFontBase::getDefaultSystemFont(OZChannelFontBase *this@<X0>, PCString *a2@<X8>)
{
  OZFontManager::getInstance(this);
  OZFontManagerBase::getDefaultSystemFont(a2);
}

uint64_t OZChannelFontBase::getSystemFonts(OZChannelFontBase *this)
{
  return 0;
}

uint64_t OZChannelFontBase::getFontFace(OZChannelFontBase *this, const PCString *a2)
{
  uint64_t Instance;

  Instance = OZFontManager::getInstance(this);
  return (*(uint64_t (**)(uint64_t, const PCString *))(*(_QWORD *)Instance + 56))(Instance, a2);
}

void OZChannelFontBase::getDefaultSystemFontFace(OZChannelFontBase *this@<X0>, _QWORD *a2@<X8>)
{
  OZFontManagerBase *Instance;

  Instance = (OZFontManagerBase *)OZFontManager::getInstance(this);
  OZFontManagerBase::getDefaultSystemFontFace(Instance, a2);
}

void OZChannelFontBase::setFontChannelWithName(OZChannelFontBase *this, const PCString *a2)
{
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  PCString *v11;
  OZFontCollection *v12;
  int FontFamilyIndex;
  int TypefaceIndex;
  OZChannel *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 840))(&v20);
  v3 = v20;
  if (!(_QWORD)v20)
  {
    (*(void (**)(__int128 *__return_ptr, OZChannelFontBase *))(*(_QWORD *)this + 848))(&v19, this);
    v4 = v19;
    v19 = 0uLL;
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    v20 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = v20;
  }
  v11 = *(PCString **)(v3 + 24);
  v12 = (OZFontCollection *)(*(uint64_t (**)(OZChannelFontBase *))(*(_QWORD *)this + 832))(this);
  FontFamilyIndex = OZFontCollection::getFontFamilyIndex(v12, v11);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 136), (double)FontFamilyIndex);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 136), 0);
  TypefaceIndex = OZFontFamily::getTypefaceIndex((OZFontFamily *)v11, (const PCString *)(v20 + 8));
  v15 = (OZChannel *)((char *)this + 392);
  OZChannel::setDefaultValue(v15, (double)TypefaceIndex);
  OZChannelBase::reset((OZChannelBase *)v15, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1B2F56D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL OZChannelFontBase::isMissing(OZChannelFontBase *this)
{
  return *((_DWORD *)this + 166) == 3;
}

void OZChannelFontBase::getValidatedFontName(OZChannelBase *this@<X0>, PCString *a2@<X8>)
{
  int var13;
  uint64_t v5;
  OZScene *v6;
  _BOOL8 v7;
  uint64_t ObjectManipulator;
  uint64_t v9;

  var13 = (int)this[5].var13;
  if (var13 == 3)
  {
LABEL_10:
    (*((void (**)(OZChannelBase *))this->var0 + 103))(this);
    return;
  }
  if (var13 != 2)
  {
    ObjectManipulator = OZChannelBase::getObjectManipulator(this);
    if (ObjectManipulator)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
      if (v9)
        OZScene::setFlag(v9, 256);
    }
    goto LABEL_10;
  }
  v5 = OZChannelBase::getObjectManipulator(this);
  if (v5
    && (v6 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 264))(v5)) != 0
    && (v7 = OZScene::testFlag(v6, 256)))
  {
    OZFontManager::getInstance((OZFontManager *)v7);
    OZFontManagerBase::getDefaultSystemFont(a2);
  }
  else
  {
    PCString::PCString(a2, (const PCString *)&this[5].var11);
  }
}

void OZChannelFont::OZChannelFont(OZChannelFont *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZFontManager *v7;
  PCString v8;

  OZChannelFontBase::OZChannelFontBase(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v7 = &off_1E65C11D0;
  *((_QWORD *)v7 + 2) = &unk_1E65C1540;
  OZFontManager::getInstance(v7);
  OZFontManagerBase::getDefaultSystemFont(&v8);
  PCString::set((PCString *)this + 81, &v8);
  PCString::set((PCString *)this + 82, &v8);
  *((_DWORD *)this + 166) = 0;
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)this, CFSTR("OZFontController"));
  PCString::~PCString(&v8);
}

void sub_1B2F56EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;

  OZChannelFontBase::~OZChannelFontBase(v10);
  _Unwind_Resume(a1);
}

uint64_t OZChannelFont_Factory::getInstance(OZChannelFont_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelFont_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelFont_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelFont_Factory::_instance;
}

void OZChannelFont::OZChannelFont(OZChannelFont *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)OZChannelFont_Factory::getInstance(this);
  OZChannelFont::OZChannelFont(this, Instance, a2, a3, a4, a5);
}

void OZChannelFont::OZChannelFont(OZChannelFont *this, const OZChannelFont *a2, OZChannelFolder *a3)
{
  OZChannelBase *v3;

  OZChannelFontBase::OZChannelFontBase(this, a2, a3);
  v3->var0 = (void **)&off_1E65C11D0;
  v3->var2 = (void **)&unk_1E65C1540;
  OZChannelBase::setParameterCtlrClassName(v3, CFSTR("OZFontController"));
}

void sub_1B2F57008(_Unwind_Exception *a1)
{
  PCString *v1;

  OZChannelFontBase::~OZChannelFontBase(v1);
  _Unwind_Resume(a1);
}

OZChannelFont *OZChannelFont::clone(OZChannelFont *this)
{
  OZChannelFont *v2;

  v2 = (OZChannelFont *)operator new();
  OZChannelFont::OZChannelFont(v2, this, 0);
  return v2;
}

void sub_1B2F57064(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelFont_Factory *v0;

  v0 = (OZChannelFont_Factory *)operator new();
  OZChannelFont_Factory::OZChannelFont_Factory(v0);
  OZChannelFont_Factory::_instance = (uint64_t)v0;
}

void sub_1B2F570D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelFont_Factory::OZChannelFont_Factory(OZChannelFont_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054CD0;
  v4 = xmmword_1B3054CB0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65C15B0;
  *((_QWORD *)this + 16) = &unk_1E65C1680;
}

void sub_1B2F57170(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelFont *OZChannelFont_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelFont *v6;

  v6 = (OZChannelFont *)operator new();
  OZChannelFont::OZChannelFont(v6, this, a2, 0, a3, 0);
  return v6;
}

void sub_1B2F571E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

OZChannelFont *OZChannelFont_Factory::createCopy(OZChannelFont_Factory *this, OZFactoryBase *a2)
{
  OZChannelFont *v3;
  const OZChannelFont *v4;

  v3 = (OZChannelFont *)operator new();
  OZChannelFont::OZChannelFont(v3, v4, 0);
  return v3;
}

void sub_1B2F57274(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

OZChannelFont *OZChannelFont_Factory::createChannelCopy(OZChannelFont_Factory *this, OZChannelBase *a2)
{
  OZChannelFont *v3;
  const OZChannelFont *v4;

  v3 = (OZChannelFont *)operator new();
  OZChannelFont::OZChannelFont(v3, v4, 0);
  return v3;
}

void sub_1B2F57300(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugRenderContext::OZFxPlugRenderContext(uint64_t a1, const FxColorDescription *a2, uint64_t *a3, float a4)
{
  OZRenderParams *v8;

  *(_QWORD *)a1 = &unk_1E65C16D8;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_DWORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v8 = (OZRenderParams *)operator new();
  OZRenderParams::OZRenderParams(v8);
  *(_QWORD *)(a1 + 64) = v8;
  LiRenderParameters::LiRenderParameters(a1 + 72, a2, a3, a4);
  *(_DWORD *)(a1 + 332) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 313) = 0u;
  OZRenderParams::setWorkingColorDescription(*(CGColorSpace ***)(a1 + 64), a2);
  OZRenderParams::setBlendingGamma(*(_QWORD *)(a1 + 64), a4);
  OZRenderParams::setRenderDevice(*(_QWORD *)(a1 + 64), a3);
  return a1;
}

void sub_1B2F57430(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x10E0C409D1DB814);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::~OZFxPlugRenderContextManager(OZFxPlugRenderContextManager *this)
{
  OZFxPlugRenderContextManager *v1;
  uint64_t **p_contexts;
  uint64_t *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t *begin_node;

  v1 = this;
  this->_vptr$OZFxPlugRenderContextManager = (void **)&off_1E65C16F8;
  p_contexts = (uint64_t **)&this->_contexts;
  while (v1->_contexts.__tree_.__pair3_.__value_)
  {
    v3 = *p_contexts;
    for (i = *p_contexts + 5;
          ;
          this = (OZFxPlugRenderContextManager *)std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](i, 1))
    {
      v5 = v3[10];
      if (!v5)
        break;
      OZFxPlugRenderContextManager::fullyReleaseContext((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v3[6] + (((unint64_t)(v5 + v3[9] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v5 + v3[9] - 1) & 0x1FF)));
      --v3[10];
    }
    begin_node = (uint64_t *)v1->_contexts.__tree_.__begin_node_;
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(p_contexts, begin_node);
    std::deque<unsigned long>::~deque[abi:ne180100](begin_node + 5);
    operator delete(begin_node);
  }
  PCSpinLock::~PCSpinLock(&v1->_contextLock);
  std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy((uint64_t)p_contexts, (_QWORD *)v1->_contexts.__tree_.__pair1_.__value_.__left_);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v1->_workingColorDescription._pcColorDesc._colorSpaceRef._obj);
}

{
  OZFxPlugRenderContextManager::~OZFxPlugRenderContextManager(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZFxPlugRenderContextManager::fullyReleaseContext(uint64_t a1, uint64_t a2)
{
  LiAgent *v3;
  uint64_t v4;
  PCSharedCount v6;
  PCSharedCount v7;

  *(_QWORD *)(a2 + 72) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v3 = *(LiAgent **)(a2 + 32);
    if (v3)
    {
      LiAgent::~LiAgent(v3);
      MEMORY[0x1B5E29170]();
    }
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a2 + 40) = 0;
  }
  *(_QWORD *)(a2 + 40) = 0;
  PCSharedCount::PCSharedCount(&v6);
  *(_QWORD *)(a2 + 16) = 0;
  PCSharedCount::PCSharedCount(&v7, &v6);
  PCSharedCount::operator=((uint64_t *)(a2 + 24), (uint64_t *)&v7);
  PCSharedCount::~PCSharedCount(&v7);
  PCSharedCount::~PCSharedCount(&v6);
  std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)(a2 + 288));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
}

void sub_1B2F57640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setWorkingColorDescription(OZFxPlugRenderContextManager *this, const FxColorDescription *a2)
{
  PCSpinLock *p_contextLock;
  uint64_t v5;

  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  PCCFRef<CGColorSpace *>::operator=(&this->_workingColorDescription._pcColorDesc._colorSpaceRef._obj, &a2->_pcColorDesc._colorSpaceRef._obj);
  v5 = *(_QWORD *)&a2->_pcColorDesc._dynamicRange;
  this->_workingColorDescription._pcColorDesc._toneMapMethod._gain = a2->_pcColorDesc._toneMapMethod._gain;
  *(_QWORD *)&this->_workingColorDescription._pcColorDesc._dynamicRange = v5;
  this->_workingColorDescription._isPremultiplied = a2->_isPremultiplied;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B2F576FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setBlendingGamma(OZFxPlugRenderContextManager *this, float a2)
{
  PCSpinLock *p_contextLock;

  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  this->_blendingGamma = a2;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void OZFxPlugRenderContextManager::setThreadInfo(uint64_t a1, const PCSharedCount *a2, LiRenderParameters **a3, const OZRenderParams *a4)
{
  pthread_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  OZRenderParams *v19;
  uint64_t v20;
  const FxColorDescription *WorkingColorDescription;
  float BlendingGamma;
  uint64_t *v23;
  OZRenderParams *v24;
  uint64_t **v25;
  uint64_t v26;
  LiAgent *v27;
  uint64_t *RenderDevice;
  uint64_t v29;
  pthread_t v30;
  os_unfair_lock_t lock;
  PCSharedCount v32;

  lock = (os_unfair_lock_t)(a1 + 72);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 72));
  v8 = pthread_self();
  v30 = v8;
  v11 = *(_QWORD **)(a1 + 56);
  v10 = (_QWORD *)(a1 + 56);
  v9 = v11;
  if (!v11)
    goto LABEL_17;
  v12 = v10;
  do
  {
    v13 = v9[4];
    v14 = v13 >= (unint64_t)v8;
    if (v13 >= (unint64_t)v8)
      v15 = v9;
    else
      v15 = v9 + 1;
    if (v14)
      v12 = v9;
    v9 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v12 != v10 && (unint64_t)v8 >= v12[4] && (v16 = v12[10]) != 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v12[6] + (((unint64_t)(v16 + v12[9] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v16 + v12[9] - 1) & 0x1FF));
    v29 = v17;
    ++*(_DWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 64);
    if (a4)
    {
      if (v18)
      {
        OZRenderParams::~OZRenderParams(*(OZRenderParams **)(v17 + 64));
        MEMORY[0x1B5E29170]();
      }
      *(_QWORD *)(v17 + 64) = 0;
      v19 = (OZRenderParams *)operator new();
      OZRenderParams::OZRenderParams(v19, a4);
      *(_QWORD *)(v17 + 64) = v19;
    }
    else if (v18 && !*(_QWORD *)HGRenderJob::GetRenderNodeList(*(HGRenderJob **)(v17 + 64)))
    {
      RenderDevice = (uint64_t *)LiAgent::getRenderDevice(a3);
      OZRenderParams::setRenderDevice(v18, RenderDevice);
    }
  }
  else
  {
LABEL_17:
    v20 = operator new();
    WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription(a4);
    BlendingGamma = OZRenderParams::getBlendingGamma(a4);
    v23 = (uint64_t *)LiAgent::getRenderDevice(a3);
    OZFxPlugRenderContext::OZFxPlugRenderContext(v20, WorkingColorDescription, v23, BlendingGamma);
    v29 = v20;
    *(_DWORD *)(v20 + 8) = 1;
    *(_QWORD *)(v20 + 40) = 0;
    v24 = (OZRenderParams *)operator new();
    OZRenderParams::OZRenderParams(v24, a4);
    *(_QWORD *)(v20 + 64) = v24;
    v32.var0 = (PC_Sp_counted_base *)&v30;
    v25 = std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)v10 - 1, (unint64_t *)&v30, (uint64_t)&std::piecewise_construct, &v32);
    std::deque<OZFxPlugRenderContext *>::push_back(v25 + 5, &v29);
    v17 = v29;
  }
  *(PCSharedCount *)(v17 + 16) = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount(&v32, a2 + 1);
  PCSharedCount::operator=((uint64_t *)(v17 + 24), (uint64_t *)&v32);
  PCSharedCount::~PCSharedCount(&v32);
  v26 = v29;
  v27 = *(LiAgent **)(v29 + 32);
  if (v27 && *(_BYTE *)(v29 + 48))
  {
    LiAgent::~LiAgent(v27);
    MEMORY[0x1B5E29170]();
    v26 = v29;
    *(_QWORD *)(v29 + 32) = 0;
  }
  *(_QWORD *)(v26 + 32) = a3;
  *(_BYTE *)(v26 + 48) = 0;
  *(_BYTE *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 52) = 0;
  if (lock)
    PCSpinLock::unlock(lock);
}

void sub_1B2F579E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_s *a12, uint64_t a13, PCSharedCount a14)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a12);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugRenderContextManager::getCurrentTemporalContext(OZFxPlugRenderContextManager *this)
{
  pthread_t v2;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> *left;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> *p_pair1;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> *v5;
  unint64_t v6;
  BOOL v7;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> **v8;
  void *v9;
  uint64_t v10;
  LiHelium *ThreadLocalDevice;
  uint64_t **v12;
  uint64_t v13;
  char *v14;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> *v15;
  unint64_t v16;
  BOOL v17;
  void **v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  pthread_t v33;

  v2 = pthread_self();
  v33 = v2;
  p_pair1 = &this->_contexts.__tree_.__pair1_;
  left = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> *)this->_contexts.__tree_.__pair1_.__value_.__left_;
  if (!left)
    goto LABEL_14;
  v5 = &this->_contexts.__tree_.__pair1_;
  do
  {
    v6 = (unint64_t)left[4].__value_.__left_;
    v7 = v6 >= (unint64_t)v2;
    if (v6 >= (unint64_t)v2)
      v8 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> **)left;
    else
      v8 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> **)&left[1];
    if (v7)
      v5 = left;
    left = *v8;
  }
  while (*v8);
  if (v5 != p_pair1 && v2 >= v5[4].__value_.__left_)
  {
    v9 = v5[10].__value_.__left_;
    if (v9)
      return *(_QWORD *)(*(_QWORD *)((char *)v5[6].__value_.__left_
                                   + ((((unint64_t)v9 + (unint64_t)v5[9].__value_.__left_ - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (((unint64_t)v9 + (unint64_t)v5[9].__value_.__left_ - 1) & 0x1FF));
  }
LABEL_14:
  ThreadLocalDevice = (LiHelium *)getThreadLocalDevice(&v32);
  if (!(_QWORD)v32)
  {
    LiHelium::getDefaultGPU(ThreadLocalDevice, &v31);
    v24 = v31;
    v31 = 0uLL;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    v32 = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  *(_QWORD *)&v31 = &v33;
  v12 = std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)&this->_contexts, (unint64_t *)&v33, (uint64_t)&std::piecewise_construct, (_QWORD **)&v31);
  v13 = operator new();
  OZFxPlugRenderContext::OZFxPlugRenderContext(v13, &this->_workingColorDescription, (uint64_t *)&v32, this->_blendingGamma);
  *(_QWORD *)&v31 = v13;
  std::deque<OZFxPlugRenderContext *>::push_back(v12 + 5, &v31);
  v14 = (char *)p_pair1->__value_.__left_;
  if (!p_pair1->__value_.__left_)
    goto LABEL_26;
  v15 = &this->_contexts.__tree_.__pair1_;
  do
  {
    v16 = *((_QWORD *)v14 + 4);
    v17 = v16 >= (unint64_t)v33;
    if (v16 >= (unint64_t)v33)
      v18 = (void **)v14;
    else
      v18 = (void **)(v14 + 8);
    if (v17)
      v15 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *, std::stack<OZFxPlugRenderContext *>>, void *>>> *)v14;
    v14 = (char *)*v18;
  }
  while (*v18);
  if (v15 == p_pair1 || v33 < v15[4].__value_.__left_)
LABEL_26:
    v15 = &this->_contexts.__tree_.__pair1_;
  v19 = (unint64_t)v15[10].__value_.__left_ + (unint64_t)v15[9].__value_.__left_ - 1;
  v10 = *(_QWORD *)(*(_QWORD *)((char *)v15[6].__value_.__left_ + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v19 & 0x1FF));
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v10;
}

void sub_1B2F57C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *getThreadLocalDevice@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  getThreadLocalDeviceInstance();
  result = PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::getValuePtr(getThreadLocalDeviceInstance(void)::instance);
  v3 = result[1];
  *a1 = *result;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void OZFxPlugRenderContextManager::createTemporalContext(uint64_t a1, uint64_t a2, const void *a3)
{
  OZEffect *v5;
  OZEffect *v6;
  int32x2_t *v7;
  char v8;
  void *v9;
  FxColorDescription *WorkingColorDescription;
  CGColorSpace **CGColorSpace;
  OZImageGenerator *v12;
  OZLiGenerator *v13;
  LiAgent *v14;
  CGColorSpace **v15;
  FxColorDescription v16[44];
  float64x2_t v17;
  PCSharedCount v18;
  PCSharedCount v19;

  PCMakePtr<LiSimpleCamera>((PCSharedCount *)v16);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v18, (const PCSharedCount *)v16);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v16[0]._pcColorDesc._dynamicRange);
  v17 = 0uLL;
  if (!a3
  {
    v7 = (int32x2_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 272))(v9);
    v6 = 0;
    v8 = 1;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = v5;
  v7 = (int32x2_t *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)v5 + 296))(v5);
  v8 = 0;
  if (v7)
LABEL_6:
    v17 = vcvtq_f64_f32(vcvt_f32_s32(v7[43]));
LABEL_7:
  if (!v18.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, float64x2_t *))(*(_QWORD *)v18.var0 + 288))(v18.var0, &v17);
  OZRenderParams::setCamera(*(_QWORD *)(a2 + 64), &v18);
  WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription(*(OZRenderParams **)(a2 + 64));
  CGColorSpace = (CGColorSpace **)FxColorDescription::getCGColorSpace(WorkingColorDescription);
  if (!CGColorSpace)
  {
    CGColorSpace = (CGColorSpace **)(*(uint64_t (**)(const void *))(*(_QWORD *)a3 + 24))(a3);
    if (CGColorSpace)
    {
      CGColorSpace = (CGColorSpace **)(*((uint64_t (**)(CGColorSpace **))*CGColorSpace + 34))(CGColorSpace);
      if (CGColorSpace)
      {
        v15 = *(CGColorSpace ***)(a2 + 64);
        (*((void (**)(FxColorDescription *__return_ptr))*CGColorSpace + 17))(v16);
        OZRenderParams::setWorkingColorDescription(v15, v16);
        CGColorSpace = PCCFRef<CGColorSpace *>::~PCCFRef(&v16[0]._pcColorDesc._colorSpaceRef._obj);
      }
    }
  }
  *(PCSharedCount *)(a2 + 72) = v18;
  *(_BYTE *)(a2 + 206) = GLRenderer::inDesperationMode((GLRenderer *)CGColorSpace);
  OZRenderParams::OZRenderParams((OZRenderParams *)v16, *(const OZRenderParams **)(a2 + 64));
  if ((v8 & 1) != 0)
  {
    v13 = (OZLiGenerator *)operator new();
    OZLiGenerator::OZLiGenerator(v13, v12, (const OZRenderParams *)v16);
  }
  else
  {
    v13 = (OZLiGenerator *)operator new();
    OZLiHeFilter::OZLiHeFilter(v13, v6, (const OZRenderParams *)v16, 0);
  }
  *(_QWORD *)(a2 + 40) = v13;
  v14 = (LiAgent *)operator new();
  LiAgent::LiAgent(v14, *(LiImageSource **)(a2 + 40), (const LiRenderParameters *)(a2 + 72));
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 48) = 1;
  OZRenderParams::~OZRenderParams((OZRenderParams *)v16);
  PCSharedCount::~PCSharedCount(&v19);
}

void sub_1B2F57F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  uint64_t v9;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugRenderContextManager::getAgent(OZFxPlugRenderContextManager *this, OZFxPlugSharedBase *a2)
{
  PCSpinLock *p_contextLock;
  PGPerThreadSetCurrentContextSentry *CurrentTemporalContext;
  uint64_t v6;
  int v7;
  PGPerThreadSetCurrentContextSentry *v8;
  uint64_t v9;
  uint64_t *RenderDevice;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  PCSpinLock *v30;

  p_contextLock = &this->_contextLock;
  v30 = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  CurrentTemporalContext = (PGPerThreadSetCurrentContextSentry *)OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  v6 = (uint64_t)CurrentTemporalContext;
  v7 = *((_DWORD *)CurrentTemporalContext + 83);
  *((_DWORD *)CurrentTemporalContext + 83) = v7 + 1;
  if (!v7)
  {
    v8 = (PGPerThreadSetCurrentContextSentry *)operator new();
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry(v8);
    CurrentTemporalContext = std::unique_ptr<PGPerThreadSetCurrentContextSentry>::reset[abi:ne180100]((PGPerThreadSetCurrentContextSentry **)(v6 + 336), v8);
  }
  if (!*(_QWORD *)(v6 + 32))
    OZFxPlugRenderContextManager::createTemporalContext((uint64_t)CurrentTemporalContext, v6, a2);
  if (!*(_BYTE *)(v6 + 48))
    goto LABEL_8;
  if (*(_QWORD *)(v6 + 288))
  {
    ++*(_DWORD *)(v6 + 52);
LABEL_8:
    v9 = *(_QWORD *)(v6 + 32);
LABEL_9:
    PCSpinLock::unlock(&p_contextLock->_lock);
    return v9;
  }
  RenderDevice = (uint64_t *)LiRenderParameters::getRenderDevice((LiRenderParameters *)(v6 + 72));
  v18 = (std::__shared_weak_count *)RenderDevice[1];
  v28 = *RenderDevice;
  v29 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  PGHelium::acquireRenderer(&v28, v12, v13, v14, v15, v16, v17, &v27);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v6 + 288, &v27);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  LiRenderParameters::setHeliumRenderer(v6 + 72, *(HGRenderer **)(v6 + 288));
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  p_contextLock = v30;
  ++*(_DWORD *)(v6 + 52);
  v9 = *(_QWORD *)(v6 + 32);
  if (p_contextLock)
    goto LABEL_9;
  return v9;
}

void sub_1B2F581D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va1);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::returnAgent(OZFxPlugRenderContextManager *this)
{
  PCSpinLock *p_contextLock;
  uint64_t CurrentTemporalContext;
  uint64_t v4;
  int v5;
  int v6;

  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  CurrentTemporalContext = OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  v4 = CurrentTemporalContext;
  if (*(_BYTE *)(CurrentTemporalContext + 48))
  {
    v5 = *(_DWORD *)(CurrentTemporalContext + 52) - 1;
    *(_DWORD *)(CurrentTemporalContext + 52) = v5;
    if (!v5)
    {
      LiRenderParameters::setHeliumRenderer(CurrentTemporalContext + 72, 0);
      std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)(v4 + 288));
    }
  }
  v6 = *(_DWORD *)(v4 + 332) - 1;
  *(_DWORD *)(v4 + 332) = v6;
  if (!v6)
    std::unique_ptr<PGPerThreadSetCurrentContextSentry>::reset[abi:ne180100]((PGPerThreadSetCurrentContextSentry **)(v4 + 336), 0);
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B2F582BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

PGPerThreadSetCurrentContextSentry *std::unique_ptr<PGPerThreadSetCurrentContextSentry>::reset[abi:ne180100](PGPerThreadSetCurrentContextSentry **a1, PGPerThreadSetCurrentContextSentry *a2)
{
  PGPerThreadSetCurrentContextSentry *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t OZFxPlugRenderContextManager::getRenderParams(OZFxPlugRenderContextManager *this, OZFxPlugSharedBase *a2)
{
  PCSpinLock *p_contextLock;
  uint64_t CurrentTemporalContext;
  uint64_t v6;
  uint64_t v7;

  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  CurrentTemporalContext = OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  v6 = CurrentTemporalContext;
  if (!*(_QWORD *)(CurrentTemporalContext + 32))
    OZFxPlugRenderContextManager::createTemporalContext(CurrentTemporalContext, CurrentTemporalContext, a2);
  v7 = *(_QWORD *)(v6 + 64);
  PCSpinLock::unlock(&p_contextLock->_lock);
  return v7;
}

void sub_1B2F58380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setHandlingOSCEvent(OZFxPlugRenderContextManager *this, char a2)
{
  PCSpinLock *p_contextLock;

  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  *(_BYTE *)(OZFxPlugRenderContextManager::getCurrentTemporalContext(this) + 56) = a2;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B2F583EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t OZFxPlugRenderContextManager::getImageList(OZFxPlugRenderContextManager *this)
{
  PCSpinLock *p_contextLock;
  uint64_t CurrentTemporalContext;

  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  CurrentTemporalContext = OZFxPlugRenderContextManager::getCurrentTemporalContext(this);
  PCSpinLock::unlock(&p_contextLock->_lock);
  return CurrentTemporalContext + 304;
}

void sub_1B2F58450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::setIsRendering(OZFxPlugRenderContextManager *this, char a2)
{
  PCSpinLock *p_contextLock;

  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  *(_BYTE *)(OZFxPlugRenderContextManager::getCurrentTemporalContext(this) + 328) = a2;
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B2F584BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

BOOL OZFxPlugRenderContextManager::isRendering(OZFxPlugRenderContextManager *this)
{
  OZFxPlugRenderContextManager *v1;
  PCSpinLock *p_contextLock;

  v1 = this;
  p_contextLock = &this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  LODWORD(v1) = *(unsigned __int8 *)(OZFxPlugRenderContextManager::getCurrentTemporalContext(v1) + 328);
  PCSpinLock::unlock(&p_contextLock->_lock);
  return (_DWORD)v1 != 0;
}

void sub_1B2F58524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::pushContext(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  LiHelium *ThreadLocalDevice;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  OZRenderParams *v9;
  uint64_t v10;
  OZRenderParams *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  __int128 v27;
  __int128 v28;
  pthread_t v29;
  os_unfair_lock_t lock;

  lock = (os_unfair_lock_t)(a1 + 72);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 72));
  v29 = pthread_self();
  *(_QWORD *)&v28 = &v29;
  v4 = std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)(a1 + 48), (unint64_t *)&v29, (uint64_t)&std::piecewise_construct, (_QWORD **)&v28);
  ThreadLocalDevice = (LiHelium *)getThreadLocalDevice(&v28);
  if ((_QWORD)v28)
    goto LABEL_2;
  if (a2 == 1)
  {
    LiHelium::getDefaultGPU(ThreadLocalDevice, &v27);
    v15 = v27;
    v27 = 0uLL;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    v28 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_32;
    }
  }
  else
  {
    HGComputeDeviceManager::GetCPUComputeDevice(ThreadLocalDevice, &v27);
    v22 = v27;
    v27 = 0uLL;
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    v28 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v21 = __ldaxr(v26);
      while (__stlxr(v21 - 1, v26));
LABEL_32:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
LABEL_2:
  v6 = operator new();
  OZFxPlugRenderContext::OZFxPlugRenderContext(v6, (const FxColorDescription *)(a1 + 8), (uint64_t *)&v28, *(float *)(a1 + 40));
  *(_QWORD *)&v27 = v6;
  v7 = v4[10];
  if (v7)
  {
    v8 = *(_QWORD *)(*(uint64_t *)((char *)v4[6]
                                + ((((unint64_t)v4[9] + (_QWORD)v7 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (((uint64_t)v4[9] + (_QWORD)v7 - 1) & 0x1FF));
    v9 = *(OZRenderParams **)(v6 + 64);
    if (v9)
    {
      OZRenderParams::~OZRenderParams(v9);
      MEMORY[0x1B5E29170](v10);
    }
    *(_QWORD *)(v6 + 64) = 0;
    v11 = (OZRenderParams *)operator new();
    OZRenderParams::OZRenderParams(v11, *(const OZRenderParams **)(v8 + 64));
    *(_QWORD *)(v6 + 64) = v11;
  }
  std::deque<OZFxPlugRenderContext *>::push_back(v4 + 5, &v27);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (lock)
    PCSpinLock::unlock(lock);
}

void sub_1B2F587A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va1);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::pushContext(uint64_t a1, const OZRenderParams *a2, uint64_t a3)
{
  uint64_t **v6;
  LiHelium *ThreadLocalDevice;
  uint64_t v8;
  OZRenderParams *v9;
  uint64_t v10;
  OZRenderParams *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  __int128 v27;
  __int128 v28;
  pthread_t v29;
  os_unfair_lock_t lock;

  lock = (os_unfair_lock_t)(a1 + 72);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 72));
  v29 = pthread_self();
  *(_QWORD *)&v28 = &v29;
  v6 = std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)(a1 + 48), (unint64_t *)&v29, (uint64_t)&std::piecewise_construct, (_QWORD **)&v28);
  ThreadLocalDevice = (LiHelium *)getThreadLocalDevice(&v28);
  if ((_QWORD)v28)
    goto LABEL_2;
  if (a3 == 1)
  {
    LiHelium::getDefaultGPU(ThreadLocalDevice, &v27);
    v15 = v27;
    v27 = 0uLL;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    v28 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_30;
    }
  }
  else
  {
    HGComputeDeviceManager::GetCPUComputeDevice(ThreadLocalDevice, &v27);
    v22 = v27;
    v27 = 0uLL;
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    v28 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v21 = __ldaxr(v26);
      while (__stlxr(v21 - 1, v26));
LABEL_30:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
LABEL_2:
  v8 = operator new();
  OZFxPlugRenderContext::OZFxPlugRenderContext(v8, (const FxColorDescription *)(a1 + 8), (uint64_t *)&v28, *(float *)(a1 + 40));
  *(_QWORD *)&v27 = v8;
  v9 = *(OZRenderParams **)(v8 + 64);
  if (v9)
  {
    OZRenderParams::~OZRenderParams(v9);
    MEMORY[0x1B5E29170](v10);
  }
  *(_QWORD *)(v8 + 64) = 0;
  v11 = (OZRenderParams *)operator new();
  OZRenderParams::OZRenderParams(v11, a2);
  *(_QWORD *)(v8 + 64) = v11;
  std::deque<OZFxPlugRenderContext *>::push_back(v6 + 5, &v27);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (lock)
    PCSpinLock::unlock(lock);
}

void sub_1B2F58A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va1);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextManager::popContext(OZFxPlugRenderContextManager *this)
{
  PCSpinLock *p_contextLock;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6[2];
  unint64_t *v7;

  p_contextLock = &this->_contextLock;
  v6[1] = (unint64_t)&this->_contextLock;
  PCSpinLock::lock(&this->_contextLock._lock);
  v6[0] = (unint64_t)pthread_self();
  v7 = v6;
  v3 = std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>((uint64_t **)&this->_contexts, v6, (uint64_t)&std::piecewise_construct, &v7);
  v4 = (uint64_t)v3[10] - 1;
  v5 = *(_QWORD *)(*(uint64_t *)((char *)v3[6] + ((((unint64_t)v3[9] + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * (((unint64_t)v3[9] + v4) & 0x1FF));
  v3[10] = (uint64_t *)v4;
  std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v3 + 5, 1);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PCSpinLock::unlock(&p_contextLock->_lock);
}

void sub_1B2F58B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void OZFxPlugRenderContextSentinel::OZFxPlugRenderContextSentinel(id **a1, id *a2, OZFxPlugRenderContextSentinel *this, uint64_t a4)
{
  uint64_t *RenderNodeList;
  _QWORD *ValuePtr;
  uint64_t v10;
  uint64_t v11;
  OZFxPlugRenderContextManager *v12;
  const FxColorDescription *WorkingColorDescription;
  float BlendingGamma;

  RenderNodeList = (uint64_t *)HGRenderJob::GetRenderNodeList((HGRenderJob *)this);
  getThreadLocalDeviceInstance();
  ValuePtr = PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::getValuePtr(getThreadLocalDeviceInstance(void)::instance);
  std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>(ValuePtr, RenderNodeList);
  *a1 = a2;
  v10 = (*((uint64_t (**)(id *))*a2 + 3))(a2);
  v11 = objc_msgSend(a2[4], "contextManager");
  if (v11)
  {
    v12 = (OZFxPlugRenderContextManager *)v11;
    if (v10)
    {
      WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription(this);
      OZFxPlugRenderContextManager::setWorkingColorDescription(v12, WorkingColorDescription);
      BlendingGamma = OZRenderParams::getBlendingGamma(this);
      OZFxPlugRenderContextManager::setBlendingGamma(v12, BlendingGamma);
    }
    OZFxPlugRenderContextManager::pushContext((uint64_t)v12, a4);
  }
}

void OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel(OZFxPlugRenderContextSentinel *this)
{
  OZFxPlugRenderContextManager *v1;
  _QWORD *ValuePtr;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v1 = (OZFxPlugRenderContextManager *)objc_msgSend(*(id *)(*(_QWORD *)this + 32), "contextManager");
  if (v1)
    OZFxPlugRenderContextManager::popContext(v1);
  v6 = 0;
  v7 = 0;
  getThreadLocalDeviceInstance();
  ValuePtr = PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::getValuePtr(getThreadLocalDeviceInstance(void)::instance);
  std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>(ValuePtr, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void OZFxRenderContextAgentSentry::OZFxRenderContextAgentSentry(OZFxRenderContextAgentSentry *this, OZFxPlugRenderContextManager *a2)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
}

uint64_t OZFxRenderContextAgentSentry::getAgent(OZFxPlugRenderContextManager **this, OZFxPlugSharedBase *a2)
{
  OZFxPlugRenderContextManager *v2;

  v2 = *this;
  this[1] = (OZFxPlugRenderContextManager *)((char *)this[1] + 1);
  return OZFxPlugRenderContextManager::getAgent(v2, a2);
}

void OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry(OZFxPlugRenderContextManager **this)
{
  uint64_t v2;

  if ((uint64_t)this[1] >= 1)
  {
    v2 = 0;
    do
    {
      OZFxPlugRenderContextManager::returnAgent(*this);
      ++v2;
    }
    while (v2 < (uint64_t)this[1]);
  }
}

void OZFxPlugRenderContext::~OZFxPlugRenderContext(OZFxPlugRenderContext *this)
{
  OZFxPlugRenderContext::~OZFxPlugRenderContext(this);
  JUMPOUT(0x1B5E29170);
}

{
  OZRenderParams *v2;
  LiAgent *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &unk_1E65C16D8;
  v2 = (OZRenderParams *)*((_QWORD *)this + 8);
  if (v2)
  {
    OZRenderParams::~OZRenderParams(v2);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 8) = 0;
  if (*((_BYTE *)this + 48))
  {
    v3 = (LiAgent *)*((_QWORD *)this + 4);
    if (v3)
    {
      LiAgent::~LiAgent(v3);
      MEMORY[0x1B5E29170]();
    }
    *((_QWORD *)this + 4) = 0;
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 5) = 0;
  }
  std::unique_ptr<PGPerThreadSetCurrentContextSentry>::reset[abi:ne180100]((PGPerThreadSetCurrentContextSentry **)this + 42, 0);
  v7 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 29);
  *((_QWORD *)this + 13) = &unk_1E64FC2F8;
  if (*((int *)this + 28) < 0)
    v5 = 1;
  else
    v5 = *((_DWORD *)this + 28);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 104, 0, v5);
  v6 = *((_QWORD *)this + 15);
  if (v6)
    MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 28) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 12);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 3);
}

void getThreadLocalDeviceInstance(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::PCThreadLocalValue(getThreadLocalDeviceInstance(void)::instance);
      __cxa_atexit((void (*)(void *))PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::~PCThreadLocalValue, getThreadLocalDeviceInstance(void)::instance, &dword_1B2737000);
    }
  }
}

void sub_1B2F58E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::~PCThreadLocalValue(uint64_t a1)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

pthread_key_t *PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::PCThreadLocalValue(pthread_key_t *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  pthread_key_create(a1, (void (__cdecl *)(void *))PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::destroy);
  return a1;
}

void sub_1B2F58E80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::destroy(uint64_t result)
{
  if (result)
  {
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

_QWORD *PCThreadLocalValue<std::shared_ptr<HGComputeDevice const>>::getValuePtr(pthread_key_t *a1)
{
  _QWORD *v2;
  pthread_key_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = (_QWORD *)operator new();
    v3 = a1[2];
    *v2 = a1[1];
    v2[1] = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

void std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::destroy(a1, a2[1]);
    std::deque<unsigned long>::~deque[abi:ne180100](a2 + 5);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::__map_value_compare<_opaque_pthread_t *,std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,std::less<_opaque_pthread_t *>,true>,std::allocator<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_QWORD *)v12 + 4) = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_opaque_pthread_t *,std::stack<OZFxPlugRenderContext *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::deque<unsigned long>::~deque[abi:ne180100](v2 + 5);
    operator delete(v2);
  }
}

void std::deque<OZFxPlugRenderContext *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZFxPlugRenderContext *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZFxPlugRenderContext *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2F59400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void OZFxPlugSharedLock::OZFxPlugSharedLock(OZFxPlugSharedLock *this, OZFxPlugSharedBase *a2)
{
  *(_QWORD *)this = a2;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)((char *)this + 8));
}

void OZFxPlugSharedLock::~OZFxPlugSharedLock(OZFxPlugSharedLock *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 8);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8));
  *(_QWORD *)this = 0;
  PCSharedMutex::unlock(v2);
  PCSharedMutex::~PCSharedMutex(v2);
}

void OZFxPlugSharedLock::reset(OZFxPlugSharedLock *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 8);
  PCSharedMutex::lock((std::mutex *)((char *)this + 8));
  *(_QWORD *)this = 0;
  PCSharedMutex::unlock(v2);
}

void OZLiFilter::~OZLiFilter(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;
  __CFString *v5;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  v5 = a2[1].var0;
  this->var0 = (PC_Sp_counted_base *)v5;
  *(__CFString **)((char *)this + v5[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

void OZLiHeFilter::OZLiHeFilter(OZLiHeFilter *this, OZEffect *a2, const OZRenderParams *a3, char a4)
{
  void *v8;
  void (**v9)(OZLiHeFilter *__hidden);
  __int128 v10;
  uint64_t v11;

  *((_QWORD *)this + 186) = &off_1E65EB048;
  *((_QWORD *)this + 187) = 0;
  *((_BYTE *)this + 1504) = 1;
  OZLiFilter::OZLiFilter(this, (OZEffect *)&off_1E65C1848, a2, a3, a4);
  *(_QWORD *)this = &off_1E65C1740;
  *((_QWORD *)this + 186) = &unk_1E65C1828;
  *((_QWORD *)this + 185) = 0;
  if (!a2)
  {
    if ((a4 & 1) == 0)
      return;
    goto LABEL_7;
  }
  if ((a4 & 1) != 0)
  {
LABEL_7:
    v9 = &off_1E65C1740;
    goto LABEL_8;
  }
  if (v8)
  {
    v10 = *(_OWORD *)a3;
    v11 = *((_QWORD *)a3 + 2);
    if ((*(unsigned int (**)(void *, __int128 *))(*(_QWORD *)v8 + 808))(v8, &v10))
    {
      v9 = *(void (***)(OZLiHeFilter *__hidden))this;
LABEL_8:
      ((void (*)(OZLiHeFilter *, uint64_t))v9[11])(this, 2);
    }
  }
}

void sub_1B2F5978C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 1480);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  OZLiFilter::~OZLiFilter((PCSharedCount *)v1, (const PCString *)&off_1E65C1848);
  *(_QWORD *)(v1 + 1488) = v2 + 16;
  *(_BYTE *)(v1 + 1504) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1496));
  _Unwind_Resume(a1);
}

void OZLiHeFilter::clone(OZLiHeFilter *this@<X0>, PCSharedCount *a2@<X8>)
{
  OZLiHeFilter *v4;
  LiImageFilter *v5;
  PCSharedCount v6;

  v4 = (OZLiHeFilter *)operator new();
  OZLiHeFilter::OZLiHeFilter(v4, *((OZEffect **)this + 5), (OZLiHeFilter *)((char *)this + 56), *((_BYTE *)this + 48));
  v5 = v4;
  PCSharedCount::PCSharedCount(&v6, (OZLiHeFilter *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  LiImageFilter::copyFrom((PCSharedCount *)v4, (const PCSharedCount *)this);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, (const PCSharedCount *)&v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2F59888(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4014CFE41ALL);
  _Unwind_Resume(a1);
}

void OZLiHeFilter::getHelium(OZLiHeFilter *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  PCSharedCount v13;

  v5 = *((_QWORD *)this + 185);
  if (v5)
  {
    *a3 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = *((_QWORD *)this + 5);
    v12 = *((_QWORD *)this + 2);
    PCSharedCount::PCSharedCount(&v13, (const PCSharedCount *)this + 3);
    v10 = *(_OWORD *)((char *)this + 56);
    v11 = *((_QWORD *)this + 9);
    (*(void (**)(uint64_t, LiAgent *, uint64_t *, __int128 *, char *))(*(_QWORD *)v7 + 224))(v7, a2, &v12, &v10, (char *)this + 56);
    PCSharedCount::~PCSharedCount(&v13);
    if (*((_BYTE *)this + 12))
    {
      v8 = *((_QWORD *)this + 185);
      v9 = *a3;
      if (v8 != *a3)
      {
        if (v8)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v8 + 24))(*((_QWORD *)this + 185));
          v9 = *a3;
        }
        *((_QWORD *)this + 185) = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      }
    }
  }
}

void sub_1B2F599C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t OZLiHeFilter::pixelTransformSupport(OZLiHeFilter *this, const LiRenderParameters *a2)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v3 = OZLiFilter::pixelTransformSupport(this, a2);
  v4 = *((_QWORD *)this + 5);
  v12 = *(_OWORD *)((char *)this + 56);
  v13 = *((_QWORD *)this + 9);
  v5 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 656))(v4, &v12);
  v6 = *((_QWORD *)this + 5);
  v10 = *(_OWORD *)((char *)this + 56);
  v11 = *((_QWORD *)this + 9);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 664))(v6, &v10);
  if ((v5 & 1) != 0)
    return 6;
  if (v3 < 3)
    v9 = v7;
  else
    v9 = 0;
  if ((v9 & 1) != 0)
    return 3;
  if (v3)
    return v3;
  return 2;
}

void OZLiHeFilter::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double fixed;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  char v16;
  double v17;
  double v18;
  float64x2_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  OZScene *v29;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  uint64_t i;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  float64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  CMTime v50;
  float64x2_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  fixed = LiImageSource::fixPixelTransform(a1, a2, a3, a4);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a4, fixed);
  if (v9 > 4)
    return;
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
  else
    v12 = 0;
  v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 248))(v11);
  v14 = v13;
  if (v13)
  {
    if (!v12)
      goto LABEL_11;
  }
  else
  {
    v15 = 0;
    if (!v12)
      goto LABEL_11;
  }
  v53 = *(_OWORD *)(a1 + 56);
  v54 = *(_QWORD *)(a1 + 72);
  v16 = (*(uint64_t (**)(uint64_t, __int128 *))(*((_QWORD *)v12 + 46) + 128))((uint64_t)v12 + 368, &v53);
  if (v10 >= 3 && (v16 & 1) != 0)
    return;
LABEL_11:
  v51 = 0uLL;
  v52 = 0;
  if (v15)
  {
    (*(void (**)(void *, float64x2_t *, uint64_t, _QWORD))(*(_QWORD *)v15 + 1320))(v15, &v51, a1 + 56, 0);
    v17 = v51.f64[1];
    v18 = v51.f64[0];
    v51.f64[0] = fabs(v51.f64[0]);
    v51.f64[1] = fabs(v51.f64[1]);
    if (!v12)
      goto LABEL_22;
LABEL_15:
    v50 = *(CMTime *)(a1 + 56);
    if ((OZFxPlugSharedBase::doesSupportLargeRenderScale((id *)v12 + 46, &v50) & 1) == 0)
    {
      __asm { FMOV            V1.2D, #1.0 }
      v25 = vminnmq_f64(v51, _Q1);
      v51 = v25;
      if (v25.f64[0] >= -1.0)
        v18 = v25.f64[0];
      else
        v18 = -1.0;
      if (v25.f64[1] >= -1.0)
        v17 = v25.f64[1];
      else
        v17 = -1.0;
    }
    goto LABEL_22;
  }
  __asm { FMOV            V0.2D, #1.0 }
  v51 = _Q0;
  v52 = 0x3FF0000000000000;
  v17 = 1.0;
  v18 = 1.0;
  if (v12)
    goto LABEL_15;
LABEL_22:
  if (v14)
  {
    v26 = v14[1];
    v49 = xmmword_1B3561450;
    if ((OZFactory::isKindOfClass(v26, (int32x4_t *)&v49) & 1) != 0
      || (v27 = v14[1], v48 = xmmword_1B3561460, OZFactory::isKindOfClass(v27, (int32x4_t *)&v48)))
    {
      v28 = (*(uint64_t (**)(_QWORD *))(*v14 + 272))(v14);
      if (v28)
      {
        v29 = (OZScene *)v28;
        OZExportSettings::OZExportSettings((OZExportSettings *)&v38);
        OZScene::getSceneSettings(v29, (OZExportSettings *)&v38);
        if (BYTE4(v41))
        {
          __asm { FMOV            V0.2D, #1.0 }
          v51 = _Q0;
          v52 = 0;
        }
        OZExportSettings::~OZExportSettings((OZExportSettings *)&v38);
      }
    }
  }
  v33.f64[1] = 0.0;
  v39 = 0u;
  v40 = 0u;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  v31 = *(double *)(a1 + 88);
  v32 = v51.f64[0] * *(double *)(a1 + 80);
  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v41 = 1.0;
  v38 = 0x3FF0000000000000;
  v33.f64[0] = v51.f64[1] * v31;
  if (v32 != 1.0)
  {
    v38 = *(_QWORD *)&v32;
    *(double *)&v39 = v32 * 0.0;
    *((double *)&v39 + 1) = v32 * 0.0;
    *(double *)&v40 = v32 * 0.0;
  }
  if (v33.f64[0] != 1.0)
  {
    *((double *)&v40 + 1) = v33.f64[0] * 0.0;
    v41 = v51.f64[1] * v31;
    *(double *)&v42 = v33.f64[0] * 0.0;
    *((double *)&v42 + 1) = v33.f64[0] * 0.0;
  }
  if (v10 >= 3)
  {
    if (*(_BYTE *)(a2 + 44))
    {
      v34 = *(double *)(a3 + 120);
      if (v34 <= -0.0000001 || v34 >= 0.0000001)
      {
        v33.f64[0] = v18 * *(double *)(a3 + 24) / v34;
        PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v38, v33, v17 * *(double *)(a3 + 56) / v34, 0.0);
      }
    }
  }
  if (&v38 != (uint64_t *)a3)
  {
    for (i = 0; i != 128; i += 32)
    {
      v36 = (_OWORD *)(a3 + i);
      v37 = *(__int128 *)((char *)&v39 + i + 8);
      *v36 = *(_OWORD *)((char *)&v38 + i);
      v36[1] = v37;
    }
  }
}

void sub_1B2F59DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZExportSettings::~OZExportSettings((OZExportSettings *)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZLiHeFilter::estimateRenderMemory()
{
  return 0;
}

void OZLiHeFilter::~OZLiHeFilter(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;

  this->var0 = (PC_Sp_counted_base *)&off_1E65C1740;
  this[186].var0 = (PC_Sp_counted_base *)&unk_1E65C1828;
  var0 = this[185].var0;
  if (var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 24))(var0);
  this->var0 = (PC_Sp_counted_base *)&off_1E65C18A8;
  this[186].var0 = (PC_Sp_counted_base *)&off_1E65C1990;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  this->var0 = (PC_Sp_counted_base *)off_1E65C19C0;
  this[186].var0 = (PC_Sp_counted_base *)off_1E65C1AA8;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65C1858);
  this[186].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[188].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[187].var0);
}

{
  PC_Sp_counted_base *var0;

  this->var0 = (PC_Sp_counted_base *)&off_1E65C1740;
  this[186].var0 = (PC_Sp_counted_base *)&unk_1E65C1828;
  var0 = this[185].var0;
  if (var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 24))(var0);
  this->var0 = (PC_Sp_counted_base *)&off_1E65C18A8;
  this[186].var0 = (PC_Sp_counted_base *)&off_1E65C1990;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[7]);
  this->var0 = (PC_Sp_counted_base *)off_1E65C19C0;
  this[186].var0 = (PC_Sp_counted_base *)off_1E65C1AA8;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E65C1858);
  this[186].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[188].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[187].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZLiHeFilter::~OZLiHeFilter(OZLiHeFilter *this)
{
  PCSharedCount *v1;
  PC_Sp_counted_base *var0;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65C1740;
  v1[186].var0 = (PC_Sp_counted_base *)&unk_1E65C1828;
  var0 = v1[185].var0;
  if (var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 24))(var0);
  v1->var0 = (PC_Sp_counted_base *)&off_1E65C18A8;
  v1[186].var0 = (PC_Sp_counted_base *)&off_1E65C1990;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[7]);
  v1->var0 = (PC_Sp_counted_base *)off_1E65C19C0;
  v1[186].var0 = (PC_Sp_counted_base *)off_1E65C1AA8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65C1858);
  v1[186].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[188].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[187].var0);
}

{
  PCSharedCount *v1;
  PC_Sp_counted_base *var0;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E65C1740;
  v1[186].var0 = (PC_Sp_counted_base *)&unk_1E65C1828;
  var0 = v1[185].var0;
  if (var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 24))(var0);
  v1->var0 = (PC_Sp_counted_base *)&off_1E65C18A8;
  v1[186].var0 = (PC_Sp_counted_base *)&off_1E65C1990;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[7]);
  v1->var0 = (PC_Sp_counted_base *)off_1E65C19C0;
  v1[186].var0 = (PC_Sp_counted_base *)off_1E65C1AA8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E65C1858);
  v1[186].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[188].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[187].var0);
  JUMPOUT(0x1B5E29170);
}

void OZFxGenerator::OZFxGenerator(OZFxGenerator *this, OZFactory *a2, PCString *a3, unsigned int a4, int a5, char a6)
{
  uint64_t v10;

  OZImageGenerator::OZImageGenerator(this, a2, a3, a4);
  *(_QWORD *)v10 = &off_1E65C1C40;
  *(_QWORD *)(v10 + 16) = &unk_1E65C2598;
  *(_QWORD *)(v10 + 48) = &unk_1E65C27F0;
  *(_QWORD *)(v10 + 6528) = &unk_1E65C2848;
  *(_QWORD *)(v10 + 19384) = &unk_1E65C2920;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v10 + 19384), a3, (OZChannelFolder *)(v10 + 18776), a5, a6);
  *(_QWORD *)this = &off_1E65C1C40;
  *((_QWORD *)this + 2) = &unk_1E65C2598;
  *((_QWORD *)this + 6) = &unk_1E65C27F0;
  *((_QWORD *)this + 816) = &unk_1E65C2848;
  *((_QWORD *)this + 2423) = &unk_1E65C2920;
  *((_BYTE *)this + 19828) = 1;
  if ((a6 & 1) == 0)
    objc_msgSend(*((id *)this + 2427), "addFlipCheckbox:", 10002);
}

void sub_1B2F5A1BC(_Unwind_Exception *a1)
{
  OZImageGenerator *v1;
  OZFxPlugSharedBase *v2;

  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZImageGenerator::~OZImageGenerator(v1);
  _Unwind_Resume(a1);
}

void OZFxGenerator::OZFxGenerator(OZFxGenerator *this, const OZFxGenerator *a2, uint64_t a3)
{
  _QWORD *v5;

  OZImageGenerator::OZImageGenerator(this, a2, a3);
  *v5 = &off_1E65C1C40;
  v5[2] = &unk_1E65C2598;
  v5[6] = &unk_1E65C27F0;
  v5[816] = &unk_1E65C2848;
  *((_QWORD *)this + 2423) = &unk_1E65C2920;
  OZFxPlugSharedBase::OZFxPlugSharedBase((OZFxPlugSharedBase *)(v5 + 2423), (const OZFxGenerator *)((char *)a2 + 19384), (OZChannelFolder *)((char *)this + 18776), 3);
  *(_QWORD *)this = &off_1E65C1C40;
  *((_QWORD *)this + 2) = &unk_1E65C2598;
  *((_QWORD *)this + 6) = &unk_1E65C27F0;
  *((_QWORD *)this + 816) = &unk_1E65C2848;
  *((_QWORD *)this + 2423) = &unk_1E65C2920;
  *((_BYTE *)this + 19828) = 0;
}

void sub_1B2F5A288(_Unwind_Exception *a1)
{
  OZImageGenerator *v1;

  OZImageGenerator::~OZImageGenerator(v1);
  _Unwind_Resume(a1);
}

void OZFxGenerator::~OZFxGenerator(OZFxGenerator *this)
{
  OZFxPlugSharedBase *v2;

  *(_QWORD *)this = &off_1E65C1C40;
  *((_QWORD *)this + 2) = &unk_1E65C2598;
  *((_QWORD *)this + 6) = &unk_1E65C27F0;
  *((_QWORD *)this + 816) = &unk_1E65C2848;
  v2 = (OZFxGenerator *)((char *)this + 19384);
  *((_QWORD *)this + 2423) = &unk_1E65C2920;
  OZFxPlugSharedBase::resetFxLock((OZFxPlugSharedLock **)this + 2423);
  OZFxPlugSharedBase::~OZFxPlugSharedBase(v2);
  OZImageGenerator::~OZImageGenerator(this);
}

{
  OZFxGenerator::~OZFxGenerator(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZFxGenerator::~OZFxGenerator(OZFxGenerator *this)
{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 16));
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 48));
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 6528));
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 19384));
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

{
  OZFxGenerator::~OZFxGenerator((OZFxGenerator *)((char *)this - 19384));
  JUMPOUT(0x1B5E29170);
}

void OZFxGenerator::operator=(PCString *a1, const void *a2)
{
  const PCString *v4;
  PCString v5;

  OZImageGenerator::operator=((uint64_t)a1, a2);
  if (!v4)
    __cxa_bad_cast();
  PCString::PCString(&v5, v4 + 2442);
  OZChannelDoubleOverRange::setRangeName(a1 + 2423, &v5);
  PCString::~PCString(&v5);
}

void sub_1B2F5A47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void OZFxGenerator::updateChannelsForMisbehavingPlugin(id *this)
{
  uint64_t v2;
  uint64_t v3;

  objc_msgSend(this[2427], "softDisableAllChannels");
  v2 = (*((uint64_t (**)(id *))*this + 81))(this);
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2);
    if (v3)
      OZDocument::postNotification(*(OZDocument **)(v3 + 1584), 0x8000);
  }
}

void `non-virtual thunk to'OZFxGenerator::updateChannelsForMisbehavingPlugin(id *this)
{
  OZFxGenerator::updateChannelsForMisbehavingPlugin(this - 2423);
}

uint64_t OZFxGenerator::isEnabled(OZFxGenerator *this, int a2, int a3)
{
  int isEnabled;

  isEnabled = OZObjectManipulator::isEnabled((OZFxGenerator *)((char *)this + 16), a2, a3);
  return isEnabled & OZFxPlugSharedBase::isConnectionValid((OZFxGenerator *)((char *)this + 19384));
}

uint64_t `non-virtual thunk to'OZFxGenerator::isEnabled(OZFxGenerator *this, int a2, int a3)
{
  int isEnabled;

  isEnabled = OZObjectManipulator::isEnabled(this, a2, a3);
  return isEnabled & OZFxPlugSharedBase::isConnectionValid((OZFxGenerator *)((char *)this + 19368));
}

void OZFxGenerator::didAddToScene(OZFxGenerator *this, CMTimeEpoch *a2)
{
  OZScene *v2;
  void *v4;
  uint64_t v5;
  OZFxPlugRenderContextManager *v6;
  float v7;
  OZFxPlugSharedBase *v8;
  void *v9;
  objc_class *v10;
  double v11;
  double v12;
  _BYTE *v13;
  FxColorDescription v14;

  v2 = (OZScene *)a2;
  OZImageGenerator::didAddToScene(this, a2);
  v4 = (void *)*((_QWORD *)this + 2427);
  v5 = objc_msgSend(v4, "contextManager");
  if (v5)
  {
    v6 = (OZFxPlugRenderContextManager *)v5;
    (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(_QWORD *)v2 + 136))(&v14, v2);
    OZFxPlugRenderContextManager::setWorkingColorDescription(v6, &v14);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v14._pcColorDesc._colorSpaceRef._obj);
    v7 = (*(float (**)(OZScene *))(*(_QWORD *)v2 + 144))(v2);
    OZFxPlugRenderContextManager::setBlendingGamma(v6, v7);
  }
  v8 = (OZFxGenerator *)((char *)this + 19384);
  objc_msgSend(v4, "setObjectID");
  OZFxPlugSharedBase::doPostConstructionActions((id *)this + 2423);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (v2)
      v2 = (OZScene *)*((_QWORD *)v2 + 198);
    if (((*(uint64_t (**)(char *))(*(_QWORD *)v8 + 256))((char *)this + 19384) & 1) == 0 && v2)
    {
      OZDocument::addCPPObserver((uint64_t)v2, (uint64_t)this + 19384, 0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 264))((char *)this + 19384, 1);
    }
  }
  v9 = (void *)*((_QWORD *)this + 2426);
  if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 2423) + 272))((char *)this + 19384) & 1) == 0)
  {
    v10 = (objc_class *)objc_opt_class();
    if (v10 == NSClassFromString(CFSTR("PAELensFlareGenerator")))
      (*(void (**)(OZFxGenerator *, uint64_t, _QWORD))(*(_QWORD *)this + 1736))(this, 8, MEMORY[0x1E0CA2E68]);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 280))((char *)this + 19384, 1);
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 19056), MEMORY[0x1E0CA2E68], 0.0);
  v12 = v11;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v13 = (char *)this + 19828;
    if (*v13)
    {
      objc_msgSend(v9, "performSelector:withObject:", sel_initPAEGradientWithHeight_, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12));
      *v13 = 0;
    }
  }
  OZFxPlugSharedBase::finishPluginSetup(v8);
}

void sub_1B2F5A744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZFxGenerator::didFinishLoadingIntoScene(OZElement *this)
{
  OZFxPlugSharedBase *v2;
  uint64_t result;
  const PCString *v4;

  OZElement::didFinishLoadingIntoScene(this);
  v2 = (OZFxPlugSharedBase *)((char *)this + 19384);
  OZFxPlugSharedBase::updateFlipChannel((uint64_t)v2);
  OZFxPlugSharedBase::updateAbsolutePointsChannel(v2);
  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.motionapp"));
  if ((_DWORD)result)
    return OZChannelBase::setRangeName((OZChannelBase *)v2, v4);
  return result;
}

uint64_t `non-virtual thunk to'OZFxGenerator::didFinishLoadingIntoScene(OZFxGenerator *this)
{
  return OZFxGenerator::didFinishLoadingIntoScene((OZElement *)((char *)this - 16));
}

uint64_t OZFxGenerator::didChangeChannelState(OZFxGenerator *this, OZChannelBase *a2)
{
  char *v3;
  OZScene *v4;

  v3 = (char *)this + 19384;
  v4 = (OZScene *)(*(uint64_t (**)(OZFxGenerator *))(*(_QWORD *)this + 272))(this);
  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

uint64_t `non-virtual thunk to'OZFxGenerator::didChangeChannelState(OZFxGenerator *this, OZChannelBase *a2)
{
  char *v3;
  OZScene *v4;

  v3 = (char *)this + 19368;
  v4 = (OZScene *)(*(uint64_t (**)(void))(*((_QWORD *)this - 2) + 272))();
  return OZFxPlugSharedBase::didChangeChannelState((uint64_t)v3, v4, a2);
}

BOOL OZFxGenerator::shouldRenumberChannel(OZFxGenerator *this, OZChannelBase *a2)
{
  unsigned int var3;

  var3 = a2->var3;
  return var3 != 10002
      && var3 != 10005
      && OZObjectManipulator::shouldRenumberChannel((OZFxGenerator *)((char *)this + 16), a2);
}

BOOL `non-virtual thunk to'OZFxGenerator::shouldRenumberChannel(OZFxGenerator *this, OZChannelBase *a2)
{
  unsigned int var3;

  var3 = a2->var3;
  return var3 != 10002 && var3 != 10005 && OZObjectManipulator::shouldRenumberChannel(this, a2);
}

uint64_t OZFxGenerator::willRemoveFromScene(OZFxGenerator *this, OZScene *a2)
{
  uint64_t result;

  OZSceneNode::willRemoveFromScene((uint64_t)this, (uint64_t)a2);
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2423) + 256))((char *)this + 19384);
  if (a2 && (_DWORD)result)
  {
    result = *((_QWORD *)a2 + 198);
    if (result)
    {
      OZDocument::removeCPPObserver(result);
      return (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)this + 2423) + 264))((char *)this + 19384, 0);
    }
  }
  return result;
}

BOOL OZFxGenerator::canChanRefBeSetTo(OZFxGenerator *this, const OZChanObjectManipRef *a2, const OZObjectManipulator *lpsrc)
{
  OZImageElement *v3;

  if (!lpsrc)
    return 1;
  return !v3 || !OZImageElement::isEffectSource(v3);
}

uint64_t OZFxGenerator::calcHashForState(_QWORD *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  void *v8;
  BOOL v9;
  __int128 v11;
  uint64_t v12;

  v8 = (void *)a1[2426];
  if (a1[2427])
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9 && a1[2430] && objc_msgSend(v8, "variesOverTime"))
  {
    v12 = *((_QWORD *)a3 + 2);
    v11 = *a3;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v11);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, __int128 *, uint64_t, uint64_t))(*a1 + 536))(a1, a2, a3, a4, 1);
}

uint64_t `non-virtual thunk to'OZFxGenerator::calcHashForState(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  return OZFxGenerator::calcHashForState((_QWORD *)(a1 - 16), a2, a3, a4);
}

uint64_t OZFxGenerator::variesOverTime(OZFxGenerator *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2426);
  if (v2)
    return objc_msgSend(v2, "variesOverTime");
  else
    return OZImageGenerator::variesOverTime(this);
}

uint64_t `non-virtual thunk to'OZFxGenerator::variesOverTime(id *this)
{
  if (this[3])
    return objc_msgSend(this[3], "variesOverTime");
  else
    return OZImageGenerator::variesOverTime((OZImageGenerator *)(this - 2423));
}

uint64_t OZFxGenerator::getInternalName(OZFxGenerator *this)
{
  if (*((_QWORD *)this + 2352))
    return *((_QWORD *)this + 2352);
  else
    return (uint64_t)this + 18808;
}

void OZFxGenerator::setInternalName(OZFxGenerator *this, const PCString *a2)
{
  OZChannelBase::setInternalName((OZChannelBase *)((char *)this + 18776), a2);
}

uint64_t OZFxGenerator::pixelTransformSupport(id *this, const LiRenderParameters *a2, CMTime *a3)
{
  CMTime v4;

  v4 = *a3;
  return OZFxPlugSharedBase::getPixelTransformSupport(this + 2423, &v4);
}

uint64_t OZFxGenerator::_needsToRender(uint64_t a1, HGNode **a2)
{
  uint64_t result;
  HGNode *v4;
  HGNode *v5;

  if (*(_QWORD *)(a1 + 19408) && *(_QWORD *)(a1 + 19416))
    return 1;
  v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v4);
  v5 = *a2;
  if (*a2 == v4)
  {
    if (v4)
      (*(void (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
    return 0;
  }
  else
  {
    if (v5)
      (*(void (**)(HGNode *))(*(_QWORD *)v5 + 24))(v5);
    result = 0;
    *a2 = v4;
  }
  return result;
}

void sub_1B2F5AB40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

PCMutex *OZFxGenerator::getHelium@<X0>(OZFxGenerator *this@<X0>, LiAgent *a2@<X1>, CMTime *a3@<X2>, OZRenderParams *a4@<X3>, _QWORD *a5@<X8>)
{
  id *v10;
  PCMutex *v11;
  char v12;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  float64x2_t v22;
  __n128 Resolution;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  float64_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  double v37;
  int v38;
  float64x2_t v39;
  __int128 v40;
  HGRenderer *HeliumRenderer;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  FxMatrix44 *v46;
  void *v47;
  char v48;
  float64x2_t v49;
  float64x2_t v50;
  OZSceneNode *v51;
  int v52;
  int v53;
  FxImage *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  HGNode *v73;
  HGNode *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t CGColorSpace;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  HGCrop *v84;
  uint64_t RequestedColorDescription;
  CGColorSpace *v86;
  CGColorSpace *v87;
  HGNode *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  PCMutex *result;
  int v97;
  FxMatrix44 *v98;
  void *v99;
  void *v100;
  int v101[4];
  int v102;
  CGColorSpace *v103[2];
  int v104;
  char v105;
  float64x2_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  CMTimeEpoch v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  FxColorDescription v118;
  _OWORD v119[3];
  uint64_t v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  CMTimeEpoch v123;
  __int128 v124;
  CMTimeEpoch v125;
  __int128 v126;
  CMTimeEpoch epoch;
  CMTime v128;
  _OWORD v129[4];
  uint64_t v130;
  _OWORD v131[3];
  unsigned __int8 v132;
  CMTime v133;
  __int16 v134;
  _OWORD v135[3];
  BOOL v136[2];
  _BYTE v137[128];
  uint64_t v138;
  PCSharedCount v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  float64x2_t v156;
  __int128 v157;
  uint64_t *v158[11];
  uint64_t v159;
  double v160[4];
  HGNode *v161;
  float64x2_t v162;
  CMTime v163;
  float64x2_t v164;
  float64x2_t v165;
  char v166[8];
  PCMutex *v167;
  char v168;

  v10 = (id *)((char *)this + 19384);
  v11 = (PCMutex *)((char *)this + 19752);
  v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2423) + 88))((char *)this + 19384);
  v167 = v11;
  v168 = 0;
  if ((v12 & 1) == 0)
  {
    PCMutex::lock(v11);
    v168 = 1;
  }
  OZFxPlugRenderContextSentinel::OZFxPlugRenderContextSentinel(v166, v10, a4, 1);
  v164 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(float64x2_t *)v101 = _Q0;
  v165 = _Q0;
  v163 = *a3;
  v18 = OZFxPlugSharedBase::doesTransformFromLocalToScreenSpace(v10, &v163);
  v19 = *(_QWORD *)this;
  if (v18)
  {
    v20 = *(_QWORD *)((*(uint64_t (**)(OZFxGenerator *))(v19 + 272))(this) + 344);
    v21.i64[0] = (int)v20;
    v21.i64[1] = SHIDWORD(v20);
    v22 = vcvtq_f64_s64(v21);
    __asm { FMOV            V2.2D, #0.5 }
    v164 = vsubq_f64(v164, vaddq_f64(vmulq_f64(v22, _Q2), v164));
    v165 = v22;
  }
  else
  {
    (*(void (**)(OZFxGenerator *, float64x2_t *, OZRenderParams *))(v19 + 1480))(this, &v164, a4);
  }
  v162 = 0uLL;
  Resolution = OZRenderParams::getResolution(a4, (__n128 *)&v106);
  v162 = v106;
  if (v18)
  {
    v25 = *((_QWORD *)a2 + 20);
    v26 = *(double *)(v25 + 120) + *(double *)(v25 + 96) * 0.0 + *(double *)(v25 + 104) * 0.0;
    v27 = (*(double *)(v25 + 24) + *(double *)v25 * 0.0 + *(double *)(v25 + 8) * 0.0) / v26;
    v28 = (*(double *)(v25 + 56) + *(double *)(v25 + 32) * 0.0 + *(double *)(v25 + 40) * 0.0) / v26;
    v29 = v106.f64[1] * v165.f64[1] * 0.5;
    Resolution.n128_f64[0] = v106.f64[0] * v165.f64[0] * 0.5 - v27;
    v30 = *(float64x2_t *)v25;
    v31 = *(_OWORD *)(v25 + 16);
    v32 = *(_OWORD *)(v25 + 48);
    v108 = *(_OWORD *)(v25 + 32);
    v109 = v32;
    v106 = v30;
    v107 = v31;
    v33 = *(_OWORD *)(v25 + 64);
    v34 = *(_OWORD *)(v25 + 80);
    v35 = *(_OWORD *)(v25 + 112);
    v112 = *(_OWORD *)(v25 + 96);
    v113 = v35;
    v110 = v33;
    v111 = v34;
    PCMatrix44Tmpl<double>::leftTranslate(&v106, (float64x2_t)Resolution, v29 - v28, 0.0);
    LiAgent::setPixelTransform((uint64_t)a2, (uint64_t)&v106);
  }
  v161 = 0;
  if ((OZFxGenerator::_needsToRender((uint64_t)this, &v161) & 1) == 0)
  {
    *a5 = v161;
    goto LABEL_80;
  }
  v36 = (void *)*((_QWORD *)this + 2427);
  objc_msgSend(v36, "setIsRendering:", 1);
  v37 = (*(double (**)(OZFxGenerator *))(*(_QWORD *)this + 1328))(this);
  v160[0] = v37 * v164.f64[0];
  v160[1] = v164.f64[1];
  v160[2] = v37 * v165.f64[0];
  v160[3] = v165.f64[1];
  if (v37 * v165.f64[0] <= 0.0 || v165.f64[1] <= 0.0)
  {
    objc_msgSend(v36, "setIsRendering:", 0);
    *a5 = 0;
    goto LABEL_78;
  }
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v158);
  LiImagePolygon::set((uint64_t)v158, v164.f64, 0);
  LiAgent::projectAndClipPolygon((double **)a2, v158, 2.0);
  if ((((char *)v158[9] - (char *)v158[8]) & 0x1FFFFFFFE0) != 0)
  {
    v156 = 0uLL;
    v157 = *(_OWORD *)v101;
    bounds<LiPolygon::PosFacet,double>((uint64_t)&v159, (uint64_t)&v156);
    v154 = *(_OWORD *)a4;
    v155 = *((_QWORD *)a4 + 2);
    v38 = (*((uint64_t (**)(id *, __int128 *))*v10 + 31))(v10, &v154);
    if (v38 == 6)
      LiAgent::outCrop(a2, (const LiImagePolygon *)v158);
    v39 = v156;
    v40 = v157;
    HeliumRenderer = (HGRenderer *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
    pixelFormatFromRendererIntermediateFormat(HeliumRenderer);
    v42 = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 304))(v42);
    if (v43)
      v44 = 32;
    else
      v44 = 16;
    v153 = 0;
    v99 = v36;
    v153 = objc_msgSend(*((id *)this + 2427), "figTimeToFxTime:withConversionData:", a3, 0);
    v45 = (*(uint64_t (**)(OZFxGenerator *))(*(_QWORD *)this + 648))(this);
    OZFxPlugSharedBase::CalculateRenderInfo((int)v10, v45, &v153, (uint64_t *)&v162, v44, *((_DWORD *)a4 + 123), &v150);
    v102 = v44;
    v149 = 0x3FF0000000000000;
    v146 = 0x3FF0000000000000;
    v143 = 0x3FF0000000000000;
    v140 = 0x3FF0000000000000;
    v141 = 0u;
    v142 = 0u;
    v144 = 0u;
    v145 = 0u;
    v147 = 0u;
    v148 = 0u;
    (*((void (**)(id *, uint64_t *))*v10 + 43))(v10, &v140);
    v138 = 0;
    PCSharedCount::PCSharedCount(&v139);
    (*((void (**)(id *, LiAgent *, uint64_t *, OZRenderParams *, uint64_t *, _QWORD))*v10 + 58))(v10, a2, &v138, a4, &v140, 0);
    PCMatrix44Tmpl<double>::operator*(*((_QWORD *)a2 + 20), (__int128 *)&v140, (uint64_t)v137);
    v46 = FxMatrixFromPCMatrix((uint64_t)v137);
    OZFxPlugSharedBase::restartPluginXPCIfNecessary((OZFxPlugSharedBase *)v10);
    *(_WORD *)v136 = 0;
    v47 = (void *)*((_QWORD *)this + 2426);
    v135[0] = v150;
    v135[1] = v151;
    v135[2] = v152;
    v100 = v47;
    OZFxPlug_CallFrameSetup((uint64_t)this, v47, v135, 0, &v136[1], v136);
    v134 = *(_WORD *)v136;
    v133 = *a3;
    OZFxPlugSharedBase::getBestRenderingBehavior((OZFxPlugSharedBase *)v10, (LiRenderParameters **)a2, (BOOL *)&v134 + 1, (BOOL *)&v134, &v133);
    *(_WORD *)v136 = v134;
    if (HIBYTE(v134))
      v48 = 1;
    else
      v48 = v43;
    if ((v48 & 1) == 0)
    {
      *((_QWORD *)&v152 + 1) = 3;
      v102 = 32;
    }
    v97 = v38;
    v132 = 0;
    if ((*((unsigned int (**)(id *))*v10 + 41))(v10))
    {
      v131[0] = v150;
      v131[1] = v151;
      v131[2] = v152;
      objc_msgSend(v100, "filteredEdges:withInfo:", &v132, v131);
    }
    (*((void (**)(id *, _QWORD))*v10 + 28))(v10, v132);
    v98 = v46;
    v49 = v165;
    v50 = v162;
    LiAgent::getRenderDevice((LiRenderParameters **)a2);
    v130 = 0;
    memset(v129, 0, sizeof(v129));
    v51 = (OZSceneNode *)(*(uint64_t (**)(OZFxGenerator *))(*(_QWORD *)this + 648))(this);
    v52 = vcvtpd_s64_f64(v49.f64[0] * v50.f64[0]);
    v53 = vcvtpd_s64_f64(v49.f64[1] * v50.f64[1]);
    v128 = *a3;
    OZFxPlug_CalculateImageInfo(v10, v51, v52, v53, v102, v136[1], (uint64_t)v129, &v128);
    v126 = *(_OWORD *)&a3->value;
    epoch = a3->epoch;
    if (((*((uint64_t (**)(id *, __int128 *))*v10 + 29))(v10, &v126) & 1) == 0)
    {
      OZFxPlug_ClampRectToMaxTextureSize(&v156, &v106);
      v156 = v106;
      v157 = v107;
    }
    v124 = *(_OWORD *)&a3->value;
    v125 = a3->epoch;
    v54 = OZFxGenerator::createOutputFxImage((uint64_t)this, a2, v52, v53, v102, v136[1], (uint64_t)&v156, v160, v162.f64[0], v162.f64[1], &v124, (uint64_t)a4, (uint64_t)v129);
    -[FxImage setPixelTransform:](v54, "setPixelTransform:", v98);
    v122 = *(_OWORD *)&a3->value;
    v123 = a3->epoch;
    v55 = (*((uint64_t (**)(id *, __int128 *))*v10 + 29))(v10, &v122);
    if (v136[1])
      v63 = v55;
    else
      v63 = 1;
    v120 = 0;
    v121 = 0;
    if ((v63 & 1) == 0)
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", v56, v57, v58, v59, v60, v61, v62, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZFxGenerator.mm");
      pcAbortImpl();
    }
    v64 = *((_QWORD *)a4 + 34);
    v119[0] = v150;
    v119[1] = v151;
    v119[2] = v152;
    v65 = OZFxPlug_CallRender((uint64_t)this, v100, v64, (uint64_t)v54, 0, v119, (uint64_t)a4);
    (*((void (**)(id *, CMTime *))*v10 + 59))(v10, a3);
    objc_msgSend(*((id *)this + 2433), "setAgent:", 0);
    OZFxPlugSharedBase::getPluginColorDescription(v10, a2, &v118);
    v116 = 0;
    v117 = 0;
    v114 = *(_OWORD *)&a3->value;
    v115 = a3->epoch;
    if (!(*((unsigned int (**)(id *, __int128 *))*v10 + 29))(v10, &v114))
    {
      PCPrint("File %s, line %d should not have been reached:\n\t", v66, v67, v68, v69, v70, v71, v72, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZFxGenerator.mm");
      pcAbortImpl();
    }
    if (!v65)
    {
      v75 = -[FxImage width](v54, "width");
      v76 = -[FxImage height](v54, "height");
      CGColorSpace = FxColorDescription::getCGColorSpace(&v118);
      OZFxPlug_GenerateFailedRenderNode((uint64_t)this, v75, v76, CGColorSpace, (uint64_t)&v161, v78, v79, v80);
    }
    if (v97 != 6)
    {
      if (v54)
      {
        -[FxImage heliumRef](v54, "heliumRef");
        if (*(_QWORD *)&v106.f64[0])
        {
          v81 = HGRectMake4i(vcvtmd_s64_f64(v39.f64[0] + 0.000000999999997 + 0.0000001), vcvtmd_s64_f64(v39.f64[1] + 0.000000999999997 + 0.0000001), vcvtpd_s64_f64(v39.f64[0] + *(double *)&v40 + -0.000000999999997), vcvtpd_s64_f64(v39.f64[1] + *((double *)&v40 + 1) + -0.000000999999997));
          v83 = v82;
          v84 = (HGCrop *)HGObject::operator new(0x1A0uLL);
          HGCrop::HGCrop(v84);
          (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v84 + 96))(v84, 0, (float)(int)v81, (float)SHIDWORD(v81), (float)(int)v83, (float)SHIDWORD(v83));
          (*(void (**)(HGCrop *, _QWORD, unint64_t))(*(_QWORD *)v84 + 120))(v84, 0, *(_QWORD *)&v106.f64[0]);
          if (v161 != (HGNode *)v84)
          {
            if (v161)
              (*(void (**)(void))(*(_QWORD *)v161 + 24))();
            v161 = (HGNode *)v84;
            (*(void (**)(HGCrop *))(*(_QWORD *)v84 + 16))(v84);
          }
          (*(void (**)(HGCrop *))(*(_QWORD *)v84 + 24))(v84);
          if (*(_QWORD *)&v106.f64[0])
            (*(void (**)(unint64_t))(**(_QWORD **)&v106.f64[0] + 24))(*(_QWORD *)&v106.f64[0]);
        }
      }
      goto LABEL_54;
    }
    if (v54)
    {
      -[FxImage heliumRef](v54, "heliumRef");
      v73 = *(HGNode **)&v106.f64[0];
      v74 = v161;
      if (v161 == *(HGNode **)&v106.f64[0])
      {
        if (*(_QWORD *)&v106.f64[0])
          (*(void (**)(void))(**(_QWORD **)&v106.f64[0] + 24))();
        goto LABEL_54;
      }
      if (!v161)
        goto LABEL_53;
    }
    else
    {
      v106.f64[0] = 0.0;
      v74 = v161;
      if (!v161)
      {
LABEL_54:
        RequestedColorDescription = LiAgent::getRequestedColorDescription(a2);
        v86 = *(CGColorSpace **)RequestedColorDescription;
        v103[0] = v86;
        if (v86)
          PCCFRefTraits<CGColorSpace *>::retain(v86);
        v87 = *(CGColorSpace **)(RequestedColorDescription + 8);
        v104 = *(_DWORD *)(RequestedColorDescription + 16);
        v103[1] = v87;
        v105 = *(_BYTE *)(RequestedColorDescription + 24);
        OZFxPlug_ConformFromProcessingDescription(&v106, &v161, &v118, v103);
        v88 = *(HGNode **)&v106.f64[0];
        if (v161 == *(HGNode **)&v106.f64[0])
        {
          if (v161)
            (*(void (**)(void))(*(_QWORD *)v161 + 24))();
        }
        else
        {
          if (v161)
          {
            (*(void (**)(void))(*(_QWORD *)v161 + 24))();
            v88 = *(HGNode **)&v106.f64[0];
          }
          v161 = v88;
          v106.f64[0] = 0.0;
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(v103);
        objc_msgSend(v99, "clearImageList");
        if (-[FxImage imageType](v54, "imageType") == 1 && (-[FxImage _ownsData](v54, "_ownsData") & 1) == 0)
        {
          v89 = -[FxImage dataPtr](v54, "dataPtr");
          if (v89)
            MEMORY[0x1B5E29170](v89, 0x1000C4077774924);
        }

        objc_msgSend(v100, "frameCleanup");
        objc_msgSend(v99, "setIsRendering:", 0);
        *a5 = v161;
        v161 = 0;
        v90 = v117;
        if (v117)
        {
          p_shared_owners = (unint64_t *)&v117->__shared_owners_;
          do
            v92 = __ldaxr(p_shared_owners);
          while (__stlxr(v92 - 1, p_shared_owners));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(&v118._pcColorDesc._colorSpaceRef._obj);
        v93 = v121;
        if (v121)
        {
          v94 = (unint64_t *)&v121->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        PCSharedCount::~PCSharedCount(&v139);
        goto LABEL_77;
      }
    }
    (*(void (**)(HGNode *))(*(_QWORD *)v74 + 24))(v74);
    v73 = *(HGNode **)&v106.f64[0];
LABEL_53:
    v161 = v73;
    goto LABEL_54;
  }
  objc_msgSend(v36, "setIsRendering:", 0);
  *a5 = 0;
LABEL_77:
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v158);
LABEL_78:
  if (v161)
    (*(void (**)(HGNode *))(*(_QWORD *)v161 + 24))(v161);
LABEL_80:
  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)v166);
  result = v167;
  if (v167)
  {
    if (v168)
      return (PCMutex *)PCMutex::unlock(v167);
  }
  return result;
}

void sub_1B2F5B77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,CGColorSpace *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;
  uint64_t v58;

  HGObject::operator delete(v57);
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 24))(a23);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a47);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  PCSharedCount::~PCSharedCount(a15);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&STACK[0x488]);
  if (STACK[0x518])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x518] + 24))(STACK[0x518]);
  OZFxPlugRenderContextSentinel::~OZFxPlugRenderContextSentinel((OZFxPlugRenderContextSentinel *)(v58 - 184));
  PCLockSentry<PCMutex>::~PCLockSentry(v58 - 176);
  _Unwind_Resume(a1);
}

FxImage *OZFxGenerator::createOutputFxImage(uint64_t a1, LiAgent *this, int a3, int a4, int a5, int a6, uint64_t a7, double *a8, double a9, double a10, __int128 *a11, uint64_t a12, uint64_t a13)
{
  OZSceneNode *v21;
  __int128 v22;
  __int128 v23;
  FxHeliumImage *v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  FxTexture *v28;
  __int128 v29;
  __int128 v30;
  FxTexture *v31;
  __int128 v32;
  __int128 v33;
  FxImage *p_super;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t PluginNCLC;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[4];
  uint64_t v50;
  _OWORD v51[4];
  uint64_t v52;
  _OWORD v53[4];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  CMTime v57;
  FxColorDescription v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  LiAgent::getRenderDevice((LiRenderParameters **)this);
  v21 = (OZSceneNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
  *(_OWORD *)&v57.value = *a11;
  v57.epoch = *((_QWORD *)a11 + 2);
  OZFxPlug_CalculateImageInfo((id *)(a1 + 19384), v21, a3, a4, a5, a6, (uint64_t)&v58, &v57);
  v22 = v60;
  *(_OWORD *)(a13 + 32) = v59;
  *(_OWORD *)(a13 + 48) = v22;
  *(_QWORD *)(a13 + 64) = v61;
  v23 = *(_OWORD *)&v58._pcColorDesc._toneMapMethod._gain;
  *(_OWORD *)a13 = *(_OWORD *)&v58._pcColorDesc._colorSpaceRef._obj;
  *(_OWORD *)(a13 + 16) = v23;
  v55 = *a11;
  v56 = *((_QWORD *)a11 + 2);
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 19384) + 232))(a1 + 19384, &v55))
  {
    v24 = [FxHeliumImage alloc];
    v25 = *(_OWORD *)(a13 + 48);
    v53[2] = *(_OWORD *)(a13 + 32);
    v53[3] = v25;
    v54 = *(_QWORD *)(a13 + 64);
    v26 = *(_OWORD *)(a13 + 16);
    v53[0] = *(_OWORD *)a13;
    v53[1] = v26;
    v27 = v53;
  }
  else
  {
    if (a6)
    {
      v28 = [FxTexture alloc];
      v29 = *(_OWORD *)(a13 + 48);
      v51[2] = *(_OWORD *)(a13 + 32);
      v51[3] = v29;
      v52 = *(_QWORD *)(a13 + 64);
      v30 = *(_OWORD *)(a13 + 16);
      v51[0] = *(_OWORD *)a13;
      v51[1] = v30;
      v31 = -[FxTexture initWithInfo:textureId:andTarget:](v28, "initWithInfo:textureId:andTarget:", v51, 1, 3553);
      goto LABEL_7;
    }
    v24 = [FxBitmap alloc];
    v32 = *(_OWORD *)(a13 + 48);
    v49[2] = *(_OWORD *)(a13 + 32);
    v49[3] = v32;
    v50 = *(_QWORD *)(a13 + 64);
    v33 = *(_OWORD *)(a13 + 16);
    v49[0] = *(_OWORD *)a13;
    v49[1] = v33;
    v27 = v49;
  }
  v31 = -[FxHeliumImage initWithInfo:](v24, "initWithInfo:", v27);
LABEL_7:
  p_super = &v31->super;
  -[FxImage setBounds:](v31, "setBounds:", *a8, a8[1], a8[2], a8[3]);
  v35 = vcvtpd_s64_f64(*(double *)(a7 + 16));
  v36 = vcvtpd_s64_f64(*(double *)(a7 + 24));
  if (v35 >= 0)
    v37 = v35;
  else
    v37 = v35 + 1;
  if (v36 >= 0)
    v38 = v36;
  else
    v38 = v36 + 1;
  -[FxImage setDod:](p_super, "setDod:", -(v37 >> 1) | ((unint64_t)-(v38 >> 1) << 32), (v35 - (v37 >> 1)) | ((unint64_t)(v36 - (v38 >> 1)) << 32));
  -[FxImage setScaleX:](p_super, "setScaleX:", a9);
  -[FxImage setScaleY:](p_super, "setScaleY:", a10);
  v48 = 0;
  if (*(_BYTE *)(a12 + 488))
    v48 = *(unsigned int *)(a12 + 492);
  -[FxImage setFieldOrder:](p_super, "setFieldOrder:");
  v46 = *a11;
  v47 = *((_QWORD *)a11 + 2);
  v45 = objc_msgSend(*(id *)(a1 + 19416), "figTimeToFxTime:withConversionData:", &v46, 0);
  -[FxImage setField:](p_super, "setField:", (int)OZChannelBase::isObjectRef((OZChannelBase *)(a1 + 19384)));
  PluginNCLC = OZFxPlugSharedBase::getPluginNCLC((id *)(a1 + 19384), this);
  v44 = v39;
  -[FxImage setNCLCValue:](p_super, "setNCLCValue:", FxConvertPCNCLCCodeToFxNCLCValue(&PluginNCLC));
  -[FxImage setColorSpace:](p_super, "setColorSpace:", OZFxPlugSharedBase::getPluginColorSpace((id *)(a1 + 19384), this));
  OZFxPlugSharedBase::getPluginColorDescription((id *)(a1 + 19384), this, &v58);
  -[FxImage setDynamicRangeType:](p_super, "setDynamicRangeType:", OZFxPlug_ConvertDynamicRangeType(&v58));
  OZFxPlugSharedBase::SetImageColorPrimaries((OZFxPlugSharedBase *)(a1 + 19384), p_super, this);
  -[FxImage setPixelTransform:](p_super, "setPixelTransform:", FxMatrixFromPCMatrix(*((_QWORD *)this + 20)));
  PCCFRef<CGColorSpace *>::~PCCFRef(&v58._pcColorDesc._colorSpaceRef._obj);
  return p_super;
}

void sub_1B2F5BCB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 184));
  _Unwind_Resume(a1);
}

PCSharedCount *OZFxGenerator::makeRenderImageSource@<X0>(OZFxGenerator *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  OZChannelBase *Name;
  OZLiFxGenerator *v13;
  PCString v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0;
  v18[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v19 = _Q0;
  (*(void (**)(OZFxGenerator *, _QWORD *, OZRenderParams *))(*(_QWORD *)this + 1520))(this, v18, a2);
  v16 = *(_OWORD *)a2;
  v17 = *((_QWORD *)a2 + 2);
  if (((*(uint64_t (**)(char *, __int128 *))(*((_QWORD *)this + 2423) + 232))((char *)this + 19384, &v16) & 1) == 0)
  {
    if (*(double *)&v19 > 4096.0)
    {
      *(_QWORD *)&v19 = 0x40B0000000000000;
      if (*((double *)&v19 + 1) <= 4096.0)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (*((double *)&v19 + 1) > 4096.0)
    {
LABEL_6:
      *((_QWORD *)&v19 + 1) = 0x40B0000000000000;
LABEL_7:
      PCBitDepth::getFromBitsPerChannel((PCBitDepth *)*((unsigned int *)a2 + 83), 0);
      Name = (OZChannelBase *)OZObjectManipulator::getName((OZFxGenerator *)((char *)this + 16));
      PCURL::PCURL((PCURL *)&v15, CFSTR("Generator is too big message"));
      OZChannelBase::setRangeName(Name, &v15);
      PCString::~PCString(&v15);
    }
  }
  v13 = (OZLiFxGenerator *)operator new();
  OZLiFxGenerator::OZLiFxGenerator(v13, (id *)this, a2, 0);
  a4->var0 = (PC_Sp_counted_base *)v13;
  return PCSharedCount::PCSharedCount(a4 + 1, (OZLiFxGenerator *)((char *)v13 + *(_QWORD *)(*(_QWORD *)v13 - 24)));
}

void sub_1B2F5BE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

PCSharedCount *`non-virtual thunk to'OZFxGenerator::makeRenderImageSource@<X0>(OZFxGenerator *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  return OZFxGenerator::makeRenderImageSource((OZFxGenerator *)((char *)this - 6528), a2, a3, a4);
}

uint64_t OZFxGenerator::getRootChannelFolder(id *this)
{
  return objc_msgSend(this[2427], "baseChannel");
}

uint64_t OZFxGenerator::parseEnd(OZFxGenerator *this, PCSerializerReadStream *a2)
{
  PCString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  void *v14;
  const __CFString *v15;
  uint64_t v16;
  const __CFURL **v17;
  const PCURL *v18;
  uint64_t v20;
  PCString v21;

  v4 = (PCString *)((char *)this + 19384);
  *((_DWORD *)this + 4956) = *((_DWORD *)a2 + 26);
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 2423) + 208))((char *)this + 19384))
  {
    v5 = (void *)*((_QWORD *)this + 2427);
    v6 = objc_msgSend(v5, "channelMap");
    v9 = *(_QWORD *)(v6 + 8);
    v7 = v6 + 8;
    v8 = v9;
    if (v9)
    {
      v10 = v7;
      do
      {
        v11 = *(_DWORD *)(v8 + 32);
        v12 = v11 >= 0x2712;
        if (v11 >= 0x2712)
          v13 = (uint64_t *)v8;
        else
          v13 = (uint64_t *)(v8 + 8);
        if (v12)
          v10 = v8;
        v8 = *v13;
      }
      while (*v13);
      if (v10 != v7 && *(_DWORD *)(v10 + 32) <= 0x2712u)
        objc_msgSend(v5, "addFlipCheckbox:withChannel:", 10002, *(_QWORD *)(v10 + 40));
    }
  }
  v14 = (void *)*((_QWORD *)this + 2427);
  if (((*(uint64_t (**)(PCString *))(*((_QWORD *)this + 2423) + 288))(v4) & 1) != 0
    || objc_msgSend(v14, "hasPointParameters"))
  {
    objc_msgSend(v14, "movePublishOSCChannelToEnd");
  }
  v15 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  if (!v15
    || CFStringCompare(v15, CFSTR("com.apple.FinalCutApp"), 1uLL)
    || (OZFxPlugSharedBase::isHMTCompatible(v4) & 1) != 0)
  {
    v16 = (*(uint64_t (**)(OZFxGenerator *))(*(_QWORD *)this + 272))(this);
    if (!v16)
      return OZElement::parseEnd((OZElement *)this, a2);
    v17 = *(const __CFURL ***)(v16 + 1584);
    if (!v17)
      return OZElement::parseEnd((OZElement *)this, a2);
    OZDocument::getFilename(v17, (PCURL *)&v21);
    PCURL::PCURL((PCURL *)&v20, &v21, 0);
    if (!OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)&v20, v18)
      || (OZFxPlugSharedBase::isHMTCompatible(v4) & 1) != 0)
    {
      PCURL::~PCURL((PCURL *)&v20);
      PCString::~PCString(&v21);
      return OZElement::parseEnd((OZElement *)this, a2);
    }
    (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
    PCURL::~PCURL((PCURL *)&v20);
    PCString::~PCString(&v21);
  }
  else
  {
    (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  return 0;
}

void sub_1B2F5C044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZFxGenerator::parseEnd(OZFxGenerator *this, PCSerializerReadStream *a2)
{
  return OZFxGenerator::parseEnd((OZFxGenerator *)((char *)this - 48), a2);
}

_QWORD *OZFxGenerator::print(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  const void *v9;
  OZChannelBase *v10;
  char *Node;
  _QWORD *v12;
  PCString *Name;
  char *CStr;
  char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  LiImageSource::printIndent(a2, a3);
  v5 = (_QWORD *)objc_msgSend(*(id *)(a1 + 19416), "channelMap");
  v6 = v5 + 1;
  v7 = (_QWORD *)*v5;
  if ((_QWORD *)*v5 != v5 + 1)
  {
    v8 = 0;
    do
    {
      v9 = (const void *)v7[5];
      if (v9)
      {
        if (v10)
        {
          Node = (char *)OZChanSceneNodeRef::getNode(v10);
          if (v8 >= 1)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"image parameter: ", 17);
          Name = (PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(Node + 16));
          CStr = PCString::createCStr(Name);
          if (CStr)
          {
            v15 = CStr;
            v16 = strlen(CStr);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v15, v16);
            free(v15);
          }
          ++v8;
        }
      }
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v19 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v19);
      }
      v7 = v18;
    }
    while (v18 != v6);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

uint64_t OZARGetBodyJointTransformFromSkeleton@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const __CFString **v9;
  const __CFString *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[5];

  v3 = a3;
  if (a2)
  {
    v5 = *MEMORY[0x1E0C83FF0];
    v6 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
    v7 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
    v8 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    switch(result)
    {
      case 1:
        v9 = (const __CFString **)MEMORY[0x1E0C89528];
        goto LABEL_11;
      case 2:
        v9 = (const __CFString **)MEMORY[0x1E0C89530];
        goto LABEL_11;
      case 3:
        v10 = CFSTR("left_forearm_joint");
        goto LABEL_12;
      case 4:
        v9 = (const __CFString **)MEMORY[0x1E0C89538];
        goto LABEL_11;
      case 5:
        v9 = (const __CFString **)MEMORY[0x1E0C89540];
        goto LABEL_11;
      case 6:
        v10 = CFSTR("right_forearm_joint");
        goto LABEL_12;
      case 7:
        v9 = (const __CFString **)MEMORY[0x1E0C89548];
LABEL_11:
        v10 = *v9;
        goto LABEL_12;
      case 8:
        v10 = CFSTR("left_foot_joint");
        goto LABEL_12;
      case 9:
        v10 = CFSTR("right_foot_joint");
        goto LABEL_12;
      case 11:
        v10 = CFSTR("left_leg_joint");
        goto LABEL_12;
      case 12:
        v10 = CFSTR("left_upLeg_joint");
        goto LABEL_12;
      case 13:
        v10 = CFSTR("right_leg_joint");
        goto LABEL_12;
      case 14:
        v10 = CFSTR("right_upLeg_joint");
LABEL_12:
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v10, *(double *)&v5, *(double *)&v6, *(double *)&v7, *(double *)&v8), "PCSIMDFloat4x4Value");
        break;
      default:
        break;
    }
    result = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("bodyAnchorTransform"), v5, v6, v8, v7), "PCSIMDFloat4x4Value");
    v15 = 0;
    v22[0] = v18;
    v22[1] = v19;
    v22[2] = v21;
    v22[3] = v20;
    do
    {
      v22[v15 + 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(v22[v15])), v12, *(float32x2_t *)&v22[v15], 1), v13, (float32x4_t)v22[v15], 2), v14, (float32x4_t)v22[v15], 3);
      ++v15;
    }
    while (v15 != 4);
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
        *(double *)(v3 + 8 * j) = *(float *)((unint64_t)&v22[j + 4] & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
      v3 += 32;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a3 = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
  }
  return result;
}

void *OZARMakePlaneInfoFromPlaneAnchor(ARPlaneAnchor *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "setAlignment:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[ARPlaneAnchor alignment](a1, "alignment")));
  objc_msgSend(v2, "setClassification:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[ARPlaneAnchor classification](a1, "classification")));
  v3 = (void *)MEMORY[0x1E0CB3B18];
  -[ARPlaneAnchor extent](a1, "extent");
  objc_msgSend(v2, "setExtent:", objc_msgSend(v3, "PCValueWithSIMDFloat3:"));
  v4 = (void *)MEMORY[0x1E0CB3B18];
  -[ARPlaneAnchor center](a1, "center");
  objc_msgSend(v2, "setCenter:", objc_msgSend(v4, "PCValueWithSIMDFloat3:"));
  v5 = (void *)MEMORY[0x1E0CB3B18];
  -[ARPlaneAnchor transform](a1, "transform");
  objc_msgSend(v2, "setTransform:", objc_msgSend(v5, "PCValueWithSIMDFloat4x4:"));
  objc_msgSend(v2, "setIdentifier:", -[ARPlaneAnchor identifier](a1, "identifier"));
  return v2;
}

void *OZARMakePlaneListFromARFrame(ARFrame *a1)
{
  void *v2;
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ARPlaneAnchor *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = -[ARFrame anchors](a1, "anchors", 0);
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(ARPlaneAnchor **)(*((_QWORD *)&v11 + 1) + 8 * v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v9 = OZARMakePlaneInfoFromPlaneAnchor(v8);
          objc_msgSend(v2, "addObject:", v9);

        }
        ++v7;
      }
      while (v5 != v7);
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }
  return v2;
}

void *OZARMakePlaneListFromPlanesDict(NSDictionary *a1)
{
  void *v2;
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v3 = -[NSDictionary allValues](a1, "allValues");
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v20;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v7);
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v16;
          do
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v16 != v11)
                objc_enumerationMutation(v8);
              v13 = OZARMakePlaneInfoFromPlaneAnchor(*(ARPlaneAnchor **)(*((_QWORD *)&v15 + 1) + 8 * v12));
              objc_msgSend(v2, "addObject:", v13);

              ++v12;
            }
            while (v10 != v12);
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
          }
          while (v10);
        }
        ++v7;
      }
      while (v7 != v5);
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v5);
  }
  return v2;
}

BOOL OZARGetWorldPointFromNDC(_OWORD *a1, double *a2, float64x2_t *a3, float a4, float a5, float a6, float a7)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BOOL8 v17;
  float64x2_t v18;
  double v19;
  float64x2_t v21;
  __int128 v22;
  float64x2_t v23;
  double v24;
  uint64_t v25;
  float64x2_t v26[2];
  double v27[2];
  __int128 v28;
  _OWORD v29[8];

  v13 = a1[5];
  v29[4] = a1[4];
  v29[5] = v13;
  v14 = a1[7];
  v29[6] = a1[6];
  v29[7] = v14;
  v15 = a1[1];
  v29[0] = *a1;
  v29[1] = v15;
  v16 = a1[3];
  v29[2] = a1[2];
  v29[3] = v16;
  v17 = PCMatrix44Tmpl<double>::invert((double *)v29, (double *)v29, 0.0);
  if (v17)
  {
    v27[0] = a4;
    v27[1] = a5;
    v28 = xmmword_1B304F7C0;
    memset(v26, 0, sizeof(v26));
    PCMatrix44Tmpl<double>::transform<double>((double *)v29, v27, v26[0].f64);
    v26[0].f64[0] = v26[0].f64[0] / v26[1].f64[1];
    *(float64x2_t *)((char *)v26 + 8) = vdivq_f64(*(float64x2_t *)((char *)v26 + 8), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26[1].f64[1], 0));
    v26[1].f64[1] = v26[1].f64[1] / v26[1].f64[1];
    v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26[0].f64[1], 0);
    v18.f64[0] = v26[0].f64[0];
    v24 = a6;
    v25 = 0x3FF0000000000000;
    v22 = 0u;
    v23 = vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(a6), 0), vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64((float)-a7), 0), v18))));
    v21 = 0u;
    PCMatrix44Tmpl<double>::transform<double>(a2, v23.f64, v21.f64);
    v19 = 1.0 / *((double *)&v22 + 1) * *(double *)&v22;
    *a3 = vmulq_n_f64(v21, 1.0 / *((double *)&v22 + 1));
    a3[1].f64[0] = v19;
  }
  return v17;
}

float OZGetViewProjectionMatrix(OZScene *a1, const CMTime *a2, uint64_t a3, PCSharedCount *a4, _DWORD *a5)
{
  unsigned int ActiveCamera;
  void *Node;
  char *v12;
  uint64_t i;
  PCSharedCount *v14;
  __int128 v15;
  double v16;
  float result;
  PCSharedCount v18;
  PCSharedCount v19[15];
  CMTime v20;
  PCSharedCount v21;
  PCSharedCount v22;
  OZRenderState v23;

  ActiveCamera = OZScene::getActiveCamera(a1, a2);
  Node = OZScene::getNode(a1, ActiveCamera);
  if (Node)
  else
    v12 = 0;
  OZRenderState::OZRenderState(&v23);
  *(_OWORD *)&v23.var0.var0 = *(_OWORD *)&a2->value;
  v23.var0.var3 = a2->epoch;
  (*(void (**)(char *, uint64_t, OZRenderState *))(*(_QWORD *)v12 + 1256))(v12, a3, &v23);
  v20 = *a2;
  OZCamera::cameraAtTime((OZCamera *)v12, &v20, &v18);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v21, &v18);
  PCSharedCount::~PCSharedCount(v19);
  if (!v21.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PCSharedCount *__return_ptr))(*(_QWORD *)v21.var0 + 56))(&v18);
  if (&v18 != a4)
  {
    for (i = 0; i != 16; i += 4)
    {
      v14 = &a4[i];
      v15 = *(_OWORD *)&v19[i + 1].var0;
      *(_OWORD *)&v14->var0 = *(_OWORD *)((char *)&v18.var0 + i * 8);
      *(_OWORD *)&v14[2].var0 = v15;
    }
  }
  OZChannel::getValueAsDouble((OZChannel *)(v12 + 6960), a2, 0.0);
  *(float *)&v16 = v16;
  *a5 = LODWORD(v16);
  PCSharedCount::~PCSharedCount(&v22);
  return result;
}

void sub_1B2F5D278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,PCSharedCount a30)
{
  PCSharedCount::~PCSharedCount(&a30);
  _Unwind_Resume(a1);
}

BOOL OZARGetWorldPoint(int *a1, float *a2, float *a3, unsigned int a4, float64x2_t *a5, float a6, float a7)
{
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v24;
  PCSharedCount v25;
  __int128 v26;
  __int128 v27;
  double v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  double v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  CMTime v45;

  v11 = a3[a4 < 2];
  v12 = a3[a4 > 1];
  v13 = a3[1];
  v14 = *a2 - *a3 * 0.5;
  v15 = (float)(v13 - a2[1]);
  v45 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v38 = 0x3FF0000000000000;
  v16 = v15 - v13 * 0.5;
  if (a4 >= 2)
    v17 = v14;
  else
    v17 = v16;
  v35 = 1.0;
  v18 = -v14;
  v36 = 0u;
  if (a4 >= 2)
    v19 = v16;
  else
    v19 = v18;
  v37 = 0uLL;
  v39 = 0uLL;
  v40 = 0uLL;
  v42 = 0uLL;
  v43 = 0uLL;
  v34 = 0x3FF0000000000000;
  v31 = 0x3FF0000000000000;
  v28 = 1.0;
  *(double *)&v25.var0 = 1.0;
  v26 = 0uLL;
  v27 = 0uLL;
  v29 = 0uLL;
  v30 = 0uLL;
  v32 = 0uLL;
  v33 = 0uLL;
  v24 = 0.0;
  OZGetViewProjectionMatrix((OZScene *)a1, &v45, (uint64_t)&v35, &v25, &v24);
  v20 = (float)a1[86] / (float)a1[87];
  *(double *)&v25.var0 = *(double *)&v25.var0 * fminf(v20 / (float)(v11 / v12), 1.0);
  v28 = v28 * fminf((float)(v11 / v12) / v20, 1.0);
  v21 = v17 / (v11 * 0.5);
  v22 = v19 / (v12 * 0.5);
  return OZARGetWorldPointFromNDC(&v25, &v35, a5, v21, v22, -(float)(a6 * a7), v24);
}

BOOL OZARGetPersonWorldPoint(int *a1, void *a2, unsigned int a3, float64x2_t *a4, float64x2_t *a5, double a6, double a7, float a8)
{
  double v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat Height;
  float MidX;
  float MidY;
  float v26;
  double v27;
  float v28;
  double v29;
  float v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat Width;
  float v34;
  float v35;
  float v36;
  float v37;
  _BOOL8 result;
  float MinX;
  float MaxY;
  float64x2_t v41;
  double v42;
  float v44;
  float v45[2];
  float v46[2];
  float64x2_t v47;
  uint64_t v48;
  float v49[2];
  float v50[2];
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  objc_msgSend(a2, "meanDepth");
  *(float *)&v15 = v15;
  v44 = *(float *)&v15;
  objc_msgSend(a2, "rectScaledToSize:", a6, a7);
  v20 = v16;
  v21 = v17;
  v22 = v18;
  Height = v19;
  if ((a3 & 0xFFFFFFFD) == 1)
  {
    MidX = CGRectGetMidX(*(CGRect *)&v16);
    v51.origin.x = v20;
    v51.origin.y = v21;
    v51.size.width = v22;
    v51.size.height = Height;
    MidY = CGRectGetMidY(v51);
    v42 = a7;
    v26 = a6 * 0.5;
    v27 = (float)(v26 - (float)(MidX - v26));
    v52.origin.x = v20;
    v52.origin.y = v21;
    v52.size.width = v22;
    v52.size.height = Height;
    *(float *)&v27 = v27 - CGRectGetWidth(v52) * 0.5;
    v28 = a7 * 0.5;
    v29 = (float)(v28 - (float)(MidY - v28));
    v53.origin.x = v20;
    v53.origin.y = v21;
    v53.size.width = v22;
    v53.size.height = Height;
    v30 = v29 - CGRectGetHeight(v53) * 0.5;
    v31 = *(float *)&v27;
    v32 = v30;
    v54.origin.x = v20;
    v54.origin.y = v21;
    v54.size.width = v22;
    v54.size.height = Height;
    Width = CGRectGetWidth(v54);
    v55.origin.x = v20;
    v55.origin.y = v21;
    v55.size.width = v22;
    v55.size.height = Height;
    Height = CGRectGetHeight(v55);
    v22 = Width;
    v21 = v32;
    a7 = v42;
    v20 = v31;
  }
  v56.origin.x = v20;
  v56.origin.y = v21;
  v56.size.width = v22;
  v56.size.height = Height;
  v34 = CGRectGetMidX(v56);
  v57.origin.x = v20;
  v57.origin.y = v21;
  v57.size.width = v22;
  v57.size.height = Height;
  v35 = CGRectGetMidY(v57);
  v36 = a6;
  v50[0] = v34;
  v50[1] = v35;
  v37 = a7;
  v49[0] = v36;
  v49[1] = v37;
  result = OZARGetWorldPoint(a1, v50, v49, a3, a4, v44, a8);
  if (a5 && result)
  {
    v58.origin.x = v20;
    v58.origin.y = v21;
    v58.size.width = v22;
    v58.size.height = Height;
    MinX = CGRectGetMinX(v58);
    v59.origin.x = v20;
    v59.origin.y = v21;
    v59.size.width = v22;
    v59.size.height = Height;
    MaxY = CGRectGetMaxY(v59);
    v47 = 0uLL;
    v48 = 0;
    v46[0] = MinX;
    v46[1] = MaxY;
    v45[0] = a6;
    v45[1] = v37;
    if (OZARGetWorldPoint(a1, v46, v45, a3, &v47, v44, a8))
    {
      v41 = vabdq_f64(*a4, v47);
      *a5 = vaddq_f64(v41, v41);
    }
    return 1;
  }
  return result;
}

uint64_t OZARSetPersonInfoJoints(OZARPersonInfo *a1, NSDictionary *a2, float a3)
{
  double v5;
  uint64_t i;
  uint64_t v7;
  NSMutableDictionary *v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  __int128 v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23[8];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = a3;
  for (i = 1; i != 15; ++i)
  {
    OZARGetBodyJointTransformFromSkeleton(i, a2, (uint64_t)v23);
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    v27 = 4;
    v28 = 0u;
    v29 = 0u;
    v30 = 0;
    PCMatrix44Tmpl<double>::getTransformation(v23, (uint64_t)&v24);
    v22 = 0x3FF0000000000000;
    v11 = 0u;
    v12 = 0u;
    v14 = 0;
    v16 = 0u;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    v10 = 0x3FF0000000000000;
    v13 = 0x3FF0000000000000;
    v17 = 0x3FF0000000000000;
    *(double *)&v12 = *(double *)&v24 * v5;
    v15 = *((double *)&v24 + 1) * v5;
    v18 = *(double *)&v25 * v5;
    v7 = objc_msgSend(MEMORY[0x1E0CB3B18], "PCValueWithSIMDFloat4x4:", PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v10));
    v8 = -[OZARPersonInfo jointTransforms](a1, "jointTransforms");
    result = -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v7, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", i));
  }
  return result;
}

void *OZARMakePersonList(ARFrame *a1, OZScene *a2, float a3, NSDictionary *a4)
{
  void *v6;
  OZARPersonInfo *v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v6 = (void *)objc_opt_new();
  OZARGetBodyJointTransformFromSkeleton(10, a4, (uint64_t)v22);
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  v26 = 4;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  PCMatrix44Tmpl<double>::getTransformation(v22, (uint64_t)&v23);
  v10 = 0u;
  v13 = 0;
  v15 = 0u;
  v20 = 0;
  v21 = 0x3FF0000000000000;
  v18 = 0;
  v19 = 0;
  v9 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v11 = COERCE_UNSIGNED_INT64(*(double *)&v23 * a3);
  v14 = *((double *)&v23 + 1) * a3;
  v17 = *(double *)&v24 * a3;
  v7 = -[OZARPersonInfo init:]([OZARPersonInfo alloc], "init:", objc_msgSend(MEMORY[0x1E0CB3B18], "PCValueWithSIMDFloat4x4:", PCMatrix44Tmpl<double>::toSimdFloat((float64_t *)&v9)));
  -[OZARPersonInfo setIndex:](v7, "setIndex:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 0));
  OZARSetPersonInfoJoints(v7, a4, a3);
  objc_msgSend(v6, "addObject:", v7);

  return v6;
}

void *OZARMakePersonList(void *a1, int *a2, unsigned int a3, float a4)
{
  size_t Width;
  size_t Height;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double *v14;
  uint64_t i;
  void *v21;
  void *v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  size_t v35;
  double x;
  CGFloat y;
  double v38;
  double v39;
  float MinX;
  float MinY;
  float v42;
  float v43;
  float v44;
  float v45;
  void *v47;
  id obj;
  float64x2_t v49;
  uint64_t v50;
  void *v52;
  double v53[4];
  CGAffineTransform v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[128];
  uint64_t v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v63 = *MEMORY[0x1E0C80C00];
  v47 = (void *)objc_opt_new();
  v52 = a1;
  obj = (id)objc_msgSend(a1, "detectedPersonMetadata");
  if (objc_msgSend(obj, "count"))
  {
    objc_msgSend((id)objc_msgSend(a1, "camera"), "imageResolution");
    Width = CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(a1, "estimatedDepthData"));
    Height = CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(a1, "estimatedDepthData"));
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v62, 16);
    if (v9)
    {
      v10 = v9;
      v11 = 0;
      v12 = (double)Height;
      v13 = (double)Width;
      v50 = *(_QWORD *)v59;
      v14 = (double *)MEMORY[0x1E0C83FF0];
      __asm { FMOV            V0.2D, #-1.0 }
      v49 = _Q0;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v59 != v50)
            objc_enumerationMutation(obj);
          v21 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * i);
          v22 = (void *)objc_opt_new();
          objc_msgSend(v22, "setIndex:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v11 + i));
          v56 = 0uLL;
          v57 = 0;
          v55 = v49;
          if (OZARGetPersonWorldPoint(a2, v21, a3, &v56, &v55, v13, v12, a4))
          {
            objc_msgSend(v22, "setTransform:", objc_msgSend(MEMORY[0x1E0CB3B18], "PCValueWithSIMDFloat4x4:", *v14, v14[2], v14[4], COERCE_DOUBLE(vcvt_f32_f64(v56))));
            objc_msgSend(v47, "addObject:", v22);
            if (v55.f64[0] != -1.0 && v55.f64[1] != -1.0)
              objc_msgSend(v22, "setWorldSize:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGSize:", *(_OWORD *)&v55));
          }
          objc_msgSend(v21, "rectScaledToSize:", v13, v12);
          v24 = v23;
          v26 = v25;
          v28 = v27;
          v30 = v29;
          v31 = a2[86];
          v32 = a2[87];
          if (a3 >= 2)
            v33 = a2[86];
          else
            v33 = a2[87];
          v34 = v33;
          v35 = CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v52, "estimatedDepthData"));
          CGAffineTransformMakeScale(&v54, (double)(v34 / v35), (double)(v34 / v35));
          v64.origin.x = v24;
          v64.origin.y = v26;
          v64.size.width = v28;
          v64.size.height = v30;
          v65 = CGRectApplyAffineTransform(v64, &v54);
          x = v65.origin.x;
          y = v65.origin.y;
          v38 = v65.size.height;
          if (a3 > 1)
          {
            v39 = v65.size.height;
            v38 = v65.size.width;
          }
          else
          {
            y = v65.origin.x;
            x = (double)v31 - v65.origin.y - v65.size.height;
            v39 = v65.size.width;
          }
          v66.origin.x = x;
          v66.origin.y = y;
          v66.size.width = v38;
          v66.size.height = v39;
          MinX = CGRectGetMinX(v66);
          v67.origin.x = x;
          v67.origin.y = y;
          v67.size.width = v38;
          v67.size.height = v39;
          MinY = CGRectGetMinY(v67);
          v43 = (float)((float)v32 - MinY) - (float)v32 * 0.5;
          if (a3 >= 2)
            v44 = MinX - (float)v31 * 0.5;
          else
            v44 = v43;
          v42 = MinX - (float)v31 * 0.5;
          v45 = -v42;
          if (a3 < 2)
            v43 = v45;
          v53[0] = v44;
          v53[1] = v43;
          v53[2] = v38;
          v53[3] = v39;
          objc_msgSend(v22, "setBoundingBox:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v53, "{CGRect={CGPoint=dd}{CGSize=dd}}"));

        }
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v62, 16);
        v11 = (v11 + i);
      }
      while (v10);
    }
  }
  return v47;
}

uint64_t **std::__tree<std::__value_type<unsigned long,SCNNode *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,SCNNode *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,SCNNode *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,SCNNode *>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void OZRenderParams::OZRenderParams(OZRenderParams *this, const OZRenderParams *a2)
{
  OZRenderState *v4;
  double v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  CGColorSpace *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CGColorSpace *v17;
  uint64_t v18;
  CGColorSpace *v19;
  uint64_t v20;
  CGColorSpace *v21;
  CGColorSpace *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = OZRenderState::OZRenderState((OZRenderState *)this, (const OZRenderState *)a2);
  LOBYTE(v4[1].var0.var0) = *((_BYTE *)a2 + 264);
  *(_OWORD *)&v4[1].var0.var1 = *((_OWORD *)a2 + 17);
  v5 = *((double *)a2 + 37);
  v4[1].var1 = *((double *)a2 + 36);
  v4[1].var2 = v5;
  if (v5 != 0.0)
  {
    v6 = (unint64_t *)(*(_QWORD *)&v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *((_QWORD *)a2 + 39);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_QWORD *)this + 39) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  PCImageAttributes::PCImageAttributes((OZRenderParams *)((char *)this + 320), (const OZRenderParams *)((char *)a2 + 320));
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 392));
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 408));
  *((_BYTE *)this + 424) = *((_BYTE *)a2 + 424);
  *((_OWORD *)this + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)this + 28) = *((_OWORD *)a2 + 28);
  *((_OWORD *)this + 29) = *((_OWORD *)a2 + 29);
  *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
  *((_BYTE *)this + 488) = *((_BYTE *)a2 + 488);
  *((_DWORD *)this + 123) = *((_DWORD *)a2 + 123);
  *((_BYTE *)this + 496) = *((_BYTE *)a2 + 496);
  *((_DWORD *)this + 125) = *((_DWORD *)a2 + 125);
  *((_QWORD *)this + 63) = *((_QWORD *)a2 + 63);
  *((_DWORD *)this + 128) = *((_DWORD *)a2 + 128);
  *((_WORD *)this + 258) = *((_WORD *)a2 + 258);
  v11 = *(_OWORD *)((char *)a2 + 520);
  v12 = *(_OWORD *)((char *)a2 + 552);
  *(_OWORD *)((char *)this + 536) = *(_OWORD *)((char *)a2 + 536);
  *(_OWORD *)((char *)this + 552) = v12;
  *(_OWORD *)((char *)this + 520) = v11;
  v13 = (CGColorSpace *)*((_QWORD *)a2 + 71);
  *((_QWORD *)this + 71) = v13;
  if (v13)
    PCCFRefTraits<CGColorSpace *>::retain(v13);
  *((_DWORD *)this + 144) = *((_DWORD *)a2 + 144);
  v14 = *(_OWORD *)((char *)a2 + 600);
  *(_OWORD *)((char *)this + 584) = *(_OWORD *)((char *)a2 + 584);
  *(_OWORD *)((char *)this + 600) = v14;
  v15 = *(_OWORD *)((char *)a2 + 632);
  *(_OWORD *)((char *)this + 616) = *(_OWORD *)((char *)a2 + 616);
  *(_OWORD *)((char *)this + 632) = v15;
  *(_OWORD *)((char *)this + 648) = *(_OWORD *)((char *)a2 + 648);
  v16 = *(_OWORD *)((char *)a2 + 680);
  *(_OWORD *)((char *)this + 664) = *(_OWORD *)((char *)a2 + 664);
  *(_OWORD *)((char *)this + 680) = v16;
  *((_BYTE *)this + 696) = *((_BYTE *)a2 + 696);
  *((_DWORD *)this + 175) = *((_DWORD *)a2 + 175);
  v17 = (CGColorSpace *)*((_QWORD *)a2 + 88);
  *((_QWORD *)this + 88) = v17;
  if (v17)
    PCCFRefTraits<CGColorSpace *>::retain(v17);
  v18 = *((_QWORD *)a2 + 89);
  *((_DWORD *)this + 180) = *((_DWORD *)a2 + 180);
  *((_QWORD *)this + 89) = v18;
  *((_BYTE *)this + 728) = *((_BYTE *)a2 + 728);
  *((_DWORD *)this + 184) = *((_DWORD *)a2 + 184);
  v19 = (CGColorSpace *)*((_QWORD *)a2 + 93);
  *((_QWORD *)this + 93) = v19;
  if (v19)
    PCCFRefTraits<CGColorSpace *>::retain(v19);
  v20 = *((_QWORD *)a2 + 94);
  *((_DWORD *)this + 190) = *((_DWORD *)a2 + 190);
  *((_QWORD *)this + 94) = v20;
  *((_BYTE *)this + 768) = *((_BYTE *)a2 + 768);
  *((_DWORD *)this + 194) = *((_DWORD *)a2 + 194);
  *((_BYTE *)this + 780) = *((_BYTE *)a2 + 780);
  v21 = (CGColorSpace *)*((_QWORD *)a2 + 98);
  *((_QWORD *)this + 98) = v21;
  if (v21)
    PCCFRefTraits<CGColorSpace *>::retain(v21);
  v22 = (CGColorSpace *)*((_QWORD *)a2 + 99);
  *((_QWORD *)this + 99) = v22;
  if (v22)
    PCCFRefTraits<CGColorSpace *>::retain(v22);
  *((_BYTE *)this + 800) = *((_BYTE *)a2 + 800);
  *((_DWORD *)this + 201) = *((_DWORD *)a2 + 201);
  v23 = *(_OWORD *)((char *)a2 + 808);
  v24 = *(_OWORD *)((char *)a2 + 824);
  v25 = *(_OWORD *)((char *)a2 + 856);
  *(_OWORD *)((char *)this + 840) = *(_OWORD *)((char *)a2 + 840);
  *(_OWORD *)((char *)this + 856) = v25;
  *(_OWORD *)((char *)this + 808) = v23;
  *(_OWORD *)((char *)this + 824) = v24;
  v26 = *(_OWORD *)((char *)a2 + 872);
  v27 = *(_OWORD *)((char *)a2 + 888);
  v28 = *(_OWORD *)((char *)a2 + 920);
  *(_OWORD *)((char *)this + 904) = *(_OWORD *)((char *)a2 + 904);
  *(_OWORD *)((char *)this + 920) = v28;
  *(_OWORD *)((char *)this + 872) = v26;
  *(_OWORD *)((char *)this + 888) = v27;
  *((_BYTE *)this + 936) = *((_BYTE *)a2 + 936);
  OZPlaybackEngine::OZPlaybackEngine((OZRenderParams *)((char *)this + 940), (double *)((char *)a2 + 940));
  *((_QWORD *)this + 119) = *((_QWORD *)a2 + 119);
  v29 = *(_OWORD *)((char *)a2 + 968);
  *((_QWORD *)this + 123) = *((_QWORD *)a2 + 123);
  *(_OWORD *)((char *)this + 968) = v29;
  *((_QWORD *)this + 124) = *((_QWORD *)a2 + 124);
  std::map<unsigned int,PCRect<double>>::map[abi:ne180100]((uint64_t)this + 1000, (uint64_t)a2 + 1000);
  std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t *)this + 128, (uint64_t)a2 + 1024);
  std::map<unsigned int,unsigned int>::map[abi:ne180100]((uint64_t *)this + 131, (uint64_t)a2 + 1048);
  *((_QWORD *)this + 134) = *((_QWORD *)a2 + 134);
  *((_QWORD *)this + 135) = *((_QWORD *)a2 + 135);
  v30 = *((_OWORD *)a2 + 68);
  *((_QWORD *)this + 138) = *((_QWORD *)a2 + 138);
  *((_OWORD *)this + 68) = v30;
  v31 = *(_OWORD *)((char *)a2 + 1112);
  *((_QWORD *)this + 141) = *((_QWORD *)a2 + 141);
  *(_OWORD *)((char *)this + 1112) = v31;
  v32 = *((_OWORD *)a2 + 71);
  *((_QWORD *)this + 144) = *((_QWORD *)a2 + 144);
  *((_OWORD *)this + 71) = v32;
  v33 = *(_OWORD *)((char *)a2 + 1160);
  *((_QWORD *)this + 147) = *((_QWORD *)a2 + 147);
  *(_OWORD *)((char *)this + 1160) = v33;
  v34 = *((_OWORD *)a2 + 74);
  *((_QWORD *)this + 150) = *((_QWORD *)a2 + 150);
  *((_OWORD *)this + 74) = v34;
  *((_DWORD *)this + 302) = *((_DWORD *)a2 + 302);
  *((_WORD *)this + 606) = *((_WORD *)a2 + 606);
  *((_OWORD *)this + 76) = 0u;
  *((_WORD *)this + 616) = *((_WORD *)a2 + 616);
  *((_QWORD *)this + 155) = *((_QWORD *)a2 + 155);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 156, (const PCSharedCount *)a2 + 156);
  *((_QWORD *)this + 157) = *((_QWORD *)a2 + 157);
  *((_QWORD *)this + 158) = *((_QWORD *)a2 + 158);
  *((_BYTE *)this + 1272) = *((_BYTE *)a2 + 1272);
  *((_QWORD *)this + 160) = *((_QWORD *)a2 + 160);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 161, (const PCSharedCount *)a2 + 161);
  *((_QWORD *)this + 162) = *((_QWORD *)a2 + 162);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 163, (const PCSharedCount *)a2 + 163);
  *((_WORD *)this + 656) = *((_WORD *)a2 + 656);
  v35 = *(_OWORD *)((char *)a2 + 1316);
  v36 = *(_OWORD *)((char *)a2 + 1348);
  *(_OWORD *)((char *)this + 1332) = *(_OWORD *)((char *)a2 + 1332);
  *(_OWORD *)((char *)this + 1348) = v36;
  *(_OWORD *)((char *)this + 1316) = v35;
  *((_QWORD *)this + 171) = &unk_1E64FC250;
  *((_QWORD *)this + 173) = 0;
  *((_QWORD *)this + 172) = 0;
  v37 = *((_DWORD *)a2 + 345);
  if (v37 <= 0)
    v38 = 0;
  else
    v38 = (2 * v37) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)this + 1368, v37, v38);
  if (*((int *)a2 + 345) >= 1)
  {
    v39 = 0;
    v40 = 0;
    do
    {
      LiLight::operator=(*((_QWORD *)this + 173) + v39, *((_QWORD *)a2 + 173) + v39);
      ++v40;
      v39 += 944;
    }
    while (v40 < *((int *)a2 + 345));
  }
  *((_BYTE *)this + 1392) = *((_BYTE *)a2 + 1392);
  *((_BYTE *)this + 1400) = *((_BYTE *)a2 + 1400);
  v41 = *((_QWORD *)a2 + 176);
  *((_QWORD *)this + 176) = v41;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
  *((_WORD *)this + 708) = *((_WORD *)a2 + 708);
  *((_BYTE *)this + 1418) = *((_BYTE *)a2 + 1418);
  *((_QWORD *)this + 120) = objc_msgSend(*((id *)a2 + 120), "copy");
}

void sub_1B2F5EEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  PCSharedCount *v13;
  PCSharedCount *v14;
  PCSharedCount *v15;
  uint64_t v16;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v16);
  PCSharedCount::~PCSharedCount(v15);
  PCSharedCount::~PCSharedCount(v14);
  PCSharedCount::~PCSharedCount(v13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v10 + 1216);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12, *(_QWORD **)(v10 + 1056));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(_QWORD **)(v10 + 1032));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a10, *(_QWORD **)(v10 + 1008));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 792));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 784));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 744));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 704));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 568));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 344));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v10 + 304);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v10 + 288);
  _Unwind_Resume(a1);
}

void OZRenderParams::~OZRenderParams(OZRenderParams *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 176);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 1368);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 163);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 161);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 156);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 1216);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1048, *((_QWORD **)this + 132));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1024, *((_QWORD **)this + 129));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1000, *((_QWORD **)this + 126));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 99);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 98);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 93);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 88);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 71);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 43);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
}

void OZRenderParams::setFFInputContext(uint64_t a1, void *a2)
{
  id v2;

  v2 = *(id *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = a2;

}

void OZFxPlugOOPDelegate::OZFxPlugOOPDelegate(OZFxPlugOOPDelegate *this, OZFxPlugSharedBase *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *(_QWORD *)this = &unk_1E65C2BD0;
  *((_QWORD *)this + 2) = 0;
  v4 = *((_QWORD *)a2 + 45);
  *(_QWORD *)&v10 = *((_QWORD *)a2 + 44);
  *((_QWORD *)&v10 + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v3, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void OZFxPlugOOPDelegate::~OZFxPlugOOPDelegate(OZFxPlugOOPDelegate *this)
{
  *(_QWORD *)this = &unk_1E65C2BD0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E65C2BD0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E29170);
}

const char *HgcMatteInt8::GetProgram(HgcMatteInt8 *this, HGRenderer *a2)
{
  unsigned int Target;
  int v5;
  unsigned int v7;

  Target = HGRenderer::GetTarget(a2, 393216);
  v5 = (*(uint64_t (**)(HgcMatteInt8 *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2);
  if (Target < 0x60600 && v5 == 0)
    v7 = 394016;
  else
    v7 = Target;
  if (v7 == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000391\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0.x = r0.x - half(hg_Params[0].x);\n"
             "    r0.x = clamp(r0.x + c0.x, 0.00000h, 1.00000h);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r1)*float4(r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=fa2d4cfa:a0eefd2f:8d5b4ecc:07d7e2b0\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000371\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r0.x = r0.x - hg_Params[0].x;\n"
             "    r0.x = clamp(r0.x + c0.x, 0.00000f, 1.00000f);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1*r0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0884afc2:e4cd50cf:2bdf39de:297b67ea\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (v7 <= 0x6060F || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    if (v7 - 394016 < 0xF0 || v7 > 0x6043F)
      return "!!ARBfp1.0     \n"
             "##LEN=000000027b\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "ATTRIB $f1=fragment.texcoord[1];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $c0={1.000000000,0.000000000,0.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1;\n"
             "##@\n"
             "##1\n"
             "TEX r0.x,$f1,texture[1],RECT;\n"
             "SUB r0.x,r0,$p0;\n"
             "ADD_SAT r0.x,r0,$c0;\n"
             "##0\n"
             "TEX r1,$f0,texture[0],RECT;\n"
             "MUL $o0,r1,r0.x;\n"
             "END\n"
             "##MD5=1b5b045c:de8ba7fd:cc5fcb6c:7137b273\n"
             "##SIG=00000000:00000003:00000001:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
    else
      return "!!ARBfp1.0     \n"
             "##LEN=00000003a8\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "ATTRIB $f1=fragment.texcoord[1];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $c0={0.5000000000,1.500000000,1.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1,r2,r3,r4;\n"
             "##@\n"
             "SUB r0.xy,$f1,$c0.x;\n"
             "FLR r1.xy,r0;\n"
             "FRC r0.xy,r0;\n"
             "ADD r2.xy,r1,$c0.x;\n"
             "##1\n"
             "TEX r2.x,r2,texture[1],RECT;\n"
             "ADD r3.xy,r1,$c0.yxzw;\n"
             "##1\n"
             "TEX r3.x,r3,texture[1],RECT;\n"
             "ADD r4.xy,r1,$c0;\n"
             "##1\n"
             "TEX r4.x,r4,texture[1],RECT;\n"
             "ADD r1.xy,r1,$c0.y;\n"
             "##1\n"
             "TEX r1,r1,texture[1],RECT;\n"
             "LRP r3.x,r0.x,r3,r2;\n"
             "LRP r4.x,r0.x,r1,r4;\n"
             "LRP r0.x,r0.y,r4,r3;\n"
             "SUB r0.x,r0,$p0;\n"
             "ADD_SAT r0.x,r0,$c0.z;\n"
             "##0\n"
             "TEX r2,$f0,texture[0],RECT;\n"
             "MUL $o0,r2,r0.x;\n"
             "END\n"
             "##MD5=073ac337:9afb9c8f:632ee472:d83d1c21\n"
             "##SIG=00000000:00000001:00000001:00000000:0001:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000031e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r0.x = r0.x - hg_ProgramLocal0.x;\n"
           "    r0.x = clamp(r0.x + c0.x, 0.00000, 1.00000);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1*r0.xxxx;\n"
           "}\n"
           "//MD5=40fb4a71:f9f50746:185d13c1:9a332c4d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMatteInt8::InitProgramDescriptor(HgcMatteInt8 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMatteInt8_hgc_visible", "//Metal1.0     \n//LEN=0000000235\n[[ visible ]] FragmentOut HgcMatteInt8_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).x;\n"
    "    r0.x = r0.x - hg_Params[0].x;\n"
    "    r0.x = clamp(r0.x + c0.x, 0.00000f, 1.00000f);\n"
    "    r1 = color0;\n"
    "    output.color0 = r1*r0.xxxx;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F5F330()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMatteInt8");
}

void sub_1B2F5F340(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F5F500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F5F558()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F5F550);
}

_QWORD *HgcMatteInt8::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMatteInt8 [hgc1]");
}

uint64_t HgcMatteInt8::BindTexture(HgcMatteInt8 *this, HGRenderer **a2, int a3)
{
  unsigned int Target;
  uint64_t v7;
  int v8;
  uint64_t result;

  Target = HGRenderer::GetTarget(a2[18], 393216);
  if (!a3)
  {
    (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 9))(a2, 0, 0);
    (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 6))(a2, 0, 0);
    HGHandler::TexCoord((HGHandler *)a2, 0, 0, 0, 0);
    v8 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2[18] + 128))(a2[18], 46);
    result = 0;
    if (v8)
      return result;
    (*((void (**)(HGRenderer **))*a2 + 21))(a2);
    return 0;
  }
  if (a3 == 1)
  {
    if (Target > 0x6043F || Target - 394016 <= 0xEF)
    {
      (*((void (**)(HGRenderer **, uint64_t, _QWORD))*a2 + 9))(a2, 1, 0);
      v7 = (*(uint64_t (**)(HgcMatteInt8 *, _QWORD))(*(_QWORD *)this + 312))(this, 0);
      (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, v7, v7);
    }
    HGHandler::TexCoord((HGHandler *)a2, 1, 0, 0, 0);
    if (!(*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2[18] + 128))(a2[18], 46))
      (*((void (**)(HGRenderer **))*a2 + 21))(a2);
    (*((void (**)(HGRenderer **, uint64_t))*a2 + 15))(a2, *((_QWORD *)this + 51) + 32);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcMatteInt8::Bind(HgcMatteInt8 *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HgcMatteInt8 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMatteInt8::RenderTile(HgcMatteInt8 *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v22;
  float32x4_t v23;
  int v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  float32x4_t v34;
  uint64_t v35;
  int32x4_t v36;
  float32x2_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t *v70;
  uint64_t v71;
  float32x4_t *v73;
  uint64_t v74;
  float32x4_t v75;
  uint64_t v76;
  int32x4_t v77;
  float32x2_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcMatteInt8 *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *((_DWORD *)a2 + 1);
  v7 = *((_DWORD *)a2 + 3) - v6;
  if (v7 >= 1)
  {
    v8 = 0;
    v9.f32[0] = (float)*(int *)a2 + 0.5;
    v9.f32[1] = (float)v6 + 0.5;
    v9.i32[2] = 0;
    v9.i32[3] = 1.0;
    v10 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v11 = 0uLL;
    v12 = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 51) + 80), vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(*((_QWORD *)this + 51) + 32), v9.f32[0]), vmulq_n_f32(*(float32x4_t *)(*((_QWORD *)this + 51) + 48), v9.f32[1])), vmulq_f32(*(float32x4_t *)(*((_QWORD *)this + 51) + 64), (float32x4_t)0)));
    v13 = *((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 10);
    v15 = 16 * *((int *)a2 + 22);
    v16 = 16 * *((int *)a2 + 6);
    __asm { FMOV            V3.4S, #4.0 }
    v22.i64[0] = 0x3F0000003F000000;
    v22.i64[1] = 0x3F0000003F000000;
    do
    {
      v23 = vaddq_f32(v12, vmulq_f32(v11, *(float32x4_t *)(*((_QWORD *)this + 51) + 48)));
      if (v10 < 4)
      {
        LODWORD(v71) = 0;
        v25 = 0uLL;
      }
      else
      {
        v24 = 0;
        v25 = 0uLL;
        v26 = 32;
        do
        {
          v27 = (float32x4_t *)*((_QWORD *)this + 51);
          v28 = v27[2];
          v29 = vaddq_f32(v23, vmulq_f32(v25, v28));
          v30 = vaddq_f32(v28, v29);
          v31 = vaddq_f32(v28, v30);
          v32 = vaddq_f32(v28, v31);
          v33 = *((int *)a2 + 26);
          v34 = vsubq_f32(v29, v9);
          v35 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v36 = vaddq_s32(vcvtq_s32_f32(v34), vcltzq_f32(v34));
            v37 = (float32x2_t)vsubq_f32(v34, vcvtq_f32_s32(v36)).u64[0];
            v38 = (float32x4_t *)(v35 + 16 * (v36.i32[0] + v36.i32[1] * (int)v33));
            v39 = vaddq_f32(*v38, vmulq_n_f32(vsubq_f32(v38[1], *v38), v37.f32[0]));
            v40 = vaddq_f32(v39, vmulq_lane_f32(vsubq_f32(vaddq_f32(v38[v33], vmulq_n_f32(vsubq_f32(v38[(int)v33 + 1], v38[v33]), v37.f32[0])), v39), v37, 1));
            v41 = vsubq_f32(v30, v9);
            v42 = vaddq_s32(vcvtq_s32_f32(v41), vcltzq_f32(v41));
            v41.i64[0] = vsubq_f32(v41, vcvtq_f32_s32(v42)).u64[0];
            v43 = (float32x4_t *)(v35 + 16 * (v42.i32[0] + v42.i32[1] * (int)v33));
            v44 = vaddq_f32(*v43, vmulq_n_f32(vsubq_f32(v43[1], *v43), v41.f32[0]));
            v45 = vaddq_f32(v44, vmulq_lane_f32(vsubq_f32(vaddq_f32(v43[v33], vmulq_n_f32(vsubq_f32(v43[(int)v33 + 1], v43[v33]), v41.f32[0])), v44), *(float32x2_t *)v41.f32, 1));
            v46 = vsubq_f32(v31, v9);
            v47 = vaddq_s32(vcvtq_s32_f32(v46), vcltzq_f32(v46));
            v46.i64[0] = vsubq_f32(v46, vcvtq_f32_s32(v47)).u64[0];
            v48 = (float32x4_t *)(v35 + 16 * (v47.i32[0] + v47.i32[1] * (int)v33));
            v49 = vaddq_f32(*v48, vmulq_n_f32(vsubq_f32(v48[1], *v48), v46.f32[0]));
            v50 = vaddq_f32(v49, vmulq_lane_f32(vsubq_f32(vaddq_f32(v48[v33], vmulq_n_f32(vsubq_f32(v48[(int)v33 + 1], v48[v33]), v46.f32[0])), v49), *(float32x2_t *)v46.f32, 1));
            v51 = vsubq_f32(v32, v9);
            v52 = vaddq_s32(vcvtq_s32_f32(v51), vcltzq_f32(v51));
            v51.i64[0] = vsubq_f32(v51, vcvtq_f32_s32(v52)).u64[0];
            v53 = (float32x4_t *)(v35 + 16 * (v52.i32[0] + v52.i32[1] * (int)v33));
            v54 = vaddq_f32(*v53, vmulq_n_f32(vsubq_f32(v53[1], *v53), v51.f32[0]));
            v55 = vaddq_f32(v54, vmulq_lane_f32(vsubq_f32(vaddq_f32(v53[v33], vmulq_n_f32(vsubq_f32(v53[(int)v33 + 1], v53[v33]), v51.f32[0])), v54), *(float32x2_t *)v51.f32, 1));
          }
          else
          {
            v56 = vaddq_f32(v34, v22);
            v57 = vcvtq_s32_f32(v56);
            v56.i64[0] = vaddq_s32(v57, vcgtq_f32(vcvtq_f32_s32(v57), v56)).u64[0];
            v40 = *(float32x4_t *)(v35 + 16 * (v56.i32[0] + v56.i32[1] * (int)v33));
            v58 = vaddq_f32(vsubq_f32(v30, v9), v22);
            v59 = vcvtq_s32_f32(v58);
            v58.i64[0] = vaddq_s32(v59, vcgtq_f32(vcvtq_f32_s32(v59), v58)).u64[0];
            v45 = *(float32x4_t *)(v35 + 16 * (v58.i32[0] + v58.i32[1] * (int)v33));
            v60 = vaddq_f32(vsubq_f32(v31, v9), v22);
            v61 = vcvtq_s32_f32(v60);
            v60.i64[0] = vaddq_s32(v61, vcgtq_f32(vcvtq_f32_s32(v61), v60)).u64[0];
            v50 = *(float32x4_t *)(v35 + 16 * (v60.i32[0] + v60.i32[1] * (int)v33));
            v62 = vaddq_f32(vsubq_f32(v32, v9), v22);
            v63 = vcvtq_s32_f32(v62);
            v62.i64[0] = vaddq_s32(v63, vcgtq_f32(vcvtq_f32_s32(v63), v62)).u64[0];
            v55 = *(float32x4_t *)(v35 + 16 * (v62.i32[0] + v62.i32[1] * (int)v33));
          }
          v25 = vaddq_f32(v25, _Q3);
          v64 = v27[6];
          v65 = v27[9];
          v66 = vmulq_n_f32(*(float32x4_t *)(v14 + v26 - 32), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v40, *v27), v64), v65), v64).f32[0]);
          v67 = vmulq_n_f32(*(float32x4_t *)(v14 + v26 - 16), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v45, *v27), v64), v65), v64).f32[0]);
          v68 = vmulq_n_f32(*(float32x4_t *)(v14 + v26), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v50, *v27), v64), v65), v64).f32[0]);
          v69 = vmulq_n_f32(*(float32x4_t *)(v14 + v26 + 16), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v55, *v27), v64), v65), v64).f32[0]);
          v70 = (float32x4_t *)(v13 + v26);
          v70[-2] = v66;
          v70[-1] = v67;
          *v70 = v68;
          v70[1] = v69;
          v24 -= 4;
          v26 += 64;
        }
        while (v10 + v24 > 3);
        LODWORD(v71) = -v24;
      }
      __asm { FMOV            V7.4S, #1.0 }
      if ((int)v71 < v10)
      {
        v71 = v71;
        do
        {
          v73 = (float32x4_t *)*((_QWORD *)this + 51);
          v74 = *((int *)a2 + 26);
          v75 = vsubq_f32(vaddq_f32(v23, vmulq_f32(v25, v73[2])), v9);
          v76 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v77 = vaddq_s32(vcvtq_s32_f32(v75), vcltzq_f32(v75));
            v78 = (float32x2_t)vsubq_f32(v75, vcvtq_f32_s32(v77)).u64[0];
            v79 = (float32x4_t *)(v76 + 16 * (v77.i32[0] + v77.i32[1] * (int)v74));
            v80 = vaddq_f32(*v79, vmulq_n_f32(vsubq_f32(v79[1], *v79), v78.f32[0]));
            v81 = vaddq_f32(v80, vmulq_lane_f32(vsubq_f32(vaddq_f32(v79[v74], vmulq_n_f32(vsubq_f32(v79[(int)v74 + 1], v79[v74]), v78.f32[0])), v80), v78, 1));
          }
          else
          {
            v82 = vaddq_f32(v75, v22);
            v83 = vcvtq_s32_f32(v82);
            v82.i64[0] = vaddq_s32(v83, vcgtq_f32(vcvtq_f32_s32(v83), v82)).u64[0];
            v81 = *(float32x4_t *)(v76 + 16 * (v82.i32[0] + v82.i32[1] * (int)v74));
          }
          *(float32x4_t *)(v13 + 16 * v71) = vmulq_n_f32(*(float32x4_t *)(v14 + 16 * v71), vminq_f32(vmaxq_f32(vaddq_f32(vsubq_f32(v81, *v73), v73[6]), v73[9]), v73[6]).f32[0]);
          v25 = vaddq_f32(v25, _Q7);
          ++v71;
        }
        while (v71 < v10);
      }
      v11 = vaddq_f32(v11, _Q7);
      ++v8;
      v14 += v15;
      v13 += v16;
    }
    while (v8 != v7);
  }
  return 0;
}

const HGTransform *HgcMatteInt8::GetDOD(HgcMatteInt8 *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  const HGTransform *v5;
  uint64_t v7;
  uint64_t v8;
  HGTransformUtils *v9;
  float v10;
  uint64_t DOD;
  uint64_t v12;
  float64x2_t v14[9];
  HGRect v15;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(const HGTransform **)&a4.var0;
  if (a3)
  {
    if (a3 == 1)
    {
      if ((*(int (**)(HgcMatteInt8 *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
      {
        v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        v5 = (const HGTransform *)HGRectGrow((uint64_t)v5, v4, v7);
        v4 = v8;
      }
      HGTransform::HGTransform((HGTransform *)v14);
      HGTransform::LoadMatrixf(v14, (float32x2_t *)(*((_QWORD *)this + 51) + 32));
      HGTransform::Invert2D((HGTransform *)v14);
      v10 = HGTransformUtils::MinW(v9);
      *(_QWORD *)&v15.var0 = v4;
      DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v14, v5, v15, 0.5, v10);
      v5 = (const HGTransform *)HGRectUnion(0, 0, DOD, v12);
      HGTransform::~HGTransform((HGTransform *)v14);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_1B2F5FD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HgcMatteInt8::GetROI(HgcMatteInt8 *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  HGTransformUtils *v8;
  float v9;
  uint64_t ROI;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v16[9];
  HGRect v17;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3)
  {
    if (a3 == 1)
    {
      HGTransform::HGTransform((HGTransform *)v16);
      HGTransform::LoadMatrixf(v16, (float32x2_t *)(*((_QWORD *)this + 51) + 32));
      v9 = HGTransformUtils::MinW(v8);
      *(_QWORD *)&v17.var0 = v4;
      ROI = HGTransformUtils::GetROI((HGTransformUtils *)v16, v5, v17, 0.5, v9);
      v5 = HGRectUnion(0, 0, ROI, v11);
      v13 = v12;
      HGTransform::~HGTransform((HGTransform *)v16);
      if ((*(int (**)(HgcMatteInt8 *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
      {
        v14 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        return HGRectGrow(v5, v13, v14);
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_1B2F5FE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void HgcMatteInt8::HgcMatteInt8(HgcMatteInt8 *this)
{
  uint64_t v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E65C2C68;
  *(_DWORD *)(v2 + 416) = 1;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 48) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 64) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 80) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 96) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 128) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 144) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050F80;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcMatteInt8 *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F5FF30(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMatteInt8::~HgcMatteInt8(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C2C68;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C408070C27FLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMatteInt8::~HgcMatteInt8(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMatteInt8::SetParameter(HgcMatteInt8 *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  __n128 *v8;
  uint64_t v9;

  if ((_DWORD)a2 == 1)
  {
    v8 = (__n128 *)*((_QWORD *)this + 51);
    if (v8[1].n128_f32[0] != a3.n128_f32[0]
      || v8[1].n128_f32[1] != a3.n128_f32[0]
      || v8[1].n128_f32[2] != 0.0
      || v8[1].n128_f32[3] != 0.0)
    {
      v8[1].n128_u32[0] = a3.n128_u32[0];
      v8[1].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v8[1].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v8[11] = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v7 = (float *)*((_QWORD *)this + 51);
  if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
    return 0;
  *v7 = a3.n128_f32[0];
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
LABEL_13:
  v9 = 1;
  *((_DWORD *)this + 104) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v9;
}

uint64_t HgcMatteInt8::GetParameter(HgcMatteInt8 *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[44];
    a3[1] = v5[45];
    a3[2] = v5[46];
    v4 = v5 + 47;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    v4 = v3 + 3;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

int8x16_t HgcMatteInt8::GetOutput(HgcMatteInt8 *this, HGRenderer *a2)
{
  uint64_t v2;
  float32x4_t v3;
  __int128 v4;
  int8x16_t v5;
  __int128 v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t result;

  if (*((_DWORD *)this + 104))
  {
    v2 = *((_QWORD *)this + 51);
    v3 = *(float32x4_t *)(v2 + 16);
    v4 = *(_OWORD *)(v2 + 112);
    v5 = (int8x16_t)vmulq_f32(v3, *(float32x4_t *)(v2 + 144));
    *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)(v2 + 96));
    *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v2 + 160), *(int8x16_t *)(v2 + 160), 8uLL), *(int8x8_t *)&v6);
    *(_OWORD *)(v2 + 32) = v6;
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)&v4);
    v7 = *((_QWORD *)this + 51);
    *(int8x8_t *)&v3.u32[2] = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v7 + 160), *(int8x16_t *)(v7 + 160), 8uLL), *(int8x8_t *)v3.f32);
    *(float32x4_t *)(v7 + 48) = v3;
    *(int8x16_t *)(*((_QWORD *)this + 51) + 64) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 160), v5, *(int8x16_t *)(*((_QWORD *)this + 51) + 128));
    v8 = (int8x16_t *)*((_QWORD *)this + 51);
    result = vbslq_s8(v8[10], v5, v8[9]);
    v8[5] = result;
    *((_DWORD *)this + 104) = 0;
  }
  return result;
}

const char *HgcMatteNormalComposite::GetProgram(HgcMatteNormalComposite *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_1444;
    else
      return aMetal10Len0000_1445;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return aArbfp10Len0000_35;
  }
  else
  {
    return aGlfs20Len00000_529;
  }
}

void HgcMatteNormalComposite::InitProgramDescriptor(HgcMatteNormalComposite *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMatteNormalComposite_hgc_visible", aMetal10Len0000_1446);
}

void sub_1B2F60220()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMatteNormalComposite");
}

void sub_1B2F60230(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3561C30;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F60430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F60490()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F60488);
}

_QWORD *HgcMatteNormalComposite::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMatteNormalComposite [hgc1]");
}

uint64_t HgcMatteNormalComposite::BindTexture(HgcMatteNormalComposite *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  uint64_t result;
  int v7;

  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 0;
      goto LABEL_7;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 1;
      goto LABEL_7;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 2;
      goto LABEL_7;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 3;
LABEL_7:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
        result = 0;
      }
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcMatteNormalComposite::Bind(HgcMatteNormalComposite *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, *((_QWORD *)this + 51) + 224, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 15, *((_QWORD *)this + 51) + 240, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 16, *((_QWORD *)this + 51) + 256, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 17, *((_QWORD *)this + 51) + 272, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 18, *((_QWORD *)this + 51) + 288, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 19, *((_QWORD *)this + 51) + 304, 1);
  (*(void (**)(HgcMatteNormalComposite *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMatteNormalComposite::RenderTile(HgcMatteNormalComposite *this, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  uint64_t v9;
  int32x2_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int8x16_t v146;
  float32x4_t v147;
  int8x16_t v148;
  float32x4_t v149;
  int8x16_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int8x16_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int8x16_t v175;
  float32x4_t v176;
  int8x16_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  int32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x16_t v207;
  int32x4_t v208;
  float32x4_t v209;
  int32x4_t v210;
  float32x4_t v211;
  int8x16_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  int8x16_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  int32x4_t v233;
  int8x16_t v234;
  float32x4_t v235;
  int8x16_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x4_t v240;
  int32x4_t v241;
  int8x16_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  int8x16_t v269;
  int8x16_t v270;
  float32x4_t v271;
  int32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  int8x16_t v278;
  float32x4_t v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  int32x4_t v294;
  int8x16_t v295;
  int8x16_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  int8x16_t v308;
  int8x16_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  int8x16_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  int32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  int8x16_t v326;
  float32x4_t v327;
  int8x16_t v328;
  int8x16_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    v6 = a2[14];
    v7 = a2[10];
    v8 = a2[12];
    v9 = a2[13].i32[0];
    v10 = a2[16];
    *(float32x2_t *)v11.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v11.i64[1] = 0x3F80000000000000;
    v302 = v11;
    v12 = a2[17].i32[0];
    v13 = 16 * a2[3].i32[0];
    v14 = 16 * a2[15].i32[0];
    v15 = 16 * a2[11].i32[0];
    v16 = 16 * v12;
    v17 = 1.0;
    do
    {
      if (v4 >= 1)
      {
        v18 = 0;
        v19 = (int8x16_t)v302;
        do
        {
          v20 = *((_QWORD *)this + 51);
          v22 = *(float32x4_t *)(v20 + 256);
          v21 = *(float32x4_t *)(v20 + 272);
          v333 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
          v335 = (float32x4_t)v19;
          v23 = *(float32x4_t *)(v20 + 320);
          v24 = *(int8x16_t *)(v20 + 336);
          v25 = (int8x16_t)vsubq_f32(v21, v23);
          v26 = *(int8x16_t *)(v20 + 384);
          *(int8x8_t *)v27.f32 = vqtbl1_s8(v19, *(int8x8_t *)v26.i8);
          *(int8x8_t *)&v27.u32[2] = vqtbl1_s8(v19, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
          v28 = *(float32x4_t *)(v20 + 368);
          v29 = (float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s64(vbslq_s8(v24, v25, (int8x16_t)vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)vsubq_f32(v333, v23)))).i64[0], 0), *(int8x16_t *)(v20 + 352));
          v30 = *(float32x4_t *)(v20 + 416);
          v31 = *(int8x16_t *)(v20 + 432);
          v315 = *(float32x4_t *)(v20 + 272);
          v32 = vabdq_f32(v315, v30);
          v328 = *(int8x16_t *)(v20 + 400);
          v33 = vbslq_s8(v328, (int8x16_t)v29, (int8x16_t)vsubq_f32(v27, vmulq_laneq_f32(*(float32x4_t *)(v20 + 208), v28, 3)));
          v34 = vbslq_s8(v24, *(int8x16_t *)(*(_QWORD *)&v10 + v18), v33);
          v35 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
          v36 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_n_f32(vnegq_f32(v35), *(float *)v34.i32), v34);
          v37 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(v22, v36, 3), (int8x16_t)v36);
          v38 = vmulq_f32(v22, vnegq_f32(v37));
          v39 = *(float32x4_t *)(v20 + 448);
          v40 = *(float32x4_t *)(v20 + 464);
          v41 = vminq_f32(vmaxq_f32(vmulq_f32(v23, vrecpeq_f32(v35)), v39), v40);
          v42 = (int8x16_t)vmulq_f32(v41, vrecpsq_f32(v35, v41));
          v43 = *(int8x16_t *)(v20 + 480);
          v44 = vbslq_s8(v43, v42, vbslq_s8(v31, (int8x16_t)v38, (int8x16_t)v37));
          v42.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
          *(float32x2_t *)v26.i8 = vmul_f32((float32x2_t)vqtbl1_s8(v44, *(int8x8_t *)(v20 + 496)), (float32x2_t)vqtbl1_s8(v44, *(int8x8_t *)v26.i8));
          v26.i64[1] = v42.i64[0];
          v45 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL), v28), (int8x16_t)v28, (int8x16_t)v30);
          *(float32x2_t *)v38.f32 = vmul_f32((float32x2_t)vqtbl1_s8(v26, *(int8x8_t *)(v20 + 512)), (float32x2_t)vqtbl1_s8(v26, *(int8x8_t *)(v20 + 528)));
          v38.i64[1] = __PAIR64__(LODWORD(v17), v42.u32[0]);
          v46 = (int8x16_t)vcgtq_f32(v29, v28);
          v42.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v33, v33, 8uLL), v28), (int8x16_t)v28, (int8x16_t)v30).u64[0];
          v47 = *(float32x4_t *)(v20 + 112);
          v332 = *(float32x4_t *)(v20 + 96);
          v48 = vsubq_f32(vmulq_n_f32(v47, *(float *)v42.i32), v38);
          v28.i64[0] = vbslq_s8(v46, (int8x16_t)v28, (int8x16_t)v23).u64[0];
          v49 = *(float32x4_t *)(v20 + 128);
          v317 = *(float32x4_t *)(v20 + 144);
          v50 = vsubq_f32(vmulq_lane_f32(v49, *(float32x2_t *)v28.f32, 1), v38);
          v51 = vmulq_f32(v50, v50);
          v52 = vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL));
          v53 = vmulq_f32(v48, v48);
          v54 = vaddq_f32(v53, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL));
          v55 = vbslq_s8(v43, (int8x16_t)vaddq_f32(v54, (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)), (int8x16_t)v48);
          v56 = (float32x4_t)vextq_s8(v55, v55, 0xCuLL);
          v57 = vbslq_s8(v43, (int8x16_t)vaddq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL)), (int8x16_t)v50);
          v58 = vminq_f32(vrsqrteq_f32(v56), v40);
          v59 = vminq_f32(vmulq_f32(v58, vrsqrtsq_f32(vmulq_f32(v58, v56), v58)), v40);
          v28.i64[1] = v45.i64[1];
          v60 = (float32x4_t)vextq_s8(v57, v57, 0xCuLL);
          v61 = (int8x16_t)vmulq_f32(v59, vrsqrtsq_f32(vmulq_f32(v59, v56), v59));
          v62 = vminq_f32(vrsqrteq_f32(v60), v40);
          v63 = vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v62, v60), v62)), v40);
          v64 = (float32x4_t)vbslq_s8(v24, v61, (int8x16_t)v28);
          v65 = (int8x16_t)vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, v60), v63));
          v66 = (float32x4_t)vextq_s8(v65, v65, 4uLL);
          v67 = vminq_f32(vmaxq_f32(vrecpeq_f32(v66), v39), v40);
          v68 = vminq_f32(vmaxq_f32(vmulq_f32(v67, vrecpsq_f32(v66, v67)), v39), v40);
          v69 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vmulq_f32(v68, vrecpsq_f32(v66, v68)), (int8x16_t)v50);
          v71 = *(int32x4_t *)(v20 + 288);
          v70 = *(float32x4_t *)(v20 + 304);
          v72 = vmulq_n_f32(v69, *(float *)v65.i32);
          v73 = (float32x4_t)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL);
          v74 = vminq_f32(vmaxq_f32(vrecpeq_f32(v73), v39), v40);
          v75 = vminq_f32(vmaxq_f32(vmulq_f32(v74, vrecpsq_f32(v73, v74)), v39), v40);
          v76 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vmulq_f32(v75, vrecpsq_f32(v73, v75)), (int8x16_t)v48);
          v77 = (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL);
          v78 = *(float32x4_t *)(v20 + 544);
          v79 = *(float32x4_t *)(v20 + 560);
          v80 = (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)vsubq_f32(v76, v77), (int8x16_t)v48), v78);
          v42.i64[1] = vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)vsubq_f32(v69, (float32x4_t)vextq_s8(*(int8x16_t *)&v71, *(int8x16_t *)&v71, 8uLL))), v39).i64[1];
          v81 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v43, v80, (int8x16_t)v48), v64.f32[0]);
          v82 = (float32x4_t)vbslq_s8(v43, v80, v81);
          v83 = (float32x4_t)vrev64q_s32((int32x4_t)v70);
          v84 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(v83, vmulq_laneq_f32(v70, v82, 3)), v42);
          v85 = vbslq_s8(v43, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32(vmulq_f32(vmulq_laneq_f32(v82, v70, 2), v82), (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL)), v81), v79), v81);
          v86 = (float32x4_t)vextq_s8(v85, v85, 0xCuLL);
          v87 = vminq_f32(vmaxq_f32(vrecpeq_f32(v86), v39), v40);
          v88 = vmulq_f32(v87, vrecpsq_f32(v86, v87));
          v89 = *(float32x4_t *)(v20 + 576);
          v90 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vsubq_f32(v333, v89), v81);
          *(int8x8_t *)&v90.u32[2] = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v20 + 592), *(int8x16_t *)(v20 + 592), 8uLL));
          v91 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(v83, vmulq_laneq_f32(v70, v84, 2)), v42);
          v92 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL), vmulq_laneq_f32(vmulq_laneq_f32(v83, v91, 2), v91, 2));
          v93 = vminq_f32(vmaxq_f32(v88, v39), v40);
          v94 = (int8x16_t)vmaxq_f32(v92, v79);
          v95 = (float32x4_t)vextq_s8(v94, v94, 8uLL);
          v96 = vminq_f32(vmaxq_f32(vrecpeq_f32(v95), v89), v40);
          v326 = vbslq_s8((int8x16_t)vcgtq_f32(v90, v78), (int8x16_t)v78, (int8x16_t)v30);
          v97 = (float32x4_t)vbslq_s8(v43, v326, (int8x16_t)v90);
          v98 = vmulq_f32(v93, vrecpsq_f32(v86, v93));
          v99 = vsubq_f32(vmulq_laneq_f32(v317, v97, 3), v38);
          v100 = vminq_f32(vmaxq_f32(vmulq_f32(v96, vrecpsq_f32(v95, v96)), v89), v40);
          v101 = (int8x16_t)vmulq_f32(v100, vrecpsq_f32(v95, v100));
          v102 = vmulq_f32(v99, v99);
          v103 = vaddq_f32(v102, (float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL));
          v104 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32(v103, (float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL)), (int8x16_t)v38);
          v105 = vminq_f32(vrsqrteq_f32(v104), v40);
          v98.i64[0] = vbslq_s8(v24, (int8x16_t)v98, v101).u64[0];
          v106 = vminq_f32(vmulq_f32(v105, vrsqrtsq_f32(vmulq_f32(v105, v104), v105)), v40);
          v329 = (int8x16_t)vmulq_f32(v106, vrsqrtsq_f32(vmulq_f32(v106, v104), v106));
          v107 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vabdq_f32(v315, v89), v78), (int8x16_t)v78, (int8x16_t)v30);
          v319 = *(float32x4_t *)(v20 + 160);
          v108 = vsubq_f32(vmulq_laneq_f32(v319, v107, 3), v38);
          v109 = vmulq_f32(v108, v108);
          v110 = vaddq_f32(v109, (float32x4_t)vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL));
          v111 = vbslq_s8(v24, (int8x16_t)v91, (int8x16_t)vaddq_f32(v110, (float32x4_t)vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL)));
          v112 = (float32x4_t)vextq_s8(v111, v111, 8uLL);
          v113 = vminq_f32(vrsqrteq_f32(v112), v40);
          v114 = vminq_f32(vmulq_f32(v113, vrsqrtsq_f32(vmulq_f32(v113, v112), v113)), v40);
          v115 = (int8x16_t)vmulq_f32(v114, vrsqrtsq_f32(vmulq_f32(v114, v112), v114));
          v116 = (float32x4_t)vbslq_s8(v43, v115, (int8x16_t)v38);
          v117 = (float32x4_t)vrev64q_s32((int32x4_t)v116);
          v118 = vminq_f32(vmaxq_f32(vrecpeq_f32(v117), v89), v40);
          v119 = vminq_f32(vmaxq_f32(vmulq_f32(v118, vrecpsq_f32(v117, v118)), v89), v40);
          v111.i64[1] = vsubq_f32(vmulq_f32(v119, vrecpsq_f32(v117, v119)), (float32x4_t)vrev64q_s32(v71)).i64[1];
          v316 = (float32x4_t)vbslq_s8(v43, vbslq_s8((int8x16_t)vcgtq_f32(v32, v78), (int8x16_t)v78, (int8x16_t)v30), (int8x16_t)v108);
          v120 = (float32x4_t)vbslq_s8(v43, v329, (int8x16_t)vmulq_lane_f32(v72, *(float32x2_t *)v64.f32, 1));
          v121 = (float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL);
          v122 = vminq_f32(vmaxq_f32(vrecpeq_f32(v121), v89), v40);
          v123 = vminq_f32(vmaxq_f32(vmulq_f32(v122, vrecpsq_f32(v121, v122)), v89), v40);
          v124 = *(float32x4_t *)(v20 + 608);
          v125 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v123, vrecpsq_f32(v121, v123)), v111), v77), v111), v124), v111);
          v126 = v31;
          v127 = (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL);
          v128 = (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL);
          v129 = vmaxq_f32(v125, v39);
          v125.i64[1] = vaddq_f32(v128, vmulq_lane_f32(v127, *(float32x2_t *)&v125, 1)).i64[1];
          v130 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_lane_f32(v70, *(float32x2_t *)v125.f32, 1), (int8x16_t)v125);
          v130.i64[0] = vbslq_s8(v24, (int8x16_t)v130, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v130, 1), vmulq_laneq_f32(v130, v130, 2))).u64[0];
          v130.i64[1] = vaddq_f32(v128, vmulq_laneq_f32(v127, v129, 2)).i64[1];
          v314 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), v78), (int8x16_t)v78, (int8x16_t)v30);
          v30.i64[0] = v98.i64[0];
          v30.i64[1] = v129.i64[1];
          v131 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_f32(v70, v30), (int8x16_t)v130);
          v132 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v49, v64, 2), v120);
          v133 = *(float32x4_t *)(v20 + 640);
          v322 = *(int32x4_t *)(v20 + 656);
          v134 = vbslq_s8((int8x16_t)vcgtq_f32(v32, v89), (int8x16_t)v89, (int8x16_t)v133);
          v135 = vmulq_n_f32(v47, *(float *)v134.i32);
          v78.i64[0] = vbslq_s8(v24, v134, (int8x16_t)v73).u64[0];
          v312 = (float32x4_t)vbslq_s8(v43, v314, (int8x16_t)v99);
          v78.i64[1] = v316.i64[1];
          v136 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vrev64q_s32((int32x4_t)v312), (int8x16_t)v78);
          v131.i64[1] = vaddq_f32(vmulq_f32(v129, v131), (float32x4_t)vrev64q_s32(*(int32x4_t *)&v131)).i64[1];
          v137 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, *(int8x16_t *)(*(_QWORD *)&v8 + v18));
          v138 = vmulq_f32(v137, v137);
          v139 = (int8x16_t)vaddq_f32(v138, (float32x4_t)vrev64q_s32((int32x4_t)v138));
          v140 = vaddq_f32(v138, (float32x4_t)vextq_s8(v139, v139, 0xCuLL));
          v141 = vbslq_s8(v24, (int8x16_t)v131, (int8x16_t)vmaxq_f32(v131, *(float32x4_t *)(v20 + 624)));
          v142 = (int8x16_t)vrev64q_s32((int32x4_t)v97);
          v142.i64[0] = v141.i64[0];
          v143 = vbslq_s8(v43, (int8x16_t)v107, v142);
          v144 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v64, v143);
          v145 = vminq_f32(vmulq_f32(v23, vrsqrteq_f32(v140)), v40);
          v146 = (int8x16_t)vmulq_laneq_f32(v137, vmulq_f32(v145, vrsqrtsq_f32(vmulq_f32(v145, v140), v145)), 2);
          v147 = vmulq_f32(v116, v116);
          v148 = (int8x16_t)vaddq_f32(v147, (float32x4_t)vrev64q_s32((int32x4_t)v147));
          v149 = vaddq_f32(v147, (float32x4_t)vextq_s8(v148, v148, 0xCuLL));
          v150 = (int8x16_t)vaddq_f32(v135, (float32x4_t)vbslq_s8(v43, v326, (int8x16_t)vmulq_n_f32(v97, *(float *)v143.i32)));
          v151 = (float32x4_t)vextq_s8(v141, v141, 0xCuLL);
          v152 = vminq_f32(vmaxq_f32(vrecpeq_f32(v151), v133), v40);
          v153 = vminq_f32(vrsqrteq_f32(v149), v40);
          v154 = vminq_f32(vmulq_f32(v153, vrsqrtsq_f32(vmulq_f32(v149, v153), v153)), v40);
          v155 = (int8x16_t)vmulq_laneq_f32(vnegq_f32(v116), vmulq_f32(v154, vrsqrtsq_f32(vmulq_f32(v149, v154), v154)), 2);
          v156 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, v146);
          v157 = vmulq_f32(*(float32x4_t *)v20, v156);
          v157.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v157, (int8x16_t)v136, 4uLL), vaddq_f32(v157, (float32x4_t)vrev64q_s32((int32x4_t)v157))).u64[0];
          v307 = *(float32x4_t *)(v20 + 48);
          v158 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v20 + 32), v156);
          v159 = vminq_f32(vmaxq_f32(vmulq_f32(v152, vrecpsq_f32(v151, v152)), v133), v40);
          v157.i64[1] = vaddq_f32((float32x4_t)vrev64q_s32(v158), vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v158, *(int8x16_t *)&v158, 4uLL), (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v158, 0))).i64[1];
          v98.i64[1] = vmulq_f32(v159, vrecpsq_f32(v151, v159)).i64[1];
          v160 = vmulq_f32(*(float32x4_t *)(v20 + 16), v156);
          v161 = vmulq_f32(v98, v144);
          v162 = (float32x4_t)vbslq_s8(v43, v329, v132);
          v163 = vbslq_s8(v328, (int8x16_t)vaddq_f32(v160, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v160, (int8x16_t)v160, 0xCuLL))), (int8x16_t)v157);
          v327 = (float32x4_t)vbslq_s8(v43, v115, v155);
          v164 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, (int8x16_t)vaddq_f32(v162, v327));
          v165 = vmulq_f32(v164, v164);
          v308 = (int8x16_t)vabsq_f32(v333);
          v166 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vaddq_f32(v165, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v165, (int8x16_t)v165, 0xCuLL))), v308);
          v167 = vminq_f32(vrsqrteq_f32(v166), v40);
          v168 = (int8x16_t)vaddq_f32(v161, v136);
          v169 = vminq_f32(vmulq_f32(v167, vrsqrtsq_f32(vmulq_f32(v167, v166), v167)), v40);
          v170 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_f32(v169, vrsqrtsq_f32(vmulq_f32(v169, v166), v169)), v308);
          v171 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v107, (int8x16_t)vmulq_laneq_f32(v164, v170, 2));
          v172 = (float32x4_t)vextq_s8(v163, v163, 4uLL);
          v173 = vmulq_f32(v172, v171);
          v173.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v136, 4uLL), vaddq_f32(v173, (float32x4_t)vrev64q_s32((int32x4_t)v173))).u64[0];
          v173.i64[1] = v171.i64[1];
          v174 = vmulq_f32(v172, v162);
          v175 = vbslq_s8(v126, (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v126, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL), vaddq_f32(v174, (float32x4_t)vrev64q_s32((int32x4_t)v174))), v168), v124), v168);
          *(float32x2_t *)v172.f32 = vabs_f32(*(float32x2_t *)v175.i8);
          v172.i64[1] = vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL).u64[0];
          v162.i64[0] = vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v172, v133)).u64[0];
          v176 = (float32x4_t)vbslq_s8(v43, v326, v150);
          v157.i64[0] = v162.i64[0];
          v157.i64[1] = vdupq_laneq_s64((int64x2_t)v170, 1).u64[0];
          v162.i64[1] = v170.i64[1];
          v177 = v24;
          v178 = (float32x4_t)vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v157), v89), (int8x16_t)v89, (int8x16_t)v133), (int8x16_t)v173);
          v179 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v162, (int8x16_t)vaddq_f32(v327, v176));
          v323 = *(float32x4_t *)(v20 + 224);
          v180 = *(float32x4_t *)(v20 + 240);
          v181 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vceqq_f32((float32x4_t)vrev64q_s32((int32x4_t)v180), v124)), v124), (int8x16_t)v39, vbslq_s8(v126, (int8x16_t)vmaxq_f32(v178, v124), (int8x16_t)v178));
          v334 = *(float32x4_t *)(v20 + 672);
          v325 = *(float32x4_t *)(v20 + 688);
          v182 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v181, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v325, (int8x16_t)vcgtq_f32(v334, v181)));
          v183 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v181, (int8x16_t)v322), (int8x16_t)v39);
          v184 = *(float32x4_t *)(v20 + 736);
          v304 = *(float32x4_t *)(v20 + 720);
          v185 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v183, v304));
          v331 = *(float32x4_t *)(v20 + 704);
          v186 = *(float32x4_t *)(v20 + 752);
          v187 = vsubq_f32(vsubq_f32(v183, v39), vmulq_f32(vmulq_f32(v184, v185), v183));
          v320 = *(float32x4_t *)(v20 + 800);
          v321 = *(float32x4_t *)(v20 + 768);
          v303 = *(float32x4_t *)(v20 + 816);
          v306 = v184;
          v188 = vmulq_f32(v187, v187);
          v189 = *(float32x4_t *)(v20 + 848);
          v305 = *(float32x4_t *)(v20 + 832);
          v190 = vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(v182, v331), v185), vmulq_f32(v187, vaddq_f32(v189, vmulq_f32(v187, vaddq_f32(vaddq_f32(v303, vmulq_f32(v305, v187)), vmulq_f32(v188, vaddq_f32(vaddq_f32(v186, vmulq_f32(v321, v187)), vmulq_f32(v188, vaddq_f32(*(float32x4_t *)(v20 + 784), vmulq_f32(v320, v187)))))))))), v180.f32[0]);
          v191 = *(float32x4_t *)(v20 + 864);
          v192 = *(float32x4_t *)(v20 + 880);
          v193 = vmaxq_f32(v190, v191);
          v194 = vcvtq_f32_s32(vcvtq_s32_f32(v193));
          v195 = vsubq_f32(v194, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v194, v193)));
          v196 = vsubq_f32(v193, v195);
          v198 = *(float32x4_t *)(v20 + 896);
          v197 = *(float32x4_t *)(v20 + 912);
          v324 = v198;
          v199 = vmulq_f32(v179, v179);
          v201 = *(float32x4_t *)(v20 + 928);
          v200 = *(float32x4_t *)(v20 + 944);
          v202 = (int32x4_t)vbslq_s8(v177, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL), vaddq_f32(v199, (float32x4_t)vrev64q_s32((int32x4_t)v199))), v163);
          v203 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 4uLL), v176);
          v150.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v203, 1), vaddq_f32(v203, (float32x4_t)vrev64q_s32((int32x4_t)v203))).u64[0];
          v150.i64[1] = v176.i64[1];
          v204 = (float32x4_t)vrev64q_s32(v202);
          v205 = vminq_f32(vrsqrteq_f32(v204), v40);
          v206 = vminq_f32(vmulq_f32(v205, vrsqrtsq_f32(vmulq_f32(v205, v204), v205)), v40);
          v207 = (int8x16_t)vmulq_f32(v206, vrsqrtsq_f32(vmulq_f32(v206, v204), v206));
          v208 = vcvtq_s32_f32(v195);
          v209 = *(float32x4_t *)(v20 + 976);
          v210 = *(int32x4_t *)(v20 + 960);
          v211 = (float32x4_t)vbslq_s8(v126, v207, v150);
          v212 = *(int8x16_t *)(v20 + 336);
          v313 = (float32x4_t)vbslq_s8(v177, (int8x16_t)vmaxq_f32(v211, v200), v163);
          v213 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v211, (int8x16_t)vmulq_lane_f32(v179, *(float32x2_t *)v211.f32, 1));
          v214 = (float32x4_t)vbslq_s8(v126, (int8x16_t)vmulq_f32(vaddq_f32(v39, vmulq_f32(v196, vaddq_f32(v200, vmulq_f32(v196, vaddq_f32(vaddq_f32(v197, vmulq_f32(v201, v196)), vmulq_f32(vmulq_f32(v196, v196), vaddq_f32(v192, vmulq_f32(v198, v196)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v210, v208), 0x17uLL)), (int8x16_t)v178);
          v215 = (float32x4_t)vextq_s8((int8x16_t)v313, (int8x16_t)v313, 4uLL);
          v216 = vmulq_f32(v215, v213);
          v216.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v216, 1), vaddq_f32(v216, (float32x4_t)vrev64q_s32((int32x4_t)v216))).u64[0];
          v216.i64[1] = v213.i64[1];
          v330 = (float32x4_t)vbslq_s8(v43, v329, (int8x16_t)vmulq_n_f32(v307, *(float *)v175.i32));
          v217 = (float32x4_t)vbslq_s8(v126, vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32(v313), v175)), v133)), (int8x16_t)v216);
          v218 = (float32x4_t)vbslq_s8(v212, (int8x16_t)vmaxq_f32(v217, v209), (int8x16_t)v217);
          v219 = vbslq_s8(v126, vbslq_s8((int8x16_t)vcgtq_f32(v218, v124), (int8x16_t)v124, (int8x16_t)v39), (int8x16_t)v218);
          v309 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vceqq_f32(v180, v209)), v209);
          v220 = (float32x4_t)vbslq_s8(v309, (int8x16_t)v201, v219);
          v221 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v220, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)vcgtq_f32(v197, v220)));
          v222 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v220, (int8x16_t)v210), (int8x16_t)v201);
          v223 = (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v222, v191));
          v224 = vsubq_f32(vsubq_f32(v222, v201), vmulq_f32(vmulq_f32(v189, v223), v222));
          v225 = vmulq_f32(v224, v224);
          v226 = vmaxq_f32(vmulq_f32(v180, vaddq_f32(vaddq_f32(vsubq_f32(v221, v192), v223), vmulq_f32(v224, vaddq_f32(v184, vmulq_f32(v224, vaddq_f32(vaddq_f32(v321, vmulq_f32(v186, v224)), vmulq_f32(v225, vaddq_f32(vaddq_f32(v305, vmulq_f32(v303, v224)), vmulq_f32(v225, vaddq_f32(v320, vmulq_f32(*(float32x4_t *)(v20 + 784), v224))))))))))), v304);
          v227 = vcvtq_f32_s32(vcvtq_s32_f32(v226));
          v228 = vsubq_f32(v227, (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v227, v226)));
          v225.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v214, v200), (int8x16_t)v200, (int8x16_t)vrev64q_s32((int32x4_t)v214)).u64[0];
          v229 = *(float32x4_t *)(v20 + 64);
          v310 = *(float32x4_t *)(v20 + 80);
          v311 = vmulq_lane_f32(v229, *(float32x2_t *)v168.i8, 1);
          v225.i64[1] = v214.i64[1];
          v230 = vsubq_f32(v226, v228);
          v232 = *(float32x4_t *)(v20 + 992);
          v231 = *(float32x4_t *)(v20 + 1008);
          v124.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, v308, v175), v200), (int8x16_t)v200, (int8x16_t)v201).u64[0];
          v124.i64[1] = v179.i64[1];
          v233 = (int32x4_t)vbslq_s8(v212, (int8x16_t)vmulq_f32(vaddq_f32(v201, vmulq_f32(v230, vaddq_f32(v231, vmulq_f32(v230, vaddq_f32(vaddq_f32(v334, vmulq_f32(v232, v230)), vmulq_f32(vmulq_f32(v230, v230), vaddq_f32(v331, vmulq_f32(v325, v230)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v228), v322), 0x17uLL)), v219);
          v234 = (int8x16_t)vaddq_f32(vmulq_n_f32(v307, *(float *)vbslq_s8(v212, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32(v315), v175), v209), (int8x16_t)v209, (int8x16_t)v201), v175).i32), (float32x4_t)vbslq_s8(v43, (int8x16_t)v124, (int8x16_t)vmulq_n_f32(v229, v124.f32[0])));
          v235 = (float32x4_t)vbslq_s8(v43, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)v124, v234), v232), (int8x16_t)v232, (int8x16_t)v231), v234);
          v236 = v212;
          v228.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v233), v209), (int8x16_t)v209, (int8x16_t)v233).u64[0];
          v228.i64[1] = v233.i64[1];
          v237 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v228, (int8x16_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v332, *(float *)vbslq_s8(v212, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32((float32x4_t)vextq_s8((int8x16_t)v315, (int8x16_t)v315, 0xCuLL)), v175), v209), (int8x16_t)v209, (int8x16_t)v201), v175).i32), vaddq_f32(vmulq_laneq_f32(v310, v235, 3), v235)),
                                             vmulq_f32(v323, (float32x4_t)vbslq_s8(v43, (int8x16_t)v228, (int8x16_t)vmulq_n_f32(v330, v228.f32[0])))));
          v238 = (float32x4_t)vbslq_s8(v43, v314, (int8x16_t)vmulq_laneq_f32(v312, v330, 3));
          v239 = (int8x16_t)vaddq_f32(vmulq_f32(v323, (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vmulq_n_f32(v311, v225.f32[0]))), v237);
          v240 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v317, v238, 3), vmulq_laneq_f32(v238, v237, 3)));
          v241 = (int32x4_t)vmulq_f32(v215, v240);
          v242 = (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v241), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v241, (int8x16_t)v241, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL))), v239), *(float32x4_t *)(v20 + 544));
          v318 = (float32x4_t)vbslq_s8(v43, v242, v239);
          v243 = *(float32x4_t *)(v20 + 1024);
          v244 = (float32x4_t)vbslq_s8(v212, vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32((float32x4_t)vbslq_s8(v212, (int8x16_t)vabsq_f32((float32x4_t)vextq_s8((int8x16_t)v318, (int8x16_t)v318, 0xCuLL)), v175), v243)), v175);
          v245 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vaddq_f32(v327, v240));
          v246 = vmulq_f32(v245, v245);
          v247 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vaddq_f32(v246, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 0xCuLL))), (int8x16_t)v244);
          v248 = vminq_f32(vrsqrteq_f32(v247), v243);
          v249 = vminq_f32(vmulq_f32(v248, vrsqrtsq_f32(vmulq_f32(v248, v247), v248)), v243);
          v250 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v225, (int8x16_t)vmulq_laneq_f32(v245, (float32x4_t)vbslq_s8(v328, (int8x16_t)vmulq_f32(v249, vrsqrtsq_f32(vmulq_f32(v249, v247), v249)), (int8x16_t)v244), 2));
          v251 = vmulq_f32(v215, v250);
          v252 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v251, 1), vaddq_f32(v251, (float32x4_t)vrev64q_s32((int32x4_t)v251)));
          v253 = (float32x4_t)vbslq_s8(v328, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v250, v252, 8uLL), v231), (int8x16_t)v244);
          v252.i64[1] = v250.i64[1];
          v254 = (float32x4_t)vbslq_s8(v43, v252, (int8x16_t)vmulq_laneq_f32(v316, v327, 3));
          v255 = vaddq_f32(vmulq_laneq_f32(v319, v316, 3), vmulq_laneq_f32(v254, v254, 3));
          v256 = (float32x4_t)vbslq_s8(v212, vbslq_s8((int8x16_t)vcgtq_f32(v253, v209), (int8x16_t)v209, (int8x16_t)v201), (int8x16_t)v253);
          v257 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v231, (int8x16_t)vceqq_f32((float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL), v243)), v243), (int8x16_t)v231, (int8x16_t)vrev64q_s32((int32x4_t)v256));
          v258 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v257, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v200, v257)));
          v259 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v257, (int8x16_t)v210), (int8x16_t)v231);
          v260 = (float32x4_t)vandq_s8((int8x16_t)v231, (int8x16_t)vcgtq_f32(v259, v324));
          v261 = vsubq_f32(vsubq_f32(v259, v231), vmulq_f32(vmulq_f32(v192, v260), v259));
          v262 = *(float32x4_t *)(v20 + 848);
          v263 = vmulq_f32(v261, v261);
          v264 = *(float32x4_t *)(v20 + 784);
          v265 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(v258, v197), v260), vmulq_f32(v261, vaddq_f32(v321, vmulq_f32(v261, vaddq_f32(vaddq_f32(v320, vmulq_f32(v264, v261)), vmulq_f32(v263, vaddq_f32(vaddq_f32(v191, vmulq_f32(v262, v261)), vmulq_f32(v263, vaddq_f32(v305, vmulq_f32(v303, v261)))))))))), v180.f32[0]), v186);
          v266 = vcvtq_f32_s32(vcvtq_s32_f32(v265));
          v267 = vsubq_f32(v266, (float32x4_t)vandq_s8((int8x16_t)v231, (int8x16_t)vcgtq_f32(v266, v265)));
          v268 = vsubq_f32(v265, v267);
          v269 = (int8x16_t)vmulq_f32(vaddq_f32(v231, vmulq_f32(v268, vaddq_f32(v334, vmulq_f32(v268, vaddq_f32(vaddq_f32(v331, vmulq_f32(v325, v268)), vmulq_f32(vmulq_f32(v268, v268), vaddq_f32(v184, vmulq_f32(v304, v268)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v267), v322), 0x17uLL));
          v270 = (int8x16_t)vaddq_f32(v255, v327);
          v271 = (float32x4_t)vbslq_s8(v43, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v256, (int8x16_t)v256, 4uLL), v243), (int8x16_t)v243, vbslq_s8(v43, v269, v270)), v270);
          v272 = (int32x4_t)vmulq_f32(v271, v271);
          v273 = vmulq_f32(v215, v255);
          v274 = (float32x4_t)vbslq_s8(v43, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v272), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v272, (int8x16_t)v272, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL))), v270);
          v275 = (float32x4_t)vextq_s8((int8x16_t)v274, (int8x16_t)v274, 8uLL);
          v276 = vminq_f32(vrsqrteq_f32(v275), v243);
          v277 = vminq_f32(vmulq_f32(v276, vrsqrtsq_f32(vmulq_f32(v276, v275), v276)), v243);
          v278 = vbslq_s8(v212, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v273, (int8x16_t)v273, 8uLL), vaddq_f32(v273, (float32x4_t)vrev64q_s32((int32x4_t)v273))), (int8x16_t)vmulq_f32(v277, vrsqrtsq_f32(vmulq_f32(v277, v275), v277)));
          v17 = 1.0;
          v279 = vmulq_f32(v215, vmulq_lane_f32(v274, *(float32x2_t *)v278.i8, 1));
          v280 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v279, 1), vaddq_f32(v279, (float32x4_t)vrev64q_s32((int32x4_t)v279)));
          v281 = (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v278, v278, 4uLL), v243);
          v274.i64[0] = vextq_s8(v281, v280, 0xCuLL).u64[0];
          v280.i64[1] = v281.i64[1];
          *(int8x8_t *)&v274.u32[2] = vext_s8(*(int8x8_t *)v280.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v281, v281, 8uLL), 4uLL);
          v282 = *(int8x16_t *)(v20 + 432);
          v283 = (float32x4_t)vbslq_s8(v282, vandq_s8((int8x16_t)v232, (int8x16_t)vcgtq_f32(vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)v274)), v231)), v280);
          v284 = (float32x4_t)vbslq_s8(v309, (int8x16_t)v201, vbslq_s8(v236, (int8x16_t)vmaxq_f32(v283, v209), (int8x16_t)v283));
          v285 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v284, (int8x16_t)v210), (int8x16_t)v201);
          v286 = (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v285, v191));
          v287 = vsubq_f32(vsubq_f32(v285, v201), vmulq_f32(vmulq_f32(v262, v286), v285));
          v288 = vmulq_f32(v287, v287);
          v289 = vmaxq_f32(vmulq_f32(v180, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v284, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v324, (int8x16_t)vcgtq_f32(v197, v284))), v192), v286), vmulq_f32(v287, vaddq_f32(v306, vmulq_f32(v287, vaddq_f32(vaddq_f32(v321, vmulq_f32(v186, v287)), vmulq_f32(
                                 v288,
                                 vaddq_f32(vaddq_f32(v305, vmulq_f32(v303, v287)), vmulq_f32(v288, vaddq_f32(v320, vmulq_f32(v264, v287))))))))))), v304);
          v290 = vcvtq_f32_s32(vcvtq_s32_f32(v289));
          v291 = vsubq_f32(v290, (float32x4_t)vandq_s8((int8x16_t)v201, (int8x16_t)vcgtq_f32(v290, v289)));
          v292 = vsubq_f32(v289, v291);
          v293 = (float32x4_t)vbslq_s8(v236, (int8x16_t)vmulq_f32(vaddq_f32(v201, vmulq_f32(v292, vaddq_f32(v231, vmulq_f32(v292, vaddq_f32(vaddq_f32(v334, vmulq_f32(v232, v292)), vmulq_f32(vmulq_f32(v292, v292), vaddq_f32(v331, vmulq_f32(v325, v292)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v291), v322), 0x17uLL)), (int8x16_t)v283);
          v294 = (int32x4_t)vbslq_s8(v282, vbslq_s8((int8x16_t)vcgtq_f32(v293, *(float32x4_t *)(v20 + 608)), *(int8x16_t *)(v20 + 608), (int8x16_t)v232), (int8x16_t)v293);
          v295 = *(int8x16_t *)(*(_QWORD *)&v6 + v18);
          v296 = (int8x16_t)vsubq_f32(v232, *(float32x4_t *)(v20 + 192));
          v297 = (float32x4_t)vbslq_s8(v236, (int8x16_t)vsubq_f32(v201, (float32x4_t)vbslq_s8(v236, v295, v296)), v296);
          v298 = vmulq_laneq_f32(v310, v244, 2);
          v209.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v294), v209), (int8x16_t)v209, (int8x16_t)v294).u32[0];
          v299 = (float32x4_t)vbslq_s8(v43, (int8x16_t)v294, (int8x16_t)vmulq_laneq_f32(v332, v256, 3));
          v300 = (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_lane_f32(v311, *(float32x2_t *)v256.f32, 1), (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_n_f32(v330, v313.f32[0]), (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_f32(v323, vmulq_n_f32(v299, v209.f32[0])), (float32x4_t)vbslq_s8(v43, v242, (int8x16_t)vaddq_f32(vmulq_f32(v323, vmulq_laneq_f32(v298, v271, 3)), v318))))))));
          *(float32x4_t *)(*(_QWORD *)&v5 + v18) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v18), vmulq_lane_f32(v297, *(float32x2_t *)v297.f32, 1).f32[0]), vmulq_n_f32((float32x4_t)vbslq_s8(v43, *(int8x16_t *)(*(_QWORD *)&v7 + v18), (int8x16_t)vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v18), vmulq_f32(*(float32x4_t *)(v20 + 176), vaddq_f32(vmulq_laneq_f32(v299, v299, 3), vaddq_f32(vmulq_laneq_f32(v298, v300, 3), v300))))), *(float *)v295.i32));
          v19 = (int8x16_t)vaddq_f32(v335, (float32x4_t)xmmword_1B304F230);
          v18 += 16;
        }
        while (16 * v4 != v18);
      }
      ++v3;
      *(_QWORD *)&v5 += v13;
      v302 = vaddq_f32(v302, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v6 += v14;
      *(_QWORD *)&v7 += v15;
      *(_QWORD *)&v8 += 16 * v9;
      *(_QWORD *)&v10 += v16;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMatteNormalComposite::GetDOD(HgcMatteNormalComposite *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 4)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcMatteNormalComposite::GetROI(HgcMatteNormalComposite *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 4)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcMatteNormalComposite::HgcMatteNormalComposite(HgcMatteNormalComposite *this)
{
  _QWORD *v2;
  HgcMatteNormalComposite::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C2ED0;
  v3 = (HgcMatteNormalComposite::State *)operator new();
  HgcMatteNormalComposite::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F61B50(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMatteNormalComposite::~HgcMatteNormalComposite(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C2ED0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4082453793);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMatteNormalComposite::~HgcMatteNormalComposite(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMatteNormalComposite::SetParameter(HgcMatteNormalComposite *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float v7;
  float v8;
  __n128 *v9;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  __n128 *v21;
  int32x4_t v22;
  __n128 *v23;
  __n128 *v24;
  float *v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;

  switch((int)a2)
  {
    case 0:
      v7 = -a4;
      v8 = -a5;
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9->n128_f32[0] == (float)-a3.n128_f32[0]
        && v9->n128_f32[1] == v7
        && v9->n128_f32[2] == v8
        && v9->n128_f32[3] == 0.0)
      {
        return 0;
      }
      v9->n128_f32[0] = -a3.n128_f32[0];
      v9->n128_f32[1] = v7;
      v9->n128_f32[2] = v8;
      a3.n128_f32[1] = a4;
      v9->n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[65] = a3;
      goto LABEL_103;
    case 1:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[4] == a3.n128_f32[0] && v11[5] == a4 && v11[6] == a5 && v11[7] == a6)
        return 0;
      v11[4] = a3.n128_f32[0];
      v11[5] = a4;
      v11[6] = a5;
      v11[7] = a6;
      goto LABEL_103;
    case 2:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[8] == a3.n128_f32[0] && v12[9] == a4 && v12[10] == a5 && v12[11] == a6)
        return 0;
      v12[8] = a3.n128_f32[0];
      v12[9] = a4;
      v12[10] = a5;
      v12[11] = a6;
      goto LABEL_103;
    case 3:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[12] == a3.n128_f32[0] && v13[13] == a4 && v13[14] == a5 && v13[15] == a6)
        return 0;
      v13[12] = a3.n128_f32[0];
      v13[13] = a4;
      v13[14] = a5;
      v13[15] = a6;
      goto LABEL_103;
    case 4:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[16] == a3.n128_f32[0] && v14[17] == a4 && v14[18] == a5 && v14[19] == a6)
        return 0;
      v14[16] = a3.n128_f32[0];
      v14[17] = a4;
      v14[18] = a5;
      v14[19] = a6;
      goto LABEL_103;
    case 5:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[20] == a3.n128_f32[0] && v15[21] == a4 && v15[22] == a5 && v15[23] == a6)
        return 0;
      v15[20] = a3.n128_f32[0];
      v15[21] = a4;
      v15[22] = a5;
      v15[23] = a6;
      goto LABEL_103;
    case 6:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[24] == a3.n128_f32[0] && v16[25] == a4 && v16[26] == a5 && v16[27] == a6)
        return 0;
      v16[24] = a3.n128_f32[0];
      v16[25] = a4;
      v16[26] = a5;
      v16[27] = a6;
      goto LABEL_103;
    case 7:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[28] == a3.n128_f32[0] && v17[29] == a4 && v17[30] == a5 && v17[31] == a6)
        return 0;
      v17[28] = a3.n128_f32[0];
      v17[29] = a4;
      v17[30] = a5;
      v17[31] = a6;
      goto LABEL_103;
    case 8:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[32] == a3.n128_f32[0] && v18[33] == a4 && v18[34] == a5 && v18[35] == a6)
        return 0;
      v18[32] = a3.n128_f32[0];
      v18[33] = a4;
      v18[34] = a5;
      v18[35] = a6;
      goto LABEL_103;
    case 9:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[36] == a3.n128_f32[0] && v19[37] == a4 && v19[38] == a5 && v19[39] == a6)
        return 0;
      v19[36] = a3.n128_f32[0];
      v19[37] = a4;
      v19[38] = a5;
      v19[39] = a6;
      goto LABEL_103;
    case 10:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[40] == a3.n128_f32[0] && v20[41] == a4 && v20[42] == a5 && v20[43] == a6)
        return 0;
      v20[40] = a3.n128_f32[0];
      v20[41] = a4;
      v20[42] = a5;
      v20[43] = a6;
      goto LABEL_103;
    case 11:
      v21 = (__n128 *)*((_QWORD *)this + 51);
      if (v21[11].n128_f32[0] == a3.n128_f32[0]
        && v21[11].n128_f32[1] == a3.n128_f32[0]
        && v21[11].n128_f32[2] == a3.n128_f32[0]
        && v21[11].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v22 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v22.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v21[11] = (__n128)v22;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v21[66] = a3;
      goto LABEL_103;
    case 12:
      v23 = (__n128 *)*((_QWORD *)this + 51);
      if (v23[12].n128_f32[0] == 0.0
        && v23[12].n128_f32[1] == a3.n128_f32[0]
        && v23[12].n128_f32[2] == 0.0
        && v23[12].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v23[12].n128_u32[0] = 0;
      v23[12].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v23[12].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v23[67] = a3;
      goto LABEL_103;
    case 13:
      v24 = (__n128 *)*((_QWORD *)this + 51);
      if (v24[13].n128_f32[0] == 0.0
        && v24[13].n128_f32[1] == a4
        && v24[13].n128_f32[2] == 0.0
        && v24[13].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v24[13].n128_u32[0] = 0;
      v24[13].n128_f32[1] = a4;
      v24[13].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v24[13].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v24[68] = a3;
      goto LABEL_103;
    case 14:
      v25 = (float *)*((_QWORD *)this + 51);
      if (v25[56] == a3.n128_f32[0] && v25[57] == a4 && v25[58] == a5 && v25[59] == a6)
        return 0;
      v25[56] = a3.n128_f32[0];
      v25[57] = a4;
      v25[58] = a5;
      v25[59] = a6;
      goto LABEL_103;
    case 15:
      v26 = (float *)*((_QWORD *)this + 51);
      if (v26[60] == a3.n128_f32[0] && v26[61] == a4 && v26[62] == a5 && v26[63] == a6)
        return 0;
      v26[60] = a3.n128_f32[0];
      v26[61] = a4;
      v26[62] = a5;
      v26[63] = a6;
      goto LABEL_103;
    case 16:
      v27 = (float *)*((_QWORD *)this + 51);
      if (v27[64] == a3.n128_f32[0] && v27[65] == a4 && v27[66] == a5 && v27[67] == a6)
        return 0;
      v27[64] = a3.n128_f32[0];
      v27[65] = a4;
      v27[66] = a5;
      v27[67] = a6;
      goto LABEL_103;
    case 17:
      v28 = (float *)*((_QWORD *)this + 51);
      if (v28[68] == a3.n128_f32[0] && v28[69] == a4 && v28[70] == a5 && v28[71] == a6)
        return 0;
      v28[68] = a3.n128_f32[0];
      v28[69] = a4;
      v28[70] = a5;
      v28[71] = a6;
      goto LABEL_103;
    case 18:
      v29 = (float *)*((_QWORD *)this + 51);
      if (v29[72] == a3.n128_f32[0] && v29[73] == a4 && v29[74] == a5 && v29[75] == a6)
        return 0;
      v29[72] = a3.n128_f32[0];
      v29[73] = a4;
      v29[74] = a5;
      v29[75] = a6;
      goto LABEL_103;
    case 19:
      v30 = (float *)*((_QWORD *)this + 51);
      if (v30[76] == a3.n128_f32[0] && v30[77] == a4 && v30[78] == a5 && v30[79] == a6)
        return 0;
      v30[76] = a3.n128_f32[0];
      v30[77] = a4;
      v30[78] = a5;
      v30[79] = a6;
LABEL_103:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcMatteNormalComposite::GetParameter(HgcMatteNormalComposite *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[260];
      a3[1] = v3[261];
      a3[2] = v3[262];
      v4 = v3 + 263;
      goto LABEL_22;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_22;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_22;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_22;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_22;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_22;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_22;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_22;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_22;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_22;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      v4 = v14 + 43;
      goto LABEL_22;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[264];
      a3[1] = v15[265];
      a3[2] = v15[266];
      v4 = v15 + 267;
      goto LABEL_22;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[268];
      a3[1] = v16[269];
      a3[2] = v16[270];
      v4 = v16 + 271;
      goto LABEL_22;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[272];
      a3[1] = v17[273];
      a3[2] = v17[274];
      v4 = v17 + 275;
      goto LABEL_22;
    case 14:
      v18 = (float *)*((_QWORD *)this + 51);
      *a3 = v18[56];
      a3[1] = v18[57];
      a3[2] = v18[58];
      v4 = v18 + 59;
      goto LABEL_22;
    case 15:
      v19 = (float *)*((_QWORD *)this + 51);
      *a3 = v19[60];
      a3[1] = v19[61];
      a3[2] = v19[62];
      v4 = v19 + 63;
      goto LABEL_22;
    case 16:
      v20 = (float *)*((_QWORD *)this + 51);
      *a3 = v20[64];
      a3[1] = v20[65];
      a3[2] = v20[66];
      v4 = v20 + 67;
      goto LABEL_22;
    case 17:
      v21 = (float *)*((_QWORD *)this + 51);
      *a3 = v21[68];
      a3[1] = v21[69];
      a3[2] = v21[70];
      v4 = v21 + 71;
      goto LABEL_22;
    case 18:
      v22 = (float *)*((_QWORD *)this + 51);
      *a3 = v22[72];
      a3[1] = v22[73];
      a3[2] = v22[74];
      v4 = v22 + 75;
      goto LABEL_22;
    case 19:
      v23 = (float *)*((_QWORD *)this + 51);
      *a3 = v23[76];
      a3[1] = v23[77];
      a3[2] = v23[78];
      v4 = v23 + 79;
LABEL_22:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcMatteNormalComposite::State::State(HgcMatteNormalComposite::State *this)
{
  __int128 v1;
  double result;

  *(_QWORD *)&v1 = 0x8000000080000000;
  *((_QWORD *)&v1 + 1) = 0x8000000080000000;
  result = 0.0;
  *(_OWORD *)this = v1;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = xmmword_1B3561C40;
  *((_OWORD *)this + 21) = xmmword_1B3050E20;
  *((_OWORD *)this + 22) = xmmword_1B3051020;
  *((_OWORD *)this + 23) = xmmword_1B3050E80;
  *((_OWORD *)this + 24) = xmmword_1B3561C50;
  *((_OWORD *)this + 25) = xmmword_1B3050FE0;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 26) = _Q1;
  *((_OWORD *)this + 27) = xmmword_1B3050FF0;
  *((_OWORD *)this + 28) = xmmword_1B3561C60;
  *((int32x4_t *)this + 29) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 30) = xmmword_1B3050F70;
  *((_OWORD *)this + 31) = xmmword_1B30510C0;
  *((_OWORD *)this + 32) = xmmword_1B3053260;
  *((_OWORD *)this + 33) = xmmword_1B30537E0;
  *((_OWORD *)this + 34) = xmmword_1B3052E80;
  *((_OWORD *)this + 35) = xmmword_1B355C340;
  *((_OWORD *)this + 36) = xmmword_1B3561C70;
  *((_OWORD *)this + 37) = xmmword_1B3051A80;
  *((_OWORD *)this + 38) = xmmword_1B3561C80;
  *((_OWORD *)this + 39) = xmmword_1B3561C90;
  *((_OWORD *)this + 40) = xmmword_1B3561CA0;
  *((_OWORD *)this + 41) = xmmword_1B3561CB0;
  *((_OWORD *)this + 42) = xmmword_1B3561CC0;
  *((_OWORD *)this + 43) = xmmword_1B3561CD0;
  *((_OWORD *)this + 44) = xmmword_1B3561CE0;
  *((_OWORD *)this + 45) = xmmword_1B3561CF0;
  *((_OWORD *)this + 46) = xmmword_1B3561D00;
  *((_OWORD *)this + 47) = xmmword_1B3561D10;
  *((_OWORD *)this + 48) = xmmword_1B3561D20;
  *((_OWORD *)this + 49) = xmmword_1B3561D30;
  *((_OWORD *)this + 50) = xmmword_1B3561D40;
  *((_OWORD *)this + 51) = xmmword_1B3561D50;
  *((_OWORD *)this + 52) = xmmword_1B3561D60;
  *((_OWORD *)this + 53) = xmmword_1B3561D70;
  *((_OWORD *)this + 54) = xmmword_1B3561D80;
  *((_OWORD *)this + 55) = xmmword_1B3561D90;
  *((_OWORD *)this + 56) = xmmword_1B3561DA0;
  *((_OWORD *)this + 57) = xmmword_1B3561DB0;
  *((_OWORD *)this + 58) = xmmword_1B3561DC0;
  *((_OWORD *)this + 59) = xmmword_1B3561DD0;
  *((_OWORD *)this + 60) = xmmword_1B3052610;
  *((_OWORD *)this + 61) = xmmword_1B3561DE0;
  *((_OWORD *)this + 62) = xmmword_1B3561DF0;
  *((_OWORD *)this + 63) = xmmword_1B3561E00;
  *((_OWORD *)this + 64) = xmmword_1B3561E10;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  return result;
}

const char *HgcZebraStripe::GetProgram(HgcZebraStripe *this, HGRenderer *a2)
{
  unsigned int Target;
  unsigned int v5;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000006c5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
             "    const half4 c1 = half4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
             "    const half4 c2 = half4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
             "    half4 r0, r1;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord2.xy*float2(c0.xx);\n"
             "    s0.xy = floor(s0.xy);\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    s0.xy = -s0.xy*float2(c0.yy) + frag._texCoord2.xy;\n"
             "    s0.x = s0.y - s0.x;\n"
             "    s0.x = s0.x*float(c0.z) + float(c0.w);\n"
             "    s0.y = s0.x*float(c1.y);\n"
             "    s0.y = floor(s0.y);\n"
             "    s0.x = -s0.y*float(c1.x) + s0.x;\n"
             "    s0.x = float(c1.z) - s0.x;\n"
             "    s0.y = fmax(float(r0.x), float(c1.w));\n"
             "    s0.x = -s0.y*float(c1.x) + fabs(s0.x);\n"
             "    s0.w = float(c1.z);\n"
             "    s0.xyz = clamp(s0.xxx + float3(c1.zzz), 0.00000f, 1.00000f);\n"
             "    s0 = fmax(s0, hg_Params[1]);\n"
             "    r0.w = half(r0.x >= c2.w);\n"
             "    r0.x = half(-r0.w >= c2.x);\n"
             "    r1.xyz = (half3) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r1.xyz = fmax(r1.xyz, c2.xxx);\n"
             "    r1.xyz = half3(dot(r1.xyz, half3(hg_Params[0].xyz)));\n"
             "    r1.w = c1.z;\n"
             "    output.color0 = select(s0, float4(r1), -float4(r0.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=87c737f3:aae2c528:1aa74fa8:9f439e8c\n"
             "//SIG=00400000:00000003:00000003:00000003:0003:0002:0003:0000:0000:0000:000e:0000:0003:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000649\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
             "    const float4 c1 = float4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
             "    const float4 c2 = float4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord2.xy*c0.xx;\n"
             "    r0.xy = floor(r0.xy);\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xy = -r0.xy*c0.yy + frag._texCoord2.xy;\n"
             "    r0.x = r0.y - r0.x;\n"
             "    r0.x = r0.x*c0.z + c0.w;\n"
             "    r0.y = r0.x*c1.y;\n"
             "    r0.y = floor(r0.y);\n"
             "    r0.x = -r0.y*c1.x + r0.x;\n"
             "    r0.x = c1.z - r0.x;\n"
             "    r0.y = fmax(r1.x, c1.w);\n"
             "    r0.x = -r0.y*c1.x + fabs(r0.x);\n"
             "    r0.w = c1.z;\n"
             "    r0.xyz = clamp(r0.xxx + c1.zzz, 0.00000f, 1.00000f);\n"
             "    r0 = fmax(r0, hg_Params[1]);\n"
             "    r1.w = float(r1.x >= c2.w);\n"
             "    r1.x = float(-r1.w >= c2.x);\n"
             "    r2.xyz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r2.xyz = fmax(r2.xyz, c2.xxx);\n"
             "    r2.xyz = float3(dot(r2.xyz, hg_Params[0].xyz));\n"
             "    r2.w = c1.z;\n"
             "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=045c4aa2:f4d6e5f0:b4e97ea2:a67f2456\n"
             "//SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:000e:0000:0003:02:0:1:0\n";
  }
  else
  {
    v5 = Target;
    if (Target <= 0x6060F || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
    {
      if (v5 <= 0x6040F)
        return "!!ARBfp1.0     \n"
               "##LEN=00000004a1\n"
               "##                          \n"
               "##                            \n"
               "##                                \n"
               "##                                     \n"
               "##$\n"
               "OUTPUT $o0=result.color;\n"
               "ATTRIB $f0=fragment.texcoord[0];\n"
               "ATTRIB $f1=fragment.texcoord[1];\n"
               "ATTRIB $f2=fragment.texcoord[2];\n"
               "PARAM $p0=program.local[0];\n"
               "PARAM $p1=program.local[1];\n"
               "PARAM $c0={0.1428571492,7.000000000,0.2857142985,1.714285851};\n"
               "PARAM $c1={2.000000000,0.5000000000,1.000000000,0.3000000119};\n"
               "PARAM $c2={0.000000000,0.000000000,0.000000000,0.004999999888};\n"
               "##%\n"
               "TEMP r0,r1,r2;\n"
               "##@\n"
               "MUL r0.xy,$f2,$c0.x;\n"
               "FLR r0.xy,r0;\n"
               "##0\n"
               "TEX r1.x,$f0,texture[0],RECT;\n"
               "MAD r0.xy,-r0,$c0.y,$f2;\n"
               "SUB r0.x,r0.y,r0;\n"
               "MAD r0.x,r0,$c0.z,$c0.w;\n"
               "MUL r0.y,r0.x,$c1;\n"
               "FLR r0.y,r0;\n"
               "MAD r0.x,-r0.y,$c1,r0;\n"
               "SUB r0.x,$c1.z,r0;\n"
               "MAX r0.y,r1.x,$c1.w;\n"
               "ABS r2.x,r0;\n"
               "MAD r0.x,-r0.y,$c1,r2;\n"
               "MOV r0.w,$c1.z;\n"
               "ADD_SAT r0.xyz,r0.x,$c1.z;\n"
               "MAX r0,r0,$p1;\n"
               "SGE r1.w,r1.x,$c2;\n"
               "SGE r1.x,-r1.w,$c2;\n"
               "##1\n"
               "TEX r2.xyz,$f1,texture[1],RECT;\n"
               "MAX r2.xyz,r2,$c2.x;\n"
               "DP3 r2.xyz,r2,$p0;\n"
               "MOV r2.w,$c1.z;\n"
               "CMP $o0,-r1.x,r2,r0;\n"
               "END\n"
               "##MD5=be9160a0:5a1c5010:c59c640e:b7dc9a26\n"
               "##SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:0000:0000:0003:02:0:1:0\n";
      else
        return "!!ARBfp1.0     \n"
               "##LEN=0000000496\n"
               "OPTION NV_fragment_program; \n"
               "##                            \n"
               "##                                \n"
               "##                                     \n"
               "##$\n"
               "OUTPUT $o0=result.color;\n"
               "ATTRIB $f0=fragment.texcoord[0];\n"
               "ATTRIB $f1=fragment.texcoord[1];\n"
               "ATTRIB $f2=fragment.texcoord[2];\n"
               "PARAM $p0=program.local[0];\n"
               "PARAM $p1=program.local[1];\n"
               "PARAM $c0={0.1428571492,7.000000000,0.2857142985,1.714285851};\n"
               "PARAM $c1={2.000000000,0.5000000000,1.000000000,0.3000000119};\n"
               "PARAM $c2={0.000000000,0.000000000,0.000000000,0.004999999888};\n"
               "##%\n"
               "TEMP r0,r1,r2;\n"
               "##@\n"
               "MUL r0.xy,$f2,$c0.x;\n"
               "FLR r0.xy,r0;\n"
               "##0\n"
               "TEX r1.x,$f0,texture[0],RECT;\n"
               "MAD r0.xy,-r0,$c0.y,$f2;\n"
               "SUB r0.x,r0.y,r0;\n"
               "MAD r0.x,r0,$c0.z,$c0.w;\n"
               "MUL r0.y,r0.x,$c1;\n"
               "FLR r0.y,r0;\n"
               "MAD r0.x,-r0.y,$c1,r0;\n"
               "SUB r0.x,$c1.z,r0;\n"
               "MAX r0.y,r1.x,$c1.w;\n"
               "MAD r0.x,-r0.y,$c1,|r0|;\n"
               "MOV r0.w,$c1.z;\n"
               "ADD_SAT r0.xyz,r0.x,$c1.z;\n"
               "MAX r0,r0,$p1;\n"
               "SGE r1.w,r1.x,$c2;\n"
               "SGE r1.x,-r1.w,$c2;\n"
               "##1\n"
               "TEX r2.xyz,$f1,texture[1],RECT;\n"
               "MAX r2.xyz,r2,$c2.x;\n"
               "DP3 r2.xyz,r2,$p0;\n"
               "MOV r2.w,$c1.z;\n"
               "CMP $o0,-r1.x,r2,r0;\n"
               "END\n"
               "##MD5=769072dd:b7a12e89:d332824c:9cb8f34d\n"
               "##SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:0000:0000:0003:02:0:1:0\n";
    }
    else
    {
      return "//GLfs2.0      \n"
             "//LEN=0000000698\n"
             "#ifndef GL_ES\n"
             "#define lowp\n"
             "#define mediump\n"
             "#define highp\n"
             "#endif\n"
             "#define defaultp mediump\n"
             "uniform defaultp sampler2D hg_Texture0;\n"
             "uniform defaultp sampler2D hg_Texture1;\n"
             "uniform highp vec4 hg_ProgramLocal0;\n"
             "uniform highp vec4 hg_ProgramLocal1;\n"
             "varying highp vec4 hg_TexCoord0;\n"
             "varying highp vec4 hg_TexCoord1;\n"
             "varying highp vec4 hg_TexCoord2;\n"
             "void main()\n"
             "{\n"
             "    const highp vec4 c0 = vec4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
             "    const highp vec4 c1 = vec4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
             "    const highp vec4 c2 = vec4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
             "    highp vec4 r0, r1, r2;\n"
             "\n"
             "    r0.xy = hg_TexCoord2.xy*c0.xx;\n"
             "    r0.xy = floor(r0.xy);\n"
             "    r1.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
             "    r0.xy = -r0.xy*c0.yy + hg_TexCoord2.xy;\n"
             "    r0.x = r0.y - r0.x;\n"
             "    r0.x = r0.x*c0.z + c0.w;\n"
             "    r0.y = r0.x*c1.y;\n"
             "    r0.y = floor(r0.y);\n"
             "    r0.x = -r0.y*c1.x + r0.x;\n"
             "    r0.x = c1.z - r0.x;\n"
             "    r0.y = max(r1.x, c1.w);\n"
             "    r0.x = -r0.y*c1.x + abs(r0.x);\n"
             "    r0.w = c1.z;\n"
             "    r0.xyz = clamp(r0.xxx + c1.zzz, vec3(0.00000), vec3(1.00000));\n"
             "    r0 = max(r0, hg_ProgramLocal1);\n"
             "    r1.w = float(r1.x >= c2.w);\n"
             "    r1.x = float(-r1.w >= c2.x);\n"
             "    r2.xyz = texture2D(hg_Texture1, hg_TexCoord1.xy).xyz;\n"
             "    r2.xyz = max(r2.xyz, c2.xxx);\n"
             "    r2.xyz = vec3(dot(r2.xyz, hg_ProgramLocal0.xyz));\n"
             "    r2.w = c1.z;\n"
             "    gl_FragColor = vec4(-r1.x < 0.00000 ? r2.x : r0.x, -r1.x < 0.00000 ? r2.y : r0.y, -r1.x < 0.00000 ? r2."
             "z : r0.z, -r1.x < 0.00000 ? r2.w : r0.w);\n"
             "}\n"
             "//MD5=c395a7ea:f982a5dc:73d36360:92518159\n"
             "//SIG=00000000:00000003:00000003:00000000:0003:0002:0003:0000:0000:0000:0000:0000:0003:02:0:1:0\n";
    }
  }
}

void HgcZebraStripe::InitProgramDescriptor(HgcZebraStripe *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcZebraStripe_hgc_visible", "//Metal1.0     \n//LEN=00000004b0\n[[ visible ]] FragmentOut HgcZebraStripe_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 texCoord2)\n{\n    const float4 c0 = float4(0.1428571492, 7.000000000, 0.2857142985, 1.714285851);\n"
    "    const float4 c1 = float4(2.000000000, 0.5000000000, 1.000000000, 0.3000000119);\n"
    "    const float4 c2 = float4(0.000000000, 0.000000000, 0.000000000, 0.004999999888);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord2.xy*c0.xx;\n"
    "    r0.xy = floor(r0.xy);\n"
    "    r1.x = color0.x;\n"
    "    r0.xy = -r0.xy*c0.yy + texCoord2.xy;\n"
    "    r0.x = r0.y - r0.x;\n"
    "    r0.x = r0.x*c0.z + c0.w;\n"
    "    r0.y = r0.x*c1.y;\n"
    "    r0.y = floor(r0.y);\n"
    "    r0.x = -r0.y*c1.x + r0.x;\n"
    "    r0.x = c1.z - r0.x;\n"
    "    r0.y = fmax(r1.x, c1.w);\n"
    "    r0.x = -r0.y*c1.x + fabs(r0.x);\n"
    "    r0.w = c1.z;\n"
    "    r0.xyz = clamp(r0.xxx + c1.zzz, 0.00000f, 1.00000f);\n"
    "    r0 = fmax(r0, hg_Params[1]);\n"
    "    r1.w = float(r1.x >= c2.w);\n"
    "    r1.x = float(-r1.w >= c2.x);\n"
    "    r2.xyz = color1.xyz;\n"
    "    r2.xyz = fmax(r2.xyz, c2.xxx);\n"
    "    r2.xyz = float3(dot(r2.xyz, hg_Params[0].xyz));\n"
    "    r2.w = c1.z;\n"
    "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F62790()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcZebraStripe");
}

void sub_1B2F627A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F62920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F62970()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F62968);
}

_QWORD *HgcZebraStripe::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcZebraStripe [hgc1]");
}

uint64_t HgcZebraStripe::BindTexture(HgcZebraStripe *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcZebraStripe::Bind(HgcZebraStripe *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcZebraStripe *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcZebraStripe::RenderTile(HgcZebraStripe *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t *v61;
  unsigned int v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[12];
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8 = a2[10];
    v9.i64[1] = 0x3F80000000000000;
    v10 = 16 * a2[11].i32[0];
    v11 = 16 * a2[3].i32[0];
    v12 = 16 * a2[13].i32[0];
    do
    {
      if (v5 < 2)
      {
        v62 = 0;
        v15 = v9;
      }
      else
      {
        v13 = 0;
        v14 = 16;
        v15 = v9;
        do
        {
          v16 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v17 = *((_QWORD *)this + 51);
          v19 = *(float32x4_t *)(v17 + 32);
          v18 = *(float32x4_t *)(v17 + 48);
          v20 = vmulq_f32(v15, v19);
          v21 = vmulq_f32(v16, v19);
          v22 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
          v23 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
          v24 = vsubq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v22, v20)));
          v25 = vsubq_f32(v23, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v23, v21)));
          v26 = *(float32x4_t *)(v17 + 64);
          v27 = *(float32x4_t *)(v17 + 80);
          v28 = vsubq_f32(v15, vmulq_lane_f32(v24, *(float32x2_t *)v26.f32, 1));
          v29 = vsubq_f32(v16, vmulq_lane_f32(v25, *(float32x2_t *)v26.f32, 1));
          v30 = (int32x4_t)vaddq_f32(v26, vmulq_f32(v27, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), v28)));
          v31 = (int32x4_t)vaddq_f32(v26, vmulq_f32(v27, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), v29)));
          v32 = (int8x16_t)vmulq_f32(v27, (float32x4_t)vrev64q_s32(v30));
          v33 = (int8x16_t)vmulq_f32(v27, (float32x4_t)vrev64q_s32(v31));
          v34 = *(int8x16_t *)(v17 + 96);
          v35 = *(float32x4_t *)(v17 + 112);
          v36 = *(int32x4_t *)(*(_QWORD *)&v8 + v14 - 16);
          v37 = *(int32x4_t *)(*(_QWORD *)&v8 + v14);
          v38 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, v32);
          v39 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v31, v33);
          v40 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
          v41 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          v42 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)vsubq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v40, v38))));
          v43 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v31, (int8x16_t)vsubq_f32(v41, (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_f32(v41, v39))));
          v44 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vsubq_f32(v18, vsubq_f32(v42, vmulq_lane_f32(v35, *(float32x2_t *)v42.f32, 1))), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v36), v35));
          v45 = (float32x4_t)vbslq_s8(v34, (int8x16_t)vsubq_f32(v18, vsubq_f32(v43, vmulq_lane_f32(v35, *(float32x2_t *)v43.f32, 1))), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v37), v35));
          v46 = (int8x16_t)vsubq_f32(vabsq_f32(v44), vmulq_lane_f32(v35, *(float32x2_t *)v44.f32, 1));
          v47 = (int8x16_t)vsubq_f32(vabsq_f32(v45), vmulq_lane_f32(v35, *(float32x2_t *)v45.f32, 1));
          v48 = *(float32x4_t *)(v17 + 128);
          v49 = *(int8x16_t *)(v17 + 144);
          v50 = vandq_s8((int8x16_t)v35, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), v48));
          v51 = vandq_s8((int8x16_t)v35, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), v48));
          v50.i64[0] = vandq_s8((int8x16_t)v18, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v50, v50, 0xCuLL)), v48)).u64[0];
          v51.i64[0] = vandq_s8((int8x16_t)v18, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v51, v51, 0xCuLL)), v48)).u64[0];
          v52 = *(float32x4_t *)(v17 + 16);
          v53 = (int32x4_t)vmulq_f32(vmaxq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v14 - 16), v48), *(float32x4_t *)v17);
          v54 = (int32x4_t)vmulq_f32(vmaxq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v14), v48), *(float32x4_t *)v17);
          v46.i32[3] = 1.0;
          v55 = (float32x4_t)vbslq_s8(v49, v46, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 0)), v48), v18));
          v56 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v53, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 1)));
          v47.i32[3] = 1.0;
          v57 = (float32x4_t)vbslq_s8(v49, v47, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 0)), v48), v18));
          v58 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v54, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.i8, 1)));
          v56.i32[3] = 1.0;
          v58.i32[3] = 1.0;
          v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 0);
          v60 = *(float32x4_t *)(v17 + 160);
          v61 = (int8x16_t *)(*(_QWORD *)&v6 + v14);
          v61[-1] = vbslq_s8((int8x16_t)vcgtq_f32(v59, v60), v56, (int8x16_t)vmaxq_f32(v55, v52));
          *v61 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0), v60), v58, (int8x16_t)vmaxq_f32(v57, v52));
          v15 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F230);
          v13 -= 2;
          v14 += 32;
        }
        while (v5 + v13 > 1);
        v62 = -v13;
      }
      if ((int)v62 < v5)
      {
        v63 = *((_QWORD *)this + 51);
        v64 = *(float32x4_t *)(v63 + 48);
        v65 = vmulq_f32(v15, *(float32x4_t *)(v63 + 32));
        v66 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
        v67 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32(v66, v65)));
        v68 = *(int32x4_t *)(*(_QWORD *)&v8 + 16 * v62);
        v69 = *(float32x4_t *)(v63 + 64);
        v70 = *(float32x4_t *)(v63 + 80);
        v71 = vsubq_f32(v15, vmulq_lane_f32(v67, *(float32x2_t *)v69.f32, 1));
        v72 = (int32x4_t)vaddq_f32(v69, vmulq_f32(v70, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v71), v71)));
        v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)vrev64q_s32(v72));
        v74 = *(int8x16_t *)(v63 + 96);
        v75 = *(float32x4_t *)(v63 + 112);
        v76 = (float32x4_t)vbslq_s8(v74, (int8x16_t)v72, v73);
        v77 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
        v78 = (float32x4_t)vbslq_s8(v74, (int8x16_t)v72, (int8x16_t)vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v64, (int8x16_t)vcgtq_f32(v77, v76))));
        v79 = (float32x4_t)vbslq_s8(v74, (int8x16_t)vsubq_f32(v64, vsubq_f32(v78, vmulq_lane_f32(v75, *(float32x2_t *)v78.f32, 1))), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32(v68), v75));
        v80 = (int8x16_t)vsubq_f32(vabsq_f32(v79), vmulq_lane_f32(v75, *(float32x2_t *)v79.f32, 1));
        v80.i32[3] = 1.0;
        v81 = *(float32x4_t *)(v63 + 128);
        v82 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v63 + 144), v80, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.i8, 0)), v81), v64));
        v83 = vandq_s8((int8x16_t)v75, (int8x16_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), v81));
        v64.i64[0] = vandq_s8((int8x16_t)v64, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v83, v83, 0xCuLL)), v81)).u64[0];
        v84 = (int32x4_t)vmulq_f32(vmaxq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + 16 * v62), v81), *(float32x4_t *)v63);
        v85 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v84, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.i8, 1)));
        v85.i32[3] = 1.0;
        *(int8x16_t *)(*(_QWORD *)&v6 + 16 * v62) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 0), *(float32x4_t *)(v63 + 160)), v85, (int8x16_t)vmaxq_f32(v82, *(float32x4_t *)(v63 + 16)));
      }
      v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v8 += v10;
      *(_QWORD *)&v7 += v12;
      *(_QWORD *)&v6 += v11;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcZebraStripe::GetDOD(HgcZebraStripe *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcZebraStripe::GetROI(HgcZebraStripe *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcZebraStripe::HgcZebraStripe(HgcZebraStripe *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C3138;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B3561E80;
  *(_OWORD *)(v3 + 48) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 64) = xmmword_1B3561E90;
  *(_OWORD *)(v3 + 80) = xmmword_1B3561EA0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 112) = xmmword_1B3561EB0;
  *(_OWORD *)(v3 + 128) = xmmword_1B35544C0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F62FC8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcZebraStripe::~HgcZebraStripe(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C3138;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40C3A7E6FCLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcZebraStripe::~HgcZebraStripe(this);
  HGObject::operator delete(v1);
}

uint64_t HgcZebraStripe::SetParameter(HgcZebraStripe *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcZebraStripe::GetParameter(HgcZebraStripe *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

void OZTileBlend::renderTile(uint64_t a1, PCWorkingColor *this, int a3)
{
  float32x4_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  PCWorkingColor::getRGBA(this, v60.f32, &v60.f32[1], &v60.f32[2], (float *)((unint64_t)&v60 | 0xC));
  v5 = v60;
  if (a3 == 1)
  {
    v32 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    if (v32 >= 1)
    {
      v33 = 0;
      v34 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(_QWORD *)(a1 + 96);
      v37 = 16 * *(int *)(a1 + 88);
      v38 = *(_QWORD *)(a1 + 80);
      v39 = 16 * *(int *)(a1 + 104);
      v40 = 16 * *(int *)(a1 + 24);
      do
      {
        if (v34 < 4)
        {
          LODWORD(v56) = 0;
        }
        else
        {
          v41 = 0;
          v42 = 48;
          do
          {
            v43 = *(float32x4_t *)(v38 + v42 - 48);
            v44 = *(float32x4_t *)(v38 + v42 - 32);
            v45 = *(float32x4_t *)(v38 + v42 - 16);
            v46 = *(float32x4_t *)(v38 + v42);
            v47 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42 - 48));
            v48 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42 - 32));
            v49 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42 - 16));
            v50 = vmulq_f32(v5, *(float32x4_t *)(v36 + v42));
            v51 = vaddq_f32(v43, v47);
            v52 = vaddq_f32(v44, v48);
            v53 = vaddq_f32(v45, v49);
            v54 = vaddq_f32(v46, v50);
            v51.i32[3] = vsubq_f32(v51, vmulq_f32(v43, v47)).i32[3];
            v52.i32[3] = vsubq_f32(v52, vmulq_f32(v44, v48)).i32[3];
            v53.i32[3] = vsubq_f32(v53, vmulq_f32(v45, v49)).i32[3];
            v54.i32[3] = vsubq_f32(v54, vmulq_f32(v46, v50)).i32[3];
            v55 = (float32x4_t *)(v35 + v42);
            v55[-3] = v51;
            v55[-2] = v52;
            v55[-1] = v53;
            *v55 = v54;
            v41 -= 4;
            v42 += 64;
          }
          while (v34 + v41 > 3);
          LODWORD(v56) = -v41;
        }
        if ((int)v56 < v34)
        {
          v56 = v56;
          do
          {
            v57 = *(float32x4_t *)(v38 + 16 * v56);
            v58 = vmulq_f32(v5, *(float32x4_t *)(v36 + 16 * v56));
            v59 = vaddq_f32(v57, v58);
            v59.i32[3] = vsubq_f32(v59, vmulq_f32(v57, v58)).i32[3];
            *(float32x4_t *)(v35 + 16 * v56++) = v59;
          }
          while (v56 < v34);
        }
        ++v33;
        v38 += v37;
        v36 += v39;
        v35 += v40;
      }
      while (v33 != v32);
    }
  }
  else if (!a3)
  {
    v6 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 96);
      v11 = *(_QWORD *)(a1 + 80);
      v12 = 16 * *(int *)(a1 + 88);
      v13 = 16 * *(int *)(a1 + 104);
      v14 = 16 * *(int *)(a1 + 24);
      __asm { FMOV            V1.4S, #1.0 }
      do
      {
        if (v8 < 4)
        {
          LODWORD(v30) = 0;
        }
        else
        {
          v20 = 0;
          v21 = 48;
          do
          {
            v22 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21 - 48));
            v23 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21 - 32));
            v24 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21 - 16));
            v25 = vmulq_f32(v5, *(float32x4_t *)(v10 + v21));
            v26 = vaddq_f32(v23, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21 - 32), vsubq_f32(_Q1, v23), 3));
            v27 = vaddq_f32(v24, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21 - 16), vsubq_f32(_Q1, v24), 3));
            v28 = vaddq_f32(v25, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21), vsubq_f32(_Q1, v25), 3));
            v29 = (float32x4_t *)(v9 + v21);
            v29[-3] = vaddq_f32(v22, vmulq_laneq_f32(*(float32x4_t *)(v11 + v21 - 48), vsubq_f32(_Q1, v22), 3));
            v29[-2] = v26;
            v29[-1] = v27;
            *v29 = v28;
            v20 -= 4;
            v21 += 64;
          }
          while (v8 + v20 > 3);
          LODWORD(v30) = -v20;
        }
        if ((int)v30 < v8)
        {
          v30 = v30;
          do
          {
            v31 = vmulq_f32(v5, *(float32x4_t *)(v10 + 16 * v30));
            *(float32x4_t *)(v9 + 16 * v30) = vaddq_f32(v31, vmulq_laneq_f32(*(float32x4_t *)(v11 + 16 * v30), vsubq_f32(_Q1, v31), 3));
            ++v30;
          }
          while (v30 < v8);
        }
        ++v7;
        v11 += v12;
        v10 += v13;
        v9 += v14;
      }
      while (v7 != v6);
    }
  }
}

const char *HgcMaskCompIntersect::GetProgram(HgcMaskCompIntersect *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004bb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r1 = r0.yyyy*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r1), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ac2b60ee:6ba9cb69:34ade124:5d40c400\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000481\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r1 = r0.yyyy*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=77d7d354:a5b065a0:a8b165d0:d4bae7e3\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=0000000335\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "SUB r1.x,$c0,r0.y;\n"
           "CMP r0.z,-$p1,r1.x,r0.y;\n"
           "##1\n"
           "TEX r1,$f1,texture[1],RECT;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "MUL r1,r0.y,r1;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r1;\n"
           "END\n"
           "##MD5=b11fb0f2:dceb6060:16c24b65:6e4e89de\n"
           "##SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004e0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r1.x = c0.x - r0.y;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r1.x : r0.y;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r1 = r0.yyyy*r1;\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.x, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "1.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.z, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.w);\n"
           "}\n"
           "//MD5=3e59aa96:6f901a54:534f47f4:36e85ad7\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskCompIntersect::InitProgramDescriptor(HgcMaskCompIntersect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompIntersect_hgc_visible", "//Metal1.0     \n//LEN=00000002e4\n[[ visible ]] FragmentOut HgcMaskCompIntersect_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r1.x = c0.x - r0.y;\n"
    "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
    "    r1 = color1;\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r1 = r0.yyyy*r1;\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F634D0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMaskCompIntersect");
}

void sub_1B2F634E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F63620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F63668()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F63660);
}

_QWORD *HgcMaskCompIntersect::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompIntersect [hgc1]");
}

uint64_t HgcMaskCompIntersect::BindTexture(HgcMaskCompIntersect *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompIntersect::Bind(HgcMaskCompIntersect *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcMaskCompIntersect *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMaskCompIntersect::RenderTile(HgcMaskCompIntersect *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t *v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 26);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v54) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *((_QWORD *)this + 51);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)v13);
          v16 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13);
          v17 = vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13);
          v18 = vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)v13);
          v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v21 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          v22 = vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL));
          v23 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v25 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v26 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v27 = (int32x4_t)vmulq_lane_f32(v23, *(float32x2_t *)v14.f32, 1);
          v28 = *(float32x4_t *)(v13 + 32);
          v29 = *(float32x4_t *)(v13 + 48);
          v30 = *(int8x16_t *)(v13 + 64);
          v31 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v24, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v24))));
          v32 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v25, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v25))));
          v33 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v26))));
          v34 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v27, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v27))));
          v35 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), vmulq_n_f32(v31, v14.f32[0]));
          v36 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v14.f32[0]));
          v37 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v33), vmulq_n_f32(v33, v14.f32[0]));
          v38 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v34), vmulq_n_f32(v34, v14.f32[0]));
          v39 = (int8x16_t)vcgtq_f32(v14, v29);
          v35.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v35)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v35, 0xCuLL)).i64[1];
          v36.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v36)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v36, 0xCuLL)).i64[1];
          v37.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v37)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v37, 0xCuLL)).i64[1];
          v38.i64[1] = vbslq_s8(v39, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v38)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v38, 0xCuLL)).i64[1];
          v40 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v29);
          v41 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v35);
          v42 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v36);
          v43 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v37);
          v44 = (float32x4_t)vbslq_s8(v30, v40, (int8x16_t)v38);
          v45 = (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x2_t *)v41.f32, 1);
          v46 = (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x2_t *)v44.f32, 1);
          v47 = (int8x16_t)vcgtq_f32(v28, v42);
          v41.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v28, v41), (int8x16_t)vdupq_laneq_s32((int32x4_t)v41, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)).u64[0];
          v48 = (int8x16_t)vcgtq_f32(v28, v43);
          v28.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v28, v44), (int8x16_t)vdupq_laneq_s32((int32x4_t)v44, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1)).u64[0];
          v49 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), *(float32x4_t *)(v13 + 80));
          v50 = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 0), v45);
          v51 = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v47, (int8x16_t)vdupq_laneq_s32((int32x4_t)v42, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1)), 0), (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x2_t *)v42.f32, 1));
          v52 = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v48, (int8x16_t)vdupq_laneq_s32((int32x4_t)v43, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1)), 0), (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + v12), *(float32x2_t *)v43.f32, 1));
          v53 = (int8x16_t *)(v5 + v12);
          v53[-2] = v50;
          v53[-1] = v51;
          *v53 = v52;
          v53[1] = vbslq_s8(v49, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0), v46);
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v54) = -v11;
      }
      if ((int)v54 < v4)
      {
        v54 = v54;
        do
        {
          v55 = *((_QWORD *)this + 51);
          v56 = *(float32x4_t *)(v55 + 16);
          v57 = vmulq_f32(*(float32x4_t *)(v8 + 16 * v54), *(float32x4_t *)v55);
          v58 = vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 4uLL));
          v59 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v58, (float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)), *(float32x2_t *)v56.f32, 1);
          v60 = *(float32x4_t *)(v55 + 32);
          v61 = *(float32x4_t *)(v55 + 48);
          v62 = *(int8x16_t *)(v55 + 64);
          v63 = (float32x4_t)vbslq_s8(v62, (int8x16_t)v59, (int8x16_t)vaddq_f32(v60, vmulq_f32(v61, (float32x4_t)vrev64q_s32(v59))));
          v64 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v63), vmulq_n_f32(v63, v56.f32[0]));
          v64.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v56, v61), (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v60, v64)), 0), vextq_s8(*(int8x16_t *)&v64, *(int8x16_t *)&v64, 0xCuLL)).i64[1];
          v65 = (float32x4_t)vbslq_s8(v62, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), v61), (int8x16_t)v64);
          *(int8x16_t *)(v5 + 16 * v54) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), *(float32x4_t *)(v55 + 80)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v60, v65), (int8x16_t)vdupq_laneq_s32((int32x4_t)v65, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1)), 0), (int8x16_t)vmulq_lane_f32(*(float32x4_t *)(v6 + 16 * v54), *(float32x2_t *)v65.f32, 1));
          ++v54;
        }
        while (v54 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompIntersect::GetDOD(HgcMaskCompIntersect *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcMaskCompIntersect::GetROI(HgcMaskCompIntersect *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcMaskCompIntersect::HgcMaskCompIntersect(HgcMaskCompIntersect *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C33A0;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 48) = xmmword_1B3525F70;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F63BF0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompIntersect::~HgcMaskCompIntersect(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C33A0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMaskCompIntersect::~HgcMaskCompIntersect(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompIntersect::SetParameter(HgcMaskCompIntersect *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompIntersect::GetParameter(HgcMaskCompIntersect *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcMaskElem::GetProgram(HgcMaskElem *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000032e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = fmin(r0, half4(hg_Params[1]));\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = fmax(r0, half4(hg_Params[0]));\n"
             "    output.color0 = float4(r0)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=697add7e:c663244d:2a11e2f1:d614b1ba\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000303\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = fmin(r0, hg_Params[1]);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = fmax(r0, hg_Params[0]);\n"
             "    output.color0 = r0*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=f5cef5f9:18fdecb9:e83be33b:ee75b063\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=000000024e\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##1\n"
           "TEX r0,$f1,texture[1],RECT;\n"
           "MIN r0,r0,$p1;\n"
           "##0\n"
           "TEX r1,$f0,texture[0],RECT;\n"
           "MAX r0,r0,$p0;\n"
           "MUL $o0,r0,r1;\n"
           "END\n"
           "##MD5=90b56ecf:f74056c4:26bebe67:a11aed9f\n"
           "##SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = min(r0, hg_ProgramLocal1);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = max(r0, hg_ProgramLocal0);\n"
           "    gl_FragColor = r0*r1;\n"
           "}\n"
           "//MD5=9b7caf92:8007f644:c8cd0c22:84ae7f2c\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskElem::InitProgramDescriptor(HgcMaskElem *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskElem_hgc_visible", "//Metal1.0     \n//LEN=000000015d\n[[ visible ]] FragmentOut HgcMaskElem_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = fmin(r0, hg_Params[1]);\n"
    "    r1 = color0;\n"
    "    r0 = fmax(r0, hg_Params[0]);\n"
    "    output.color0 = r0*r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F63DFC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMaskElem");
}

void sub_1B2F63E0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F63F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F63F94()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F63F8CLL);
}

_QWORD *HgcMaskElem::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskElem [hgc1]");
}

uint64_t HgcMaskElem::BindTexture(HgcMaskElem *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskElem::Bind(HgcMaskElem *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcMaskElem *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMaskElem::RenderTile(HgcMaskElem *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 26);
    v8 = *((_QWORD *)a2 + 12);
    v9 = 16 * *((int *)a2 + 22);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = (float32x4_t *)*((_QWORD *)this + 51);
          v14 = v13[1];
          v15 = vmulq_f32(*(float32x4_t *)(v6 + v12 - 32), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 - 32), v14), *v13));
          v16 = vmulq_f32(*(float32x4_t *)(v6 + v12 - 16), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 - 16), v14), *v13));
          v17 = vmulq_f32(*(float32x4_t *)(v6 + v12), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12), v14), *v13));
          v18 = vmulq_f32(*(float32x4_t *)(v6 + v12 + 16), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 + 16), v14), *v13));
          v19 = (float32x4_t *)(v5 + v12);
          v19[-2] = v15;
          v19[-1] = v16;
          *v19 = v17;
          v19[1] = v18;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v20) = -v11;
      }
      if ((int)v20 < v4)
      {
        v20 = v20;
        do
        {
          *(float32x4_t *)(v5 + 16 * v20) = vmulq_f32(*(float32x4_t *)(v6 + 16 * v20), vmaxq_f32(vminq_f32(*(float32x4_t *)(v8 + 16 * v20), *(float32x4_t *)(*((_QWORD *)this + 51) + 16)), *(float32x4_t *)*((_QWORD *)this + 51)));
          ++v20;
        }
        while (v20 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskElem::GetDOD(HgcMaskElem *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcMaskElem::GetROI(HgcMaskElem *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcMaskElem::HgcMaskElem(HgcMaskElem *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C3608;
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F642E0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskElem::~HgcMaskElem(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C3608;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMaskElem::~HgcMaskElem(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMaskElem::SetParameter(HgcMaskElem *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;

  if ((_DWORD)a2 == 1)
  {
    v9 = *((_QWORD *)this + 51);
    if (*(float *)(v9 + 16) != a3.n128_f32[0]
      || *(float *)(v9 + 20) != a3.n128_f32[0]
      || *(float *)(v9 + 24) != a3.n128_f32[0]
      || *(float *)(v9 + 28) != a3.n128_f32[0])
    {
      v10 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      *(int32x4_t *)(v9 + 16) = v10;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v9 + 48) = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a3.n128_f32[0]
      || *(float *)(v7 + 8) != a3.n128_f32[0]
      || *(float *)(v7 + 12) != a3.n128_f32[0])
    {
      v8 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      *(int32x4_t *)v7 = v8;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v7 + 32) = a3;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcMaskElem::GetParameter(HgcMaskElem *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[12];
    a3[1] = v5[13];
    a3[2] = v5[14];
    v4 = v5 + 15;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[8];
    a3[1] = v3[9];
    a3[2] = v3[10];
    v4 = v3 + 11;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcMaskCompFirstPass::GetProgram(HgcMaskCompFirstPass *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003cf\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    output.color0 = select(float4(r0.yyyy), float4(r0.zzzz), float4(r0.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=88751bc3:e39b93c7:7fe374e9:1b84dc55\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000394\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    output.color0 = select(r0.yyyy, r0.zzzz, r0.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6e7ee701:27f67b24:d1febe3f:d1b5bf22\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002cb\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "ADD r0.z,-r0.y,$c0.x;\n"
           "CMP r0.z,-$p1,r0,r0.y;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "CMP $o0,r0.x,r0.z,r0.y;\n"
           "END\n"
           "##MD5=20fb8b16:dccc0196:ae71c795:1cad3d67\n"
           "##SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003e8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r0.z = -r0.y + c0.x;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    gl_FragColor = vec4(r0.x < 0.00000 ? r0.z : r0.y, r0.x < 0.00000 ? r0.z : r0.y, r0.x < 0.00000 ? r0.z : r"
           "0.y, r0.x < 0.00000 ? r0.z : r0.y);\n"
           "}\n"
           "//MD5=c2b59dea:d57cf6b5:dcb56bb1:afc40db5\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcMaskCompFirstPass::InitProgramDescriptor(HgcMaskCompFirstPass *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompFirstPass_hgc_visible", "//Metal1.0     \n//LEN=0000000272\n[[ visible ]] FragmentOut HgcMaskCompFirstPass_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r0.z = -r0.y + c0.x;\n"
    "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    output.color0 = select(r0.yyyy, r0.zzzz, r0.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F6455C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMaskCompFirstPass");
}

void sub_1B2F6456C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F6466C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F646AC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F646A4);
}

_QWORD *HgcMaskCompFirstPass::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompFirstPass [hgc1]");
}

uint64_t HgcMaskCompFirstPass::BindTexture(HgcMaskCompFirstPass *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompFirstPass::Bind(HgcMaskCompFirstPass *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcMaskCompFirstPass *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMaskCompFirstPass::RenderTile(HgcMaskCompFirstPass *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t *v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int32x4_t v66;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v53) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *((_QWORD *)this + 51);
          v12 = *(float32x4_t *)(v11 + 16);
          v13 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          v14 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          v15 = vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          v16 = vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          v17 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          v18 = vaddq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL));
          v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v21 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          v22 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), *(float32x2_t *)v12.f32, 1);
          v23 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), *(float32x2_t *)v12.f32, 1);
          v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v12.f32, 1);
          v25 = (int32x4_t)vmulq_lane_f32(v21, *(float32x2_t *)v12.f32, 1);
          v27 = *(float32x4_t *)(v11 + 32);
          v26 = *(float32x4_t *)(v11 + 48);
          v28 = *(int8x16_t *)(v11 + 64);
          v29 = *(float32x4_t *)(v11 + 80);
          v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v22, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v22))));
          v31 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v23, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v23))));
          v32 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v24, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v24))));
          v33 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v25, (int8x16_t)vaddq_f32(v27, vmulq_f32(v26, (float32x4_t)vrev64q_s32(v25))));
          v34 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), vmulq_n_f32(v30, v12.f32[0]));
          v35 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), vmulq_n_f32(v31, v12.f32[0]));
          v36 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v12.f32[0]));
          v37 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v33), vmulq_n_f32(v33, v12.f32[0]));
          v38 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v34, 0xCuLL));
          v39 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v35, 0xCuLL));
          v40 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v36, 0xCuLL));
          v41 = (int8x16_t)vsubq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v12, v37, 0xCuLL));
          v42 = v34;
          v42.i32[2] = v38.i32[2];
          v43 = v35;
          v43.i32[2] = v39.i32[2];
          v44 = v36;
          v44.i32[2] = v40.i32[2];
          v45 = v37;
          v45.i32[2] = v41.i32[2];
          v46 = (int8x16_t)vcgtq_f32(v12, v27);
          v34.i64[1] = vbslq_s8(v46, v38, vextq_s8(*(int8x16_t *)&v12, v42, 0xCuLL)).i64[1];
          v35.i64[1] = vbslq_s8(v46, v39, vextq_s8(*(int8x16_t *)&v12, v43, 0xCuLL)).i64[1];
          v36.i64[1] = vbslq_s8(v46, v40, vextq_s8(*(int8x16_t *)&v12, v44, 0xCuLL)).i64[1];
          v37.i64[1] = vbslq_s8(v46, v41, vextq_s8(*(int8x16_t *)&v12, v45, 0xCuLL)).i64[1];
          v47 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), v26);
          v48 = (int32x4_t)vbslq_s8(v28, v47, v34);
          v49 = (int32x4_t)vbslq_s8(v28, v47, v35);
          v50 = (int32x4_t)vbslq_s8(v28, v47, v36);
          v51 = (int32x4_t)vbslq_s8(v28, v47, v37);
          v52 = (int8x16_t *)(v5 + v10);
          v52[-2] = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 0)), (int8x16_t)vdupq_laneq_s32(v48, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 1));
          v52[-1] = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.i8, 0)), (int8x16_t)vdupq_laneq_s32(v49, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v49.i8, 1));
          *v52 = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 0)), (int8x16_t)vdupq_laneq_s32(v50, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 1));
          v52[1] = vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0)), (int8x16_t)vdupq_laneq_s32(v51, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 1));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v53) = -v9;
      }
      if ((int)v53 < v4)
      {
        v53 = v53;
        do
        {
          v54 = *((_QWORD *)this + 51);
          v55 = *(float32x4_t *)(v54 + 16);
          v56 = vmulq_f32(*(float32x4_t *)(v6 + 16 * v53), *(float32x4_t *)v54);
          v57 = vaddq_f32(v56, (float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL));
          v58 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL)), *(float32x2_t *)v55.f32, 1);
          v59 = *(float32x4_t *)(v54 + 32);
          v60 = *(float32x4_t *)(v54 + 48);
          v61 = *(int8x16_t *)(v54 + 64);
          v62 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v58, (int8x16_t)vaddq_f32(v59, vmulq_f32(v60, (float32x4_t)vrev64q_s32(v58))));
          v63 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v62), vmulq_n_f32(v62, v55.f32[0]));
          v64 = (int8x16_t)vsubq_f32(v60, (float32x4_t)vextq_s8(v63, v63, 0xCuLL));
          v65.i64[0] = v63.i64[0];
          v65.i64[1] = v64.i64[1];
          v63.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v55, v59), v64, vextq_s8(v63, v65, 0xCuLL)).i64[1];
          v66 = (int32x4_t)vbslq_s8(v61, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), v60), v63);
          *(int8x16_t *)(v5 + 16 * v53++) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v54 + 80), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 0)), (int8x16_t)vdupq_laneq_s32(v66, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 1));
        }
        while (v53 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompFirstPass::GetDOD(HgcMaskCompFirstPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcMaskCompFirstPass::GetROI(HgcMaskCompFirstPass *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcMaskCompFirstPass::HgcMaskCompFirstPass(HgcMaskCompFirstPass *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C3870;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 48) = xmmword_1B3561F00;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F64BB4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompFirstPass::~HgcMaskCompFirstPass(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C3870;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMaskCompFirstPass::~HgcMaskCompFirstPass(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompFirstPass::SetParameter(HgcMaskCompFirstPass *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompFirstPass::GetParameter(HgcMaskCompFirstPass *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcMaskCompSubtract::GetProgram(HgcMaskCompSubtract *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004bc\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r0.w = -r0.y + c0.x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.z = select(r0.y, r0.w, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r1 = r0.wwww*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r1), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=803d36d6:745a31c5:7bf8f860:9746c0ec\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000482\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r0.w = -r0.y + c0.x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.z = select(r0.y, r0.w, -hg_Params[1].z < 0.00000f);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r1 = r0.wwww*r1;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c0e416c5:a8d708f0:cb142b5b:fd6a2dcc\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=0000000338\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "ADD r0.w,-r0.y,$c0.x;\n"
           "##1\n"
           "TEX r1,$f1,texture[1],RECT;\n"
           "CMP r0.z,-$p1,r0.w,r0.y;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "MUL r1,r0.w,r1;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r1;\n"
           "END\n"
           "##MD5=9f37110d:6551b5d6:98450f13:eade1e0c\n"
           "##SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004e1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r0.w = -r0.y + c0.x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r0.w : r0.y;\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r1 = r0.wwww*r1;\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.x, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "1.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.z, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.w);\n"
           "}\n"
           "//MD5=35c39cd9:ce16825b:8c591300:4449c307\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskCompSubtract::InitProgramDescriptor(HgcMaskCompSubtract *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompSubtract_hgc_visible", "//Metal1.0     \n//LEN=00000002e4\n[[ visible ]] FragmentOut HgcMaskCompSubtract_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r0.w = -r0.y + c0.x;\n"
    "    r1 = color1;\n"
    "    r0.z = select(r0.y, r0.w, -hg_Params[1].z < 0.00000f);\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r1 = r0.wwww*r1;\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F64DC0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMaskCompSubtract");
}

void sub_1B2F64DD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F64F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F64F58()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F64F50);
}

_QWORD *HgcMaskCompSubtract::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompSubtract [hgc1]");
}

uint64_t HgcMaskCompSubtract::BindTexture(HgcMaskCompSubtract *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompSubtract::Bind(HgcMaskCompSubtract *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcMaskCompSubtract *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMaskCompSubtract::RenderTile(HgcMaskCompSubtract *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t *v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int64x2_t v57;
  int8x16_t v58;
  float32x4_t v59;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 6);
    v10 = 16 * *((int *)a2 + 26);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v47) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *((_QWORD *)this + 51);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)v13);
          v16 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13);
          v17 = vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13);
          v18 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          v19 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v20 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          v21 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v22 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v23 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v24 = *(float32x4_t *)(v13 + 32);
          v25 = *(float32x4_t *)(v13 + 48);
          v26 = *(int8x16_t *)(v13 + 64);
          v27 = *(int8x16_t *)(v13 + 80);
          v28 = (float32x4_t)vbslq_s8(v26, (int8x16_t)v21, (int8x16_t)vaddq_f32(v24, vmulq_f32(v25, (float32x4_t)vrev64q_s32(v21))));
          v29 = (float32x4_t)vbslq_s8(v26, (int8x16_t)v22, (int8x16_t)vaddq_f32(v24, vmulq_f32(v25, (float32x4_t)vrev64q_s32(v22))));
          v30 = (float32x4_t)vbslq_s8(v26, (int8x16_t)v23, (int8x16_t)vaddq_f32(v24, vmulq_f32(v25, (float32x4_t)vrev64q_s32(v23))));
          v28.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), vmulq_n_f32(v28, v14.f32[0])).u64[0];
          v29.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), vmulq_n_f32(v29, v14.f32[0])).u64[0];
          v30.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), vmulq_n_f32(v30, v14.f32[0])).u64[0];
          v31 = (int64x2_t)vsubq_f32(v25, (float32x4_t)vdupq_lane_s64(v28.i64[0], 0));
          v32 = (int64x2_t)vsubq_f32(v25, (float32x4_t)vdupq_lane_s64(v29.i64[0], 0));
          v33 = (int64x2_t)vsubq_f32(v25, (float32x4_t)vdupq_lane_s64(v30.i64[0], 0));
          v34.i64[0] = v28.i64[0];
          v34.i64[1] = v31.i64[1];
          v35.i64[0] = v29.i64[0];
          v36.i64[0] = v30.i64[0];
          v35.i64[1] = v32.i64[1];
          v36.i64[1] = v33.i64[1];
          v28.i64[1] = vdupq_laneq_s64(v31, 1).u64[0];
          v29.i64[1] = vdupq_laneq_s64(v32, 1).u64[0];
          v30.i64[1] = vdupq_laneq_s64(v33, 1).u64[0];
          v37 = (int8x16_t)vcgtq_f32(v14, v25);
          v38 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v25);
          v39 = (float32x4_t)vbslq_s8(v26, v38, vbslq_s8(v27, vbslq_s8(v37, (int8x16_t)vrev64q_s32((int32x4_t)v28), vextq_s8(v34, v34, 0xCuLL)), v34));
          v40 = (float32x4_t)vbslq_s8(v26, v38, vbslq_s8(v27, vbslq_s8(v37, (int8x16_t)vrev64q_s32((int32x4_t)v29), vextq_s8(v35, v35, 0xCuLL)), v35));
          v41 = (float32x4_t)vbslq_s8(v26, v38, vbslq_s8(v27, vbslq_s8(v37, (int8x16_t)vrev64q_s32((int32x4_t)v30), vextq_s8(v36, v36, 0xCuLL)), v36));
          v42 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), *(float32x4_t *)(v13 + 96));
          v43 = vbslq_s8(v42, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v24, v39), (int8x16_t)vdupq_laneq_s32((int32x4_t)v39, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + v12 - 32), v39, 3));
          v44 = vbslq_s8(v42, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v24, v40), (int8x16_t)vdupq_laneq_s32((int32x4_t)v40, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + v12 - 16), v40, 3));
          v45 = vbslq_s8(v42, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v24, v41), (int8x16_t)vdupq_laneq_s32((int32x4_t)v41, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + v12), v41, 3));
          v46 = (int8x16_t *)(v5 + v12);
          v46[-2] = v43;
          v46[-1] = v44;
          *v46 = v45;
          v11 -= 3;
          v12 += 48;
        }
        while (v4 + v11 > 2);
        LODWORD(v47) = -v11;
      }
      if ((int)v47 < v4)
      {
        v47 = v47;
        do
        {
          v48 = *((_QWORD *)this + 51);
          v49 = *(float32x4_t *)(v48 + 16);
          v50 = vmulq_f32(*(float32x4_t *)(v8 + 16 * v47), *(float32x4_t *)v48);
          v51 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL));
          v52 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), *(float32x2_t *)v49.f32, 1);
          v53 = *(float32x4_t *)(v48 + 32);
          v54 = *(float32x4_t *)(v48 + 48);
          v55 = *(int8x16_t *)(v48 + 64);
          v56 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v52, (int8x16_t)vaddq_f32(v53, vmulq_f32(v54, (float32x4_t)vrev64q_s32(v52))));
          v56.i64[0] = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v56), vmulq_n_f32(v56, v49.f32[0])).u64[0];
          v57 = (int64x2_t)vsubq_f32(v54, (float32x4_t)vdupq_lane_s64(v56.i64[0], 0));
          v58.i64[0] = v56.i64[0];
          v58.i64[1] = v57.i64[1];
          v56.i64[1] = vdupq_laneq_s64(v57, 1).u64[0];
          v59 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), v54), vbslq_s8(*(int8x16_t *)(v48 + 80), vbslq_s8((int8x16_t)vcgtq_f32(v49, v54), (int8x16_t)vrev64q_s32((int32x4_t)v56), vextq_s8(v58, v58, 0xCuLL)), v58));
          *(int8x16_t *)(v5 + 16 * v47) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 3), *(float32x4_t *)(v48 + 96)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v53, v59), (int8x16_t)vdupq_laneq_s32((int32x4_t)v59, 2), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1)), 0), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(v6 + 16 * v47), v59, 3));
          ++v47;
        }
        while (v47 < v4);
      }
      ++v3;
      v8 += v7;
      v5 += v9;
      v6 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompSubtract::GetDOD(HgcMaskCompSubtract *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcMaskCompSubtract::GetROI(HgcMaskCompSubtract *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcMaskCompSubtract::HgcMaskCompSubtract(HgcMaskCompSubtract *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C3AD8;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 48) = xmmword_1B3561F30;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 80) = xmmword_1B3050FE0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F654C0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompSubtract::~HgcMaskCompSubtract(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C3AD8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AC4F46D1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMaskCompSubtract::~HgcMaskCompSubtract(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompSubtract::SetParameter(HgcMaskCompSubtract *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompSubtract::GetParameter(HgcMaskCompSubtract *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcWrapMirror::GetProgram(HgcWrapMirror *this, HGRenderer *a2)
{
  unsigned int Target;
  int v5;
  int v6;
  unsigned int v8;
  int v9;
  const char *v10;
  const char *v11;
  BOOL v12;
  int v13;
  const char *v15;
  const char *v16;

  Target = HGRenderer::GetTarget(a2, 393216);
  v5 = (*(uint64_t (**)(HgcWrapMirror *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2);
  if (Target <= 0x6041F)
    v6 = 394016;
  else
    v6 = 394304;
  if (Target < 0x60600 && v5 == 0)
    v8 = v6;
  else
    v8 = Target;
  if (v8 == 396048)
  {
    v9 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20);
    v10 = "//Metal1.0     \n"
          "//LEN=00000007f8\n"
          "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
          "    const constant float4* hg_Params [[ buffer(0) ]], \n"
          "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
          "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
          "{\n"
          "    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
          "    float4 r0, r1, r2;\n"
          "    FragmentOut output;\n"
          "\n"
          "    r0 = frag._texCoord0.yyyy*hg_Params[2];\n"
          "    r0 = frag._texCoord0.xxxx*hg_Params[1] + r0;\n"
          "    r0 = frag._texCoord0.zzzz*hg_Params[3] + r0;\n"
          "    r1 = r0 + hg_Params[4];\n"
          "    r0.x = float(r0.w < -hg_Params[4].w);\n"
          "    r0.z = float(c0.z < r1.w);\n"
          "    r0.y = r0.z;\n"
          "    r0.xy = float2(-r0.xy >= c0.zz);\n"
          "    r0.xz = fmin(r0.xx, r0.yz);\n"
          "    r0.w = fmin(r1.w, c0.x);\n"
          "    r2.x = fmax(r1.w, -c0.x);\n"
          "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
          "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
          "    r0.xyz = r1.xyz/r0.xxx;\n"
          "    r2.xy = hg_Params[0].zw + hg_Params[0].zw;\n"
          "    r2.zw = r0.xy - hg_Params[0].xy;\n"
          "    r0.xy = r2.zw/r2.xy;\n"
          "    r0.xy = floor(r0.xy);\n"
          "    r0.xy = -r2.xy*r0.xy + r2.zw;\n"
          "    r0.xy = r0.xy - hg_Params[0].zw;\n"
          "    r0.xy = hg_Params[0].zw - fabs(r0.xy);\n"
          "    r0.xy = r0.xy + hg_Params[0].xy;\n"
          "    r1.xyz = r0.yyy*hg_Params[6].xyz;\n"
          "    r1.xyz = r0.xxx*hg_Params[5].xyz + r1.xyz;\n"
          "    r0.xyz = r0.zzz*hg_Params[7].xyz + r1.xyz;\n"
          "    r0.w = float(r0.z < -hg_Params[8].w);\n"
          "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
          "    r2.y = float(c0.z < r0.z);\n"
          "    r2.x = r2.y;\n"
          "    r2.z = fmin(r0.z, c0.x);\n"
          "    r0.w = c0.y - r0.w;\n"
          "    r2.y = fmin(r0.w, r2.y);\n"
          "    r2.x = float(-r2.x >= c0.z);\n"
          "    r0.z = fmax(r0.z, -c0.x);\n"
          "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
          "    r0.w = fmin(r0.w, r2.x);\n"
          "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
          "    r0.xy = r0.xy/r0.zz;\n"
          "    r0.xy = r0.xy + hg_Params[9].xy;\n"
          "    r0.xy = r0.xy*hg_Params[9].zw;\n"
          "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
          "    return output;\n"
          "}\n"
          "//MD5=ccf4b309:ab9896f3:8a2769eb:f7dd6df8\n"
          "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    v11 = "//Metal1.0     \n"
          "//LEN=0000000896\n"
          "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
          "    const constant float4* hg_Params [[ buffer(0) ]], \n"
          "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
          "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
          "{\n"
          "    const half4 c0 = half4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
          "    half4 r0;\n"
          "    float4 s0, s1, s2;\n"
          "    FragmentOut output;\n"
          "\n"
          "    s0 = frag._texCoord0.yyyy*hg_Params[2];\n"
          "    s0 = frag._texCoord0.xxxx*hg_Params[1] + s0;\n"
          "    s0 = frag._texCoord0.zzzz*hg_Params[3] + s0;\n"
          "    s1 = s0 + hg_Params[4];\n"
          "    s0.x = float(s0.w < -hg_Params[4].w);\n"
          "    s0.z = float(float(c0.z) < s1.w);\n"
          "    s0.y = s0.z;\n"
          "    s0.xy = float2(-s0.xy >= float2(c0.zz));\n"
          "    s0.xz = fmin(s0.xx, s0.yz);\n"
          "    s0.w = fmin(s1.w, float(c0.x));\n"
          "    s2.x = fmax(s1.w, -float(c0.x));\n"
          "    s0.z = select(s0.w, s2.x, -s0.z < 0.00000h);\n"
          "    s0.x = select(s0.z, -float(c0.x), -s0.x < 0.00000h);\n"
          "    s0.xyz = s1.xyz/s0.xxx;\n"
          "    r0.xy = half2(hg_Params[0].zw) + half2(hg_Params[0].zw);\n"
          "    r0.zw = half2(s0.xy) - half2(hg_Params[0].xy);\n"
          "    s0.xy = float2(r0.zw)/float2(r0.xy);\n"
          "    s0.xy = floor(s0.xy);\n"
          "    s0.xy = -float2(r0.xy)*s0.xy + float2(r0.zw);\n"
          "    s0.xy = s0.xy - hg_Params[0].zw;\n"
          "    s0.xy = hg_Params[0].zw - fabs(s0.xy);\n"
          "    s0.xy = s0.xy + hg_Params[0].xy;\n"
          "    s2.xyz = s0.yyy*hg_Params[6].xyz;\n"
          "    s2.xyz = s0.xxx*hg_Params[5].xyz + s2.xyz;\n"
          "    s0.xyz = s0.zzz*hg_Params[7].xyz + s2.xyz;\n"
          "    s0.w = float(s0.z < -hg_Params[8].w);\n"
          "    s0.xyz = s0.xyz + hg_Params[8].xyw;\n"
          "    s1.y = float(float(c0.z) < s0.z);\n"
          "    s1.x = s1.y;\n"
          "    s1.z = fmin(s0.z, float(c0.x));\n"
          "    s0.w = float(c0.y) - s0.w;\n"
          "    s1.y = fmin(s0.w, s1.y);\n"
          "    s1.x = float(-s1.x >= float(c0.z));\n"
          "    s0.z = fmax(s0.z, -float(c0.x));\n"
          "    s0.z = select(s1.z, s0.z, -s1.y < 0.00000h);\n"
          "    s0.w = fmin(s0.w, s1.x);\n"
          "    s0.z = select(s0.z, -float(c0.x), -s0.w < 0.00000h);\n"
          "    s0.xy = s0.xy/s0.zz;\n"
          "    s0.xy = s0.xy + hg_Params[9].xy;\n"
          "    s0.xy = s0.xy*hg_Params[9].zw;\n"
          "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
          "    return output;\n"
          "}\n"
          "//MD5=ecb9e5b5:e61bd49c:a9616b8b:a3f4b05b\n"
          "//SIG=00400000:00000000:00000000:00000001:0001:000a:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    v12 = v9 == 27;
    goto LABEL_14;
  }
  if (v8 > 0x6060F)
  {
    v13 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46);
    v10 = "!!ARBfp1.0     \n"
          "##LEN=000000066f\n"
          "OPTION NV_fragment_program2;\n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "SUB r0.xy,$p0.zwzw,|r0|;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r1.xyz,r0.y,$p6;\n"
          "MAD r1.xyz,r0.x,$p5,r1;\n"
          "MAD r0.xyz,r0.z,$p7,r1;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r2.y,$c0.z,r0.z;\n"
          "MOV r2.x,r2.y;\n"
          "MIN r2.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r2.y,r0.w,r2;\n"
          "SGE r2.x,-r2,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r2.y,r0,r2;\n"
          "MIN r0.w,r0,r2.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r1.xy,r0.z;\n"
          "MUL r0.xy,r1,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "##0\n"
          "TEX $o0,r0,texture[0],RECT;\n"
          "END\n"
          "##MD5=2f3708bd:fca4e30f:d3f199f3:8794b567\n"
          "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    v11 = "//GLfs2.0      \n"
          "//LEN=0000000937\n"
          "#ifndef GL_ES\n"
          "#define lowp\n"
          "#define mediump\n"
          "#define highp\n"
          "#endif\n"
          "#define defaultp mediump\n"
          "uniform defaultp sampler2D hg_Texture0;\n"
          "uniform highp vec4 hg_ProgramLocal0;\n"
          "uniform highp vec4 hg_ProgramLocal1;\n"
          "uniform highp vec4 hg_ProgramLocal2;\n"
          "uniform highp vec4 hg_ProgramLocal3;\n"
          "uniform highp vec4 hg_ProgramLocal4;\n"
          "uniform highp vec4 hg_ProgramLocal5;\n"
          "uniform highp vec4 hg_ProgramLocal6;\n"
          "uniform highp vec4 hg_ProgramLocal7;\n"
          "uniform highp vec4 hg_ProgramLocal8;\n"
          "uniform highp vec4 hg_ProgramLocal9;\n"
          "varying highp vec4 hg_TexCoord0;\n"
          "void main()\n"
          "{\n"
          "    const highp vec4 c0 = vec4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
          "    highp vec4 r0, r1, r2;\n"
          "\n"
          "    r0 = hg_TexCoord0.yyyy*hg_ProgramLocal2;\n"
          "    r0 = hg_TexCoord0.xxxx*hg_ProgramLocal1 + r0;\n"
          "    r0 = hg_TexCoord0.zzzz*hg_ProgramLocal3 + r0;\n"
          "    r1 = r0 + hg_ProgramLocal4;\n"
          "    r0.x = float(r0.w < -hg_ProgramLocal4.w);\n"
          "    r0.z = float(c0.z < r1.w);\n"
          "    r0.y = r0.z;\n"
          "    r0.xy = vec2(greaterThanEqual(-r0.xy, c0.zz));\n"
          "    r0.xz = min(r0.xx, r0.yz);\n"
          "    r0.w = min(r1.w, c0.x);\n"
          "    r2.x = max(r1.w, -c0.x);\n"
          "    r0.z = -r0.z < 0.00000 ? r2.x : r0.w;\n"
          "    r0.x = -r0.x < 0.00000 ? -c0.x : r0.z;\n"
          "    r0.xyz = r1.xyz/r0.xxx;\n"
          "    r2.xy = hg_ProgramLocal0.zw + hg_ProgramLocal0.zw;\n"
          "    r2.zw = r0.xy - hg_ProgramLocal0.xy;\n"
          "    r0.xy = r2.zw/r2.xy;\n"
          "    r0.xy = floor(r0.xy);\n"
          "    r0.xy = -r2.xy*r0.xy + r2.zw;\n"
          "    r0.xy = r0.xy - hg_ProgramLocal0.zw;\n"
          "    r0.xy = hg_ProgramLocal0.zw - abs(r0.xy);\n"
          "    r0.xy = r0.xy + hg_ProgramLocal0.xy;\n"
          "    r1.xyz = r0.yyy*hg_ProgramLocal6.xyz;\n"
          "    r1.xyz = r0.xxx*hg_ProgramLocal5.xyz + r1.xyz;\n"
          "    r0.xyz = r0.zzz*hg_ProgramLocal7.xyz + r1.xyz;\n"
          "    r0.w = float(r0.z < -hg_ProgramLocal8.w);\n"
          "    r0.xyz = r0.xyz + hg_ProgramLocal8.xyw;\n"
          "    r2.y = float(c0.z < r0.z);\n"
          "    r2.x = r2.y;\n"
          "    r2.z = min(r0.z, c0.x);\n"
          "    r0.w = c0.y - r0.w;\n"
          "    r2.y = min(r0.w, r2.y);\n"
          "    r2.x = float(-r2.x >= c0.z);\n"
          "    r0.z = max(r0.z, -c0.x);\n"
          "    r0.z = -r2.y < 0.00000 ? r0.z : r2.z;\n"
          "    r0.w = min(r0.w, r2.x);\n"
          "    r0.z = -r0.w < 0.00000 ? -c0.x : r0.z;\n"
          "    r0.xy = r0.xy/r0.zz;\n"
          "    r0.xy = r0.xy + hg_ProgramLocal9.xy;\n"
          "    r0.xy = r0.xy*hg_ProgramLocal9.zw;\n"
          "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
          "}\n"
          "//MD5=eb01f0ce:600d3436:a6d6d921:a09c07d3\n"
          "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    v12 = v13 == 0;
LABEL_14:
    if (v12)
      return v11;
    else
      return v10;
  }
  if (v8 <= 0x6040F)
    v15 = "!!ARBfp1.0     \n"
          "##LEN=00000007d7\n"
          "##                          \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.5000000000};\n"
          "PARAM $c1={1.500000000,0.5000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2,r3,r4;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "ABS r1.xy,r0;\n"
          "SUB r0.xy,$p0.zwzw,r1;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r2.xyz,r0.y,$p6;\n"
          "MAD r2.xyz,r0.x,$p5,r2;\n"
          "MAD r0.xyz,r0.z,$p7,r2;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r1.y,$c0.z,r0.z;\n"
          "MOV r1.x,r1.y;\n"
          "MIN r1.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r1.y,r0.w,r1;\n"
          "SGE r1.x,-r1,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r1.y,r0,r1;\n"
          "MIN r0.w,r0,r1.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r2.xy,r0.z;\n"
          "MUL r0.xy,r2,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "SUB r0.xy,r0,$c0.w;\n"
          "FLR r1.xy,r0;\n"
          "FRC r0.xy,r0;\n"
          "ADD r2.xy,r1,$c0.w;\n"
          "##0\n"
          "TEX r2,r2,texture[0],RECT;\n"
          "ADD r3.xy,r1,$c1;\n"
          "##0\n"
          "TEX r3,r3,texture[0],RECT;\n"
          "ADD r4.xy,r1,$c1.yxzw;\n"
          "##0\n"
          "TEX r4,r4,texture[0],RECT;\n"
          "ADD r1.xy,r1,$c1.x;\n"
          "##0\n"
          "TEX r1,r1,texture[0],RECT;\n"
          "LRP r3,r0.x,r3,r2;\n"
          "LRP r4,r0.x,r1,r4;\n"
          "LRP $o0,r0.y,r4,r3;\n"
          "END\n"
          "##MD5=014b9130:75159e74:5d2309d7:86d53cb4\n"
          "##SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  else
    v15 = "!!ARBfp1.0     \n"
          "##LEN=00000007cb\n"
          "OPTION NV_fragment_program; \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.5000000000};\n"
          "PARAM $c1={1.500000000,0.5000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2,r3,r4;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "SUB r0.xy,$p0.zwzw,|r0|;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r1.xyz,r0.y,$p6;\n"
          "MAD r1.xyz,r0.x,$p5,r1;\n"
          "MAD r0.xyz,r0.z,$p7,r1;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r2.y,$c0.z,r0.z;\n"
          "MOV r2.x,r2.y;\n"
          "MIN r2.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r2.y,r0.w,r2;\n"
          "SGE r2.x,-r2,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r2.y,r0,r2;\n"
          "MIN r0.w,r0,r2.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r1.xy,r0.z;\n"
          "MUL r0.xy,r1,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "SUB r0.xy,r0,$c0.w;\n"
          "FLR r2.xy,r0;\n"
          "FRC r0.xy,r0;\n"
          "ADD r1.xy,r2,$c0.w;\n"
          "##0\n"
          "TEX r1,r1,texture[0],RECT;\n"
          "ADD r3.xy,r2,$c1;\n"
          "##0\n"
          "TEX r3,r3,texture[0],RECT;\n"
          "ADD r4.xy,r2,$c1.yxzw;\n"
          "##0\n"
          "TEX r4,r4,texture[0],RECT;\n"
          "ADD r2.xy,r2,$c1.x;\n"
          "##0\n"
          "TEX r2,r2,texture[0],RECT;\n"
          "LRP r3,r0.x,r3,r1;\n"
          "LRP r4,r0.x,r2,r4;\n"
          "LRP $o0,r0.y,r4,r3;\n"
          "END\n"
          "##MD5=6da8ab86:a1ca2202:162ccb6a:a964f698\n"
          "##SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  if (v8 - 394016 >= 0xF0)
    v16 = v15;
  else
    v16 = "!!ARBfp1.0     \n"
          "##LEN=000000067b\n"
          "##                          \n"
          "##                            \n"
          "##                                \n"
          "##                                     \n"
          "##$\n"
          "OUTPUT $o0=result.color;\n"
          "ATTRIB $f0=fragment.texcoord[0];\n"
          "PARAM $p0=program.local[0];\n"
          "PARAM $p1=program.local[1];\n"
          "PARAM $p2=program.local[2];\n"
          "PARAM $p3=program.local[3];\n"
          "PARAM $p4=program.local[4];\n"
          "PARAM $p5=program.local[5];\n"
          "PARAM $p6=program.local[6];\n"
          "PARAM $p7=program.local[7];\n"
          "PARAM $p8=program.local[8];\n"
          "PARAM $p9=program.local[9];\n"
          "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
          "##%\n"
          "TEMP r0,r1,r2;\n"
          "##@\n"
          "MUL r0,$f0.y,$p2;\n"
          "MAD r0,$f0.x,$p1,r0;\n"
          "MAD r0,$f0.z,$p3,r0;\n"
          "ADD r1,r0,$p4;\n"
          "SLT r0.x,r0.w,-$p4.w;\n"
          "SLT r0.z,$c0,r1.w;\n"
          "MOV r0.y,r0.z;\n"
          "SGE r0.xy,-r0,$c0.z;\n"
          "MIN r0.xz,r0.x,r0.yyzw;\n"
          "MIN r0.w,r1,$c0.x;\n"
          "MAX r2.x,r1.w,-$c0;\n"
          "CMP r0.z,-r0,r2.x,r0.w;\n"
          "CMP r0.x,-r0,-$c0,r0.z;\n"
          "RCP r0.xyz,r0.x;\n"
          "MUL r0.xyz,r0,r1;\n"
          "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
          "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
          "RCP r1.x,r2.x;\n"
          "RCP r1.y,r2.y;\n"
          "MUL r0.xy,r1,r2.zwzw;\n"
          "FLR r0.xy,r0;\n"
          "MAD r0.xy,-r2,r0,r2.zwzw;\n"
          "SUB r0.xy,r0,$p0.zwzw;\n"
          "ABS r1.xy,r0;\n"
          "SUB r0.xy,$p0.zwzw,r1;\n"
          "ADD r0.xy,r0,$p0;\n"
          "MUL r2.xyz,r0.y,$p6;\n"
          "MAD r2.xyz,r0.x,$p5,r2;\n"
          "MAD r0.xyz,r0.z,$p7,r2;\n"
          "SLT r0.w,r0.z,-$p8;\n"
          "ADD r0.xyz,r0,$p8.xyww;\n"
          "SLT r1.y,$c0.z,r0.z;\n"
          "MOV r1.x,r1.y;\n"
          "MIN r1.z,r0,$c0.x;\n"
          "SUB r0.w,$c0.y,r0;\n"
          "MIN r1.y,r0.w,r1;\n"
          "SGE r1.x,-r1,$c0.z;\n"
          "MAX r0.z,r0,-$c0.x;\n"
          "CMP r0.z,-r1.y,r0,r1;\n"
          "MIN r0.w,r0,r1.x;\n"
          "CMP r0.z,-r0.w,-$c0.x,r0;\n"
          "RCP r2.xy,r0.z;\n"
          "MUL r0.xy,r2,r0;\n"
          "ADD r0.xy,r0,$p9;\n"
          "##0\n"
          "TEX $o0,r0,texture[0],RECT;\n"
          "END\n"
          "##MD5=5f410862:0f55a39c:a6ecc8e6:8e9c4288\n"
          "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  if (v8 <= 0x6043F)
    return v16;
  else
    return "!!ARBfp1.0     \n"
           "##LEN=000000066f\n"
           "OPTION NV_fragment_program2;\n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $p2=program.local[2];\n"
           "PARAM $p3=program.local[3];\n"
           "PARAM $p4=program.local[4];\n"
           "PARAM $p5=program.local[5];\n"
           "PARAM $p6=program.local[6];\n"
           "PARAM $p7=program.local[7];\n"
           "PARAM $p8=program.local[8];\n"
           "PARAM $p9=program.local[9];\n"
           "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1,r2;\n"
           "##@\n"
           "MUL r0,$f0.y,$p2;\n"
           "MAD r0,$f0.x,$p1,r0;\n"
           "MAD r0,$f0.z,$p3,r0;\n"
           "ADD r1,r0,$p4;\n"
           "SLT r0.x,r0.w,-$p4.w;\n"
           "SLT r0.z,$c0,r1.w;\n"
           "MOV r0.y,r0.z;\n"
           "SGE r0.xy,-r0,$c0.z;\n"
           "MIN r0.xz,r0.x,r0.yyzw;\n"
           "MIN r0.w,r1,$c0.x;\n"
           "MAX r2.x,r1.w,-$c0;\n"
           "CMP r0.z,-r0,r2.x,r0.w;\n"
           "CMP r0.x,-r0,-$c0,r0.z;\n"
           "RCP r0.xyz,r0.x;\n"
           "MUL r0.xyz,r0,r1;\n"
           "ADD r2.xy,$p0.zwzw,$p0.zwzw;\n"
           "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
           "RCP r1.x,r2.x;\n"
           "RCP r1.y,r2.y;\n"
           "MUL r0.xy,r1,r2.zwzw;\n"
           "FLR r0.xy,r0;\n"
           "MAD r0.xy,-r2,r0,r2.zwzw;\n"
           "SUB r0.xy,r0,$p0.zwzw;\n"
           "SUB r0.xy,$p0.zwzw,|r0|;\n"
           "ADD r0.xy,r0,$p0;\n"
           "MUL r1.xyz,r0.y,$p6;\n"
           "MAD r1.xyz,r0.x,$p5,r1;\n"
           "MAD r0.xyz,r0.z,$p7,r1;\n"
           "SLT r0.w,r0.z,-$p8;\n"
           "ADD r0.xyz,r0,$p8.xyww;\n"
           "SLT r2.y,$c0.z,r0.z;\n"
           "MOV r2.x,r2.y;\n"
           "MIN r2.z,r0,$c0.x;\n"
           "SUB r0.w,$c0.y,r0;\n"
           "MIN r2.y,r0.w,r2;\n"
           "SGE r2.x,-r2,$c0.z;\n"
           "MAX r0.z,r0,-$c0.x;\n"
           "CMP r0.z,-r2.y,r0,r2;\n"
           "MIN r0.w,r0,r2.x;\n"
           "CMP r0.z,-r0.w,-$c0.x,r0;\n"
           "RCP r1.xy,r0.z;\n"
           "MUL r0.xy,r1,r0;\n"
           "ADD r0.xy,r0,$p9;\n"
           "##0\n"
           "TEX $o0,r0,texture[0],RECT;\n"
           "END\n"
           "##MD5=2f3708bd:fca4e30f:d3f199f3:8794b567\n"
           "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
}

void HgcWrapMirror::InitProgramDescriptor(HgcWrapMirror *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcWrapMirror_hgc_visible", "//Metal1.0     \n//LEN=000000072c\n[[ visible ]] FragmentOut HgcWrapMirror_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0.yyyy*hg_Params[2];\n"
    "    r0 = texCoord0.xxxx*hg_Params[1] + r0;\n"
    "    r0 = texCoord0.zzzz*hg_Params[3] + r0;\n"
    "    r1 = r0 + hg_Params[4];\n"
    "    r0.x = float(r0.w < -hg_Params[4].w);\n"
    "    r0.z = float(c0.z < r1.w);\n"
    "    r0.y = r0.z;\n"
    "    r0.xy = float2(-r0.xy >= c0.zz);\n"
    "    r0.xz = fmin(r0.xx, r0.yz);\n"
    "    r0.w = fmin(r1.w, c0.x);\n"
    "    r2.x = fmax(r1.w, -c0.x);\n"
    "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
    "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
    "    r0.xyz = r1.xyz/r0.xxx;\n"
    "    r2.xy = hg_Params[0].zw + hg_Params[0].zw;\n"
    "    r2.zw = r0.xy - hg_Params[0].xy;\n"
    "    r0.xy = r2.zw/r2.xy;\n"
    "    r0.xy = floor(r0.xy);\n"
    "    r0.xy = -r2.xy*r0.xy + r2.zw;\n"
    "    r0.xy = r0.xy - hg_Params[0].zw;\n"
    "    r0.xy = hg_Params[0].zw - fabs(r0.xy);\n"
    "    r0.xy = r0.xy + hg_Params[0].xy;\n"
    "    r1.xyz = r0.yyy*hg_Params[6].xyz;\n"
    "    r1.xyz = r0.xxx*hg_Params[5].xyz + r1.xyz;\n"
    "    r0.xyz = r0.zzz*hg_Params[7].xyz + r1.xyz;\n"
    "    r0.w = float(r0.z < -hg_Params[8].w);\n"
    "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
    "    r2.y = float(c0.z < r0.z);\n"
    "    r2.x = r2.y;\n"
    "    r2.z = fmin(r0.z, c0.x);\n"
    "    r0.w = c0.y - r0.w;\n"
    "    r2.y = fmin(r0.w, r2.y);\n"
    "    r2.x = float(-r2.x >= c0.z);\n"
    "    r0.z = fmax(r0.z, -c0.x);\n"
    "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
    "    r0.w = fmin(r0.w, r2.x);\n"
    "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
    "    r0.xy = r0.xy/r0.zz;\n"
    "    r0.xy = r0.xy + hg_Params[9].xy;\n"
    "    r0.xy = r0.xy*hg_Params[9].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F6575C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcWrapMirror");
}

void sub_1B2F6576C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051B00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F658EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F6593C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F65934);
}

_QWORD *HgcWrapMirror::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcWrapMirror [hgc1]");
}

uint64_t HgcWrapMirror::BindTexture(HgcWrapMirror *this, HGRenderer **a2, int a3)
{
  unsigned int Target;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;

  Target = HGRenderer::GetTarget(a2[18], 393216);
  if (a3)
    return 0xFFFFFFFFLL;
  if (Target > 0x6043F || Target - 394016 <= 0xEF)
  {
    (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 9))(a2, 0, 0);
    v8 = (*(uint64_t (**)(HgcWrapMirror *, _QWORD))(*(_QWORD *)this + 312))(this, 0);
    (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, v8, v8);
  }
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2[18] + 128))(a2[18], 46))
  {
    v11.n128_u32[0] = 1.0;
    v12.n128_u32[0] = 1.0;
  }
  else
  {
    v11.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
    v12.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
  }
  v9.n128_f32[0] = (float)*((int *)a2 + 60);
  v10.n128_f32[0] = (float)*((int *)a2 + 61);
  (*((void (**)(HGRenderer **, uint64_t, __n128, __n128, __n128, __n128))*a2 + 17))(a2, 9, v9, v10, v11, v12);
  return 0;
}

uint64_t HgcWrapMirror::Bind(HgcWrapMirror *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HgcWrapMirror *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcWrapMirror::RenderTile(HgcWrapMirror *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x8_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x8_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x8_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  float32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t v121;
  float32x4_t v122;
  uint64_t v123;
  int32x4_t v124;
  float32x2_t v125;
  float32x4_t *v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  float32x4_t *v138;
  uint64_t v139;
  int8x16_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  float32x4_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  float32x4_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  uint64_t v190;
  float32x4_t v191;
  uint64_t v192;
  int32x4_t v193;
  float32x2_t v194;
  float32x4_t *v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  int32x4_t v199;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcWrapMirror *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 32);
          v21 = *(float32x4_t *)(v19 + 48);
          v22 = vmulq_lane_f32(v20, *(float32x2_t *)v17.f32, 1);
          v23 = vmulq_lane_f32(v20, *(float32x2_t *)v18.f32, 1);
          v24 = *(int8x16_t *)v19;
          v25 = *(float32x4_t *)(v19 + 16);
          v26 = vaddq_f32(vaddq_f32(v22, vmulq_n_f32(v25, v17.f32[0])), vmulq_laneq_f32(v21, v17, 2));
          v27 = vaddq_f32(vaddq_f32(v23, vmulq_n_f32(v25, v18.f32[0])), vmulq_laneq_f32(v21, v18, 2));
          v28 = *(float32x4_t *)(v19 + 64);
          v29 = *(float32x4_t *)(v19 + 80);
          v30 = (int8x16_t)vaddq_f32(v28, v26);
          v31 = (int8x16_t)vaddq_f32(v28, v27);
          v32 = vnegq_f32(v28);
          v33 = (int8x16_t)vcgtq_f32(v32, v26);
          v34 = (int8x16_t)vcgtq_f32(v32, v27);
          v36 = *(int8x16_t *)(v19 + 128);
          v35 = *(int8x16_t *)(v19 + 144);
          v37 = vandq_s8(v35, v33);
          v38 = vandq_s8(v35, v34);
          v39 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), (float32x4_t)v35);
          v40 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), (float32x4_t)v35);
          *(int8x8_t *)v37.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(int8x8_t *)v37.i8, 4uLL);
          v41 = (int8x8_t)vextq_s8(v39, v39, 8uLL).u64[0];
          v43 = *(int8x16_t *)(v19 + 160);
          v42 = *(int8x16_t *)(v19 + 176);
          v44 = (int8x8_t)vextq_s8(v43, v43, 8uLL).u64[0];
          v37.u64[1] = (unint64_t)vand_s8(v44, v41);
          *(int8x8_t *)v38.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), *(int8x8_t *)v38.i8, 4uLL);
          v38.u64[1] = (unint64_t)vand_s8(v44, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
          v45 = vbslq_s8(v42, vextq_s8(v37, v37, 4uLL), v37);
          v46 = vbslq_s8(v42, vextq_s8(v38, v38, 4uLL), v38);
          v40.i64[0] = vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v45), (float32x4_t)v43)).u64[0];
          v47.i64[0] = vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v46), (float32x4_t)v43)).u64[0];
          v40.i64[1] = vextq_s8(v45, v45, 8uLL).u64[0];
          v49 = *(int8x16_t *)(v19 + 192);
          v48 = *(int8x16_t *)(v19 + 208);
          *(int8x8_t *)v50.f32 = vqtbl1_s8(v40, *(int8x8_t *)v49.i8);
          v51 = (int8x8_t)vextq_s8(v49, v49, 8uLL).u64[0];
          *(int8x8_t *)&v50.u32[2] = vqtbl1_s8(v40, v51);
          v47.i64[1] = vextq_s8(v46, v46, 8uLL).u64[0];
          *(int8x8_t *)v46.i8 = vqtbl1_s8(v47, *(int8x8_t *)v49.i8);
          v46.u64[1] = (unint64_t)vqtbl1_s8(v47, v51);
          v52 = (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v47.i64[0], 0), (float32x4_t)v46);
          v53 = (float32x4_t)vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v30, (float32x4_t)v43), (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v40.i64[0], 0), v50));
          v54 = (float32x4_t)vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v31, (float32x4_t)v43), v52);
          v56 = *(int8x16_t *)(v19 + 224);
          v55 = *(int8x16_t *)(v19 + 240);
          v53.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v53, *(float32x4_t *)&v56), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v30, v30, 0xCuLL), *(float32x4_t *)&v56), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v53)).i64[1];
          v54.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v54, *(float32x4_t *)&v56), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v31, v31, 0xCuLL), *(float32x4_t *)&v56), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v54)).i64[1];
          v57 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v53, 2);
          v58 = (int8x16_t)vcgtq_f32(v53, (float32x4_t)v43);
          v43.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v54, (float32x4_t)v43), v56, (int8x16_t)vdupq_laneq_s32((int32x4_t)v54, 2)).u64[0];
          v59 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v58, v56, v57), 0);
          v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 0);
          v61 = *(float32x4_t *)(v19 + 256);
          v62 = *(int8x16_t *)(v19 + 272);
          v63 = vminq_f32(vmaxq_f32(vrecpeq_f32(v59), (float32x4_t)v55), v61);
          v64 = vminq_f32(vmaxq_f32(vrecpeq_f32(v60), (float32x4_t)v55), v61);
          v65 = vminq_f32(vmaxq_f32(vmulq_f32(v63, vrecpsq_f32(v59, v63)), (float32x4_t)v55), v61);
          v66 = vminq_f32(vmaxq_f32(vmulq_f32(v64, vrecpsq_f32(v60, v64)), (float32x4_t)v55), v61);
          v67 = vmulq_f32((float32x4_t)v30, vmulq_f32(v65, vrecpsq_f32(v59, v65)));
          v68 = vmulq_f32((float32x4_t)v31, vmulq_f32(v66, vrecpsq_f32(v60, v66)));
          v69 = (float32x4_t)vdupq_lane_s64(vsubq_f32(v67, *(float32x4_t *)v19).i64[0], 0);
          v70 = (float32x4_t)vdupq_lane_s64(vsubq_f32(v68, *(float32x4_t *)v19).i64[0], 0);
          v71 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v69, 1);
          v69.i64[0] = vaddq_f32(*(float32x4_t *)&v24, *(float32x4_t *)&v24).i64[1];
          v72 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v70, 1);
          v70.i64[0] = v69.i64[0];
          v73 = vminq_f32(vmaxq_f32(vrecpeq_f32(v69), (float32x4_t)v55), v61);
          v74 = vminq_f32(vmaxq_f32(vrecpeq_f32(v70), (float32x4_t)v55), v61);
          v75 = vminq_f32(vmaxq_f32(vmulq_f32(v73, vrecpsq_f32(v69, v73)), (float32x4_t)v55), v61);
          v76 = vminq_f32(vmaxq_f32(vmulq_f32(v74, vrecpsq_f32(v70, v74)), (float32x4_t)v55), v61);
          v75.i64[0] = vmulq_f32(v71, vmulq_f32(v75, vrecpsq_f32(v69, v75))).u64[0];
          v76.i64[0] = vmulq_f32(v72, vmulq_f32(v76, vrecpsq_f32(v70, v76))).u64[0];
          v75.i64[1] = v67.i64[1];
          v76.i64[1] = v68.i64[1];
          v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
          v78 = vsubq_f32(v77, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v77, v75), v35, (int8x16_t)0));
          v79 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
          v80 = vsubq_f32(v71, vmulq_f32(v69, v78));
          v81 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
          v80.i64[0] = vsubq_f32(v80, v81).u64[0];
          v70.i64[0] = vsubq_f32(vsubq_f32(v72, vmulq_f32(v70, vsubq_f32(v79, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v79, v76), v35, (int8x16_t)0)))), v81).u64[0];
          v80.i64[1] = v67.i64[1];
          v70.i64[1] = v68.i64[1];
          v80.i64[0] = vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v81, vabsq_f32(v80))).u64[0];
          v24.i64[0] = vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v81, vabsq_f32(v70))).u64[0];
          v82 = *(float32x4_t *)(v19 + 96);
          v83 = *(float32x4_t *)(v19 + 112);
          v84 = vaddq_f32(vmulq_lane_f32(v82, *(float32x2_t *)v24.i8, 1), vmulq_n_f32(v29, *(float *)v24.i32));
          v85 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v83, v67, 2), vaddq_f32(vmulq_lane_f32(v82, *(float32x2_t *)v80.f32, 1), vmulq_n_f32(v29, v80.f32[0])));
          v86 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v83, v68, 2), v84);
          v87 = vnegq_f32((float32x4_t)v36);
          v88 = vandq_s8(v55, (int8x16_t)vcgtq_f32(v87, (float32x4_t)vrev64q_s32((int32x4_t)v85)));
          v89 = vandq_s8(v55, (int8x16_t)vcgtq_f32(v87, (float32x4_t)vrev64q_s32((int32x4_t)v86)));
          *(int8x8_t *)v80.f32 = vqtbl1_s8(v36, *(int8x8_t *)v62.i8);
          *(int8x8_t *)&v80.u32[2] = vqtbl1_s8(v36, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
          v90 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v48, v88, v85));
          v91 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v48, v89, v86));
          v92 = vbslq_s8(v48, v88, v90);
          v93 = vbslq_s8(v48, v89, v91);
          v94 = vandq_s8(v35, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v92, v92, 4uLL), (float32x4_t)v56));
          v95 = vandq_s8(v35, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v93, v93, 4uLL), (float32x4_t)v56));
          v96 = *(int8x16_t *)(v19 + 288);
          v97 = *(float32x4_t *)(v19 + 304);
          v94.i64[0] = vbslq_s8(v96, (int8x16_t)vrev64q_s32((int32x4_t)v94), v94).u64[0];
          v95.i64[0] = vbslq_s8(v96, (int8x16_t)vrev64q_s32((int32x4_t)v95), v95).u64[0];
          v94.i64[1] = vminq_f32(*(float32x4_t *)&v92, v97).i64[1];
          v95.i64[1] = vminq_f32(*(float32x4_t *)&v93, v97).i64[1];
          v98 = vbslq_s8(v48, (int8x16_t)vsubq_f32(v97, (float32x4_t)v92), v90);
          v99 = vbslq_s8(v48, (int8x16_t)vsubq_f32(v97, (float32x4_t)v93), v91);
          v100 = vbslq_s8(v42, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v98, v98, 8uLL), (float32x4_t)v94), v94);
          v101 = vbslq_s8(v42, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v99, v99, 8uLL), (float32x4_t)v95), v95);
          v102 = vbslq_s8(v96, vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v100), v97)), v100);
          v103 = vbslq_s8(v96, vandq_s8(v35, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v101), v97)), v101);
          v104 = *(int8x16_t *)(v19 + 320);
          v105 = *(int8x16_t *)(v19 + 336);
          v106 = vbslq_s8(v105, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v102, v102, 0xCuLL), (float32x4_t)v56), vbslq_s8(v105, (int8x16_t)vmaxq_f32((float32x4_t)v98, (float32x4_t)v104), v98), v102), v98);
          v107 = vbslq_s8(v105, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v103, v103, 0xCuLL), (float32x4_t)v56), vbslq_s8(v105, (int8x16_t)vmaxq_f32((float32x4_t)v99, (float32x4_t)v104), v99), v103), v99);
          v108 = vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v106, (float32x4_t)vextq_s8(v102, v102, 4uLL)), v106);
          v109 = vbslq_s8(v48, (int8x16_t)vminq_f32((float32x4_t)v107, (float32x4_t)vextq_s8(v103, v103, 4uLL)), v107);
          v110 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v108), (float32x4_t)v56), v104, v108);
          v111 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v109), (float32x4_t)v56), v104, v109);
          v108.i64[1] = v110.i64[1];
          v109.i64[1] = v111.i64[1];
          v112 = (float32x4_t)vdupq_laneq_s32(v110, 2);
          v113 = (float32x4_t)vdupq_laneq_s32(v111, 2);
          v114 = vminq_f32(vmaxq_f32(vrecpeq_f32(v112), (float32x4_t)v55), v61);
          v115 = vminq_f32(vmaxq_f32(vrecpeq_f32(v113), (float32x4_t)v55), v61);
          v116 = vminq_f32(vmaxq_f32(vmulq_f32(v114, vrecpsq_f32(v112, v114)), (float32x4_t)v55), v61);
          v117 = vminq_f32(vmaxq_f32(vmulq_f32(v115, vrecpsq_f32(v113, v115)), (float32x4_t)v55), v61);
          v118 = vmulq_f32(v117, vrecpsq_f32(v113, v117));
          v119 = vmulq_f32(vmulq_f32(v116, vrecpsq_f32(v112, v116)), (float32x4_t)v108);
          v120 = vmulq_f32(v118, (float32x4_t)v109);
          v121 = *((int *)a2 + 22);
          v122 = vsubq_f32(v119, v9);
          v123 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v124 = vaddq_s32(vcvtq_s32_f32(v122), vcltzq_f32(v122));
            v125 = (float32x2_t)vsubq_f32(v122, vcvtq_f32_s32(v124)).u64[0];
            v126 = (float32x4_t *)(v123 + 16 * (v124.i32[0] + v124.i32[1] * (int)v121));
            v127 = vaddq_f32(*v126, vmulq_n_f32(vsubq_f32(v126[1], *v126), v125.f32[0]));
            v128 = vaddq_f32(v127, vmulq_lane_f32(vsubq_f32(vaddq_f32(v126[v121], vmulq_n_f32(vsubq_f32(v126[(int)v121 + 1], v126[v121]), v125.f32[0])), v127), v125, 1));
            v129 = vsubq_f32(v120, v9);
            v130 = vaddq_s32(vcvtq_s32_f32(v129), vcltzq_f32(v129));
            v129.i64[0] = vsubq_f32(v129, vcvtq_f32_s32(v130)).u64[0];
            v131 = (float32x4_t *)(v123 + 16 * (v130.i32[0] + v130.i32[1] * (int)v121));
            v132 = vaddq_f32(*v131, vmulq_n_f32(vsubq_f32(v131[1], *v131), v129.f32[0]));
            v133 = vaddq_f32(v132, vmulq_lane_f32(vsubq_f32(vaddq_f32(v131[v121], vmulq_n_f32(vsubq_f32(v131[(int)v121 + 1], v131[v121]), v129.f32[0])), v132), *(float32x2_t *)v129.f32, 1));
          }
          else
          {
            v134 = vaddq_f32(v122, v13);
            v135 = vcvtq_s32_f32(v134);
            v134.i64[0] = vaddq_s32(v135, vcgtq_f32(vcvtq_f32_s32(v135), v134)).u64[0];
            v128 = *(float32x4_t *)(v123 + 16 * (v134.i32[0] + v134.i32[1] * (int)v121));
            v136 = vaddq_f32(vsubq_f32(v120, v9), v13);
            v137 = vcvtq_s32_f32(v136);
            v136.i64[0] = vaddq_s32(v137, vcgtq_f32(vcvtq_f32_s32(v137), v136)).u64[0];
            v133 = *(float32x4_t *)(v123 + 16 * (v136.i32[0] + v136.i32[1] * (int)v121));
          }
          v138 = (float32x4_t *)(v11 + 16 * v15);
          *v138 = v128;
          v138[1] = v133;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v139 = *((_QWORD *)this + 51);
        v140 = *(int8x16_t *)v139;
        v141 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v139 + 32), *(float32x2_t *)v17.f32, 1), vmulq_n_f32(*(float32x4_t *)(v139 + 16), v17.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v139 + 48), v17, 2));
        v142 = *(float32x4_t *)(v139 + 64);
        v143 = (int8x16_t)vaddq_f32(v142, v141);
        v144 = (int8x16_t)vcgtq_f32(vnegq_f32(v142), v141);
        v146 = *(int8x16_t *)(v139 + 128);
        v145 = *(int8x16_t *)(v139 + 144);
        v147 = vandq_s8(v145, v144);
        v148 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v143), (float32x4_t)v145);
        *(int8x8_t *)v147.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), *(int8x8_t *)v147.i8, 4uLL);
        v149 = *(int8x16_t *)(v139 + 160);
        v150 = *(int8x16_t *)(v139 + 176);
        v147.u64[1] = (unint64_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL));
        v151 = vbslq_s8(v150, vextq_s8(v147, v147, 4uLL), v147);
        v148.i64[0] = vandq_s8(v145, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v151), (float32x4_t)v149)).u64[0];
        v148.i64[1] = vextq_s8(v151, v151, 8uLL).u64[0];
        v152 = *(int8x16_t *)(v139 + 192);
        v153 = *(int8x16_t *)(v139 + 208);
        *(int8x8_t *)v154.f32 = vqtbl1_s8(v148, *(int8x8_t *)v152.i8);
        *(int8x8_t *)&v154.u32[2] = vqtbl1_s8(v148, (int8x8_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL));
        v155 = (float32x4_t)vbslq_s8(v153, (int8x16_t)vminq_f32((float32x4_t)v143, (float32x4_t)v149), (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v148.i64[0], 0), v154));
        v156 = *(int8x16_t *)(v139 + 224);
        v157 = *(int8x16_t *)(v139 + 240);
        v158 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v155, (float32x4_t)v156), (int8x16_t)vdupq_lane_s64(vmaxq_f32((float32x4_t)vextq_s8(v143, v143, 0xCuLL), (float32x4_t)v156).i64[0], 0), (int8x16_t)vrev64q_s32((int32x4_t)v155));
        v155.i64[1] = v158.i64[1];
        v159 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v155, (float32x4_t)v149), v156, (int8x16_t)vdupq_laneq_s32(v158, 2)), 0);
        v160 = *(float32x4_t *)(v139 + 256);
        v161 = *(int8x16_t *)(v139 + 272);
        v162 = vminq_f32(vmaxq_f32(vrecpeq_f32(v159), (float32x4_t)v157), v160);
        v163 = vminq_f32(vmaxq_f32(vmulq_f32(v162, vrecpsq_f32(v159, v162)), (float32x4_t)v157), v160);
        v164 = vmulq_f32((float32x4_t)v143, vmulq_f32(v163, vrecpsq_f32(v159, v163)));
        v165 = (float32x4_t)vdupq_lane_s64(vsubq_f32(v164, *(float32x4_t *)v139).i64[0], 0);
        v166 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v165, 1);
        v165.i64[0] = vaddq_f32(*(float32x4_t *)&v140, *(float32x4_t *)&v140).i64[1];
        v167 = vminq_f32(vmaxq_f32(vrecpeq_f32(v165), (float32x4_t)v157), v160);
        v168 = vminq_f32(vmaxq_f32(vmulq_f32(v167, vrecpsq_f32(v165, v167)), (float32x4_t)v157), v160);
        v168.i64[0] = vmulq_f32(v166, vmulq_f32(v168, vrecpsq_f32(v165, v168))).u64[0];
        v168.i64[1] = v164.i64[1];
        v169 = vcvtq_f32_s32(vcvtq_s32_f32(v168));
        v170 = vsubq_f32(v166, vmulq_f32(v165, vsubq_f32(v169, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v169, v168), v145, (int8x16_t)0))));
        v171 = (float32x4_t)vextq_s8(v140, v140, 8uLL);
        v170.i64[0] = vsubq_f32(v170, v171).u64[0];
        v170.i64[1] = v164.i64[1];
        v140.i64[0] = vaddq_f32(*(float32x4_t *)v139, vsubq_f32(v171, vabsq_f32(v170))).u64[0];
        v172 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v139 + 112), v164, 2), vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v139 + 96), *(float32x2_t *)v140.i8, 1), vmulq_n_f32(*(float32x4_t *)(v139 + 80), *(float *)v140.i32)));
        v173 = vandq_s8(v157, (int8x16_t)vcgtq_f32(vnegq_f32((float32x4_t)v146), (float32x4_t)vrev64q_s32((int32x4_t)v172)));
        *(int8x8_t *)v174.f32 = vqtbl1_s8(v146, *(int8x8_t *)v161.i8);
        *(int8x8_t *)&v174.u32[2] = vqtbl1_s8(v146, (int8x8_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL));
        v175 = (int8x16_t)vaddq_f32(v174, (float32x4_t)vbslq_s8(v153, v173, v172));
        v176 = vbslq_s8(v153, v173, v175);
        v177 = vandq_s8(v145, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v176, v176, 4uLL), (float32x4_t)v156));
        v178 = *(int8x16_t *)(v139 + 288);
        v179 = *(float32x4_t *)(v139 + 304);
        v177.i64[0] = vbslq_s8(v178, (int8x16_t)vrev64q_s32((int32x4_t)v177), v177).u64[0];
        v177.i64[1] = vminq_f32(*(float32x4_t *)&v176, v179).i64[1];
        v180 = vbslq_s8(v153, (int8x16_t)vsubq_f32(v179, (float32x4_t)v176), v175);
        v181 = vbslq_s8(v150, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v180, v180, 8uLL), (float32x4_t)v177), v177);
        v182 = vbslq_s8(v178, vandq_s8(v145, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v181), v179)), v181);
        v183 = *(int8x16_t *)(v139 + 320);
        v184 = vbslq_s8(*(int8x16_t *)(v139 + 336), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v182, v182, 0xCuLL), (float32x4_t)v156), vbslq_s8(*(int8x16_t *)(v139 + 336), (int8x16_t)vmaxq_f32((float32x4_t)v180, (float32x4_t)v183), v180), v182), v180);
        v185 = vbslq_s8(v153, (int8x16_t)vminq_f32((float32x4_t)v184, (float32x4_t)vextq_s8(v182, v182, 4uLL)), v184);
        v186 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v185), (float32x4_t)v156), v183, v185);
        v185.i64[1] = v186.i64[1];
        v187 = (float32x4_t)vdupq_laneq_s32(v186, 2);
        v188 = vminq_f32(vmaxq_f32(vrecpeq_f32(v187), (float32x4_t)v157), v160);
        v189 = vminq_f32(vmaxq_f32(vmulq_f32(v188, vrecpsq_f32(v187, v188)), (float32x4_t)v157), v160);
        v190 = *((int *)a2 + 22);
        v191 = vsubq_f32(vmulq_f32(vmulq_f32(v189, vrecpsq_f32(v187, v189)), (float32x4_t)v185), v9);
        v192 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v193 = vaddq_s32(vcvtq_s32_f32(v191), vcltzq_f32(v191));
          v194 = (float32x2_t)vsubq_f32(v191, vcvtq_f32_s32(v193)).u64[0];
          v195 = (float32x4_t *)(v192 + 16 * (v193.i32[0] + v193.i32[1] * (int)v190));
          v196 = vaddq_f32(*v195, vmulq_n_f32(vsubq_f32(v195[1], *v195), v194.f32[0]));
          v197 = vaddq_f32(v196, vmulq_lane_f32(vsubq_f32(vaddq_f32(v195[v190], vmulq_n_f32(vsubq_f32(v195[(int)v190 + 1], v195[v190]), v194.f32[0])), v196), v194, 1));
        }
        else
        {
          v198 = vaddq_f32(v191, v13);
          v199 = vcvtq_s32_f32(v198);
          v198.i64[0] = vaddq_s32(v199, vcgtq_f32(vcvtq_f32_s32(v199), v198)).u64[0];
          v197 = *(float32x4_t *)(v192 + 16 * (v198.i32[0] + v198.i32[1] * (int)v190));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v197;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcWrapMirror::GetDOD(HgcWrapMirror *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcWrapMirror *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcWrapMirror::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcWrapMirror::HgcWrapMirror(HgcWrapMirror *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C3D40;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051310;
  *(_OWORD *)(v3 + 160) = xmmword_1B3561F60;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3553710;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 224) = xmmword_1B3561F70;
  *(_OWORD *)(v3 + 240) = xmmword_1B355C520;
  *(int32x4_t *)(v3 + 256) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 272) = xmmword_1B30517F0;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 304) = xmmword_1B3561F80;
  *(_OWORD *)(v3 + 320) = xmmword_1B3561F90;
  *(_OWORD *)(v3 + 336) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcWrapMirror *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2F66790(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcWrapMirror::~HgcWrapMirror(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C3D40;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C402BC884A0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcWrapMirror::~HgcWrapMirror(this);
  HGObject::operator delete(v1);
}

uint64_t HgcWrapMirror::SetParameter(HgcWrapMirror *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  float *v16;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_48;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_48;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_48;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_48;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_48;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[22] = a3;
      goto LABEL_48;
    case 6:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == a3.n128_f32[0]
        && v14[6].n128_f32[1] == a4
        && v14[6].n128_f32[2] == a6
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = a3.n128_u32[0];
      v14[6].n128_f32[1] = a4;
      v14[6].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[23] = a3;
      goto LABEL_48;
    case 7:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == a3.n128_f32[0]
        && v15[7].n128_f32[1] == a4
        && v15[7].n128_f32[2] == a6
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15[7].n128_u32[0] = a3.n128_u32[0];
      v15[7].n128_f32[1] = a4;
      v15[7].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[24] = a3;
      goto LABEL_48;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
LABEL_48:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcWrapMirror::GetParameter(HgcWrapMirror *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_11;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_11;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_11;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_11;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_11;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[88];
      a3[1] = v9[89];
      a3[2] = v9[90];
      v4 = v9 + 91;
      goto LABEL_11;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[92];
      a3[1] = v10[93];
      a3[2] = v10[94];
      v4 = v10 + 95;
      goto LABEL_11;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[96];
      a3[1] = v11[97];
      a3[2] = v11[98];
      v4 = v11 + 99;
      goto LABEL_11;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
LABEL_11:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcMaskCompAdd::GetProgram(HgcMaskCompAdd *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004d8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r1 = clamp(r0.yyyy + r1, 0.00000h, 1.00000h);\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r1), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3ab579a5:d8ae106a:3b4e524b:c00505ff\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000049e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r1.x = c0.x - r0.y;\n"
             "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r1 = clamp(r0.yyyy + r1, 0.00000f, 1.00000f);\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1f8911c0:defa5e8f:ebc9af92:bfe95fcd\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=0000000339\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "SUB r1.x,$c0,r0.y;\n"
           "CMP r0.z,-$p1,r1.x,r0.y;\n"
           "##1\n"
           "TEX r1,$f1,texture[1],RECT;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "ADD_SAT r1,r0.y,r1;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r1;\n"
           "END\n"
           "##MD5=f7c3babe:3a8f0f0f:f86f3e6e:5ace67e6\n"
           "##SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000507\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r1.x = c0.x - r0.y;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r1.x : r0.y;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r1 = clamp(r0.yyyy + r1, vec4(0.00000), vec4(1.00000));\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.x, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "1.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.z, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r1.w);\n"
           "}\n"
           "//MD5=b620467d:5656b608:acfc40ad:524a997e\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcMaskCompAdd::InitProgramDescriptor(HgcMaskCompAdd *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompAdd_hgc_visible", "//Metal1.0     \n//LEN=00000002fb\n[[ visible ]] FragmentOut HgcMaskCompAdd_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r1.x = c0.x - r0.y;\n"
    "    r0.z = select(r0.y, r1.x, -hg_Params[1].z < 0.00000f);\n"
    "    r1 = color1;\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r1 = clamp(r0.yyyy + r1, 0.00000f, 1.00000f);\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r1, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F66D14()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMaskCompAdd");
}

void sub_1B2F66D24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F66E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F66EAC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F66EA4);
}

_QWORD *HgcMaskCompAdd::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompAdd [hgc1]");
}

uint64_t HgcMaskCompAdd::BindTexture(HgcMaskCompAdd *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompAdd::Bind(HgcMaskCompAdd *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcMaskCompAdd *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMaskCompAdd::RenderTile(HgcMaskCompAdd *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t *v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 26);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v56) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *((_QWORD *)this + 51);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)v13);
          v16 = vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)v13);
          v17 = vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)v13);
          v18 = vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)v13);
          v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v21 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          v22 = vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL));
          v23 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v25 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v26 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), *(float32x2_t *)v14.f32, 1);
          v27 = (int32x4_t)vmulq_lane_f32(v23, *(float32x2_t *)v14.f32, 1);
          v28 = *(float32x4_t *)(v13 + 32);
          v29 = *(float32x4_t *)(v13 + 48);
          v30 = *(int8x16_t *)(v13 + 64);
          v31 = *(float32x4_t *)(v13 + 80);
          v32 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v24, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v24))));
          v33 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v25, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v25))));
          v34 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v26))));
          v35 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v27, (int8x16_t)vaddq_f32(v28, vmulq_f32(v29, (float32x4_t)vrev64q_s32(v27))));
          v36 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v14.f32[0]));
          v37 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v33), vmulq_n_f32(v33, v14.f32[0]));
          v38 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v34), vmulq_n_f32(v34, v14.f32[0]));
          v39 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v35), vmulq_n_f32(v35, v14.f32[0]));
          v40 = (int8x16_t)vcgtq_f32(v14, v29);
          v36.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v36)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v36, 0xCuLL)).i64[1];
          v37.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v37)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v37, 0xCuLL)).i64[1];
          v38.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v38)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v38, 0xCuLL)).i64[1];
          v39.i64[1] = vbslq_s8(v40, (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v28, v39)), 0), vextq_s8(*(int8x16_t *)&v14, *(int8x16_t *)&v39, 0xCuLL)).i64[1];
          v41 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v29);
          v42 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v36);
          v43 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v37);
          v44 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v38);
          v45 = (float32x4_t)vbslq_s8(v30, v41, (int8x16_t)v39);
          v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1);
          v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1);
          v48 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1);
          v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1);
          v50 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v31);
          v51 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v42), (int8x16_t)vdupq_laneq_s32((int32x4_t)v42, 2), (int8x16_t)v46), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12 - 32), v46), v31), v28));
          v52 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v43), (int8x16_t)vdupq_laneq_s32((int32x4_t)v43, 2), (int8x16_t)v47), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12 - 16), v47), v31), v28));
          v53 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v44), (int8x16_t)vdupq_laneq_s32((int32x4_t)v44, 2), (int8x16_t)v48), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12), v48), v31), v28));
          v54 = vbslq_s8(v50, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v31, v45), (int8x16_t)vdupq_laneq_s32((int32x4_t)v45, 2), (int8x16_t)v49), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + v12 + 16), v49), v31), v28));
          v55 = (int8x16_t *)(v5 + v12);
          v55[-2] = v51;
          v55[-1] = v52;
          *v55 = v53;
          v55[1] = v54;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v56) = -v11;
      }
      if ((int)v56 < v4)
      {
        v56 = v56;
        do
        {
          v57 = *((_QWORD *)this + 51);
          v58 = *(float32x4_t *)(v57 + 16);
          v59 = vmulq_f32(*(float32x4_t *)(v8 + 16 * v56), *(float32x4_t *)v57);
          v60 = vaddq_f32(v59, (float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL));
          v61 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v60, (float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL)), *(float32x2_t *)v58.f32, 1);
          v62 = *(float32x4_t *)(v57 + 32);
          v63 = *(float32x4_t *)(v57 + 48);
          v64 = *(int8x16_t *)(v57 + 64);
          v65 = (float32x4_t)vbslq_s8(v64, (int8x16_t)v61, (int8x16_t)vaddq_f32(v62, vmulq_f32(v63, (float32x4_t)vrev64q_s32(v61))));
          v66 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v65), vmulq_n_f32(v65, v58.f32[0]));
          v66.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v58, v63), (int8x16_t)vdupq_lane_s64((uint64_t)vrev64q_s32((int32x4_t)vsubq_f32(v62, v66)), 0), vextq_s8(*(int8x16_t *)&v66, *(int8x16_t *)&v66, 0xCuLL)).i64[1];
          v67 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), v63), (int8x16_t)v66);
          v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1);
          *(int8x16_t *)(v5 + 16 * v56) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), *(float32x4_t *)(v57 + 80)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v57 + 80), v67), (int8x16_t)vdupq_laneq_s32((int32x4_t)v67, 2), (int8x16_t)v68), 0), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v6 + 16 * v56), v68), *(float32x4_t *)(v57 + 80)), v62));
          ++v56;
        }
        while (v56 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompAdd::GetDOD(HgcMaskCompAdd *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcMaskCompAdd::GetROI(HgcMaskCompAdd *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcMaskCompAdd::HgcMaskCompAdd(HgcMaskCompAdd *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C3FA8;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v3 + 32) = _Q0;
  *(_OWORD *)(v3 + 48) = xmmword_1B3525F70;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F67454(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompAdd::~HgcMaskCompAdd(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C3FA8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMaskCompAdd::~HgcMaskCompAdd(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompAdd::SetParameter(HgcMaskCompAdd *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompAdd::GetParameter(HgcMaskCompAdd *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcWrapRepeat::GetProgram(HgcWrapRepeat *this, HGRenderer *a2)
{
  unsigned int Target;
  int v5;
  unsigned int v7;

  Target = HGRenderer::GetTarget(a2, 393216);
  v5 = (*(uint64_t (**)(HgcWrapRepeat *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2);
  if (Target < 0x60600 && v5 == 0)
    v7 = 394016;
  else
    v7 = Target;
  if (v7 == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000007e1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord0.yyyy*hg_Params[2];\n"
             "    s0 = frag._texCoord0.xxxx*hg_Params[1] + s0;\n"
             "    s0 = frag._texCoord0.zzzz*hg_Params[3] + s0;\n"
             "    s1 = s0 + hg_Params[4];\n"
             "    s0.x = float(s0.w < -hg_Params[4].w);\n"
             "    s0.z = float(float(c0.z) < s1.w);\n"
             "    s0.y = s0.z;\n"
             "    s0.xy = float2(-s0.xy >= float2(c0.zz));\n"
             "    s0.xz = fmin(s0.xx, s0.yz);\n"
             "    s0.w = fmin(s1.w, float(c0.x));\n"
             "    s2.x = fmax(s1.w, -float(c0.x));\n"
             "    s0.z = select(s0.w, s2.x, -s0.z < 0.00000h);\n"
             "    s0.x = select(s0.z, -float(c0.x), -s0.x < 0.00000h);\n"
             "    s1.xyz = s1.xyz/s0.xxx;\n"
             "    s2.zw = s1.xy - hg_Params[0].xy;\n"
             "    s2.xy = s2.zw/hg_Params[0].zw;\n"
             "    s2.xy = floor(s2.xy);\n"
             "    s2.xy = -s2.xy*hg_Params[0].zw + s2.zw;\n"
             "    s1.xy = s2.xy + hg_Params[0].xy;\n"
             "    s0.xyz = s1.yyy*hg_Params[6].xyz;\n"
             "    s0.xyz = s1.xxx*hg_Params[5].xyz + s0.xyz;\n"
             "    s0.xyz = s1.zzz*hg_Params[7].xyz + s0.xyz;\n"
             "    s0.w = float(s0.z < -hg_Params[8].w);\n"
             "    s0.xyz = s0.xyz + hg_Params[8].xyw;\n"
             "    s2.y = float(float(c0.z) < s0.z);\n"
             "    s2.x = s2.y;\n"
             "    s2.z = fmin(s0.z, float(c0.x));\n"
             "    s0.w = float(c0.y) - s0.w;\n"
             "    s2.y = fmin(s0.w, s2.y);\n"
             "    s2.x = float(-s2.x >= float(c0.z));\n"
             "    s0.z = fmax(s0.z, -float(c0.x));\n"
             "    s0.z = select(s2.z, s0.z, -s2.y < 0.00000h);\n"
             "    s0.w = fmin(s0.w, s2.x);\n"
             "    s0.z = select(s0.z, -float(c0.x), -s0.w < 0.00000h);\n"
             "    s0.xy = s0.xy/s0.zz;\n"
             "    s0.xy = s0.xy + hg_Params[9].xy;\n"
             "    s0.xy = s0.xy*hg_Params[9].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f4d3e09c:894a0356:6332b3b1:c1c79ce4\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:000a:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000078d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord0.yyyy*hg_Params[2];\n"
             "    r0 = frag._texCoord0.xxxx*hg_Params[1] + r0;\n"
             "    r0 = frag._texCoord0.zzzz*hg_Params[3] + r0;\n"
             "    r1 = r0 + hg_Params[4];\n"
             "    r0.x = float(r0.w < -hg_Params[4].w);\n"
             "    r0.z = float(c0.z < r1.w);\n"
             "    r0.y = r0.z;\n"
             "    r0.xy = float2(-r0.xy >= c0.zz);\n"
             "    r0.xz = fmin(r0.xx, r0.yz);\n"
             "    r0.w = fmin(r1.w, c0.x);\n"
             "    r2.x = fmax(r1.w, -c0.x);\n"
             "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
             "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
             "    r1.xyz = r1.xyz/r0.xxx;\n"
             "    r2.zw = r1.xy - hg_Params[0].xy;\n"
             "    r2.xy = r2.zw/hg_Params[0].zw;\n"
             "    r2.xy = floor(r2.xy);\n"
             "    r2.xy = -r2.xy*hg_Params[0].zw + r2.zw;\n"
             "    r1.xy = r2.xy + hg_Params[0].xy;\n"
             "    r0.xyz = r1.yyy*hg_Params[6].xyz;\n"
             "    r0.xyz = r1.xxx*hg_Params[5].xyz + r0.xyz;\n"
             "    r0.xyz = r1.zzz*hg_Params[7].xyz + r0.xyz;\n"
             "    r0.w = float(r0.z < -hg_Params[8].w);\n"
             "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
             "    r2.y = float(c0.z < r0.z);\n"
             "    r2.x = r2.y;\n"
             "    r2.z = fmin(r0.z, c0.x);\n"
             "    r0.w = c0.y - r0.w;\n"
             "    r2.y = fmin(r0.w, r2.y);\n"
             "    r2.x = float(-r2.x >= c0.z);\n"
             "    r0.z = fmax(r0.z, -c0.x);\n"
             "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
             "    r0.w = fmin(r0.w, r2.x);\n"
             "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
             "    r0.xy = r0.xy/r0.zz;\n"
             "    r0.xy = r0.xy + hg_Params[9].xy;\n"
             "    r0.xy = r0.xy*hg_Params[9].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=4b4bc9f6:2cf8f900:0e89866a:3192f073\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (v7 <= 0x6060F || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    if (v7 - 394016 < 0xF0 || v7 > 0x6043F)
      return "!!ARBfp1.0     \n"
             "##LEN=000000062a\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $p1=program.local[1];\n"
             "PARAM $p2=program.local[2];\n"
             "PARAM $p3=program.local[3];\n"
             "PARAM $p4=program.local[4];\n"
             "PARAM $p5=program.local[5];\n"
             "PARAM $p6=program.local[6];\n"
             "PARAM $p7=program.local[7];\n"
             "PARAM $p8=program.local[8];\n"
             "PARAM $p9=program.local[9];\n"
             "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1,r2;\n"
             "##@\n"
             "MUL r0,$f0.y,$p2;\n"
             "MAD r0,$f0.x,$p1,r0;\n"
             "MAD r0,$f0.z,$p3,r0;\n"
             "ADD r1,r0,$p4;\n"
             "SLT r0.x,r0.w,-$p4.w;\n"
             "SLT r0.z,$c0,r1.w;\n"
             "MOV r0.y,r0.z;\n"
             "SGE r0.xy,-r0,$c0.z;\n"
             "MIN r0.xz,r0.x,r0.yyzw;\n"
             "MIN r0.w,r1,$c0.x;\n"
             "MAX r2.x,r1.w,-$c0;\n"
             "CMP r0.z,-r0,r2.x,r0.w;\n"
             "CMP r0.x,-r0,-$c0,r0.z;\n"
             "RCP r0.xyz,r0.x;\n"
             "MUL r0.xyz,r0,r1;\n"
             "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
             "RCP r1.x,$p0.z;\n"
             "RCP r1.y,$p0.w;\n"
             "MUL r2.xy,r1,r2.zwzw;\n"
             "FLR r2.xy,r2;\n"
             "MAD r2.xy,-r2,$p0.zwzw,r2.zwzw;\n"
             "ADD r0.xy,r2,$p0;\n"
             "MUL r1.xyz,r0.y,$p6;\n"
             "MAD r1.xyz,r0.x,$p5,r1;\n"
             "MAD r1.xyz,r0.z,$p7,r1;\n"
             "SLT r1.w,r1.z,-$p8;\n"
             "ADD r1.xyz,r1,$p8.xyww;\n"
             "SLT r2.y,$c0.z,r1.z;\n"
             "MOV r2.x,r2.y;\n"
             "MIN r2.z,r1,$c0.x;\n"
             "SUB r1.w,$c0.y,r1;\n"
             "MIN r2.y,r1.w,r2;\n"
             "SGE r2.x,-r2,$c0.z;\n"
             "MAX r1.z,r1,-$c0.x;\n"
             "CMP r1.z,-r2.y,r1,r2;\n"
             "MIN r1.w,r1,r2.x;\n"
             "CMP r1.z,-r1.w,-$c0.x,r1;\n"
             "RCP r0.xy,r1.z;\n"
             "MUL r1.xy,r0,r1;\n"
             "ADD r1.xy,r1,$p9;\n"
             "##0\n"
             "TEX $o0,r1,texture[0],RECT;\n"
             "END\n"
             "##MD5=4ac77a33:8849ee9f:6646c2f7:db3a3547\n"
             "##SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
    else
      return "!!ARBfp1.0     \n"
             "##LEN=0000000786\n"
             "##                          \n"
             "##                            \n"
             "##                                \n"
             "##                                     \n"
             "##$\n"
             "OUTPUT $o0=result.color;\n"
             "ATTRIB $f0=fragment.texcoord[0];\n"
             "PARAM $p0=program.local[0];\n"
             "PARAM $p1=program.local[1];\n"
             "PARAM $p2=program.local[2];\n"
             "PARAM $p3=program.local[3];\n"
             "PARAM $p4=program.local[4];\n"
             "PARAM $p5=program.local[5];\n"
             "PARAM $p6=program.local[6];\n"
             "PARAM $p7=program.local[7];\n"
             "PARAM $p8=program.local[8];\n"
             "PARAM $p9=program.local[9];\n"
             "PARAM $c0={-0.009999999776,1.000000000,0.000000000,0.5000000000};\n"
             "PARAM $c1={1.500000000,0.5000000000,0.000000000,0.000000000};\n"
             "##%\n"
             "TEMP r0,r1,r2,r3,r4;\n"
             "##@\n"
             "MUL r0,$f0.y,$p2;\n"
             "MAD r0,$f0.x,$p1,r0;\n"
             "MAD r0,$f0.z,$p3,r0;\n"
             "ADD r1,r0,$p4;\n"
             "SLT r0.x,r0.w,-$p4.w;\n"
             "SLT r0.z,$c0,r1.w;\n"
             "MOV r0.y,r0.z;\n"
             "SGE r0.xy,-r0,$c0.z;\n"
             "MIN r0.xz,r0.x,r0.yyzw;\n"
             "MIN r0.w,r1,$c0.x;\n"
             "MAX r2.x,r1.w,-$c0;\n"
             "CMP r0.z,-r0,r2.x,r0.w;\n"
             "CMP r0.x,-r0,-$c0,r0.z;\n"
             "RCP r0.xyz,r0.x;\n"
             "MUL r0.xyz,r0,r1;\n"
             "SUB r2.zw,r0.xyxy,$p0.xyxy;\n"
             "RCP r1.x,$p0.z;\n"
             "RCP r1.y,$p0.w;\n"
             "MUL r2.xy,r1,r2.zwzw;\n"
             "FLR r2.xy,r2;\n"
             "MAD r2.xy,-r2,$p0.zwzw,r2.zwzw;\n"
             "ADD r0.xy,r2,$p0;\n"
             "MUL r1.xyz,r0.y,$p6;\n"
             "MAD r1.xyz,r0.x,$p5,r1;\n"
             "MAD r1.xyz,r0.z,$p7,r1;\n"
             "SLT r1.w,r1.z,-$p8;\n"
             "ADD r1.xyz,r1,$p8.xyww;\n"
             "SLT r2.y,$c0.z,r1.z;\n"
             "MOV r2.x,r2.y;\n"
             "MIN r2.z,r1,$c0.x;\n"
             "SUB r1.w,$c0.y,r1;\n"
             "MIN r2.y,r1.w,r2;\n"
             "SGE r2.x,-r2,$c0.z;\n"
             "MAX r1.z,r1,-$c0.x;\n"
             "CMP r1.z,-r2.y,r1,r2;\n"
             "MIN r1.w,r1,r2.x;\n"
             "CMP r1.z,-r1.w,-$c0.x,r1;\n"
             "RCP r0.xy,r1.z;\n"
             "MUL r1.xy,r0,r1;\n"
             "ADD r1.xy,r1,$p9;\n"
             "SUB r1.xy,r1,$c0.w;\n"
             "FLR r2.xy,r1;\n"
             "FRC r1.xy,r1;\n"
             "ADD r0.xy,r2,$c0.w;\n"
             "##0\n"
             "TEX r0,r0,texture[0],RECT;\n"
             "ADD r3.xy,r2,$c1;\n"
             "##0\n"
             "TEX r3,r3,texture[0],RECT;\n"
             "ADD r4.xy,r2,$c1.yxzw;\n"
             "##0\n"
             "TEX r4,r4,texture[0],RECT;\n"
             "ADD r2.xy,r2,$c1.x;\n"
             "##0\n"
             "TEX r2,r2,texture[0],RECT;\n"
             "LRP r3,r1.x,r3,r0;\n"
             "LRP r4,r1.x,r2,r4;\n"
             "LRP $o0,r1.y,r4,r3;\n"
             "END\n"
             "##MD5=955c87b8:0af1818c:8f0edfbf:937f46f9\n"
             "##SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000008c5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord0.yyyy*hg_ProgramLocal2;\n"
           "    r0 = hg_TexCoord0.xxxx*hg_ProgramLocal1 + r0;\n"
           "    r0 = hg_TexCoord0.zzzz*hg_ProgramLocal3 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal4;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal4.w);\n"
           "    r0.z = float(c0.z < r1.w);\n"
           "    r0.y = r0.z;\n"
           "    r0.xy = vec2(greaterThanEqual(-r0.xy, c0.zz));\n"
           "    r0.xz = min(r0.xx, r0.yz);\n"
           "    r0.w = min(r1.w, c0.x);\n"
           "    r2.x = max(r1.w, -c0.x);\n"
           "    r0.z = -r0.z < 0.00000 ? r2.x : r0.w;\n"
           "    r0.x = -r0.x < 0.00000 ? -c0.x : r0.z;\n"
           "    r1.xyz = r1.xyz/r0.xxx;\n"
           "    r2.zw = r1.xy - hg_ProgramLocal0.xy;\n"
           "    r2.xy = r2.zw/hg_ProgramLocal0.zw;\n"
           "    r2.xy = floor(r2.xy);\n"
           "    r2.xy = -r2.xy*hg_ProgramLocal0.zw + r2.zw;\n"
           "    r1.xy = r2.xy + hg_ProgramLocal0.xy;\n"
           "    r0.xyz = r1.yyy*hg_ProgramLocal6.xyz;\n"
           "    r0.xyz = r1.xxx*hg_ProgramLocal5.xyz + r0.xyz;\n"
           "    r0.xyz = r1.zzz*hg_ProgramLocal7.xyz + r0.xyz;\n"
           "    r0.w = float(r0.z < -hg_ProgramLocal8.w);\n"
           "    r0.xyz = r0.xyz + hg_ProgramLocal8.xyw;\n"
           "    r2.y = float(c0.z < r0.z);\n"
           "    r2.x = r2.y;\n"
           "    r2.z = min(r0.z, c0.x);\n"
           "    r0.w = c0.y - r0.w;\n"
           "    r2.y = min(r0.w, r2.y);\n"
           "    r2.x = float(-r2.x >= c0.z);\n"
           "    r0.z = max(r0.z, -c0.x);\n"
           "    r0.z = -r2.y < 0.00000 ? r0.z : r2.z;\n"
           "    r0.w = min(r0.w, r2.x);\n"
           "    r0.z = -r0.w < 0.00000 ? -c0.x : r0.z;\n"
           "    r0.xy = r0.xy/r0.zz;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal9.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal9.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=2ba55dea:465081e7:944fffc8:1e72b899\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:000a:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcWrapRepeat::InitProgramDescriptor(HgcWrapRepeat *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcWrapRepeat_hgc_visible", "//Metal1.0     \n//LEN=00000006c1\n[[ visible ]] FragmentOut HgcWrapRepeat_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.009999999776, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0.yyyy*hg_Params[2];\n"
    "    r0 = texCoord0.xxxx*hg_Params[1] + r0;\n"
    "    r0 = texCoord0.zzzz*hg_Params[3] + r0;\n"
    "    r1 = r0 + hg_Params[4];\n"
    "    r0.x = float(r0.w < -hg_Params[4].w);\n"
    "    r0.z = float(c0.z < r1.w);\n"
    "    r0.y = r0.z;\n"
    "    r0.xy = float2(-r0.xy >= c0.zz);\n"
    "    r0.xz = fmin(r0.xx, r0.yz);\n"
    "    r0.w = fmin(r1.w, c0.x);\n"
    "    r2.x = fmax(r1.w, -c0.x);\n"
    "    r0.z = select(r0.w, r2.x, -r0.z < 0.00000f);\n"
    "    r0.x = select(r0.z, -c0.x, -r0.x < 0.00000f);\n"
    "    r1.xyz = r1.xyz/r0.xxx;\n"
    "    r2.zw = r1.xy - hg_Params[0].xy;\n"
    "    r2.xy = r2.zw/hg_Params[0].zw;\n"
    "    r2.xy = floor(r2.xy);\n"
    "    r2.xy = -r2.xy*hg_Params[0].zw + r2.zw;\n"
    "    r1.xy = r2.xy + hg_Params[0].xy;\n"
    "    r0.xyz = r1.yyy*hg_Params[6].xyz;\n"
    "    r0.xyz = r1.xxx*hg_Params[5].xyz + r0.xyz;\n"
    "    r0.xyz = r1.zzz*hg_Params[7].xyz + r0.xyz;\n"
    "    r0.w = float(r0.z < -hg_Params[8].w);\n"
    "    r0.xyz = r0.xyz + hg_Params[8].xyw;\n"
    "    r2.y = float(c0.z < r0.z);\n"
    "    r2.x = r2.y;\n"
    "    r2.z = fmin(r0.z, c0.x);\n"
    "    r0.w = c0.y - r0.w;\n"
    "    r2.y = fmin(r0.w, r2.y);\n"
    "    r2.x = float(-r2.x >= c0.z);\n"
    "    r0.z = fmax(r0.z, -c0.x);\n"
    "    r0.z = select(r2.z, r0.z, -r2.y < 0.00000f);\n"
    "    r0.w = fmin(r0.w, r2.x);\n"
    "    r0.z = select(r0.z, -c0.x, -r0.w < 0.00000f);\n"
    "    r0.xy = r0.xy/r0.zz;\n"
    "    r0.xy = r0.xy + hg_Params[9].xy;\n"
    "    r0.xy = r0.xy*hg_Params[9].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F676B8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcWrapRepeat");
}

void sub_1B2F676C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051B00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F67848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F67898()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F67890);
}

_QWORD *HgcWrapRepeat::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcWrapRepeat [hgc1]");
}

uint64_t HgcWrapRepeat::BindTexture(HgcWrapRepeat *this, HGRenderer **a2, int a3)
{
  unsigned int Target;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;

  Target = HGRenderer::GetTarget(a2[18], 393216);
  if (a3)
    return 0xFFFFFFFFLL;
  if (Target > 0x6043F || Target - 394016 <= 0xEF)
  {
    (*((void (**)(HGRenderer **, _QWORD, _QWORD))*a2 + 9))(a2, 0, 0);
    v8 = (*(uint64_t (**)(HgcWrapRepeat *, _QWORD))(*(_QWORD *)this + 312))(this, 0);
    (*((void (**)(HGRenderer **, uint64_t, uint64_t))*a2 + 6))(a2, v8, v8);
  }
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2[18] + 128))(a2[18], 46))
  {
    v11.n128_u32[0] = 1.0;
    v12.n128_u32[0] = 1.0;
  }
  else
  {
    v11.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
    v12.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
  }
  v9.n128_f32[0] = (float)*((int *)a2 + 60);
  v10.n128_f32[0] = (float)*((int *)a2 + 61);
  (*((void (**)(HGRenderer **, uint64_t, __n128, __n128, __n128, __n128))*a2 + 17))(a2, 9, v9, v10, v11, v12);
  return 0;
}

uint64_t HgcWrapRepeat::Bind(HgcWrapRepeat *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HgcWrapRepeat *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcWrapRepeat::RenderTile(HgcWrapRepeat *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x8_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x8_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;
  int8x8_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  float32x2_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  float32x4_t *v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int32x4_t v131;
  float32x4_t v132;
  int32x4_t v133;
  float32x4_t *v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  float32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  float32x4_t v153;
  int32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int8x16_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  float32x4_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  uint64_t v185;
  float32x4_t v186;
  uint64_t v187;
  int32x4_t v188;
  float32x2_t v189;
  float32x4_t *v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  int32x4_t v194;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcWrapRepeat *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v21 = *(float32x4_t *)(v19 + 32);
          v20 = *(float32x4_t *)(v19 + 48);
          v22 = *(float32x4_t *)(v19 + 16);
          v23 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v17.f32, 1), vmulq_n_f32(v22, v17.f32[0])), vmulq_laneq_f32(v20, v17, 2));
          v24 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v18.f32, 1), vmulq_n_f32(v22, v18.f32[0])), vmulq_laneq_f32(v20, v18, 2));
          v25 = *(float32x4_t *)(v19 + 64);
          v26 = *(float32x4_t *)(v19 + 80);
          v27 = (int8x16_t)vaddq_f32(v25, v23);
          v28 = (int8x16_t)vaddq_f32(v25, v24);
          v29 = vnegq_f32(v25);
          v30 = (int8x16_t)vcgtq_f32(v29, v23);
          v31 = (int8x16_t)vcgtq_f32(v29, v24);
          v33 = *(int8x16_t *)(v19 + 128);
          v32 = *(int8x16_t *)(v19 + 144);
          v34 = vandq_s8(v32, v30);
          v35 = vandq_s8(v32, v31);
          v36 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v27), (float32x4_t)v32);
          v37 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), (float32x4_t)v32);
          *(int8x8_t *)v34.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(int8x8_t *)v34.i8, 4uLL);
          v38 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
          v40 = *(int8x16_t *)(v19 + 160);
          v39 = *(int8x16_t *)(v19 + 176);
          v41 = (int8x8_t)vextq_s8(v40, v40, 8uLL).u64[0];
          v34.u64[1] = (unint64_t)vand_s8(v41, v38);
          *(int8x8_t *)v35.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(int8x8_t *)v35.i8, 4uLL);
          v35.u64[1] = (unint64_t)vand_s8(v41, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
          v42 = vbslq_s8(v39, vextq_s8(v34, v34, 4uLL), v34);
          v43 = vbslq_s8(v39, vextq_s8(v35, v35, 4uLL), v35);
          v37.i64[0] = vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v42), (float32x4_t)v40)).u64[0];
          v44.i64[0] = vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v43), (float32x4_t)v40)).u64[0];
          v37.i64[1] = vextq_s8(v42, v42, 8uLL).u64[0];
          v46 = *(int8x16_t *)(v19 + 192);
          v45 = *(int8x16_t *)(v19 + 208);
          *(int8x8_t *)v47.f32 = vqtbl1_s8(v37, *(int8x8_t *)v46.i8);
          v48 = (int8x8_t)vextq_s8(v46, v46, 8uLL).u64[0];
          *(int8x8_t *)&v47.u32[2] = vqtbl1_s8(v37, v48);
          v44.i64[1] = vextq_s8(v43, v43, 8uLL).u64[0];
          *(int8x8_t *)v43.i8 = vqtbl1_s8(v44, *(int8x8_t *)v46.i8);
          v43.u64[1] = (unint64_t)vqtbl1_s8(v44, v48);
          v49 = (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v44.i64[0], 0), (float32x4_t)v43);
          v50 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v27, (float32x4_t)v40), (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v37.i64[0], 0), v47));
          v51 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v28, (float32x4_t)v40), v49);
          v53 = *(int8x16_t *)(v19 + 224);
          v52 = *(int8x16_t *)(v19 + 240);
          v50.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v50, *(float32x4_t *)&v53), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v27, v27, 0xCuLL), *(float32x4_t *)&v53), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v50)).i64[1];
          v51.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v51, *(float32x4_t *)&v53), (int8x16_t)vdupq_lane_s64((uint64_t)vmaxq_f32((float32x4_t)vextq_s8(v28, v28, 0xCuLL), *(float32x4_t *)&v53), 0), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v51)).i64[1];
          v54 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v50, 2);
          v55 = (int8x16_t)vcgtq_f32(v50, (float32x4_t)v40);
          v40.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v51, (float32x4_t)v40), v53, (int8x16_t)vdupq_laneq_s32((int32x4_t)v51, 2)).u64[0];
          v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8(v55, v53, v54), 0);
          v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 0);
          v58 = *(float32x4_t *)(v19 + 256);
          v59 = *(int8x16_t *)(v19 + 272);
          v60 = vminq_f32(vmaxq_f32(vrecpeq_f32(v56), (float32x4_t)v52), v58);
          v61 = vminq_f32(vmaxq_f32(vrecpeq_f32(v57), (float32x4_t)v52), v58);
          v62 = vminq_f32(vmaxq_f32(vmulq_f32(v60, vrecpsq_f32(v56, v60)), (float32x4_t)v52), v58);
          v63 = vminq_f32(vmaxq_f32(vmulq_f32(v61, vrecpsq_f32(v57, v61)), (float32x4_t)v52), v58);
          v64 = vmulq_f32((float32x4_t)v27, vmulq_f32(v62, vrecpsq_f32(v56, v62)));
          v65 = vmulq_f32((float32x4_t)v28, vmulq_f32(v63, vrecpsq_f32(v57, v63)));
          v66 = vsubq_f32(v64, *(float32x4_t *)v19);
          v67 = vsubq_f32(v65, *(float32x4_t *)v19);
          v68 = (float32x4_t)vdupq_lane_s64(v66.i64[0], 0);
          v69 = (float32x4_t)vdupq_lane_s64(v67.i64[0], 0);
          v70 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          v71 = vminq_f32(vmaxq_f32(vrecpeq_f32(v70), (float32x4_t)v52), v58);
          v72 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vrecpsq_f32(v70, v71)), (float32x4_t)v52), v58);
          v73 = vmulq_f32(v72, vrecpsq_f32(v70, v72));
          v74 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v68, 1);
          v68.i64[0] = vmulq_f32(v66, v73).u64[0];
          v75 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v69, 1);
          v69.i64[0] = vmulq_f32(v67, v73).u64[0];
          v76 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
          v77 = vsubq_f32(v76, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v76, v68), v32, (int8x16_t)0));
          v78 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
          v77.i64[0] = vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v74, vmulq_f32(v70, v77))).u64[0];
          v79 = (float32x2_t)vaddq_f32(*(float32x4_t *)v19, vsubq_f32(v75, vmulq_f32(v70, vsubq_f32(v78, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v78, v69), v32, (int8x16_t)0))))).u64[0];
          v80 = *(float32x4_t *)(v19 + 96);
          v81 = *(float32x4_t *)(v19 + 112);
          v82 = vaddq_f32(vmulq_lane_f32(v80, v79, 1), vmulq_n_f32(v26, v79.f32[0]));
          v83 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v81, v64, 2), vaddq_f32(vmulq_lane_f32(v80, *(float32x2_t *)v77.f32, 1), vmulq_n_f32(v26, v77.f32[0])));
          v84 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v81, v65, 2), v82);
          v85 = vnegq_f32((float32x4_t)v33);
          v86 = vandq_s8(v52, (int8x16_t)vcgtq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v83)));
          v87 = vandq_s8(v52, (int8x16_t)vcgtq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v84)));
          *(int8x8_t *)v80.f32 = vqtbl1_s8(v33, *(int8x8_t *)v59.i8);
          *(int8x8_t *)&v80.u32[2] = vqtbl1_s8(v33, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
          v88 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v45, v86, v83));
          v89 = (int8x16_t)vaddq_f32(v80, (float32x4_t)vbslq_s8(v45, v87, v84));
          v90 = vbslq_s8(v45, v86, v88);
          v91 = vbslq_s8(v45, v87, v89);
          v92 = vandq_s8(v32, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v90, v90, 4uLL), (float32x4_t)v53));
          v93 = vandq_s8(v32, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v91, v91, 4uLL), (float32x4_t)v53));
          v94 = *(int8x16_t *)(v19 + 288);
          v95 = *(float32x4_t *)(v19 + 304);
          v92.i64[0] = vbslq_s8(v94, (int8x16_t)vrev64q_s32((int32x4_t)v92), v92).u64[0];
          v93.i64[0] = vbslq_s8(v94, (int8x16_t)vrev64q_s32((int32x4_t)v93), v93).u64[0];
          v92.i64[1] = vminq_f32(*(float32x4_t *)&v90, v95).i64[1];
          v93.i64[1] = vminq_f32(*(float32x4_t *)&v91, v95).i64[1];
          v96 = vbslq_s8(v45, (int8x16_t)vsubq_f32(v95, (float32x4_t)v90), v88);
          v97 = vbslq_s8(v45, (int8x16_t)vsubq_f32(v95, (float32x4_t)v91), v89);
          v98 = vbslq_s8(v39, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v96, v96, 8uLL), (float32x4_t)v92), v92);
          v99 = vbslq_s8(v39, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v97, v97, 8uLL), (float32x4_t)v93), v93);
          v100 = vbslq_s8(v94, vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v98), v95)), v98);
          v101 = vbslq_s8(v94, vandq_s8(v32, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v99), v95)), v99);
          v102 = *(int8x16_t *)(v19 + 320);
          v103 = *(int8x16_t *)(v19 + 336);
          v104 = vbslq_s8(v103, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v100, v100, 0xCuLL), (float32x4_t)v53), vbslq_s8(v103, (int8x16_t)vmaxq_f32((float32x4_t)v96, (float32x4_t)v102), v96), v100), v96);
          v105 = vbslq_s8(v103, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v101, v101, 0xCuLL), (float32x4_t)v53), vbslq_s8(v103, (int8x16_t)vmaxq_f32((float32x4_t)v97, (float32x4_t)v102), v97), v101), v97);
          v106 = vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v104, (float32x4_t)vextq_s8(v100, v100, 4uLL)), v104);
          v107 = vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)v105, (float32x4_t)vextq_s8(v101, v101, 4uLL)), v105);
          v108 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v106), (float32x4_t)v53), v102, v106);
          v109 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v107), (float32x4_t)v53), v102, v107);
          v106.i64[1] = v108.i64[1];
          v107.i64[1] = v109.i64[1];
          v110 = (float32x4_t)vdupq_laneq_s32(v108, 2);
          v111 = (float32x4_t)vdupq_laneq_s32(v109, 2);
          v112 = vminq_f32(vmaxq_f32(vrecpeq_f32(v110), (float32x4_t)v52), v58);
          v113 = vminq_f32(vmaxq_f32(vrecpeq_f32(v111), (float32x4_t)v52), v58);
          v114 = vminq_f32(vmaxq_f32(vmulq_f32(v112, vrecpsq_f32(v110, v112)), (float32x4_t)v52), v58);
          v115 = vminq_f32(vmaxq_f32(vmulq_f32(v113, vrecpsq_f32(v111, v113)), (float32x4_t)v52), v58);
          v116 = vmulq_f32(vmulq_f32(v115, vrecpsq_f32(v111, v115)), (float32x4_t)v107);
          v117 = *((int *)a2 + 22);
          v118 = vsubq_f32(vmulq_f32(vmulq_f32(v114, vrecpsq_f32(v110, v114)), (float32x4_t)v106), v9);
          v119 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v120 = vaddq_s32(vcvtq_s32_f32(v118), vcltzq_f32(v118));
            v121 = (float32x2_t)vsubq_f32(v118, vcvtq_f32_s32(v120)).u64[0];
            v122 = (float32x4_t *)(v119 + 16 * (v120.i32[0] + v120.i32[1] * (int)v117));
            v123 = vaddq_f32(*v122, vmulq_n_f32(vsubq_f32(v122[1], *v122), v121.f32[0]));
            v124 = vaddq_f32(v123, vmulq_lane_f32(vsubq_f32(vaddq_f32(v122[v117], vmulq_n_f32(vsubq_f32(v122[(int)v117 + 1], v122[v117]), v121.f32[0])), v123), v121, 1));
            v125 = vsubq_f32(v116, v9);
            v126 = vaddq_s32(vcvtq_s32_f32(v125), vcltzq_f32(v125));
            v125.i64[0] = vsubq_f32(v125, vcvtq_f32_s32(v126)).u64[0];
            v127 = (float32x4_t *)(v119 + 16 * (v126.i32[0] + v126.i32[1] * (int)v117));
            v128 = vaddq_f32(*v127, vmulq_n_f32(vsubq_f32(v127[1], *v127), v125.f32[0]));
            v129 = vaddq_f32(v128, vmulq_lane_f32(vsubq_f32(vaddq_f32(v127[v117], vmulq_n_f32(vsubq_f32(v127[(int)v117 + 1], v127[v117]), v125.f32[0])), v128), *(float32x2_t *)v125.f32, 1));
          }
          else
          {
            v130 = vaddq_f32(v118, v13);
            v131 = vcvtq_s32_f32(v130);
            v130.i64[0] = vaddq_s32(v131, vcgtq_f32(vcvtq_f32_s32(v131), v130)).u64[0];
            v124 = *(float32x4_t *)(v119 + 16 * (v130.i32[0] + v130.i32[1] * (int)v117));
            v132 = vaddq_f32(vsubq_f32(v116, v9), v13);
            v133 = vcvtq_s32_f32(v132);
            v132.i64[0] = vaddq_s32(v133, vcgtq_f32(vcvtq_f32_s32(v133), v132)).u64[0];
            v129 = *(float32x4_t *)(v119 + 16 * (v132.i32[0] + v132.i32[1] * (int)v117));
          }
          v134 = (float32x4_t *)(v11 + 16 * v15);
          *v134 = v124;
          v134[1] = v129;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v135 = *((_QWORD *)this + 51);
        v136 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v135 + 32), *(float32x2_t *)v17.f32, 1), vmulq_n_f32(*(float32x4_t *)(v135 + 16), v17.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v135 + 48), v17, 2));
        v137 = *(float32x4_t *)(v135 + 64);
        v138 = (int8x16_t)vaddq_f32(v137, v136);
        v139 = (int8x16_t)vcgtq_f32(vnegq_f32(v137), v136);
        v141 = *(int8x16_t *)(v135 + 128);
        v140 = *(int8x16_t *)(v135 + 144);
        v142 = vandq_s8(v140, v139);
        v143 = (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v138), (float32x4_t)v140);
        *(int8x8_t *)v142.i8 = vext_s8((int8x8_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL), *(int8x8_t *)v142.i8, 4uLL);
        v144 = *(int8x16_t *)(v135 + 160);
        v145 = *(int8x16_t *)(v135 + 176);
        v142.u64[1] = (unint64_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL));
        v146 = vbslq_s8(v145, vextq_s8(v142, v142, 4uLL), v142);
        v143.i64[0] = vandq_s8(v140, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v146), (float32x4_t)v144)).u64[0];
        v143.i64[1] = vextq_s8(v146, v146, 8uLL).u64[0];
        v147 = *(int8x16_t *)(v135 + 192);
        v148 = *(int8x16_t *)(v135 + 208);
        *(int8x8_t *)v149.f32 = vqtbl1_s8(v143, *(int8x8_t *)v147.i8);
        *(int8x8_t *)&v149.u32[2] = vqtbl1_s8(v143, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
        v150 = (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s64(v143.i64[0], 0), v149);
        v151 = *(int8x16_t *)(v135 + 224);
        v152 = *(int8x16_t *)(v135 + 240);
        v153 = (float32x4_t)vbslq_s8(v148, (int8x16_t)vminq_f32((float32x4_t)v138, (float32x4_t)v144), v150);
        v154 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v153, (float32x4_t)v151), (int8x16_t)vdupq_lane_s64(vmaxq_f32((float32x4_t)vextq_s8(v138, v138, 0xCuLL), (float32x4_t)v151).i64[0], 0), (int8x16_t)vrev64q_s32((int32x4_t)v153));
        v153.i64[1] = v154.i64[1];
        v155 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v153, (float32x4_t)v144), v151, (int8x16_t)vdupq_laneq_s32(v154, 2)), 0);
        v156 = *(float32x4_t *)(v135 + 256);
        v157 = *(int8x16_t *)(v135 + 272);
        v158 = vminq_f32(vmaxq_f32(vrecpeq_f32(v155), (float32x4_t)v152), v156);
        v159 = vminq_f32(vmaxq_f32(vmulq_f32(v158, vrecpsq_f32(v155, v158)), (float32x4_t)v152), v156);
        v160 = vmulq_f32((float32x4_t)v138, vmulq_f32(v159, vrecpsq_f32(v155, v159)));
        v161 = vsubq_f32(v160, *(float32x4_t *)v135);
        v162 = (float32x4_t)vdupq_lane_s64(v161.i64[0], 0);
        v163 = (float32x4_t)vextq_s8(*(int8x16_t *)v135, *(int8x16_t *)v135, 8uLL);
        v164 = vminq_f32(vmaxq_f32(vrecpeq_f32(v163), (float32x4_t)v152), v156);
        v165 = vminq_f32(vmaxq_f32(vmulq_f32(v164, vrecpsq_f32(v163, v164)), (float32x4_t)v152), v156);
        v161.i64[0] = vmulq_f32(v161, vmulq_f32(v165, vrecpsq_f32(v163, v165))).u64[0];
        v166 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v162, 1);
        v162.i64[0] = v161.i64[0];
        v167 = vcvtq_f32_s32(vcvtq_s32_f32(v162));
        v167.i64[0] = vaddq_f32(*(float32x4_t *)v135, vsubq_f32(v166, vmulq_f32(v163, vsubq_f32(v167, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v167, v162), v140, (int8x16_t)0))))).u64[0];
        v168 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v135 + 112), v160, 2), vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v135 + 96), *(float32x2_t *)v167.f32, 1), vmulq_n_f32(*(float32x4_t *)(v135 + 80), v167.f32[0])));
        v169 = vandq_s8(v152, (int8x16_t)vcgtq_f32(vnegq_f32((float32x4_t)v141), (float32x4_t)vrev64q_s32((int32x4_t)v168)));
        *(int8x8_t *)v167.f32 = vqtbl1_s8(v141, *(int8x8_t *)v157.i8);
        *(int8x8_t *)&v167.u32[2] = vqtbl1_s8(v141, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
        v170 = (int8x16_t)vaddq_f32(v167, (float32x4_t)vbslq_s8(v148, v169, v168));
        v171 = vbslq_s8(v148, v169, v170);
        v172 = vandq_s8(v140, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v171, v171, 4uLL), (float32x4_t)v151));
        v173 = *(int8x16_t *)(v135 + 288);
        v174 = *(float32x4_t *)(v135 + 304);
        v172.i64[0] = vbslq_s8(v173, (int8x16_t)vrev64q_s32((int32x4_t)v172), v172).u64[0];
        v172.i64[1] = vminq_f32(*(float32x4_t *)&v171, v174).i64[1];
        v175 = vbslq_s8(v148, (int8x16_t)vsubq_f32(v174, (float32x4_t)v171), v170);
        v176 = vbslq_s8(v145, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v175, v175, 8uLL), (float32x4_t)v172), v172);
        v177 = vbslq_s8(v173, vandq_s8(v140, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v176), v174)), v176);
        v178 = *(int8x16_t *)(v135 + 320);
        v179 = vbslq_s8(*(int8x16_t *)(v135 + 336), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v177, v177, 0xCuLL), (float32x4_t)v151), vbslq_s8(*(int8x16_t *)(v135 + 336), (int8x16_t)vmaxq_f32((float32x4_t)v175, (float32x4_t)v178), v175), v177), v175);
        v180 = vbslq_s8(v148, (int8x16_t)vminq_f32((float32x4_t)v179, (float32x4_t)vextq_s8(v177, v177, 4uLL)), v179);
        v181 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v180), (float32x4_t)v151), v178, v180);
        v180.i64[1] = v181.i64[1];
        v182 = (float32x4_t)vdupq_laneq_s32(v181, 2);
        v183 = vminq_f32(vmaxq_f32(vrecpeq_f32(v182), (float32x4_t)v152), v156);
        v184 = vminq_f32(vmaxq_f32(vmulq_f32(v183, vrecpsq_f32(v182, v183)), (float32x4_t)v152), v156);
        v185 = *((int *)a2 + 22);
        v186 = vsubq_f32(vmulq_f32(vmulq_f32(v184, vrecpsq_f32(v182, v184)), (float32x4_t)v180), v9);
        v187 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v188 = vaddq_s32(vcvtq_s32_f32(v186), vcltzq_f32(v186));
          v189 = (float32x2_t)vsubq_f32(v186, vcvtq_f32_s32(v188)).u64[0];
          v190 = (float32x4_t *)(v187 + 16 * (v188.i32[0] + v188.i32[1] * (int)v185));
          v191 = vaddq_f32(*v190, vmulq_n_f32(vsubq_f32(v190[1], *v190), v189.f32[0]));
          v192 = vaddq_f32(v191, vmulq_lane_f32(vsubq_f32(vaddq_f32(v190[v185], vmulq_n_f32(vsubq_f32(v190[(int)v185 + 1], v190[v185]), v189.f32[0])), v191), v189, 1));
        }
        else
        {
          v193 = vaddq_f32(v186, v13);
          v194 = vcvtq_s32_f32(v193);
          v193.i64[0] = vaddq_s32(v194, vcgtq_f32(vcvtq_f32_s32(v194), v193)).u64[0];
          v192 = *(float32x4_t *)(v187 + 16 * (v193.i32[0] + v193.i32[1] * (int)v185));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v192;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcWrapRepeat::GetDOD(HgcWrapRepeat *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcWrapRepeat *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcWrapRepeat::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcWrapRepeat::HgcWrapRepeat(HgcWrapRepeat *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C4210;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051310;
  *(_OWORD *)(v3 + 160) = xmmword_1B3561F60;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3553710;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 224) = xmmword_1B3561F70;
  *(_OWORD *)(v3 + 240) = xmmword_1B355C520;
  *(int32x4_t *)(v3 + 256) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 272) = xmmword_1B30517F0;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 304) = xmmword_1B3561F80;
  *(_OWORD *)(v3 + 320) = xmmword_1B3561F90;
  *(_OWORD *)(v3 + 336) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcWrapRepeat *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2F68684(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcWrapRepeat::~HgcWrapRepeat(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C4210;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C402BC884A0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcWrapRepeat::~HgcWrapRepeat(this);
  HGObject::operator delete(v1);
}

uint64_t HgcWrapRepeat::SetParameter(HgcWrapRepeat *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  float *v16;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_48;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_48;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_48;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_48;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_48;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[22] = a3;
      goto LABEL_48;
    case 6:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == a3.n128_f32[0]
        && v14[6].n128_f32[1] == a4
        && v14[6].n128_f32[2] == a6
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = a3.n128_u32[0];
      v14[6].n128_f32[1] = a4;
      v14[6].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[23] = a3;
      goto LABEL_48;
    case 7:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == a3.n128_f32[0]
        && v15[7].n128_f32[1] == a4
        && v15[7].n128_f32[2] == a6
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15[7].n128_u32[0] = a3.n128_u32[0];
      v15[7].n128_f32[1] = a4;
      v15[7].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[24] = a3;
      goto LABEL_48;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
LABEL_48:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcWrapRepeat::GetParameter(HgcWrapRepeat *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_11;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_11;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_11;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_11;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_11;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[88];
      a3[1] = v9[89];
      a3[2] = v9[90];
      v4 = v9 + 91;
      goto LABEL_11;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[92];
      a3[1] = v10[93];
      a3[2] = v10[94];
      v4 = v10 + 95;
      goto LABEL_11;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[96];
      a3[1] = v11[97];
      a3[2] = v11[98];
      v4 = v11 + 99;
      goto LABEL_11;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
LABEL_11:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcTXColor::GetProgram(HgcTXColor *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000027f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.w = r0.w*half(hg_Params[0].w);\n"
             "    r0.xyz = half3(hg_Params[0].xyz)*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c4d7569c:2d44c83b:168a2167:76b53a8c\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000265\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.w = r0.w*hg_Params[0].w;\n"
             "    r0.xyz = hg_Params[0].xyz*r0.www;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0779d546:fa52dd80:b861373f:9406dfe9\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000001f5\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0.w,$f0,texture[0],RECT;\n"
           "MUL r0.w,r0,$p0;\n"
           "MUL r0.xyz,$p0,r0.w;\n"
           "MOV $o0,r0;\n"
           "END\n"
           "##MD5=b88c9aa1:7b970a63:350aa2cb:9535f5bb\n"
           "##SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000237\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0.w = r0.w*hg_ProgramLocal0.w;\n"
           "    r0.xyz = hg_ProgramLocal0.xyz*r0.www;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=5cc2f960:9e9a1675:5f2d55f1:a34cda55\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcTXColor::InitProgramDescriptor(HgcTXColor *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTXColor_hgc_visible", "//Metal1.0     \n//LEN=0000000139\n[[ visible ]] FragmentOut HgcTXColor_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0.w = r0.w*hg_Params[0].w;\n"
    "    r0.xyz = hg_Params[0].xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F68C08()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTXColor");
}

void sub_1B2F68C18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F68D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F68D58()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F68D50);
}

_QWORD *HgcTXColor::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTXColor [hgc1]");
}

uint64_t HgcTXColor::BindTexture(HgcTXColor *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcTXColor::Bind(HgcTXColor *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 62), 1);
  (*(void (**)(HgcTXColor *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcTXColor::RenderTile(HgcTXColor *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *((_QWORD *)this + 62);
          v12 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          v13 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          v14 = vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          v15 = vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          v16 = *(int8x16_t *)(v11 + 144);
          v17 = vbslq_s8(v16, (int8x16_t)v12, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v12, 3));
          v18 = vbslq_s8(v16, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v13, 3));
          v19 = vbslq_s8(v16, (int8x16_t)v14, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v14, 3));
          v20 = vbslq_s8(v16, (int8x16_t)v15, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v11, v15, 3));
          v21 = (int8x16_t *)(v5 + v10);
          v21[-2] = v17;
          v21[-1] = v18;
          *v21 = v19;
          v21[1] = v20;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v22) = -v9;
      }
      if ((int)v22 < v4)
      {
        v22 = v22;
        do
        {
          v23 = *((_QWORD *)this + 62);
          v24 = vmulq_f32(*(float32x4_t *)(v6 + 16 * v22), *(float32x4_t *)v23);
          *(int8x16_t *)(v5 + 16 * v22++) = vbslq_s8(*(int8x16_t *)(v23 + 144), (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v23, v24, 3));
        }
        while (v22 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcTXColor::GetDOD(HgcTXColor *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcTXColor::GetROI(HgcTXColor *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcTXColor::HgcTXColor(HgcTXColor *this)
{
  uint64_t v2;
  uint64_t v3;

  HGColorMatrix::HGColorMatrix(this);
  *(_QWORD *)v2 = off_1E65C4478;
  *(_DWORD *)(v2 + 504) = 1;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 48) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 64) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 80) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 96) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 128) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050F70;
  *((_QWORD *)this + 62) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F69064(_Unwind_Exception *a1)
{
  HGColorMatrix *v1;

  HGColorMatrix::~HGColorMatrix(v1);
  _Unwind_Resume(a1);
}

void HgcTXColor::~HgcTXColor(HgcTXColor *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C4478;
  v2 = *((_QWORD *)this + 62);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGColorMatrix::~HGColorMatrix(this);
}

{
  void *v1;

  HgcTXColor::~HgcTXColor(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTXColor::SetParameter(HgcTXColor *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 62);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  v7 = 1;
  *((_DWORD *)this + 126) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v7;
}

float HgcTXColor::GetParameter(HgcTXColor *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 62);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

HGNode *HgcTXColor::GetOutput(__n128 *this, HGRenderer *a2, __n128 a3, __n128 a4, float32x4_t a5)
{
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  __n128 *v9;

  if (this[31].n128_u32[2])
  {
    v5 = this[31].n128_u64[0];
    v6 = (int8x16_t)vmulq_f32(*(float32x4_t *)v5, (float32x4_t)0);
    v7 = *(int8x16_t *)(v5 + 144);
    a5 = vmulq_f32(*(float32x4_t *)(v5 + 128), *(float32x4_t *)v5);
    a4 = (__n128)vbslq_s8(v7, v6, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v5, (float32x4_t)v6, 3));
    v8 = vbslq_s8(v7, (int8x16_t)a5, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v5, a5, 3));
    *(__n128 *)(v5 + 16) = a4;
    *(__n128 *)(this[31].n128_u64[0] + 32) = a4;
    *(__n128 *)(this[31].n128_u64[0] + 48) = a4;
    *(int8x16_t *)(this[31].n128_u64[0] + 64) = v8;
    v9 = (__n128 *)this[31].n128_u64[0];
    this[27] = v9[1];
    this[28] = v9[2];
    this[29] = v9[3];
    a3 = v9[4];
    this[30] = a3;
    this[31].n128_u32[2] = 0;
  }
  return HGColorMatrix::GetOutput((HGColorMatrix *)this, a2, a3.n128_f64[0], a4.n128_f64[0], *(int32x2_t *)a5.f32);
}

const char *HgcPMStripEvenField::GetProgram(HgcPMStripEvenField *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003a6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = half(fract(0.500000h*half(frag._texCoord1.y)) >= 0.500000h);\n"
             "    output.color0 = select(float4(r0), float4(r2), -float4(r1.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5084851f:fba9185d:22dfa3e1:0fc28038\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000375\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = float(fract(0.500000f*frag._texCoord1.y) >= 0.500000f);\n"
             "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2e9d91d6:50113d3e:5e1e8649:ca6fddee\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002e7\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "ATTRIB $f2=fragment.texcoord[2];\n"
           "ATTRIB $f3=fragment.texcoord[3];\n"
           "PARAM $c0={0.5000000000,0.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1,r2;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "##0\n"
           "TEX r1,$f2,texture[0],RECT;\n"
           "##0\n"
           "TEX r2,$f3,texture[0],RECT;\n"
           "LRP r2,$c0.x,r2,r1;\n"
           "MUL r1.x,$c0,$f1.y;\n"
           "FRC r1.x,r1;\n"
           "SGE r1.x,r1,$c0;\n"
           "CMP $o0,-r1.x,r2,r0;\n"
           "END\n"
           "##MD5=29a43248:de9b99c5:ecd31446:e32229d2\n"
           "##SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d3\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r2 = mix(r1, r2, c0.xxxx);\n"
           "    r1.x = c0.x*hg_TexCoord1.y;\n"
           "    r1.x = fract(r1.x);\n"
           "    r1.x = float(r1.x >= c0.x);\n"
           "    gl_FragColor = vec4(-r1.x < 0.00000 ? r2.x : r0.x, -r1.x < 0.00000 ? r2.y : r0.y, -r1.x < 0.00000 ? r2.z "
           ": r0.z, -r1.x < 0.00000 ? r2.w : r0.w);\n"
           "}\n"
           "//MD5=ca27118b:c945d0f7:15595b7c:a9239cd3\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
}

void HgcPMStripEvenField::InitProgramDescriptor(HgcPMStripEvenField *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPMStripEvenField_hgc_visible", "//Metal1.0     \n//LEN=00000002eb\n[[ visible ]] FragmentOut HgcPMStripEvenField_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r2 = mix(r1, r2, c0.xxxx);\n"
    "    r1.x = float(fract(0.500000f*texCoord1.y) >= 0.500000f);\n"
    "    output.color0 = select(r0, r2, -r1.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F692D4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPMStripEvenField");
}

void sub_1B2F692E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F69524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F6958C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F69584);
}

_QWORD *HgcPMStripEvenField::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPMStripEvenField [hgc1]");
}

uint64_t HgcPMStripEvenField::BindTexture(HgcPMStripEvenField *this, HGHandler *a2, int a3)
{
  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 0.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 0.0, 1.0, 0.0);
  return 0;
}

uint64_t HgcPMStripEvenField::Bind(HgcPMStripEvenField *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HgcPMStripEvenField *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPMStripEvenField::RenderTile(HgcPMStripEvenField *this, int8x8_t *a2)
{
  int8x8_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int8x8_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x8_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  int i;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  float32x4_t v29;
  float32x4_t v30;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[11].i32[0];
    v7 = a2[2];
    *(float32x2_t *)v8.i8 = vcvt_f32_s32((int32x2_t)vand_s8(v2, (int8x8_t)0x100000001));
    v8.i64[1] = 0x3F80000000000000;
    *(float *)v9.i32 = (float)(v5 & 1);
    v9.i32[1] = 1.0;
    v9.i64[1] = 0;
    v10 = a2[10];
    v11 = -(int)v6;
    v12 = 16 * v6;
    v13 = *(_QWORD *)&v10 + 16 * v6;
    v14 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v15 = 0;
        LODWORD(v16) = 0;
        v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        for (i = v5; i > 3; i -= 4)
        {
          v19 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16));
          v20 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16 + 1));
          v21 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16 + 2));
          v22 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16 + 3));
          v23 = (float32x4_t *)*((_QWORD *)this + 51);
          v24 = (int8x16_t)vcgtq_f32(v17, v23[1]);
          v25 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v20, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 16), v20), *v23)), *(int8x16_t *)(*(_QWORD *)&v10 + v15 + 16));
          v26 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v21, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 32), v21), *v23)), *(int8x16_t *)(*(_QWORD *)&v10 + v15 + 32));
          v27 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v22, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 48), v22), *v23)), *(int8x16_t *)(*(_QWORD *)&v10 + v15 + 48));
          v28 = (int8x16_t *)(*(_QWORD *)&v7 + v15);
          *v28 = vbslq_s8(v24, (int8x16_t)vaddq_f32(v19, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15), v19), *v23)), *(int8x16_t *)(*(_QWORD *)&v10 + v15));
          v28[1] = v25;
          v28[2] = v26;
          v28[3] = v27;
          LODWORD(v16) = v16 + 4;
          v15 += 64;
        }
      }
      if ((int)v16 < v5)
      {
        v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        v16 = v16;
        do
        {
          v30 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16));
          *(int8x16_t *)(*(_QWORD *)&v7 + 16 * v16) = vbslq_s8((int8x16_t)vcgtq_f32(v29, *(float32x4_t *)(*((_QWORD *)this + 51) + 16)), (int8x16_t)vaddq_f32(v30, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + 16 * v16), v30), *(float32x4_t *)*((_QWORD *)this + 51))), *(int8x16_t *)(*(_QWORD *)&v10 + 16 * v16));
          ++v16;
        }
        while (v16 < v5);
      }
      v8 = veorq_s8(v8, v9);
      *(_QWORD *)&v10 += v12;
      ++v4;
      v13 += v12;
      *(_QWORD *)&v7 += v14;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcPMStripEvenField::GetDOD(HgcPMStripEvenField *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcPMStripEvenField::GetROI(HgcPMStripEvenField *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcPMStripEvenField::HgcPMStripEvenField(HgcPMStripEvenField *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C46F0;
  v3 = operator new();
  *(_QWORD *)&v4 = 0x3F0000003F000000;
  *((_QWORD *)&v4 + 1) = 0x3F0000003F000000;
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcPMStripEvenField *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2F69A34(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPMStripEvenField::~HgcPMStripEvenField(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C46F0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPMStripEvenField::~HgcPMStripEvenField(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPMStripEvenField::SetParameter(HgcPMStripEvenField *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcPMStripEvenField::GetParameter(HgcPMStripEvenField *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcMaskCompReplace::GetProgram(HgcMaskCompReplace *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000402\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, half4(hg_Params[0]));\n"
             "    r0.x = r0.x*half(hg_Params[1].y);\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*half(hg_Params[1].x) + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -half(hg_Params[1].z) < 0.00000h);\n"
             "    r0.x = half(hg_Params[1].z) + c0.y;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000h);\n"
             "    output.color0 = select(float4(r0.yyyy), float4(r0.xxxx), -hg_Params[1].wwww < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=26cc7fcf:10aa91a7:34f7b9ad:5e2890fb\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000003cf\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = r0.x*hg_Params[1].y;\n"
             "    r0.y = r0.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
             "    r0.z = -r0.y + c0.x;\n"
             "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
             "    r0.x = hg_Params[1].z + c0.y;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    output.color0 = select(r0.yyyy, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d2b79949:8c64d465:e6394408:3b5018a6\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002e4\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "PARAM $p1=program.local[1];\n"
           "PARAM $c0={1.000000000,-2.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "DP4 r0.x,r0,$p0;\n"
           "MUL r0.x,r0,$p1.y;\n"
           "MAD r0.y,r0.x,$c0,$c0.x;\n"
           "MAD r0.y,r0,$p1.x,r0.x;\n"
           "ADD r0.z,-r0.y,$c0.x;\n"
           "CMP r0.z,-$p1,r0,r0.y;\n"
           "ADD r0.x,$p1.z,$c0.y;\n"
           "CMP r0.x,r0,r0.z,r0.y;\n"
           "CMP $o0,-$p1.w,r0.x,r0.y;\n"
           "END\n"
           "##MD5=e75ffb65:ab2cde59:e05a9533:2ea5553c\n"
           "##SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000044d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = r0.x*hg_ProgramLocal1.y;\n"
           "    r0.y = r0.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.x + r0.x;\n"
           "    r0.z = -r0.y + c0.x;\n"
           "    r0.z = -hg_ProgramLocal1.z < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = hg_ProgramLocal1.z + c0.y;\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    gl_FragColor = vec4(-hg_ProgramLocal1.w < 0.00000 ? r0.x : r0.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r"
           "0.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r0.y, -hg_ProgramLocal1.w < 0.00000 ? r0.x : r0.y);\n"
           "}\n"
           "//MD5=425ccaa3:4ecfec84:34f5a6cc:42956020\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcMaskCompReplace::InitProgramDescriptor(HgcMaskCompReplace *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMaskCompReplace_hgc_visible", "//Metal1.0     \n//LEN=00000002ab\n[[ visible ]] FragmentOut HgcMaskCompReplace_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = r0.x*hg_Params[1].y;\n"
    "    r0.y = r0.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*hg_Params[1].x + r0.x;\n"
    "    r0.z = -r0.y + c0.x;\n"
    "    r0.z = select(r0.y, r0.z, -hg_Params[1].z < 0.00000f);\n"
    "    r0.x = hg_Params[1].z + c0.y;\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    output.color0 = select(r0.yyyy, r0.xxxx, -hg_Params[1].wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F69B8C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMaskCompReplace");
}

void sub_1B2F69B9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F69C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F69CDC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F69CD4);
}

_QWORD *HgcMaskCompReplace::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMaskCompReplace [hgc1]");
}

uint64_t HgcMaskCompReplace::BindTexture(HgcMaskCompReplace *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcMaskCompReplace::Bind(HgcMaskCompReplace *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcMaskCompReplace *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMaskCompReplace::RenderTile(HgcMaskCompReplace *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v57) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *((_QWORD *)this + 51);
          v12 = *(float32x4_t *)(v11 + 16);
          v13 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11);
          v14 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11);
          v15 = vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11);
          v16 = vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11);
          v17 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          v18 = vaddq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL));
          v19 = vaddq_f32(v15, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL));
          v20 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v21 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          v22 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), *(float32x2_t *)v12.f32, 1);
          v23 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), *(float32x2_t *)v12.f32, 1);
          v24 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), *(float32x2_t *)v12.f32, 1);
          v25 = (int32x4_t)vmulq_lane_f32(v21, *(float32x2_t *)v12.f32, 1);
          v26 = *(float32x4_t *)(v11 + 32);
          v27 = *(float32x4_t *)(v11 + 48);
          v28 = *(int8x16_t *)(v11 + 64);
          v29 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v22, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v22))));
          v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v23, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v23))));
          v31 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v24, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v24))));
          v32 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v25, (int8x16_t)vaddq_f32(v26, vmulq_f32(v27, (float32x4_t)vrev64q_s32(v25))));
          v33 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), vmulq_n_f32(v29, v12.f32[0]));
          v34 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30), vmulq_n_f32(v30, v12.f32[0]));
          v35 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v31), vmulq_n_f32(v31, v12.f32[0]));
          v36 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v32), vmulq_n_f32(v32, v12.f32[0]));
          v37 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v33, 0xCuLL));
          v38 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v34, 0xCuLL));
          v39 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v35, 0xCuLL));
          v40 = (int8x16_t)vsubq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v12, v36, 0xCuLL));
          v41 = v33;
          v41.i32[2] = v37.i32[2];
          v42 = v34;
          v43 = v35;
          v42.i32[2] = v38.i32[2];
          v43.i32[2] = v39.i32[2];
          v44 = v36;
          v44.i32[2] = v40.i32[2];
          v45 = (int8x16_t)vcgtq_f32(v12, v26);
          v33.i64[1] = vbslq_s8(v45, v37, vextq_s8(*(int8x16_t *)&v12, v41, 0xCuLL)).i64[1];
          v34.i64[1] = vbslq_s8(v45, v38, vextq_s8(*(int8x16_t *)&v12, v42, 0xCuLL)).i64[1];
          v35.i64[1] = vbslq_s8(v45, v39, vextq_s8(*(int8x16_t *)&v12, v43, 0xCuLL)).i64[1];
          v36.i64[1] = vbslq_s8(v45, v40, vextq_s8(*(int8x16_t *)&v12, v44, 0xCuLL)).i64[1];
          v46 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), v27);
          v47 = (float32x4_t)vbslq_s8(v28, v46, v33);
          v48 = (float32x4_t)vbslq_s8(v28, v46, v34);
          v49 = (float32x4_t)vbslq_s8(v28, v46, v35);
          v50 = (float32x4_t)vbslq_s8(v28, v46, v36);
          v51 = (int8x16_t)vcgtq_f32(v26, v47);
          v52 = (int8x16_t)vcgtq_f32(v26, v48);
          v53 = (int8x16_t)vcgtq_f32(v26, v49);
          v54 = vbslq_s8((int8x16_t)vcgtq_f32(v26, v50), (int8x16_t)vdupq_laneq_s64((int64x2_t)v50, 1), (int8x16_t)vrev64q_s32((int32x4_t)v50));
          v50.i64[0] = vbslq_s8(v28, vbslq_s8(v51, (int8x16_t)vdupq_laneq_s64((int64x2_t)v47, 1), (int8x16_t)vrev64q_s32((int32x4_t)v47)), v33).u64[0];
          v33.i64[0] = vbslq_s8(v28, vbslq_s8(v52, (int8x16_t)vdupq_laneq_s64((int64x2_t)v48, 1), (int8x16_t)vrev64q_s32((int32x4_t)v48)), v34).u64[0];
          v34.i64[0] = vbslq_s8(v28, vbslq_s8(v53, (int8x16_t)vdupq_laneq_s64((int64x2_t)v49, 1), (int8x16_t)vrev64q_s32((int32x4_t)v49)), v35).u64[0];
          v28.i64[0] = vbslq_s8(v28, v54, v36).u64[0];
          v55 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), *(float32x4_t *)(v11 + 80));
          v56 = (int8x16_t *)(v5 + v10);
          v56[-2] = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1));
          v56[-1] = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1));
          *v56 = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1));
          v56[1] = vbslq_s8(v55, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 1));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v57) = -v9;
      }
      if ((int)v57 < v4)
      {
        v57 = v57;
        do
        {
          v58 = *((_QWORD *)this + 51);
          v59 = *(float32x4_t *)(v58 + 16);
          v60 = vmulq_f32(*(float32x4_t *)(v6 + 16 * v57), *(float32x4_t *)v58);
          v61 = vaddq_f32(v60, (float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL));
          v62 = (int32x4_t)vmulq_lane_f32(vaddq_f32(v61, (float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), *(float32x2_t *)v59.f32, 1);
          v63 = *(float32x4_t *)(v58 + 32);
          v64 = *(float32x4_t *)(v58 + 48);
          v65 = *(int8x16_t *)(v58 + 64);
          v66 = (float32x4_t)vbslq_s8(v65, (int8x16_t)v62, (int8x16_t)vaddq_f32(v63, vmulq_f32(v64, (float32x4_t)vrev64q_s32(v62))));
          v67 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v66), vmulq_n_f32(v66, v59.f32[0]));
          v68 = (int8x16_t)vsubq_f32(v64, (float32x4_t)vextq_s8(v67, v67, 0xCuLL));
          v69.i64[0] = v67.i64[0];
          v69.i64[1] = v68.i64[1];
          v67.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v59, v63), v68, vextq_s8(v67, v69, 0xCuLL)).i64[1];
          v70 = (float32x4_t)vbslq_s8(v65, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), v64), v67);
          v67.i64[0] = vbslq_s8(v65, vbslq_s8((int8x16_t)vcgtq_f32(v63, v70), (int8x16_t)vdupq_laneq_s64((int64x2_t)v70, 1), (int8x16_t)vrev64q_s32((int32x4_t)v70)), v67).u64[0];
          *(int8x16_t *)(v5 + 16 * v57++) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), *(float32x4_t *)(v58 + 80)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 1));
        }
        while (v57 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcMaskCompReplace::GetDOD(HgcMaskCompReplace *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcMaskCompReplace::GetROI(HgcMaskCompReplace *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcMaskCompReplace::HgcMaskCompReplace(HgcMaskCompReplace *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C4958;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 48) = xmmword_1B3561F00;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F6A240(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMaskCompReplace::~HgcMaskCompReplace(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C4958;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMaskCompReplace::~HgcMaskCompReplace(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMaskCompReplace::SetParameter(HgcMaskCompReplace *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMaskCompReplace::GetParameter(HgcMaskCompReplace *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcPMStripOddField::GetProgram(HgcPMStripOddField *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003a6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = half(fract(0.500000h*half(frag._texCoord1.y)) >= 0.500000h);\n"
             "    output.color0 = select(float4(r2), float4(r0), -float4(r1.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=56b38b80:61a82783:d2d87a6d:5fd0a193\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000375\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r2 = mix(r1, r2, c0.xxxx);\n"
             "    r1.x = float(fract(0.500000f*frag._texCoord1.y) >= 0.500000f);\n"
             "    output.color0 = select(r2, r0, -r1.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=89f71f30:d1e3aae1:2723cdfc:c7cde105\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:001e:0000:0004:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000002e7\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "ATTRIB $f1=fragment.texcoord[1];\n"
           "ATTRIB $f2=fragment.texcoord[2];\n"
           "ATTRIB $f3=fragment.texcoord[3];\n"
           "PARAM $c0={0.5000000000,0.000000000,0.000000000,0.000000000};\n"
           "##%\n"
           "TEMP r0,r1,r2;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "##0\n"
           "TEX r1,$f2,texture[0],RECT;\n"
           "##0\n"
           "TEX r2,$f3,texture[0],RECT;\n"
           "LRP r2,$c0.x,r2,r1;\n"
           "MUL r1.x,$c0,$f1.y;\n"
           "FRC r1.x,r1;\n"
           "SGE r1.x,r1,$c0;\n"
           "CMP $o0,-r1.x,r0,r2;\n"
           "END\n"
           "##MD5=7a82c137:7b79cd8d:7c5acf4f:f553035b\n"
           "##SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d3\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r2 = mix(r1, r2, c0.xxxx);\n"
           "    r1.x = c0.x*hg_TexCoord1.y;\n"
           "    r1.x = fract(r1.x);\n"
           "    r1.x = float(r1.x >= c0.x);\n"
           "    gl_FragColor = vec4(-r1.x < 0.00000 ? r0.x : r2.x, -r1.x < 0.00000 ? r0.y : r2.y, -r1.x < 0.00000 ? r0.z "
           ": r2.z, -r1.x < 0.00000 ? r0.w : r2.w);\n"
           "}\n"
           "//MD5=97f90009:1c4d34e1:0d793564:b9d35255\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0004:01:0:1:0\n";
  }
}

void HgcPMStripOddField::InitProgramDescriptor(HgcPMStripOddField *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPMStripOddField_hgc_visible", "//Metal1.0     \n//LEN=00000002ea\n[[ visible ]] FragmentOut HgcPMStripOddField_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r2 = mix(r1, r2, c0.xxxx);\n"
    "    r1.x = float(fract(0.500000f*texCoord1.y) >= 0.500000f);\n"
    "    output.color0 = select(r2, r0, -r1.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F6A44C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPMStripOddField");
}

void sub_1B2F6A45C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F6A69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F6A704()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F6A6FCLL);
}

_QWORD *HgcPMStripOddField::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPMStripOddField [hgc1]");
}

uint64_t HgcPMStripOddField::BindTexture(HgcPMStripOddField *this, HGHandler *a2, int a3)
{
  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 0.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 0.0, 1.0, 0.0);
  return 0;
}

uint64_t HgcPMStripOddField::Bind(HgcPMStripOddField *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HgcPMStripOddField *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPMStripOddField::RenderTile(HgcPMStripOddField *this, int8x8_t *a2)
{
  int8x8_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int8x8_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x8_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  int i;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  float32x4_t v29;
  float32x4_t v30;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[11].i32[0];
    v7 = a2[2];
    *(float32x2_t *)v8.i8 = vcvt_f32_s32((int32x2_t)vand_s8(v2, (int8x8_t)0x100000001));
    v8.i64[1] = 0x3F80000000000000;
    *(float *)v9.i32 = (float)(v5 & 1);
    v9.i32[1] = 1.0;
    v9.i64[1] = 0;
    v10 = a2[10];
    v11 = -(int)v6;
    v12 = 16 * v6;
    v13 = *(_QWORD *)&v10 + 16 * v6;
    v14 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v15 = 0;
        LODWORD(v16) = 0;
        v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        for (i = v5; i > 3; i -= 4)
        {
          v19 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16));
          v20 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16 + 1));
          v21 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16 + 2));
          v22 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16 + 3));
          v23 = (float32x4_t *)*((_QWORD *)this + 51);
          v24 = (int8x16_t)vcgtq_f32(v17, v23[1]);
          v25 = vbslq_s8(v24, *(int8x16_t *)(*(_QWORD *)&v10 + v15 + 16), (int8x16_t)vaddq_f32(v20, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 16), v20), *v23)));
          v26 = vbslq_s8(v24, *(int8x16_t *)(*(_QWORD *)&v10 + v15 + 32), (int8x16_t)vaddq_f32(v21, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 32), v21), *v23)));
          v27 = vbslq_s8(v24, *(int8x16_t *)(*(_QWORD *)&v10 + v15 + 48), (int8x16_t)vaddq_f32(v22, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15 + 48), v22), *v23)));
          v28 = (int8x16_t *)(*(_QWORD *)&v7 + v15);
          *v28 = vbslq_s8(v24, *(int8x16_t *)(*(_QWORD *)&v10 + v15), (int8x16_t)vaddq_f32(v19, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + v15), v19), *v23)));
          v28[1] = v25;
          v28[2] = v26;
          v28[3] = v27;
          LODWORD(v16) = v16 + 4;
          v15 += 64;
        }
      }
      if ((int)v16 < v5)
      {
        v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
        v16 = v16;
        do
        {
          v30 = *(float32x4_t *)(*(_QWORD *)&v10 + 16 * (v11 + (int)v16));
          *(int8x16_t *)(*(_QWORD *)&v7 + 16 * v16) = vbslq_s8((int8x16_t)vcgtq_f32(v29, *(float32x4_t *)(*((_QWORD *)this + 51) + 16)), *(int8x16_t *)(*(_QWORD *)&v10 + 16 * v16), (int8x16_t)vaddq_f32(v30, vmulq_f32(vsubq_f32(*(float32x4_t *)(v13 + 16 * v16), v30), *(float32x4_t *)*((_QWORD *)this + 51))));
          ++v16;
        }
        while (v16 < v5);
      }
      v8 = veorq_s8(v8, v9);
      *(_QWORD *)&v10 += v12;
      ++v4;
      v13 += v12;
      *(_QWORD *)&v7 += v14;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcPMStripOddField::GetDOD(HgcPMStripOddField *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcPMStripOddField::GetROI(HgcPMStripOddField *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0, 0xFFFFFFFF, 0, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcPMStripOddField::HgcPMStripOddField(HgcPMStripOddField *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65C4BC0;
  v3 = operator new();
  *(_QWORD *)&v4 = 0x3F0000003F000000;
  *((_QWORD *)&v4 + 1) = 0x3F0000003F000000;
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcPMStripOddField *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2F6ABAC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPMStripOddField::~HgcPMStripOddField(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C4BC0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPMStripOddField::~HgcPMStripOddField(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPMStripOddField::SetParameter(HgcPMStripOddField *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcPMStripOddField::GetParameter(HgcPMStripOddField *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcPSImageTint::GetProgram(HgcPSImageTint *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000256\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a42cb56b:1fcb5ecc:969f09ef:c1a07a09\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000241\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=23d3843a:4a99c9dd:a97a56bb:b049b70b\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return "!!ARBfp1.0     \n"
           "##LEN=00000001e0\n"
           "##                          \n"
           "##                            \n"
           "##                                \n"
           "##                                     \n"
           "##$\n"
           "OUTPUT $o0=result.color;\n"
           "ATTRIB $f0=fragment.texcoord[0];\n"
           "PARAM $p0=program.local[0];\n"
           "##%\n"
           "TEMP r0;\n"
           "##@\n"
           "##0\n"
           "TEX r0,$f0,texture[0],RECT;\n"
           "MUL r0.xyz,r0,$p0;\n"
           "MOV $o0,r0;\n"
           "END\n"
           "##MD5=74ab830a:6a538ef9:f90c7f25:45a1849b\n"
           "##SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000020f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=0f8ec3a9:eef1c591:59dd542e:b81a4daa\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPSImageTint::InitProgramDescriptor(HgcPSImageTint *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPSImageTint_hgc_visible", "//Metal1.0     \n//LEN=0000000119\n[[ visible ]] FragmentOut HgcPSImageTint_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2F6AD04()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPSImageTint");
}

void sub_1B2F6AD14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2F6AE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2F6AE54()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2F6AE4CLL);
}

_QWORD *HgcPSImageTint::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPSImageTint [hgc1]");
}

uint64_t HgcPSImageTint::BindTexture(HgcPSImageTint *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcPSImageTint::Bind(HgcPSImageTint *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 62), 1);
  (*(void (**)(HgcPSImageTint *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPSImageTint::RenderTile(HgcPSImageTint *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *((_QWORD *)this + 62);
          v12 = *(int8x16_t *)(v11 + 144);
          v13 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 32), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), *(float32x4_t *)v11));
          v14 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 - 16), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), *(float32x4_t *)v11));
          v15 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10), *(float32x4_t *)v11));
          v16 = vbslq_s8(v12, *(int8x16_t *)(v6 + v10 + 16), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), *(float32x4_t *)v11));
          v17 = (int8x16_t *)(v5 + v10);
          v17[-2] = v13;
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v18) = -v9;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 62) + 144), *(int8x16_t *)(v6 + 16 * v18), (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v18), *(float32x4_t *)*((_QWORD *)this + 62)));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcPSImageTint::GetDOD(HgcPSImageTint *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcPSImageTint::GetROI(HgcPSImageTint *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcPSImageTint::HgcPSImageTint(HgcPSImageTint *this)
{
  uint64_t v2;
  uint64_t v3;

  HGColorMatrix::HGColorMatrix(this);
  *(_QWORD *)v2 = off_1E65C4E28;
  *(_DWORD *)(v2 + 504) = 1;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 32) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 48) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 64) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 80) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 96) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 128) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050F70;
  *((_QWORD *)this + 62) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2F6B14C(_Unwind_Exception *a1)
{
  HGColorMatrix *v1;

  HGColorMatrix::~HGColorMatrix(v1);
  _Unwind_Resume(a1);
}

void HgcPSImageTint::~HgcPSImageTint(HgcPSImageTint *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65C4E28;
  v2 = *((_QWORD *)this + 62);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGColorMatrix::~HGColorMatrix(this);
}

{
  void *v1;

  HgcPSImageTint::~HgcPSImageTint(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPSImageTint::SetParameter(HgcPSImageTint *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 62);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  v7 = 1;
  *((_DWORD *)this + 126) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v7;
}

float HgcPSImageTint::GetParameter(HgcPSImageTint *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 62);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

HGNode *HgcPSImageTint::GetOutput(__n128 *this, HGRenderer *a2, __n128 a3, __n128 a4, __n128 a5)
{
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  __n128 *v8;

  if (this[31].n128_u32[2])
  {
    v5 = this[31].n128_u64[0];
    v6 = *(int8x16_t *)(v5 + 144);
    a4 = (__n128)vbslq_s8(v6, *(int8x16_t *)(v5 + 96), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 96), *(float32x4_t *)v5));
    a5 = (__n128)vbslq_s8(v6, *(int8x16_t *)(v5 + 112), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 112), *(float32x4_t *)v5));
    v7 = vbslq_s8(v6, *(int8x16_t *)(v5 + 128), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 128), *(float32x4_t *)v5));
    *(int8x16_t *)(v5 + 16) = vbslq_s8(v6, *(int8x16_t *)(v5 + 80), (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 80), *(float32x4_t *)v5));
    *(__n128 *)(this[31].n128_u64[0] + 32) = a4;
    *(__n128 *)(this[31].n128_u64[0] + 48) = a5;
    *(int8x16_t *)(this[31].n128_u64[0] + 64) = v7;
    v8 = (__n128 *)this[31].n128_u64[0];
    this[27] = v8[1];
    this[28] = v8[2];
    this[29] = v8[3];
    a3 = v8[4];
    this[30] = a3;
    this[31].n128_u32[2] = 0;
  }
  return HGColorMatrix::GetOutput((HGColorMatrix *)this, a2, a3.n128_f64[0], a4.n128_f64[0], (int32x2_t)a5.n128_u64[0]);
}

void OZAttractedToBehavior::OZAttractedToBehavior(OZAttractedToBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C50A0;
  v5[2] = &unk_1E65C5388;
  v5[6] = &unk_1E65C55E0;
  v5[42] = &unk_1E65C5638;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Attracted To Object"));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZAttractedToBehavior *)((char *)this + 504), &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Strength"));
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 664), 300.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Attenuation Type Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Attract Behavior Attenuation Type"));
  OZChannelEnum::OZChannelEnum((OZAttractedToBehavior *)((char *)this + 816), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x196u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Attenuation"));
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 1072), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x192u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Cutoff"));
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 1224), 1000.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Drag"));
  OZChannelDouble::OZChannelDouble((OZAttractedToBehavior *)((char *)this + 1376), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Active Axes"));
  OZChannelBool3D::OZChannelBool3D((OZAttractedToBehavior *)((char *)this + 1528), 1, 1, 0, &v7, (OZChannelFolder *)((char *)this + 56), 0x197u, 0, 3u);
  PCString::~PCString(&v7);
  OZChannel::setScale((OZChannel *)((char *)this + 664), 0.1);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 664), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 664), 1000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1072), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1224), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1224), 4000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1376), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1376), 5.0);
  OZChanSceneNodeRef::setAllowsCyclicDependencies((uint64_t)this + 504, 1);
}

void sub_1B2F6B634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZReflexiveBehavior *v12;
  OZChanTransformNodeRef *v13;
  OZChannel *v14;
  OZChannelEnum *v15;
  OZChannel *v16;
  OZChannel *v17;
  OZChannel *v18;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannel::~OZChannel(v14);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v13);
  OZReflexiveBehavior::~OZReflexiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZAttractedToBehavior::OZAttractedToBehavior(OZAttractedToBehavior *this, OZAttractedToBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C50A0;
  *(_QWORD *)(v5 + 16) = &unk_1E65C5388;
  *(_QWORD *)(v5 + 48) = &unk_1E65C55E0;
  *(_QWORD *)(v5 + 336) = &unk_1E65C5638;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZChanTransformNodeRef *)(v5 + 504), (OZAttractedToBehavior *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 664), (const OZChannelBase *)((char *)a2 + 664), v6);
  *((_QWORD *)this + 83) = &off_1E6551358;
  *((_QWORD *)this + 85) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZAttractedToBehavior *)((char *)this + 816), (OZAttractedToBehavior *)((char *)a2 + 816), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1072), (const OZChannelBase *)((char *)a2 + 1072), v6);
  *((_QWORD *)this + 134) = &off_1E6551358;
  *((_QWORD *)this + 136) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1224), (const OZChannelBase *)((char *)a2 + 1224), v6);
  *((_QWORD *)this + 153) = &off_1E6551358;
  *((_QWORD *)this + 155) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1376), (const OZChannelBase *)((char *)a2 + 1376), v6);
  *((_QWORD *)this + 172) = &off_1E6551358;
  *((_QWORD *)this + 174) = &unk_1E65516B8;
  OZChannelBool3D::OZChannelBool3D((OZAttractedToBehavior *)((char *)this + 1528), (OZAttractedToBehavior *)((char *)a2 + 1528), v6);
}

void sub_1B2F6B880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChanTransformNodeRef *a10)
{
  OZReflexiveBehavior *v10;
  OZChannel *v11;
  OZChannelEnum *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannel *v15;

  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelEnum::~OZChannelEnum(v12);
  OZChannel::~OZChannel(v11);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(a10);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2F6B8E4()
{
  JUMPOUT(0x1B2F6B8CCLL);
}

void sub_1B2F6B8EC()
{
  JUMPOUT(0x1B2F6B8D4);
}

void OZAttractedToBehavior::~OZAttractedToBehavior(OZAttractedToBehavior *this)
{
  *(_QWORD *)this = &off_1E65C50A0;
  *((_QWORD *)this + 2) = &unk_1E65C5388;
  *((_QWORD *)this + 6) = &unk_1E65C55E0;
  *((_QWORD *)this + 42) = &unk_1E65C5638;
  OZChannelBool3D::~OZChannelBool3D((OZAttractedToBehavior *)((char *)this + 1528));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1376));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1224));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1072));
  OZChannelEnum::~OZChannelEnum((OZAttractedToBehavior *)((char *)this + 816));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 664));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZAttractedToBehavior *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZAttractedToBehavior::~OZAttractedToBehavior(OZAttractedToBehavior *this)
{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 16));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 48));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 336));
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractedToBehavior::~OZAttractedToBehavior((OZAttractedToBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZAttractedToBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 664, (uint64_t)v5 + 664);
  OZChannelBase::operator=(a1 + 816, (uint64_t)v5 + 816);
  OZChannelBase::operator=(a1 + 1072, (uint64_t)v5 + 1072);
  OZChannelBase::operator=(a1 + 1224, (uint64_t)v5 + 1224);
  return OZChannelBase::operator=(a1 + 1376, (uint64_t)v5 + 1376);
}

const void *OZAttractedToBehavior::getReferencedNode(OZAttractedToBehavior *this)
{
  return OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
}

void OZAttractedToBehavior::calcAttraction(uint64_t a1, const CMTime *a2, double *a3, double *a4, double *a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int ValueAsInt;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 664), a2, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1224), a2, 0.0);
  v13 = v12;
  v14 = *a3 - *a4;
  v15 = a3[1] - a4[1];
  v16 = a3[2] - a4[2];
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  OZChannelBool3D::getValue(a1 + 1528, MEMORY[0x1E0CA2E68], &v26, 0.0);
  v17 = v14 * v26;
  v18 = v15 * v27;
  v19 = v16 * v28;
  v20 = sqrt(v17 * v17 + v18 * v18 + v19 * v19);
  if (v20 >= 10.0 && v20 <= v13)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 816), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1072), a2, 0.0);
    if (ValueAsInt)
      v24 = v17 * v17 + v18 * v18 + v19 * v19;
    else
      v24 = v20;
    v25 = v11 / (v24 * v23);
    *a5 = v17 * v25;
    a5[1] = v18 * v25;
    a5[2] = v19 * v25;
  }
  else
  {
    *a5 = 0.0;
    a5[1] = 0.0;
    a5[2] = 0.0;
  }
}

uint64_t OZAttractedToBehavior::getMaskVector(uint64_t a1, double *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  double v8;
  int v9;

  result = OZChannelBool3D::getValue(a1 + 1528, MEMORY[0x1E0CA2E68], a2, 0.0);
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v8 <= -0.0000001;
      if (v8 >= 0.0000001)
        v9 = 1;
      v7 += v9;
      ++v6;
    }
    while (v6 != 3);
    *a3 = v7;
  }
  return result;
}

void OZAttractedToBehavior::calcAttraction(uint64_t a1, uint64_t a2, OZSimulationState *a3, uint64_t a4)
{
  OZSimulationState *TransformNode;
  CMTime v9;
  double v10[3];
  CMTime v11;

  v11 = *(CMTime *)(a2 + 176);
  TransformNode = (OZSimulationState *)OZChanTransformNodeRef::getTransformNode((OZChannelBase *)(a1 + 504));
  if (!TransformNode || TransformNode == a3)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    OZSimulationState::getNodePosition(a2, (CMTime *)(a2 + 176), (uint64_t)TransformNode, a3, v10);
    v9 = v11;
    OZAttractedToBehavior::calcAttraction(a1, &v9, v10, (double *)a2, (double *)a4);
  }
}

double OZAttractedToBehavior::accumForces(OZAttractedToBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v5;
  double v6;
  double result;
  CMTime v8;
  float64x2_t v9;
  double v10;

  v9 = 0uLL;
  v10 = 0.0;
  OZAttractedToBehavior::calcAttraction((uint64_t)this, (uint64_t)a2, (OZSimulationState *)a3, (uint64_t)&v9);
  v8 = *(CMTime *)((char *)a2 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1376), &v8, 0.0);
  v6 = v10 - v5 * *((double *)a2 + 9);
  *((float64x2_t *)a2 + 8) = vaddq_f64(vsubq_f64(v9, vmulq_n_f64(*(float64x2_t *)((char *)a2 + 56), v5)), *((float64x2_t *)a2 + 8));
  result = v6 + *((double *)a2 + 18);
  *((double *)a2 + 18) = result;
  return result;
}

__n128 OZAttractedToBehavior::accumForces(OZAttractedToBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  const void *TransformNode;
  __n128 result;
  uint64_t v8;
  double v9;
  __n128 v10;
  CMTime v11;
  CMTime v12;
  double v13[3];
  CMTime v14;

  v14 = *(CMTime *)((_BYTE *)a2 + 1);
  TransformNode = OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 504));
  if (TransformNode)
  {
    memset(v13, 0, sizeof(v13));
    v12 = *(CMTime *)((_BYTE *)a2 + 1);
    OZSimulationState::GetNodePosition(&v12, (uint64_t)TransformNode, (OZSimulationState *)a3, v13);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1376), &v14, 0.0);
    memset(&v12, 0, sizeof(v12));
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
    {
      v10 = result;
      do
      {
        v11 = v14;
        OZAttractedToBehavior::calcAttraction((uint64_t)this, &v11, v13, (double *)v8, (double *)&v12.value);
        result = v10;
        v9 = *(double *)&v12.epoch - v10.n128_f64[0] * *(double *)(v8 + 72);
        *(float64x2_t *)(v8 + 128) = vaddq_f64(vsubq_f64(*(float64x2_t *)&v12.value, vmulq_n_f64(*(float64x2_t *)(v8 + 56), v10.n128_f64[0])), *(float64x2_t *)(v8 + 128));
        *(double *)(v8 + 144) = v9 + *(double *)(v8 + 144);
        v8 += 248;
      }
      while (v8 != *((_QWORD *)a2 + 1));
    }
  }
  return result;
}

void OZAttractorBehavior::OZAttractorBehavior(OZAttractorBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  OZTransitiveBehavior::OZTransitiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C5678;
  v5[2] = &unk_1E65C5968;
  v5[6] = &unk_1E65C5BC0;
  v5[42] = &unk_1E65C5C18;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Strength"));
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 792), 300.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Attenuation Type Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Attract Behavior Attenuation Type"));
  OZChannelEnum::OZChannelEnum((OZAttractorBehavior *)((char *)this + 944), &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Attenuation"));
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 1200), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Cutoff"));
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 1352), 1000.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Drag"));
  OZChannelDouble::OZChannelDouble((OZAttractorBehavior *)((char *)this + 1504), 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Attract Behavior Active Axes"));
  OZChannelBool3D::OZChannelBool3D((OZAttractorBehavior *)((char *)this + 1656), 1, 1, 0, &v7, (OZChannelFolder *)((char *)this + 56), 0x196u, 0, 3u);
  PCString::~PCString(&v7);
  OZChannel::setScale((OZChannel *)((char *)this + 792), 0.1);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 792), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 792), 1000.0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 344), 1.0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 344), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 1200), 1.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1352), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1352), 4000.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1504), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1504), 5.0);
}

void sub_1B2F6C1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZTransitiveBehavior *v12;
  OZChannel *v13;
  OZChannelEnum *v14;
  OZChannel *v15;
  OZChannel *v16;
  OZChannel *v17;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v17);
  OZChannel::~OZChannel(v16);
  OZChannel::~OZChannel(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v13);
  OZTransitiveBehavior::~OZTransitiveBehavior(v12);
  _Unwind_Resume(a1);
}

void OZAttractorBehavior::OZAttractorBehavior(OZAttractorBehavior *this, OZAttractorBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZTransitiveBehavior::OZTransitiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C5678;
  *(_QWORD *)(v5 + 16) = &unk_1E65C5968;
  *(_QWORD *)(v5 + 48) = &unk_1E65C5BC0;
  *(_QWORD *)(v5 + 336) = &unk_1E65C5C18;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 99) = &off_1E6551358;
  *((_QWORD *)this + 101) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZAttractorBehavior *)((char *)this + 944), (OZAttractorBehavior *)((char *)a2 + 944), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1200), (const OZChannelBase *)((char *)a2 + 1200), v6);
  *((_QWORD *)this + 150) = &off_1E6551358;
  *((_QWORD *)this + 152) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1352), (const OZChannelBase *)((char *)a2 + 1352), v6);
  *((_QWORD *)this + 169) = &off_1E6551358;
  *((_QWORD *)this + 171) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1504), (const OZChannelBase *)((char *)a2 + 1504), v6);
  *((_QWORD *)this + 188) = &off_1E6551358;
  *((_QWORD *)this + 190) = &unk_1E65516B8;
  OZChannelBool3D::OZChannelBool3D((OZAttractorBehavior *)((char *)this + 1656), (OZAttractorBehavior *)((char *)a2 + 1656), v6);
}

void sub_1B2F6C3FC(_Unwind_Exception *a1)
{
  OZTransitiveBehavior *v1;
  OZChannel *v2;
  OZChannelEnum *v3;
  OZChannel *v4;
  OZChannel *v5;
  OZChannel *v6;

  OZChannel::~OZChannel(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChannel::~OZChannel(v2);
  OZTransitiveBehavior::~OZTransitiveBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F6C458()
{
  JUMPOUT(0x1B2F6C448);
}

void OZAttractorBehavior::~OZAttractorBehavior(OZAttractorBehavior *this)
{
  *(_QWORD *)this = &off_1E65C5678;
  *((_QWORD *)this + 2) = &unk_1E65C5968;
  *((_QWORD *)this + 6) = &unk_1E65C5BC0;
  *((_QWORD *)this + 42) = &unk_1E65C5C18;
  OZChannelBool3D::~OZChannelBool3D((OZAttractorBehavior *)((char *)this + 1656));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1504));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1352));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1200));
  OZChannelEnum::~OZChannelEnum((OZAttractorBehavior *)((char *)this + 944));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 792));
  OZTransitiveBehavior::~OZTransitiveBehavior(this);
}

{
  OZAttractorBehavior::~OZAttractorBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZAttractorBehavior::~OZAttractorBehavior(OZAttractorBehavior *this)
{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 16));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 48));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 336));
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZAttractorBehavior::~OZAttractorBehavior((OZAttractorBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZAttractorBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZTransitiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 792, (uint64_t)v4 + 792);
  OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
  OZChannelBase::operator=(a1 + 1200, (uint64_t)v5 + 1200);
  OZChannelBase::operator=(a1 + 1352, (uint64_t)v5 + 1352);
  return OZChannelBase::operator=(a1 + 1504, (uint64_t)v5 + 1504);
}

void OZAttractorBehavior::calcAttraction(uint64_t a1, const CMTime *a2, double *a3, double *a4, double *a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int ValueAsInt;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 792), a2, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1352), a2, 0.0);
  v13 = v12;
  v14 = *a3 - *a4;
  v15 = a3[1] - a4[1];
  v16 = a3[2] - a4[2];
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  OZChannelBool3D::getValue(a1 + 1656, MEMORY[0x1E0CA2E68], &v26, 0.0);
  v17 = v14 * v26;
  v18 = v15 * v27;
  v19 = v16 * v28;
  v20 = sqrt(v17 * v17 + v18 * v18 + v19 * v19);
  if (v20 >= 10.0 && v20 <= v13)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 944), a2, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1200), a2, 0.0);
    if (ValueAsInt)
      v24 = v17 * v17 + v18 * v18 + v19 * v19;
    else
      v24 = v20;
    v25 = v11 / (v24 * v23);
    *a5 = v17 * v25;
    a5[1] = v18 * v25;
    a5[2] = v19 * v25;
  }
  else
  {
    *a5 = 0.0;
    a5[1] = 0.0;
    a5[2] = 0.0;
  }
}

uint64_t OZAttractorBehavior::getMaskVector(uint64_t a1, double *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  double v8;
  int v9;

  result = OZChannelBool3D::getValue(a1 + 1656, MEMORY[0x1E0CA2E68], a2, 0.0);
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v8 <= -0.0000001;
      if (v8 >= 0.0000001)
        v9 = 1;
      v7 += v9;
      ++v6;
    }
    while (v6 != 3);
    *a3 = v7;
  }
  return result;
}

void OZAttractorBehavior::calcAttraction(OZSimulationBehavior *a1, uint64_t a2, OZSimulationState *a3, double *a4)
{
  CMTime *v8;
  void *TransformNode;
  CMTime v10;
  double v11[3];
  CMTime v12;

  v8 = (CMTime *)(a2 + 176);
  v12 = *(CMTime *)(a2 + 176);
  memset(v11, 0, sizeof(v11));
  TransformNode = OZSimulationBehavior::getTransformNode(a1);
  OZSimulationState::getNodePosition(a2, v8, (uint64_t)TransformNode, a3, v11);
  v10 = v12;
  OZAttractorBehavior::calcAttraction((uint64_t)a1, &v10, v11, (double *)a2, a4);
}

double OZAttractorBehavior::accumForces(OZAttractorBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  double v5;
  double v6;
  double result;
  CMTime v8;
  float64x2_t v9;
  double v10;

  v9 = 0uLL;
  v10 = 0.0;
  OZAttractorBehavior::calcAttraction(this, (uint64_t)a2, (OZSimulationState *)a3, v9.f64);
  v8 = *(CMTime *)((char *)a2 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), &v8, 0.0);
  v6 = v10 - v5 * *((double *)a2 + 9);
  *((float64x2_t *)a2 + 8) = vaddq_f64(vsubq_f64(v9, vmulq_n_f64(*(float64x2_t *)((char *)a2 + 56), v5)), *((float64x2_t *)a2 + 8));
  result = v6 + *((double *)a2 + 18);
  *((double *)a2 + 18) = result;
  return result;
}

__n128 OZAttractorBehavior::accumForces(OZAttractorBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  void *TransformNode;
  __n128 result;
  uint64_t v8;
  double v9;
  __n128 v10;
  CMTime v11;
  CMTime v12;
  double v13[3];
  CMTime v14;

  v14 = *(CMTime *)((_BYTE *)a2 + 1);
  memset(v13, 0, sizeof(v13));
  v12 = *(CMTime *)((_BYTE *)a2 + 1);
  TransformNode = OZSimulationBehavior::getTransformNode(this);
  OZSimulationState::GetNodePosition(&v12, (uint64_t)TransformNode, (OZSimulationState *)a3, v13);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), &v14, 0.0);
  memset(&v12, 0, sizeof(v12));
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
  {
    v10 = result;
    do
    {
      v11 = v14;
      OZAttractorBehavior::calcAttraction((uint64_t)this, &v11, v13, (double *)v8, (double *)&v12.value);
      result = v10;
      v9 = *(double *)&v12.epoch - v10.n128_f64[0] * *(double *)(v8 + 72);
      *(float64x2_t *)(v8 + 128) = vaddq_f64(vsubq_f64(*(float64x2_t *)&v12.value, vmulq_n_f64(*(float64x2_t *)(v8 + 56), v10.n128_f64[0])), *(float64x2_t *)(v8 + 128));
      *(double *)(v8 + 144) = v9 + *(double *)(v8 + 144);
      v8 += 248;
    }
    while (v8 != *((_QWORD *)a2 + 1));
  }
  return result;
}

void OZAverageBehavior::OZAverageBehavior(OZAverageBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C5C58;
  v5[2] = &unk_1E65C5F98;
  v5[6] = &unk_1E65C61F0;
  v5[42] = &unk_1E65C6248;
  v5[67] = &unk_1E65C6270;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Average Behavior Window Size"));
  OZChannelDouble::OZChannelDouble((OZAverageBehavior *)((char *)this + 864), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 864), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 864), 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 864), 100.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 864), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 864), 20.0);
}

void sub_1B2F6CB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSingleChannelBehavior *v10;

  PCString::~PCString(&a10);
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZAverageBehavior::OZAverageBehavior(OZAverageBehavior *this, const OZAverageBehavior *a2, char a3)
{
  uint64_t v5;

  OZSingleChannelBehavior::OZSingleChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C5C58;
  *(_QWORD *)(v5 + 16) = &unk_1E65C5F98;
  *(_QWORD *)(v5 + 48) = &unk_1E65C61F0;
  *(_QWORD *)(v5 + 336) = &unk_1E65C6248;
  *(_QWORD *)(v5 + 536) = &unk_1E65C6270;
  OZChannel::OZChannel((OZChannel *)(v5 + 864), (const OZChannelBase *)((char *)a2 + 864), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 108) = &off_1E6551358;
  *((_QWORD *)this + 110) = &unk_1E65516B8;
}

void sub_1B2F6CBD0(_Unwind_Exception *a1)
{
  OZSingleChannelBehavior *v1;

  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZAverageBehavior::~OZAverageBehavior(OZAverageBehavior *this)
{
  *(_QWORD *)this = &off_1E65C5C58;
  *((_QWORD *)this + 2) = &unk_1E65C5F98;
  *((_QWORD *)this + 6) = &unk_1E65C61F0;
  *((_QWORD *)this + 42) = &unk_1E65C6248;
  *((_QWORD *)this + 67) = &unk_1E65C6270;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
}

{
  *(_QWORD *)this = &off_1E65C5C58;
  *((_QWORD *)this + 2) = &unk_1E65C5F98;
  *((_QWORD *)this + 6) = &unk_1E65C61F0;
  *((_QWORD *)this + 42) = &unk_1E65C6248;
  *((_QWORD *)this + 67) = &unk_1E65C6270;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 864));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZAverageBehavior::~OZAverageBehavior(OZAverageBehavior *this)
{
  *(_QWORD *)this = &unk_1E65C5F98;
  *((_QWORD *)this + 4) = &unk_1E65C61F0;
  *((_QWORD *)this + 40) = &unk_1E65C6248;
  *((_QWORD *)this + 65) = &unk_1E65C6270;
  *((_QWORD *)this - 2) = &off_1E65C5C58;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 848));
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZAverageBehavior *)((char *)this - 16));
}

{
  *((_QWORD *)this - 4) = &unk_1E65C5F98;
  *(_QWORD *)this = &unk_1E65C61F0;
  *((_QWORD *)this + 36) = &unk_1E65C6248;
  *((_QWORD *)this + 61) = &unk_1E65C6270;
  *((_QWORD *)this - 6) = &off_1E65C5C58;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 816));
  OZSingleChannelBehavior::~OZSingleChannelBehavior((OZAverageBehavior *)((char *)this - 48));
}

{
  OZSingleChannelBehavior *v1;

  v1 = (OZAverageBehavior *)((char *)this - 336);
  *((_QWORD *)this - 42) = &off_1E65C5C58;
  *((_QWORD *)this - 40) = &unk_1E65C5F98;
  *((_QWORD *)this - 36) = &unk_1E65C61F0;
  *(_QWORD *)this = &unk_1E65C6248;
  *((_QWORD *)this + 25) = &unk_1E65C6270;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 528));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
}

{
  OZSingleChannelBehavior *v1;

  v1 = (OZAverageBehavior *)((char *)this - 536);
  *((_QWORD *)this - 67) = &off_1E65C5C58;
  *((_QWORD *)this - 65) = &unk_1E65C5F98;
  *((_QWORD *)this - 61) = &unk_1E65C61F0;
  *((_QWORD *)this - 25) = &unk_1E65C6248;
  *(_QWORD *)this = &unk_1E65C6270;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 328));
  OZSingleChannelBehavior::~OZSingleChannelBehavior(v1);
}

{
  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 16));
}

{
  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 48));
}

{
  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 336));
}

{
  OZAverageBehavior::~OZAverageBehavior((OZAverageBehavior *)((char *)this - 536));
}

uint64_t OZAverageBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;

  OZSingleChannelBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return OZChannelBase::operator=(a1 + 864, (uint64_t)v4 + 864);
}

void OZAverageBehavior::solveNode(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  char *v7;
  __n128 FrameDuration;
  int v9;
  Float64 v10;
  double Seconds;
  double v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  double v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32[2];
  CMTime time;
  CMTime v34;
  __int128 v35;
  uint64_t v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42[2];

  v5 = (_QWORD *)*((_QWORD *)a3 + 19);
  v6 = (uint64_t *)*((_QWORD *)a3 + 10);
  v7 = (char *)this + 16;
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, 1, 1) & 1) != 0)
  {
    memset(&v39, 0, sizeof(v39));
    (*(void (**)(CMTime *__return_ptr, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v39, *(_QWORD *)(*((_QWORD *)this + 47) + 32), (char *)a3 + 96);
    memset(&v38, 0, sizeof(v38));
    (*(void (**)(CMTime *__return_ptr, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v38, *(_QWORD *)(*((_QWORD *)this + 47) + 32), (char *)a3 + 24);
    v37 = *(CMTime *)((_BYTE *)a3 + 5);
    v35 = *((_OWORD *)a3 + 3);
    v36 = *((_QWORD *)a3 + 8);
    memset(&v34, 0, sizeof(v34));
    FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v34);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(*((_QWORD *)this + 2) + 24))(v7, 1, 1, FrameDuration);
    v10 = 0.0;
    if (v9)
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v34, v32, v10);
    operator/((__int128 *)&v32[0].value, (uint64_t)&v35, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    (*(void (**)(CMTime *__return_ptr, OZAverageBehavior *))(*(_QWORD *)this + 608))(v32, this);
    v42[0] = v32[0];
    v41 = v38;
    PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v40);
    operator/((__int128 *)&v40.value, (uint64_t)&v35, (uint64_t)&v31);
    v12 = CMTimeGetSeconds(&v31);
    v42[0] = v32[0];
    v41 = v32[1];
    PC_CMTimeSaferAdd(v42, &v41, (uint64_t)&v40);
    v42[0] = v40;
    v41 = v34;
    PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v29);
    v42[0] = v29;
    v41 = v38;
    PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v40);
    operator/((__int128 *)&v40.value, (uint64_t)&v35, (uint64_t)&v30);
    v13 = vcvtmd_s64_f64(CMTimeGetSeconds(&v30) + 0.0000001);
    if (*((_DWORD *)a3 + 18) - 1 >= v13)
      v14 = v13;
    else
      v14 = *((_DWORD *)a3 + 18) - 1;
    if (*((_DWORD *)a3 + 36))
    {
      v15 = 0;
      v16 = (int)Seconds;
      v17 = vcvtpd_s64_f64(v12);
      v18 = v17 & ~(v17 >> 31);
      do
      {
        v42[0] = v39;
        v41 = v38;
        PC_CMTimeSaferSubtract(v42, &v41, (uint64_t)&v40);
        operator/((__int128 *)&v40.value, (uint64_t)&v35, (uint64_t)&v28);
        v19 = vcvtmd_s64_f64(CMTimeGetSeconds(&v28) + 0.5 + 0.0000001);
        v27 = v39;
        if ((*(unsigned int (**)(OZAverageBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v27, 0, 1, 1))
        {
          v5[v15] = 0;
          v20 = v19 - v16;
          if (v19 - v16 <= v19 + v16)
          {
            v21 = 0.0;
            v22 = (2 * (int)Seconds) | 1;
            do
            {
              if (v20 >= v14)
                v23 = v14;
              else
                v23 = v20;
              if (v20 < v18)
                v23 = v18;
              v21 = v21 + 1.0 / ((double)v16 + (double)v16 + 1.0) * *(double *)&v6[v23];
              *(double *)&v5[v15] = v21;
              ++v20;
              --v22;
            }
            while (v22);
          }
        }
        else
        {
          v24 = *((_DWORD *)a3 + 18);
          if (v19 < v24)
            v24 = v19;
          if (v19 < 0)
            v24 = 0;
          v5[v15] = v6[v24];
        }
        v41 = v39;
        v40 = v37;
        PC_CMTimeSaferAdd(&v41, &v40, (uint64_t)v42);
        v39 = v42[0];
        ++v15;
      }
      while (v15 < *((unsigned int *)a3 + 36));
    }
  }
  else
  {
    v25 = *((unsigned int *)a3 + 36);
    if ((_DWORD)v25)
    {
      do
      {
        v26 = *v6++;
        *v5++ = v26;
        --v25;
      }
      while (v25);
    }
  }
}

void `non-virtual thunk to'OZAverageBehavior::solveNode(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  OZAverageBehavior::solveNode((OZAverageBehavior *)((char *)this - 536), a2, a3);
}

OZCurveNodeParam *OZAverageBehavior::getNeededRange(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  char *v5;
  __n128 FrameDuration;
  int v7;
  Float64 v8;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  __int128 v13;
  uint64_t v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  v5 = (char *)this + 16;
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 2) + 24))((char *)this + 16, 1, 1) & 1) != 0)
  {
    memset(&v16, 0, sizeof(v16));
    FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v16);
    memset(&v15, 0, sizeof(v15));
    v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(*((_QWORD *)this + 2) + 24))(v5, 1, 1, FrameDuration);
    v8 = 0.0;
    if (v7)
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 864), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v16, &v15, v8);
    v13 = 0uLL;
    v14 = 0;
    operator*(2, &v15, &v12);
    operator*(*((_DWORD *)a3 + 36) - 1, (CMTime *)a3 + 5, &v11);
    v18 = v12;
    v17 = v11;
    PC_CMTimeSaferAdd(&v18, &v17, (uint64_t)&v13);
    v18 = *(CMTime *)((_BYTE *)a3 + 4);
    v17 = v15;
    PC_CMTimeSaferSubtract(&v18, &v17, (uint64_t)&v12);
    *((CMTime *)a3 + 1) = v12;
    operator/(&v13, (uint64_t)&v16, (uint64_t)&v10);
    *((_DWORD *)a3 + 18) = vcvtpd_s64_f64(CMTimeGetSeconds(&v10)) + 1;
    *((CMTime *)a3 + 2) = v16;
    *((_QWORD *)a3 + 10) = operator new[]();
    *((_BYTE *)a3 + 88) = 1;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    *(_OWORD *)((char *)a3 + 24) = *((_OWORD *)a3 + 6);
    *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 14);
    *((_OWORD *)a3 + 3) = *(_OWORD *)((char *)a3 + 120);
    *((_QWORD *)a3 + 8) = *((_QWORD *)a3 + 17);
    *((_DWORD *)a3 + 18) = *((_DWORD *)a3 + 36);
    *((_BYTE *)a3 + 88) = 0;
    *((_QWORD *)a3 + 10) = *((_QWORD *)a3 + 19);
  }
  return a3;
}

OZCurveNodeParam *`non-virtual thunk to'OZAverageBehavior::getNeededRange(OZAverageBehavior *this, unsigned int a2, OZCurveNodeParam *a3)
{
  return OZAverageBehavior::getNeededRange((OZAverageBehavior *)((char *)this - 536), a2, a3);
}

void OZBoundsCollisionBehavior::OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZCollisionBehavior::OZCollisionBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C62E8;
  v5[2] = &unk_1E65C65E0;
  v5[6] = &unk_1E65C6838;
  v5[42] = &unk_1E65C6890;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Elasticity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 504), 1.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Channel Wrap");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 656), &v6, (OZChannelFolder *)((char *)this + 56), 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Active Edges"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 808), &v6, (OZChannelFolder *)((char *)this + 56), 0x1F6u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Left Active"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 936), 1, &v6, (OZChannelFolder *)((char *)this + 808), 1u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Right Active"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1088), 1, &v6, (OZChannelFolder *)((char *)this + 808), 2u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Top Active"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1240), 1, &v6, (OZChannelFolder *)((char *)this + 808), 3u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Bottom Active"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1392), 1, &v6, (OZChannelFolder *)((char *)this + 808), 4u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Back Active"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1544), 1, &v6, (OZChannelFolder *)((char *)this + 808), 5u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Front Active"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), 1, &v6, (OZChannelFolder *)((char *)this + 808), 6u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Width"));
  OZChannelDouble::OZChannelDouble((OZBoundsCollisionBehavior *)((char *)this + 1848), 100.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Height"));
  OZChannelDouble::OZChannelDouble((OZBoundsCollisionBehavior *)((char *)this + 2000), 100.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Bounds Collision Behavior Depth"));
  OZChannelDouble::OZChannelDouble((OZBoundsCollisionBehavior *)((char *)this + 2152), 100.0, &v6, (OZChannelFolder *)((char *)this + 56), 0x1F9u, 0, 0, 0);
  PCString::~PCString(&v6);
  *((_BYTE *)this + 2304) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 656), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 656));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 936), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 936));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1088), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1088));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1240), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1240));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1392), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1392));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1544), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1544));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1696), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1696));
  OZChannel::setMin((OZChannel *)((char *)this + 1848), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2000), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 2152), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1848), 1000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2000), 1000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 2152), 1000.0);
}

void sub_1B2F6D990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelPercent *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelBool *a13, PCString a14)
{
  OZCollisionBehavior *v14;
  OZChannelBool *v15;
  OZChannel *v16;
  OZChannelFolder *v17;
  OZChannel *v18;
  OZChannelBool *v19;
  OZChannelBool *v20;
  OZChannelBool *v21;

  PCString::~PCString(&a14);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelBool::~OZChannelBool(v21);
  OZChannelBool::~OZChannelBool(v20);
  OZChannelBool::~OZChannelBool(v19);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelFolder::~OZChannelFolder(v17);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelPercent::~OZChannelPercent(a10);
  OZCollisionBehavior::~OZCollisionBehavior(v14);
  _Unwind_Resume(a1);
}

void OZBoundsCollisionBehavior::OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this, OZBoundsCollisionBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZCollisionBehavior::OZCollisionBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C62E8;
  *(_QWORD *)(v5 + 16) = &unk_1E65C65E0;
  *(_QWORD *)(v5 + 48) = &unk_1E65C6838;
  *(_QWORD *)(v5 + 336) = &unk_1E65C6890;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 656), (const OZChannelBase *)((char *)a2 + 656), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 808), (const OZChannelFolder *)((char *)a2 + 808), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 936), (const OZChannelBase *)((char *)a2 + 936), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1088), (const OZChannelBase *)((char *)a2 + 1088), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1240), (const OZChannelBase *)((char *)a2 + 1240), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1392), (const OZChannelBase *)((char *)a2 + 1392), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1544), (const OZChannelBase *)((char *)a2 + 1544), (OZChannelFolder *)((char *)this + 808));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), (const OZChannelBase *)((char *)a2 + 1696), (OZChannelFolder *)((char *)this + 808));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1848), (const OZChannelBase *)((char *)a2 + 1848), v6);
  *((_QWORD *)this + 231) = &off_1E6551358;
  *((_QWORD *)this + 233) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2000), (const OZChannelBase *)((char *)a2 + 2000), v6);
  *((_QWORD *)this + 250) = &off_1E6551358;
  *((_QWORD *)this + 252) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2152), (const OZChannelBase *)((char *)a2 + 2152), v6);
  *((_QWORD *)this + 269) = &off_1E6551358;
  *((_QWORD *)this + 271) = &unk_1E65516B8;
  *((_BYTE *)this + 2304) = *((_BYTE *)a2 + 2304);
}

void sub_1B2F6DCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelBool *a13, OZChannelBool *a14, OZChannelBool *a15, OZChannelPercent *a16)
{
  OZCollisionBehavior *v16;
  OZChannelBool *v17;
  OZChannelFolder *v18;
  OZChannel *v19;
  OZChannel *v20;

  OZChannel::~OZChannel(v20);
  OZChannel::~OZChannel(v19);
  OZChannelBool::~OZChannelBool(v17);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelFolder::~OZChannelFolder(v18);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZCollisionBehavior::~OZCollisionBehavior(v16);
  _Unwind_Resume(a1);
}

void sub_1B2F6DD64()
{
  JUMPOUT(0x1B2F6DD24);
}

void sub_1B2F6DD6C()
{
  JUMPOUT(0x1B2F6DD2CLL);
}

void sub_1B2F6DD74()
{
  JUMPOUT(0x1B2F6DD34);
}

void sub_1B2F6DD7C()
{
  JUMPOUT(0x1B2F6DD3CLL);
}

void sub_1B2F6DD84()
{
  JUMPOUT(0x1B2F6DD44);
}

void sub_1B2F6DD8C()
{
  JUMPOUT(0x1B2F6DD4CLL);
}

void sub_1B2F6DD94()
{
  JUMPOUT(0x1B2F6DD54);
}

void OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this)
{
  *(_QWORD *)this = &off_1E65C62E8;
  *((_QWORD *)this + 2) = &unk_1E65C65E0;
  *((_QWORD *)this + 6) = &unk_1E65C6838;
  *((_QWORD *)this + 42) = &unk_1E65C6890;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2152));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1848));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1696));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1544));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1392));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1240));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1088));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 936));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 808));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 656));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 504));
  OZCollisionBehavior::~OZCollisionBehavior(this);
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior(OZBoundsCollisionBehavior *this)
{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 16));
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 48));
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 336));
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZBoundsCollisionBehavior::~OZBoundsCollisionBehavior((OZBoundsCollisionBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZBoundsCollisionBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZCollisionBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 656, (uint64_t)v5 + 656);
  OZChannelFolder::operator=(a1 + 808);
  OZChannelBase::operator=(a1 + 936, (uint64_t)v5 + 936);
  OZChannelBase::operator=(a1 + 1088, (uint64_t)v5 + 1088);
  OZChannelBase::operator=(a1 + 1240, (uint64_t)v5 + 1240);
  OZChannelBase::operator=(a1 + 1392, (uint64_t)v5 + 1392);
  OZChannelBase::operator=(a1 + 1544, (uint64_t)v5 + 1544);
  OZChannelBase::operator=(a1 + 1696, (uint64_t)v5 + 1696);
  OZChannelBase::operator=(a1 + 1848, (uint64_t)v5 + 1848);
  OZChannelBase::operator=(a1 + 2000, (uint64_t)v5 + 2000);
  return OZChannelBase::operator=(a1 + 2152, (uint64_t)v5 + 2152);
}

void OZBoundsCollisionBehavior::didAddToNode(OZBoundsCollisionBehavior *this, OZSceneNode **a2)
{
  OZScene *v4;

  OZReflexiveBehavior::didAddToNode(this, a2);
  v4 = (OZScene *)(*((uint64_t (**)(OZSceneNode **))*a2 + 34))(a2);
  if (v4)
    OZBoundsCollisionBehavior::copySceneDimensionsToChans(this, v4);
}

void OZBoundsCollisionBehavior::copySceneDimensionsToChans(OZBoundsCollisionBehavior *this, OZScene *a2)
{
  OZChannelBase *v4;

  if (!*((_BYTE *)this + 2304))
  {
    v4 = (OZChannelBase *)((char *)this + 1848);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 1848), (double)*((int *)a2 + 86));
    OZChannelBase::reset(v4, 0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 2000), (double)*((int *)a2 + 87));
    OZChannelBase::reset((OZChannelBase *)((char *)this + 2000), 0);
    *((_BYTE *)this + 2304) = 1;
  }
}

uint64_t OZBoundsCollisionBehavior::parseEnd(OZBoundsCollisionBehavior *this, PCSerializerReadStream *a2)
{
  unsigned int v4;
  OZScene *v5;

  v4 = *((_DWORD *)a2 + 26);
  *((_BYTE *)this + 2304) = 1;
  if (v4 <= 2 && (*(uint64_t (**)(OZBoundsCollisionBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v5 = (OZScene *)(*(uint64_t (**)(OZBoundsCollisionBehavior *))(*(_QWORD *)this + 336))(this);
    OZBoundsCollisionBehavior::copySceneDimensionsToChans(this, v5);
  }
  return OZReflexiveBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZBoundsCollisionBehavior::parseEnd(OZBoundsCollisionBehavior *this, PCSerializerReadStream *a2)
{
  return OZBoundsCollisionBehavior::parseEnd((OZBoundsCollisionBehavior *)((char *)this - 48), a2);
}

void OZBoundsCollisionBehavior::handleCollisions(OZBoundsCollisionBehavior *this, OZTransformNode *lpsrc, OZSimulationState *a3, OZSimulationState *a4, BOOL a5, BOOL *a6)
{
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  double v15;
  int ValueAsInt;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  BOOL *v41;
  double v42;
  double v43;
  int v44;
  int v45;
  int v47;
  CMTime v48;
  __int128 v49;
  _OWORD v50[3];
  _OWORD v51[3];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!lpsrc)
    goto LABEL_11;
  if (!v9 || !(*(unsigned int (**)(OZTransformNode *))(*(_QWORD *)lpsrc + 1008))(lpsrc))
    goto LABEL_12;
  v10 = *((_QWORD *)lpsrc + 1);
  v49 = xmmword_1B30541C0;
  if (!OZFactory::isKindOfClass(v10, (int32x4_t *)&v49))
  {
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v11 = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)lpsrc + 1016))(lpsrc);
  if (v11)
  {
    *(_QWORD *)&v50[0] = v50;
    *((_QWORD *)&v50[0] + 1) = v50;
    *(_QWORD *)&v50[1] = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 48))(v11, v50);
    v12 = *((_QWORD *)&v50[0] + 1);
    if (*((_OWORD **)&v50[0] + 1) != v50)
    {
      while (1)
      {
        v13 = *(_QWORD **)(v12 + 16);
        if (((*(uint64_t (**)(_QWORD *))(v13[2] + 48))(v13 + 2) & 1) == 0
        {
          break;
        }
        v12 = *(_QWORD *)(v12 + 8);
        if ((_OWORD *)v12 == v50)
          goto LABEL_73;
      }
      v9 = 0;
    }
LABEL_73:
    std::__list_imp<unsigned int>::clear(v50);
  }
LABEL_12:
  v48 = *(CMTime *)((char *)a4 + 176);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), &v48, 0.0);
  v15 = v14;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 936), &v48, 0.0);
  v17 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1088), &v48, 0.0);
  v47 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1240), &v48, 0.0);
  v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1392), &v48, 0.0);
  v45 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1544), &v48, 0.0);
  v44 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1696), &v48, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1848), &v48, 0.0);
  v20 = v19;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2000), &v48, 0.0);
  v22 = v21;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2152), &v48, 0.0);
  if (ValueAsInt == 0 && v17 == 0 && v47 == 0 && v18 == 0)
    return;
  v24 = v20 * -0.5;
  v25 = -(v20 * -0.5);
  v26 = v22 * 0.5;
  v27 = -(v22 * 0.5);
  v28 = v23 * 0.5;
  v29 = -(v23 * 0.5);
  if (!v9)
  {
    if (ValueAsInt && *(double *)a4 < v24)
    {
      *(double *)a4 = v24;
      *((double *)a4 + 7) = -(v15 * *((double *)a4 + 7));
    }
    v41 = a6;
    if (v18 && *((double *)a4 + 1) < v27)
    {
      *((double *)a4 + 1) = v27;
      *((double *)a4 + 8) = -(v15 * *((double *)a4 + 8));
    }
    if (v45 && *((double *)a4 + 2) < v29)
    {
      *((double *)a4 + 2) = v29;
      *((double *)a4 + 9) = -(v15 * *((double *)a4 + 9));
    }
    if (v17 && *(double *)a4 > v25)
    {
      *(double *)a4 = v25;
      *((double *)a4 + 7) = -(v15 * *((double *)a4 + 7));
    }
    if (v47 && *((double *)a4 + 1) > v26)
    {
      *((double *)a4 + 1) = v26;
      *((double *)a4 + 8) = -(v15 * *((double *)a4 + 8));
    }
    if (!v44 || *((double *)a4 + 2) <= v28)
      goto LABEL_70;
    *((double *)a4 + 2) = v28;
    goto LABEL_69;
  }
  memset(v51, 0, sizeof(v51));
  memset(v50, 0, sizeof(v50));
  OZSimulationState::getTransformedCorners((uint64_t)a4, (uint64_t)v9, (uint64_t)v50, (uint64_t)&v50[1] + 8, (uint64_t)v51, (uint64_t)&v51[1] + 8);
  v30 = 0;
  v31 = 3.40282347e38;
  v32 = -3.40282347e38;
  v33 = -3.40282347e38;
  v34 = 3.40282347e38;
  v35 = -3.40282347e38;
  v36 = 3.40282347e38;
  do
  {
    v38 = *(double *)((char *)v50 + v30);
    v39 = *(double *)((char *)v50 + v30 + 8);
    if (v36 > v38)
      v36 = *(double *)((char *)v50 + v30);
    if (v34 > v39)
      v34 = *(double *)((char *)v50 + v30 + 8);
    v37 = (double *)((char *)v50 + v30);
    v40 = *(double *)((char *)&v50[1] + v30);
    if (v31 > v40)
      v31 = v37[2];
    if (v35 < v38)
      v35 = *(double *)((char *)v50 + v30);
    if (v33 < v39)
      v33 = *(double *)((char *)v50 + v30 + 8);
    if (v32 < v40)
      v32 = v37[2];
    v30 += 24;
  }
  while (v30 != 96);
  v41 = a6;
  if (v35 - v36 < v25 - v24)
  {
    if (ValueAsInt && v36 < v24)
    {
      v42 = v24 - v36 + *(double *)a4;
    }
    else
    {
      if (!v17 || v35 <= v25)
        goto LABEL_54;
      v42 = v25 - v35 + *(double *)a4;
    }
    *(double *)a4 = v42;
    *((double *)a4 + 7) = -(v15 * *((double *)a4 + 7));
  }
LABEL_54:
  if (v33 - v34 < v26 + v26)
  {
    if (v18 && v34 < v27)
    {
      *((double *)a4 + 1) = v27 - v34 + *((double *)a4 + 1);
      *((double *)a4 + 8) = -(v15 * *((double *)a4 + 8));
    }
    if (v47 && v33 > v26)
    {
      *((double *)a4 + 1) = v26 - v33 + *((double *)a4 + 1);
      *((double *)a4 + 8) = -(v15 * *((double *)a4 + 8));
    }
  }
  if (v32 - v31 >= v28 + v28)
    goto LABEL_70;
  if (v45 && v31 < v29)
  {
    v43 = v29 - v31 + *((double *)a4 + 2);
  }
  else
  {
    if (!v44 || v32 <= v28)
      goto LABEL_70;
    v43 = v28 - v32 + *((double *)a4 + 2);
  }
  *((double *)a4 + 2) = v43;
LABEL_69:
  *((double *)a4 + 9) = -(v15 * *((double *)a4 + 9));
LABEL_70:
  *v41 = 0;
}

void sub_1B2F6E65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZBrownianBehavior::OZBrownianBehavior(OZBrownianBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *v6;
  OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *Instance;
  OZChannelInfo *v8;
  OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *v9;
  OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *v10;
  OZChannelInfo *v11;
  OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *v12;
  OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *v13;
  OZChannelInfo *v14;
  OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *v15;
  OZChannelInfo *v16;
  unsigned int v17;
  PCString v18;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3, a4);
  *v5 = &off_1E65C68D0;
  v5[2] = &unk_1E65C6BB8;
  v5[6] = &unk_1E65C6E10;
  v5[42] = &unk_1E65C6E68;
  PCURL::PCURL((PCURL *)&v18, CFSTR("Brownian Behavior Magnitude"));
  Instance = (OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *)OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(v6);
  v8 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 504), 15.0, &v18, (OZChannelFolder *)((char *)this + 56), 0x190u, 0, (OZChannelImpl *)Instance, v8);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Wriggle Behavior Frequency"));
  v10 = (OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *)OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(v9);
  v11 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(v10);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 656), 1.0, &v18, (OZChannelFolder *)((char *)this + 56), 0x194u, 0, (OZChannelImpl *)v10, v11);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Wriggle Behavior Noisiness"));
  v13 = (OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *)OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(v12);
  v14 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(v13);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 808), 0.5, &v18, (OZChannelFolder *)((char *)this + 56), 0x195u, 0, (OZChannelImpl *)v13, v14);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Brownian Behavior Drag"));
  v16 = (OZChannelInfo *)OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(v15);
  OZChannelDouble::OZChannelDouble((OZBrownianBehavior *)((char *)this + 960), &v18, (OZChannelFolder *)((char *)this + 56), 0x191u, 0, 0, v16);
  PCString::~PCString(&v18);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Brownian Behavior Active Axes"));
  OZChannelBool3D::OZChannelBool3D((OZBrownianBehavior *)((char *)this + 1112), 1, 1, 0, &v18, (OZChannelFolder *)((char *)this + 56), 0x196u, 0, 3u);
  PCString::~PCString(&v18);
  v17 = *((_DWORD *)this + 20);
  PCURL::PCURL((PCURL *)&v18, CFSTR("Brownian Behavior Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 1704), v17, &v18, (OZChannelFolder *)((char *)this + 56), 0x193u, 0, 0, 0);
  PCString::~PCString(&v18);
}

void sub_1B2F6E8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZReflexiveBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannelBool3D *v15;

  PCString::~PCString(&a10);
  OZChannelBool3D::~OZChannelBool3D(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  OZReflexiveBehavior::~OZReflexiveBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2F6E9A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2F6E990);
}

void OZBrownianBehavior::OZBrownianBehavior(OZBrownianBehavior *this, OZBrownianBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZReflexiveBehavior::OZReflexiveBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E65C68D0;
  *(_QWORD *)(v5 + 16) = &unk_1E65C6BB8;
  *(_QWORD *)(v5 + 48) = &unk_1E65C6E10;
  *(_QWORD *)(v5 + 336) = &unk_1E65C6E68;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 504), (const OZChannelBase *)((char *)a2 + 504), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 63) = &off_1E6551358;
  *((_QWORD *)this + 65) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 656), (const OZChannelBase *)((char *)a2 + 656), v6);
  *((_QWORD *)this + 82) = &off_1E6551358;
  *((_QWORD *)this + 84) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 808), (const OZChannelBase *)((char *)a2 + 808), v6);
  *((_QWORD *)this + 101) = &off_1E6551358;
  *((_QWORD *)this + 103) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 960), (const OZChannelBase *)((char *)a2 + 960), v6);
  *((_QWORD *)this + 120) = &off_1E6551358;
  *((_QWORD *)this + 122) = &unk_1E65516B8;
  OZChannelBool3D::OZChannelBool3D((OZBrownianBehavior *)((char *)this + 1112), (OZBrownianBehavior *)((char *)a2 + 1112), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1704), (const OZChannelBase *)((char *)a2 + 1704), v6);
  *((_QWORD *)this + 213) = &off_1E65531D8;
  *((_QWORD *)this + 215) = &unk_1E6553538;
}

void sub_1B2F6EAE8(_Unwind_Exception *a1)
{
  OZReflexiveBehavior *v1;
  OZChannel *v2;
  OZChannel *v3;
  OZChannel *v4;
  OZChannel *v5;
  OZChannelBool3D *v6;

  OZChannelBool3D::~OZChannelBool3D(v6);
  OZChannel::~OZChannel(v5);
  OZChannel::~OZChannel(v4);
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  OZReflexiveBehavior::~OZReflexiveBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B2F6EB44()
{
  JUMPOUT(0x1B2F6EB34);
}

void OZBrownianBehavior::~OZBrownianBehavior(OZBrownianBehavior *this)
{
  *(_QWORD *)this = &off_1E65C68D0;
  *((_QWORD *)this + 2) = &unk_1E65C6BB8;
  *((_QWORD *)this + 6) = &unk_1E65C6E10;
  *((_QWORD *)this + 42) = &unk_1E65C6E68;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1704));
  OZChannelBool3D::~OZChannelBool3D((OZBrownianBehavior *)((char *)this + 1112));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 808));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 656));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 504));
  OZReflexiveBehavior::~OZReflexiveBehavior(this);
}

{
  OZBrownianBehavior::~OZBrownianBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZBrownianBehavior::~OZBrownianBehavior(OZBrownianBehavior *this)
{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 16));
}

{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 48));
}

{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 336));
}

{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZBrownianBehavior::~OZBrownianBehavior((OZBrownianBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZBrownianBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZReflexiveBehavior::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 504, (uint64_t)v4 + 504);
  OZChannelBase::operator=(a1 + 656, (uint64_t)v5 + 656);
  OZChannelBase::operator=(a1 + 808, (uint64_t)v5 + 808);
  OZChannelBase::operator=(a1 + 960, (uint64_t)v5 + 960);
  OZChannelFolder::operator=(a1 + 1112);
  OZChannelBase::operator=(a1 + 1248, (uint64_t)v5 + 1248);
  OZChannelBase::operator=(a1 + 1400, (uint64_t)v5 + 1400);
  OZChannelBase::operator=(a1 + 1552, (uint64_t)v5 + 1552);
  return OZChannelBase::operator=(a1 + 1704, (uint64_t)v5 + 1704);
}

uint64_t OZBrownianBehavior::accumForces(OZBrownianBehavior *this, OZSimulationState *a2, OZTransformNode *a3)
{
  uint64_t result;
  double v7;
  uint64_t v8;
  __n128 v9;
  int ValueAsInt;
  int v11;
  Float64 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  double v21;
  double v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  double v33;
  double v34;
  __int128 v35;
  __n128 v36;
  unsigned int v37;
  double v38;
  double v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  long double v51;
  __int128 v52;
  unsigned int v53;
  int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  double v66;
  double v67;
  long double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float64x2_t v73;
  double v74;
  __int128 v75;
  __n128 v76;
  double v77;
  double v78;
  float64x2_t v79;
  CMTime time;
  __n128 v81;
  CMTimeEpoch v82;
  CMTime v83;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  CMTime v87;

  v85 = *(CMTime *)((char *)a2 + 176);
  v84 = v85;
  result = (*(uint64_t (**)(OZBrownianBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v84, 0, 1, 1);
  if ((_DWORD)result)
  {
    memset(&v83, 0, sizeof(v83));
    OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v81);
    v87 = v85;
    *(__n128 *)&v86.value = v81;
    v86.epoch = v82;
    v7 = PC_CMTimeSaferAdd(&v87, &v86, (uint64_t)&v83);
    v8 = (*(uint64_t (**)(OZBrownianBehavior *, double))(*(_QWORD *)this + 320))(this, v7);
    v9 = ((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)v8 + 272))(v8);
    v9.n128_u64[0] = 0;
    v76 = v9;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1704), &v85, 0.0);
    v11 = ValueAsInt;
    if (a3)
      v11 = *((_DWORD *)a3 + 20) ^ ValueAsInt;
    time = v83;
    v12 = CMTimeGetSeconds(&time) + 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 656), &v85, 0.0);
    v14 = v13;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 808), &v85, 0.0);
    v16 = v15;
    v17 = 0;
    v77 = v12 + v12;
    v18 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
    v19 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
    v20 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
    v21 = 1.0;
    v22 = v14;
    do
    {
      v23 = (int)(v77 * v22);
      v24 = -32;
      v25 = -1640531527;
      v26 = v17;
      v27 = v11;
      do
      {
        v26 += (v23 + 16 * v27) ^ (v27 + v25) ^ (v18 + (v27 >> 5));
        v27 += (v19 + 16 * v26) ^ (v25 + v26) ^ (v20 + (v26 >> 5));
        v25 -= 1640531527;
        v28 = __CFADD__(v24++, 1);
      }
      while (!v28);
      v29 = -32;
      v30 = -1640531527;
      v31 = v17;
      v32 = v11;
      do
      {
        v31 += (v23 + 1 + 16 * v32) ^ (v32 + v30) ^ (v18 + (v32 >> 5));
        v32 += (v19 + 16 * v31) ^ (v30 + v31) ^ (v20 + (v31 >> 5));
        v30 -= 1640531527;
        v28 = __CFADD__(v29++, 1);
      }
      while (!v28);
      v33 = (double)(int)(v27 ^ v26) / 2147483650.0;
      v34 = (double)(int)(v32 ^ v31) / 2147483650.0;
      *(double *)&v35 = cos((v77 * v22 - (double)v23) * 3.14159265);
      v36.n128_u64[1] = v76.n128_u64[1];
      v36.n128_f64[0] = v76.n128_f64[0]
                      + v21 * ((1.0 - (1.0 - *(double *)&v35) * 0.5) * v33 + (1.0 - *(double *)&v35) * 0.5 * v34);
      v76 = v36;
      v22 = v22 + v22;
      v21 = v16 * v21;
      ++v17;
    }
    while (v17 != 10);
    v37 = 0;
    *(_QWORD *)&v35 = 0;
    v75 = v35;
    v38 = v14;
    v39 = 1.0;
    do
    {
      v40 = (int)(v77 * v38);
      v41 = -32;
      v42 = -1640531527;
      v43 = v37;
      v44 = ~v11;
      do
      {
        v43 += (v40 + 16 * v44) ^ (v44 + v42) ^ (v18 + (v44 >> 5));
        v44 += (v19 + 16 * v43) ^ (v42 + v43) ^ (v20 + (v43 >> 5));
        v42 -= 1640531527;
        v28 = __CFADD__(v41++, 1);
      }
      while (!v28);
      v45 = -32;
      v46 = -1640531527;
      v47 = v37;
      v48 = ~v11;
      do
      {
        v47 += (v40 + 1 + 16 * v48) ^ (v48 + v46) ^ (v18 + (v48 >> 5));
        v48 += (v19 + 16 * v47) ^ (v46 + v47) ^ (v20 + (v47 >> 5));
        v46 -= 1640531527;
        v28 = __CFADD__(v45++, 1);
      }
      while (!v28);
      v49 = (double)(int)(v44 ^ v43) / 2147483650.0;
      v50 = (double)(int)(v48 ^ v47) / 2147483650.0;
      v51 = cos((v77 * v38 - (double)v40) * 3.14159265);
      *((_QWORD *)&v52 + 1) = *((_QWORD *)&v75 + 1);
      *(double *)&v52 = *(double *)&v75 + v39 * ((1.0 - (1.0 - v51) * 0.5) * v49 + (1.0 - v51) * 0.5 * v50);
      v75 = v52;
      v38 = v38 + v38;
      v39 = v16 * v39;
      ++v37;
    }
    while (v37 != 10);
    v53 = 0;
    v54 = v11 + 511;
    v55 = 0.0;
    v56 = 1.0;
    do
    {
      v57 = (int)(v77 * v14);
      v58 = -32;
      v59 = -1640531527;
      v60 = v53;
      v61 = v54;
      do
      {
        v60 += (v57 + 16 * v61) ^ (v59 + v61) ^ (v18 + (v61 >> 5));
        v61 += (v19 + 16 * v60) ^ (v59 + v60) ^ (v20 + (v60 >> 5));
        v59 -= 1640531527;
        v28 = __CFADD__(v58++, 1);
      }
      while (!v28);
      v62 = -32;
      v63 = -1640531527;
      v64 = v53;
      v65 = v54;
      do
      {
        v64 += (v57 + 1 + 16 * v65) ^ (v63 + v65) ^ (v18 + (v65 >> 5));
        v65 += (v19 + 16 * v64) ^ (v63 + v64) ^ (v20 + (v64 >> 5));
        v63 -= 1640531527;
        v28 = __CFADD__(v62++, 1);
      }
      while (!v28);
      v66 = (double)(int)(v61 ^ v60) / 2147483650.0;
      v67 = (double)(int)(v65 ^ v64) / 2147483650.0;
      v68 = cos((v77 * v14 - (double)v57) * 3.14159265);
      v55 = v55 + v56 * ((1.0 - (1.0 - v68) * 0.5) * v66 + (1.0 - v68) * 0.5 * v67);
      v14 = v14 + v14;
      v56 = v16 * v56;
      ++v53;
    }
    while (v53 != 10);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 504), &v85, 0.0);
    v78 = v69;
    v70 = v55 * v69;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 960), &v85, 0.0);
    v72 = v70 - v71 * *((double *)a2 + 9);
    memset(&v87, 0, sizeof(v87));
    *(_QWORD *)&v73.f64[0] = v76.n128_u64[0];
    *(_QWORD *)&v73.f64[1] = v75;
    v79 = vsubq_f64(vmulq_n_f64(v73, v78), vmulq_n_f64(*(float64x2_t *)((char *)a2 + 56), v71));
    result = OZChannelBool3D::getValue((uint64_t)this + 1112, &v85, (double *)&v87.value, 0.0);
    v74 = v72 * *(double *)&v87.epoch;
    *((float64x2_t *)a2 + 8) = vaddq_f64(vmulq_f64(v79, *(float64x2_t *)&v87.value), *((float64x2_t *)a2 + 8));
    *((double *)a2 + 18) = v74 + *((double *)a2 + 18);
  }
  return result;
}

void OZBrownianBehavior::accumForces(OZBrownianBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  double v5;
  uint64_t v6;
  double Seconds;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  OZChannel *v12;
  __n128 v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  double v32;
  double v33;
  __int128 v34;
  __n128 v35;
  unsigned int v36;
  double v37;
  double v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  long double v50;
  __int128 v51;
  unsigned int v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  double v65;
  double v66;
  long double v67;
  double v68;
  double v69;
  float64x2_t v70;
  double v71;
  double v72;
  int ValueAsInt;
  __int128 v74;
  __n128 v75;
  double v76;
  double v77;
  CMTime time;
  __n128 v79;
  CMTimeEpoch v80;
  CMTime v81;
  CMTime v82;
  CMTime v83;
  CMTime v84;
  CMTime v85;

  v83 = *(CMTime *)((_BYTE *)a2 + 1);
  v82 = v83;
  if ((*(unsigned int (**)(OZBrownianBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 296))(this, &v82, 1, 1, 1))
  {
    memset(&v81, 0, sizeof(v81));
    OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v79);
    v85 = v83;
    *(__n128 *)&v84.value = v79;
    v84.epoch = v80;
    v5 = PC_CMTimeSaferAdd(&v85, &v84, (uint64_t)&v81);
    v6 = (*(uint64_t (**)(OZBrownianBehavior *, double))(*(_QWORD *)this + 320))(this, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1704), &v83, 0.0);
    time = v81;
    Seconds = CMTimeGetSeconds(&time);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 656), &v83, 0.0);
    v72 = v8;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 808), &v83, 0.0);
    v77 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 960), &v83, 0.0);
    v71 = v10;
    memset(&v85, 0, sizeof(v85));
    OZChannelBool3D::getValue((uint64_t)this + 1112, &v83, (double *)&v85.value, 0.0);
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
    {
      v76 = Seconds + 0.0 + Seconds + 0.0;
      v12 = (OZChannel *)((char *)this + 504);
      do
      {
        v13 = ((__n128 (*)(_QWORD))*(_QWORD *)(**(_QWORD **)(v11 + 232) + 32))(*(_QWORD *)(v11 + 232));
        v14 = 0;
        v16 = v15 ^ ValueAsInt;
        v17 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
        v18 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
        v19 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
        v13.n128_u64[0] = 0;
        v75 = v13;
        v20 = 1.0;
        v21 = v72;
        do
        {
          v22 = (int)(v76 * v21);
          v23 = -32;
          v24 = -1640531527;
          v25 = v14;
          v26 = v16;
          do
          {
            v25 += (v22 + 16 * v26) ^ (v26 + v24) ^ (v17 + (v26 >> 5));
            v26 += (v18 + 16 * v25) ^ (v24 + v25) ^ (v19 + (v25 >> 5));
            v24 -= 1640531527;
            v27 = __CFADD__(v23++, 1);
          }
          while (!v27);
          v28 = -32;
          v29 = -1640531527;
          v30 = v14;
          v31 = v16;
          do
          {
            v30 += (v22 + 1 + 16 * v31) ^ (v31 + v29) ^ (v17 + (v31 >> 5));
            v31 += (v18 + 16 * v30) ^ (v29 + v30) ^ (v19 + (v30 >> 5));
            v29 -= 1640531527;
            v27 = __CFADD__(v28++, 1);
          }
          while (!v27);
          v32 = (double)(int)(v26 ^ v25) / 2147483650.0;
          v33 = (double)(int)(v31 ^ v30) / 2147483650.0;
          *(double *)&v34 = cos((v76 * v21 - (double)v22) * 3.14159265);
          v35.n128_u64[1] = v75.n128_u64[1];
          v35.n128_f64[0] = v75.n128_f64[0]
                          + v20 * ((1.0 - (1.0 - *(double *)&v34) * 0.5) * v32 + (1.0 - *(double *)&v34) * 0.5 * v33);
          v75 = v35;
          v21 = v21 + v21;
          v20 = v77 * v20;
          ++v14;
        }
        while (v14 != 10);
        v36 = 0;
        *(_QWORD *)&v34 = 0;
        v74 = v34;
        v37 = 1.0;
        v38 = v72;
        do
        {
          v39 = (int)(v76 * v38);
          v40 = -32;
          v41 = -1640531527;
          v42 = v36;
          v43 = ~v16;
          do
          {
            v42 += (v39 + 16 * v43) ^ (v43 + v41) ^ (v17 + (v43 >> 5));
            v43 += (v18 + 16 * v42) ^ (v41 + v42) ^ (v19 + (v42 >> 5));
            v41 -= 1640531527;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
          v44 = -32;
          v45 = -1640531527;
          v46 = v36;
          v47 = ~v16;
          do
          {
            v46 += (v39 + 1 + 16 * v47) ^ (v47 + v45) ^ (v17 + (v47 >> 5));
            v47 += (v18 + 16 * v46) ^ (v45 + v46) ^ (v19 + (v46 >> 5));
            v45 -= 1640531527;
            v27 = __CFADD__(v44++, 1);
          }
          while (!v27);
          v48 = (double)(int)(v43 ^ v42) / 2147483650.0;
          v49 = (double)(int)(v47 ^ v46) / 2147483650.0;
          v50 = cos((v76 * v38 - (double)v39) * 3.14159265);
          *((_QWORD *)&v51 + 1) = *((_QWORD *)&v74 + 1);
          *(double *)&v51 = *(double *)&v74 + v37 * ((1.0 - (1.0 - v50) * 0.5) * v48 + (1.0 - v50) * 0.5 * v49);
          v74 = v51;
          v38 = v38 + v38;
          v37 = v77 * v37;
          ++v36;
        }
        while (v36 != 10);
        v52 = 0;
        v53 = 0.0;
        v54 = 1.0;
        v55 = v72;
        do
        {
          v56 = (int)(v76 * v55);
          v57 = -32;
          v58 = -1640531527;
          v59 = v52;
          v60 = v16 + 511;
          do
          {
            v59 += (v56 + 16 * v60) ^ (v58 + v60) ^ (v17 + (v60 >> 5));
            v60 += (v18 + 16 * v59) ^ (v58 + v59) ^ (v19 + (v59 >> 5));
            v58 -= 1640531527;
            v27 = __CFADD__(v57++, 1);
          }
          while (!v27);
          v61 = -32;
          v62 = -1640531527;
          v63 = v52;
          v64 = v16 + 511;
          do
          {
            v63 += (v56 + 1 + 16 * v64) ^ (v62 + v64) ^ (v17 + (v64 >> 5));
            v64 += (v18 + 16 * v63) ^ (v62 + v63) ^ (v19 + (v63 >> 5));
            v62 -= 1640531527;
            v27 = __CFADD__(v61++, 1);
          }
          while (!v27);
          v65 = (double)(int)(v60 ^ v59) / 2147483650.0;
          v66 = (double)(int)(v64 ^ v63) / 2147483650.0;
          v67 = cos((v76 * v55 - (double)v56) * 3.14159265);
          v53 = v53 + v54 * ((1.0 - (1.0 - v67) * 0.5) * v65 + (1.0 - v67) * 0.5 * v66);
          v55 = v55 + v55;
          v54 = v77 * v54;
          ++v52;
        }
        while (v52 != 10);
        OZChannel::getValueAsDouble(v12, &v83, 0.0);
        v69 = (v53 * v68 - v71 * *(double *)(v11 + 72)) * *(double *)&v85.epoch;
        *(_QWORD *)&v70.f64[0] = v75.n128_u64[0];
        *(_QWORD *)&v70.f64[1] = v74;
        *(float64x2_t *)(v11 + 128) = vaddq_f64(vmulq_f64(vsubq_f64(vmulq_n_f64(v70, v68), vmulq_n_f64(*(float64x2_t *)(v11 + 56), v71)), *(float64x2_t *)&v85.value), *(float64x2_t *)(v11 + 128));
        *(double *)(v11 + 144) = v69 + *(double *)(v11 + 144);
        v11 += 248;
      }
      while (v11 != *((_QWORD *)a2 + 1));
    }
  }
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::OZBrownianBehavior_magnitudeChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::OZBrownianBehavior_magnitudeChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::_OZBrownianBehavior_magnitudeChan;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *v0;

  if (!OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::_OZBrownianBehavior_magnitudeChan)
  {
    v0 = (OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *)operator new();
    OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::OZBrownianBehavior_magnitudeChanImpl(v0);
    OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::_OZBrownianBehavior_magnitudeChan = (uint64_t)v0;
  }
}

void sub_1B2F6F998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl::OZBrownianBehavior_magnitudeChanImpl(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 15.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 15.0, 1, 1);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_magnitudeChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65C6EA8;
  *((_QWORD *)this + 5) = &unk_1E65C6EC8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F6FA4C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::OZBrownianBehavior_magnitudeChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::OZBrownianBehavior_magnitudeChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::_OZBrownianBehavior_magnitudeChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *v0;

  if (!OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::_OZBrownianBehavior_magnitudeChanInfo)
  {
    v0 = (OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *)operator new();
    OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::OZBrownianBehavior_magnitudeChanInfo(v0);
    OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::_OZBrownianBehavior_magnitudeChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F6FB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo::OZBrownianBehavior_magnitudeChanInfo(OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 50.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_magnitudeChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65C6F20;
  *((_QWORD *)this + 10) = &unk_1E65C6F40;
  return this;
}

void sub_1B2F6FBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::OZBrownianBehavior_frequencyChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::OZBrownianBehavior_frequencyChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::_OZBrownianBehavior_frequencyChan;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *v0;

  if (!OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::_OZBrownianBehavior_frequencyChan)
  {
    v0 = (OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *)operator new();
    OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::OZBrownianBehavior_frequencyChanImpl(v0);
    OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::_OZBrownianBehavior_frequencyChan = (uint64_t)v0;
  }
}

void sub_1B2F6FC94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl::OZBrownianBehavior_frequencyChanImpl(OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_frequencyChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65C6F98;
  *((_QWORD *)this + 5) = &unk_1E65C6FB8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.01);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2F6FD48(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::OZBrownianBehavior_frequencyChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::OZBrownianBehavior_frequencyChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::_OZBrownianBehavior_frequencyChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *v0;

  if (!OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::_OZBrownianBehavior_frequencyChanInfo)
  {
    v0 = (OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *)operator new();
    OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::OZBrownianBehavior_frequencyChanInfo(v0);
    OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::_OZBrownianBehavior_frequencyChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F6FE14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo::OZBrownianBehavior_frequencyChanInfo(OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 2.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_frequencyChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65C7010;
  *((_QWORD *)this + 10) = &unk_1E65C7030;
  return this;
}

void sub_1B2F6FEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::OZBrownianBehavior_amplitudeStepChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::OZBrownianBehavior_amplitudeStepChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::_OZBrownianBehavior_amplitudeStepChan;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *v0;

  if (!OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::_OZBrownianBehavior_amplitudeStepChan)
  {
    v0 = (OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *)operator new();
    OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::OZBrownianBehavior_amplitudeStepChanImpl(v0);
    OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::_OZBrownianBehavior_amplitudeStepChan = (uint64_t)v0;
  }
}

void sub_1B2F6FF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl::OZBrownianBehavior_amplitudeStepChanImpl(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.5);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.5, 1, 1);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65C7088;
  *((_QWORD *)this + 5) = &unk_1E65C70A8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2F70038(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::OZBrownianBehavior_amplitudeStepChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::OZBrownianBehavior_amplitudeStepChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::_OZBrownianBehavior_amplitudeStepChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *v0;

  if (!OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::_OZBrownianBehavior_amplitudeStepChanInfo)
  {
    v0 = (OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *)operator new();
    OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::OZBrownianBehavior_amplitudeStepChanInfo(v0);
    OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::_OZBrownianBehavior_amplitudeStepChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F70104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo::OZBrownianBehavior_amplitudeStepChanInfo(OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_amplitudeStepChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65C7100;
  *((_QWORD *)this + 10) = &unk_1E65C7120;
  return this;
}

void sub_1B2F701B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::OZBrownianBehavior_dragChanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::OZBrownianBehavior_dragChanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::_OZBrownianBehavior_dragChanInfo;
}

void std::__call_once_param<std::tuple<OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *v0;

  if (!OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::_OZBrownianBehavior_dragChanInfo)
  {
    v0 = (OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *)operator new();
    OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::OZBrownianBehavior_dragChanInfo(v0);
    OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::_OZBrownianBehavior_dragChanInfo = (uint64_t)v0;
  }
}

void sub_1B2F7027C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *OZBrownianBehavior::OZBrownianBehavior_dragChanInfo::OZBrownianBehavior_dragChanInfo(OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZBrownianBehavior::OZBrownianBehavior_dragChanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65C7178;
  *((_QWORD *)this + 10) = &unk_1E65C7198;
  return this;
}

void sub_1B2F70328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelSeed::OZChannelSeed(OZChannelSeed *this, unsigned int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelSeed_FactoryBase;
  OZChannelSeed *v17;
  OZChannelSeed *OZChannelSeedInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelSeed_FactoryBase = (OZFactory *)getOZChannelSeed_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelSeed_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E65531D8;
  this->var2 = (void **)&unk_1E6553538;
  OZChannelSeedInfo = (OZChannelSeed *)OZChannelSeed::createOZChannelSeedInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
    this->var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
  }
  this->var16 = var17;
  OZChannelSeed::createOZChannelSeedImpl(OZChannelSeedInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
    this->var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B2F70450(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::OZCameraBehavior(OZCameraBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E65C71F0;
  *(_QWORD *)(v5 + 16) = &unk_1E65C7510;
  *(_QWORD *)(v5 + 48) = &unk_1E65C7768;
  *(_QWORD *)(v5 + 336) = &unk_1E65C77C0;
  *(_QWORD *)(v5 + 536) = &unk_1E65C77E8;
  *(_BYTE *)(v5 + 544) = 0;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 600));
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = (char *)this + 712;
  PCSharedMutex::PCSharedMutex((OZCameraBehavior *)((char *)this + 728));
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 104) = (char *)this + 840;
  *((_QWORD *)this + 107) = 0x4014000000000000;
}

void sub_1B2F70518(_Unwind_Exception *a1)
{
  OZChannelBehavior *v1;
  std::mutex *v2;
  uint64_t v3;
  _QWORD **v4;
  void **v5;
  _QWORD **v6;
  std::mutex *v7;
  void *v9;
  void *v10;

  v6 = v4;
  v7 = v2;
  std::__tree<std::__value_type<CMTime,std::vector<double>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::vector<double>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::vector<double>>>>::destroy(v3, *v6);
  PCSharedMutex::~PCSharedMutex(v7);
  v9 = (void *)*((_QWORD *)v1 + 72);
  if (v9)
  {
    *((_QWORD *)v1 + 73) = v9;
    operator delete(v9);
  }
  v10 = *v5;
  if (*v5)
  {
    *((_QWORD *)v1 + 70) = v10;
    operator delete(v10);
  }
  OZChannelBehavior::~OZChannelBehavior(v1);
  _Unwind_Resume(a1);
}

void OZCameraBehavior::OZCameraBehavior(OZCameraBehavior *this, const OZCameraBehavior *a2, char a3)
{
  uint64_t v4;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v4 = &off_1E65C71F0;
  *(_QWORD *)(v4 + 16) = &unk_1E65C7510;
  *(_QWORD *)(v4 + 48) = &unk_1E65C7768;
  *(_QWORD *)(v4 + 336) = &unk_1E65C77C0;
  *(_QWORD *)(v4 + 536) = &unk_1E65C77E8;
  *(_BYTE *)(v4 + 544) = 0;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v4 + 600));
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = (char *)this + 712;
  PCSharedMutex::PCSharedMutex((OZCameraBehavior *)((char *)this + 728));
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 104) = (char *)this + 840;
  *((_QWORD *)this + 107) = 0x4014000000000000;
}

