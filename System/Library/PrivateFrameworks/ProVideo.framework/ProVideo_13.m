double LiHeLightProgramSpotSurfaceDiffuse::State::State(LiHeLightProgramSpotSurfaceDiffuse::State *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = xmmword_1B355C070;
  *((_OWORD *)this + 14) = xmmword_1B3050E20;
  *((_OWORD *)this + 15) = xmmword_1B3053640;
  *((int32x4_t *)this + 16) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 17) = xmmword_1B3050F70;
  *((_OWORD *)this + 18) = xmmword_1B3052E80;
  *((_OWORD *)this + 19) = xmmword_1B355C340;
  *((_OWORD *)this + 20) = xmmword_1B355C350;
  *((_OWORD *)this + 21) = xmmword_1B355C360;
  *((_OWORD *)this + 22) = xmmword_1B3050FE0;
  *((_OWORD *)this + 23) = xmmword_1B3050FF0;
  *((_OWORD *)this + 24) = xmmword_1B355C370;
  *((_OWORD *)this + 25) = xmmword_1B3050E40;
  *((_OWORD *)this + 26) = xmmword_1B3050E50;
  *((_OWORD *)this + 27) = xmmword_1B3050E60;
  *((_OWORD *)this + 28) = xmmword_1B3050E70;
  *((_OWORD *)this + 29) = xmmword_1B3050E80;
  *((_OWORD *)this + 30) = xmmword_1B3050E90;
  *((_OWORD *)this + 31) = xmmword_1B3050EA0;
  *((_OWORD *)this + 32) = xmmword_1B3050EB0;
  *((_OWORD *)this + 33) = xmmword_1B3050EC0;
  *((_OWORD *)this + 34) = xmmword_1B3050ED0;
  *((_OWORD *)this + 35) = xmmword_1B3050EE0;
  *((_OWORD *)this + 36) = xmmword_1B3050EF0;
  *((_OWORD *)this + 37) = xmmword_1B3050F00;
  *((_OWORD *)this + 38) = xmmword_1B3050F10;
  *((_OWORD *)this + 39) = xmmword_1B3050F20;
  *((_OWORD *)this + 40) = xmmword_1B3050F30;
  *((_OWORD *)this + 41) = xmmword_1B3050F40;
  *((_OWORD *)this + 42) = xmmword_1B3050F50;
  *((_OWORD *)this + 43) = xmmword_1B3050F60;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 44) = 0u;
  return result;
}

const char *LiHeLightProgramSurfaceFinalPass::GetProgram(LiHeLightProgramSurfaceFinalPass *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r1.x = dot(r0.xyz, 1.00000h);\n"
             "    r0.w = r1.x*c0.w;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.x = r1.w*r0.w;\n"
             "    r2.y = r0.w - c0.x;\n"
             "    r2.w = half(c0.x < r0.w);\n"
             "    r0.w = half(c0.y < r1.w);\n"
             "    r2.y = r2.y*c0.z;\n"
             "    r2.z = mix(r1.z, r2.x, r2.y);\n"
             "    r0.w = fmin(r0.w, r2.w);\n"
             "    r1.z = select(r1.z, r2.z, -r0.w < 0.00000h);\n"
             "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
             "    r1.xy = select(r1.xy, r2.zx, -r0.ww < 0.00000h);\n"
             "    output.color0.xyz = float3(r1.xyz)*float3(r0.xyz);\n"
             "    output.color0.w = float(r1.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=db490365:15785875:ea9c1f38:9383f519\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004d0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r1.x = dot(r0.xyz, 1.00000f);\n"
             "    r0.w = r1.x*c0.w;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.x = r1.w*r0.w;\n"
             "    r2.y = r0.w - c0.x;\n"
             "    r2.w = float(c0.x < r0.w);\n"
             "    r0.w = float(c0.y < r1.w);\n"
             "    r2.y = r2.y*c0.z;\n"
             "    r2.z = mix(r1.z, r2.x, r2.y);\n"
             "    r0.w = fmin(r0.w, r2.w);\n"
             "    r1.z = select(r1.z, r2.z, -r0.w < 0.00000f);\n"
             "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
             "    r1.xy = select(r1.xy, r2.zx, -r0.ww < 0.00000f);\n"
             "    output.color0.xyz = r1.xyz*r0.xyz;\n"
             "    output.color0.w = r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e2d728d3:a7abefb8:62cf9a5b:5aa76cd7\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000046a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture1, hg_TexCoord1.xy).xyz;\n"
           "    r1.x = dot(r0.xyz, vec3(1.00000));\n"
           "    r0.w = r1.x*c0.w;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r2.x = r1.w*r0.w;\n"
           "    r2.y = r0.w - c0.x;\n"
           "    r2.w = float(c0.x < r0.w);\n"
           "    r0.w = float(c0.y < r1.w);\n"
           "    r2.y = r2.y*c0.z;\n"
           "    r2.z = mix(r1.z, r2.x, r2.y);\n"
           "    r0.w = min(r0.w, r2.w);\n"
           "    r1.z = -r0.w < 0.00000 ? r2.z : r1.z;\n"
           "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
           "    r1.xy = vec2(-r0.w < 0.00000 ? r2.z : r1.x, -r0.w < 0.00000 ? r2.x : r1.y);\n"
           "    gl_FragColor.xyz = r1.xyz*r0.xyz;\n"
           "    gl_FragColor.w = r1.w;\n"
           "}\n"
           "//MD5=19b7bad1:1d4392e7:4a1d8c1b:ba44b2ed\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeLightProgramSurfaceFinalPass::InitProgramDescriptor(LiHeLightProgramSurfaceFinalPass *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLightProgramSurfaceFinalPass_hgc_visible", "//Metal1.0     \n//LEN=000000033f\n[[ visible ]] FragmentOut LiHeLightProgramSurfaceFinalPass_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.002000000095, 0.3333333433);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color1.xyz;\n"
    "    r1.x = dot(r0.xyz, 1.00000f);\n"
    "    r0.w = r1.x*c0.w;\n"
    "    r1 = color0;\n"
    "    r2.x = r1.w*r0.w;\n"
    "    r2.y = r0.w - c0.x;\n"
    "    r2.w = float(c0.x < r0.w);\n"
    "    r0.w = float(c0.y < r1.w);\n"
    "    r2.y = r2.y*c0.z;\n"
    "    r2.z = mix(r1.z, r2.x, r2.y);\n"
    "    r0.w = fmin(r0.w, r2.w);\n"
    "    r1.z = select(r1.z, r2.z, -r0.w < 0.00000f);\n"
    "    r2.xz = mix(r1.yx, r2.xx, r2.yy);\n"
    "    r1.xy = select(r1.xy, r2.zx, -r0.ww < 0.00000f);\n"
    "    output.color0.xyz = r1.xyz*r0.xyz;\n"
    "    output.color0.w = r1.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD2224()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLightProgramSurfaceFinalPass");
}

void sub_1B2DD2234(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD2374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD23BC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD23B4);
}

_QWORD *LiHeLightProgramSurfaceFinalPass::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLightProgramSurfaceFinalPass [hgc1]");
}

uint64_t LiHeLightProgramSurfaceFinalPass::BindTexture(LiHeLightProgramSurfaceFinalPass *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLightProgramSurfaceFinalPass::Bind(LiHeLightProgramSurfaceFinalPass *this, HGHandler *a2)
{
  (*(void (**)(LiHeLightProgramSurfaceFinalPass *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLightProgramSurfaceFinalPass::RenderTile(LiHeLightProgramSurfaceFinalPass *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  uint64_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  __int128 v53;
  int8x16_t *v54;
  uint64_t v55;
  float32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  int8x16_t v73;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 26);
    v8 = *((_QWORD *)a2 + 12);
    v9 = 16 * *((int *)a2 + 6);
    v10 = 16 * *((int *)a2 + 22);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v55) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v8 + v12 - 32);
          v14 = *(float32x4_t *)(v8 + v12 - 16);
          v15 = *(float32x4_t *)(v8 + v12);
          v16 = (int8x16_t)vaddq_f32(v13, (float32x4_t)vrev64q_s32((int32x4_t)v13));
          v17 = (int8x16_t)vaddq_f32(v14, (float32x4_t)vrev64q_s32((int32x4_t)v14));
          v18 = (int8x16_t)vaddq_f32(v15, (float32x4_t)vrev64q_s32((int32x4_t)v15));
          v19 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), (float32x4_t)vextq_s8(v16, v16, 4uLL));
          v20 = *((_QWORD *)this + 51);
          v21 = *(int8x16_t *)(v20 + 16);
          v22 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v19, *(float32x4_t *)v20), (int8x16_t)v13);
          v23 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(*(float32x4_t *)v20, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (float32x4_t)vextq_s8(v17, v17, 4uLL))), (int8x16_t)v14);
          v24 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(*(float32x4_t *)v20, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (float32x4_t)vextq_s8(v18, v18, 4uLL))), (int8x16_t)v15);
          v25 = *(float32x4_t *)(v6 + v12 - 32);
          v26 = *(float32x4_t *)(v6 + v12 - 16);
          v27 = *(float32x4_t *)(v6 + v12);
          v29 = *(int8x16_t *)(v20 + 32);
          v28 = *(float32x4_t *)(v20 + 48);
          v30.i64[0] = vbslq_s8(v29, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 0xCuLL), v25, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v22, 1), *(float32x4_t *)v20)).u64[0];
          v31.i64[0] = vbslq_s8(v29, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), v26, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v23, 1), *(float32x4_t *)v20)).u64[0];
          v32.i64[0] = vbslq_s8(v29, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 0xCuLL), v27, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v24, 1), *(float32x4_t *)v20)).u64[0];
          v30.i64[1] = vandq_s8(*(int8x16_t *)&v28, (int8x16_t)vcgtq_f32(v22, v28)).i64[1];
          v31.i64[1] = vandq_s8(*(int8x16_t *)&v28, (int8x16_t)vcgtq_f32(v23, v28)).i64[1];
          v32.i64[1] = vandq_s8(*(int8x16_t *)&v28, (int8x16_t)vcgtq_f32(v24, v28)).i64[1];
          v33 = *(float32x4_t *)(v20 + 64);
          v34 = *(int8x16_t *)(v20 + 80);
          v35 = vbslq_s8(v34, (int8x16_t)vmulq_f32(v28, v30), (int8x16_t)v30);
          v36 = vbslq_s8(v34, (int8x16_t)vmulq_f32(v28, v31), (int8x16_t)v31);
          v37 = vbslq_s8(v34, (int8x16_t)vmulq_f32(v28, v32), (int8x16_t)v32);
          v38 = *(int8x16_t *)(v20 + 96);
          v39 = *(float32x4_t *)(v20 + 112);
          v40 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v25, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v35, v35, 8uLL), v25), *(float32x2_t *)v35.i8, 1)), v35);
          v41 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v26, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v36, v36, 8uLL), v26), *(float32x2_t *)v36.i8, 1)), v36);
          v42 = (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v27, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v37, v37, 8uLL), v27), *(float32x2_t *)v37.i8, 1)), v37);
          v43 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v21, vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v25, v33)), (int8x16_t)v13), v40), (int8x16_t)v13);
          v44 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v21, vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v26, v33)), (int8x16_t)v14), v41), (int8x16_t)v14);
          v45 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v21, vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v27, v33)), (int8x16_t)v15), v42), (int8x16_t)v15);
          v46 = vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v43), v33), (int8x16_t)v40, (int8x16_t)v25), (int8x16_t)v25);
          v47 = vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v44), v33), (int8x16_t)v41, (int8x16_t)v26), (int8x16_t)v26);
          *(int8x8_t *)v23.f32 = vqtbl1_s8(v46, *(int8x8_t *)v39.f32);
          v36.i64[0] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
          *(int8x8_t *)&v23.u32[2] = vqtbl1_s8(v46, *(int8x8_t *)v36.i8);
          v48 = vbslq_s8(v38, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v45), v33), (int8x16_t)v42, (int8x16_t)v27), (int8x16_t)v27);
          *(int8x8_t *)v49.f32 = vqtbl1_s8(v47, *(int8x8_t *)v39.f32);
          *(int8x8_t *)v39.f32 = vqtbl1_s8(v48, *(int8x8_t *)v39.f32);
          *(int8x8_t *)&v49.u32[2] = vqtbl1_s8(v47, *(int8x8_t *)v36.i8);
          *(int8x8_t *)&v39.u32[2] = vqtbl1_s8(v48, *(int8x8_t *)v36.i8);
          v50 = vaddq_f32(v23, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v40.i64[0], 0), v23), *(float32x2_t *)v40.f32, 1));
          v51 = vaddq_f32(v49, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v41.i64[0], 0), v49), *(float32x2_t *)v41.f32, 1));
          v52 = (int8x16_t)vaddq_f32(v39, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v42.i64[0], 0), v39), *(float32x2_t *)v42.f32, 1));
          v53 = *(_OWORD *)(v20 + 128);
          *(int8x8_t *)v50.f32 = vqtbl1_s8((int8x16_t)v50, *(int8x8_t *)&v53);
          *(int8x8_t *)v51.f32 = vqtbl1_s8((int8x16_t)v51, *(int8x8_t *)&v53);
          *(int8x8_t *)v52.i8 = vqtbl1_s8(v52, *(int8x8_t *)&v53);
          v50.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 3), v33), (int8x16_t)v50, v46).u64[0];
          v51.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 3), v33), (int8x16_t)v51, v47).u64[0];
          v33.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 3), v33), v52, v48).u64[0];
          v50.i64[1] = v46.i64[1];
          v51.i64[1] = v47.i64[1];
          v33.i64[1] = v48.i64[1];
          v54 = (int8x16_t *)(v5 + v12);
          v54[-2] = vbslq_s8(v21, (int8x16_t)v50, (int8x16_t)vmulq_f32(v50, v43));
          v54[-1] = vbslq_s8(v21, (int8x16_t)v51, (int8x16_t)vmulq_f32(v51, v44));
          *v54 = vbslq_s8(v21, (int8x16_t)v33, (int8x16_t)vmulq_f32(v33, v45));
          v11 -= 3;
          v12 += 48;
        }
        while (v4 + v11 > 2);
        LODWORD(v55) = -v11;
      }
      if ((int)v55 < v4)
      {
        v55 = v55;
        do
        {
          v56 = *(float32x4_t *)(v8 + 16 * v55);
          v57 = (int8x16_t)vaddq_f32(v56, (float32x4_t)vrev64q_s32((int32x4_t)v56));
          v58 = *((_QWORD *)this + 51);
          v59 = *(int8x16_t *)(v58 + 16);
          v60 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmulq_f32(*(float32x4_t *)v58, vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (float32x4_t)vextq_s8(v57, v57, 4uLL))), (int8x16_t)v56);
          v61 = *(float32x4_t *)(v6 + 16 * v55);
          v62 = *(float32x4_t *)(v58 + 48);
          v63.i64[0] = vbslq_s8(*(int8x16_t *)(v58 + 32), (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 0xCuLL), v61, 3), (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v60, 1), *(float32x4_t *)v58)).u64[0];
          v63.i64[1] = vandq_s8(*(int8x16_t *)&v62, (int8x16_t)vcgtq_f32(v60, v62)).i64[1];
          v64 = *(float32x4_t *)(v58 + 64);
          v65 = (float32x4_t)vbslq_s8(v59, vandq_s8((int8x16_t)v62, (int8x16_t)vcgtq_f32(v61, v64)), (int8x16_t)v56);
          v66 = vbslq_s8(*(int8x16_t *)(v58 + 80), (int8x16_t)vmulq_f32(v62, v63), (int8x16_t)v63);
          v67 = *(int8x16_t *)(v58 + 96);
          v68 = *(int8x16_t *)(v58 + 112);
          v69 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vaddq_f32(v61, vmulq_lane_f32(vsubq_f32((float32x4_t)vextq_s8(v66, v66, 8uLL), v61), *(float32x2_t *)v66.i8, 1)), v66);
          v70 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vminq_f32(v65, v69), (int8x16_t)v56);
          v71 = vbslq_s8(v67, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v70), v64), (int8x16_t)v69, (int8x16_t)v61), (int8x16_t)v61);
          *(int8x8_t *)v72.f32 = vqtbl1_s8(v71, *(int8x8_t *)v68.i8);
          *(int8x8_t *)&v72.u32[2] = vqtbl1_s8(v71, (int8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL));
          v73 = (int8x16_t)vaddq_f32(v72, vmulq_lane_f32(vsubq_f32((float32x4_t)vdupq_lane_s64(v69.i64[0], 0), v72), *(float32x2_t *)v69.f32, 1));
          *(int8x8_t *)v73.i8 = vqtbl1_s8(v73, *(int8x8_t *)(v58 + 128));
          v64.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 3), v64), v73, v71).u64[0];
          v64.i64[1] = v71.i64[1];
          *(int8x16_t *)(v5 + 16 * v55++) = vbslq_s8(v59, (int8x16_t)v64, (int8x16_t)vmulq_f32(v64, v70));
        }
        while (v55 < v4);
      }
      ++v3;
      v8 += v7;
      v5 += v9;
      v6 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLightProgramSurfaceFinalPass::GetDOD(LiHeLightProgramSurfaceFinalPass *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLightProgramSurfaceFinalPass::GetROI(LiHeLightProgramSurfaceFinalPass *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLightProgramSurfaceFinalPass::LiHeLightProgramSurfaceFinalPass(LiHeLightProgramSurfaceFinalPass *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65817C8;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_1B355C3D0;
  *(_OWORD *)(v3 + 16) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 32) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 48) = xmmword_1B355C3E0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 80) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3053270;
  *(_OWORD *)(v3 + 128) = xmmword_1B30537D0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD29C4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65817C8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40265AC83CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLightProgramSurfaceFinalPass::~LiHeLightProgramSurfaceFinalPass(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLightProgramSurfaceFinalPass::SetParameter(LiHeLightProgramSurfaceFinalPass *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeLightProgramSurfaceFinalPass::GetParameter(LiHeLightProgramSurfaceFinalPass *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeLimit::GetProgram(LiHeLimit *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000381\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r1.wwww + c0.xxxx;\n"
             "    r0 = r0.wwww + c0.xxxx;\n"
             "    r2 = r0/r2;\n"
             "    output.color0 = float4(r1)*float4(r2);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b7076390:9181d49e:56f4b253:3d458ea1\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000367\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r1.wwww + c0.xxxx;\n"
             "    r0 = r0.wwww + c0.xxxx;\n"
             "    r2 = r0/r2;\n"
             "    output.color0 = r1*r2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=05bd07f9:67c60093:0ce557d1:a4a34b2d\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002e8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r1.wwww + c0.xxxx;\n"
           "    r0 = r0.wwww + c0.xxxx;\n"
           "    r2 = r0/r2;\n"
           "    gl_FragColor = r1*r2;\n"
           "}\n"
           "//MD5=0e095ec1:dc210556:f533a650:c09eeb46\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeLimit::InitProgramDescriptor(LiHeLimit *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeLimit_hgc_visible", "//Metal1.0     \n//LEN=00000001bf\n[[ visible ]] FragmentOut LiHeLimit_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000012e-07, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r1 = color1;\n"
    "    r2 = r1.wwww + c0.xxxx;\n"
    "    r0 = r0.wwww + c0.xxxx;\n"
    "    r2 = r0/r2;\n"
    "    output.color0 = r1*r2;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD2B14()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeLimit");
}

void sub_1B2DD2B24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD2CAC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD2CA4);
}

_QWORD *LiHeLimit::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeLimit [hgc1]");
}

uint64_t LiHeLimit::BindTexture(LiHeLimit *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeLimit::Bind(LiHeLimit *this, HGHandler *a2)
{
  (*(void (**)(LiHeLimit *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeLimit::RenderTile(LiHeLimit *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 26);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v34) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v6 + v12 - 32);
          v14 = *(float32x4_t *)(v6 + v12 - 16);
          v15 = *(float32x4_t *)(v6 + v12);
          v16 = *(float32x4_t *)(v6 + v12 + 16);
          v17 = (float32x4_t *)*((_QWORD *)this + 51);
          v18 = v17[1];
          v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), *v17);
          v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), *v17);
          v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), *v17);
          v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), *v17);
          v23 = v17[2];
          v24 = v17[3];
          v25 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v19), v18), v23), v24);
          v26 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v20), v18), v23), v24);
          v27 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v21), v18), v23), v24);
          v28 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v22), v18), v23), v24);
          v29 = vmulq_f32(v13, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12 - 32), 3), *v17), vmulq_f32(v25, vrecpsq_f32(v19, v25))));
          v30 = vmulq_f32(v14, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12 - 16), 3), *v17), vmulq_f32(v26, vrecpsq_f32(v20, v26))));
          v31 = vmulq_f32(v15, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12), 3), *v17), vmulq_f32(v27, vrecpsq_f32(v21, v27))));
          v32 = vmulq_f32(v16, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + v12 + 16), 3), *v17), vmulq_f32(v28, vrecpsq_f32(v22, v28))));
          v33 = (float32x4_t *)(v5 + v12);
          v33[-2] = v29;
          v33[-1] = v30;
          *v33 = v31;
          v33[1] = v32;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v34) = -v11;
      }
      if ((int)v34 < v4)
      {
        v34 = v34;
        do
        {
          v35 = *(float32x4_t *)(v6 + 16 * v34);
          v36 = (float32x4_t *)*((_QWORD *)this + 51);
          v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 3), *v36);
          v38 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v37), v36[1]), v36[2]), v36[3]);
          *(float32x4_t *)(v5 + 16 * v34) = vmulq_f32(v35, vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v8 + 16 * v34), 3), *v36), vmulq_f32(v38, vrecpsq_f32(v37, v38))));
          ++v34;
        }
        while (v34 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeLimit::GetDOD(LiHeLimit *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeLimit::GetROI(LiHeLimit *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeLimit::LiHeLimit(LiHeLimit *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6581A30;
  v3 = operator new();
  *(int32x4_t *)v3 = vdupq_n_s32(0x33D6BF95u);
  *(int32x4_t *)(v3 + 16) = vdupq_n_s32(0x3F804020u);
  *(_QWORD *)&v4 = 0x80000000800000;
  *((_QWORD *)&v4 + 1) = 0x80000000800000;
  *(_OWORD *)(v3 + 32) = v4;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x7F7FFFFFu);
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD3080(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeLimit::~LiHeLimit(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6581A30;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeLimit::~LiHeLimit(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeLimit::SetParameter(LiHeLimit *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeLimit::GetParameter(LiHeLimit *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcNormalMapToBumpMap::GetProgram(HgcNormalMapToBumpMap *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000035c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
             "    r0.xy = select(r0.xy, -r0.xy, half2(hg_Params[0].xy) < 0.00000h);\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r0.www);\n"
             "    output.color0.w = -float(c0.y);\n"
             "    return output;\n"
             "}\n"
             "//MD5=10198cd1:ea4abf9a:d884c6f7:78cfbf92\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000033a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
             "    r0.xy = select(r0.xy, -r0.xy, hg_Params[0].xy < 0.00000f);\n"
             "    r0.w = dot(r0.xyz, r0.xyz);\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    output.color0.xyz = r0.xyz*r0.www;\n"
             "    output.color0.w = -c0.y;\n"
             "    return output;\n"
             "}\n"
             "//MD5=23b14d5c:a8d7ef2a:5b8e81ac:4eb15f99\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000338\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
           "    r0.xy = vec2(hg_ProgramLocal0.x < 0.00000 ? -r0.x : r0.x, hg_ProgramLocal0.y < 0.00000 ? -r0.y : r0.y);\n"
           "    r0.w = dot(r0.xyz, r0.xyz);\n"
           "    r0.w = inversesqrt(r0.w);\n"
           "    gl_FragColor.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor.w = -c0.y;\n"
           "}\n"
           "//MD5=496e9195:f0226dec:8bdbfc4f:49645a41\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcNormalMapToBumpMap::InitProgramDescriptor(HgcNormalMapToBumpMap *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcNormalMapToBumpMap_hgc_visible", "//Metal1.0     \n//LEN=0000000219\n[[ visible ]] FragmentOut HgcNormalMapToBumpMap_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r0.xy = r0.xy*c0.xx + c0.yy;\n"
    "    r0.xy = select(r0.xy, -r0.xy, hg_Params[0].xy < 0.00000f);\n"
    "    r0.w = dot(r0.xyz, r0.xyz);\n"
    "    r0.w = rsqrt(r0.w);\n"
    "    output.color0.xyz = r0.xyz*r0.www;\n"
    "    output.color0.w = -c0.y;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD31D4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcNormalMapToBumpMap");
}

void sub_1B2DD31E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD32E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD3324()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD331CLL);
}

_QWORD *HgcNormalMapToBumpMap::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcNormalMapToBumpMap [hgc1]");
}

uint64_t HgcNormalMapToBumpMap::BindTexture(HgcNormalMapToBumpMap *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcNormalMapToBumpMap::Bind(HgcNormalMapToBumpMap *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HgcNormalMapToBumpMap *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcNormalMapToBumpMap::RenderTile(HgcNormalMapToBumpMap *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v40) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *((_QWORD *)this + 51);
          v12 = *(float32x4_t *)(v11 + 32);
          v13 = *(float32x4_t *)(v11 + 16);
          v14 = (float32x4_t)vandq_s8(*(int8x16_t *)v11, *(int8x16_t *)(v11 + 48));
          v15.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), v12))).u64[0];
          v16.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), v12))).u64[0];
          v17.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10), v12))).u64[0];
          v14.i64[0] = veorq_s8((int8x16_t)v14, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), v12))).u64[0];
          v15.i64[1] = *(_QWORD *)(v6 + v10 - 24);
          v16.i64[1] = *(_QWORD *)(v6 + v10 - 8);
          v17.i64[1] = *(_QWORD *)(v6 + v10 + 8);
          v14.i64[1] = *(_QWORD *)(v6 + v10 + 24);
          v18 = (int32x4_t)vmulq_f32(v15, v15);
          v19 = (int32x4_t)vmulq_f32(v16, v16);
          v20 = (int32x4_t)vmulq_f32(v17, v17);
          v21 = (int32x4_t)vmulq_f32(v14, v14);
          v22 = *(int8x16_t *)(v11 + 64);
          v23 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v18), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL))), (int8x16_t)v15);
          v24 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v19), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL))), (int8x16_t)v16);
          v25 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v20), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL))), (int8x16_t)v17);
          v26 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v21), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL))), (int8x16_t)v14);
          v27 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v23)), v13);
          v28 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v24)), v13);
          v29 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v25)), v13);
          v30 = vminq_f32(vmulq_f32(v12, vrsqrteq_f32(v26)), v13);
          v31 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v27, vrsqrtsq_f32(vmulq_f32(v27, v23), v27)), (int8x16_t)v15);
          v32 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v28, v24), v28)), (int8x16_t)v16);
          v33 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v29, v25), v29)), (int8x16_t)v17);
          v34 = (float32x4_t)vbslq_s8(v22, (int8x16_t)vmulq_f32(v30, vrsqrtsq_f32(vmulq_f32(v30, v26), v30)), (int8x16_t)v14);
          v35 = vmulq_laneq_f32(v31, v31, 3);
          v36 = vmulq_laneq_f32(v32, v32, 3);
          v37 = vmulq_laneq_f32(v33, v33, 3);
          v35.i32[3] = 1.0;
          v36.i32[3] = 1.0;
          v37.i32[3] = 1.0;
          v38 = vmulq_laneq_f32(v34, v34, 3);
          v38.i32[3] = 1.0;
          v39 = (float32x4_t *)(v5 + v10);
          v39[-2] = v35;
          v39[-1] = v36;
          *v39 = v37;
          v39[1] = v38;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v40) = -v9;
      }
      if ((int)v40 < v4)
      {
        v40 = v40;
        do
        {
          v41 = *((_QWORD *)this + 51);
          v42 = *(float32x4_t *)(v41 + 32);
          v43 = *(float32x4_t *)(v41 + 16);
          v44.i64[0] = veorq_s8(vandq_s8(*(int8x16_t *)v41, *(int8x16_t *)(v41 + 48)), (int8x16_t)vaddq_f32(v43, vmulq_f32(*(float32x4_t *)(v6 + 16 * v40), v42))).u64[0];
          v44.i64[1] = *(_QWORD *)(v6 + 16 * v40 + 8);
          v45 = (int32x4_t)vmulq_f32(v44, v44);
          v46 = *(int8x16_t *)(v41 + 64);
          v47 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v45), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL))), (int8x16_t)v44);
          v48 = vminq_f32(vmulq_f32(v42, vrsqrteq_f32(v47)), v43);
          v49 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v48, v47), v48)), (int8x16_t)v44);
          v50 = vmulq_laneq_f32(v49, v49, 3);
          v50.i32[3] = 1.0;
          *(float32x4_t *)(v5 + 16 * v40++) = v50;
        }
        while (v40 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcNormalMapToBumpMap::GetDOD(HgcNormalMapToBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t HgcNormalMapToBumpMap::GetROI(HgcNormalMapToBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void HgcNormalMapToBumpMap::HgcNormalMapToBumpMap(HgcNormalMapToBumpMap *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6581C98;
  v3 = operator new();
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = xmmword_1B355C420;
  *(_OWORD *)(v3 + 32) = xmmword_1B355C430;
  *(_OWORD *)(v3 + 48) = xmmword_1B3053290;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD3784(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcNormalMapToBumpMap::~HgcNormalMapToBumpMap(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6581C98;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcNormalMapToBumpMap::~HgcNormalMapToBumpMap(this);
  HGObject::operator delete(v1);
}

uint64_t HgcNormalMapToBumpMap::SetParameter(HgcNormalMapToBumpMap *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float v8;
  __n128 *v9;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = -a3.n128_f32[0];
  v9 = (__n128 *)*((_QWORD *)this + 51);
  if (v9->n128_f32[0] == (float)-a3.n128_f32[0]
    && v9->n128_f32[1] == v8
    && v9->n128_f32[2] == 0.0
    && v9->n128_f32[3] == 0.0)
  {
    return 0;
  }
  v9->n128_f32[0] = v8;
  v9->n128_f32[1] = v8;
  a3.n128_f32[1] = a4;
  v9->n128_u64[1] = 0;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  v9[5] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcNormalMapToBumpMap::GetParameter(HgcNormalMapToBumpMap *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[20];
    a3[1] = v3[21];
    a3[2] = v3[22];
    result = v3[23];
    a3[3] = result;
  }
  return result;
}

const char *LiHeMixShader::GetProgram(LiHeMixShader *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003a2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).w;\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=22108b0f:e3e984e4:8c3278e3:cb8e1271\n"
             "//SIG=00400000:00000007:00000007:00000007:0000:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000377\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).w;\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6a883b3e:ee5a8f1f:266bcc18:932206aa\n"
             "//SIG=00000000:00000007:00000007:00000000:0000:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.w = texture2D(hg_Texture2, hg_TexCoord2.xy).w;\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=6540cc42:c8bb85fa:ae1830a8:6bdd8d2b\n"
           "//SIG=00000000:00000007:00000007:00000000:0000:0000:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void LiHeMixShader::InitProgramDescriptor(LiHeMixShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeMixShader_hgc_visible", "//Metal1.0     \n//LEN=0000000158\n[[ visible ]] FragmentOut LiHeMixShader_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r2.w = color2.w;\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD3980()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeMixShader");
}

void sub_1B2DD3990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD3B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD3B60()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD3B58);
}

_QWORD *LiHeMixShader::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeMixShader [hgc1]");
}

uint64_t LiHeMixShader::BindTexture(LiHeMixShader *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeMixShader::Bind(LiHeMixShader *this, HGHandler *a2)
{
  (*(void (**)(LiHeMixShader *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeMixShader::RenderTile(LiHeMixShader *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  uint64_t v19;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 14);
    v7 = *((_QWORD *)a2 + 12);
    v8 = 16 * *((int *)a2 + 26);
    v9 = 16 * *((int *)a2 + 22);
    v10 = *((_QWORD *)a2 + 10);
    v11 = 16 * *((int *)a2 + 30);
    v12 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v19) = 0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = vaddq_f32(*(float32x4_t *)(v10 + v13 + 16), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13 + 16), *(float32x4_t *)(v10 + v13 + 16)), *(float32x4_t *)(v6 + v13 + 16), 3));
          v16 = vaddq_f32(*(float32x4_t *)(v10 + v13 + 32), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13 + 32), *(float32x4_t *)(v10 + v13 + 32)), *(float32x4_t *)(v6 + v13 + 32), 3));
          v17 = vaddq_f32(*(float32x4_t *)(v10 + v13 + 48), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13 + 48), *(float32x4_t *)(v10 + v13 + 48)), *(float32x4_t *)(v6 + v13 + 48), 3));
          v18 = (float32x4_t *)(v5 + v13);
          *v18 = vaddq_f32(*(float32x4_t *)(v10 + v13), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + v13), *(float32x4_t *)(v10 + v13)), *(float32x4_t *)(v6 + v13), 3));
          v18[1] = v15;
          v18[2] = v16;
          v18[3] = v17;
          v14 -= 4;
          v13 += 64;
        }
        while (v4 + v14 > 3);
        LODWORD(v19) = -v14;
      }
      if ((int)v19 < v4)
      {
        v19 = v19;
        do
        {
          *(float32x4_t *)(v5 + 16 * v19) = vaddq_f32(*(float32x4_t *)(v10 + 16 * v19), vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + 16 * v19), *(float32x4_t *)(v10 + 16 * v19)), *(float32x4_t *)(v6 + 16 * v19), 3));
          ++v19;
        }
        while (v19 < v4);
      }
      ++v3;
      v7 += v8;
      v10 += v9;
      v6 += v11;
      v5 += v12;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeMixShader::GetDOD(LiHeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeMixShader::GetROI(LiHeMixShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeMixShader::LiHeMixShader(LiHeMixShader *this)
{
  _QWORD *v2;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6581F00;
  *((_QWORD *)this + 51) = operator new();
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD3E9C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeMixShader::~LiHeMixShader(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6581F00;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0xC400A2AC0F1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeMixShader::~LiHeMixShader(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeMixShader::SetParameter(LiHeMixShader *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeMixShader::GetParameter(LiHeMixShader *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeProgramMaxBlend::GetProgram(LiHeProgramMaxBlend *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmax(float4(r1), float4(r0));\n"
             "    return output;\n"
             "}\n"
             "//MD5=03194d2d:d20b76be:1b007e7e:6478a81a\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002c8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmax(r1, r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=171e71e1:20e2dcdc:551a9dc4:7e3e5749\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000245\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = max(r1, r0);\n"
           "}\n"
           "//MD5=e85b8e93:7e9743a9:dad95728:be4f740e\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeProgramMaxBlend::InitProgramDescriptor(LiHeProgramMaxBlend *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramMaxBlend_hgc_visible", "//Metal1.0     \n//LEN=000000012a\n[[ visible ]] FragmentOut LiHeProgramMaxBlend_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0 = fmax(r1, r0);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD3FE8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeProgramMaxBlend");
}

void sub_1B2DD3FF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD4138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD4180()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD4178);
}

_QWORD *LiHeProgramMaxBlend::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramMaxBlend [hgc1]");
}

uint64_t LiHeProgramMaxBlend::BindTexture(LiHeProgramMaxBlend *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramMaxBlend::Bind(LiHeProgramMaxBlend *this, HGHandler *a2)
{
  (*(void (**)(LiHeProgramMaxBlend *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeProgramMaxBlend::RenderTile(LiHeProgramMaxBlend *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  uint64_t v17;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 26);
    v8 = *((_QWORD *)a2 + 12);
    v9 = 16 * *((int *)a2 + 22);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = vmaxq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)(v8 + v12 - 16));
          v14 = vmaxq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)(v8 + v12));
          v15 = vmaxq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)(v8 + v12 + 16));
          v16 = (float32x4_t *)(v5 + v12);
          v16[-2] = vmaxq_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x4_t *)(v8 + v12 - 32));
          v16[-1] = v13;
          *v16 = v14;
          v16[1] = v15;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v17) = -v11;
      }
      if ((int)v17 < v4)
      {
        v17 = v17;
        do
        {
          *(float32x4_t *)(v5 + 16 * v17) = vmaxq_f32(*(float32x4_t *)(v6 + 16 * v17), *(float32x4_t *)(v8 + 16 * v17));
          ++v17;
        }
        while (v17 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeProgramMaxBlend::GetDOD(LiHeProgramMaxBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeProgramMaxBlend::GetROI(LiHeProgramMaxBlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeProgramMaxBlend::LiHeProgramMaxBlend(LiHeProgramMaxBlend *this)
{
  _QWORD *v2;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6582168;
  *((_QWORD *)this + 51) = operator new();
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD4430(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramMaxBlend::~LiHeProgramMaxBlend(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6582168;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0xC400A2AC0F1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeProgramMaxBlend::~LiHeProgramMaxBlend(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeProgramMaxBlend::SetParameter(LiHeProgramMaxBlend *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeProgramMaxBlend::GetParameter(LiHeProgramMaxBlend *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeProgramPointLightStencil::GetProgram(LiHeProgramPointLightStencil *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004a7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[3];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[2] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[4] + s0;\n"
             "    s1 = s0 + hg_Params[5];\n"
             "    s0.x = float(s0.w < -hg_Params[5].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.xyz = normalize(s0.xyz).xyz;\n"
             "    s0.x = dot(s0.xyz, hg_Params[1].xyz);\n"
             "    s0.x = float(s0.x >= float(c0.x));\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0)*s0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=f3248f7c:e2089f42:fd62fa93:ddb2264e\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0006:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000477\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[3];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[2] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[4] + r0;\n"
             "    r1 = r0 + hg_Params[5];\n"
             "    r0.x = float(r0.w < -hg_Params[5].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.xyz = normalize(r0.xyz).xyz;\n"
             "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
             "    r0.x = float(r0.x >= c0.x);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1*r0.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=186997ae:552a6b82:5d8d19fb:5c377193\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0006:0002:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000520\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal3;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal2 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal4 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal5;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal5.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.xyz = normalize(r0.xyz).xyz;\n"
           "    r0.x = dot(r0.xyz, hg_ProgramLocal1.xyz);\n"
           "    r0.x = float(r0.x >= c0.x);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1*r0.xxxx;\n"
           "}\n"
           "//MD5=be7527a7:0daf95f9:c43730d9:cece744b\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0006:0002:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeProgramPointLightStencil::InitProgramDescriptor(LiHeProgramPointLightStencil *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramPointLightStencil_hgc_visible", "//Metal1.0     \n//LEN=0000000361\n[[ visible ]] FragmentOut LiHeProgramPointLightStencil_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[3];\n"
    "    r0 = texCoord1.xxxx*hg_Params[2] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[4] + r0;\n"
    "    r1 = r0 + hg_Params[5];\n"
    "    r0.x = float(r0.w < -hg_Params[5].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.xyz = normalize(r0.xyz).xyz;\n"
    "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
    "    r0.x = float(r0.x >= c0.x);\n"
    "    r1 = color0;\n"
    "    output.color0 = r1*r0.xxxx;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD457C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeProgramPointLightStencil");
}

void sub_1B2DD458C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD46CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD4714()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD470CLL);
}

_QWORD *LiHeProgramPointLightStencil::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramPointLightStencil [hgc1]");
}

uint64_t LiHeProgramPointLightStencil::BindTexture(LiHeProgramPointLightStencil *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramPointLightStencil::Bind(LiHeProgramPointLightStencil *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(LiHeProgramPointLightStencil *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeProgramPointLightStencil::RenderTile(LiHeProgramPointLightStencil *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  unint64_t v48;
  int8x16_t v49;
  unint64_t v50;
  int8x16_t v51;
  unint64_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t *v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  float32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int64x2_t v102;
  float32x4_t v103;
  unint64_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v93) = 0;
        v13 = v8;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v8;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *((_QWORD *)this + 51);
          v18 = *(float32x4_t *)(v16 + 32);
          v17 = *(float32x4_t *)(v16 + 48);
          v19 = vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(v18, v13.f32[0]));
          v20 = vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(v18, v14.f32[0]));
          v21 = vaddq_f32(vmulq_lane_f32(v17, *(float32x2_t *)v15.f32, 1), vmulq_n_f32(v18, v15.f32[0]));
          v22 = *(float32x4_t *)(v16 + 64);
          v23 = *(float32x4_t *)(v16 + 80);
          v24 = vaddq_f32(v19, vmulq_laneq_f32(v22, v13, 2));
          v25 = vaddq_f32(v20, vmulq_laneq_f32(v22, v14, 2));
          v26 = vaddq_f32(v21, vmulq_laneq_f32(v22, v15, 2));
          v27 = vaddq_f32(v23, v24);
          v28 = vaddq_f32(v23, v25);
          v29 = vaddq_f32(v23, v26);
          v30 = vnegq_f32(v23);
          v31 = (int8x16_t)vcgtq_f32(v30, v24);
          v32 = (int8x16_t)vcgtq_f32(v30, v25);
          v33 = *(float32x4_t *)(v16 + 96);
          v34 = *(int8x16_t *)(v16 + 112);
          v35 = (int8x16_t)vcgtq_f32(v30, v26);
          v36 = vandq_s8((int8x16_t)v33, v31);
          v37 = vandq_s8((int8x16_t)v33, v32);
          v38 = vandq_s8((int8x16_t)v33, v35);
          v39 = (int32x4_t)vbslq_s8(v34, vextq_s8(v36, v36, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), v33));
          v40 = (int32x4_t)vbslq_s8(v34, vextq_s8(v37, v37, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), v33));
          v41 = (int32x4_t)vbslq_s8(v34, vextq_s8(v38, v38, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), v33));
          v42 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v27), v33);
          v43 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v28), v33);
          v44 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v29), v33);
          v45.i64[0] = v39.i64[0];
          v45.i64[1] = v42.i64[1];
          v46.i64[0] = v40.i64[0];
          v46.i64[1] = v43.i64[1];
          v47.i64[0] = v41.i64[0];
          v47.i64[1] = v44.i64[1];
          v48 = vdupq_laneq_s64(v42, 1).u64[0];
          v49 = vextq_s8((int8x16_t)v42, (int8x16_t)v39, 8uLL);
          v39.i64[1] = v48;
          v50 = vdupq_laneq_s64(v43, 1).u64[0];
          v51 = vextq_s8((int8x16_t)v43, (int8x16_t)v40, 8uLL);
          v40.i64[1] = v50;
          v52 = vdupq_laneq_s64(v44, 1).u64[0];
          v53 = vextq_s8((int8x16_t)v44, (int8x16_t)v41, 8uLL);
          v41.i64[1] = v52;
          v54 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v45, v33), v49, (int8x16_t)vrev64q_s32(v39));
          v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46, v33), v51, (int8x16_t)vrev64q_s32(v40));
          v56 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v47, v33), v53, (int8x16_t)vrev64q_s32(v41));
          v58 = *(float32x4_t *)(v16 + 128);
          v57 = *(float32x4_t *)(v16 + 144);
          v59 = vminq_f32(vmaxq_f32(vrecpeq_f32(v54), v58), v57);
          v60 = vminq_f32(vmaxq_f32(vrecpeq_f32(v55), v58), v57);
          v61 = vminq_f32(vmaxq_f32(vrecpeq_f32(v56), v58), v57);
          v62 = vminq_f32(vmaxq_f32(vmulq_f32(v59, vrecpsq_f32(v54, v59)), v58), v57);
          v63 = vminq_f32(vmaxq_f32(vmulq_f32(v60, vrecpsq_f32(v55, v60)), v58), v57);
          v64 = vminq_f32(vmaxq_f32(vmulq_f32(v61, vrecpsq_f32(v56, v61)), v58), v57);
          v65 = vmulq_n_f32(v27, vmulq_f32(v62, vrecpsq_f32(v54, v62)).f32[0]);
          v66 = *(float32x4_t *)(v16 + 16);
          v67 = vsubq_f32(*(float32x4_t *)v16, v65);
          v68 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v28, vmulq_f32(v63, vrecpsq_f32(v55, v63)).f32[0]));
          v69 = vsubq_f32(*(float32x4_t *)v16, vmulq_n_f32(v29, vmulq_f32(v64, vrecpsq_f32(v56, v64)).f32[0]));
          v70 = (int32x4_t)vmulq_f32(v67, v67);
          v71 = (int32x4_t)vmulq_f32(v68, v68);
          v72 = (int32x4_t)vmulq_f32(v69, v69);
          v73 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v70, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.i8, 1)));
          v74 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v71, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.i8, 1)));
          v75 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v72, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 1)));
          v76 = vminq_f32(vrsqrteq_f32(v73), v57);
          v77 = vminq_f32(vrsqrteq_f32(v74), v57);
          v78 = vminq_f32(vrsqrteq_f32(v75), v57);
          v79 = vminq_f32(vmulq_f32(v76, vrsqrtsq_f32(vmulq_f32(v76, v73), v76)), v57);
          v80 = vminq_f32(vmulq_f32(v77, vrsqrtsq_f32(vmulq_f32(v77, v74), v77)), v57);
          v81 = vminq_f32(vmulq_f32(v78, vrsqrtsq_f32(vmulq_f32(v78, v75), v78)), v57);
          v82 = vmulq_f32(v69, vmulq_f32(v81, vrsqrtsq_f32(vmulq_f32(v75, v81), v81)));
          v83 = vmulq_f32(vmulq_f32(v67, vmulq_f32(v79, vrsqrtsq_f32(vmulq_f32(v73, v79), v79))), v66);
          v84 = vmulq_f32(vmulq_f32(v68, vmulq_f32(v80, vrsqrtsq_f32(vmulq_f32(v74, v80), v80))), v66);
          v85 = vmulq_f32(v66, v82);
          v86 = (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL), vaddq_f32(v83, (float32x4_t)vrev64q_s32((int32x4_t)v83))), v33);
          v87 = (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL), vaddq_f32(v84, (float32x4_t)vrev64q_s32((int32x4_t)v84))), v33);
          v88 = (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL), vaddq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v85))), v33);
          v89 = *(int8x16_t *)(v16 + 160);
          v90 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16), *(float *)vandq_s8(v89, v87).i32);
          v91 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32), *(float *)vandq_s8(v89, v88).i32);
          v92 = (float32x4_t *)(*(_QWORD *)&v6 + v11);
          *v92 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11), *(float *)vandq_s8(v89, v86).i32);
          v92[1] = v90;
          v92[2] = v91;
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v93) = -v12;
      }
      if ((int)v93 < v5)
      {
        v93 = v93;
        do
        {
          v94 = *((_QWORD *)this + 51);
          v95 = *(float32x4_t *)(v94 + 80);
          v96 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v94 + 48), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)(v94 + 32), v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v94 + 64), v13, 2));
          v97 = vaddq_f32(v95, v96);
          v98 = (int8x16_t)vcgtq_f32(vnegq_f32(v95), v96);
          v99 = *(float32x4_t *)(v94 + 96);
          v100 = vandq_s8((int8x16_t)v99, v98);
          v101 = (int32x4_t)vbslq_s8(*(int8x16_t *)(v94 + 112), vextq_s8(v100, v100, 0xCuLL), (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL), v99));
          v102 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v97), v99);
          v103.i64[0] = v101.i64[0];
          v103.i64[1] = v102.i64[1];
          v104 = vdupq_laneq_s64(v102, 1).u64[0];
          v105 = vextq_s8((int8x16_t)v102, (int8x16_t)v101, 8uLL);
          v101.i64[1] = v104;
          v106 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v103, v99), v105, (int8x16_t)vrev64q_s32(v101));
          v107 = *(float32x4_t *)(v94 + 128);
          v108 = *(float32x4_t *)(v94 + 144);
          v109 = vminq_f32(vmaxq_f32(vrecpeq_f32(v106), v107), v108);
          v110 = vminq_f32(vmaxq_f32(vmulq_f32(v109, vrecpsq_f32(v106, v109)), v107), v108);
          v111 = vsubq_f32(*(float32x4_t *)v94, vmulq_n_f32(v97, vmulq_f32(v110, vrecpsq_f32(v106, v110)).f32[0]));
          v112 = (int32x4_t)vmulq_f32(v111, v111);
          v113 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v112, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.i8, 1)));
          v114 = vminq_f32(vrsqrteq_f32(v113), v108);
          v115 = vminq_f32(vmulq_f32(v114, vrsqrtsq_f32(vmulq_f32(v114, v113), v114)), v108);
          v116 = vmulq_f32(*(float32x4_t *)(v94 + 16), vmulq_f32(v111, vmulq_f32(v115, vrsqrtsq_f32(vmulq_f32(v115, v113), v115))));
          *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v93) = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v7 + 16 * v93), *(float *)vandq_s8(*(int8x16_t *)(v94 + 160), (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL), vaddq_f32(v116, (float32x4_t)vrev64q_s32((int32x4_t)v116))), v99)).i32);
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v93;
        }
        while (v93 < v5);
      }
      v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v6 += v9;
      *(_QWORD *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeProgramPointLightStencil::GetDOD(LiHeProgramPointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeProgramPointLightStencil::GetROI(LiHeProgramPointLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeProgramPointLightStencil::LiHeProgramPointLightStencil(LiHeProgramPointLightStencil *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65823D0;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B355C070;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 128) = xmmword_1B3051200;
  *(int32x4_t *)(v3 + 144) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 160) = xmmword_1B304F230;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD4E9C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65823D0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40C3A7E6FCLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeProgramPointLightStencil::~LiHeProgramPointLightStencil(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeProgramPointLightStencil::SetParameter(LiHeProgramPointLightStencil *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeProgramPointLightStencil::GetParameter(LiHeProgramPointLightStencil *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *LiHeProgramRGBAdditionNode::GetProgram(LiHeProgramRGBAdditionNode *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000322\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = float3(r1.xyz) + float3(r0.xyz);\n"
             "    output.color0.w = fmax(float(r1.w), float(r0.w));\n"
             "    return output;\n"
             "}\n"
             "//MD5=b4e4d934:d319af5c:a0e8018d:4fdadd31\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002f7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = r1.xyz + r0.xyz;\n"
             "    output.color0.w = fmax(r1.w, r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=99a00e71:87dec5e5:0a7a34fb:fe9db88a\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000273\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.xyz = r1.xyz + r0.xyz;\n"
           "    gl_FragColor.w = max(r1.w, r0.w);\n"
           "}\n"
           "//MD5=492545fd:3a9a64b4:fbc44298:ccb0ccd5\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeProgramRGBAdditionNode::InitProgramDescriptor(LiHeProgramRGBAdditionNode *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramRGBAdditionNode_hgc_visible", "//Metal1.0     \n//LEN=0000000160\n[[ visible ]] FragmentOut LiHeProgramRGBAdditionNode_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0.xyz = r1.xyz + r0.xyz;\n"
    "    output.color0.w = fmax(r1.w, r0.w);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD50A4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeProgramRGBAdditionNode");
}

void sub_1B2DD50B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD51F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD523C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD5234);
}

_QWORD *LiHeProgramRGBAdditionNode::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramRGBAdditionNode [hgc1]");
}

uint64_t LiHeProgramRGBAdditionNode::BindTexture(LiHeProgramRGBAdditionNode *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramRGBAdditionNode::Bind(LiHeProgramRGBAdditionNode *this, HGHandler *a2)
{
  (*(void (**)(LiHeProgramRGBAdditionNode *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeProgramRGBAdditionNode::RenderTile(LiHeProgramRGBAdditionNode *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  uint64_t v22;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 26);
    v8 = *((_QWORD *)a2 + 12);
    v9 = 16 * *((int *)a2 + 22);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v8 + v12 - 32);
          v14 = *(float32x4_t *)(v6 + v12 - 32);
          v15 = (int8x16_t)vaddq_f32(v13, v14);
          v16 = (int8x16_t)vmaxq_f32(v14, v13);
          v17 = *(int8x16_t *)*((_QWORD *)this + 51);
          v18 = vbslq_s8(v17, (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)(v8 + v12 - 16)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16)));
          v19 = vbslq_s8(v17, (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)(v8 + v12)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12)));
          v20 = vbslq_s8(v17, (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)(v8 + v12 + 16)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16)));
          v21 = (int8x16_t *)(v5 + v12);
          v21[-2] = vbslq_s8(v17, v16, v15);
          v21[-1] = v18;
          *v21 = v19;
          v21[1] = v20;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v22) = -v11;
      }
      if ((int)v22 < v4)
      {
        v22 = v22;
        do
        {
          *(int8x16_t *)(v5 + 16 * v22) = vbslq_s8(*(int8x16_t *)*((_QWORD *)this + 51), (int8x16_t)vmaxq_f32(*(float32x4_t *)(v6 + 16 * v22), *(float32x4_t *)(v8 + 16 * v22)), (int8x16_t)vaddq_f32(*(float32x4_t *)(v8 + 16 * v22), *(float32x4_t *)(v6 + 16 * v22)));
          ++v22;
        }
        while (v22 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeProgramRGBAdditionNode::GetDOD(LiHeProgramRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeProgramRGBAdditionNode::GetROI(LiHeProgramRGBAdditionNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeProgramRGBAdditionNode::LiHeProgramRGBAdditionNode(LiHeProgramRGBAdditionNode *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6582638;
  v3 = (_OWORD *)operator new();
  *v3 = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD5534(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6582638;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeProgramRGBAdditionNode::~LiHeProgramRGBAdditionNode(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeProgramRGBAdditionNode::SetParameter(LiHeProgramRGBAdditionNode *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeProgramRGBAdditionNode::GetParameter(LiHeProgramRGBAdditionNode *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *LiHeProgramSpotLightStencil::GetProgram(LiHeProgramSpotLightStencil *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000078a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const half4 c1 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    s0 = frag._texCoord1.xxxx*hg_Params[5] + s0;\n"
             "    s0 = frag._texCoord1.zzzz*hg_Params[7] + s0;\n"
             "    s1 = s0 + hg_Params[8];\n"
             "    r0.w = half(hg_Params[3].x) - half(hg_Params[4].x);\n"
             "    s0.x = float(s0.w < -hg_Params[8].w);\n"
             "    s0.y = fmax(s1.w, float(c0.y));\n"
             "    s0.z = fmin(s1.w, -float(c0.y));\n"
             "    s0.x = select(s0.y, s0.z, -s0.x < 0.00000h);\n"
             "    s0.x = 1.00000f / s0.x;\n"
             "    s0.xyz = -s1.xyz*s0.xxx + hg_Params[0].xyz;\n"
             "    s0.xyz = normalize(s0.xyz).xyz;\n"
             "    s0.w = dot(-s0.xyz, hg_Params[2].xyz);\n"
             "    r0.x = half(half(s0.w) < half(hg_Params[4].x));\n"
             "    r0.y = half(half(s0.w) < half(hg_Params[3].x));\n"
             "    r0.x = half(-r0.x >= c0.x);\n"
             "    r0.z = fmin(r0.x, r0.y);\n"
             "    r0.y = half(-r0.y >= c0.x);\n"
             "    r0.x = fmin(r0.x, r0.y);\n"
             "    s0.x = dot(s0.xyz, hg_Params[1].xyz);\n"
             "    s0.w = s0.w - hg_Params[4].x;\n"
             "    s0.w = clamp(s0.w/float(r0.w), 0.00000f, 1.00000f);\n"
             "    r0.w = half(s0.w)*c0.z + c0.w;\n"
             "    s0.w = s0.w*s0.w;\n"
             "    s0.w = s0.w*float(r0.w);\n"
             "    s0.w = select(float(c0.x), s0.w, -float(r0.z) < 0.00000h);\n"
             "    r0.x = select(half(s0.w), c1.x, -r0.x < 0.00000h);\n"
             "    r0.y = half(half(s0.x) >= c0.x);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s1 = float4(r1)*float4(r0.xxxx);\n"
             "    output.color0 = s1*float4(r0.yyyy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=0c6af7d6:4256c98c:dfc94b14:08c886b1\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0009:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000706\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
             "    const float4 c1 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1.yyyy*hg_Params[6];\n"
             "    r0 = frag._texCoord1.xxxx*hg_Params[5] + r0;\n"
             "    r0 = frag._texCoord1.zzzz*hg_Params[7] + r0;\n"
             "    r1 = r0 + hg_Params[8];\n"
             "    r2.w = hg_Params[3].x - hg_Params[4].x;\n"
             "    r0.x = float(r0.w < -hg_Params[8].w);\n"
             "    r0.y = fmax(r1.w, c0.y);\n"
             "    r0.z = fmin(r1.w, -c0.y);\n"
             "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
             "    r0.x = 1.00000f / r0.x;\n"
             "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
             "    r0.xyz = normalize(r0.xyz).xyz;\n"
             "    r0.w = dot(-r0.xyz, hg_Params[2].xyz);\n"
             "    r2.x = float(r0.w < hg_Params[4].x);\n"
             "    r2.y = float(r0.w < hg_Params[3].x);\n"
             "    r2.x = float(-r2.x >= c0.x);\n"
             "    r2.z = fmin(r2.x, r2.y);\n"
             "    r2.y = float(-r2.y >= c0.x);\n"
             "    r2.x = fmin(r2.x, r2.y);\n"
             "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
             "    r0.w = r0.w - hg_Params[4].x;\n"
             "    r0.w = clamp(r0.w/r2.w, 0.00000f, 1.00000f);\n"
             "    r2.w = r0.w*c0.z + c0.w;\n"
             "    r0.w = r0.w*r0.w;\n"
             "    r0.w = r0.w*r2.w;\n"
             "    r0.w = select(c0.x, r0.w, -r2.z < 0.00000f);\n"
             "    r2.x = select(r0.w, c1.x, -r2.x < 0.00000f);\n"
             "    r2.y = float(r0.x >= c0.x);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r1*r2.xxxx;\n"
             "    output.color0 = r1*r2.yyyy;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9f87ae4d:9343216d:64112ba7:a3753792\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0009:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000826\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
           "    const highp vec4 c1 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = hg_TexCoord1.yyyy*hg_ProgramLocal6;\n"
           "    r0 = hg_TexCoord1.xxxx*hg_ProgramLocal5 + r0;\n"
           "    r0 = hg_TexCoord1.zzzz*hg_ProgramLocal7 + r0;\n"
           "    r1 = r0 + hg_ProgramLocal8;\n"
           "    r2.w = hg_ProgramLocal3.x - hg_ProgramLocal4.x;\n"
           "    r0.x = float(r0.w < -hg_ProgramLocal8.w);\n"
           "    r0.y = max(r1.w, c0.y);\n"
           "    r0.z = min(r1.w, -c0.y);\n"
           "    r0.x = -r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.x = 1.00000 / r0.x;\n"
           "    r0.xyz = -r1.xyz*r0.xxx + hg_ProgramLocal0.xyz;\n"
           "    r0.xyz = normalize(r0.xyz).xyz;\n"
           "    r0.w = dot(-r0.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.x = float(r0.w < hg_ProgramLocal4.x);\n"
           "    r2.y = float(r0.w < hg_ProgramLocal3.x);\n"
           "    r2.x = float(-r2.x >= c0.x);\n"
           "    r2.z = min(r2.x, r2.y);\n"
           "    r2.y = float(-r2.y >= c0.x);\n"
           "    r2.x = min(r2.x, r2.y);\n"
           "    r0.x = dot(r0.xyz, hg_ProgramLocal1.xyz);\n"
           "    r0.w = r0.w - hg_ProgramLocal4.x;\n"
           "    r0.w = clamp(r0.w/r2.w, 0.00000, 1.00000);\n"
           "    r2.w = r0.w*c0.z + c0.w;\n"
           "    r0.w = r0.w*r0.w;\n"
           "    r0.w = r0.w*r2.w;\n"
           "    r0.w = -r2.z < 0.00000 ? r0.w : c0.x;\n"
           "    r2.x = -r2.x < 0.00000 ? c1.x : r0.w;\n"
           "    r2.y = float(r0.x >= c0.x);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r1*r2.xxxx;\n"
           "    gl_FragColor = r1*r2.yyyy;\n"
           "}\n"
           "//MD5=9366bdf4:502f0aa6:50468ebd:79856a20\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0009:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void LiHeProgramSpotLightStencil::InitProgramDescriptor(LiHeProgramSpotLightStencil *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeProgramSpotLightStencil_hgc_visible", "//Metal1.0     \n//LEN=00000005ef\n[[ visible ]] FragmentOut LiHeProgramSpotLightStencil_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 9.999999747e-06, -2.000000000, 3.000000000);\n"
    "    const float4 c1 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1.yyyy*hg_Params[6];\n"
    "    r0 = texCoord1.xxxx*hg_Params[5] + r0;\n"
    "    r0 = texCoord1.zzzz*hg_Params[7] + r0;\n"
    "    r1 = r0 + hg_Params[8];\n"
    "    r2.w = hg_Params[3].x - hg_Params[4].x;\n"
    "    r0.x = float(r0.w < -hg_Params[8].w);\n"
    "    r0.y = fmax(r1.w, c0.y);\n"
    "    r0.z = fmin(r1.w, -c0.y);\n"
    "    r0.x = select(r0.y, r0.z, -r0.x < 0.00000f);\n"
    "    r0.x = 1.00000f / r0.x;\n"
    "    r0.xyz = -r1.xyz*r0.xxx + hg_Params[0].xyz;\n"
    "    r0.xyz = normalize(r0.xyz).xyz;\n"
    "    r0.w = dot(-r0.xyz, hg_Params[2].xyz);\n"
    "    r2.x = float(r0.w < hg_Params[4].x);\n"
    "    r2.y = float(r0.w < hg_Params[3].x);\n"
    "    r2.x = float(-r2.x >= c0.x);\n"
    "    r2.z = fmin(r2.x, r2.y);\n"
    "    r2.y = float(-r2.y >= c0.x);\n"
    "    r2.x = fmin(r2.x, r2.y);\n"
    "    r0.x = dot(r0.xyz, hg_Params[1].xyz);\n"
    "    r0.w = r0.w - hg_Params[4].x;\n"
    "    r0.w = clamp(r0.w/r2.w, 0.00000f, 1.00000f);\n"
    "    r2.w = r0.w*c0.z + c0.w;\n"
    "    r0.w = r0.w*r0.w;\n"
    "    r0.w = r0.w*r2.w;\n"
    "    r0.w = select(c0.x, r0.w, -r2.z < 0.00000f);\n"
    "    r2.x = select(r0.w, c1.x, -r2.x < 0.00000f);\n"
    "    r2.y = float(r0.x >= c0.x);\n"
    "    r1 = color0;\n"
    "    r1 = r1*r2.xxxx;\n"
    "    output.color0 = r1*r2.yyyy;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD5684()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeProgramSpotLightStencil");
}

void sub_1B2DD5694(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052270;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD57D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD581C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD5814);
}

_QWORD *LiHeProgramSpotLightStencil::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeProgramSpotLightStencil [hgc1]");
}

uint64_t LiHeProgramSpotLightStencil::BindTexture(LiHeProgramSpotLightStencil *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeProgramSpotLightStencil::Bind(LiHeProgramSpotLightStencil *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(LiHeProgramSpotLightStencil *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeProgramSpotLightStencil::RenderTile(LiHeProgramSpotLightStencil *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  float32x4_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unint64_t v39;
  int8x16_t v40;
  unint64_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t *v102;
  unsigned int v103;
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  int32x4_t v114;
  int64x2_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  unint64_t v119;
  int8x16_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  int8x16_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = a2[10];
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 2)
      {
        v103 = 0;
        v13 = v7;
      }
      else
      {
        v11 = 0;
        v12 = 16;
        v13 = v7;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = *((_QWORD *)this + 51);
          v16 = *(float32x4_t *)(v15 + 96);
          v17 = *(float32x4_t *)(v15 + 112);
          v18 = *(float32x4_t *)(v15 + 64);
          v19 = *(float32x4_t *)(v15 + 80);
          v20 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(v19, v13.f32[0])), vmulq_laneq_f32(v17, v13, 2));
          v21 = vaddq_f32(vaddq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v14.f32, 1), vmulq_n_f32(v19, v14.f32[0])), vmulq_laneq_f32(v17, v14, 2));
          v23 = *(float32x4_t *)(v15 + 128);
          v22 = *(float32x4_t *)(v15 + 144);
          v24 = vaddq_f32(v23, v20);
          v25 = vaddq_f32(v23, v21);
          v26 = vnegq_f32(v23);
          v27 = vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v26, v20));
          v28 = vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v26, v21));
          v29 = vextq_s8(v27, v27, 0xCuLL);
          v30 = vextq_s8(v28, v28, 0xCuLL);
          v31 = *(int8x16_t *)(v15 + 160);
          v32 = *(float32x4_t *)(v15 + 176);
          v33 = (int32x4_t)vbslq_s8(v31, v29, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), v22));
          v34 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v24), v22);
          v35 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v25), v22);
          v36 = (int32x4_t)vbslq_s8(v31, v30, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), v22));
          v37.i64[0] = v33.i64[0];
          v37.i64[1] = v34.i64[1];
          v38.i64[0] = v36.i64[0];
          v38.i64[1] = v35.i64[1];
          v39 = vdupq_laneq_s64(v34, 1).u64[0];
          v40 = vextq_s8((int8x16_t)v34, (int8x16_t)v33, 8uLL);
          v33.i64[1] = v39;
          v41 = vdupq_laneq_s64(v35, 1).u64[0];
          v42 = vextq_s8((int8x16_t)v35, (int8x16_t)v36, 8uLL);
          v36.i64[1] = v41;
          v43 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v37, v22), v40, (int8x16_t)vrev64q_s32(v33));
          v44 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38, v22), v42, (int8x16_t)vrev64q_s32(v36));
          v45 = *(float32x4_t *)(v15 + 192);
          v46 = *(int8x16_t *)(v15 + 208);
          v47 = vminq_f32(vmaxq_f32(vrecpeq_f32(v43), v32), v45);
          v48 = vminq_f32(vmaxq_f32(vrecpeq_f32(v44), v32), v45);
          v49 = vminq_f32(vmaxq_f32(vmulq_f32(v47, vrecpsq_f32(v43, v47)), v32), v45);
          v50 = vminq_f32(vmaxq_f32(vmulq_f32(v48, vrecpsq_f32(v44, v48)), v32), v45);
          v51 = vmulq_n_f32(v24, vmulq_f32(v49, vrecpsq_f32(v43, v49)).f32[0]);
          v52 = *(float32x4_t *)(v15 + 16);
          v53 = vsubq_f32(*(float32x4_t *)v15, v51);
          v54 = vsubq_f32(*(float32x4_t *)v15, vmulq_n_f32(v25, vmulq_f32(v50, vrecpsq_f32(v44, v50)).f32[0]));
          v55 = (int32x4_t)vmulq_f32(v53, v53);
          v56 = (int32x4_t)vmulq_f32(v54, v54);
          v58 = *(float32x4_t *)(v15 + 32);
          v57 = *(float32x4_t *)(v15 + 48);
          v59 = (int8x16_t)vsubq_f32(v57, v18);
          v60 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v55, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1)));
          v61 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v56, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.i8, 1)));
          v62 = vminq_f32(vrsqrteq_f32(v60), v45);
          v63 = vminq_f32(vrsqrteq_f32(v61), v45);
          v64 = vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v62, v60), v62)), v45);
          v65 = vminq_f32(vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, v61), v63)), v45);
          v66 = vmulq_f32(v53, vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v60, v64), v64)));
          v67 = vmulq_f32(v54, vmulq_f32(v65, vrsqrtsq_f32(vmulq_f32(v61, v65), v65)));
          v68 = (int32x4_t)vmulq_f32(v58, vnegq_f32(v66));
          v69 = (int32x4_t)vmulq_f32(v58, vnegq_f32(v67));
          v70 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v68), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL))), (int8x16_t)v66);
          v71 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v69), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL))), (int8x16_t)v67);
          v72 = (float32x4_t)vextq_s8(v59, v59, 4uLL);
          v73 = *(float32x4_t *)(v15 + 224);
          v74 = *(float32x4_t *)(v15 + 240);
          v75.i64[1] = v72.i64[1];
          v75.i64[0] = vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 0xCuLL))).u64[0];
          v76 = (float32x4_t)vrev64q_s32((int32x4_t)v57);
          v72.i64[0] = vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL))).u64[0];
          v77 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v76, (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL))), v75);
          v78 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v76, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL))), (int8x16_t)v72);
          v79 = vbslq_s8(v31, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v77), v22)), (int8x16_t)v77);
          v80 = vbslq_s8(v31, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v78), v22)), (int8x16_t)v78);
          v81 = *(int8x16_t *)(v15 + 256);
          v82 = *(float32x4_t *)(v15 + 272);
          v83 = (float32x4_t)vbslq_s8(v81, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v79, v79, 8uLL), (float32x4_t)vextq_s8(v79, v79, 0xCuLL)), v79);
          v84 = (float32x4_t)vbslq_s8(v81, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v80, v80, 8uLL), (float32x4_t)vextq_s8(v80, v80, 0xCuLL)), v80);
          v85 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v83), v32)), (int8x16_t)v83);
          v86 = (float32x4_t)vbslq_s8((int8x16_t)v74, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(vnegq_f32(v84), v32)), (int8x16_t)v84);
          v72.i64[0] = vminq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v85)).u64[0];
          v74.i64[0] = vminq_f32(v86, (float32x4_t)vrev64q_s32((int32x4_t)v86)).u64[0];
          v72.i64[1] = v85.i64[1];
          v74.i64[1] = v86.i64[1];
          v87 = vmulq_f32(v52, v70);
          v88 = vmulq_f32(v52, v71);
          v87.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v87, 1), vaddq_f32(v87, (float32x4_t)vrev64q_s32((int32x4_t)v87))).u64[0];
          v88.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v88, 1), vaddq_f32(v88, (float32x4_t)vrev64q_s32((int32x4_t)v88))).u64[0];
          v89 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL);
          v90 = vsubq_f32(v70, v89);
          v91 = vsubq_f32(v71, v89);
          v71.i64[0] = v87.i64[0];
          v71.i64[1] = v90.i64[1];
          v90.i64[0] = v88.i64[0];
          v90.i64[1] = v91.i64[1];
          v92 = vminq_f32(vmaxq_f32(vrecpeq_f32(v72), v73), v45);
          v93 = vminq_f32(vmaxq_f32(vrecpeq_f32(v74), v73), v45);
          v94 = vminq_f32(vmaxq_f32(vmulq_f32(v92, vrecpsq_f32(v72, v92)), v73), v45);
          v95 = vminq_f32(vmaxq_f32(vmulq_f32(v93, vrecpsq_f32(v74, v93)), v73), v45);
          v96 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vmulq_f32(v94, vrecpsq_f32(v72, v94))), v32), v22);
          v97 = vminq_f32(vmaxq_f32(vmulq_f32(v90, vmulq_f32(v95, vrecpsq_f32(v74, v95))), v32), v22);
          v95.i64[0] = v87.i64[0];
          v95.i64[1] = v96.i64[1];
          v71.i64[0] = v88.i64[0];
          v71.i64[1] = v97.i64[1];
          v98 = *(float32x4_t *)(v15 + 288);
          v99 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32(v82, vmulq_f32(v95, v98)), (int8x16_t)v72);
          v100 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vaddq_f32(v82, vmulq_f32(v71, v98)), (int8x16_t)v74);
          v87.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v99), v32), (int8x16_t)vmulq_f32(vmulq_f32(v96, v96), v99), *(int8x16_t *)&v32).i64[1];
          v88.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v100), v32), (int8x16_t)vmulq_f32(vmulq_f32(v97, v97), v100), *(int8x16_t *)&v32).i64[1];
          v97.i64[0] = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32(v99, v82), (int8x16_t)v98, vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL)), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgeq_f32(v87, v82)))).u64[0];
          v31.i64[0] = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32(v100, v82), (int8x16_t)v98, vextq_s8((int8x16_t)v88, (int8x16_t)v88, 0xCuLL)), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgeq_f32(v88, v82)))).u64[0];
          v101 = vmulq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v8 + v12), *(float *)v31.i32), *(float32x2_t *)v31.i8, 1);
          v102 = (float32x4_t *)(*(_QWORD *)&v6 + v12);
          v102[-1] = vmulq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v8 + v12 - 16), v97.f32[0]), *(float32x2_t *)v97.f32, 1);
          *v102 = v101;
          v13 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v11 -= 2;
          v12 += 32;
        }
        while (v5 + v11 > 1);
        v103 = -v11;
      }
      if ((int)v103 < v5)
      {
        v104 = *((_QWORD *)this + 51);
        v105 = *(float32x4_t *)(v104 + 64);
        v106 = vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v104 + 96), *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)(v104 + 80), v13.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v104 + 112), v13, 2));
        v108 = *(float32x4_t *)(v104 + 128);
        v107 = *(float32x4_t *)(v104 + 144);
        v109 = vaddq_f32(v108, v106);
        v110 = vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(vnegq_f32(v108), v106));
        v111 = vextq_s8(v110, v110, 0xCuLL);
        v112 = *(int8x16_t *)(v104 + 160);
        v113 = *(float32x4_t *)(v104 + 176);
        v114 = (int32x4_t)vbslq_s8(v112, v111, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL), v107));
        v115 = (int64x2_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v109), v107);
        v116.i64[0] = v114.i64[0];
        v116.i64[1] = v115.i64[1];
        v117 = *(float32x4_t *)(v104 + 48);
        v118 = (int8x16_t)vsubq_f32(v117, v105);
        v119 = vdupq_laneq_s64(v115, 1).u64[0];
        v120 = vextq_s8((int8x16_t)v115, (int8x16_t)v114, 8uLL);
        v114.i64[1] = v119;
        v121 = vextq_s8(v118, v118, 4uLL);
        v122 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v116, v107), v120, (int8x16_t)vrev64q_s32(v114));
        v124 = *(float32x4_t *)(v104 + 192);
        v123 = *(int8x16_t *)(v104 + 208);
        v125 = vminq_f32(vmaxq_f32(vrecpeq_f32(v122), v113), v124);
        v126 = vminq_f32(vmaxq_f32(vmulq_f32(v125, vrecpsq_f32(v122, v125)), v113), v124);
        v127 = vsubq_f32(*(float32x4_t *)v104, vmulq_n_f32(v109, vmulq_f32(v126, vrecpsq_f32(v122, v126)).f32[0]));
        v128 = (int32x4_t)vmulq_f32(v127, v127);
        v129 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v128, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.i8, 1)));
        v130 = vminq_f32(vrsqrteq_f32(v129), v124);
        v131 = vminq_f32(vmulq_f32(v130, vrsqrtsq_f32(vmulq_f32(v130, v129), v130)), v124);
        v132 = vmulq_f32(v127, vmulq_f32(v131, vrsqrtsq_f32(vmulq_f32(v131, v129), v131)));
        v133 = vmulq_f32(*(float32x4_t *)(v104 + 32), vnegq_f32(v132));
        v134 = (float32x4_t)vbslq_s8(v123, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v133), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL))), (int8x16_t)v132);
        v135 = *(float32x4_t *)(v104 + 224);
        v136 = *(int8x16_t *)(v104 + 240);
        v121.i64[0] = vandq_s8((int8x16_t)v135, (int8x16_t)vcgtq_f32(v105, (float32x4_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 0xCuLL))).u64[0];
        v137 = (float32x4_t)vbslq_s8(v136, vandq_s8((int8x16_t)v135, (int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v117), (float32x4_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL))), v121);
        v138 = vbslq_s8(v112, vandq_s8((int8x16_t)v135, (int8x16_t)vcgeq_f32(vnegq_f32(v137), v107)), (int8x16_t)v137);
        v139 = *(float32x4_t *)(v104 + 272);
        v140 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v104 + 256), (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v138, v138, 8uLL), (float32x4_t)vextq_s8(v138, v138, 0xCuLL)), v138);
        v141 = (float32x4_t)vbslq_s8(v136, vandq_s8((int8x16_t)v135, (int8x16_t)vcgeq_f32(vnegq_f32(v140), v113)), (int8x16_t)v140);
        v133.i64[0] = vminq_f32(v141, (float32x4_t)vrev64q_s32((int32x4_t)v141)).u64[0];
        v133.i64[1] = v141.i64[1];
        v142 = vmulq_f32(*(float32x4_t *)(v104 + 16), v134);
        v142.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v142, 1), vaddq_f32(v142, (float32x4_t)vrev64q_s32((int32x4_t)v142))).u64[0];
        v143 = vsubq_f32(v134, (float32x4_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 4uLL));
        v134.i64[0] = v142.i64[0];
        v134.i64[1] = v143.i64[1];
        v144 = vminq_f32(vmaxq_f32(vrecpeq_f32(v133), v135), v124);
        v145 = vminq_f32(vmaxq_f32(vmulq_f32(v144, vrecpsq_f32(v133, v144)), v135), v124);
        v146 = vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v145, vrecpsq_f32(v133, v145)), v134), v113), v107);
        v145.i64[0] = v142.i64[0];
        v145.i64[1] = v146.i64[1];
        v147 = *(float32x4_t *)(v104 + 288);
        v148 = (float32x4_t)vbslq_s8(v123, (int8x16_t)vaddq_f32(v139, vmulq_f32(v145, v147)), (int8x16_t)v133);
        v142.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v148), v113), (int8x16_t)vmulq_f32(vmulq_f32(v146, v146), v148), *(int8x16_t *)&v113).i64[1];
        v112.i64[0] = vbslq_s8(v112, vbslq_s8((int8x16_t)vcgtq_f32(v148, v139), (int8x16_t)v147, vextq_s8((int8x16_t)v142, (int8x16_t)v142, 0xCuLL)), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v147, (int8x16_t)vcgeq_f32(v142, v139)))).u64[0];
        *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v103) = vmulq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v8 + 16 * v103), *(float *)v112.i32), *(float32x2_t *)v112.i8, 1);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v8 += v10;
      *(_QWORD *)&v6 += v9;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeProgramSpotLightStencil::GetDOD(LiHeProgramSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeProgramSpotLightStencil::GetROI(LiHeProgramSpotLightStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeProgramSpotLightStencil::LiHeProgramSpotLightStencil(LiHeProgramSpotLightStencil *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65828A0;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = xmmword_1B355C070;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 176) = xmmword_1B3051200;
  *(int32x4_t *)(v3 + 192) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 208) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 224) = xmmword_1B355C4C0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 272) = xmmword_1B3052AA0;
  *(_OWORD *)(v3 + 288) = xmmword_1B355C4D0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD626C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65828A0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FDACBBE0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeProgramSpotLightStencil::~LiHeProgramSpotLightStencil(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeProgramSpotLightStencil::SetParameter(LiHeProgramSpotLightStencil *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 8)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeProgramSpotLightStencil::GetParameter(LiHeProgramSpotLightStencil *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 8)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *LiHeReflectionShader::GetProgram(LiHeReflectionShader *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003bc\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0].xxxx);\n"
             "    r1 = r1*half4(hg_Params[0].yyyy);\n"
             "    r2 = c0.xxxx - r1.wwww;\n"
             "    r1 = r1*r0.wwww;\n"
             "    output.color0 = float4(r0)*float4(r2) + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a3de96a9:0da5fe21:d01c01a5:5596c784\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000038b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0].xxxx;\n"
             "    r1 = r1*hg_Params[0].yyyy;\n"
             "    r2 = c0.xxxx - r1.wwww;\n"
             "    r1 = r1*r0.wwww;\n"
             "    output.color0 = r0*r2 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=decc026a:4c0f49d4:4af9b62c:3edbd803\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000033e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0.xxxx;\n"
           "    r1 = r1*hg_ProgramLocal0.yyyy;\n"
           "    r2 = c0.xxxx - r1.wwww;\n"
           "    r1 = r1*r0.wwww;\n"
           "    gl_FragColor = r0*r2 + r1;\n"
           "}\n"
           "//MD5=a1320015:d5a104c3:60e25e8f:8b0a3e1c\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeReflectionShader::InitProgramDescriptor(LiHeReflectionShader *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeReflectionShader_hgc_visible", "//Metal1.0     \n//LEN=00000001ee\n[[ visible ]] FragmentOut LiHeReflectionShader_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r0 = r0*hg_Params[0].xxxx;\n"
    "    r1 = r1*hg_Params[0].yyyy;\n"
    "    r2 = c0.xxxx - r1.wwww;\n"
    "    r1 = r1*r0.wwww;\n"
    "    output.color0 = r0*r2 + r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD6474()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeReflectionShader");
}

void sub_1B2DD6484(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD65C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD660C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD6604);
}

_QWORD *LiHeReflectionShader::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeReflectionShader [hgc1]");
}

uint64_t LiHeReflectionShader::BindTexture(LiHeReflectionShader *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeReflectionShader::Bind(LiHeReflectionShader *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(LiHeReflectionShader *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeReflectionShader::RenderTile(LiHeReflectionShader *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x2_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 26);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v24) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = (float32x2_t *)*((_QWORD *)this + 51);
          v14 = *(float32x4_t *)v13[2].f32;
          v15 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 - 32), COERCE_FLOAT(*(_OWORD *)v13->f32));
          v16 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 - 16), COERCE_FLOAT(*(_OWORD *)v13->f32));
          v17 = vmulq_n_f32(*(float32x4_t *)(v8 + v12), COERCE_FLOAT(*(_OWORD *)v13->f32));
          v18 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 + 16), COERCE_FLOAT(*(_OWORD *)v13->f32));
          v19 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 32), *v13, 1);
          v20 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12 - 16), *v13, 1);
          v21 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12), *v13, 1);
          v22 = vmulq_lane_f32(*(float32x4_t *)(v6 + v12 + 16), *v13, 1);
          v23 = (float32x4_t *)(v5 + v12);
          v23[-2] = vaddq_f32(vmulq_laneq_f32(v19, v15, 3), vmulq_f32(v15, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3))));
          v23[-1] = vaddq_f32(vmulq_laneq_f32(v20, v16, 3), vmulq_f32(v16, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3))));
          *v23 = vaddq_f32(vmulq_laneq_f32(v21, v17, 3), vmulq_f32(v17, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3))));
          v23[1] = vaddq_f32(vmulq_laneq_f32(v22, v18, 3), vmulq_f32(v18, vsubq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3))));
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v24) = -v11;
      }
      if ((int)v24 < v4)
      {
        v24 = v24;
        do
        {
          v25 = (float32x4_t *)*((_QWORD *)this + 51);
          v26 = vmulq_n_f32(*(float32x4_t *)(v8 + 16 * v24), COERCE_FLOAT(*v25));
          v27 = vmulq_lane_f32(*(float32x4_t *)(v6 + 16 * v24), *(float32x2_t *)v25->f32, 1);
          *(float32x4_t *)(v5 + 16 * v24++) = vaddq_f32(vmulq_laneq_f32(v27, v26, 3), vmulq_f32(v26, vsubq_f32(v25[1], (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3))));
        }
        while (v24 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeReflectionShader::GetDOD(LiHeReflectionShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeReflectionShader::GetROI(LiHeReflectionShader *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeReflectionShader::LiHeReflectionShader(LiHeReflectionShader *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6582B08;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v3 + 16) = _Q0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD6988(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeReflectionShader::~LiHeReflectionShader(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6582B08;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeReflectionShader::~LiHeReflectionShader(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeReflectionShader::SetParameter(LiHeReflectionShader *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float LiHeReflectionShader::GetParameter(LiHeReflectionShader *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *LiHeShadowProgramPCSS::GetProgram(LiHeShadowProgramPCSS *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000008b2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord0.yyyy*hg_Params[1];\n"
             "    s0 = frag._texCoord0.xxxx*hg_Params[0] + s0;\n"
             "    s0 = frag._texCoord0.zzzz*hg_Params[2] + s0;\n"
             "    s0 = hg_Params[3] + s0;\n"
             "    s1.x = hg_Params[9].z - s0.z;\n"
             "    s1.x = 1.00000f / s1.x;\n"
             "    s1.x = -s0.z*s1.x;\n"
             "    s1 = mix(s0, hg_Params[9], s1.xxxx);\n"
             "    s2 = s1.yyyy*hg_Params[5];\n"
             "    s2 = s1.xxxx*hg_Params[4] + s2;\n"
             "    s3 = s1.wwww*hg_Params[7];\n"
             "    s2 = s1.zzzz*hg_Params[6] + s2;\n"
             "    s1 = s2 + s3;\n"
             "    s2.x = float(s2.w < -s3.w);\n"
             "    s3.x = fmax(s1.w, float(c0.x));\n"
             "    s3.z = fmin(s1.w, -float(c0.x));\n"
             "    s1.w = float(-fabs(hg_Params[10].x) >= float(c0.y));\n"
             "    s2.x = float(-s2.x >= float(c0.y));\n"
             "    s3.y = fmin(s1.w, s2.x);\n"
             "    s2 = s0.yyyy*hg_Params[5];\n"
             "    s0.y = select(s3.z, s3.x, -s3.y < 0.00000h);\n"
             "    s2 = s0.xxxx*hg_Params[4] + s2;\n"
             "    s3 = s0.wwww*hg_Params[7];\n"
             "    s2 = s0.zzzz*hg_Params[6] + s2;\n"
             "    s0.x = float(s2.w < -s3.w);\n"
             "    s2 = s2 + s3;\n"
             "    s0.w = fmax(s2.w, float(c0.x));\n"
             "    s3.xyz = s1.xyz/s0.yyy;\n"
             "    s2.w = fmin(s2.w, -float(c0.x));\n"
             "    s0.x = s1.w*s0.x + -s1.w;\n"
             "    s0.x = select(s2.w, s0.w, s0.x < 0.00000h);\n"
             "    s2.xyz = s2.xyz/s0.xxx;\n"
             "    s0.y = dot(s2.xyz, s2.xyz);\n"
             "    s0.w = rsqrt(s0.y);\n"
             "    s0.z = -s0.z/hg_Params[6].z;\n"
             "    s0.x = dot(s3.xyz, s3.xyz);\n"
             "    s0.x = rsqrt(s0.x);\n"
             "    s0.yw = 1.00000f / s0.xw;\n"
             "    s2.x = s0.w - s0.y;\n"
             "    s0.y = float(s0.y < s0.w);\n"
             "    s0.x = s0.x*hg_Params[8].x;\n"
             "    s2.y = s0.z*float(c0.z);\n"
             "    s0.x = s2.x*s0.x;\n"
             "    s2.x = s0.z*s2.y;\n"
             "    s0.w = s2.x*hg_Params[8].x;\n"
             "    s0.z = float(float(c0.y) < s0.z);\n"
             "    s0.w = s0.w*float(c0.z);\n"
             "    s0.z = s0.z*-hg_Params[10].x;\n"
             "    s0.z = select(float(c0.y), s0.w, s0.z < 0.00000h);\n"
             "    s0.y = fmin(s0.y, s1.w);\n"
             "    output.color0.x = select(s0.z, s0.x, -s0.y < 0.00000h);\n"
             "    output.color0.yzw = float3(c0.yyw);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e8f99b28:46547f5f:3f85fdff:3e4ee8e1\n"
             "//SIG=00400000:00000000:00000000:00000000:0001:000b:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000866\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord0.yyyy*hg_Params[1];\n"
             "    r0 = frag._texCoord0.xxxx*hg_Params[0] + r0;\n"
             "    r0 = frag._texCoord0.zzzz*hg_Params[2] + r0;\n"
             "    r0 = hg_Params[3] + r0;\n"
             "    r1.x = hg_Params[9].z - r0.z;\n"
             "    r1.x = 1.00000f / r1.x;\n"
             "    r1.x = -r0.z*r1.x;\n"
             "    r1 = mix(r0, hg_Params[9], r1.xxxx);\n"
             "    r2 = r1.yyyy*hg_Params[5];\n"
             "    r2 = r1.xxxx*hg_Params[4] + r2;\n"
             "    r3 = r1.wwww*hg_Params[7];\n"
             "    r2 = r1.zzzz*hg_Params[6] + r2;\n"
             "    r1 = r2 + r3;\n"
             "    r2.x = float(r2.w < -r3.w);\n"
             "    r3.x = fmax(r1.w, c0.x);\n"
             "    r3.z = fmin(r1.w, -c0.x);\n"
             "    r1.w = float(-fabs(hg_Params[10].x) >= c0.y);\n"
             "    r2.x = float(-r2.x >= c0.y);\n"
             "    r3.y = fmin(r1.w, r2.x);\n"
             "    r2 = r0.yyyy*hg_Params[5];\n"
             "    r0.y = select(r3.z, r3.x, -r3.y < 0.00000f);\n"
             "    r2 = r0.xxxx*hg_Params[4] + r2;\n"
             "    r3 = r0.wwww*hg_Params[7];\n"
             "    r2 = r0.zzzz*hg_Params[6] + r2;\n"
             "    r0.x = float(r2.w < -r3.w);\n"
             "    r2 = r2 + r3;\n"
             "    r0.w = fmax(r2.w, c0.x);\n"
             "    r3.xyz = r1.xyz/r0.yyy;\n"
             "    r2.w = fmin(r2.w, -c0.x);\n"
             "    r0.x = r1.w*r0.x + -r1.w;\n"
             "    r0.x = select(r2.w, r0.w, r0.x < 0.00000f);\n"
             "    r2.xyz = r2.xyz/r0.xxx;\n"
             "    r0.y = dot(r2.xyz, r2.xyz);\n"
             "    r0.w = rsqrt(r0.y);\n"
             "    r0.z = -r0.z/hg_Params[6].z;\n"
             "    r0.x = dot(r3.xyz, r3.xyz);\n"
             "    r0.x = rsqrt(r0.x);\n"
             "    r0.yw = 1.00000f / r0.xw;\n"
             "    r2.x = r0.w - r0.y;\n"
             "    r0.y = float(r0.y < r0.w);\n"
             "    r0.x = r0.x*hg_Params[8].x;\n"
             "    r2.y = r0.z*c0.z;\n"
             "    r0.x = r2.x*r0.x;\n"
             "    r2.x = r0.z*r2.y;\n"
             "    r0.w = r2.x*hg_Params[8].x;\n"
             "    r0.z = float(c0.y < r0.z);\n"
             "    r0.w = r0.w*c0.z;\n"
             "    r0.z = r0.z*-hg_Params[10].x;\n"
             "    r0.z = select(c0.y, r0.w, r0.z < 0.00000f);\n"
             "    r0.y = fmin(r0.y, r1.w);\n"
             "    output.color0.x = select(r0.z, r0.x, -r0.y < 0.00000f);\n"
             "    output.color0.yzw = c0.yyw;\n"
             "    return output;\n"
             "}\n"
             "//MD5=8057bd78:20502bc7:2259d772:e60813d5\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:000b:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a13\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = hg_TexCoord0.yyyy*hg_ProgramLocal1;\n"
           "    r0 = hg_TexCoord0.xxxx*hg_ProgramLocal0 + r0;\n"
           "    r0 = hg_TexCoord0.zzzz*hg_ProgramLocal2 + r0;\n"
           "    r0 = hg_ProgramLocal3 + r0;\n"
           "    r1.x = hg_ProgramLocal9.z - r0.z;\n"
           "    r1.x = 1.00000 / r1.x;\n"
           "    r1.x = -r0.z*r1.x;\n"
           "    r1 = mix(r0, hg_ProgramLocal9, r1.xxxx);\n"
           "    r2 = r1.yyyy*hg_ProgramLocal5;\n"
           "    r2 = r1.xxxx*hg_ProgramLocal4 + r2;\n"
           "    r3 = r1.wwww*hg_ProgramLocal7;\n"
           "    r2 = r1.zzzz*hg_ProgramLocal6 + r2;\n"
           "    r1 = r2 + r3;\n"
           "    r2.x = float(r2.w < -r3.w);\n"
           "    r3.x = max(r1.w, c0.x);\n"
           "    r3.z = min(r1.w, -c0.x);\n"
           "    r1.w = float(-abs(hg_ProgramLocal10.x) >= c0.y);\n"
           "    r2.x = float(-r2.x >= c0.y);\n"
           "    r3.y = min(r1.w, r2.x);\n"
           "    r2 = r0.yyyy*hg_ProgramLocal5;\n"
           "    r0.y = -r3.y < 0.00000 ? r3.x : r3.z;\n"
           "    r2 = r0.xxxx*hg_ProgramLocal4 + r2;\n"
           "    r3 = r0.wwww*hg_ProgramLocal7;\n"
           "    r2 = r0.zzzz*hg_ProgramLocal6 + r2;\n"
           "    r0.x = float(r2.w < -r3.w);\n"
           "    r2 = r2 + r3;\n"
           "    r0.w = max(r2.w, c0.x);\n"
           "    r3.xyz = r1.xyz/r0.yyy;\n"
           "    r2.w = min(r2.w, -c0.x);\n"
           "    r0.x = r1.w*r0.x + -r1.w;\n"
           "    r0.x = r0.x < 0.00000 ? r0.w : r2.w;\n"
           "    r2.xyz = r2.xyz/r0.xxx;\n"
           "    r0.y = dot(r2.xyz, r2.xyz);\n"
           "    r0.w = inversesqrt(r0.y);\n"
           "    r0.z = -r0.z/hg_ProgramLocal6.z;\n"
           "    r0.x = dot(r3.xyz, r3.xyz);\n"
           "    r0.x = inversesqrt(r0.x);\n"
           "    r0.yw = vec2(1.00000) / r0.xw;\n"
           "    r2.x = r0.w - r0.y;\n"
           "    r0.y = float(r0.y < r0.w);\n"
           "    r0.x = r0.x*hg_ProgramLocal8.x;\n"
           "    r2.y = r0.z*c0.z;\n"
           "    r0.x = r2.x*r0.x;\n"
           "    r2.x = r0.z*r2.y;\n"
           "    r0.w = r2.x*hg_ProgramLocal8.x;\n"
           "    r0.z = float(c0.y < r0.z);\n"
           "    r0.w = r0.w*c0.z;\n"
           "    r0.z = r0.z*-hg_ProgramLocal10.x;\n"
           "    r0.z = r0.z < 0.00000 ? r0.w : c0.y;\n"
           "    r0.y = min(r0.y, r1.w);\n"
           "    gl_FragColor.x = -r0.y < 0.00000 ? r0.x : r0.z;\n"
           "    gl_FragColor.yzw = c0.yyw;\n"
           "}\n"
           "//MD5=591eb457:f8969871:cb49d240:64bc7bae\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:000b:0004:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void LiHeShadowProgramPCSS::InitProgramDescriptor(LiHeShadowProgramPCSS *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeShadowProgramPCSS_hgc_visible", "//Metal1.0     \n//LEN=00000007c4\n[[ visible ]] FragmentOut LiHeShadowProgramPCSS_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(9.999999747e-06, 0.000000000, 0.009999999776, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0.yyyy*hg_Params[1];\n"
    "    r0 = texCoord0.xxxx*hg_Params[0] + r0;\n"
    "    r0 = texCoord0.zzzz*hg_Params[2] + r0;\n"
    "    r0 = hg_Params[3] + r0;\n"
    "    r1.x = hg_Params[9].z - r0.z;\n"
    "    r1.x = 1.00000f / r1.x;\n"
    "    r1.x = -r0.z*r1.x;\n"
    "    r1 = mix(r0, hg_Params[9], r1.xxxx);\n"
    "    r2 = r1.yyyy*hg_Params[5];\n"
    "    r2 = r1.xxxx*hg_Params[4] + r2;\n"
    "    r3 = r1.wwww*hg_Params[7];\n"
    "    r2 = r1.zzzz*hg_Params[6] + r2;\n"
    "    r1 = r2 + r3;\n"
    "    r2.x = float(r2.w < -r3.w);\n"
    "    r3.x = fmax(r1.w, c0.x);\n"
    "    r3.z = fmin(r1.w, -c0.x);\n"
    "    r1.w = float(-fabs(hg_Params[10].x) >= c0.y);\n"
    "    r2.x = float(-r2.x >= c0.y);\n"
    "    r3.y = fmin(r1.w, r2.x);\n"
    "    r2 = r0.yyyy*hg_Params[5];\n"
    "    r0.y = select(r3.z, r3.x, -r3.y < 0.00000f);\n"
    "    r2 = r0.xxxx*hg_Params[4] + r2;\n"
    "    r3 = r0.wwww*hg_Params[7];\n"
    "    r2 = r0.zzzz*hg_Params[6] + r2;\n"
    "    r0.x = float(r2.w < -r3.w);\n"
    "    r2 = r2 + r3;\n"
    "    r0.w = fmax(r2.w, c0.x);\n"
    "    r3.xyz = r1.xyz/r0.yyy;\n"
    "    r2.w = fmin(r2.w, -c0.x);\n"
    "    r0.x = r1.w*r0.x + -r1.w;\n"
    "    r0.x = select(r2.w, r0.w, r0.x < 0.00000f);\n"
    "    r2.xyz = r2.xyz/r0.xxx;\n"
    "    r0.y = dot(r2.xyz, r2.xyz);\n"
    "    r0.w = rsqrt(r0.y);\n"
    "    r0.z = -r0.z/hg_Params[6].z;\n"
    "    r0.x = dot(r3.xyz, r3.xyz);\n"
    "    r0.x = rsqrt(r0.x);\n"
    "    r0.yw = 1.00000f / r0.xw;\n"
    "    r2.x = r0.w - r0.y;\n"
    "    r0.y = float(r0.y < r0.w);\n"
    "    r0.x = r0.x*hg_Params[8].x;\n"
    "    r2.y = r0.z*c0.z;\n"
    "    r0.x = r2.x*r0.x;\n"
    "    r2.x = r0.z*r2.y;\n"
    "    r0.w = r2.x*hg_Params[8].x;\n"
    "    r0.z = float(c0.y < r0.z);\n"
    "    r0.w = r0.w*c0.z;\n"
    "    r0.z = r0.z*-hg_Params[10].x;\n"
    "    r0.z = select(c0.y, r0.w, r0.z < 0.00000f);\n"
    "    r0.y = fmin(r0.y, r1.w);\n"
    "    output.color0.x = select(r0.z, r0.x, -r0.y < 0.00000f);\n"
    "    output.color0.yzw = c0.yyw;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD6B6C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeShadowProgramPCSS");
}

void sub_1B2DD6B7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514D0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD6C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD6CBC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD6CB4);
}

_QWORD *LiHeShadowProgramPCSS::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeShadowProgramPCSS [hgc1]");
}

uint64_t LiHeShadowProgramPCSS::BindTexture(LiHeShadowProgramPCSS *this, HGHandler *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t LiHeShadowProgramPCSS::Bind(LiHeShadowProgramPCSS *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(LiHeShadowProgramPCSS *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeShadowProgramPCSS::RenderTile(LiHeShadowProgramPCSS *this, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x16_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int8x16_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int8x16_t *v166;
  uint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  int32x4_t v185;
  int8x16_t v186;
  int8x16_t v187;
  float32x4_t v188;
  int8x16_t v189;
  int8x16_t v190;
  float32x4_t v191;
  int8x16_t v192;
  float32x4_t v193;
  float32x4_t v194;
  int8x16_t v195;
  int8x16_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  int8x16_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  int8x16_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  int8x16_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  int8x16_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  int32x4_t v241;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    v7 = (float32x4_t)xmmword_1B304F240;
    v8 = a2[2];
    v9 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 2)
      {
        v10 = 0;
        v12 = v6;
      }
      else
      {
        v10 = 0;
        v11 = v5;
        v12 = v6;
        do
        {
          v13 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v14 = *((_QWORD *)this + 51);
          v15 = *(float32x4_t *)(v14 + 16);
          v16 = *(float32x4_t *)(v14 + 32);
          v17 = *(float32x4_t *)(v14 + 48);
          v18 = vaddq_f32(v17, vaddq_f32(vaddq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v12.f32, 1), vmulq_n_f32(*(float32x4_t *)v14, v12.f32[0])), vmulq_laneq_f32(v16, v12, 2)));
          v19 = vaddq_f32(v17, vaddq_f32(vaddq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v13.f32, 1), vmulq_n_f32(*(float32x4_t *)v14, v13.f32[0])), vmulq_laneq_f32(v16, v13, 2)));
          v21 = *(float32x4_t *)(v14 + 128);
          v20 = *(float32x4_t *)(v14 + 144);
          v22 = vsubq_f32(v20, v18);
          v23 = vsubq_f32(v20, v19);
          v24 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
          v25 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
          v26 = *(int8x16_t *)(v14 + 160);
          v27 = *(float32x4_t *)(v14 + 176);
          v29 = *(float32x4_t *)(v14 + 192);
          v28 = *(float32x4_t *)(v14 + 208);
          v30 = vminq_f32(vmaxq_f32(vrecpeq_f32(v24), v27), v29);
          v31 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v27), v29);
          v32 = vminq_f32(vmaxq_f32(vmulq_f32(v30, vrecpsq_f32(v24, v30)), v27), v29);
          v33 = vminq_f32(vmaxq_f32(vmulq_f32(v31, vrecpsq_f32(v25, v31)), v27), v29);
          v34 = vaddq_f32(v18, vmulq_n_f32(v22, vmulq_f32(vmulq_f32(v32, vrecpsq_f32(v24, v32)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2))).f32[0]));
          v36 = *(float32x4_t *)(v14 + 64);
          v35 = *(float32x4_t *)(v14 + 80);
          v37 = vaddq_f32(v19, vmulq_n_f32(v23, vmulq_f32(vmulq_f32(v33, vrecpsq_f32(v25, v33)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2))).f32[0]));
          v38 = *(float32x4_t *)(v14 + 96);
          v39 = *(float32x4_t *)(v14 + 112);
          v40 = vmulq_laneq_f32(v39, v34, 3);
          v41 = vmulq_laneq_f32(v39, v37, 3);
          v42 = vaddq_f32(vmulq_laneq_f32(v38, v34, 2), vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v34.f32, 1), vmulq_n_f32(v36, v34.f32[0])));
          v43 = vaddq_f32(vmulq_laneq_f32(v38, v37, 2), vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v37.f32, 1), vmulq_n_f32(v36, v37.f32[0])));
          v44 = (int32x4_t)vaddq_f32(v40, v42);
          v45 = (int32x4_t)vaddq_f32(v41, v43);
          v46 = vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(vnegq_f32(v40), v42));
          v47 = vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(vnegq_f32(v41), v43));
          v48.i64[0] = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 0xCuLL), v28).u64[0];
          v49.i64[0] = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), v28).u64[0];
          v50 = *(float32x4_t *)(v14 + 224);
          v51 = *(int8x16_t *)(v14 + 240);
          v52 = vminq_f32((float32x4_t)vrev64q_s32(v45), v28);
          v54 = *(float32x4_t *)(v14 + 256);
          v53 = *(int8x16_t *)(v14 + 272);
          v55 = vandq_s8((int8x16_t)v54, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v51, v26), v50));
          v56 = vextq_s8(v55, v55, 4uLL);
          v48.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(v44), v28).i64[1];
          v57 = (float32x4_t)vbslq_s8(v53, v56, (int8x16_t)v44);
          v58 = (float32x4_t)vbslq_s8(v53, v56, (int8x16_t)v45);
          v49.i64[1] = v52.i64[1];
          v59 = (int32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v47, v47, 0xCuLL)), v50));
          v60 = (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
          v61 = (float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL);
          v62 = (int8x16_t)vminq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v46, v46, 0xCuLL)), v50))));
          v63 = (int8x16_t)vminq_f32(v61, (float32x4_t)vrev64q_s32(v59));
          v65 = *(int8x16_t *)(v14 + 288);
          v64 = *(int8x16_t *)(v14 + 304);
          v66 = (float32x4_t)vbslq_s8(v65, v62, v48);
          v67 = (float32x4_t)vbslq_s8(v65, v63, v49);
          v68 = vmulq_lane_f32(v35, *(float32x2_t *)v18.f32, 1);
          v69 = vmulq_lane_f32(v35, *(float32x2_t *)v19.f32, 1);
          v70 = (float32x4_t)vbslq_s8(v65, vbslq_s8((int8x16_t)vcgtq_f32(v66, v54), (int8x16_t)vrev64q_s32((int32x4_t)v66), vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL)), (int8x16_t)v18);
          v71 = (float32x4_t)vbslq_s8(v65, vbslq_s8((int8x16_t)vcgtq_f32(v67, v54), (int8x16_t)vrev64q_s32((int32x4_t)v67), vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL)), (int8x16_t)v19);
          v72 = vaddq_f32(v68, vmulq_n_f32(v36, v70.f32[0]));
          v73 = vaddq_f32(v69, vmulq_n_f32(v36, v71.f32[0]));
          v74 = vmulq_laneq_f32(v39, v70, 3);
          v75 = vmulq_laneq_f32(v39, v71, 3);
          v76 = vaddq_f32(vmulq_laneq_f32(v38, v70, 2), v72);
          v77 = vaddq_f32(vmulq_laneq_f32(v38, v71, 2), v73);
          v78 = vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(vnegq_f32(v74), v76));
          v79 = vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(vnegq_f32(v75), v77));
          v80 = vaddq_f32(v74, v76);
          v81 = vaddq_f32(v75, v77);
          v82 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmaxq_f32(v80, v50), vbslq_s8(v64, vextq_s8(v78, v78, 0xCuLL), (int8x16_t)v70));
          v83 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmaxq_f32(v81, v50), vbslq_s8(v64, vextq_s8(v79, v79, 0xCuLL), (int8x16_t)v71));
          v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1);
          v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1);
          v86 = vminq_f32(vmaxq_f32(vrecpeq_f32(v84), v27), v29);
          v87 = vminq_f32(vmaxq_f32(vrecpeq_f32(v85), v27), v29);
          v88 = vmulq_f32(v86, vrecpsq_f32(v84, v86));
          v90 = *(float32x4_t *)(v14 + 320);
          v89 = *(int8x16_t *)(v14 + 336);
          v91 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vminq_f32(v80, v90), (int8x16_t)v80);
          v92.i64[0] = vsubq_f32(vmulq_laneq_f32(v82, v57, 3), (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 0xCuLL)).u64[0];
          v93.i64[0] = vsubq_f32(vmulq_laneq_f32(v83, v58, 3), (float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 0xCuLL)).u64[0];
          v92.i64[1] = v82.i64[1];
          v93.i64[1] = v83.i64[1];
          v94 = vminq_f32(vmaxq_f32(v88, v27), v29);
          v95 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vminq_f32(v81, v90), (int8x16_t)v81);
          v96 = vminq_f32(vmaxq_f32(vmulq_f32(v87, vrecpsq_f32(v85, v87)), v27), v29);
          v97 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v50, v92), (int8x16_t)vdupq_laneq_s32((int32x4_t)v92, 3), (int8x16_t)vdupq_laneq_s32((int32x4_t)v91, 3)), 0);
          v98 = vmulq_f32(v94, vrecpsq_f32(v84, v94));
          v99 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v50, v93), (int8x16_t)vdupq_laneq_s32((int32x4_t)v93, 3), (int8x16_t)vdupq_laneq_s32((int32x4_t)v95, 3)), 0);
          v100 = vmulq_f32(v96, vrecpsq_f32(v85, v96));
          v101 = vminq_f32(vmaxq_f32(vrecpeq_f32(v97), v27), v29);
          v102 = vminq_f32(vmaxq_f32(vrecpeq_f32(v99), v27), v29);
          v103 = vmulq_f32(v98, v57);
          v104 = vminq_f32(vmaxq_f32(vmulq_f32(v101, vrecpsq_f32(v97, v101)), v27), v29);
          v105 = vminq_f32(vmaxq_f32(vmulq_f32(v102, vrecpsq_f32(v99, v102)), v27), v29);
          v106 = vmulq_f32(vmulq_f32(v104, vrecpsq_f32(v97, v104)), v91);
          v107 = vmulq_f32(vmulq_f32(v105, vrecpsq_f32(v99, v105)), v95);
          v108 = vmulq_f32(v106, v106);
          v109 = vmulq_f32(v107, v107);
          v110 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v108, (int8x16_t)v6, 4uLL), vaddq_f32(v108, (float32x4_t)vrev64q_s32((int32x4_t)v108)));
          v111 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v109, (int8x16_t)v6, 4uLL), vaddq_f32(v109, (float32x4_t)vrev64q_s32((int32x4_t)v109)));
          v112 = vmulq_f32(v100, v58);
          v113 = (float32x4_t)vextq_s8((int8x16_t)v82, v110, 8uLL);
          v114 = (float32x4_t)vextq_s8((int8x16_t)v83, v111, 8uLL);
          v110.i64[1] = v82.i64[1];
          v115 = vminq_f32(vrsqrteq_f32(v113), v28);
          v116 = vminq_f32(vrsqrteq_f32(v114), v28);
          v111.i64[1] = v83.i64[1];
          v117 = vminq_f32(vmulq_f32(v115, vrsqrtsq_f32(vmulq_f32(v115, v113), v115)), v28);
          v118 = vminq_f32(vmulq_f32(v116, vrsqrtsq_f32(vmulq_f32(v116, v114), v116)), v28);
          v119 = vmulq_f32(v117, vrsqrtsq_f32(vmulq_f32(v117, v113), v117));
          v120 = (int8x16_t)vmulq_f32(v118, vrsqrtsq_f32(vmulq_f32(v118, v114), v118));
          v121 = vminq_f32(vmaxq_f32(vrecpeq_f32(v38), v54), v29);
          v122 = vminq_f32(vmaxq_f32(vmulq_f32(v121, vrecpsq_f32(v38, v121)), v54), v29);
          v123 = vmulq_f32(v122, vrecpsq_f32(v38, v122));
          v124 = (int8x16_t)vmulq_f32(v123, vnegq_f32((float32x4_t)vbslq_s8(v89, v110, (int8x16_t)v119)));
          v125 = vmulq_f32(v103, v103);
          v126 = (int8x16_t)vmulq_f32(v123, vnegq_f32((float32x4_t)vbslq_s8(v89, v111, v120)));
          v127 = vmulq_f32(v112, v112);
          v128 = vbslq_s8(v89, v124, (int8x16_t)v119);
          v119.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v125, 1), vaddq_f32(v125, (float32x4_t)vrev64q_s32((int32x4_t)v125))).u64[0];
          v129 = vbslq_s8(v89, v126, v120);
          v127.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v127, 1), vaddq_f32(v127, (float32x4_t)vrev64q_s32((int32x4_t)v127))).u64[0];
          v119.i64[1] = v128.i64[1];
          v127.i64[1] = v129.i64[1];
          v130 = vminq_f32(vrsqrteq_f32(v119), v29);
          v131 = vminq_f32(vrsqrteq_f32(v127), v29);
          v132 = vminq_f32(vmulq_f32(v130, vrsqrtsq_f32(vmulq_f32(v130, v119), v130)), v29);
          v133 = vminq_f32(vmulq_f32(v131, vrsqrtsq_f32(vmulq_f32(v131, v127), v131)), v29);
          v119.i64[0] = vmulq_f32(v132, vrsqrtsq_f32(vmulq_f32(v132, v119), v132)).u64[0];
          v127.i64[0] = vmulq_f32(v133, vrsqrtsq_f32(vmulq_f32(v133, v127), v133)).u64[0];
          v132.i64[0] = v119.i64[0];
          v133.i64[0] = v127.i64[0];
          v119.i64[1] = vextq_s8(v128, v128, 8uLL).u64[0];
          *(int8x8_t *)v125.f32 = vqtbl1_s8((int8x16_t)v119, *(int8x8_t *)v51.i8);
          v118.i64[0] = vextq_s8(v51, v51, 8uLL).u64[0];
          v127.i64[1] = vextq_s8(v129, v129, 8uLL).u64[0];
          *(int8x8_t *)&v125.u32[2] = vqtbl1_s8((int8x16_t)v119, *(int8x8_t *)v118.f32);
          *(int8x8_t *)v119.f32 = vqtbl1_s8((int8x16_t)v127, *(int8x8_t *)v51.i8);
          *(int8x8_t *)&v119.u32[2] = vqtbl1_s8((int8x16_t)v127, *(int8x8_t *)v118.f32);
          v132.i64[1] = v128.i64[1];
          v133.i64[1] = v129.i64[1];
          v135 = *(float32x4_t *)(v14 + 352);
          v134 = *(int8x16_t *)(v14 + 368);
          v136 = vminq_f32(vmaxq_f32(vrecpeq_f32(v125), v135), v29);
          v137 = vminq_f32(vmaxq_f32(vrecpeq_f32(v119), v135), v29);
          v138 = vminq_f32(vmaxq_f32(vmulq_f32(v136, vrecpsq_f32(v125, v136)), v135), v29);
          v139 = vminq_f32(vmaxq_f32(vmulq_f32(v137, vrecpsq_f32(v119, v137)), v135), v29);
          v140 = (float32x4_t)vbslq_s8(v134, (int8x16_t)v132, (int8x16_t)vmulq_f32(v138, vrecpsq_f32(v125, v138)));
          v141 = (float32x4_t)vbslq_s8(v134, (int8x16_t)v133, (int8x16_t)vmulq_f32(v139, vrecpsq_f32(v119, v139)));
          v142 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 0xCuLL), (float32x4_t)vrev64q_s32((int32x4_t)v140));
          v143 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v141, (int8x16_t)v141, 0xCuLL), (float32x4_t)vrev64q_s32((int32x4_t)v141));
          v144 = (float32x4_t)vbslq_s8(v65, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), v140)), (int8x16_t)v140);
          v145 = (float32x4_t)vbslq_s8(v65, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL), v141)), (int8x16_t)v141);
          v146 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v21, v144), (int8x16_t)v144);
          v147 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v21, v145), (int8x16_t)v145);
          v148 = (float32x4_t)vbslq_s8(v64, v142, (int8x16_t)vmulq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v146, (int8x16_t)v146, 4uLL)));
          v149 = (float32x4_t)vbslq_s8(v64, v143, (int8x16_t)vmulq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v147, (int8x16_t)v147, 4uLL)));
          v150 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v146, v148), (int8x16_t)v144);
          v151 = (float32x4_t)vbslq_s8(v64, (int8x16_t)vmulq_f32(v147, v149), (int8x16_t)v145);
          v152 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL);
          v153 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_n_f32(v152, vmulq_laneq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 1), v150, 2).f32[0]), (int8x16_t)v150);
          v154 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_n_f32(v152, vmulq_laneq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1), v151, 2).f32[0]), (int8x16_t)v151);
          v155 = (float32x4_t)vbslq_s8(v89, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32(v153, v135)), (int8x16_t)v153);
          v156 = *(float32x4_t *)(v14 + 384);
          v157 = *(int8x16_t *)(v14 + 400);
          v158 = (float32x4_t)vbslq_s8(v89, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32(v154, v135)), (int8x16_t)v154);
          v159 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_f32(v156, v155), (int8x16_t)v155);
          v160 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_f32(v156, v158), (int8x16_t)v158);
          v161 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0));
          v162 = (float32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_f32(v161, v159), (int8x16_t)v159);
          v163 = (float32x4_t)vbslq_s8(v89, (int8x16_t)vmulq_f32(v161, v160), (int8x16_t)v160);
          v162.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v135, v162), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v162), *(int8x16_t *)&v135).i64[1];
          v163.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v135, v163), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v163), *(int8x16_t *)&v135).i64[1];
          v164 = (int32x4_t)vbslq_s8(v65, (int8x16_t)vminq_f32(v162, v60), (int8x16_t)v162);
          v165 = (int32x4_t)vbslq_s8(v65, (int8x16_t)vminq_f32(v163, v61), (int8x16_t)v163);
          v166 = (int8x16_t *)(*(_QWORD *)&v8 + 16 * v10);
          *v166 = vbslq_s8(v64, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v164), v135), (int8x16_t)v164, vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL)), v157);
          v166[1] = vbslq_s8(v64, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v165), v135), (int8x16_t)v165, vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL)), v157);
          v12 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v10 += 2;
          v11 -= 2;
        }
        while (v11 > 1);
        v10 = v10;
        v7 = (float32x4_t)xmmword_1B304F240;
      }
      if ((int)v10 < v5)
      {
        v167 = *((_QWORD *)this + 51);
        v168 = vaddq_f32(*(float32x4_t *)(v167 + 48), vaddq_f32(vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v167 + 16), *(float32x2_t *)v12.f32, 1), vmulq_n_f32(*(float32x4_t *)v167, v12.f32[0])), vmulq_laneq_f32(*(float32x4_t *)(v167 + 32), v12, 2)));
        v169 = *(float32x4_t *)(v167 + 128);
        v170 = vsubq_f32(*(float32x4_t *)(v167 + 144), v168);
        v171 = (float32x4_t)vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL);
        v172 = *(int8x16_t *)(v167 + 160);
        v173 = *(float32x4_t *)(v167 + 176);
        v175 = *(float32x4_t *)(v167 + 192);
        v174 = *(float32x4_t *)(v167 + 208);
        v176 = vminq_f32(vmaxq_f32(vrecpeq_f32(v171), v173), v175);
        v177 = vminq_f32(vmaxq_f32(vmulq_f32(v176, vrecpsq_f32(v171, v176)), v173), v175);
        v178 = vaddq_f32(v168, vmulq_n_f32(v170, vmulq_f32(vmulq_f32(v177, vrecpsq_f32(v171, v177)), vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v168, 2))).f32[0]));
        v180 = *(float32x4_t *)(v167 + 64);
        v179 = *(float32x4_t *)(v167 + 80);
        v182 = *(float32x4_t *)(v167 + 96);
        v181 = *(float32x4_t *)(v167 + 112);
        v183 = vmulq_laneq_f32(v181, v178, 3);
        v184 = vaddq_f32(vmulq_laneq_f32(v182, v178, 2), vaddq_f32(vmulq_lane_f32(v179, *(float32x2_t *)v178.f32, 1), vmulq_n_f32(v180, v178.f32[0])));
        v185 = (int32x4_t)vaddq_f32(v183, v184);
        v186 = vandq_s8((int8x16_t)v173, (int8x16_t)vcgtq_f32(vnegq_f32(v183), v184));
        v187.i64[0] = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 0xCuLL), v174).u64[0];
        v187.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(v185), v174).i64[1];
        v188 = *(float32x4_t *)(v167 + 224);
        v189 = *(int8x16_t *)(v167 + 240);
        v191 = *(float32x4_t *)(v167 + 256);
        v190 = *(int8x16_t *)(v167 + 272);
        v192 = vandq_s8((int8x16_t)v191, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v189, v172), v188));
        v193 = (float32x4_t)vbslq_s8(v190, vextq_s8(v192, v192, 4uLL), (int8x16_t)v185);
        v194 = (float32x4_t)vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL);
        v196 = *(int8x16_t *)(v167 + 288);
        v195 = *(int8x16_t *)(v167 + 304);
        v197 = (float32x4_t)vbslq_s8(v196, (int8x16_t)vminq_f32(v194, (float32x4_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v191, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vextq_s8(v186, v186, 0xCuLL)), v188)))), v187);
        v198 = (float32x4_t)vbslq_s8(v196, vbslq_s8((int8x16_t)vcgtq_f32(v197, v191), (int8x16_t)vrev64q_s32((int32x4_t)v197), vextq_s8((int8x16_t)v197, (int8x16_t)v197, 4uLL)), (int8x16_t)v168);
        v199 = vaddq_f32(vmulq_lane_f32(v179, *(float32x2_t *)v168.f32, 1), vmulq_n_f32(v180, v198.f32[0]));
        v200 = vmulq_laneq_f32(v181, v198, 3);
        v201 = vaddq_f32(vmulq_laneq_f32(v182, v198, 2), v199);
        v202 = vandq_s8((int8x16_t)v191, (int8x16_t)vcgtq_f32(vnegq_f32(v200), v201));
        v203 = vaddq_f32(v200, v201);
        v204 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vmaxq_f32(v203, v188), vbslq_s8(v195, vextq_s8(v202, v202, 0xCuLL), (int8x16_t)v198));
        v205 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v204.f32, 1);
        v206 = vminq_f32(vmaxq_f32(vrecpeq_f32(v205), v173), v175);
        v207 = vminq_f32(vmaxq_f32(vmulq_f32(v206, vrecpsq_f32(v205, v206)), v173), v175);
        v208 = vmulq_f32(v207, vrecpsq_f32(v205, v207));
        v209 = *(int8x16_t *)(v167 + 336);
        v210 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vminq_f32(v203, *(float32x4_t *)(v167 + 320)), (int8x16_t)v203);
        v181.i64[0] = vsubq_f32(vmulq_laneq_f32(v204, v193, 3), (float32x4_t)vextq_s8((int8x16_t)v193, (int8x16_t)v193, 0xCuLL)).u64[0];
        v181.i64[1] = v204.i64[1];
        v211 = vmulq_f32(v208, v193);
        v212 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v188, v181), (int8x16_t)vdupq_laneq_s32((int32x4_t)v181, 3), (int8x16_t)vdupq_laneq_s32((int32x4_t)v210, 3)), 0);
        v213 = vminq_f32(vmaxq_f32(vrecpeq_f32(v212), v173), v175);
        v214 = vminq_f32(vmaxq_f32(vmulq_f32(v213, vrecpsq_f32(v212, v213)), v173), v175);
        v215 = vmulq_f32(vmulq_f32(v214, vrecpsq_f32(v212, v214)), v210);
        v216 = vmulq_f32(v215, v215);
        v217 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v216, (int8x16_t)v6, 4uLL), vaddq_f32(v216, (float32x4_t)vrev64q_s32((int32x4_t)v216)));
        v218 = (float32x4_t)vextq_s8((int8x16_t)v204, v217, 8uLL);
        v217.i64[1] = v204.i64[1];
        v219 = vminq_f32(vrsqrteq_f32(v218), v174);
        v220 = vminq_f32(vmulq_f32(v219, vrsqrtsq_f32(vmulq_f32(v219, v218), v219)), v174);
        v221 = (int8x16_t)vmulq_f32(v220, vrsqrtsq_f32(vmulq_f32(v220, v218), v220));
        v222 = vminq_f32(vmaxq_f32(vrecpeq_f32(v182), v191), v175);
        v223 = vminq_f32(vmaxq_f32(vmulq_f32(v222, vrecpsq_f32(v182, v222)), v191), v175);
        v224 = (float32x4_t)vbslq_s8(v209, (int8x16_t)vmulq_f32(vmulq_f32(v223, vrecpsq_f32(v182, v223)), vnegq_f32((float32x4_t)vbslq_s8(v209, v217, v221))), v221);
        v225 = vmulq_f32(v211, v211);
        v225.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v225, 1), vaddq_f32(v225, (float32x4_t)vrev64q_s32((int32x4_t)v225))).u64[0];
        v225.i64[1] = v224.i64[1];
        v226 = vminq_f32(vrsqrteq_f32(v225), v175);
        v227 = vminq_f32(vmulq_f32(v226, vrsqrtsq_f32(vmulq_f32(v226, v225), v226)), v175);
        v225.i64[0] = vmulq_f32(v227, vrsqrtsq_f32(vmulq_f32(v227, v225), v227)).u64[0];
        v227.i64[0] = v225.i64[0];
        v227.i64[1] = v224.i64[1];
        v225.i64[1] = vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
        *(int8x8_t *)v224.f32 = vqtbl1_s8((int8x16_t)v225, *(int8x8_t *)v189.i8);
        *(int8x8_t *)&v224.u32[2] = vqtbl1_s8((int8x16_t)v225, (int8x8_t)*(_OWORD *)&vextq_s8(v189, v189, 8uLL));
        v228 = *(float32x4_t *)(v167 + 352);
        v229 = vminq_f32(vmaxq_f32(vrecpeq_f32(v224), v228), v175);
        v230 = vminq_f32(vmaxq_f32(vmulq_f32(v229, vrecpsq_f32(v224, v229)), v228), v175);
        v231 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v167 + 368), (int8x16_t)v227, (int8x16_t)vmulq_f32(v230, vrecpsq_f32(v224, v230)));
        v232 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 0xCuLL), (float32x4_t)vrev64q_s32((int32x4_t)v231));
        v233 = (float32x4_t)vbslq_s8(v196, vandq_s8((int8x16_t)v188, (int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL), v231)), (int8x16_t)v231);
        v234 = (float32x4_t)vbslq_s8(v195, (int8x16_t)vmulq_f32(v169, v233), (int8x16_t)v233);
        v235 = (float32x4_t)vbslq_s8(v195, v232, (int8x16_t)vmulq_f32(v174, (float32x4_t)vextq_s8((int8x16_t)v234, (int8x16_t)v234, 4uLL)));
        v236 = (float32x4_t)vbslq_s8(v195, (int8x16_t)vmulq_f32(v234, v235), (int8x16_t)v233);
        v237 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL), vmulq_laneq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.f32, 1), v236, 2).f32[0]), (int8x16_t)v236);
        v238 = (float32x4_t)vbslq_s8(v209, vandq_s8((int8x16_t)v188, (int8x16_t)vcgtq_f32(v237, v228)), (int8x16_t)v237);
        v239 = (float32x4_t)vbslq_s8(v190, (int8x16_t)vmulq_f32(*(float32x4_t *)(v167 + 384), v238), (int8x16_t)v238);
        v240 = (float32x4_t)vbslq_s8(v209, (int8x16_t)vmulq_f32(vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v172.i8, 0)), v239), (int8x16_t)v239);
        v240.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v228, v240), (int8x16_t)vrev64q_s32(*(int32x4_t *)&v240), *(int8x16_t *)&v228).i64[1];
        v241 = (int32x4_t)vbslq_s8(v196, (int8x16_t)vminq_f32(v240, v194), (int8x16_t)v240);
        *(int8x16_t *)(*(_QWORD *)&v8 + 16 * v10) = vbslq_s8(v195, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v241), v228), (int8x16_t)v241, vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL)), *(int8x16_t *)(v167 + 400));
      }
      v6 = vaddq_f32(v6, v7);
      *(_QWORD *)&v8 += v9;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t LiHeShadowProgramPCSS::GetDOD(LiHeShadowProgramPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;

  v4 = &HGRectInfinite;
  if (a3)
    v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

uint64_t LiHeShadowProgramPCSS::GetROI(LiHeShadowProgramPCSS *this, HGRenderer *a2, int a3, HGRect a4)
{
  return 0;
}

void LiHeShadowProgramPCSS::LiHeShadowProgramPCSS(LiHeShadowProgramPCSS *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6582D70;
  v3 = operator new();
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = xmmword_1B355C520;
  *(int32x4_t *)(v3 + 192) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 208) = xmmword_1B355C530;
  *(_OWORD *)(v3 + 224) = xmmword_1B355C540;
  *(_OWORD *)(v3 + 240) = xmmword_1B355C550;
  *(_OWORD *)(v3 + 256) = xmmword_1B355C560;
  *(_OWORD *)(v3 + 272) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 304) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 320) = xmmword_1B355C570;
  *(_OWORD *)(v3 + 336) = xmmword_1B3050FE0;
  *(_QWORD *)&v4 = 0xFFFFFFFFLL;
  *((_QWORD *)&v4 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(v3 + 352) = xmmword_1B355C580;
  *(_OWORD *)(v3 + 368) = v4;
  *(_OWORD *)(v3 + 384) = xmmword_1B355C590;
  *(_OWORD *)(v3 + 400) = xmmword_1B304EFF0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD7A88(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6582D70;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C407DC911DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeShadowProgramPCSS::~LiHeShadowProgramPCSS(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeShadowProgramPCSS::SetParameter(LiHeShadowProgramPCSS *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 0xA)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeShadowProgramPCSS::GetParameter(LiHeShadowProgramPCSS *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 0xA)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *LiHeShadowProgramSoft::GetProgram(LiHeShadowProgramSoft *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004f1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.y = dot(r0.xyz, 1.00000h);\n"
             "    r1.x = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r2.x = r1.x*half(hg_Params[0].w);\n"
             "    r1.w = r1.y*c0.w;\n"
             "    r1.x = fmin(r1.w, c0.x);\n"
             "    r2.y = r2.x*half(hg_Params[0].w);\n"
             "    r1.xyz = r1.xxx*half3(hg_Params[0].xyz);\n"
             "    r1 = r2.xxxy*r1;\n"
             "    r0 = select(r0, r1, -half4(hg_Params[1].xxxx) < 0.00000h);\n"
             "    r2.x = c0.x - r2.x;\n"
             "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
             "    output.color0.xyz = select(float3(r1.xyz), float3(r0.xyz), -fabs(hg_Params[1].xxx) < 0.00000h);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ec1e19ab:fed14f6b:8580d8b4:f7462dfb\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004b6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.y = dot(r0.xyz, 1.00000f);\n"
             "    r1.x = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).x;\n"
             "    r2.x = r1.x*hg_Params[0].w;\n"
             "    r1.w = r1.y*c0.w;\n"
             "    r1.x = fmin(r1.w, c0.x);\n"
             "    r2.y = r2.x*hg_Params[0].w;\n"
             "    r1.xyz = r1.xxx*hg_Params[0].xyz;\n"
             "    r1 = r2.xxxy*r1;\n"
             "    r0 = select(r0, r1, -hg_Params[1].xxxx < 0.00000f);\n"
             "    r2.x = c0.x - r2.x;\n"
             "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
             "    output.color0.xyz = select(r1.xyz, r0.xyz, -fabs(hg_Params[1].xxx) < 0.00000f);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=04a4f7a2:b09ba2de:3c1fdedc:8ce5d38c\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000583\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.y = dot(r0.xyz, vec3(1.00000));\n"
           "    r1.x = texture2D(hg_Texture1, hg_TexCoord1.xy).x;\n"
           "    r2.x = r1.x*hg_ProgramLocal0.w;\n"
           "    r1.w = r1.y*c0.w;\n"
           "    r1.x = min(r1.w, c0.x);\n"
           "    r2.y = r2.x*hg_ProgramLocal0.w;\n"
           "    r1.xyz = r1.xxx*hg_ProgramLocal0.xyz;\n"
           "    r1 = r2.xxxy*r1;\n"
           "    r0 = vec4(-hg_ProgramLocal1.x < 0.00000 ? r1.x : r0.x, -hg_ProgramLocal1.x < 0.00000 ? r1.y : r0.y, -hg_P"
           "rogramLocal1.x < 0.00000 ? r1.z : r0.z, -hg_ProgramLocal1.x < 0.00000 ? r1.w : r0.w);\n"
           "    r2.x = c0.x - r2.x;\n"
           "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
           "    gl_FragColor.xyz = vec3(-abs(hg_ProgramLocal1.x) < 0.00000 ? r0.x : r1.x, -abs(hg_ProgramLocal1.x) < 0.00"
           "000 ? r0.y : r1.y, -abs(hg_ProgramLocal1.x) < 0.00000 ? r0.z : r1.z);\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=2737da65:6525a9f8:07553ebd:c29f6e0e\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void LiHeShadowProgramSoft::InitProgramDescriptor(LiHeShadowProgramSoft *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeShadowProgramSoft_hgc_visible", "//Metal1.0     \n//LEN=000000031a\n[[ visible ]] FragmentOut LiHeShadowProgramSoft_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.3333333433);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.y = dot(r0.xyz, 1.00000f);\n"
    "    r1.x = color1.x;\n"
    "    r2.x = r1.x*hg_Params[0].w;\n"
    "    r1.w = r1.y*c0.w;\n"
    "    r1.x = fmin(r1.w, c0.x);\n"
    "    r2.y = r2.x*hg_Params[0].w;\n"
    "    r1.xyz = r1.xxx*hg_Params[0].xyz;\n"
    "    r1 = r2.xxxy*r1;\n"
    "    r0 = select(r0, r1, -hg_Params[1].xxxx < 0.00000f);\n"
    "    r2.x = c0.x - r2.x;\n"
    "    r1.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
    "    output.color0.xyz = select(r1.xyz, r0.xyz, -fabs(hg_Params[1].xxx) < 0.00000f);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD7C90()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeShadowProgramSoft");
}

void sub_1B2DD7CA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD7DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD7E28()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD7E20);
}

_QWORD *LiHeShadowProgramSoft::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeShadowProgramSoft [hgc1]");
}

uint64_t LiHeShadowProgramSoft::BindTexture(LiHeShadowProgramSoft *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeShadowProgramSoft::Bind(LiHeShadowProgramSoft *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(LiHeShadowProgramSoft *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeShadowProgramSoft::RenderTile(LiHeShadowProgramSoft *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x8_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t *v61;
  uint64_t v62;
  float32x4_t v63;
  uint64_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 12);
    v7 = 16 * *((int *)a2 + 22);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * *((int *)a2 + 26);
    v10 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v62) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v8 + v12 - 32);
          v14 = *(float32x4_t *)(v8 + v12 - 16);
          v15 = *(float32x4_t *)(v8 + v12);
          v16 = *(float32x4_t *)(v8 + v12 + 16);
          v17 = *((_QWORD *)this + 51);
          v19 = *(int8x16_t *)(v17 + 32);
          v18 = *(float32x4_t *)(v17 + 48);
          v20 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12 - 32), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), vaddq_f32(v13, (float32x4_t)vrev64q_s32((int32x4_t)v13))));
          v21 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12 - 16), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL), vaddq_f32(v14, (float32x4_t)vrev64q_s32((int32x4_t)v14))));
          v22 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), vaddq_f32(v15, (float32x4_t)vrev64q_s32((int32x4_t)v15))));
          v23 = (float32x4_t)vbslq_s8(v19, *(int8x16_t *)(v6 + v12 + 16), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL), vaddq_f32(v16, (float32x4_t)vrev64q_s32((int32x4_t)v16))));
          v24 = (int8x16_t)vmulq_laneq_f32(v20, *(float32x4_t *)v17, 3);
          v25 = (int8x16_t)vmulq_laneq_f32(v21, *(float32x4_t *)v17, 3);
          v26 = (int8x16_t)vmulq_laneq_f32(v22, *(float32x4_t *)v17, 3);
          v27 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
          v28 = (int8x16_t)vmulq_laneq_f32(v23, *(float32x4_t *)v17, 3);
          v29 = vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          v30 = (int8x16_t)vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
          v31 = (int8x16_t)vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          v32 = (int8x16_t)vmulq_f32(v18, v27);
          v33.i64[0] = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL), v18).u64[0];
          v34.i64[0] = vminq_f32((float32x4_t)vextq_s8(v30, v30, 0xCuLL), v18).u64[0];
          v35 = (float32x4_t)vextq_s8(*(int8x16_t *)v17, *(int8x16_t *)v17, 8uLL);
          v36.i64[0] = vminq_f32((float32x4_t)vextq_s8(v31, v31, 0xCuLL), v18).u64[0];
          v37 = (float32x4_t)vbslq_s8(v19, v24, (int8x16_t)vmulq_n_f32(v35, *(float *)v24.i32));
          v38 = (float32x4_t)vbslq_s8(v19, v25, (int8x16_t)vmulq_n_f32(v35, *(float *)v25.i32));
          v39 = (float32x4_t)vbslq_s8(v19, v26, (int8x16_t)vmulq_n_f32(v35, *(float *)v26.i32));
          v40 = (float32x4_t)vbslq_s8(v19, v28, (int8x16_t)vmulq_n_f32(v35, *(float *)v28.i32));
          v41 = *(int8x16_t *)(v17 + 64);
          v42 = *(int8x16_t *)(v17 + 80);
          *(int8x8_t *)v43.f32 = vqtbl1_s8((int8x16_t)v37, *(int8x8_t *)v42.i8);
          v44 = (int8x8_t)vextq_s8(v42, v42, 8uLL).u64[0];
          v33.i64[1] = v29.i64[1];
          *(int8x8_t *)&v43.u32[2] = vqtbl1_s8((int8x16_t)v37, v44);
          *(int8x8_t *)v29.f32 = vqtbl1_s8((int8x16_t)v38, *(int8x8_t *)v42.i8);
          v34.i64[1] = v30.i64[1];
          *(int8x8_t *)&v29.u32[2] = vqtbl1_s8((int8x16_t)v38, v44);
          v36.i64[1] = v31.i64[1];
          v31.i64[0] = vminq_f32((float32x4_t)vextq_s8(v32, v32, 0xCuLL), v18).u64[0];
          v31.i64[1] = v32.i64[1];
          v45 = (float32x4_t)vbslq_s8(v41, v33, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v33.i32));
          *(int8x8_t *)v33.i8 = vqtbl1_s8((int8x16_t)v39, *(int8x8_t *)v42.i8);
          v33.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v39, v44);
          v46 = (float32x4_t)vbslq_s8(v41, v34, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v34.i32));
          *(int8x8_t *)v34.i8 = vqtbl1_s8((int8x16_t)v40, *(int8x8_t *)v42.i8);
          v34.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v40, v44);
          v47 = (float32x4_t)vbslq_s8(v41, v31, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v31.i32));
          v48 = vmulq_f32(v43, v45);
          v49 = vmulq_f32(v29, v46);
          v50 = vmulq_f32((float32x4_t)v33, (float32x4_t)vbslq_s8(v41, v36, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v17, *(float *)v36.i32)));
          v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v17 + 16), 0);
          v52 = vmulq_f32((float32x4_t)v34, v47);
          v53 = *(float32x4_t *)(v17 + 96);
          v54 = (int8x16_t)vcgtq_f32(v51, v53);
          v55 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v48, (int8x16_t)v13);
          v56 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v49, (int8x16_t)v14);
          v57 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v50, (int8x16_t)v15);
          v58 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v52, (int8x16_t)v16);
          v37.i32[0] = vsubq_f32(v18, v37).u32[0];
          v38.i32[0] = vsubq_f32(v18, v38).u32[0];
          v39.i32[0] = vsubq_f32(v18, v39).u32[0];
          v59 = (int8x16_t)vaddq_f32(v52, vmulq_n_f32(v58, vsubq_f32(v18, v40).f32[0]));
          v60 = (int8x16_t)vceqq_f32(v51, v53);
          v61 = (int8x16_t *)(v5 + v12);
          v61[-2] = vbslq_s8(v41, (int8x16_t)v55, vbslq_s8(v60, (int8x16_t)v55, (int8x16_t)vaddq_f32(v48, vmulq_n_f32(v55, v37.f32[0]))));
          v61[-1] = vbslq_s8(v41, (int8x16_t)v56, vbslq_s8(v60, (int8x16_t)v56, (int8x16_t)vaddq_f32(v49, vmulq_n_f32(v56, v38.f32[0]))));
          *v61 = vbslq_s8(v41, (int8x16_t)v57, vbslq_s8(v60, (int8x16_t)v57, (int8x16_t)vaddq_f32(v50, vmulq_n_f32(v57, v39.f32[0]))));
          v61[1] = vbslq_s8(v41, (int8x16_t)v58, vbslq_s8(v60, (int8x16_t)v58, v59));
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v62) = -v11;
      }
      if ((int)v62 < v4)
      {
        v62 = v62;
        do
        {
          v63 = *(float32x4_t *)(v8 + 16 * v62);
          v64 = *((_QWORD *)this + 51);
          v65 = *(int8x16_t *)(v64 + 32);
          v66 = *(float32x4_t *)(v64 + 48);
          v67 = (float32x4_t)vbslq_s8(v65, *(int8x16_t *)(v6 + 16 * v62), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 4uLL), vaddq_f32(v63, (float32x4_t)vrev64q_s32((int32x4_t)v63))));
          v68 = vmulq_laneq_f32(v67, *(float32x4_t *)v64, 3);
          v69 = (int8x16_t)vmulq_f32(v66, (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL));
          v70 = (float32x4_t)vbslq_s8(v65, (int8x16_t)v68, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(*(int8x16_t *)v64, *(int8x16_t *)v64, 8uLL), v68.f32[0]));
          v68.i64[0] = vminq_f32((float32x4_t)vextq_s8(v69, v69, 0xCuLL), v66).u64[0];
          v68.i64[1] = v69.i64[1];
          v71 = *(int8x16_t *)(v64 + 64);
          v72 = *(int8x16_t *)(v64 + 80);
          v73 = (float32x4_t)vbslq_s8(v71, (int8x16_t)v68, (int8x16_t)vmulq_n_f32(*(float32x4_t *)v64, v68.f32[0]));
          *(int8x8_t *)v68.f32 = vqtbl1_s8((int8x16_t)v70, *(int8x8_t *)v72.i8);
          *(int8x8_t *)&v68.u32[2] = vqtbl1_s8((int8x16_t)v70, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
          v74 = vmulq_f32(v68, v73);
          v75 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v64 + 16), 0);
          v76 = *(float32x4_t *)(v64 + 96);
          v77 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v75, v76), (int8x16_t)v74, (int8x16_t)v63);
          *(int8x16_t *)(v5 + 16 * v62++) = vbslq_s8(v71, (int8x16_t)v77, vbslq_s8((int8x16_t)vceqq_f32(v75, v76), (int8x16_t)v77, (int8x16_t)vaddq_f32(v74, vmulq_n_f32(v77, vsubq_f32(v66, v70).f32[0]))));
        }
        while (v62 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeShadowProgramSoft::GetDOD(LiHeShadowProgramSoft *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeShadowProgramSoft::GetROI(LiHeShadowProgramSoft *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeShadowProgramSoft::LiHeShadowProgramSoft(LiHeShadowProgramSoft *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6582FD8;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 48) = xmmword_1B355C5C0;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051490;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD83A4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeShadowProgramSoft::~LiHeShadowProgramSoft(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6582FD8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AC4F46D1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeShadowProgramSoft::~LiHeShadowProgramSoft(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeShadowProgramSoft::SetParameter(LiHeShadowProgramSoft *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeShadowProgramSoft::GetParameter(LiHeShadowProgramSoft *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcSolidRendererBumpMap::GetProgram(HgcSolidRendererBumpMap *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000827\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r2.x = dot(r1, half4(hg_Params[2]));\n"
             "    r0.x = dot(r0, half4(hg_Params[2]));\n"
             "    r0.z = r0.x*c0.z + r2.x;\n"
             "    r3 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r2.y = dot(r3, half4(hg_Params[2]));\n"
             "    r3 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r2.z = dot(r3, half4(hg_Params[2]));\n"
             "    r2.w = r0.z + r2.y;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r0.y = dot(r0, half4(hg_Params[2]));\n"
             "    r4 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r4.x = dot(r4, half4(hg_Params[2]));\n"
             "    r4.x = r4.x*c0.z + r0.y;\n"
             "    r4.z = r4.x + r2.z;\n"
             "    r0.x = r2.w - r4.z;\n"
             "    r5 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    s0.xy = float2(r0.xy);\n"
             "    r2.w = dot(r5, half4(hg_Params[2]));\n"
             "    r5 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r5.x = dot(r5, half4(hg_Params[2]));\n"
             "    s0.z = float(r2.w)*float(c0.z) + float(r2.x);\n"
             "    r5.x = r5.x*c0.z + r2.y;\n"
             "    r5.y = half(s0.y) + half(s0.z);\n"
             "    r5.x = r2.z + r5.x;\n"
             "    s0.y = float(r5.y) - float(r5.x);\n"
             "    r5.z = half(hg_Params[0].z)*c0.x;\n"
             "    r5.x = select(r5.z, -r5.z, half(hg_Params[1].x) < 0.00000h);\n"
             "    r5.z = c0.y;\n"
             "    r5.xy = half2(s0.xy)*r5.xx;\n"
             "    r5.w = dot(r5.xyz, r5.xyz);\n"
             "    r5.w = rsqrt(r5.w);\n"
             "    output.color0.xyz = float3(r5.xyz)*float3(r5.www);\n"
             "    output.color0.w = float(c0.y);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b02ff63d:5075d64b:abb44289:27f3515b\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0003:0007:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000724\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r1.x = dot(r1, hg_Params[2]);\n"
             "    r0.x = dot(r0, hg_Params[2]);\n"
             "    r0.z = r0.x*c0.z + r1.x;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r1.y = dot(r2, hg_Params[2]);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r1.z = dot(r2, hg_Params[2]);\n"
             "    r1.w = r0.z + r1.y;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r2.y = dot(r2, hg_Params[2]);\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r0.x = dot(r0, hg_Params[2]);\n"
             "    r0.x = r0.x*c0.z + r2.y;\n"
             "    r0.z = r0.x + r1.z;\n"
             "    r2.x = r1.w - r0.z;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r1.w = dot(r0, hg_Params[2]);\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r0.x = dot(r0, hg_Params[2]);\n"
             "    r2.z = r1.w*c0.z + r1.x;\n"
             "    r0.x = r0.x*c0.z + r1.y;\n"
             "    r0.y = r2.y + r2.z;\n"
             "    r0.x = r1.z + r0.x;\n"
             "    r2.y = r0.y - r0.x;\n"
             "    r1.z = hg_Params[0].z*c0.x;\n"
             "    r1.x = select(r1.z, -r1.z, hg_Params[1].x < 0.00000f);\n"
             "    r1.z = c0.y;\n"
             "    r1.xy = r2.xy*r1.xx;\n"
             "    r1.w = dot(r1.xyz, r1.xyz);\n"
             "    r1.w = rsqrt(r1.w);\n"
             "    output.color0.xyz = r1.xyz*r1.www;\n"
             "    output.color0.w = c0.y;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d5163f50:b9b29186:c5c889b3:ddee76a0\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0003:0003:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007f7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "varying highp vec4 hg_TexCoord6;\n"
           "varying highp vec4 hg_TexCoord7;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord4.xy);\n"
           "    r1.x = dot(r1, hg_ProgramLocal2);\n"
           "    r0.x = dot(r0, hg_ProgramLocal2);\n"
           "    r0.z = r0.x*c0.z + r1.x;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord5.xy);\n"
           "    r1.y = dot(r2, hg_ProgramLocal2);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord6.xy);\n"
           "    r1.z = dot(r2, hg_ProgramLocal2);\n"
           "    r1.w = r0.z + r1.y;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord7.xy);\n"
           "    r2.y = dot(r2, hg_ProgramLocal2);\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord1.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal2);\n"
           "    r0.x = r0.x*c0.z + r2.y;\n"
           "    r0.z = r0.x + r1.z;\n"
           "    r2.x = r1.w - r0.z;\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r1.w = dot(r0, hg_ProgramLocal2);\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r0.x = dot(r0, hg_ProgramLocal2);\n"
           "    r2.z = r1.w*c0.z + r1.x;\n"
           "    r0.x = r0.x*c0.z + r1.y;\n"
           "    r0.y = r2.y + r2.z;\n"
           "    r0.x = r1.z + r0.x;\n"
           "    r2.y = r0.y - r0.x;\n"
           "    r1.z = hg_ProgramLocal0.z*c0.x;\n"
           "    r1.x = hg_ProgramLocal1.x < 0.00000 ? -r1.z : r1.z;\n"
           "    r1.z = c0.y;\n"
           "    r1.xy = r2.xy*r1.xx;\n"
           "    r1.w = dot(r1.xyz, r1.xyz);\n"
           "    r1.w = inversesqrt(r1.w);\n"
           "    gl_FragColor.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor.w = c0.y;\n"
           "}\n"
           "//MD5=1f61d63d:88e928e0:dd637bf7:5069746a\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0003:0003:0000:0000:0000:0000:0000:0008:01:0:1:0\n";
  }
}

void HgcSolidRendererBumpMap::InitProgramDescriptor(HgcSolidRendererBumpMap *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSolidRendererBumpMap_hgc_visible", "//Metal1.0     \n//LEN=00000006de\n[[ visible ]] FragmentOut HgcSolidRendererBumpMap_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3,\n    float4 texCoord4,\n    float4 texCoord5,\n    float4 texCoord6,\n    float4 texCoord7)\n{\n    const float4 c0 = float4(0.2500000000, 1.000000000, 2.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord4.xy);\n"
    "    r1.x = dot(r1, hg_Params[2]);\n"
    "    r0.x = dot(r0, hg_Params[2]);\n"
    "    r0.z = r0.x*c0.z + r1.x;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord5.xy);\n"
    "    r1.y = dot(r2, hg_Params[2]);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord6.xy);\n"
    "    r1.z = dot(r2, hg_Params[2]);\n"
    "    r1.w = r0.z + r1.y;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord7.xy);\n"
    "    r2.y = dot(r2, hg_Params[2]);\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord1.xy);\n"
    "    r0.x = dot(r0, hg_Params[2]);\n"
    "    r0.x = r0.x*c0.z + r2.y;\n"
    "    r0.z = r0.x + r1.z;\n"
    "    r2.x = r1.w - r0.z;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r1.w = dot(r0, hg_Params[2]);\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r0.x = dot(r0, hg_Params[2]);\n"
    "    r2.z = r1.w*c0.z + r1.x;\n"
    "    r0.x = r0.x*c0.z + r1.y;\n"
    "    r0.y = r2.y + r2.z;\n"
    "    r0.x = r1.z + r0.x;\n"
    "    r2.y = r0.y - r0.x;\n"
    "    r1.z = hg_Params[0].z*c0.x;\n"
    "    r1.x = select(r1.z, -r1.z, hg_Params[1].x < 0.00000f);\n"
    "    r1.z = c0.y;\n"
    "    r1.xy = r2.xy*r1.xx;\n"
    "    r1.w = dot(r1.xyz, r1.xyz);\n"
    "    r1.w = rsqrt(r1.w);\n"
    "    output.color0.xyz = r1.xyz*r1.www;\n"
    "    output.color0.w = c0.y;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD85AC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSolidRendererBumpMap");
}

void sub_1B2DD85BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD88FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD8984()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD897CLL);
}

_QWORD *HgcSolidRendererBumpMap::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSolidRendererBumpMap [hgc1]");
}

uint64_t HgcSolidRendererBumpMap::BindTexture(HgcSolidRendererBumpMap *this, HGHandler *a2, int a3)
{
  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, -1.0, 0.0, 0.0);
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, -1.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 5, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, -1.0, 1.0, 0.0);
  HGHandler::TexCoord(a2, 6, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 1.0, 1.0, 0.0);
  HGHandler::TexCoord(a2, 7, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 1.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 1.0, 0.0, 0.0);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 0.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 0.0, 1.0, 0.0);
  return 0;
}

uint64_t HgcSolidRendererBumpMap::Bind(HgcSolidRendererBumpMap *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcSolidRendererBumpMap *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSolidRendererBumpMap::RenderTile(HgcSolidRendererBumpMap *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int64x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int64x2_t v86;
  int64x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int8x16_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t *v145;
  uint64_t v146;
  float32x4_t *v147;
  float32x4_t *v148;
  uint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  float32x4_t v168;
  int64x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((int *)a2 + 22);
    v6 = *((int *)a2 + 6);
    v7 = *((_QWORD *)a2 + 2);
    v8 = *((_QWORD *)a2 + 10);
    v9 = 16 * v5;
    v10 = v8 + 16 * v5;
    v11 = ~(_DWORD)v5;
    v12 = 16 * v6;
    v13 = v8 + 16;
    do
    {
      if (v4 < 4)
      {
        v15 = 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
        for (i = v4; i > 3; i -= 4)
        {
          v17 = *((_QWORD *)this + 51);
          v19 = *(float32x4_t *)(v17 + 32);
          v18 = *(float32x4_t *)(v17 + 48);
          v20 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v11 + v15)), v19);
          v21 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v15 - v5)), v19);
          v22 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 1)), v19);
          v23 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 2)), v19);
          v24 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v25 = vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL));
          v26 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL));
          v27 = vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL));
          v28 = vmulq_f32(*(float32x4_t *)(v8 + v14 - 16), v19);
          v29 = vmulq_f32(*(float32x4_t *)(v8 + v14), v19);
          v30 = vmulq_f32(*(float32x4_t *)(v8 + v14 + 16), v19);
          v31 = (int8x16_t)vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL));
          v32 = vmulq_f32(*(float32x4_t *)(v8 + v14 + 32), v19);
          v33 = (int8x16_t)vaddq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL));
          v34 = vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL));
          v35 = vaddq_f32(v29, (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL));
          v36 = vaddq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL));
          v37 = (int32x4_t)vaddq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL));
          v38 = vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          v39 = (int32x4_t)vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL));
          v40 = vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL));
          v41 = vaddq_f32(v38, (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL));
          v42 = (float32x4_t)vextq_s8(v31, v31, 8uLL);
          v43 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 - 16));
          v44 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14));
          v45 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 16));
          v30.i32[0] = vaddq_f32(v34, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2)).u32[0];
          v46 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 32));
          v47 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v48 = vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL));
          v49 = vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL));
          v50 = vaddq_f32(v46, (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL));
          v51 = (int8x16_t)vaddq_f32(v47, (float32x4_t)vdupq_laneq_s64((int64x2_t)v47, 1));
          v52 = vaddq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL));
          v53 = vaddq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL));
          v54 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL));
          v56 = *(int8x16_t *)(v17 + 64);
          v55 = *(int8x16_t *)(v17 + 80);
          v57 = vbslq_s8(v56, v33, (int8x16_t)v52);
          v58 = vbslq_s8(v56, (int8x16_t)v37, (int8x16_t)v53);
          v59 = vbslq_s8(v56, (int8x16_t)v39, (int8x16_t)v54);
          v60 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 48));
          v61 = vmulq_n_f32(v18, vaddq_f32(v35, (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2)).f32[0]);
          v62 = vmulq_f32(v19, *(float32x4_t *)(v10 + v14 + 64));
          v63 = vaddq_f32(v60, (float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL));
          v64 = vaddq_f32(v62, (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL));
          v65 = vbslq_s8(v56, v31, v51);
          v66 = vaddq_f32(v63, (float32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL));
          v67 = (int8x16_t)vaddq_f32(v64, (float32x4_t)vdupq_lane_s64(v64.i64[0], 0));
          v68 = (int32x4_t)vaddq_f32(v42, vmulq_n_f32(v18, v30.f32[0]));
          v69 = (float32x4_t)vextq_s8(v67, v59, 8uLL);
          v59.i64[1] = v67.i64[1];
          v70 = (float32x4_t)vextq_s8((int8x16_t)v53, v65, 8uLL);
          v65.i64[1] = v53.i64[1];
          v71 = (float32x4_t)vextq_s8((int8x16_t)v54, v57, 8uLL);
          v57.i64[1] = v54.i64[1];
          v72 = (float32x4_t)vextq_s8((int8x16_t)v66, v58, 8uLL);
          v58.i64[1] = v66.i64[1];
          v73 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), vmulq_n_f32(v18, v40.f32[0]))), v72), v58);
          v74 = vmulq_f32(v19, *(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 3)));
          v75 = vmulq_f32(v19, *(float32x4_t *)(v8 + 16 * (int)(v15 - v5 + 4)));
          v76 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v68), v70);
          v77 = vaddq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL));
          v78 = vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL));
          v79 = vaddq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL));
          v80 = (int32x4_t)vaddq_f32(v78, (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
          v81 = vmulq_f32(v19, *(float32x4_t *)(v8 + v14 + 48));
          v82 = (int64x2_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), vmulq_n_f32(v18, v41.f32[0]))), v69), v59);
          v83 = vmulq_f32(v19, *(float32x4_t *)(v8 + v14 + 64));
          v84 = vaddq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL));
          v85 = vaddq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL));
          v86 = (int64x2_t)vbslq_s8(v55, v76, v65);
          v87 = (int64x2_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v33, v33, 8uLL), v61)), v71), v57);
          v88 = (float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 0xCuLL);
          v89 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL);
          v90 = vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v37), vmulq_laneq_f32(v40, v18, 3)), (float32x4_t)vdupq_laneq_s64(v86, 1));
          v91 = vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v39), vmulq_laneq_f32(v41, v18, 3)), (float32x4_t)vdupq_laneq_s64(v87, 1));
          v92 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 0xCuLL), vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v80), vmulq_laneq_f32(vaddq_f32(v85, (float32x4_t)vdupq_laneq_s64((int64x2_t)v85, 1)), v18, 3)), (float32x4_t)vdupq_laneq_s64(v82, 1)));
          v93 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 0xCuLL), vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v79), vmulq_laneq_f32(vaddq_f32(v84, (float32x4_t)vdupq_laneq_s64((int64x2_t)v84, 1)), v18, 3)), (float32x4_t)vdupq_laneq_s64((int64x2_t)v73, 1))), (int8x16_t)v79);
          v94 = (float32x4_t)vbslq_s8(v55, v33, v65);
          v95 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v37, v57);
          v96 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v39, v58);
          v97 = (float32x4_t)vbslq_s8(v55, (int8x16_t)v79, v59);
          v98 = (float32x4_t)vbslq_s8(v56, v92, (int8x16_t)v80);
          v99 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v94.i64[0], 0), vmulq_laneq_f32(v18, v94, 3));
          v100 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v95.i64[0], 0), vmulq_laneq_f32(v18, v95, 3));
          v101 = vaddq_f32((float32x4_t)vdupq_lane_s64(v96.i64[0], 0), vmulq_laneq_f32(v18, v96, 3));
          v102 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32(v88, v90), (int8x16_t)v37);
          v103 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v97.i64[0], 0), vmulq_laneq_f32(v18, v97, 3));
          v104 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32(v89, v91), (int8x16_t)v39);
          *(int8x8_t *)v91.f32 = vext_s8(*(int8x8_t *)v93.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), 4uLL);
          v80.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v93, 0xCuLL).u64[0];
          *(int8x8_t *)v73.f32 = vext_s8(*(int8x8_t *)v102.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), 4uLL);
          v88.i64[0] = vextq_s8(v99, (int8x16_t)v102, 0xCuLL).u64[0];
          v93.i64[1] = v101.i64[1];
          *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v104.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL), 4uLL);
          v59.i64[0] = vextq_s8(v100, (int8x16_t)v104, 0xCuLL).u64[0];
          *(int8x8_t *)v101.f32 = vext_s8(*(int8x8_t *)v98.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL), 4uLL);
          v89.i64[0] = vextq_s8(v103, (int8x16_t)v98, 0xCuLL).u64[0];
          v98.i64[1] = v103.i64[1];
          v102.i64[1] = v99.i64[1];
          v105 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v52, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v94));
          v106 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v53, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v95));
          v104.i64[1] = v100.i64[1];
          v107 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v54, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v96));
          v73.i64[1] = v88.i64[0];
          v79.i64[1] = v59.i64[0];
          v108 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(v66, v18, 3), (float32x4_t)vrev64q_s32((int32x4_t)v97));
          v91.i64[1] = v80.i64[0];
          v101.i64[1] = v89.i64[0];
          v109 = (int8x16_t)vaddq_f32(v102, v73);
          v110 = (int8x16_t)vaddq_f32(v104, v79);
          v111 = (int8x16_t)vaddq_f32(v93, v91);
          v112 = (int8x16_t)vaddq_f32(v98, v101);
          v113 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), (float32x4_t)vbslq_s8(v56, v105, v109)), v109);
          v114 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL), (float32x4_t)vbslq_s8(v56, v107, v111)), v111);
          v115 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL), (float32x4_t)vbslq_s8(v56, v106, v110)), v110);
          v116 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL), (float32x4_t)vbslq_s8(v56, v108, v112)), v112);
          v117 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v93, (int8x16_t)vsubq_f32(v114, (float32x4_t)vrev64q_s32((int32x4_t)v114)));
          v118 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v98, (int8x16_t)vsubq_f32(v116, (float32x4_t)vrev64q_s32((int32x4_t)v116)));
          v119 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v102, (int8x16_t)vsubq_f32(v113, (float32x4_t)vrev64q_s32((int32x4_t)v113)));
          v120 = *(float32x4_t *)(v17 + 96);
          v121 = (int8x16_t)vmulq_f32(*(float32x4_t *)v17, v120);
          v122 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v104, (int8x16_t)vsubq_f32(v115, (float32x4_t)vrev64q_s32((int32x4_t)v115)));
          v123 = veorq_s8(vandq_s8(*(int8x16_t *)(v17 + 16), *(int8x16_t *)(v17 + 112)), vextq_s8(v121, v121, 8uLL));
          v119.i64[0] = vmulq_n_f32(v119, *(float *)v123.i32).u64[0];
          v98.i64[0] = vmulq_n_f32(v117, *(float *)v123.i32).u64[0];
          v117.i64[0] = vmulq_n_f32(v122, *(float *)v123.i32).u64[0];
          v122.i64[0] = vmulq_n_f32(v118, *(float *)v123.i32).u64[0];
          v123.i32[2] = 1.0;
          v119.i64[1] = v123.i64[1];
          v117.i64[1] = v123.i64[1];
          v98.i64[1] = v123.i64[1];
          v122.i64[1] = v123.i64[1];
          v124 = (int32x4_t)vmulq_f32(v119, v119);
          v125 = (int32x4_t)vmulq_f32(v117, v117);
          v126 = (int32x4_t)vmulq_f32(v98, v98);
          v127 = (int32x4_t)vmulq_f32(v122, v122);
          v128 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v124), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL))), (int8x16_t)v119);
          v129 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v125), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL))), (int8x16_t)v117);
          v130 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v126), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL))), (int8x16_t)v98);
          v131 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v127), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL))), (int8x16_t)v122);
          v132 = *(float32x4_t *)(v17 + 128);
          v133 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v128)), v132);
          v134 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v129)), v132);
          v135 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v130)), v132);
          v136 = vminq_f32(vmulq_f32(v120, vrsqrteq_f32(v131)), v132);
          v137 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v133, vrsqrtsq_f32(vmulq_f32(v133, v128), v133)), (int8x16_t)v119);
          v138 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v134, vrsqrtsq_f32(vmulq_f32(v134, v129), v134)), (int8x16_t)v117);
          v139 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v135, vrsqrtsq_f32(vmulq_f32(v135, v130), v135)), (int8x16_t)v98);
          v140 = (float32x4_t)vbslq_s8(v55, (int8x16_t)vmulq_f32(v136, vrsqrtsq_f32(vmulq_f32(v136, v131), v136)), (int8x16_t)v122);
          v141 = vmulq_laneq_f32(v137, v137, 3);
          v142 = vmulq_laneq_f32(v138, v138, 3);
          v143 = vmulq_laneq_f32(v139, v139, 3);
          v141.i32[3] = 1.0;
          v142.i32[3] = 1.0;
          v143.i32[3] = 1.0;
          v144 = vmulq_laneq_f32(v140, v140, 3);
          v144.i32[3] = 1.0;
          v145 = (float32x4_t *)(v7 + v14);
          *v145 = v141;
          v145[1] = v142;
          v145[2] = v143;
          v145[3] = v144;
          v15 += 4;
          v14 += 64;
        }
      }
      if ((int)v15 < v4)
      {
        v146 = v15;
        v147 = (float32x4_t *)(v13 + 16 * v15);
        v148 = (float32x4_t *)(v13 + 16 * (v5 + v15));
        do
        {
          v149 = *((_QWORD *)this + 51);
          v150 = *(float32x4_t *)(v149 + 32);
          v151 = *(float32x4_t *)(v149 + 48);
          v152 = vmulq_f32(*(float32x4_t *)(v8 + 16 * (v11 + (int)v146)), v150);
          v153 = vaddq_f32(v152, (float32x4_t)vextq_s8((int8x16_t)v152, (int8x16_t)v152, 4uLL));
          v154 = (int8x16_t)vaddq_f32(v153, (float32x4_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL));
          v155 = vmulq_f32(v147[-2], v150);
          v156 = vaddq_f32(v155, (float32x4_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 4uLL));
          v157 = (int32x4_t)vaddq_f32((float32x4_t)vextq_s8(v154, v154, 8uLL), vmulq_n_f32(v151, vaddq_f32(v156, (float32x4_t)vdupq_laneq_s32((int32x4_t)v156, 2)).f32[0]));
          v158 = v148[-1];
          v159 = vmulq_f32(v150, v148[-2]);
          v160 = vaddq_f32(v159, (float32x4_t)vextq_s8((int8x16_t)v159, (int8x16_t)v159, 4uLL));
          v161 = *v148++;
          v162 = vmulq_f32(v150, v161);
          v163 = vaddq_f32(v162, (float32x4_t)vextq_s8((int8x16_t)v162, (int8x16_t)v162, 4uLL));
          v164 = *(int8x16_t *)(v149 + 64);
          v165 = *(int8x16_t *)(v149 + 80);
          v166 = vbslq_s8(v164, v154, (int8x16_t)vaddq_f32(v160, (float32x4_t)vdupq_laneq_s64((int64x2_t)v160, 1)));
          v167 = (int8x16_t)vaddq_f32(v163, (float32x4_t)vdupq_lane_s64(v163.i64[0], 0));
          v168 = (float32x4_t)vextq_s8(v167, v166, 8uLL);
          v166.i64[1] = v167.i64[1];
          v169 = (int64x2_t)vbslq_s8(v165, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v157), v168), v166);
          v170 = vmulq_f32(v150, *(float32x4_t *)(v8 + 16 * ((int)v146 - (int)v5 + 1)));
          v171 = vaddq_f32(v170, (float32x4_t)vextq_s8((int8x16_t)v170, (int8x16_t)v170, 4uLL));
          v172 = (int32x4_t)vaddq_f32(v171, (float32x4_t)vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL));
          v173 = *v147++;
          v174 = vmulq_f32(v150, v173);
          v175 = vaddq_f32(v174, (float32x4_t)vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL));
          v176 = (float32x4_t)vbslq_s8(v164, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 0xCuLL), vaddq_f32(vaddq_f32((float32x4_t)vrev64q_s32(v172), vmulq_laneq_f32(vaddq_f32(v175, (float32x4_t)vdupq_laneq_s64((int64x2_t)v175, 1)), v151, 3)), (float32x4_t)vdupq_laneq_s64(v169, 1))), (int8x16_t)v172);
          v177 = vmulq_f32(v150, *(float32x4_t *)(v8 + 16 * ((int)v146 - (int)v5)));
          v178 = vaddq_f32(v177, (float32x4_t)vextq_s8((int8x16_t)v177, (int8x16_t)v177, 4uLL));
          v179 = (float32x4_t)vbslq_s8(v165, (int8x16_t)vaddq_f32(v178, (float32x4_t)vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL)), v166);
          v180 = vmulq_f32(v150, v158);
          v181 = vaddq_f32(v180, (float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL));
          v182 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v179.i64[0], 0), vmulq_laneq_f32(v151, v179, 3));
          *(int8x8_t *)v158.f32 = vext_s8(*(int8x8_t *)v176.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v182, v182, 8uLL), 4uLL);
          v175.i64[0] = vextq_s8(v182, (int8x16_t)v176, 0xCuLL).u64[0];
          v176.i64[1] = v182.i64[1];
          v158.i64[1] = v175.i64[0];
          v183 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vaddq_f32(v181, (float32x4_t)vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL)), v151, 3), (float32x4_t)vrev64q_s32((int32x4_t)v179));
          v184 = (int8x16_t)vaddq_f32(v176, v158);
          v185 = (float32x4_t)vbslq_s8(v164, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL), (float32x4_t)vbslq_s8(v164, v183, v184)), v184);
          v186 = (float32x4_t)vbslq_s8(v164, (int8x16_t)v176, (int8x16_t)vsubq_f32(v185, (float32x4_t)vrev64q_s32((int32x4_t)v185)));
          v187 = *(float32x4_t *)(v149 + 96);
          v188 = (int8x16_t)vmulq_f32(*(float32x4_t *)v149, v187);
          v189 = veorq_s8(vandq_s8(*(int8x16_t *)(v149 + 16), *(int8x16_t *)(v149 + 112)), vextq_s8(v188, v188, 8uLL));
          v186.i64[0] = vmulq_n_f32(v186, *(float *)v189.i32).u64[0];
          v189.i32[2] = 1.0;
          v186.i64[1] = v189.i64[1];
          v190 = (int32x4_t)vmulq_f32(v186, v186);
          v191 = (float32x4_t)vbslq_s8(v165, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v190), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL))), (int8x16_t)v186);
          v192 = vminq_f32(vmulq_f32(v187, vrsqrteq_f32(v191)), *(float32x4_t *)(v149 + 128));
          v193 = (float32x4_t)vbslq_s8(v165, (int8x16_t)vmulq_f32(v192, vrsqrtsq_f32(vmulq_f32(v192, v191), v192)), (int8x16_t)v186);
          v194 = vmulq_laneq_f32(v193, v193, 3);
          v194.i32[3] = 1.0;
          *(float32x4_t *)(v7 + 16 * v146++) = v194;
        }
        while (v146 < v4);
      }
      v8 += v9;
      ++v3;
      v10 += v9;
      v7 += v12;
      v13 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSolidRendererBumpMap::GetDOD(HgcSolidRendererBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcSolidRendererBumpMap::GetROI(HgcSolidRendererBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcSolidRendererBumpMap::HgcSolidRendererBumpMap(HgcSolidRendererBumpMap *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6583240;
  v3 = (_OWORD *)operator new();
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *v3 = 0u;
  v3[1] = v4;
  v3[2] = 0u;
  v3[3] = xmmword_1B355C5F0;
  v3[4] = xmmword_1B3050E20;
  v3[5] = xmmword_1B3050F70;
  v3[6] = xmmword_1B355C600;
  v3[7] = xmmword_1B3051080;
  v3[8] = xmmword_1B355C610;
  v3[9] = 0u;
  v3[10] = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSolidRendererBumpMap *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2DD9748(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSolidRendererBumpMap::~HgcSolidRendererBumpMap(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6583240;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40C3A7E6FCLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSolidRendererBumpMap::~HgcSolidRendererBumpMap(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSolidRendererBumpMap::SetParameter(HgcSolidRendererBumpMap *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v7;
  uint64_t v8;
  __n128 *v9;

  switch((_DWORD)a2)
  {
    case 2:
      v8 = *((_QWORD *)this + 51);
      if (*(float *)(v8 + 32) != a3.n128_f32[0]
        || *(float *)(v8 + 36) != a4
        || *(float *)(v8 + 40) != a5
        || *(float *)(v8 + 44) != a6)
      {
        *(_DWORD *)(v8 + 32) = a3.n128_u32[0];
        *(float *)(v8 + 36) = a4;
        *(float *)(v8 + 40) = a5;
        *(float *)(v8 + 44) = a6;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] != (float)-a3.n128_f32[0]
        || v9[1].n128_f32[1] != 0.0
        || v9[1].n128_f32[2] != 0.0
        || v9[1].n128_f32[3] != 0.0)
      {
        v9[1].n128_f32[0] = -a3.n128_f32[0];
        v9[1].n128_u64[1] = 0;
        v9[1].n128_u32[1] = 0;
        a3.n128_f32[1] = a4;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        v9[10] = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = (__n128 *)*((_QWORD *)this + 51);
      if (v7->n128_f32[0] != 0.0
        || v7->n128_f32[1] != 0.0
        || v7->n128_f32[2] != a3.n128_f32[0]
        || v7->n128_f32[3] != 0.0)
      {
        v7->n128_u64[0] = 0;
        v7->n128_u32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        v7->n128_u32[3] = 0;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        v7[9] = a3;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcSolidRendererBumpMap::GetParameter(HgcSolidRendererBumpMap *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[8];
      a3[1] = v5[9];
      a3[2] = v5[10];
      v4 = v5 + 11;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[40];
      a3[1] = v6[41];
      a3[2] = v6[42];
      v4 = v6 + 43;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[36];
      a3[1] = v3[37];
      a3[2] = v3[38];
      v4 = v3 + 39;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *LiHeAlphaFill::GetProgram(LiHeAlphaFill *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000027f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.x = clamp(r0.w*half(hg_Params[1].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = float4(r0.xxxx)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=1313a19a:2f5a4de3:21a49b0a:6b2012eb\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000026c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.x = clamp(r0.w*hg_Params[1].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = r0.xxxx*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=d10bdb12:54ddf532:0e36d11f:59b899ba\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000264\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0.x = clamp(r0.w*hg_ProgramLocal1.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = r0.xxxx*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=9a761c45:a1fc489c:940dabd1:9b30d9e5\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void LiHeAlphaFill::InitProgramDescriptor(LiHeAlphaFill *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LiHeAlphaFill_hgc_visible", "//Metal1.0     \n//LEN=0000000143\n[[ visible ]] FragmentOut LiHeAlphaFill_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0.x = clamp(r0.w*hg_Params[1].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0.xxxx*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2DD9A40()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "LiHeAlphaFill");
}

void sub_1B2DD9A50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2DD9B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2DD9B90()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2DD9B88);
}

_QWORD *LiHeAlphaFill::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "LiHeAlphaFill [hgc1]");
}

uint64_t LiHeAlphaFill::BindTexture(LiHeAlphaFill *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t LiHeAlphaFill::Bind(LiHeAlphaFill *this, HGHandler *a2)
{
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(LiHeAlphaFill *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t LiHeAlphaFill::RenderTile(LiHeAlphaFill *this, HGTile *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  uint64_t v24;

  v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 10);
    v7 = 16 * *((int *)a2 + 22);
    v8 = 16 * *((int *)a2 + 6);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v24) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = (float32x4_t *)*((_QWORD *)this + 51);
          v12 = v11[1];
          v13 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 - 32), 3);
          v14 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 - 16), 3);
          v15 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10), 3);
          v16 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 + 16), 3);
          v17 = v11[2];
          v18 = v11[3];
          v19 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v13, v17), v18).f32[0]);
          v20 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v14, v17), v18).f32[0]);
          v21 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v15, v17), v18).f32[0]);
          v22 = vmulq_n_f32(*v11, vminq_f32(vmaxq_f32(v16, v17), v18).f32[0]);
          v23 = (float32x4_t *)(v5 + v10);
          v23[-2] = v19;
          v23[-1] = v20;
          *v23 = v21;
          v23[1] = v22;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v24) = -v9;
      }
      if ((int)v24 < v4)
      {
        v24 = v24;
        do
        {
          *(float32x4_t *)(v5 + 16 * v24) = vmulq_n_f32(*(float32x4_t *)*((_QWORD *)this + 51), vminq_f32(vmaxq_f32(vmulq_laneq_f32(*(float32x4_t *)(*((_QWORD *)this + 51) + 16), *(float32x4_t *)(v6 + 16 * v24), 3), *(float32x4_t *)(*((_QWORD *)this + 51) + 32)), *(float32x4_t *)(*((_QWORD *)this + 51) + 48)).f32[0]);
          ++v24;
        }
        while (v24 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t LiHeAlphaFill::GetDOD(LiHeAlphaFill *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

uint64_t LiHeAlphaFill::GetROI(LiHeAlphaFill *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3)
    return 0;
  else
    return *(_QWORD *)&a4.var0;
}

void LiHeAlphaFill::LiHeAlphaFill(LiHeAlphaFill *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E65834A8;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = xmmword_1B304F230;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2DD9E9C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void LiHeAlphaFill::~LiHeAlphaFill(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E65834A8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  LiHeAlphaFill::~LiHeAlphaFill(this);
  HGObject::operator delete(v1);
}

uint64_t LiHeAlphaFill::SetParameter(LiHeAlphaFill *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t LiHeAlphaFill::GetParameter(LiHeAlphaFill *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

uint64_t MalformedKeyError(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v7 = objc_alloc(MEMORY[0x1E0C99D80]);
  v8 = (void *)MEMORY[0x1E0CB3940];
  v9 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), "localizedStringForKey:value:table:", CFSTR("Plug-In dictionary has a malformed key. Key \"%@\" is required to be of class \"%@\"."), &stru_1E65EDDA0, CFSTR("PROPlug"));
  v10 = (void *)objc_msgSend(v7, "initWithObjectsAndKeys:", objc_msgSend(v8, "stringWithFormat:", v9, a2, NSStringFromClass(a3)), *MEMORY[0x1E0CB2D50], a2, CFSTR("MalformedKey"), a4, CFSTR("NSDictionary"), 0);
  v11 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PROPlug"), -501, v10);

  return v11;
}

uint64_t RequiredKeyIsPresent(uint64_t a1, uint64_t a2, objc_class *a3, void *a4, uint64_t *a5)
{
  uint64_t result;
  id v11;
  void *v12;
  uint64_t v13;

  if (objc_msgSend(a4, "objectForKey:", a2))
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return 1;
    if (a5)
    {
      v13 = MalformedKeyError(a1, a2, a3, (uint64_t)a4);
      goto LABEL_8;
    }
  }
  else if (a5)
  {
    v11 = objc_alloc(MEMORY[0x1E0C99D80]);
    v12 = (void *)objc_msgSend(v11, "initWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), "localizedStringForKey:value:table:", CFSTR("Plug-In dictionary is missing required key \"%@\"."), &stru_1E65EDDA0, CFSTR("PROPlug")), a2), *MEMORY[0x1E0CB2D50], a2, CFSTR("MissingKey"), a4, CFSTR("NSDictionary"), 0);
    v13 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PROPlug"), -500, v12);

LABEL_8:
    result = 0;
    *a5 = v13;
    return result;
  }
  return 0;
}

uint64_t OptionalKeyIsWellFormed(uint64_t a1, uint64_t a2, objc_class *a3, void *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;

  if (!objc_msgSend(a4, "objectForKey:", a2) || (objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  if (!a5)
    return 0;
  v11 = MalformedKeyError(a1, a2, a3, (uint64_t)a4);
  result = 0;
  *a5 = v11;
  return result;
}

void sub_1B2DE0660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t FloatSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t IntSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t StringTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t AngleSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PercentSliderTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t ToggleButtonTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PopupMenuTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t RGBColorTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t RGBAColorTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PointTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t FontTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t GroupTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t PushButtonTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t HistogramTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t GradientTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t ImageTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

uint64_t CustomParameterTransactionFactory(OZChannelBase *a1, unsigned int a2, CMTime *a3, unint64_t a4, NSString *a5)
{
  return 0;
}

_QWORD *OZMEChannelTimeConverter::GetCurrentConversion(OZMEChannelTimeConverter *this)
{
  _QWORD *result;
  uint64_t v2;

  perThreadTimeStack();
  result = pthread_getspecific(perThreadTimeStack(void)::result);
  if (result)
  {
    v2 = result[5];
    if (v2)
      return (_QWORD *)(*(_QWORD *)(result[1] + 8 * ((v2 + result[4] - 1) / 0x28uLL))
                      + 100 * ((v2 + result[4] - 1) % 0x28uLL));
    else
      return 0;
  }
  return result;
}

void perThreadTimeStack(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      pthread_key_create((pthread_key_t *)&perThreadTimeStack(void)::result, (void (__cdecl *)(void *))PCThreadSpecific<std::stack<OZMETimeConverterData>>::destroy);
    }
  }
}

void sub_1B2DE2E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *PCThreadSpecific<std::stack<OZMETimeConverterData>>::destroy(_QWORD *result)
{
  if (result)
  {
    std::deque<OZMETimeConverterData>::~deque[abi:ne180100](result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t std::deque<OZMETimeConverterData>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 20;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 40;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t OZRotoshape::setDirty(OZRotoshape *this, char a2, int a3)
{
  return OZMoShape::setDirty((OZRotoshape *)((char *)this + 18976), a2, a3);
}

double OZRotoshape::getReparametrizedContourLength(uint64_t a1, __int128 *a2, int a3, double *a4)
{
  uint64_t v7;
  double ReparametrizedContourLength;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  int v15;
  CGColorSpace *v16;

  v7 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v10);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v12 = *((_BYTE *)a2 + 202);
  v13 = *((_BYTE *)a2 + 220);
  v14 = *(__int128 *)((char *)a2 + 24);
  v15 = 1;
  ReparametrizedContourLength = OZShape::getReparametrizedContourLength(v7, (uint64_t)&v10, a3, a4);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
  return ReparametrizedContourLength;
}

void sub_1B2DE3000(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

CGColorSpace **OZRotoshape::getReparametrizedPointOnContour(uint64_t a1, __int128 *a2, double *a3, double *a4, double *a5, double *a6, int a7, double *a8, long double a9, char a10)
{
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  __int128 v24;
  int v25;
  CGColorSpace *v26;

  v18 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v20);
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  v22 = *((_BYTE *)a2 + 202);
  v23 = *((_BYTE *)a2 + 220);
  v24 = *(__int128 *)((char *)a2 + 24);
  v25 = 1;
  OZShape::getReparametrizedPointOnContour(v18, (uint64_t)&v20, a3, a4, a5, a6, a7, a8, a9, a10);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v26);
}

void sub_1B2DE30F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

void OZGLGradientRadial::OZGLGradientRadial(OZGLGradientRadial *this, OZChannelGradient *a2, CGColorSpace *a3, CGColorSpace *a4, char a5)
{
  HGRenderJob *v7;
  unsigned int v8;
  CGColorSpace *UserTag;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  _DWORD v20[2];
  __int128 v21;
  CGColorSpace *v22[2];
  char v23;

  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 60) = &off_1E65EB048;
  *((_BYTE *)this + 496) = 1;
  *(_QWORD *)this = &unk_1E6583A18;
  v7 = (HGRenderJob *)((char *)this + 8);
  OZGradient::OZGradient((OZGLGradientRadial *)((char *)this + 8), (OZChannelGradient *)off_1E6583898, (uint64_t)a2, a3, (uint64_t)a4);
  *(_QWORD *)this = &off_1E65837C8;
  *((_QWORD *)this + 1) = &unk_1E6583828;
  *((_QWORD *)this + 60) = &unk_1E6583878;
  *((_QWORD *)this + 37) = 0x3FF0000000000000;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_QWORD *)this + 32) = 0x3FF0000000000000;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = 0x3FF0000000000000;
  *(_DWORD *)((char *)this + 359) = 0;
  *((_BYTE *)this + 363) = 1;
  *((_WORD *)this + 208) = 1;
  *((_BYTE *)this + 419) = 0;
  *((_BYTE *)this + 420) = a5;
  PCColor::PCColor((PCColor *)((char *)this + 424));
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)v20);
  v8 = ((double)*(int *)(*((_QWORD *)this + 2) + 12) * 0.25);
  v20[0] = 2;
  v20[1] = v8;
  v21 = xmmword_1B355C6E0;
  UserTag = (CGColorSpace *)HGRenderJob::GetUserTag(v7);
  PCColorSpaceHandle::setColorSpace(v22, UserTag);
  v22[1] = (CGColorSpace *)3553;
  v23 = 0;
  PGCreatePooledImage((const PCImageAttributes *)v20, &v17);
  PCDynamicCast<PGTexture,PCImage>((uint64_t)&v17, &v19);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)this + 344, &v19);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = HGRenderJob::GetUserTag(v7);
  (*(void (**)(OZGLGradientRadial *, uint64_t))(*(_QWORD *)this + 48))(this, v16);
  PCCFRef<CGColorSpace *>::~PCCFRef(v22);
}

void sub_1B2DE3310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  OZGradient *v10;
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a9);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v9 + 472));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v11);
  OZGradient::~OZGradient(v10, (uint64_t *)off_1E6583898);
  *(_QWORD *)(v9 + 480) = v12 + 16;
  *(_BYTE *)(v9 + 496) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v9 + 488));
  _Unwind_Resume(a1);
}

void OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this, uint64_t *a2)
{
  uint64_t v4;
  OZGradient *v5;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = a2[5];
  v5 = (OZGLGradientRadial *)((char *)this + 8);
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[6];
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 59);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  OZGradient::~OZGradient(v5, a2 + 1);
}

void OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 480) = &off_1E65EB048;
  *(_BYTE *)(v1 + 496) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 488));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 480) = &off_1E65EB048;
  *(_BYTE *)(v1 + 496) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 488));
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this)
{
  *((_QWORD *)this + 59) = &off_1E65EB048;
  *((_BYTE *)this + 488) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 60);
}

{
  OZGLGradientRadial::~OZGLGradientRadial((OZGLGradientRadial *)((char *)this - 8));
}

void `virtual thunk to'OZGLGradientRadial::~OZGLGradientRadial(OZGLGradientRadial *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 480) = &off_1E65EB048;
  *(_BYTE *)(v1 + 496) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 488));
}

{
  OZGLGradientRadial::~OZGLGradientRadial((OZGLGradientRadial *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

double OZGLGradientRadial::init(OZGLGradientRadial *this, CGColorSpace *a2)
{
  OZGLGradientRadial *v3;
  unsigned __int8 v4;
  os_unfair_lock_s *Instance;
  PGProgram *v6;
  PGProgram *v7;
  PGProgram *v8;
  PGProgram *v9;
  PGProgram *v10;
  PGProgram *v11;
  PGProgram *v12;
  OZShaderManager *v13;
  os_unfair_lock_s *v14;
  const void *Shader;
  const void *v16;
  const char *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  void *v22;
  _BYTE v24[32];

  v3 = this;
  if ((v4 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      initPrograms(void)::lock = 0;
      __cxa_atexit((void (*)(void *))PCSpinLock::~PCSpinLock, &initPrograms(void)::lock, &dword_1B2737000);
    }
  }
  Instance = (os_unfair_lock_s *)OZShaderManager::getInstance(this);
  PCSpinLock::lock((os_unfair_lock_t)&initPrograms(void)::lock);
  if (!OZShaderManager::getShader(Instance, "radialGradient"))
  {
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v24);
    v6 = (PGProgram *)operator new();
    PGProgram::PGProgram(v6, 35632, (const char *)radialGradientProgramString);
    *(_QWORD *)v6 = &unk_1E6583A58;
    OZShaderManager::addShader(Instance, "radialGradient", (uint64_t)v6);
    v7 = (PGProgram *)operator new();
    PGProgram::PGProgram(v7, 35632, (const char *)radialGradientFloatProgramString);
    *(_QWORD *)v7 = &unk_1E6583A58;
    OZShaderManager::addShader(Instance, "radialGradientFloat", (uint64_t)v7);
    v8 = (PGProgram *)operator new();
    PGProgram::PGProgram(v8, 35632, (const char *)radialGradientMultiTextProgramString);
    *(_QWORD *)v8 = &unk_1E6583A58;
    OZShaderManager::addShader(Instance, "radialGradientMultiText", (uint64_t)v8);
    v9 = (PGProgram *)operator new();
    PGProgram::PGProgram(v9, 35632, (const char *)radialGradientMultiProgramString);
    *(_QWORD *)v9 = &unk_1E6583A58;
    OZShaderManager::addShader(Instance, "radialGradientMulti", (uint64_t)v9);
    v10 = (PGProgram *)operator new();
    PGProgram::PGProgram(v10, 35632, (const char *)radialGradientMultiFloatProgramString);
    *(_QWORD *)v10 = &unk_1E6583A58;
    OZShaderManager::addShader(Instance, "radialGradientMultiFloat", (uint64_t)v10);
    v11 = (PGProgram *)operator new();
    PGProgram::PGProgram(v11, 35632, (const char *)radialGradientMulColorProgramString);
    *(_QWORD *)v11 = &unk_1E6583A58;
    OZShaderManager::addShader(Instance, "radialGradientMultiColor", (uint64_t)v11);
    v12 = (PGProgram *)operator new();
    PGProgram::PGProgram(v12, 35632, (const char *)radialGradientMulColorFloatProgramString);
    *(_QWORD *)v12 = &unk_1E6583A58;
    OZShaderManager::addShader(Instance, "radialGradientMultiColorFloat", (uint64_t)v12);
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v24);
  }
  PCSpinLock::unlock((os_unfair_lock_t)&initPrograms(void)::lock);
  v14 = (os_unfair_lock_s *)OZShaderManager::getInstance(v13);
  Shader = (const void *)OZShaderManager::getShader(v14, "radialGradient");
  if (Shader)
  *((_QWORD *)v3 + 46) = Shader;
  v16 = (const void *)OZShaderManager::getShader(v14, "radialGradientFloat");
  if (v16)
  *((_QWORD *)v3 + 47) = v16;
  if (*((_BYTE *)v3 + 420))
    v17 = "radialGradientMultiText";
  else
    v17 = "radialGradientMulti";
  v18 = (const void *)OZShaderManager::getShader(v14, v17);
  if (v18)
  *((_QWORD *)v3 + 48) = v18;
  v19 = (const void *)OZShaderManager::getShader(v14, "radialGradientMultiFloat");
  if (v19)
  *((_QWORD *)v3 + 49) = v19;
  v20 = (const void *)OZShaderManager::getShader(v14, "radialGradientMultiColor");
  if (v20)
  *((_QWORD *)v3 + 50) = v20;
  v21 = (const void *)OZShaderManager::getShader(v14, "radialGradientMultiColorFloat");
  if (v21)
  *((_QWORD *)v3 + 51) = v21;
  OZGradient::init((OZGLGradientRadial *)((char *)v3 + 8), a2);
  PGTexture::bind(*((ProGL::Private::TextureImpl ***)v3 + 43));
  PGTexture::setParameteri(*((OZChannelBase ***)v3 + 43), 0x2800u, 9729);
  PGTexture::setParameteri(*((OZChannelBase ***)v3 + 43), 0x2801u, 9729);
  PGTexture::setParameteri(*((OZChannelBase ***)v3 + 43), 0x2802u, 33071);
  v22 = (void *)*((_QWORD *)v3 + 43);
  if (v22)
  PGTexture2D::setDataPtr((ProGL::Private::TextureImpl **)v22, *(const void **)(*((_QWORD *)v3 + 2) + 24), 0x1908u, 0x1406u);
  return OZGLGradientRadial::computeTexgenCoefficients(v3);
}

void sub_1B2DE39A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1B5E29170](v9, 0x10A1C40878AE62CLL);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&a9);
  PCSpinLock::unlock((os_unfair_lock_t)&initPrograms(void)::lock);
  _Unwind_Resume(a1);
}

double OZGLGradientRadial::computeTexgenCoefficients(OZGLGradientRadial *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  double v6;
  char *v7;
  double v8;

  v1 = *((float *)this + 6);
  v2 = *((float *)this + 7);
  v3 = *((float *)this + 8) - v1;
  v4 = *((float *)this + 9) - v2;
  v5 = fmaxf((float)(v3 * v3) + (float)(v4 * v4), 0.0000001);
  v6 = (float)(v3 / v5);
  *((double *)this + 27) = v6;
  v7 = (char *)this + 216;
  *((_QWORD *)v7 + 15) = 0x3FF0000000000000;
  *((_QWORD *)v7 + 10) = 0x3FF0000000000000;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0x3FF0000000000000;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  v8 = (float)(v4 / v5);
  *((double *)v7 + 1) = v8;
  *((double *)v7 + 3) = -(v1 * v6 + v2 * v8 + 0.0);
  return PCMatrix44Tmpl<double>::rightMult((uint64_t)v7, (double *)v7 - 20);
}

double `non-virtual thunk to'OZGLGradientRadial::init(OZGLGradientRadial *this, CGColorSpace *a2)
{
  return OZGLGradientRadial::init((OZGLGradientRadial *)((char *)this - 8), a2);
}

void OZGLGradientRadial::getHash(OZGLGradientRadial *this, CMTime *a2)
{
  char *v2;
  int *v3;
  int *v4;
  CMTime *v5;
  int8x8_t *Hash;
  int8x8_t v7[521];

  v2 = (char *)MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v7[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  OZGradient::getHash((OZGradient *)(v2 + 8), v5);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v7);
  PCHashWriteStream::writeValue(v7, v2[417]);
  PCHashWriteStream::writeValue(v7, v2[419]);
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=(v4, (int *)Hash);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v7);
}

void sub_1B2DE3B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'OZGLGradientRadial::getHash(OZGLGradientRadial *this, CMTime *a2)
{
  OZGLGradientRadial::getHash((OZGLGradientRadial *)((char *)this - 8), a2);
}

uint64_t OZGLGradientRadial::update(OZGLGradientRadial *this, CMTime *a2)
{
  HGRenderJob *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  float *v13;
  CGColorSpace *UserTag;
  void *v15;
  CMTime v17;

  v3 = (HGRenderJob *)((char *)this + 8);
  v17 = *a2;
  v4 = OZGradient::update((OZGLGradientRadial *)((char *)this + 8), &v17);
  if ((_DWORD)v4)
  {
    if (*((_BYTE *)this + 417))
    {
      v5 = *((_QWORD *)this + 2);
      v6 = ((double)*(int *)(v5 + 12) * 0.25);
      if (v6)
      {
        v7 = *(_QWORD *)(v5 + 24);
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *(_QWORD *)v7 = _D0;
          *(_DWORD *)(v7 + 8) = 1065353216;
          v7 += 16;
          --v6;
        }
        while (v6);
      }
    }
    if (*((_BYTE *)this + 419))
    {
      v13 = (float *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24)
                    + 4 * (4 * ((double)*(int *)(*((_QWORD *)this + 2) + 12) * 0.25) - 4));
      UserTag = (CGColorSpace *)HGRenderJob::GetUserTag(v3);
      PCColor::getRGBA((PCColor *)((char *)this + 424), v13, v13 + 1, v13 + 2, v13 + 3, UserTag);
    }
    v15 = (void *)*((_QWORD *)this + 43);
    if (v15)
    PGTexture2D::setDataPtr((ProGL::Private::TextureImpl **)v15, *(const void **)(*((_QWORD *)this + 2) + 24), 0x1908u, 0x1406u);
  }
  return v4;
}

uint64_t `non-virtual thunk to'OZGLGradientRadial::update(OZGLGradientRadial *this, CMTime *a2)
{
  return OZGLGradientRadial::update((OZGLGradientRadial *)((char *)this - 8), a2);
}

void OZGLGradientRadial::enable(OZGLGradientRadial *this)
{
  __n128 v2;
  float v3;
  float v4;
  float v5;
  float v6;
  BOOL v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _BYTE v18[40];

  ProGL::GL::GL((ProGL::GL *)v18);
  PGTexture::bind(*((ProGL::Private::TextureImpl ***)this + 43));
  PGTexture::enable(*((ProGL::Private::TextureImpl ***)this + 43));
  if (*((_BYTE *)this + 416))
  {
    v3 = *((float *)this + 6);
    v4 = *((float *)this + 7);
    v5 = sqrtf((float)((float)(*((float *)this + 8) - v3) * (float)(*((float *)this + 8) - v3))+ (float)((float)(*((float *)this + 9) - v4) * (float)(*((float *)this + 9) - v4)));
    v6 = 1.0 / v5;
    v7 = v5 == 0.0;
    v8 = 1000.0;
    if (!v7)
      v8 = v6;
    v9 = v8;
    v10 = *((double *)this + 23) * v9;
    *((double *)this + 27) = v10;
    *((_QWORD *)this + 42) = 0x3FF0000000000000;
    *((_QWORD *)this + 37) = 0x3FF0000000000000;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *(_OWORD *)((char *)this + 264) = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    v11 = v3;
    v12 = v4;
    *((double *)this + 30) = -(v10 * v11 + v12 * 0.0 + 0.0);
    *((double *)this + 32) = v9;
    *((double *)this + 34) = -(v12 * v9 + v11 * 0.0 + 0.0);
    v2.n128_f64[0] = PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 216, (double *)this + 7);
  }
  if (!*((_BYTE *)this + 360))
  {
    v15 = (char *)this + 368;
    if (*((_BYTE *)this + 361))
    {
      v15 = (char *)this + 376;
      v16 = (char *)this + 408;
    }
    else
    {
      v16 = (char *)this + 400;
    }
    if (*((_BYTE *)this + 418))
      v17 = v16;
    else
      v17 = v15;
    goto LABEL_20;
  }
  if (!*((_BYTE *)this + 361))
  {
    v17 = (_QWORD *)((char *)this + 384);
LABEL_20:
    (*(void (**)(_QWORD, __n128))(*(_QWORD *)*v17 + 16))(*v17, v2);
    goto LABEL_21;
  }
  (*(void (**)(_QWORD, __n128))(**((_QWORD **)this + 49) + 16))(*((_QWORD *)this + 49), v2);
  v13 = 0.0;
  if (*((_BYTE *)this + 362))
    v14 = 1.0;
  else
    v14 = 0.0;
  if (*((_BYTE *)this + 363))
    v13 = 1.0;
  PGProgram::setLocalParameter(*((PGProgram **)this + 49), v14, v13, 0.0, 0.0);
LABEL_21:
  ProGL::GL::~GL((ProGL::GL *)v18);
}

void sub_1B2DE3E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

uint64_t OZGLGradientRadial::disable(OZGLGradientRadial *this)
{
  char *v2;
  char *v3;
  char *v4;

  if (*((_BYTE *)this + 360))
  {
    if (*((_BYTE *)this + 361))
      v2 = (char *)this + 392;
    else
      v2 = (char *)this + 384;
  }
  else
  {
    v3 = (char *)this + 368;
    if (*((_BYTE *)this + 361))
    {
      v3 = (char *)this + 376;
      v4 = (char *)this + 408;
    }
    else
    {
      v4 = (char *)this + 400;
    }
    if (*((_BYTE *)this + 418))
      v2 = v4;
    else
      v2 = v3;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)v2 + 24))(*(_QWORD *)v2);
  return PGTexture::disable(*((ProGL::Private::TextureImpl ***)this + 43));
}

void OZGLGradientRadial::setTransparentBeyondEdge(OZChannelBase ***this)
{
  PGTexture::setParameteri(this[43], 0x2802u, 33071);
}

void PGARBFragmentProgram::~PGARBFragmentProgram(PGARBFragmentProgram *this)
{
  PGProgram::~PGProgram(this);
  JUMPOUT(0x1B5E29170);
}

void OZWriteOnBehavior::OZWriteOnBehavior(OZWriteOnBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v6;
  PCString v7;
  PCSharedCount v8[2];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E6583AA0;
  v5[2] = &unk_1E6583D50;
  v5[6] = &unk_1E6583FA8;
  v5[42] = &unk_1E6584000;
  PCURL::PCURL((PCURL *)v8, CFSTR("Write On  Parameter Outline"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Write On Behavior Outline"));
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 536), 0, (const PCString *)v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, CFSTR("Write On Behavior Length"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 792), 1.0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, CFSTR("Write On Behavior Offset"));
  OZChannelDouble::OZChannelDouble((OZWriteOnBehavior *)((char *)this + 944), 0.0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, CFSTR("Write On Parameter Direction"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Write On Behavior Direction"));
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1096), 0, (const PCString *)v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, CFSTR("Write On Parameter Speed"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Write On Behavior Speed"));
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1352), 0, (const PCString *)v8, &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, CFSTR("Write On Behavior Custom Speed"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1608), 0.0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCURL::PCURL((PCURL *)v8, CFSTR("Write On Behavior End Frame Offset"));
  OZChannelDouble::OZChannelDouble((OZWriteOnBehavior *)((char *)this + 1760), (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString((PCString *)v8);
  PCSharedCount::PCSharedCount(v8);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1912), 0, (const PCString *)v8, (OZChannelFolder *)((char *)this + 56), 0xCFu, 2u, 0, 0);
  PCString::~PCString((PCString *)v8);
  *((_BYTE *)this + 2064) = 0;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)&v8[0].var0 = xmmword_1B355C76C;
  v9 = unk_1B355C77C;
  OZChannelEnum::setTags((OZWriteOnBehavior *)((char *)this + 1352), (char *)v8, 8);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1760), 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1760), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 1760));
  OZChannel::setScale((OZChannel *)((char *)this + 944), 100.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 944), "%");
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 944), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 944), 0.0001);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 944), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 944), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 944), 0.0);
  v6 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 2120) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 267) = *(_QWORD *)(v6 + 16);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 1608), 0, 0);
}

void sub_1B2DE439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, PCString a12, PCString a13)
{
  OZChannelBehavior *v13;
  OZChannelEnum *v14;
  OZChannelPercent *v15;
  OZChannel *v16;
  OZChannelEnum *v17;
  OZChannelEnum *v18;
  OZChannelPercent *v19;
  OZChannel *v20;

  PCString::~PCString(&a13);
  OZChannel::~OZChannel(v20);
  OZChannelPercent::~OZChannelPercent(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelBehavior::~OZChannelBehavior(v13);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior::OZWriteOnBehavior(OZWriteOnBehavior *this, const OZWriteOnBehavior *a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *v5 = &off_1E6583AA0;
  v5[2] = &unk_1E6583D50;
  v5[6] = &unk_1E6583FA8;
  v5[42] = &unk_1E6584000;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 67), (const OZWriteOnBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 792), (const OZChannelBase *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 944), (const OZChannelBase *)((char *)a2 + 944), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 118) = &off_1E6551358;
  *((_QWORD *)this + 120) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1096), (const OZWriteOnBehavior *)((char *)a2 + 1096), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1352), (const OZWriteOnBehavior *)((char *)a2 + 1352), (OZChannelFolder *)((char *)this + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1608), (const OZChannelBase *)((char *)a2 + 1608), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1760), (const OZChannelBase *)((char *)a2 + 1760), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 220) = &off_1E6551358;
  *((_QWORD *)this + 222) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1912), (const OZChannelBase *)((char *)a2 + 1912), (OZChannelFolder *)((char *)this + 56));
  *((_BYTE *)this + 2064) = *((_BYTE *)a2 + 2064);
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  OZChannel::setScale((OZChannel *)((char *)this + 944), 100.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 944), "%");
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 944), 0.01);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 944), 0.0001);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 944), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 944), 0.0);
  v6 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 2120) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 267) = *(_QWORD *)(v6 + 16);
}

void sub_1B2DE46D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10)
{
  OZChannelBehavior *v10;
  OZChannelPercent *v11;
  OZChannel *v12;
  OZChannelEnum *v13;
  OZChannelEnum *v14;
  OZChannelPercent *v15;
  OZChannel *v16;

  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannel::~OZChannel(v12);
  OZChannelPercent::~OZChannelPercent(v11);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBehavior::~OZChannelBehavior(v10);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior::~OZWriteOnBehavior(OZWriteOnBehavior *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E6583AA0;
  *((_QWORD *)this + 2) = &unk_1E6583D50;
  *((_QWORD *)this + 6) = &unk_1E6583FA8;
  *((_QWORD *)this + 42) = &unk_1E6584000;
  v2 = (void *)*((_QWORD *)this + 262);
  if (v2)
  {
    *((_QWORD *)this + 263) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 259);
  if (v3)
  {
    *((_QWORD *)this + 260) = v3;
    operator delete(v3);
  }
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1912));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1760));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1608));
  OZChannelEnum::~OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1352));
  OZChannelEnum::~OZChannelEnum((OZWriteOnBehavior *)((char *)this + 1096));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 944));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZWriteOnBehavior *)((char *)this + 536));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZWriteOnBehavior::~OZWriteOnBehavior(OZWriteOnBehavior *this)
{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 16));
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 48));
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 336));
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZWriteOnBehavior::~OZWriteOnBehavior((OZWriteOnBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

__n128 OZWriteOnBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  __n128 result;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)v4 + 536);
  OZChannelBase::operator=(a1 + 792, (uint64_t)v5 + 792);
  OZChannelBase::operator=(a1 + 944, (uint64_t)v5 + 944);
  OZChannelBase::operator=(a1 + 1096, (uint64_t)v5 + 1096);
  OZChannelBase::operator=(a1 + 1352, (uint64_t)v5 + 1352);
  OZChannelBase::operator=(a1 + 1608, (uint64_t)v5 + 1608);
  OZChannelBase::operator=(a1 + 1912, (uint64_t)v5 + 1912);
  OZChannelBase::operator=(a1 + 1760, (uint64_t)v5 + 1760);
  v6 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)(a1 + 2120) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 2136) = *(_QWORD *)(v6 + 16);
  return result;
}

uint64_t OZWriteOnBehavior::parseEnd(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 2064) = 1;
  return OZBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZWriteOnBehavior::parseEnd(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 2016) = 1;
  return OZBehavior::parseEnd((OZWriteOnBehavior *)((char *)this - 48), a2);
}

OZWriteOnCurveNode *OZWriteOnBehavior::createCurveNode(OZWriteOnBehavior *this, OZChannel *a2)
{
  OZWriteOnCurveNode *v3;

  v3 = (OZWriteOnCurveNode *)operator new();
  OZWriteOnCurveNode::OZWriteOnCurveNode(v3, this, 0);
  return v3;
}

void sub_1B2DE4A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior::didAddToNode(OZWriteOnBehavior *this, OZSceneNode *a2)
{
  char *v4;
  OZWriteOnCurveNode *v5;
  OZWriteOnCurveNode *v6;
  OZWriteOnCurveNode *v7;
  OZWriteOnCurveNode *v8;
  OZChannelBase *v9;
  int isDiscrete;
  uint64_t v11;
  double v12;
  uint64_t v13;
  int32_t v14;
  CMTime *v15;
  double Seconds;
  __n128 v17;
  CMTimeEpoch v18;
  CMTime time;
  __n128 v20;
  CMTimeEpoch v21;
  CMTime v22;
  __int128 v23;
  CMTimeValue value;
  __int128 v25;
  CMTimeValue v26;
  CMTime time2;
  __int128 time1;
  CMTime time1_16;
  CMTimeValue v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  OZChannelBehavior::didAddToNode(this, a2);
  if (a2)
  else
    v4 = 0;
  v5 = (OZWriteOnCurveNode *)operator new();
  OZWriteOnCurveNode::OZWriteOnCurveNode(v5, this, (OZChannel *)(v4 + 28952));
  OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 28952), v5);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v5);
  OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)(v4 + 28952));
  v6 = (OZWriteOnCurveNode *)operator new();
  OZWriteOnCurveNode::OZWriteOnCurveNode(v6, this, (OZChannel *)(v4 + 29104));
  OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 29104), v6);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v6);
  OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)(v4 + 29104));
  v7 = (OZWriteOnCurveNode *)operator new();
  OZWriteOnCurveNode::OZWriteOnCurveNode(v7, this, (OZChannel *)(v4 + 29568));
  OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 29568), v7);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
  OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)v4 + 264);
  v8 = (OZWriteOnCurveNode *)operator new();
  OZWriteOnCurveNode::OZWriteOnCurveNode(v8, this, (OZChannel *)(v4 + 29416));
  OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 29416), v8);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v8);
  OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)(v4 + 29416));
  (*(void (**)(__int128 *__return_ptr, OZWriteOnBehavior *))(*(_QWORD *)this + 608))(&time1, this);
  v23 = time1;
  value = time1_16.value;
  v25 = *(_OWORD *)&time1_16.timescale;
  v26 = v30;
  if (OZChannel::getNumberOfKeyframes((OZChannel *)((char *)this + 1608)) <= 1)
  {
    OZChannel::setInterpolation((OZChannel *)((char *)this + 1608), 4);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 1608), MEMORY[0x1E0CA2E68], 0.0, 1);
    OZBehavior::getFrameDuration(this, &v20);
    time1 = v25;
    time1_16.value = v26;
    *(__n128 *)&time2.value = v20;
    time2.epoch = v21;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v22);
    OZChannel::setKeyframe((OZChannel *)((char *)this + 1608), &v22, 100.0, 1);
  }
  v9 = (OZChannelBase *)(v4 + 29256);
  if ((*(unsigned int (**)(char *))(*((_QWORD *)v4 + 3657) + 560))(v4 + 29256)
    && !*((_BYTE *)this + 2064)
    && (*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 336))(this))
  {
    isDiscrete = OZChannel::isDiscrete((OZChannel *)((char *)this + 1608));
    if (isDiscrete)
      OZChannel::setDiscrete((OZChannel *)((char *)this + 1608), 0, 0);
    OZChannelBase::reset((OZChannelBase *)((char *)this + 1608), 0);
    time1 = v23;
    time1_16.value = value;
    OZChannel::copyKeyframesFromChannel((OZChannel *)((char *)this + 1608), (const CMTime *)&time1, v9);
    v11 = (*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v20);
    time1 = v25;
    time1_16.value = v26;
    *(__n128 *)&time2.value = v20;
    time2.epoch = v21;
    v12 = PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v22);
    v13 = (*(uint64_t (**)(OZWriteOnBehavior *, double))(*(_QWORD *)this + 336))(this, v12);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), &v17);
    time1 = *(_OWORD *)&v22.value;
    time1_16.value = v22.epoch;
    *(__n128 *)&time2.value = v17;
    time2.epoch = v18;
    v14 = CMTimeCompare((CMTime *)&time1, &time2);
    v15 = &v22;
    if (v14 < 0)
      v15 = (CMTime *)&v17;
    time = *v15;
    Seconds = CMTimeGetSeconds(&time);
    OZChannel::linearTimeWarp((OZChannel *)((char *)this + 1608), Seconds, MEMORY[0x1E0CA2E68]);
    if (isDiscrete)
      OZChannel::setDiscrete((OZChannel *)((char *)this + 1608), 1, 0);
  }
  if (((*((uint64_t (**)(OZChannelBase *))v9->var0 + 70))(v9) & 1) != 0
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 1352), MEMORY[0x1E0CA2E68], 0.0) == 9)
  {
    LODWORD(time1_16.epoch) = 7;
    time1 = xmmword_1B355C748;
    *(_OWORD *)&time1_16.value = unk_1B355C758;
    OZChannelEnum::setTags((OZWriteOnBehavior *)((char *)this + 1352), (char *)&time1, 9);
    PCURL::PCURL((PCURL *)&time2, CFSTR("Write On Parameter Speed With Recorded"));
    OZChannelEnum::setStrings((const PCString *)this + 169, (PCString *)&time2, 1);
  }
  else
  {
    time1 = xmmword_1B355C76C;
    *(_OWORD *)&time1_16.value = unk_1B355C77C;
    OZChannelEnum::setTags((OZWriteOnBehavior *)((char *)this + 1352), (char *)&time1, 8);
    PCURL::PCURL((PCURL *)&time2, CFSTR("Write On Parameter Speed"));
    OZChannelEnum::setStrings((const PCString *)this + 169, (PCString *)&time2, 1);
  }
  PCString::~PCString((PCString *)&time2);
  *((_BYTE *)this + 2064) = 1;
}

void sub_1B2DE4F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
  PCString::~PCString(&a29);
  _Unwind_Resume(a1);
}

double OZWriteOnBehavior::solveWriteOnNode(OZWriteOnBehavior *this, OZChannelBase *a2, const CMTime *a3, double a4, double a5)
{
  __n128 FrameDuration;
  const void *v9;
  char *v10;
  OZChannelBase *v11;
  double v12;
  CMTime *v13;
  int ValueAsInt;
  int v15;
  double Position;
  double CurveValueForNode;
  char *v19;
  char *value;
  double v21;
  char *v22;
  const void *v23;
  const void *v24;
  OZWriteOnBehavior **v25;
  double v26;
  void *PreviousProcessingNode;
  OZChannel *v28;
  char *v29;
  const void *v30;
  const void *v31;
  OZWriteOnBehavior **v32;
  void *v33;
  double v34;
  unsigned int var3;
  double v36;
  double v37;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  CMTime v46;
  CMTime time;
  CMTime v48;
  CMTime v49;
  __n128 v50;
  CMTimeEpoch v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  __n128 v56;
  CMTimeEpoch v57;
  CMTime v58;
  CMTime time2;
  CMTime time1;

  v54 = *a3;
  v53 = *a3;
  memset(&v52, 0, sizeof(v52));
  FrameDuration = OZBehavior::getFrameDuration(this, (__n128 *)&v52);
  (*(void (**)(CMTime *__return_ptr, OZWriteOnBehavior *, __n128))(*(_QWORD *)this + 608))(&v49, this, FrameDuration);
  v9 = (const void *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 320))(this);
  if (v9)
  {
    if (!a2)
      goto LABEL_9;
  }
  else
  {
    v10 = 0;
    if (!a2)
    {
LABEL_9:
      v11 = (OZChannelBase *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 312))(this);
      if (!OZChannelBase::isEnabled(v11, 0, 1)
        || (*(_BYTE *)((*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 320))(this) + 1024) & 2) != 0)
      {
        return a5;
      }
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), &v56);
      time2 = v49;
      *(__n128 *)&time1.value = v56;
      time1.epoch = v57;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      time1 = v58;
      time2 = v53;
      v12 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v53);
      (*(void (**)(__n128 *__return_ptr, double))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 320))(&v56, v12);
      time1 = v53;
      *(__n128 *)&time2.value = v56;
      time2.epoch = v57;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v58);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v55);
      time1 = v58;
      time2 = v55;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v48);
      v53 = v48;
      v56 = v50;
      v57 = v51;
      v13 = (CMTime *)MEMORY[0x1E0CA2E68];
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1760), MEMORY[0x1E0CA2E68], 0.0);
      operator*(&v52, &v55, (double)ValueAsInt + -1.0);
      *(__n128 *)&time1.value = v56;
      time1.epoch = v57;
      time2 = v55;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      time1 = v53;
      time2 = v58;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        v56 = v50;
        v57 = v51;
        v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1760), MEMORY[0x1E0CA2E68], 0.0);
        operator*(&v52, &v55, (double)v15 + -1.0);
        *(__n128 *)&time1.value = v56;
        time1.epoch = v57;
        time2 = v55;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        v53 = v58;
      }
      time1 = v53;
      time2 = *v13;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        v53 = *v13;
        if (!a2)
          goto LABEL_21;
      }
      else if (!a2)
      {
        goto LABEL_21;
      }
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 944), &v53, 0.0);
        return v26;
      }
LABEL_21:
      (*(void (**)(__n128 *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 320))(&v56);
      time1 = v53;
      *(__n128 *)&time2.value = v56;
      time2.epoch = v57;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v55);
      time1 = v58;
      time2 = v55;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v48);
      v54 = v48;
      OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v55);
      time2 = v49;
      time1 = v55;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v56);
      time1 = v54;
      *(__n128 *)&time2.value = v56;
      time2.epoch = v57;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
      v54 = v58;
      (*(void (**)(CMTime *__return_ptr, _QWORD, CMTime *))(**(_QWORD **)(*((_QWORD *)this + 47) + 32)
                                                                     + 336))(&time1, *(_QWORD *)(*((_QWORD *)this + 47) + 32), &v54);
      v54 = time1;
      Position = OZWriteOnBehavior::getPosition(this, &v54, &v53);
      if (*((_BYTE *)this + 320))
      {
        time1 = v54;
        time2 = *(CMTime *)((char *)this + 2120);
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        operator/((__int128 *)&v58.value, (uint64_t)&v52, (uint64_t)&time);
        CurveValueForNode = *(double *)(*((_QWORD *)this + 259) + 8 * (int)CMTimeGetSeconds(&time));
        time1 = v54;
        time2 = *(CMTime *)((char *)this + 2120);
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        operator/((__int128 *)&v58.value, (uint64_t)&v52, (uint64_t)&v46);
        v19 = 0;
        value = 0;
        v21 = *(double *)(*((_QWORD *)this + 262) + 8 * (int)CMTimeGetSeconds(&v46));
      }
      else
      {
        OZChannel::enumerateCurveProcessingNodes((OZChannel *)(v10 + 28952), &time1);
        value = (char *)time1.value;
        v22 = *(char **)&time1.timescale;
        CurveValueForNode = 0.0;
        if (*(_QWORD *)&time1.timescale != time1.value)
        {
          while (1)
          {
            v24 = (const void *)*((_QWORD *)v22 - 1);
            v22 -= 8;
            v23 = v24;
            if (v24)
            {
              if (v25)
              {
                if (v25[1] == this)
                  break;
              }
            }
            if (v22 == value)
              goto LABEL_31;
          }
          PreviousProcessingNode = (void *)OZChannel::getPreviousProcessingNode((OZChannel *)(v10 + 28952), v25);
          (*(void (**)(__n128 *__return_ptr, char *))(*((_QWORD *)v10 + 3619) + 320))(&v56, v10 + 28952);
          time1 = v54;
          *(__n128 *)&time2.value = v56;
          time2.epoch = v57;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
          CurveValueForNode = OZChannel::getCurveValueForNode((OZChannel *)(v10 + 28952), &v58, PreviousProcessingNode, 0.0);
        }
LABEL_31:
        v28 = (OZChannel *)(v10 + 29104);
        OZChannel::enumerateCurveProcessingNodes((OZChannel *)(v10 + 29104), &time1);
        v19 = (char *)time1.value;
        v29 = *(char **)&time1.timescale;
        v21 = 1.0;
        if (*(_QWORD *)&time1.timescale != time1.value)
        {
          while (1)
          {
            v31 = (const void *)*((_QWORD *)v29 - 1);
            v29 -= 8;
            v30 = v31;
            if (v31)
            {
              if (v32)
              {
                if (v32[1] == this)
                  break;
              }
            }
            if (v29 == v19)
              goto LABEL_38;
          }
          v33 = (void *)OZChannel::getPreviousProcessingNode(v28, v32);
          (*((void (**)(__n128 *__return_ptr, OZChannel *))v28->var0 + 40))(&v56, v28);
          time1 = v54;
          *(__n128 *)&time2.value = v56;
          time2.epoch = v57;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
          v21 = OZChannel::getCurveValueForNode(v28, &v58, v33, 0.0);
        }
      }
LABEL_38:
      v34 = v21 - CurveValueForNode;
      if (v34 < 0.0)
      {
LABEL_52:
        if (v19)
          operator delete(v19);
        if (value)
          operator delete(value);
        if (v34 < 0.0)
          return a5;
        return Position;
      }
      var3 = a2->var3;
      if (var3 == 127)
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1096), MEMORY[0x1E0CA2E68], 0.0) != 1)
        {
          v36 = 1.0;
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) != 1)
          {
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 2)
            {
              if (Position <= 0.5)
                v36 = Position + Position;
              else
                v36 = 1.0;
              goto LABEL_51;
            }
            v36 = Position;
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 3)
            {
              v42 = 1.0;
              v43 = Position < 0.5;
              v45 = Position + Position + -1.0;
              goto LABEL_79;
            }
          }
          goto LABEL_51;
        }
        if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0))
        {
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), &v54, 0.0);
          v36 = 1.0 - Position + v40;
          goto LABEL_51;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 1)
          goto LABEL_49;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 2)
        {
          v42 = 1.0;
          v43 = Position < 0.5;
          v44 = 1.0 - Position;
LABEL_78:
          v45 = v44 + v44;
LABEL_79:
          if (v43)
            v36 = v42;
          else
            v36 = v45;
          goto LABEL_51;
        }
        v36 = Position;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 3)
        {
          v37 = 1.0;
          v38 = Position < 0.5;
          v39 = 1.0 - (Position + Position);
LABEL_84:
          if (v38)
            v36 = v39;
          else
            v36 = v37;
        }
      }
      else
      {
        if (var3 != 126)
        {
          v36 = Position;
          goto LABEL_51;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1096), MEMORY[0x1E0CA2E68], 0.0) == 1)
        {
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0))
          {
            v36 = 0.0;
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) != 1)
            {
              if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 2)
              {
                v37 = 0.0;
                v38 = Position < 0.5;
                v39 = 1.0 - (Position + Position);
                goto LABEL_84;
              }
              v36 = Position;
              if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 3)
              {
                v42 = 0.0;
                v43 = Position < 0.5;
                v44 = 1.0 - Position;
                goto LABEL_78;
              }
            }
            goto LABEL_51;
          }
LABEL_49:
          v36 = 1.0 - Position;
          goto LABEL_51;
        }
        if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0))
        {
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 792), &v54, 0.0);
          v36 = Position - v41;
          goto LABEL_51;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 2)
        {
          if (Position > 0.5)
            v36 = Position + Position + -1.0;
          else
            v36 = 0.0;
          goto LABEL_51;
        }
        v36 = Position;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 3)
        {
          v37 = 0.0;
          v38 = Position < 0.5;
          v39 = Position + Position;
          goto LABEL_84;
        }
      }
LABEL_51:
      Position = CurveValueForNode + v34 * v36;
      goto LABEL_52;
    }
  }
  a5 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1352), MEMORY[0x1E0CA2E68], 0.0) == 8)
    return 1.0;
  return a5;
}

void sub_1B2DE5AC0(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double OZWriteOnBehavior::getPosition(OZWriteOnBehavior *this, const CMTime *a2, const CMTime *a3)
{
  CMTime *v6;
  double v7;
  int ValueAsInt;
  double v9;
  uint64_t v10;
  CMTime *v11;
  Float64 Seconds;
  double v13;
  double v14;
  Float64 v15;
  double v16;
  Float64 v17;
  Float64 v18;
  double v19;
  Float64 v20;
  Float64 v21;
  double v22;
  Float64 v23;
  const void *v24;
  char *v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMTime time;
  CMTime v45;
  _BYTE v46[24];
  __n128 v47;
  CMTimeEpoch v48;
  CMTime v49;
  CMTime v50;
  _QWORD v51[3];
  CMTime v52;
  double v53;
  CMTime v54;
  CMTime time2;
  CMTime time1;

  v6 = (CMTime *)MEMORY[0x1E0CA2E68];
  v54 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v53 = 0.0;
  v7 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1352), MEMORY[0x1E0CA2E68], 0.0);
  (*(void (**)(_QWORD *__return_ptr, OZWriteOnBehavior *))(*(_QWORD *)this + 608))(v51, this);
  if (ValueAsInt == 7)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1608), a2, 0.0);
    return v9;
  }
  else if ((*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v50 = *v6;
    v49 = v52;
    v10 = (*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v47);
    time1 = v49;
    *(__n128 *)&time2.value = v47;
    time2.epoch = v48;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v50);
    v49 = *a3;
    time1 = v50;
    time2 = *v6;
    if (CMTimeCompare(&time1, &time2) < 1)
    {
      v53 = 1.0;
    }
    else
    {
      switch(ValueAsInt)
      {
        case 0:
          operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)v46);
          v11 = (CMTime *)v46;
          goto LABEL_20;
        case 1:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1912), MEMORY[0x1E0CA2E68], 0.0))
          {
            operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&time);
            Seconds = CMTimeGetSeconds(&time);
            v13 = cos((Seconds + 2.0) * 1.57079633);
            v14 = 1.0;
            goto LABEL_16;
          }
          operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&v43);
          v27 = CMTimeGetSeconds(&v43);
          v53 = v27;
          v28 = 0.0;
          v29 = 1.0;
          goto LABEL_26;
        case 2:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1912), MEMORY[0x1E0CA2E68], 0.0))
          {
            operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&v42);
            v15 = CMTimeGetSeconds(&v42);
            v16 = sin(v15 * 1.57079633);
            goto LABEL_30;
          }
          operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&v41);
          v27 = CMTimeGetSeconds(&v41);
          v53 = v27;
          v28 = 1.0;
          v29 = 0.0;
          goto LABEL_26;
        case 3:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1912), MEMORY[0x1E0CA2E68], 0.0))
          {
            operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&v40);
            v17 = CMTimeGetSeconds(&v40);
            v16 = (cos((v17 + 1.0) * 3.14159265) + 1.0) * 0.5;
LABEL_30:
            v53 = v16;
          }
          else
          {
            operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&v39);
            v27 = CMTimeGetSeconds(&v39);
            v53 = v27;
            v28 = 0.5;
            v29 = 0.5;
LABEL_26:
            PCMath::easeInOut(&v53, v27, v28, v29, 0.0, 1.0, 0, v26);
          }
          break;
        case 4:
          operator*(&v50, &v54, 0.5);
          time1 = v49;
          time2 = v54;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
            operator*((__int128 *)&v54.value, (uint64_t)&v49, (uint64_t)&v38);
            v16 = 1.0 / CMTimeGetSeconds(&v38);
          }
          else
          {
            operator*((__int128 *)&v54.value, (uint64_t)&v49, (uint64_t)&v37);
            v13 = -1.0 / CMTimeGetSeconds(&v37);
            v14 = 2.0;
LABEL_16:
            v16 = v13 + v14;
          }
          goto LABEL_30;
        case 5:
          v36 = v50;
          v18 = CMTimeGetSeconds(&v36);
          v35 = v49;
          v19 = 1.0 / (v18 * v18);
          v20 = CMTimeGetSeconds(&v35);
          v16 = v19 * (v20 * v20);
          goto LABEL_30;
        case 6:
          v34 = v50;
          v21 = CMTimeGetSeconds(&v34);
          time1 = v50;
          time2 = v49;
          v22 = 1.0 / (v21 * v21);
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v33);
          v23 = CMTimeGetSeconds(&v33);
          v16 = 1.0 - v22 * (v23 * v23);
          goto LABEL_30;
        case 8:
          operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&v45);
          v11 = &v45;
LABEL_20:
          v16 = CMTimeGetSeconds(v11);
          goto LABEL_30;
        case 9:
          v24 = (const void *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 320))(this);
          if (v24)
          else
            v25 = 0;
          operator/((__int128 *)&v49.value, (uint64_t)&v50, (uint64_t)&v32);
          v53 = CMTimeGetSeconds(&v32);
          OZFigTimeForChannelSeconds(&time1, v53, 0x40000);
          OZChannel::getValueAsDouble((OZChannel *)(v25 + 29256), &time1, 0.0);
          goto LABEL_30;
        default:
          break;
      }
    }
    v30 = 1.0;
    if (v53 <= 1.0)
      v30 = v53;
    if (v53 >= 0.0)
      return v30;
    else
      return 0.0;
  }
  return v7;
}

void OZWriteOnBehavior::solveWriteOnNode(OZWriteOnBehavior *this, OZChannelBase *a2, OZCurveNodeParam *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  v3 = *((_QWORD *)a3 + 19);
  v4 = *((_QWORD *)a3 + 10);
  v11 = *(CMTime *)((_BYTE *)a3 + 5);
  v5 = *((_OWORD *)a3 + 6);
  *(_OWORD *)&v10.value = v5;
  v10.epoch = *((_QWORD *)a3 + 14);
  if (*((_DWORD *)a3 + 36))
  {
    v9 = 0;
    do
    {
      *(double *)(v3 + 8 * v9) = OZWriteOnBehavior::solveWriteOnNode(this, a2, &v10, *(double *)&v5, *(double *)(v4 + 8 * v9));
      v13 = v10;
      v12 = v11;
      *(double *)&v5 = PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v10);
      ++v9;
    }
    while (v9 < *((unsigned int *)a3 + 36));
  }
}

OZChannelBase *OZWriteOnBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  OZChannelBase *result;
  uint64_t v4;
  int v5;
  const CMTime *v6;
  char *v7;
  uint64_t i;
  char *v9;
  uint64_t j;
  char *v11;

  result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(a1 + 1352), MEMORY[0x1E0CA2E68], 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (int)result;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v7 = *(char **)(v4 + 16);
      if (v7)
      result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)(v7 + 1352), v6, 0.0);
      if (v5 != (_DWORD)result)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a2)
      {
        for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          v9 = *(char **)(i + 16);
          if (v9)
          result = OZChannelBase::enable((OZChannelBase *)(v9 + 1608), v5 == 7, 1);
        }
        return result;
      }
    }
    for (j = *(_QWORD *)(a2 + 8); j != a2; j = *(_QWORD *)(j + 8))
    {
      v11 = *(char **)(j + 16);
      if (v11)
      result = OZChannelBase::enable((OZChannelBase *)(v11 + 1608), 1, 1);
    }
  }
  return result;
}

BOOL OZWriteOnBehavior::isRebuildUIChannel(OZWriteOnBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 1352) == a2;
}

void OZWriteOnBehavior::setDefaultSpeedType(OZWriteOnBehavior *this, unsigned int a2)
{
  OZChannelBase *v2;

  v2 = (OZChannelBase *)((char *)this + 1352);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), (double)a2);
  OZChannelBase::reset(v2, 0);
}

uint64_t OZWriteOnBehavior::reset(OZWriteOnBehavior *this)
{
  __n128 v3;
  CMTimeEpoch v4;
  CMTime v5;
  CMTime v6;
  _QWORD v7[3];
  CMTime v8;
  CMTime v9;
  CMTime v10;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 608))(v7);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1608), 0);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 1608), 4);
  OZChannel::setKeyframe((OZChannel *)((char *)this + 1608), MEMORY[0x1E0CA2E68], 0.0, 1);
  v5 = v8;
  OZBehavior::getFrameDuration(this, &v3);
  v10 = v5;
  *(__n128 *)&v9.value = v3;
  v9.epoch = v4;
  PC_CMTimeSaferSubtract(&v10, &v9, (uint64_t)&v6);
  return OZChannel::setKeyframe((OZChannel *)((char *)this + 1608), &v6, 100.0, 1);
}

uint64_t OZWriteOnBehavior::parseBegin(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1608), 0);
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::setValue((OZChannel *)((char *)this + 1912), MEMORY[0x1E0CA2E68], 1.0, 0);
  return OZBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'OZWriteOnBehavior::parseBegin(OZWriteOnBehavior *this, PCSerializerReadStream *a2)
{
  return OZWriteOnBehavior::parseBegin((OZWriteOnBehavior *)((char *)this - 48), a2);
}

uint64_t OZWriteOnBehavior::getCurveNodeForChannel(OZWriteOnBehavior *this, OZChannel *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  const void *v6;
  OZWriteOnBehavior **v7;
  uint64_t v8;
  char *v10;
  char *v11;

  OZChannel::enumerateCurveProcessingNodes(a2, &v10);
  v3 = v10;
  v4 = v11;
  if (v10 != v11)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(const void **)&v3[v5];
      if (v6)
      {
        if (v7)
        {
          if (v7[1] == this)
            break;
        }
      }
      v5 += 8;
      if (&v3[v5] == v4)
        goto LABEL_7;
    }
    if (v5)
    {
      v8 = *(_QWORD *)&v3[v5 - 8];
      if (!v3)
        return v8;
      goto LABEL_8;
    }
  }
LABEL_7:
  v8 = 0;
  if (v3)
LABEL_8:
    operator delete(v3);
  return v8;
}

char *OZWriteOnBehavior::willBake(OZWriteOnBehavior *this, PCTimeRange *a2)
{
  char *result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  CMTime v8;
  __n128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  CMTime time;
  unsigned int Seconds;

  result = (char *)(*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      v5 = result;
      v11 = *(_OWORD *)((char *)a2 + 24);
      v12 = *((_QWORD *)a2 + 5);
      v6 = (*(uint64_t (**)(OZWriteOnBehavior *))(*(_QWORD *)this + 336))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v9);
      operator/(&v11, (uint64_t)&v9, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
      *((_QWORD *)this + 260) = *((_QWORD *)this + 259);
      *((_QWORD *)this + 263) = *((_QWORD *)this + 262);
      v7 = *((_QWORD *)a2 + 2);
      *(_OWORD *)((char *)this + 2120) = *(_OWORD *)a2;
      *((_QWORD *)this + 267) = v7;
      OZWriteOnBehavior::getCurveNodeForChannel(this, (OZChannel *)(v5 + 28952));
      v9 = *(__n128 *)a2;
      v10 = *((_QWORD *)a2 + 2);
      (*(void (**)(__int128 *__return_ptr, char *, __n128 *))(*((_QWORD *)v5 + 3619) + 328))(&v11, v5 + 28952, &v9);
      CMTimeMake(&v8, 1, 1);
      OZChannel::getSamples((uint64_t)(v5 + 28952));
      OZWriteOnBehavior::getCurveNodeForChannel(this, (OZChannel *)(v5 + 29104));
      v9 = *(__n128 *)a2;
      v10 = *((_QWORD *)a2 + 2);
      (*(void (**)(__int128 *__return_ptr, char *, __n128 *))(*((_QWORD *)v5 + 3638) + 328))(&v11, v5 + 29104, &v9);
      CMTimeMake(&v8, 1, 1);
      result = (char *)OZChannel::getSamples((uint64_t)(v5 + 29104));
    }
  }
  *((_BYTE *)this + 320) = 1;
  return result;
}

__n128 OZWriteOnBehavior::didBake(OZWriteOnBehavior *this)
{
  uint64_t v1;
  __n128 result;

  *((_QWORD *)this + 260) = *((_QWORD *)this + 259);
  *((_QWORD *)this + 263) = *((_QWORD *)this + 262);
  v1 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 2120) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 267) = *(_QWORD *)(v1 + 16);
  *((_BYTE *)this + 320) = 0;
  return result;
}

void OZ3DEngineApplyForceBehavior::OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;
  PCString v7;

  OZBehavior::OZBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(_QWORD *)this = &off_1E6584040;
  *((_QWORD *)this + 2) = &unk_1E65842D8;
  *((_QWORD *)this + 6) = &unk_1E6584530;
  *((_QWORD *)this + 42) = &unk_1E6584588;
  PCString::PCString(&v7, "Fixed;Towards Object");
  PCString::PCString(&v6, "Direction Mode");
  OZChannelEnum::OZChannelEnum((OZ3DEngineApplyForceBehavior *)((char *)this + 536), 0, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Direction");
  OZChannel3D::OZChannel3D((OZ3DEngineApplyForceBehavior *)((char *)this + 792), 0.0, 1.0, 0.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 3u, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Target Object");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineApplyForceBehavior *)((char *)this + 1384), &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Strength");
  OZChannelDouble::OZChannelDouble((OZ3DEngineApplyForceBehavior *)((char *)this + 1544), 1.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Instantaneous");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), 1, &v7, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v7);
  *((_QWORD *)this + 231) = 0;
}

void sub_1B2DE6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  uint64_t v12;
  OZChannelEnum *v13;
  OZChannel3D *v14;
  OZChanTransformNodeRef *v15;
  OZChannel *v16;

  PCString::~PCString(&a12);
  OZChannel::~OZChannel(v16);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v15);
  OZChannel3D::~OZChannel3D(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  *(_QWORD *)(v12 + 336) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v12 + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v12 + 344));
  OZBehavior::~OZBehavior((OZBehavior *)v12);
  _Unwind_Resume(a1);
}

void sub_1B2DE6914()
{
  JUMPOUT(0x1B2DE6904);
}

void OZ3DEngineApplyForceBehavior::OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this, const OZ3DEngineApplyForceBehavior *a2, char a3)
{
  uint64_t v5;

  OZBehavior::OZBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(_QWORD *)this = &off_1E6584040;
  *((_QWORD *)this + 2) = &unk_1E65842D8;
  *((_QWORD *)this + 6) = &unk_1E6584530;
  *((_QWORD *)this + 42) = &unk_1E6584588;
  OZChannelEnum::OZChannelEnum((OZ3DEngineApplyForceBehavior *)((char *)this + 536), (const OZ3DEngineApplyForceBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannel3D::OZChannel3D((OZ3DEngineApplyForceBehavior *)((char *)this + 792), (const OZ3DEngineApplyForceBehavior *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 56));
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineApplyForceBehavior *)((char *)this + 1384), (const OZ3DEngineApplyForceBehavior *)((char *)a2 + 1384), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 1544), (const OZChannelBase *)((char *)a2 + 1544), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 193) = &off_1E6551358;
  *((_QWORD *)this + 195) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1696), (const OZChannelBase *)((char *)a2 + 1696), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 231) = 0;
}

void sub_1B2DE6A0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZChannelEnum *v2;
  OZChannel3D *v3;
  OZChanTransformNodeRef *v4;
  OZChannel *v5;

  OZChannel::~OZChannel(v5);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v4);
  OZChannel3D::~OZChannel3D(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  *(_QWORD *)(v1 + 336) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v1 + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v1 + 344));
  OZBehavior::~OZBehavior((OZBehavior *)v1);
  _Unwind_Resume(a1);
}

void sub_1B2DE6A80()
{
  JUMPOUT(0x1B2DE6A70);
}

void OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this)
{
  *(_QWORD *)this = &off_1E6584040;
  *((_QWORD *)this + 2) = &unk_1E65842D8;
  *((_QWORD *)this + 6) = &unk_1E6584530;
  *((_QWORD *)this + 42) = &unk_1E6584588;

  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1544));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZ3DEngineApplyForceBehavior *)((char *)this + 1384));
  *((_QWORD *)this + 99) = &off_1E65568E0;
  *((_QWORD *)this + 101) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1232));
  OZChannel2D::~OZChannel2D((OZ3DEngineApplyForceBehavior *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineApplyForceBehavior *)((char *)this + 536));
  *((_QWORD *)this + 42) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 344));
  OZBehavior::~OZBehavior(this);
}

{
  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior(OZ3DEngineApplyForceBehavior *this)
{
  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior((OZ3DEngineApplyForceBehavior *)((char *)this - 16));
}

{
  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior((OZ3DEngineApplyForceBehavior *)((char *)this - 48));
}

{
  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior((OZ3DEngineApplyForceBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEngineApplyForceBehavior::~OZ3DEngineApplyForceBehavior((OZ3DEngineApplyForceBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DEngineApplyForceBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZBehavior::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelFolder::operator=(a1 + 792);
  OZChannelBase::operator=(a1 + 928, (uint64_t)v5 + 928);
  OZChannelBase::operator=(a1 + 1080, (uint64_t)v5 + 1080);
  OZChannelBase::operator=(a1 + 1232, (uint64_t)v5 + 1232);
  OZChannelBase::operator=(a1 + 1544, (uint64_t)v5 + 1544);
  OZChannelBase::operator=(a1 + 1696, (uint64_t)v5 + 1696);
  return OZChanSceneNodeRef::operator=(a1 + 1384, (uint64_t)v5 + 1384);
}

void *OZ3DEngineApplyForceBehavior::didAddToNode(void *this, OZSceneNode *lpsrc)
{
  uint64_t v3;

  if (lpsrc)
  {
    v3 = (uint64_t)this;
    if (this)
      *(_QWORD *)(v3 + 328) = lpsrc;
  }
  return this;
}

double OZ3DEngineApplyForceBehavior::fixedDirection@<D0>(OZ3DEngineApplyForceBehavior *this@<X0>, const CMTime *a2@<X1>, double *a3@<X8>)
{
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v8 = 0.0;
  v9 = 0.0;
  v7 = 0.0;
  OZChannelScale3D::getValue((OZ3DEngineApplyForceBehavior *)((char *)this + 792), a2, &v9, &v8, &v7, 0.0);
  v5 = v8;
  result = v9;
  v6 = v7;
  *a3 = v9;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

void OZ3DEngineApplyForceBehavior::magnitude(OZ3DEngineApplyForceBehavior *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1544), a2, 0.0);
}

BOOL OZ3DEngineApplyForceBehavior::isImpulse(OZ3DEngineApplyForceBehavior *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1696), a2, 0.0) != 0;
}

uint64_t OZ3DEngineApplyForceBehavior::directionMode(OZ3DEngineApplyForceBehavior *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), a2, 0.0);
}

const void *OZ3DEngineApplyForceBehavior::targetObject(OZ3DEngineApplyForceBehavior *this)
{
  return OZChanTransformNodeRef::getTransformNode((OZChannelBase *)((char *)this + 1384));
}

id OZ3DEngineApplyForceBehavior::UUID(OZ3DEngineApplyForceBehavior *this)
{
  id result;

  result = (id)*((_QWORD *)this + 231);
  if (!result)
  {
    result = (id)objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    *((_QWORD *)this + 231) = result;
  }
  return result;
}

BOOL OZ3DEngineApplyForceBehavior::isRebuildUIChannel(OZ3DEngineApplyForceBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 536) == a2;
}

char *OZ3DEngineApplyForceBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  char *result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t i;
  const void *v8;
  char *v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  CMTime v13;

  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  result = (char *)OZChannel::getValueAsInt((OZChannel *)(a1 + 536), &v13, 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (int)result;
    while (1)
    {
      result = *(char **)(v4 + 16);
      if (result)
      {
        if (result)
        {
          result = (char *)OZChannel::getValueAsInt((OZChannel *)(result + 536), &v13, 0.0);
          if ((_DWORD)result != v5)
            break;
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a2)
      {
        v6 = 1;
        goto LABEL_9;
      }
    }
    v6 = 0;
LABEL_9:
    for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
    {
      v8 = *(const void **)(i + 16);
      if (v8)
      else
        v9 = 0;
      v10 = (OZChannelBase *)(v9 + 1384);
      if (v6)
      {
        v11 = (OZChannelBase *)(v9 + 792);
        if (!v5)
        {
          OZChannelBase::setFlag(v10, 0x400000, 1);
          result = (char *)OZChannelBase::resetFlag(v11, 0x400000, 1);
          continue;
        }
        OZChannelBase::resetFlag(v10, 0x400000, 1);
        v12 = v11;
      }
      else
      {
        OZChannelBase::setFlag(v10, 0x400000, 1);
        v12 = (OZChannelBase *)(v9 + 792);
      }
      result = (char *)OZChannelBase::setFlag(v12, 0x400000, 1);
    }
  }
  return result;
}

uint64_t OZ3DEngineApplyForceBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _QWORD *i;
  unint64_t v9;
  OZScene *v10;
  char *v11;

  v6 = result;
  v7 = (char *)(result + 336);
  for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
  {
    v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7)
        return result;
      ++i;
    }
  }
  v11 = (char *)(result + 336);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t `non-virtual thunk to'OZ3DEngineApplyForceBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEngineApplyForceBehavior::getLockDependencies(a1 - 336, a2, a3, a4);
}

uint64_t OZ3DEngineApplyForceBehavior::getLockingGroups(OZ3DEngineApplyForceBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZ3DEngineApplyForceBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return (*(uint64_t (**)(OZ3DEngineApplyForceBehavior *))(*(_QWORD *)this + 336))(this) + 1784;
  return result;
}

uint64_t `non-virtual thunk to'OZ3DEngineApplyForceBehavior::getLockingGroups(OZ3DEngineApplyForceBehavior *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 336;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 42) + 336))((char *)this - 336);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 336))(v1) + 1784;
  return result;
}

uint64_t OZBehavior::didInsert(uint64_t this, OZSceneNode *a2, OZBehavior *a3)
{
  *(_QWORD *)(this + 328) = a2;
  return this;
}

uint64_t OZBehavior::willRemove(uint64_t this)
{
  *(_QWORD *)(this + 328) = 0;
  return this;
}

uint64_t `non-virtual thunk to'OZ3DEngineApplyForceBehavior::getLockingID(OZ3DEngineApplyForceBehavior *this)
{
  return *((unsigned int *)this - 64);
}

void OZWriteOnCurveNode::OZWriteOnCurveNode(OZWriteOnCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  _QWORD *v3;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *v3 = &off_1E6584608;
}

void OZWriteOnCurveNode::~OZWriteOnCurveNode(OZWriteOnCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double OZWriteOnCurveNode::solveNode(OZWriteOnCurveNode *this, const CMTime *a2, double a3, double a4)
{
  void *v8;

  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  return OZWriteOnBehavior::solveWriteOnNode((OZWriteOnBehavior *)v8, *((OZChannelBase **)this + 2), a2, a3, a4);
}

void OZWriteOnCurveNode::solveNode(OZWriteOnCurveNode *this, OZCurveNodeParam *a2)
{
  void *v4;

  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  OZWriteOnBehavior::solveWriteOnNode((OZWriteOnBehavior *)v4, *((OZChannelBase **)this + 2), a2);
}

OZBehaviorCurveNode *OZWriteOnCurveNode::cloneNode(OZWriteOnCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E6584608;
  return v2;
}

void sub_1B2DE7198(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

uint64_t OZWriteOnCurveNode::compare(OZWriteOnCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 OZWriteOnCurveNode::getNeededRange(OZWriteOnCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

HGBitmap *PGMetalTexture::toBitmap@<X0>(PGMetalTexture *this@<X0>, _QWORD *a2@<X8>)
{
  HGBitmap *result;
  id *v5;
  uint64_t v6;
  uint64_t CGColorSpace;
  uint64_t v8;
  CGColorSpace *v9;
  uint64_t v10;
  HGBitmap *v11;

  result = (HGBitmap *)*((_QWORD *)this + 8);
  if (result && (v5 = (id *)*((_QWORD *)this + 9)) != 0)
  {
    HGMetalTexture::CreateBitmapCopy((HGMetalTexture *)result, v5, *(HGRect *)((char *)result + 20), &v11);
    v6 = operator new();
    FxBitmapRepHGBitmap::FxBitmapRepHGBitmap(v6, &v11);
    v10 = v6;
    PCImage::getColorSpace(this, &v9);
    CGColorSpace = PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v9);
    PCCreateBitmap<FxBitmapRepHGBitmap>(&v10, CGColorSpace, (uint64_t)a2);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = v11;
    if (v11)
      return (HGBitmap *)(*(uint64_t (**)(HGBitmap *))(*(_QWORD *)v11 + 24))(v11);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_1B2DE730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(a1);
}

double PCCreateBitmap<FxBitmapRepHGBitmap>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 48))(*a1))
  {
    case 1u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 2u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 3u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 4u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 5u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 6u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 7u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 8u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 9u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xAu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xBu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xCu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xDu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xEu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xFu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0x10u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0x11u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
LABEL_20:
      result = *(double *)&v6;
      *(_OWORD *)a3 = v6;
      break;
    default:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      break;
  }
  return result;
}

void PGMetalTexture::~PGMetalTexture(PGMetalTexture *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6584700;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6584700;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PGMetalTexture::getWidth(PGMetalTexture *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (v1)
    return (*(_DWORD *)(v1 + 28) - *(_DWORD *)(v1 + 20));
  else
    return 0;
}

uint64_t PGMetalTexture::getHeight(PGMetalTexture *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (v1)
    return (*(_DWORD *)(v1 + 32) - *(_DWORD *)(v1 + 24));
  else
    return 0;
}

uint64_t PGMetalTexture::getSize(PGMetalTexture *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (v1)
    return *(_QWORD *)(v1 + 72);
  else
    return 0;
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE76D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511C20;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE7738(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE77A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502C60;
  return a1;
}

void sub_1B2DE7828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap::PCBitmap<FxBitmapRepHGBitmap>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int BitsPerChannel;
  unsigned int v10;
  int NumChannels;
  unsigned int v12;
  CGColorSpace *v13;
  uint64_t v14;

  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  BitsPerChannel = PCPixelFormat::getBitsPerChannel(v8);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  NumChannels = PCPixelFormat::getNumChannels(v10);
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  v13 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(a3, v12);
  PCImage::PCImage((PCImage *)a1, v6, v7, BitsPerChannel, NumChannels, v13);
  *(_QWORD *)a1 = &off_1E6511638;
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 24) = 1;
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE7990(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511C70;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE79F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE7A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511CC0;
  return a1;
}

void sub_1B2DE7AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE7B5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511D38;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE7BC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE7C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511830;
  return a1;
}

void sub_1B2DE7CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE7D28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511D88;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE7D8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE7DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65118A8;
  return a1;
}

void sub_1B2DE7E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE7EF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511DD8;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE7F58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE7FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502A80;
  return a1;
}

void sub_1B2DE8048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE80C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511E28;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE8124(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE818C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511920;
  return a1;
}

void sub_1B2DE8214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE828C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511E78;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE82F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE8358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502B70;
  return a1;
}

void sub_1B2DE83E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE8458(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511EC8;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE84BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE8524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511F18;
  return a1;
}

void sub_1B2DE85AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE8624(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511F90;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE8688(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE86F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502990;
  return a1;
}

void sub_1B2DE8778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE87F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511FE0;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE8854(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE88BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6512030;
  return a1;
}

void sub_1B2DE8944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE89BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E65120A8;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE8A20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE8A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65120F8;
  return a1;
}

void sub_1B2DE8B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE8B88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512170;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE8BEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE8C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65121C0;
  return a1;
}

void sub_1B2DE8CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE8D54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512238;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE8DB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE8E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511998;
  return a1;
}

void sub_1B2DE8EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE8F20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512288;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE8F84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE8FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65122D8;
  return a1;
}

void sub_1B2DE9074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE90EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512350;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE9150(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE91B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65123A0;
  return a1;
}

void sub_1B2DE9240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE92B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512418;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE931C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE9384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511A10;
  return a1;
}

void sub_1B2DE940C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2DE9484(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512468;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2DE94E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2DE9550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>::PCBitmap_t<FxBitmapRepHGBitmap>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511A88;
  return a1;
}

void sub_1B2DE95D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void OZTextStyle::OZTextStyle(OZTextStyle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZStyle::OZStyle(this, a2, a3, a4);
  *v4 = off_1E6584778;
  v4[2] = &unk_1E65848A8;
  v4[6] = &unk_1E6584B00;
}

void OZTextStyle::OZTextStyle(OZTextStyle *this, const OZTextStyle *a2, OZSceneNode *a3, char a4)
{
  _QWORD *v4;

  OZStyle::OZStyle(this, a2, a3, a4);
  *v4 = off_1E6584778;
  v4[2] = &unk_1E65848A8;
  v4[6] = &unk_1E6584B00;
}

void OZMotionPathBehavior::OZMotionPathBehavior(OZMotionPathBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCURL *v6;
  PCURL *v7;
  PCURL *v8;
  PCURL *v9;
  OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *v10;
  OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *Instance;
  OZChannelInfo *v12;
  PCURL *v13;
  OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *v14;
  OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *v15;
  OZChannelInfo *v16;
  PCURL *v17;
  PCURL *v18;
  PCURL *v19;
  OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *v20;
  OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *v21;
  OZChannelInfo *v22;
  PCURL *v23;
  OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *v24;
  OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *v25;
  OZChannelInfo *v26;
  PCURL *v27;
  OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *v28;
  OZChannelInfo *v29;
  PCURL *v30;
  OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *v31;
  OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *v32;
  OZChannelInfo *v33;
  PCURL *v34;
  PCURL *v35;
  OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl *v36;
  OZChannelImpl *v37;
  PCURL *v38;
  PCURL *v39;
  PCURL *v40;
  PCURL *v41;
  PCURL *v42;
  PCURL *v43;
  OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl *v44;
  OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *v45;
  OZChannelInfo *v46;
  PCURL *v47;
  PCURL *v48;
  OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *v49;
  OZChannelImpl *v50;
  PCString *v51;
  PCString v52;
  PCString v53[2];
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v5 = &off_1E6584B70;
  v5[2] = &unk_1E6584E28;
  v5[6] = &unk_1E6585080;
  v5[42] = &unk_1E65850D8;
  PCURL::PCURL((PCURL *)v53, CFSTR("Motion Path Parameter Path Shape"));
  PCURL::PCURL((PCURL *)&v52, CFSTR("Motion Path Behavior Path Shape"));
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 536), v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v6, CFSTR("Channel Position"));
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 792), v53, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0x28210002u, 3u);
  PCString::~PCString(v53);
  PCURL::PCURL(v7, CFSTR("Channel Position"));
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 1680), v53, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0x28210002u, 3u);
  PCString::~PCString(v53);
  PCURL::PCURL(v8, CFSTR("Motion Path Parameter Path Type"));
  PCURL::PCURL((PCURL *)&v52, CFSTR("Motion Path Behavior Path Type"));
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 2568), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v9, CFSTR("Motion Path Behavior Circle Radius"));
  Instance = (OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *)OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(v10);
  v12 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(Instance);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 2824), 200.0, 200.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 2u, (OZChannelImpl *)Instance, v12);
  PCString::~PCString(v53);
  PCURL::PCURL(v13, CFSTR("Motion Path Behavior Rect Size"));
  v15 = (OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *)OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(v14);
  v16 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(v15);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 3264), 400.0, 400.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 2u, (OZChannelImpl *)v15, v16);
  PCString::~PCString(v53);
  PCURL::PCURL(v17, CFSTR("Motion Path Behavior Wave Start Point"));
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 3704), 0.0, 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD6u, 0x10002u, 2u, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v18, CFSTR("Motion Path Behavior Wave End Point"));
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 4408), 0.0, 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 2u, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v19, CFSTR("Motion Path Behavior Wave Amplitude"));
  v21 = (OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(v20);
  v22 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 5112), 100.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD8u, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(v53);
  PCURL::PCURL(v23, CFSTR("Motion Path Behavior Wave Frequency"));
  v25 = (OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(v24);
  v26 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(v25);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 5264), 1.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD9u, 0, (OZChannelImpl *)v25, v26);
  PCString::~PCString(v53);
  PCURL::PCURL(v27, CFSTR("Motion Path Behavior Wave Phase"));
  v29 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(v28);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 5416), 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xDAu, 0, 0, v29);
  PCString::~PCString(v53);
  PCURL::PCURL(v30, CFSTR("Motion Path Behavior Wave Damping"));
  v32 = (OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(v31);
  v33 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(v32);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 5568), 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xDDu, 0, (OZChannelImpl *)v32, v33);
  PCString::~PCString(v53);
  PCURL::PCURL(v34, CFSTR("Emitter Geometry Node Ref"));
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker((OZMotionPathBehavior *)((char *)this + 5720), v53, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v35, CFSTR("Motion Path Behavior Offset"));
  v37 = (OZChannelImpl *)OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(v36);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 39, 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, v37, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v38, CFSTR("Motion Path Behavior Transform"));
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 40, 1, v53, (OZChannelFolder *)((char *)this + 56), 0xDCu, 0, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v39, CFSTR("Motion Path Parameter Path Direction"));
  PCURL::PCURL((PCURL *)&v52, CFSTR("Motion Path Behavior Path Direction"));
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6232), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xDBu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v40, CFSTR("Motion Path Parameter Speed"));
  PCURL::PCURL((PCURL *)&v52, CFSTR("Motion Path Behavior Speed"));
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6488), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v41, CFSTR("Motion Path Behavior Velocity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6744), 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v42, CFSTR("Motion Path Parameter Frequency Mode"));
  PCURL::PCURL((PCURL *)&v52, CFSTR("Motion Path Behavior Frequency Mode"));
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6896), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v43, CFSTR("Motion Path Behavior Frequency"));
  v45 = (OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *)OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(v44);
  v46 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(v45);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 7152), 1, v53, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, (OZChannelImpl *)v45, v46);
  PCString::~PCString(v53);
  PCURL::PCURL(v47, CFSTR("Motion Path Parameter Path End Condition"));
  PCURL::PCURL((PCURL *)&v52, CFSTR("Motion Path Behavior Path End Condition"));
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 7304), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xDEu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v48, CFSTR("Motion Path Behavior End Frame Offset"));
  v50 = (OZChannelImpl *)OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(v49);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 7560), v53, (OZChannelFolder *)((char *)this + 56), 0xCBu, 10, v50, 0);
  PCString::~PCString(v53);
  PCString::PCString(v51, "");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7712), 0, v53, (OZChannelFolder *)((char *)this + 56), 0xDFu, 2u, 0, 0);
  PCString::~PCString(v53);
  PCSharedMutex::PCSharedMutex((OZMotionPathBehavior *)((char *)this + 7864));
  *((_DWORD *)this + 1992) = -1;
  *(_OWORD *)&v53[0].var0 = xmmword_1B355C7F0;
  v54 = unk_1B355C800;
  OZChannelEnum::setTags((OZMotionPathBehavior *)((char *)this + 6488), (char *)v53, 8);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 928), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 116) + 128))((char *)this + 928);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1080), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 135) + 128))((char *)this + 1080);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1528), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 191) + 128))((char *)this + 1528);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1816), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 227) + 128))((char *)this + 1816);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1968), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 246) + 128))((char *)this + 1968);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2416), 0x20000, 0);
  (*(void (**)(char *))(*((_QWORD *)this + 302) + 128))((char *)this + 2416);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7560), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7560));
  OZChannel::setIsSpline((OZChannel *)((char *)this + 6744), 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6744), 0x10000, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6744));
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 0);
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 1);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 6744), 4);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 6744), 0, 0);
  *((_BYTE *)this + 2120) = 0;
  *((_BYTE *)this + 1232) = 0;
}

void sub_1B2DEA0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannelBool *a11, OZChannelPercent *a12, OZChanObjectRefWithPicker *a13, OZChannel *a14, OZChannel *a15, OZChannel *a16, OZChannel *a17, OZChannelPosition *a18, OZChannelPosition *a19, OZChannel2D *a20,OZChannel2D *a21,OZChannelEnum *a22,OZChannelPosition3D *a23,OZChannelPosition3D *a24,OZChannelEnum *a25,PCString a26)
{
  OZChannelBehavior *v26;
  OZChannelPercent *v27;
  OZChannelEnum *v28;
  OZChannel *v29;
  OZChannelEnum *v30;
  OZChannel *v31;
  OZChannelBool *v32;
  OZChannelEnum *v33;

  OZChannelBool::~OZChannelBool(v32);
  OZChannel::~OZChannel(v31);
  OZChannelEnum::~OZChannelEnum(v30);
  OZChannel::~OZChannel(v29);
  OZChannelEnum::~OZChannelEnum(v28);
  OZChannelPercent::~OZChannelPercent(v27);
  OZChannelEnum::~OZChannelEnum(v33);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannel::~OZChannel(a17);
  OZChannelPosition::~OZChannelPosition(a18);
  OZChannelPosition::~OZChannelPosition(a19);
  OZChannel2D::~OZChannel2D(a20);
  OZChannel2D::~OZChannel2D(a21);
  OZChannelEnum::~OZChannelEnum(a22);
  OZChannelPosition3D::~OZChannelPosition3D(a23);
  OZChannelPosition3D::~OZChannelPosition3D(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannelBehavior::~OZChannelBehavior(v26);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior(OZMotionPathBehavior *this, const OZMotionPathBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  int v7[4];
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E6584B70;
  *(_QWORD *)(v5 + 16) = &unk_1E6584E28;
  *(_QWORD *)(v5 + 48) = &unk_1E6585080;
  *(_QWORD *)(v5 + 336) = &unk_1E65850D8;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 536), (const OZMotionPathBehavior *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 792), (const OZMotionPathBehavior *)((char *)a2 + 792), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 1680), (const OZMotionPathBehavior *)((char *)a2 + 1680), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 2568), (const OZMotionPathBehavior *)((char *)a2 + 2568), v6);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 2824), (const OZMotionPathBehavior *)((char *)a2 + 2824), v6);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 3264), (const OZMotionPathBehavior *)((char *)a2 + 3264), v6);
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 3704), (const OZMotionPathBehavior *)((char *)a2 + 3704), v6);
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 4408), (const OZMotionPathBehavior *)((char *)a2 + 4408), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 5112), (const OZChannelBase *)((char *)a2 + 5112), v6);
  *((_QWORD *)this + 639) = &off_1E6551358;
  *((_QWORD *)this + 641) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 5264), (const OZChannelBase *)a2 + 47, v6);
  *((_QWORD *)this + 658) = &off_1E6551358;
  *((_QWORD *)this + 660) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 5416), (const OZChannelBase *)((char *)a2 + 5416), v6);
  *((_QWORD *)this + 677) = &off_1E6551728;
  *((_QWORD *)this + 679) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 5568), (const OZChannelBase *)((char *)a2 + 5568), v6);
  *((_QWORD *)this + 696) = &off_1E6551358;
  *((_QWORD *)this + 698) = &unk_1E65516B8;
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker((OZMotionPathBehavior *)((char *)this + 5720), (const OZMotionPathBehavior *)((char *)a2 + 5720), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 39, (const OZChannelBase *)((char *)a2 + 5928), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 40, (const OZChannelBase *)((char *)a2 + 6080), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6232), (const OZMotionPathBehavior *)((char *)a2 + 6232), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6488), (const OZMotionPathBehavior *)((char *)a2 + 6488), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6744), (const OZChannelBase *)((char *)a2 + 6744), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6896), (const OZMotionPathBehavior *)((char *)a2 + 6896), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 7152), (const OZChannelBase *)((char *)a2 + 7152), v6);
  *((_QWORD *)this + 894) = &off_1E6551AF8;
  *((_QWORD *)this + 896) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 7304), (const OZMotionPathBehavior *)((char *)a2 + 7304), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 7560), (const OZChannelBase *)((char *)a2 + 7560), v6);
  *((_QWORD *)this + 945) = &off_1E6551358;
  *((_QWORD *)this + 947) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7712), (const OZChannelBase *)((char *)a2 + 7712), v6);
  PCSharedMutex::PCSharedMutex((OZMotionPathBehavior *)((char *)this + 7864));
  *((_DWORD *)this + 1992) = *((_DWORD *)a2 + 1992);
  *(_OWORD *)v7 = xmmword_1B355C7F0;
  v8 = unk_1B355C800;
  OZChannelEnum::setTags((OZMotionPathBehavior *)((char *)this + 6488), (char *)v7, 8);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7560), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7560));
  OZChannel::setIsSpline((OZChannel *)((char *)this + 6744), 1);
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 0);
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 1);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 6744), 4);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2568), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2568));
}

void sub_1B2DEA800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZChannelBool *a10, OZChannelPercent *a11, OZChanObjectRefWithPicker *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannel *a16, OZChannelPosition *a17, OZChannelPosition *a18, OZChannel2D *a19, OZChannel2D *a20,OZChannelPosition3D *a21,OZChannelPosition3D *a22,OZChannelEnum *a23,OZChannelEnum *a24)
{
  OZChannelBehavior *v24;
  OZChannelEnum *v25;
  OZChannelPercent *v26;
  OZChannelBool *v27;
  OZChannelEnum *v28;
  OZChannel *v29;
  OZChannelEnum *v30;
  OZChannel *v31;

  OZChannelBool::~OZChannelBool(v27);
  OZChannel::~OZChannel(v31);
  OZChannelEnum::~OZChannelEnum(v30);
  OZChannel::~OZChannel(v29);
  OZChannelEnum::~OZChannelEnum(v28);
  OZChannelPercent::~OZChannelPercent(v26);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelPosition::~OZChannelPosition(a17);
  OZChannelPosition::~OZChannelPosition(a18);
  OZChannel2D::~OZChannel2D(a19);
  OZChannel2D::~OZChannel2D(a20);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelPosition3D::~OZChannelPosition3D(a21);
  OZChannelPosition3D::~OZChannelPosition3D(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannelBehavior::~OZChannelBehavior(v24);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::~OZMotionPathBehavior(OZMotionPathBehavior *this)
{
  *(_QWORD *)this = &off_1E6584B70;
  *((_QWORD *)this + 2) = &unk_1E6584E28;
  *((_QWORD *)this + 6) = &unk_1E6585080;
  *((_QWORD *)this + 42) = &unk_1E65850D8;
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 7864));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7560));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 7304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7152));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6896));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 6744));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6488));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6232));
  OZChannelBool::~OZChannelBool((OZChannelBool *)this + 40);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 39);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZMotionPathBehavior *)((char *)this + 5720));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5264));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5112));
  OZChannelPosition::~OZChannelPosition((OZMotionPathBehavior *)((char *)this + 4408));
  OZChannelPosition::~OZChannelPosition((OZMotionPathBehavior *)((char *)this + 3704));
  OZChannel2D::~OZChannel2D((OZMotionPathBehavior *)((char *)this + 3264));
  OZChannel2D::~OZChannel2D((OZMotionPathBehavior *)((char *)this + 2824));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 2568));
  OZChannelPosition3D::~OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 1680));
  OZChannelPosition3D::~OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 536));
  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZMotionPathBehavior::~OZMotionPathBehavior(OZMotionPathBehavior *this)
{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 16));
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 48));
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 336));
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

OZChannelBase *OZMotionPathBehavior::operator=(uint64_t a1, const void *a2)
{
  _DWORD *v4;
  _DWORD *v5;

  OZChannelBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelPosition::operator=(a1 + 792, (uint64_t)(v4 + 198));
  OZChannelPosition::operator=(a1 + 1680, (uint64_t)(v5 + 420));
  OZChannelBase::operator=(a1 + 536, (uint64_t)(v5 + 134));
  OZChanObjectRefWithPicker::operator=(a1 + 5720, (uint64_t)(v5 + 1430));
  OZChannelFolder::operator=(a1 + 2824);
  OZChannelBase::operator=(a1 + 2960, (uint64_t)(v5 + 740));
  OZChannelBase::operator=(a1 + 3112, (uint64_t)(v5 + 778));
  OZChannelFolder::operator=(a1 + 3264);
  OZChannelBase::operator=(a1 + 3400, (uint64_t)(v5 + 850));
  OZChannelBase::operator=(a1 + 3552, (uint64_t)(v5 + 888));
  OZChannelPosition::operator=(a1 + 3704, (uint64_t)(v5 + 926));
  OZChannelPosition::operator=(a1 + 4408, (uint64_t)(v5 + 1102));
  OZChannelBase::operator=(a1 + 5112, (uint64_t)(v5 + 1278));
  OZChannelBase::operator=(a1 + 5264, (uint64_t)(v5 + 1316));
  OZChannelBase::operator=(a1 + 5416, (uint64_t)(v5 + 1354));
  OZChannelBase::operator=(a1 + 5568, (uint64_t)(v5 + 1392));
  OZChannelBase::operator=(a1 + 5928, (uint64_t)(v5 + 1482));
  OZChannelBase::operator=(a1 + 6080, (uint64_t)(v5 + 1520));
  OZChannelBase::operator=(a1 + 6232, (uint64_t)(v5 + 1558));
  OZChannelBase::operator=(a1 + 7304, (uint64_t)(v5 + 1826));
  OZChannelBase::operator=(a1 + 2568, (uint64_t)(v5 + 642));
  OZChannelBase::operator=(a1 + 6744, (uint64_t)(v5 + 1686));
  OZChannelBase::operator=(a1 + 7152, (uint64_t)(v5 + 1788));
  OZChannelBase::operator=(a1 + 6896, (uint64_t)(v5 + 1724));
  OZChannelBase::operator=(a1 + 6488, (uint64_t)(v5 + 1622));
  OZChannelBase::operator=(a1 + 7560, (uint64_t)(v5 + 1890));
  OZChannelBase::operator=(a1 + 7712, (uint64_t)(v5 + 1928));
  *(_DWORD *)(a1 + 7968) = v5[1992];
  return OZChannelBase::resetFlag((OZChannelBase *)(a1 + 2568), 2, 0);
}

OZMotionPathCurveNode *OZMotionPathBehavior::createCurveNode(OZMotionPathBehavior *this, OZChannel *a2)
{
  OZMotionPathCurveNode *v4;

  v4 = (OZMotionPathCurveNode *)operator new();
  OZMotionPathCurveNode::OZMotionPathCurveNode(v4, this, a2);
  return v4;
}

void sub_1B2DEADDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C402889D652);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::parseBegin(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  OZChannelBase::reset((OZChannelBase *)((char *)this + 792), 0);
  OZChannelBase::reset((OZChannelBase *)this + 15, 0);
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::setValue((OZChannel *)((char *)this + 7712), MEMORY[0x1E0CA2E68], 1.0, 0);
  return OZBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'OZMotionPathBehavior::parseBegin(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  return OZMotionPathBehavior::parseBegin((OZMotionPathBehavior *)((char *)this - 48), a2);
}

uint64_t OZMotionPathBehavior::parseEnd(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  OZChannel *v4;
  const CMTime *v5;

  v4 = (OZChannel *)((char *)this + 6488);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 6488), MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setValue(v4, MEMORY[0x1E0CA2E68], 0.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 7304), v5, 1.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 7152), v5, 2.0, 0);
  }
  return OZBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'OZMotionPathBehavior::parseEnd(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  return OZMotionPathBehavior::parseEnd((OZMotionPathBehavior *)((char *)this - 48), a2);
}

void OZMotionPathBehavior::didAddToNode(OZMotionPathBehavior *this, OZSceneNode *a2)
{
  char *v4;
  uint64_t v5;
  OZMotionPathCurveNode *v6;
  OZMotionPathCurveNode *v7;
  OZMotionPathCurveNode *v8;

  OZChannelBehavior::didAddToNode(this, a2);
  if (a2)
  else
    v4 = 0;
  OZChannel::setDiscrete((OZChannel *)((char *)this + 6744), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 6744), 0, 0);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 928));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1080));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1528));
  v5 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
  if (v5 && !*(_BYTE *)(v5 + 1576))
    OZMotionPathBehavior::initializePaths((os_unfair_lock_s *)this);
  v6 = (OZMotionPathCurveNode *)operator new();
  OZMotionPathCurveNode::OZMotionPathCurveNode(v6, this, (OZChannel *)(v4 + 1352));
  OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 1352), v6);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v6);
  v7 = (OZMotionPathCurveNode *)operator new();
  OZMotionPathCurveNode::OZMotionPathCurveNode(v7, this, (OZChannel *)(v4 + 1504));
  OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 1504), v7);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
  v8 = (OZMotionPathCurveNode *)operator new();
  OZMotionPathCurveNode::OZMotionPathCurveNode(v8, this, (OZChannel *)(v4 + 1952));
  OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 1952), v8);
  OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v8);
  OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v4 + 1216));
}

void sub_1B2DEB0AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C402889D652);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::initializePaths(os_unfair_lock_s *this)
{
  uint64_t result;
  int v3;
  const CMTime *v4;
  OZChannel *v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  OZChannel *v10;
  OZChannel *v11;
  const CMTime *v12;
  void *Keyframe;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  CMTime v21;

  result = (*(uint64_t (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque + 336))(this);
  if (result)
  {
    v3 = *(_DWORD *)((*(uint64_t (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque + 336))(this)
                   + 344);
    if (((*(uint64_t (**)(os_unfair_lock_s *, _QWORD))(*(_QWORD *)&this[232]._os_unfair_lock_opaque + 552))(this + 232, 0) & 1) == 0)
    {
      OZChannelPosition3D::willBeModified(this + 198, 1);
      (*(void (**)(os_unfair_lock_s *, uint64_t))(*(_QWORD *)&this[232]._os_unfair_lock_opaque + 480))(this + 232, 1);
      (*(void (**)(os_unfair_lock_s *, uint64_t))(*(_QWORD *)&this[270]._os_unfair_lock_opaque + 480))(this + 270, 1);
      (*(void (**)(os_unfair_lock_s *, uint64_t))(*(_QWORD *)&this[382]._os_unfair_lock_opaque + 480))(this + 382, 1);
      OZChannel::setDiscrete((OZChannel *)&this[232], 0, 0);
      OZChannel::setDiscrete((OZChannel *)&this[270], 0, 0);
      OZChannel::setDiscrete((OZChannel *)&this[382], 0, 0);
      OZChannel::setParametric((OZChannel *)&this[232], 1);
      OZChannel::setParametric((OZChannel *)&this[270], 1);
      OZChannel::setParametric((OZChannel *)&this[382], 1);
      v4 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setKeyframe((OZChannel *)&this[232], MEMORY[0x1E0CA2E68], 0.0, 0);
      OZChannel::setKeyframe((OZChannel *)&this[270], v4, 0.0, 0);
      OZChannel::setKeyframe((OZChannel *)&this[382], v4, 0.0, 0);
      CMTimeMake(&v21, 1, 1);
      OZChannel::setKeyframe((OZChannel *)&this[232], &v21, (float)v3 * 0.8, 0);
      CMTimeMake(&v21, 1, 1);
      OZChannel::setKeyframe((OZChannel *)&this[270], &v21, 0.0, 0);
      CMTimeMake(&v21, 1, 1);
      OZChannel::setKeyframe((OZChannel *)&this[382], &v21, 0.0, 0);
    }
    v5 = (OZChannel *)&this[454];
    result = (*(uint64_t (**)(os_unfair_lock_s *, _QWORD))(*(_QWORD *)&this[454]._os_unfair_lock_opaque + 552))(this + 454, 0);
    if ((result & 1) == 0)
    {
      v6 = (float)*(int *)((*(uint64_t (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque
                                                                         + 336))(this)
                         + 344)
         * 0.75;
      v7 = (*(uint64_t (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque + 336))(this);
      if (v6 <= (float)*(int *)(v7 + 348) * 0.75)
        v8 = v6;
      else
        v8 = (float)*(int *)(v7 + 348) * 0.75;
      v9 = 1.0
         / *(double *)((*(uint64_t (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque + 336))(this)
                     + 384);
      OZChannelPosition3D::willBeModified(this + 420, 1);
      OZChannel::setDiscrete((OZChannel *)&this[454], 0, 0);
      v10 = (OZChannel *)&this[492];
      OZChannel::setDiscrete((OZChannel *)&this[492], 0, 0);
      v11 = (OZChannel *)&this[604];
      OZChannel::setDiscrete(v11, 0, 0);
      OZChannel::setParametric(v5, 1);
      OZChannel::setParametric(v10, 1);
      OZChannel::setParametric(v11, 1);
      v12 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setKeyframe(v5, MEMORY[0x1E0CA2E68], 0.0, 1);
      OZChannel::setKeyframe(v10, v12, 0.0, 1);
      OZChannel::setKeyframe(v11, v12, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      OZChannel::setKeyframe(v5, &v21, v9 * (v8 * 0.5), 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      OZChannel::setKeyframe(v10, &v21, v8 * 0.5, 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      Keyframe = (void *)OZChannel::getKeyframe(v5, &v21);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      v14 = (void *)OZChannel::getKeyframe(v10, &v21);
      OZChannel::setKeyframeInputTangents(v5, Keyframe, 0.0, v9 * (v8 * 0.5 * -0.546761902), 1);
      OZChannel::setKeyframeInputTangents(v10, v14, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v5, Keyframe, 0.0, v9 * (v8 * 0.5 * 0.546761902), 1);
      OZChannel::setKeyframeOutputTangents(v10, v14, 0.0, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      OZChannel::setKeyframe(v11, &v21, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      OZChannel::setKeyframe(v5, &v21, v9 * (v8 * 0.5 + v8 * 0.5), 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      OZChannel::setKeyframe(v10, &v21, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      v15 = (void *)OZChannel::getKeyframe(v5, &v21);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      v16 = (void *)OZChannel::getKeyframe(v10, &v21);
      OZChannel::setKeyframeInputTangents(v5, v15, 0.0, 0.0, 1);
      OZChannel::setKeyframeInputTangents(v10, v16, 0.0, v8 * 0.5 * 0.546761902, 1);
      OZChannel::setKeyframeOutputTangents(v5, v15, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v10, v16, 0.0, v8 * 0.5 * -0.546761902, 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      OZChannel::setKeyframe(v11, &v21, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      OZChannel::setKeyframe(v5, &v21, v9 * (v8 * 0.5), 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      OZChannel::setKeyframe(v10, &v21, -(v8 * 0.5), 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      v17 = (void *)OZChannel::getKeyframe(v5, &v21);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      v18 = (void *)OZChannel::getKeyframe(v10, &v21);
      OZChannel::setKeyframeInputTangents(v5, v17, 0.0, v9 * (v8 * 0.5 * 0.546761902), 1);
      OZChannel::setKeyframeInputTangents(v10, v18, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v5, v17, 0.0, v9 * (v8 * 0.5 * -0.546761902), 1);
      OZChannel::setKeyframeOutputTangents(v10, v18, 0.0, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      OZChannel::setKeyframe(v11, &v21, 0.0, 1);
      v19 = (void *)OZChannel::getKeyframe(v5, v12);
      v20 = (void *)OZChannel::getKeyframe(v10, v12);
      OZChannel::setKeyframeInputTangents(v5, v19, 0.0, 0.0, 1);
      OZChannel::setKeyframeInputTangents(v10, v20, 0.0, v8 * 0.5 * -0.546761902, 1);
      OZChannel::setKeyframeOutputTangents(v5, v19, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v10, v20, 0.0, v8 * 0.5 * 0.546761902, 1);
      OZChannel::closeParametricCurve(v5);
      OZChannel::closeParametricCurve(v10);
      return OZChannel::closeParametricCurve(v11);
    }
  }
  return result;
}

void OZMotionPathBehavior::sceneNodeDidLoad(OZMotionPathBehavior *this)
{
  OZChannel *v2;
  void **v3;
  unint64_t v4;
  unsigned int v5;
  void **v6;
  unint64_t v7;
  unsigned int v8;
  OZChannel *v9;
  double v10;
  CMTime v11;
  void **v12;
  void **v13;

  v2 = (OZChannel *)((char *)this + 928);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 928));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1080));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1528));
  if (!(*(unsigned int (**)(char *))(*((_QWORD *)this + 191) + 832))((char *)this + 1528))
  {
    OZChannel::getKeyframes(v2, 0, &v12);
    v3 = v13;
    if (v13 != v12)
    {
      v4 = 0;
      v5 = 1;
      v3 = v12;
      do
      {
        OZChannel::getKeyframe(v2, v3[v4], &v11, 0);
        OZChannel::setKeyframe((OZChannel *)((char *)this + 1528), &v11);
        v4 = v5;
        v3 = v12;
        ++v5;
      }
      while (v4 < v13 - v12);
    }
    if (v3)
    {
      v13 = v3;
      operator delete(v3);
    }
  }
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1816));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1968));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 2416));
  if (!(*(unsigned int (**)(char *))(*((_QWORD *)this + 302) + 832))((char *)this + 2416))
  {
    OZChannel::getKeyframes((OZChannel *)((char *)this + 1816), 0, &v12);
    v6 = v13;
    if (v13 != v12)
    {
      v7 = 0;
      v8 = 1;
      v6 = v12;
      do
      {
        OZChannel::getKeyframe((OZChannel *)((char *)this + 1816), v6[v7], &v11, 0);
        OZChannel::setKeyframe((OZChannel *)((char *)this + 2416), &v11);
        v7 = v8;
        v6 = v12;
        ++v8;
      }
      while (v7 < v13 - v12);
    }
    if (v6)
    {
      v13 = v6;
      operator delete(v6);
    }
  }
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2568), 2, 0);
  v9 = (OZChannel *)((char *)this + 7560);
  OZChannel::getValueAsDouble(v9, MEMORY[0x1E0CA2E68], 0.0);
  if (vabdd_f64(v10, OZChannel::getDefaultValue(v9)) >= 0.0000001)
    OZChannelBase::resetFlag((OZChannelBase *)v9, 2, 0);
}

void sub_1B2DEB9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *OZMotionPathBehavior::getEvalDepChansForRef(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a3)
  {
    if (result + 715 == a2)
    {
      result = (_QWORD *)OZChannel::getValueAsInt((OZChannel *)(result + 67), MEMORY[0x1E0CA2E68], 0.0);
      if ((_DWORD)result == 5)
      {
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 232))(a3);
        if (result)
        {
          if (result)
          {
            v6 = result;
            do
            {
              if (result)
              {
                v7 = result + 136;
                result = operator new(0x18uLL);
                result[1] = a4;
                result[2] = v7;
                v8 = *a4;
                *result = *a4;
                *(_QWORD *)(v8 + 8) = result;
                *a4 = (uint64_t)result;
                ++a4[2];
              }
              v6 = (_QWORD *)v6[120];
            }
            while (v6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZMotionPathBehavior::isEvalCyclic(OZMotionPathBehavior *this)
{
  int ValueAsInt;
  int v4;

  if (OZMotionPathBehavior::isGeometryRecursive(this))
    return 1;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 7864));
  v4 = *((_DWORD *)this + 1992);
  PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 7864));
  if (v4 != ValueAsInt)
  {
    PCSharedMutex::lock((std::mutex *)((char *)this + 7864));
    if (*((_DWORD *)this + 1992) != ValueAsInt)
    {
      OZChannelBehavior::dirtyIsEvalCyclicCache(this);
      *((_DWORD *)this + 1992) = ValueAsInt;
    }
    PCSharedMutex::unlock((std::mutex *)((char *)this + 7864));
  }
  return OZChannelBehavior::isEvalCyclic(this);
}

void sub_1B2DEBB7C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL OZMotionPathBehavior::isGeometryRecursive(OZMotionPathBehavior *this)
{
  const void *v2;
  OZGroup *v3;
  OZGroup *v4;
  void *Node;
  char *v6;
  _BOOL8 result;

  result = 0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0) == 5)
  {
    v2 = (const void *)(*(uint64_t (**)(OZMotionPathBehavior *))(*(_QWORD *)this + 320))(this);
    if (v2)
    {
      if (v3)
      {
        v4 = v3;
        Node = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 5720));
        if (Node)
        {
          if (v6)
          {
            if ((OZGroup::hasDescendant(v4, (OZSceneNode *)(v6 + 200)) & 1) != 0)
              return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZMotionPathBehavior::sceneDidChange(OZMotionPathBehavior *this)
{
  uint64_t result;

  result = OZMotionPathBehavior::isGeometryRecursive(this);
  if ((_DWORD)result)
    return OZChanObjectManipRef::setObject((OZMotionPathBehavior *)((char *)this + 5720), 0, 0);
  return result;
}

uint64_t `non-virtual thunk to'OZMotionPathBehavior::sceneDidChange(OZMotionPathBehavior *this)
{
  return OZMotionPathBehavior::sceneDidChange((OZMotionPathBehavior *)((char *)this - 16));
}

uint64_t OZMotionPathBehavior::enableCustomSpeed(uint64_t this, int a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  __n128 v5;
  CMTimeEpoch v6;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  if (a2)
  {
    v2 = this;
    (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)this + 608))(&v9);
    v11 = v9;
    v12 = v10;
    this = OZChannel::getNumberOfKeyframes((OZChannel *)(v2 + 6744));
    if (this <= 1)
    {
      OZChannel::setInterpolation((OZChannel *)(v2 + 6744), 4);
      v9 = v11;
      OZChannel::setKeyframe((OZChannel *)(v2 + 6744), &v9, 0.0, 1);
      v9 = v11;
      v13 = v12;
      v3 = PC_CMTimeSaferAdd(&v9, &v13, (uint64_t)&v7);
      v4 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v2 + 336))(v2, v3);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), &v5);
      v9 = v7;
      *(__n128 *)&v13.value = v5;
      v13.epoch = v6;
      PC_CMTimeSaferSubtract(&v9, &v13, (uint64_t)&v8);
      return OZChannel::setKeyframe((OZChannel *)(v2 + 6744), &v8, 100.0, 1);
    }
  }
  return this;
}

BOOL OZMotionPathBehavior::isRebuildUIChannel(OZMotionPathBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 6488) == a2;
}

uint64_t OZMotionPathBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  const CMTime *v6;
  char *v7;
  uint64_t i;
  const void *v9;
  char *v10;
  OZChannelBase *v11;
  uint64_t j;
  const void *v13;
  char *v14;

  result = OZChannel::getValueAsInt((OZChannel *)(a1 + 6488), MEMORY[0x1E0CA2E68], 0.0);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = result;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v7 = *(char **)(v4 + 16);
      if (v7)
      result = OZChannel::getValueAsInt((OZChannel *)(v7 + 6488), v6, 0.0);
      if (v5 != (_DWORD)result)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a2)
      {
        for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          v9 = *(const void **)(i + 16);
          if (v9)
          else
            v10 = 0;
          v11 = (OZChannelBase *)(v10 + 6744);
          if (v5 == 7)
          {
            OZChannelBase::enable(v11, 1, 0);
            OZChannelBase::resetFlag((OZChannelBase *)(v10 + 6744), 0x10000, 1);
            result = OZMotionPathBehavior::enableCustomSpeed((uint64_t)v10, 1);
          }
          else
          {
            OZChannelBase::enable(v11, 0, 0);
            result = (uint64_t)OZChannelBase::setFlag((OZChannelBase *)(v10 + 6744), 0x10000, 1);
          }
        }
        return result;
      }
    }
    for (j = *(_QWORD *)(a2 + 8); j != a2; j = *(_QWORD *)(j + 8))
    {
      v13 = *(const void **)(j + 16);
      if (v13)
      else
        v14 = 0;
      OZChannelBase::enable((OZChannelBase *)(v14 + 6744), 1, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(v14 + 6744), 0x10000, 1);
      result = OZMotionPathBehavior::enableCustomSpeed((uint64_t)v14, 1);
    }
  }
  return result;
}

uint64_t OZMotionPathBehavior::getPositionChannel(OZMotionPathBehavior *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E0CA2E68], 0.0))
    return (uint64_t)this + 1680;
  else
    return (uint64_t)this + 792;
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::OZMotionPathBehavior_radiusImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::OZMotionPathBehavior_radiusImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::_OZMotionPathBehavior_radius;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::_OZMotionPathBehavior_radius)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::OZMotionPathBehavior_radiusImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::_OZMotionPathBehavior_radius = (uint64_t)v0;
  }
}

void sub_1B2DEC0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::OZMotionPathBehavior_radiusImpl(OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 200.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 200.0, 1, 1);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6585118;
  *((_QWORD *)this + 5) = &unk_1E6585138;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2DEC188(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::OZMotionPathBehavior_radiusInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::OZMotionPathBehavior_radiusInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::_OZMotionPathBehavior_radiusInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::_OZMotionPathBehavior_radiusInfo)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::OZMotionPathBehavior_radiusInfo(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::_OZMotionPathBehavior_radiusInfo = (uint64_t)v0;
  }
}

void sub_1B2DEC254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::OZMotionPathBehavior_radiusInfo(OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6585190;
  *((_QWORD *)this + 10) = &unk_1E65851B0;
  return this;
}

void sub_1B2DEC304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::OZMotionPathBehavior_rectSizeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::OZMotionPathBehavior_rectSizeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::_OZMotionPathBehavior_rectSize;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::_OZMotionPathBehavior_rectSize)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::OZMotionPathBehavior_rectSizeImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::_OZMotionPathBehavior_rectSize = (uint64_t)v0;
  }
}

void sub_1B2DEC3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::OZMotionPathBehavior_rectSizeImpl(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 400.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 400.0, 1, 1);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6585208;
  *((_QWORD *)this + 5) = &unk_1E6585228;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2DEC494(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::OZMotionPathBehavior_rectSizeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::OZMotionPathBehavior_rectSizeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::_OZMotionPathBehavior_rectSizeInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::_OZMotionPathBehavior_rectSizeInfo)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::OZMotionPathBehavior_rectSizeInfo(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::_OZMotionPathBehavior_rectSizeInfo = (uint64_t)v0;
  }
}

void sub_1B2DEC560(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::OZMotionPathBehavior_rectSizeInfo(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6585280;
  *((_QWORD *)this + 10) = &unk_1E65852A0;
  return this;
}

void sub_1B2DEC610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::OZMotionPathBehavior_waveAmplitudeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::OZMotionPathBehavior_waveAmplitudeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::_OZMotionPathBehavior_waveAmplitude;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::_OZMotionPathBehavior_waveAmplitude)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::OZMotionPathBehavior_waveAmplitudeImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::_OZMotionPathBehavior_waveAmplitude = (uint64_t)v0;
  }
}

void sub_1B2DEC6DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::OZMotionPathBehavior_waveAmplitudeImpl(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 100.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 100.0, 1, 1);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65852F8;
  *((_QWORD *)this + 5) = &unk_1E6585318;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2DEC7A0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::OZMotionPathBehavior_waveAmplitudeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::OZMotionPathBehavior_waveAmplitudeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::_OZMotionPathBehavior_waveAmplitudeInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::_OZMotionPathBehavior_waveAmplitudeInfo)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::OZMotionPathBehavior_waveAmplitudeInfo(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::_OZMotionPathBehavior_waveAmplitudeInfo = (uint64_t)v0;
  }
}

void sub_1B2DEC86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::OZMotionPathBehavior_waveAmplitudeInfo(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6585370;
  *((_QWORD *)this + 10) = &unk_1E6585390;
  return this;
}

void sub_1B2DEC91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::OZMotionPathBehavior_waveFrequencyImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::OZMotionPathBehavior_waveFrequencyImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::_OZMotionPathBehavior_waveFrequency;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::_OZMotionPathBehavior_waveFrequency)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::OZMotionPathBehavior_waveFrequencyImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::_OZMotionPathBehavior_waveFrequency = (uint64_t)v0;
  }
}

void sub_1B2DEC9E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::OZMotionPathBehavior_waveFrequencyImpl(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65853E8;
  *((_QWORD *)this + 5) = &unk_1E6585408;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2DECA9C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::OZMotionPathBehavior_waveFrequencyInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::OZMotionPathBehavior_waveFrequencyInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::_OZMotionPathBehavior_waveFrequencyInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::_OZMotionPathBehavior_waveFrequencyInfo)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::OZMotionPathBehavior_waveFrequencyInfo(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::_OZMotionPathBehavior_waveFrequencyInfo = (uint64_t)v0;
  }
}

void sub_1B2DECB68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::OZMotionPathBehavior_waveFrequencyInfo(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6585460;
  *((_QWORD *)this + 10) = &unk_1E6585480;
  return this;
}

void sub_1B2DECC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::OZMotionPathBehavior_wavePhaseInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::OZMotionPathBehavior_wavePhaseInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::_OZMotionPathBehavior_wavePhaseInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::_OZMotionPathBehavior_wavePhaseInfo)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::OZMotionPathBehavior_wavePhaseInfo(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::_OZMotionPathBehavior_wavePhaseInfo = (uint64_t)v0;
  }
}

void sub_1B2DECCE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::OZMotionPathBehavior_wavePhaseInfo(OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "°");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -6.28318531, 6.28318531, 0.0174532925, 0.000174532925, 57.2957795, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65854D8;
  *((_QWORD *)this + 10) = &unk_1E65854F8;
  return this;
}

void sub_1B2DECD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::OZMotionPathBehavior_waveDampingImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::OZMotionPathBehavior_waveDampingImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::_OZMotionPathBehavior_waveDamping;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::_OZMotionPathBehavior_waveDamping)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::OZMotionPathBehavior_waveDampingImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::_OZMotionPathBehavior_waveDamping = (uint64_t)v0;
  }
}

void sub_1B2DECE68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::OZMotionPathBehavior_waveDampingImpl(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E6585550;
  *((_QWORD *)this + 5) = &unk_1E6585570;
  OZChannelImpl::setMin((OZChannelImpl *)this, -20.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 20.0);
  return this;
}

void sub_1B2DECF14(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::OZMotionPathBehavior_waveDampingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::OZMotionPathBehavior_waveDampingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::_OZMotionPathBehavior_waveDampingInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::_OZMotionPathBehavior_waveDampingInfo)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::OZMotionPathBehavior_waveDampingInfo(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::_OZMotionPathBehavior_waveDampingInfo = (uint64_t)v0;
  }
}

void sub_1B2DECFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::OZMotionPathBehavior_waveDampingInfo(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -20.0, 20.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E65855C8;
  *((_QWORD *)this + 10) = &unk_1E65855E8;
  return this;
}

void sub_1B2DED08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::OZMotionPathBehavior_offsetImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::OZMotionPathBehavior_offsetImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::_OZMotionPathBehavior_offset;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::_OZMotionPathBehavior_offset)
  {
    v0 = (OZChannelPercent *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::OZMotionPathBehavior_offsetImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::_OZMotionPathBehavior_offset = (uint64_t)v0;
  }
}

void sub_1B2DED158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::OZMotionPathBehavior_offsetImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E6585640;
  this->var5 = (PCString *)&unk_1E6585660;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2DED208(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::OZMotionPathBehavior_frequencyImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::OZMotionPathBehavior_frequencyImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::_OZMotionPathBehavior_frequency;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::_OZMotionPathBehavior_frequency)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::OZMotionPathBehavior_frequencyImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::_OZMotionPathBehavior_frequency = (uint64_t)v0;
  }
}

void sub_1B2DED2D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::OZMotionPathBehavior_frequencyImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 1.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E65856B8;
  this->var5 = (PCString *)&unk_1E65856D8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2DED384(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::OZMotionPathBehavior_frequencyInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::OZMotionPathBehavior_frequencyInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::_OZMotionPathBehavior_frequencyInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::_OZMotionPathBehavior_frequencyInfo)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::OZMotionPathBehavior_frequencyInfo(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::_OZMotionPathBehavior_frequencyInfo = (uint64_t)v0;
  }
}

void sub_1B2DED450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::OZMotionPathBehavior_frequencyInfo(OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E6585730;
  *((_QWORD *)this + 10) = &unk_1E6585750;
  return this;
}

void sub_1B2DED4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::OZMotionPathBehavior_endTimeOffsetChanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::OZMotionPathBehavior_endTimeOffsetChanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::_OZMotionPathBehavior_endTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *v0;

  if (!OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::_OZMotionPathBehavior_endTimeOffsetChan)
  {
    v0 = (OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *)operator new();
    OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::OZMotionPathBehavior_endTimeOffsetChanImpl(v0);
    OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::_OZMotionPathBehavior_endTimeOffsetChan = (uint64_t)v0;
  }
}

void sub_1B2DED5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::OZMotionPathBehavior_endTimeOffsetChanImpl(OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E65857A8;
  *((_QWORD *)this + 5) = &unk_1E65857C8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2DED678(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZMotionPathCurveNode::OZMotionPathCurveNode(OZMotionPathCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  uint64_t v5;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *(_QWORD *)v5 = &off_1E6585820;
  *(_DWORD *)(v5 + 32) = 0;
  PCEvaluator::PCEvaluator((PCEvaluator *)(v5 + 40));
  *((_DWORD *)this + 7) = a3->var3;
}

void sub_1B2DED6F0(_Unwind_Exception *a1)
{
  OZEaseInInterpolator *v1;
  PCSpinLock *v2;

  PCSpinLock::~PCSpinLock(v2);
  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void OZMotionPathCurveNode::OZMotionPathCurveNode(OZMotionPathCurveNode *this, const OZMotionPathCurveNode *a2)
{
  uint64_t v4;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2);
  *(_QWORD *)v4 = &off_1E6585820;
  *(_DWORD *)(v4 + 32) = 0;
  PCEvaluator::PCEvaluator((PCEvaluator *)(v4 + 40));
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
}

void sub_1B2DED764(_Unwind_Exception *a1)
{
  OZEaseInInterpolator *v1;
  PCSpinLock *v2;

  PCSpinLock::~PCSpinLock(v2);
  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void OZMotionPathCurveNode::~OZMotionPathCurveNode(OZMotionPathCurveNode *this)
{
  PCSpinLock *v2;

  *(_QWORD *)this = &off_1E6585820;
  v2 = (PCSpinLock *)((char *)this + 32);
  PCEvaluator::~PCEvaluator((OZMotionPathCurveNode *)((char *)this + 40));
  PCSpinLock::~PCSpinLock(v2);
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
}

{
  OZMotionPathCurveNode::~OZMotionPathCurveNode(this);
  JUMPOUT(0x1B5E29170);
}

double OZMotionPathCurveNode::solveNode(OZMotionPathCurveNode *this, const CMTime *a2, double a3, double a4)
{
  const void *v6;
  char *v7;
  char *v8;
  OZChannelBase *v9;
  double v10;
  OZChannel *v11;
  CMTime *v12;
  int32_t ValueAsInt;
  int32_t v14;
  double v15;
  double v16;
  double PositionOnPath;
  CMTime v19;
  CMTime v20;
  __n128 v21;
  CMTimeEpoch v22;
  CMTime v23;
  CMTime v24;
  __n128 v25;
  CMTimeEpoch v26;
  __n128 v27;
  CMTimeEpoch v28;
  CMTime v29;
  CMTime time2;
  CMTime time1;

  v24 = *a2;
  v23 = *a2;
  v6 = (const void *)*((_QWORD *)this + 1);
  if (v6)
  {
    if (v7)
    {
      v8 = v7;
      if (((*(uint64_t (**)(char *))(*(_QWORD *)v7 + 640))(v7) & 1) == 0)
      {
        (*(void (**)(CMTime *__return_ptr, char *))(*(_QWORD *)v8 + 608))(&v20, v8);
        v9 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v8 + 312))(v8);
        if (OZChannelBase::isEnabled(v9, 0, 1))
        {
          if ((*(_BYTE *)((*(uint64_t (**)(char *))(*(_QWORD *)v8 + 320))(v8) + 1024) & 2) == 0
            && (*(uint64_t (**)(char *))(*(_QWORD *)v8 + 336))(v8))
          {
            OZChannelObjectRootBase::getTimeOffset((__n128 *)(v8 + 56), &v27);
            time2 = v20;
            *(__n128 *)&time1.value = v27;
            time1.epoch = v28;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
            time1 = v29;
            time2 = v23;
            v10 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
            (*(void (**)(__n128 *__return_ptr, double))(**(_QWORD **)(*((_QWORD *)v8 + 47) + 32) + 320))(&v27, v10);
            time1 = v23;
            *(__n128 *)&time2.value = v27;
            time2.epoch = v28;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v29);
            OZChannelObjectRootBase::getTimeOffset((__n128 *)(v8 + 56), &v25);
            time1 = v29;
            *(__n128 *)&time2.value = v25;
            time2.epoch = v26;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
            v23 = v19;
            memset(&v29, 0, sizeof(v29));
            OZBehavior::getFrameDuration(*((OZBehavior **)this + 1), (__n128 *)&v29);
            v25 = v21;
            v26 = v22;
            v11 = (OZChannel *)(v8 + 7560);
            v12 = (CMTime *)MEMORY[0x1E0CA2E68];
            ValueAsInt = OZChannel::getValueAsInt(v11, MEMORY[0x1E0CA2E68], 0.0);
            operator*(&v29, ValueAsInt, &v19);
            *(__n128 *)&time1.value = v25;
            time1.epoch = v26;
            time2 = v19;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
            time1 = v23;
            *(__n128 *)&time2.value = v27;
            time2.epoch = v28;
            if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            {
              v25 = v21;
              v26 = v22;
              v14 = OZChannel::getValueAsInt(v11, MEMORY[0x1E0CA2E68], 0.0);
              operator*(&v29, v14, &v19);
              *(__n128 *)&time1.value = v25;
              time1.epoch = v26;
              time2 = v19;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
              *(__n128 *)&v23.value = v27;
              v23.epoch = v28;
            }
            time1 = v23;
            time2 = *v12;
            if (CMTimeCompare(&time1, &time2) < 0)
              v23 = *v12;
            OZMotionPathCurveNode::getLength(this, &v23);
            v16 = v15;
            if (fabs(v15) >= 0.0000001)
            {
              PositionOnPath = OZMotionPathCurveNode::getPositionOnPath(this, &v24, &v23, v15);
              return OZMotionPathCurveNode::getPosition(this, PositionOnPath, &v24, &v23, a4, v16);
            }
          }
        }
      }
    }
  }
  return a4;
}

void OZMotionPathCurveNode::getLength(OZMotionPathCurveNode *this, const CMTime *a2)
{
  const void *v4;
  char *v5;
  unsigned int ValueAsInt;
  os_unfair_lock_s *PositionChannel;
  double v8;
  double v9;
  double v10;
  void *Node;
  void *v12;
  uint64_t v13;
  OZRenderState v14;

  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  else
    v5 = 0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v5 + 536), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt > 1)
  {
    switch(ValueAsInt)
    {
      case 2u:
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 2960), a2, 0.0);
        v9 = fabs(v8);
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 3112), a2, 0.0);
        PCEvaluator::findLengthOfEllipse((OZMotionPathCurveNode *)((char *)this + 40), v9, fabs(v10), 0.0, 0.0);
        break;
      case 3u:
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 3400), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 3552), a2, 0.0);
        break;
      case 4u:
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 4544), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 4696), a2, 0.0);
        break;
      case 5u:
        Node = OZChanSceneNodeRef::getNode((OZChannelBase *)(v5 + 5720));
        if (Node)
        {
          if (v12)
          {
            v13 = (uint64_t)v12;
            OZRenderState::OZRenderState(&v14);
            *(_OWORD *)&v14.var0.var0 = *(_OWORD *)&a2->value;
            v14.var0.var3 = a2->epoch;
            OZRotoshape::getReparametrizedContourLength(v13, (__int128 *)&v14.var0.var0, 1, 0);
          }
        }
        break;
      default:
        return;
    }
  }
  else
  {
    PositionChannel = (os_unfair_lock_s *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v5);
    OZChannelPosition3D::getLength(PositionChannel, MEMORY[0x1E0CA2E68]);
  }
}

double OZMotionPathCurveNode::getPositionOnPath(OZMotionPathCurveNode *this, const CMTime *a2, const CMTime *a3, double a4)
{
  const void *v8;
  char *v9;
  const CMTime *v10;
  int ValueAsInt;
  int v12;
  unsigned int v13;
  double v14;
  uint64_t v15;
  CMTimeEpoch epoch;
  double Seconds;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CMTimeEpoch v23;
  uint64_t v24;
  Float64 v25;
  double v26;
  double v27;
  double v28;
  Float64 v29;
  Float64 v30;
  Float64 v31;
  double v32;
  Float64 v33;
  Float64 v34;
  double v35;
  Float64 v36;
  double v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  CMTimeEpoch v50;
  OZChannel *v51;
  uint64_t v52;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime v57;
  __int128 v58;
  CMTime v59;
  CMTime v60;
  CMTime v61;
  CMTime v62;
  CMTime v63;
  CMTime v64;
  CMTime v65;
  CMTime v66;
  CMTime v67;
  CMTime v68;
  CMTime v69;
  CMTime v70;
  CMTime v71;
  CMTime v72;
  CMTime v73;
  CMTime time;
  CMTime v75;
  __n128 v76;
  CMTimeEpoch v77;
  CMTime v78;
  CMTime v79;
  CMTime v80;
  uint64_t v81[3];
  CMTime v82;
  double v83;
  CMTime v84;
  CMTime time2;
  CMTime time1;

  v84 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v83 = 0.0;
  v8 = (const void *)*((_QWORD *)this + 1);
  if (v8)
  else
    v9 = 0;
  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 6896), MEMORY[0x1E0CA2E68], 0.0);
  v12 = OZChannel::getValueAsInt((OZChannel *)(v9 + 6488), v10, 0.0);
  v13 = OZChannel::getValueAsInt((OZChannel *)(v9 + 7152), v10, 0.0);
  (*(void (**)(uint64_t *__return_ptr, char *))(*(_QWORD *)v9 + 608))(v81, v9);
  if (v12 == 7)
  {
    OZChannel::getValueAsDouble((OZChannel *)(v9 + 6744), a2, 0.0);
    return v14 * a4;
  }
  v80 = *v10;
  v79 = v80;
  v78 = *a3;
  v76 = 0uLL;
  v77 = 0;
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 336))(*((_QWORD *)this + 1));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), &v76);
  v75 = *a3;
  if (ValueAsInt == 1)
  {
    *(_OWORD *)&time1.value = *(_OWORD *)&v82.value;
    epoch = v82.epoch;
    goto LABEL_18;
  }
  operator/((__int128 *)&v75.value, (uint64_t)&v76, (uint64_t)&time);
  Seconds = CMTimeGetSeconds(&time);
  time1 = v82;
  operator/((__int128 *)&time1.value, (uint64_t)&v76, (uint64_t)&v73);
  v18 = CMTimeGetSeconds(&v73);
  operator/((__int128 *)&v78.value, (uint64_t)&v76, (uint64_t)&v72);
  v19 = CMTimeGetSeconds(&v72);
  v20 = v18 + -1.0;
  if (vabdd_f64(Seconds, v20) >= 0.0000001 && Seconds < v20)
  {
    v21 = fmod(Seconds * (double)v13, v20);
    if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7304), MEMORY[0x1E0CA2E68], 0.0) == 1)
    {
      v22 = floor(v19 * (double)v13 / v20) * 0.5;
      if (vabdd_f64(v22, floor(v22)) >= 0.0000001)
        v21 = v20 - v21;
    }
    OZFigTimeForChannelSeconds(&time2, v21, v75.timescale);
    operator*((__int128 *)&time2.value, (uint64_t)&v76, (uint64_t)&time1);
    *(_OWORD *)&v75.value = *(_OWORD *)&time1.value;
    v23 = time1.epoch;
    goto LABEL_16;
  }
  v24 = MEMORY[0x1E0CA2E68];
  if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7304), MEMORY[0x1E0CA2E68], 0.0) == 1)
  {
    *(_OWORD *)&v75.value = *(_OWORD *)v24;
    v23 = *(_QWORD *)(v24 + 16);
LABEL_16:
    v75.epoch = v23;
  }
  *(_OWORD *)&time1.value = *(_OWORD *)&v82.value;
  epoch = v82.epoch;
LABEL_18:
  time1.epoch = epoch;
  *(__n128 *)&time2.value = v76;
  time2.epoch = v77;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v80);
  v79 = v75;
  if ((v12 & 0xFFFFFFF7) != 0)
  {
    switch(v12)
    {
      case 1:
        if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7712), MEMORY[0x1E0CA2E68], 0.0))
        {
          operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v70);
          v25 = CMTimeGetSeconds(&v70);
          v26 = cos((v25 + 2.0) * 1.57079633);
          v27 = 1.0;
          goto LABEL_29;
        }
        operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v69);
        v40 = CMTimeGetSeconds(&v69);
        v83 = v40;
        v41 = 1.0;
        v42 = 0.0;
        goto LABEL_39;
      case 2:
        if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7712), MEMORY[0x1E0CA2E68], 0.0))
        {
          operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v68);
          v29 = CMTimeGetSeconds(&v68);
          v28 = sin(v29 * 1.57079633);
          goto LABEL_41;
        }
        operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v67);
        v40 = CMTimeGetSeconds(&v67);
        v83 = v40;
        v41 = 0.0;
        v42 = 1.0;
        goto LABEL_39;
      case 3:
        if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7712), MEMORY[0x1E0CA2E68], 0.0))
        {
          operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v66);
          v30 = CMTimeGetSeconds(&v66);
          v28 = (cos((v30 + 1.0) * 3.14159265) + 1.0) * 0.5;
          goto LABEL_41;
        }
        operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v65);
        v40 = CMTimeGetSeconds(&v65);
        v83 = v40;
        v41 = 0.5;
        v42 = 0.5;
LABEL_39:
        PCMath::easeInOut(&v83, v40, v41, v42, 0.0, 1.0, 0, v39);
        break;
      case 4:
        operator*(&v80, &v84, 0.5);
        time1 = v79;
        time2 = v84;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          operator*((__int128 *)&v84.value, (uint64_t)&v79, (uint64_t)&v64);
          v28 = 1.0 / CMTimeGetSeconds(&v64);
        }
        else
        {
          operator*((__int128 *)&v84.value, (uint64_t)&v79, (uint64_t)&v63);
          v26 = -1.0 / CMTimeGetSeconds(&v63);
          v27 = 2.0;
LABEL_29:
          v28 = v26 + v27;
        }
        goto LABEL_41;
      case 5:
        operator/((__int128 *)&v80.value, (uint64_t)&v76, (uint64_t)&v62);
        v31 = CMTimeGetSeconds(&v62);
        v32 = 1.0 / (v31 * v31);
        operator/((__int128 *)&v79.value, (uint64_t)&v76, (uint64_t)&v61);
        v33 = CMTimeGetSeconds(&v61);
        v28 = v32 * (v33 * v33);
        goto LABEL_41;
      case 6:
        operator/((__int128 *)&v80.value, (uint64_t)&v76, (uint64_t)&v60);
        v34 = CMTimeGetSeconds(&v60);
        time1 = v80;
        time2 = v79;
        v35 = 1.0 / (v34 * v34);
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        operator/(&v58, (uint64_t)&v76, (uint64_t)&v59);
        v36 = CMTimeGetSeconds(&v59);
        v37 = v35 * (v36 * v36);
        v38 = 1.0 - v37;
        if (v37 > 1.0)
          v38 = 0.0;
        if (v37 >= 0.0)
          v28 = v38;
        else
          v28 = 1.0;
        goto LABEL_41;
      default:
        break;
    }
  }
  else
  {
    operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v71);
    v28 = CMTimeGetSeconds(&v71);
LABEL_41:
    v83 = v28;
  }
  v43 = 1.0;
  if (v83 <= 1.0)
    v43 = v83;
  v14 = 0.0;
  if (v83 >= 0.0)
    v14 = v43;
  v83 = v14;
  if (ValueAsInt == 1)
  {
    operator*(&v80, &time1, v14);
    v79 = time1;
    v78 = time1;
    operator/((__int128 *)&v79.value, (uint64_t)&v76, (uint64_t)&v57);
    v44 = CMTimeGetSeconds(&v57);
    time1 = v82;
    operator/((__int128 *)&time1.value, (uint64_t)&v76, (uint64_t)&v56);
    v45 = CMTimeGetSeconds(&v56);
    operator/((__int128 *)&v78.value, (uint64_t)&v76, (uint64_t)&v55);
    v46 = CMTimeGetSeconds(&v55);
    v47 = v45 + -1.0;
    if (vabdd_f64(v44, v47) < 0.0000001 || v44 >= v47)
    {
      v51 = (OZChannel *)(v9 + 7304);
      v52 = MEMORY[0x1E0CA2E68];
      if (OZChannel::getValueAsInt(v51, MEMORY[0x1E0CA2E68], 0.0) != 1)
      {
LABEL_56:
        operator/((__int128 *)&v79.value, (uint64_t)&v80, (uint64_t)&v54);
        v14 = CMTimeGetSeconds(&v54);
        return v14 * a4;
      }
      *(_OWORD *)&v79.value = *(_OWORD *)v52;
      v50 = *(_QWORD *)(v52 + 16);
    }
    else
    {
      v48 = fmod(v44 * (double)v13, v47);
      if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7304), MEMORY[0x1E0CA2E68], 0.0) == 1)
      {
        v49 = floor(v46 * (double)v13 / v47) * 0.5;
        if (vabdd_f64(v49, floor(v49)) >= 0.0000001)
          v48 = v47 - v48;
      }
      OZFigTimeForChannelSeconds(&time2, v48, v79.timescale);
      operator*((__int128 *)&time2.value, (uint64_t)&v76, (uint64_t)&time1);
      *(_OWORD *)&v79.value = *(_OWORD *)&time1.value;
      v50 = time1.epoch;
    }
    v79.epoch = v50;
    goto LABEL_56;
  }
  return v14 * a4;
}

double OZMotionPathCurveNode::getPosition(OZMotionPathCurveNode *this, double a2, const CMTime *a3, const CMTime *a4, double a5, double a6)
{
  const void *v12;
  OZChannel *v13;
  double v14;
  unsigned int ValueAsInt;
  const CMTime *v16;
  OZChannelPosition3D *v17;
  const CMTime *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  double v31;
  double v32;
  __double2 v33;
  double v34;
  uint64_t PositionChannel;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  long double v62;
  long double v63;
  double v64;
  double v65;
  void *Node;
  void *v67;
  uint64_t v68;
  double v69;
  double v70;
  int v71;
  double v72;
  double v73;
  double v74;
  OZChannelFolder *v75;
  OZChannel *Descendant;
  double v77;
  int v79;
  double v80;
  uint64_t v81;
  __n128 FrameDuration;
  Float64 v83;
  int v84;
  double v85;
  double v86;
  double v87;
  double v88;
  CMTime *v89;
  __n128 v90;
  CMTimeEpoch v91;
  int v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  int v99;
  uint64_t v100;
  void *v101;
  int v102;
  double v103;
  long double ParametricRange;
  double v105;
  double v106;
  double v107;
  int v108;
  double v109;
  double v110;
  double v111;
  double v112;
  CMTime time2;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  CMTime time1;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  double v131;
  double v132;
  OZRenderState seconds;
  CMTime time;
  CMTime v135;
  CMTime var0;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  __n128 v142;
  CMTimeEpoch epoch;
  CMTime v144;

  v12 = (const void *)*((_QWORD *)this + 1);
  if (v12)
  else
    v13 = 0;
  v14 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 536), MEMORY[0x1E0CA2E68], 0.0);
  v140 = 0.0;
  v141 = 0.0;
  v138 = 0.0;
  v139 = 0.0;
  v137 = 0.0;
  if (ValueAsInt > 1)
  {
    switch(ValueAsInt)
    {
      case 2u:
        v20 = a5;
        v21 = 1.0
            / *(double *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 336))(*((_QWORD *)this + 1))
                        + 384);
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 2960), a4, 0.0);
        v23 = v22;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3112), a4, 0.0);
        v25 = v24;
        OZMotionPathCurveNode::getLength(this, a4);
        v27 = v26;
        OZChannel::getValueAsDouble(v13 + 39, a4, 0.0);
        v29 = v28;
        if (fabs(v27) >= 0.0000001)
        {
          v30 = OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0);
          v31 = fmod(a2 / v27 + v29, 1.0);
          v14 = v31;
          if (v30 == 1)
            v14 = v27 * (1.0 - v31) / v27;
        }
        v32 = v23 * v21;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), MEMORY[0x1E0CA2E68], 0.0) == 8)
        {
          v33 = __sincos_stret(v14 * 3.14159265 + v14 * 3.14159265);
          v34 = v32 - v32 * v33.__cosval;
          v140 = v25 * v33.__sinval;
        }
        else
        {
          PCEvaluator::findPointOnEllipse((OZMotionPathCurveNode *)((char *)this + 40), v14, fabs(v32), fabs(v25), 0.0, 0.0, &v141, &v140, 0);
          if (v32 < 0.0)
            v141 = -v141;
          if (v25 < 0.0)
            v140 = -v140;
          v34 = v32 + v141;
        }
        v79 = *((_DWORD *)this + 7);
        if (v79 == 2)
        {
          v80 = v140;
        }
        else
        {
          v80 = 0.0;
          if (v79 == 1)
            v80 = v34;
        }
        return v80 + v20;
      case 3u:
        v36 = 1.0
            / *(double *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 336))(*((_QWORD *)this + 1))
                        + 384);
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3400), a4, 0.0);
        v38 = v36 * fabs(v37);
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3552), a4, 0.0);
        v40 = fabs(v39);
        OZMotionPathCurveNode::getLength(this, a4);
        v42 = v41;
        OZChannel::getValueAsDouble(v13 + 39, a4, 0.0);
        v44 = v43;
        v45 = 0.0;
        if (fabs(v42) >= 0.0000001)
        {
          if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0) == 1)
            v45 = (v38 + v38 + v40 + v40) * (1.0 - fmod(a2 / v42 + v44, 1.0));
          else
            v45 = (v38 + v38 + v40 + v40) * fmod(a2 / v42 + v44, 1.0);
        }
        v85 = v40 * 0.5;
        if (v45 > v40 * 0.5)
        {
          if (v45 <= v38 + v85)
          {
            v38 = v45 - v85;
          }
          else
          {
            v86 = v40 * 3.0 * 0.5;
            if (v45 <= v38 + v86)
            {
              v85 = v85 - (v45 - v38 - v85);
            }
            else
            {
              v87 = v38 + v38 + v86;
              if (v45 > v87)
              {
                v85 = v45 - v87 - v85;
LABEL_73:
                v38 = 0.0;
                goto LABEL_92;
              }
              v38 = v38 - (v45 - v38 - v86);
              v85 = v40 * -0.5;
            }
          }
LABEL_92:
          v95 = 0.0;
          OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3400), a4, 0.0);
          v97 = v96;
          OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3552), a4, 0.0);
          v99 = *((_DWORD *)this + 7);
          if (v99 == 2)
          {
            if (v98 >= 0.0)
              v95 = v85;
            else
              v95 = -v85;
          }
          else if (v99 == 1)
          {
            if (v97 >= 0.0)
              v95 = v38;
            else
              v95 = -v38;
          }
          return v95 + a5;
        }
        v85 = v45;
        goto LABEL_73;
      case 4u:
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 4544), a4, 0.0);
        v47 = v46;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 4696), a4, 0.0);
        v49 = v48;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5112), a4, 0.0);
        v112 = v50;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5264), a4, 0.0);
        v111 = v51;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5416), a4, 0.0);
        v110 = v52;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5568), a4, 0.0);
        v54 = v53;
        OZMotionPathCurveNode::getLength(this, a4);
        v56 = v55;
        if (fabs(v55) >= 0.0000001)
          v57 = a2 / v55;
        else
          v57 = 0.0;
        if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0) == 1)
          v57 = 1.0 - v57;
        if (v56 > 0.0)
          v58 = -v49 / v56;
        else
          v58 = 0.0;
        if (v56 > 0.0)
          v59 = v47 / v56;
        else
          v59 = 0.0;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), MEMORY[0x1E0CA2E68], 0.0) == 8)
        {
          v60 = fabs(v54);
          v61 = 1.0 - v57;
          if (v54 >= 0.0)
            v61 = v57;
          v62 = v112 * exp(-(v60 * v61));
          v63 = sin(v110 + v111 * (v57 * 6.28318531)) * v62;
          v64 = v47 * v57 + 0.0 + v58 * v63;
          v65 = v49 * v57 + 0.0 + v59 * v63;
        }
        else
        {
          v144.value = 0;
          v142.n128_u64[0] = 0;
          memset(&time1, 0, sizeof(time1));
          v81 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 336))(*((_QWORD *)this + 1));
          FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v81 + 336), (__n128 *)&time1);
          (*((void (**)(OZRenderState *__return_ptr, OZChannel *, __n128))v13->var0 + 76))(&seconds, v13, FrameDuration);
          time2 = *(CMTime *)&seconds.var1;
          operator/((__int128 *)&time2.value, (uint64_t)&time1, (uint64_t)&time);
          v83 = CMTimeGetSeconds(&time);
          PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)this + 10, v57, v112, v111, v110, v54, v47, v49, (int)v83, (double *)&v144.value, v142.n128_f64);
          v64 = v47 * *(double *)&v144.value + 0.0 + v58 * v142.n128_f64[0];
          v65 = v49 * *(double *)&v144.value + 0.0 + v59 * v142.n128_f64[0];
        }
        v84 = *((_DWORD *)this + 7);
        if (v84 != 2)
        {
          v65 = 0.0;
          if (v84 == 1)
            v65 = v64;
        }
        return v65 + a5;
      case 5u:
        Node = OZChanSceneNodeRef::getNode((OZChannelBase *)&v13[37].var12);
        if (!Node)
          return v14;
        if (!v67)
          return v14;
        v68 = (uint64_t)v67;
        OZRenderState::OZRenderState(&seconds);
        *(_OWORD *)&seconds.var0.var0 = *(_OWORD *)&a4->value;
        seconds.var0.var3 = a4->epoch;
        OZChannel::getValueAsDouble(v13 + 39, a4, 0.0);
        v70 = v69;
        v131 = 0.0;
        v132 = 0.0;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), MEMORY[0x1E0CA2E68], 0.0) != 8
          || OZChannel::getValueAsInt((OZChannel *)(v68 + 20048), MEMORY[0x1E0CA2E68], 0.0) == 3
          || OZChannel::getValueAsInt((OZChannel *)(v68 + 20048), MEMORY[0x1E0CA2E68], 0.0) == 2)
        {
          OZRotoshape::getReparametrizedPointOnContour(v68, (__int128 *)&seconds.var0.var0, &v132, &v131, 0, 0, 1, 0, 0.0, 1);
          if (OZChannel::getValueAsInt((OZChannel *)(v68 + 20304), MEMORY[0x1E0CA2E68], 0.0))
          {
            v71 = OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0);
            v72 = fmod(a2 / a6 + v70, 1.0);
            v73 = v72;
            if (v71 != 1)
            {
LABEL_81:
              OZRotoshape::getReparametrizedPointOnContour(v68, (__int128 *)&seconds.var0.var0, &v141, &v140, 0, 0, 1, 0, v73, 1);
              goto LABEL_82;
            }
            v74 = 1.0 - v72;
          }
          else
          {
            v88 = a2 / a6 + v70;
            if (fabs(v88) < 0.0000001 || (v73 = 1.0, vabdd_f64(v88, floor(v88)) >= 0.0000001))
              v73 = fmod(v88, 1.0);
            if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0) != 1)
              goto LABEL_81;
            v74 = 1.0 - v73;
          }
          v73 = v74 * a6 / a6;
          goto LABEL_81;
        }
        v103 = a2 / a6;
        ParametricRange = OZChannelCurve::getParametricRange((OZChannelCurve *)(v68 + 19184), a4);
        if (OZChannel::getValueAsInt((OZChannel *)(v68 + 20304), MEMORY[0x1E0CA2E68], 0.0))
        {
          if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0) == 1)
            v105 = (1.0 - fmod(v103 + v70, 1.0)) * ParametricRange;
          else
            v105 = fmod(v103 * ParametricRange + v70 * ParametricRange, ParametricRange);
        }
        else
        {
          v106 = v103 + v70;
          if (fabs(v103 + v70) < 0.0000001 || (v107 = 1.0, vabdd_f64(v106, floor(v106)) >= 0.0000001))
            v107 = fmod(v106, 1.0);
          v108 = OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0);
          v109 = 1.0 - v103;
          if (v108 != 1)
            v109 = v107;
          v105 = ParametricRange * v109;
        }
        OZChannelCurve::getCurveValueWithParameter((OZChannelCurve *)(v68 + 19184), (const CMTime *)&seconds, 0.0, &v132, &v131);
        OZChannelCurve::getCurveValueWithParameter((OZChannelCurve *)(v68 + 19184), (const CMTime *)&seconds, v105, &v141, &v140);
LABEL_82:
        v89 = (CMTime *)MEMORY[0x1E0CA2E68];
        if (!OZChannel::getValueAsInt(v13 + 40, MEMORY[0x1E0CA2E68], 0.0))
        {
          v92 = *((_DWORD *)this + 7);
          if (v92 == 2)
          {
            v93 = v140;
            v94 = v131;
          }
          else
          {
            if (v92 != 1)
              return a5 + 0.0;
            v93 = v141;
            v94 = v132;
          }
          v77 = v93 - v94;
          return v77 + a5;
        }
        v142 = *(__n128 *)&a3->value;
        epoch = a3->epoch;
        time1 = *a3;
        time2 = *v89;
        if (CMTimeCompare(&time1, &time2) < 0)
          goto LABEL_103;
        memset(&var0, 0, sizeof(var0));
        v90 = OZBehavior::getFrameDuration((OZBehavior *)*((_QWORD *)this + 1), (__n128 *)&var0);
        (*((void (**)(CMTime *__return_ptr, OZChannel *, __n128))v13->var0 + 76))(&time1, v13, v90);
        v144 = time1;
        *(__n128 *)&time2.value = v142;
        time2.epoch = epoch;
        if (CMTimeCompare(&time2, &v144) < 0)
        {
          v142 = *(__n128 *)&time1.value;
          v91 = time1.epoch;
        }
        else
        {
          PCTimeRange::getEnd((PCTimeRange *)&time1, &var0, (uint64_t)&v135);
          *(__n128 *)&time2.value = v142;
          time2.epoch = epoch;
          v144 = v135;
          if (CMTimeCompare(&time2, &v144) < 1)
          {
LABEL_103:
            *(__n128 *)&seconds.var0.var0 = v142;
            seconds.var0.var3 = epoch;
            v130 = 0x3FF0000000000000;
            v127 = 0x3FF0000000000000;
            v124 = 0x3FF0000000000000;
            v121 = 0x3FF0000000000000;
            time1.value = 0x3FF0000000000000;
            *(_OWORD *)&time1.timescale = 0u;
            v123 = 0u;
            v125 = 0u;
            v126 = 0u;
            v128 = 0u;
            v129 = 0u;
            v118 = 0x3FF0000000000000;
            v115 = 0x3FF0000000000000;
            time2.value = 0x3FF0000000000000;
            *(_OWORD *)&time2.timescale = 0u;
            v114 = 0u;
            v116 = 0u;
            v117 = 0u;
            v119 = 0u;
            v120 = 0u;
            if (*(_QWORD *)((*((uint64_t (**)(OZChannel *))v13->var0 + 40))(v13) + 960))
            {
              v100 = (*((uint64_t (**)(OZChannel *))v13->var0 + 40))(v13);
              (*(void (**)(void *, CMTime *, OZRenderState *))(*(_QWORD *)v101 + 1264))(v101, &time2, &seconds);
            }
            (*(void (**)(uint64_t, CMTime *, OZRenderState *))(*(_QWORD *)(v68 + 200) + 1256))(v68 + 200, &time1, &seconds);
            *(double *)&v144.value = v141;
            *(double *)&v144.timescale = v140;
            v144.epoch = 0;
            PCMatrix44Tmpl<double>::transform<double>((double *)&time1.value, (double *)&v144.value, (double *)&v144.value);
            PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, (double *)&v144.value, (double *)&v144.value);
            v102 = *((_DWORD *)this + 7);
            if (v102 == 2)
              return *(double *)&v144.timescale;
            if (v102 == 1)
              return *(double *)&v144.value;
            return *(double *)&v144.epoch;
          }
          PCTimeRange::getEnd((PCTimeRange *)&time1, &var0, (uint64_t)&time2);
          v142 = *(__n128 *)&time2.value;
          v91 = time2.epoch;
        }
        epoch = v91;
        goto LABEL_103;
      default:
        return v14;
    }
  }
  var0 = *a4;
  v16 = (const CMTime *)MEMORY[0x1E0CA2E68];
  if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E0CA2E68], 0.0) == 1)
    a2 = a6 - a2;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), v16, 0.0) == 8
    && OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 2568), MEMORY[0x1E0CA2E68], 0.0) != 1)
  {
    memset(&seconds, 0, 24);
    PositionChannel = OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
    OZChannel::getKeyframeParametricRange((OZChannel *)(PositionChannel + 136), (uint64_t)&seconds);
    operator*((CMTime *)&seconds, &var0, a2 / a6);
  }
  else
  {
    seconds.var0.var0 = 0;
    if (a2 >= a6)
    {
      v17 = (OZChannelPosition3D *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
      v18 = (const CMTime *)MEMORY[0x1E0CA2E68];
      v19 = a6;
    }
    else
    {
      v17 = (OZChannelPosition3D *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
      v18 = (const CMTime *)MEMORY[0x1E0CA2E68];
      if (a2 <= 0.0)
        v19 = 0.0;
      else
        v19 = a2;
    }
    OZChannelPosition3D::getPositionReparametrizedWithRange(v17, v18, v19, &v139, &v138, &v137, (double *)&seconds.var0.var0);
    OZFigTimeForChannelSeconds(&var0, *(Float64 *)&seconds.var0.var0, 0x40000);
  }
  (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)v13[2].var9 + 4) + 320))(&v144);
  seconds.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)var0;
  time1 = v144;
  PC_CMTimeSaferSubtract((CMTime *)&seconds, &time1, (uint64_t)&time2);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)&v13->var7, &v142);
  seconds.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)time2;
  *(__n128 *)&time1.value = v142;
  time1.epoch = epoch;
  PC_CMTimeSaferAdd((CMTime *)&seconds, &time1, (uint64_t)&v135);
  var0 = v135;
  (*(void (**)(OZRenderState *__return_ptr, _QWORD, CMTime *))(**((_QWORD **)v13[2].var9 + 4) + 336))(&seconds, *((_QWORD *)v13[2].var9 + 4), &var0);
  var0 = (CMTime)seconds.var0;
  v75 = (OZChannelFolder *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
  Descendant = (OZChannel *)OZChannelFolder::getDescendant(v75, *((_DWORD *)this + 7));
  OZChannel::getValueAsDouble(Descendant, &var0, 0.0);
  return v77 + a5;
}

__n128 OZMotionPathCurveNode::solveNode(OZMotionPathCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  unint64_t v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v9 = *(CMTime *)((_BYTE *)a2 + 5);
  result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.value = result;
  v8.epoch = *((_QWORD *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZMotionPathCurveNode *, CMTime *, double, double))(*(_QWORD *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      v11 = v8;
      v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      result = *(__n128 *)&v12.value;
      v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

OZMotionPathCurveNode *OZMotionPathCurveNode::cloneNode(OZMotionPathCurveNode *this)
{
  OZMotionPathCurveNode *v2;

  v2 = (OZMotionPathCurveNode *)operator new();
  OZMotionPathCurveNode::OZMotionPathCurveNode(v2, this);
  return v2;
}

void sub_1B2DEF5A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C402889D652);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathCurveNode::compare(OZMotionPathCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 OZMotionPathCurveNode::getNeededRange(OZMotionPathCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

double PCTimeRange::getEnd@<D0>(PCTimeRange *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime v6;
  CMTime v7;
  CMTime v8;

  v8 = *(CMTime *)this;
  v7 = *(CMTime *)((_BYTE *)this + 1);
  PC_CMTimeSaferAdd(&v8, &v7, (uint64_t)&v6);
  v8 = v6;
  v7 = *a2;
  return PC_CMTimeSaferSubtract(&v8, &v7, a3);
}

uint64_t OZSystemSimulator::OZSystemSimulator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E6585918;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  PCMutex::PCMutex((PCMutex *)(a1 + 88));
  PCMutex::PCMutex((PCMutex *)(a1 + 160), 1);
  *(_QWORD *)(a1 + 160) = &unk_1E64E2000;
  *(_DWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 1;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_DWORD *)(a1 + 272) = 0;
  return a1;
}

void sub_1B2DEF77C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  PCMutex *v4;
  _QWORD **v5;

  PCMutex::~PCMutex(v4);
  std::__list_imp<unsigned int>::clear(v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, *v5);
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZSystemSimulator::~OZSystemSimulator(OZSystemSimulator *this)
{
  *(_QWORD *)this = &off_1E6585918;
  OZSystemSimulator::flushCache(this, 1, 0);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 160));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 88));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 8);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 2);
}

{
  OZSystemSimulator::~OZSystemSimulator(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSystemSimulator::flushCache(OZSystemSimulator *this, int a2, int a3)
{
  uint64_t result;
  uint64_t i;
  PCSharedCount **v8;
  PCSharedCount *v9;
  char *v10;
  uint64_t *v11;
  PCSharedCount *v12;
  PCSharedCount **v13;
  uint64_t v14;
  PCSharedCount *v15;
  uint64_t *j;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1));
  if ((result & 1) == 0)
  {
    if (a2)
    {
      PCMutex::lock((PCMutex *)((char *)this + 160));
      PCMutex::lock((PCMutex *)((char *)this + 88));
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
    *((_QWORD *)this + 30) = (char *)this + 248;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)this + 4))
    {
      v8 = (PCSharedCount **)*((_QWORD *)this + 3);
      if (v8[2])
      {
        OZSimStateArray::~OZSimStateArray(v8[2]);
        MEMORY[0x1B5E29170]();
        v8 = (PCSharedCount **)*((_QWORD *)this + 3);
        i = *((_QWORD *)this + 4);
      }
      v9 = *v8;
      v9[1].var0 = (PC_Sp_counted_base *)v8[1];
      v8[1]->var0 = (PC_Sp_counted_base *)v9;
      *((_QWORD *)this + 4) = i - 1;
      operator delete(v8);
    }
    if (*((_QWORD *)this + 7))
    {
      v10 = (char *)this + 40;
      do
      {
        v11 = *(uint64_t **)v10;
        v12 = *(PCSharedCount **)(*(_QWORD *)v10 + 56);
        if (v12)
        {
          OZSimStateArray::~OZSimStateArray(v12);
          MEMORY[0x1B5E29170]();
        }
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 5, v11);
        operator delete(v11);
      }
      while (*((_QWORD *)this + 7));
    }
    while (1)
    {
      v14 = *((_QWORD *)this + 10);
      if (!v14)
        break;
      v13 = (PCSharedCount **)*((_QWORD *)this + 9);
      if (v13[2])
      {
        OZSimStateArray::~OZSimStateArray(v13[2]);
        MEMORY[0x1B5E29170]();
        v13 = (PCSharedCount **)*((_QWORD *)this + 9);
        v14 = *((_QWORD *)this + 10);
      }
      v15 = *v13;
      v15[1].var0 = (PC_Sp_counted_base *)v13[1];
      v13[1]->var0 = (PC_Sp_counted_base *)v15;
      *((_QWORD *)this + 10) = v14 - 1;
      operator delete(v13);
    }
    result = (*(uint64_t (**)(_QWORD, OZSystemSimulator *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), this);
    if (a3)
    {
      v17 = (uint64_t)&v17;
      v18 = &v17;
      v19 = 0;
      (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), &v17);
      for (j = v18; j != &v17; j = (uint64_t *)j[1])
        (*(void (**)(uint64_t))(*(_QWORD *)j[2] + 712))(j[2]);
      result = (uint64_t)std::__list_imp<unsigned int>::clear(&v17);
    }
    if (a2)
    {
      PCMutex::unlock((PCMutex *)((char *)this + 88));
      return PCMutex::unlock((PCMutex *)((char *)this + 160));
    }
  }
  return result;
}

void sub_1B2DEFA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZSystemSimulator::getState(OZSystemSimulator *this, const CMTime *a2, OZSimStateArray **a3, BOOL *a4)
{
  PCMutex *v8;
  double Seconds;
  CMTime *v10;
  CMTime *NonFrameAlignedCachedState;
  uint64_t result;
  CMTime *CachedState;
  CMTime *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  OZSystemSimulator *v20;
  uint64_t v21;
  OZSystemSimulator *v22;
  double v23;
  OZSimStateArray *v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime i;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime time;
  CMTime v40;
  CMTime time2;
  CMTime time1;

  v8 = (PCMutex *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  ++*((_DWORD *)this + 58);
  memset(&v40, 0, sizeof(v40));
  (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 1) + 120))(&v40);
  time = v40;
  Seconds = CMTimeGetSeconds(&time);
  v38 = *a2;
  memset(&v37, 0, sizeof(v37));
  v36 = *a2;
  v35 = v40;
  PC_CMTimeFloorToSampleDuration(&v36, &v35, (uint64_t)&v37);
  memset(&v34, 0, sizeof(v34));
  time1 = v38;
  time2 = v37;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v34);
  v10 = (CMTime *)MEMORY[0x1E0CA2E68];
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  time2 = v34;
  if (CMTimeCompare(&time1, &time2)
    && (v33 = v38, (NonFrameAlignedCachedState = OZSystemSimulator::getNonFrameAlignedCachedState(this, &v33)) != 0))
  {
    OZSystemSimulator::updateLocalCoords((double *)this, (OZSimStateArray *)NonFrameAlignedCachedState);
    *a3 = (OZSimStateArray *)NonFrameAlignedCachedState;
    *a4 = 0;
    result = PCMutex::unlock(v8);
  }
  else
  {
    v32 = v38;
    v31 = v40;
    CachedState = OZSystemSimulator::getCachedState(this, &v32, &v31);
    v14 = CachedState;
    if (CachedState && (time1 = CachedState[1], time2 = v38, !CMTimeCompare(&time1, &time2)))
    {
      OZSystemSimulator::updateLocalCoords((double *)this, (OZSimStateArray *)v14);
      *a3 = (OZSimStateArray *)v14;
      *a4 = 0;
      result = PCMutex::unlock(v8);
    }
    else
    {
      v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
      if (v14)
        v16 = v15;
      else
        v16 = 0;
      if (v16 == 1)
      {
        v17 = operator new();
        OZSimStateArray::OZSimStateArray((OZSimStateArray *)v17, (const OZSimStateArray *)v14);
        v18 = operator new();
        OZSimStateArray::OZSimStateArray((OZSimStateArray *)v18, -1108378657 * ((unint64_t)(*(_QWORD *)&v14->timescale - v14->value) >> 3));
      }
      else
      {
        v18 = operator new();
        OZSimStateArray::OZSimStateArray((OZSimStateArray *)v18);
        (*(void (**)(CMTime *__return_ptr, _QWORD, CMTime *))(**((_QWORD **)this + 1) + 128))(&time1, *((_QWORD *)this + 1), &v38);
        *(CMTime *)(v18 + 24) = time1;
        v19 = (*(uint64_t (**)(_QWORD, OZSystemSimulator *, uint64_t, double))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), this, v18, Seconds);
        OZSystemSimulator::accumInitialValues((uint64_t)this, v18, v19);
        v17 = operator new();
        OZSimStateArray::OZSimStateArray((OZSimStateArray *)v17);
        std::vector<OZSimStateElement>::resize((uint64_t *)v17, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3));
        OZSystemSimulator::reapDeadObjects(v20, (OZSimStateArray *)v18, (OZSimStateArray *)v17);
        std::vector<OZSimStateElement>::resize((uint64_t *)v18, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 3));
        v30 = v40;
        OZSystemSimulator::cacheState(this, (OZSimStateArray *)v17, &v30);
        if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1)) & 1) == 0)
        {
          OZSystemSimulator::updateLocalCoords((double *)this, (OZSimStateArray *)v17);
          *a3 = (OZSimStateArray *)v17;
          *a4 = 1;
          PCMutex::unlock(v8);
          OZSimStateArray::~OZSimStateArray((PCSharedCount *)v18);
          result = MEMORY[0x1B5E29170]();
          goto LABEL_21;
        }
      }
      for (i = *(CMTime *)(v17 + 24); ; i = *(CMTime *)(v17 + 24))
      {
        time1 = i;
        time2 = v37;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          break;
        *(_BYTE *)(v18 + 48) = 0;
        time1 = v40;
        OZSystemSimulator::midPointSolve(this, (OZSimStateArray *)v17, (OZSimStateArray *)v18, &time1, Seconds);
        LOBYTE(time1.value) = 0;
        OZSystemSimulator::handleCollisions((uint64_t)this, v17, v18, 0, &time1);
        v21 = (*(uint64_t (**)(_QWORD, OZSystemSimulator *, uint64_t, double))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), this, v18, Seconds);
        v28 = v40;
        OZSystemSimulator::partialSolve(this, (OZSimStateArray *)v18, v21, &v28);
        std::vector<OZSimStateElement>::resize((uint64_t *)v17, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3));
        OZSystemSimulator::reapDeadObjects(v22, (OZSimStateArray *)v18, (OZSimStateArray *)v17);
        std::vector<OZSimStateElement>::resize((uint64_t *)v18, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 3));
        v27 = v40;
        OZSystemSimulator::cacheState(this, (OZSimStateArray *)v17, &v27);
      }
      time1 = *v10;
      time2 = v34;
      if (CMTimeCompare(&time1, &time2))
      {
        *(_BYTE *)(v18 + 48) = 0;
        v26 = v34;
        v25 = v34;
        v23 = CMTimeGetSeconds(&v25);
        time1 = v26;
        OZSystemSimulator::midPointSolve(this, (OZSimStateArray *)v17, (OZSimStateArray *)v18, &time1, v23);
        OZSystemSimulator::cacheNonFrameAlignedState(this, (OZSimStateArray *)v18);
        v24 = (OZSimStateArray *)v18;
      }
      else
      {
        v24 = (OZSimStateArray *)v17;
        v17 = v18;
      }
      OZSystemSimulator::updateLocalCoords((double *)this, v24);
      *a3 = v24;
      *a4 = 1;
      OZSimStateArray::~OZSimStateArray((PCSharedCount *)v17);
      MEMORY[0x1B5E29170]();
      result = PCMutex::unlock(v8);
    }
  }
LABEL_21:
  --*((_DWORD *)this + 58);
  return result;
}

void sub_1B2DF009C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  --*(_DWORD *)(v1 + 232);
  _Unwind_Resume(exception_object);
}

CMTime *OZSystemSimulator::getNonFrameAlignedCachedState(OZSystemSimulator *this, CMTime *a2)
{
  PCMutex *v4;
  CMTime *v5;
  char *v6;
  uint64_t *v7;
  int32_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  CMTime time2;
  CMTime time1;

  v4 = (PCMutex *)((char *)this + 88);
  PCMutex::lock((PCMutex *)((char *)this + 88));
  if (*((_BYTE *)this + 236) && *((_DWORD *)this + 58) == 1)
  {
    OZSystemSimulator::flushCache(this, 0, 1);
    v5 = 0;
    *((_BYTE *)this + 236) = 0;
  }
  else
  {
    v6 = (char *)this + 64;
    v7 = (uint64_t *)*((_QWORD *)this + 9);
    if (v7 == (uint64_t *)((char *)this + 64))
    {
LABEL_7:
      v5 = 0;
    }
    else
    {
      while (1)
      {
        v5 = (CMTime *)v7[2];
        time1 = v5[1];
        time2 = *a2;
        v8 = CMTimeCompare(&time1, &time2);
        v9 = (char *)v7[1];
        if (!v8)
          break;
        v7 = (uint64_t *)v7[1];
        if (v9 == v6)
          goto LABEL_7;
      }
      v10 = *v7;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)v7[1] = v10;
      --*((_QWORD *)this + 10);
      operator delete(v7);
      v11 = operator new(0x18uLL);
      v12 = (_QWORD *)*((_QWORD *)this + 9);
      *v11 = v6;
      v11[1] = v12;
      v11[2] = v5;
      *v12 = v11;
      v13 = *((_QWORD *)this + 10) + 1;
      *((_QWORD *)this + 9) = v11;
      *((_QWORD *)this + 10) = v13;
    }
  }
  PCMutex::unlock(v4);
  return v5;
}

void sub_1B2DF0250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double *OZSystemSimulator::updateLocalCoords(double *this, OZSimStateArray *a2)
{
  uint64_t i;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (!*((_BYTE *)a2 + 48))
  {
    v14 = *(_OWORD *)((char *)a2 + 24);
    v15 = *((_QWORD *)a2 + 5);
    v13 = 0x3FF0000000000000;
    v10 = 0x3FF0000000000000;
    v7 = 0x3FF0000000000000;
    v4 = 0x3FF0000000000000;
    v5 = 0u;
    v6 = 0u;
    v8 = 0u;
    v9 = 0u;
    v12 = 0u;
    v11 = 0u;
    this = (double *)(*(uint64_t (**)(_QWORD, double *, uint64_t *, __int128 *))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1), this, &v4, &v14);
    for (i = *(_QWORD *)a2; i != *((_QWORD *)a2 + 1); i += 248)
    {
      *(_OWORD *)(i + 176) = *(_OWORD *)i;
      *(_QWORD *)(i + 192) = *(_QWORD *)(i + 16);
      this = PCMatrix44Tmpl<double>::transform<double>((double *)&v4, (double *)(i + 176), (double *)(i + 176));
    }
    *((_BYTE *)a2 + 48) = 1;
  }
  return this;
}

CMTime *OZSystemSimulator::getCachedState(OZSystemSimulator *this, CMTime *a2, CMTime *a3)
{
  PCMutex *v6;
  CMTime *v7;
  char *v8;
  char *v9;
  CMTime *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  CMTime v23;
  CMTime v24;
  char *v25;
  char v26;
  CMTime time2;
  CMTime time1;

  v6 = (PCMutex *)((char *)this + 88);
  v25 = (char *)this + 88;
  PCMutex::lock((PCMutex *)((char *)this + 88));
  v26 = 1;
  if (*((_BYTE *)this + 236) && *((_DWORD *)this + 58) == 1)
  {
    OZSystemSimulator::flushCache(this, 0, 1);
    v7 = 0;
    *((_BYTE *)this + 236) = 0;
    goto LABEL_32;
  }
  v8 = (char *)this + 16;
  v9 = (char *)*((_QWORD *)this + 3);
  if (v9 == (char *)this + 16)
  {
LABEL_15:
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v10 = (CMTime *)*((_QWORD *)v9 + 2);
      time1 = v10[1];
      time2 = *a2;
      if (!CMTimeCompare(&time1, &time2))
      {
        v17 = *(_QWORD *)v9;
        *(_QWORD *)(v17 + 8) = *((_QWORD *)v9 + 1);
        **((_QWORD **)v9 + 1) = v17;
        --*((_QWORD *)this + 4);
        operator delete(v9);
        v18 = operator new(0x18uLL);
        v19 = (_QWORD *)*((_QWORD *)this + 3);
        *v18 = v8;
        v18[1] = v19;
        v18[2] = v10;
        *v19 = v18;
        v20 = *((_QWORD *)this + 4) + 1;
        *((_QWORD *)this + 3) = v18;
        *((_QWORD *)this + 4) = v20;
        v7 = v10;
        goto LABEL_32;
      }
      time1 = v10[1];
      time2 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        if (!v7 || (time1 = v7[1], time2 = v10[1], CMTimeCompare(&time1, &time2) < 0))
          v7 = v10;
      }
      v9 = (char *)*((_QWORD *)v9 + 1);
    }
    while (v9 != v8);
    if (!v7)
      goto LABEL_15;
    time2 = v7[1];
    time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    operator*(a3, &v23, 10.0);
    time1 = v24;
    time2 = v23;
    if (CMTimeCompare(&time1, &time2) < 0)
      goto LABEL_32;
  }
  v11 = (_QWORD *)((char *)this + 48);
  v12 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, a2, *((_QWORD *)this + 6), (uint64_t)this + 48);
  v13 = (_QWORD *)v12;
  if ((OZSystemSimulator *)((char *)this + 48) == (OZSystemSimulator *)v12)
  {
    if (!*((_QWORD *)this + 7))
      goto LABEL_32;
    v21 = (_QWORD *)*v11;
    if (*v11)
    {
      do
      {
        v15 = v21;
        v21 = (_QWORD *)v21[1];
      }
      while (v21);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v11[2];
        v16 = *v15 == (_QWORD)v11;
        v11 = v15;
      }
      while (v16);
    }
LABEL_30:
    v7 = (CMTime *)v15[7];
    goto LABEL_32;
  }
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)(v12 + 32);
  if (!CMTimeCompare(&time1, &time2))
  {
    v7 = (CMTime *)v13[7];
    goto LABEL_32;
  }
  if (*((_QWORD **)this + 5) != v13)
  {
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)v14[1];
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v13[2];
        v16 = *v15 == (_QWORD)v13;
        v13 = v15;
      }
      while (v16);
    }
    goto LABEL_30;
  }
LABEL_32:
  PCMutex::unlock(v6);
  return v7;
}

void sub_1B2DF063C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *OZSystemSimulator::accumInitialValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *j;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v19 = (uint64_t)&v19;
  v20 = &v19;
  v21 = 0;
  v16 = &v16;
  v17 = &v16;
  v18 = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
  v7 = *(_QWORD *)(a1 + 8);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 40);
  (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v7 + 24))(v7, &v19, &v14);
  for (i = v20; i != &v19; i = (uint64_t *)i[1])
  {
    v9 = i[2];
    if (v9
    {
      v10 = operator new(0x18uLL);
      v10[1] = &v16;
      v10[2] = v9;
      v11 = v16;
      *v10 = v16;
      v11[1] = v10;
      v16 = v10;
      ++v18;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 648))(v9, a2, a3, v6);
    }
  }
  for (j = v17; j != &v16; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)j[2] + 648))(j[2], a2, a3, v6);
  std::__list_imp<unsigned int>::clear(&v16);
  return std::__list_imp<unsigned int>::clear(&v19);
}

void sub_1B2DF07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  std::__list_imp<unsigned int>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void std::vector<OZSimStateElement>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<OZSimStateElement>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 248 * a2;
    while (v3 != v7)
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v3 - 248));
    a1[1] = v7;
  }
}

void OZSystemSimulator::reapDeadObjects(OZSystemSimulator *this, OZSimStateArray *a2, OZSimStateArray *a3)
{
  char *v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v5 = (char *)a2 + 24;
  v9 = *(_OWORD *)((char *)a2 + 24);
  v10 = *((_QWORD *)a2 + 5);
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v11 = v9;
      v12 = v10;
      if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 232) + 24))(*(_QWORD *)(v6 + 232), &v11))
      {
        OZSimStateElement::operator=(*(_QWORD *)a3 + 248 * v7++, (__int128 *)v6);
      }
      v6 += 248;
    }
    while (v6 != *((_QWORD *)a2 + 1));
  }
  v8 = *(_OWORD *)v5;
  *((_QWORD *)a3 + 5) = *((_QWORD *)v5 + 2);
  *(_OWORD *)((char *)a3 + 24) = v8;
  *((_BYTE *)a3 + 48) = 0;
  OZSimStateArray::setOwnedObjectFrom((PCSharedCount *)a3, (const PCSharedCount *)a2);
  std::vector<OZSimStateElement>::resize((uint64_t *)a3, v7);
}

uint64_t OZSystemSimulator::cacheState(OZSystemSimulator *this, OZSimStateArray *a2, CMTime *a3)
{
  uint64_t result;
  PCMutex *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  OZSimStateArray *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  BOOL v29;
  uint64_t **v30;
  CMTime *v31;
  _BYTE **v32;
  CMTime v33;
  _BYTE **v34;
  CMTime v35;
  CMTime v36;
  char *v37;
  char v38;
  CMTime time2;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if ((_DWORD)result)
  {
    v7 = (PCMutex *)((char *)this + 88);
    v37 = (char *)this + 88;
    PCMutex::lock((PCMutex *)((char *)this + 88));
    v38 = 1;
    v8 = (char *)this + 16;
    v9 = (char *)*((_QWORD *)this + 3);
    if (v9 == (char *)this + 16)
    {
LABEL_5:
      v10 = *((_QWORD *)this + 4);
      if (v10 >= 8)
      {
        v11 = *(uint64_t **)v8;
        if (*(_QWORD *)(*(_QWORD *)v8 + 16))
        {
          OZSimStateArray::~OZSimStateArray(*(PCSharedCount **)(*(_QWORD *)v8 + 16));
          MEMORY[0x1B5E29170]();
          v11 = (uint64_t *)*((_QWORD *)this + 2);
          v10 = *((_QWORD *)this + 4);
        }
        v12 = *v11;
        *(_QWORD *)(v12 + 8) = v11[1];
        *(_QWORD *)v11[1] = v12;
        *((_QWORD *)this + 4) = v10 - 1;
        operator delete(v11);
      }
      v13 = (OZSimStateArray *)operator new();
      OZSimStateArray::OZSimStateArray(v13, a2);
      v14 = operator new(0x18uLL);
      v15 = (_QWORD *)*((_QWORD *)this + 3);
      *v14 = v8;
      v14[1] = v15;
      v14[2] = v13;
      *v15 = v14;
      v16 = *((_QWORD *)this + 4) + 1;
      *((_QWORD *)this + 3) = v14;
      *((_QWORD *)this + 4) = v16;
    }
    else
    {
      while (1)
      {
        v33 = *(CMTime *)(*((_QWORD *)v9 + 2) + 24);
        time2 = *(CMTime *)((_BYTE *)a2 + 1);
        if (!CMTimeCompare(&v33, &time2))
          break;
        v9 = (char *)*((_QWORD *)v9 + 1);
        if (v9 == v8)
          goto LABEL_5;
      }
      v17 = *((_QWORD *)v9 + 2);
      v18 = *(_QWORD *)v9;
      *(_QWORD *)(v18 + 8) = *((_QWORD *)v9 + 1);
      **((_QWORD **)v9 + 1) = v18;
      --*((_QWORD *)this + 4);
      operator delete(v9);
      v19 = operator new(0x18uLL);
      v20 = (_QWORD *)*((_QWORD *)this + 3);
      *v19 = v8;
      v19[1] = v20;
      v19[2] = v17;
      *v20 = v19;
      v21 = *((_QWORD *)this + 4) + 1;
      *((_QWORD *)this + 3) = v19;
      *((_QWORD *)this + 4) = v21;
      OZSimStateArray::operator=(v17, (uint64_t)a2);
    }
    v22 = (uint64_t *)((char *)this + 48);
    v23 = (uint64_t **)((char *)this + 40);
    v24 = (_OWORD *)((char *)a2 + 24);
    v25 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, (CMTime *)a2 + 1, *((_QWORD *)this + 6), (uint64_t)this + 48);
    v26 = (uint64_t *)v25;
    if ((OZSystemSimulator *)((char *)this + 48) == (OZSystemSimulator *)v25)
    {
      if (*((_QWORD *)this + 7))
      {
        v30 = (uint64_t **)*v22;
        if (*v22)
        {
          do
          {
            v28 = v30;
            v30 = (uint64_t **)v30[1];
          }
          while (v30);
        }
        else
        {
          do
          {
            v28 = (uint64_t **)v22[2];
            v29 = *v28 == v22;
            v22 = (uint64_t *)v28;
          }
          while (v29);
        }
        goto LABEL_24;
      }
    }
    else
    {
      *(_OWORD *)&v33.value = *v24;
      v33.epoch = *((_QWORD *)a2 + 5);
      time2 = *(CMTime *)(v25 + 32);
      if (!CMTimeCompare(&v33, &time2))
      {
        v31 = (CMTime *)v26[7];
        OZSimStateArray::operator=((uint64_t)v31, (uint64_t)a2);
        goto LABEL_26;
      }
      if (*v23 != v26)
      {
        v27 = (uint64_t **)*v26;
        if (*v26)
        {
          do
          {
            v28 = v27;
            v27 = (uint64_t **)v27[1];
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (uint64_t **)v26[2];
            v29 = *v28 == v26;
            v26 = (uint64_t *)v28;
          }
          while (v29);
        }
LABEL_24:
        v31 = (CMTime *)v28[7];
LABEL_26:
        if (v31)
        {
          *(_OWORD *)&v33.value = *v24;
          v33.epoch = *((_QWORD *)a2 + 5);
          time2 = v31[1];
          PC_CMTimeSaferSubtract(&v33, &time2, (uint64_t)&v36);
          operator*(a3, &v35, 10.0);
          v33 = v36;
          time2 = v35;
          if (CMTimeCompare(&v33, &time2) <= 0)
            return PCMutex::unlock(v7);
        }
      }
    }
    v32 = (_BYTE **)operator new();
    OZSimStateArray::OZSimStateArray((OZSimStateArray *)v32, a2);
    v33 = *(CMTime *)((_BYTE *)v32 + 1);
    v34 = v32;
    std::__tree<std::__value_type<CMTime,OZSimStateArray *>,std::__map_value_compare<CMTime,std::__value_type<CMTime,OZSimStateArray *>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,OZSimStateArray *>>>::__emplace_unique_key_args<CMTime,std::pair<CMTime const,OZSimStateArray *>>(v23, &v33, &v33);
    return PCMutex::unlock(v7);
  }
  return result;
}

void sub_1B2DF0CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *OZSystemSimulator::handleCollisions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t *i;
  void *v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  v13 = *(_OWORD *)(a3 + 24);
  v14 = *(_QWORD *)(a3 + 40);
  (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v9 + 32))(v9, &v15, &v13);
  for (i = v16; i != &v15; i = (uint64_t *)i[1])
  {
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 736))(v11, 0, a2, a3, a4, a5);
    if (*a5)
      break;
  }
  return std::__list_imp<unsigned int>::clear(&v15);
}

void sub_1B2DF0E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZSystemSimulator::partialSolve(OZSystemSimulator *this, OZSimStateArray *a2, uint64_t a3, CMTime *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v10;
  _OWORD *v11;
  int v12;
  double Seconds;
  CMTime time;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  uint64_t v20;
  uint64_t v21;

  if ((int)a3 >= 1)
  {
    v20 = v4;
    v21 = v5;
    v7 = a3;
    OZSystemSimulator::accumInitialValues((uint64_t)this, (uint64_t)a2, a3);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1)))
    {
      OZSystemSimulator::getDerivatives(this, a2);
      memset(&v17, 0, sizeof(v17));
      operator/((__int128 *)&a4->value, (uint64_t)&v17, (double)v7);
      v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v10 = *((_QWORD *)a2 + 1);
      if (v10 != *(_QWORD *)a2)
      {
        v11 = (_OWORD *)(v10 - 248);
        v12 = 1;
        do
        {
          time = v16;
          Seconds = CMTimeGetSeconds(&time);
          OZSimStateElement::stepFrom((uint64_t)v11, (uint64_t)v11, Seconds, 1.0);
          v19 = v16;
          v18 = v17;
          PC_CMTimeSaferAdd(&v19, &v18, (uint64_t)&v16);
          v11[9] = 0u;
          v11[10] = 0u;
          v11[8] = 0u;
          if (v11 == *(_OWORD **)a2)
            break;
          v11 = (_OWORD *)((char *)v11 - 248);
        }
        while (v12++ < v7);
      }
    }
  }
}

uint64_t OZSystemSimulator::cacheNonFrameAlignedState(OZSystemSimulator *this, OZSimStateArray *a2)
{
  uint64_t result;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  OZSimStateArray *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  CMTime time2;
  CMTime time1;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if ((_DWORD)result)
  {
    PCMutex::lock((PCMutex *)((char *)this + 88));
    v5 = (char *)this + 64;
    v6 = (uint64_t *)*((_QWORD *)this + 9);
    if (v6 == (uint64_t *)((char *)this + 64))
    {
LABEL_5:
      v7 = *((_QWORD *)this + 10);
      if (v7 >= 8)
      {
        v8 = *(uint64_t **)v5;
        if (*(_QWORD *)(*(_QWORD *)v5 + 16))
        {
          OZSimStateArray::~OZSimStateArray(*(PCSharedCount **)(*(_QWORD *)v5 + 16));
          MEMORY[0x1B5E29170](v9, 0x1020C408C3EC410);
          v8 = (uint64_t *)*((_QWORD *)this + 8);
          v7 = *((_QWORD *)this + 10);
        }
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v8[1];
        *(_QWORD *)v8[1] = v10;
        *((_QWORD *)this + 10) = v7 - 1;
        operator delete(v8);
      }
      v11 = (OZSimStateArray *)operator new();
      OZSimStateArray::OZSimStateArray(v11, a2);
      v12 = operator new(0x18uLL);
      v13 = (_QWORD *)*((_QWORD *)this + 9);
      *v12 = v5;
      v12[1] = v13;
      v12[2] = v11;
      *v13 = v12;
      v14 = *((_QWORD *)this + 10) + 1;
      *((_QWORD *)this + 9) = v12;
      *((_QWORD *)this + 10) = v14;
    }
    else
    {
      while (1)
      {
        time1 = *(CMTime *)(v6[2] + 24);
        time2 = *(CMTime *)((_BYTE *)a2 + 1);
        if (!CMTimeCompare(&time1, &time2))
          break;
        v6 = (uint64_t *)v6[1];
        if (v6 == (uint64_t *)v5)
          goto LABEL_5;
      }
      v15 = v6[2];
      v16 = *v6;
      *(_QWORD *)(v16 + 8) = v6[1];
      *(_QWORD *)v6[1] = v16;
      --*((_QWORD *)this + 10);
      operator delete(v6);
      v17 = operator new(0x18uLL);
      v18 = (_QWORD *)*((_QWORD *)this + 9);
      *v17 = v5;
      v17[1] = v18;
      v17[2] = v15;
      *v18 = v17;
      v19 = *((_QWORD *)this + 10) + 1;
      *((_QWORD *)this + 9) = v17;
      *((_QWORD *)this + 10) = v19;
      OZSimStateArray::operator=(v15, (uint64_t)a2);
    }
    return PCMutex::unlock((PCMutex *)((char *)this + 88));
  }
  return result;
}

void sub_1B2DF1184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZSystemSimulator::dirtyCache(OZSystemSimulator *this)
{
  PCMutex *v2;

  v2 = (PCMutex *)((char *)this + 88);
  PCMutex::lock((PCMutex *)((char *)this + 88));
  *((_BYTE *)this + 236) = 1;
  return PCMutex::unlock(v2);
}

_QWORD *OZSystemSimulator::didAddToScene(OZSystemSimulator *this, OZScene *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 198);
  *((_QWORD *)this + 33) = v4;
  OZDocument::addCPPObserver(v4, (uint64_t)this, 1000);
  return OZScene::addSimulator((uint64_t)a2, (uint64_t)this);
}

_QWORD *OZSystemSimulator::willRemoveFromScene(OZSystemSimulator *this, OZScene *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 198);
  *((_QWORD *)this + 33) = v4;
  OZDocument::removeCPPObserver(v4);
  return OZScene::removeSimulator((uint64_t)a2, (uint64_t)this);
}

void OZSystemSimulator::notify(OZSystemSimulator *this, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  OZChannelBase *v6;
  uint64_t v7;
  OZChannelRef **v8;
  OZChannelRef **v9;
  OZChannelRef *i;
  OZChannelBase *Channel;
  uint64_t ObjectManipulator;
  uint64_t v13;
  const void *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20[2];

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1)) & 1) == 0)
  {
    if ((a2 & 0x9810) != 0)
      goto LABEL_4;
    if ((a2 & 0xC) == 0)
      return;
    v4 = *((_QWORD *)this + 33);
    if (!v4)
    {
LABEL_4:
      PCMutex::lock((PCMutex *)((char *)this + 88));
      *((_BYTE *)this + 236) = 1;
      PCMutex::unlock((PCMutex *)((char *)this + 88));
      return;
    }
    v20[0] = 0;
    v20[1] = 0;
    v19 = (uint64_t *)v20;
    v5 = *(_QWORD *)(v4 + 24) + 920;
    do
    {
      v6 = (OZChannelBase *)v5;
      v5 = *(_QWORD *)(v5 + 48);
    }
    while (v5);
    v7 = *(_QWORD *)(v4 + 168);
    v8 = (OZChannelRef **)(v4 + 296);
    if (v7)
      v9 = (OZChannelRef **)(v7 + 48);
    else
      v9 = v8;
    for (i = *v9; i != v9[1]; i = (OZChannelRef *)((char *)i + 24))
    {
      Channel = OZChannelRef::getChannel(i, v6);
      if (Channel)
      {
        ObjectManipulator = OZChannelBase::getObjectManipulator(Channel);
        if (ObjectManipulator)
        {
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator);
          v14 = (const void *)v13;
          if (v13)
          {
            LODWORD(v17) = *(_DWORD *)(v13 + 80);
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v19, (unsigned int *)&v17, &v17);
            v15 = *(_QWORD *)((*(uint64_t (**)(const void *))(*(_QWORD *)v14 + 664))(v14) + 8);
            v17 = xmmword_1B3053B20;
            if (OZFactory::isKindOfClass(v15, (int32x4_t *)&v17))
            {
              *((_QWORD *)&v17 + 1) = 0;
              v18 = 0;
              *(_QWORD *)&v17 = (char *)&v17 + 8;
              OZRigWidget::getRiggedNodeIDs(v16, (uint64_t **)&v17);
              std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v19, (unsigned int *)v17, (unsigned int *)&v17 + 2);
              std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v17, *((_QWORD **)&v17 + 1));
            }
          }
        }
      }
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t **))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1), &v19))
    {
      if (*((int *)this + 68) <= 0)
      {
        PCMutex::lock((PCMutex *)((char *)this + 88));
        *((_BYTE *)this + 236) = 1;
        PCMutex::unlock((PCMutex *)((char *)this + 88));
        ++*((_DWORD *)this + 68);
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v19, v20[0]);
  }
}

void sub_1B2DF1490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *OZSystemSimulator::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3, uint64_t a4)
{
  int8x8_t *v8;
  int8x8_t *v9;
  _QWORD *result;
  uint64_t *i;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  int *StaticHash;
  int8x8_t *Hash;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;

  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v20 = *(__n128 *)PCHashWriteStream::getHash(v8)->i8;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v9 + 40))(v9);
  result = *(_QWORD **)(a1 + 8);
  if (result)
  {
    v17 = (uint64_t)&v17;
    v18 = &v17;
    v19 = 0;
    (*(void (**)(_QWORD *, uint64_t *))(*result + 48))(result, &v17);
    for (i = v18; i != &v17; i = (uint64_t *)i[1])
    {
      v12 = (_OWORD *)i[2];
      v13 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v12 + 320))(v12);
      if (v13 != a4)
      {
        if ((*(unsigned int (**)(_OWORD *))(*(_QWORD *)v12 + 672))(v12))
        {
          v14 = v12 + 1;
        }
        else
        {
          if (!v13)
            continue;
          v14 = (_OWORD *)(v13 + 16);
          if (OZObjectManipulator::isInObjectList(v13 + 16, (uint64_t)a3))
            continue;
        }
        StaticHash = (int *)OZObjectManipulator::getStaticHash(v14, lpsrc, a3);
        PCHash128::operator+=((int *)&v20, StaticHash);
      }
    }
    Hash = PCHashWriteStream::getHash(v9);
    PCHash128::operator+=((int *)&v20, (int *)Hash);
    PCHashWriteStream::setHash((__n128 *)v9, &v20);
    return std::__list_imp<unsigned int>::clear(&v17);
  }
  return result;
}

void sub_1B2DF16B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *OZSystemSimulator::calcHashForState(uint64_t a1, void *lpsrc, OZRenderParams *a3, uint64_t **a4, uint64_t a5)
{
  int8x8_t *v10;
  int8x8_t *v11;
  _QWORD *result;
  uint64_t *i;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int8x8_t *Hash;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 v23;

  if (!v10)
    __cxa_bad_cast();
  v11 = v10;
  v23 = *(__n128 *)PCHashWriteStream::getHash(v10)->i8;
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
  result = *(_QWORD **)(a1 + 8);
  if (result)
  {
    v20 = (uint64_t)&v20;
    v21 = &v20;
    v22 = 0;
    (*(void (**)(_QWORD *, uint64_t *))(*result + 48))(result, &v20);
    for (i = v21; i != &v20; i = (uint64_t *)i[1])
    {
      v14 = (_OWORD *)i[2];
      v15 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v14 + 320))(v14);
      if (v15 != a5)
      {
        if ((*(unsigned int (**)(_OWORD *))(*(_QWORD *)v14 + 672))(v14))
        {
          OZObjectManipulator::getHashForState(v14 + 1, lpsrc, a3, a4, &v19);
          PCHash128::operator+=((int *)&v23, (int *)&v19);
        }
        else
        {
          if (v15)
          {
            v16 = (_OWORD *)(v15 + 16);
            if (!OZObjectManipulator::isInObjectList((uint64_t)v16, (uint64_t)a4))
            {
              OZObjectManipulator::getHashForState(v16, lpsrc, a3, a4, &v19);
              PCHash128::operator+=((int *)&v23, (int *)&v19);
            }
          }
          v17 = v14 + 1;
          if (!OZObjectManipulator::isInObjectList((uint64_t)v17, (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v17, lpsrc, a3, a4, &v19);
            PCHash128::operator+=((int *)&v23, (int *)&v19);
          }
        }
      }
    }
    Hash = PCHashWriteStream::getHash(v11);
    PCHash128::operator+=((int *)&v23, (int *)Hash);
    PCHashWriteStream::setHash((__n128 *)v11, &v23);
    return std::__list_imp<unsigned int>::clear(&v20);
  }
  return result;
}

void sub_1B2DF18A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZSystemSimulator::midPointSolve(OZSystemSimulator *this, OZSimStateArray *a2, OZSimStateArray *a3, CMTime *a4, double a5)
{
  CMTime v10;
  CMTime v11;
  CMTime v12;
  PCSharedCount v13[9];

  OZSystemSimulator::getDerivatives(this, a2);
  OZSimStateArray::OZSimStateArray((OZSimStateArray *)v13, -1108378657 * ((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v11 = *a4;
  PC_CMTimeHalve(&v11, (uint64_t)&v12);
  OZSimStateArray::stepFrom((OZSimStateArray *)v13, a2, &v12, a5 * 0.5);
  OZSystemSimulator::getDerivatives(this, (OZSimStateArray *)v13);
  v10 = *a4;
  OZSimStateArray::stepFrom(a3, a2, (OZSimStateArray *)v13, &v10, a5);
  OZSimStateArray::~OZSimStateArray(v13);
}

void sub_1B2DF19A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  OZSimStateArray::~OZSimStateArray((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

_QWORD *OZSystemSimulator::getDerivatives(OZSystemSimulator *this, OZSimStateArray *a2)
{
  uint64_t v4;
  int32_t v5;
  uint64_t *i;
  uint64_t v7;
  double v8;
  char v9;
  char v10;
  _BYTE v12[24];
  CMTime v13;
  CMTime v14;
  CMTime v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  CMTime time2;
  CMTime time1;

  OZSimStateArray::clearForces(a2);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
  v15 = *(CMTime *)((_BYTE *)a2 + 1);
  (*(void (**)(CMTime *__return_ptr, _QWORD, CMTime *))(**((_QWORD **)this + 1) + 128))(&v14, *((_QWORD *)this + 1), &v15);
  time1 = v15;
  time2 = v14;
  v5 = CMTimeCompare(&time1, &time2);
  (*(void (**)(_QWORD, uint64_t *, CMTime *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), &v16, &v15);
  memset(&v14, 0, sizeof(v14));
  (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 1) + 120))(&v14);
  memset(&v13, 0, sizeof(v13));
  operator*(&v14, &v13, 0.001);
  for (i = v17; i != &v16; i = (uint64_t *)i[1])
  {
    v7 = i[2];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 672))(v7))
    {
      time1 = v15;
      time2 = v13;
      v8 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v12);
      v9 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)v7 + 296))(v7, v12, 0, 1, 1, v8);
      if (v5)
        v10 = v9;
      else
        v10 = 1;
      if ((v10 & 1) == 0)
        (*(void (**)(uint64_t, OZSimStateArray *, _QWORD, uint64_t))(*(_QWORD *)v7 + 648))(v7, a2, -1108378657 * ((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3), v4);
    }
    (*(void (**)(uint64_t, OZSimStateArray *, uint64_t))(*(_QWORD *)v7 + 632))(v7, a2, v4);
  }
  return std::__list_imp<unsigned int>::clear(&v16);
}

void sub_1B2DF1BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<OZSimStateElement>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OZSimStateElement *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  OZSimStateElement *v13;
  uint64_t v14;
  OZSimStateElement *v15;
  uint64_t v16;
  OZSimStateElement *v17;
  _QWORD v18[2];
  OZSimStateElement *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(OZSimStateElement **)(v4 - 8);
  if (0xEF7BDEF7BDEF7BDFLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (OZSimStateElement *)((char *)v7 + 248 * a2);
      v14 = 248 * a2;
      do
      {
        OZSimStateElement::OZSimStateElement(v7);
        v7 = (OZSimStateElement *)((char *)v7 + 248);
        v14 -= 248;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xEF7BDEF7BDEF7BDFLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x108421084210842)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xEF7BDEF7BDEF7BDFLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x84210842108421)
      v11 = 0x108421084210842;
    else
      v11 = v9;
    v21 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OZSimStateElement>>(v4, v11);
    else
      v12 = 0;
    v15 = (OZSimStateElement *)&v12[248 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[248 * v11];
    v16 = 248 * a2;
    v17 = (OZSimStateElement *)((char *)v15 + 248 * a2);
    do
    {
      OZSimStateElement::OZSimStateElement(v15);
      v15 = (OZSimStateElement *)((char *)v15 + 248);
      v16 -= 248;
    }
    while (v16);
    v19 = v17;
    std::vector<OZSimStateElement>::__swap_out_circular_buffer(a1, v18);
    std::__split_buffer<OZSimStateElement>::~__split_buffer((uint64_t)v18);
  }
}

void sub_1B2DF1D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OZSimStateElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OZSimStateElement>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZSimStateElement>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OZSimStateElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(248 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZSimStateElement>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  OZSimStateElement *v12;

  v10 = 0;
  v11 = a7 - 248;
  while (a3 + v10 != a5)
  {
    v12 = (OZSimStateElement *)(v11 + v10);
    v10 -= 248;
    OZSimStateElement::OZSimStateElement(v12, (const OZSimStateElement *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<OZSimStateElement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 248;
    OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(i - 248));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<CMTime,OZSimStateArray *>,std::__map_value_compare<CMTime,std::__value_type<CMTime,OZSimStateArray *>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,OZSimStateArray *>>>::__emplace_unique_key_args<CMTime,std::pair<CMTime const,OZSimStateArray *>>(uint64_t **a1, CMTime *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>((uint64_t)a1, &v10, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

void OZMetalGradientRadial::OZMetalGradientRadial(OZMetalGradientRadial *this, OZChannelGradient *a2, CGColorSpace *a3, CGColorSpace *a4)
{
  int v4;

  v4 = (int)a3;
  *((_QWORD *)this + 37) = &off_1E65EB048;
  *((_QWORD *)this + 38) = 0;
  *((_BYTE *)this + 312) = 1;
  OZGradient::OZGradient(this, (OZChannelGradient *)off_1E65859E0, (uint64_t)a2, a3, (uint64_t)a4);
  *(_QWORD *)this = &off_1E6585970;
  *((_QWORD *)this + 37) = &unk_1E65859C0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = v4;
  *((_WORD *)this + 118) = 0;
  PCColor::PCColor((PCColor *)((char *)this + 240));
}

void sub_1B2DF209C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(v2, *(_QWORD **)(v1 + 216));
  OZGradient::~OZGradient((OZGradient *)v1, (uint64_t *)off_1E65859E0);
  *(_QWORD *)(v1 + 296) = v3 + 16;
  *(_BYTE *)(v1 + 312) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 304));
  _Unwind_Resume(a1);
}

void OZMetalGradientRadial::~OZMetalGradientRadial(CGColorSpace **this, _QWORD *a2)
{
  CGColorSpace *v4;

  v4 = (CGColorSpace *)*a2;
  *this = (CGColorSpace *)*a2;
  *(CGColorSpace **)((char *)this + *((_QWORD *)v4 - 3)) = (CGColorSpace *)a2[5];
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 36);
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy((uint64_t)(this + 26), this[27]);
  OZGradient::~OZGradient((OZGradient *)this, a2 + 1);
}

void OZMetalGradientRadial::~OZMetalGradientRadial(CGColorSpace **this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 296) = &off_1E65EB048;
  *(_BYTE *)(v1 + 312) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 304));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 296) = &off_1E65EB048;
  *(_BYTE *)(v1 + 312) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 304));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZMetalGradientRadial::~OZMetalGradientRadial(OZMetalGradientRadial *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 296) = &off_1E65EB048;
  *(_BYTE *)(v1 + 312) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 304));
}

{
  OZMetalGradientRadial::~OZMetalGradientRadial((CGColorSpace **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void OZMetalGradientRadial::getHash(OZMetalGradientRadial *this, CMTime *a2)
{
  char *v2;
  int *v3;
  int *v4;
  CMTime *v5;
  int8x8_t *Hash;
  int8x8_t v7[521];

  v2 = (char *)MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v7[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  OZGradient::getHash((OZGradient *)v2, v5);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v7);
  PCHashWriteStream::writeValue(v7, v2[236]);
  PCHashWriteStream::writeValue(v7, v2[237]);
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=(v4, (int *)Hash);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v7);
}

void sub_1B2DF22D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t OZMetalGradientRadial::update(OZMetalGradientRadial *this, CMTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  float *v12;
  CGColorSpace *UserTag;
  _QWORD *v14;
  _QWORD *v15;
  CMTime v17;

  v17 = *a2;
  v3 = OZGradient::update(this, &v17);
  if ((_DWORD)v3)
  {
    if (*((_BYTE *)this + 236))
    {
      v4 = *((_QWORD *)this + 1);
      v5 = ((double)*(int *)(v4 + 12) * 0.25);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 24);
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *(_QWORD *)v6 = _D0;
          *(_DWORD *)(v6 + 8) = 1065353216;
          v6 += 16;
          --v5;
        }
        while (v5);
      }
    }
    if (*((_BYTE *)this + 237))
    {
      v12 = (float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24)
                    + 4 * (4 * ((double)*(int *)(*((_QWORD *)this + 1) + 12) * 0.25) - 4));
      UserTag = (CGColorSpace *)HGRenderJob::GetUserTag((HGRenderJob *)this);
      PCColor::getRGBA((PCColor *)((char *)this + 240), v12, v12 + 1, v12 + 2, v12 + 3, UserTag);
    }
    v15 = (_QWORD *)*((_QWORD *)this + 27);
    v14 = (_QWORD *)((char *)this + 216);
    std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy((uint64_t)(v14 - 1), v15);
    *(v14 - 1) = v14;
    *v14 = 0;
    v14[1] = 0;
  }
  return v3;
}

_QWORD *OZMetalGradientRadial::getFragmentProgramText(OZMetalGradientRadial *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(OZMetalGradientRadial::getFragmentProgramText(void)const::program, "\n        fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n                                          const constant float4* hg_Params [[ buffer(0) ]],\n                                          texture2d< float > hg_Texture0 [[ texture(0) ]])\n        {\n            // Enforce clamp_to_zero lookup with local sampler.\n            //  (see setTransparentBeyondEdge() in GL impl, assumed true in Metal impl)\n            sampler s(coord::normalized,\n                      address::clamp_to_zero,\n                      filter::linear);\n"
      "            \n"
      "            FragmentOut out;\n"
      "            float2 t = frag._texCoord0.xy;\n"
      "            t.x = sqrt(dot(t, t));\n"
      "            t.y = 0.5;\n"
      "            out.color0 = hg_Texture0.sample(s, t) * hg_Params[0];\n"
      "            return out;\n"
      "        }\n"
      "    ");
    __cxa_atexit(MEMORY[0x1E0DE44D0], OZMetalGradientRadial::getFragmentProgramText(void)const::program, &dword_1B2737000);
  }
  return OZMetalGradientRadial::getFragmentProgramText(void)const::program;
}

void sub_1B2DF2490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

HGMetalContext *OZMetalGradientRadial::getTexture@<X0>(OZMetalGradientRadial *this@<X0>, HGMetalContext *a2@<X1>, HGMetalContext **a3@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  HGBitmap *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HGMetalContext *v17;
  uint64_t *v18;
  HGMetalContext *v19;
  HGMetalContext *result;
  unint64_t v21;
  unint64_t *v22;
  HGRect v23;

  v6 = *(_QWORD *)(PCICCTransferFunctionLUT::getLUTEnd(a2) + 24);
  v21 = v6;
  v8 = (uint64_t **)((char *)this + 216);
  v7 = (_QWORD *)*((_QWORD *)this + 27);
  if (!v7)
    goto LABEL_12;
  v9 = (uint64_t **)((char *)this + 216);
  do
  {
    v10 = v7[4];
    v11 = v10 >= v6;
    if (v10 >= v6)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (v11)
      v9 = (uint64_t **)v7;
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != v8 && v6 >= (unint64_t)v9[4])
  {
    result = (HGMetalContext *)v9[5];
    *a3 = result;
    if (result)
      return (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(_QWORD *)result + 16))(result);
  }
  else
  {
LABEL_12:
    v13 = (HGBitmap *)HGRectMake4i(0, 0, *((_DWORD *)this + 58), 1u);
    v15 = v14;
    v16 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
    v17 = (HGMetalContext *)HGObject::operator new(0x80uLL);
    HGBitmap::HGBitmap((uint64_t)v17, (uint64_t)v13, v15, 28, v16);
    *(_QWORD *)&v23.var0 = v15;
    *(_QWORD *)&v23.var2 = 0;
    HGMetalTexture::createFromBitmap(a2, v17, v13, v23, 1, a3);
    v22 = &v21;
    v18 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>(v8 - 1, &v21, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22);
    v19 = (HGMetalContext *)v18[5];
    result = *a3;
    if (v19 != *a3)
    {
      if (v19)
      {
        (*(void (**)(HGMetalContext *))(*(_QWORD *)v19 + 24))(v19);
        result = *a3;
      }
      v18[5] = (uint64_t)result;
      if (result)
        result = (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(_QWORD *)result + 16))(result);
    }
    if (v17)
      return (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(_QWORD *)v17 + 24))(v17);
  }
  return result;
}

void sub_1B2DF264C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

uint64_t OZShaderManager::getInstance(OZShaderManager *this)
{
  if (OZShaderManager::getInstance(void)::once != -1)
    dispatch_once(&OZShaderManager::getInstance(void)::once, &__block_literal_global_72);
  return OZShaderManager::_instance;
}

void ___ZN15OZShaderManager11getInstanceEv_block_invoke()
{
  uint64_t v0;

  v0 = operator new();
  PCSingleton::PCSingleton((PCSingleton *)v0, 0);
  *(_QWORD *)v0 = &off_1E6585B50;
  *(_DWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v0 + 24;
  OZShaderManager::_instance = v0;
}

void sub_1B2DF27A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40C3D8C859);
  _Unwind_Resume(a1);
}

void OZShaderManager::~OZShaderManager(PCSpinLock *this)
{
  *(_QWORD *)&this->_lock._os_unfair_lock_opaque = &off_1E6585B50;
  OZShaderManager::purgeAll(&this->_lock);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[4], *(_QWORD **)&this[6]._lock._os_unfair_lock_opaque);
  PCSpinLock::~PCSpinLock(this + 2);
  PCSingleton::~PCSingleton((PCSingleton *)this);
}

{
  OZShaderManager::~OZShaderManager(this);
  JUMPOUT(0x1B5E29170);
}

void OZShaderManager::purgeAll(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  BOOL v8;

  v2 = this + 2;
  PCSpinLock::lock(this + 2);
  v3 = *(os_unfair_lock_s **)&this[4]._os_unfair_lock_opaque;
  v4 = this + 6;
  if (v3 != &this[6])
  {
    do
    {
      v5 = *(_QWORD *)&v3[10]._os_unfair_lock_opaque;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = *(os_unfair_lock_s **)&v3[2]._os_unfair_lock_opaque;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(os_unfair_lock_s **)&v6->_os_unfair_lock_opaque;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = *(os_unfair_lock_s **)&v3[4]._os_unfair_lock_opaque;
          v8 = *(_QWORD *)&v7->_os_unfair_lock_opaque == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[4], *(_QWORD **)&this[6]._os_unfair_lock_opaque);
  *(_QWORD *)&this[6]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&this[8]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&this[4]._os_unfair_lock_opaque = v4;
  PCSpinLock::unlock(v2);
}

void OZShaderManager::addShader(os_unfair_lock_s *a1, const char *a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  uint64_t **v6;
  uint64_t v7;
  const char *v8;
  const char **v9;

  v5 = a1 + 2;
  v8 = a2;
  PCSpinLock::lock(a1 + 2);
  v6 = (uint64_t **)&a1[4];
  if (std::__tree<std::__value_type<char const*,PGShader *>,std::__map_value_compare<char const*,std::__value_type<char const*,PGShader *>,ltstr,true>,std::allocator<std::__value_type<char const*,PGShader *>>>::__count_unique<char const*>((uint64_t)v6, &v8))
  {
    v9 = &v8;
    v7 = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9)[5];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v9 = &v8;
  std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9)[5] = a3;
  PCSpinLock::unlock(v5);
}

void sub_1B2DF29AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZShaderManager::getShader(os_unfair_lock_s *this, const char *a2)
{
  os_unfair_lock_s *v3;
  uint64_t **v4;
  uint64_t v5;
  const char *v7;
  const char **v8;

  v3 = this + 2;
  v7 = a2;
  PCSpinLock::lock(this + 2);
  v4 = (uint64_t **)&this[4];
  if (std::__tree<std::__value_type<char const*,PGShader *>,std::__map_value_compare<char const*,std::__value_type<char const*,PGShader *>,ltstr,true>,std::allocator<std::__value_type<char const*,PGShader *>>>::__count_unique<char const*>((uint64_t)v4, &v7))
  {
    v8 = &v7;
    v5 = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, (uint64_t **)&v8)[5];
  }
  else
  {
    v5 = 0;
  }
  PCSpinLock::unlock(v3);
  return v5;
}

void sub_1B2DF2A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<char const*,PGShader *>,std::__map_value_compare<char const*,std::__value_type<char const*,PGShader *>,ltstr,true>,std::allocator<std::__value_type<char const*,PGShader *>>>::__count_unique<char const*>(uint64_t a1, const char **a2)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = *a2;
    v4 = 1;
    do
    {
      v5 = (const char *)v2[4];
      if ((strcmp(v3, v5) & 0x80000000) == 0)
      {
        if ((strcmp(v5, v3) & 0x80000000) == 0)
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

void OZARAnchorElement::OZARAnchorElement(OZARAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3, a4);
  *(_QWORD *)v4 = off_1E6585B98;
  *(_QWORD *)(v4 + 16) = &unk_1E65864D0;
  *(_QWORD *)(v4 + 48) = &unk_1E6586728;
  *(_QWORD *)(v4 + 6528) = &unk_1E6586780;
  *(_OWORD *)(v4 + 24408) = 0u;
}

void OZARAnchorElement::OZARAnchorElement(OZARAnchorElement *this, const OZARAnchorElement *a2, uint64_t a3)
{
  uint64_t v4;

  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3);
  *(_QWORD *)v4 = off_1E6585B98;
  *(_QWORD *)(v4 + 16) = &unk_1E65864D0;
  *(_QWORD *)(v4 + 48) = &unk_1E6586728;
  *(_OWORD *)(v4 + 24408) = 0u;
  *(_QWORD *)(v4 + 6528) = &unk_1E6586780;
  *(_OWORD *)(v4 + 24408) = *(_OWORD *)((char *)a2 + 24408);
}

uint64_t OZARAnchorElement::getIconName(OZARAnchorElement *this)
{
  return (*(uint64_t (**)(OZARAnchorElement *))(*(_QWORD *)this + 24))(this);
}

void OZARAnchorElement::getIconNameBW(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("M_LayersList_ObjectIconGrey-3DObject"));
}

uint64_t OZARAnchorElement::getIconID(OZARAnchorElement *this)
{
  return 14;
}

void OZARAnchorElement::description(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("3D Scene Element Short Desc"));
}

PCString *OZARAnchorElement::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene Element Short Desc");
}

uint64_t `non-virtual thunk to'OZARAnchorElement::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OZ3DEngineSceneElement::calcStaticHash(a1 - 16, a2, a3);
}

uint64_t OZTransformNode::calcHashForState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, a2, a3, a4, 1);
}

uint64_t OZSceneNode::isSimulationGroup(OZSceneNode *this)
{
  return (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 952))(this);
}

uint64_t `non-virtual thunk to'OZTransformNode::calcHashForState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 16) + 536))(a1 - 16, a2, a3, a4, 1);
}

void sub_1B2DF2D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2DF2DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

OZLocking **OZFxPlugLockSentinel::OZFxPlugLockSentinel(OZLocking **a1, uint64_t a2)
{
  OZLocking *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;

  v3 = *(OZLocking **)a2;
  v4 = *(unint64_t **)(a2 + 8);
  *a1 = *(OZLocking **)a2;
  a1[1] = (OZLocking *)v4;
  if (v4)
  {
    v5 = v4 + 1;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = *a1;
  }
  OZLocking::acquireObjectReadLock(v3);
  return a1;
}

void sub_1B2DF2E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void OZFxPlugLockSentinel::~OZFxPlugLockSentinel(OZLocking **this)
{
  OZLocking::releaseObjectReadLock(*this);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;
  uint64_t v11;
  __int128 v12;

  Instance = (OZFactory *)OZChanRotoshapeRefWithPicker_Factory::getInstance(this);
  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, Instance, a2, a3, a4, a5);
  *(_QWORD *)this = &off_1E6586870;
  *((_QWORD *)this + 2) = &unk_1E6586C00;
  v12 = xmmword_1B355CCA0;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID(v11, (__n128 *)&v12);
}

void sub_1B2DF2F24(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanRotoshapeRefWithPicker_Factory::getInstance(OZChanRotoshapeRefWithPicker_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChanRotoshapeRefWithPicker_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChanRotoshapeRefWithPicker_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanRotoshapeRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanRotoshapeRefWithPicker_Factory::_instance;
}

void OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;
  __int128 v5;

  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, a2, a3, a4);
  *v4 = &off_1E6586870;
  v4[2] = &unk_1E6586C00;
  v5 = xmmword_1B355CCA0;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)v4, (__n128 *)&v5);
}

void sub_1B2DF2FEC(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this, const OZChanRotoshapeRefWithPicker *a2, OZChannelFolder *a3)
{
  _QWORD *v3;
  __int128 v4;

  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, a2, a3);
  *v3 = &off_1E6586870;
  v3[2] = &unk_1E6586C00;
  v4 = xmmword_1B355CCA0;
  OZChanObjectRefWithPicker::addAcceptedFactoryUUID((uint64_t)v3, (__n128 *)&v4);
}

void sub_1B2DF3054(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker *v1;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

OZChanRotoshapeRefWithPicker *OZChanRotoshapeRefWithPicker::clone(OZChanRotoshapeRefWithPicker *this)
{
  OZChanRotoshapeRefWithPicker *v2;

  v2 = (OZChanRotoshapeRefWithPicker *)operator new();
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(v2, this, 0);
  return v2;
}

void sub_1B2DF30B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker::~OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZChanRotoshapeRefWithPicker::~OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanRotoshapeRefWithPicker *)((char *)this - 16));
}

{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanRotoshapeRefWithPicker *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZChanRotoshapeRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChanRotoshapeRefWithPicker_Factory *v0;

  v0 = (OZChanRotoshapeRefWithPicker_Factory *)operator new();
  OZChanRotoshapeRefWithPicker_Factory::OZChanRotoshapeRefWithPicker_Factory(v0);
  OZChanRotoshapeRefWithPicker_Factory::_instance = (uint64_t)v0;
}

void sub_1B2DF3174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker_Factory::OZChanRotoshapeRefWithPicker_Factory(OZChanRotoshapeRefWithPicker_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555760;
  v4 = xmmword_1B355CCB0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6586C88;
  *((_QWORD *)this + 16) = &unk_1E6586D58;
}

void sub_1B2DF3214(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChanRotoshapeRefWithPicker *OZChanRotoshapeRefWithPicker_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChanRotoshapeRefWithPicker *v6;

  v6 = (OZChanRotoshapeRefWithPicker *)operator new();
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(v6, this, a2, a3);
  return v6;
}

void sub_1B2DF3284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChanRotoshapeRefWithPicker *OZChanRotoshapeRefWithPicker_Factory::createCopy(OZChanRotoshapeRefWithPicker_Factory *this, OZFactoryBase *a2)
{
  OZChanRotoshapeRefWithPicker *v3;
  const OZChanRotoshapeRefWithPicker *v4;

  v3 = (OZChanRotoshapeRefWithPicker *)operator new();
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2DF3310(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

OZChanRotoshapeRefWithPicker *OZChanRotoshapeRefWithPicker_Factory::createChannelCopy(OZChanRotoshapeRefWithPicker_Factory *this, OZChannelBase *a2)
{
  OZChanRotoshapeRefWithPicker *v3;
  const OZChanRotoshapeRefWithPicker *v4;

  v3 = (OZChanRotoshapeRefWithPicker *)operator new();
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(v3, v4, 0);
  return v3;
}

void sub_1B2DF339C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::OZShapeBehavior(OZShapeBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;

  OZBehavior::OZBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E6586DB0;
  *(_QWORD *)(v5 + 16) = &unk_1E6587118;
  *(_QWORD *)(v5 + 48) = &unk_1E6587370;
  *(_QWORD *)(v5 + 336) = &unk_1E65873C8;
  *(_QWORD *)(v5 + 344) = 0;
  *(_QWORD *)(v5 + 352) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  PCMutex::PCMutex((PCMutex *)(v5 + 368));
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 59) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 496));
  *((_QWORD *)this + 75) = (char *)this + 600;
  *((_QWORD *)this + 76) = (char *)this + 600;
  *((_QWORD *)this + 77) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 624));
  PCWorkingColorVector::PCWorkingColorVector((OZShapeBehavior *)((char *)this + 728));
  *((_BYTE *)this + 464) = 0;
}

void sub_1B2DF3474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  OZBehavior *v10;
  PCMutex *v11;
  std::mutex *v12;
  std::mutex *v13;
  _QWORD *v14;
  std::mutex *v15;
  void *v17;
  void *v18;

  v15 = v12;
  PCSharedMutex::~PCSharedMutex(v15);
  std::__list_imp<unsigned int>::clear(v14);
  PCSharedMutex::~PCSharedMutex(v13);
  a10 = (_QWORD *)((char *)v10 + 472);
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v17 = (void *)*((_QWORD *)v10 + 55);
  if (v17)
  {
    *((_QWORD *)v10 + 56) = v17;
    operator delete(v17);
  }
  PCMutex::~PCMutex(v11);
  v18 = (void *)*((_QWORD *)v10 + 43);
  if (v18)
    operator delete(v18);
  OZBehavior::~OZBehavior(v10);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::OZShapeBehavior(OZShapeBehavior *this, OZShapeBehavior *a2, char a3)
{
  uint64_t v5;
  void **v6;

  OZBehavior::OZBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E6586DB0;
  *(_QWORD *)(v5 + 16) = &unk_1E6587118;
  *(_QWORD *)(v5 + 48) = &unk_1E6587370;
  v6 = (void **)(v5 + 344);
  *(_QWORD *)(v5 + 336) = &unk_1E65873C8;
  *(_QWORD *)(v5 + 344) = 0;
  *(_QWORD *)(v5 + 352) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  PCMutex::PCMutex((PCMutex *)(v5 + 368));
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 59) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 496));
  *((_QWORD *)this + 75) = (char *)this + 600;
  *((_QWORD *)this + 76) = (char *)this + 600;
  *((_QWORD *)this + 77) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 624));
  PCWorkingColorVector::PCWorkingColorVector((OZShapeBehavior *)((char *)this + 728));
  std::vector<BOOL>::operator=(v6, (uint64_t)a2 + 344);
  *((_BYTE *)this + 464) = 0;
  (*(void (**)(OZShapeBehavior *))(*(_QWORD *)this + 784))(this);
}

void sub_1B2DF35DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  PCMutex *v12;
  std::mutex *v13;
  _QWORD *v14;
  void *v16;

  std::__list_imp<unsigned int>::clear(v14);
  PCSharedMutex::~PCSharedMutex(v13);
  a10 = (void **)(v10 + 472);
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(void **)(v10 + 440);
  if (v16)
  {
    *(_QWORD *)(v10 + 448) = v16;
    operator delete(v16);
  }
  PCMutex::~PCMutex(v12);
  if (*v11)
    operator delete(*v11);
  OZBehavior::~OZBehavior((OZBehavior *)v10);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::~OZShapeBehavior(OZShapeBehavior *this)
{
  uint64_t Scene;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E6586DB0;
  *((_QWORD *)this + 2) = &unk_1E6587118;
  *((_QWORD *)this + 6) = &unk_1E6587370;
  *((_QWORD *)this + 42) = &unk_1E65873C8;
  if (*((_BYTE *)this + 464))
  {
    Scene = OZBehavior::getScene(this);
    if (Scene)
    {
      OZDocument::removeCPPObserver(*(_QWORD *)(Scene + 1584));
      *((_BYTE *)this + 464) = 0;
    }
  }
  (*(void (**)(OZShapeBehavior *))(*(_QWORD *)this + 784))(this);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 624));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 75);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 496));
  v5 = (void **)((char *)this + 472);
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = (void *)*((_QWORD *)this + 55);
  if (v3)
  {
    *((_QWORD *)this + 56) = v3;
    operator delete(v3);
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 368));
  v4 = (void *)*((_QWORD *)this + 43);
  if (v4)
    operator delete(v4);
  OZBehavior::~OZBehavior(this);
}

{
  OZShapeBehavior::~OZShapeBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZShapeBehavior::~OZShapeBehavior(OZShapeBehavior *this)
{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 16));
}

{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 48));
}

{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 336));
}

{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZShapeBehavior::operator=(void **a1, const void *a2)
{
  void *v4;

  OZBehavior::operator=((uint64_t)a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  std::vector<BOOL>::operator=(a1 + 43, (uint64_t)v4 + 344);
  return (*((uint64_t (**)(void **))*a1 + 98))(a1);
}

uint64_t OZShapeBehavior::didAddToNode(OZShapeBehavior *this, OZSceneNode *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *((_QWORD *)this + 41) = a2;
  (*(void (**)(OZShapeBehavior *))(*(_QWORD *)this + 696))(this);
  v3 = 736;
  if (!*((_QWORD *)this + 44))
    v3 = 728;
  (*(void (**)(OZShapeBehavior *))(*(_QWORD *)this + v3))(this);
  v4 = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v4)
  OZRotoshape::setDirty((OZRotoshape *)v4, 1, 1);
  if (!*((_BYTE *)this + 464) && (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v5 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::addCPPObserver(*(_QWORD *)(v5 + 1584), (uint64_t)this + 336, 1000);
    *((_BYTE *)this + 464) = 1;
  }
  return (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 784))(this);
}

uint64_t *OZShapeBehavior::didAddSceneNodeToScene(OZShapeBehavior *this, OZScene *a2)
{
  uint64_t *result;

  result = (uint64_t *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 744))(this);
  if (!*((_BYTE *)this + 464))
  {
    result = OZDocument::addCPPObserver(*((_QWORD *)a2 + 198), (uint64_t)this + 336, 1000);
    *((_BYTE *)this + 464) = 1;
  }
  return result;
}

void *OZShapeBehavior::enable(OZShapeBehavior *this, uint64_t a2)
{
  void *result;
  void *v4;

  OZObjectManipulator::enable((OZShapeBehavior *)((char *)this + 16), a2);
  result = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      v4 = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
      if (v4)
      return (void *)OZRotoshape::setDirty((OZRotoshape *)v4, 1, 1);
    }
  }
  return result;
}

void *`non-virtual thunk to'OZShapeBehavior::enable(OZShapeBehavior *this, uint64_t a2)
{
  return OZShapeBehavior::enable((OZShapeBehavior *)((char *)this - 16), a2);
}

void *OZShapeBehavior::disable(OZShapeBehavior *this, uint64_t a2)
{
  void *result;
  void *v4;

  OZObjectManipulator::disable((OZShapeBehavior *)((char *)this + 16), a2);
  result = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      v4 = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
      if (v4)
      return (void *)OZRotoshape::setDirty((OZRotoshape *)v4, 1, 1);
    }
  }
  return result;
}

void *`non-virtual thunk to'OZShapeBehavior::disable(OZShapeBehavior *this, uint64_t a2)
{
  return OZShapeBehavior::disable((OZShapeBehavior *)((char *)this - 16), a2);
}

uint64_t OZShapeBehavior::rebuildCurveNodes(OZShapeBehavior *this)
{
  char *v2;

  v2 = (char *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v2)
  OZShapeBehavior::removeNodesFromChan(this, (OZChannelBase *)(v2 + 19336));
  return (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 696))(this);
}

void OZShapeBehavior::removeNodesFromChan(OZShapeBehavior *this, OZChannelBase *a2)
{
  OZChannel *v3;
  OZChannelBase ***v4;
  OZChannelBase **i;
  OZChannelBase *v6;

  if ((a2->var7 & 0x1000) != 0)
  {
    if (v4)
    {
      for (i = *v4; i != v4[1]; ++i)
      {
        v6 = *i;
        OZShapeBehavior::removeNodesFromChan(this, v6);
      }
    }
  }
  else
  {
    OZShapeBehavior::removeNodesFromSingleChan(this, v3);
  }
}

_QWORD *OZShapeBehavior::setupCurveNodes(OZShapeBehavior *this)
{
  _QWORD *result;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  OZChannelFolder *v8;
  const void *Descendant;
  OZChannel *v10;
  OZShapeBehaviorCurveNode *v11;
  OZChannelFolder *v12;
  const void *v13;
  OZChannel *v14;
  OZShapeBehaviorCurveNode *v15;
  OZChannelFolder *v16;
  const void *v17;
  OZChannel *v18;
  OZShapeBehaviorCurveNode *v19;

  result = (_QWORD *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (result)
  {
    if (result)
    {
      v3 = (const void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
      v4 = (_QWORD *)result[2431];
      if (v4)
      {
        if (((v4[1] - *v4) & 0x7FFFFFFF8) != 0)
        {
          v5 = result;
          v6 = 0;
LABEL_6:
          for (i = (v4[1] - *v4) >> 3; v6 < (int)i; LODWORD(i) = 0)
          {
            v8 = *(OZChannelFolder **)(*v4 + 8 * v6);
            if (v8)
            Descendant = (const void *)OZChannelFolder::getDescendant(v8, 2);
            if (Descendant)
            else
              v10 = 0;
            v11 = (OZShapeBehaviorCurveNode *)operator new();
            OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v11, this, v10);
            OZChannel::appendCurveProcessingNode(v10, v11);
            v12 = *(OZChannelFolder **)(*(_QWORD *)v5[2431] + 8 * v6);
            if (v12)
            v13 = (const void *)OZChannelFolder::getDescendant(v12, 4);
            if (v13)
            else
              v14 = 0;
            v15 = (OZShapeBehaviorCurveNode *)operator new();
            OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v15, this, v14);
            OZChannel::appendCurveProcessingNode(v14, v15);
            v16 = *(OZChannelFolder **)(*(_QWORD *)v5[2431] + 8 * v6);
            if (v16)
            v17 = (const void *)OZChannelFolder::getDescendant(v16, 5);
            if (v17)
            else
              v18 = 0;
            v19 = (OZShapeBehaviorCurveNode *)operator new();
            OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v19, this, v18);
            result = (_QWORD *)OZChannel::appendCurveProcessingNode(v18, v19);
            ++v6;
            v4 = (_QWORD *)v5[2431];
            if (v4)
              goto LABEL_6;
          }
        }
      }
    }
  }
  return result;
}

void sub_1B2DF3E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

uint64_t OZShapeBehavior::setupCurveNodesForVertex(OZShapeBehavior *this, OZChannelFolder *a2, OZChannelFolder *a3)
{
  const void *Descendant;
  OZChannel *v7;
  OZShapeBehaviorCurveNode *v8;
  const void *v9;
  OZChannel *v10;
  OZShapeBehaviorCurveNode *v11;
  const void *v12;
  OZChannel *v13;
  OZShapeBehaviorCurveNode *v14;
  const void *v15;
  OZChannel *v16;
  OZShapeBehaviorCurveNode *v17;
  const void *v18;
  OZChannel *v19;
  OZShapeBehaviorCurveNode *v20;
  const void *v21;
  OZChannel *v22;
  OZShapeBehaviorCurveNode *v23;

  Descendant = (const void *)OZChannelFolder::getDescendant(a2, 2);
  if (Descendant)
  else
    v7 = 0;
  v8 = (OZShapeBehaviorCurveNode *)operator new();
  OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v8, this, v7);
  OZChannel::appendCurveProcessingNode(v7, v8);
  v9 = (const void *)OZChannelFolder::getDescendant(a2, 4);
  if (v9)
  else
    v10 = 0;
  v11 = (OZShapeBehaviorCurveNode *)operator new();
  OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v11, this, v10);
  OZChannel::appendCurveProcessingNode(v10, v11);
  v12 = (const void *)OZChannelFolder::getDescendant(a2, 5);
  if (v12)
  else
    v13 = 0;
  v14 = (OZShapeBehaviorCurveNode *)operator new();
  OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v14, this, v13);
  OZChannel::appendCurveProcessingNode(v13, v14);
  v15 = (const void *)OZChannelFolder::getDescendant(a3, 2);
  if (v15)
  else
    v16 = 0;
  v17 = (OZShapeBehaviorCurveNode *)operator new();
  OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v17, this, v16);
  OZChannel::appendCurveProcessingNode(v16, v17);
  v18 = (const void *)OZChannelFolder::getDescendant(a3, 4);
  if (v18)
  else
    v19 = 0;
  v20 = (OZShapeBehaviorCurveNode *)operator new();
  OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v20, this, v19);
  OZChannel::appendCurveProcessingNode(v19, v20);
  v21 = (const void *)OZChannelFolder::getDescendant(a3, 5);
  if (v21)
  else
    v22 = 0;
  v23 = (OZShapeBehaviorCurveNode *)operator new();
  OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(v23, this, v22);
  return OZChannel::appendCurveProcessingNode(v22, v23);
}

void sub_1B2DF40D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::updateAffectedIDs(OZShapeBehavior *this)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  char *v7;
  char v8;

  v2 = (const void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v3)
  {
    v4 = (v3[1] - *v3) >> 3;
    if ((int)v4 >= 0)
      v5 = (v3[1] - *v3) >> 3;
    else
      v5 = v4 + 1;
    *((_QWORD *)this + 44) = 0;
    if ((int)v4 >= 2)
    {
      v6 = v5 >> 1;
      v7 = (char *)this + 344;
      do
      {
        v8 = 1;
        std::vector<BOOL>::push_back((uint64_t)v7, &v8);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    *((_QWORD *)this + 44) = 0;
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void OZShapeBehavior::copyAffectedIDs(OZShapeBehavior *this)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v2 = (const void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v3)
  {
    v4 = (v3[1] - *v3) >> 3;
    v9 = 0;
    if ((int)v4 >= 2)
    {
      v5 = 0;
      v6 = ((int)v4 >> 1);
      do
      {
        if ((uint64_t)v5 >= *((int *)this + 88))
          v7 = 1;
        else
          v7 = (*(_QWORD *)(*((_QWORD *)this + 43) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1;
        std::vector<BOOL>::push_back((uint64_t)&__p, &v7);
        ++v5;
      }
      while (v6 != v5);
    }
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)this + 44) = 0;
  std::vector<BOOL>::operator=((void **)this + 43, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
}

void sub_1B2DF435C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZShapeBehavior::restoreAffectedIDs(OZShapeBehavior *this)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v2 = (const void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v3)
  {
    v4 = (v3[1] - *v3) >> 3;
    v9 = 0;
    if ((int)v4 >= 2)
    {
      v5 = 0;
      v6 = ((int)v4 >> 1);
      do
      {
        if ((uint64_t)v5 >= *((int *)this + 88))
          v7 = 0;
        else
          v7 = (*(_QWORD *)(*((_QWORD *)this + 43) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1;
        std::vector<BOOL>::push_back((uint64_t)&__p, &v7);
        ++v5;
      }
      while (v6 != v5);
    }
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)this + 44) = 0;
  std::vector<BOOL>::operator=((void **)this + 43, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
}

void sub_1B2DF447C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZShapeBehavior::didAddVertex(OZShapeBehavior *this, int a2)
{
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE v9[23];
  char v10;

  v3 = (unint64_t *)((char *)this + 344);
  if (*((_DWORD *)this + 88) >= a2)
  {
    v5 = *v3;
    if (a2)
    {
      if (a2 < 0)
        v6 = -(uint64_t)((63 - a2) >> 6);
      else
        v6 = a2 >> 6;
      v5 += 8 * v6;
      v7 = a2 & 0x3F;
      v10 = 1;
    }
    else
    {
      v10 = 1;
      v7 = 0;
    }
    std::vector<BOOL>::insert((uint64_t)v3, v5, v7, &v10, (uint64_t)v9);
  }
  else
  {
    v9[0] = 1;
    std::vector<BOOL>::push_back((uint64_t)v3, v9);
  }
  return (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 784))(this);
}

void std::vector<BOOL>::insert(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t *v21;
  char v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  char *v35;
  __int128 v36;
  char *v37;
  int v38;

  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (v10 >= v11 << 6)
  {
    v35 = 0;
    v36 = 0uLL;
    if ((uint64_t)(v10 + 1) < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v16 = v11 << 6;
    v17 = v11 << 7;
    v18 = (v10 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v17 > v18)
      v18 = v17;
    if (v16 <= 0x3FFFFFFFFFFFFFFELL)
      v19 = v18;
    else
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve(&v35, v19);
    v20 = *(unint64_t **)a1;
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 8) + 1;
    v37 = v35;
    v38 = 0;
    std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v20, 0, a2, a3, (uint64_t)&v37, (uint64_t)&v33);
    v21 = v33;
    *(_QWORD *)a5 = v33;
    v22 = v34;
    *(_DWORD *)(a5 + 8) = v34;
    v23 = *(_QWORD *)(a1 + 8);
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v23 >> 6));
    v25 = v23 & 0x3F;
    v37 = &v35[8 * ((unint64_t)v36 >> 6)];
    v38 = v36 & 0x3F;
    if (v38 == v25)
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    else
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    v28 = *(char **)a1;
    *(_QWORD *)a1 = v35;
    v35 = v28;
    v29 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v36;
    v36 = v29;
    if (v28)
      operator delete(v28);
  }
  else
  {
    v12 = *(unint64_t **)a1;
    v13 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v10 >> 6));
    v14 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    v15 = v10 & 0x3F;
    *(_QWORD *)(a1 + 8) = v10 + 1;
    v35 = (char *)&v12[(v10 + 1) >> 6];
    if ((((_BYTE)v10 + 1) & 0x3F) == (_DWORD)v14)
    {
      LODWORD(v36) = v14;
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    else
    {
      LODWORD(v36) = ((_BYTE)v10 + 1) & 0x3F;
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    v26 = 8 * (a2 - *(_QWORD *)a1) + a3;
    if (v26 < 0)
    {
      v30 = v26 - 63;
      if (v26 - 63 < 0)
        v30 = 8 * (a2 - *(_QWORD *)a1) + a3;
      v27 = v30 >> 6;
    }
    else
    {
      v27 = (unint64_t)v26 >> 6;
    }
    v21 = (uint64_t *)(*(_QWORD *)a1 + 8 * v27);
    v22 = v26 & 0x3F;
    *(_QWORD *)a5 = v21;
    *(_DWORD *)(a5 + 8) = v26 & 0x3F;
  }
  v31 = 1 << v22;
  if (*a4)
    v32 = *v21 | v31;
  else
    v32 = *v21 & ~v31;
  *v21 = v32;
}

void sub_1B2DF4798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZShapeBehavior::willRemoveVertex(OZShapeBehavior *this, int a2)
{
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE v16[16];
  unint64_t *v17;
  int v18;

  v3 = *((_QWORD *)this + 44);
  if ((int)v3 >= a2)
  {
    v4 = (unint64_t *)*((_QWORD *)this + 43);
    if (a2)
    {
      if (a2 < 0)
        v5 = -(uint64_t)((63 - a2) >> 6);
      else
        v5 = a2 >> 6;
      v6 = &v4[v5];
      v7 = a2 & 0x3F;
      v8 = v7 | (v5 << 6);
      v9 = v8 - 63;
      if (v8 < 63)
        v9 = v7 | (v5 << 6);
      v10 = v9 >> 6;
      v11 = v5 & 0x3FFFFFFFFFFFFFFLL;
      if (v8 < 0)
        v11 = v10;
      v12 = (v7 + 1) & 0x3F;
      v13 = (uint64_t)&v4[v3 >> 6];
      v14 = v3 & 0x3F;
      if ((_DWORD)v7 == v12)
      {
        v17 = &v4[v11];
        v18 = v7;
        std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>((unint64_t *)((char *)v6 + (((unint64_t)(v7 + 1) >> 3) & 8)), v12, v13, v14, (uint64_t)&v17, (uint64_t)v16);
LABEL_15:
        v3 = *((_QWORD *)this + 44);
        goto LABEL_16;
      }
      v17 = &v4[v11];
      v18 = v7;
      v4 = (unint64_t *)((char *)v6 + (((unint64_t)(v7 + 1) >> 3) & 8));
    }
    else
    {
      v13 = (uint64_t)&v4[v3 >> 6];
      v14 = v3 & 0x3F;
      v17 = (unint64_t *)*((_QWORD *)this + 43);
      v18 = 0;
      v12 = 1;
    }
    std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v4, v12, v13, v14, (uint64_t)&v17, (uint64_t)v16);
    goto LABEL_15;
  }
LABEL_16:
  *((_QWORD *)this + 44) = v3 - 1;
  return (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 784))(this);
}

uint64_t OZShapeBehavior::resetAffectedVertices(OZShapeBehavior *this)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  void *v7;

  if (*((_QWORD *)this + 44))
  {
    v1 = 0;
    v2 = *((_QWORD *)this + 43);
    v3 = 1;
    do
    {
      *(_QWORD *)(v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v1);
      v1 = v3;
      v4 = *((_QWORD *)this + 44);
      v5 = v4 >= v3;
      v6 = v4 == v3++;
    }
    while (!v6 && v5);
  }
  v7 = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v7)
  return OZRotoshape::setDirty((OZRotoshape *)v7, 1, 1);
}

uint64_t OZShapeBehavior::addAllAffectedVertices(OZShapeBehavior *this)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  void *v7;

  if (*((_QWORD *)this + 44))
  {
    v1 = 0;
    v2 = *((_QWORD *)this + 43);
    v3 = 1;
    do
    {
      *(_QWORD *)(v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
      v1 = v3;
      v4 = *((_QWORD *)this + 44);
      v5 = v4 >= v3;
      v6 = v4 == v3++;
    }
    while (!v6 && v5);
  }
  v7 = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v7)
  return OZRotoshape::setDirty((OZRotoshape *)v7, 1, 1);
}

BOOL OZShapeBehavior::canAddToSceneNode(OZShapeBehavior *this, OZSceneNode *lpsrc)
{
  return lpsrc
}

uint64_t OZShapeBehavior::didInsert(OZShapeBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  (*(void (**)(OZShapeBehavior *, OZSceneNode *))(*(_QWORD *)this + 96))(this, a2);
  return (*(uint64_t (**)(OZShapeBehavior *, OZBehavior *))(*(_QWORD *)this + 112))(this, a3);
}

uint64_t OZShapeBehavior::willRemove(OZShapeBehavior *this)
{
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t result;

  if (*((_BYTE *)this + 464) && (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this))
  {
    v2 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
    OZDocument::removeCPPObserver(*(_QWORD *)(v2 + 1584));
    *((_BYTE *)this + 464) = 0;
  }
  v3 = (char *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v3)
  OZShapeBehavior::removeNodesFromChan(this, (OZChannelBase *)(v3 + 19336));
  v4 = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v4)
  result = OZRotoshape::setDirty((OZRotoshape *)v4, 1, 1);
  *((_QWORD *)this + 41) = 0;
  return result;
}

uint64_t OZShapeBehavior::willRemoveSceneNodeFromScene(uint64_t this, OZScene *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 464))
  {
    v2 = this;
    this = (*(uint64_t (**)(uint64_t, OZScene *))(*(_QWORD *)this + 336))(this, a2);
    if (this)
    {
      this = OZDocument::removeCPPObserver(*(_QWORD *)(this + 1584));
      *(_BYTE *)(v2 + 464) = 0;
    }
  }
  return this;
}

void OZShapeBehavior::removeNodesFromSingleChan(OZShapeBehavior *this, OZChannel *a2)
{
  const void **v4;
  const void **v5;
  uint64_t v6;
  _QWORD *v7;
  OZShapeBehavior **v8;
  OZShapeBehavior **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *__p;
  const void **v16;

  OZChannel::enumerateCurveProcessingNodes(a2, &__p);
  v12 = &v12;
  v13 = &v12;
  v14 = 0;
  v4 = (const void **)__p;
  v5 = v16;
  if (__p != v16)
  {
    v6 = 0;
    v7 = &v12;
    do
    {
      if (*v4)
      {
        if (v8)
        {
          v9 = v8;
          if (v8[1] == this)
          {
            v10 = operator new(0x18uLL);
            v10[1] = &v12;
            v10[2] = v9;
            *v10 = v7;
            v7[1] = v10;
            ++v6;
            v7 = v10;
            v12 = v10;
            v14 = v6;
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
    if (&v12 != v13)
    {
      v11 = &v12;
      do
      {
        OZChannel::deleteCurveProcessingNode(a2, *(void **)(*v11 + 16));
        v11 = (_QWORD *)*v11;
      }
      while (v11 != v13);
    }
  }
  std::__list_imp<unsigned int>::clear(&v12);
  if (__p)
  {
    v16 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B2DF4C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__list_imp<unsigned int>::clear(&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZShapeBehavior::reorderCurveNode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  OZChannel *v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *__p;
  const void **v17;

  v7 = (OZChannel *)a2[2];
  OZChannel::removeCurveProcessingNode(v7, a2);
  OZChannel::enumerateCurveProcessingNodes(v7, &__p);
  v8 = (const void **)__p;
  v9 = v17;
  if (__p == v17)
  {
LABEL_13:
    OZChannel::appendCurveProcessingNode(v7, a2);
  }
  else
  {
    v10 = *a4;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(_QWORD *)(*(_QWORD *)(*a4 + 16) + 8)+ 8), (int32x4_t)xmmword_1B355CD10)))) & 1) != 0)
    {
      v11 = 0;
      while (1)
      {
        v12 = v11;
        v11 = (void *)*v8;
        if (*v8)
        {
          if (v13)
          {
            if (v10 == a3)
              break;
            v14 = v10;
            while (*(_QWORD *)(v14 + 16) != v13[1])
            {
              v14 = *(_QWORD *)(v14 + 8);
              if (v14 == a3)
                goto LABEL_15;
            }
            if (v14 == a3)
              break;
          }
        }
        if (++v8 == v9)
          goto LABEL_13;
      }
LABEL_15:
      OZChannel::insertCurveProcessingNode(v7, a2, v12);
    }
    else
    {
      v15 = *(void **)__p;
      if (*(_QWORD *)__p
      {
        v15 = 0;
      }
      OZChannel::insertCurveProcessingNode(v7, a2, v15);
    }
  }
  if (__p)
  {
    v17 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B2DF4E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZShapeBehavior::reorderSingleChan(uint64_t a1, OZChannel *this, uint64_t a3, uint64_t *a4)
{
  _QWORD **v7;
  _QWORD **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *__p;
  _QWORD **v18;

  OZChannel::enumerateCurveProcessingNodes(this, &__p);
  v14 = &v14;
  v15 = &v14;
  v16 = 0;
  v7 = (_QWORD **)__p;
  v8 = v18;
  if (__p != v18)
  {
    v9 = 0;
    v10 = &v14;
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v11)
        {
          v12 = v11;
          if (v11[1] == a1)
          {
            v11 = operator new(0x18uLL);
            v11[1] = &v14;
            v11[2] = v12;
            *v11 = v10;
            v10[1] = v11;
            ++v9;
            v10 = v11;
            v14 = v11;
            v16 = v9;
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
    if (&v14 != v15)
    {
      v13 = &v14;
      do
      {
        OZShapeBehavior::reorderCurveNode((uint64_t)v11, *(_QWORD **)(*v13 + 16), a3, a4);
        v13 = (_QWORD *)*v13;
      }
      while (v13 != v15);
    }
  }
  std::__list_imp<unsigned int>::clear(&v14);
  if (__p)
  {
    v18 = (_QWORD **)__p;
    operator delete(__p);
  }
}

void sub_1B2DF4FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__list_imp<unsigned int>::clear(&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZShapeBehavior::reorderChan(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t *a4)
{
  OZChannel *v7;
  uint64_t **v8;
  uint64_t *i;
  uint64_t v10;

  if ((a2[57] & 0x10) != 0)
  {
    if (v8)
    {
      for (i = *v8; i != v8[1]; ++i)
      {
        v10 = *i;
        OZShapeBehavior::reorderChan(a1, v10, a3, a4);
      }
    }
  }
  else
  {
    OZShapeBehavior::reorderSingleChan(a1, v7, a3, a4);
  }
}

void OZShapeBehavior::didReorder(OZShapeBehavior *this, OZBehavior *a2)
{
  const void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = (const void *)(*(uint64_t (**)(OZShapeBehavior *, OZBehavior *))(*(_QWORD *)this + 320))(this, a2);
  if (v3
  {
    v4 = (char *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
    if (v4)
    v5 = v4 + 200;
    if (!v4)
      v5 = 0;
    v6 = (uint64_t)(v5 + 1000);
    v7 = *((_QWORD *)v5 + 126);
    v8 = v6;
    if (v7 != v6)
    {
      v8 = v7;
      while (*(OZShapeBehavior **)(v8 + 16) != this)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
    v10 = *(_QWORD *)(v8 + 8);
    v9 = (_BYTE *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
    if (v9)
    OZShapeBehavior::reorderChan((uint64_t)this, v9 + 19336, v6, &v10);
  }
}

void OZShapeBehavior::willDeleteObject(OZShapeBehavior *this, OZObjectManipulator *a2)
{
  char *v4;
  OZObjectManipulator *v5;
  char *v6;

  v4 = (char *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v4)
  v5 = (OZObjectManipulator *)(v4 + 216);
  if (!v4)
    v5 = 0;
  if (v5 == a2)
  {
    v6 = (char *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
    if (v6)
    OZShapeBehavior::removeNodesFromChan(this, (OZChannelBase *)(v6 + 19336));
  }
}

uint64_t OZShapeBehavior::isVertexAffectedByBehavior(OZShapeBehavior *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 88) <= (signed int)a2)
    return 0;
  else
    return (*(_QWORD *)(*((_QWORD *)this + 43) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1;
}

uint64_t OZShapeBehavior::addAffectedVertex(uint64_t this, unsigned int a2)
{
  void *v2;

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(this + 352) > (signed int)a2)
      *(_QWORD *)(*(_QWORD *)(this + 344) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
    v2 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 320))(this);
    if (v2)
    return OZRotoshape::setDirty((OZRotoshape *)v2, 1, 1);
  }
  return this;
}

uint64_t OZShapeBehavior::removeAffectedVertex(uint64_t this, unsigned int a2)
{
  void *v2;

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(this + 352) > (signed int)a2)
      *(_QWORD *)(*(_QWORD *)(this + 344) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
    v2 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 320))(this);
    if (v2)
    return OZRotoshape::setDirty((OZRotoshape *)v2, 1, 1);
  }
  return this;
}

void OZShapeBehavior::didSetStartPoint(OZShapeBehavior *this, int a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v11[16];
  void *__p;
  unint64_t v13;
  char *v14;
  int v15;
  void *v16;
  int v17;

  v4 = (char *)this + 344;
  std::vector<BOOL>::vector(&__p, (uint64_t)this + 344);
  *((_QWORD *)this + 44) = 0;
  if (a2 < 0)
    v5 = -(uint64_t)((63 - a2) >> 6);
  else
    v5 = a2 >> 6;
  v6 = (char *)__p + 8 * v5;
  v7 = a2 & 0x3F;
  v8 = *((_QWORD *)this + 43);
  v16 = v6;
  v17 = v7;
  v14 = (char *)__p + 8 * (v13 >> 6);
  v15 = v13 & 0x3F;
  std::vector<BOOL>::__insert_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)v4, v8, 0, (uint64_t)&v16, (uint64_t)&v14, (v13 & 0x3F) - v7 + 8 * (v14 - v6), (uint64_t)v11);
  v9 = *((_QWORD *)this + 44);
  v10 = *((_QWORD *)this + 43) + 8 * (v9 >> 6);
  v16 = __p;
  v17 = 0;
  v14 = v6;
  v15 = v7;
  std::vector<BOOL>::__insert_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)v4, v10, v9 & 0x3F, (uint64_t)&v16, (uint64_t)&v14, v7 + 8 * (v6 - (_BYTE *)__p), (uint64_t)v11);
  if (__p)
    operator delete(__p);
}

void sub_1B2DF5474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZShapeBehavior::writeBody(OZShapeBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  int v10;
  _QWORD *v11;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZShapeBehaviorScope);
  if (*((_QWORD *)this + 44))
  {
    v10 = 0;
    v11 = (_QWORD *)*((_QWORD *)this + 43);
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 801);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, (*v11 >> v10) & 1);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v11 += v10 == 63;
      if (v10 == 63)
        v10 = 0;
      else
        ++v10;
    }
    while (v11 != (_QWORD *)(*((_QWORD *)this + 43) + 8 * (*((_QWORD *)this + 44) >> 6))
         || v10 != (*((_DWORD *)this + 88) & 0x3F));
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZBehavior::writeBody(this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'OZShapeBehavior::writeBody(OZShapeBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZShapeBehavior::writeBody((OZShapeBehavior *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZShapeBehavior::parseBegin(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZShapeBehaviorScope);
  *((_QWORD *)this + 44) = 0;
  return 1;
}

uint64_t `non-virtual thunk to'OZShapeBehavior::parseBegin(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseBegin((OZShapeBehavior *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZShapeBehaviorScope);
  *((_QWORD *)this + 38) = 0;
  return 1;
}

uint64_t OZShapeBehavior::parseEnd(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseEnd(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZShapeBehavior::parseEnd(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseEnd((OZShapeBehavior *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZShapeBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  char v6;

  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 801)
  {
    v6 = 0;
    (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, &v6);
    std::vector<BOOL>::push_back((uint64_t)(this + 43), &v6);
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZShapeBehavior::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZShapeBehavior::parseElement(this - 6, a2, a3);
  return 1;
}

uint64_t OZShapeBehavior::getCurveNodeForChannel(OZShapeBehavior *this, OZChannel *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  const void *v6;
  OZShapeBehavior **v7;
  uint64_t v8;
  char *v10;
  char *v11;

  OZChannel::enumerateCurveProcessingNodes(a2, &v10);
  v3 = v10;
  v4 = v11;
  if (v10 != v11)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(const void **)&v3[v5];
      if (v6)
      {
        if (v7)
        {
          if (v7[1] == this)
            break;
        }
      }
      v5 += 8;
      if (&v3[v5] == v4)
        goto LABEL_7;
    }
    if (v5)
    {
      v8 = *(_QWORD *)&v3[v5 - 8];
      if (!v3)
        return v8;
      goto LABEL_8;
    }
  }
LABEL_7:
  v8 = 0;
  if (v3)
LABEL_8:
    operator delete(v3);
  return v8;
}

uint64_t OZShapeBehavior::createGlobalCacheEntry(OZShapeBehavior *this, int a2, CMTime *a3)
{
  return 0;
}

uint64_t OZShapeBehavior::getGlobalCacheEntry(OZShapeBehavior *this, uint64_t a2, CMTime *a3)
{
  std::mutex *v6;
  char *v7;
  uint64_t i;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v21;
  CMTimeEpoch epoch;
  CMTime time2;
  CMTime time1;

  v6 = (std::mutex *)((char *)this + 624);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 624));
  v7 = (char *)this + 600;
  for (i = *((_QWORD *)this + 76); ; i = *(_QWORD *)(i + 8))
  {
    if ((char *)i == v7)
    {
      v11 = 1;
      goto LABEL_7;
    }
    v9 = *(_QWORD *)(i + 16);
    v10 = *(_OWORD *)(v9 + 8);
    time1.epoch = *(_QWORD *)(v9 + 24);
    *(_OWORD *)&time1.value = v10;
    time2 = *a3;
    if (!CMTimeCompare(&time1, &time2))
      break;
  }
  i = (*(uint64_t (**)(OZShapeBehavior *, _QWORD))(*(_QWORD *)this + 808))(this, *(_QWORD *)(i + 16));
  v11 = 0;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  if (v11)
  {
    v21 = *(_OWORD *)&a3->value;
    epoch = a3->epoch;
    v12 = (*(uint64_t (**)(OZShapeBehavior *, uint64_t, __int128 *))(*(_QWORD *)this + 800))(this, a2, &v21);
    if (v12)
    {
      PCSharedMutex::lock(v6);
      v13 = operator new(0x18uLL);
      v14 = (_QWORD *)*((_QWORD *)this + 76);
      *v13 = v7;
      v13[1] = v14;
      v13[2] = v12;
      *v14 = v13;
      *((_QWORD *)this + 76) = v13;
      v15 = *((_QWORD *)this + 77);
      *((_QWORD *)this + 77) = v15 + 1;
      if ((unint64_t)(v15 + 1) >= 6)
      {
        v16 = *(_QWORD *)v7;
        v17 = *(_QWORD *)(*(_QWORD *)v7 + 16);
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v16 = *((_QWORD *)this + 75);
          v15 = *((_QWORD *)this + 77) - 1;
        }
        *(_QWORD *)(v16 + 16) = 0;
        v18 = (uint64_t *)*((_QWORD *)this + 75);
        v19 = *v18;
        *(_QWORD *)(v19 + 8) = v18[1];
        *(_QWORD *)v18[1] = v19;
        *((_QWORD *)this + 77) = v15;
        operator delete(v18);
      }
      PCSharedMutex::unlock(v6);
    }
    return (*(uint64_t (**)(OZShapeBehavior *, uint64_t))(*(_QWORD *)this + 808))(this, v12);
  }
  return i;
}

void sub_1B2DF5918(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 OZShapeBehavior::createVertexCacheEntry(OZShapeBehavior *this, int a2, CMTime *a3)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)&a3->value;
  *(CMTime *)(v4 + 8) = *a3;
  *(_QWORD *)v4 = &unk_1E6587428;
  return result;
}

uint64_t OZShapeBehavior::getVertexCacheEntry(OZShapeBehavior *this, uint64_t a2, CMTime *a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  CMTime v12;
  CMTime time1;

  v6 = (std::mutex *)((char *)this + 496);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 496));
  v7 = *((_QWORD *)this + 59) + 24 * (int)a2;
  v8 = v7;
  while (1)
  {
    v8 = *(_QWORD *)(v8 + 8);
    if (v8 == v7)
      break;
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_OWORD *)(v9 + 8);
    time1.epoch = *(_QWORD *)(v9 + 24);
    *(_OWORD *)&time1.value = v10;
    v12 = *a3;
    if (!CMTimeCompare(&time1, &v12))
    {
      a2 = (*(uint64_t (**)(OZShapeBehavior *, _QWORD))(*(_QWORD *)this + 832))(this, *(_QWORD *)(v8 + 16));
      break;
    }
  }
  PCSharedMutex::unlock_shared(v6);
  if (v8 == v7)
    return 0;
  else
    return a2;
}

void sub_1B2DF5A60(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::addVertexCacheEntry(uint64_t a1, int a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = (std::mutex *)(a1 + 496);
  PCSharedMutex::lock((std::mutex *)(a1 + 496));
  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 472);
    v8 = operator new(0x18uLL);
    v9 = (uint64_t *)(v7 + 24 * a2);
    v8[2] = a3;
    v10 = (_QWORD *)v9[1];
    v11 = v9[2];
    *v8 = v9;
    v8[1] = v10;
    *v10 = v8;
    v9[1] = (uint64_t)v8;
    v9[2] = v11 + 1;
    if ((unint64_t)(v11 + 1) >= 6)
    {
      v12 = *v9;
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + 24 * a2);
      }
      *(_QWORD *)(v12 + 16) = 0;
      v14 = *(_QWORD *)(a1 + 472) + 24 * a2;
      v15 = *(uint64_t **)v14;
      v16 = **(_QWORD **)v14;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)v14 + 8);
      *(_QWORD *)v15[1] = v16;
      --*(_QWORD *)(v14 + 16);
      operator delete(v15);
    }
  }
  PCSharedMutex::unlock(v6);
}

void sub_1B2DF5B60(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::flushCache(OZShapeBehavior *this)
{
  std::mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[3];

  v2 = (std::mutex *)((char *)this + 496);
  PCSharedMutex::lock((std::mutex *)((char *)this + 496));
  v3 = (_QWORD *)((char *)this + 472);
  v5 = (_QWORD *)*((_QWORD *)this + 59);
  v4 = (_QWORD *)*((_QWORD *)this + 60);
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = &v5[3 * v6];
      if (v8[2])
      {
        do
        {
          v9 = *(_QWORD *)(*v8 + 16);
          if (v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            v5 = (_QWORD *)*v3;
          }
          *(_QWORD *)(v5[3 * v6] + 16) = 0;
          v10 = *v3 + 24 * v6;
          v11 = *(uint64_t **)v10;
          v12 = **(_QWORD **)v10;
          *(_QWORD *)(v12 + 8) = *(_QWORD *)(*(_QWORD *)v10 + 8);
          *(_QWORD *)v11[1] = v12;
          --*(_QWORD *)(v10 + 16);
          operator delete(v11);
          v5 = (_QWORD *)*v3;
          v8 = (_QWORD *)(*v3 + 24 * v6);
        }
        while (v8[2]);
        v4 = (_QWORD *)*((_QWORD *)this + 60);
      }
      v6 = ++v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v4 - v5) > v7);
    while (v4 != v5)
    {
      v4 -= 3;
      std::__list_imp<unsigned int>::clear(v4);
    }
    v4 = v5;
  }
  *((_QWORD *)this + 60) = v4;
  if (*((_QWORD *)this + 44))
  {
    v13 = 1;
    do
    {
      v22[0] = v22;
      v22[1] = v22;
      v22[2] = 0;
      v14 = *((_QWORD *)this + 60);
      if (v14 >= *((_QWORD *)this + 61))
      {
        v15 = std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__push_back_slow_path<std::list<OZShapeBehaviorVertexCacheEntry *> const&>((uint64_t)this + 472, (uint64_t)v22);
      }
      else
      {
        std::list<OZShapeBehaviorVertexCacheEntry *>::list(*((_QWORD **)this + 60), (uint64_t)v22);
        v15 = v14 + 24;
        *((_QWORD *)this + 60) = v14 + 24;
      }
      *((_QWORD *)this + 60) = v15;
      std::__list_imp<unsigned int>::clear(v22);
    }
    while (*((_QWORD *)this + 44) > (unint64_t)v13++);
  }
  PCSharedMutex::unlock(v2);
  PCSharedMutex::lock((std::mutex *)((char *)this + 624));
  while (1)
  {
    v17 = *((_QWORD *)this + 77);
    if (!v17)
      break;
    v18 = *((_QWORD *)this + 75);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v18 = *((_QWORD *)this + 75);
      v17 = *((_QWORD *)this + 77);
    }
    *(_QWORD *)(v18 + 16) = 0;
    v20 = (uint64_t *)*((_QWORD *)this + 75);
    v21 = *v20;
    *(_QWORD *)(v21 + 8) = v20[1];
    *(_QWORD *)v20[1] = v21;
    *((_QWORD *)this + 77) = v17 - 1;
    operator delete(v20);
  }
  PCSharedMutex::unlock((std::mutex *)((char *)this + 624));
}

void sub_1B2DF5D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  PCSharedMutex::unlock(v2);
  _Unwind_Resume(a1);
}

OZScene *OZShapeBehavior::notify(OZShapeBehavior *this)
{
  OZScene *result;
  __int16 v2;
  char v3;
  char *v4;
  OZScene *v5;
  void *v6;
  int8x16_t v7;
  CMTime v8;
  OZRenderState v9;
  CMTime v10[59];
  int8x8_t v11[521];

  result = (OZScene *)MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v4 = (char *)result;
  v11[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  if ((v2 & 0x981C) != 0)
    result = (OZScene *)(*(uint64_t (**)(OZScene *))(*(_QWORD *)result + 784))(result);
  if ((v3 & 0xC) != 0)
  {
    result = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 336))(v4);
    if (result)
    {
      v5 = result;
      PCSharedMutex::lock_shared((std::mutex *)(v4 + 496));
      PCSharedMutex::lock_shared((std::mutex *)(v4 + 624));
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v11);
      OZRenderParams::OZRenderParams((OZRenderParams *)v10);
      OZRenderState::OZRenderState(&v9);
      OZScene::getCurrentTime(v5, (__n128 *)&v8);
      v9.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v8;
      OZRenderParams::setState((OZRenderParams *)v10, &v9);
      v8 = v10[0];
      OZChannelFolder::calcHashForState((OZChannelFolder *)(v4 + 56), (PCSerializerWriteStream *)v11, &v8);
      v7 = (int8x16_t)vceqq_s32(*(int32x4_t *)PCHashWriteStream::getHash(v11)->i8, *(int32x4_t *)(v4 + 728));
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v7))) & 1) != 0)
        *(_OWORD *)(v4 + 728) = *(_OWORD *)PCHashWriteStream::getHash(v11)->i8;
      OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v11);
      PCSharedMutex::unlock_shared((std::mutex *)(v4 + 624));
      PCSharedMutex::unlock_shared((std::mutex *)(v4 + 496));
      result = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 320))(v4);
      if (result)
      {
        if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1B30541E0, v7)) & 0xF) != 0)
        {
          if (result)
          {
            v6 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 320))(v4);
            if (v6)
            return (OZScene *)OZRotoshape::setDirty((OZRotoshape *)v6, 1, 1);
          }
        }
      }
    }
  }
  return result;
}

void sub_1B2DF5FC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

OZScene *`non-virtual thunk to'OZShapeBehavior::notify(OZShapeBehavior *this)
{
  return OZShapeBehavior::notify((OZShapeBehavior *)((char *)this - 336));
}

uint64_t OZShapeBehavior::willBake(OZShapeBehavior *this, PCTimeRange *a2)
{
  const void *v4;
  unint64_t v5;
  char **v6;
  const void *v7;
  _QWORD *v8;
  double **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const void *v13;
  OZChannelFolder *v14;
  const void *v15;
  OZChannelFolder *v16;
  const void *Descendant;
  OZChannel *v18;
  const void *v19;
  OZChannel *v20;
  const void *v21;
  OZChannel *v22;
  const void *v23;
  const void *v24;
  OZChannel *v25;
  const void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  double ***v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  double ***v49;
  char *v50;
  char *v51;
  double **v52;
  uint64_t result;
  PCMutex *v54;
  OZChannel *v55;
  OZChannel *v56;
  CMTime v57;
  __n128 v58;
  uint64_t v59;
  CMTime v60;
  CMTime time;
  unsigned int Seconds;
  CMTime v63;

  v54 = (PCMutex *)((char *)this + 368);
  PCMutex::lock((PCMutex *)((char *)this + 368));
  *((_QWORD *)this + 56) = *((_QWORD *)this + 55);
  v4 = (const void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
  if (v4
  {
    LODWORD(v5) = 0;
    v6 = (char **)((char *)this + 440);
    do
    {
      v7 = (const void *)(*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 320))(this);
      if (v7)
      else
        v8 = 0;
      v9 = (double **)operator new();
      v10 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v63);
      OZShapeBehaviorBakeEntry::OZShapeBehaviorBakeEntry((OZShapeBehaviorBakeEntry *)v9, v5, a2, &v63);
      v11 = (uint64_t *)v8[2431];
      if (v11)
      {
        v12 = *v11;
        if (((v11[1] - *v11) & 0x7FFFFFFF8) != 0)
        {
          v13 = *(const void **)(v12 + 8 * (2 * v5));
          if (v13)
          else
            v14 = 0;
          v15 = *(const void **)(v12 + 8 * ((2 * (_DWORD)v5) | 1u));
          if (v15)
          else
            v16 = 0;
          Descendant = (const void *)OZChannelFolder::getDescendant(v14, 2);
          if (Descendant)
          else
            v18 = 0;
          v19 = (const void *)OZChannelFolder::getDescendant(v16, 2);
          if (v19)
          else
            v20 = 0;
          v21 = (const void *)OZChannelFolder::getDescendant(v14, 4);
          if (v21)
          else
            v22 = 0;
          v23 = (const void *)OZChannelFolder::getDescendant(v16, 4);
          if (v23)
          else
            v55 = 0;
          v24 = (const void *)OZChannelFolder::getDescendant(v14, 5);
          if (v24)
          else
            v25 = 0;
          v26 = (const void *)OZChannelFolder::getDescendant(v16, 5);
          if (v26)
          else
            v56 = 0;
          v27 = (char *)(v8 + 2398);
          Seconds = 0;
          v60 = *(CMTime *)((_BYTE *)a2 + 1);
          v28 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v28 + 336), &v58);
          operator/((__int128 *)&v60.value, (uint64_t)&v58, (uint64_t)&time);
          Seconds = CMTimeGetSeconds(&time);
          v29 = (void *)(*(uint64_t (**)(OZShapeBehavior *, OZChannel *))(*(_QWORD *)this + 848))(this, v18);
          v58 = *(__n128 *)a2;
          v59 = *((_QWORD *)a2 + 2);
          (*(void (**)(CMTime *__return_ptr, char *, __n128 *))(*(_QWORD *)v27 + 328))(&v60, v27, &v58);
          v30 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v30 + 336), (__n128 *)&v57);
          OZChannel::getSamples(v18, v29, &v60, &v57, &Seconds, 0, v9 + 7);
          v31 = (void *)(*(uint64_t (**)(OZShapeBehavior *, OZChannel *))(*(_QWORD *)this + 848))(this, v20);
          v58 = *(__n128 *)a2;
          v59 = *((_QWORD *)a2 + 2);
          (*(void (**)(CMTime *__return_ptr, char *, __n128 *))(*(_QWORD *)v27 + 328))(&v60, v27, &v58);
          v32 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v32 + 336), (__n128 *)&v57);
          OZChannel::getSamples(v20, v31, &v60, &v57, &Seconds, 0, v9 + 8);
          v33 = (void *)(*(uint64_t (**)(OZShapeBehavior *, OZChannel *))(*(_QWORD *)this + 848))(this, v22);
          v58 = *(__n128 *)a2;
          v59 = *((_QWORD *)a2 + 2);
          (*(void (**)(CMTime *__return_ptr, char *, __n128 *))(*(_QWORD *)v27 + 328))(&v60, v27, &v58);
          v34 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v34 + 336), (__n128 *)&v57);
          OZChannel::getSamples(v22, v33, &v60, &v57, &Seconds, 0, v9 + 9);
          v35 = (void *)(*(uint64_t (**)(OZShapeBehavior *, OZChannel *))(*(_QWORD *)this + 848))(this, v55);
          v58 = *(__n128 *)a2;
          v59 = *((_QWORD *)a2 + 2);
          (*(void (**)(CMTime *__return_ptr, char *, __n128 *))(*(_QWORD *)v27 + 328))(&v60, v27, &v58);
          v36 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v36 + 336), (__n128 *)&v57);
          OZChannel::getSamples(v55, v35, &v60, &v57, &Seconds, 0, v9 + 10);
          v37 = (void *)(*(uint64_t (**)(OZShapeBehavior *, OZChannel *))(*(_QWORD *)this + 848))(this, v25);
          v58 = *(__n128 *)a2;
          v59 = *((_QWORD *)a2 + 2);
          (*(void (**)(CMTime *__return_ptr, char *, __n128 *))(*(_QWORD *)v27 + 328))(&v60, v27, &v58);
          v38 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v38 + 336), (__n128 *)&v57);
          OZChannel::getSamples(v25, v37, &v60, &v57, &Seconds, 0, v9 + 11);
          v39 = (void *)(*(uint64_t (**)(OZShapeBehavior *, OZChannel *))(*(_QWORD *)this + 848))(this, v56);
          v58 = *(__n128 *)a2;
          v59 = *((_QWORD *)a2 + 2);
          (*(void (**)(CMTime *__return_ptr, char *, __n128 *))(*(_QWORD *)v27 + 328))(&v60, v27, &v58);
          v40 = (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v40 + 336), (__n128 *)&v57);
          OZChannel::getSamples(v56, v39, &v60, &v57, &Seconds, 0, v9 + 12);
          v6 = (char **)((char *)this + 440);
        }
      }
      v42 = (double ***)*((_QWORD *)this + 56);
      v41 = *((_QWORD *)this + 57);
      if ((unint64_t)v42 >= v41)
      {
        v44 = ((char *)v42 - *v6) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)*v6;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 456, v47);
        else
          v48 = 0;
        v49 = (double ***)&v48[8 * v44];
        *v49 = v9;
        v43 = v49 + 1;
        v51 = (char *)*((_QWORD *)this + 55);
        v50 = (char *)*((_QWORD *)this + 56);
        if (v50 != v51)
        {
          do
          {
            v52 = (double **)*((_QWORD *)v50 - 1);
            v50 -= 8;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = *v6;
        }
        *((_QWORD *)this + 55) = v49;
        *((_QWORD *)this + 56) = v43;
        *((_QWORD *)this + 57) = &v48[8 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v42 = v9;
        v43 = v42 + 1;
      }
      *((_QWORD *)this + 56) = v43;
      v5 = (v5 + 1);
    }
    while (*((_QWORD *)this + 44) > v5);
  }
  result = PCMutex::unlock(v54);
  *((_BYTE *)this + 320) = 1;
  return result;
}

void sub_1B2DF6740(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1080C40BC9BFA48);
  _Unwind_Resume(a1);
}

uint64_t OZShapeBehavior::didBake(OZShapeBehavior *this)
{
  PCMutex *v2;
  uint64_t i;
  uint64_t v4;
  OZShapeBehaviorBakeEntry *v5;
  uint64_t result;

  v2 = (PCMutex *)((char *)this + 368);
  PCMutex::lock((PCMutex *)((char *)this + 368));
  v4 = *((_QWORD *)this + 55);
  for (i = *((_QWORD *)this + 56); v4 != i; *((_QWORD *)this + 56) = i)
  {
    v5 = *(OZShapeBehaviorBakeEntry **)(i - 8);
    if (v5)
    {
      OZShapeBehaviorBakeEntry::~OZShapeBehaviorBakeEntry(v5);
      MEMORY[0x1B5E29170]();
      i = *((_QWORD *)this + 56);
    }
    *(_QWORD *)(i - 8) = 0;
    v4 = *((_QWORD *)this + 55);
    i = *((_QWORD *)this + 56) - 8;
  }
  result = PCMutex::unlock(v2);
  *((_BYTE *)this + 320) = 0;
  return result;
}

uint64_t OZShapeBehavior::didUndoLastChange(OZShapeBehavior *this)
{
  return (*(uint64_t (**)(OZShapeBehavior *))(*(_QWORD *)this + 704))(this);
}

void OZShapeBehaviorVertexCacheEntry::~OZShapeBehaviorVertexCacheEntry(OZShapeBehaviorVertexCacheEntry *this)
{
  JUMPOUT(0x1B5E29170);
}

void OZShapeBehaviorBakeEntry::OZShapeBehaviorBakeEntry(OZShapeBehaviorBakeEntry *this, int a2, PCTimeRange *a3, CMTime *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  CMTime time;

  v5 = MEMORY[0x1E0CA2E68];
  v6 = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 3) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)((char *)this + 8) = v6;
  *((_OWORD *)this + 2) = *(_OWORD *)v5;
  *((_QWORD *)this + 6) = *(_QWORD *)(v5 + 16);
  *(double *)this = (double)a2;
  if ((OZShapeBehaviorBakeEntry *)((char *)this + 8) != a3)
  {
    v7 = *(_OWORD *)a3;
    *((_QWORD *)this + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)((char *)this + 8) = v7;
    v8 = *(_OWORD *)((char *)a3 + 24);
    *((_QWORD *)this + 6) = *((_QWORD *)a3 + 5);
    *((_OWORD *)this + 2) = v8;
  }
  v9 = *(_OWORD *)((char *)a3 + 24);
  v10 = *((_QWORD *)a3 + 5);
  operator/(&v9, (uint64_t)a4, (uint64_t)&time);
  CMTimeGetSeconds(&time);
  *((_QWORD *)this + 7) = operator new[]();
  *((_QWORD *)this + 8) = operator new[]();
  *((_QWORD *)this + 9) = operator new[]();
  *((_QWORD *)this + 10) = operator new[]();
  *((_QWORD *)this + 11) = operator new[]();
  *((_QWORD *)this + 12) = operator new[]();
}

void OZShapeBehaviorBakeEntry::~OZShapeBehaviorBakeEntry(OZShapeBehaviorBakeEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8000313F17);
  *((_QWORD *)this + 7) = 0;
  v3 = *((_QWORD *)this + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8000313F17);
  *((_QWORD *)this + 8) = 0;
  v4 = *((_QWORD *)this + 9);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8000313F17);
  *((_QWORD *)this + 9) = 0;
  v5 = *((_QWORD *)this + 10);
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8000313F17);
  *((_QWORD *)this + 10) = 0;
  v6 = *((_QWORD *)this + 11);
  if (v6)
    MEMORY[0x1B5E2914C](v6, 0x1000C8000313F17);
  *((_QWORD *)this + 11) = 0;
  v7 = *((_QWORD *)this + 12);
  if (v7)
    MEMORY[0x1B5E2914C](v7, 0x1000C8000313F17);
  *((_QWORD *)this + 12) = 0;
}

void std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::__list_imp<unsigned int>::clear(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  _QWORD *result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a4 - (unint64_t)a2 + 8 * ((_QWORD)a3 - a1);
  result = *(_QWORD **)a5;
  if (v8 >= 1)
  {
    if (a4)
    {
      if (v8 >= (unint64_t)a4)
        v10 = a4;
      else
        v10 = v8;
      v8 -= v10;
      v11 = (-1 << (a4 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4);
      *result = *result & ~v11 | *a3 & v11;
      *(_DWORD *)(a5 + 8) = (*(_DWORD *)(a5 + 8) - (_BYTE)v10) & 0x3F;
    }
    if (v8 >= 0)
      v12 = v8;
    else
      v12 = v8 + 63;
    v13 = v12 >> 6;
    result -= v12 >> 6;
    *(_QWORD *)a5 = result;
    v14 = &a3[-(v12 >> 6)];
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, v14, 8 * v13);
      result = *(_QWORD **)a5;
    }
    if (v8 - (v13 << 6) >= 1)
    {
      v15 = -1 << (((_BYTE)v13 << 6) - v8);
      v16 = *(v14 - 1) & v15;
      v17 = *--result;
      *(_QWORD *)a5 = result;
      *result = v17 & ~v15 | v16;
      *(_DWORD *)(a5 + 8) = -(int)v8 & 0x3F;
    }
  }
  *(_QWORD *)a6 = result;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return result;
}

unint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  v6 = a4 - (unint64_t)a2 + 8 * ((_QWORD)a3 - result);
  if (v6 <= 0)
  {
    v11 = *(unint64_t **)a5;
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a4)
    {
      if (v6 >= (unint64_t)a4)
        v7 = a4;
      else
        v7 = a4 - (unint64_t)a2 + 8 * ((_QWORD)a3 - result);
      v6 -= v7;
      v8 = (-1 << (a4 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4) & *a3;
      v9 = *(unsigned int *)(a5 + 8);
      if (v7 >= v9)
        v10 = *(unsigned int *)(a5 + 8);
      else
        v10 = v7;
      v11 = *(unint64_t **)a5;
      if (v10)
      {
        v12 = v8 >> (a4 - v9);
        if (v9 > a4)
          v12 = v8 << (v9 - a4);
        *v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
        LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        v13 = *--v11;
        *(_QWORD *)a5 = v11;
        LODWORD(v9) = -(int)v7 & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        *v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a4 + (-(char)v7 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v9) = *(_DWORD *)(a5 + 8);
      v11 = *(unint64_t **)a5;
    }
    v14 = 64 - v9;
    v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (v6 >= 64)
    {
      v16 = *v11;
      do
      {
        v17 = v6;
        v19 = *--a3;
        v18 = v19;
        result = v19 >> v14;
        *v11 = v16 & ~v15 | (v19 >> v14);
        v20 = *--v11;
        v16 = v20 & v15 | (v18 << v9);
        *v11 = v16;
        v6 = v17 - 64;
      }
      while (v17 > 0x7F);
      *(_QWORD *)a5 = v11;
    }
    if (v6 >= 1)
    {
      v21 = *(a3 - 1) & (-1 << -(char)v6);
      if (v6 >= (unint64_t)v9)
        v22 = v9;
      else
        v22 = v6;
      *v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
      *(_DWORD *)(a5 + 8) = v9;
      if (v6 - v22 >= 1)
      {
        v23 = *--v11;
        *(_QWORD *)a5 = v11;
        *(_DWORD *)(a5 + 8) = (v22 - v6) & 0x3F;
        *v11 = v23 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
        LODWORD(v9) = (v22 - v6) & 0x3F;
      }
    }
  }
  *(_QWORD *)a6 = v11;
  *(_DWORD *)(a6 + 8) = v9;
  return result;
}

unint64_t *std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;

  v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)result);
  if (v6 <= 0)
  {
    v18 = *(unint64_t **)a5;
    v19 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a2)
    {
      v7 = a2;
      if (v6 >= (unint64_t)(64 - a2))
        v8 = 64 - a2;
      else
        v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)result);
      v6 -= v8;
      v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
      v10 = *(unsigned int *)(a5 + 8);
      if (v8 >= (64 - v10))
        v11 = (64 - v10);
      else
        v11 = v8;
      v12 = *(unint64_t **)a5;
      v13 = v9 >> (a2 - v10);
      v14 = v10 >= a2;
      v16 = v10 - a2;
      v15 = v16 != 0 && v14;
      v17 = v9 << v16;
      if (!v15)
        v17 = v13;
      *v12 = **(_QWORD **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
      v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = v18;
      v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      v20 = v8 - v11;
      if (v20 >= 1)
      {
        *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v7));
        *(_DWORD *)(a5 + 8) = v20;
        v19 = v20;
      }
      ++result;
    }
    else
    {
      v19 = *(_DWORD *)(a5 + 8);
      v18 = *(unint64_t **)a5;
    }
    v21 = 64 - v19;
    v22 = -1 << v19;
    if (v6 >= 64)
    {
      v23 = *v18;
      do
      {
        v24 = v6;
        v26 = *result++;
        v25 = v26;
        *v18 = v23 & ~v22 | (v26 << v19);
        v27 = v18[1];
        ++v18;
        v23 = v27 & v22 | (v25 >> v21);
        *v18 = v23;
        v6 = v24 - 64;
      }
      while (v24 > 0x7F);
      *(_QWORD *)a5 = v18;
    }
    if (v6 >= 1)
    {
      v28 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      if (v6 >= (unint64_t)v21)
        v29 = 64 - v19;
      else
        v29 = v6;
      *v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (v21 - v29)) & v22) | (v28 << v19);
      v18 = (unint64_t *)((char *)v18 + (((v29 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = v18;
      v19 = ((_BYTE)v19 + (_BYTE)v29) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      v30 = v6 - v29;
      if (v30 >= 1)
      {
        *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v30) | (v28 >> v29);
        *(_DWORD *)(a5 + 8) = v30;
        v19 = v30;
      }
    }
  }
  *(_QWORD *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v19;
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void std::vector<BOOL>::__insert_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  char *v45;
  int v46;

  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  v15 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14 << 6 < a6 || v15 > (v14 << 6) - a6)
  {
    v39 = 0;
    v40 = 0uLL;
    v17 = v15 + a6;
    if (v17 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    if ((unint64_t)(v14 << 6) > 0x3FFFFFFFFFFFFFFELL)
    {
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v18 = v14 << 7;
      v19 = (v17 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v18 <= v19)
        v20 = v19;
      else
        v20 = v18;
    }
    std::vector<BOOL>::reserve(&v39, v20);
    v27 = *(unint64_t **)a1;
    *(_QWORD *)&v40 = *(_QWORD *)(a1 + 8) + a6;
    v45 = v39;
    v46 = 0;
    std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v27, 0, a2, a3, (uint64_t)&v45, (uint64_t)&v43);
    v28 = v43;
    *(_QWORD *)a7 = v43;
    v29 = v44;
    *(_DWORD *)(a7 + 8) = v44;
    v30 = *(_QWORD *)(a1 + 8);
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v30 >> 6));
    v32 = v30 & 0x3F;
    v45 = &v39[8 * ((unint64_t)v40 >> 6)];
    v46 = v40 & 0x3F;
    if (v46 == v32)
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v31, v32, (uint64_t)&v45, (uint64_t)&v43);
    else
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v31, v32, (uint64_t)&v45, (uint64_t)&v43);
    v33 = *(char **)a1;
    *(_QWORD *)a1 = v39;
    v39 = v33;
    v34 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v40;
    v40 = v34;
    if (v33)
      operator delete(v33);
  }
  else
  {
    v21 = *(unint64_t **)a1;
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v15 >> 6));
    v23 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    v24 = v15 & 0x3F;
    *(_QWORD *)(a1 + 8) = v15 + a6;
    v39 = (char *)&v21[(v15 + a6) >> 6];
    if ((((_BYTE)v15 + (_BYTE)a6) & 0x3F) == (_DWORD)v23)
    {
      LODWORD(v40) = v23;
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v22, v24, (uint64_t)&v39, (uint64_t)&v45);
    }
    else
    {
      LODWORD(v40) = ((_BYTE)v15 + (_BYTE)a6) & 0x3F;
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v22, v24, (uint64_t)&v39, (uint64_t)&v45);
    }
    v25 = 8 * (a2 - *(_QWORD *)a1) + a3;
    if (v25 < 0)
    {
      v35 = v25 - 63;
      if (v25 - 63 < 0)
        v35 = 8 * (a2 - *(_QWORD *)a1) + a3;
      v26 = v35 >> 6;
    }
    else
    {
      v26 = (unint64_t)v25 >> 6;
    }
    v28 = *(_QWORD *)a1 + 8 * v26;
    v29 = v25 & 0x3F;
    *(_QWORD *)a7 = v28;
    *(_DWORD *)(a7 + 8) = v29;
  }
  v36 = *(_DWORD *)(a4 + 8);
  v37 = *(_QWORD *)a5;
  v38 = *(_DWORD *)(a5 + 8);
  v45 = *(char **)a4;
  v46 = v36;
  v43 = v37;
  v44 = v38;
  v41 = v28;
  v42 = v29;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>((uint64_t *)&v45, &v43, &v41, (uint64_t)&v39);
}

void sub_1B2DF73B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__push_back_slow_path<std::list<OZShapeBehaviorVertexCacheEntry *> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;

  v3 = *(uint64_t **)a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = a1 + 16;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 16;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  std::list<OZShapeBehaviorVertexCacheEntry *>::list(v14, a2);
  v15 = v14 + 24;
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__swap_out_circular_buffer((uint64_t **)a1, &v13);
  v11 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::list<OZShapeBehaviorVertexCacheEntry *>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B2DF74C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::list<OZShapeBehaviorVertexCacheEntry *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::list<OZShapeBehaviorVertexCacheEntry *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B2DF755C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__swap_out_circular_buffer(uint64_t **result, _QWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = (uint64_t *)a2[1];
  if (v4 != *result)
  {
    do
    {
      v6 -= 3;
      v4 -= 3;
      result = (uint64_t **)std::allocator<std::list<OZShapeBehaviorVertexCacheEntry *>>::construct[abi:ne180100]<std::list<OZShapeBehaviorVertexCacheEntry *>,std::list<OZShapeBehaviorVertexCacheEntry *>>((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = (uint64_t *)a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = (uint64_t *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::allocator<std::list<OZShapeBehaviorVertexCacheEntry *>>::construct[abi:ne180100]<std::list<OZShapeBehaviorVertexCacheEntry *>,std::list<OZShapeBehaviorVertexCacheEntry *>>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  return std::list<OZShapeBehaviorVertexCacheEntry *>::splice((uint64_t)a2, a2, a3);
}

uint64_t std::list<OZShapeBehaviorVertexCacheEntry *>::splice(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t std::__split_buffer<std::list<OZShapeBehaviorVertexCacheEntry *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__list_imp<unsigned int>::clear((_QWORD *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(OZShapeBehaviorCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  _QWORD *v3;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *v3 = &off_1E6587458;
}

void OZShapeBehaviorCurveNode::~OZShapeBehaviorCurveNode(OZShapeBehaviorCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZShapeBehaviorCurveNode::solveNode(const void **this, const CMTime *a2, double a3, double a4)
{
  void *v8;

  return (*(uint64_t (**)(void *, const void *, const CMTime *, double, double))(*(_QWORD *)v8 + 640))(v8, this[2], a2, a3, a4);
}

__n128 OZShapeBehaviorCurveNode::solveNode(OZShapeBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  unint64_t v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v9 = *(CMTime *)((_BYTE *)a2 + 5);
  result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.value = result;
  v8.epoch = *((_QWORD *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZShapeBehaviorCurveNode *, CMTime *, double, double))(*(_QWORD *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      v11 = v8;
      v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      result = *(__n128 *)&v12.value;
      v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

OZBehaviorCurveNode *OZShapeBehaviorCurveNode::cloneNode(OZShapeBehaviorCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E6587458;
  return v2;
}

void sub_1B2DF78A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

uint64_t OZShapeBehaviorCurveNode::compare(OZShapeBehaviorCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 OZShapeBehaviorCurveNode::getNeededRange(OZShapeBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  __n128 result;

  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((_QWORD *)a2 + 8) = *((_QWORD *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((_BYTE *)a2 + 88) = 0;
  *((_QWORD *)a2 + 10) = *((_QWORD *)a2 + 19);
  return result;
}

void OZChanRotoshapeRef::OZChanRotoshapeRef(OZChanRotoshapeRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  _QWORD *v5;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5);
  *v5 = &off_1E6587550;
  v5[2] = &unk_1E65878D0;
}

void OZChanRotoshapeRef::OZChanRotoshapeRef(OZChanRotoshapeRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4);
  *v4 = &off_1E6587550;
  v4[2] = &unk_1E65878D0;
}

void OZChanRotoshapeRef::OZChanRotoshapeRef(OZChanRotoshapeRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *v3 = &off_1E6587550;
  v3[2] = &unk_1E65878D0;
}

void `non-virtual thunk to'OZChanRotoshapeRef::~OZChanRotoshapeRef(OZChanRotoshapeRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanRotoshapeRef *)((char *)this - 16));
}

{
  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanRotoshapeRef *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZChanRotoshapeRef::~OZChanRotoshapeRef(OZChanRotoshapeRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);
  JUMPOUT(0x1B5E29170);
}

OZChanSceneNodeRef *OZChanRotoshapeRef::clone(OZChanRotoshapeRef *this)
{
  OZChanSceneNodeRef *v2;

  v2 = (OZChanSceneNodeRef *)operator new();
  OZChanSceneNodeRef::OZChanSceneNodeRef(v2, this, 0);
  *(_QWORD *)v2 = &off_1E6587550;
  *((_QWORD *)v2 + 2) = &unk_1E65878D0;
  return v2;
}

void sub_1B2DF7A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanRotoshapeRef::getRotoshape(OZChannelBase *this)
{
  const void *result;

  result = OZChanSceneNodeRef::getNode(this);
  if (result)
  return result;
}

uint64_t OZChanRotoshapeRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *lpsrc)
{
  if (lpsrc
  {
    return OZChanSceneNodeRef::canReferenceObject(this, lpsrc);
  }
  else
  {
    return 0;
  }
}

void OZSimStateElement::OZSimStateElement(OZSimStateElement *this)
{
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0x3FF0000000000000;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
}

void OZSimStateElement::OZSimStateElement(OZSimStateElement *this, const OZSimStateElement *a2)
{
  uint64_t v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)this + 25) = 0x3FF0000000000000;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_BYTE *)this + 240) = *((_BYTE *)a2 + 240);
  v3 = *((_QWORD *)a2 + 29);
  if (v3)
  {
    if (*((_BYTE *)a2 + 240))
      *((_QWORD *)this + 29) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
}

uint64_t OZSimStateElement::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  if (a2 != (__int128 *)a1)
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v5 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v5;
    v6 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a1 + 80) = v7;
    v8 = *(__int128 *)((char *)a2 + 104);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v8;
    v9 = a2[8];
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(a1 + 128) = v9;
    v10 = *(__int128 *)((char *)a2 + 152);
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    *(_OWORD *)(a1 + 152) = v10;
    v11 = a2[11];
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    *(_OWORD *)(a1 + 176) = v11;
    v12 = *((_QWORD *)a2 + 29);
    v13 = *((_BYTE *)a2 + 240);
    if (v12 && *((_BYTE *)a2 + 240))
    {
      v14 = *(_QWORD *)(a1 + 232);
      if (v14 && *(_BYTE *)(a1 + 240))
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v14 + 8))(*(_QWORD *)(a1 + 232));
        *(_QWORD *)(a1 + 232) = 0;
        v12 = *((_QWORD *)a2 + 29);
      }
      *(_QWORD *)(a1 + 232) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      v13 = *((_BYTE *)a2 + 240);
    }
    else
    {
      *(_QWORD *)(a1 + 232) = v12;
    }
    *(_BYTE *)(a1 + 240) = v13;
  }
  return a1;
}

void OZSimStateElement::~OZSimStateElement(OZSimStateElement *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    if (*((_BYTE *)this + 240))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      *((_QWORD *)this + 29) = 0;
    }
  }
}

double OZSimStateElement::stepFrom(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = OZSimStateElement::stepFrom(a1, a2, a2, a3, a4).n128_u64[0];
  return result;
}

__n128 OZSimStateElement::stepFrom(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __n128 result;

  v5 = *(double *)(a3 + 72) * a4 + *(double *)(a2 + 16);
  *(float64x2_t *)a1 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 56), a4), *(float64x2_t *)a2);
  *(double *)(a1 + 16) = v5;
  v6 = a4 * a5;
  v7 = v6 * *(double *)(a3 + 144) + *(double *)(a2 + 72);
  *(float64x2_t *)(a1 + 56) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 128), v6), *(float64x2_t *)(a2 + 56));
  *(double *)(a1 + 72) = v7;
  v8 = a4 * 0.5 * 0.125;
  v9 = v8 * *(double *)(a3 + 80);
  v10 = v8 * *(double *)(a3 + 88);
  v11 = v8 * *(double *)(a3 + 96);
  if (v9 * v9 + v10 * v10 + v11 * v11 == 0.0)
  {
    if (a2 != a1)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v12 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v12;
    }
  }
  else
  {
    v13 = v8 * 0.0;
    v14 = *(double *)(a2 + 24);
    v15 = *(double *)(a2 + 32);
    v16 = *(double *)(a2 + 40);
    v17 = *(double *)(a2 + 48);
    v18 = 8;
    do
    {
      v19 = v9 * v14 + v13 * v15 + v10 * v17 - v11 * v16;
      v20 = v10 * v14 + v13 * v16 + v11 * v15 - v9 * v17;
      v21 = v9 * v16 - v10 * v15 + v11 * v14 + v13 * v17;
      v22 = v14 + v13 * v14 - (v9 * v15 + v10 * v16 + v11 * v17);
      v23 = v15 + v19;
      v24 = v16 + v20;
      v25 = v17 + v21;
      v26 = sqrt(v22 * v22 + v25 * v25 + v23 * v23 + v24 * v24);
      if (v26 == 0.0)
      {
        v14 = 1.0;
        v15 = 0.0;
        v16 = 0.0;
        v17 = 0.0;
      }
      else
      {
        v14 = v22 / v26;
        v15 = v23 / v26;
        v16 = v24 / v26;
        v17 = v25 / v26;
      }
      --v18;
    }
    while (v18);
    *(double *)(a1 + 24) = v14;
    *(double *)(a1 + 32) = v15;
    *(double *)(a1 + 40) = v16;
    *(double *)(a1 + 48) = v17;
  }
  v27 = *(double *)(a3 + 168) * a4 + *(double *)(a2 + 120);
  *(float64x2_t *)(a1 + 104) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 152), a4), *(float64x2_t *)(a2 + 104));
  *(double *)(a1 + 120) = v27;
  result = *(__n128 *)(a1 + 104);
  *(__n128 *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return result;
}

uint64_t OZLi3DEngineTexturedObjectData::OZLi3DEngineTexturedObjectData(uint64_t a1, uint64_t a2, void *a3, __int128 *a4, __int128 *a5, const OZRenderParams *a6, char a7, double a8)
{
  __int128 v15;
  __int128 v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __int128 v22;
  __int128 v23;
  CGColorSpace *v24;
  _QWORD v26[3];
  char v27;
  __int128 v28[4];

  v15 = a4[1];
  v28[0] = *a4;
  v28[1] = v15;
  v16 = a4[3];
  v28[2] = a4[2];
  v28[3] = v16;
  v17 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor((Li3DEngineObjectDataBase *)a1);
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v17[3];
  v26[1] = 0;
  v26[2] = 0;
  v26[0] = &unk_1E64FC250;
  v27 = 0;
  Li3DEngineObjectData::Li3DEngineObjectData(a1, a2, v28, 0, 0, 0, (uint64_t)v26, a8, v18, v19, v20, v21, 1.0);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v26);
  *(_QWORD *)a1 = &off_1E6587940;
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 576), a6);
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  v22 = *a5;
  v23 = a5[1];
  *(_OWORD *)(a1 + 2064) = a5[2];
  *(_OWORD *)(a1 + 2048) = v23;
  *(_OWORD *)(a1 + 2032) = v22;
  v24 = (CGColorSpace *)*((_QWORD *)a5 + 6);
  *(_QWORD *)(a1 + 2080) = v24;
  if (v24)
    PCCFRefTraits<CGColorSpace *>::retain(v24);
  *(_BYTE *)(a1 + 2088) = a7;
  *(_QWORD *)(a1 + 2096) = a3;
  return a1;
}

void sub_1B2DF8080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  OZRenderParams *v10;
  uint64_t v12;

  a9 = (void **)(v9 + 2008);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  v12 = *(_QWORD *)(v9 + 2000);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  OZRenderParams::~OZRenderParams(v10);
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)v9);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineObjectData::Li3DEngineObjectData(uint64_t a1, uint64_t a2, __int128 *a3, char a4, char a5, int a6, uint64_t a7, double a8, float a9, float a10, float a11, float a12, float a13)
{
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v18[4];

  v14 = a3[1];
  v18[0] = *a3;
  v18[1] = v14;
  v15 = a3[3];
  v18[2] = a3[2];
  v18[3] = v15;
  v16 = (_QWORD *)Li3DEngineObjectDataBase::Li3DEngineObjectDataBase(a1, a2, v18, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  *v16 = &off_1E6571C38;
  Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)(v16 + 27));
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 272) = -1;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 416) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  return a1;
}

void sub_1B2DF8184(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E6571ED0;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(v1 + 21));
  _Unwind_Resume(a1);
}

void OZLi3DEngineTexturedObjectData::~OZLi3DEngineTexturedObjectData(OZLi3DEngineTexturedObjectData *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E6587940;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 260);
  v3 = (void **)((char *)this + 2008);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 250);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  OZRenderParams::~OZRenderParams((OZLi3DEngineTexturedObjectData *)((char *)this + 576));
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)this);
}

{
  OZLi3DEngineTexturedObjectData::~OZLi3DEngineTexturedObjectData(this);
  JUMPOUT(0x1B5E29170);
}

HGHWMultiBlend *OZLi3DEngineTexturedObjectData::generateFaceStickerTexture(FxColorDescription *this, const LiRenderParameters **a2)
{
  const void *HeliumRenderer;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  HGHWMultiBlend *result;
  __int128 v9;
  uint64_t v10;
  HGHWMultiBlend *v11;

  OZLi3DEngineTexturedObjectData::makeFaceStickerTextureNode((OZLi3DEngineTexturedObjectData *)this, a2, &v11);
  HeliumRenderer = (const void *)LiAgent::getHeliumRenderer(a2);
  FaceTextureDOD(&v9);
  v5 = *((_DWORD *)&this[28]._pcColorDesc._toneMapMethod + 2);
  OZRenderParams::getWorkingColorSpace(this + 18);
  PGHelium::renderNodeToMetalTexture(HeliumRenderer, (uint64_t *)&v11, (unsigned int *)&v9, v5, (HGGLBlendingInfo *)((char *)&this[59]._pcColorDesc._colorSpaceRef._obj + 4), &v10);
  v6 = *(_QWORD *)&this[62]._pcColorDesc._toneMapMethod._gain;
  v7 = v10;
  if (v6 == v10)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      v7 = v10;
    }
    *(_QWORD *)&this[62]._pcColorDesc._toneMapMethod._gain = v7;
  }
  result = v11;
  if (v11)
    return (HGHWMultiBlend *)(*(uint64_t (**)(HGHWMultiBlend *))(*(_QWORD *)v11 + 24))(v11);
  return result;
}

void sub_1B2DF831C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(exception_object);
}

void OZLi3DEngineTexturedObjectData::makeFaceStickerTextureNode(OZLi3DEngineTexturedObjectData *this@<X0>, const LiRenderParameters **a2@<X1>, HGHWMultiBlend **a3@<X8>)
{
  HGHWMultiBlend *v6;
  HGSolidColor *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  HGHWMultiBlend **v27;
  __n128 v28;
  uint64_t v29;
  PCSharedCount v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  HGNode *v39;
  uint64_t v40;
  PCSharedCount v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __n128 v50[29];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[24];
  PCSharedCount v62;
  void *v63;
  int v64;
  uint64_t v65;
  CGColorSpace *v66;
  std::__shared_weak_count *v67;
  __n128 v68;
  double *v69;
  double *v70;
  uint64_t v71;

  v6 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v6);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  PCColor::getComponents((int *)this + 508, (char **)&v69);
  v7 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
  HGSolidColor::HGSolidColor(v7);
  v8 = *v69;
  v9 = v69[1];
  v10 = v69[2];
  v11 = v69[3];
  (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v7 + 96))(v7, 0, v8, v9, v10, v11);
  (*(void (**)(HGHWMultiBlend *, _QWORD, HGSolidColor *, uint64_t, float))(*(_QWORD *)v6 + 624))(v6, 0, v7, 9, 1.0);
  FaceTextureDOD(&v68);
  LiRenderParameters::LiRenderParameters((LiRenderParameters *)v61, a2[6]);
  v60 = 0x3FF0000000000000;
  v57 = 0x3FF0000000000000;
  v54 = 0x3FF0000000000000;
  v51 = 0x3FF0000000000000;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v58 = 0u;
  v59 = 0u;
  LiAgent::LiAgent(v50, v61, &v51, 1);
  v27 = a3;
  LiAgent::setClientROI(v50, &v68);
  v12 = *((_QWORD *)this + 251);
  v13 = *((_QWORD *)this + 252);
  if (v12 != v13)
  {
    v14 = v12 + 8;
    v15 = 1;
    do
    {
      v16 = v14 - 8;
      v40 = *(_QWORD *)(v14 - 8);
      PCSharedCount::PCSharedCount(&v41, (const PCSharedCount *)v14);
      v17 = *(_OWORD *)(v14 + 8);
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v44 = *(_OWORD *)(v14 + 40);
      v45 = v19;
      v42 = v17;
      v43 = v18;
      v20 = *(_OWORD *)(v14 + 72);
      v21 = *(_OWORD *)(v14 + 88);
      v22 = *(_OWORD *)(v14 + 120);
      v48 = *(_OWORD *)(v14 + 104);
      v49 = v22;
      v46 = v20;
      v47 = v21;
      v29 = v40;
      PCSharedCount::PCSharedCount(&v30, &v41);
      v35 = v46;
      v36 = v47;
      v37 = v48;
      v38 = v49;
      v31 = v42;
      v32 = v43;
      v33 = v44;
      v34 = v45;
      v28 = v68;
      HGNodeForImageSourceTransformPair((LiAgent *)v50, (uint64_t)&v29, (uint64_t)&v28, &v39);
      PCSharedCount::~PCSharedCount(&v30);
      (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, float))(*(_QWORD *)v6 + 624))(v6, v15, v39, 9, 1.0);
      if (v39)
        (*(void (**)(HGNode *))(*(_QWORD *)v39 + 24))(v39);
      PCSharedCount::~PCSharedCount(&v41);
      v14 += 144;
      v15 = (v15 + 1);
    }
    while (v16 + 144 != v13);
  }
  *v27 = v6;
  LiAgent::~LiAgent((LiAgent *)v50);
  v23 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v66);
  v63 = &unk_1E64FC2F8;
  if (v64 < 0)
    v26 = 1;
  else
    v26 = v64;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v63, 0, v26);
  if (v65)
    MEMORY[0x1B5E2914C](v65, 0x1000C8077774924);
  v65 = 0;
  v64 = 0;
  PCSharedCount::~PCSharedCount(&v62);
  (*(void (**)(HGSolidColor *))(*(_QWORD *)v7 + 24))(v7);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_1B2DF8688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;

  LiAgent::~LiAgent((LiAgent *)&a51);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x3A0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
  v55 = *(void **)(v53 - 120);
  if (v55)
  {
    *(_QWORD *)(v53 - 112) = v55;
    operator delete(v55);
  }
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
  _Unwind_Resume(a1);
}

uint64_t OZLi3DEngineTexturedObjectData::applyChanges(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 2000);
  if (v1)
  {
    if (*(_BYTE *)(result + 2088))
      v2 = (uint64_t *)MEMORY[0x1E0CD5B18];
    else
      v2 = (uint64_t *)MEMORY[0x1E0CD5AF8];
    v3 = *v2;
    v4 = *(void **)(result + 2096);
    v5 = *(_QWORD *)(v1 + 144);
    return ApplyMetalTextureToNode(v4, &v5, v3);
  }
  return result;
}

void OZ3DEnginePlaneElement::OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3, a4);
  *v5 = &off_1E6587978;
  v5[2] = &unk_1E65882B0;
  v5[6] = &unk_1E6588508;
  v5[816] = &unk_1E6588560;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24408), &v6, (OZChannelFolder *)((char *)this + 320), 0x190u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage"));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 24536), &v6, (OZChannelFolder *)((char *)this + 24408), 0x191u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage"));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 26120), &v6, (OZChannelFolder *)((char *)this + 24408), 0x192u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Image Element Footage"));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 27704), &v6, (OZChannelFolder *)((char *)this + 24408), 0x193u, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Base Color");
  OZChannelColor::OZChannelColor((OZ3DEnginePlaneElement *)((char *)this + 29288), 0.0, 0.0, 0.0, 0.0, &v6, (OZChannelFolder *)((char *)this + 448), 0x194u, 0, 6u);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Enable Lights");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30448), 0, &v6, (OZChannelFolder *)((char *)this + 448), 0x195u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Plane Size");
  OZChannel2D::OZChannel2D((OZ3DEnginePlaneElement *)((char *)this + 30600), 1024.0, 1024.0, &v6, (OZChannelFolder *)((char *)this + 448), 0x196u, 0, 2u, 0, 0);
  PCString::~PCString(&v6);
  Li3DEngineScene::Li3DEngineScene((OZ3DEnginePlaneElement *)((char *)this + 31040));
  *(_OWORD *)((char *)this + 31208) = 0u;
  *((_QWORD *)this + 3903) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 31232), 1);
  *((_QWORD *)this + 3904) = &unk_1E64E2000;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19144), 2, 0);
}

void sub_1B2DF8A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, PCString a10)
{
  OZ3DEngineSceneElement *v10;
  OZChannelFolder *v11;
  OZChannelImageWithOptions *v12;
  OZChannelImageWithOptions *v13;
  OZChannelImageWithOptions *v14;
  OZChannelColor *v15;
  OZChannelBool *v16;
  PCMutex *v17;
  OZChannel2D *v18;
  Li3DEngineScene *v19;

  PCMutex::~PCMutex(v17);
  Li3DEngineScene::~Li3DEngineScene(v19);
  OZChannel2D::~OZChannel2D(v18);
  OZChannelBool::~OZChannelBool(v16);
  OZChannelColor::~OZChannelColor(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v14);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v10);
  _Unwind_Resume(a1);
}

void sub_1B2DF8B10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2DF8AD8);
}

void sub_1B2DF8B20()
{
  JUMPOUT(0x1B2DF8AD8);
}

void sub_1B2DF8B28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2DF8AE0);
}

void sub_1B2DF8B38()
{
  JUMPOUT(0x1B2DF8AE0);
}

void sub_1B2DF8B40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2DF8AE8);
}

void sub_1B2DF8B50()
{
  JUMPOUT(0x1B2DF8AE8);
}

void sub_1B2DF8B58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2DF8AF0);
}

void sub_1B2DF8B68()
{
  JUMPOUT(0x1B2DF8AF0);
}

void sub_1B2DF8B70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2DF8AF8);
}

void sub_1B2DF8B80()
{
  JUMPOUT(0x1B2DF8AF8);
}

void sub_1B2DF8B88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2DF8B00);
}

void sub_1B2DF8B98()
{
  JUMPOUT(0x1B2DF8B00);
}

void Li3DEngineScene::~Li3DEngineScene(Li3DEngineScene *this)
{
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 144, *((PCSharedCount **)this + 19));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 14);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 80, *((id **)this + 11));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 8);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)this);
}

void OZ3DEnginePlaneElement::OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this, const OZ3DEnginePlaneElement *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3);
  *(_QWORD *)v5 = &off_1E6587978;
  *(_QWORD *)(v5 + 16) = &unk_1E65882B0;
  *(_QWORD *)(v5 + 48) = &unk_1E6588508;
  *(_QWORD *)(v5 + 6528) = &unk_1E6588560;
  v6 = (OZChannelFolder *)(v5 + 24408);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 24408), (const OZChannelFolder *)((char *)a2 + 24408), (OZChannelFolder *)(v5 + 320));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 24536), (const OZ3DEnginePlaneElement *)((char *)a2 + 24536), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 26120), (const OZ3DEnginePlaneElement *)((char *)a2 + 26120), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 27704), (const OZ3DEnginePlaneElement *)((char *)a2 + 27704), v6);
  OZChannelColor::OZChannelColor((OZ3DEnginePlaneElement *)((char *)this + 29288), (const OZ3DEnginePlaneElement *)((char *)a2 + 29288), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30448), (const OZChannelBase *)((char *)a2 + 30448), (OZChannelFolder *)((char *)this + 448));
  OZChannel2D::OZChannel2D((OZ3DEnginePlaneElement *)((char *)this + 30600), (const OZ3DEnginePlaneElement *)((char *)a2 + 30600), (OZChannelFolder *)((char *)this + 448));
  Li3DEngineScene::Li3DEngineScene((OZ3DEnginePlaneElement *)((char *)this + 31040));
  *(_OWORD *)((char *)this + 31208) = 0u;
  *((_QWORD *)this + 3903) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 31232), 1);
  *((_QWORD *)this + 3904) = &unk_1E64E2000;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19144), 2, 0);
}

void sub_1B2DF8D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  OZ3DEngineSceneElement *v10;
  OZChannelFolder *v11;
  OZChannelImageWithOptions *v12;
  OZChannelImageWithOptions *v13;
  OZChannelImageWithOptions *v14;
  OZChannelColor *v15;
  OZChannelBool *v16;
  PCMutex *v17;
  OZChannel2D *v18;
  Li3DEngineScene *v19;

  PCMutex::~PCMutex(v17);
  Li3DEngineScene::~Li3DEngineScene(v19);
  OZChannel2D::~OZChannel2D(v18);
  OZChannelBool::~OZChannelBool(v16);
  OZChannelColor::~OZChannelColor(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v14);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v10);
  _Unwind_Resume(a1);
}

void sub_1B2DF8DF4()
{
  JUMPOUT(0x1B2DF8DC4);
}

void sub_1B2DF8DFC()
{
  JUMPOUT(0x1B2DF8DCCLL);
}

void sub_1B2DF8E04()
{
  JUMPOUT(0x1B2DF8DD4);
}

void sub_1B2DF8E0C()
{
  JUMPOUT(0x1B2DF8DDCLL);
}

void sub_1B2DF8E14()
{
  JUMPOUT(0x1B2DF8DE4);
}

void OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this)
{
  *(_QWORD *)this = &off_1E6587978;
  *((_QWORD *)this + 2) = &unk_1E65882B0;
  *((_QWORD *)this + 6) = &unk_1E6588508;
  *((_QWORD *)this + 816) = &unk_1E6588560;

  PCMutex::~PCMutex((PCMutex *)((char *)this + 31232));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 31184, *((PCSharedCount **)this + 3899));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 31160, *((_QWORD **)this + 3896));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3894);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 31120, *((id **)this + 3891));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3888);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)this + 485);
  OZChannel2D::~OZChannel2D((OZ3DEnginePlaneElement *)((char *)this + 30600));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 30448));
  *((_QWORD *)this + 3661) = &off_1E6557D88;
  *((_QWORD *)this + 3663) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30296));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZ3DEnginePlaneElement *)((char *)this + 29288));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 27704));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 26120));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 24536));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24408));
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(this);
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this)
{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 16));
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 48));
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 6528));
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 6528));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DEnginePlaneElement::get3DScene(OZ3DEnginePlaneElement *this)
{
  PCMutex *v2;
  void *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  char *v10;
  uint64_t v11;

  v2 = (PCMutex *)((char *)this + 31232);
  v10 = (char *)this + 31232;
  PCMutex::lock((PCMutex *)((char *)this + 31232));
  LOBYTE(v11) = 1;
  if (!*((_QWORD *)this + 3901))
  {
    v3 = (void *)objc_opt_new();
    *((_QWORD *)this + 3901) = v3;
    objc_msgSend((id)objc_msgSend(v3, "rootNode", v10, v11), "setName:", CFSTR("Plane Element scene root"));
    Li3DEngineScene::set((OZ3DEnginePlaneElement *)((char *)this + 31040), *((SCNScene **)this + 3901));
    v4 = objc_msgSend(MEMORY[0x1E0CD59F8], "planeWithWidth:height:", 1024.0, 1024.0);
    *((_QWORD *)this + 3902) = v4;
    *((_QWORD *)this + 3903) = (id)objc_msgSend(MEMORY[0x1E0CD59D0], "nodeWithGeometry:", v4);
    objc_msgSend((id)objc_msgSend(*((id *)this + 3901), "rootNode"), "addChildNode:", *((_QWORD *)this + 3903));
    Li3DEngineScene::setUseOriginalScene((uint64_t)this + 31040, 1);
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 30736), MEMORY[0x1E0CA2E68], 0.0);
  v6 = v5;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 30888), MEMORY[0x1E0CA2E68], 0.0);
  v8 = v7;
  objc_msgSend(*((id *)this + 3902), "setWidth:", v6);
  objc_msgSend(*((id *)this + 3902), "setHeight:", v8);
  PCMutex::unlock(v2);
  return (uint64_t)this + 31040;
}

void sub_1B2DF9158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

double OZ3DEnginePlaneElement::calcAutomaticUnitSize(OZ3DEnginePlaneElement *this)
{
  return 1.0;
}

void OZ3DEnginePlaneElement::getLocalVolume(uint64_t a1, _OWORD *a2)
{
  std::recursive_mutex *v3;
  SCNScene *Representation;
  __int128 v5;
  _OWORD v6[3];

  if (a2)
  {
    v3 = (std::recursive_mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2336))(a1);
    std::recursive_mutex::lock(v3);
    Representation = (SCNScene *)PCBitmap::getRepresentation((PCBitmap *)v3);
    getSceneBoundingBox(Representation, (uint64_t)v6);
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v6[2];
    std::recursive_mutex::unlock(v3);
  }
}

void sub_1B2DF91DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePlaneElement::makeDataFor3DEngineObject(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X8>, double a6@<D0>)
{
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id *v63;
  SCNNode *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE v75[32];
  __int128 v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[48];
  __int128 v85;
  void **v86;
  __n128 v87;
  CMTimeEpoch v88;
  OZChannelBase v89[3];
  uint64_t v90;
  uint64_t v91;
  void *__p;
  char *v93;
  unint64_t v94;
  __int128 v95[4];
  __int128 v96;
  PCColor v97;
  uint64_t v98;
  id v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  void *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  CMTime v114;
  CMTime v115;
  CMTime v116;
  CMTime v117[2];

  v115 = *(CMTime *)a3;
  v114 = v115;
  v12 = (*(uint64_t (**)(uint64_t, CMTime *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(a1 + 16, &v114, 1, 1, 1);
  Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)&v99);
  v13 = 0;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  LODWORD(v104) = -1;
  v98 = 0;
  if (v12)
    v13 = OZ3DEngineSceneElement::physicsType((OZ3DEngineSceneElement *)a1, &v115);
  LODWORD(v98) = v13;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21384), &v115, 0.0);
  *(_QWORD *)&v111 = v14;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21688), &v115, 0.0);
  *(_QWORD *)&v112 = v15;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21536), &v115, 0.0);
  *((_QWORD *)&v111 + 1) = v16;
  HIDWORD(v98) = (*(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)a1 + 2304))(a1, &v115);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21840), &v115, 0.0);
  *((_QWORD *)&v112 + 1) = v17;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21992), &v115, 0.0);
  v113 = v18;
  v19 = OZ3DEngineSceneElement::get3DWorldOwner((OZ3DEngineSceneElement *)a1);
  if (v19 && !OZ3DEngineSceneElement::is3DNodeInMasterScene((OZ3DEngineSceneElement *)a1, (OZGroup *)v19))
    OZ3DEngineSceneElement::add3DNodeToMasterScene((OZ3DEngineSceneElement *)a1);
  PCColor::PCColor(&v97);
  *(_OWORD *)&v89[0].var0 = *(_OWORD *)a3;
  v89[0].var2 = *(void ***)(a3 + 16);
  OZChannelColor::getColor((OZChannelColor *)(a1 + 29288), (const CMTime *)v89, &v97, 0.0);
  v20 = operator new();
  v21 = *(void **)(a1 + 31224);
  v22 = a4[1];
  v95[0] = *a4;
  v95[1] = v22;
  v23 = a4[3];
  v95[2] = a4[2];
  v95[3] = v23;
  v24 = OZChannel::getValueAsInt((OZChannel *)(a1 + 30448), MEMORY[0x1E0CA2E68], 0.0) != 0;
  OZLi3DEngineTexturedObjectData::OZLi3DEngineTexturedObjectData(v20, a2, v21, v95, (__int128 *)&v97.var0.var0, (const OZRenderParams *)a3, v24, a6);
  std::shared_ptr<OZLi3DEngineTexturedObjectData>::shared_ptr[abi:ne180100]<OZLi3DEngineTexturedObjectData,void>(&v96, v20);
  v93 = 0;
  __p = 0;
  v94 = 0;
  if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(a1 + 24672)))
  {
    v25 = a1 + 24536;
    v26 = v93;
    if ((unint64_t)v93 >= v94)
    {
      v28 = (v93 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v29 = (uint64_t)(v94 - (_QWORD)__p) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (v94 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v94, v30);
      else
        v31 = 0;
      v32 = &v31[8 * v28];
      v33 = &v31[8 * v30];
      *(_QWORD *)v32 = v25;
      v27 = v32 + 8;
      v34 = v93;
      v35 = (char *)__p;
      if (v93 != __p)
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *((_QWORD *)v32 - 1) = v36;
          v32 -= 8;
        }
        while (v34 != v35);
        v34 = (char *)__p;
      }
      __p = v32;
      v93 = v27;
      v94 = (unint64_t)v33;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v93 = v25;
      v27 = v26 + 8;
    }
    v93 = v27;
  }
  if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(a1 + 26256)))
  {
    v37 = a1 + 26120;
    v38 = v93;
    if ((unint64_t)v93 >= v94)
    {
      v40 = (v93 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v40 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v41 = (uint64_t)(v94 - (_QWORD)__p) >> 2;
      if (v41 <= v40 + 1)
        v41 = v40 + 1;
      if (v94 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v94, v42);
      else
        v43 = 0;
      v44 = &v43[8 * v40];
      v45 = &v43[8 * v42];
      *(_QWORD *)v44 = v37;
      v39 = v44 + 8;
      v46 = v93;
      v47 = (char *)__p;
      if (v93 != __p)
      {
        do
        {
          v48 = *((_QWORD *)v46 - 1);
          v46 -= 8;
          *((_QWORD *)v44 - 1) = v48;
          v44 -= 8;
        }
        while (v46 != v47);
        v46 = (char *)__p;
      }
      __p = v44;
      v93 = v39;
      v94 = (unint64_t)v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *(_QWORD *)v93 = v37;
      v39 = v38 + 8;
    }
    v93 = v39;
  }
  if (OZChanElementOrFootageRef::getImageNode((OZChannelBase *)(a1 + 27840)))
  {
    v49 = a1 + 27704;
    v50 = v93;
    if ((unint64_t)v93 >= v94)
    {
      v52 = (v93 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v52 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v53 = (uint64_t)(v94 - (_QWORD)__p) >> 2;
      if (v53 <= v52 + 1)
        v53 = v52 + 1;
      if (v94 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v53;
      if (v54)
        v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v94, v54);
      else
        v55 = 0;
      v56 = &v55[8 * v52];
      v57 = &v55[8 * v54];
      *(_QWORD *)v56 = v49;
      v51 = v56 + 8;
      v58 = v93;
      v59 = (char *)__p;
      if (v93 != __p)
      {
        do
        {
          v60 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v56 - 1) = v60;
          v56 -= 8;
        }
        while (v58 != v59);
        v58 = (char *)__p;
      }
      __p = v56;
      v93 = v51;
      v94 = (unint64_t)v57;
      if (v58)
        operator delete(v58);
    }
    else
    {
      *(_QWORD *)v93 = v49;
      v51 = v50 + 8;
    }
    v93 = v51;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v89, (const OZRenderParams *)a3);
  v87 = 0uLL;
  v88 = 0;
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(a1 + 56), &v87);
  v85 = 0uLL;
  v86 = 0;
  v117[0] = *(CMTime *)a3;
  *(__n128 *)&v116.value = v87;
  v116.epoch = v88;
  PC_CMTimeSaferSubtract(v117, &v116, (uint64_t)&v85);
  *(_OWORD *)&v89[0].var0 = v85;
  v91 = 0;
  v89[0].var2 = v86;
  v90 = 0;
  ImageSourceTransformPairs(v89, (OZChannelImageWithOptions ***)&__p, &v117[0].value);
  v61 = v96;
  if ((CMTime *)(v96 + 2008) != v117)
  {
    std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__assign_with_size[abi:ne180100]<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(v96 + 2008, (const PCSharedCount *)v117[0].value, *(const PCSharedCount **)&v117[0].timescale, 0x8E38E38E38E38E39 * ((*(_QWORD *)&v117[0].timescale - v117[0].value) >> 4));
    v61 = v96;
  }
  *(_BYTE *)(v61 + 424) = v12 ^ 1;
  OZElement::getOpacity((OZElement *)a1, &v115, 0);
  *(_QWORD *)(v61 + 416) = v62;
  v63 = (id *)v96;
  v64 = (SCNNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2288))(a1);
  Li3DEngineObjectData::setSCNNode(v63, v64);
  v65 = v96;
  v74 = v98;
  *(_WORD *)v75 = (_WORD)v99;
  *(_OWORD *)&v75[8] = v100;
  *(_QWORD *)&v75[24] = v101;
  v76 = v102;
  v77 = v103;
  ProCore_Impl::PCNSRefImpl::retain(&v77);
  v78 = v104;
  v79 = v105;
  v80 = v106;
  v81 = v107;
  v82 = v108;
  v83 = v109;
  *(_QWORD *)v84 = v110;
  *(_QWORD *)&v84[40] = v113;
  *(_OWORD *)&v84[24] = v112;
  *(_OWORD *)&v84[8] = v111;
  *(_QWORD *)(v65 + 208) = v74;
  *(_OWORD *)(v65 + 248) = v76;
  v66 = *(_OWORD *)v75;
  *(_OWORD *)(v65 + 232) = *(_OWORD *)&v75[16];
  *(_OWORD *)(v65 + 216) = v66;
  ProCore_Impl::PCNSRefImpl::operator=((id *)(v65 + 264), &v77);
  v67 = *(_OWORD *)&v84[16];
  *(_OWORD *)(v65 + 368) = *(_OWORD *)v84;
  *(_OWORD *)(v65 + 384) = v67;
  *(_OWORD *)(v65 + 400) = *(_OWORD *)&v84[32];
  v68 = v81;
  *(_OWORD *)(v65 + 304) = v80;
  *(_OWORD *)(v65 + 320) = v68;
  v69 = v83;
  *(_OWORD *)(v65 + 336) = v82;
  *(_OWORD *)(v65 + 352) = v69;
  v70 = v79;
  *(_OWORD *)(v65 + 272) = v78;
  *(_OWORD *)(v65 + 288) = v70;
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)v75);
  *a5 = v96;
  v96 = 0uLL;
  v116.value = (CMTimeValue)v117;
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v89);
  if (__p)
  {
    v93 = (char *)__p;
    operator delete(__p);
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v97.var1._obj);
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams(&v99);
}

void sub_1B2DF993C(_Unwind_Exception *a1)
{
  id *v1;
  void *v3;

  v3 = (void *)STACK[0x698];
  if (STACK[0x698])
  {
    STACK[0x6A0] = (unint64_t)v3;
    operator delete(v3);
  }
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x6F0]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x738]);
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams(v1);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineObjectDataBase::Li3DEngineObjectDataBase(uint64_t a1, uint64_t a2, __int128 *a3, char a4, char a5, int a6, uint64_t a7, double a8, float a9, float a10, float a11, float a12, float a13)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = &unk_1E6571ED0;
  *(_QWORD *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a8;
  v15 = *a3;
  v16 = a3[1];
  v17 = a3[2];
  v18 = a3[3];
  *(_QWORD *)(a1 + 168) = &unk_1E64FC250;
  v19 = a1 + 168;
  *(_OWORD *)(v19 - 112) = v17;
  *(_OWORD *)(v19 - 96) = v18;
  *(_OWORD *)(v19 - 144) = v15;
  *(_OWORD *)(v19 - 128) = v16;
  *(_BYTE *)(v19 - 80) = a4;
  *(float *)(v19 - 76) = a9;
  *(float *)(v19 - 72) = a10;
  *(float *)(v19 - 68) = a11;
  *(float *)(v19 - 64) = a12;
  *(float *)(v19 - 60) = a13;
  *(_BYTE *)(v19 - 56) = a5;
  *(_DWORD *)(v19 - 52) = a6;
  *(_OWORD *)(v19 - 32) = xmmword_1B304F270;
  *(_OWORD *)(v19 - 16) = xmmword_1B304F270;
  *(_OWORD *)(v19 - 48) = xmmword_1B304F270;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v20 = *(_DWORD *)(a7 + 12);
  if (v20 <= 0)
    v21 = 0;
  else
    v21 = (2 * v20) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v19, v20, v21);
  if (*(int *)(a7 + 12) >= 1)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      LiLight::operator=(*(_QWORD *)(a1 + 184) + v22, *(_QWORD *)(a7 + 16) + v22);
      ++v23;
      v22 += 944;
    }
    while (v23 < *(int *)(a7 + 12));
  }
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a7 + 24);
  return a1;
}

void std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(a1, a2[1].var0);
    PCSharedCount::~PCSharedCount(a2 + 6);
    operator delete(a2);
  }
}

void std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__assign_with_size[abi:ne180100]<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(uint64_t a1, const PCSharedCount *a2, const PCSharedCount *a3, unint64_t a4)
{
  uint64_t v8;
  PCSharedCount *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const PCSharedCount *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a1 + 16;
  v9 = *(PCSharedCount **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vdeallocate((void **)a1);
    if (a4 > 0x1C71C71C71C71C7)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0xE38E38E38E38E3)
      v11 = 0x1C71C71C71C71C7;
    else
      v11 = v10;
    std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = &a2[2 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,0>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,0>(a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 144;
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v16 - 136));
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B2DF9CB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2DF9CBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vdeallocate(void **a1)
{
  PCSharedCount *v1;
  PCSharedCount *v3;
  void *v4;
  PCSharedCount *v5;

  v1 = (PCSharedCount *)*a1;
  if (*a1)
  {
    v3 = (PCSharedCount *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 18;
        PCSharedCount::~PCSharedCount(v3 - 17);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1C71C71C71C71C8)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = (_OWORD *)(a4 + v7);
      v9 = a2 + v7;
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + v7 + 8), (const PCSharedCount *)(a2 + v7 + 8));
      v10 = *(_OWORD *)(a2 + v7 + 16);
      v11 = *(_OWORD *)(a2 + v7 + 32);
      v12 = *(_OWORD *)(a2 + v7 + 64);
      v8[3] = *(_OWORD *)(a2 + v7 + 48);
      v8[4] = v12;
      v8[1] = v10;
      v8[2] = v11;
      v13 = *(_OWORD *)(a2 + v7 + 80);
      v14 = *(_OWORD *)(a2 + v7 + 96);
      v15 = *(_OWORD *)(a2 + v7 + 128);
      v8[7] = *(_OWORD *)(a2 + v7 + 112);
      v8[8] = v15;
      v8[5] = v13;
      v8[6] = v14;
      v7 += 144;
    }
    while (v9 + 144 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2DF9E14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 136;
    do
    {
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v4 + v2));
      v2 -= 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

const PCSharedCount *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,0>(const PCSharedCount *a1, const PCSharedCount *a2, PCSharedCount *a3)
{
  const PCSharedCount *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>::operator=[abi:ne180100](a3, v4);
      v4 += 18;
      a3 += 18;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

PCSharedCount *std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>::operator=[abi:ne180100](PCSharedCount *a1, const PCSharedCount *a2)
{
  uint64_t *v4;
  uint64_t v5;
  const PCSharedCount *v6;
  PCSharedCount *v7;
  uint64_t i;
  PCSharedCount v10;

  a1->var0 = a2->var0;
  v4 = (uint64_t *)&a1[1];
  PCSharedCount::PCSharedCount(&v10, a2 + 1);
  PCSharedCount::operator=(v4, (uint64_t *)&v10);
  PCSharedCount::~PCSharedCount(&v10);
  if (a2 != a1)
  {
    v5 = 0;
    v6 = a2 + 2;
    v7 = a1 + 2;
    do
    {
      for (i = 0; i != 4; ++i)
        v7[i] = v6[i];
      ++v5;
      v7 += 4;
      v6 += 4;
    }
    while (v5 != 4);
  }
  return a1;
}

void sub_1B2DF9F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

void std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  PCSharedCount *v2;
  PCSharedCount *v4;
  void *v5;
  PCSharedCount *v6;

  v1 = *a1;
  v2 = (PCSharedCount *)**a1;
  if (v2)
  {
    v4 = (PCSharedCount *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 18;
        PCSharedCount::~PCSharedCount(v4 - 17);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::shared_ptr<OZLi3DEngineTexturedObjectData>::shared_ptr[abi:ne180100]<OZLi3DEngineTexturedObjectData,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6588668;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2DFA058(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineTexturedObjectData *,std::shared_ptr<OZLi3DEngineTexturedObjectData>::__shared_ptr_default_delete<OZLi3DEngineTexturedObjectData,OZLi3DEngineTexturedObjectData>,std::allocator<OZLi3DEngineTexturedObjectData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineTexturedObjectData *,std::shared_ptr<OZLi3DEngineTexturedObjectData>::__shared_ptr_default_delete<OZLi3DEngineTexturedObjectData,OZLi3DEngineTexturedObjectData>,std::allocator<OZLi3DEngineTexturedObjectData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void OZSimStateArray::OZSimStateArray(OZSimStateArray *this)
{
  uint64_t v1;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v1 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 5) = *(_QWORD *)(v1 + 16);
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8);
}

void sub_1B2DFA128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void OZSimStateArray::OZSimStateArray(OZSimStateArray *this, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = std::vector<OZSimStateElement>::vector(this, a2);
  v3 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v2 + 3) = *MEMORY[0x1E0CA2E68];
  v2[5] = *(_QWORD *)(v3 + 16);
  *((_BYTE *)v2 + 48) = 0;
  v2[7] = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)v2 + 8);
}

void sub_1B2DFA19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<OZSimStateElement>::vector(_QWORD *a1, unint64_t a2)
{
  OZSimStateElement *v4;
  uint64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<OZSimStateElement>::__vallocate[abi:ne180100](a1, a2);
    v4 = (OZSimStateElement *)a1[1];
    v5 = 248 * a2;
    v6 = (char *)v4 + 248 * a2;
    do
    {
      OZSimStateElement::OZSimStateElement(v4);
      v4 = (OZSimStateElement *)((char *)v4 + 248);
      v5 -= 248;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_1B2DFA22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void OZSimStateArray::OZSimStateArray(OZSimStateArray *this, const OZSimStateArray *a2)
{
  __int128 v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<OZSimStateElement>::__init_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v4 = *(_OWORD *)((char *)a2 + 24);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = v4;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8, (const PCSharedCount *)a2 + 8);
}

void sub_1B2DFA2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void OZSimStateArray::~OZSimStateArray(PCSharedCount *this)
{
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(this + 8);
  v2 = this;
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void OZSimStateArray::operator=(uint64_t a1, uint64_t a2)
{
  PCSharedCount v4;

  if (a1 != a2)
    std::vector<OZSimStateElement>::__assign_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  PCSharedCount::PCSharedCount(&v4, (const PCSharedCount *)(a2 + 64));
  PCSharedCount::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
}

void sub_1B2DFA3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void OZSimStateArray::setOwnedObject(PCShared_base **this, PCShared *a2)
{
  PCPtr<ProShade::Node>::reset<ProShade::Node>(this + 7, a2);
}

void OZSimStateArray::setOwnedObjectFrom(PCSharedCount *this, const PCSharedCount *a2)
{
  uint64_t *v2;
  PCSharedCount v3;

  this[7].var0 = a2[7].var0;
  v2 = (uint64_t *)&this[8];
  PCSharedCount::PCSharedCount(&v3, a2 + 8);
  PCSharedCount::operator=(v2, (uint64_t *)&v3);
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B2DFA42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

_QWORD *OZSimStateArray::clearForces(_QWORD *this)
{
  _OWORD *i;

  for (i = (_OWORD *)*this; i != (_OWORD *)this[1]; i = (_OWORD *)((char *)i + 248))
  {
    i[9] = 0uLL;
    i[10] = 0uLL;
    i[8] = 0uLL;
  }
  return this;
}

void OZSimStateArray::stepFrom(OZSimStateArray *this, OZSimStateArray *a2, CMTime *a3, double a4)
{
  CMTime v4;

  v4 = *a3;
  OZSimStateArray::stepFrom(this, a2, a2, &v4, a4);
}

void OZSimStateArray::stepFrom(OZSimStateArray *this, OZSimStateArray *a2, OZSimStateArray *a3, CMTime *a4, double a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CMTime v23;
  CMTime v24;

  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    v10 = *(_QWORD *)a3;
    v11 = *(_QWORD *)a2;
    do
    {
      v16 = 0;
      v17 = 0;
      v15 = 0;
      v14 = 0x3FF0000000000000;
      v18 = 0x3FF0000000000000;
      v20 = 0;
      v21 = 0;
      v19 = 0;
      v22 = 0x3FF0000000000000;
      OZSimStateElement::stepFrom(v8, v11, v10, a5, 1.0);
      v8 += 248;
      v11 += 248;
      v10 += 248;
    }
    while (v8 != *((_QWORD *)this + 1));
  }
  v24 = *(CMTime *)((_BYTE *)a2 + 1);
  v23 = *a4;
  PC_CMTimeSaferAdd(&v24, &v23, (uint64_t)&v12);
  *(_OWORD *)((char *)this + 24) = v12;
  *((_QWORD *)this + 5) = v13;
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v24, (const PCSharedCount *)a2 + 8);
  PCSharedCount::operator=((uint64_t *)this + 8, &v24.value);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v24);
  *((_BYTE *)this + 48) = 0;
}

void sub_1B2DFA5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCSharedCount a25)
{
  PCSharedCount::~PCSharedCount(&a25);
  _Unwind_Resume(a1);
}

void std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v4 - 248));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<OZSimStateElement>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x108421084210843)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OZSimStateElement>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

_QWORD *std::vector<OZSimStateElement>::__init_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<OZSimStateElement>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2DFA718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      OZSimStateElement::OZSimStateElement((OZSimStateElement *)(a4 + v7), (const OZSimStateElement *)(a2 + v7));
      v7 += 248;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2DFA794(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 248;
    do
    {
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v4 + v2));
      v2 -= 248;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<OZSimStateElement>::__assign_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<OZSimStateElement>::__vdeallocate((void **)a1);
    if (a4 > 0x108421084210842)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x84210842108421)
      v11 = 0x108421084210842;
    else
      v11 = v10;
    std::vector<OZSimStateElement>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (__int128 *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,OZSimStateElement *,OZSimStateElement *,OZSimStateElement *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,OZSimStateElement *,OZSimStateElement *,OZSimStateElement *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v16 - 248));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B2DFA930(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2DFA938(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<OZSimStateElement>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v3 - 248));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,OZSimStateElement *,OZSimStateElement *,OZSimStateElement *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      OZSimStateElement::operator=(a3, v4);
      v4 = (__int128 *)((char *)v4 + 248);
      a3 += 248;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t i;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  v5 = 0;
  *(_QWORD *)(v6 + 16) = &unk_1E65889D8;
  *(_QWORD *)v6 = &off_1E65886E0;
  *(_QWORD *)(v6 + 48) = &unk_1E6588C30;
  *(_QWORD *)(v6 + 352) = 0;
  *(_QWORD *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_QWORD *)(v6 + 368) = 0;
  *(_QWORD *)(v6 + 376) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 392) = 0;
  *(_QWORD *)(v6 + 400) = 0;
  *(_QWORD *)(v6 + 384) = 0;
  *(_QWORD *)(v6 + 544) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 504) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(v6 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  do
  {
    v7 = (char *)this + v5;
    *((_QWORD *)v7 + 74) = 0;
    *((_OWORD *)v7 + 36) = 0uLL;
    *((_QWORD *)v7 + 75) = 0x3FF0000000000000;
    *((_QWORD *)v7 + 76) = 0;
    *(_OWORD *)((char *)this + v5 + 616) = 0uLL;
    v5 += 88;
  }
  while (v5 != 528);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 10, 0);
  for (i = 632; i != 1160; i += 88)
    *((_BYTE *)this + i) = 0;
  *((_DWORD *)this + 270) = 0;
  *((_QWORD *)this + 42) = 0;
}

void sub_1B2DFAC44(_Unwind_Exception *a1)
{
  OZSimulationBehavior *v1;

  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this, OZSimSystemMoToFoBehavior *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t i;

  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  v4 = 0;
  *(_QWORD *)(v5 + 16) = &unk_1E65889D8;
  *(_QWORD *)v5 = &off_1E65886E0;
  *(_QWORD *)(v5 + 48) = &unk_1E6588C30;
  *(_QWORD *)(v5 + 352) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 376) = 0x3FF0000000000000;
  *(_QWORD *)(v5 + 392) = 0;
  *(_QWORD *)(v5 + 400) = 0;
  *(_QWORD *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 544) = 0x3FF0000000000000;
  *(_QWORD *)(v5 + 504) = 0x3FF0000000000000;
  *(_QWORD *)(v5 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(v5 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  do
  {
    v6 = (char *)this + v4;
    *((_QWORD *)v6 + 74) = 0;
    *((_OWORD *)v6 + 36) = 0uLL;
    *((_QWORD *)v6 + 75) = 0x3FF0000000000000;
    *((_QWORD *)v6 + 76) = 0;
    *(_OWORD *)((char *)this + v4 + 616) = 0uLL;
    v4 += 88;
  }
  while (v4 != 528);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 10, 0);
  for (i = 632; i != 1160; i += 88)
    *((_BYTE *)this + i) = 0;
  *((_DWORD *)this + 270) = 0;
  *((_QWORD *)this + 42) = 0;
}

void sub_1B2DFAD2C(_Unwind_Exception *a1)
{
  OZSimulationBehavior *v1;

  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E65886E0;
  *((_QWORD *)this + 2) = &unk_1E65889D8;
  *((_QWORD *)this + 6) = &unk_1E6588C30;
  if (OZBehavior::getSceneNode(this))
  {
    v2 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 320))(this);
    v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 640))(v2);
    OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  }
  OZSimulationBehavior::~OZSimulationBehavior(this);
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this)
{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((OZSimSystemMoToFoBehavior *)((char *)this - 16));
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((OZSimSystemMoToFoBehavior *)((char *)this - 48));
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((OZSimSystemMoToFoBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((OZSimSystemMoToFoBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSimSystemMoToFoBehavior::operator=(uint64_t a1)
{
  uint64_t result;

  result = OZSimulationBehavior::operator=();
  *(_QWORD *)(a1 + 336) = 0;
  return result;
}

uint64_t OZSimSystemMoToFoBehavior::findCachedValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, CMTime *a6, CMTime *a7)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  CMTime *v16;
  CMTime *v17;
  uint64_t SampleNumber;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime time2;
  CMTime time1;

  v13 = 0;
  v14 = a5;
  v15 = -528;
  do
  {
    v16 = (CMTime *)(a1 + v15);
    if (*(_BYTE *)(a1 + v15 + 1160))
    {
      v17 = v16 + 45;
      time1 = *a6;
      time2 = v16[45];
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        memset(&v27, 0, sizeof(v27));
        time1 = *v17;
        time2 = *a6;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
        v26 = v27;
        v25 = *a7;
        SampleNumber = PC_CMTimeGetSampleNumber(&v26, &v25);
        if (SampleNumber < v14)
        {
          v19 = a1 + v15;
          v20 = (_QWORD *)(a2 + 8 * SampleNumber);
          *v20 = *(_QWORD *)(a1 + v15 + 1104);
          v20[3] = *(_QWORD *)(a1 + v15 + 1112);
          v20[6] = *(_QWORD *)(a1 + v15 + 1120);
          v21 = (_QWORD *)(a1 + v15 + 1128);
          v22 = a3 + 32 * SampleNumber;
          if (v21 != (_QWORD *)v22)
          {
            *(_QWORD *)v22 = *v21;
            v23 = *(_OWORD *)(v19 + 1136);
            *(_QWORD *)(v22 + 24) = *(_QWORD *)(v19 + 1152);
            *(_OWORD *)(v22 + 8) = v23;
          }
          v13 = 1;
          *(_BYTE *)(a4 + SampleNumber) = 1;
        }
      }
    }
    v15 += 88;
  }
  while (v15);
  return v13 & 1;
}

uint64_t OZSimSystemMoToFoBehavior::didAddToNode(OZSimSystemMoToFoBehavior *this, OZSceneNode *a2)
{
  _QWORD *v4;
  uint64_t result;

  OZSimulationBehavior::didAddToNode((uint64_t)this, a2);
  v4 = (_QWORD *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  OZChannelObjectRoot::addBehavior(v4, (uint64_t)this);
  result = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 720))(this);
  *((_QWORD *)this + 42) = result;
  return result;
}

void OZSimSystemMoToFoBehavior::willRemove(OZSimSystemMoToFoBehavior *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 320))(this);
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 640))(v2);
  OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  *((_QWORD *)this + 42) = 0;
}

double OZSimSystemMoToFoBehavior::calcParentsDerivatives(OZSimSystemMoToFoBehavior *this, OZSimulationState *a2)
{
  double v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __n128 *v11;
  _OWORD *v12;
  uint64_t v13;
  CMTimeValue v14;
  uint64_t v15;
  CMTimeValue v16;
  CMTimeValue *v17;
  CMTimeValue v18;
  CMTimeValue v19;
  CMTimeValue v20;
  CMTimeValue *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CMTime *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  CMTimeEpoch *p_epoch;
  CMTimeEpoch v35;
  CMTimeEpoch v36;
  const void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  __n128 *v41;
  unint64_t v42;
  unint64_t v43;
  int64_t *v44;
  int64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t *v48;
  CMTime *v49;
  int v50;
  CMTime *v51;
  uint64_t v52;
  CMTimeEpoch v53;
  CMTime *v54;
  char *v55;
  double v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v93;
  CMTime v94;
  CMTime *v95;
  CMTime v96;
  CMTime v97;
  unsigned int v98;
  CMTime v99;
  CMTime v100;
  CMTime v101;
  __int128 v102;
  int64_t v103;
  __int16 v104;
  char v105;
  CMTime v106;
  CMTime v107;
  CMTime v108;
  CMTime v109;
  CMTime v110;
  OZRenderState v111;
  _QWORD v112[3];
  $3CC8671D27C23BF42ADDB32F2B5E48AE v113;
  CMTime v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  _OWORD v124[3];
  __int128 v125;
  uint64_t v126;
  __n128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  double v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  memset(&v107, 0, sizeof(v107));
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((_QWORD *)this + 42) + 56), &v127);
  *(_OWORD *)&v111.var0.var0 = *((_OWORD *)a2 + 11);
  v111.var0.var3 = *((_QWORD *)a2 + 24);
  *(__n128 *)&v114.value = v127;
  v114.epoch = v128;
  v4 = PC_CMTimeSaferSubtract((CMTime *)&v111, &v114, (uint64_t)&v107);
  memset(&v106, 0, sizeof(v106));
  v5 = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 42) + 272))(*((_QWORD *)this + 42), v4);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v106);
  v6 = 0uLL;
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  if (!*((_QWORD *)this + 42))
    return *(double *)&v6;
  v7 = 0;
  v131 = 0.0;
  v129 = 0uLL;
  v130 = 0uLL;
  v127 = 0uLL;
  v128 = 0uLL;
  v126 = 0;
  v125 = 0uLL;
  memset(v124, 0, sizeof(v124));
  do
  {
    v8 = (CMTimeValue *)((char *)&v114.value + v7);
    *v8 = 0x3FF0000000000000;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    v7 += 32;
  }
  while (v7 != 96);
  v105 = 0;
  v104 = 0;
  v102 = 0uLL;
  v103 = 0;
  v101 = v107;
  v100 = v106;
  PC_CMTimeFloorToSampleDuration(&v101, &v100, (uint64_t)&v102);
  memset(&v99, 0, sizeof(v99));
  *(_OWORD *)&v111.var0.var0 = v102;
  v111.var0.var3 = v103;
  v110 = v106;
  PC_CMTimeSaferSubtract((CMTime *)&v111, &v110, (uint64_t)&v99);
  v98 = 3;
  v9 = *((_QWORD *)this + 42);
  if (*((_BYTE *)this + 344))
  {
    v113.var0 = v9 + 1352;
    *(_QWORD *)&v113.var1 = v9 + 1504;
    v113.var3 = v9 + 1952;
    v112[0] = v9 + 2240;
    v112[1] = v9 + 2392;
    v93 = v9;
    v112[2] = v9 + 2544;
    v97 = v99;
    v96 = v106;
    v95 = (CMTime *)&v111;
    if ((OZSimSystemMoToFoBehavior::findCachedValues((uint64_t)this, (uint64_t)&v127, (uint64_t)&v114, (uint64_t)&v104, 3, &v97, &v96) & 1) != 0)
    {
      v94 = v99;
      if (v98)
      {
        v10 = 0;
        v11 = &v127;
        v12 = v124;
        do
        {
          if (!*((_BYTE *)&v104 + v10))
          {
            v13 = 0;
            v14 = (CMTimeValue)v11;
            do
            {
              v110.value = v14;
              LODWORD(v109.value) = 1;
              OZChannel::getSamples(*(OZChannel **)((char *)&v113.var0 + v13), &v94, &v106, (unsigned int *)&v109, &v95, (double **)&v110);
              v13 += 8;
              v14 += 24;
            }
            while (v13 != 24);
            v15 = 0;
            v16 = (CMTimeValue)v12;
            do
            {
              v110.value = v16;
              LODWORD(v109.value) = 1;
              OZChannel::getSamples((OZChannel *)v112[v15++], &v94, &v106, (unsigned int *)&v109, &v95, (double **)&v110);
              v16 += 24;
            }
            while (v15 != 3);
            v17 = (CMTimeValue *)v124 + v10;
            v18 = *v17;
            v19 = v17[3];
            v20 = v17[6];
            v21 = &v114.value + 4 * v10;
            *v21 = v18;
            v21[1] = v19;
            v21[2] = v20;
            v21[3] = 0x4010000000000000;
          }
          v109 = v94;
          v108 = v106;
          PC_CMTimeSaferAdd(&v109, &v108, (uint64_t)&v110);
          ++v10;
          v94 = v110;
          v11 = (__n128 *)((char *)v11 + 8);
          v12 = (_OWORD *)((char *)v12 + 8);
        }
        while (v10 < v98);
      }
      v9 = v93;
    }
    else
    {
      v29 = 0;
      v30 = &v127;
      do
      {
        v110.value = (CMTimeValue)v30;
        OZChannel::getSamples(*(OZChannel **)((char *)&v113.var0 + v29), &v99, &v106, &v98, &v95, (double **)&v110);
        v30 = (__n128 *)((char *)v30 + 24);
        v29 += 8;
      }
      while (v29 != 24);
      v31 = 0;
      v32 = v124;
      do
      {
        v110.value = (CMTimeValue)v32;
        OZChannel::getSamples((OZChannel *)v112[v31], &v99, &v106, &v98, &v95, (double **)&v110);
        v32 = (_OWORD *)((char *)v32 + 24);
        ++v31;
      }
      while (v31 != 3);
      v33 = 0;
      p_epoch = &v114.epoch;
      v9 = v93;
      do
      {
        v35 = *(_QWORD *)((char *)&v124[1] + v33 + 8);
        v36 = *(_QWORD *)((char *)&v125 + v33);
        *(p_epoch - 2) = *(_QWORD *)((char *)v124 + v33);
        *(p_epoch - 1) = v35;
        *p_epoch = v36;
        p_epoch[1] = 0x4010000000000000;
        v33 += 8;
        p_epoch += 4;
      }
      while (v33 != 24);
    }
  }
  else
  {
    v22 = 0;
    v23 = *((_QWORD *)this + 44);
    v24 = *((_QWORD *)this + 45);
    v25 = *((_QWORD *)this + 46);
    v26 = (CMTime *)((char *)this + 376);
    v27 = (_QWORD *)&v128 + 1;
    do
    {
      *(v27 - 3) = v23;
      *v27 = v24;
      v27[3] = v25;
      v28 = (char *)&v114 + v22;
      if ((CMTime *)((char *)&v114 + v22) != v26)
      {
        *(_QWORD *)v28 = v26->value;
        *(_OWORD *)(v28 + 8) = *((_OWORD *)this + 24);
        *((_QWORD *)v28 + 3) = *((_QWORD *)this + 50);
      }
      v22 += 32;
      ++v27;
    }
    while (v22 != 96);
  }
  v37 = *(const void **)(v9 + 960);
  if (!v37)
    goto LABEL_41;
  if (!v38)
    goto LABEL_41;
  if (*((_BYTE *)this + 416))
  {
    v39 = v38;
    memset(&v113, 0, sizeof(v113));
    OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((_QWORD *)this + 42) + 56), (__n128 *)&v109);
    v111.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v99;
    v110 = v109;
    PC_CMTimeSaferAdd((CMTime *)&v111, &v110, (uint64_t)&v113);
    OZRenderState::OZRenderState(&v111);
    if (v98)
    {
      v40 = 0;
      v41 = &v127;
      do
      {
        if (!*((_BYTE *)&v104 + v40))
        {
          v111.var0 = v113;
          (*(void (**)(void *, __n128 *, uint64_t *, __n128 *, OZRenderState *))(*(_QWORD *)v39 + 1224))(v39, v41, &v41[1].n128_i64[1], v41 + 3, &v111);
        }
        v109 = (CMTime)v113;
        v108 = v106;
        PC_CMTimeSaferAdd(&v109, &v108, (uint64_t)&v110);
        ++v40;
        v113 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v110;
        v41 = (__n128 *)((char *)v41 + 8);
      }
      while (v40 < v98);
    }
LABEL_41:
    v109 = v99;
    if (v98)
    {
      v47 = 0;
      v48 = (uint64_t *)&v128 + 1;
      v49 = &v114;
      do
      {
        if (!*((_BYTE *)&v104 + v47))
        {
          v50 = *((_DWORD *)this + 270);
          *((_DWORD *)this + 270) = (v50 + 1) % 6;
          v51 = (CMTime *)((char *)this + 88 * v50);
          v51[23] = v109;
          v52 = *v48;
          v53 = v48[3];
          v51[24].value = *(v48 - 3);
          *(_QWORD *)&v51[24].timescale = v52;
          v51[24].epoch = v53;
          v54 = v51 + 25;
          if (v49 != v54)
          {
            v54->value = v49->value;
            v55 = (char *)this + 88 * v50;
            *((_OWORD *)v55 + 38) = *(_OWORD *)&v49->timescale;
            *((_QWORD *)v55 + 78) = v49[1].value;
          }
          *((_BYTE *)this + 88 * v50 + 632) = 1;
        }
        v111.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v109;
        v110 = v106;
        PC_CMTimeSaferAdd((CMTime *)&v111, &v110, (uint64_t)&v109);
        ++v47;
        v49 = (CMTime *)((char *)v49 + 32);
        ++v48;
      }
      while (v47 < v98);
    }
    goto LABEL_48;
  }
  v42 = v98;
  if (v98)
  {
    v43 = 0;
    do
    {
      if (!*((_BYTE *)&v104 + v43))
      {
        v44 = &v127.n128_i64[v43];
        v45 = v44[3];
        v46 = v44[6];
        v111.var0.var0 = *v44;
        *(_QWORD *)&v111.var0.var1 = v45;
        v111.var0.var3 = v46;
        PCMatrix44Tmpl<double>::transform<double>((double *)this + 53, (double *)&v111.var0.var0, (double *)&v111.var0.var0);
        *v44 = v111.var0.var0;
        v44[3] = *(_QWORD *)&v111.var0.var1;
        v44[6] = v111.var0.var3;
        v42 = v98;
      }
      ++v43;
    }
    while (v43 < v42);
    goto LABEL_41;
  }
LABEL_48:
  v56 = *((double *)this + 51);
  v57 = v127.n128_u64[0];
  v58 = v56 * (v127.n128_f64[1] - v127.n128_f64[0]);
  v59 = *((_QWORD *)&v128 + 1);
  v60 = v56 * (*(double *)&v129 - *((double *)&v128 + 1));
  v61 = v130;
  v62 = v56 * (*((double *)&v130 + 1) - *(double *)&v130);
  v63 = v56 * (v56 * (v131 - *((double *)&v130 + 1)) - v62);
  v64 = v56 * (v56 * (*((double *)&v129 + 1) - *(double *)&v129) - v60) + *((double *)a2 + 17);
  *((double *)a2 + 16) = *((double *)a2 + 16) + v56 * (v56 * (*(double *)&v128 - v127.n128_f64[1]) - v58);
  *((double *)a2 + 17) = v64;
  *((double *)a2 + 18) = v63 + *((double *)a2 + 18);
  *(_QWORD *)a2 = v57;
  *((_QWORD *)a2 + 1) = v59;
  *((_QWORD *)a2 + 2) = v61;
  *((double *)a2 + 7) = v58;
  *((double *)a2 + 8) = v60;
  *((double *)a2 + 9) = v62;
  v65 = (v56 + v56) * (v116 - *(double *)&v114.value);
  v66 = (v56 + v56) * (v117 - *(double *)&v114.timescale);
  v67 = (v56 + v56) * (v118 - *(double *)&v114.epoch);
  v68 = (v56 + v56) * (v119 - v115);
  v69 = *(double *)&v114.value * v68 - v65 * v115;
  v70 = *(double *)&v114.value * v66 - *(double *)&v114.timescale * v65 + *(double *)&v114.epoch * v68 - v115 * v67;
  v71 = *(double *)&v114.value * v67 - v65 * *(double *)&v114.epoch + v66 * v115 - *(double *)&v114.timescale * v68;
  v72 = *(double *)&v114.timescale * v67 - *(double *)&v114.epoch * v66 + v69;
  v73 = (v56 + v56) * (v120 - v116);
  v74 = (v56 + v56) * (v121 - v117);
  v75 = (v56 + v56) * (v122 - v118);
  v76 = (v56 + v56) * (v123 - v119);
  v77 = v116 * v76 - v119 * v73;
  v78 = v116 * v74 - v117 * v73 + v118 * v76 - v119 * v75;
  v79 = v116 * v75 - v118 * v73 + v119 * v74 - v117 * v76;
  v80 = v117 * v75 - v118 * v74 + v77;
  v81 = v79 * 0.0;
  v82 = v80 * 0.0 + v78 + v79 * 0.0;
  v83 = v78 * 0.0;
  v84 = v80 * 0.0 + v79 + v83;
  v85 = v80 + v83 + v81;
  v86 = v84 - (v72 * 0.0 + v71 + v70 * 0.0);
  v87 = v85 - (v72 + v70 * 0.0 + v71 * 0.0);
  v88 = v56 * (v82 - (v72 * 0.0 + v70 + v71 * 0.0));
  v89 = v56 * v86;
  v90 = v56 * v87;
  if (&v114 != (CMTime *)((char *)a2 + 24))
  {
    *((CMTime *)a2 + 1) = v114;
    *((double *)a2 + 6) = v115;
  }
  *((double *)a2 + 10) = v70;
  *((double *)a2 + 11) = v71;
  *((double *)a2 + 12) = v72;
  *((double *)a2 + 13) = v70;
  *((double *)a2 + 14) = v71;
  *((double *)a2 + 15) = v72;
  v91 = v89 + *((double *)a2 + 20);
  *((double *)a2 + 19) = v88 + *((double *)a2 + 19);
  *((double *)a2 + 20) = v91;
  *(double *)&v6 = v90 + *((double *)a2 + 21);
  *((_QWORD *)a2 + 21) = v6;
  return *(double *)&v6;
}

void OZSimSystemMoToFoBehavior::accumForces(OZSimSystemMoToFoBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  double v5;
  float64x2_t v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float64x2_t v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  if (*((_QWORD *)this + 42)
    || ((*(void (**)(OZSimSystemMoToFoBehavior *, OZSimStateArray *, OZTransformNode *))(*(_QWORD *)this
                                                                                                  + 712))(this, a2, a3), *((_QWORD *)this + 42)))
  {
    if (*((_BYTE *)this + 344) || *((_BYTE *)this + 416))
    {
      v46 = *(_OWORD *)((char *)a2 + 24);
      v47 = *((_QWORD *)a2 + 5);
      v5 = (*(double (**)(OZSimSystemMoToFoBehavior *, __int128 *, OZTransformNode *))(*(_QWORD *)this + 728))(this, &v46, a3);
      if (fabs(v5) >= 0.0000001)
      {
        v29 = v5;
        v30 = 0.0;
        v31 = 0.0;
        v32 = 0.0;
        v33 = 0x3FF0000000000000;
        v44 = 0;
        v45 = 0;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        memset(v41, 0, 32);
        v6 = *(float64x2_t *)((char *)a2 + 24);
        v42 = *((_QWORD *)a2 + 5);
        v43 = 0;
        v41[2] = v6;
        OZSimSystemMoToFoBehavior::calcParentsDerivatives(this, (OZSimulationState *)&v30);
        if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
        {
          v7 = (double *)(*(_QWORD *)a2 + 168);
          do
          {
            v8 = v7 - 21;
            v9 = *(v7 - 21) - v30;
            v10 = *(v7 - 20) - v31;
            v11 = *(v7 - 19) - v32;
            v12 = sqrt(v9 * v9 + v10 * v10 + v11 * v11);
            if (v12 <= 0.1)
            {
              v25 = *((double *)&v40 + 1);
              v24 = *(double *)&v40;
              v26 = v41[0].f64[0];
            }
            else
            {
              v13 = v11 * v41[1].f64[0] - v10 * v41[1].f64[1];
              v14 = v9 * v41[1].f64[1] - v11 * v41[0].f64[1];
              v15 = v10 * v41[0].f64[1] - v9 * v41[1].f64[0];
              v16 = sqrt(v15 * v15 + v13 * v13 + v14 * v14);
              if (v16 <= -0.000000100000001 || v16 >= 0.000000100000001)
              {
                v13 = v13 / v16;
                v14 = v14 / v16;
                v15 = v15 / v16;
              }
              v17 = v10 + *((double *)&v37 + 1);
              v18 = v11 + *(double *)&v38;
              v19 = *((double *)&v37 + 1) * v18 - *(double *)&v38 * v17;
              v20 = v9 + *(double *)&v37;
              v21 = v20 * *(double *)&v38 - *(double *)&v37 * v18;
              v22 = v41[0].f64[1] / v12 * v13;
              v23 = *(double *)&v37 * v17 - *((double *)&v37 + 1) * v20 + v41[0].f64[0];
              v24 = v22 + v19 + *(double *)&v40;
              v25 = v41[1].f64[0] / v12 * v14 + v21 + *((double *)&v40 + 1);
              v26 = v41[1].f64[1] / v12 * v15 + v23;
            }
            v27 = v29 * v25 + *(v7 - 4);
            *(v7 - 5) = v29 * v24 + *(v7 - 5);
            *(v7 - 4) = v27;
            *(v7 - 3) = v29 * v26 + *(v7 - 3);
            if ((*(unsigned int (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 736))(this))
            {
              v28 = v29 * v41[1].f64[1];
              *((float64x2_t *)v7 - 1) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)((char *)v41 + 8), v29), *(float64x2_t *)(v7 - 2));
              *v7 = v28 + *v7;
            }
            v7 += 31;
          }
          while (v8 + 31 != *((double **)a2 + 1));
        }
      }
    }
  }
}

void OZSimSystemMoToFoBehavior::calcParentsInitialValues(OZSimSystemMoToFoBehavior *this, OZSimulationState *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  const void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v48;
  CMTime *v49;
  unsigned int v50;
  CMTime v51;
  CMTime v52;
  CMTime v53;
  __int128 v54;
  int64_t v55;
  CMTime v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  CMTime v64;
  CMTime v65;
  int v66;
  __n128 *v67;
  char v68;
  CMTime v69;
  CMTime v70;
  CMTime v71;
  CMTime v72;
  CMTime v73;
  OZRenderState v74;
  CMTime v75[2];
  _QWORD v76[3];
  _QWORD v77[3];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __n128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  memset(&v70, 0, sizeof(v70));
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((_QWORD *)this + 42) + 56), &v81);
  *(_OWORD *)&v74.var0.var0 = *((_OWORD *)a2 + 11);
  v74.var0.var3 = *((_QWORD *)a2 + 24);
  *(__n128 *)&v56.value = v81;
  v56.epoch = v82;
  v4 = PC_CMTimeSaferSubtract((CMTime *)&v74, &v56, (uint64_t)&v70);
  memset(&v69, 0, sizeof(v69));
  v5 = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 42) + 272))(*((_QWORD *)this + 42), v4);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v69);
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  LOWORD(v56.value) = 1;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v57 = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_QWORD *)&v56.timescale = 0;
  v58 = v6;
  v59 = v57;
  v60 = v6;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  *(_OWORD *)&v64.value = *MEMORY[0x1E0CA2E68];
  v7 = *MEMORY[0x1E0CA2E68];
  v64.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v65.epoch = v64.epoch;
  *(_OWORD *)&v65.value = v7;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v54 = 0uLL;
  v55 = 0;
  v53 = v70;
  v52 = v69;
  PC_CMTimeFloorToSampleDuration(&v53, &v52, (uint64_t)&v54);
  memset(&v51, 0, sizeof(v51));
  *(_OWORD *)&v74.var0.var0 = v54;
  v74.var0.var3 = v55;
  v75[0] = v69;
  PC_CMTimeSaferSubtract((CMTime *)&v74, v75, (uint64_t)&v51);
  v8 = 0;
  v64 = v51;
  v50 = 2;
  v66 = 2;
  v65 = v69;
  v9 = *((_QWORD *)this + 42);
  v77[0] = v9 + 1352;
  v77[1] = v9 + 1504;
  v77[2] = v9 + 1952;
  v76[0] = v9 + 2240;
  v76[1] = v9 + 2392;
  v76[2] = v9 + 2544;
  v10 = &v81;
  v49 = v75;
  do
  {
    v74.var0.var0 = (int64_t)v10;
    v67 = v10;
    OZChannel::getSamples((OZChannel *)v77[v8++], &v51, &v69, &v50, &v49, (double **)&v74);
    ++v10;
  }
  while (v8 != 3);
  v11 = 0;
  v12 = (__n128 *)&v78;
  do
  {
    v74.var0.var0 = (int64_t)v12;
    v67 = v12;
    OZChannel::getSamples((OZChannel *)v76[v11++], &v51, &v69, &v50, &v49, (double **)&v74);
    ++v12;
  }
  while (v11 != 3);
  v13 = *(double *)&v78;
  v14 = *(double *)&v79;
  v15 = *(double *)&v80;
  if (!*((_BYTE *)this + 344))
  {
    v16 = v82;
    v17 = v83;
    *((_QWORD *)this + 44) = v81.n128_u64[0];
    *((_QWORD *)this + 45) = v16;
    *((_QWORD *)this + 46) = v17;
    *((double *)this + 47) = v13;
    *((double *)this + 48) = v14;
    *((double *)this + 49) = v15;
    *((_QWORD *)this + 50) = 0x4010000000000000;
  }
  v18 = *((double *)&v78 + 1);
  v19 = *((double *)&v79 + 1);
  v20 = *((double *)&v80 + 1);
  v21 = *(const void **)(v9 + 960);
  if (v21)
  {
    if (v22)
    {
      v23 = v22;
      OZRenderState::OZRenderState(&v74);
      memset(&v48, 0, sizeof(v48));
      OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((_QWORD *)this + 42) + 56), (__n128 *)&v71);
      v73 = v51;
      v72 = v71;
      PC_CMTimeSaferAdd(&v73, &v72, (uint64_t)&v48);
      if (v50)
      {
        v24 = 0;
        v25 = &v81;
        do
        {
          v74.var0 = v48;
          (*(void (**)(void *, __n128 *, __n128 *, __n128 *, OZRenderState *))(*(_QWORD *)v23 + 1224))(v23, v25, v25 + 1, v25 + 2, &v74);
          v72 = (CMTime)v48;
          v71 = v69;
          PC_CMTimeSaferAdd(&v72, &v71, (uint64_t)&v73);
          v48 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v73;
          ++v24;
          v25 = (__n128 *)((char *)v25 + 8);
        }
        while (v24 < v50);
      }
    }
  }
  v26 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 336))(this);
  v27 = 0;
  v28 = *(double *)(v26 + 368);
  v29 = &v81.n128_f64[1];
  do
  {
    *(double *)((char *)&v74.var0.var0 + v27) = v28 * (*v29 - *(v29 - 1));
    v27 += 8;
    v29 += 2;
  }
  while (v27 != 24);
  v30 = v82;
  v31 = v83;
  *(_QWORD *)a2 = v81.n128_u64[0];
  *((_QWORD *)a2 + 1) = v30;
  v32 = *((double *)a2 + 10);
  v33 = *((double *)a2 + 9) + *(double *)&v74.var0.var3;
  *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), *(float64x2_t *)&v74.var0.var0);
  *((_QWORD *)a2 + 2) = v31;
  *((double *)a2 + 3) = v13;
  v34 = v28 + v28;
  v35 = v34 * (v18 - v13);
  v36 = v34 * (v19 - v14);
  v37 = v34 * (v20 - v15);
  v38 = v34 * 0.0;
  v39 = v13 * v36 - v14 * v35;
  v40 = v13 * v37 - v15 * v35;
  v41 = v13 * v38 - v35 * 4.0;
  v42 = v15 * v38 - v37 * 4.0;
  *((double *)a2 + 4) = v14;
  *((double *)a2 + 5) = v15;
  *((_QWORD *)a2 + 6) = 0x4010000000000000;
  v43 = v40 + v36 * 4.0 - v14 * v38;
  v44 = v14 * v37 - v15 * v36 + v41;
  *((double *)a2 + 9) = v33;
  *((double *)a2 + 10) = v32 + v39 + v42;
  v45 = v44 + *((double *)a2 + 12);
  *((double *)a2 + 11) = *((double *)a2 + 11) + v43;
  *((double *)a2 + 12) = v45;
  v46 = (v39 + v42) * 0.0;
  v47 = *((double *)a2 + 14);
  *((double *)a2 + 13) = *((double *)a2 + 13) + v44 * 0.0 + v39 + v42 + v43 * 0.0;
  *((double *)a2 + 14) = v44 * 0.0 + v43 + v46 + v47;
  *((double *)a2 + 15) = v44 + v46 + v43 * 0.0 + *((double *)a2 + 15);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v56);
}

void sub_1B2DFC264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&a27);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior::accumInitialValues(OZSimSystemMoToFoBehavior *this, OZSimStateArray *a2, uint64_t a3, OZTransformNode *a4)
{
  int v4;
  float64x2_t v7;
  uint64_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  double v15;
  uint64_t v16;
  int v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  BOOL v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  char v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64_t v44;
  double v45;
  float64_t v46;
  uint64_t v47;
  __int128 v48;
  float64x2_t v49[9];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v4 = a3;
  if (*((_QWORD *)this + 42)
    || ((*(void (**)(OZSimSystemMoToFoBehavior *, OZSimStateArray *, uint64_t, OZTransformNode *))(*(_QWORD *)this + 712))(this, a2, a3, a4), *((_QWORD *)this + 42)))
  {
    v54 = *(_OWORD *)((char *)a2 + 24);
    v55 = *((_QWORD *)a2 + 5);
    v39 = (*(double (**)(OZSimSystemMoToFoBehavior *, __int128 *, uint64_t, OZTransformNode *))(*(_QWORD *)this + 728))(this, &v54, a3, a4);
    if (fabs(v39) >= 0.0000001)
    {
      v44 = 0.0;
      v45 = 0.0;
      v46 = 0.0;
      v47 = 0x3FF0000000000000;
      v52 = 0;
      v53 = 0;
      v48 = 0u;
      memset(v49, 0, 128);
      v7 = *(float64x2_t *)((char *)a2 + 24);
      v50 = *((_QWORD *)a2 + 5);
      v51 = 0;
      v49[8] = v7;
      OZSimSystemMoToFoBehavior::calcParentsInitialValues(this, (OZSimulationState *)&v44);
      v8 = *((_QWORD *)a2 + 1);
      if (v8 != *(_QWORD *)a2 && v4 >= 1)
      {
        v9.f64[0] = v46;
        v9.f64[1] = v44;
        v41 = v9;
        v10 = v45;
        v38 = *(float64x2_t *)((char *)v49 + 8);
        v40 = vmulq_n_f64(*(float64x2_t *)((char *)v49 + 8), v39);
        v11 = v49[1].f64[1];
        v12 = v39 * v49[1].f64[1];
        v13.f64[1] = v49[3].f64[0];
        v14 = v39 * v49[2].f64[0];
        v37 = *(float64x2_t *)((char *)&v49[2] + 8);
        v13.f64[0] = v49[2].f64[0];
        v15 = v39 * v49[4].f64[1];
        v35 = v49[2];
        v36 = v13;
        v16 = v8 - 248;
        v17 = 1;
        v42 = vmulq_n_f64(*(float64x2_t *)((char *)&v49[3] + 8), v39);
        v43 = vmulq_n_f64(*(float64x2_t *)((char *)&v49[2] + 8), v39);
        do
        {
          v18.f64[0] = *(float64_t *)(v16 + 16);
          v18.f64[1] = *(float64_t *)v16;
          v19 = vsubq_f64(v18, v41);
          v20 = vmulq_f64(v19, v19);
          v21 = sqrt(v20.f64[1] + (*(double *)(v16 + 8) - v10) * (*(double *)(v16 + 8) - v10) + v20.f64[0]) <= 0.1;
          v22 = v12;
          v23 = v40;
          if (!v21)
          {
            v24.f64[1] = v19.f64[1];
            v24.f64[0] = *(double *)(v16 + 8) - v10;
            v25 = vmulq_f64(v24, v35);
            v26 = vmulq_f64(v19, v37);
            v19.f64[1] = *(double *)(v16 + 8) - v10;
            v27 = (int8x16_t)vmulq_f64(v19, v36);
            v23 = vaddq_f64(v38, vmulq_n_f64(vsubq_f64(v26, (float64x2_t)vextq_s8(v27, v27, 8uLL)), v39));
            v22 = v39 * vsubq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1)).f64[0] + v11;
          }
          *(float64x2_t *)(v16 + 56) = vaddq_f64(v23, *(float64x2_t *)(v16 + 56));
          *(double *)(v16 + 72) = v22 + *(double *)(v16 + 72);
          v28 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 736))(this);
          v29 = *(double *)(v16 + 80);
          if ((v28 & 1) != 0)
          {
            v29 = v14 + v29;
            v31 = v42;
            v30 = v43;
            v32 = vaddq_f64(v43, *(float64x2_t *)(v16 + 88));
            v33 = vaddq_f64(v42, *(float64x2_t *)(v16 + 104));
            v34 = v15 + *(double *)(v16 + 120);
          }
          else
          {
            v32 = *(float64x2_t *)(v16 + 88);
            v33 = *(float64x2_t *)(v16 + 104);
            v34 = *(double *)(v16 + 120);
            v31 = v42;
            v30 = v43;
          }
          *(double *)(v16 + 80) = v14 + v29;
          *(float64x2_t *)(v16 + 88) = vaddq_f64(v30, v32);
          *(float64x2_t *)(v16 + 104) = vaddq_f64(v31, v33);
          *(double *)(v16 + 120) = v15 + v34;
          if (v16 == *(_QWORD *)a2)
            break;
          v16 -= 248;
          v21 = v17++ < v4;
        }
        while (v21);
      }
    }
  }
}

uint64_t OZSimSystemMoToFoBehavior::isSceneNodeAnimated(OZSimSystemMoToFoBehavior *this, OZSceneNode *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (!lpsrc)
    return 0;
  if (!v2)
    return 0;
  v3 = v2;
  if (((*(uint64_t (**)(_QWORD *))(v2[152] + 560))(v2 + 152) & 1) != 0
    || ((*(uint64_t (**)(_QWORD *))(v3[263] + 560))(v3 + 263) & 1) != 0)
  {
    return 1;
  }
  v4 = 1;
  if ((OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 169), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 188), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 244), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 280), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 299), (const OZChannelBase *)1) & 1) != 0)
  {
    return v4;
  }
  return OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 318), (const OZChannelBase *)1);
}

uint64_t OZSimSystemMoToFoBehavior::updateCache(OZSimSystemMoToFoBehavior *this)
{
  uint64_t result;
  OZSceneNode *v3;
  OZSceneNode *v4;
  uint64_t i;
  OZRenderState v6;

  *((_BYTE *)this + 344) = 1;
  *((_BYTE *)this + 416) = 1;
  result = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
  {
    *((_QWORD *)this + 51) = *(_QWORD *)(result + 368);
    v3 = (OZSceneNode *)*((_QWORD *)this + 42);
    if (v3
      || (result = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 720))(this),
          v3 = (OZSceneNode *)result,
          (*((_QWORD *)this + 42) = result) != 0))
    {
      result = OZSimSystemMoToFoBehavior::isSceneNodeAnimated((OZSimSystemMoToFoBehavior *)result, v3);
      if ((result & 1) == 0)
        *((_BYTE *)this + 344) = 0;
      v4 = v3;
      while (v4)
      {
        v4 = (OZSceneNode *)*((_QWORD *)v4 + 120);
        result = OZSimSystemMoToFoBehavior::isSceneNodeAnimated((OZSimSystemMoToFoBehavior *)result, v4);
        if ((_DWORD)result)
        {
          *((_BYTE *)this + 416) = 1;
          goto LABEL_13;
        }
      }
      *((_BYTE *)this + 416) = 0;
      OZRenderState::OZRenderState(&v6);
      result = *((_QWORD *)v3 + 120);
      *((_QWORD *)this + 68) = 0x3FF0000000000000;
      *((_QWORD *)this + 63) = 0x3FF0000000000000;
      *((_QWORD *)this + 58) = 0x3FF0000000000000;
      *((_QWORD *)this + 53) = 0x3FF0000000000000;
      *((_OWORD *)this + 27) = 0u;
      *((_OWORD *)this + 28) = 0u;
      *(_OWORD *)((char *)this + 472) = 0u;
      *(_OWORD *)((char *)this + 488) = 0u;
      *((_OWORD *)this + 32) = 0u;
      *((_OWORD *)this + 33) = 0u;
      if (result)
      {
        if (result)
          result = (*(uint64_t (**)(uint64_t, char *, OZRenderState *))(*(_QWORD *)result + 1256))(result, (char *)this + 424, &v6);
      }
LABEL_13:
      for (i = 0; i != 528; i += 88)
        *((_BYTE *)this + i + 632) = 0;
      *((_DWORD *)this + 270) = 0;
    }
  }
  return result;
}

uint64_t OZSimSystemMoToFoBehavior::updateTransformNode(OZSimSystemMoToFoBehavior *this, OZTransformNode *a2)
{
  *((_QWORD *)this + 42) = a2;
  return (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(_QWORD *)this + 712))(this);
}

uint64_t OZPolygonAA::getInstance(OZPolygonAA *this)
{
  if (OZPolygonAA::getInstance(void)::once != -1)
    dispatch_once(&OZPolygonAA::getInstance(void)::once, &__block_literal_global_73);
  return OZPolygonAA::_instance;
}

double ___ZN11OZPolygonAA11getInstanceEv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  PCSingleton::PCSingleton((PCSingleton *)v0, 0);
  *(_QWORD *)v0 = &off_1E6588CE0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 64;
  result = 2.0;
  *(_OWORD *)(v0 + 32) = xmmword_1B3556780;
  OZPolygonAA::_instance = v0;
  return result;
}

void sub_1B2DFC814(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C4004C6E980);
  _Unwind_Resume(a1);
}

void OZPolygonAA::~OZPolygonAA(OZPolygonAA *this)
{
  _BYTE v2[32];

  *(_QWORD *)this = &off_1E6588CE0;
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v2);
  std::shared_ptr<OZFontFace>::reset[abi:ne180100]((_QWORD *)this + 1);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  PCSingleton::~PCSingleton(this);
}

{
  OZPolygonAA::~OZPolygonAA(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZPolygonAA::getEdgeAATexture(OZPolygonAA *this)
{
  uint64_t result;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  _BYTE v8[32];

  v3 = (char *)this + 8;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v8);
    OZPolygonAA::createEdgeAATexture((ProGL::GL **)this, (uint64_t *)&v7);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v8);
    return *(_QWORD *)v3;
  }
  return result;
}

void sub_1B2DFC954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZPolygonAA::createEdgeAATexture@<X0>(ProGL::GL **this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  CGColorSpace *DeviceRGB;
  CGColorSpace *v7;

  v4 = (unsigned __int8 *)operator new[]();
  OZPolygonAA::generateEdgeAAData((OZPolygonAA *)this, v4);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v7, DeviceRGB);
  PGMake2DTexture(&v7, 0, this[3], (int)this[3], 0, 0x1908u, 0x1406u, a2);
  PGTexture2D::setDataPtr((ProGL::Private::TextureImpl **)*a2, v4, 0x1906u, 0x1401u);
  PGTexture::setParameteri((OZChannelBase **)*a2, 0x2801u, 9729);
  PGTexture::setParameteri((OZChannelBase **)*a2, 0x2800u, 9729);
  PGTexture::setParameteri((OZChannelBase **)*a2, 0x2802u, 33071);
  PGTexture::setParameteri((OZChannelBase **)*a2, 0x2803u, 33071);
  MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v7);
}

void sub_1B2DFCA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void OZPolygonAA::generateEdgeAAData(OZPolygonAA *this, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  long double v12;
  double v13;

  v2 = *((_QWORD *)this + 3);
  v3 = v2 - 1;
  if (v2 >= 1)
  {
    v6 = *((double *)this + 4) / (double)v3;
    do
    {
      v7 = v6 * (double)v3;
      v8 = 0.0;
      if (v7 < 2.0)
        v8 = (exp(fabs(v7 * v7) * -1.5) + -0.00247875218) / 0.997521248;
      v9 = *((_QWORD *)this + 3);
      if (v9 >= 1)
      {
        v10 = v9 + 1;
        do
        {
          v11 = v6 * (double)(uint64_t)(v10 - 2);
          v12 = 0.0;
          if (v11 >= 2.0 || (v12 = (exp(fabs(v11 * v11) * -1.5) + -0.00247875218) / 0.997521248, v13 = 0.0, v12 >= 0.0))
            v13 = pow(v12, 1.0 / *((double *)this + 5));
          *a2++ = vcvtmd_s64_f64(v8 * v13 * 255.0 + 0.5 + 0.0000001);
          --v10;
        }
        while (v10 > 1);
      }
    }
    while (v3-- > 0);
  }
}

void OZDocument::OZDocument(OZDocument *this, int a2)
{
  unint64_t v4;
  OZScene *v5;
  OZNotificationManager *v6;
  OZTimelineState *v7;
  OZInspectorState *v8;
  OZCanvasState *v9;
  uint64_t v10;
  OZViewerState *v11;

  *(_QWORD *)this = &off_1E6588D28;
  *((_QWORD *)this + 1) = &unk_1E6588D80;
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 4);
  *((_QWORD *)this + 5) = (char *)this + 40;
  *((_QWORD *)this + 6) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((_DWORD *)this + 24) = 0;
  *((_WORD *)this + 50) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_BYTE *)this + 108) = 0;
  *((_DWORD *)this + 28) = 3;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 16);
  *((_DWORD *)this + 34) = 0;
  PCString::PCString((PCString *)this + 18, "");
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 256) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 184) = 0;
  *(_QWORD *)((char *)this + 260) = 0xD00000005;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 34);
  *((_BYTE *)this + 280) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *(_OWORD *)((char *)this + 313) = 0u;
  PCURL::PCURL((OZDocument *)((char *)this + 344), "", 0);
  if (OZDocument::OZDocument(BOOL)::onceToken != -1)
    dispatch_once(&OZDocument::OZDocument(BOOL)::onceToken, &__block_literal_global_74);
  do
    v4 = __ldaxr(&OZDocument::_nextTransientDocumentID);
  while (__stlxr(v4 + 1, &OZDocument::_nextTransientDocumentID));
  *((_QWORD *)this + 42) = v4;
  v5 = (OZScene *)operator new();
  OZScene::OZScene(v5, this);
  *((_QWORD *)this + 3) = v5;
  if (a2)
  {
    v6 = (OZNotificationManager *)operator new();
    OZNotificationManager::OZNotificationManager(v6, this, 1);
    *((_QWORD *)this + 21) = v6;
    OZNotificationManager::postNotification(v6, 48);
  }
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  if (!*(_BYTE *)(theApp + 80))
  {
    v7 = (OZTimelineState *)operator new();
    OZTimelineState::OZTimelineState(v7);
    *((_QWORD *)this + 30) = v7;
    v8 = (OZInspectorState *)operator new();
    OZInspectorState::OZInspectorState(v8);
    *((_QWORD *)this + 31) = v8;
  }
  v9 = (OZCanvasState *)operator new();
  OZCanvasState::OZCanvasState(v9);
  v10 = 0;
  *((_QWORD *)this + 28) = v9;
  do
  {
    v11 = (OZViewerState *)operator new();
    OZViewerState::OZViewerState(v11);
    *((_QWORD *)this + v10 + 24) = v11;
    *((_DWORD *)v11 + 21) = v10++;
  }
  while (v10 != 4);
}

void sub_1B2DFCE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString *a10, PCString *a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  PCString *v15;
  PCString *v16;
  PCString *v17;
  PCString *v18;
  PCURL *v19;
  uint64_t v21;

  MEMORY[0x1B5E29170](v13, 0x10A1C40A4A8B666);
  PCURL::~PCURL(v19);
  a12 = v12 + 296;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  PCString::~PCString(v18);
  PCString::~PCString(v17);
  PCString::~PCString(v16);
  PCString::~PCString(v15);
  PCString::~PCString(a10);
  a12 = v12 + 64;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__list_imp<unsigned int>::clear(v14);
  PCString::~PCString(a11);
  *(_QWORD *)(v12 + 8) = &unk_1E6588EA0;
  v21 = *(_QWORD *)(v12 + 16);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  _Unwind_Resume(a1);
}

void ___ZN10OZDocumentC2Eb_block_invoke()
{
  atomic_store(0, &OZDocument::_nextTransientDocumentID);
}

void OZDocument::postNotification(OZDocument *this, int a2)
{
  OZNotificationManager *v2;

  v2 = (OZNotificationManager *)*((_QWORD *)this + 21);
  if (v2)
    OZNotificationManager::postNotification(v2, a2);
}

void OZDocument::OZDocument(OZDocument *this, const OZDocument *a2, int a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  OZNotificationManager *v10;
  OZProjectPanelState *v11;
  OZCanvasState *v12;
  OZInspectorState *v13;
  uint64_t v14;
  OZCanvasState *v15;
  uint64_t v16;
  OZViewerState *v17;
  OZScene *v18;

  *(_QWORD *)this = &off_1E6588D28;
  *((_QWORD *)this + 1) = &unk_1E6588D80;
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 4);
  *((_QWORD *)this + 5) = (char *)this + 40;
  *((_QWORD *)this + 6) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 50) = *((_WORD *)a2 + 50);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 16);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  PCString::PCString((PCString *)this + 18, (const PCString *)a2 + 18);
  v6 = *((_QWORD *)a2 + 19);
  v7 = *((_BYTE *)a2 + 160);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = v6;
  *((_BYTE *)this + 160) = v7;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 256) = *((_BYTE *)a2 + 256);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 34);
  *((_BYTE *)this + 280) = *((_BYTE *)a2 + 280);
  v8 = *((_QWORD *)a2 + 36);
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 36) = v8;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  do
    v9 = __ldaxr(&OZDocument::_nextTransientDocumentID);
  while (__stlxr(v9 + 1, &OZDocument::_nextTransientDocumentID));
  *((_QWORD *)this + 42) = v9;
  PCURL::PCURL((OZDocument *)((char *)this + 344), (const OZDocument *)((char *)a2 + 344));
  if (a3)
  {
    v10 = (OZNotificationManager *)operator new();
    OZNotificationManager::OZNotificationManager(v10, this, 1);
    *((_QWORD *)this + 21) = v10;
    OZNotificationManager::postNotification(v10, 48);
  }
  if (*((_QWORD *)a2 + 29))
  {
    v11 = (OZProjectPanelState *)operator new();
    OZProjectPanelState::OZProjectPanelState(v11, *((const OZProjectPanelState **)a2 + 29));
  }
  else
  {
    v11 = 0;
  }
  *((_QWORD *)this + 29) = v11;
  if (*(_BYTE *)(theApp + 80))
  {
    *((_QWORD *)this + 30) = 0;
    v12 = (OZCanvasState *)operator new();
    OZCanvasState::OZCanvasState(v12);
    v13 = 0;
    *((_QWORD *)this + 28) = v12;
  }
  else
  {
    v14 = operator new();
    OZTimelineState::OZTimelineState(v14, *((__n128 **)a2 + 30));
    *((_QWORD *)this + 30) = v14;
    v15 = (OZCanvasState *)operator new();
    OZCanvasState::OZCanvasState(v15, *((const OZCanvasState **)a2 + 28));
    *((_QWORD *)this + 28) = v15;
    v13 = (OZInspectorState *)operator new();
    OZInspectorState::OZInspectorState(v13, *((const OZInspectorState **)a2 + 31));
  }
  v16 = 0;
  *((_QWORD *)this + 31) = v13;
  do
  {
    v17 = (OZViewerState *)operator new();
    OZViewerState::OZViewerState(v17, *((const OZViewerState **)a2 + v16 + 24));
    *((_QWORD *)this + v16 + 24) = v17;
    *((_DWORD *)v17 + 21) = v16++;
  }
  while (v16 != 4);
  v18 = (OZScene *)operator new();
  OZScene::OZScene(v18, *((const OZScene **)a2 + 3), this);
  *((_QWORD *)this + 3) = v18;
  OZDocument::copyScene(this, *((OZScene **)a2 + 3));
}

void sub_1B2DFD340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString *a11, PCString *a12, PCString *a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  PCString *v17;
  PCString *v18;
  PCString *v19;
  PCURL *v20;
  uint64_t v22;

  MEMORY[0x1B5E29170](v15, 0x10A1C40A4A8B666);
  PCURL::~PCURL(v20);
  a14 = a10;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  PCString::~PCString(v19);
  PCString::~PCString(v18);
  PCString::~PCString(v17);
  PCString::~PCString(a11);
  PCString::~PCString(a12);
  a14 = v14 + 64;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__list_imp<unsigned int>::clear(v16);
  PCString::~PCString(a13);
  *(_QWORD *)(v14 + 8) = &unk_1E6588EA0;
  v22 = *(_QWORD *)(v14 + 16);
  if (v22)
  {
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t OZDocument::copyScene(OZDocument *this, OZScene *a2)
{
  uint64_t v4;
  OZScene *v5;
  const void *v6;
  OZSceneNode *v7;
  _QWORD *v8;
  uint64_t i;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  OZSceneNode *v13;
  OZSceneNode *v14;
  OZChannelBase *v15;
  _QWORD *v16;
  OZScene *v17;
  _QWORD *v19;
  _OWORD v20[2];
  int v21;
  _QWORD v22[4];
  uint64_t v23;
  __int128 v24;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 3) = 0;
  v5 = (OZScene *)operator new();
  OZScene::OZScene(v5, a2, this);
  *((_QWORD *)this + 3) = v5;
  *((_BYTE *)v5 + 1577) = 1;
  OZScene::begin_t<OZProjectNode,false,false>(v5, (uint64_t)v22);
  if (v22[0] == v22[2] || (v6 = *(const void **)(v22[0] + 16)) == 0)
    v7 = 0;
  else
  OZScene::removeRootNode(*((OZScene **)this + 3), v7);
  if (v7)
    (*(void (**)(OZSceneNode *))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_QWORD *)*((_QWORD *)a2 + 151);
  memset(v20, 0, sizeof(v20));
  v21 = 1065353216;
  v19 = v8;
  if (v8 != (_QWORD *)((char *)a2 + 1200))
  {
    for (i = v8[2]; i; i = v16[2])
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(i + 16) + 96))(i + 16) & 1) != 0
        || (v10 = *(_QWORD *)(i + 8),
            v24 = xmmword_1B355CF20,
            (OZFactory::isKindOfClass(v10, (int32x4_t *)&v24) & 1) != 0)
        || (v11 = *(_QWORD *)(i + 8),
            v24 = xmmword_1B355CF30,
            OZFactory::isKindOfClass(v11, (int32x4_t *)&v24)))
      {
        v12 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8), i, 104);
        if (v12)
        {
          if (v13)
          {
            v14 = v13;
            v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v13 + 640))(v13);
            OZChannelBase::setNameUnset(v15, 0);
            (*(void (**)(OZSceneNode *))(*(_QWORD *)v14 + 920))(v14);
            OZScene::addRootNodeBefore(*((OZScene **)this + 3), v14, 0);
          }
        }
      }
      v16 = (_QWORD *)v19[1];
      v19 = v16;
      if (v16 == (_QWORD *)((char *)a2 + 1200))
        break;
    }
  }
  v17 = (OZScene *)*((_QWORD *)this + 3);
  *((_BYTE *)v17 + 1577) = 0;
  OZScene::recalcDependencies(v17);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
}

void sub_1B2DFD6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v26);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void OZDocument::~OZDocument(PCString *this)
{
  __CFString *var0;
  OZNotificationManager *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  __CFString *v9;
  __CFString *v10;
  PCString *v11;

  this->var0 = (__CFString *)&off_1E6588D28;
  this[1].var0 = (__CFString *)&unk_1E6588D80;
  if (theApp)
    OZApplication::documentWillDie(theApp, (OZDocument *)this);
  var0 = this[3].var0;
  if (var0)
    (*((void (**)(__CFString *))var0->isa + 1))(var0);
  this[3].var0 = 0;
  v3 = (OZNotificationManager *)this[21].var0;
  if (v3)
  {
    OZNotificationManager::~OZNotificationManager(v3);
    MEMORY[0x1B5E29170]();
  }
  this[21].var0 = 0;
  v4 = this[29].var0;
  if (v4)
    (*((void (**)(__CFString *))v4->isa + 1))(v4);
  this[29].var0 = 0;
  v5 = this[30].var0;
  if (v5)
    (*((void (**)(__CFString *))v5->isa + 1))(v5);
  this[30].var0 = 0;
  v6 = this[28].var0;
  if (v6)
    (*((void (**)(__CFString *))v6->isa + 1))(v6);
  this[28].var0 = 0;
  v7 = this[31].var0;
  if (v7)
    (*((void (**)(__CFString *))v7->isa + 1))(v7);
  this[31].var0 = 0;
  for (i = 24; i != 28; ++i)
  {
    v9 = this[i].var0;
    if (v9)
      (*((void (**)(__CFString *))v9->isa + 1))(v9);
    this[i].var0 = 0;
  }
  PCURL::~PCURL((PCURL *)&this[43]);
  v11 = this + 37;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  PCString::~PCString(this + 34);
  PCString::~PCString(this + 18);
  PCString::~PCString(this + 16);
  PCString::~PCString(this + 15);
  PCString::~PCString(this + 11);
  v11 = this + 8;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__list_imp<unsigned int>::clear(&this[5].var0);
  PCString::~PCString(this + 4);
  this[1].var0 = (__CFString *)&unk_1E6588EA0;
  v10 = this[2].var0;
  if (v10)
  {
    v10->info = 0;
    this[2].var0 = 0;
  }
}

{
  OZDocument::~OZDocument(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZDocument::~OZDocument(PCString *this)
{
  OZDocument::~OZDocument(this - 1);
}

{
  OZDocument::~OZDocument(this - 1);
  JUMPOUT(0x1B5E29170);
}

uint64_t *OZScene::begin_t<OZCamera,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2DFD9BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZDocument::addCPPObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 168);
  if (result)
    return OZNotificationManager::addCPPObserver(result, a2, a3);
  return result;
}

uint64_t OZDocument::removeCPPObserver(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 168);
  if (result)
    return OZNotificationManager::removeCPPObserver();
  return result;
}

uint64_t OZDocument::startCaptureModifiedChannels(uint64_t this, const PCString *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t i;
  uint64_t v7;

  v3 = this;
  v4 = *(_QWORD *)(this + 24);
  if (!v4 || !*(_BYTE *)(v4 + 1576))
  {
    v5 = *(_DWORD *)(this + 96);
    if (!v5)
    {
      PCString::set((PCString *)(this + 88), a2);
      v7 = *(_QWORD *)(v3 + 64);
      for (i = *(_QWORD *)(v3 + 72); i != v7; OZChannelRef::~OZChannelRef((void **)(i - 24)))
        ;
      *(_QWORD *)(v3 + 72) = v7;
      this = OZChannelBase::setRangeName((OZChannelBase *)v3, a2);
      v5 = *(_DWORD *)(v3 + 96);
    }
    *(_DWORD *)(v3 + 96) = v5 + 1;
  }
  return this;
}

OZChannelBase *OZDocument::endCaptureModifiedChannels(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase *v2;
  uint64_t v3;
  int v4;
  void **i;
  unint64_t var8;

  v2 = this;
  v3 = *(_QWORD *)&this->var3;
  if (!v3 || !*(_BYTE *)(v3 + 1576))
  {
    v4 = LODWORD(this->var12) - 1;
    LODWORD(this->var12) = v4;
    if (!v4)
    {
      var8 = this->var8;
      for (i = (void **)this->var9; i != (void **)var8; OZChannelRef::~OZChannelRef(i - 3))
        ;
      v2->var9 = (void *)var8;
      return (OZChannelBase *)OZChannelBase::setRangeName(v2, a2);
    }
  }
  return this;
}

void OZDocument::willModifyChannel(OZDocument *this, OZChannelBase *a2, int a3)
{
  OZRigWidget *v6;
  uint64_t **v7;
  OZChannelBase *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _BOOL4 v12;
  uint64_t ObjectManipulator;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19[3];
  __int128 v20;

  v6 = (OZRigWidget *)*((_QWORD *)this + 36);
  if (v6)
    OZRigWidget::willModifyChannel(v6, a2);
  v7 = (uint64_t **)*((_QWORD *)this + 21);
  if (v7)
    OZNotificationManager::willModifyChannel(v7, a2, a3);
  v8 = *(OZChannelBase **)(*((_QWORD *)this + 3) + 1504);
  if (v8 && !*((_BYTE *)this + 280))
  {
    OZChannelBase::setRangeName(v8, 0);
    if (!a2)
      return;
  }
  else if (!a2)
  {
    return;
  }
  if (*((_DWORD *)this + 24))
  {
    OZChannelRef::OZChannelRef((OZChannelRef *)v19, a2, 0);
    v9 = (unsigned __int8 *)*((_QWORD *)this + 8);
    v10 = (unsigned __int8 *)*((_QWORD *)this + 9);
    if (v9 == v10)
    {
      v11 = (unsigned __int8 *)*((_QWORD *)this + 8);
    }
    else
    {
      while (!OZChannelRef::operator==(v9, (unsigned __int8 *)v19))
      {
        v9 += 24;
        if (v9 == v10)
        {
          v9 = v10;
          break;
        }
      }
      v11 = v9;
      v9 = (unsigned __int8 *)*((_QWORD *)this + 9);
    }
    if (v11 == v9)
    {
      v12 = !OZChannelBase::testFlag(a2, 8);
      if (v12
        || OZChannelBase::testFlag(a2, 0x2000)
        && (ObjectManipulator = OZChannelBase::getObjectManipulator(a2), (v14 = ObjectManipulator) != 0)
        && (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 256))(ObjectManipulator)
        && ((v15 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 256))(v14) + 8),
             v20 = xmmword_1B355CF50,
             (OZFactory::isKindOfClass(v15, (int32x4_t *)&v20) & 1) != 0)
         || (v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 256))(v14) + 8),
             v20 = xmmword_1B3055250,
             ((OZFactory::isKindOfClass(v16, (int32x4_t *)&v20) | v12) & 1) != 0)))
      {
        (*((void (**)(OZChannelBase *, char *))a2->var0 + 43))(a2, (char *)this + 88);
        v17 = *((_QWORD *)this + 9);
        if (v17 >= *((_QWORD *)this + 10))
        {
          v18 = std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>((uint64_t *)this + 8, (const OZChannelRef *)v19);
        }
        else
        {
          OZChannelRef::OZChannelRef(*((std::string **)this + 9), (const OZChannelRef *)v19);
          v18 = v17 + 24;
          *((_QWORD *)this + 9) = v17 + 24;
        }
        *((_QWORD *)this + 9) = v18;
      }
    }
    OZChannelRef::~OZChannelRef(v19);
  }
}

void sub_1B2DFDCB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 72) = v3;
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::markFactoriesForSerialization(OZDocument *this, PCSerializerWriteStream *a2)
{
  return (*(uint64_t (**)(_QWORD, PCSerializerWriteStream *, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), a2, 0);
}

void OZDocument::writeBody(const PCString *this, PCSerializerWriteStream *a2, BOOL a3, uint64_t a4, uint64_t a5)
{
  uint64_t var0_low;
  __CFString *var0;
  __CFBundle *MainBundle;
  CFTypeRef ValueForInfoDictionaryKey;
  OZPreferenceManager *v13;
  TXParagraphStyleFolder_Factory *v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  char v18;
  __CFString *v19;
  TXParagraphStyleFolder_Factory *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  PCString v26;
  PCString v27;
  PCString v28;
  PCString v29;
  PCString v30;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZDocumentScope);
  if (!PCString::empty((PCString *)&this[16]) || LODWORD(this[17].var0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 21);
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TemplateScope);
    if (!PCString::empty((PCString *)&this[16]))
    {
      PCString::PCString(&v30, this + 16);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 35);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v30);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      PCString::~PCString(&v30);
    }
    var0_low = LODWORD(this[17].var0);
    if ((_DWORD)var0_low)
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 37);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, var0_low);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
  }
  if (PCString::size((PCString *)&this[18]))
  {
    PCString::PCString(&v29, this + 18);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 39);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v29);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v29);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
  }
  var0 = this[19].var0;
  if (var0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 22);
    (*(void (**)(PCSerializerWriteStream *, __CFString *))(*(_QWORD *)a2 + 72))(a2, var0);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  if (LOBYTE(this[20].var0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 38);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  MainBundle = CFBundleGetMainBundle();
  ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(MainBundle, CFSTR("Build"));
  PCURL::PCURL((PCURL *)&v28, ValueForInfoDictionaryKey);
  PCString::PCString(&v27, &v28);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 24);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v27);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v27);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
  PCString::PCString(&v26, this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 93);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v26);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  PCString::~PCString(&v26);
  v13 = (OZPreferenceManager *)(*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
  v14 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance(v13);
  v15 = TXParagraphStyleFolder_Factory::version(v14);
  if ((v15 & 1) != 0)
  {
    v16 = this[28].var0;
    if (v16)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v16->isa + 2))(this[28].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v16->isa + 3))(v16, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v15 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
    }
  }
  v17 = 0;
  v18 = 0;
  do
  {
    while (1)
    {
      v19 = this[v17 + 24].var0;
      if (!v19 || !BYTE1(v19[8].isa))
        break;
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v19->isa + 2))(this[v17 + 24].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v19->isa + 3))(v19, a2, 1, a4, 1);
      v15 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v18 = 1;
      if (v17++ == 3)
        goto LABEL_26;
    }
    ++v17;
  }
  while (v17 != 4);
  if ((v18 & 1) == 0)
    goto LABEL_27;
LABEL_26:
  v15 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
LABEL_27:
  v21 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance((OZPreferenceManager *)v15);
  if (TXParagraphStyleFolder_Factory::version(v21))
  {
    v22 = this[29].var0;
    if (v22)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v22->isa + 2))(this[29].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v22->isa + 3))(v22, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
    }
    v23 = this[30].var0;
    if (v23)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v23->isa + 2))(this[30].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v23->isa + 3))(v23, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
    }
    v24 = this[31].var0;
    if (v24)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v24->isa + 2))(this[31].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v24->isa + 3))(v24, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
    }
  }
  v25 = this[3].var0;
  if (v25)
  {
    (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v25->isa + 2))(v25, a2, 1);
    (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v25->isa + 3))(v25, a2, 1, a4, a5);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  PCString::~PCString(&v28);
}

void sub_1B2DFE2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, PCString a11, PCString a12, char a13, int a14, PCString a15)
{
  PCString::~PCString(&a15);
  _Unwind_Resume(a1);
}

uint64_t DocTemplateParser::parseBegin(DocTemplateParser *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TemplateScope);
  return 1;
}

uint64_t DocTemplateParser::parseEnd(DocTemplateParser *this, PCSerializerReadStream *a2)
{
  if (this)
    (*(void (**)(DocTemplateParser *, PCSerializerReadStream *))(*(_QWORD *)this + 8))(this, a2);
  return 1;
}

uint64_t DocTemplateParser::parseElement(DocTemplateParser *this, const PCString *a2, PCStreamElement *a3)
{
  int v6;
  OZChannelBase *v7;
  uint64_t v8;
  PCString v10;
  uint64_t v11;

  v11 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v10);
  v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case ' ':
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)&v11 + 4);
      v8 = *((_QWORD *)this + 1);
      *(_DWORD *)(v8 + 112) = HIDWORD(v11);
      *(_BYTE *)(v8 + 108) = 0;
      break;
    case '#':
      (*(void (**)(PCStreamElement *, PCString *))(*(_QWORD *)a3 + 16))(a3, &v10);
      PCString::set((PCString *)(*((_QWORD *)this + 1) + 128), &v10);
      break;
    case '%':
      (*(void (**)(PCStreamElement *, uint64_t *))(*(_QWORD *)a3 + 32))(a3, &v11);
      v7 = (OZChannelBase *)*((_QWORD *)this + 1);
      v7[1].var3 = v11;
      OZChannelBase::setRangeName(v7, a2);
      break;
  }
  PCString::~PCString(&v10);
  return 1;
}

void sub_1B2DFE41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::parseBegin(OZDocument *this, PCSerializerReadStream *a2)
{
  uint64_t v3;
  OZScene *v4;
  __int128 *v5;
  __n128 *v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZDocumentScope);
  OZFactories::clearFactoryLoadIDs(*(OZFactories **)(theApp + 32));
  *(_QWORD *)(theApp + 48) = *(_QWORD *)(theApp + 40);
  v3 = *((_QWORD *)this + 3);
  *(_QWORD *)(v3 + 344) = 0;
  *(_DWORD *)(v3 + 352) = 0;
  OZSceneSettings::setFrameRate(v3 + 336, 0.0, 0);
  *(_QWORD *)(v3 + 384) = 0;
  *(_QWORD *)((char *)this + 260) = 0;
  v4 = (OZScene *)*((_QWORD *)this + 3);
  v5 = (__int128 *)MEMORY[0x1E0CA2E68];
  v8 = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v10 = v8;
  v11 = v9;
  OZScene::setTimeRange(v4, (const PCTimeRange *)&v8);
  v6 = (__n128 *)*((_QWORD *)this + 3);
  v8 = *v5;
  v9 = *((_QWORD *)v5 + 2);
  v10 = v8;
  v11 = v9;
  OZScene::setPlayRange(v6, (const PCTimeRange *)&v8);
  *((_DWORD *)this + 26) = 0;
  return 1;
}

uint64_t OZDocument::parseEnd(OZDocument *this, PCSerializerReadStream *a2)
{
  OZDocument *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int DefaultProjectDurInFrames;
  OZPreferenceManager *v6;
  int32_t v7;
  CMTime *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  CMTime v27;
  CMTime time1;
  CMTime v29;
  CMTime time2;

  v2 = this;
  v3 = (_QWORD *)((char *)this + 260);
  if (!*((_DWORD *)this + 65) && !*((_DWORD *)this + 66))
    *v3 = 0xD00000005;
  v4 = *((_QWORD *)this + 3);
  if (!*(_DWORD *)(v4 + 344) || !*(_DWORD *)(v4 + 348) || *(double *)(v4 + 368) == 0.0 || *(double *)(v4 + 384) == 0.0)
  {
    *(_QWORD *)(v4 + 344) = 0x1E6000002D0;
    OZSceneSettings::setFrameRate(v4 + 336, 30.0, 0);
    *(_QWORD *)(v4 + 384) = 0x3FED1745D1745D17;
    this = (OZDocument *)OZSceneSettings::setFieldRenderingMode(v4 + 336, 2);
  }
  DefaultProjectDurInFrames = 432000;
  if (!*(_BYTE *)(theApp + 80))
  {
    v6 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
    DefaultProjectDurInFrames = OZPreferenceManager::getDefaultProjectDurInFrames(v6, *(double *)(v4 + 368));
  }
  if (DefaultProjectDurInFrames >= 0x69780)
    v7 = 432000;
  else
    v7 = DefaultProjectDurInFrames;
  if (!*(_DWORD *)(v4 + 352))
    *(_DWORD *)(v4 + 352) = v7;
  time1 = *(CMTime *)(*((_QWORD *)v2 + 3) + 1376);
  v8 = (CMTime *)MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare(&time1, &time2))
  {
    v9 = *((_QWORD *)v2 + 3);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v27);
    operator*(&v27, v7, &time2);
    time1 = *v8;
    v29 = time2;
    OZScene::setTimeRange((OZScene *)v9, (const PCTimeRange *)&time1);
  }
  time1 = *(CMTime *)(OZScene::getPlayRange(*((OZScene **)v2 + 3)) + 24);
  time2 = *v8;
  if (!CMTimeCompare(&time1, &time2))
    OZScene::setPlayRange(*((__n128 **)v2 + 3), (const PCTimeRange *)(*((_QWORD *)v2 + 3) + 1352));
  v10 = *((_DWORD *)v2 + 26);
  switch(v10)
  {
    case 3:
      OZDocument::makeFCPv3Corrections((uint64_t **)v2);
      break;
    case 2:
      OZDocument::makeFCPv2Corrections((uint64_t **)v2);
      break;
    case 1:
      OZDocument::makeFCPv1Corrections((uint64_t **)v2);
      break;
  }
  if (*(_DWORD *)v3 > 2u)
  {
    if (*(_DWORD *)v3 != 3)
      return 1;
    v17 = 0;
    v18 = (char *)v2 + 192;
    do
    {
      v19 = *(_QWORD *)&v18[v17];
      v20 = *(_DWORD *)(v19 + 64);
      v21 = v20 == 6;
      if (v20 == 6)
        v22 = 6;
      else
        v22 = 2;
      v23 = v20 == 0;
      if (v20)
        v24 = v22;
      else
        v24 = 0;
      *(_DWORD *)(v19 + 68) = v24;
      v25 = !v23;
      LiGrid::setGroundPlane(v19, v21);
      METimeRemap::setIsOutroOptional(*(METimeRemap **)&v18[v17], v25);
      HGRenderQueue::SetRelaxRenderSerializationForPriorityInversionsFlag(*(HGRenderQueue **)&v18[v17], v21);
      v17 += 8;
    }
    while (v17 != 32);
  }
  else
  {
    v11 = 0;
    v12 = *(_DWORD *)(*((_QWORD *)v2 + 3) + 544);
    if (v12 == 6)
      v13 = 6;
    else
      v13 = 2;
    if (v12)
      v14 = v13;
    else
      v14 = 0;
    v15 = (char *)v2 + 192;
    do
    {
      v16 = *(_QWORD *)&v15[v11];
      *(_DWORD *)(v16 + 64) = v14;
      *(_DWORD *)(v16 + 68) = v14;
      LiGrid::setGroundPlane(v16, v12 == 6);
      METimeRemap::setIsOutroOptional(*(METimeRemap **)&v15[v11], v12 != 0);
      HGRenderQueue::SetRelaxRenderSerializationForPriorityInversionsFlag(*(HGRenderQueue **)&v15[v11], v12 == 6);
      v11 += 8;
    }
    while (v11 != 32);
  }
  if (*(_DWORD *)v3 <= 3u)
    *(_DWORD *)(*((_QWORD *)v2 + 3) + 564) = 2;
  return 1;
}

uint64_t OZDocument::makeFCPv1Corrections(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t var0;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const CMTime *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  double InitialValue;
  double DefaultValue;
  char *v26;
  char *v27;
  OZDocument *v28;
  OZDocument *v29;
  OZDocument *v30;
  OZDocument *v31;
  OZPreferenceManager *v32;
  __int128 v34;
  OZRenderState __p;
  double v36;
  double v37;
  __int128 v38;
  double v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  _BYTE v44[32];
  int v45;
  uint64_t v46[4];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  _OWORD v52[2];
  int v53;
  uint64_t v54[2];
  uint64_t v55;
  char v56;
  _BYTE v57[32];
  int v58;

  OZScene::begin_t<OZElement,false,true>(this[3], (uint64_t)&__p);
  v2 = this[3];
  v3 = (uint64_t)(v2 + 150);
  v4 = v2[151];
  memset(v57, 0, sizeof(v57));
  v58 = 1065353216;
  v54[0] = v3;
  v54[1] = v4;
  v55 = v3;
  v56 = 0;
  var0 = __p.var0.var0;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v57);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&__p.var2);
  OZScene::begin_t<OZFootage,false,true>(this[3], (uint64_t)v54);
  v6 = this[3];
  v7 = v6 + 150;
  v8 = v6[151];
  memset(v52, 0, sizeof(v52));
  v53 = 1065353216;
  v48 = v7;
  v49 = v8;
  v50 = v7;
  v51 = 0;
  v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while ((uint64_t *)v54[0] != v48)
  {
    if (v54[0] == v55)
    {
      v10 = 0;
    }
    else
    {
      v10 = *(char **)(v54[0] + 16);
      if (v10)
    }
    if (var0 != v3)
      OZChannel::setValue((OZChannel *)(v10 + 3144), v9, 0.0, 0);
    OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v54);
  }
  v11 = OZScene::begin_t<OZTransformNode,false,true>(this[3], (uint64_t)v46);
  v12 = this[3];
  v13 = v12[151];
  memset(v44, 0, sizeof(v44));
  v45 = 1065353216;
  v40 = v12 + 150;
  v41 = v13;
  v42 = v12 + 150;
  v43 = 0;
  if (*((_DWORD *)v12 + 86) == 1280
    && *((_DWORD *)v12 + 87) == 1080
    && fabs(*((double *)v12 + 48) + -1.33333333) < 0.0000001)
  {
    v12[48] = 0x3FF8000000000000;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  v34 = _Q0;
  while ((uint64_t *)v46[0] != v40)
  {
    if (v46[0] == v46[2] || (v19 = *(const void **)(v46[0] + 16)) == 0)
      v20 = 0;
    else
    v21 = (*(uint64_t (**)(char *))(*((_QWORD *)v20 + 318) + 832))(v20 + 2544);
    if (v21)
    {
      OZChannel::getKeyframes((OZChannel *)(v20 + 2544), 0, &__p);
      v22 = 0;
      v23 = 8 * v21;
      do
      {
        v39 = 0.0;
        OZChannel::getKeyframe((OZChannel *)(v20 + 2544), *(void **)(__p.var0.var0 + v22), (CMTime *)&v36, &v39);
        OZChannel::setKeyframe((OZChannel *)(v20 + 2544), *(void **)(__p.var0.var0 + v22), (const CMTime *)&v36, -v39);
        v22 += 8;
      }
      while (v23 != v22);
      if (__p.var0.var0)
      {
        *(_QWORD *)&__p.var0.var1 = __p.var0.var0;
        operator delete((void *)__p.var0.var0);
      }
    }
    InitialValue = OZChannel::getInitialValue((OZChannel *)(v20 + 2544));
    OZChannel::setInitialValue((OZChannel *)(v20 + 2544), -InitialValue, 0);
    DefaultValue = OZChannel::getDefaultValue((OZChannel *)(v20 + 2544));
    OZChannel::setDefaultValue((OZChannel *)(v20 + 2544), -DefaultValue);
    if (v20)
    {
      if (v26)
      {
        v27 = v26;
        if ((*(unsigned int (**)(char *))(*(_QWORD *)v26 + 1600))(v26))
        {
          v36 = 0.0;
          v37 = 0.0;
          v38 = v34;
          OZRenderState::OZRenderState(&__p);
          v28 = (OZDocument *)(*(uint64_t (**)(char *, double *, OZRenderState *))(*(_QWORD *)v27 + 1560))(v27, &v36, &__p);
          v29 = (OZDocument *)OZDocument::correct4CornerChannel(v28, (OZChannelPosition *)(v27 + 14704), v36, v37);
          v30 = (OZDocument *)OZDocument::correct4CornerChannel(v29, (OZChannelPosition *)(v27 + 15408), v36 + *(double *)&v38, v37);
          v31 = (OZDocument *)OZDocument::correct4CornerChannel(v30, (OZChannelPosition *)(v27 + 16112), v36 + *(double *)&v38, v37 + *((double *)&v38 + 1));
          OZDocument::correct4CornerChannel(v31, (OZChannelPosition *)(v27 + 16816), v36, v37 + *((double *)&v38 + 1));
        }
      }
    }
    if (*((_DWORD *)v12 + 86) == 1280
      && *((_DWORD *)v12 + 87) == 1080
      && fabs((*(double (**)(char *))(*(_QWORD *)v20 + 1328))(v20) + -1.33333333) < 0.0000001)
    {
      (*(void (**)(char *, double))(*(_QWORD *)v20 + 1344))(v20, 1.5);
    }
    v11 = OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++(v46);
  }
  v32 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)v11);
  OZPreferenceManager::setCompensateAspectRatio(v32, 1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v44);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v47);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v52);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v57);
}

void sub_1B2DFEC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  uint64_t v62;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v61);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v62 - 144);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::makeFCPv2Corrections(uint64_t **this)
{
  OZPreferenceManager *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  const CMTime *v10;
  const void *v11;
  char *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  OZChannel *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double InitialValue;
  double DefaultValue;
  CMTime v25;
  double v26;
  void *__p[3];
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  _OWORD v32[2];
  int v33;
  uint64_t v34[4];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43[4];
  _BYTE v44[40];

  v2 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)this);
  OZPreferenceManager::setCompensateAspectRatio(v2, 1);
  OZScene::begin_t<OZElement,false,true>(this[3], (uint64_t)v43);
  v3 = this[3];
  v4 = v3 + 150;
  v5 = v3[151];
  v40 = 0u;
  v41 = 0u;
  v42 = 1065353216;
  v36 = v4;
  v37 = v5;
  v38 = v4;
  v39 = 0;
  v6 = v43[0];
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v40);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v44);
  OZScene::begin_t<OZFootage,false,true>(this[3], (uint64_t)v43);
  v7 = this[3];
  v8 = v7 + 150;
  v9 = v7[151];
  v40 = 0u;
  v41 = 0u;
  v42 = 1065353216;
  v36 = v8;
  v37 = v9;
  v38 = v8;
  v39 = 0;
  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while ((uint64_t *)v43[0] != v36)
  {
    if (v43[0] != v43[2])
    {
      v11 = *(const void **)(v43[0] + 16);
      if (v11)
      {
        if (v12)
          v13 = v6 == (_QWORD)v4;
        else
          v13 = 1;
        if (!v13)
          OZChannel::setValue((OZChannel *)(v12 + 3144), v10, 0.0, 0);
      }
    }
    OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v43);
  }
  OZScene::begin_t<OZTransformNode,false,true>(this[3], (uint64_t)v34);
  v14 = this[3];
  v15 = v14 + 150;
  v16 = v14[151];
  memset(v32, 0, sizeof(v32));
  v33 = 1065353216;
  v28 = v15;
  v29 = v16;
  v30 = v15;
  v31 = 0;
  while ((uint64_t *)v34[0] != v28)
  {
    if (v34[0] == v34[2])
    {
      v17 = 0;
    }
    else
    {
      v17 = *(_QWORD **)(v34[0] + 16);
      if (v17)
    }
    v18 = (OZChannel *)(v17 + 318);
    v19 = (*(uint64_t (**)(_QWORD *))(v17[318] + 832))(v17 + 318);
    if (v19)
    {
      OZChannel::getKeyframes(v18, 0, __p);
      v20 = 0;
      v21 = 8 * v19;
      do
      {
        v26 = 0.0;
        OZChannel::getKeyframe(v18, *(void **)((char *)__p[0] + v20), &v25, &v26);
        OZChannel::setKeyframe(v18, *(void **)((char *)__p[0] + v20), &v25, -v26);
        v20 += 8;
      }
      while (v21 != v20);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    InitialValue = OZChannel::getInitialValue(v18);
    OZChannel::setInitialValue(v18, -InitialValue, 0);
    DefaultValue = OZChannel::getDefaultValue(v18);
    OZChannel::setDefaultValue(v18, -DefaultValue);
    OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++(v34);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v32);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v35);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v40);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v44);
}

void sub_1B2DFEF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v26);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v27 - 104);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::makeFCPv3Corrections(uint64_t **this)
{
  OZPreferenceManager *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const CMTime *v6;
  const void *v7;
  char *v8;
  BOOL v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15[4];
  _BYTE v16[40];

  v2 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)this);
  OZPreferenceManager::setCompensateAspectRatio(v2, 1);
  OZScene::begin_t<OZElement,false,true>(this[3], (uint64_t)v15);
  v3 = (uint64_t)(this[3] + 150);
  v12 = 0u;
  v13 = 0u;
  v14 = 1065353216;
  v4 = v15[0];
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  OZScene::begin_t<OZFootage,false,true>(this[3], (uint64_t)v15);
  v5 = (uint64_t)(this[3] + 150);
  v12 = 0u;
  v13 = 0u;
  v14 = 1065353216;
  v11 = v5;
  v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while (v15[0] != v11)
  {
    if (v15[0] != v15[2])
    {
      v7 = *(const void **)(v15[0] + 16);
      if (v7)
      {
        if (v8)
          v9 = v4 == v3;
        else
          v9 = 1;
        if (!v9)
          OZChannel::setValue((OZChannel *)(v8 + 3144), v6, 0.0, 0);
      }
    }
    OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v15);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
}

void sub_1B2DFF14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::parseElement(PCString *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  OZProjectPanelState *var0;
  PCSerializer *v8;
  PCSerializerReadStream *v9;
  char *CStr;
  int v11;
  int v12;
  unsigned int *AttributeAsUUID;
  unsigned int *v14;
  OZFactory *Factory;
  int v17;
  uint64_t v18;
  PCSharedCount v19;
  unsigned int v20[2];

  *(_QWORD *)v20 = 0;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > 37)
  {
    switch(v6)
    {
      case 'P':
        if (*(_BYTE *)(theApp + 80))
          goto LABEL_47;
        var0 = (OZProjectPanelState *)this[29].var0;
        if (!var0)
        {
          var0 = (OZProjectPanelState *)operator new();
          OZProjectPanelState::OZProjectPanelState(var0);
          this[29].var0 = (__CFString *)var0;
        }
        goto LABEL_35;
      case 'Q':
        if (*(_BYTE *)(theApp + 80))
          goto LABEL_47;
        var0 = (OZProjectPanelState *)this[30].var0;
        if (!var0)
        {
          var0 = (OZProjectPanelState *)operator new();
          OZTimelineState::OZTimelineState(var0);
          this[30].var0 = (__CFString *)var0;
        }
        goto LABEL_35;
      case 'R':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return 1;
      case 'S':
        if (PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v20[1]))
        {
          if (v20[1] > 3)
            goto LABEL_47;
          v8 = (PCSerializer *)this[v20[1] + 24].var0;
        }
        else
        {
          v8 = (PCSerializer *)this[24].var0;
        }
        goto LABEL_44;
      case 'T':
        v8 = (PCSerializer *)this[28].var0;
        goto LABEL_44;
      case 'U':
        if (*(_BYTE *)(theApp + 80))
          goto LABEL_47;
        var0 = (OZProjectPanelState *)this[31].var0;
        if (!var0)
        {
          var0 = (OZProjectPanelState *)operator new();
          OZInspectorState::OZInspectorState(var0);
          this[31].var0 = (__CFString *)var0;
        }
LABEL_35:
        v9 = a2;
        v8 = var0;
        goto LABEL_45;
      case '[':
        PCSharedCount::PCSharedCount(&v19);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v19);
        v18 = 0;
        CStr = PCString::createCStr((PCString *)&v19);
        sscanf(CStr, "%d.%d", (char *)&v18 + 4, &v18);
        v12 = v18;
        v11 = HIDWORD(v18);
        *((_DWORD *)a2 + 26) = HIDWORD(v18);
        *((_DWORD *)a2 + 27) = v12;
        free(CStr);
        HIDWORD(this[32].var0) = v11;
        LODWORD(this[33].var0) = v12;
        OZDocument::checkVersionForReadStream((OZDocument *)this, a2);
        goto LABEL_41;
      case '\\':
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v20[1]);
        AttributeAsUUID = (unsigned int *)PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 117);
        if (AttributeAsUUID)
        {
          v14 = AttributeAsUUID;
          Factory = (OZFactory *)OZFactories::findFactory(*(_QWORD *)(theApp + 32), AttributeAsUUID);
          OZFactories::setFactoryLoadID(*(OZFactories **)(theApp + 32), v20[1], Factory);
          (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 40))(a2);
          MEMORY[0x1B5E29170](v14, 0x1000C40451B5BE8);
        }
        else
        {
          OZFactories::setFactoryLoadID(*(OZFactories **)(theApp + 32), v20[1], 0);
LABEL_47:
          (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 40))(a2);
        }
        return 1;
      case ']':
        PCSharedCount::PCSharedCount(&v19);
        if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19))
          PCString::set(this + 4, (const PCString *)&v19);
        goto LABEL_41;
      default:
        if (v6 == 38)
        {
          v17 = 0;
          PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v17);
          LOBYTE(this[20].var0) = v17 != 0;
          return 1;
        }
        if (v6 != 60)
          return 1;
        v8 = (PCSerializer *)this[3].var0;
        break;
    }
    goto LABEL_44;
  }
  if (v6 > 24)
  {
    if (v6 == 25)
    {
      PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)v20);
      if (this[3].var0 && (v20[0] == 3 || v20[0] == 2 || v20[0] == 1))
        LODWORD(this[13].var0) = v20[0];
    }
    else if (v6 == 36)
    {
      PCString::PCString((PCString *)&v19, this + 34);
      if (PCString::empty((PCString *)&v19)
        && PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v19))
      {
        PCString::set(this + 34, (const PCString *)&v19);
      }
      OZDocument::checkVersionForReadStream((OZDocument *)this, a2);
LABEL_41:
      PCString::~PCString((PCString *)&v19);
    }
  }
  else
  {
    if (v6 == 21)
    {
      v8 = (PCSerializer *)operator new();
      *(_QWORD *)v8 = &off_1E6588E30;
      *((_QWORD *)v8 + 1) = this;
LABEL_44:
      v9 = a2;
LABEL_45:
      PCSerializerReadStream::pushHandler(v9, v8);
      return 1;
    }
    if (v6 == 22)
      PCSerializerReadStream::getAsUInt64((uint64_t)a2, (uint64_t)a3, (uint64_t)&this[19]);
  }
  return 1;
}

void sub_1B2DFF574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  uint64_t v13;

  MEMORY[0x1B5E29170](v13, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void OZDocument::checkVersionForReadStream(OZDocument *this, PCSerializerReadStream *a2)
{
  unsigned int v3;
  unsigned int v4;
  PCString *v5;
  const PCString *v6;
  PCString v7;
  PCString _8[7];

  v3 = *((_DWORD *)this + 65);
  v4 = *((_DWORD *)this + 66);
  v5 = (PCString *)((char *)this + 272);
  PCString::PCString(_8, (const PCString *)this + 34);
  if (!PCString::empty(_8) && (v3 > 5 || v3 == 5 && v4 >= 0xE))
  {
    if (!*(_BYTE *)(theApp + 80))
      OZChannelBase::setRangeName((OZChannelBase *)_8, v6);
    (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  PCString::PCString(&v7, "older version");
  if (!PCString::compare(_8, &v7) || !v3)
    goto LABEL_15;
  if (v3 < 5)
  {
    PCString::~PCString(&v7);
LABEL_14:
    PCString::PCString(&v7, "older version");
    PCString::set(v5, &v7);
LABEL_15:
    PCString::~PCString(&v7);
    goto LABEL_16;
  }
  PCString::~PCString(&v7);
  if (v3 == 5 && v4 < 0xD)
    goto LABEL_14;
LABEL_16:
  PCString::~PCString(_8);
}

void sub_1B2DFF6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2DFF798(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZFootage,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2DFF828(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *OZScene::begin_t<OZTransformNode,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2DFF938(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZDocument::correct4CornerChannel(OZDocument *this, OZChannelPosition *a2, double a3, double a4)
{
  OZChannel *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  OZChannel *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  double InitialValue;
  double DefaultValue;
  double v19;
  double v20;
  CMTime v22;
  double v23;
  void *__p;
  void *v25;

  v7 = (OZChannel *)((char *)a2 + 136);
  v8 = (*(uint64_t (**)(char *))(*((_QWORD *)a2 + 17) + 832))((char *)a2 + 136);
  if (v8)
  {
    v9 = v8;
    OZChannel::getKeyframes(v7, 0, &__p);
    v10 = 0;
    v11 = 8 * v9;
    do
    {
      v23 = 0.0;
      OZChannel::getKeyframe(v7, *(void **)((char *)__p + v10), &v22, &v23);
      OZChannel::setKeyframe(v7, *(void **)((char *)__p + v10), &v22, v23 - a3);
      v10 += 8;
    }
    while (v11 != v10);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
  v12 = (OZChannel *)((char *)a2 + 288);
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)a2 + 36) + 832))((char *)a2 + 288);
  if (v13)
  {
    v14 = v13;
    OZChannel::getKeyframes(v12, 0, &__p);
    v15 = 0;
    v16 = 8 * v14;
    do
    {
      v23 = 0.0;
      OZChannel::getKeyframe(v12, *(void **)((char *)__p + v15), &v22, &v23);
      OZChannel::setKeyframe(v12, *(void **)((char *)__p + v15), &v22, v23 - a4);
      v15 += 8;
    }
    while (v16 != v15);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
  InitialValue = OZChannel::getInitialValue(v7);
  OZChannel::setInitialValue(v7, InitialValue - a3, 0);
  DefaultValue = OZChannel::getDefaultValue(v7);
  OZChannel::setDefaultValue(v7, DefaultValue - a3);
  v19 = OZChannel::getInitialValue(v12);
  OZChannel::setInitialValue(v12, v19 - a4, 0);
  v20 = OZChannel::getDefaultValue(v12);
  return OZChannel::setDefaultValue(v12, v20 - a4);
}

void sub_1B2DFFB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZDocument::open(OZChannelBase *this, const PCURL *a2)
{
  OZCoreGlobals *v4;
  unint64_t var7;
  OZNotificationManager *v6;
  uint64_t v7;
  OZCoreGlobals *AnimateFlag;
  char v9;
  void **HostApplicationDelegate;
  char *v11;
  OZNotificationManager *v12;
  OZNotificationManager *v13;
  OZNotificationManager *v14;
  PCString v16;
  _BYTE v17[168];
  uint64_t v18;

  v4 = PCXMLReadStream::PCXMLReadStream((PCXMLReadStream *)v17, a2);
  v18 = *(_QWORD *)(theApp + 16);
  *(_BYTE *)(OZCoreGlobals::getInstance(v4) + 8) = 0;
  var7 = this[1].var7;
  if (!var7)
  {
    v6 = (OZNotificationManager *)operator new();
    OZNotificationManager::OZNotificationManager(v6, (OZDocument *)this, 0);
    this[1].var7 = (unint64_t)v6;
  }
  PCSerializerReadStream::pushHandler((PCSerializerReadStream *)v17, (PCSerializer *)this);
  v7 = PCXMLReadStream::parse((PCXMLReadStream *)v17);
  if ((v7 & 1) != 0)
  {
    OZChannelBase::setRangeName(this, (const PCString *)a2);
    AnimateFlag = (OZCoreGlobals *)OZSceneSettings::getAnimateFlag((OZSceneSettings *)(*(_QWORD *)&this->var3 + 336));
    v9 = (char)AnimateFlag;
    if ((_DWORD)AnimateFlag)
    {
      HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
      AnimateFlag = (OZCoreGlobals *)OZHostApplicationDelegateHandler::wantsToAssertThatLoadedSceneHasAnimateFlagDisabled(HostApplicationDelegate);
      if ((_DWORD)AnimateFlag)
      {
        PCURL::getAsFileSystemString((const __CFURL **)a2, &v16);
        v11 = PCString::createUTF8Str(&v16);
        PCString::~PCString(&v16);
        printf("WARNING: document has animate flag enabled: %s\n", v11);
        free(v11);
      }
    }
    *(_BYTE *)(OZCoreGlobals::getInstance(AnimateFlag) + 8) = v9;
    v12 = (OZNotificationManager *)this[1].var7;
    if (v12)
      OZNotificationManager::postNotification(v12, 51);
    if (!var7)
    {
      v13 = (OZNotificationManager *)this[1].var7;
      if (v13)
      {
        OZNotificationManager::processNotifications(v13);
        v14 = (OZNotificationManager *)this[1].var7;
        if (v14)
        {
          OZNotificationManager::~OZNotificationManager(v14);
          MEMORY[0x1B5E29170]();
        }
      }
      this[1].var7 = 0;
    }
    PCURL::operator=((const void **)&this[3].var1, (const __CFURL **)a2);
  }
  else
  {
    puts("parse failed");
  }
  PCXMLReadStream::~PCXMLReadStream((PCXMLReadStream *)v17);
  return v7;
}

void sub_1B2DFFD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12)
{
  PCString::~PCString(&a11);
  PCXMLReadStream::~PCXMLReadStream((PCXMLReadStream *)&a12);
  _Unwind_Resume(a1);
}

_QWORD *OZScene::begin_t<OZProjectNode,false,false>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2DFFDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void PCSafe::~PCSafe(PCSafe *this)
{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E6588EA0;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E6588EA0;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = 0;
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x1B5E29170);
}

void std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        OZChannelRef::~OZChannelRef(v4 - 3);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

_QWORD *OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>(uint64_t *a1, const OZChannelRef *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  OZChannelRef::OZChannelRef(v14, a2);
  v15 = v14 + 1;
  std::vector<OZChannelRef>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<OZChannelRef>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B2E00234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OZChannelRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OZChannelRef>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZChannelRef>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZChannelRef>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  std::string *v12;

  v10 = 0;
  v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    v12 = (std::string *)(v11 + v10);
    v10 -= 24;
    OZChannelRef::OZChannelRef(v12, (const OZChannelRef *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<OZChannelRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    OZChannelRef::~OZChannelRef((void **)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

_QWORD *OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

PCSharedCount *OZInsertLayerBelowGroupAffectedByBump(LiLayeredMaterial *a1, PCSharedCount *a2)
{
  uint64_t v4;
  BOOL v5;
  PC_Sp_counted_base *var0;
  uint64_t LUTEnd;
  uint64_t v8;
  int v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v12;
  PCSharedCount v13;

  v4 = (*((_QWORD *)a1 + 84) - *((_QWORD *)a1 + 83)) >> 4;
  while (1)
  {
    v5 = __OFSUB__((_DWORD)v4, 1);
    LODWORD(v4) = v4 - 1;
    if ((int)v4 < 0 != v5)
      return LiLayeredMaterial::insertLayer((uint64_t)a1, (int)v4 + 1, a2);
    LiLayeredMaterial::getLayer(a1, v4, &v12);
    var0 = v12.var0;
    PCSharedCount::~PCSharedCount(&v13);
    if (*((_BYTE *)var0 + 25))
    {
      LUTEnd = PCICCTransferFunctionLUT::getLUTEnd((PCICCTransferFunctionLUT *)var0);
      if ((v4 + 1) < 2)
      {
LABEL_9:
        LODWORD(v4) = -1;
      }
      else
      {
        v8 = LUTEnd;
        v9 = v4 - 1;
        while (1)
        {
          LODWORD(v4) = v4 - 1;
          LiLayeredMaterial::getLayer(a1, v4, &v12);
          v10 = v12.var0;
          PCSharedCount::~PCSharedCount(&v13);
          if (!*((_BYTE *)v10 + 25))
            break;
          if (PCICCTransferFunctionLUT::getLUTEnd((PCICCTransferFunctionLUT *)v10) != v8)
            return LiLayeredMaterial::insertLayer((uint64_t)a1, (int)v4 + 1, a2);
          --v9;
          if ((int)v4 <= 0)
            goto LABEL_9;
        }
        LODWORD(v4) = v9;
      }
      return LiLayeredMaterial::insertLayer((uint64_t)a1, (int)v4 + 1, a2);
    }
  }
}

void sub_1B2E007BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

uint64_t getWorkingGamut(OZChannelBase *a1)
{
  uint64_t v2;
  uint64_t v3;
  PCColorSpaceCache *CGColorSpace;
  uint64_t v5;
  __CFString *var0;
  OZFxPlugRenderContextManager *v7;
  FxColorDescription v9;

  if (OZChannelBase::isObjectRef(a1))
  {
    v2 = (*((uint64_t (**)(OZChannelBase *))a1->var0 + 3))(a1);
    if (v2)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2);
      if (v3)
      {
        (*(void (**)(FxColorDescription *__return_ptr))(*(_QWORD *)v3 + 136))(&v9);
        CGColorSpace = (PCColorSpaceCache *)FxColorDescription::getCGColorSpace(&v9);
        v5 = CGColorSpace == PCGetWorkingColorSpace((PCColorSpaceCache *)1);
        PCCFRef<CGColorSpace *>::~PCCFRef(&v9._pcColorDesc._colorSpaceRef._obj);
        return v5;
      }
    }
    return 0;
  }
  var0 = a1->var4.var0;
  if (!var0)
    return 0;
  v7 = (OZFxPlugRenderContextManager *)-[__CFString contextManager](var0, "contextManager");
  if (!v7)
    return 0;
  OZFxRenderContextAgentSentry::OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&v9, v7);
  if (OZFxRenderContextAgentSentry::getAgent((OZFxPlugRenderContextManager **)&v9, (OZFxPlugSharedBase *)a1))
    v5 = (*((uint64_t (**)(OZChannelBase *))a1->var0 + 22))(a1);
  else
    v5 = 0;
  OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&v9);
  return v5;
}

void sub_1B2E008D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2E009F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B2E00AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::OZSceneNodeFile(OZSceneNodeFile *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  *v5 = off_1E6588EC8;
  v5[2] = &unk_1E65894E8;
  v5[6] = &unk_1E6589740;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Footage Inspector Linked Objects"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1088), &v6, (OZChannelFolder *)((char *)this + 448), 0x6Cu, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Channel Do Footage Replace"));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 1216), (void (*)(void *))OZSceneNodeFile::replaceCallbackStub, this, &v6, (OZChannelFolder *)((char *)this + 448), 0x76u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Footage Inspector Summary"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1408), &v6, (OZChannelFolder *)((char *)this + 448), 0x6Du, 0, 0);
  PCString::~PCString(&v6);
  *((_DWORD *)this + 384) = 0;
  *((_WORD *)this + 770) = 256;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_WORD *)this + 780) = 256;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 196);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1088), 8, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1088), 0x800000);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1088), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1088));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1408), 8, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1408), 0x800000);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1408), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1408));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1216), 16, 0);
}

void sub_1B2E00CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZSceneNode *v10;
  OZChannelFolder *v11;
  OZChannelButton *v12;
  OZChannelFolder *v13;

  OZChannelFolder::~OZChannelFolder(v13);
  OZChannelButton::~OZChannelButton(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::OZSceneNodeFile(OZSceneNodeFile *this, OZSceneNodeFile *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  PCURL *v7;
  PCURL *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  OZSceneNode::OZSceneNode(this, a2, a3);
  *(_QWORD *)v5 = off_1E6588EC8;
  *(_QWORD *)(v5 + 16) = &unk_1E65894E8;
  *(_QWORD *)(v5 + 48) = &unk_1E6589740;
  v6 = (OZChannelFolder *)(v5 + 448);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1088), (const OZChannelFolder *)((char *)a2 + 1088), (OZChannelFolder *)(v5 + 448));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 1216), (const OZChannelButton *)((char *)a2 + 1216), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1408), (const OZChannelFolder *)((char *)a2 + 1408), v6);
  *((_DWORD *)this + 384) = *((_DWORD *)a2 + 384);
  *((_WORD *)this + 770) = *((_WORD *)a2 + 770);
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_WORD *)this + 780) = *((_WORD *)a2 + 780);
  PCString::PCString((PCString *)this + 196, (const PCString *)a2 + 196);
  OZChannelButton::setPrivateData((OZChannelButton *)((char *)this + 1216), this);
  v9 = *((_OWORD *)a2 + 13);
  v10 = *((_QWORD *)a2 + 28);
  v11 = *(_OWORD *)((char *)a2 + 232);
  v12 = *((_QWORD *)a2 + 31);
  OZChannelObjectRootBase::setTimeExtent((OZSceneNodeFile *)((char *)this + 56), (const PCTimeRange *)&v9, 0);
  if (*((_QWORD *)a2 + 193))
  {
    v7 = (PCURL *)operator new();
    PCURL::PCURL(v7, *((const PCURL **)a2 + 193));
    *((_QWORD *)this + 193) = v7;
  }
  if (*((_QWORD *)a2 + 194))
  {
    v8 = (PCURL *)operator new();
    PCURL::PCURL(v8, *((const PCURL **)a2 + 194));
    *((_QWORD *)this + 194) = v8;
  }
}

void sub_1B2E00EF0(_Unwind_Exception *a1)
{
  OZSceneNode *v1;
  OZChannelFolder *v2;
  OZChannelButton *v3;
  OZChannelFolder *v4;
  PCString *v5;
  uint64_t v6;

  MEMORY[0x1B5E29170](v6, 0x60C4044C4A2DFLL);
  PCString::~PCString(v5);
  OZChannelFolder::~OZChannelFolder(v4);
  OZChannelButton::~OZChannelButton(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::~OZSceneNodeFile(OZSceneNodeFile *this)
{
  PCURL *v2;
  PCURL *v3;

  *(_QWORD *)this = off_1E6588EC8;
  *((_QWORD *)this + 2) = &unk_1E65894E8;
  *((_QWORD *)this + 6) = &unk_1E6589740;
  v2 = (PCURL *)*((_QWORD *)this + 193);
  if (v2)
  {
    PCURL::~PCURL(v2);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 193) = 0;
  v3 = (PCURL *)*((_QWORD *)this + 194);
  if (v3)
  {
    PCURL::~PCURL(v3);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 194) = 0;
  PCString::~PCString((PCString *)this + 196);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1408));
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this + 1216));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1088));
  OZSceneNode::~OZSceneNode(this);
}

void OZSceneNodeFile::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;
  PCURL *v6;
  PCURL *v7;

  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelBase::operator=(a1 + 1216, (uint64_t)v5 + 1216);
  *(_QWORD *)(a1 + 1368) = *((_QWORD *)v5 + 171);
  PCString::set((PCString *)(a1 + 1376), (const PCString *)v5 + 172);
  *(_QWORD *)(a1 + 1384) = *((_QWORD *)v5 + 173);
  PCString::set((PCString *)(a1 + 1392), (const PCString *)v5 + 174);
  *(_BYTE *)(a1 + 1400) = *((_BYTE *)v5 + 1400);
  OZChannelFolder::operator=(a1 + 1408);
  OZChannelButton::setPrivateData((OZChannelButton *)(a1 + 1216), (void *)a1);
  *(_BYTE *)(a1 + 1561) = *((_BYTE *)v5 + 1561);
  PCString::set((PCString *)(a1 + 1568), (const PCString *)v5 + 196);
  *(_BYTE *)(a1 + 1560) = *((_BYTE *)v5 + 1560);
  if (*((_QWORD *)v5 + 193))
  {
    v6 = (PCURL *)operator new();
    PCURL::PCURL(v6, *((const PCURL **)v5 + 193));
    *(_QWORD *)(a1 + 1544) = v6;
  }
  if (*((_QWORD *)v5 + 194))
  {
    v7 = (PCURL *)operator new();
    PCURL::PCURL(v7, *((const PCURL **)v5 + 194));
    *(_QWORD *)(a1 + 1552) = v7;
  }
}

void sub_1B2E0115C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZSceneNodeFile::didFinishLoadingIntoScene(OZSceneNodeFile *this)
{
  return OZSceneNode::didFinishLoadingIntoScene((OZSceneNodeFile *)((char *)this - 16));
}

OZScene *OZSceneNodeFile::canDelete(OZSceneNodeFile *this)
{
  OZScene *result;
  _QWORD *DependantNodes;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *Node;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  result = (OZScene *)*((_QWORD *)this + 121);
  if (result)
  {
    DependantNodes = (_QWORD *)OZScene::getDependantNodes(result, *((_DWORD *)this + 20));
    if (!DependantNodes)
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    v4 = DependantNodes + 1;
    v5 = (_QWORD *)*DependantNodes;
    if ((_QWORD *)*DependantNodes == DependantNodes + 1)
    {
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    }
    else
    {
      while (1)
      {
        Node = OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v5 + 7));
        if (Node)
        {
          if (((*(uint64_t (**)(_QWORD *, uint64_t))(Node[2] + 56))(Node + 2, 1) & 1) != 0)
            break;
        }
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
        if (v8 == v4)
          return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
      }
      return 0;
    }
  }
  return result;
}

OZScene *`non-virtual thunk to'OZSceneNodeFile::canDelete(OZSceneNodeFile *this)
{
  return OZSceneNodeFile::canDelete((OZSceneNodeFile *)((char *)this - 16));
}

uint64_t `non-virtual thunk to'OZSceneNodeFile::dirty(OZSceneNodeFile *this)
{
  return OZSceneNode::dirty((OZSceneNodeFile *)((char *)this - 16));
}

uint64_t OZSceneNodeFile::updateModifiedDate(OZSceneNodeFile *this)
{
  return 0;
}

void OZSceneNodeFile::getAssociatedFileURLs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t OZSceneNodeFile::getAbsoluteFileURL(OZSceneNodeFile *this)
{
  return *((_QWORD *)this + 193);
}

uint64_t OZSceneNodeFile::setAbsoluteFileURL(OZSceneNodeFile *this, PCURL *a2)
{
  PCURL *v4;
  PCURL *v5;

  v4 = (PCURL *)*((_QWORD *)this + 193);
  if (v4)
  {
    PCURL::~PCURL(v4);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 193) = 0;
  v5 = (PCURL *)operator new();
  PCURL::PCURL(v5, a2);
  *((_QWORD *)this + 193) = v5;
  return 1;
}

void sub_1B2E01300(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNodeFile::getRelativeFileURL(OZSceneNodeFile *this)
{
  return *((_QWORD *)this + 194);
}

uint64_t OZSceneNodeFile::setRelativeFileURL(OZSceneNodeFile *this, PCURL *a2)
{
  PCURL *v4;
  PCURL *v5;

  v4 = (PCURL *)*((_QWORD *)this + 194);
  if (v4)
  {
    PCURL::~PCURL(v4);
    MEMORY[0x1B5E29170]();
  }
  *((_QWORD *)this + 194) = 0;
  v5 = (PCURL *)operator new();
  PCURL::PCURL(v5, a2);
  *((_QWORD *)this + 194) = v5;
  return 1;
}

void sub_1B2E013A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

PCURL *OZSceneNodeFile::getURL@<X0>(OZSceneNodeFile *this@<X0>, PCURL *a2@<X8>)
{
  if (*((_BYTE *)this + 1561))
    return PCURL::PCURL(a2, (const PCString *)this + 196, 0);
  else
    return PCURL::PCURL(a2, *((const PCURL **)this + 193));
}

uint64_t OZSceneNodeFile::setIsFileMissing(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1561) = a2;
  return this;
}

uint64_t OZSceneNodeFile::isAssociatedFileMissing(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const PCURL *v4;
  const PCURL *v5;
  void *v6;
  char v7;
  const __CFString *v8;
  char v9;
  char v10;
  PCString v12;
  const PCURL *v13;
  const PCURL *v14;
  const PCURL **v15;

  (*(void (**)(const PCURL **__return_ptr))(*(_QWORD *)a1 + 1512))(&v13);
  v3 = objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = v13;
  v5 = v14;
  if (v13 == v14)
  {
    v7 = 0;
  }
  else
  {
    v6 = (void *)v3;
    v7 = 0;
    do
    {
      PCURL::PCURL((PCURL *)&v15, v4);
      PCURL::getAsFileSystemString((const __CFURL **)&v15, &v12);
      v8 = PCString::ns_str(&v12);
      PCString::~PCString(&v12);
      v9 = objc_msgSend(v6, "fileExistsAtPath:", v8);
      if (a2)
        v10 = v9;
      else
        v10 = 1;
      if ((v10 & 1) != 0)
      {
        v7 |= v9 ^ 1;
      }
      else
      {
        std::vector<PCURL>::push_back[abi:ne180100](a2, (PCURL *)&v15);
        v7 = 1;
      }
      PCURL::~PCURL((PCURL *)&v15);
      v4 = (const PCURL *)((char *)v4 + 8);
    }
    while (v4 != v5);
  }
  v15 = &v13;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  return v7 & 1;
}

void sub_1B2E014E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  a14 = &a11;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

PCURL *std::vector<PCURL>::push_back[abi:ne180100](uint64_t *a1, PCURL *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  PCURL *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  PCURL *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (PCURL *)&v14[8 * v10];
    v18 = &v14[8 * v13];
    PCURL::PCURL(v16, a2);
    v17 = (char *)v16 + 8;
    std::vector<PCURL>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = (PCURL *)std::__split_buffer<PCURL>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = PCURL::PCURL(*(PCURL **)(v4 - 8), a2);
    v9 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_1B2E0161C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void OZSceneNodeFile::getFilename(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  const __CFURL *v3;

  if (*((_BYTE *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(const __CFURL **__return_ptr))(*(_QWORD *)this + 1232))(&v3);
    PCURL::getFilename(&v3, (PCString *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B2E016A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getShortFilename(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  CFURLRef v3;

  if (*((_BYTE *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(CFURLRef *__return_ptr))(*(_QWORD *)this + 1232))(&v3);
    PCURL::getShortFilename(&v3, (PCString *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B2E01718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getExtension(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  const __CFURL *v3;

  if (*((_BYTE *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(const __CFURL **__return_ptr))(*(_QWORD *)this + 1232))(&v3);
    PCURL::getExtension(&v3, (PCURL *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B2E01790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getAsFileSystemString(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  const __CFURL *v3;

  if (*((_BYTE *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(const __CFURL **__return_ptr))(*(_QWORD *)this + 1232))(&v3);
    PCURL::getAsFileSystemString(&v3, (PCString *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B2E01808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getAsURLString(const PCString *this@<X0>, PCString *a2@<X8>)
{
  const __CFURL *v3;

  if (BYTE1(this[195].var0))
  {
    PCString::PCString(a2, this + 196);
  }
  else
  {
    ((void (*)(const __CFURL **__return_ptr))this->var0[38].data)(&v3);
    PCURL::getAsURLString(&v3, (PCURL *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B2E01884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNodeFile::fileSize(OZSceneNodeFile *this)
{
  uint64_t v1;
  void *v2;
  PCString v4;

  (*(void (**)(PCString *__return_ptr))(*(_QWORD *)this + 1264))(&v4);
  v1 = -[__CFString stringByResolvingSymlinksInPath]((id)PCString::ns_str(&v4), "stringByResolvingSymlinksInPath");
  PCString::~PCString(&v4);
  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "attributesOfItemAtPath:error:", v1, 0);
  return objc_msgSend((id)objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0CB2AF0]), "unsignedLongLongValue");
}

void sub_1B2E0190C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNodeFile::eval()
{
  return 0;
}

uint64_t OZSceneNodeFile::calcHashForState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  PCString v10;

  v8 = *(unsigned __int8 *)(a1 + 1561);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (!*(_BYTE *)(a1 + 1561))
  {
    (*(void (**)(PCString *__return_ptr, uint64_t))(*(_QWORD *)a1 + 1264))(&v10, a1);
    (*(void (**)(uint64_t, PCString *))(*(_QWORD *)a2 + 104))(a2, &v10);
    PCString::~PCString(&v10);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(unsigned int *)(a1 + 1536));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, a2, a3, a4, 1);
}

void sub_1B2E01A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZSceneNodeFile::calcHashForState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZSceneNodeFile::calcHashForState(a1 - 16, a2, a3, a4);
}

void OZSceneNodeFile::replaceCallback(OZChannelBase **this)
{
  const PCString *v2;

  ((void (*)(OZChannelBase **))(*this)[12].var11)(this);
  OZChannelBase::setRangeName(this[121], v2);
  OZDocument::postNotification((OZDocument *)this[121][14].var2, 524336);
}

uint64_t OZSceneNodeFile::isActiveAtTime(OZSceneNodeFile *this, CMTime *a2)
{
  (*(void (**)(OZSceneNodeFile *, CMTime *))(*(_QWORD *)this + 640))(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNodeFile::isActiveAtTime(OZSceneNodeFile *this, CMTime *a2)
{
  (*(void (**)(char *, CMTime *))(*((_QWORD *)this - 2) + 640))((char *)this - 16, a2);
  return 1;
}

_QWORD *OZSceneNodeFile::getHashForStateRN@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 + 16), a2, a3, a4, a5);
}

_OWORD *OZSceneNodeFile::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 + 16), a2, a3);
}

uint64_t OZSceneNodeFile::parseBegin(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZSceneNodeFile::parseBegin(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t OZSceneNodeFile::parseEnd(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZSceneNodeFile::parseEnd(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t OZSceneNodeFile::parseElement(OZSceneNodeFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZSceneNodeFile::parseElement(OZSceneNodeFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 0;
}

uint64_t OZSceneNodeFile::isInUse(OZSceneNodeFile *this)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  const void *Object;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  result = *((_QWORD *)this + 121);
  if (result)
  {
    result = OZScene::getDependantNodes((OZScene *)result, *((_DWORD *)this + 20));
    if (result)
    {
      v3 = (_QWORD *)(result + 8);
      v4 = *(_QWORD **)result;
      if (*(_QWORD *)result == result + 8)
      {
        return 0;
      }
      else
      {
        while (1)
        {
          if (OZScene::getObject(*((OZScene **)this + 121), *((_DWORD *)v4 + 7)))
          {
            Object = (const void *)OZScene::getObject(*((OZScene **)this + 121), *((_DWORD *)v4 + 7));
            if (!Object
            {
              break;
            }
          }
          v6 = (_QWORD *)v4[1];
          if (v6)
          {
            do
            {
              v7 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = (_QWORD *)v4[2];
              v8 = *v7 == (_QWORD)v4;
              v4 = v7;
            }
            while (!v8);
          }
          v4 = v7;
          if (v7 == v3)
            return 0;
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t OZSceneNode::setOwner(uint64_t this, OZSceneNode *a2)
{
  *(_QWORD *)(this + 960) = a2;
  return this;
}

uint64_t OZSceneNode::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a2, a3, 1);
}

uint64_t OZSceneNodeFile::getIsFileMissing(OZSceneNodeFile *this)
{
  return *((unsigned __int8 *)this + 1561);
}

uint64_t OZSceneNodeFile::getMissingFileURL(OZSceneNodeFile *this)
{
  return (uint64_t)this + 1568;
}

void OZSceneNodeFile::setName(OZSceneNodeFile *this, const PCString *a2)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 56), a2, 0);
}

uint64_t OZSceneNodeFile::getFilePathForCollectOperation(OZSceneNodeFile *this)
{
  return (*(uint64_t (**)(OZSceneNodeFile *))(*(_QWORD *)this + 1264))(this);
}

void `non-virtual thunk to'OZSceneNodeFile::setName(OZSceneNodeFile *this, const PCString *a2)
{
  OZChannelBase::setName((OZChannelBase *)((char *)this + 40), a2, 0);
}

uint64_t `non-virtual thunk to'OZSceneNode::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 16) + 528))(a1 - 16, a2, a3, 1);
}

void std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        PCURL::~PCURL((PCURL *)(v4 - 8));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<PCURL>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCURL>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCURL>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  PCURL *v12;

  v10 = 0;
  v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    v12 = (PCURL *)(v11 + v10);
    v10 -= 8;
    PCURL::PCURL(v12, (const PCURL *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<PCURL>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    PCURL::~PCURL((PCURL *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void OZLocking::OZLocking(OZLocking *this)
{
  *(_QWORD *)this = &unk_1E650B928;
  PCSharedMutex::PCSharedMutex((OZLocking *)((char *)this + 8));
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 120) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 128), 1);
  *((_QWORD *)this + 16) = &unk_1E64E2000;
}

void sub_1B2E01E58(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::~PCSharedMutex(v1);
  _Unwind_Resume(a1);
}

char *OZLocking::getLockDependenciesForElement(char *result, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  char *v7;
  char *v8;
  _QWORD *i;
  unint64_t v10;
  char *v11;
  char *j;
  const void *v13;
  void *v14;
  _QWORD *k;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  char *v24;
  OZScene *v25;
  char *v26;
  char *v27;
  unint64_t *v28;

  if (result)
  {
    v7 = result;
    v8 = result;
    v26 = result;
    if (result)
    {
      for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
      {
        v10 = i[4];
        if ((unint64_t)result >= v10)
        {
          if (v10 >= (unint64_t)result)
            return result;
          ++i;
        }
      }
      if (a2)
      {
        PCDirectedGraph<OZLocking *>::addEdge(a3, a2, (uint64_t)result);
      }
      else
      {
        v27 = result;
        v28 = (unint64_t *)&v27;
        std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, (unint64_t *)&v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28);
      }
      std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v26, (uint64_t *)&v26);
    }
    else
    {
      v26 = (char *)a2;
    }
    v11 = v7;
    do
    {
      for (j = (char *)*((_QWORD *)v11 + 126); j != v11 + 1000; j = (char *)*((_QWORD *)j + 1))
      {
        v13 = (const void *)*((_QWORD *)j + 2);
        if (v13)
        {
          if (v14)
          {
            for (k = *(_QWORD **)(a4 + 8); k; k = (_QWORD *)*k)
            {
              v16 = k[4];
              if ((unint64_t)v14 >= v16)
              {
                if (v16 >= (unint64_t)v14)
                  goto LABEL_24;
                ++k;
              }
            }
            (*(void (**)(void *, char *, uint64_t **, uint64_t))(*(_QWORD *)v14 + 48))(v14, v26, a3, a4);
          }
        }
LABEL_24:
        ;
      }
      v11 = (char *)*((_QWORD *)v11 + 120);
    }
    while (v11);
    if (v17)
    {
      v18 = v17;
      v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 1024))(v17);
      v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 1032))(v18);
      if (v19 != v20)
      {
        v21 = v20;
        do
        {
          v22 = *(const void **)(v19 + 16);
          if (v22)
          {
            if (v23)
              OZLocking::getLockDependenciesForElement(v23, a2, a3, a4);
          }
          v19 = *(_QWORD *)(v19 + 8);
        }
        while (v19 != v21);
      }
    }
    v24 = v26;
    v25 = (OZScene *)(*(uint64_t (**)(char *))(*(_QWORD *)v7 + 272))(v7);
    result = OZLocking::addLockDependenciesForDependents(v24, v25, (uint64_t)a3, a4);
    if (v8 && v26)
      return (char *)std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v26);
  }
  return result;
}

char *OZLocking::addLockDependenciesForDependents(char *result, OZScene *a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  if (result)
  {
    if (a2)
    {
      v7 = result;
      if (result)
      {
        v8 = (*(uint64_t (**)(char *))(*(_QWORD *)result + 256))(result);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
        result = (char *)OZScene::getDependantNodes(a2, v9);
        if (result)
        {
          v10 = result + 8;
          v11 = *(_QWORD **)result;
          if (*(char **)result != result + 8)
          {
            do
            {
              result = (char *)OZScene::getObject(a2, *((_DWORD *)v11 + 7));
              if (result)
              {
                if (result)
                  result = (char *)(*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, v7, a3, a4);
              }
              v12 = (_QWORD *)v11[1];
              if (v12)
              {
                do
                {
                  v13 = v12;
                  v12 = (_QWORD *)*v12;
                }
                while (v12);
              }
              else
              {
                do
                {
                  v13 = (_QWORD *)v11[2];
                  v14 = *v13 == (_QWORD)v11;
                  v11 = v13;
                }
                while (!v14);
              }
              v11 = v13;
            }
            while (v13 != v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZLocking::reset(OZLocking *this)
{
  PCMutex *v2;

  v2 = (PCMutex *)((char *)this + 128);
  PCMutex::lock((PCMutex *)((char *)this + 128));
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 120) = 0;
  return PCMutex::unlock(v2);
}

uint64_t OZLocking::removeFromLockingGroup(OZLocking *this)
{
  PCMutex *v2;
  OZScene **v3;
  unsigned int v4;

  v2 = (PCMutex *)((char *)this + 128);
  PCMutex::lock((PCMutex *)((char *)this + 128));
  v3 = (OZScene **)*((_QWORD *)this + 14);
  if (v3)
  {
    v4 = (*(uint64_t (**)(OZLocking *))(*(_QWORD *)this + 32))(this);
    OZLockingGroup::remove(v3, v4);
  }
  OZLocking::reset(this);
  return PCMutex::unlock(v2);
}

void sub_1B2E022A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void OZLockingGroup::remove(OZScene **this, unsigned int a2)
{
  const void *Object;
  OZScene *v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  OZScene **v9;

  Object = (const void *)OZScene::getObject(this[3], a2);
  if (Object)
  {
    {
      v5 = this[1];
      if (v5)
      {
        v6 = (uint64_t *)(this + 1);
        do
        {
          v7 = *((_DWORD *)v5 + 8);
          v8 = v7 >= a2;
          if (v7 >= a2)
            v9 = (OZScene **)v5;
          else
            v9 = (OZScene **)((char *)v5 + 8);
          if (v8)
            v6 = (uint64_t *)v5;
          v5 = *v9;
        }
        while (*v9);
        if (v6 != (uint64_t *)(this + 1) && *((_DWORD *)v6 + 8) <= a2)
        {
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this, v6);
          operator delete(v6);
        }
      }
    }
  }
}

uint64_t OZLocking::setLockingGroup(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 112) = a2;
  return result;
}

uint64_t OZLockingGroup::OZLockingGroup(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)result = result + 8;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void OZLockingGroup::~OZLockingGroup(OZScene **this)
{
  OZScene **v2;
  OZScene *v3;
  const void *Object;
  OZLocking *v5;
  OZScene *v6;
  OZScene **v7;
  BOOL v8;

  v2 = this + 1;
  v3 = *this;
  if (*this != (OZScene *)(this + 1))
  {
    do
    {
      Object = (const void *)OZScene::getObject(this[3], *((_DWORD *)v3 + 8));
      if (Object)
      {
        if (v5)
          OZLocking::reset(v5);
      }
      v6 = (OZScene *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = (OZScene **)v6;
          v6 = *(OZScene **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (OZScene **)*((_QWORD *)v3 + 2);
          v8 = *v7 == v3;
          v3 = (OZScene *)v7;
        }
        while (!v8);
      }
      v3 = (OZScene *)v7;
    }
    while (v7 != v2);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this, this[1]);
}

uint64_t **OZLockingGroup::add(OZScene **this, unsigned int a2)
{
  uint64_t **result;
  __int128 v5;

  result = (uint64_t **)OZScene::getObject(this[3], a2);
  if (result)
  {
    if (result)
    {
      *((_QWORD *)&v5 + 1) = result;
      *(_QWORD *)&v5 = a2;
      return std::__tree<OZLockingGroup::LockEntry,OZLockingGroup::LockEntryCompare,std::allocator<OZLockingGroup::LockEntry>>::__emplace_unique_key_args<OZLockingGroup::LockEntry,OZLockingGroup::LockEntry const&>((uint64_t **)this, (unsigned int *)&v5, &v5);
    }
  }
  return result;
}

void OZLockingGroup::acquireLocks(OZScene **this)
{
  OZScene *v2;
  const void *Object;
  void (***v4)(_QWORD);
  OZLockingGroup *v5;
  OZLockingGroup *v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int v9;

  OZScene::willAcquireLockingGroup(this[3]);
  v2 = *this;
  if (*this != (OZScene *)(this + 1))
  {
    do
    {
      Object = (const void *)OZScene::getObject(this[3], *((_DWORD *)v2 + 8));
      if (Object)
      {
        if (v4)
          (**v4)(v4);
      }
      v5 = (OZLockingGroup *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(OZLockingGroup **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (OZLockingGroup *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != (OZLockingGroup *)(this + 1));
  }
  v8 = (unsigned int *)(this + 4);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
}

void OZLockingGroup::releaseLocks(OZScene **this)
{
  OZScene *v2;
  OZScene *v3;
  OZScene *v4;
  unsigned int *v5;
  BOOL v6;
  const void *Object;
  void *v8;
  OZScene *v9;
  OZScene *v10;
  unsigned int *v11;
  unsigned int v12;

  v2 = (OZScene *)(this + 1);
  if (this + 1 != (OZScene **)*this)
  {
    do
    {
      v3 = *(OZScene **)v2;
      v4 = v2;
      if (*(_QWORD *)v2)
      {
        do
        {
          v5 = (unsigned int *)v3;
          v3 = (OZScene *)*((_QWORD *)v3 + 1);
        }
        while (v3);
      }
      else
      {
        do
        {
          v5 = (unsigned int *)*((_QWORD *)v4 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v4;
          v4 = (OZScene *)v5;
        }
        while (v6);
      }
      Object = (const void *)OZScene::getObject(this[3], v5[8]);
      if (Object)
      {
        if (v8)
          (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
      }
      v9 = *(OZScene **)v2;
      if (*(_QWORD *)v2)
      {
        do
        {
          v10 = v9;
          v9 = (OZScene *)*((_QWORD *)v9 + 1);
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (OZScene *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (v6);
      }
      v2 = v10;
    }
    while (v10 != *this);
  }
  v11 = (unsigned int *)(this + 4);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  OZScene::didReleaseLockingGroup(this[3]);
}

void OZLockingGroup::acquireReadLocks(OZScene **this)
{
  OZScene *v2;
  const void *Object;
  void *v4;
  OZLockingGroup *v5;
  OZLockingGroup *v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int v9;

  OZScene::willAcquireLockingGroup(this[3]);
  v2 = *this;
  if (*this != (OZScene *)(this + 1))
  {
    do
    {
      Object = (const void *)OZScene::getObject(this[3], *((_DWORD *)v2 + 8));
      if (Object)
      {
        if (v4)
          (*(void (**)(void *))(*(_QWORD *)v4 + 16))(v4);
      }
      v5 = (OZLockingGroup *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(OZLockingGroup **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (OZLockingGroup *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != (OZLockingGroup *)(this + 1));
  }
  v8 = (unsigned int *)(this + 4);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
}

void OZLockingGroup::releaseReadLocks(OZScene **this)
{
  OZScene *v2;
  OZScene *v3;
  OZScene *v4;
  unsigned int *v5;
  BOOL v6;
  const void *Object;
  void *v8;
  OZScene *v9;
  OZScene *v10;
  unsigned int *v11;
  unsigned int v12;

  v2 = (OZScene *)(this + 1);
  if (this + 1 != (OZScene **)*this)
  {
    do
    {
      v3 = *(OZScene **)v2;
      v4 = v2;
      if (*(_QWORD *)v2)
      {
        do
        {
          v5 = (unsigned int *)v3;
          v3 = (OZScene *)*((_QWORD *)v3 + 1);
        }
        while (v3);
      }
      else
      {
        do
        {
          v5 = (unsigned int *)*((_QWORD *)v4 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v4;
          v4 = (OZScene *)v5;
        }
        while (v6);
      }
      Object = (const void *)OZScene::getObject(this[3], v5[8]);
      if (Object)
      {
        if (v8)
          (*(void (**)(void *))(*(_QWORD *)v8 + 24))(v8);
      }
      v9 = *(OZScene **)v2;
      if (*(_QWORD *)v2)
      {
        do
        {
          v10 = v9;
          v9 = (OZScene *)*((_QWORD *)v9 + 1);
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (OZScene *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (v6);
      }
      v2 = v10;
    }
    while (v10 != *this);
  }
  v11 = (unsigned int *)(this + 4);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  OZScene::didReleaseLockingGroup(this[3]);
}

OZLockingGroup::WriteSentry *OZLockingGroup::WriteSentry::WriteSentry(OZLockingGroup::WriteSentry *this, OZScene **a2)
{
  *(_QWORD *)this = a2;
  if (a2)
    OZLockingGroup::acquireLocks(a2);
  return this;
}

void OZLockingGroup::WriteSentry::~WriteSentry(OZScene ***this)
{
  OZScene **v1;

  v1 = *this;
  if (v1)
    OZLockingGroup::releaseLocks(v1);
}

OZLockingGroup::ReadSentry *OZLockingGroup::ReadSentry::ReadSentry(OZLockingGroup::ReadSentry *this, OZScene **a2)
{
  *(_QWORD *)this = a2;
  if (a2)
    OZLockingGroup::acquireReadLocks(a2);
  return this;
}

void OZLockingGroup::ReadSentry::~ReadSentry(OZScene ***this)
{
  OZScene **v1;

  v1 = *this;
  if (v1)
    OZLockingGroup::releaseReadLocks(v1);
}

uint64_t **std::__tree<OZLockingGroup::LockEntry,OZLockingGroup::LockEntryCompare,std::allocator<OZLockingGroup::LockEntry>>::__emplace_unique_key_args<OZLockingGroup::LockEntry,OZLockingGroup::LockEntry const&>(uint64_t **a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void OZSceneNode::OZSceneNode(OZSceneNode *this, OZFactory *a2, const PCString *a3, unsigned int NextUniqueID)
{
  OZChannelBase *v7;
  PCString v8;

  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 32));
  *(_QWORD *)this = &off_1E65897B0;
  *((_QWORD *)this + 2) = &unk_1E6589C70;
  *((_QWORD *)this + 6) = &unk_1E6589EC8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v7);
  OZChannelSceneNode::OZChannelSceneNode((OZSceneNode *)((char *)this + 56), a3, 0, NextUniqueID, 0);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Properties"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 320), &v8, (OZChannelFolder *)((char *)this + 56), 1u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Object"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 448), &v8, (OZChannelFolder *)((char *)this + 56), 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Effects"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 576), &v8, (OZChannelFolder *)((char *)this + 56), 3u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Behaviors"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 704), &v8, (OZChannelFolder *)((char *)this + 56), 4u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Channel Styles"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 832), &v8, (OZChannelFolder *)((char *)this + 56), 5u, 0, 0);
  PCString::~PCString(&v8);
  *((_OWORD *)this + 60) = 0u;
  *((_QWORD *)this + 122) = (char *)this + 976;
  *((_QWORD *)this + 123) = (char *)this + 976;
  *((_QWORD *)this + 124) = 0;
  *((_QWORD *)this + 125) = (char *)this + 1000;
  *((_QWORD *)this + 126) = (char *)this + 1000;
  *((_QWORD *)this + 127) = 0;
  *((_QWORD *)this + 129) = 0x4014000000000000;
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 1040));
  *((_DWORD *)this + 270) = 0;
  *((_QWORD *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  *((_DWORD *)this + 256) = 0;
  *((_BYTE *)this + 1028) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 576), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 576));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 704), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 704));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 832), 2, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 832), 0x80000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 832));
}

void sub_1B2E02CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, PCString a10)
{
  uint64_t v10;
  OZChannelSceneNode *v11;
  OZChannelFolder *v12;
  OZChannelFolder *v13;
  OZChannelFolder *v14;
  OZChannelFolder *v15;
  OZChannelFolder *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  std::__list_imp<unsigned int>::clear(v18);
  std::__list_imp<unsigned int>::clear(v17);
  OZChannelFolder::~OZChannelFolder(v16);
  OZChannelFolder::~OZChannelFolder(v15);
  OZChannelFolder::~OZChannelFolder(v14);
  OZChannelFolder::~OZChannelFolder(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  OZChannelSceneNode::~OZChannelSceneNode(v11);
  *(_QWORD *)(v10 + 16) = &unk_1E6588EA0;
  v19 = *(_QWORD *)(v10 + 24);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v10 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZSceneNode::OZSceneNode(OZSceneNode *this, const OZSceneNode *a2, char a3)
{
  uint64_t v6;
  OZChannelBase *v7;
  unsigned int NextUniqueID;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = &unk_1E6589FB8;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = &unk_1E65953C8;
  *((_QWORD *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 32));
  *(_QWORD *)this = &off_1E65897B0;
  *((_QWORD *)this + 2) = &unk_1E6589C70;
  *((_QWORD *)this + 6) = &unk_1E6589EC8;
  OZChannelSceneNode::OZChannelSceneNode((OZSceneNode *)((char *)this + 56), (const OZTimeMarkerSet **)a2 + 7, 0);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 320), (const OZChannelFolder *)((char *)a2 + 320), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 448), (const OZChannelFolder *)((char *)a2 + 448), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 576), (const OZChannelFolder *)((char *)a2 + 576), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 704), (const OZChannelFolder *)((char *)a2 + 704), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 832), (const OZChannelFolder *)((char *)a2 + 832), (OZChannelFolder *)((char *)this + 56));
  *((_OWORD *)this + 60) = 0u;
  *((_QWORD *)this + 122) = (char *)this + 976;
  *((_QWORD *)this + 123) = (char *)this + 976;
  *((_QWORD *)this + 124) = 0;
  *((_QWORD *)this + 125) = (char *)this + 1000;
  *((_QWORD *)this + 126) = (char *)this + 1000;
  *((_QWORD *)this + 127) = 0;
  *((_QWORD *)this + 129) = *((_QWORD *)a2 + 129);
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 1040));
  *((_QWORD *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((_DWORD *)this + 270) = *((_DWORD *)a2 + 270) + 1;
  v7 = (OZChannelBase *)OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  *((_DWORD *)this + 256) = *((_DWORD *)a2 + 256);
  *((_BYTE *)this + 1028) = *((_BYTE *)a2 + 1028);
  if ((a3 & 2) != 0)
  {
    NextUniqueID = OZChannelBase::getNextUniqueID(v7);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 56), NextUniqueID);
  }
}

void sub_1B2E02F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelFolder *a9, OZChannelFolder *a10)
{
  uint64_t v10;
  OZChannelSceneNode *v11;
  _QWORD *v12;
  OZChannelFolder *v13;
  OZChannelFolder *v14;
  OZChannelFolder *v15;
  _QWORD *v16;
  uint64_t v18;

  std::__list_imp<unsigned int>::clear(v12);
  std::__list_imp<unsigned int>::clear(v16);
  OZChannelFolder::~OZChannelFolder(v15);
  OZChannelFolder::~OZChannelFolder(v14);
  OZChannelFolder::~OZChannelFolder(v13);
  OZChannelFolder::~OZChannelFolder(a9);
  OZChannelFolder::~OZChannelFolder(a10);
  OZChannelSceneNode::~OZChannelSceneNode(v11);
  *(_QWORD *)(v10 + 16) = &unk_1E6588EA0;
  v18 = *(_QWORD *)(v10 + 24);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v10 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZSceneNode::~OZSceneNode(OZSceneNode *this)
{
  OZChannelSceneNode *v2;
  int isSolo;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  OZScene *v8;
  OZObjectManipulator *v9;
  uint64_t *v10;
  unsigned int *v11;
  uint64_t v12;
  OZScene *v13;
  OZObjectManipulator *v14;
  uint64_t v15;
  OZSceneNode **v16;
  OZSceneNode *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[25];
  _BYTE v22[16];
  __n128 *v23;
  int v24;
  _BYTE v25[25];
  _OWORD v26[2];
  int v27;
  _BYTE v28[25];
  __int128 v29;
  __int128 v30;
  int v31;
  _BYTE v32[25];
  _QWORD v33[4];
  int v34;

  *(_QWORD *)this = &off_1E65897B0;
  *((_QWORD *)this + 2) = &unk_1E6589C70;
  *((_QWORD *)this + 6) = &unk_1E6589EC8;
  v2 = (OZSceneNode *)((char *)this + 56);
  isSolo = OZChannelBase::isSolo((OZChannelBase *)((char *)this + 56));
  while (1)
  {
    v4 = *((_QWORD *)this + 124);
    if (!v4)
      break;
    v5 = (uint64_t *)*((_QWORD *)this + 123);
    v6 = (unsigned int *)v5[2];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = v5[1];
    *(_QWORD *)v5[1] = v7;
    *((_QWORD *)this + 124) = v4 - 1;
    operator delete(v5);
    v8 = (OZScene *)*((_QWORD *)this + 121);
    if (v8)
    {
      if (v6)
        v9 = (OZObjectManipulator *)(v6 + 12);
      else
        v9 = 0;
      OZScene::unregisterObject(v8, v9);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v6[28]);
LABEL_9:
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
    else if (v6)
    {
      goto LABEL_9;
    }
  }
  while (1)
  {
    v15 = *((_QWORD *)this + 127);
    if (!v15)
      break;
    v10 = (uint64_t *)*((_QWORD *)this + 126);
    v11 = (unsigned int *)v10[2];
    v12 = *v10;
    *(_QWORD *)(v12 + 8) = v10[1];
    *(_QWORD *)v10[1] = v12;
    *((_QWORD *)this + 127) = v15 - 1;
    operator delete(v10);
    v13 = (OZScene *)*((_QWORD *)this + 121);
    if (v13)
    {
      if (v11)
        v14 = (OZObjectManipulator *)(v11 + 4);
      else
        v14 = 0;
      OZScene::unregisterObject(v13, v14);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v11[20]);
    }
    else if (!v11)
    {
      continue;
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
  }
  OZSceneNode::removeFromParent(this);
  OZSceneNode::removeFromLinked(this);
  (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 760))(this);
  v16 = (OZSceneNode **)*((_QWORD *)this + 121);
  if (v16)
  {
    if (v16[153] == this)
    {
      OZScene::setCurrentObject((OZScene *)v16, 0);
      v16 = (OZSceneNode **)*((_QWORD *)this + 121);
    }
    if (v16[154] == this)
    {
      OZScene::setActiveLayer((uint64_t)v16, 0);
      v16 = (OZSceneNode **)*((_QWORD *)this + 121);
    }
    OZScene::unregisterNode((OZScene *)v16, this);
    if (isSolo)
    {
      memset(v33, 0, sizeof(v33));
      memset(v32, 0, 24);
      v34 = 1065353216;
      v29 = 0u;
      v30 = 0u;
      memset(v28, 0, 24);
      v31 = 1065353216;
      memset(v26, 0, sizeof(v26));
      memset(v25, 0, 24);
      v27 = 1065353216;
      OZScene::begin(*((OZScene **)this + 121), (uint64_t)v21);
      *(_OWORD *)v28 = *(_OWORD *)v21;
      *(_OWORD *)&v28[9] = *(_OWORD *)&v21[9];
      v31 = v24;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v29, v23, 0);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
      OZScene::end_sel(*((OZScene **)this + 121), (uint64_t)v21);
      *(_OWORD *)v25 = *(_OWORD *)v21;
      *(_OWORD *)&v25[9] = *(_OWORD *)&v21[9];
      v27 = v24;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v26, v23, 0);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
      *(_OWORD *)v32 = *(_OWORD *)v28;
      *(_OWORD *)&v32[9] = *(_OWORD *)&v28[9];
      v34 = v31;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v33, (__n128 *)v30, 0);
      while (*(_QWORD *)v32 != *(_QWORD *)v25)
      {
        if (*(_QWORD *)v32 != *(_QWORD *)&v32[16])
        {
          v18 = *(_QWORD *)(*(_QWORD *)v32 + 16);
          if (v18)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 712))(v18) & 1) != 0)
            {
              if (*(_QWORD *)v32 != *(_QWORD *)v25)
                goto LABEL_32;
              break;
            }
          }
        }
        OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v32);
      }
      OZScene::updateSoloFlag(*((OZScene **)this + 121), v17);
LABEL_32:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v26);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v29);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v33);
    }
  }
  v19 = (void *)*((_QWORD *)this + 132);
  if (v19)
  {
    *((_QWORD *)this + 133) = v19;
    operator delete(v19);
  }
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 125);
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 122);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 832));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 704));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 576));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 320));
  OZChannelSceneNode::~OZChannelSceneNode(v2);
  *((_QWORD *)this + 2) = &unk_1E6588EA0;
  v20 = *((_QWORD *)this + 3);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    *((_QWORD *)this + 3) = 0;
  }
}

{
  OZSceneNode::~OZSceneNode(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSceneNode::removeFromParent(OZSceneNode *this)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  OZScene *v5;

  v2 = *((_QWORD *)this + 120);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 496))(v2);
    v3 = **((_QWORD **)this + 120);
    if ((*((_BYTE *)this + 1024) & 8) != 0)
      v4 = *(void (**)(void))(v3 + 1096);
    else
      v4 = *(void (**)(void))(v3 + 1000);
    v4();
  }
  else
  {
    v5 = (OZScene *)*((_QWORD *)this + 121);
    if (v5)
      OZScene::removeRootNode(v5, this);
  }
  return (*(uint64_t (**)(OZSceneNode *, _QWORD))(*(_QWORD *)this + 280))(this, 0);
}

_QWORD *OZSceneNode::removeFromLinked(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (this[121])
  {
    v1 = this;
    v2 = this[132];
    v3 = this[133];
    while (v2 != v3)
    {
      this = OZScene::getNode((OZScene *)v1[121], *(_DWORD *)(v3 - 4));
      if (this)
        this = OZSceneNode::removeLinkedID((OZSceneNode *)this, *((_DWORD *)v1 + 20));
      v3 = v1[133] - 4;
      v1[133] = v3;
      v2 = v1[132];
    }
  }
  return this;
}

void `non-virtual thunk to'OZSceneNode::~OZSceneNode(OZSceneNode *this)
{
  OZSceneNode::~OZSceneNode((OZSceneNode *)((char *)this - 16));
}

{
  OZSceneNode::~OZSceneNode((OZSceneNode *)((char *)this - 48));
}

{
  OZSceneNode::~OZSceneNode((OZSceneNode *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZSceneNode::~OZSceneNode((OZSceneNode *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSceneNode::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t j;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  OZScene *v10;
  OZObjectManipulator *v11;
  OZChannelBase *v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  OZScene *v16;
  OZChannelBase *v17;
  uint64_t result;

  v4 = (uint64_t *)(a1 + 1000);
  for (i = *(uint64_t **)(a1 + 1008); v4 != i; i = *(uint64_t **)(a1 + 1008))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*v4 + 16) + 120))(*(_QWORD *)(*v4 + 16));
    v4 = (uint64_t *)*v4;
  }
  for (j = *(_QWORD *)(a1 + 1016); j; j = *(_QWORD *)(a1 + 1016))
  {
    v7 = *(uint64_t **)(a1 + 1008);
    v8 = (unsigned int *)v7[2];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = v7[1];
    *(_QWORD *)v7[1] = v9;
    *(_QWORD *)(a1 + 1016) = j - 1;
    operator delete(v7);
    v10 = *(OZScene **)(a1 + 968);
    if (v10)
    {
      if (v8)
        v11 = (OZObjectManipulator *)(v8 + 4);
      else
        v11 = 0;
      OZScene::unregisterObject(v10, v11);
      OZScene::removeAllDependencies(*(OZScene **)(a1 + 968), v8[20]);
    }
    v12 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 312))(v8);
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 704), v12);
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  while (*(_QWORD *)(a1 + 992))
  {
    v13 = *(unsigned int **)(*(_QWORD *)(a1 + 984) + 16);
    (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 448))(v13);
    v14 = *(uint64_t **)(a1 + 984);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = v14[1];
    *(_QWORD *)v14[1] = v15;
    --*(_QWORD *)(a1 + 992);
    operator delete(v14);
    v16 = *(OZScene **)(a1 + 968);
    if (v16)
    {
      OZScene::unregisterObject(v16, (OZObjectManipulator *)(v13 + 12));
      OZScene::removeAllDependencies(*(OZScene **)(a1 + 968), v13[28]);
    }
    v17 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 240))(v13);
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 576), v17);
    (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, a2, 0);
  OZChannelFolder::operator=(a1 + 56);
  OZChannelFolder::operator=(a1 + 320);
  OZChannelFolder::operator=(a1 + 448);
  OZChannelFolder::operator=(a1 + 576);
  OZChannelFolder::operator=(a1 + 704);
  result = OZChannelFolder::operator=(a1 + 832);
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a2 + 1024);
  *(_BYTE *)(a1 + 1028) = *(_BYTE *)(a2 + 1028);
  ++*(_DWORD *)(a1 + 1080);
  return result;
}

OZChannelBase *OZSceneNode::finishInitializing(OZSceneNode *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));
}

char *OZSceneNode::cloneBehaviorsEffects(char *this, const OZSceneNode *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  char *v7;
  OZChannelBase *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  OZChannelBase *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *i;

  v5 = this;
  v6 = (char *)a2 + 1000;
  if ((const OZSceneNode *)((char *)a2 + 1000) != *((const OZSceneNode **)a2 + 126))
  {
    do
    {
      this = (char *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v6 + 16)
                                                                                      + 8)
                                                                        + 24))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 16) + 8), *(_QWORD *)(*(_QWORD *)v6 + 16), a3);
      if (this)
      {
        if (this)
        {
          v7 = this;
          v8 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)this + 312))(this);
          OZChannelFolder::push_front((OZChannelFolder *)(v5 + 704), v8);
          v9 = operator new(0x18uLL);
          v10 = (_QWORD *)*((_QWORD *)v5 + 126);
          *v9 = v5 + 1000;
          v9[1] = v10;
          v9[2] = v7;
          *v10 = v9;
          *((_QWORD *)v5 + 126) = v9;
          ++*((_QWORD *)v5 + 127);
          this = (char *)*((_QWORD *)v5 + 121);
          if (this)
          {
            OZScene::registerObject((OZScene *)this, (OZObjectManipulator *)(v7 + 16));
            this = (char *)OZScene::addNodeDependency(*((_QWORD *)v5 + 121), *((_DWORD *)v7 + 20), *((_DWORD *)v5 + 20));
          }
        }
      }
      v6 = *(char **)v6;
    }
    while (v6 != *((char **)a2 + 126));
  }
  if (v5)
  {
    v11 = this;
  }
  else
  {
    v11 = 0;
  }
  v12 = (char *)a2 + 976;
  if ((const OZSceneNode *)((char *)a2 + 976) != *((const OZSceneNode **)a2 + 123))
  {
    do
    {
      this = (char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v12 + 16)
                                                                                       + 40)
                                                                         + 24))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 16) + 40), *(_QWORD *)(*(_QWORD *)v12 + 16) + 32, a3);
      if (this
      {
        v13 = this;
        v14 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)this + 240))(this);
        OZChannelFolder::push_front((OZChannelFolder *)(v5 + 576), v14);
        v15 = operator new(0x18uLL);
        v16 = (_QWORD *)*((_QWORD *)v5 + 123);
        *v15 = v5 + 976;
        v15[1] = v16;
        v15[2] = v13;
        *v16 = v15;
        *((_QWORD *)v5 + 123) = v15;
        ++*((_QWORD *)v5 + 124);
        *((_QWORD *)v13 + 3) = v11;
        *((_QWORD *)v13 + 45) = v5;
        this = (char *)*((_QWORD *)v5 + 121);
        if (this)
        {
          OZScene::registerObject((OZScene *)this, (OZObjectManipulator *)(v13 + 48));
          this = (char *)OZScene::addNodeDependency(*((_QWORD *)v5 + 121), *((_DWORD *)v13 + 28), *((_DWORD *)v5 + 20));
        }
      }
      else
      {
        v13 = v11;
      }
      v12 = *(char **)v12;
      v11 = v13;
    }
    while (v12 != *((char **)a2 + 123));
  }
  for (i = v5 + 1000; i != *((char **)v5 + 126); i = *(char **)i)
    this = (char *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)i + 16) + 96))(*(_QWORD *)(*(_QWORD *)i + 16), v5);
  return this;
}

void OZSceneNode::copyLinkedIDs(OZSceneNode *this, const OZSceneNode *a2)
{
  int *v2;
  int *v3;
  int v5;

  v2 = (int *)*((_QWORD *)a2 + 132);
  v3 = (int *)*((_QWORD *)a2 + 133);
  while (v2 != v3)
  {
    v5 = *v2++;
    OZSceneNode::addLinkedID(this, v5);
  }
}

void OZSceneNode::addLinkedID(OZSceneNode *this, int a2)
{
  char *v4;
  unint64_t v5;
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  v4 = (char *)*((_QWORD *)this + 133);
  v5 = *((_QWORD *)this + 134);
  if ((unint64_t)v4 >= v5)
  {
    v7 = (char *)*((_QWORD *)this + 132);
    v8 = (v4 - v7) >> 2;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = v5 - (_QWORD)v7;
    v10 = (uint64_t)(v5 - (_QWORD)v7) >> 1;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 1072, v11);
      v4 = (char *)*((_QWORD *)this + 133);
      v7 = (char *)*((_QWORD *)this + 132);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v15 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *((_QWORD *)this + 132) = v13;
    *((_QWORD *)this + 133) = v6;
    *((_QWORD *)this + 134) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v4 = a2;
    v6 = v4 + 4;
  }
  *((_QWORD *)this + 133) = v6;
}

void OZSceneNode::copyLinkedObjects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZSceneNode.cpp");
  pcAbortImpl();
}

uint64_t OZSceneNode::hitCheck()
{
  return 0;
}

{
  return 0;
}

uint64_t OZSceneNode::getDescendantAtIndex(OZSceneNode *this, int a2)
{
  char *v3;
  char *v4;
  _BOOL4 v5;
  int v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  OZChannelBase *v14;

  if (*((_QWORD *)this + 124))
  {
    v3 = (char *)this + 976;
    v4 = (char *)*((_QWORD *)this + 123);
    v5 = v4 != (char *)this + 976;
    v6 = 0;
    if (v4 != (char *)this + 976 && a2 != 0)
    {
      do
      {
        v4 = (char *)*((_QWORD *)v4 + 1);
        v5 = v4 != v3;
      }
      while (v4 != v3 && a2 - 1 != v6++);
    }
    if (v5)
    {
      v9 = *((_QWORD *)v4 + 2);
      v10 = v9 + 48;
      goto LABEL_23;
    }
  }
  else
  {
    v6 = 0;
  }
  if (!*((_QWORD *)this + 127))
    return 0;
  v11 = (char *)this + 1000;
  for (i = *((_QWORD *)this + 126); (char *)i != v11 && v6 != a2; i = *(_QWORD *)(i + 8))
  {
    v14 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 312))(*(_QWORD *)(i + 16));
    v6 += !OZChannelBase::testFlag(v14, 2);
  }
  if ((char *)i == v11)
    return 0;
  v9 = *(_QWORD *)(i + 16);
  v10 = v9 + 16;
LABEL_23:
  if (v9)
    return v10;
  else
    return 0;
}

uint64_t OZSceneNode::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  void (*v12)(PCSerializerWriteStream *, uint64_t);
  uint64_t Name;
  const OZFactory *v14;
  uint64_t v15;
  const PCString *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  OZFxGenerator *v21;
  uint64_t InternalName;
  PCString v23;

  if (this)
  {
    v5 = v4;
    if (v4)
    {
      v6 = (*(uint64_t (**)(_QWORD *))(v4[2423] + 208))(v4 + 2423);
      v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
  v7 = 1;
LABEL_6:
  v8 = (*((uint64_t (**)(OZFactory **))*this + 61))(this);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneNodeWriteScope);
  if (((_BYTE)this[128] & 8) != 0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 70);
    v9 = 0;
    v10 = 1;
  }
  else
  {
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 61);
    }
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 63);
    }
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 66);
    }
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 67);
    }
    else
    {
      v12 = *(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16);
      if (!v11)
      {
        v12(a2, 62);
        v10 = 1;
        v9 = 1;
        goto LABEL_19;
      }
      v12(a2, 64);
    }
    v10 = 0;
    v9 = 0;
  }
LABEL_19:
  Name = OZObjectManipulator::getName((OZObjectManipulator *)(this + 2));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 200))(a2, 110, Name);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 111, *((unsigned int *)this + 20));
  if (v10 && ((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    v15 = OZFactory::fileRefID(this[1], v14);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 113, v15);
  }
  if ((v7 & 1) == 0)
  {
    OZFxPlugSharedBase::getPluginUUID(v16 + 2423, &v23);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 7, &v23);
    PCString::~PCString(&v23);
    v18 = (*(uint64_t (**)(_QWORD *))(v17[2423] + 192))(v17 + 2423);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, 8, v18);
  }
  if (!v6)
  {
    if (!v8)
      goto LABEL_26;
LABEL_30:
    if (v21)
      InternalName = OZFxGenerator::getInternalName(v21);
    else
      InternalName = OZObjectManipulator::getInternalName((OZObjectManipulator *)(this + 2));
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 200))(a2, 118, InternalName);
    if (v9)
      goto LABEL_27;
    return PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  v20 = (*(uint64_t (**)(_QWORD *))(v5[2423] + 208))(v5 + 2423);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, 9, v20);
  if (v8)
    goto LABEL_30;
LABEL_26:
  if (v9)
  {
LABEL_27:
    (*((void (**)(OZFactory **))*this + 146))(this);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 184))(a2, 116);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2E03F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZSceneNode::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZSceneNode::writeHeader(this - 6, a2);
}

uint64_t OZSceneNode::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  id *v10;
  id *v11;
  OZFxPlugSharedBase *v12;
  OZChannelFolder *RootChannelFolder;
  uint64_t v14;
  unsigned int *i;
  unsigned int v16;
  unsigned int **j;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int **k;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t result;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneNodeWriteScope);
  if (this)
  {
    if (v10)
    {
      v11 = v10;
      v12 = (OZFxPlugSharedBase *)(v10 + 2423);
      if ((*((unsigned int (**)(id *))v10[2423] + 26))(v10 + 2423))
      {
        RootChannelFolder = (OZChannelFolder *)OZFxGenerator::getRootChannelFolder(v11);
        OZFxPlugSharedBase::writeDynamicParams(v12, a2, RootChannelFolder);
      }
    }
  }
  v14 = *((unsigned int *)this + 256);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 200);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  for (i = this[132]; i != this[133]; ++i)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 201);
    v16 = *i;
    (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 56))(a2, v16);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  OZChannelObjectRoot::serializeSelfOnly((OZChannelObjectRoot *)(this + 7), a2, a3);
  (*((void (**)(char *, PCSerializerWriteStream *, _QWORD))this[42] + 2))((char *)this + 336, a2, 0);
  (*((void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))this[42] + 3))((char *)this + 336, a2, 0, 1, a5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*((void (**)(char *, PCSerializerWriteStream *, _QWORD))this[58] + 2))((char *)this + 464, a2, 0);
  (*((void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))this[58] + 3))((char *)this + 464, a2, 0, 1, a5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  if (a4)
  {
    for (j = (unsigned int **)this[123]; j != this + 122; j = (unsigned int **)j[1])
    {
      v18 = j[2];
      if (!OZChannelBase::testFlag((OZChannelBase *)(v18 + 22), 8))
      {
        v20 = *((_QWORD *)v18 + 10);
        v19 = v18 + 20;
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, _QWORD))(v20 + 16))(v19, a2, 0);
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
    }
    for (k = (unsigned int **)this[126]; k != this + 125; k = (unsigned int **)k[1])
    {
      v22 = k[2];
      if (!OZChannelBase::testFlag((OZChannelBase *)(v22 + 14), 8))
      {
        v24 = *((_QWORD *)v22 + 6);
        v23 = v22 + 12;
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, _QWORD))(v24 + 16))(v23, a2, 0);
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
    }
  }
  result = PCSerializerWriteStream::popScope((uint64_t)a2);
  *((_BYTE *)this + 1028) = 1;
  return result;
}

uint64_t `non-virtual thunk to'OZSceneNode::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZSceneNode::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZSceneNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  char *v4;
  id *v5;
  OZFactory **i;
  OZFactory *v7;
  OZFactory **j;
  OZFactory *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!this
  {
    OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  }
  if (v4)
  {
    v5 = (id *)(v4 + 19384);
    if ((*(unsigned int (**)(char *))(*((_QWORD *)v4 + 2423) + 208))(v4 + 19384))
      OZFxPlugSharedBase::markDynamicParameterFactoriesForSerialization(v5);
  }
  for (i = (OZFactory **)this[126]; i != this + 125; i = (OZFactory **)i[1])
  {
    v7 = i[2];
    if (!OZChannelBase::testFlag((OZChannelBase *)((char *)v7 + 56), 8))
      (*(void (**)(OZFactory *, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v7 + 576))(v7, a2, 0);
  }
  for (j = (OZFactory **)this[123]; j != this + 122; j = (OZFactory **)j[1])
  {
    v9 = j[2];
    if (!OZChannelBase::testFlag((OZChannelBase *)((char *)v9 + 88), 8))
      (*(void (**)(OZFactory *, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v9 + 552))(v9, a2, 0);
  }
  if ((*((unsigned int (**)(OZFactory **))*this + 120))(this))
  {
    v10 = (*((uint64_t (**)(OZFactory **))*this + 128))(this);
    v11 = (*((uint64_t (**)(OZFactory **))*this + 129))(this);
    if (v10 != v11)
    {
      v12 = v11;
      do
      {
        (*(void (**)(_QWORD, PCSerializerWriteStream *, _QWORD))(**(_QWORD **)(v10 + 16) + 456))(*(_QWORD *)(v10 + 16), a2, 0);
        v10 = *(_QWORD *)(v10 + 8);
      }
      while (v10 != v12);
    }
  }
  if ((*((unsigned int (**)(OZFactory **))*this + 132))(this))
  {
    v13 = (*((uint64_t (**)(OZFactory **))*this + 138))(this);
    v14 = (*((uint64_t (**)(OZFactory **))*this + 139))(this);
    if (v13 != v14)
    {
      v15 = v14;
      do
      {
        (*(void (**)(_QWORD, PCSerializerWriteStream *, _QWORD))(**(_QWORD **)(v13 + 16) + 456))(*(_QWORD *)(v13 + 16), a2, 0);
        v13 = *(_QWORD *)(v13 + 8);
      }
      while (v13 != v15);
    }
  }
  return OZChannelObjectRoot::markChannelFactoriesForSerialization((OZChannelObjectRoot *)(this + 7), a2);
}

uint64_t `non-virtual thunk to'OZSceneNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZSceneNode::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZSceneNode::parseBegin(OZSceneNode *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZSceneNodeReadScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 56), a2);
  *((_QWORD *)this + 133) = *((_QWORD *)this + 132);
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNode::parseBegin(OZSceneNode *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZSceneNodeReadScope);
  OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 8), a2);
  *((_QWORD *)this + 127) = *((_QWORD *)this + 126);
  return 1;
}

uint64_t OZSceneNode::parseEnd(OZSceneNode *this, PCSerializerReadStream *a2)
{
  char *i;

  OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this + 56), a2);
  for (i = (char *)this + 1000; i != *((char **)this + 126); i = *(char **)i)
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)i + 16) + 128))(*(_QWORD *)(*(_QWORD *)i + 16));
  (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 88))(this);
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNode::parseEnd(OZSceneNode *this, PCSerializerReadStream *a2)
{
  OZSceneNode::parseEnd((OZSceneNode *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZSceneNode::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  _QWORD *v6;
  OZFxPlugSharedBase *v7;
  int v8;
  OZBehavior *v9;
  const void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  uint64_t (*v16)(void *, PCSharedCount *, _QWORD, _QWORD, _BOOL8);
  _BOOL8 v17;
  uint64_t v18;
  char *v19;
  OZTimeMarkerSet *v20;
  OZTimeMarkerSet *v21;
  OZTimeMarkerSet *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  const void *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  OZChannelBase *v32;
  const void *Factory;
  void *v34;
  uint64_t v35;
  OZBehavior *v36;
  OZChannelBase *v37;
  OZTimeMarkerSet *v38;
  OZTimeMarkerSet *v39;
  int v40;
  PCSharedCount *v42;
  _QWORD *v43;
  _QWORD *v44;
  OZFxFilter *v45;
  OZChannelBase *v46;
  __int128 v47;
  int32x4_t v48;
  char v49;
  unsigned int v50;
  double v51;
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54;
  uint64_t v55;

  v55 = 0;
  PCSharedCount::PCSharedCount(&v54);
  PCSharedCount::PCSharedCount(&v53);
  PCSharedCount::PCSharedCount(&v52);
  v51 = 0.0;
  v50 = 0;
  v49 = 0;
  if (this)
  {
    if (v6)
    {
      v7 = (OZFxPlugSharedBase *)(v6 + 2423);
      if ((*(unsigned int (**)(_QWORD *))(v6[2423] + 208))(v6 + 2423))
        OZFxPlugSharedBase::parseDynamicParamElement(v7, a2, a3);
    }
  }
  OZChannelObjectRoot::parseElement(this + 7, a2, a3);
  v8 = *((_DWORD *)a3 + 2);
  if (v8 > 199)
  {
    if (v8 == 201)
    {
      LODWORD(v47) = 0;
      PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v47);
      v19 = (char *)this[133];
      v20 = this[134];
      if (v19 >= (char *)v20)
      {
        v22 = this[132];
        v23 = (v19 - (char *)v22) >> 2;
        if ((unint64_t)(v23 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v24 = v20 - v22;
        v25 = (v20 - v22) >> 1;
        if (v25 <= v23 + 1)
          v25 = v23 + 1;
        if (v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(this + 134), v26);
          v19 = (char *)this[133];
          v22 = this[132];
        }
        else
        {
          v27 = 0;
        }
        v38 = (OZTimeMarkerSet *)&v27[4 * v23];
        v39 = (OZTimeMarkerSet *)&v27[4 * v26];
        *(_DWORD *)v38 = v47;
        v21 = (OZTimeMarkerSet *)((char *)v38 + 4);
        while (v19 != (char *)v22)
        {
          v40 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v38 - 1) = v40;
          v38 = (OZTimeMarkerSet *)((char *)v38 - 4);
        }
        this[132] = v38;
        this[133] = v21;
        this[134] = v39;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_DWORD *)v19 = v47;
        v21 = (OZTimeMarkerSet *)(v19 + 4);
      }
      this[133] = v21;
    }
    else if (v8 == 200)
    {
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 1024);
    }
  }
  else
  {
    if (v8 != 68)
    {
      if (v8 == 69)
      {
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v55);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v54);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v55 + 4);
        if (this[127])
          v9 = (OZBehavior *)*((_QWORD *)this[125] + 2);
        else
          v9 = 0;
        v28 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v55);
        if (v28
        {
          v30 = (unint64_t)v29;
          v31 = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v29 + 168))(v29, &v54, HIDWORD(v55));
          if (v31)
          {
            v48 = (int32x4_t)xmmword_1B3053B30;
            if (OZFactory::isKindOfClass(v30, &v48))
              v9 = 0;
            v32 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 312))(v31);
            OZChannelBase::resetFlag(v32, 64, 0);
            OZSceneNode::insertBehaviorBefore((OZSceneNode *)this, (OZBehavior *)v31, v9);
            PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v31 + 48));
          }
        }
        else
        {
          v47 = xmmword_1B355CFD0;
          Factory = (const void *)OZFactories::findFactory(*(_QWORD *)(theApp + 32), (unsigned int *)&v47);
          v35 = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v34 + 168))(v34, &v54, HIDWORD(v55));
          v36 = (OZBehavior *)v35;
          if (v35)
          {
            v37 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 312))(v35);
            OZChannelBase::resetFlag(v37, 64, 0);
            OZSceneNode::insertBehaviorBefore((OZSceneNode *)this, v36, v9);
            (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 40))(a2);
          }
        }
      }
      goto LABEL_46;
    }
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v55);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v54);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v55 + 4);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v53);
    if ((PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 118, (uint64_t)&v52) & 1) == 0)
      PCString::set((PCString *)&v52, (const PCString *)&v54);
    PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v51);
    PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 8, (uint64_t)&v50);
    PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v49);
    v10 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v55);
    if (v10)
    {
      if (v11)
      {
        v12 = v11;
        if (v13)
        {
          v14 = v13;
          v15 = PCString::empty((PCString *)&v53);
          v16 = *(uint64_t (**)(void *, PCSharedCount *, _QWORD, _QWORD, _BOOL8))(*(_QWORD *)v14 + 200);
          v17 = v49 != 0;
          if (!v15)
          {
            v44 = (_QWORD *)v16(v14, &v53, HIDWORD(v55), v50, v17);
            v43 = v44;
            if (v44)
            else
              v45 = 0;
            OZFxFilter::setInternalName(v45, (const PCString *)&v52);
LABEL_56:
            if (v43)
            {
              (*(void (**)(_QWORD *, double))(*v43 + 624))(v43, v51);
              (*(void (**)(_QWORD *, PCSharedCount *, _QWORD))(v43[6] + 120))(v43 + 6, &v54, 0);
              v46 = (OZChannelBase *)(*(uint64_t (**)(_QWORD *))(*v43 + 240))(v43);
              OZChannelBase::resetFlag(v46, 64, 0);
              (*((void (**)(OZTimeMarkerSet **, _QWORD *, _QWORD))*this + 43))(this, v43, 0);
              PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v43 + 10));
            }
            goto LABEL_46;
          }
          v18 = v16(v14, &v52, HIDWORD(v55), v50, v17);
        }
        else
        {
          if (PCString::empty((PCString *)&v53))
            v42 = &v52;
          else
            v42 = &v53;
          v18 = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v12 + 168))(v12, v42, HIDWORD(v55));
        }
        v43 = (_QWORD *)v18;
        goto LABEL_56;
      }
    }
  }
LABEL_46:
  PCString::~PCString((PCString *)&v52);
  PCString::~PCString((PCString *)&v53);
  PCString::~PCString((PCString *)&v54);
  return 1;
}

void sub_1B2E04BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15, PCString a16, PCString a17)
{
  PCString::~PCString(&a15);
  PCString::~PCString(&a16);
  PCString::~PCString(&a17);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNode::insertBehaviorBefore(OZSceneNode *this, OZBehavior *a2, OZBehavior *a3)
{
  OZObjectManipulator *v6;
  char *v7;
  OZBehavior *v8;
  uint64_t *v9;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  OZChannelBase *v13;
  _QWORD *v14;
  uint64_t v15;
  const OZChannelBase *v16;
  OZChannelBase *v17;
  OZSceneNode *v18;
  OZSceneNode *v19;
  uint64_t v20;
  OZScene *v21;

  v6 = (OZBehavior *)((char *)a2 + 16);
  if (((*(uint64_t (**)(char *))(*((_QWORD *)a2 + 2) + 48))((char *)a2 + 16) & 1) == 0)
  {
    if (a3 && !(*(unsigned int (**)(char *))(*((_QWORD *)a3 + 2) + 48))((char *)a3 + 16))
      goto LABEL_9;
    v7 = (char *)this + 1000;
    if ((OZSceneNode *)((char *)this + 1000) != *((OZSceneNode **)this + 126))
    {
      while (1)
      {
        v8 = *(OZBehavior **)(*(_QWORD *)v7 + 16);
        if (!(*(unsigned int (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 48))((_QWORD *)v8 + 2))
          break;
        a3 = v8;
        v7 = *(char **)v7;
        if (v7 == *((char **)this + 126))
          goto LABEL_9;
      }
    }
  }
  if (!a3)
  {
    v11 = operator new(0x18uLL);
    v11[1] = (char *)this + 1000;
    v11[2] = a2;
    v12 = *((_QWORD *)this + 125);
    *v11 = v12;
    *(_QWORD *)(v12 + 8) = v11;
    *((_QWORD *)this + 125) = v11;
    ++*((_QWORD *)this + 127);
    v13 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 704), v13);
    goto LABEL_16;
  }
LABEL_9:
  v9 = (uint64_t *)((char *)this + 1000);
  for (i = *((_QWORD *)this + 126); (uint64_t *)i != v9; i = *(_QWORD *)(i + 8))
  {
    if (*(OZBehavior **)(i + 16) == a3)
    {
      v9 = (uint64_t *)i;
      break;
    }
  }
  v14 = operator new(0x18uLL);
  v14[2] = a2;
  v15 = *v9;
  *(_QWORD *)(v15 + 8) = v14;
  *v14 = v15;
  *v9 = (uint64_t)v14;
  v14[1] = v9;
  ++*((_QWORD *)this + 127);
  v16 = (const OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a3 + 312))(a3);
  v17 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
  OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 704), v16, v17);
LABEL_16:
  v18 = (OZSceneNode *)*((_QWORD *)this + 126);
  if (v18 == (OZSceneNode *)((char *)this + 1000))
    goto LABEL_23;
  v19 = (OZSceneNode *)*((_QWORD *)this + 126);
  while (*((OZBehavior **)v19 + 2) != a2)
  {
    v19 = (OZSceneNode *)*((_QWORD *)v19 + 1);
    if (v19 == (OZSceneNode *)((char *)this + 1000))
    {
      v19 = (OZSceneNode *)((char *)this + 1000);
      break;
    }
  }
  if (v19 == v18)
LABEL_23:
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)v19 + 16);
  (*(void (**)(OZBehavior *, OZSceneNode *, uint64_t))(*(_QWORD *)a2 + 104))(a2, this, v20);
  v21 = (OZScene *)*((_QWORD *)this + 121);
  if (v21)
  {
    OZScene::registerObject(v21, v6);
    OZScene::addNodeDependency(*((_QWORD *)this + 121), *((_DWORD *)a2 + 20), *((_DWORD *)this + 20));
  }
  return (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
}

uint64_t `non-virtual thunk to'OZSceneNode::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZSceneNode::parseElement(this - 6, a2, a3);
  return 1;
}

uint64_t OZSceneNode::begin_descendants(OZSceneNode *this)
{
  return 0;
}

uint64_t OZSceneNode::end_descendants(OZSceneNode *this)
{
  return 0;
}

OZChannelBase *OZSceneNode::setIsMask(OZSceneNode *this)
{
  *((_DWORD *)this + 256) |= 8u;
  return OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
}

OZChannelBase *OZSceneNode::clearIsMask(OZSceneNode *this)
{
  *((_DWORD *)this + 256) &= ~8u;
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
}

double OZSceneNode::globalToLocalTime@<D0>(OZSceneNode *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::globalToLocalTime((OZSceneNode *)((char *)this + 56), a2, a3);
}

double OZSceneNode::localToGlobalTime@<D0>(OZSceneNode *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::localToGlobalTime((OZSceneNode *)((char *)this + 56), a2, a3);
}

void OZSceneNode::setStartTime(OZSceneNode *this, const CMTime *a2)
{
  CMTimeEpoch epoch;
  _QWORD *i;
  OZChannelObjectRootBase *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  OZChannelObjectRootBase *v10;
  uint64_t v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  __int128 v15;
  uint64_t v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  __int128 v20;
  uint64_t v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  __int128 v25;
  uint64_t v26;
  CMTime v27;
  __int128 v28;
  uint64_t v29;
  CMTime v30;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)this + 1128))(&v27);
  *(_OWORD *)&v24.value = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  v25 = v28;
  v24.epoch = epoch;
  v26 = v29;
  v23 = *a2;
  (*(void (**)(OZSceneNode *, CMTime *, _QWORD))(*(_QWORD *)this + 1136))(this, &v24, 0);
  v22 = v23;
  (*(void (**)(OZSceneNode *, CMTime *, _QWORD))(*(_QWORD *)this + 1120))(this, &v22, 0);
  for (i = (_QWORD *)*((_QWORD *)this + 126); i != (_QWORD *)((char *)this + 1000); i = (_QWORD *)i[1])
  {
    v6 = (OZChannelObjectRootBase *)i[2];
    v7 = *(_QWORD *)v6;
    v6 = (OZChannelObjectRootBase *)((char *)v6 + 56);
    (*(void (**)(CMTime *__return_ptr))(v7 + 608))(&v19);
    memset(&v18, 0, sizeof(v18));
    v14 = v19;
    v30 = v27;
    PC_CMTimeSaferSubtract(&v14, &v30, (uint64_t)&v18);
    memset(&v17, 0, sizeof(v17));
    v14 = v24;
    v30 = v18;
    PC_CMTimeSaferAdd(&v14, &v30, (uint64_t)&v17);
    v15 = v20;
    v16 = v21;
    v14 = v17;
    OZChannelObjectRootBase::setTimeExtent(v6, (const PCTimeRange *)&v14, 0);
    v13 = v17;
    OZChannelObjectRootBase::setTimeOffset((__n128 *)v6, &v13, 0);
  }
  v8 = (char *)this + 976;
  v9 = (char *)*((_QWORD *)this + 123);
  if (v9 != (char *)this + 976)
  {
    do
    {
      v10 = (OZChannelObjectRootBase *)*((_QWORD *)v9 + 2);
      v11 = *(_QWORD *)v10;
      v10 = (OZChannelObjectRootBase *)((char *)v10 + 88);
      (*(void (**)(CMTime *__return_ptr))(v11 + 592))(&v19);
      memset(&v18, 0, sizeof(v18));
      v14 = v19;
      v30 = v27;
      PC_CMTimeSaferSubtract(&v14, &v30, (uint64_t)&v18);
      memset(&v17, 0, sizeof(v17));
      v14 = v24;
      v30 = v18;
      PC_CMTimeSaferAdd(&v14, &v30, (uint64_t)&v17);
      v15 = v20;
      v16 = v21;
      v14 = v17;
      OZChannelObjectRootBase::setTimeExtent(v10, (const PCTimeRange *)&v14, 0);
      v12 = v17;
      OZChannelObjectRootBase::setTimeOffset((__n128 *)v10, &v12, 0);
      v9 = (char *)*((_QWORD *)v9 + 1);
    }
    while (v9 != v8);
  }
}

uint64_t OZSceneNode::masks_begin(OZSceneNode *this)
{
  return 0;
}

uint64_t OZSceneNode::masks_end(OZSceneNode *this)
{
  return 0;
}

double OZSceneNode::begin@<D0>(OZSceneNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1032))(this);
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

double OZSceneNode::end@<D0>(OZSceneNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1024))(this);
  v5 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1032))(this);
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

_QWORD *OZObject::iterator_t<OZSceneNode,true,true,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  _QWORD *i;

  for (i = a1; ; a1 = i)
  {
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(a1);
    if (*i == i[2]
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*i + 16) + 680))(*(_QWORD *)(*i + 16))
      && *i != i[2]
      && *(_QWORD *)(*i + 16))
    {
      break;
    }
  }
  return i;
}

uint64_t OZSceneNode::setScene(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v12;
  _OWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  int v20;

  a1[121] = a2;
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 1104))(a1);
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 1112))(a1);
  if (v4 != v5)
  {
    v6 = v5;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 16) + 280))(*(_QWORD *)(v4 + 16), a2);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v6);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 1024))(a1);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 1032))(a1);
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  v15 = v7;
  v16 = v7;
  v17 = v8;
  v18 = 0;
  (*(void (**)(_QWORD *))(*a1 + 1024))(a1);
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 1032))(a1);
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v12 = v9;
  for (i = v7; i != v12; v15 = i)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(i + 16) + 280))(*(_QWORD *)(i + 16), a2);
    i = *(_QWORD *)(v15 + 8);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
}

void sub_1B2E05440(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNode::dirty(OZSceneNode *this)
{
  uint64_t result;
  uint64_t i;
  char *v4;
  uint64_t j;

  OZObjectManipulator::dirty((OZSceneNode *)((char *)this + 16));
  result = *((_QWORD *)this + 120);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 496))(result);
  for (i = *((_QWORD *)this + 123); (OZSceneNode *)i != (OZSceneNode *)((char *)this + 976); i = *(_QWORD *)(i + 8))
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 320))(*(_QWORD *)(i + 16));
  v4 = (char *)this + 1000;
  for (j = *((_QWORD *)this + 126); (char *)j != v4; j = *(_QWORD *)(j + 8))
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(j + 16) + 352))(*(_QWORD *)(j + 16));
  return result;
}

uint64_t `non-virtual thunk to'OZSceneNode::dirty(OZSceneNode *this)
{
  return OZSceneNode::dirty((OZSceneNode *)((char *)this - 16));
}

double OZSceneNode::invalidateStaticHash(OZSceneNode *this)
{
  double result;

  OZObjectManipulator::invalidateStaticHash((OZSceneNode *)((char *)this + 16));
  result = 0.0;
  *((_OWORD *)this + 65) = 0u;
  return result;
}

double `non-virtual thunk to'OZSceneNode::invalidateStaticHash(OZSceneNode *this)
{
  double result;

  OZObjectManipulator::invalidateStaticHash(this);
  result = 0.0;
  *((_OWORD *)this + 64) = 0u;
  return result;
}

int8x8_t *OZSceneNode::getStaticHashWithoutEffects(int8x8_t *a1, const void *a2, uint64_t a3)
{
  int8x8_t *v3;
  int8x8_t *v7;

  v3 = a1 + 130;
  if (!*(_QWORD *)&vorr_s8(a1[130], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1[130].i8, *(int8x16_t *)a1[130].i8, 8uLL)))
  {
    (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
    (*(void (**)(int8x8_t *, const void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 528))(a1, a2, a3, 0);
    if (!v7)
      __cxa_bad_cast();
    *(_OWORD *)v3->i8 = *(_OWORD *)PCHashWriteStream::getHash(v7)->i8;
  }
  return v3;
}

_QWORD *OZSceneNode::getHashForStateWithoutEffects@<X0>(OZCacheManager *a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  _OWORD *v8;
  unsigned __int8 v10;
  TXParagraphStyleFolder_Factory *v11;
  int *StaticHash;
  int8x8_t *Hash;
  int8x8_t *v14;
  int8x8_t *v15;
  _BYTE v17[16];
  int v18[6];
  PCString v19;

  v8 = a1;
  if ((v10 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      PCString::PCString(&v19, "This is a scene node hash without effects.");
      PCHash128::PCHash128((PCHash128 *)OZSceneNode::getHashForStateWithoutEffects(PCSerializerWriteStream &,OZRenderParams const&,std::list<OZObjectManipulator *> &)::withoutEffectsHash, &v19);
      PCString::~PCString(&v19);
    }
  }
  v11 = (TXParagraphStyleFolder_Factory *)OZCacheManager::Instance(a1);
  std::list<OZObjectManipulator *>::list(&v19, 10);
  (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
  *(_OWORD *)v18 = *(_OWORD *)OZRenderParams::getHash(a3);
  StaticHash = (int *)OZObjectManipulator::getStaticHash(v8 + 1, a2, (uint64_t **)&v19);
  PCHash128::operator+=(v18, StaticHash);
  PCHash128::operator+=(v18, OZSceneNode::getHashForStateWithoutEffects(PCSerializerWriteStream &,OZRenderParams const&,std::list<OZObjectManipulator *> &)::withoutEffectsHash);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v17);
  if ((OZChannelBase::isObjectRef((OZChannelBase *)v11) & 1) != 0)
  {
    Hash = (int8x8_t *)v17;
  }
  else
  {
    (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
    (*(void (**)(_OWORD *, const void *, OZRenderParams *, uint64_t, _QWORD))(*(_QWORD *)v8 + 536))(v8, a2, a3, a4, 0);
    if (!v14)
      __cxa_bad_cast();
    v15 = v14;
    PCHashWriteStream::getHash(v14);
    TXParagraphStyleFolder_Factory::version(v11);
    Hash = PCHashWriteStream::getHash(v15);
  }
  *a5 = *(_OWORD *)Hash->i8;
  return std::__list_imp<unsigned int>::clear(&v19);
}

void sub_1B2E057A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

double OZSceneNode::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4, int a5)
{
  int8x8_t *v10;
  int8x8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  _OWORD *v15;
  uint64_t j;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t **v20;
  CMTimeValue value;
  _QWORD *Node;
  _QWORD *v23;
  _OWORD *v24;
  CMTime *v25;
  CMTime *v26;
  BOOL v27;
  double result;
  __int128 v29;
  __int128 v30;
  CMTimeEpoch v31;
  __int128 v32;
  CMTimeEpoch v33;
  __n128 v34;
  CMTime v35;
  __int128 v36;
  CMTimeEpoch epoch;

  if (!v10)
    __cxa_bad_cast();
  v11 = v10;
  v36 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v12 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(a1 + 16, &v36, 1, 1, 1);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 48))(lpsrc, v12);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v13 = *(unsigned int *)(a1 + 1024);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 56))(lpsrc, v13);
  (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
  v35 = *a3;
  OZChannelObjectRootBase::calcHashForStateSelfOnly((OZChannelObjectRootBase *)(a1 + 56), (PCSerializerWriteStream *)lpsrc, &v35);
  v35 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 320), (PCSerializerWriteStream *)lpsrc, &v35);
  v35 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 448), (PCSerializerWriteStream *)lpsrc, &v35);
  v35 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 832), (PCSerializerWriteStream *)lpsrc, &v35);
  v34 = *(__n128 *)PCHashWriteStream::getHash(v11)->i8;
  if (a5)
  {
    for (i = *(_QWORD *)(a1 + 984); i != a1 + 976; i = *(_QWORD *)(i + 8))
    {
      v15 = *(_OWORD **)(i + 16);
      v32 = *(_OWORD *)&a3->value;
      v33 = a3->epoch;
      if ((*(unsigned int (**)(_OWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v15 + 280))(v15, &v32, 0, 1, 1))
      {
        OZObjectManipulator::getHashForState(v15 + 3, lpsrc, (OZRenderParams *)a3, a4, &v35);
        PCHash128::operator+=((int *)&v34, (int *)&v35);
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1))
  {
    for (j = *(_QWORD *)(a1 + 1008); j != a1 + 1000; j = *(_QWORD *)(j + 8))
    {
      v17 = *(_QWORD *)(j + 16);
      v19 = *(_QWORD *)(v17 + 16);
      v18 = (_OWORD *)(v17 + 16);
      if ((*(unsigned int (**)(_OWORD *, _QWORD, uint64_t))(v19 + 24))(v18, 0, 1))
      {
        OZObjectManipulator::getHashForState(v18, lpsrc, (OZRenderParams *)a3, a4, &v35);
        PCHash128::operator+=((int *)&v34, (int *)&v35);
      }
    }
  }
  v20 = *(uint64_t ***)(a1 + 968);
  if (v20)
  {
    *(_QWORD *)&v35.timescale = 0;
    v35.epoch = 0;
    v35.value = (CMTimeValue)&v35.timescale;
    OZScene::getImmediatelyReferencedNodes(v20, *(_DWORD *)(a1 + 80), (uint64_t **)&v35);
    value = v35.value;
    if ((CMTimeScale *)v35.value != &v35.timescale)
    {
      do
      {
        Node = OZScene::getNode(*(OZScene **)(a1 + 968), *(_DWORD *)(value + 28));
        v23 = Node;
        if (Node)
        {
          if (Node[120] != a1
            || (v31 = a3->epoch,
                v30 = *(_OWORD *)&a3->value,
                ((*(uint64_t (**)(_QWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(Node[2] + 104))(Node + 2, &v30, 0, 1, 1) & 1) != 0))
          {
            v24 = v23 + 2;
            if (!OZObjectManipulator::isInObjectList((uint64_t)v24, (uint64_t)a4))
            {
              OZObjectManipulator::getHashForState(v24, lpsrc, (OZRenderParams *)a3, a4, &v29);
              PCHash128::operator+=((int *)&v34, (int *)&v29);
            }
          }
        }
        v25 = *(CMTime **)(value + 8);
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (CMTime *)v25->value;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = *(CMTime **)(value + 16);
            v27 = v26->value == value;
            value = (CMTimeValue)v26;
          }
          while (!v27);
        }
        value = (CMTimeValue)v26;
      }
      while (v26 != (CMTime *)&v35.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v35, *(_QWORD **)&v35.timescale);
  }
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v11, &v34).n128_u64[0];
  return result;
}

void sub_1B2E05B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void OZSceneNode::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3, int a4)
{
  int8x8_t *v8;
  int8x8_t *v9;
  uint64_t i;
  int *StaticHash;
  uint64_t j;
  int *v13;
  uint64_t **v14;
  uint64_t *v15;
  OZScene *v16;
  char *Node;
  _OWORD *v18;
  int *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t *v23;
  _QWORD *v24[2];
  __n128 v25;

  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  (*(void (**)(int8x8_t *))(*(_QWORD *)v8 + 40))(v8);
  (*(void (**)(uint64_t, int8x8_t *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 448))(a1, v9, 0, 0, 1);
  v25 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  if (a4)
  {
    for (i = *(_QWORD *)(a1 + 984); i != a1 + 976; i = *(_QWORD *)(i + 8))
    {
      StaticHash = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(_QWORD *)(i + 16) + 48), lpsrc, a3);
      PCHash128::operator+=((int *)&v25, StaticHash);
    }
  }
  for (j = *(_QWORD *)(a1 + 1008); j != a1 + 1000; j = *(_QWORD *)(j + 8))
  {
    v13 = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(_QWORD *)(j + 16) + 16), lpsrc, a3);
    PCHash128::operator+=((int *)&v25, v13);
  }
  v24[0] = 0;
  v24[1] = 0;
  v23 = (uint64_t *)v24;
  v14 = *(uint64_t ***)(a1 + 968);
  if (v14)
  {
    OZScene::getImmediatelyReferencedNodes(v14, *(_DWORD *)(a1 + 80), &v23);
    v15 = v23;
    if (v23 != (uint64_t *)v24)
    {
      do
      {
        v16 = *(OZScene **)(a1 + 968);
        if (v16)
        {
          Node = (char *)OZScene::getNode(v16, *((_DWORD *)v15 + 7));
          if (Node)
          {
            v18 = Node + 16;
            if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
            {
              v19 = (int *)OZObjectManipulator::getStaticHash(v18, lpsrc, a3);
              PCHash128::operator+=((int *)&v25, v19);
            }
          }
        }
        v20 = (uint64_t *)v15[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v15[2];
            v22 = *v21 == (_QWORD)v15;
            v15 = v21;
          }
          while (!v22);
        }
        v15 = v21;
      }
      while (v21 != (uint64_t *)v24);
    }
  }
  PCHashWriteStream::setHash((__n128 *)v9, &v25);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v23, v24[0]);
}

void sub_1B2E05D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL OZSceneNode::areStaticHashesInvalid(OZSceneNode *this)
{
  _QWORD *i;
  _BOOL8 result;
  char *v3;
  _QWORD *v4;
  int8x8_t v5;

  if (vorr_s8(*(int8x8_t *)((char *)this + 32), (int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)this + 2), *((int8x16_t *)this + 2), 8uLL)))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 123); i != (_QWORD *)((char *)this + 976); i = (_QWORD *)i[1])
    {
      if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)(i[2] + 64), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(i[2] + 64), *(int8x16_t *)(i[2] + 64), 8uLL)))return 1;
    }
    v3 = (char *)this + 1000;
    v4 = (_QWORD *)*((_QWORD *)this + 126);
    if (v4 == (_QWORD *)((char *)this + 1000))
    {
      return 0;
    }
    else
    {
      do
      {
        v5 = vorr_s8(*(int8x8_t *)(v4[2] + 32), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v4[2] + 32), *(int8x16_t *)(v4[2] + 32), 8uLL));
        result = *(_QWORD *)&v5 == 0;
        if (!*(_QWORD *)&v5)
          break;
        v4 = (_QWORD *)v4[1];
      }
      while (v4 != (_QWORD *)v3);
    }
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL `non-virtual thunk to'OZSceneNode::areStaticHashesInvalid(OZSceneNode *this)
{
  return OZSceneNode::areStaticHashesInvalid((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::getSuccessor(OZSceneNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  OZSceneNode *v17;
  OZSceneNode *v18;
  uint64_t Successor;
  OZSceneNode *v21;
  _OWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _DWORD v28[10];
  _BYTE v29[25];
  __int128 v30;
  __int128 v31;
  int v32;
  _BYTE v33[25];
  _QWORD v34[4];
  int v35;
  _BYTE v36[25];
  _QWORD v37[4];
  int v38;
  _BYTE v39[25];
  __int128 v40;
  __int128 v41;
  int v42;

  v40 = 0u;
  v41 = 0u;
  memset(v39, 0, 24);
  v42 = 1065353216;
  memset(v37, 0, sizeof(v37));
  memset(v36, 0, 24);
  v38 = 1065353216;
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, 24);
  v35 = 1065353216;
  v2 = *((_QWORD *)this + 120);
  if (v2)
  {
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 1024))(*((_QWORD *)this + 120));
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1032))(v2);
    v31 = 0u;
    v30 = 0u;
    v32 = 1065353216;
    *(_QWORD *)v29 = v3;
    *(_QWORD *)&v29[8] = v3;
    *(_QWORD *)&v29[16] = v4;
    v29[24] = 0;
    *(_OWORD *)v39 = *(_OWORD *)v29;
    *(_OWORD *)&v39[9] = *(_OWORD *)&v29[9];
    v42 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v40, 0, 0);
    *(_OWORD *)v33 = *(_OWORD *)v39;
    *(_OWORD *)&v33[9] = *(_OWORD *)&v29[9];
    v35 = v42;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v34, (__n128 *)v41, 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
    v5 = *((_QWORD *)this + 120);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1024))(v5);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1032))(v5);
    v31 = 0u;
    v30 = 0u;
    v32 = 1065353216;
    *(_QWORD *)v29 = v7;
    *(_QWORD *)&v29[8] = v6;
    *(_QWORD *)&v29[16] = v7;
    v29[24] = 0;
    *(_OWORD *)v36 = *(_OWORD *)v29;
    *(_OWORD *)&v36[9] = *(_OWORD *)&v29[9];
    v38 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v37, 0, 0);
  }
  else
  {
    v8 = *((_QWORD *)this + 121);
    if (!v8)
      goto LABEL_16;
    v9 = v8 + 1200;
    v10 = *(_QWORD *)(v8 + 1208);
    v30 = 0uLL;
    v31 = 0uLL;
    v32 = 1065353216;
    *(_QWORD *)v29 = v10;
    *(_QWORD *)&v29[8] = v10;
    *(_QWORD *)&v29[16] = v9;
    v29[24] = 0;
    *(_OWORD *)v39 = *(_OWORD *)v29;
    *(_OWORD *)&v39[9] = *(_OWORD *)&v29[9];
    v42 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v40, 0, 0);
    *(_OWORD *)v33 = *(_OWORD *)v39;
    *(_OWORD *)&v33[9] = *(_OWORD *)&v29[9];
    v35 = v42;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v34, (__n128 *)v41, 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
    v11 = *((_QWORD *)this + 121);
    v12 = v11 + 1200;
    v13 = *(_QWORD *)(v11 + 1208);
    v30 = 0u;
    v31 = 0u;
    v32 = 1065353216;
    *(_QWORD *)v29 = v12;
    *(_QWORD *)&v29[8] = v13;
    *(_QWORD *)&v29[16] = v12;
    v29[24] = 0;
    *(_OWORD *)v36 = *(_OWORD *)v29;
    *(_OWORD *)&v36[9] = *(_OWORD *)&v29[9];
    v38 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v37, 0, 0);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
  v14 = *(_QWORD *)v33;
  if (*(_QWORD *)v33 != *(_QWORD *)v36)
  {
    v15 = v28;
    do
    {
      v16 = *(_QWORD *)&v33[16];
      if (v14 == *(_QWORD *)&v33[16])
        v17 = 0;
      else
        v17 = *(OZSceneNode **)(v14 + 16);
      if (v17 == this)
        break;
      *v15 = 0u;
      v15[1] = 0u;
      v28[8] = 1065353216;
      v24 = v14;
      v25 = *(_QWORD *)&v33[8];
      v26 = v16;
      v27 = v33[24];
      *(_QWORD *)v33 = *(_QWORD *)(v14 + 8);
      v15 = (_OWORD *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
      v14 = *(_QWORD *)v33;
    }
    while (*(_QWORD *)v33 != *(_QWORD *)v36);
  }
  if (v14 == *(_QWORD *)&v33[16])
    v18 = 0;
  else
    v18 = *(OZSceneNode **)(v14 + 16);
  if (v18 == this)
  {
    memset(v22, 0, sizeof(v22));
    v23 = 1065353216;
    *(_QWORD *)v33 = *(_QWORD *)(v14 + 8);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
    if (*(_QWORD *)v33 == *(_QWORD *)v36)
    {
      v21 = (OZSceneNode *)*((_QWORD *)this + 120);
      if (v21)
      {
        Successor = OZSceneNode::getSuccessor(v21);
        goto LABEL_17;
      }
    }
    else if (*(_QWORD *)v33 != *(_QWORD *)&v33[16])
    {
      Successor = *(_QWORD *)(*(_QWORD *)v33 + 16);
      goto LABEL_17;
    }
  }
LABEL_16:
  Successor = 0;
LABEL_17:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v34);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v37);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v40);
  return Successor;
}

void sub_1B2E0623C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

OZSceneNode *OZSceneNode::getRootAncestor(OZSceneNode *this)
{
  OZSceneNode *v1;

  do
  {
    v1 = this;
    this = (OZSceneNode *)*((_QWORD *)this + 120);
  }
  while (this);
  return v1;
}

OZSceneNode *OZSceneNode::getCommonAncestor(OZSceneNode *this, OZSceneNode *a2, int a3)
{
  OZSceneNode *v3;
  uint64_t v5;
  uint64_t v6;
  OZSceneNode *v7;
  uint64_t v8;
  _OWORD v10[2];
  __int128 v11;
  OZSceneNode *i;
  _OWORD v13[2];
  __int128 v14;

  v3 = a2;
  if (a2)
  {
    v14 = 0u;
    memset(v13, 0, sizeof(v13));
    if (a3)
      this = (OZSceneNode *)*((_QWORD *)this + 120);
    for (i = this; i; i = (OZSceneNode *)*((_QWORD *)i + 120))
      std::deque<OZSceneNode *>::push_back(v13, &i);
    v11 = 0u;
    memset(v10, 0, sizeof(v10));
    if (a3)
      v3 = (OZSceneNode *)*((_QWORD *)v3 + 120);
    for (i = v3; i; i = (OZSceneNode *)*((_QWORD *)i + 120))
      std::deque<OZSceneNode *>::push_back(v10, &i);
    v5 = *((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1) && (v6 = *((_QWORD *)&v11 + 1)) != 0)
    {
      v7 = 0;
      do
      {
        v3 = v7;
        v8 = v5 - 1;
        v7 = *(OZSceneNode **)(*(_QWORD *)(*((_QWORD *)&v13[0] + 1)
                                         + (((unint64_t)(v14 + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v14 + v8) & 0x1FF));
        if (v7 != *(OZSceneNode **)(*(_QWORD *)(*((_QWORD *)&v10[0] + 1)
                                               + (((unint64_t)(v6 + v11 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v6 + v11 - 1) & 0x1FF)))
          break;
        *((_QWORD *)&v14 + 1) = v8;
        std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v13, 1);
        --*((_QWORD *)&v11 + 1);
        std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v10, 1);
        v5 = *((_QWORD *)&v14 + 1);
        if (!*((_QWORD *)&v14 + 1))
        {
          v3 = v7;
          break;
        }
        v6 = *((_QWORD *)&v11 + 1);
        v3 = v7;
      }
      while (*((_QWORD *)&v11 + 1));
    }
    else
    {
      v3 = 0;
    }
    std::deque<unsigned long>::~deque[abi:ne180100](v10);
    std::deque<unsigned long>::~deque[abi:ne180100](v13);
  }
  return v3;
}

void sub_1B2E063FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::deque<unsigned long>::~deque[abi:ne180100](&a9);
  std::deque<unsigned long>::~deque[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL OZSceneNode::isDescendantOf(OZSceneNode *this, const OZSceneNode *a2)
{
  do
    this = (OZSceneNode *)*((_QWORD *)this + 120);
  while (this != a2 && this != 0);
  return this != 0;
}

uint64_t OZSceneNode::isDescendantOf360Group(uint64_t this)
{
  _QWORD *v1;
  OZGroup *v2;

  if (this)
  {
    v1 = (_QWORD *)this;
    while (1)
    {
      if (v2)
      {
        if (OZGroup::is360Group(v2))
          break;
      }
      v1 = (_QWORD *)v1[120];
      if (!v1)
        return 0;
    }
    return 1;
  }
  return this;
}

uint64_t OZSceneNode::getSourceOperationMask(OZSceneNode *this, OZChannelBase *a2, int a3)
{
  OZChannelBase ***v3;
  OZChannelBase **v4;
  OZChannelBase **v5;
  OZChannelBase ***v6;
  OZChannelBase **v7;
  OZChannelBase **v8;

  v3 = (OZChannelBase ***)*((_QWORD *)this + 86);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    while (v4 != v5)
    {
      if (*v4 == a2)
        return 3;
      ++v4;
    }
  }
  v6 = (OZChannelBase ***)*((_QWORD *)this + 102);
  if (v6)
  {
    v7 = *v6;
    v8 = v6[1];
    while (v7 != v8)
    {
      if (*v7 == a2)
        return 3;
      ++v7;
    }
  }
  return OZObjectManipulator::getSourceOperationMask((OZSceneNode *)((char *)this + 16), a2, a3);
}

uint64_t `non-virtual thunk to'OZSceneNode::getSourceOperationMask(OZSceneNode *this, OZChannelBase *a2, int a3)
{
  return OZSceneNode::getSourceOperationMask((OZSceneNode *)((char *)this - 16), a2, a3);
}

uint64_t OZSceneNode::getPasteEntry(OZSceneNode *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZSceneNode::getPasteEntry(OZSceneNode *this, OZChannelBase *a2)
{
  return 0;
}

void OZSceneNode::allowDrag(OZSceneNode *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZSceneNode *v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  OZChannelObjectRoot *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t ObjectManipulator;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  OZChannelBase *v36;
  BOOL v37;
  OZChannelBase *v38;
  OZChannelFolder *v39;
  __int128 v41;

  *a5 = 0;
  if (!lpsrc)
    goto LABEL_48;
  if (v13 && *a6 == 1)
  {
    if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) == a3)
    {
      v17 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v13 + 272))(v13);
      v18 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 272))(this);
      if (a7 == 1 && v17 == v18)
      {
        v19 = (OZChannelObjectRoot *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this);
        if (OZChannelObjectRoot::findNodeRefDescendant(v19, v13, (OZChannelFolder *)v19))
        {
          if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)this + 592))(this))
          {
            *a6 = 1;
            v20 = a4 & 8;
LABEL_60:
            *a5 = v20;
            return;
          }
        }
      }
    }
    return;
  }
  if (!v14
    || (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) != a3
    && (!a3
  {
    if (v15
      && ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) == a3
       || a3
    {
      v32 = (*(uint64_t (**)(uint64_t *))(*v15 + 336))(v15);
      v33 = *v15;
      if (v32)
      {
        if ((OZChannelBase *)(*(uint64_t (**)(uint64_t *))(v33 + 312))(v15) == a3)
          goto LABEL_48;
        v27 = (*(uint64_t (**)(uint64_t *, OZSceneNode *))(*v15 + 512))(v15, this);
        goto LABEL_30;
      }
      v35 = (*(uint64_t (**)(uint64_t *, OZSceneNode *))(v33 + 512))(v15, this);
    }
    else
    {
      if (!v16 || (*a6 | 2) != 3 && a4 != 1 && *a6 != 2)
        goto LABEL_48;
      if ((*(uint64_t (**)(void *))(*(_QWORD *)v16 + 128))(v16))
      {
LABEL_37:
        v34 = a4 & 2;
        goto LABEL_46;
      }
      v35 = (*(uint64_t (**)(void *, OZSceneNode *))(*(_QWORD *)v16 + 104))(v16, this);
    }
LABEL_44:
    if (v35)
    {
      v34 = a4 & 1;
LABEL_46:
      *a5 = v34;
      if (v34)
        return;
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  v25 = (*(uint64_t (**)(uint64_t *))(*v14 + 296))(v14);
  v26 = *v14;
  if (!v25)
  {
    v35 = (*(uint64_t (**)(uint64_t *, OZSceneNode *))(v26 + 528))(v14, this);
    goto LABEL_44;
  }
  if ((OZChannelBase *)(*(uint64_t (**)(uint64_t *))(v26 + 240))(v14) == a3)
    goto LABEL_48;
  v27 = (*(uint64_t (**)(uint64_t *, OZSceneNode *))(*v14 + 528))(v14, this);
LABEL_30:
  if (v27
    && (*a6 != 1 || (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) == a3))
  {
    goto LABEL_37;
  }
LABEL_48:
  if (*a5)
    return;
LABEL_49:
  if (lpsrc)
  else
    v36 = 0;
  v37 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) != a3 || v36 == 0;
  if (v37
    || (v38 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this),
        OZChannelBase::isDescendantOf(v36, v38)))
  {
    OZObjectManipulator::allowDrag((OZSceneNode *)((char *)this + 16), lpsrc, a3, a4, a5, a6);
    return;
  }
  v39 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this);
  if (OZChannelFolder::findMatchingDescendant(v39, v36))
  {
    v20 = a4 & 1;
    goto LABEL_60;
  }
}

void `non-virtual thunk to'OZSceneNode::allowDrag(OZSceneNode *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZSceneNode::allowDrag((OZSceneNode *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

uint64_t OZSceneNode::prepareForDragOperation()
{
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNode::prepareForDragOperation()
{
  return 1;
}

uint64_t OZSceneNode::deleteThis(OZSceneNode *this, OZChannelBase *a2)
{
  uint64_t i;
  OZScene *v5;
  OZEffect *v6;
  uint64_t j;
  uint64_t v8;
  int v9;
  char *v10;
  char *k;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  OZChannelBase *v20;
  OZScene *v21;
  uint64_t v22;

  if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) == a2)
  {
    if (*((_QWORD *)this + 121))
      (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 928))(this);
    OZSceneNode::removeFromParent(this);
    v5 = (OZScene *)*((_QWORD *)this + 121);
    if (v5)
      OZScene::unregisterNode(v5, this);
    (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 8))(this);
    return 1;
  }
  for (i = *((_QWORD *)this + 123); ; i = *(_QWORD *)(i + 8))
  {
    if ((OZSceneNode *)i == (OZSceneNode *)((char *)this + 976))
      goto LABEL_17;
    if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 240))(*(_QWORD *)(i + 16)) == a2)
      break;
  }
  v6 = *(OZEffect **)(i + 16);
  if (!v6)
  {
LABEL_17:
    v9 = 0;
    goto LABEL_18;
  }
  for (j = *((_QWORD *)this + 126); (OZSceneNode *)j != (OZSceneNode *)((char *)this + 1000); j = *(_QWORD *)(j + 8))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(j + 16) + 152))(*(_QWORD *)(j + 16), (uint64_t)v6 + 48);
  OZSceneNode::removeEffect(this, v6);
  (*(void (**)(OZEffect *))(*(_QWORD *)v6 + 8))(v6);
  v8 = *((_QWORD *)this + 121);
  if (v8)
    OZDocument::postNotification(*(OZDocument **)(v8 + 1584), 16);
  v9 = 1;
LABEL_18:
  v10 = (char *)this + 1000;
  for (k = (char *)*((_QWORD *)this + 126); ; k = (char *)*((_QWORD *)k + 1))
  {
    if (k == v10)
    {
      if ((v9 & 1) != 0)
        goto LABEL_38;
      return 0;
    }
    if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)k + 2) + 312))(*((_QWORD *)k + 2)) == a2)
      break;
  }
  v13 = (unsigned int *)*((_QWORD *)k + 2);
  if (!v13)
  {
    if (v9)
      goto LABEL_38;
    return 0;
  }
  v14 = *((_QWORD *)this + 126);
  v15 = *((_QWORD *)k + 2);
  if ((char *)v14 != v10)
  {
    do
    {
      v16 = *(unsigned int **)(v14 + 16);
      if (v13 != v16)
      {
        v17 = *((_QWORD *)k + 2);
        if (v17)
          v18 = v17 + 16;
        else
          v18 = 0;
        (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v16 + 152))(v16, v18);
      }
      v14 = *(_QWORD *)(v14 + 8);
    }
    while ((char *)v14 != v10);
    v15 = *((_QWORD *)k + 2);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 120))(v15);
  v19 = *(_QWORD *)k;
  *(_QWORD *)(v19 + 8) = *((_QWORD *)k + 1);
  **((_QWORD **)k + 1) = v19;
  --*((_QWORD *)this + 127);
  operator delete(k);
  v20 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 312))(v13);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 704), v20);
  v21 = (OZScene *)*((_QWORD *)this + 121);
  if (v21)
  {
    OZScene::unregisterObject(v21, (OZObjectManipulator *)(v13 + 4));
    OZScene::removeAllDependencies(*((OZScene **)this + 121), v13[20]);
  }
  (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  v22 = *((_QWORD *)this + 121);
  if (v22)
    OZDocument::postNotification(*(OZDocument **)(v22 + 1584), 16);
LABEL_38:
  (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
  return 1;
}

void OZSceneNode::removeEffect(OZSceneNode *this, OZEffect *a2)
{
  char *v4;
  OZSceneNode *v5;
  uint64_t v6;
  OZChannelBase *v7;
  OZScene *v8;
  uint64_t v9;

  (*(void (**)(OZEffect *))(*(_QWORD *)a2 + 448))(a2);
  v4 = (char *)*((_QWORD *)this + 123);
  if (v4 != (char *)this + 976)
  {
    while (1)
    {
      v5 = (OZSceneNode *)*((_QWORD *)v4 + 1);
      if (*((OZEffect **)v4 + 2) == a2)
        break;
      v4 = (char *)*((_QWORD *)v4 + 1);
      if (v5 == (OZSceneNode *)((char *)this + 976))
        goto LABEL_7;
    }
    v6 = *(_QWORD *)v4;
    *(_QWORD *)(v6 + 8) = v5;
    **((_QWORD **)v4 + 1) = v6;
    --*((_QWORD *)this + 124);
    operator delete(v4);
    OZSceneNode::_sequenceEffectInputs(this);
    v7 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 240))(a2);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 576), v7);
    v8 = (OZScene *)*((_QWORD *)this + 121);
    if (v8)
    {
      OZScene::unregisterObject(v8, (OZEffect *)((char *)a2 + 48));
      OZScene::removeAllDependencies(*((OZScene **)this + 121), *((_DWORD *)a2 + 28));
    }
  }
LABEL_7:
  (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
  v9 = *((_QWORD *)this + 121);
  if (v9)
    OZDocument::postNotification(*(OZDocument **)(v9 + 1584), 16);
}

uint64_t `non-virtual thunk to'OZSceneNode::deleteThis(OZSceneNode *this, OZChannelBase *a2)
{
  return OZSceneNode::deleteThis((OZSceneNode *)((char *)this - 16), a2);
}

uint64_t OZSceneNode::copy(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNode::copy(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t OZSceneNode::paste(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNode::paste(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t OZSceneNode::rename(OZSceneNode *this, OZChannelBase *a2, PCString *a3)
{
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNode::rename(OZSceneNode *this, OZChannelBase *a2, PCString *a3)
{
  return 1;
}

uint64_t `non-virtual thunk to'OZSceneNode::getSceneNode(OZSceneNode *this)
{
  return (uint64_t)this - 16;
}

BOOL OZSceneNode::isSelected(OZSceneNode *this)
{
  OZChannelFolder *v1;

  v1 = (OZChannelFolder *)((char *)this + 56);
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 56), 1) || OZChannelFolder::testFoldFlag(v1, 0x2000);
}

BOOL `non-virtual thunk to'OZSceneNode::isSelected(OZSceneNode *this)
{
  return OZSceneNode::isSelected((OZSceneNode *)((char *)this - 16));
}

OZChannelBase *OZSceneNode::select(OZSceneNode *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 1, 0);
}

OZChannelBase *`non-virtual thunk to'OZSceneNode::select(OZSceneNode *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 40), 1, 0);
}

OZChannelFolder *OZSceneNode::deselect(OZSceneNode *this)
{
  OZChannelBase *v2;

  v2 = (OZChannelBase *)((char *)this + 56);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 1, 0);
  OZChannelBase::resetFlag(v2, 0x10000000, 0);
  return OZSceneNode::deselectEffectsAndBehaviors(this);
}

OZChannelFolder *OZSceneNode::deselectEffectsAndBehaviors(OZSceneNode *this)
{
  OZChannelFolder *result;
  uint64_t i;
  char *v4;
  uint64_t j;

  result = OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 56), 0x2000);
  for (i = *((_QWORD *)this + 123); (OZSceneNode *)i != (OZSceneNode *)((char *)this + 976); i = *(_QWORD *)(i + 8))
    result = (OZChannelFolder *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 496))(*(_QWORD *)(i + 16));
  v4 = (char *)this + 1000;
  for (j = *((_QWORD *)this + 126); (char *)j != v4; j = *(_QWORD *)(j + 8))
    result = (OZChannelFolder *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(j + 16) + 496))(*(_QWORD *)(j + 16));
  return result;
}

OZChannelFolder *`non-virtual thunk to'OZSceneNode::deselect(OZSceneNode *this)
{
  return OZSceneNode::deselect((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::isAnyParentSelected(OZSceneNode *this)
{
  uint64_t v2;
  OZChannelBase *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 120);
  if (!v2)
    return 0;
  v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 640))(v2);
  v4 = 1;
  if (!OZChannelBase::testFlag(v3, 1))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 120) + 704))(*((_QWORD *)this + 120));
  return v4;
}

uint64_t `non-virtual thunk to'OZSceneNode::isAnyParentSelected(OZSceneNode *this)
{
  return OZSceneNode::isAnyParentSelected((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::getSolo(OZSceneNode *this)
{
  return OZChannelBase::isSolo((OZChannelBase *)((char *)this + 56));
}

uint64_t OZSceneNode::setSolo(OZSceneNode *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  OZChannelBase::solo((OZChannelBase *)((char *)this + 56), a2);
  result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 960))(this);
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1032))(this);
    result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1024))(this);
    if (result != v5)
    {
      v6 = result;
      do
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 16) + 720))(*(_QWORD *)(v6 + 16), a2);
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
  return result;
}

void *OZSceneNode::removeLinkedID(OZSceneNode *this, __int32 a2)
{
  void *v4;
  void *result;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (void *)*((_QWORD *)this + 133);
  result = wmemchr(*((__int32 **)this + 132), a2, ((uint64_t)v4 - *((_QWORD *)this + 132)) >> 2);
  if (result)
    v6 = result;
  else
    v6 = v4;
  v7 = (void *)*((_QWORD *)this + 133);
  if (v6 != v7)
  {
    result = wmemchr(*((__int32 **)this + 132), a2, ((uint64_t)v7 - *((_QWORD *)this + 132)) >> 2);
    if (result)
      v8 = (uint64_t)result;
    else
      v8 = (uint64_t)v7;
    v9 = *((_QWORD *)this + 133);
    v10 = v9 - (v8 + 4);
    if (v9 != v8 + 4)
      result = memmove((void *)v8, (const void *)(v8 + 4), v9 - (v8 + 4));
    *((_QWORD *)this + 133) = v8 + v10;
  }
  return result;
}

BOOL OZSceneNode::isLinkable(OZSceneNode *this)
{
  return *((_QWORD *)this + 132) != *((_QWORD *)this + 133);
}

uint64_t OZSceneNode::isLinked(OZSceneNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 736))(this);
  if ((_DWORD)result)
    return OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  return result;
}

uint64_t OZSceneNode::link(OZSceneNode *this)
{
  OZChannelFolder *v2;
  uint64_t result;
  unsigned int *i;
  uint64_t v5;

  v2 = (OZChannelFolder *)((char *)this + 56);
  result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  if ((result & 1) == 0)
  {
    result = (uint64_t)OZChannelFolder::setFoldFlag(v2, 0x4000);
    if (*((_QWORD *)this + 121))
    {
      for (i = (unsigned int *)*((_QWORD *)this + 132); i != *((unsigned int **)this + 133); ++i)
      {
        result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
        if (result)
        {
          v5 = result;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 744))(result);
          if ((result & 1) == 0)
            result = (uint64_t)OZChannelFolder::setFoldFlag((OZChannelFolder *)(v5 + 56), 0x4000);
        }
      }
    }
  }
  return result;
}

uint64_t OZSceneNode::unlink(OZSceneNode *this)
{
  OZChannelFolder *v2;
  uint64_t result;
  unsigned int *i;
  uint64_t v5;

  v2 = (OZChannelFolder *)((char *)this + 56);
  result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  if ((_DWORD)result)
  {
    result = (uint64_t)OZChannelFolder::resetFoldFlag(v2, 0x4000);
    if (*((_QWORD *)this + 121))
    {
      for (i = (unsigned int *)*((_QWORD *)this + 132); i != *((unsigned int **)this + 133); ++i)
      {
        result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
        if (result)
        {
          v5 = result;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 744))(result);
          if ((_DWORD)result)
            result = (uint64_t)OZChannelFolder::resetFoldFlag((OZChannelFolder *)(v5 + 56), 0x4000);
        }
      }
    }
  }
  return result;
}

uint64_t OZSceneNode::lock(OZSceneNode *this)
{
  uint64_t result;
  unsigned int *i;
  uint64_t v4;

  result = OZObjectManipulator::lock((OZSceneNode *)((char *)this + 16));
  if (*((_QWORD *)this + 121))
  {
    for (i = (unsigned int *)*((_QWORD *)this + 132); i != *((unsigned int **)this + 133); ++i)
    {
      result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
      if (result)
      {
        v4 = result;
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 56))(result + 16, 0);
        if ((result & 1) == 0)
          result = OZChannelFolder::lock((OZChannelFolder *)(v4 + 56), 1, 1);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'OZSceneNode::lock(OZSceneNode *this)
{
  return OZSceneNode::lock((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::unlock(OZSceneNode *this)
{
  uint64_t result;
  unsigned int *i;
  uint64_t v4;

  result = OZObjectManipulator::unlock((OZSceneNode *)((char *)this + 16));
  if (*((_QWORD *)this + 121))
  {
    for (i = (unsigned int *)*((_QWORD *)this + 132); i != *((unsigned int **)this + 133); ++i)
    {
      result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
      if (result)
      {
        v4 = result;
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 56))(result + 16, 0);
        if ((_DWORD)result)
          result = OZChannelFolder::lock((OZChannelFolder *)(v4 + 56), 0, 1);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'OZSceneNode::unlock(OZSceneNode *this)
{
  return OZSceneNode::unlock((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::canBeExported(OZSceneNode *this)
{
  return 0;
}

uint64_t OZSceneNode::isFreezable(OZSceneNode *this)
{
  return 0;
}

BOOL OZSceneNode::isFrozen(OZSceneNode *this)
{
  return OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x8000);
}

uint64_t OZSceneNode::freeze(OZSceneNode *this)
{
  OZChannelFolder *v2;
  uint64_t result;

  v2 = (OZChannelFolder *)((char *)this + 56);
  result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x8000);
  if ((result & 1) == 0)
  {
    OZChannelFolder::setFoldFlag(v2, 0x8000);
    return (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 768))(this);
  }
  return result;
}

uint64_t OZSceneNode::unfreeze(OZSceneNode *this)
{
  OZChannelFolder *v2;
  uint64_t result;

  v2 = (OZChannelFolder *)((char *)this + 56);
  result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x8000);
  if ((_DWORD)result)
  {
    OZChannelFolder::resetFoldFlag(v2, 0x8000);
    return (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 776))(this);
  }
  return result;
}

void OZSceneNode::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 56), a2, a3);
}

void `non-virtual thunk to'OZSceneNode::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 40), a2, a3);
}

_QWORD *OZSceneNode::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 56), a2);
}

_QWORD *`non-virtual thunk to'OZSceneNode::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 40), a2);
}

unsigned int *OZSceneNode::updateLinkedIDs(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  result = std::remove_if[abi:ne180100]<std::__wrap_iter<unsigned int *>,removePred>(*(unsigned int **)(a1 + 1056), *(unsigned int **)(a1 + 1064), a2);
  v5 = *(unsigned int **)(a1 + 1056);
  if (*(unsigned int **)(a1 + 1064) != result)
    *(_QWORD *)(a1 + 1064) = result;
  if (v5 != result)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v7 = a2 + 8;
    v6 = v8;
    do
    {
      if (v6)
      {
        v9 = *v5;
        v10 = v7;
        v11 = v6;
        do
        {
          v12 = *(_DWORD *)(v11 + 28);
          v13 = v12 >= v9;
          if (v12 >= v9)
            v14 = (uint64_t *)v11;
          else
            v14 = (uint64_t *)(v11 + 8);
          if (v13)
            v10 = v11;
          v11 = *v14;
        }
        while (*v14);
        if (v10 != v7 && v9 >= *(_DWORD *)(v10 + 28))
          *v5 = *(_DWORD *)(v10 + 32);
      }
      ++v5;
    }
    while (v5 != result);
  }
  return result;
}

unsigned int *std::remove_if[abi:ne180100]<std::__wrap_iter<unsigned int *>,removePred>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;

  if (result == a2)
    return a2;
  v3 = result;
  v6 = *(_QWORD *)(a3 + 8);
  v4 = (_QWORD *)(a3 + 8);
  v5 = v6;
  while (v5)
  {
    v7 = *result;
    v8 = v4;
    v9 = v5;
    do
    {
      v10 = *(_DWORD *)(v9 + 28);
      v11 = v10 >= v7;
      if (v10 >= v7)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (v11)
        v8 = (_QWORD *)v9;
      v9 = *v12;
    }
    while (*v12);
    if (v8 == v4 || *((_DWORD *)v8 + 7) > v7)
      goto LABEL_17;
    if (++result == a2)
      return a2;
  }
  result = v3;
LABEL_17:
  if (result == a2)
    return a2;
  v13 = result + 1;
  if (result + 1 != a2)
  {
    v14 = *v4;
    do
    {
      if (v14)
      {
        v15 = *v13;
        v16 = v4;
        v17 = v14;
        do
        {
          v18 = *(_DWORD *)(v17 + 28);
          v19 = v18 >= v15;
          if (v18 >= v15)
            v20 = (uint64_t *)v17;
          else
            v20 = (uint64_t *)(v17 + 8);
          if (v19)
            v16 = (_QWORD *)v17;
          v17 = *v20;
        }
        while (*v20);
        if (v16 != v4 && *((_DWORD *)v16 + 7) <= v15)
          *result++ = v15;
      }
      ++v13;
    }
    while (v13 != a2);
  }
  return result;
}

uint64_t OZSceneNode::didFinishLoadingIntoScene(OZSceneNode *this)
{
  char *v2;
  char *i;
  char *j;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = (char *)this + 1000;
  for (i = (char *)*((_QWORD *)this + 126); v2 != i; i = (char *)*((_QWORD *)this + 126))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 16) + 16) + 368))(*(_QWORD *)(*(_QWORD *)v2 + 16) + 16);
    v2 = *(char **)v2;
  }
  for (j = (char *)this + 976; j != *((char **)this + 123); j = *(char **)j)
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)j + 16) + 48) + 368))(*(_QWORD *)(*(_QWORD *)j + 16) + 48);
  v5 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1024))(this);
  v6 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1032))(this);
  if (v5 != v6)
  {
    v7 = v6;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 848))(*(_QWORD *)(v5 + 16));
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v7);
  }
  v8 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1104))(this);
  result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 1112))(this);
  if (v8 != result)
  {
    v10 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 848))(*(_QWORD *)(v8 + 16));
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t `non-virtual thunk to'OZSceneNode::didFinishLoadingIntoScene(OZSceneNode *this)
{
  return OZSceneNode::didFinishLoadingIntoScene((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::didFinishLoadingIntoMotionEffect(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *i;
  uint64_t j;

  v1 = this;
  v2 = (uint64_t *)(this + 1000);
  for (i = *(uint64_t **)(this + 1008); v2 != i; i = *(uint64_t **)(v1 + 1008))
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v2 + 16) + 16) + 384))(*(_QWORD *)(*v2 + 16) + 16);
    v2 = (uint64_t *)*v2;
  }
  for (j = v1 + 976; j != *(_QWORD *)(v1 + 984); j = *(_QWORD *)j)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)j + 16) + 48) + 384))(*(_QWORD *)(*(_QWORD *)j + 16) + 48);
  return this;
}

uint64_t `non-virtual thunk to'OZSceneNode::didFinishLoadingIntoMotionEffect(OZSceneNode *this)
{
  return OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)this - 16);
}

char *OZSceneNode::didAddToScene(OZSceneNode *this, OZScene *a2)
{
  char *v4;
  char *i;
  char *j;
  uint64_t ComputedWorkingGamut;
  uint64_t v8;
  _QWORD *v9;

  v4 = (char *)this + 1000;
  for (i = (char *)*((_QWORD *)this + 126); v4 != i; i = (char *)*((_QWORD *)this + 126))
  {
    (*(void (**)(_QWORD, OZScene *))(**(_QWORD **)(*(_QWORD *)v4 + 16) + 136))(*(_QWORD *)(*(_QWORD *)v4 + 16), a2);
    v4 = *(char **)v4;
  }
  for (j = (char *)this + 976; j != *((char **)this + 123); j = *(char **)j)
    (*(void (**)(_QWORD, OZScene *))(**(_QWORD **)(*(_QWORD *)j + 16) + 456))(*(_QWORD *)(*(_QWORD *)j + 16), a2);
  ComputedWorkingGamut = OZScene::getComputedWorkingGamut(a2);
  v8 = OZScene::dynamicRangeTrackingEnabled(a2);
  v9 = (_QWORD *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this);
  return OZScene::updateColorChannelsForWorkingGamut((char *)a2, ComputedWorkingGamut, v8, v9);
}

uint64_t OZSceneNode::willRemoveFromScene(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t j;

  v3 = result;
  v4 = result + 1000;
  for (i = *(_QWORD *)(result + 1008); i != v4; i = *(_QWORD *)(i + 8))
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(i + 16) + 144))(*(_QWORD *)(i + 16), a2);
  for (j = v3 + 976; j != *(_QWORD *)(v3 + 984); j = *(_QWORD *)j)
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)j + 16) + 464))(*(_QWORD *)(*(_QWORD *)j + 16), a2);
  return result;
}

uint64_t OZSceneNode::didUndoDeleteOfObject(uint64_t this, OZObjectManipulator *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this + 1000;
  v3 = *(_QWORD *)(this + 1008);
  if (v3 != this + 1000)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, OZObjectManipulator *))(**(_QWORD **)(v3 + 16) + 168))(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t OZSceneNode::didUndoLastChange(uint64_t this)
{
  uint64_t v1;
  uint64_t i;

  v1 = this + 1000;
  for (i = *(_QWORD *)(this + 1008); i != v1; i = *(_QWORD *)(i + 8))
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 16) + 176))(*(_QWORD *)(i + 16));
  return this;
}

_QWORD *OZSceneNode::willDeleteChannel(_QWORD *this, OZChannelBase *lpsrc)
{
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  void *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;

  if (lpsrc)
  {
    v3 = (uint64_t)this;
    v4 = (char *)(this + 125);
    v5 = (char *)this[126];
    if (v5 != (char *)(this + 125))
    {
      do
      {
        v6 = (_QWORD *)*((_QWORD *)v5 + 2);
        v7 = v6[1];
        v13 = xmmword_1B355D000;
        if (OZFactory::isKindOfClass(v7, (int32x4_t *)&v13))
        {
          (*(void (**)(void *, OZChannelBase *))(*(_QWORD *)v8 + 208))(v8, lpsrc);
        }
        v5 = (char *)*((_QWORD *)v5 + 1);
      }
      while (v5 != v4);
    }
    if (this)
    {
      v9 = (uint64_t **)this[14];
      if (v9)
      {
        v10 = *v9;
        v11 = v9[1];
        while (v10 != v11)
        {
          v12 = *v10++;
          this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 888))(v3, v12);
        }
      }
    }
  }
  return this;
}

_QWORD *OZSceneNode::didUndoDeleteChannel(_QWORD *this, OZChannelBase *lpsrc)
{
  uint64_t v3;
  char *v4;
  uint64_t i;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (lpsrc)
  {
    v3 = (uint64_t)this;
    v4 = (char *)(this + 125);
    for (i = this[126]; (char *)i != v4; i = *(_QWORD *)(i + 8))
      (*(void (**)(_QWORD, OZChannelBase *))(**(_QWORD **)(i + 16) + 216))(*(_QWORD *)(i + 16), lpsrc);
    if (this)
    {
      v6 = (uint64_t **)this[14];
      if (v6)
      {
        v7 = *v6;
        v8 = v6[1];
        while (v7 != v8)
        {
          v9 = *v7++;
          this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 896))(v3, v9);
        }
      }
    }
  }
  return this;
}

_QWORD *OZSceneNode::_sequenceEffectInputs(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = this;
  if (this)
  v2 = v1 + 122;
  v3 = (_QWORD *)v1[123];
  while (v2 != v3)
  {
    v2 = (_QWORD *)*v2;
    *(_QWORD *)(v2[2] + 24) = this;
    this = (_QWORD *)v2[2];
  }
  return this;
}

BOOL OZSceneNode::addEffect(OZSceneNode *this, OZEffect *a2, OZEffect *a3)
{
  __n128 *v6;
  _BOOL8 inserted;
  uint64_t v8;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime time2;
  CMTime time1;

  if (*((_QWORD *)this + 124) > 0x3FuLL)
    return 0;
  v6 = (__n128 *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 240))(a2);
  v12 = *(CMTime *)((char *)this + 208);
  v13 = *(CMTime *)((char *)this + 232);
  (*(void (**)(CMTime *__return_ptr))(v6->n128_u64[0] + 712))(&v10);
  time1 = v11;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    (*(void (**)(CMTime *__return_ptr, __n128 *))(v6->n128_u64[0] + 712))(&v10, v6);
    v13 = v11;
  }
  v10 = v12;
  OZChannelObjectRootBase::setTimeOffset(v6, &v10, 0);
  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v6, (const PCTimeRange *)&v12, 0);
  inserted = OZSceneNode::_internalInsertEffectAfter(this, a2, a3, 1);
  v8 = *((_QWORD *)this + 121);
  if (v8)
    OZDocument::postNotification(*(OZDocument **)(v8 + 1584), 16);
  OZMsgTracerLogFxPlugUsage((OZEffect *)((char *)a2 + 48));
  return inserted;
}

BOOL OZSceneNode::_internalInsertEffectAfter(OZSceneNode *this, OZEffect *a2, OZEffect *a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *i;
  _QWORD *v11;
  _QWORD *v12;
  OZChannelBase *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  const OZChannelBase *v17;
  OZChannelBase *v18;
  OZScene *v19;

  v8 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 296))(a2);
  v9 = (char *)this + 976;
  if (a3)
  {
    for (i = (char *)*((_QWORD *)this + 123); i != v9; i = (char *)*((_QWORD *)i + 1))
    {
      if (*((OZEffect **)i + 2) == a3)
      {
        v9 = i;
        break;
      }
    }
    v14 = (uint64_t *)*((_QWORD *)v9 + 1);
    v15 = operator new(0x18uLL);
    v15[2] = a2;
    v16 = *v14;
    *(_QWORD *)(v16 + 8) = v15;
    *v15 = v16;
    *v14 = (uint64_t)v15;
    v15[1] = v14;
    ++*((_QWORD *)this + 124);
    v17 = (const OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a3 + 240))(a3);
    v18 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 240))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 576), v17, v18);
  }
  else
  {
    v11 = operator new(0x18uLL);
    v12 = (_QWORD *)*((_QWORD *)this + 123);
    *v11 = v9;
    v11[1] = v12;
    v11[2] = a2;
    *v12 = v11;
    *((_QWORD *)this + 123) = v11;
    ++*((_QWORD *)this + 124);
    v13 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 240))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 576), v13);
  }
  *((_QWORD *)a2 + 45) = this;
  v19 = (OZScene *)*((_QWORD *)this + 121);
  if (v19)
  {
    OZScene::registerObject(v19, (OZEffect *)((char *)a2 + 48));
    OZScene::addNodeDependency(*((_QWORD *)this + 121), *((_DWORD *)a2 + 28), *((_DWORD *)this + 20));
  }
  OZSceneNode::_sequenceEffectInputs(this);
  (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
  if (!v8)
    (*(void (**)(OZEffect *, OZSceneNode *, uint64_t))(*(_QWORD *)a2 + 440))(a2, this, a4);
  return v8 == 0;
}

uint64_t OZSceneNode::insertEffectBefore(OZSceneNode *this, OZEffect *a2, OZEffect *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  OZChannelBase *v11;
  _QWORD *v12;
  uint64_t v13;
  const OZChannelBase *v14;
  OZChannelBase *v15;
  OZScene *v16;
  uint64_t result;

  v6 = (*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 296))(a2);
  v7 = (uint64_t *)((char *)this + 976);
  if (a3)
  {
    for (i = *((_QWORD *)this + 123); (uint64_t *)i != v7; i = *(_QWORD *)(i + 8))
    {
      if (*(OZEffect **)(i + 16) == a3)
      {
        v7 = (uint64_t *)i;
        break;
      }
    }
    v12 = operator new(0x18uLL);
    v12[2] = a2;
    v13 = *v7;
    *(_QWORD *)(v13 + 8) = v12;
    *v12 = v13;
    *v7 = (uint64_t)v12;
    v12[1] = v7;
    ++*((_QWORD *)this + 124);
    v14 = (const OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a3 + 240))(a3);
    v15 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 240))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 576), v14, v15);
  }
  else
  {
    v9 = operator new(0x18uLL);
    v9[1] = v7;
    v9[2] = a2;
    v10 = *((_QWORD *)this + 122);
    *v9 = v10;
    *(_QWORD *)(v10 + 8) = v9;
    *((_QWORD *)this + 122) = v9;
    ++*((_QWORD *)this + 124);
    v11 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(_QWORD *)a2 + 240))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 576), v11);
  }
  *((_QWORD *)a2 + 45) = this;
  v16 = (OZScene *)*((_QWORD *)this + 121);
  if (v16)
  {
    OZScene::registerObject(v16, (OZEffect *)((char *)a2 + 48));
    OZScene::addNodeDependency(*((_QWORD *)this + 121), *((_DWORD *)a2 + 28), *((_DWORD *)this + 20));
  }
  OZSceneNode::_sequenceEffectInputs(this);
  result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
  if (!v6)
    return (*(uint64_t (**)(OZEffect *, OZSceneNode *, _QWORD))(*(_QWORD *)a2 + 440))(a2, this, 0);
  return result;
}

BOOL OZSceneNode::insertEffectAfter(OZSceneNode *this, OZEffect *a2, OZEffect *a3)
{
  return OZSceneNode::_internalInsertEffectAfter(this, a2, a3, 0);
}

uint64_t OZSceneNode::getEffect(OZSceneNode *this, int a2)
{
  char *v2;
  uint64_t i;
  uint64_t result;

  v2 = (char *)this + 976;
  for (i = *((_QWORD *)this + 123); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    result = *(_QWORD *)(i + 16);
    if (*(_DWORD *)(result + 112) == a2)
      return result;
  }
  return 0;
}

uint64_t OZSceneNode::hasEnabledEffects(OZSceneNode *this)
{
  char *v1;
  uint64_t v2;
  uint64_t result;

  if ((*((_BYTE *)this + 1024) & 1) != 0)
    return 0;
  v1 = (char *)this + 976;
  v2 = *((_QWORD *)this + 123);
  if ((OZSceneNode *)v2 == (OZSceneNode *)((char *)this + 976))
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 16) + 272))(*(_QWORD *)(v2 + 16), 0, 1);
    if ((_DWORD)result)
      break;
    v2 = *(_QWORD *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return result;
}

void OZSceneNode::addBehavior(OZSceneNode *this, OZBehavior *a2, OZBehavior *a3)
{
  __n128 *v6;
  char *v7;
  char *i;
  OZChannelBase *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  const OZChannelBase *v13;
  OZChannelBase *v14;
  _QWORD *v15;
  uint64_t v16;
  OZScene *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  PCString *Name;
  char *CStr;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime time2;
  CMTime time1;

  v6 = (__n128 *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
  v28 = *(CMTime *)((char *)this + 208);
  v29 = *(CMTime *)((char *)this + 232);
  (*(void (**)(CMTime *__return_ptr))(v6->n128_u64[0] + 712))(&v26);
  time1 = v27;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    (*(void (**)(CMTime *__return_ptr, __n128 *))(v6->n128_u64[0] + 712))(&v26, v6);
    v29 = v27;
  }
  v26 = v28;
  OZChannelObjectRootBase::setTimeOffset(v6, &v26, 0);
  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v6, (const PCTimeRange *)&v28, 0);
  if (a3)
  {
    v7 = (char *)this + 1000;
    for (i = (char *)*((_QWORD *)this + 126); i != v7; i = (char *)*((_QWORD *)i + 1))
    {
      if (*((OZBehavior **)i + 2) == a3)
      {
        v7 = i;
        break;
      }
    }
    v12 = (uint64_t *)*((_QWORD *)v7 + 1);
    v13 = (const OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a3 + 312))(a3);
    v14 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 704), v13, v14);
    v15 = operator new(0x18uLL);
    v15[2] = a2;
    v16 = *v12;
    *(_QWORD *)(v16 + 8) = v15;
    *v15 = v16;
    *v12 = (uint64_t)v15;
    v15[1] = v12;
  }
  else
  {
    v9 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 704), v9);
    v10 = operator new(0x18uLL);
    v11 = (_QWORD *)*((_QWORD *)this + 126);
    *v10 = (char *)this + 1000;
    v10[1] = v11;
    v10[2] = a2;
    *v11 = v10;
    *((_QWORD *)this + 126) = v10;
  }
  ++*((_QWORD *)this + 127);
  (*(void (**)(OZBehavior *, OZSceneNode *))(*(_QWORD *)a2 + 96))(a2, this);
  v17 = (OZScene *)*((_QWORD *)this + 121);
  if (v17)
  {
    OZScene::registerObject(v17, (OZBehavior *)((char *)a2 + 16));
    OZScene::addNodeDependency(*((_QWORD *)this + 121), *((_DWORD *)a2 + 20), *((_DWORD *)this + 20));
    OZScene::sceneDidChange(*((OZScene **)this + 121));
  }
  (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
  v18 = *((_QWORD *)this + 121);
  if (v18)
    OZDocument::postNotification(*(OZDocument **)(v18 + 1584), 16);
  v19 = (_DWORD *)*((_QWORD *)a2 + 1);
  v21 = v19[2];
  v20 = v19[3];
  v23 = v19[4];
  v22 = v19[5];
  if ((v21 != -5795320 || v20 != 2120159703 || v23 != -1426653181 || v22 != -1814655222)
    && (v21 != -691890574 || v20 != -1444998696 || v23 != -1536032758 || v22 != -1783627174)
    && (v21 != 1636967960 || v20 != -943975976 || v23 != -2077360118 || v22 != -1783627174)
    && (v21 != 1123529275 || v20 != -929492521 || v23 != -1588461565 || v22 != -1814655222))
  {
    Name = (PCString *)OZObjectManipulator::getName((OZBehavior *)((char *)a2 + 16));
    CStr = PCString::createCStr(Name);
    OZChannelBase::setRangeName((OZChannelBase *)"Behaviors", (const PCString *)CStr);
    free(CStr);
  }
}

void OZSceneNode::removeBehavior(OZSceneNode *this, OZBehavior *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  OZChannelBase *v7;
  OZScene *v8;
  uint64_t v9;

  v2 = (char *)this + 1000;
  v3 = (char *)*((_QWORD *)this + 126);
  if (v3 != (char *)this + 1000)
  {
    while (*((OZBehavior **)v3 + 2) != a2)
    {
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return;
    }
    if (v3 != v2)
    {
      (*(void (**)(OZBehavior *))(*(_QWORD *)a2 + 120))(a2);
      v6 = *(_QWORD *)v3;
      *(_QWORD *)(v6 + 8) = *((_QWORD *)v3 + 1);
      **((_QWORD **)v3 + 1) = v6;
      --*((_QWORD *)this + 127);
      operator delete(v3);
      v7 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
      OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 704), v7);
      v8 = (OZScene *)*((_QWORD *)this + 121);
      if (v8)
      {
        OZScene::unregisterObject(v8, (OZBehavior *)((char *)a2 + 16));
        OZScene::removeAllDependencies(*((OZScene **)this + 121), *((_DWORD *)a2 + 20));
      }
      (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
      v9 = *((_QWORD *)this + 121);
      if (v9)
        OZDocument::postNotification(*(OZDocument **)(v9 + 1584), 16);
    }
  }
}

uint64_t OZSceneNode::insertBehaviorAfter(OZSceneNode *this, OZBehavior *a2, OZBehavior *a3)
{
  OZObjectManipulator *v6;
  char v7;
  char *i;
  char *v9;
  char *j;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  const OZChannelBase *v14;
  OZChannelBase *v15;
  _QWORD *v16;
  _QWORD *v17;
  OZChannelBase *v18;
  OZScene *v19;

  v6 = (OZBehavior *)((char *)a2 + 16);
  v7 = (*(uint64_t (**)(char *))(*((_QWORD *)a2 + 2) + 48))((char *)a2 + 16);
  if (!a3 || (v7 & 1) != 0)
  {
    if (!a3)
    {
      v16 = operator new(0x18uLL);
      v17 = (_QWORD *)*((_QWORD *)this + 126);
      *v16 = (char *)this + 1000;
      v16[1] = v17;
      v16[2] = a2;
      *v17 = v16;
      *((_QWORD *)this + 126) = v16;
      ++*((_QWORD *)this + 127);
      v18 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
      OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 704), v18);
      a3 = 0;
      goto LABEL_16;
    }
  }
  else if ((*(unsigned int (**)(char *))(*((_QWORD *)a3 + 2) + 48))((char *)a3 + 16))
  {
    for (i = (char *)this + 1000; i != *((char **)this + 126); i = *(char **)i)
    {
      a3 = *(OZBehavior **)(*(_QWORD *)i + 16);
      if (!(*(unsigned int (**)(char *))(*((_QWORD *)a3 + 2) + 48))((char *)a3 + 16))
        break;
    }
  }
  v9 = (char *)this + 1000;
  for (j = (char *)*((_QWORD *)this + 126); j != v9; j = (char *)*((_QWORD *)j + 1))
  {
    if (*((OZBehavior **)j + 2) == a3)
    {
      v9 = j;
      break;
    }
  }
  v11 = (uint64_t *)*((_QWORD *)v9 + 1);
  v12 = operator new(0x18uLL);
  v12[2] = a2;
  v13 = *v11;
  *(_QWORD *)(v13 + 8) = v12;
  *v12 = v13;
  *v11 = (uint64_t)v12;
  v12[1] = v11;
  ++*((_QWORD *)this + 127);
  v14 = (const OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a3 + 312))(a3);
  v15 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(_QWORD *)a2 + 312))(a2);
  OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 704), v14, v15);
LABEL_16:
  (*(void (**)(OZBehavior *, OZSceneNode *, OZBehavior *))(*(_QWORD *)a2 + 104))(a2, this, a3);
  v19 = (OZScene *)*((_QWORD *)this + 121);
  if (v19)
  {
    OZScene::registerObject(v19, v6);
    OZScene::addNodeDependency(*((_QWORD *)this + 121), *((_DWORD *)a2 + 20), *((_DWORD *)this + 20));
  }
  return (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
}

uint64_t OZSceneNode::getBehavior(OZSceneNode *this, int a2)
{
  char *v2;
  uint64_t i;
  uint64_t result;

  v2 = (char *)this + 1000;
  for (i = *((_QWORD *)this + 126); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    result = *(_QWORD *)(i + 16);
    if (*(_DWORD *)(result + 80) == a2)
      return result;
  }
  return 0;
}

uint64_t OZSceneNode::isAffectedByBehaviors(OZSceneNode *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t result;

  if ((*((_BYTE *)this + 1024) & 2) != 0)
    return 0;
  v1 = (char *)this + 1000;
  v2 = (_QWORD *)*((_QWORD *)this + 126);
  if (v2 == (_QWORD *)((char *)this + 1000))
    return 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2[2] + 16) + 24))(v2[2] + 16, 0, 1);
    if ((_DWORD)result)
      break;
    v2 = (_QWORD *)v2[1];
  }
  while (v2 != (_QWORD *)v1);
  return result;
}

uint64_t OZSceneNode::isAffectedByBakeableBehaviors(OZSceneNode *this)
{
  char *v1;
  uint64_t i;
  _QWORD *v3;

  if ((*((_BYTE *)this + 1024) & 2) == 0)
  {
    v1 = (char *)this + 1000;
    for (i = *((_QWORD *)this + 126); (char *)i != v1; i = *(_QWORD *)(i + 8))
    {
      v3 = *(_QWORD **)(i + 16);
      if ((*(unsigned int (**)(_QWORD *, _QWORD, uint64_t))(v3[2] + 24))(v3 + 2, 0, 1)
        && ((*(uint64_t (**)(_QWORD *))(*v3 + 272))(v3) & 1) != 0)
      {
        return 1;
      }
    }
  }
  return 0;
}

void OZSceneNode::bake(OZSceneNode *this)
{
  CMTimeEpoch v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  CMTimeEpoch epoch;
  void *v7;
  uint64_t v8;
  __n128 FrameDuration;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  CMTimeValue value;
  OZChannelBase *v14;
  const PCString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  __int128 v23;
  CMTimeEpoch v24;
  CMTime v25;
  CMTime v26;
  __n128 v27;
  CMTimeEpoch v28;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime time2;
  CMTime time1;

  *(_OWORD *)&v32.value = *MEMORY[0x1E0CA2E68];
  v2 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)&v33.value = *(_OWORD *)&v32.value;
  v32.epoch = v2;
  v33.epoch = v2;
  PCURL::PCURL((PCURL *)&v30, CFSTR("Undo Convert To Keyframes"));
  (*(void (**)(char *, CMTime *, _QWORD))(*((_QWORD *)this + 2) + 176))((char *)this + 16, &v30, 0);
  PCString::~PCString((PCString *)&v30);
  v3 = (char *)this + 1000;
  v4 = (char *)*((_QWORD *)this + 126);
  if (v4 == (char *)this + 1000)
    return;
  do
  {
    v5 = (_QWORD *)*((_QWORD *)v4 + 2);
    if (v4 == *((char **)this + 126))
    {
      (*(void (**)(CMTime *__return_ptr, _QWORD))(*v5 + 608))(&v30, *((_QWORD *)v4 + 2));
      v32 = v30;
      *(_OWORD *)&v33.value = *(_OWORD *)&v31.value;
      epoch = v31.epoch;
    }
    else
    {
      (*(void (**)(CMTime *__return_ptr, _QWORD))(*v5 + 608))(&v30, *((_QWORD *)v4 + 2));
      v29 = v30;
      v27 = 0uLL;
      v28 = 0;
      time1 = v30;
      time2 = v31;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v27);
      v26 = v32;
      memset(&v25, 0, sizeof(v25));
      time1 = v32;
      time2 = v33;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v25);
      time1 = v29;
      *(__n128 *)&time2.value = v27;
      time2.epoch = v28;
      if (!CMTimeCompare(&time1, &time2))
        goto LABEL_11;
      time1 = v26;
      time2 = v29;
      if (CMTimeCompare(&time1, &time2) >= 1)
        v26 = v29;
      time1 = v25;
      *(__n128 *)&time2.value = v27;
      time2.epoch = v28;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(__n128 *)&v25.value = v27;
        v25.epoch = v28;
      }
      v32 = v26;
      time1 = v25;
      time2 = v26;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      *(_OWORD *)&v33.value = v23;
      epoch = v24;
    }
    v33.epoch = epoch;
LABEL_11:
    v29 = v33;
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((_QWORD *)this + 121) + 336), &v27);
    v30 = v29;
    *(__n128 *)&time1.value = v27;
    time1.epoch = v28;
    PC_CMTimeSaferAdd(&v30, &time1, (uint64_t)&time2);
    v33 = time2;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v5[1] + 8), (int32x4_t)xmmword_1B355CD10)))) & 1) != 0)
    {
      (*(void (**)(_QWORD *, CMTime *))(*v5 + 256))(v5, &v32);
    }
    else
    {
      (*(void (**)(void *))(*(_QWORD *)v7 + 728))(v7);
    }
    v4 = (char *)*((_QWORD *)v4 + 1);
  }
  while (v4 != v3);
  v8 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 272))(this);
  FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v30);
  (*(void (**)(OZSceneNode *, CMTime *, CMTime *, __n128))(*(_QWORD *)this + 320))(this, &v32, &v30, FrameDuration);
  v30.value = (CMTimeValue)&v30;
  *(_QWORD *)&v30.timescale = &v30;
  v30.epoch = 0;
  v10 = *((_QWORD *)this + 126);
  if ((char *)v10 != v3)
  {
    do
    {
      v11 = *(_QWORD **)(v10 + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v11[1] + 8), (int32x4_t)xmmword_1B355CD10)))) & 1) != 0)
      {
        (*(void (**)(_QWORD))(*v11 + 264))(*(_QWORD *)(v10 + 16));
        if ((*(unsigned int (**)(_QWORD *))(*v11 + 272))(v11))
        {
          v12 = operator new(0x18uLL);
          v12[1] = &v30;
          v12[2] = v11;
          value = v30.value;
          *v12 = v30.value;
          *(_QWORD *)(value + 8) = v12;
          v30.value = (CMTimeValue)v12;
          ++v30.epoch;
        }
      }
      else
      {
        OZChannelBase::setRangeName(v14, v15);
        (*((void (**)(OZChannelBase *))v14->var0 + 33))(v14);
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while ((char *)v10 != v3);
    v16 = *(_QWORD *)&v30.timescale;
    if (*(CMTime **)&v30.timescale != &v30)
    {
      do
      {
        v17 = *(_QWORD *)(v16 + 16);
        v18 = *((_QWORD *)this + 126);
        if ((char *)v18 != v3)
        {
          if (v17)
            v19 = v17 + 16;
          else
            v19 = 0;
          do
          {
            v20 = *(_QWORD *)(v18 + 16);
            if (v17 != v20)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 152))(v20, v19);
            v18 = *(_QWORD *)(v18 + 8);
          }
          while ((char *)v18 != v3);
        }
        (*(void (**)(OZSceneNode *, uint64_t))(*(_QWORD *)this + 368))(this, v17);
        v16 = *(_QWORD *)(v16 + 8);
      }
      while ((CMTime *)v16 != &v30);
      for (i = *(_QWORD *)&v30.timescale; (CMTime *)i != &v30; i = *(_QWORD *)(i + 8))
      {
        v22 = *(_QWORD *)(i + 16);
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
    }
  }
  (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
  std::__list_imp<unsigned int>::clear(&v30);
}

void sub_1B2E08CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
  std::__list_imp<unsigned int>::clear(&a29);
  _Unwind_Resume(a1);
}

OZChannelFolder *OZSceneNode::bakeChannels(OZSceneNode *this, const PCTimeRange *a2, const CMTime *a3)
{
  OZChannelFolder::bake((OZChannelFolder *)((char *)this + 320), a2, a3);
  OZChannelFolder::bake((OZChannelFolder *)((char *)this + 448), a2, a3);
  OZChannelFolder::bake((OZChannelFolder *)((char *)this + 576), a2, a3);
  return OZChannelFolder::bake((OZChannelFolder *)((char *)this + 832), a2, a3);
}

uint64_t OZSceneNode::addStyle(uint64_t a1, OZScene **a2)
{
  OZChannelBase *v4;
  OZScene *v5;
  OZObjectManipulator *v6;
  __n128 v7;
  CMTime v9[2];

  v4 = (OZChannelBase *)(*(uint64_t (**)(OZScene *))(*(_QWORD *)*a2 + 112))(*a2);
  OZChannelFolder::push_front((OZChannelFolder *)(a1 + 832), v4);
  v5 = *(OZScene **)(a1 + 968);
  if (v5)
  {
    if (*a2)
      v6 = (OZScene *)((char *)*a2 + 16);
    else
      v6 = 0;
    OZScene::registerObject(v5, v6);
    OZScene::addNodeDependency(*(_QWORD *)(a1 + 968), *((_DWORD *)*a2 + 24), *(_DWORD *)(a1 + 80));
    OZStyle::registerAllMaterials(*a2);
    OZScene::addAllDependencies(*(_QWORD *)(a1 + 968), (OZChannelFolder *)v4, *((_DWORD *)*a2 + 24));
  }
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)a1 + 1128))(v9, a1);
  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v4, (const PCTimeRange *)v9, 0);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(a1 + 56), (__n128 *)v9);
  v7 = OZChannelObjectRootBase::setTimeOffset((__n128 *)v4, v9, 0);
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 496))(a1, v7);
}

uint64_t OZSceneNode::removeStyle(OZScene **a1, OZStyle **a2)
{
  OZChannelFolder *v4;
  OZChannelBase *v5;
  OZObjectManipulator *v6;

  v4 = (OZChannelFolder *)(a1 + 104);
  v5 = (OZChannelBase *)(*(uint64_t (**)(OZStyle *))(*(_QWORD *)*a2 + 112))(*a2);
  OZChannelFolder::removeDescendant(v4, v5);
  if (a1[121])
  {
    OZStyle::unregisterAllMaterials(*a2);
    if (*a2)
      v6 = (OZStyle *)((char *)*a2 + 16);
    else
      v6 = 0;
    OZScene::unregisterObject(a1[121], v6);
    OZScene::removeAllDependencies(a1[121], *((_DWORD *)*a2 + 24));
  }
  return (*((uint64_t (**)(OZScene **))*a1 + 62))(a1);
}

uint64_t OZSceneNode::openMedia(OZSceneNode *this)
{
  char *v1;
  uint64_t v2;
  uint64_t result;

  v1 = (char *)this + 976;
  v2 = *((_QWORD *)this + 123);
  if ((OZSceneNode *)v2 == (OZSceneNode *)((char *)this + 976))
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 704))(*(_QWORD *)(v2 + 16));
    v2 = *(_QWORD *)(v2 + 8);
  }
  while ((char *)v2 != v1 && result == 0);
  return result;
}

uint64_t OZSceneNode::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = a1 + 976;
  v6 = *(_QWORD *)(a1 + 984);
  if (v6 == a1 + 976)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, double))(**(_QWORD **)(v6 + 16) + 744))(*(_QWORD *)(v6 + 16), a2, a3, a4, a5);
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6 != v5 && result == 0);
  return result;
}

uint64_t OZSceneNode::prerollEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1 + 976;
  v4 = *(_QWORD *)(a1 + 984);
  if (v4 == a1 + 976)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 16) + 752))(*(_QWORD *)(v4 + 16), a2, a3);
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4 != v3 && result == 0);
  return result;
}

uint64_t OZSceneNode::setRate(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1 + 976;
  v5 = *(_QWORD *)(a1 + 984);
  if (v5 == a1 + 976)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, double))(**(_QWORD **)(v5 + 16) + 760))(*(_QWORD *)(v5 + 16), a2, a3, a4);
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v4 && result == 0);
  return result;
}

uint64_t OZSceneNode::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + 976;
  v6 = *(_QWORD *)(a1 + 984);
  if (v6 != a1 + 976)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v6 + 16) + 720))(*(_QWORD *)(v6 + 16), a2, a3, a4, a5);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
  return 0;
}

uint64_t OZSceneNode::remapTokens(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = result + 976;
  v5 = *(_QWORD *)(result + 984);
  if (v5 != result + 976)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 712))(*(_QWORD *)(v5 + 16), a2, a3, a4);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t OZSceneNode::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1 + 976;
  v5 = *(_QWORD *)(a1 + 984);
  if (v5 == a1 + 976)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 728))(*(_QWORD *)(v5 + 16), a2, a3, a4);
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v4 && result == 0);
  return result;
}

uint64_t OZSceneNode::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1 + 976;
  v5 = *(_QWORD *)(a1 + 984);
  if (v5 == a1 + 976)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 736))(*(_QWORD *)(v5 + 16), a2, a3, a4);
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v4 && result == 0);
  return result;
}

uint64_t OZSceneNode::pruneTokensAtTime(uint64_t this, CMTime *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this + 976;
  v4 = *(_QWORD *)(this + 984);
  if (v4 != this + 976)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, CMTime *, const char *))(**(_QWORD **)(v4 + 16) + 768))(*(_QWORD *)(v4 + 16), a2, a3);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return this;
}

uint64_t OZSceneNode::pruneTokensExceptAtTime(uint64_t this, CMTime *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this + 976;
  v4 = *(_QWORD *)(this + 984);
  if (v4 != this + 976)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, CMTime *, const char *))(**(_QWORD **)(v4 + 16) + 776))(*(_QWORD *)(v4 + 16), a2, a3);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return this;
}

uint64_t OZSceneNode::pruneAllTokens(uint64_t this, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this + 976;
  v3 = *(_QWORD *)(this + 984);
  if (v3 != this + 976)
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(v3 + 16) + 784))(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t OZSceneNode::getWorkingColorDescription@<X0>(OZSceneNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 121);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  else
    return FxGetDefaultWorkingColorDescription(a2);
}

float OZSceneNode::getBlendingGamma(OZSceneNode *this)
{
  uint64_t v1;
  float result;

  v1 = *((_QWORD *)this + 121);
  if (!v1)
    return PCRenderModel::getDefaultBlendingGamma(0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
  return result;
}

double OZSceneNode::getScenePixelAspectRatio(OZSceneNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 121);
  if (v1)
    return *(double *)(v1 + 384);
  else
    return 1.0;
}

_QWORD *OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t *OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::decrement(uint64_t *result)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;

  v1 = (uint64_t **)result;
  v2 = (uint64_t *)*result;
  if (*result == result[1])
  {
    v4 = (uint64_t *)result[2];
    goto LABEL_8;
  }
  if (v2 == (uint64_t *)result[2])
    goto LABEL_11;
  v3 = v2[2];
  if (!v3)
    goto LABEL_11;
  result = *(uint64_t **)(v3 + 960);
  if (!*((_BYTE *)v1 + 24))
  {
    if (result)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 1024))(result);
      v2 = *v1;
      if (*v1 == result)
      {
        v6 = *(_QWORD **)(v3 + 960);
        v13 = v6;
        result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v13);
        v11 = (uint64_t **)(result + 3);
        if (!result)
          v11 = v1 + 2;
        *v1 = *v11;
        if (!v6)
          return result;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v6 + 1056))(v6);
        if (!(_DWORD)result)
          return result;
        goto LABEL_17;
      }
    }
LABEL_11:
    v5 = (uint64_t *)*v2;
    *v1 = v5;
    v6 = (_QWORD *)v5[2];
    if (!v6)
      return result;
    while ((*(unsigned int (**)(_QWORD *))(*v6 + 960))(v6))
    {
      v7 = *v1;
      v12 = v6;
      v13 = &v12;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v12, (uint64_t)&std::piecewise_construct, &v13)[3] = v7;
      result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v6 + 1032))(v6);
      *v1 = result;
      v8 = (uint64_t *)*result;
      *v1 = (uint64_t *)*result;
      v6 = (_QWORD *)v8[2];
      if (!v6)
        return result;
    }
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v6 + 1056))(v6);
    if (!(_DWORD)result)
      return result;
    v9 = *v1;
    v12 = v6;
    v13 = &v12;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v12, (uint64_t)&std::piecewise_construct, &v13)[3] = v9;
LABEL_17:
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v6 + 1112))(v6);
    *v1 = result;
    *v1 = (uint64_t *)*result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 1104))(result);
  if (*v1 != result)
  {
    v4 = (uint64_t *)**v1;
LABEL_8:
    *v1 = v4;
    return result;
  }
  v13 = *(_QWORD **)(v3 + 960);
  result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v13);
  v10 = (uint64_t **)(result + 3);
  if (!result)
    v10 = v1 + 2;
  *v1 = *v10;
  *((_BYTE *)v1 + 24) = 0;
  return result;
}

_QWORD *std::list<OZObjectManipulator *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2)
  {
    v4 = 0;
    v5 = a1;
    do
    {
      v6 = operator new(0x18uLL);
      v6[1] = a1;
      v6[2] = 0;
      *v6 = v5;
      v5[1] = v6;
      *a1 = v6;
      ++v4;
      v5 = v6;
      a1[2] = v4;
    }
    while (a2 != v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B2E09828(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void std::deque<OZSceneNode *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZSceneNode *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZSceneNode *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2E09B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL OZRotoshape::canFourCorner(OZRotoshape *this)
{
  uint64_t v2;
  _BOOL8 result;

  result = 0;
  if (OZElement::canFourCorner((OZElement *)((char *)this + 200)))
  {
    v2 = *((_QWORD *)this + 4733);
    if (!v2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
      return 1;
  }
  return result;
}

BOOL `non-virtual thunk to'OZRotoshape::canFourCorner(OZRotoshape *this)
{
  uint64_t v2;
  _BOOL8 result;

  result = 0;
  if (OZElement::canFourCorner((OZElement *)this))
  {
    v2 = *((_QWORD *)this + 4708);
    if (!v2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
      return 1;
  }
  return result;
}

uint64_t OZRotoshape::canCrop(OZRotoshape *this)
{
  uint64_t result;
  uint64_t v3;

  result = OZElement::canCrop((OZElement *)((char *)this + 200));
  if ((_DWORD)result)
  {
    v3 = *((_QWORD *)this + 4733);
    return (!v3 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3) & 1) == 0)
        && (*((_BYTE *)this + 1224) & 8) == 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'OZRotoshape::canCrop(OZRotoshape *this)
{
  return OZRotoshape::canCrop((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::updateHiddenChannels(OZRotoshape *this, char a2)
{
  _QWORD *v4;
  uint64_t v5;
  OZChannelBase *v6;
  uint64_t v7;
  PCSharedCount v9;

  v4 = (_QWORD *)((char *)this + 37856);
  v5 = *((_QWORD *)this + 4732);
  if (v5
    && OZChannelBase::testFlag((OZChannelBase *)(v5 + 56), 8)
    && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1)
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 25904), MEMORY[0x1E0CA2E68], 0.0) - 1 <= 1)
  {
    v6 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 640))(*v4);
    PCSharedCount::PCSharedCount(&v9);
    (*((void (**)(OZChannelBase *, PCSharedCount *))v6->var0 + 43))(v6, &v9);
    PCString::~PCString((PCString *)&v9);
    OZChannelBase::resetFlag(v6, 8, a2);
  }
  v7 = v4[1];
  if (v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7))
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
  else
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
  return OZElement::updateHiddenChannels((OZElement *)((char *)this + 200), a2);
}

void sub_1B2E09DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::updateHiddenChannels(OZRotoshape *this, char a2)
{
  return OZRotoshape::updateHiddenChannels((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::hitCheck(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  _BOOL4 v13;
  double v15;
  int v16;
  double v17;
  uint64_t v18;
  CMTime v19;
  _BYTE v20[24];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  __int128 v30;
  uint64_t v31;

  if ((a6 & 4) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 680))(a1 + 200) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v30 = *(_OWORD *)a3;
    v31 = *(_QWORD *)(a3 + 16);
    if (!(*(unsigned int (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 360))(a1, &v30, 1, 1, 1))return 0;
  }
  v12 = a1 + 200;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 416))(a1 + 200) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1) & 1) != 0
    || OZChannelBase::isEnabled((OZChannelBase *)(a1 + 21760), 1, 1))
  {
    v13 = OZElement::hitCheck((_QWORD *)(a1 + 200), a2, (__int128 *)a3, a4, (double *)a5, a6) != 0;
  }
  else
  {
    v15 = a2->f32[0];
    v28 = a2->f32[1];
    v29 = v15;
    v27 = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, double *, double *, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v12 + 1368))(a1 + 200, a4, &v29, &v28, &v27, a3, 0))goto LABEL_17;
    OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v19);
    v19 = *(CMTime *)a3;
    v20[0] = *(_BYTE *)(a3 + 202);
    v20[2] = *(_BYTE *)(a3 + 220);
    *(_OWORD *)&v20[8] = *(_OWORD *)(a3 + 24);
    LODWORD(v21) = 1;
    v16 = OZShape::hitCheck(a1 + 18976, &v19);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v23);
    if (v16)
    {
      v26 = 0x3FF0000000000000;
      v23 = 0x3FF0000000000000;
      *(_QWORD *)&v20[16] = 0x3FF0000000000000;
      v19.value = 0x3FF0000000000000;
      *(_OWORD *)&v19.timescale = 0u;
      *(_OWORD *)v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v24 = 0u;
      v25 = 0u;
      (*(void (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)v12 + 1256))(v12, &v19, a3);
      v17 = v28;
      v18 = v27;
      *(double *)a5 = v29;
      *(double *)(a5 + 8) = v17;
      *(_QWORD *)(a5 + 16) = v18;
      PCMatrix44Tmpl<double>::transform<double>((double *)&v19.value, (double *)a5, (double *)a5);
      v13 = 1;
    }
    else
    {
LABEL_17:
      v13 = 0;
    }
  }
  if (v13)
    return v12;
  else
    return 0;
}

void sub_1B2E0A040(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::hitCheck(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return OZRotoshape::hitCheck(a1 - 200, a2, a3, a4, a5, a6);
}

CGColorSpace **OZRotoshape::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, __int128 *a4, int a5, int a6)
{
  uint64_t v12;
  OZScene *v13;
  int v14;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  int v21;
  CGColorSpace *v22;
  double v23[16];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = 0x3FF0000000000000;
  v30 = 0x3FF0000000000000;
  v27 = 0x3FF0000000000000;
  v24 = 0x3FF0000000000000;
  v25 = 0u;
  v26 = 0u;
  v28 = 0u;
  v29 = 0u;
  v31 = 0u;
  v32 = 0u;
  v12 = a1 + 200;
  (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)(a1 + 200) + 1256))(a1 + 200, &v24, a4);
  v13 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 272))(v12);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v13, a2, v23);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v24, v23);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v16);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v18 = *((_BYTE *)a4 + 202);
  v19 = *((_BYTE *)a4 + 220);
  v20 = *(__int128 *)((char *)a4 + 24);
  v21 = 1;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 680))(v12);
  OZMoShape::createSnapSet(a1 + 18976, (double *)&v24, a3, (uint64_t)&v16, a5, a6, v14);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
}

void sub_1B2E0A19C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

CGColorSpace **`non-virtual thunk to'OZRotoshape::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, __int128 *a4, int a5, int a6)
{
  return OZRotoshape::createSnapSetForCamera(a1 - 200, a2, a3, a4, a5, a6);
}

void OZRotoshape::allowDrag(OZRotoshape *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZChannelBase *v14;
  BOOL v15;
  BOOL v16;
  _BYTE *v17;

  *a5 = 0;
  if (!lpsrc
  {
    {
      OZElement::allowDrag((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7);
    }
    else
    {
      *a5 = a4 & 1;
      *a6 = 1;
    }
  }
  else if (v14 != a3)
  {
    *a5 = a4 & 1;
  }
}

void `non-virtual thunk to'OZRotoshape::allowDrag(OZRotoshape *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZRotoshape::allowDrag((OZRotoshape *)((char *)this - 200), a2, a3, a4, a5, a6, a7);
}

{
  OZRotoshape::allowDrag((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5, a6, a7);
}

uint64_t OZRotoshape::prepareForDragOperation()
{
  return 1;
}

uint64_t `non-virtual thunk to'OZRotoshape::prepareForDragOperation()
{
  return 1;
}

{
  return 1;
}

uint64_t OZRotoshape::performDragOperation(OZRotoshape *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  const OZRotoshape *v16;
  const OZRotoshape *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  char v26;
  int v27;
  OZScene *v28;
  uint64_t v29;
  const PCString *v30;
  __n128 v31;
  uint64_t v32;

  if (!lpsrc)
    return OZElement::performDragOperation((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7, a8);
  if (!v16 || (v17 = v16, (*((_BYTE *)v16 + 1224) & 8) != 0) || *((_DWORD *)this + 306) & 8 | a7 & 0x10)
  {
    if ((a7 & 0x10) == 0 && a6 == 1)
    {
      v19 = (uint64_t)v18;
      if (v18)
      {
        if (a3)
        else
          v20 = 0;
        v22 = (char *)this + 200;
        v23 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200) + 1584);
        PCURL::PCURL((PCURL *)&v31, CFSTR("Undo Gradient Change"));
        OZDocument::startCaptureModifiedChannels(v23, (const PCString *)&v31);
        PCString::~PCString((PCString *)&v31);
        v24 = (char *)this + 23304;
        if (!v20 || v20 == v24)
        {
          PCSharedCount::PCSharedCount((PCSharedCount *)&v31);
          (*(void (**)(char *, __n128 *))(*(_QWORD *)v24 + 344))((char *)this + 23304, &v31);
          PCString::~PCString((PCString *)&v31);
          PCSharedCount::PCSharedCount((PCSharedCount *)&v31);
          (*(void (**)(char *, __n128 *))(*((_QWORD *)this + 2736) + 344))((char *)this + 21888, &v31);
          PCString::~PCString((PCString *)&v31);
          v27 = *((_DWORD *)this + 5856);
          OZChannelGradientPositioned::operator=((uint64_t)this + 23304, v19);
          OZChannelFolder::setFoldFlags((OZChannelFolder *)((char *)this + 23304), v27);
          v31 = *(__n128 *)MEMORY[0x1E0CA2E68];
          v32 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          v28 = (OZScene *)*((_QWORD *)this + 146);
          if (v28)
            OZScene::getCurrentTime(v28, &v31);
          (*(void (**)(char *, __n128 *, _QWORD, double))(*((_QWORD *)this + 2736) + 712))((char *)this + 21888, &v31, 0, 1.0);
        }
        else
        {
          v25 = *((_DWORD *)v20 + 30);
          OZChannelFolder::operator=((uint64_t)v20);
          OZChannelFolder::operator=((uint64_t)(v20 + 128));
          OZChannelFolder::operator=((uint64_t)(v20 + 256));
          OZChannelBase::operator=((uint64_t)(v20 + 384), v19 + 384);
          OZChannelBase::operator=((uint64_t)(v20 + 536), v19 + 536);
          v26 = *(_BYTE *)(v19 + 796);
          *((_DWORD *)v20 + 198) = *(_DWORD *)(v19 + 792);
          v20[796] = v26;
          OZChannelFolder::setFoldFlags((OZChannelFolder *)v20, v25);
        }
        v29 = (*(uint64_t (**)(char *))(*(_QWORD *)v22 + 272))(v22);
        OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v29 + 1584), v30);
        return 1;
      }
    }
    return OZElement::performDragOperation((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7, a8);
  }
  PCURL::PCURL((PCURL *)&v31, CFSTR("Undo Drop"));
  (*(void (**)(char *, __n128 *, _QWORD))(*((_QWORD *)this + 27) + 176))((char *)this + 216, &v31, 0);
  PCString::~PCString((PCString *)&v31);
  OZRotoshape::applyStyle(this, v17);
  return 1;
}

void sub_1B2E0A654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZChannelGradientPositioned::operator=(uint64_t a1, uint64_t a2)
{
  char v4;

  OZChannelFolder::operator=(a1);
  OZChannelFolder::operator=(a1 + 128);
  OZChannelFolder::operator=(a1 + 256);
  OZChannelBase::operator=(a1 + 384, a2 + 384);
  OZChannelBase::operator=(a1 + 536, a2 + 536);
  v4 = *(_BYTE *)(a2 + 796);
  *(_DWORD *)(a1 + 792) = *(_DWORD *)(a2 + 792);
  *(_BYTE *)(a1 + 796) = v4;
  return a1;
}

uint64_t `non-virtual thunk to'OZRotoshape::performDragOperation(OZRotoshape *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZRotoshape::performDragOperation((OZRotoshape *)((char *)this - 200), a2, a3, a4, a5, a6, a7, a8);
}

{
  return OZRotoshape::performDragOperation((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZRotoshape::getPreviewSceneNode(OZRotoshape *this)
{
  OZChannelBase *v1;
  uint64_t NextUniqueID;
  uint64_t SceneNode;
  uint64_t v4;
  const CMTime *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  __int128 v23;
  uint64_t v24;
  CMTime v25;
  PCString v26;

  if (!*((_BYTE *)this + 38097) && !*((_BYTE *)this + 38096))
    return 0;
  v1 = (OZChannelBase *)PCString::PCString(&v26, "Preview Rotoshape");
  NextUniqueID = OZChannelBase::getNextUniqueID(v1);
  v23 = xmmword_1B355CCA0;
  SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v23, (uint64_t)&v26, NextUniqueID);
  if (SceneNode)
    v4 = SceneNode - 200;
  else
    v4 = 0;
  PCString::~PCString(&v26);
  OZChannel::setDefaultValue((OZChannel *)(v4 + 27320), 15.0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 27320) + 288))(v4 + 27320, 0);
  OZRotoshape::setInterpolation((OZRotoshape *)v4, 1u);
  OZFigTimeForChannelSeconds(&v25, 2.0, 0x40000);
  v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v23 = *MEMORY[0x1E0CA2E68];
  v24 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v4 + 336))(v4, &v23, 0);
  v22 = *v5;
  OZMoShape::initPPaintTime((_QWORD *)(v4 + 18976), &v22, (const PCTimeRange *)&v23);
  v21 = *v5;
  v6 = (char *)OZRotoshape::addVertex((OZRotoshape *)v4, &v21, -70.0, 0.0);
  OZChannelCurve::setOutputTangents(v4 + 19184, v6, v7, v5, 17.5, 12.5);
  v20 = *v5;
  v8 = (char *)OZRotoshape::addVertex((OZRotoshape *)v4, &v20, -35.0, 25.0);
  v10 = v9;
  OZChannelCurve::setInputTangents(v4 + 19184, v8, v9, v5, -15.0, 0.0);
  OZChannelCurve::setOutputTangents(v4 + 19184, v8, v10, v5, 15.0, 0.0);
  v19 = *v5;
  v11 = (char *)OZRotoshape::addVertex((OZRotoshape *)v4, &v19, 35.0, -25.0);
  v13 = v12;
  OZChannelCurve::setInputTangents(v4 + 19184, v11, v12, v5, -15.0, 0.0);
  OZChannelCurve::setOutputTangents(v4 + 19184, v11, v13, v5, 15.0, 0.0);
  v18 = *v5;
  v14 = (char *)OZRotoshape::addVertex((OZRotoshape *)v4, &v18, 70.0, 0.0);
  OZChannelCurve::setInputTangents(v4 + 19184, v14, v15, v5, -17.5, -12.5);
  v16 = v4 + 200;
  (*(void (**)(uint64_t, double))(*(_QWORD *)(v4 + 200) + 1344))(v4 + 200, 1.0);
  OZRotoshape::finishCurve((OZRotoshape *)v4);
  return v16;
}

void sub_1B2E0A9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZRotoshape::getPreviewSceneNode(OZRotoshape *this)
{
  return OZRotoshape::getPreviewSceneNode((OZRotoshape *)((char *)this - 216));
}

uint64_t OZSceneNode::performDragOperation(OZSceneNode *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  const CMTime *v8;
  unsigned int v10;
  unsigned int *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  OZChannelObjectRoot *v22;
  void *NodeRefDescendant;
  uint64_t result;
  OZChannelBase *v25;
  OZSceneNode *v26;
  uint64_t i;
  OZSceneNode *v28;
  _BOOL4 v29;
  _QWORD *j;
  _QWORD *v31;
  BOOL v32;
  OZChannelBase *v33;
  OZChannelFolder *v34;
  const void *v35;
  OZChannel *v36;
  const OZChannelInfo **v37;
  uint64_t v38;
  uint64_t v39;
  OZChannelBase *v41;
  uint64_t v42;
  OZDocument *v43;
  int v44;
  OZScene *v45;
  __n128 CurrentTime;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  OZBehavior **v53;
  OZBehavior *v54;
  _BOOL4 v55;
  OZScene *v56;
  __n128 *v57;
  const PCString *v58;
  uint64_t v59;
  char *v60;
  const PCString *v61;
  __n128 *v62;
  OZScene *v63;
  char v64;
  unint64_t v65;
  void *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  OZChannelBase *v70;
  const PCString *v71;
  _BOOL4 v72;
  OZScene *v73;
  __n128 *v74;
  const PCString *v75;
  __n128 *v76;
  uint64_t v77;
  OZScene *v78;
  char v79;
  OZScene *v80;
  char v81;
  uint64_t v82;
  OZScene *v83;
  char v84;
  _BOOL4 v85;
  _BOOL4 v86;
  CMTime v89;
  CMTime v90;
  PCString v91[2];
  CMTimeEpoch v92;
  CMTime v93;
  CMTime v94;
  CMTime v95;
  __n128 v96;
  CMTimeEpoch v97;
  CMTime v98;
  CMTime time2;
  CMTime time1;

  v8 = a8;
  v10 = a6;
  if (!lpsrc)
  {
    v25 = 0;
    goto LABEL_27;
  }
  v20 = v19;
  v21 = a5 - 1;
  if (a5 != 1 || !v16)
  {
    if (v17 && v21 <= 2)
    {
      v26 = (OZSceneNode *)(*(uint64_t (**)(_QWORD *))(*v17 + 248))(v17);
      if (v26)
      {
        PCURL::PCURL((PCURL *)v91, CFSTR("Undo Reorder Filter"));
        (*(void (**)(_QWORD *, PCString *, uint64_t))(v17[6] + 176))(v17 + 6, v91, 3);
        PCString::~PCString(v91);
        v85 = v26 != this;
        if (v26 != this)
        {
          for (i = *((_QWORD *)v26 + 126); (OZSceneNode *)i != (OZSceneNode *)((char *)v26 + 1000); i = *(_QWORD *)(i + 8))
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(i + 16) + 152))(*(_QWORD *)(i + 16), v17 + 6);
        }
        OZSceneNode::removeEffect(v26, (OZEffect *)v17);
      }
      else
      {
        v85 = 1;
      }
      v48 = (_QWORD *)*((_QWORD *)this + 123);
      if (v48 != (_QWORD *)((char *)this + 976))
      {
        v49 = v48 + 2;
        if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v48[2] + 240))(v48[2]) == a3)
        {
          v50 = 0;
LABEL_71:
          if (a5 == 3)
            v50 = *v49;
LABEL_73:
          if (v26)
          {
            (*(void (**)(OZSceneNode *, _QWORD *, uint64_t))(*(_QWORD *)this + 352))(this, v17, v50);
            v32 = v26 == this;
            v55 = v85;
            if (!v32)
            {
              v56 = (OZScene *)*((_QWORD *)this + 121);
              PCURL::PCURL((PCURL *)v91, CFSTR("Undo Reorder Filter"));
              OZScene::startCaptureModifiedChannels(v56, v91);
              PCString::~PCString(v91);
              v57 = (__n128 *)(*(uint64_t (**)(_QWORD *))(*v17 + 240))(v17);
              *(_OWORD *)&v91[0].var0 = *((_OWORD *)this + 13);
              v92 = *((_QWORD *)this + 28);
              v93 = *(CMTime *)((char *)this + 232);
              (*(void (**)(CMTime *__return_ptr))(v57->n128_u64[0] + 712))(&v89);
              *(_OWORD *)&v98.value = *(_OWORD *)&v91[0].var0;
              v98.epoch = v92;
              *(_OWORD *)&time1.value = *(_OWORD *)&v91[0].var0;
              time1.epoch = v92;
              time2 = v93;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v96);
              v95 = v89;
              time1 = v89;
              time2 = v90;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v94);
              time1 = v94;
              time2 = v98;
              if (CMTimeCompare(&time1, &time2) < 0
                || (time1 = v95, *(__n128 *)&time2.value = v96, time2.epoch = v97, CMTimeCompare(&time1, &time2) >= 1))
              {
                (*(void (**)(CMTime *__return_ptr, __n128 *))(v57->n128_u64[0] + 712))(&v89, v57);
                v93 = v90;
                (*(void (**)(__n128 *__return_ptr, __n128 *))(v57->n128_u64[0] + 320))(&v96, v57);
                (*(void (**)(CMTime *__return_ptr, __n128 *))(v57->n128_u64[0] + 712))(&v89, v57);
                time1 = v89;
                *(_OWORD *)&time2.value = *(_OWORD *)&v91[0].var0;
                time2.epoch = v92;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v95);
                *(__n128 *)&time1.value = v96;
                time1.epoch = v97;
                time2 = v95;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v98);
                OZChannelObjectRootBase::setTimeOffset(v57, &v98, 0);
                OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v57, (const PCTimeRange *)v91, 0);
              }
              v80 = (OZScene *)*((_QWORD *)this + 121);
              v81 = !v85;
              if (!v80)
                v81 = 1;
              if ((v81 & 1) == 0)
              {
                OZScene::selectObject(v80, (OZObjectManipulator *)(v17 + 6), a6 > 1, 0);
                v80 = (OZScene *)*((_QWORD *)this + 121);
              }
              OZScene::endCaptureModifiedChannels((OZChannelBase **)v80, v58);
            }
          }
          else
          {
            v59 = *(_QWORD *)(*((_QWORD *)this + 121) + 1584);
            PCURL::PCURL((PCURL *)v91, CFSTR("Undo Add Filter"));
            OZDocument::startCaptureModifiedChannels(v59, v91);
            v60 = (char *)this + 968;
            PCString::~PCString(v91);
            if (!(*(unsigned int (**)(OZSceneNode *, _QWORD *, uint64_t))(*(_QWORD *)this + 336))(this, v17, v50))OZSceneNode::performDragOperation((uint64_t)v17, (uint64_t)this + 968);
            if ((a7 & 4) != 0)
            {
              v62 = (__n128 *)(*(uint64_t (**)(_QWORD *))(*v17 + 240))(v17);
              (*(void (**)(PCString *__return_ptr))(v62->n128_u64[0] + 712))(v91);
              OZSceneSettings::getFrameDuration((OZSceneSettings *)(*(_QWORD *)v60 + 336), &v96);
              *(_OWORD *)&v89.value = *(_OWORD *)&v91[0].var0;
              v89.epoch = v92;
              time1 = *a8;
              if (CMTimeCompare(&v89, &time1) <= 0)
              {
                *(_OWORD *)&v89.value = *(_OWORD *)&v91[0].var0;
                v89.epoch = v92;
                time1 = v93;
                PC_CMTimeSaferAdd(&v89, &time1, (uint64_t)&time2);
                v89 = time2;
                *(__n128 *)&time1.value = v96;
                time1.epoch = v97;
                PC_CMTimeSaferSubtract(&v89, &time1, (uint64_t)&v98);
                v89 = *a8;
                time1 = v98;
                if (CMTimeCompare(&v89, &time1) <= 0 || (v93.flags & 1) != 0 && (v93.flags & 0x10) != 0)
                {
                  OZSceneSettings::getFrameDuration((OZSceneSettings *)(*(_QWORD *)v60 + 336), (__n128 *)&time1);
                  PCTimeRange::getEnd((PCTimeRange *)v91, &time1, (uint64_t)&v89);
                  OZSceneSettings::getFrameDuration((OZSceneSettings *)(*(_QWORD *)v60 + 336), (__n128 *)&time2);
                  PCTimeRange::setOffsetEnd((PCTimeRange *)v91, a8, &v89, &time2);
                  OZChannelObjectRootBase::setTimeOffset(v62, a8, 0);
                  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v62, (const PCTimeRange *)v91, 0);
                }
              }
            }
            OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(*(_QWORD *)v60 + 1584), v61);
            v63 = *(OZScene **)v60;
            v32 = *(_QWORD *)v60 == 0;
            v55 = v85;
            v64 = !v85;
            if (v32)
              v64 = 1;
            if ((v64 & 1) == 0)
              OZScene::selectObject(v63, (OZObjectManipulator *)(v17 + 6), a6 > 1, 0);
          }
          (*(void (**)(_QWORD *, _QWORD))(*v17 + 472))(v17, *((_QWORD *)this + 121));
          v82 = *((_QWORD *)this + 121);
          if (!v82)
            goto LABEL_136;
          OZDocument::postNotification(*(OZDocument **)(v82 + 1584), 16);
          if (!v55)
            goto LABEL_136;
          goto LABEL_134;
        }
        while (1)
        {
          v48 = (_QWORD *)v48[1];
          if (v48 == (_QWORD *)((char *)this + 976))
            break;
          v50 = *v49;
          v49 = v48 + 2;
          if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v48[2] + 240))(v48[2]) == a3)
            goto LABEL_71;
        }
      }
      v50 = 0;
      goto LABEL_73;
    }
    if (v18 && v21 <= 2)
    {
      v28 = (OZSceneNode *)(*(uint64_t (**)(_QWORD *))(*v18 + 320))(v18);
      if (v28)
      {
        PCURL::PCURL((PCURL *)v91, CFSTR("Undo Reorder Behavior"));
        (*(void (**)(_QWORD *, PCString *, uint64_t))(v18[2] + 176))(v18 + 2, v91, 3);
        PCString::~PCString(v91);
        v29 = v28 != this;
        if (v28 != this)
        {
          for (j = (_QWORD *)*((_QWORD *)v28 + 126); j != (_QWORD *)((char *)v28 + 1000); j = (_QWORD *)j[1])
          {
            v31 = (_QWORD *)j[2];
            if (v31 != v18)
              (*(void (**)(_QWORD *, _QWORD *))(*v31 + 152))(v31, v18 + 2);
          }
        }
        (*(void (**)(OZSceneNode *, _QWORD *))(*(_QWORD *)v28 + 368))(v28, v18);
      }
      else
      {
        v29 = 1;
      }
      v51 = (char *)this + 1000;
      v52 = *((_QWORD *)this + 126);
      v86 = v29;
      if ((OZSceneNode *)v52 != (OZSceneNode *)((char *)this + 1000))
      {
        v53 = (OZBehavior **)(v52 + 16);
        if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 16) + 312))(*(_QWORD *)(v52 + 16)) == a3)
        {
          v54 = 0;
LABEL_91:
          if (a5 == 3)
            v54 = *v53;
LABEL_93:
          v65 = v18[1];
          *(_OWORD *)&v91[0].var0 = xmmword_1B3053B30;
          if (OZFactory::isKindOfClass(v65, (int32x4_t *)v91))
          {
            if (*((_QWORD *)this + 127))
              v54 = *(OZBehavior **)(*(_QWORD *)v51 + 16);
          }
          else
          {
            if (!this)
              goto LABEL_101;
          }
          v67 = v66;
          if (v67 && v68)
            OZShape::isGeometricShape((OZShape *)(v68 + 18976));
LABEL_101:
          v69 = *((_QWORD *)this + 121);
          v70 = *(OZChannelBase **)(v69 + 1584);
          if (v70)
          {
            if (v28)
            {
              PCURL::PCURL((PCURL *)v91, CFSTR("Undo Reorder Behavior"));
              OZChannelBase::setRangeName(v70, v91);
              PCString::~PCString(v91);
              OZSceneNode::insertBehaviorAfter(this, (OZBehavior *)v18, v54);
              v72 = v86;
              if (v28 != this)
              {
                v73 = (OZScene *)*((_QWORD *)this + 121);
                PCURL::PCURL((PCURL *)v91, CFSTR("Undo Reorder Behavior"));
                OZScene::startCaptureModifiedChannels(v73, v91);
                PCString::~PCString(v91);
                v74 = (__n128 *)(*(uint64_t (**)(_QWORD *))(*v18 + 312))(v18);
                *(_OWORD *)&v91[0].var0 = *((_OWORD *)this + 13);
                v92 = *((_QWORD *)this + 28);
                v93 = *(CMTime *)((char *)this + 232);
                (*(void (**)(CMTime *__return_ptr))(v74->n128_u64[0] + 712))(&v89);
                *(_OWORD *)&v98.value = *(_OWORD *)&v91[0].var0;
                v98.epoch = v92;
                *(_OWORD *)&time1.value = *(_OWORD *)&v91[0].var0;
                time1.epoch = v92;
                time2 = v93;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v96);
                v95 = v89;
                time1 = v89;
                time2 = v90;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v94);
                time1 = v94;
                time2 = v98;
                if (CMTimeCompare(&time1, &time2) < 0
                  || (time1 = v95, *(__n128 *)&time2.value = v96, time2.epoch = v97, CMTimeCompare(&time1, &time2) >= 1))
                {
                  (*(void (**)(CMTime *__return_ptr, __n128 *))(v74->n128_u64[0] + 712))(&v89, v74);
                  v93 = v90;
                  (*(void (**)(__n128 *__return_ptr, __n128 *))(v74->n128_u64[0] + 320))(&v96, v74);
                  (*(void (**)(CMTime *__return_ptr, __n128 *))(v74->n128_u64[0] + 712))(&v89, v74);
                  time1 = v89;
                  *(_OWORD *)&time2.value = *(_OWORD *)&v91[0].var0;
                  time2.epoch = v92;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v95);
                  *(__n128 *)&time1.value = v96;
                  time1.epoch = v97;
                  time2 = v95;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v98);
                  OZChannelObjectRootBase::setTimeOffset(v74, &v98, 0);
                  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v74, (const PCTimeRange *)v91, 0);
                }
                v83 = (OZScene *)*((_QWORD *)this + 121);
                v84 = !v86;
                if (!v83)
                  v84 = 1;
                if ((v84 & 1) == 0)
                {
                  OZScene::selectObject(v83, (OZObjectManipulator *)(v18 + 2), a6 > 1, 0);
                  v83 = (OZScene *)*((_QWORD *)this + 121);
                }
                OZScene::endCaptureModifiedChannels((OZChannelBase **)v83, v75);
              }
            }
            else
            {
              PCURL::PCURL((PCURL *)v91, CFSTR("Undo Add Behavior"));
              OZChannelBase::setRangeName(v70, v91);
              PCString::~PCString(v91);
              (*(void (**)(OZSceneNode *, _QWORD *, OZBehavior *))(*(_QWORD *)this + 360))(this, v18, v54);
              v72 = v86;
              if ((a7 & 4) != 0)
              {
                v76 = (__n128 *)(*(uint64_t (**)(_QWORD *))(*v18 + 312))(v18);
                (*(void (**)(PCString *__return_ptr))(v76->n128_u64[0] + 712))(v91);
                v77 = *((_QWORD *)this + 121);
                if (v77)
                {
                  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v77 + 336), (__n128 *)&v89);
                  if (PCTimeRange::contains((PCTimeRange *)v91, a8, &v89))
                  {
                    OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((_QWORD *)this + 121) + 336), (__n128 *)&time1);
                    PCTimeRange::getEnd((PCTimeRange *)v91, &time1, (uint64_t)&v89);
                    OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((_QWORD *)this + 121) + 336), (__n128 *)&time2);
                    PCTimeRange::setOffsetEnd((PCTimeRange *)v91, a8, &v89, &time2);
                    OZChannelObjectRootBase::setTimeOffset(v76, a8, 0);
                    OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v76, (const PCTimeRange *)v91, 0);
                  }
                }
              }
              v78 = (OZScene *)*((_QWORD *)this + 121);
              v79 = !v86;
              if (!v78)
                v79 = 1;
              if ((v79 & 1) == 0)
                OZScene::selectObject(v78, (OZObjectManipulator *)(v18 + 2), a6 > 1, 0);
              PCURL::PCURL((PCURL *)v91, CFSTR("Undo Add Behavior"));
              (*(void (**)(_QWORD *, PCString *, uint64_t))(v18[2] + 176))(v18 + 2, v91, 1);
              PCString::~PCString(v91);
            }
            OZChannelBase::setRangeName(v70, v71);
            v69 = *((_QWORD *)this + 121);
            if (!v69)
              goto LABEL_136;
          }
          else
          {
            v72 = v86;
          }
          OZDocument::postNotification(*(OZDocument **)(v69 + 1584), 16);
          if (!v72)
            goto LABEL_136;
LABEL_134:
          v43 = *(OZDocument **)(*((_QWORD *)this + 121) + 1584);
          v44 = 32;
          goto LABEL_135;
        }
        while (1)
        {
          v52 = *(_QWORD *)(v52 + 8);
          if ((char *)v52 == v51)
            break;
          v54 = *v53;
          v53 = (OZBehavior **)(v52 + 16);
          if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 16) + 312))(*(_QWORD *)(v52 + 16)) == a3)
            goto LABEL_91;
        }
      }
      v54 = 0;
      goto LABEL_93;
    }
    if (v19 && (a4 == 1 || v21 <= 2))
    {
      v41 = (OZChannelBase *)*((_QWORD *)this + 121);
      if (v41 && !OZChannelBase::isObjectRef(v41))
      {
        PCURL::PCURL((PCURL *)v91, CFSTR("Undo Drop"));
        (*(void (**)(char *, PCString *, _QWORD))(*((_QWORD *)this + 2) + 176))((char *)this + 16, v91, 0);
        PCString::~PCString(v91);
      }
      (*(void (**)(OZSceneNode *, void *))(*(_QWORD *)this + 376))(this, v20);
LABEL_51:
      v42 = *((_QWORD *)this + 121);
      if (v42)
      {
        v43 = *(OZDocument **)(v42 + 1584);
        v44 = 8;
LABEL_135:
        OZDocument::postNotification(v43, v44);
      }
LABEL_136:
      (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
      return 1;
    }
    v10 = a6;
    v8 = a8;
LABEL_27:
    v32 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) != a3
       || v25 == 0;
    if (v32)
      return OZObjectManipulator::performDragOperation((OZSceneNode *)((char *)this + 16), lpsrc, a3, a4, a5, v10, a7, v8);
    v33 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this);
    if (OZChannelBase::isDescendantOf(v25, v33))
      return OZObjectManipulator::performDragOperation((OZSceneNode *)((char *)this + 16), lpsrc, a3, a4, a5, v10, a7, v8);
    v34 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this);
    result = (uint64_t)OZChannelFolder::findMatchingDescendant(v34, v25);
    if (result)
    {
      v35 = (const void *)result;
      if (!v25->var6)
      {
        if (v36)
        {
          if (v37)
            OZChannel::setInfo(v36, v37[16]);
        }
      }
      PCSharedCount::PCSharedCount((PCSharedCount *)v91);
      (*(void (**)(const void *, PCString *))(*(_QWORD *)v35 + 344))(v35, v91);
      PCString::~PCString(v91);
      if ((a7 & 2) != 0)
      {
        v45 = (OZScene *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 272))(this);
        CurrentTime = OZScene::getCurrentTime(v45, (__n128 *)v91);
        (*(void (**)(const void *, PCString *, OZChannelBase *, __n128))(*(_QWORD *)v35 + 304))(v35, v91, v25, CurrentTime);
      }
      else
      {
        OZChannelBase::operator=((uint64_t)v35, (uint64_t)v25);
      }
      (*(void (**)(OZSceneNode *))(*(_QWORD *)this + 496))(this);
      v47 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 272))(this);
      OZDocument::postNotification(*(OZDocument **)(v47 + 1584), 8);
      return 1;
    }
    return result;
  }
  v22 = (OZChannelObjectRoot *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this);
  NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant(v22, (OZSceneNode *)v16, (OZChannelFolder *)v22);
  if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 640))(this) != a3)
    return 0;
  v38 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 272))(v16);
  v39 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)this + 272))(this);
  result = 0;
  if (a6 == 1 && v38 == v39 && NodeRefDescendant != 0)
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)v91);
    (*(void (**)(void *, PCString *))(*(_QWORD *)NodeRefDescendant + 344))(NodeRefDescendant, v91);
    PCString::~PCString(v91);
    (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)NodeRefDescendant + 864))(NodeRefDescendant, v16[20], 0);
    goto LABEL_51;
  }
  return result;
}

void sub_1B2E0BA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
  PCString::~PCString(&a19);
  _Unwind_Resume(a1);
}

uint64_t PCTimeRange::contains(PCTimeRange *this, const CMTime *a2, const CMTime *a3)
{
  unsigned int v7;
  CMTime v8;
  CMTime v9;
  CMTime time2;
  CMTime time1;

  time1 = *(CMTime *)this;
  time2 = *a2;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    time1 = *(CMTime *)this;
    time2 = *(CMTime *)((_BYTE *)this + 1);
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v9);
    time1 = v9;
    time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v8);
    time1 = *a2;
    time2 = v8;
    if (CMTimeCompare(&time1, &time2) < 1)
      return 1;
    v7 = *((_DWORD *)this + 9);
    if ((v7 & 1) != 0)
      return (v7 >> 4) & 1;
  }
  return 0;
}

double PCTimeRange::setOffsetEnd(PCTimeRange *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  __int128 v6;
  double result;
  CMTime v8;
  __int128 v9;
  uint64_t v10;
  CMTime v11;
  CMTime v12;

  v6 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 2) = a2->epoch;
  *(_OWORD *)this = v6;
  v12 = *a3;
  v11 = *a2;
  PC_CMTimeSaferSubtract(&v12, &v11, (uint64_t)&v8);
  v12 = v8;
  v11 = *a4;
  PC_CMTimeSaferAdd(&v12, &v11, (uint64_t)&v9);
  result = *(double *)&v9;
  *(_OWORD *)((char *)this + 24) = v9;
  *((_QWORD *)this + 5) = v10;
  return result;
}

BOOL OZShape::isGeometricShape(OZShape *this)
{
  OZChannel *v1;

  v1 = (OZChannel *)((char *)this + 1072);
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1072), MEMORY[0x1E0CA2E68], 0.0) == 4
      || OZChannel::getValueAsInt(v1, MEMORY[0x1E0CA2E68], 0.0) == 5;
}

uint64_t `non-virtual thunk to'OZSceneNode::performDragOperation(OZSceneNode *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZSceneNode::performDragOperation((OZSceneNode *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZSceneNode::performDragOperation(uint64_t a1, uint64_t a2)
{
  const PCString *v3;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(*(_QWORD *)a2 + 1584), v3);
  __break(1u);
}

void OZLayeredMaterial::OZLayeredMaterial(OZLayeredMaterial *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZFactory *Instance;
  PCString v7;
  PCString v8;

  OZMaterialBase::OZMaterialBase(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E658A018;
  *(_QWORD *)(v5 + 16) = &unk_1E658A1F8;
  *(_QWORD *)(v5 + 48) = &unk_1E658A450;
  *(_QWORD *)(v5 + 56) = &unk_1E658A4A8;
  *(_BYTE *)(v5 + 1305) = 0;
  Instance = (OZFactory *)OZMaterialLayersFolder_Factory::getInstance((OZMaterialLayersFolder_Factory *)v5);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Layers Folder"));
  OZMaterialLayersFolder::OZMaterialLayersFolder((OZLayeredMaterial *)((char *)this + 1312), Instance, &v8, (OZChannelFolder *)((char *)this + 152), 0x64u, 0);
  PCString::~PCString(&v8);
  PCString::PCString(&v8, "Material Options");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1440), &v8, (OZChannelFolder *)((char *)this + 152), 0x6Bu, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Layer Shared Transform Channel"));
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZLayeredMaterial *)((char *)this + 1568), &v8, (OZChannelFolder *)((char *)this + 152), 0x6Au, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Global Placement Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5472), &v8, (OZChannelFolder *)((char *)this + 152), 0x6Cu, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Material Randomize Selection Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Material Randomize Selection Channel"));
  OZChannelEnum::OZChannelEnum((OZLayeredMaterial *)((char *)this + 5600), 1u, &v8, &v7, (OZChannelFolder *)((char *)this + 5472), 0x6Du, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  *((_BYTE *)this + 5856) = 0;
  *(_QWORD *)((char *)this + 5860) = 0;
  *((_QWORD *)this + 736) = 0;
  *((_QWORD *)this + 735) = 0;
  *((_QWORD *)this + 734) = (char *)this + 5880;
  *((_DWORD *)this + 1474) = 0;
  OZLayeredMaterial::init(this);
}

void sub_1B2E0BF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZMaterialBase *v12;
  OZMaterialLayersFolder *v13;
  OZChannelFolder *v14;
  OZChannelMaterialMapTransform *v15;
  OZChannelFolder *v16;
  OZChannelEnum *v17;
  uint64_t v18;
  PCSpinLock *v19;
  _QWORD **v20;
  _QWORD **v21;
  OZChannelEnum *v22;

  v21 = v20;
  v22 = v17;
  PCSpinLock::~PCSpinLock(v19);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v18, *v21);
  OZChannelEnum::~OZChannelEnum(v22);
  OZChannelFolder::~OZChannelFolder(v16);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v15);
  OZChannelFolder::~OZChannelFolder(v14);
  OZMaterialLayersFolder::~OZMaterialLayersFolder(v13);
  OZMaterialBase::~OZMaterialBase(v12);
  _Unwind_Resume(a1);
}

void sub_1B2E0BFC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E0BFA4);
}

void sub_1B2E0BFD4()
{
  JUMPOUT(0x1B2E0BFA4);
}

void sub_1B2E0BFDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E0BFACLL);
}

void sub_1B2E0BFEC()
{
  JUMPOUT(0x1B2E0BFACLL);
}

void sub_1B2E0BFF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  JUMPOUT(0x1B2E0BFB4);
}

void sub_1B2E0C004()
{
  JUMPOUT(0x1B2E0BFB4);
}

uint64_t OZMaterialLayersFolder_Factory::getInstance(OZMaterialLayersFolder_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMaterialLayersFolder_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMaterialLayersFolder_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMaterialLayersFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMaterialLayersFolder_Factory::_instance;
}

OZChannelBase *OZLayeredMaterial::init(OZLayeredMaterial *this)
{
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 152), CFSTR("TXLayeredMaterialRootFolderController"));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1312), 4718592);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 1312), CFSTR("OZFolderGroupController"));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1696), 2, 0);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 1440), CFSTR("OZMaterialOptionsFolderGroupController"));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1440), 0x2000000000, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1440), 4);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1440), 0x800000);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 5472), CFSTR("OZNonTruncatingFolderGroupController"));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5472), 0x400000);
  v3 = xmmword_1B3050090;
  OZChannelEnum::setTags((OZLayeredMaterial *)((char *)this + 5600), (char *)&v3, 4);
  OZLayeredMaterial::addDefaultLayer((char *)this);
  return OZLayeredMaterial::updateSharedTransformUIState((OZChannelBase *)this);
}

void OZLayeredMaterial::OZLayeredMaterial(OZLayeredMaterial *this, const OZLayeredMaterial *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  OZMaterialBase::OZMaterialBase(this, a2, a3);
  *(_QWORD *)v5 = &off_1E658A018;
  *(_QWORD *)(v5 + 16) = &unk_1E658A1F8;
  *(_QWORD *)(v5 + 48) = &unk_1E658A450;
  *(_QWORD *)(v5 + 56) = &unk_1E658A4A8;
  *(_BYTE *)(v5 + 1305) = 0;
  v6 = (OZChannelFolder *)(v5 + 152);
  OZMaterialLayersFolder::OZMaterialLayersFolder((OZMaterialLayersFolder *)(v5 + 1312), (const OZChannelBase *)((char *)a2 + 1312), (OZChannelFolder *)(v5 + 152));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1440), (const OZChannelFolder *)((char *)a2 + 1440), v6);
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZLayeredMaterial *)((char *)this + 1568), (const OZLayeredMaterial *)((char *)a2 + 1568), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5472), (const OZChannelFolder *)((char *)a2 + 5472), v6);
  OZChannelEnum::OZChannelEnum((OZLayeredMaterial *)((char *)this + 5600), (const OZLayeredMaterial *)((char *)a2 + 5600), (OZChannelFolder *)((char *)this + 5472));
  *((_BYTE *)this + 5856) = *((_BYTE *)a2 + 5856);
  *((_DWORD *)this + 1465) = *((_DWORD *)a2 + 1465);
  *((_DWORD *)this + 1466) = 0;
  *((_QWORD *)this + 735) = 0;
  *((_QWORD *)this + 736) = 0;
  *((_QWORD *)this + 734) = (char *)this + 5880;
  *((_DWORD *)this + 1474) = 0;
  v7 = *((_QWORD *)this + 178);
  if (v7)
  {
    v8 = *(_QWORD **)v7;
    v9 = *(_QWORD **)(v7 + 8);
    if (*(_QWORD **)v7 != v9)
    {
      do
      {
        (*(void (**)(_QWORD, OZLayeredMaterial *))(*(_QWORD *)*v8 + 760))(*v8, this);
        ++v8;
      }
      while (v8 != v9);
    }
  }
}

void sub_1B2E0C2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  OZMaterialBase *v10;
  OZMaterialLayersFolder *v11;
  OZChannelFolder *v12;
  OZChannelMaterialMapTransform *v13;
  OZChannelFolder *v14;

  OZChannelFolder::~OZChannelFolder(v14);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  OZMaterialLayersFolder::~OZMaterialLayersFolder(v11);
  OZMaterialBase::~OZMaterialBase(v10);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterial::operator=(uint64_t a1, void *lpsrc)
{
  char *v4;
  const OZChannelBase *v5;
  char *v6;
  uint64_t result;

  ++*(_DWORD *)(a1 + 5864);
  if (!v4
    || (OZMaterialLayersFolder::copy((OZChannelFolder *)(a1 + 1312), (const OZChannelBase *)(v4 + 1312)),
  {
    __cxa_bad_cast();
  }
  OZChannelFolder::assign((OZChannelFolder *)(a1 + 5472), (const OZChannelBase *)(v6 + 5472));
  result = OZMaterialBase::operator=(a1, (uint64_t)lpsrc);
  --*(_DWORD *)(a1 + 5864);
  return result;
}

void sub_1B2E0C45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(v1 + 5864);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial::~OZLayeredMaterial(OZLayeredMaterial *this)
{
  *(_QWORD *)this = &off_1E658A018;
  *((_QWORD *)this + 2) = &unk_1E658A1F8;
  *((_QWORD *)this + 6) = &unk_1E658A450;
  *((_QWORD *)this + 7) = &unk_1E658A4A8;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 1474);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy((uint64_t)this + 5872, *((_QWORD **)this + 735));
  OZChannelEnum::~OZChannelEnum((OZLayeredMaterial *)((char *)this + 5600));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 5472));
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZLayeredMaterial *)((char *)this + 1568));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1440));
  OZMaterialLayersFolder::~OZMaterialLayersFolder((OZLayeredMaterial *)((char *)this + 1312));
  OZMaterialBase::~OZMaterialBase(this);
}

{
  OZLayeredMaterial::~OZLayeredMaterial(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZLayeredMaterial::~OZLayeredMaterial(OZLayeredMaterial *this)
{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 16));
}

{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 48));
}

{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 56));
}

{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 56));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZLayeredMaterial::setPresetFromMaterial(OZLayeredMaterial *this, OZMaterialBase *a2)
{
  unsigned int v4;
  int *v5;
  int *v6;
  const void *v7;
  _QWORD *v8;
  uint64_t result;

  OZMaterialBase::setPresetFromMaterial(this, a2);
  ++*((_DWORD *)this + 1466);
  v4 = *((_DWORD *)this + 44);
  (*(void (**)(OZLayeredMaterial *, OZMaterialBase *))(*(_QWORD *)this + 80))(this, a2);
  OZChannelBase::setID((OZChannelBase *)((char *)this + 152), v4);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 152), 8, 0);
  if (a2)
  {
    if (v5)
    {
      v6 = v5;
      if (*((_BYTE *)v5 + 5856))
      {
        v7 = (const void *)*((_QWORD *)this + 160);
        if (v7)
        {
          if (v8)
            (*(void (**)(_QWORD *, _QWORD, uint64_t, double))(v8[41] + 712))(v8 + 41, MEMORY[0x1E0CA2E68], 1, (double)v6[1465]);
        }
      }
    }
  }
  result = (*(uint64_t (**)(OZLayeredMaterial *))(*(_QWORD *)this + 360))(this);
  --*((_DWORD *)this + 1466);
  return result;
}

void sub_1B2E0C6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(v1 + 5864);
  _Unwind_Resume(a1);
}

OZChannelBase *OZLayeredMaterial::setTransformValuesAsDefaults(OZChannelBase *this)
{
  OZChannelBase *result;
  __CFString *var10;
  uint64_t *isa;
  uint64_t *info;
  uint64_t v6;

  result = OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault(this + 14);
  var10 = this[12].var10;
  if (var10)
  {
    isa = (uint64_t *)var10->isa;
    info = (uint64_t *)var10->info;
    while (isa != info)
    {
      v6 = *isa++;
      result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 776))(v6);
    }
  }
  return result;
}

char *OZLayeredMaterial::addDefaultLayer(char *this)
{
  OZChannelBase *v1;
  OZMaterialSubstanceLayer_Factory *NextUniqueID;
  uint64_t Instance;
  OZChannelBase *v4;
  PCString v5;

  if (!*((_DWORD *)this + 1466))
  {
    v1 = (OZChannelBase *)this;
    NextUniqueID = (OZMaterialSubstanceLayer_Factory *)OZChannelBase::getNextUniqueID((OZChannelBase *)this);
    Instance = OZMaterialSubstanceLayer_Factory::getInstance(NextUniqueID);
    PCURL::PCURL((PCURL *)&v5, CFSTR("Material Substance Layer"));
    v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t, PCString *, OZMaterialSubstanceLayer_Factory *))(*(_QWORD *)Instance + 16))(Instance, &v5, NextUniqueID);
    PCString::~PCString(&v5);
    (*((void (**)(OZChannelBase *, uint64_t))v4->var0 + 112))(v4, 3);
    LOBYTE(v4[1].var2) = 1;
    v1 = (OZChannelBase *)((char *)v1 + 1312);
    OZChannelBase::willBeModified(v1, 1);
    return OZChannelFolder::push_front((OZChannelFolder *)v1, v4);
  }
  return this;
}

void sub_1B2E0C7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

OZChannelBase *OZLayeredMaterial::updateSharedTransformUIState(OZChannelBase *this)
{
  __CFString *var10;
  _QWORD *isa;
  _QWORD *info;
  OZChannelBase *result;
  __CFString *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  var10 = this[12].var10;
  if (var10)
  {
    isa = var10->isa;
    info = (_QWORD *)var10->info;
    while (isa != info)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*isa + 744))(*isa))
      {
        result = OZChannelBase::resetFlag(this + 14, 4227072, 0);
        goto LABEL_8;
      }
      ++isa;
    }
  }
  result = OZChannelBase::setFlag(this + 14, 4227072, 0);
LABEL_8:
  v6 = this[12].var10;
  if (v6)
  {
    v7 = (uint64_t *)v6->isa;
    v8 = (uint64_t *)v6->info;
    while (v7 != v8)
    {
      v9 = *v7++;
      result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 768))(v9);
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer_Factory::getInstance(OZMaterialSubstanceLayer_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMaterialSubstanceLayer_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMaterialSubstanceLayer_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMaterialSubstanceLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMaterialSubstanceLayer_Factory::_instance;
}

OZChannelFolder *OZLayeredMaterial::deleteLayer(OZLayeredMaterial *this, unsigned int a2)
{
  _QWORD *v3;
  OZChannelBase *v4;
  OZChannelFolder *result;

  v3 = (_QWORD *)*((_QWORD *)this + 178);
  if (a2 >= (unint64_t)((uint64_t)(v3[1] - *v3) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v4 = *(OZChannelBase **)(*v3 + 8 * a2);
  result = OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1312), v4);
  if (v4)
    return (OZChannelFolder *)(*((uint64_t (**)(OZChannelBase *))v4->var0 + 1))(v4);
  return result;
}

const char *OZLayeredMaterial::envMapFilenameAndNormalization(OZLayeredMaterial *this, OZ3DExtrusionProperties *a2)
{
  unsigned int ValueAsInt;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3944), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt <= 0xA)
    return (&OZLayeredMaterial::envMapFilenameAndNormalization(OZ3DExtrusionProperties *)::envs)[2 * ValueAsInt];
  else
    return "";
}

void OZLayeredMaterial::setupLayeredMaterialEnvironmentMap(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  OZ3DExtrusionProperties *v10;
  CGColorSpace *WorkingColorSpace;
  OZChannelBase *v12;
  LiGradientEnvCache *v13;
  LiGradientEnvCache *v14;
  LiGradientEnvCache *v15;
  LiGradientEnvCache *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CMTime v29;
  _BYTE v30[16];
  _BYTE v31[8];
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  float v39[1024];
  uint64_t v40;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v40 = *MEMORY[0x1E0C80C00];
  if (!*v2)
    throw_PCNullPointerException(1);
  LiLayeredMaterial::setUseEnvironmentMap(*v2, 0);
  v7 = *(const void **)(v6 + 1280);
  if (v7)
  {
    if (*(_BYTE *)(v5 + 514))
    {
      if (v8)
      {
        v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 272))(v8);
        if (v9)
        {
          v10 = (OZ3DExtrusionProperties *)v9;
          if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 3560), 0, 1))
          {
            if (!*v3)
              throw_PCNullPointerException(1);
            LiLayeredMaterial::setUseEnvironmentMap(*v3, 1);
            WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)v5);
            OZ3DExtrusionProperties::environmentType(v10);
            if (OZ3DExtrusionProperties::environmentType(v10) == 1)
            {
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v31);
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v33);
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v35);
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v37);
              v12 = (OZChannelBase *)((char *)v10 + 4744);
              OZChannelBase::getHash(v12);
              v14 = (LiGradientEnvCache *)LiGradientEnvCache::instance(v13);
              if ((LiGradientEnvCache::get(v14, (const PCHash128 *)v30, (LiGradientEnvCache::value_t *)v31) & 1) == 0)
              {
                v29 = *(CMTime *)v5;
                OZChannelGradient::getGradient((uint64_t **)v12, &v29, 1, WorkingColorSpace, (uint64_t)v39, 0x100u, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
                v16 = (LiGradientEnvCache *)LiGradientEnvCache::instance(v15);
                LiGradientEnvCache::add(v16, (const PCHash128 *)v30, v39, (LiGradientEnvCache::value_t *)v31);
              }
              v17 = v38;
              if (v38)
              {
                p_shared_owners = (unint64_t *)&v38->__shared_owners_;
                do
                  v19 = __ldaxr(p_shared_owners);
                while (__stlxr(v19 - 1, p_shared_owners));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
              v20 = v36;
              if (v36)
              {
                v21 = (unint64_t *)&v36->__shared_owners_;
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 - 1, v21));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              v23 = v34;
              if (v34)
              {
                v24 = (unint64_t *)&v34->__shared_owners_;
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 - 1, v24));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
              }
              v26 = v32;
              if (v32)
              {
                v27 = (unint64_t *)&v32->__shared_owners_;
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 - 1, v27));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1B2E0CC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterial::makeLiMaterial@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, PCSharedCount *a6@<X8>)
{
  LiLayeredMaterial *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  OZChannelBase *v15;
  OZChannelBase *v16;
  int v17;
  OZChannelBase *v18;
  OZChannelBase *v19;
  char v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int ValueAsInt;
  char v33;
  char v34;
  PC_Sp_counted_base *var0;
  PCSharedCount *v37;
  PCMutex *v38;
  uint64_t v39;
  PCSharedCount v43;
  __int128 v44[2];
  __int128 v45;
  uint64_t v46;
  _OWORD v47[8];
  _OWORD v48[8];
  PCSharedCount v49;
  PCSharedCount v50;
  _BYTE v51[8];
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54[2];
  char v55;

  v54[1].var0 = (PC_Sp_counted_base *)(a1 + 80);
  v38 = (PCMutex *)(a1 + 80);
  PCMutex::lock((PCMutex *)(a1 + 80));
  v55 = 1;
  v9 = (LiLayeredMaterial *)operator new();
  LiLayeredMaterial::LiLayeredMaterial(v9);
  v53.var0 = (PC_Sp_counted_base *)v9;
  PCSharedCount::PCSharedCount(v54, (LiLayeredMaterial *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
  if (!v9)
    throw_PCNullPointerException(1);
  (*(void (**)(LiLayeredMaterial *, _QWORD))(*(_QWORD *)v9 + 160))(v9, 0);
  v37 = a6;
  v39 = a1;
  v10 = *(uint64_t **)(a1 + 1424);
  if (v10)
  {
    v12 = *v10;
    v11 = v10[1];
    if (v11 != *v10)
    {
      v13 = v10[1];
      v14 = v13;
      do
      {
        v16 = *(OZChannelBase **)(v14 - 8);
        v14 -= 8;
        v15 = v16;
        if ((*((unsigned int (**)(OZChannelBase *))v16->var0 + 102))(v16)
          && OZChannelBase::isEnabled(v15, 1, 1))
        {
          v11 = v13;
        }
        v13 = v14;
      }
      while (v14 != v12);
    }
    if (v11 != v12)
    {
      v17 = 0;
      do
      {
        v19 = *(OZChannelBase **)(v11 - 8);
        v11 -= 8;
        v18 = v19;
        if (OZChannelBase::isEnabled(v19, 0, 1))
        {
          v49.var0 = v53.var0;
          PCSharedCount::PCSharedCount(&v50, v54);
          v20 = *(_BYTE *)(a4 + 24);
          v21 = *(double *)(a4 + 32);
          v22 = *(_OWORD *)(a4 + 120);
          v48[4] = *(_OWORD *)(a4 + 104);
          v48[5] = v22;
          v23 = *(_OWORD *)(a4 + 152);
          v48[6] = *(_OWORD *)(a4 + 136);
          v48[7] = v23;
          v24 = *(_OWORD *)(a4 + 56);
          v48[0] = *(_OWORD *)(a4 + 40);
          v48[1] = v24;
          v25 = *(_OWORD *)(a4 + 88);
          v48[2] = *(_OWORD *)(a4 + 72);
          v48[3] = v25;
          v26 = *(_OWORD *)(a4 + 248);
          v47[4] = *(_OWORD *)(a4 + 232);
          v47[5] = v26;
          v27 = *(_OWORD *)(a4 + 280);
          v47[6] = *(_OWORD *)(a4 + 264);
          v47[7] = v27;
          v28 = *(_OWORD *)(a4 + 184);
          v47[0] = *(_OWORD *)(a4 + 168);
          v47[1] = v28;
          v29 = *(_OWORD *)(a4 + 216);
          v47[2] = *(_OWORD *)(a4 + 200);
          v47[3] = v29;
          v30 = *(_OWORD *)(a4 + 296);
          v46 = *(_QWORD *)(a4 + 312);
          v31 = *(_OWORD *)(a4 + 336);
          v44[0] = *(_OWORD *)(a4 + 320);
          v44[1] = v31;
          v45 = v30;
          OZMaterialLayerBase::LayeredMaterialInfo::LayeredMaterialInfo((uint64_t)v51, &v49, a2, a3, v20, (uint64_t)v48, (uint64_t)v47, (uint64_t)&v45, v21, *(double *)(a4 + 352), *(double *)(a4 + 360), v44, *(_BYTE *)(a4 + 368), v17, a5);
          PCSharedCount::~PCSharedCount(&v50);
          (*((void (**)(OZChannelBase *, _BYTE *))v18->var0 + 101))(v18, v51);
          ++v17;
          PCSharedCount::~PCSharedCount(&v52);
        }
      }
      while (v11 != v12);
    }
  }
  if (!v53.var0)
    throw_PCNullPointerException(1);
  LiMaterial::setAlpha((double *)v53.var0, *(double *)a4, *(double *)(a4 + 8), *(double *)(a4 + 16));
  if (!v53.var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)v53.var0 + 688) = *(_BYTE *)(a4 + 24);
  PCSharedCount::PCSharedCount(&v43, v54);
  OZLayeredMaterial::setupLayeredMaterialEnvironmentMap(v39);
  PCSharedCount::~PCSharedCount(&v43);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v39 + 5600), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt >= 4)
    v33 = 0;
  else
    v33 = 0x1000100u >> (8 * ValueAsInt);
  if (ValueAsInt >= 4)
    v34 = 0;
  else
    v34 = 0x1010000u >> (8 * ValueAsInt);
  var0 = v53.var0;
  if (!v53.var0)
    throw_PCNullPointerException(1);
  *((_BYTE *)v53.var0 + 697) = v33;
  *((_BYTE *)var0 + 698) = v33;
  *((_BYTE *)var0 + 699) = v34;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(v37, &v53);
  PCSharedCount::~PCSharedCount(v54);
  return PCMutex::unlock(v38);
}

void sub_1B2E0D004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount *a20)
{
  PCSharedCount *v20;
  uint64_t v21;

  PCSharedCount::~PCSharedCount(v20);
  PCSharedCount::~PCSharedCount(a20);
  PCLockSentry<PCMutex>::~PCLockSentry(v21 - 104);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial::deleteDefaultLayers(OZLayeredMaterial *this)
{
  OZChannelBase ***v1;
  OZChannelBase **v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  OZChannelFolder *v5;
  OZChannelBase *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  OZChannelBase **v12;
  uint64_t v13;
  OZChannelBase **v14;
  OZChannelBase *v15;
  char *v16;
  OZChannelBase **v17;
  OZChannelBase **v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v1 = (OZChannelBase ***)*((_QWORD *)this + 178);
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    v4 = 0;
    v5 = (OZChannelFolder *)((char *)this + 1312);
    do
    {
      v6 = *v2;
      if (LOBYTE((*v2)[1].var2))
      {
        if (v4 >= v18)
        {
          v7 = ((char *)v4 - v16) >> 3;
          if ((unint64_t)(v7 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v8 = ((char *)v18 - v16) >> 2;
          if (v8 <= v7 + 1)
            v8 = v7 + 1;
          if ((unint64_t)((char *)v18 - v16) >= 0x7FFFFFFFFFFFFFF8)
            v9 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v9 = v8;
          if (v9)
            v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v18, v9);
          else
            v10 = 0;
          v11 = &v10[8 * v7];
          *(_QWORD *)v11 = v6;
          v4 = (OZChannelBase **)(v11 + 8);
          v12 = v17;
          if (v17 != (OZChannelBase **)v16)
          {
            do
            {
              v13 = (uint64_t)*--v12;
              *((_QWORD *)v11 - 1) = v13;
              v11 -= 8;
            }
            while (v12 != (OZChannelBase **)v16);
            v12 = (OZChannelBase **)v16;
          }
          v16 = v11;
          v18 = (OZChannelBase **)&v10[8 * v9];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v4++ = v6;
        }
        v17 = v4;
      }
      ++v2;
    }
    while (v2 != v3);
    v14 = (OZChannelBase **)v16;
    if (v16 != (char *)v4)
    {
      do
      {
        v15 = *v14;
        OZChannelFolder::removeDescendant(v5, *v14);
        if (v15)
          (*((void (**)(OZChannelBase *))v15->var0 + 1))(v15);
        ++v14;
      }
      while (v14 != v4);
      v4 = (OZChannelBase **)v16;
    }
    if (v4)
      operator delete(v4);
  }
}

void sub_1B2E0D200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZLayeredMaterial::deleteThis(OZLayeredMaterial *this, OZChannelBase *a2)
{
  if (a2
  {
    return (*(uint64_t (**)(_QWORD, OZChannelBase *))(**((_QWORD **)this + 160) + 184))(*((_QWORD *)this + 160), a2);
  }
  else
  {
    return OZMaterialBase::deleteThis(this, a2);
  }
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::deleteThis(OZLayeredMaterial *this, OZChannelBase *a2)
{
  return OZLayeredMaterial::deleteThis((OZLayeredMaterial *)((char *)this - 16), a2);
}

uint64_t OZLayeredMaterial::channelValueWillBeSet(OZLayeredMaterial *this, OZChannel *a2, const CMTime *a3, double a4)
{
  OZChannel *v8;
  void *v9;

  v8 = a2;
  while (1)
  {
    v8 = (OZChannel *)v8->var6;
    if (!v8)
      break;
    if (v9)
    {
      (*(void (**)(void *, OZChannel *, const CMTime *, double))(*(_QWORD *)v9 + 720))(v9, a2, a3, a4);
      return OZMaterialBase::channelValueWillBeSet(this, a2, a3, a4);
    }
  }
  return OZMaterialBase::channelValueWillBeSet(this, a2, a3, a4);
}

uint64_t OZLayeredMaterial::getImageNodeIDList(uint64_t result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v2 = *(uint64_t ***)(result + 1424);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        v6 = *v3++;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 728))(v6, a2);
      }
      while (v3 != v4);
    }
  }
  return result;
}

uint64_t OZLayeredMaterial::getImageAndFillChannelList(uint64_t result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v2 = *(uint64_t ***)(result + 1424);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        v6 = *v3++;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 736))(v6, a2);
      }
      while (v3 != v4);
    }
  }
  return result;
}

BOOL OZLayeredMaterial::isSimilarToMaterial(uint64_t **this, OZMaterialBase *a2)
{
  _BOOL4 isSimilarToMaterial;
  BOOL v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  const void *v15;
  _QWORD *v16;
  const void *v17;
  _QWORD *v18;

  isSimilarToMaterial = OZMaterialBase::isSimilarToMaterial((OZMaterialBase *)this, a2);
  v5 = 0;
  if (a2 && isSimilarToMaterial)
  {
    if (v6
      && ((v7 = this[178]) == 0 ? (LODWORD(v8) = 0) : (v8 = (unint64_t)(v7[1] - *v7) >> 3),
          (v9 = (_QWORD *)v6[178]) == 0 ? (LODWORD(v10) = 0) : (v10 = (v9[1] - *v9) >> 3),
          (_DWORD)v8 == (_DWORD)v10))
    {
      if ((_DWORD)v8)
      {
        v11 = 0;
        v5 = 0;
        v12 = *v7;
        v13 = (v7[1] - *v7) >> 3;
        for (i = v8; i != v11; v5 = v11 >= i)
        {
          if (v13 == v11)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v15 = *(const void **)(v12 + 8 * v11);
          if (v15)
          else
            v16 = 0;
          if (v11 >= (uint64_t)(v9[1] - *v9) >> 3)
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          v17 = *(const void **)(*v9 + 8 * v11);
          if (!v17)
            break;
          if (!v16)
            break;
          if (!v18)
            break;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v16[1] + 8), *(int32x4_t *)(v18[1] + 8))))) & 1) != 0)break;
          ++v11;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

_QWORD *OZLayeredMaterial::copyMaterial(_QWORD *this, OZMaterialBase *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const void *v9;
  OZChannelBase *v10;
  _QWORD *v11;
  unsigned int var3;

  if (lpsrc)
  {
    v2 = this;
    if (this)
    {
      v3 = this;
      v4 = (_QWORD *)v2[178];
      if (v4)
        v4 = (_QWORD *)((v4[1] - *v4) >> 3);
      v5 = (_QWORD *)this[178];
      if (v5)
        v5 = (_QWORD *)((v5[1] - *v5) >> 3);
      if ((_DWORD)v4 == (_DWORD)v5 && (_DWORD)v4)
      {
        v6 = 0;
        v7 = v4;
        do
        {
          v8 = (_QWORD *)v2[178];
          if (v6 >= (uint64_t)(v8[1] - *v8) >> 3
            || ((v9 = *(const void **)(*v8 + 8 * v6)) == 0
              ? (v10 = 0)
          {
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          }
          this = *(_QWORD **)(*v11 + 8 * v6);
          if (this)
          {
            if (v10)
            {
              if (this)
              {
                var3 = v10->var3;
                (*((void (**)(OZChannelBase *, _QWORD *))v10->var0 + 32))(v10, this);
                this = OZChannelBase::setID(v10, var3);
              }
            }
          }
          ++v6;
        }
        while (v7 != v6);
      }
    }
  }
  return this;
}

OZLayeredMaterialSequenceFolder *OZLayeredMaterial::makeSequenceChannelFolder(OZLayeredMaterial *this, OZChannelFolder *a2, unsigned int a3)
{
  const PCString *Name;
  OZLayeredMaterialSequenceFolder *v7;
  const void ***v8;
  const void **v9;
  const void **v10;
  void *v11;
  OZChannelBase *v12;
  PCString v14;

  Name = (const PCString *)OZObjectManipulator::getName((OZLayeredMaterial *)((char *)this + 16));
  PCString::PCString(&v14, Name);
  v7 = (OZLayeredMaterialSequenceFolder *)operator new();
  OZLayeredMaterialSequenceFolder::OZLayeredMaterialSequenceFolder(v7, &v14, a2, a3, 0);
  v8 = (const void ***)*((_QWORD *)this + 178);
  if (v8)
  {
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        v12 = (OZChannelBase *)(*(uint64_t (**)(void *))(*(_QWORD *)v11 + 824))(v11);
        OZChannelFolder::push_back((OZChannelFolder *)v7, v12);
        OZChannelBase::setFlag(v12, 0x300000002, 0);
        ++v9;
      }
      while (v9 != v10);
    }
  }
  PCString::~PCString(&v14);
  return v7;
}

void sub_1B2E0D7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  MEMORY[0x1B5E29170](v10, 0x10E1C40138C3426);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterial::getSequenceChannelsForMaterialLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 1280);
  if (v3)
    v4 = (_QWORD *)(v3 - 16);
  else
    v4 = 0;
  v5 = (_QWORD *)v4[60];
  v6 = (_QWORD *)v4[61];
  if (v5 == v6)
  {
LABEL_8:
    v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0;
    while (*v5 != a1)
    {
      ++v5;
      v7 = (v7 + 1);
      if (v5 == v6)
        goto LABEL_8;
    }
  }
  v8 = *(_QWORD *)(a1 + 1424);
  v9 = *(_QWORD **)v8;
  v10 = *(_QWORD **)(v8 + 8);
  if (*(_QWORD **)v8 == v10)
  {
LABEL_13:
    v11 = 0xFFFFFFFFLL;
  }
  else
  {
    v11 = 0;
    while (*v9 != a2)
    {
      v11 = (v11 + 1);
      if (++v9 == v10)
        goto LABEL_13;
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v4 + 256))(v4, v11, v7);
}

char *OZLayeredMaterial::writeBody(OZLayeredMaterial *this, PCSerializerWriteStream *a2, _BOOL4 a3, BOOL a4, uint64_t a5)
{
  char *result;
  char *v9;
  uint64_t ValueAsInt;

  result = (char *)OZMaterialBase::writeBody(this, a2, a3, a4, a5);
  if (a3)
  {
    result = (char *)*((_QWORD *)this + 160);
    if (result)
    {
      if (result)
      {
        v9 = result;
        TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZLayeredMaterialScope);
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 328), MEMORY[0x1E0CA2E68], 0.0);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 300);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, ValueAsInt);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
        return (char *)PCSerializerWriteStream::popScope((uint64_t)a2);
      }
    }
  }
  return result;
}

char *`non-virtual thunk to'OZLayeredMaterial::writeBody(OZLayeredMaterial *this, PCSerializerWriteStream *a2, _BOOL4 a3, BOOL a4, uint64_t a5)
{
  return OZLayeredMaterial::writeBody((OZLayeredMaterial *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZLayeredMaterial::parseBegin(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  OZLayeredMaterial::deleteDefaultLayers(this);
  *((_BYTE *)this + 5856) = 0;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZLayeredMaterialScope);
  return OZMaterialBase::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::parseBegin(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  return OZLayeredMaterial::parseBegin((OZLayeredMaterial *)((char *)this - 48), a2);
}

uint64_t OZLayeredMaterial::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v5;

  v5 = OZMaterialBase::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 300)
  {
    (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 24))(a3, (char *)this + 5860);
    *((_BYTE *)this + 5856) = 1;
  }
  return v5;
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::parseElement(OZTimeMarkerSet **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v5;

  v5 = OZMaterialBase::parseElement(this - 6, a2, a3);
  if (*((_DWORD *)a3 + 2) == 300)
  {
    (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 24))(a3, (char *)this + 5812);
    *((_BYTE *)this + 5808) = 1;
  }
  return v5;
}

uint64_t OZLayeredMaterial::parseEnd(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  CMTime *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  char *v11;
  OZChannel *v12;
  OZChannelBase *v13;
  int ValueAsInt;
  const CMTime *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  OZChannelBase *v19;
  int v20;
  const CMTime *v21;
  _QWORD *v22;
  uint64_t v23;
  OZChannel *v24;
  OZChannel *v25;
  OZChannelBase *p_var13;
  int v27;
  const CMTime *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  OZChannelBase *v32;
  int v33;
  const CMTime *v34;
  uint64_t v35;
  OZChannel *v36;
  OZChannel *v37;
  int v38;
  BOOL v39;
  OZChannelBase *v40;
  _QWORD *v41;
  char v42;
  OZChannelBase *v43;
  _QWORD *v44;
  char v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  unsigned int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[48];
  __int128 v61;
  __int128 v62;
  _BYTE v63[48];

  v3 = OZMaterialBase::parseEnd(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1696), 2, 0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 1568), 0x400000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5472), 0x400000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1312), 0x80000);
  OZLayeredMaterial::updateSharedTransformUIState((OZChannelBase *)this);
  v4 = (uint64_t *)*((_QWORD *)this + 178);
  if (v4)
  {
    v50 = v3;
    v6 = *v4;
    v5 = v4[1];
    *(_QWORD *)&v63[40] = 0x3FF0000000000000;
    *(_QWORD *)v63 = 0x3FF0000000000000;
    *(_QWORD *)&v60[40] = 0x3FF0000000000000;
    *(_QWORD *)v60 = 0x3FF0000000000000;
    memset(&v60[8], 0, 32);
    v61 = 0u;
    v62 = 0u;
    memset(&v63[8], 0, 32);
    if (v5 != v6)
    {
      v7 = (CMTime *)MEMORY[0x1E0CA2E68];
      v8 = v5;
      do
      {
        v10 = *(const void **)(v8 - 8);
        v8 -= 8;
        v9 = v10;
        if (v10)
        {
          if (!v11)
            goto LABEL_13;
          v12 = (OZChannel *)v11;
          v13 = (OZChannelBase *)(v11 + 6480);
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v11 + 10024), v7, 0.0);
          v15 = (const CMTime *)((uint64_t (*)(OZChannelBase *))v12[42].var12[26].isa)(v13);
          MaterialTextureTransformer::composeTextureTransform(v7, v15, (const OZChannel2D *)&v12[55].var18, (const OZChannelRotation3D *)&v12[53].var1, (uint64_t)v59);
          if (((uint64_t)v12[43].var0 & 2) == 0 && OZChannel::getValueAsInt(v12 + 13, v7, 0.0) == 2)
          {
            if (ValueAsInt)
            {
              PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
              v62 = v55;
              *(_OWORD *)v63 = v56;
              *(_OWORD *)&v63[16] = v57;
              *(_OWORD *)&v63[32] = v58;
              *(_OWORD *)v60 = v51;
              *(_OWORD *)&v60[16] = v52;
              *(_OWORD *)&v60[32] = v53;
              v61 = v54;
            }
            else
            {
              *(_QWORD *)&v63[40] = 0x3FF0000000000000;
              *(_QWORD *)v63 = 0x3FF0000000000000;
              *(_QWORD *)&v60[40] = 0x3FF0000000000000;
              *(_QWORD *)v60 = 0x3FF0000000000000;
              memset(&v60[8], 0, 32);
              v61 = 0u;
              v62 = 0u;
              memset(&v63[8], 0, 32);
            }
            v16 = (*((uint64_t (**)(OZChannelBase *))v13->var0 + 104))(v13);
            OZLayeredMaterial::copyTransformDeprecatedImageChannels(v16, v13, &v12[69].var12, ValueAsInt != 0, (__int128 *)v60, v16, (uint64_t)&v12[55].var18, (uint64_t)&v12[53].var1);
          }
          v9 = *(const void **)(v5 - 8);
          if (v9)
          {
LABEL_13:
            if (!v17)
              goto LABEL_20;
            v18 = v17;
            v19 = (OZChannelBase *)(v17 + 1384);
            v20 = OZChannel::getValueAsInt((OZChannel *)(v17 + 4928), v7, 0.0);
            v21 = (const CMTime *)(*(uint64_t (**)(OZChannelBase *))(*((_QWORD *)v18 + 173) + 832))(v19);
            MaterialTextureTransformer::composeTextureTransform(v7, v21, (const OZChannel2D *)(v18 + 3408), (const OZChannelRotation3D *)(v18 + 2968), (uint64_t)v59);
            if ((v18[1440] & 2) == 0)
            {
              if (v20)
              {
                PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
                v62 = v55;
                *(_OWORD *)v63 = v56;
                *(_OWORD *)&v63[16] = v57;
                *(_OWORD *)&v63[32] = v58;
                *(_OWORD *)v60 = v51;
                *(_OWORD *)&v60[16] = v52;
                *(_OWORD *)&v60[32] = v53;
                v61 = v54;
              }
              else
              {
                *(_QWORD *)&v63[40] = 0x3FF0000000000000;
                *(_QWORD *)v63 = 0x3FF0000000000000;
                *(_QWORD *)&v60[40] = 0x3FF0000000000000;
                *(_QWORD *)v60 = 0x3FF0000000000000;
                memset(&v60[8], 0, 32);
                v61 = 0u;
                v62 = 0u;
                memset(&v63[8], 0, 32);
              }
              v22 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v18 + 912))(v18);
              v23 = (*((uint64_t (**)(OZChannelBase *))v19->var0 + 104))(v19);
              OZLayeredMaterial::copyTransformDeprecatedImageChannels(v23, v19, v22, v20 != 0, (__int128 *)v60, v23, (uint64_t)(v18 + 3408), (uint64_t)(v18 + 2968));
            }
            v9 = *(const void **)(v5 - 8);
            if (v9)
            {
LABEL_20:
              if (!v24)
                goto LABEL_28;
              v25 = v24;
              p_var13 = (OZChannelBase *)&v24[37].var13;
              v27 = OZChannel::getValueAsInt(v24 + 61, v7, 0.0);
              v28 = (const CMTime *)(*((uint64_t (**)(OZChannelBase *))v25[37].var13 + 104))(p_var13);
              MaterialTextureTransformer::composeTextureTransform(v7, v28, (const OZChannel2D *)&v25[51], (const OZChannelRotation3D *)&v25[48].var2, (uint64_t)v59);
              if (((uint64_t)v25[38].var1 & 2) == 0
                && OZChannel::getValueAsInt((OZChannel *)((char *)v25 + 1224), v7, 0.0) == 2)
              {
                if (v27)
                {
                  PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
                  v62 = v55;
                  *(_OWORD *)v63 = v56;
                  *(_OWORD *)&v63[16] = v57;
                  *(_OWORD *)&v63[32] = v58;
                  *(_OWORD *)v60 = v51;
                  *(_OWORD *)&v60[16] = v52;
                  *(_OWORD *)&v60[32] = v53;
                  v61 = v54;
                }
                else
                {
                  *(_QWORD *)&v63[40] = 0x3FF0000000000000;
                  *(_QWORD *)v63 = 0x3FF0000000000000;
                  *(_QWORD *)&v60[40] = 0x3FF0000000000000;
                  *(_QWORD *)v60 = 0x3FF0000000000000;
                  memset(&v60[8], 0, 32);
                  v61 = 0u;
                  v62 = 0u;
                  memset(&v63[8], 0, 32);
                }
                v29 = (*((uint64_t (**)(OZChannelBase *))p_var13->var0 + 104))(p_var13);
                OZLayeredMaterial::copyTransformDeprecatedImageChannels(v29, p_var13, &v25[64].var13, v27 != 0, (__int128 *)v60, v29, (uint64_t)&v25[51], (uint64_t)&v25[48].var2);
              }
              v9 = *(const void **)(v5 - 8);
              if (v9)
              {
LABEL_28:
                if (!v30)
                  goto LABEL_36;
                v31 = v30;
                v32 = (OZChannelBase *)(v30 + 5888);
                v33 = OZChannel::getValueAsInt((OZChannel *)(v30 + 9432), v7, 0.0);
                v34 = (const CMTime *)(*(uint64_t (**)(OZChannelBase *))(*((_QWORD *)v31 + 736) + 832))(v32);
                MaterialTextureTransformer::composeTextureTransform(v7, v34, (const OZChannel2D *)(v31 + 7912), (const OZChannelRotation3D *)(v31 + 7472), (uint64_t)v59);
                if ((v31[5944] & 2) == 0 && (*(unsigned int (**)(char *))(*(_QWORD *)v31 + 912))(v31) == 2)
                {
                  if (v33)
                  {
                    PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
                    v62 = v55;
                    *(_OWORD *)v63 = v56;
                    *(_OWORD *)&v63[16] = v57;
                    *(_OWORD *)&v63[32] = v58;
                    *(_OWORD *)v60 = v51;
                    *(_OWORD *)&v60[16] = v52;
                    *(_OWORD *)&v60[32] = v53;
                    v61 = v54;
                  }
                  else
                  {
                    *(_QWORD *)&v63[40] = 0x3FF0000000000000;
                    *(_QWORD *)v63 = 0x3FF0000000000000;
                    *(_QWORD *)&v60[40] = 0x3FF0000000000000;
                    *(_QWORD *)v60 = 0x3FF0000000000000;
                    memset(&v60[8], 0, 32);
                    v61 = 0u;
                    v62 = 0u;
                    memset(&v63[8], 0, 32);
                  }
                  v35 = (*((uint64_t (**)(OZChannelBase *))v32->var0 + 104))(v32);
                  OZLayeredMaterial::copyTransformDeprecatedImageChannels(v35, v32, (_QWORD *)v31 + 1249, v33 != 0, (__int128 *)v60, v35, (uint64_t)(v31 + 7912), (uint64_t)(v31 + 7472));
                }
                v9 = *(const void **)(v5 - 8);
                if (v9)
                {
LABEL_36:
                  if (v36)
                  {
                    v37 = v36;
                    v38 = OZChannel::getValueAsInt(v36 + 326, v7, 0.0);
                    v39 = v38 != 0;
                    MaterialTextureTransformer::composeTextureTransform(v7, (const CMTime *)&v37[327].var13, (const OZChannel2D *)&v37[335].var4, (const OZChannelRotation3D *)&v37[332].var6, (uint64_t)v59);
                    if ((*(_BYTE *)((*((uint64_t (**)(OZChannel *))v37->var0 + 127))(v37) + 56) & 2) != 0
                      || (*((unsigned int (**)(OZChannel *))v37->var0 + 119))(v37) != 1)
                    {
                      v39 = 0;
                    }
                    else
                    {
                      if (v38)
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
                        v62 = v55;
                        *(_OWORD *)v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        *(_OWORD *)&v60[32] = v53;
                        v61 = v54;
                      }
                      else
                      {
                        *(_QWORD *)&v63[40] = 0x3FF0000000000000;
                        *(_QWORD *)v63 = 0x3FF0000000000000;
                        *(_QWORD *)&v60[40] = 0x3FF0000000000000;
                        *(_QWORD *)v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        v61 = 0u;
                        v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      v40 = (OZChannelBase *)(*((uint64_t (**)(OZChannel *))v37->var0 + 127))(v37);
                      v41 = (_QWORD *)(*((uint64_t (**)(OZChannel *))v37->var0 + 128))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v41, v40, v41, v38 != 0, (__int128 *)v60, (uint64_t)&v37[327].var13, (uint64_t)&v37[335].var4, (uint64_t)&v37[332].var6);
                    }
                    if ((*(_BYTE *)((*((uint64_t (**)(OZChannel *))v37->var0 + 129))(v37) + 56) & 2) == 0
                      && (*((unsigned int (**)(OZChannel *))v37->var0 + 120))(v37) == 1)
                    {
                      if (v38)
                        v42 = v39;
                      else
                        v42 = 1;
                      if ((v42 & 1) != 0)
                      {
                        *(_QWORD *)&v63[40] = 0x3FF0000000000000;
                        *(_QWORD *)v63 = 0x3FF0000000000000;
                        *(_QWORD *)&v60[40] = 0x3FF0000000000000;
                        *(_QWORD *)v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        v61 = 0u;
                        v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      else
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
                        v62 = v55;
                        *(_OWORD *)v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        v39 = 1;
                        *(_OWORD *)&v60[32] = v53;
                        v61 = v54;
                      }
                      v43 = (OZChannelBase *)(*((uint64_t (**)(OZChannel *))v37->var0 + 129))(v37);
                      v44 = (_QWORD *)(*((uint64_t (**)(OZChannel *))v37->var0 + 130))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v44, v43, v44, v38 != 0, (__int128 *)v60, (uint64_t)&v37[327].var13, (uint64_t)&v37[335].var4, (uint64_t)&v37[332].var6);
                    }
                    if (((uint64_t)v37[166].var10 & 2) == 0
                      && (*((unsigned int (**)(OZChannel *))v37->var0 + 121))(v37) == 2)
                    {
                      if (v38)
                        v45 = v39;
                      else
                        v45 = 1;
                      if ((v45 & 1) != 0)
                      {
                        *(_QWORD *)&v63[40] = 0x3FF0000000000000;
                        *(_QWORD *)v63 = 0x3FF0000000000000;
                        *(_QWORD *)&v60[40] = 0x3FF0000000000000;
                        *(_QWORD *)v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        v61 = 0u;
                        v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      else
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
                        v62 = v55;
                        *(_OWORD *)v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        v39 = 1;
                        *(_OWORD *)&v60[32] = v53;
                        v61 = v54;
                      }
                      v46 = (_QWORD *)(*((uint64_t (**)(OZChannel *))v37->var0 + 132))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v46, (OZChannelBase *)&v37[166].var3, v46, v38 != 0, (__int128 *)v60, (uint64_t)&v37[327].var13, (uint64_t)&v37[335].var4, (uint64_t)&v37[332].var6);
                    }
                    if (((uint64_t)v37[243].var11 & 2) == 0
                      && (*((unsigned int (**)(OZChannel *))v37->var0 + 123))(v37) == 2)
                    {
                      if (v38)
                        v47 = v39;
                      else
                        v47 = 1;
                      if ((v47 & 1) != 0)
                      {
                        *(_QWORD *)&v63[40] = 0x3FF0000000000000;
                        *(_QWORD *)v63 = 0x3FF0000000000000;
                        *(_QWORD *)&v60[40] = 0x3FF0000000000000;
                        *(_QWORD *)v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        v61 = 0u;
                        v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      else
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (__int128 *)v60, (uint64_t)&v51);
                        v62 = v55;
                        *(_OWORD *)v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        *(_OWORD *)&v60[32] = v53;
                        v61 = v54;
                      }
                      v48 = (_QWORD *)(*((uint64_t (**)(OZChannel *))v37->var0 + 140))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v48, (OZChannelBase *)&v37[243].var4, v48, v38 != 0, (__int128 *)v60, (uint64_t)&v37[327].var13, (uint64_t)&v37[335].var4, (uint64_t)&v37[332].var6);
                    }
                  }
                }
              }
            }
          }
        }
        v5 = v8;
      }
      while (v8 != v6);
    }
    return v50;
  }
  return v3;
}

uint64_t OZLayeredMaterial::copyTransformDeprecatedImageChannels(int a1, OZChannelBase *this, _QWORD *a3, int a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OZChannel2D *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  OZChannelBase::setFlag(this, 2, 0);
  v15 = (OZChannel2D *)(*(uint64_t (**)(_QWORD *))(*a3 + 832))(a3);
  if (a4)
  {
    MaterialTextureTransformer::setTextureTransformChannels(MEMORY[0x1E0CA2E68], a5, v15, (uint64_t)(a3 + 610), (OZChannel2D *)(a3 + 462));
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)v15 + 17) + 256))((_QWORD *)v15 + 17, a6 + 136);
    v16 = (*(uint64_t (**)(_QWORD *))(*a3 + 832))(a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 + 288) + 256))(v16 + 288, a6 + 288);
    (*(void (**)(_QWORD *, uint64_t))(a3[627] + 256))(a3 + 627, a7 + 136);
    (*(void (**)(_QWORD *, uint64_t))(a3[646] + 256))(a3 + 646, a7 + 288);
    (*(void (**)(_QWORD *, uint64_t))(a3[665] + 256))(a3 + 665, a7 + 440);
    (*(void (**)(_QWORD *, uint64_t))(a3[479] + 256))(a3 + 479, a8 + 136);
    (*(void (**)(_QWORD *, uint64_t))(a3[498] + 256))(a3 + 498, a8 + 288);
  }
  v18 = a3[17];
  v17 = a3 + 17;
  (*(void (**)(_QWORD *, unsigned int *))(v18 + 256))(v17, &this[1].var3);
  (*(void (**)(_QWORD *, __CFString **))(v17[701] + 256))(v17 + 701, &this[25].var10);
  (*(void (**)(_QWORD *, OZChannelTimeConverter **))(v17[752] + 256))(v17 + 752, &this[33].var13);
  (*(void (**)(_QWORD *, PCString *))(v17[771] + 256))(v17 + 771, &this[35].var4);
  v19 = MEMORY[0x1E0CA2E68];
  OZChannel::setValue((OZChannel *)(v17 + 229), MEMORY[0x1E0CA2E68], 0.0, 0);
  (*(void (**)(_QWORD *, PCString **))(v17[325] + 256))(v17 + 325, &this[29].var5);
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, double))(v17[261] + 712))(v17 + 261, v19, 0, 0.0);
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::parseEnd(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  return OZLayeredMaterial::parseEnd((OZLayeredMaterial *)((char *)this - 48), a2);
}

uint64_t OZLayeredMaterial::calcStaticHash(uint64_t a1, void *lpsrc)
{
  void *v4;
  OZMaterialLayerBase *v5;
  float v6;

  if (!v4)
    __cxa_bad_cast();
  v5 = (OZMaterialLayerBase *)(*(uint64_t (**)(uint64_t, void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 256))(a1, v4, 0, 0, 1);
  v6 = OZMaterialLayerBase::calcTextureScale(v5);
  return (*(uint64_t (**)(void *, float))(*(_QWORD *)lpsrc + 80))(lpsrc, v6);
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::calcStaticHash(uint64_t a1, void *a2)
{
  return OZLayeredMaterial::calcStaticHash(a1 - 16, a2);
}

uint64_t OZLayeredMaterial::calcHashForState(uint64_t a1, PCSerializerWriteStream *a2, CMTime *a3)
{
  OZMaterialLayerBase *v4;
  float v5;
  CMTime v7;

  v7 = *a3;
  v4 = (OZMaterialLayerBase *)OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 152), a2, &v7);
  v5 = OZMaterialLayerBase::calcTextureScale(v4);
  return (*(uint64_t (**)(PCSerializerWriteStream *, float))(*(_QWORD *)a2 + 80))(a2, v5);
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::calcHashForState(uint64_t a1, PCSerializerWriteStream *a2, CMTime *a3)
{
  OZMaterialLayerBase *v4;
  float v5;
  CMTime v7;

  v7 = *a3;
  v4 = (OZMaterialLayerBase *)OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 136), a2, &v7);
  v5 = OZMaterialLayerBase::calcTextureScale(v4);
  return (*(uint64_t (**)(PCSerializerWriteStream *, float))(*(_QWORD *)a2 + 80))(a2, v5);
}

uint64_t *OZLayeredMaterial::markFactoriesForSerialization(OZLayeredMaterial *this, PCSerializerWriteStream *a2, int a3)
{
  OZMaterialBase::markFactoriesForSerialization((OZFactory **)this, a2);
  return OZMaterialLayersFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 1312), a2, a3);
}

uint64_t *`non-virtual thunk to'OZLayeredMaterial::markFactoriesForSerialization(OZLayeredMaterial *this, PCSerializerWriteStream *a2, int a3)
{
  OZMaterialBase::markFactoriesForSerialization((OZFactory **)this - 6, a2);
  return OZMaterialLayersFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 1264), a2, a3);
}

uint64_t OZLayeredMaterial::shouldRenumberChannel(OZLayeredMaterial *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::shouldRenumberChannel(OZLayeredMaterial *this, OZChannelBase *a2)
{
  return 0;
}

void OZLayeredMaterial::allowDrag(OZLayeredMaterial *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (!a3
    || a3 == (OZChannelBase *)lpsrc
    || *a6 == 1
  {
    OZMaterialBase::allowDrag(this, lpsrc, a3, a4, a5, a6);
  }
  else
  {
    *a5 = 2;
  }
}

void `non-virtual thunk to'OZLayeredMaterial::allowDrag(OZLayeredMaterial *this, OZFactoryBase *a2, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  OZLayeredMaterial::allowDrag((OZLayeredMaterial *)((char *)this - 16), a2, a3, a4, a5, a6);
}

uint64_t OZLayeredMaterial::performDragOperation(OZLayeredMaterial *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  OZChannelBase *v16;
  const OZChannelBase *v17;
  const OZChannelBase *v18;
  _QWORD *v19;
  PCString *Name;
  char *CStr;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  OZChannelFolder *v27;
  const PCString *v28;
  PCString v29;

  if (lpsrc)
  {
    if (!a3)
      return OZMaterialBase::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v16 = 0;
    if (!a3)
      return OZMaterialBase::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  if (!v16)
    return OZMaterialBase::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  v18 = v17;
  if (!v17)
    return OZMaterialBase::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"WARNING: OZLayeredMaterial::performDragOperation: performing layer drag operation on a single material ", 103);
  Name = (PCString *)OZObjectManipulator::getName((OZLayeredMaterial *)((char *)this + 16));
  CStr = PCString::createCStr(Name);
  v22 = strlen(CStr);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)CStr, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)". Manipulation of Material Layers should be done by TXTextLayout so it's performed across all style runs. Please check that the UI action that triggered this console spew meant to modify this Material's Layers.\n", 211);
  if ((*(uint64_t (**)(OZLayeredMaterial *))(*(_QWORD *)this + 96))(this))
    v24 = (*(uint64_t (**)(OZLayeredMaterial *))(*(_QWORD *)this + 96))(this);
  else
    v24 = *((_QWORD *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
  v26 = *(_QWORD *)(v24 + 1584);
  PCURL::PCURL((PCURL *)&v29, CFSTR("Undo Material Change"));
  OZDocument::startCaptureModifiedChannels(v26, &v29);
  PCString::~PCString(&v29);
  v27 = (OZChannelFolder *)((char *)this + 1312);
  OZChannelFolder::removeDescendant(v27, v16);
  if ((_DWORD)a5 == 2)
  {
    OZChannelFolder::insertDescendantBefore(v27, v18, v16);
  }
  else if ((_DWORD)a5 == 3)
  {
    OZChannelFolder::insertDescendantAfter(v27, v18, v16);
  }
  OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v24 + 1584), v28);
  OZDocument::postNotification(*(OZDocument **)(v24 + 1584), 524300);
  return 1;
}

void sub_1B2E0EB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::performDragOperation(OZLayeredMaterial *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZLayeredMaterial::performDragOperation((OZLayeredMaterial *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZLayeredMaterial::getSourceOperationMask(OZLayeredMaterial *this, OZChannelBase *a2, int a3)
{
  if (a2
  {
    if (a3)
      return 2;
    else
      return 1;
  }
  else if ((OZChannelBase *)((char *)this + 1440) == a2)
  {
    return 0;
  }
  else
  {
    return OZObjectManipulator::getSourceOperationMask((OZLayeredMaterial *)((char *)this + 16), a2, a3);
  }
}

uint64_t `non-virtual thunk to'OZLayeredMaterial::getSourceOperationMask(OZLayeredMaterial *this, OZChannelBase *a2, int a3)
{
  return OZLayeredMaterial::getSourceOperationMask((OZLayeredMaterial *)((char *)this - 16), a2, a3);
}

char *OZLayeredMaterial::moveMaterialLayer(OZLayeredMaterial *this, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  OZChannelFolder *v9;
  OZChannelBase *v10;
  const OZChannelBase *v11;
  char *result;

  v5 = (uint64_t *)*((_QWORD *)this + 178);
  v6 = *v5;
  v7 = (v5[1] - *v5) >> 3;
  if (v7 <= a2 || v7 <= a3)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v9 = (OZChannelFolder *)((char *)this + 1312);
  v10 = *(OZChannelBase **)(v6 + 8 * a2);
  v11 = *(const OZChannelBase **)(v6 + 8 * a3);
  result = (char *)OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1312), v10);
  if (a4 == 2)
    return OZChannelFolder::insertDescendantBefore(v9, v11, v10);
  if (a4 == 3)
    return OZChannelFolder::insertDescendantAfter(v9, v11, v10);
  return result;
}

uint64_t OZMaterialBase::getInstanceID(OZMaterialBase *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t OZMaterialBase::facetAssignmentChannel(OZMaterialBase *this)
{
  return (uint64_t)this + 568;
}

uint64_t OZMaterialBase::presetChannel(OZMaterialBase *this)
{
  return (uint64_t)this + 416;
}

uint64_t OZMaterialBase::wrapAroundChannel(OZMaterialBase *this)
{
  return (uint64_t)this + 872;
}

uint64_t OZLayeredMaterial::setLoadingMetalGradient(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1305) = a2;
  return this;
}

uint64_t OZLayeredMaterial::isLoadingMetalGradient(OZLayeredMaterial *this)
{
  return *((unsigned __int8 *)this + 1305);
}

int64x2_t OZMaterialBase::getBounds(uint64_t a1, int64x2_t *a2)
{
  int64x2_t result;

  result = vdupq_n_s64(0xC044000000000000);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x4054000000000000uLL);
  return result;
}

uint64_t OZImageNode::getImageBoundsWithEffects(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

void std::__call_once_param<std::tuple<OZMaterialLayersFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMaterialLayersFolder_Factory *v0;

  v0 = (OZMaterialLayersFolder_Factory *)operator new();
  OZMaterialLayersFolder_Factory::OZMaterialLayersFolder_Factory(v0);
  OZMaterialLayersFolder_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E0ED40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder_Factory::OZMaterialLayersFolder_Factory(OZMaterialLayersFolder_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555920;
  v4 = xmmword_1B355D070;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658A648;
  *((_QWORD *)this + 16) = &unk_1E658A718;
}

void sub_1B2E0EDE0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZMaterialLayersFolder *OZMaterialLayersFolder_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZMaterialLayersFolder *v6;

  v6 = (OZMaterialLayersFolder *)operator new();
  OZMaterialLayersFolder::OZMaterialLayersFolder(v6, this, a2, a3);
  return v6;
}

void sub_1B2E0EE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

OZMaterialLayersFolder *OZMaterialLayersFolder_Factory::createCopy(OZMaterialLayersFolder_Factory *this, OZFactoryBase *a2)
{
  OZMaterialLayersFolder *v3;
  const OZChannelBase *v4;

  v3 = (OZMaterialLayersFolder *)operator new();
  OZMaterialLayersFolder::OZMaterialLayersFolder(v3, v4, 0);
  return v3;
}

void sub_1B2E0EEDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

OZMaterialLayersFolder *OZMaterialLayersFolder_Factory::createChannelCopy(OZMaterialLayersFolder_Factory *this, OZChannelBase *a2)
{
  OZMaterialLayersFolder *v3;
  const OZChannelBase *v4;

  v3 = (OZMaterialLayersFolder *)operator new();
  OZMaterialLayersFolder::OZMaterialLayersFolder(v3, v4, 0);
  return v3;
}

void sub_1B2E0EF68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this)
{
  *(_QWORD *)this = &off_1E6597DB8;
  *((_QWORD *)this + 2) = &unk_1E6598098;
  OZChannelRotation3D::~OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040));
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856));
  OZChannelPosition::~OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 128));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(this);
  JUMPOUT(0x1B5E29170);
}

void OZChannelMaterialMapScale::~OZChannelMaterialMapScale(OZChannelMaterialMapScale *this)
{
  *(_QWORD *)this = &off_1E65A3BA0;
  *((_QWORD *)this + 2) = &unk_1E65A3EF8;
  OZChannel2D::~OZChannel2D((OZChannelMaterialMapScale *)((char *)this + 744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 592));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 440));
  OZChannel2D::~OZChannel2D(this);
}

{
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(this);
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZMaterialSubstanceLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMaterialSubstanceLayer_Factory *v0;

  v0 = (OZMaterialSubstanceLayer_Factory *)operator new();
  OZMaterialSubstanceLayer_Factory::OZMaterialSubstanceLayer_Factory(v0);
  OZMaterialSubstanceLayer_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E0F094(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer_Factory::OZMaterialSubstanceLayer_Factory(OZMaterialSubstanceLayer_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B355D080;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658A770;
  *((_QWORD *)this + 16) = &unk_1E658A840;
}

void sub_1B2E0F134(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZMaterialSubstanceLayer *OZMaterialSubstanceLayer_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZMaterialSubstanceLayer *v6;

  v6 = (OZMaterialSubstanceLayer *)operator new();
  OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(v6, this, a2, a3);
  return v6;
}

void sub_1B2E0F1A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

OZMaterialSubstanceLayer *OZMaterialSubstanceLayer_Factory::createCopy(OZMaterialSubstanceLayer_Factory *this, OZFactoryBase *a2)
{
  OZMaterialSubstanceLayer *v3;
  const OZMaterialSubstanceLayer *v4;

  v3 = (OZMaterialSubstanceLayer *)operator new();
  OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(v3, v4, 0);
  return v3;
}

void sub_1B2E0F230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

OZMaterialSubstanceLayer *OZMaterialSubstanceLayer_Factory::createChannelCopy(OZMaterialSubstanceLayer_Factory *this, OZChannelBase *a2)
{
  OZMaterialSubstanceLayer *v3;
  const OZMaterialSubstanceLayer *v4;

  v3 = (OZMaterialSubstanceLayer *)operator new();
  OZMaterialSubstanceLayer::OZMaterialSubstanceLayer(v3, v4, 0);
  return v3;
}

void sub_1B2E0F2BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialLayerBase::LayeredMaterialInfo::LayeredMaterialInfo(uint64_t a1, const PCSharedCount *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, __int128 *a12, char a13, int a14, uint64_t a15)
{
  __int128 v25;
  OZMaterialLayerBase *v26;

  *(PCSharedCount *)a1 = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 8), a2 + 1);
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = a5;
  *(double *)(a1 + 40) = a9;
  *(_QWORD *)(a1 + 48) = a6;
  *(_QWORD *)(a1 + 56) = a7;
  *(_QWORD *)(a1 + 64) = a8;
  v25 = *a12;
  *(_OWORD *)(a1 + 88) = a12[1];
  *(_OWORD *)(a1 + 72) = v25;
  *(double *)(a1 + 104) = a10;
  *(double *)(a1 + 112) = a11;
  *(_BYTE *)(a1 + 120) = a13;
  *(float *)(a1 + 124) = OZMaterialLayerBase::calcTextureScale(v26);
  *(_QWORD *)(a1 + 128) = a15;
  *(_DWORD *)(a1 + 136) = a14;
  return a1;
}

void sub_1B2E0F3B0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(a1, a2[1]);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,LiTextureStoreToken>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v12, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v10[1] = a1 + 1;
    v8 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v6 + 3) = v8;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v11 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v7, v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<FxDeviceKey,FxDeviceObj const>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

void OZTransformNode::OZTransformNode(OZTransformNode *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  const void *Behavior;
  char *v7;
  unsigned int v8;
  PCString v9[2];

  OZSceneNode::OZSceneNode((OZSceneNode *)this, a2, a3, a4);
  *v5 = &off_1E658A898;
  v5[2] = &unk_1E658AE48;
  v5[6] = &unk_1E658B0A0;
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Motion"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1088), v9, (OZChannelFolder *)((char *)this + 320), 0x64u, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Position"));
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 1216), v9, (OZChannelFolder *)((char *)this + 1088), 0x65u, 0, 3u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Rotation"));
  OZChannelRotation3D::OZChannelRotation3D((OZChannelRotation3D *)((char *)this + 2104), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Du, 0, 4u, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Velocity"));
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 2960), v9, (OZChannelFolder *)((char *)this + 1088), 0x67u, 0x10008u, 3u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Rotational Velocity"));
  OZChannel3D::OZChannel3D((OZChannel3D *)((char *)this + 3848), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Eu, 0x10008u, 3u, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Scale"));
  OZChannelScale3D::OZChannelScale3D((OZChannelScale3D *)((char *)this + 4440), 1.0, 1.0, 1.0, v9, (OZChannelFolder *)((char *)this + 1088), 0x69u, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Shear"));
  OZChannelShear::OZChannelShear((OZChannelShear *)((char *)this + 5032), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Au, 0, 2u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Anchor Point"));
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 5472), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Bu, 0, 3u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, CFSTR("Channel Rotation"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 6376), v9, (OZChannelFolder *)((char *)this + 1088), 0x66u, 2, 0, 0);
  PCString::~PCString(v9);
  *((_QWORD *)this + 795) = 0;
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 169) + 656))((char *)this + 1352, 4);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 188) + 656))((char *)this + 1504, 4);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 169) + 480))((char *)this + 1352, 1);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 188) + 480))((char *)this + 1504, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2960), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2960));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3848), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3848));
  *((_DWORD *)this + 1592) = 0;
  *(_OWORD *)&v9[0].var0 = xmmword_1B355CD10;
  Behavior = (const void *)OZApplication::createBehavior(theApp, (unsigned int *)v9);
  if (Behavior)
  else
    v7 = 0;
  v8 = OZSimulationBehavior::_MTF_IDGenerator--;
  OZChannelBase::setID((OZChannelBase *)(v7 + 56), v8);
  (*(void (**)(OZTransformNode *, char *, _QWORD))(*(_QWORD *)this + 360))(this, v7, 0);
}

void sub_1B2E0F8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelScale3D *a10, OZChannelRotation3D *a11, OZChannelPosition3D *a12, PCString a13)
{
  OZSceneNode *v13;
  OZChannelFolder *v14;
  OZChannelPosition3D *v15;
  OZChannel3D *v16;
  OZChannelShear *v17;
  OZChannelPosition3D *v18;
  OZChannel *v19;

  OZChannel::~OZChannel(v19);
  OZChannelPosition3D::~OZChannelPosition3D(v18);
  OZChannelShear::~OZChannelShear(v17);
  OZChannelScale3D::~OZChannelScale3D(a10);
  OZChannel3D::~OZChannel3D(v16);
  OZChannelPosition3D::~OZChannelPosition3D(v15);
  OZChannelRotation3D::~OZChannelRotation3D(a11);
  OZChannelPosition3D::~OZChannelPosition3D(a12);
  OZChannelFolder::~OZChannelFolder(v14);
  OZSceneNode::~OZSceneNode(v13);
  _Unwind_Resume(a1);
}

void OZTransformNode::OZTransformNode(OZTransformNode *this, const OZTransformNode *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZSceneNode::OZSceneNode((OZSceneNode *)this, (const OZSceneNode *)a2, a3);
  *(_QWORD *)v5 = &off_1E658A898;
  *(_QWORD *)(v5 + 16) = &unk_1E658AE48;
  *(_QWORD *)(v5 + 48) = &unk_1E658B0A0;
  v6 = (OZChannelFolder *)(v5 + 1088);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1088), (const OZChannelFolder *)((char *)a2 + 1088), (OZChannelFolder *)(v5 + 320));
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 1216), (const OZChannelPosition3D *)((char *)a2 + 1216), v6);
  OZChannelRotation3D::OZChannelRotation3D((OZChannelRotation3D *)((char *)this + 2104), (const OZChannelRotation3D *)((char *)a2 + 2104), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 2960), (const OZChannelPosition3D *)((char *)a2 + 2960), v6);
  OZChannel3D::OZChannel3D((OZChannel3D *)((char *)this + 3848), (const OZChannel3D *)((char *)a2 + 3848), v6);
  OZChannelScale3D::OZChannelScale3D((OZChannelScale3D *)((char *)this + 4440), (const OZChannelScale3D *)((char *)a2 + 4440), v6);
  OZChannelShear::OZChannelShear((OZChannelShear *)((char *)this + 5032), (const OZChannelShear *)((char *)a2 + 5032), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 5472), (const OZChannelPosition3D *)((char *)a2 + 5472), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 6376), (const OZChannelBase *)((char *)a2 + 6376), v6);
  *((_QWORD *)this + 797) = &off_1E6551728;
  *((_QWORD *)this + 799) = &unk_1E6551A88;
  *((_QWORD *)this + 795) = *((_QWORD *)a2 + 795);
  *((_DWORD *)this + 1592) = *((_DWORD *)a2 + 1592);
}

void sub_1B2E0FB58(_Unwind_Exception *a1)
{
  OZSceneNode *v1;
  OZChannelFolder *v2;
  OZChannelPosition3D *v3;
  OZChannelRotation3D *v4;
  OZChannelPosition3D *v5;
  OZChannel3D *v6;
  OZChannelScale3D *v7;
  OZChannelShear *v8;
  OZChannelPosition3D *v9;

  OZChannelPosition3D::~OZChannelPosition3D(v9);
  OZChannelShear::~OZChannelShear(v8);
  OZChannelScale3D::~OZChannelScale3D(v7);
  OZChannel3D::~OZChannel3D(v6);
  OZChannelPosition3D::~OZChannelPosition3D(v5);
  OZChannelRotation3D::~OZChannelRotation3D(v4);
  OZChannelPosition3D::~OZChannelPosition3D(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B2E0FBCC()
{
  JUMPOUT(0x1B2E0FBA4);
}

void sub_1B2E0FBD4()
{
  JUMPOUT(0x1B2E0FBACLL);
}

void sub_1B2E0FBDC()
{
  JUMPOUT(0x1B2E0FBB4);
}

void sub_1B2E0FBE4()
{
  JUMPOUT(0x1B2E0FBBCLL);
}

void OZTransformNode::~OZTransformNode(OZTransformNode *this)
{
  *(_QWORD *)this = &off_1E658A898;
  *((_QWORD *)this + 2) = &unk_1E658AE48;
  *((_QWORD *)this + 6) = &unk_1E658B0A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6376));
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 5472));
  OZChannelShear::~OZChannelShear((OZChannelShear *)((char *)this + 5032));
  *((_QWORD *)this + 555) = &off_1E6560F48;
  *((_QWORD *)this + 557) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4880));
  OZChannel2D::~OZChannel2D((OZChannel2D *)((char *)this + 4440));
  *((_QWORD *)this + 481) = &off_1E65568E0;
  *((_QWORD *)this + 483) = &unk_1E6556C40;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4288));
  OZChannel2D::~OZChannel2D((OZChannel2D *)((char *)this + 3848));
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 2960));
  OZChannelRotation3D::~OZChannelRotation3D((OZChannelRotation3D *)((char *)this + 2104));
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 1216));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1088));
  OZSceneNode::~OZSceneNode((OZSceneNode *)this);
}

{
  OZTransformNode::~OZTransformNode(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZTransformNode::~OZTransformNode(OZTransformNode *this)
{
  OZTransformNode::~OZTransformNode((OZTransformNode *)((char *)this - 16));
}

{
  OZTransformNode::~OZTransformNode((OZTransformNode *)((char *)this - 48));
}

{
  OZTransformNode::~OZTransformNode((OZTransformNode *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZTransformNode::~OZTransformNode((OZTransformNode *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZTransformNode::operator=(uint64_t a1, const void *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t result;

  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelPosition::operator=(a1 + 1216, (uint64_t)(v5 + 304));
  OZChannelPosition::operator=(a1 + 2104, (uint64_t)(v5 + 526));
  OZChannelPosition::operator=(a1 + 2960, (uint64_t)(v5 + 740));
  OZChannelFolder::operator=(a1 + 3848);
  OZChannelBase::operator=(a1 + 3984, (uint64_t)(v5 + 996));
  OZChannelBase::operator=(a1 + 4136, (uint64_t)(v5 + 1034));
  OZChannelBase::operator=(a1 + 4288, (uint64_t)(v5 + 1072));
  OZChannelFolder::operator=(a1 + 4440);
  OZChannelBase::operator=(a1 + 4576, (uint64_t)(v5 + 1144));
  OZChannelBase::operator=(a1 + 4728, (uint64_t)(v5 + 1182));
  OZChannelBase::operator=(a1 + 4880, (uint64_t)(v5 + 1220));
  OZChannelFolder::operator=(a1 + 5032);
  OZChannelBase::operator=(a1 + 5168, (uint64_t)(v5 + 1292));
  OZChannelBase::operator=(a1 + 5320, (uint64_t)(v5 + 1330));
  result = OZChannelPosition::operator=(a1 + 5472, (uint64_t)(v5 + 1368));
  *(_DWORD *)(a1 + 6368) = v5[1592];
  return result;
}

double OZTransformNode::copyAtTime(OZTransformNode *this, const OZSceneNode *lpsrc, CMTime *a3)
{
  char *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  const CMTime *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;
  double v23;
  double v24;
  double v25;

  if (lpsrc)
  else
    v5 = 0;
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1216), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 1352), a3, 0.0);
  v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 1504), a3, 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 1952), a3, 0.0);
  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 1216), MEMORY[0x1E0CA2E68], v7, v9, v11);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2104), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 2240), a3, 0.0);
  (*(void (**)(char *, const CMTime *, _QWORD))(*((_QWORD *)this + 280) + 712))((char *)this + 2240, v10, 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 2392), a3, 0.0);
  (*(void (**)(char *, const CMTime *, _QWORD))(*((_QWORD *)this + 299) + 712))((char *)this + 2392, v10, 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 2544), a3, 0.0);
  (*(void (**)(char *, const CMTime *, _QWORD))(*((_QWORD *)this + 318) + 712))((char *)this + 2544, v10, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2960), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 3096), a3, 0.0);
  v13 = v12;
  v25 = v12;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 3248), a3, 0.0);
  v15 = v14;
  v24 = v14;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 3696), a3, 0.0);
  v23 = v16;
  OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 2960), v10, v13, v15, v16);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 3848), 0);
  OZChannelScale3D::getValue((OZChannelScale3D *)(v5 + 3848), a3, &v25, &v24, &v23, 0.0);
  OZChannel3D::setValue((OZChannel3D *)((char *)this + 3848), a3, v25, v24, v23);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 4440), 0);
  OZChannelScale3D::getValue((OZChannelScale3D *)(v5 + 4440), a3, &v25, &v24, &v23, 0.0);
  OZChannel3D::setValue((OZChannel3D *)((char *)this + 4440), a3, v25, v24, v23);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 5032), 0);
  OZChannel::getValueAsDouble((OZChannel *)v5 + 34, a3, 0.0);
  v25 = v17;
  OZChannel::getValueAsDouble((OZChannel *)v5 + 35, a3, 0.0);
  v24 = v18;
  OZChannel::setValue((OZChannel *)this + 34, a3, v25, 0);
  OZChannel::setValue((OZChannel *)this + 35, a3, v24, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 5472), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 5608), a3, 0.0);
  v25 = v19;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 5760), a3, 0.0);
  v24 = v20;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 6208), a3, 0.0);
  v23 = v21;
  OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 5472), v10, v25, v24, v21);
  result = *((double *)v5 + 795);
  *((double *)this + 795) = result;
  return result;
}

uint64_t OZTransformNode::writeBody(OZTransformNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  double v10;
  uint64_t v11;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTransformNodeScope);
  v10 = *((double *)this + 795);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 300);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *((unsigned int *)this + 1592);
  if ((_DWORD)v11)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 301);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v11);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'OZTransformNode::writeBody(OZTransformNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZTransformNode::writeBody((OZTransformNode *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZTransformNode::parseBegin(OZTransformNode *this, PCSerializerReadStream *a2)
{
  *((_DWORD *)this + 1592) = 0;
  OZSceneNode::parseBegin((OZSceneNode *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTransformNodeScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZTransformNode::parseBegin(OZTransformNode *this, PCSerializerReadStream *a2)
{
  *((_DWORD *)this + 1580) = 0;
  OZSceneNode::parseBegin((OZSceneNode *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTransformNodeScope);
  return 1;
}

uint64_t OZTransformNode::parseEnd(OZTransformNode *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 2u)
    OZChannelBase::operator=((uint64_t)this + 2544, (uint64_t)this + 6376);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6376), 2, 0);
  OZSceneNode::parseEnd((OZSceneNode *)this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'OZTransformNode::parseEnd(OZTransformNode *this, PCSerializerReadStream *a2)
{
  OZTransformNode::parseEnd((OZTransformNode *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZTransformNode::parseElement(OZTransformNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v5;
  double v6;
  int v8;
  double v9;

  v9 = 0.0;
  v8 = 0;
  OZSceneNode::parseElement((OZTimeMarkerSet **)this, a2, a3);
  v5 = *((_DWORD *)a3 + 2);
  if (v5 == 301)
  {
    if ((*(unsigned int (**)(PCStreamElement *, int *))(*(_QWORD *)a3 + 32))(a3, &v8))
      *((_DWORD *)this + 1592) = v8;
  }
  else if (v5 == 300)
  {
    if (((*(uint64_t (**)(PCStreamElement *, double *))(*(_QWORD *)a3 + 64))(a3, &v9) & 1) != 0)
    {
      v6 = v9;
      *((double *)this + 795) = v9;
    }
    else
    {
      v6 = *((double *)this + 795);
    }
    if (v6 == 0.0)
    {
      if ((*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)this + 272))(this))
        *((_QWORD *)this + 795) = *(_QWORD *)((*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)this + 272))(this)
                                            + 384);
      else
        *((_QWORD *)this + 795) = 0x3FF0000000000000;
    }
  }
  return 1;
}

uint64_t `non-virtual thunk to'OZTransformNode::parseElement(OZTransformNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZTransformNode::parseElement((OZTransformNode *)((char *)this - 48), a2, a3);
  return 1;
}

void OZTransformNode::getTranslation(OZTransformNode *this, double *a2, double *a3, const CMTime *a4)
{
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1352), a4, 0.0);
    *(_QWORD *)a2 = v8;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), a4, 0.0);
    *(_QWORD *)a3 = v9;
  }
}

void OZTransformNode::getTranslation(OZTransformNode *this, double *a2, double *a3, double *a4, const CMTime *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1352), a5, 0.0);
    *(_QWORD *)a2 = v10;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), a5, 0.0);
    *(_QWORD *)a3 = v11;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1952), a5, 0.0);
    *(_QWORD *)a4 = v12;
  }
}

void OZTransformNode::getTranslation(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1352), a3, 0.0);
    v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1504), a3, 0.0);
    v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1952), a3, 0.0);
    *a2 = v7;
    a2[1] = v9;
    a2[2] = v10;
  }
}

uint64_t OZTransformNode::setTranslation(OZTransformNode *this, double a2, double a3, const CMTime *a4)
{
  return OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 1216), a4, a2, a3, 0.0);
}

uint64_t OZTransformNode::setTranslation(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  return OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 1216), a5, a2, a3, a4);
}

uint64_t OZTransformNode::offsetTranslation(OZTransformNode *this, double a2, double a3, const CMTime *a4)
{
  return OZChannelPosition3D::offsetPosition((OZChannelPosition3D *)((char *)this + 1216), a4, a2, a3, 0.0, 1);
}

uint64_t OZTransformNode::offsetTranslation(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5, char a6)
{
  return OZChannelPosition3D::offsetPosition((OZChannelPosition3D *)((char *)this + 1216), a5, a2, a3, a4, a6);
}

void OZTransformNode::getScale(OZTransformNode *this, double *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  const void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;

  if (*(OZTransformNode **)&a5[2].timescale == this)
  {
    if (a2)
      *a2 = 1.0;
    if (a3)
      *a3 = 1.0;
    if (a4)
      *a4 = 1.0;
  }
  else
  {
    OZChannelScale3D::getValue((OZChannelScale3D *)((char *)this + 4440), a5, a2, a3, a4, 0.0);
    if (a6)
    {
      v12 = (const void *)*((_QWORD *)this + 120);
      if (v12)
      {
        if (v13)
        {
          v15 = 0.0;
          v16 = 0.0;
          v14 = 0.0;
          (*(void (**)(void *, double *, double *, double *, const CMTime *, uint64_t))(*(_QWORD *)v13 + 1312))(v13, &v16, &v15, &v14, a5, 1);
          if (a2)
            *a2 = v16 * *a2;
          if (a3)
            *a3 = v15 * *a3;
          if (a4)
            *a4 = v14 * *a4;
        }
      }
    }
  }
}

uint64_t OZTransformNode::getScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1312))(a1, a2, a2 + 8, a2 + 16, a3, a4);
}

uint64_t OZTransformNode::setScale(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  return OZChannel3D::setValue((OZChannel3D *)((char *)this + 4440), a5, a2, a3, a4);
}

void OZTransformNode::getRotation(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2240), a3, 0.0);
  v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2392), a3, 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2544), a3, 0.0);
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v10;
}

void OZTransformNode::getRotationX(OZTransformNode *this, double *a2, const CMTime *a3)
{
  uint64_t v4;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2240), a3, 0.0);
  *(_QWORD *)a2 = v4;
}

void OZTransformNode::getRotationY(OZTransformNode *this, double *a2, const CMTime *a3)
{
  uint64_t v4;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2392), a3, 0.0);
  *(_QWORD *)a2 = v4;
}

void OZTransformNode::getRotationZ(OZTransformNode *this, double *a2, const CMTime *a3)
{
  uint64_t v4;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2544), a3, 0.0);
  *(_QWORD *)a2 = v4;
}

uint64_t OZTransformNode::setRotation(OZTransformNode *this, double a2, const CMTime *a3)
{
  return (*(uint64_t (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 318) + 712))((char *)this + 2544, a3, 0, a2);
}

uint64_t OZTransformNode::setRotation(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  (*(void (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 280) + 712))((char *)this + 2240, a5, 0, a2);
  (*(void (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 299) + 712))((char *)this + 2392, a5, 0, a3);
  return (*(uint64_t (**)(char *, const CMTime *, _QWORD, double))(*((_QWORD *)this + 318) + 712))((char *)this + 2544, a5, 0, a4);
}

uint64_t OZTransformNode::setRotation(_QWORD *a1, double *a2, uint64_t a3)
{
  (*(void (**)(_QWORD *, uint64_t, _QWORD, double))(a1[280] + 712))(a1 + 280, a3, 0, *a2);
  (*(void (**)(_QWORD *, uint64_t, _QWORD, double))(a1[299] + 712))(a1 + 299, a3, 0, a2[1]);
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, double))(a1[318] + 712))(a1 + 318, a3, 0, a2[2]);
}

void OZTransformNode::getShear(OZTransformNode *this, double *a2, double *a3, const CMTime *a4)
{
  uint64_t v8;
  uint64_t v9;

  OZChannel::getValueAsDouble((OZChannel *)this + 34, a4, 0.0);
  *(_QWORD *)a2 = v8;
  OZChannel::getValueAsDouble((OZChannel *)this + 35, a4, 0.0);
  *(_QWORD *)a3 = v9;
}

uint64_t OZTransformNode::setShear(OZTransformNode *this, double a2, double a3, const CMTime *a4)
{
  OZChannel::setValue((OZChannel *)this + 34, a4, a2, 0);
  return OZChannel::setValue((OZChannel *)this + 35, a4, a3, 0);
}

void OZTransformNode::getPivot(OZTransformNode *this, double *a2, double *a3, double *a4, const CMTime *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5608), a5, 0.0);
    *(_QWORD *)a2 = v10;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5760), a5, 0.0);
    *(_QWORD *)a3 = v11;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6208), a5, 0.0);
    *(_QWORD *)a4 = v12;
  }
}

void OZTransformNode::getPivot(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 5608), a3, 0.0);
    v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 5760), a3, 0.0);
    v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 6208), a3, 0.0);
    *a2 = v7;
    a2[1] = v9;
    a2[2] = v10;
  }
}

uint64_t OZTransformNode::setPivot(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  return OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 5472), a5, a2, a3, a4);
}

BOOL OZTransformNode::getCommonAncestorTransforms(OZSceneNode *a1, OZSceneNode *a2, const OZRenderState *a3, uint64_t a4, uint64_t a5)
{
  OZSceneNode *v9;
  char v10;
  OZSceneNode *CommonAncestor;
  void *v12;
  void *v13;
  __n128 v14;
  OZSceneNode *i;
  _QWORD *v16;
  void *v17;
  void *v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  char v22;
  void *v23;
  void *v24;
  __n128 v25;
  OZSceneNode *j;
  _QWORD *v27;
  void *v28;
  void *v29;
  double v30;
  OZSceneNode *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  OZRenderState v43;

  v9 = a1;
  v10 = 1;
  CommonAncestor = OZSceneNode::getCommonAncestor(a1, a2, 1);
  OZRenderState::OZRenderState(&v43, a3);
  v43.var4 = 1;
  v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v33 = 0x3FF0000000000000;
  v34 = 0u;
  v35 = 0u;
  v37 = 0u;
  v38 = 0u;
  v40 = 0u;
  v41 = 0u;
  if (!a4)
    goto LABEL_18;
  *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0uLL;
  *(_OWORD *)(a4 + 24) = 0uLL;
  *(_OWORD *)(a4 + 48) = 0uLL;
  *(_OWORD *)(a4 + 64) = 0uLL;
  *(_OWORD *)(a4 + 88) = 0uLL;
  *(_OWORD *)(a4 + 104) = 0uLL;
  if (!v9)
  {
LABEL_18:
    v22 = 0;
    if (!a5)
      return (v22 & 1) == 0;
    goto LABEL_19;
  }
  if (!v12
    || (v13 = v12, (*(unsigned int (**)(void *))(*(_QWORD *)v12 + 1640))(v12))
    && !(*(unsigned int (**)(void *))(*(_QWORD *)v13 + 1632))(v13))
  {
    v10 = 0;
  }
  (*(void (**)(OZSceneNode *, uint64_t *, OZRenderState *))(*(_QWORD *)v9 + 1256))(v9, &v33, &v43);
  v14.n128_f64[0] = PCMatrix44Tmpl<double>::leftMult(a4, (double *)&v33);
  v32 = v9;
  for (i = (OZSceneNode *)*((_QWORD *)v9 + 120); i != CommonAncestor; i = (OZSceneNode *)v16[120])
  {
    if (v17)
    {
      v18 = v17;
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v17 + 1640))(v17)
        || (*(unsigned int (**)(void *))(*(_QWORD *)v18 + 1632))(v18))
      {
        v10 = 1;
      }
    }
    (*(void (**)(_QWORD *, uint64_t *, OZRenderState *))(*v16 + 1256))(v16, &v33, &v43);
    v14.n128_f64[0] = PCMatrix44Tmpl<double>::leftMult(a4, (double *)&v33);
  }
  v9 = v32;
  if (CommonAncestor)
  {
    v19 = *(double *)((*(uint64_t (**)(OZSceneNode *, __n128))(*(_QWORD *)v32 + 272))(v32, v14) + 384);
    if (v19 != 1.0)
    {
      v20 = vmulq_n_f64(*(float64x2_t *)a4, v19);
      v21 = vmulq_n_f64(*(float64x2_t *)(a4 + 16), v19);
      *(float64x2_t *)a4 = v20;
      *(float64x2_t *)(a4 + 16) = v21;
    }
  }
  v22 = v10;
  if (a5)
  {
LABEL_19:
    *(_QWORD *)(a5 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a5 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a5 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a5 = 0x3FF0000000000000;
    *(_OWORD *)(a5 + 8) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 88) = 0u;
    *(_OWORD *)(a5 + 104) = 0u;
    if (a2)
    {
      if (v23)
      {
        v24 = v23;
        if (!(*(unsigned int (**)(void *))(*(_QWORD *)v23 + 1640))(v23)
          || (*(unsigned int (**)(void *))(*(_QWORD *)v24 + 1632))(v24))
        {
          v22 = 1;
        }
      }
    }
    (*(void (**)(OZSceneNode *, uint64_t *, OZRenderState *))(*(_QWORD *)a2 + 1264))(a2, &v33, &v43);
    v25.n128_f64[0] = PCMatrix44Tmpl<double>::rightMult(a5, (double *)&v33);
    for (j = (OZSceneNode *)*((_QWORD *)a2 + 120); j != CommonAncestor; j = (OZSceneNode *)v27[120])
    {
      if (v28)
      {
        v29 = v28;
        if (!(*(unsigned int (**)(void *))(*(_QWORD *)v28 + 1640))(v28)
          || (*(unsigned int (**)(void *))(*(_QWORD *)v29 + 1632))(v29))
        {
          v22 = 1;
        }
      }
      (*(void (**)(_QWORD *, uint64_t *, OZRenderState *))(*v27 + 1264))(v27, &v33, &v43);
      v25.n128_f64[0] = PCMatrix44Tmpl<double>::rightMult(a5, (double *)&v33);
    }
    if (CommonAncestor)
    {
      v30 = 1.0 / *(double *)((*(uint64_t (**)(OZSceneNode *, __n128))(*(_QWORD *)v9 + 272))(v9, v25) + 384);
      if (v30 != 1.0)
      {
        *(double *)a5 = v30 * *(double *)a5;
        *(double *)(a5 + 32) = v30 * *(double *)(a5 + 32);
        *(double *)(a5 + 64) = v30 * *(double *)(a5 + 64);
        *(double *)(a5 + 96) = v30 * *(double *)(a5 + 96);
      }
    }
  }
  return (v22 & 1) == 0;
}

double OZTransformNode::getParentPixelAspectRatio(OZTransformNode *this, const OZRenderState *a2, __n128 a3)
{
  const void *v5;
  void *v6;
  uint64_t v7;
  __n128 v8;

  v5 = (const void *)*((_QWORD *)this + 120);
  if (v5)
  {
    a3.n128_u64[0] = 1.0;
    if (a2->var9)
      return a3.n128_f64[0];
    if (v6)
    {
      a3.n128_f64[0] = (*(double (**)(__n128))(*(_QWORD *)v6 + 1328))(a3);
      goto LABEL_9;
    }
  }
  else
  {
    a3.n128_u64[0] = 1.0;
    if (a2->var9)
      return a3.n128_f64[0];
  }
  v7 = (*(uint64_t (**)(OZTransformNode *, __n128))(*(_QWORD *)this + 272))(this, a3);
  if (v7)
    a3.n128_u64[0] = *(_QWORD *)(v7 + 384);
  else
    a3.n128_f64[0] = (*(double (**)(__n128))(*(_QWORD *)this + 1328))(v8);
LABEL_9:
  if (a3.n128_f64[0] == 0.0)
    a3.n128_u64[0] = 1.0;
  return a3.n128_f64[0];
}

void OZTransformNode::getTransformMatrix(OZTransformNode *this, uint64_t a2, CMTime *a3)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __n128 v17;
  double v18;
  const void *v19;
  void *v20;
  double v21;
  double v22;
  double ParentPixelAspectRatio;
  double v24;
  double v25;
  double v26;
  uint64_t i;
  _OWORD *v28;
  __int128 v29;
  float64x2_t v30;
  float64x2_t v31;
  _BYTE v32[128];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  v50 = 0.0;
  v51 = 0.0;
  v48 = 1.0;
  v49 = 0.0;
  v46 = 1.0;
  v47 = 1.0;
  v44 = 0.0;
  v45 = 0.0;
  v43 = 0.0;
  if (*(OZTransformNode **)&a3[2].timescale == this)
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    if (BYTE1(a3[8].timescale))
      return;
    v21 = (*(double (**)(OZTransformNode *))(*(_QWORD *)this + 1328))(this) / *(double *)&a3[1].epoch;
    goto LABEL_63;
  }
  v6 = *(_QWORD *)&a3[10].timescale;
  if ((v6 & 0x3800) != 0)
  {
    OZTransformNode::getTranslation(this, &v51, &v50, &v49, a3);
    v6 = *(_QWORD *)&a3[10].timescale;
  }
  if ((v6 & 0x1C0) != 0)
  {
    (*(void (**)(OZTransformNode *, double *, double *, double *, CMTime *, _QWORD))(*(_QWORD *)this + 1312))(this, &v48, &v47, &v46, a3, 0);
    v6 = *(_QWORD *)&a3[10].timescale;
  }
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  if ((v6 & 0x38) != 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2240), a3, 0.0);
    v8 = v11;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2392), a3, 0.0);
    v9 = v12;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2544), a3, 0.0);
    v10 = v13;
    v6 = *(_QWORD *)&a3[10].timescale;
  }
  v14 = 0.0;
  if ((v6 & 0x600) != 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 34, a3, 0.0);
    v7 = v15;
    OZChannel::getValueAsDouble((OZChannel *)this + 35, a3, 0.0);
    v14 = v16;
    v6 = *(_QWORD *)&a3[10].timescale;
  }
  if ((v6 & 7) != 0)
  {
    OZTransformNode::getPivot(this, &v45, &v44, &v43, a3);
    v6 = *(_QWORD *)&a3[10].timescale;
  }
  if ((~(_WORD)v6 & 0x3FFF) == 0)
    goto LABEL_35;
  if ((v6 & 1) != 0)
  {
    if ((v6 & 2) != 0)
      goto LABEL_15;
  }
  else
  {
    v45 = 0.0;
    if ((v6 & 2) != 0)
    {
LABEL_15:
      if ((v6 & 4) != 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v44 = 0.0;
  if ((v6 & 4) == 0)
LABEL_16:
    v43 = 0.0;
LABEL_17:
  if ((v6 & 8) == 0)
    v8 = 0.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  if ((v6 & 0x20) == 0)
    v10 = 0.0;
  if ((v6 & 0x40) != 0)
  {
    if ((v6 & 0x80) != 0)
      goto LABEL_25;
  }
  else
  {
    v48 = 1.0;
    if ((v6 & 0x80) != 0)
    {
LABEL_25:
      if ((v6 & 0x100) != 0)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v47 = 1.0;
  if ((v6 & 0x100) == 0)
LABEL_26:
    v46 = 1.0;
LABEL_27:
  if ((v6 & 0x200) == 0)
    v7 = 0.0;
  if ((v6 & 0x400) == 0)
    v14 = 0.0;
  if ((v6 & 0x800) != 0)
  {
    if ((v6 & 0x1000) != 0)
      goto LABEL_33;
LABEL_73:
    v50 = 0.0;
    if ((v6 & 0x2000) != 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  v51 = 0.0;
  if ((v6 & 0x1000) == 0)
    goto LABEL_73;
LABEL_33:
  if ((v6 & 0x2000) == 0)
LABEL_34:
    v49 = 0.0;
LABEL_35:
  v17.n128_f64[0] = (*(double (**)(OZTransformNode *))(*(_QWORD *)this + 1328))(this);
  v18 = v17.n128_f64[0];
  v19 = (const void *)*((_QWORD *)this + 120);
  if (v19)
  else
    v20 = 0;
  v22 = 1.0;
  if (!BYTE1(a3[8].timescale))
  {
    ParentPixelAspectRatio = OZTransformNode::getParentPixelAspectRatio(this, (const OZRenderState *)a3, v17);
    v22 = ParentPixelAspectRatio;
    if (v18 != 0.0)
      ParentPixelAspectRatio = v18;
    v48 = v48 * (ParentPixelAspectRatio / v22);
  }
  v24 = v51;
  if (v51 > -0.0000001 && v51 < 0.0000001)
  {
    v51 = 0.0;
    v24 = 0.0;
  }
  v25 = v50;
  if (v50 > -0.0000001 && v50 < 0.0000001)
  {
    v50 = 0.0;
    v25 = 0.0;
  }
  v26 = v49;
  if (v49 > -0.0000001 && v49 < 0.0000001)
  {
    v49 = 0.0;
    v26 = 0.0;
  }
  PCMatrix44Tmpl<double>::setTransformation(a2, 0, 4, v24, v25, v26, v8, v9, v10, v48, v47, v46, v7, v14, v45, v44, v43, v22);
  if (BYTE4(a3[9].value))
  {
    v42 = 0x3FF0000000000000;
    v39 = 0x3FF0000000000000;
    v36 = 0x3FF0000000000000;
    v33 = 0x3FF0000000000000;
    v34 = 0u;
    v35 = 0u;
    v37 = 0u;
    v38 = 0u;
    v40 = 0u;
    v41 = 0u;
    (*(void (**)(OZTransformNode *, uint64_t *, CMTime *))(*(_QWORD *)this + 1280))(this, &v33, a3);
    PCMatrix44Tmpl<double>::rightMult(a2, (double *)&v33);
  }
  if (v20)
  {
    if (!LODWORD(a3[2].value))
    {
      v42 = 0x3FF0000000000000;
      v39 = 0x3FF0000000000000;
      v36 = 0x3FF0000000000000;
      v33 = 0x3FF0000000000000;
      v34 = 0u;
      v35 = 0u;
      v37 = 0u;
      v38 = 0u;
      v40 = 0u;
      v41 = 0u;
      (*(void (**)(void *, uint64_t *, CMTime *))(*(_QWORD *)v20 + 1256))(v20, &v33, a3);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v33, (__int128 *)a2, (uint64_t)v32);
      if (v32 != (_BYTE *)a2)
      {
        for (i = 0; i != 128; i += 32)
        {
          v28 = (_OWORD *)(a2 + i);
          v29 = *(_OWORD *)&v32[i + 16];
          *v28 = *(_OWORD *)&v32[i];
          v28[1] = v29;
        }
      }
    }
    return;
  }
  if (BYTE1(a3[8].timescale))
    return;
  v21 = v22 / *(double *)&a3[1].epoch;
LABEL_63:
  if (v21 != 1.0)
  {
    v30 = vmulq_n_f64(*(float64x2_t *)a2, v21);
    v31 = vmulq_n_f64(*(float64x2_t *)(a2 + 16), v21);
    *(float64x2_t *)a2 = v30;
    *(float64x2_t *)(a2 + 16) = v31;
  }
}

void OZTransformNode::getInvTransformMatrix(OZTransformNode *this, uint64_t a2, CMTime *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  const void *v18;
  void *v19;
  void *v20;
  _BYTE *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t i;
  _OWORD *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;

  if (*(OZTransformNode **)&a3[2].timescale == this)
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    if (BYTE1(a3[8].timescale))
      return;
    v24 = *(double *)&a3[1].epoch;
    v25 = v24 / (*(double (**)(OZTransformNode *))(*(_QWORD *)this + 1328))(this);
    goto LABEL_60;
  }
  v49 = 0.0;
  v50 = 0.0;
  v47 = 0.0;
  v48 = 0.0;
  v45 = 0.0;
  v46 = 0.0;
  v43 = 0.0;
  v44 = 0.0;
  v42 = 0.0;
  OZTransformNode::getTranslation(this, &v50, &v49, &v48, a3);
  (*(void (**)(OZTransformNode *, double *, double *, double *, CMTime *, _QWORD))(*(_QWORD *)this + 1312))(this, &v47, &v46, &v45, a3, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2240), a3, 0.0);
  v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2392), a3, 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2544), a3, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)this + 34, a3, 0.0);
  v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)this + 35, a3, 0.0);
  v15 = v14;
  OZTransformNode::getPivot(this, &v44, &v43, &v42, a3);
  v16 = *(_QWORD *)&a3[10].timescale;
  if ((~a3[10].timescale & 0x3FFFLL) == 0)
    goto LABEL_25;
  if ((v16 & 1) != 0)
  {
    if ((v16 & 2) != 0)
      goto LABEL_5;
  }
  else
  {
    v44 = 0.0;
    if ((v16 & 2) != 0)
    {
LABEL_5:
      if ((v16 & 4) != 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v43 = 0.0;
  if ((v16 & 4) == 0)
LABEL_6:
    v42 = 0.0;
LABEL_7:
  if ((v16 & 8) == 0)
    v7 = 0.0;
  if ((v16 & 0x10) == 0)
    v9 = 0.0;
  if ((v16 & 0x20) == 0)
    v11 = 0.0;
  if ((v16 & 0x40) != 0)
  {
    if ((v16 & 0x80) != 0)
      goto LABEL_15;
LABEL_37:
    v46 = 1.0;
    if ((v16 & 0x100) != 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v47 = 1.0;
  if ((v16 & 0x80) == 0)
    goto LABEL_37;
LABEL_15:
  if ((v16 & 0x100) == 0)
LABEL_16:
    v45 = 1.0;
LABEL_17:
  if ((v16 & 0x200) == 0)
    v13 = 0.0;
  if ((v16 & 0x400) == 0)
    v15 = 0.0;
  if ((v16 & 0x800) != 0)
  {
    if ((v16 & 0x1000) != 0)
      goto LABEL_23;
  }
  else
  {
    v50 = 0.0;
    if ((v16 & 0x1000) != 0)
    {
LABEL_23:
      if ((v16 & 0x2000) != 0)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
  v49 = 0.0;
  if ((v16 & 0x2000) == 0)
LABEL_24:
    v48 = 0.0;
LABEL_25:
  v17 = (*(double (**)(OZTransformNode *))(*(_QWORD *)this + 1328))(this);
  v18 = (const void *)*((_QWORD *)this + 120);
  if (v18)
  {
    v20 = v19;
    v21 = (char *)&a3[8].timescale + 1;
    v22 = 1.0;
    if (!BYTE1(a3[8].timescale))
    {
      if (v19)
      {
        (*(void (**)(void *))(*(_QWORD *)v19 + 1328))(v19);
        goto LABEL_45;
      }
LABEL_42:
      v26 = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)this + 272))(this);
      v20 = 0;
      if (v26)
        v23 = *(double *)(v26 + 384);
      else
        v23 = v17;
LABEL_45:
      if (v23 == 0.0)
        v22 = 1.0;
      else
        v22 = v23;
      if (v17 == 0.0)
        v27 = v22;
      else
        v27 = v17;
      v47 = v47 * (v27 / v22);
    }
  }
  else
  {
    v21 = (char *)&a3[8].timescale + 1;
    if (!BYTE1(a3[8].timescale))
      goto LABEL_42;
    v20 = 0;
    v22 = 1.0;
  }
  PCMatrix44Tmpl<double>::setTransformation(a2, 0, 4, v50, v49, v48, v7, v9, v11, v47, v46, v45, v13, v15, v44, v43, v42, v22);
  PCMatrix44Tmpl<double>::invert((double *)a2, (double *)a2, 0.0);
  if (v20)
  {
    if (!LODWORD(a3[2].value))
    {
      v41 = 0x3FF0000000000000;
      v38 = 0x3FF0000000000000;
      v35 = 0x3FF0000000000000;
      v32 = 0x3FF0000000000000;
      v33 = 0u;
      v34 = 0u;
      v36 = 0u;
      v37 = 0u;
      v39 = 0u;
      v40 = 0u;
      (*(void (**)(void *, uint64_t *, CMTime *))(*(_QWORD *)v20 + 1264))(v20, &v32, a3);
      PCMatrix44Tmpl<double>::operator*(a2, (__int128 *)&v32, (uint64_t)v31);
      if (v31 != (_BYTE *)a2)
      {
        for (i = 0; i != 128; i += 32)
        {
          v29 = (_OWORD *)(a2 + i);
          v30 = *(_OWORD *)&v31[i + 16];
          *v29 = *(_OWORD *)&v31[i];
          v29[1] = v30;
        }
      }
    }
    return;
  }
  if (*v21)
    return;
  v25 = *(double *)&a3[1].epoch / v22;
LABEL_60:
  if (v25 != 1.0)
  {
    *(double *)a2 = v25 * *(double *)a2;
    *(double *)(a2 + 32) = v25 * *(double *)(a2 + 32);
    *(double *)(a2 + 64) = v25 * *(double *)(a2 + 64);
    *(double *)(a2 + 96) = v25 * *(double *)(a2 + 96);
  }
}

double OZTransformNode::getFlattenTransformMatrix(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

double OZTransformNode::getEyeMatrix(_QWORD *a1, uint64_t a2, OZRenderState *a3)
{
  const void *v6;
  void *v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  OZRenderState v19;

  OZRenderState::OZRenderState(&v19, a3);
  v19.var4 = 1;
  (*(void (**)(_QWORD *, uint64_t, OZRenderState *))(*a1 + 1256))(a1, a2, &v19);
  v6 = (const void *)a1[120];
  if (v6
  {
    v18 = 0x3FF0000000000000;
    v15 = 0x3FF0000000000000;
    v12 = 0x3FF0000000000000;
    v9 = 0x3FF0000000000000;
    v10 = 0u;
    v11 = 0u;
    v13 = 0u;
    v14 = 0u;
    v16 = 0u;
    v17 = 0u;
    (*(void (**)(void *, uint64_t *, OZRenderState *))(*(_QWORD *)v7 + 1288))(v7, &v9, a3);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a3[4].var17 + 24))(&v9);
  }
  return PCMatrix44Tmpl<double>::leftMult(a2, (double *)&v9);
}

double OZTransformNode::getInvEyeMatrix(_QWORD *a1, uint64_t a2, OZRenderState *a3)
{
  double result;
  const void *v7;
  void *v8;
  OZElement *var17;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  OZRenderState v20;

  OZRenderState::OZRenderState(&v20, a3);
  v20.var4 = 1;
  (*(void (**)(_QWORD *, uint64_t, OZRenderState *))(*a1 + 1264))(a1, a2, &v20);
  v7 = (const void *)a1[120];
  if (v7
  {
    v19 = 0x3FF0000000000000;
    v16 = 0x3FF0000000000000;
    v13 = 0x3FF0000000000000;
    v10 = 0x3FF0000000000000;
    v11 = 0u;
    v12 = 0u;
    v14 = 0u;
    v15 = 0u;
    v17 = 0u;
    v18 = 0u;
    (*(void (**)(void *, uint64_t *, OZRenderState *))(*(_QWORD *)v8 + 1296))(v8, &v10, a3);
  }
  else
  {
    var17 = a3[4].var17;
    if (!var17)
      return result;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)var17 + 16))(&v10);
  }
  return PCMatrix44Tmpl<double>::rightMult(a2, (double *)&v10);
}

uint64_t OZTransformNode::getFaceProjectionMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t i;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  _QWORD v56[3];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v4 = 24;
  *(_QWORD *)(a2 + 112) = 0;
  do
  {
    *(_QWORD *)(a2 + v4) = 0;
    v4 += 32;
  }
  while (v4 != 120);
  v5 = 0;
  v6 = a2;
  v7 = 1.0 / *(double *)(a2 + 120);
  do
  {
    for (i = 0; i != 32; i += 16)
      *(float64x2_t *)(v6 + i) = vmulq_n_f64(*(float64x2_t *)(v6 + i), v7);
    ++v5;
    v6 += 32;
  }
  while (v5 != 4);
  v9 = *(double *)a2;
  v10 = *(double *)(a2 + 8);
  v11 = *(double *)(a2 + 32);
  v12 = *(double *)(a2 + 40);
  v13 = *(double *)(a2 + 64);
  v14 = *(double *)(a2 + 72);
  v15 = *(double *)(a2 + 16);
  v16 = *(double *)(a2 + 48);
  v17 = *(double *)(a2 + 80);
  v18 = sqrt(v15 * v15 + v16 * v16 + v17 * v17);
  if (v18 <= -0.0000001 || v18 >= 0.0000001)
  {
    v20 = v15 / v18;
    v21 = v16 / v18;
    v19 = v17 / v18;
  }
  else
  {
    v19 = 1.0;
    v20 = 0.0;
    v21 = 0.0;
  }
  *(double *)v56 = v20;
  *(double *)&v56[1] = v21;
  v22 = v10 * v10 + v12 * v12 + v14 * v14;
  v23 = (v9 * v10 + v11 * v12 + v13 * v14) / (sqrt(v9 * v9 + v11 * v11 + v13 * v13) * v22);
  v24 = v9 - v10 * v23;
  v25 = v11 - v12 * v23;
  v26 = v13 - v14 * v23;
  v27 = v20 * v20 + v21 * v21 + v19 * v19;
  v28 = (v24 * v20 + v25 * v21 + v26 * v19) / (sqrt(v26 * v26 + v24 * v24 + v25 * v25) * v27);
  v29 = v24 - v20 * v28;
  v30 = v25 - v21 * v28;
  v31 = v26 - v19 * v28;
  v32 = (v10 * v20 + v12 * v21 + v14 * v19) / (sqrt(v22) * v27);
  v33 = v10 - v20 * v32;
  v34 = v12 - v21 * v32;
  v35 = v14 - v19 * v32;
  v36 = sqrt(v35 * v35 + v33 * v33 + v34 * v34);
  if (v36 <= -0.0000001 || v36 >= 0.0000001)
  {
    v44 = v33 / v36;
    v45 = v34 / v36;
    v46 = v35 / v36;
  }
  else
  {
    v37 = fabs(v21) > fabs(v20);
    if (fabs(v19) > fabs(*(double *)&v56[v37]))
      v37 = 2;
    if (v37 == 2)
    {
      v38 = v21 * v21;
      v43 = -v21;
      v40 = v19 * v19;
      v41 = v20 * v20;
      v39 = v20;
      v42 = v19;
    }
    else if (v37 == 1)
    {
      v38 = v19 * v19;
      v42 = -v20;
      v40 = v20 * v20;
      v41 = v21 * v21;
      v39 = v21;
      v43 = v19;
    }
    else
    {
      v38 = v20 * v20;
      v39 = -v19;
      v40 = v21 * v21;
      v41 = v19 * v19;
      v42 = v21;
      v43 = v20;
    }
    v47 = (v20 * v39 + v21 * v42 + v19 * v43) / (v27 * sqrt(v41 + v40 + v38));
    v48 = v39 - v20 * v47;
    v49 = v42 - v21 * v47;
    v50 = v43 - v19 * v47;
    v51 = sqrt(v50 * v50 + v48 * v48 + v49 * v49);
    v44 = v48 / v51;
    v45 = v49 / v51;
    v46 = v50 / v51;
  }
  v52 = sqrt(v31 * v31 + v29 * v29 + v30 * v30);
  if (v52 <= -0.0000001 || v52 >= 0.0000001)
  {
    v53 = v29 / v52;
    v54 = v30 / v52;
    v55 = v31 / v52;
  }
  else
  {
    v53 = v19 * v45 - v21 * v46;
    v54 = v20 * v46 - v19 * v44;
    v55 = v21 * v44 - v20 * v45;
  }
  *(double *)a2 = v53;
  *(double *)(a2 + 8) = v44;
  *(double *)(a2 + 32) = v54;
  *(double *)(a2 + 40) = v45;
  *(double *)(a2 + 64) = v55;
  *(double *)(a2 + 72) = v46;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(double *)(a2 + 16) = v20;
  *(double *)(a2 + 48) = v21;
  *(double *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 112) = 0;
  return result;
}

double OZTransformNode::transform(OZTransformNode *this, double *a2, double *a3, const OZRenderState *a4)
{
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v10 = 0u;
  v11 = 0u;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(_QWORD *)this + 1256))(this, &v9, a4);
  v6 = *(_QWORD *)a3;
  v19 = *a2;
  v20 = v6;
  v21 = 0;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v9, &v19, &v19);
  result = v19;
  v8 = v20;
  *a2 = v19;
  *(_QWORD *)a3 = v8;
  return result;
}

double OZTransformNode::invTransform(OZTransformNode *this, double *a2, double *a3, const OZRenderState *a4)
{
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v10 = 0u;
  v11 = 0u;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(_QWORD *)this + 1264))(this, &v9, a4);
  v6 = *(_QWORD *)a3;
  v19 = *a2;
  v20 = v6;
  v21 = 0;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v9, &v19, &v19);
  result = v19;
  v8 = v20;
  *a2 = v19;
  *(_QWORD *)a3 = v8;
  return result;
}

double OZTransformNode::transform(OZTransformNode *this, double *a2, double *a3, double *a4, const OZRenderState *a5)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;

  v21 = 0x3FF0000000000000;
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  v19 = 0u;
  v20 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(_QWORD *)this + 1256))(this, &v12, a5);
  v8 = *(_QWORD *)a3;
  v9 = *a4;
  v22 = *(_QWORD *)a2;
  v23 = v8;
  v24 = v9;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v12, (double *)&v22, (double *)&v22);
  v10 = v23;
  *(_QWORD *)a2 = v22;
  *(_QWORD *)a3 = v10;
  result = v24;
  *a4 = v24;
  return result;
}

double OZTransformNode::invTransform(OZTransformNode *this, double *a2, double *a3, double *a4, const OZRenderState *a5)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;

  v21 = 0x3FF0000000000000;
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  v19 = 0u;
  v20 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(_QWORD *)this + 1264))(this, &v12, a5);
  v8 = *(_QWORD *)a3;
  v9 = *a4;
  v22 = *(_QWORD *)a2;
  v23 = v8;
  v24 = v9;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v12, (double *)&v22, (double *)&v22);
  v10 = v23;
  *(_QWORD *)a2 = v22;
  *(_QWORD *)a3 = v10;
  result = v24;
  *a4 = v24;
  return result;
}

double *OZTransformNode::transform(uint64_t a1, double *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v7 = 0x3FF0000000000000;
  v4 = 0x3FF0000000000000;
  v5 = 0u;
  v6 = 0u;
  v8 = 0u;
  v9 = 0u;
  v11 = 0u;
  v12 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 1256))(a1, &v4);
  return PCMatrix44Tmpl<double>::transform<double>((double *)&v4, a2, a2);
}

double *OZTransformNode::invTransform(uint64_t a1, double *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v7 = 0x3FF0000000000000;
  v4 = 0x3FF0000000000000;
  v5 = 0u;
  v6 = 0u;
  v8 = 0u;
  v9 = 0u;
  v11 = 0u;
  v12 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 1264))(a1, &v4);
  return PCMatrix44Tmpl<double>::transform<double>((double *)&v4, a2, a2);
}

double OZTransformNode::computeSpin@<D0>(OZTransformNode *this@<X0>, CMTime *a2@<X1>, double *a3@<X8>)
{
  double result;
  const void *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  CMTimeEpoch epoch;
  float64x2_t v21;
  double v22;

  *a3 = 0.0;
  a3[1] = 0.0;
  a3[2] = 0.0;
  OZChannelRotation3D::getValueAsEulerAngles((uint64_t)this + 2104, a2, a3, 0.0);
  v7 = (const void *)*((_QWORD *)this + 120);
  if (v7)
  {
    if (v8)
    {
      v19 = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      (*(void (**)(float64x2_t *__return_ptr, void *, __int128 *))(*(_QWORD *)v8 + 1352))(&v21, v8, &v19);
      v18 = 0x3FF0000000000000;
      v15 = 0x3FF0000000000000;
      v12 = 0x3FF0000000000000;
      v10 = 0u;
      v11 = 0u;
      v13 = 0u;
      v14 = 0u;
      v16 = 0u;
      v17 = 0u;
      v9 = 0x3FF0000000000000;
      PCMatrix44Tmpl<double>::leftRotate((double *)&v9, 4, -v21.f64[0], -v21.f64[1], -v22);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v9, a3, a3);
      *(float64x2_t *)a3 = vaddq_f64(v21, *(float64x2_t *)a3);
      result = v22 + a3[2];
      a3[2] = result;
    }
  }
  return result;
}

_QWORD *OZTransformNode::hitCheck(_QWORD *a1, float32x2_t *a2, __int128 *a3, uint64_t a4, double *a5, char a6)
{
  _OWORD v13[3];
  double v14[6];
  float64x2_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if ((a6 & 4) != 0 && ((*(uint64_t (**)(_QWORD *))(*a1 + 680))(a1) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
    if (!(*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(a1[2] + 104))(a1 + 2, &v17, 1, 1, 1))return 0;
  }
  v15 = vcvtq_f64_f32(*a2);
  v16 = 0;
  (*(void (**)(double *__return_ptr, _QWORD *, float64x2_t *, uint64_t, __int128 *, _QWORD))(*a1 + 1384))(v14, a1, &v15, a4, a3, 0);
  v13[1] = xmmword_1B304F270;
  v13[2] = xmmword_1B304F270;
  v13[0] = xmmword_1B304F270;
  (*(void (**)(_QWORD *, _OWORD *, __int128 *))(*a1 + 1360))(a1, v13, a3);
  if (PCRayIntersectsBox(v14, (double *)v13, a5))
    return a1;
  else
    return 0;
}

BOOL OZTransformNode::hitCheck(uint64_t a1, double *a2, uint64_t a3, const LiCamera *a4)
{
  OZScene *v8;
  float64x2_t v10;
  float64x2_t v11;
  unsigned __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  unsigned __int128 v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  unsigned __int128 v20;
  uint64_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  uint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  unsigned __int128 v28;
  uint64_t v29;
  float64x2_t v30;
  uint64_t v31;
  float64x2_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37[16];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v38 = 0x3FF0000000000000;
  v39 = 0u;
  v40 = 0u;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 1256))(a1, &v38);
  v8 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v8, a4, v37);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v38, v37);
  v35 = xmmword_1B304F270;
  v36 = xmmword_1B304F270;
  v34 = xmmword_1B304F270;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 1360))(a1, &v34, a3);
  *(_QWORD *)&v32.f64[0] = v34;
  *(_QWORD *)&v32.f64[1] = v35;
  v33 = v36;
  v30.f64[0] = *((float64_t *)&v34 + 1);
  v30.f64[1] = *((float64_t *)&v35 + 1);
  v31 = *((_QWORD *)&v36 + 1);
  v28 = __PAIR128__(v35, *((unint64_t *)&v34 + 1));
  v29 = v36;
  *(_QWORD *)&v26.f64[0] = v34;
  v26.f64[1] = *((float64_t *)&v35 + 1);
  v27 = v36;
  v24.f64[0] = *((float64_t *)&v34 + 1);
  v24.f64[1] = *((float64_t *)&v35 + 1);
  v25 = v36;
  *(_QWORD *)&v22.f64[0] = v34;
  *(_QWORD *)&v22.f64[1] = v35;
  v23 = *((_QWORD *)&v36 + 1);
  v20 = __PAIR128__(v35, *((unint64_t *)&v34 + 1));
  v21 = *((_QWORD *)&v36 + 1);
  *(_QWORD *)&v18.f64[0] = v34;
  v18.f64[1] = *((float64_t *)&v35 + 1);
  v19 = *((_QWORD *)&v36 + 1);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v32.f64, v32.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v30.f64, v30.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, (double *)&v28, (double *)&v28);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v26.f64, v26.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v24.f64, v24.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v22.f64, v22.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, (double *)&v20, (double *)&v20);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v18.f64, v18.f64);
  v16 = v28;
  v17 = v32;
  v14 = v24;
  v15 = v26;
  v12 = v20;
  v13 = v22;
  v10 = v30;
  v11 = v18;
  return PCRect<double>::clipLine(a2, &v13, (double *)&v12)
      || PCRect<double>::clipLine(a2, (float64x2_t *)&v12, v10.f64)
      || PCRect<double>::clipLine(a2, &v10, v11.f64)
      || PCRect<double>::clipLine(a2, &v11, v13.f64)
      || PCRect<double>::clipLine(a2, &v17, (double *)&v16)
      || PCRect<double>::clipLine(a2, (float64x2_t *)&v16, v14.f64)
      || PCRect<double>::clipLine(a2, &v14, v15.f64)
      || PCRect<double>::clipLine(a2, &v15, v17.f64)
      || PCRect<double>::clipLine(a2, &v17, v13.f64)
      || PCRect<double>::clipLine(a2, (float64x2_t *)&v16, (double *)&v12)
      || PCRect<double>::clipLine(a2, &v14, v10.f64)
      || PCRect<double>::clipLine(a2, &v15, v11.f64);
}

void OZTransformNode::projectPointToObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZTransformNode.cpp");
  pcAbortImpl();
}

uint64_t sub_1B2E126D8()
{
  return 0;
}

float64_t OZTransformNode::calcTranslationRelativeToCamera(uint64_t a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, float64x2_t *a6)
{
  float64_t result;

  result = a3[1].f64[0] - a2[1].f64[0];
  *a6 = vsubq_f64(*a3, *a2);
  a6[1].f64[0] = result;
  return result;
}

BOOL OZTransformNode::invTransformRay(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v7 = 0x3FF0000000000000;
  v4 = 0x3FF0000000000000;
  v5 = 0u;
  v6 = 0u;
  v8 = 0u;
  v9 = 0u;
  v11 = 0u;
  v12 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 1256))(a1, &v4);
  return PCRay3<double>::invTransform(a2, &v4);
}

void OZTransformNode::computeRay(OZTransformNode *a1@<X0>, uint64_t a2@<X2>, const OZRenderState *a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  char *v9;
  OZTransformNode *var5;
  OZTransformNode *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  const void *v20;
  BOOL v21;
  double v22;
  double v23;
  char *v24;
  OZTransformNode *v25;
  OZTransformNode *v26;
  double v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *__p;
  char *v39;
  char *v40;
  OZRenderState v41;

  (*(void (**)(uint64_t __return_ptr, uint64_t))(*(_QWORD *)a2 + 80))(a5, a2);
  OZRenderState::OZRenderState(&v41, a3);
  v9 = 0;
  v41.var4 = 1;
  __p = 0;
  v39 = 0;
  v40 = 0;
  var5 = a3->var5;
  if (!a1 || var5 == a1)
  {
LABEL_26:
    if (!var5)
      goto LABEL_32;
    goto LABEL_29;
  }
  v9 = 0;
  v11 = a1;
  while (1)
  {
    if (v9 >= v40)
    {
      v12 = (v9 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v13 = (v40 - (_BYTE *)__p) >> 2;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if ((unint64_t)(v40 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v14);
      else
        v15 = 0;
      v16 = &v15[8 * v12];
      *(_QWORD *)v16 = v11;
      v9 = v16 + 8;
      v18 = (char *)__p;
      v17 = v39;
      if (v39 != __p)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v16 - 1) = v19;
          v16 -= 8;
        }
        while (v17 != v18);
        v17 = (char *)__p;
      }
      __p = v16;
      v39 = v9;
      v40 = &v15[8 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v9 = v11;
      v9 += 8;
    }
    v39 = v9;
    v20 = (const void *)*((_QWORD *)v11 + 120);
    if (!v20)
      break;
    var5 = a3->var5;
    if (v11)
      v21 = v11 == var5;
    else
      v21 = 1;
    if (v21)
      goto LABEL_26;
  }
  var5 = a3->var5;
  if (var5)
  {
LABEL_29:
    v22 = (*(double (**)(OZTransformNode *))(*(_QWORD *)var5 + 1328))(var5);
    v37 = 0x3FF0000000000000;
    v34 = 0x3FF0000000000000;
    v31 = 0x3FF0000000000000;
    v28 = 0x3FF0000000000000;
    v29 = 0u;
    v30 = 0u;
    v32 = 0u;
    v33 = 0u;
    v35 = 0u;
    v36 = 0u;
    v23 = a3->var3 / v22;
    if (v23 != 1.0)
    {
      v28 = *(_QWORD *)&v23;
      *(double *)&v29 = v23 * 0.0;
      *((double *)&v29 + 1) = v23 * 0.0;
      *(double *)&v30 = v23 * 0.0;
    }
    PCRay3<double>::transform(a5, (double *)&v28);
    v9 = v39;
  }
LABEL_32:
  v24 = (char *)__p;
  while (v9 != v24)
  {
    v26 = (OZTransformNode *)*((_QWORD *)v9 - 1);
    v9 -= 8;
    v25 = v26;
    if (a4 && v25 == a1)
      PCRay3<double>::invTransform((_QWORD *)a5, a4);
    else
      (*(void (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(_QWORD *)v25 + 1392))(v25, a5, &v41);
    v27 = *(double *)(a5 + 24) * *(double *)(a5 + 24)
        + *(double *)(a5 + 32) * *(double *)(a5 + 32)
        + *(double *)(a5 + 40) * *(double *)(a5 + 40);
    if (v27 > -0.0000001 && v27 < 0.0000001)
      break;
  }
  if (__p)
  {
    v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B2E12A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZTransformNode::setInitialTransform(uint64_t result, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5)
{
  _QWORD *v9;
  char v10;
  __n128 v11;
  double v12;
  int64_t var3;
  _BOOL8 Transformation;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  OZGroup *v25;
  double v26;
  double v27;
  double v28;
  OZChannelPosition3D *v29;
  double v30;
  __int128 v31;
  _QWORD v32[11];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  OZRenderState v36;
  _OWORD v37[3];
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  if (a2)
  {
    v9 = (_QWORD *)result;
    v58 = 0x3FF0000000000000;
    v55 = 0x3FF0000000000000;
    v52 = 0x3FF0000000000000;
    v49 = 0x3FF0000000000000;
    v50 = 0u;
    v51 = 0u;
    v53 = 0u;
    v54 = 0u;
    v56 = 0u;
    v57 = 0u;
    if (a4)
    {
      (*(void (**)(const void *, uint64_t *, uint64_t))(*(_QWORD *)a4 + 1264))(a4, &v49, a5);
      v10 = (*(uint64_t (**)(const void *))(*(_QWORD *)a4 + 1424))(a4);
      v11.n128_u64[0] = 0;
      v12 = 0.0;
      var3 = 0;
      if ((v10 & 1) == 0)
      {
        v45 = 1.0;
        v46 = 0.0;
        v47 = 0.0;
        v48 = 0.0;
        v42 = 0x3FF0000000000000uLL;
        v44 = 0.0;
        v43 = 0.0;
        memset(v32, 0, 48);
        LODWORD(v32[6]) = 4;
        memset(&v32[7], 0, 32);
        *(_QWORD *)&v33 = 0;
        Transformation = liSafeGetTransformation((__int128 *)&v49, (uint64_t)v32, &v45);
        _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZTransformNode.cpp", 1425, v15, v16, v17, v18, v19);
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 472))(a2, &v42);
        v20 = v45 * *(double *)&v42 - (v46 * *((double *)&v42 + 1) + v47 * v43 + v48 * v44);
        v21 = *(double *)&v42 * v46 + v45 * *((double *)&v42 + 1);
        v22 = v47 * v44;
        v23 = v43 * v48;
        v24 = v46 * v43 - *((double *)&v42 + 1) * v47;
        v47 = *(double *)&v42 * v47 + v45 * v43 + *((double *)&v42 + 1) * v48 - v46 * v44;
        v48 = v24 + *(double *)&v42 * v48 + v45 * v44;
        v45 = v20;
        v46 = v21 + v22 - v23;
        v36.var7.var0[1][2] = 1.0;
        v36.var7.var0[0][1] = 1.0;
        v36.var3 = 1.0;
        v36.var0.var0 = 0x3FF0000000000000;
        memset(&v36.var0.var1, 0, 32);
        memset(&v36.var4, 0, 32);
        memset(&v36.var7.var0[0][2], 0, 32);
        PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v36, &v45);
        memset(v37, 0, sizeof(v37));
        v39 = 0u;
        v40 = 0u;
        v41 = 0;
        v38 = 4;
        PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v36.var0.var0, (uint64_t)v37);
        v12 = *((double *)&v39 + 1);
        v11.n128_u64[0] = v39;
        var3 = v40;
      }
    }
    else
    {
      (*(void (**)(OZRenderState *__return_ptr, uint64_t))(*(_QWORD *)a2 + 408))(&v36, a2);
      v11.n128_u64[0] = v36.var0.var0;
      v12 = *(double *)&v36.var0.var1;
      var3 = v36.var0.var3;
    }
    (*(void (**)(_QWORD *, uint64_t, _QWORD, __n128))(v9[280] + 712))(v9 + 280, a5, 0, v11);
    (*(void (**)(_QWORD *, uint64_t, _QWORD, double))(v9[299] + 712))(v9 + 299, a5, 0, v12);
    (*(void (**)(_QWORD *, uint64_t, _QWORD, double))(v9[318] + 712))(v9 + 318, a5, 0, *(double *)&var3);
    if (a4
    {
      *(_OWORD *)&v36.var0.var0 = *a3;
      v36.var0.var3 = 0;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, OZRenderState *, int *, int64_t *, uint64_t, _QWORD))(*v9 + 1368))(v9, a2, &v36, &v36.var0.var1, &v36.var0.var3, a5, 0))
      {
        *(_QWORD *)&v31 = v36.var0.var0;
      }
      else
      {
        v31 = *a3;
        *(_OWORD *)&v36.var0.var0 = *a3;
        v36.var0.var3 = 0;
      }
      v30 = (*(double (**)(const void *))(*(_QWORD *)a4 + 1328))(a4);
      v27 = *(double *)&v36.var0.var1;
      v28 = *(double *)&v36.var0.var3;
      v29 = (OZChannelPosition3D *)(v9 + 152);
      v26 = *(double *)&v31 / v30;
    }
    else
    {
      (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a2 + 352))(&v45, a2);
      (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 424))(v37, a2);
      PCMatrix44Tmpl<double>::transform<double>((double *)v37, &v45, &v45);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v49, &v45, &v45);
      OZChannelPosition3D::setPosition((OZChannelPosition3D *)(v9 + 152), (const CMTime *)a5, v45, v46, v47);
      v42 = *a3;
      v43 = 0.0;
      (*(void (**)(_QWORD *, uint64_t, __int128 *, char *, double *, uint64_t, _QWORD))(*v9 + 1368))(v9, a2, &v42, (char *)&v42 + 8, &v43, a5, 0);
      OZRenderState::OZRenderState(&v36, (const OZRenderState *)a5);
      v35 = 0x3FF0000000000000;
      v32[10] = 0x3FF0000000000000;
      v32[5] = 0x3FF0000000000000;
      v32[0] = 0x3FF0000000000000;
      memset(&v32[1], 0, 32);
      memset(&v32[6], 0, 32);
      v33 = 0u;
      v34 = 0u;
      v36.var4 = 1;
      (*(void (**)(_QWORD *, _QWORD *, OZRenderState *))(*v9 + 1256))(v9, v32, &v36);
      PCMatrix44Tmpl<double>::transform<double>((double *)v32, (double *)&v42, (double *)&v42);
      v27 = *((double *)&v42 + 1);
      v26 = *(double *)&v42;
      v28 = v43;
      v29 = (OZChannelPosition3D *)(v9 + 152);
    }
    return OZChannelPosition3D::setPosition(v29, (const CMTime *)a5, v26, v27, v28);
  }
  return result;
}

__n128 OZTransformNode::clipOutline(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, int a5, uint64_t a6, uint64_t *a7)
{
  double v13;
  __n128 result;
  unint64_t v15;
  __n128 *v16;
  double *v17;
  __n128 v18;
  unint64_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[3];

  memset(v33, 0, sizeof(v33));
  if ((*(unsigned int (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 96))(a2, v33))
  {
    v32 = 0x3FF0000000000000;
    v29 = 0x3FF0000000000000;
    v26 = 0x3FF0000000000000;
    v23 = 0x3FF0000000000000;
    v24 = 0u;
    v25 = 0u;
    v27 = 0u;
    v28 = 0u;
    v30 = 0u;
    v31 = 0u;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1256))(a1, &v23, a3);
    v20 = *(float64x2_t *)((char *)&v33[1] + 8);
    v21 = *((double *)&v33[2] + 1);
    v22 = -(*((double *)&v33[1] + 1) * *(double *)v33
          + *(double *)&v33[2] * *((double *)v33 + 1)
          + *((double *)&v33[2] + 1) * *(double *)&v33[1]);
    PCMatrix44Tmpl<double>::transform_row<double>((double *)&v23, v20.f64, v20.f64);
    v13 = vaddvq_f64(vmulq_f64(v20, v20)) + v21 * v21;
    if (v13 <= -1.0e-24 || v13 >= 1.0e-24)
    {
      *(float64x2_t *)((char *)&v33[1] + 8) = v20;
      v33[0] = vdivq_f64(vmulq_n_f64(v20, -v22), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0));
      *((double *)&v33[2] + 1) = v21;
      *(double *)&v33[1] = -(v22 * v21) / v13;
    }
    PCClipLinesToPlane2D((uint64_t)v33, a4, a5, a6, a7);
  }
  else
  {
    std::vector<BOOL>::resize((uint64_t)a7, a5, 0);
    if (a5 >= 1)
    {
      v15 = 0;
      v16 = (__n128 *)(a6 + 16);
      v17 = a4;
      do
      {
        *(_QWORD *)(*a7 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        v18 = *(__n128 *)v17;
        v17 += 2;
        v16[-1] = v18;
        if (a5 - 1 == v15)
          v19 = 0;
        else
          v19 = v15 + 1;
        result = *(__n128 *)&a4[2 * v19];
        *v16 = result;
        v16 += 2;
        ++v15;
      }
      while (a5 != v15);
    }
  }
  return result;
}

double *OZTransformNode::clipPoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double *result;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[3];

  memset(v37, 0, sizeof(v37));
  v11 = *a4;
  v10 = a4[1];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a4) >> 3);
  std::vector<BOOL>::resize((uint64_t)a5, v12, 0);
  result = (double *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 96))(a2, v37);
  if ((result & 1) != 0)
  {
    v36 = 0x3FF0000000000000;
    v33 = 0x3FF0000000000000;
    v30 = 0x3FF0000000000000;
    v27 = 0x3FF0000000000000;
    v28 = 0u;
    v29 = 0u;
    v31 = 0u;
    v32 = 0u;
    v34 = 0u;
    v35 = 0u;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1256))(a1, &v27, a3);
    v24 = *(float64x2_t *)((char *)&v37[1] + 8);
    v25 = *((double *)&v37[2] + 1);
    v26 = -(*((double *)&v37[1] + 1) * *(double *)v37
          + *(double *)&v37[2] * *((double *)v37 + 1)
          + *((double *)&v37[2] + 1) * *(double *)&v37[1]);
    result = PCMatrix44Tmpl<double>::transform_row<double>((double *)&v27, v24.f64, v24.f64);
    v14 = vaddvq_f64(vmulq_f64(v24, v24)) + v25 * v25;
    if (v14 <= -1.0e-24 || v14 >= 1.0e-24)
    {
      *(float64x2_t *)((char *)&v37[1] + 8) = v24;
      v37[0] = vdivq_f64(vmulq_n_f64(v24, -v26), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
      *((double *)&v37[2] + 1) = v25;
      *(double *)&v37[1] = -(v26 * v25) / v14;
    }
    if (v10 != v11)
    {
      v15 = 0;
      v16 = 0;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        result = (double *)PCClipPointToPlane((uint64_t)v37, *a4 + v15);
        v17 = *a5;
        v18 = v16 >> 6;
        v19 = 1 << v16;
        if ((_DWORD)result)
          v20 = *(_QWORD *)(v17 + 8 * v18) | v19;
        else
          v20 = *(_QWORD *)(v17 + 8 * v18) & ~v19;
        *(_QWORD *)(v17 + 8 * v18) = v20;
        ++v16;
        v15 += 24;
      }
      while (v12 != v16);
    }
  }
  else if (v10 != v11)
  {
    v21 = 0;
    v22 = *a5;
    if (v12 <= 1)
      v23 = 1;
    else
      v23 = v12;
    do
    {
      *(_QWORD *)(v22 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      ++v21;
    }
    while (v23 != v21);
  }
  return result;
}

uint64_t OZTransformNode::isAffectedByBehaviors(OZTransformNode *this)
{
  _QWORD *ObjectSimulator;
  uint64_t v3;
  _QWORD *v4;

  ObjectSimulator = OZTransformNode::getObjectSimulator(this);
  if (!*((_BYTE *)ObjectSimulator + 208) || *((_BYTE *)ObjectSimulator + 372))
  {
    if ((*((_BYTE *)this + 1024) & 2) != 0)
      return 0;
    v3 = *((_QWORD *)this + 126);
    if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000))
      return 0;
    while (1)
    {
      v4 = *(_QWORD **)(v3 + 16);
      if ((*(unsigned int (**)(_QWORD *, _QWORD, uint64_t))(v4[2] + 24))(v4 + 2, 0, 1))
      {
      }
      v3 = *(_QWORD *)(v3 + 8);
      if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000))
        return 0;
    }
  }
  return 1;
}

_QWORD *OZTransformNode::getObjectSimulator(OZTransformNode *this)
{
  OZTransformNode *v1;
  OZTransformNode *v2;
  _QWORD *result;

  v1 = (OZTransformNode *)((char *)this + 1000);
  v2 = (OZTransformNode *)*((_QWORD *)this + 126);
  if ((OZTransformNode *)((char *)this + 1000) == v2)
    return 0;
  do
  {
    v1 = *(OZTransformNode **)v1;
    result = (_QWORD *)*((_QWORD *)v1 + 2);
    if (result)
    {
      if (result)
        result = (_QWORD *)result[43];
    }
  }
  while (!result && v1 != v2);
  return result;
}

uint64_t OZTransformNode::isAffectedByBakeableBehaviors(OZTransformNode *this)
{
  _QWORD *ObjectSimulator;
  uint64_t v3;
  _QWORD *v4;

  ObjectSimulator = OZTransformNode::getObjectSimulator(this);
  if (!*((_BYTE *)ObjectSimulator + 208) || *((_BYTE *)ObjectSimulator + 372))
  {
    if ((*((_BYTE *)this + 1024) & 2) != 0)
      return 0;
    v3 = *((_QWORD *)this + 126);
    if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000))
      return 0;
    while (1)
    {
      v4 = *(_QWORD **)(v3 + 16);
      if ((*(unsigned int (**)(_QWORD *, _QWORD, uint64_t))(v4[2] + 24))(v4 + 2, 0, 1))
      {
        if ((*(unsigned int (**)(_QWORD *))(*v4 + 272))(v4)
        {
          break;
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
      if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000))
        return 0;
    }
  }
  return 1;
}

OZChannelBase *OZTransformNode::getChannelFromRefAndVersion(OZTransformNode *this, OZChannelRef *a2, double a3)
{
  OZChannelBase *result;

  result = OZObjectManipulator::getChannelFromRefAndVersion((OZObjectManipulator *)((char *)this + 16), a2, a3);
  if (result == (OZChannelBase *)((char *)this + 6376))
    return (OZChannelBase *)((char *)this + 2544);
  return result;
}

OZChannelBase *`non-virtual thunk to'OZTransformNode::getChannelFromRefAndVersion(OZTransformNode *this, OZChannelRef *a2, double a3)
{
  OZChannelBase *result;

  result = OZObjectManipulator::getChannelFromRefAndVersion((OZObjectManipulator *)this, a2, a3);
  if (result == (OZChannelBase *)((char *)this + 6360))
    return (OZChannelBase *)((char *)this + 2528);
  return result;
}

void OZTransformNode::didAddToScene(OZTransformNode *this, OZScene *a2)
{
  OZSceneNode::didAddToScene((OZSceneNode *)this, a2);
  if ((*(double (**)(OZTransformNode *))(*(_QWORD *)this + 1328))(this) == 0.0)
    (*(void (**)(OZTransformNode *, double))(*(_QWORD *)this + 1344))(this, *((double *)a2 + 48));
}

OZChannelBase *OZTransformNode::hideOrShowChannelsBasedOnOwner(OZTransformNode *this, const OZSceneNode *a2)
{
  int isDescendantOf360Group;
  OZChannelBase *v4;
  OZChannelBase *result;

  isDescendantOf360Group = OZSceneNode::isDescendantOf360Group((uint64_t)a2);
  v4 = (OZChannelBase *)((char *)this + 1088);
  result = (OZChannelBase *)OZChannelBase::testFlag(v4, 2);
  if (isDescendantOf360Group)
  {
    if ((result & 1) == 0)
    {
      OZChannelBase::setFlag(v4, 2, 1);
      return OZChannelBase::setFlag(v4, 0x8000, 1);
    }
  }
  else if ((_DWORD)result)
  {
    OZChannelBase::resetFlag(v4, 2, 1);
    return OZChannelBase::resetFlag(v4, 0x8000, 1);
  }
  return result;
}

OZChannelBase *OZTransformNode::setOwner(OZTransformNode *this, const OZSceneNode *a2)
{
  *((_QWORD *)this + 120) = a2;
  return OZTransformNode::hideOrShowChannelsBasedOnOwner(this, a2);
}

uint64_t OZTransformNode::bake(OZTransformNode *this)
{
  OZChannelBase *v2;
  uint64_t result;

  OZSceneNode::bake((OZSceneNode *)this);
  result = OZChannelBase::getLastUsedUniqueID(v2);
  *((_DWORD *)this + 1592) = result;
  return result;
}

uint64_t OZTransformNode::isInRootWorld(OZTransformNode *this)
{
  const void *v2;
  OZTransformNode *v3;

  while (1)
  {
    v2 = (const void *)*((_QWORD *)this + 120);
    if (!v2)
      break;
    if (!v3)
      break;
    this = v3;
    if ((*(unsigned int (**)(OZTransformNode *))(*(_QWORD *)v3 + 1424))(v3))
      return 0;
  }
  return 1;
}

uint64_t OZTransformNode::getFourCornerMatrix(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return 1;
}

double OZTransformNode::getPixelAspectRatio(OZTransformNode *this)
{
  return *((double *)this + 795);
}

uint64_t OZFontCollection::getFontFamilyIndex(OZFontCollection *this, const PCString *a2)
{
  PCString *v2;
  __CFString *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __CFString *var0;
  __CFString *v9;
  BOOL v10;

  v2 = (PCString *)*((_QWORD *)this + 2);
  v3 = (__CFString *)((char *)this + 24);
  if (v2 == (PCString *)((char *)this + 24))
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = PCString::compare(v2 + 4, a2);
    v7 = v6 ? (v5 + 1) : v5;
    if (!v6)
      break;
    var0 = v2[1].var0;
    if (var0)
    {
      do
      {
        v9 = var0;
        var0 = (__CFString *)var0->isa;
      }
      while (var0);
    }
    else
    {
      do
      {
        v9 = v2[2].var0;
        v10 = v9->isa == v2;
        v2 = (PCString *)v9;
      }
      while (!v10);
    }
    v5 = v7;
    v2 = (PCString *)v9;
    if (v9 == v3)
      return 0;
  }
  return v5;
}

void OZElement::OZElement(OZElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCURL *v6;
  PCString *v7;
  PCURL *v8;
  PCURL *v9;
  OZElement::OZElement_lrSizeImpl *v10;
  OZElement::OZElement_lrSizeInfo *Instance;
  OZChannelInfo *v12;
  PCURL *v13;
  OZElement::OZElement_lrIntensityImpl *v14;
  OZChannelImpl *v15;
  PCURL *v16;
  OZElement::OZElement_lrIntensityScaleImpl *v17;
  OZChannelImpl *v18;
  PCURL *v19;
  OZElement::OZElement_lrOpacityImpl *v20;
  OZChannelImpl *v21;
  PCBlend *v22;
  PCString *v23;
  PCURL *v24;
  PCURL *v25;
  PCURL *v26;
  PCURL *v27;
  PCURL *v28;
  PCURL *v29;
  OZElement::OZElement_reflectivityImpl *v30;
  OZChannelImpl *v31;
  PCURL *v32;
  OZElement::OZElement_reflectionBlurImpl *v33;
  OZChannelImpl *v34;
  PCURL *v35;
  PCURL *v36;
  OZElement::OZElement_reflectionBeginFalloffImpl *v37;
  OZElement::OZElement_reflectionBeginFalloffInfo *v38;
  OZChannelInfo *v39;
  PCURL *v40;
  OZElement::OZElement_reflectionEndFalloffImpl *v41;
  OZElement::OZElement_reflectionEndFalloffInfo *v42;
  OZChannelInfo *v43;
  PCURL *v44;
  OZElement::OZElement_reflectionFalloffExponentImpl *v45;
  OZElement::OZElement_reflectionFalloffExponentInfo *v46;
  OZChannelInfo *v47;
  PCBlend *v48;
  PCString *v49;
  PCURL *v50;
  OZElement::OZElement_castsReflectionImpl *v51;
  OZChannelImpl *v52;
  PCURL *v53;
  PCString *v54;
  PCString *v55;
  PCURL *v56;
  OZElement::OZElement_conversionImpl *v57;
  OZChannelImpl *v58;
  PCURL *v59;
  OZElement::OZElement_conversionTypeImpl *v60;
  OZChannelImpl *v61;
  PCURL *v62;
  PCURL *v63;
  PCURL *v64;
  PCURL *v65;
  OZElement::OZElement_dropShadowOpacityImpl *v66;
  OZChannelImpl *v67;
  PCURL *v68;
  OZElement::OZElement_dropShadowBlurImpl *v69;
  OZElement::OZElement_dropShadowBlurInfo *v70;
  OZChannelInfo *v71;
  PCURL *v72;
  OZElement::OZElement_dropShadowDistanceImpl *v73;
  OZChannelImpl *v74;
  PCURL *v75;
  OZElement::OZElement_dropShadowAngleImpl *v76;
  OZChannelImpl *v77;
  PCURL *v78;
  PCURL *v79;
  PCURL *v80;
  OZElement::OZElement_cropInfo *v81;
  OZChannelInfo *v82;
  PCURL *v83;
  PCURL *v84;
  PCString *v85;
  unsigned int *v86;
  char *ElementBlendModes;
  PCString v88;
  PCString v89;

  OZTransformNode::OZTransformNode((OZTransformNode *)this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(_QWORD *)this = off_1E658B110;
  *((_QWORD *)this + 2) = &unk_1E658B9E8;
  *((_QWORD *)this + 6) = &unk_1E658BC40;
  *((_QWORD *)this + 816) = &unk_1E658BC98;
  PCURL::PCURL((PCURL *)&v89, CFSTR("Channel Blending"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6552), &v89, (OZChannelFolder *)((char *)this + 320), 0xC8u, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v6, CFSTR("Channel Opacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6680), 1.0, &v89, (OZChannelFolder *)((char *)this + 6552), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v89);
  v7 = PCBlend::modeMenuString(0);
  PCURL::PCURL((PCURL *)&v89, CFSTR("Channel Blend Mode"));
  OZChannelBlendMode::OZChannelBlendMode((OZChannelBlendMode *)((char *)this + 6832), 0, v7, &v89, (OZChannelFolder *)((char *)this + 6552), 0xCBu, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v8, CFSTR("Channel Light Wrap"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7088), &v89, (OZChannelFolder *)((char *)this + 6552), 0xF1u, 2u, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v9, CFSTR("Channel LR Amount"));
  Instance = (OZElement::OZElement_lrSizeInfo *)OZElement::OZElement_lrSizeImpl::getInstance(v10);
  v12 = (OZChannelInfo *)OZElement::OZElement_lrSizeInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 7216), 10.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xEEu, 2, (OZChannelImpl *)Instance, v12);
  PCString::~PCString(&v89);
  PCURL::PCURL(v13, CFSTR("Channel LR Intensity"));
  v15 = (OZChannelImpl *)OZElement::OZElement_lrIntensityImpl::getInstance(v14);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7368), 1.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xEFu, 2u, v15, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v16, CFSTR("Channel LR Intensity Scale"));
  v18 = (OZChannelImpl *)OZElement::OZElement_lrIntensityScaleImpl::getInstance(v17);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7520), 1.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xF2u, 2u, v18, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v19, CFSTR("Channel LR Opacity"));
  v21 = (OZChannelImpl *)OZElement::OZElement_lrOpacityImpl::getInstance(v20);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7672), 1.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xF0u, 2u, v21, 0);
  PCString::~PCString(&v89);
  v23 = PCBlend::lightWrapModeMenuString(v22);
  PCURL::PCURL((PCURL *)&v89, CFSTR("Channel LR Blend Mode"));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 7824), 0, v23, &v89, (OZChannelFolder *)((char *)this + 7088), 0xEDu, 2, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v24, CFSTR("Channel Reflectivity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 8080), 0.0, &v89, (OZChannelFolder *)((char *)this + 6552), 0xDEu, 0xAu, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v25, CFSTR("Channel Preserve Transparency"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), 0, &v89, (OZChannelFolder *)((char *)this + 6552), 0xD9u, 0, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v26, CFSTR("Channel Lighting"));
  OZLightingFolder::OZLightingFolder((OZLightingFolder *)((char *)this + 8384), &v89, (OZChannelFolder *)((char *)this + 320), 0xE6u, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v27, CFSTR("Folder Element Shadows"));
  OZFolderElementShadows::OZFolderElementShadows((OZFolderElementShadows *)((char *)this + 9352), &v89, (OZChannelFolder *)((char *)this + 320), 0xEAu, 2u);
  PCString::~PCString(&v89);
  PCURL::PCURL(v28, CFSTR("Channel Reflection"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 9936), &v89, (OZChannelFolder *)((char *)this + 320), 0xDFu, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v29, CFSTR("Channel Reflectivity"));
  v31 = (OZChannelImpl *)OZElement::OZElement_reflectivityImpl::getInstance(v30);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10064), 0.8, &v89, (OZChannelFolder *)((char *)this + 9936), 0xE4u, 0, v31, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v32, CFSTR("Channel Reflection Blur"));
  v34 = (OZChannelImpl *)OZElement::OZElement_reflectionBlurImpl::getInstance(v33);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10216), 0.0, &v89, (OZChannelFolder *)((char *)this + 9936), 0xE5u, 0, v34, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v35, CFSTR("Channel Reflection Falloff"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 10368), &v89, (OZChannelFolder *)((char *)this + 9936), 0xE0u, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v36, CFSTR("Channel Reflection Begin Falloff"));
  v38 = (OZElement::OZElement_reflectionBeginFalloffInfo *)OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(v37);
  v39 = (OZChannelInfo *)OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(v38);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10496), 0.0, &v89, (OZChannelFolder *)((char *)this + 10368), 0xE1u, 0, (OZChannelImpl *)v38, v39);
  PCString::~PCString(&v89);
  PCURL::PCURL(v40, CFSTR("Channel Reflection End Falloff"));
  v42 = (OZElement::OZElement_reflectionEndFalloffInfo *)OZElement::OZElement_reflectionEndFalloffImpl::getInstance(v41);
  v43 = (OZChannelInfo *)OZElement::OZElement_reflectionEndFalloffInfo::getInstance(v42);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10648), 500.0, &v89, (OZChannelFolder *)((char *)this + 10368), 0xE2u, 0, (OZChannelImpl *)v42, v43);
  PCString::~PCString(&v89);
  PCURL::PCURL(v44, CFSTR("Channel Reflection Falloff Exponent"));
  v46 = (OZElement::OZElement_reflectionFalloffExponentInfo *)OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(v45);
  v47 = (OZChannelInfo *)OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(v46);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10800), 1.8, &v89, (OZChannelFolder *)((char *)this + 10368), 0xEBu, 0, (OZChannelImpl *)v46, v47);
  PCString::~PCString(&v89);
  v49 = PCBlend::reflectionModeMenuString(v48);
  PCURL::PCURL((PCURL *)&v89, CFSTR("Channel Reflection Blend Mode"));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 10952), v49, &v89, (OZChannelFolder *)((char *)this + 9936), 0xE3u, 0, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v50, CFSTR("Channel Casts Reflection Enum"));
  PCURL::PCURL((PCURL *)&v88, CFSTR("Channel Casts Reflection"));
  v52 = (OZChannelImpl *)OZElement::OZElement_castsReflectionImpl::getInstance(v51);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11208), 0, &v89, &v88, (OZChannelFolder *)((char *)this + 6552), 0xECu, 0, v52, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v53, CFSTR("Channel Color Heading"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 11464), &v89, (OZChannelFolder *)((char *)this + 320), 0xF3u, 0, 0);
  PCString::~PCString(&v89);
  PCString::PCString(v54, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 11592), 1.0, &v89, (OZChannelFolder *)((char *)this + 11464), 0xF5u, 2, 0, 0);
  PCString::~PCString(&v89);
  PCString::PCString(v55, "Hidden Channel");
  PCString::PCString(&v88, "Hidden Channel");
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11744), 0, &v89, &v88, (OZChannelFolder *)((char *)this + 11464), 0xF4u, 138, 0, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v56, CFSTR("Channel Color Conversion Enum"));
  PCURL::PCURL((PCURL *)&v88, CFSTR("Channel Color Conversion"));
  v58 = (OZChannelImpl *)OZElement::OZElement_conversionImpl::getInstance(v57);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12000), 0, &v89, &v88, (OZChannelFolder *)((char *)this + 11464), 0xF6u, 0, v58, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v59, CFSTR("Channel Color Conversion Type Enum"));
  PCURL::PCURL((PCURL *)&v88, CFSTR("Channel Color Conversion Type"));
  v61 = (OZChannelImpl *)OZElement::OZElement_conversionTypeImpl::getInstance(v60);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12256), 3u, &v89, &v88, (OZChannelFolder *)((char *)this + 11464), 0xF7u, 0, v61, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v62, CFSTR("Channel Color Conversion Peak Nits"));
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 12512), 1000.0, &v89, (OZChannelFolder *)((char *)this + 11464), 0xF8u, 0, 0, 0);
  PCString::~PCString(&v89);
  *((_DWORD *)this + 3166) = -1;
  PCURL::PCURL(v63, CFSTR("Channel Drop Shadow"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 12672), &v89, (OZChannelFolder *)((char *)this + 320), 0xD0u, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v64, CFSTR("Channel Drop Shadow Color"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this + 12800), &v89, (OZChannelFolder *)((char *)this + 12672), 0xD2u, 0, 5u);
  PCString::~PCString(&v89);
  PCURL::PCURL(v65, CFSTR("Channel Drop Shadow Opacity"));
  v67 = (OZChannelImpl *)OZElement::OZElement_dropShadowOpacityImpl::getInstance(v66);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 13808), 0.75, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD3u, 0, v67, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v68, CFSTR("Channel Drop Shadow Blur"));
  v70 = (OZElement::OZElement_dropShadowBlurInfo *)OZElement::OZElement_dropShadowBlurImpl::getInstance(v69);
  v71 = (OZChannelInfo *)OZElement::OZElement_dropShadowBlurInfo::getInstance(v70);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 13960), 5.0, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD5u, 0, (OZChannelImpl *)v70, v71);
  PCString::~PCString(&v89);
  PCURL::PCURL(v72, CFSTR("Channel Drop Shadow Distance"));
  v74 = (OZChannelImpl *)OZElement::OZElement_dropShadowDistanceImpl::getInstance(v73);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 14112), 5.0, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD4u, 0, v74, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v75, CFSTR("Channel Drop Shadow Angle"));
  v77 = (OZChannelImpl *)OZElement::OZElement_dropShadowAngleImpl::getInstance(v76);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 14264), 5.49778714, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD6u, 0, v77, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v78, CFSTR("Channel Drop Shadow Fixed Source"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14416), &v89, (OZChannelFolder *)((char *)this + 12672), 0xE8u, 0, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v79, CFSTR("Channel Four Corner"));
  OZChannelQuad::OZChannelQuad((OZChannelQuad *)((char *)this + 14568), &v89, (OZChannelFolder *)((char *)this + 320), 0xCFu, 0, 4u);
  PCString::~PCString(&v89);
  PCURL::PCURL(v80, CFSTR("Channel Crop"));
  v82 = (OZChannelInfo *)OZElement::OZElement_cropInfo::getInstance(v81);
  OZChannelCrop::OZChannelCrop((OZChannelCrop *)((char *)this + 17520), &v89, (OZChannelFolder *)((char *)this + 320), 0xD8u, 0, 4u, 0, v82);
  PCString::~PCString(&v89);
  PCURL::PCURL(v83, CFSTR("Channel Timing Group"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18264), &v89, (OZChannelFolder *)((char *)this + 320), 0xE9u, 2u, 0);
  PCString::~PCString(&v89);
  *((_QWORD *)this + 2299) = 0;
  *((_QWORD *)this + 2301) = (char *)this + 18408;
  *((_QWORD *)this + 2302) = (char *)this + 18408;
  *((_QWORD *)this + 2303) = 0;
  PCURL::PCURL(v84, CFSTR("Channel Masks"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18432), &v89, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 0);
  PCString::~PCString(&v89);
  PCString::PCString(v85, "Channel Freeze Media");
  OZChanFootageRef::OZChanFootageRef((OZChanFootageRef *)((char *)this + 18560), &v89, (OZChannelFolder *)((char *)this + 320), 0xDDu, 10);
  PCString::~PCString(&v89);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)this + 18720));
  *((_QWORD *)this + 2342) = 0xD00000005;
  *((_WORD *)this + 9372) = 0;
  *((_QWORD *)this + 2344) = 0;
  *((_QWORD *)this + 2346) = 0;
  *((_QWORD *)this + 2345) = 0;
  LODWORD(v89.var0) = 0;
  ElementBlendModes = (char *)PCBlend::getElementBlendModes((PCBlend *)&v89, v86);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 6832), ElementBlendModes, (int)v89.var0);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 10952), ElementBlendModes, (int)v89.var0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 9936), 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 9936), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9936));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 10368), 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 10368), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 10368));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11464), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 11464));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 11592), 0);
  OZChannel::setValue((OZChannel *)((char *)this + 11592), MEMORY[0x1E0CA2E68], 3.0, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11744));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 12256), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 12512), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 12512), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 12512), 100.0);
  OZChannel::setMax((OZChannel *)((char *)this + 12512), 10000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 12512), 100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 12512), 4000.0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 12672), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 12672));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 12672), 0, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14568), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 14568), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 17520), 0, 0);
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 18560, 0);
  *((_BYTE *)this + 18717) = 1;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 8384), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8384));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 9352), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9352));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 9936), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9936));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 10368), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 10368));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 12672), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 12672));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 14568), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 17520), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 17520));
}

void sub_1B2E14744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannelFolder *a11, OZChannelFolder *a12, OZChannelBool *a13, OZChannel *a14, OZChannel *a15, OZChannel *a16, OZChannelPercent *a17, OZChannelColorNoAlpha *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannel *a22,OZChannel *a23,OZChannel *a24,OZChannelPercent *a25,OZChannelBool *a26,OZChannelPercent *a27,OZChannelEnum *a28,OZChannelPercent *a29,OZChannelPercent *a30,OZChannelFolder *a31,OZChannelPercent *a32,OZChannelFolder *a33,OZChannelBase *a34)
{
  OZTransformNode *v34;
  OZChannelFolder *v35;
  OZChannelCrop *v36;
  OZChannel *v37;
  _QWORD *v38;
  OZChanFootageRef *v39;
  OZChannelQuad *v40;
  OZChannelFolder *v41;
  uint64_t v42;
  const PCString *v44;

  OZChanFootageRef::~OZChanFootageRef(v39);
  OZChannelFolder::~OZChannelFolder(a11);
  std::__list_imp<unsigned int>::clear(v38);
  OZChannelFolder::~OZChannelFolder(a12);
  OZChannelCrop::~OZChannelCrop(v36);
  OZChannelQuad::~OZChannelQuad(v40);
  OZChannelBool::~OZChannelBool(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelPercent::~OZChannelPercent(a17);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a18);
  OZChannelFolder::~OZChannelFolder(v41);
  OZChannel::~OZChannel(v37);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 176));
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 144));
  OZChannelFolder::~OZChannelFolder(v35);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 160));
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannel::~OZChannel(a23);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 120));
  OZChannel::~OZChannel(a24);
  OZChannelPercent::~OZChannelPercent(a25);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 112));
  OZFolderElementShadows::~OZFolderElementShadows(*(OZFolderElementShadows **)(v42 - 136));
  OZLightingFolder::~OZLightingFolder(*(OZLightingFolder **)(v42 - 128));
  OZChannelBool::~OZChannelBool(a26);
  OZChannelPercent::~OZChannelPercent(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannelPercent::~OZChannelPercent(a29);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 192));
  OZChannelPercent::~OZChannelPercent(a30);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 184));
  OZChannelFolder::~OZChannelFolder(a31);
  OZChannelBlendMode::~OZChannelBlendMode(*(OZChannelBlendMode **)(v42 - 152));
  OZChannelPercent::~OZChannelPercent(a32);
  OZChannelFolder::~OZChannelFolder(a33);
  OZChannelBase::setRangeName(a34, v44);
  OZTransformNode::~OZTransformNode(v34);
  _Unwind_Resume(a1);
}

void OZElement::OZElement(OZElement *this, const OZElement *a2, uint64_t a3)
{
  uint64_t v6;
  PCString *v7;
  unsigned int *v8;
  char *ElementBlendModes;
  char *v10;
  const void *v11;
  OZSceneNode *v12;
  OZSceneNode *v13;
  _QWORD *v14;
  _QWORD *v15;
  OZChannelBase *v16;
  OZScene *v17;
  uint64_t v18;
  OZChannelBase *v19;
  PCString v20;

  OZTransformNode::OZTransformNode((OZTransformNode *)this, (const OZTransformNode *)a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v6 + 6528));
  *(_QWORD *)this = off_1E658B110;
  *((_QWORD *)this + 2) = &unk_1E658B9E8;
  *((_QWORD *)this + 6) = &unk_1E658BC40;
  *((_QWORD *)this + 816) = &unk_1E658BC98;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6552), (const OZChannelFolder *)((char *)a2 + 6552), (OZChannelFolder *)((char *)this + 320));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6680), (const OZChannelBase *)((char *)a2 + 6680), (OZChannelFolder *)((char *)this + 6552));
  OZChannelBlendMode::OZChannelBlendMode((OZChannelBlendMode *)((char *)this + 6832), (const OZChannelBlendMode *)((char *)a2 + 6832), (OZChannelFolder *)((char *)this + 6552));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7088), (const OZChannelFolder *)((char *)a2 + 7088), (OZChannelFolder *)((char *)this + 6552));
  OZChannel::OZChannel((OZChannel *)((char *)this + 7216), (const OZChannelBase *)((char *)a2 + 7216), (OZChannelFolder *)((char *)this + 7088));
  *((_QWORD *)this + 902) = &off_1E6551358;
  *((_QWORD *)this + 904) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7368), (const OZChannelBase *)((char *)a2 + 7368), (OZChannelFolder *)((char *)this + 7088));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7520), (const OZChannelBase *)((char *)a2 + 7520), (OZChannelFolder *)((char *)this + 7088));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7672), (const OZChannelBase *)((char *)a2 + 7672), (OZChannelFolder *)((char *)this + 7088));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 7824), (const OZChannelEnum *)((char *)a2 + 7824), (OZChannelFolder *)((char *)this + 7088));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 8080), (const OZChannelBase *)((char *)a2 + 8080), (OZChannelFolder *)((char *)this + 6552));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), (const OZChannelBase *)((char *)a2 + 8232), (OZChannelFolder *)((char *)this + 6552));
  OZLightingFolder::OZLightingFolder((OZLightingFolder *)((char *)this + 8384), (const OZLightingFolder *)((char *)a2 + 8384), (OZChannelFolder *)((char *)this + 320));
  OZFolderElementShadows::OZFolderElementShadows((OZFolderElementShadows *)((char *)this + 9352), (const OZFolderElementShadows *)((char *)a2 + 9352), (OZChannelFolder *)((char *)this + 320));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 9936), (const OZChannelFolder *)((char *)a2 + 9936), (OZChannelFolder *)((char *)this + 320));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10064), (const OZChannelBase *)((char *)a2 + 10064), (OZChannelFolder *)((char *)this + 9936));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10216), (const OZChannelBase *)((char *)a2 + 10216), (OZChannelFolder *)((char *)this + 9936));
  *((_QWORD *)this + 1277) = &off_1E6551358;
  *((_QWORD *)this + 1279) = &unk_1E65516B8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 10368), (const OZChannelFolder *)((char *)a2 + 10368), (OZChannelFolder *)((char *)this + 9936));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10496), (const OZChannelBase *)((char *)a2 + 10496), (OZChannelFolder *)((char *)this + 10368));
  *((_QWORD *)this + 1312) = &off_1E6551358;
  *((_QWORD *)this + 1314) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10648), (const OZChannelBase *)((char *)a2 + 10648), (OZChannelFolder *)((char *)this + 10368));
  *((_QWORD *)this + 1331) = &off_1E6551358;
  *((_QWORD *)this + 1333) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10800), (const OZChannelBase *)((char *)a2 + 10800), (OZChannelFolder *)((char *)this + 10368));
  *((_QWORD *)this + 1350) = &off_1E6551358;
  *((_QWORD *)this + 1352) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 10952), (const OZChannelEnum *)((char *)a2 + 10952), (OZChannelFolder *)((char *)this + 9936));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11208), (const OZChannelEnum *)((char *)a2 + 11208), (OZChannelFolder *)((char *)this + 6552));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 11464), (const OZChannelFolder *)((char *)a2 + 11464), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 11592), (const OZChannelBase *)((char *)a2 + 11592), (OZChannelFolder *)((char *)this + 11464));
  *((_QWORD *)this + 1449) = &off_1E6551358;
  *((_QWORD *)this + 1451) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11744), (const OZChannelEnum *)((char *)a2 + 11744), (OZChannelFolder *)((char *)this + 11464));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12000), (const OZChannelEnum *)((char *)a2 + 12000), (OZChannelFolder *)((char *)this + 11464));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12256), (const OZChannelEnum *)((char *)a2 + 12256), (OZChannelFolder *)((char *)this + 11464));
  OZChannel::OZChannel((OZChannel *)((char *)this + 12512), (const OZChannelBase *)((char *)a2 + 12512), (OZChannelFolder *)((char *)this + 11464));
  *((_QWORD *)this + 1564) = &off_1E6551358;
  *((_QWORD *)this + 1566) = &unk_1E65516B8;
  *((_DWORD *)this + 3166) = -1;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 12672), (const OZChannelFolder *)((char *)a2 + 12672), (OZChannelFolder *)((char *)this + 320));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this + 12800), (const OZChannelColorNoAlpha *)((char *)a2 + 12800), (OZChannelFolder *)((char *)this + 12672));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 13808), (const OZChannelBase *)((char *)a2 + 13808), (OZChannelFolder *)((char *)this + 12672));
  OZChannel::OZChannel((OZChannel *)((char *)this + 13960), (const OZChannelBase *)((char *)a2 + 13960), (OZChannelFolder *)((char *)this + 12672));
  *((_QWORD *)this + 1745) = &off_1E6551358;
  *((_QWORD *)this + 1747) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 14112), (const OZChannelBase *)a2 + 126, (OZChannelFolder *)((char *)this + 12672));
  *((_QWORD *)this + 1764) = &off_1E6551358;
  *((_QWORD *)this + 1766) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 14264), (const OZChannelBase *)((char *)a2 + 14264), (OZChannelFolder *)((char *)this + 12672));
  *((_QWORD *)this + 1783) = &off_1E6551728;
  *((_QWORD *)this + 1785) = &unk_1E6551A88;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14416), (const OZChannelBase *)((char *)a2 + 14416), (OZChannelFolder *)((char *)this + 12672));
  OZChannelQuad::OZChannelQuad((OZChannelQuad *)((char *)this + 14568), (const OZChannelQuad *)((char *)a2 + 14568), (OZChannelFolder *)((char *)this + 320));
  OZChannelCrop::OZChannelCrop((OZChannelCrop *)((char *)this + 17520), (const OZChannelCrop *)((char *)a2 + 17520), (OZChannelFolder *)((char *)this + 320));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18264), (const OZChannelFolder *)((char *)a2 + 18264), (OZChannelFolder *)((char *)this + 320));
  *((_QWORD *)this + 2299) = *((_QWORD *)a2 + 2299);
  *((_DWORD *)this + 4600) = *((_DWORD *)a2 + 4600);
  *((_QWORD *)this + 2301) = (char *)this + 18408;
  *((_QWORD *)this + 2302) = (char *)this + 18408;
  *((_QWORD *)this + 2303) = 0;
  PCURL::PCURL((PCURL *)&v20, CFSTR("Channel Masks"));
  v19 = (OZChannelBase *)((char *)this + 56);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18432), &v20, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(v7, "Channel Freeze Media");
  OZChanFootageRef::OZChanFootageRef((OZChanFootageRef *)((char *)this + 18560), &v20, (OZChannelFolder *)((char *)this + 320), 0xDDu, 10);
  PCString::~PCString(&v20);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)this + 18720));
  *((_QWORD *)this + 2342) = *((_QWORD *)a2 + 2342);
  *((_WORD *)this + 9372) = *((_WORD *)a2 + 9372);
  *((_QWORD *)this + 2345) = 0;
  *((_QWORD *)this + 2346) = 0;
  *((_QWORD *)this + 2344) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18432), 8, 0);
  LODWORD(v20.var0) = 0;
  ElementBlendModes = (char *)PCBlend::getElementBlendModes((PCBlend *)&v20, v8);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 6832), ElementBlendModes, (int)v20.var0);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 10952), ElementBlendModes, (int)v20.var0);
  if ((a3 & 1) == 0)
  {
    v10 = (char *)a2 + 18408;
    if ((const OZElement *)((char *)a2 + 18408) != *((const OZElement **)a2 + 2302))
    {
      do
      {
        v11 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v10 + 16)
                                                                                             + 8)
                                                                               + 24))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 16) + 8), *(_QWORD *)(*(_QWORD *)v10 + 16), a3);
        if (v11)
        {
          if (v12)
          {
            v13 = v12;
            v14 = operator new(0x18uLL);
            v15 = (_QWORD *)*((_QWORD *)this + 2302);
            *v14 = (char *)this + 18408;
            v14[1] = v15;
            v14[2] = v13;
            *v15 = v14;
            *((_QWORD *)this + 2302) = v14;
            ++*((_QWORD *)this + 2303);
            v16 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v13 + 640))(v13);
            OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18432), v16);
            (*(void (**)(OZSceneNode *, OZElement *))(*(_QWORD *)v13 + 256))(v13, this);
            (*(void (**)(OZSceneNode *))(*(_QWORD *)v13 + 1040))(v13);
            v17 = (OZScene *)*((_QWORD *)this + 121);
            if (v17)
            {
              OZScene::registerNode(v17, v13);
              OZScene::addAllDependencies(*((_QWORD *)this + 121), v13);
            }
          }
        }
        v10 = *(char **)v10;
      }
      while (v10 != *((char **)a2 + 2302));
    }
  }
  if ((*((_BYTE *)this + 1024) & 8) != 0)
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 320), (OZChannelBase *)((char *)this + 12672));
  if ((a3 & 0xA) == 8)
  {
    OZChanSceneNodeRef::operator=((uint64_t)this + 18560, (uint64_t)a2 + 18560);
    *((_OWORD *)this + 1170) = *((_OWORD *)a2 + 1170);
    return;
  }
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v19, 0x8000))
  {
    v18 = 102;
  }
  else
  {
    if (!OZChannelBase::testFlag(v19, 4))
      return;
    v18 = 97;
  }
  (*(void (**)(OZElement *))(*(_QWORD *)this + 8 * v18))(this);
}

void sub_1B2E15474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelFolder *a9, OZChannelCrop *a10, OZChannelQuad *a11, OZChannelBool *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannelPercent *a16, OZChannelColorNoAlpha *a17, OZChannel *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannelEnum *a21,OZChannel *a22,OZChannelFolder *a23,OZChannelEnum *a24,OZChannel *a25,OZChannel *a26,OZChannel *a27,OZChannelFolder *a28,OZChannel *a29,OZChannelPercent *a30,OZFolderElementShadows *a31,OZLightingFolder *a32,OZChannelBool *a33,OZChannelPercent *a34,OZChannelEnum *a35,OZChannelPercent *a36)
{
  uint64_t v36;
  OZChannelFolder *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  const PCString *v42;

  v41 = *(_QWORD *)(v36 + 18768);
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v36 + 18752);
  OZChanFootageRef::~OZChanFootageRef(*(OZChanFootageRef **)(v39 - 144));
  OZChannelFolder::~OZChannelFolder(v37);
  std::__list_imp<unsigned int>::clear(v38);
  OZChannelFolder::~OZChannelFolder(a9);
  OZChannelCrop::~OZChannelCrop(a10);
  OZChannelQuad::~OZChannelQuad(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a17);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 136));
  OZChannel::~OZChannel(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannel::~OZChannel(a22);
  OZChannelFolder::~OZChannelFolder(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 120));
  OZChannel::~OZChannel(a25);
  OZChannel::~OZChannel(a26);
  OZChannel::~OZChannel(a27);
  OZChannelFolder::~OZChannelFolder(a28);
  OZChannel::~OZChannel(a29);
  OZChannelPercent::~OZChannelPercent(a30);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 112));
  OZFolderElementShadows::~OZFolderElementShadows(a31);
  OZLightingFolder::~OZLightingFolder(a32);
  OZChannelBool::~OZChannelBool(a33);
  OZChannelPercent::~OZChannelPercent(a34);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelPercent::~OZChannelPercent(a36);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v39 - 208));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v39 - 200));
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 192));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 184));
  OZChannelBlendMode::~OZChannelBlendMode(*(OZChannelBlendMode **)(v39 - 104));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v39 - 176));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 168));
  OZChannelBase::setRangeName(*(OZChannelBase **)(v39 - 160), v42);
  OZTransformNode::~OZTransformNode((OZTransformNode *)v36);
  _Unwind_Resume(a1);
}

void OZElement::~OZElement(OZElement *this)
{
  uint64_t i;
  uint64_t *v3;
  OZSceneNode *v4;
  uint64_t v5;
  OZChannelBase *v6;
  OZScene *v7;
  uint64_t v8;
  const PCString *v9;

  *(_QWORD *)this = off_1E658B110;
  *((_QWORD *)this + 2) = &unk_1E658B9E8;
  *((_QWORD *)this + 6) = &unk_1E658BC40;
  *((_QWORD *)this + 816) = &unk_1E658BC98;
  for (i = *((_QWORD *)this + 2303); i; i = *((_QWORD *)this + 2303))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 2302);
    v4 = (OZSceneNode *)v3[2];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    *((_QWORD *)this + 2303) = i - 1;
    operator delete(v3);
    v6 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v4 + 640))(v4);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18432), v6);
    v7 = (OZScene *)*((_QWORD *)this + 121);
    if (v7)
    {
      OZScene::unregisterNode(v7, v4);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v4);
    }
    (*(void (**)(OZSceneNode *))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = *((_QWORD *)this + 2346);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 18752);
  OZChanFootageRef::~OZChanFootageRef((OZChanFootageRef *)((char *)this + 18560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18432));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 2301);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18264));
  OZChannelCrop::~OZChannelCrop((OZChannelCrop *)((char *)this + 17520));
  OZChannelQuad::~OZChannelQuad((OZChannelQuad *)((char *)this + 14568));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 14416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 14264));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 14112));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 13960));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 13808));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this + 12800));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 12672));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 12512));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 12256));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 12000));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 11744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 11592));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 11464));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 11208));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 10952));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10800));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10648));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10496));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 10368));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10216));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 10064));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 9936));
  OZFolderElementShadows::~OZFolderElementShadows((OZFolderElementShadows *)((char *)this + 9352));
  OZLightingFolder::~OZLightingFolder((OZLightingFolder *)((char *)this + 8384));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 8232));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 8080));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 7824));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 7672));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 7520));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 7368));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7216));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7088));
  OZChannelBlendMode::~OZChannelBlendMode((OZChannelBlendMode *)((char *)this + 6832));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 6680));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 6552));
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 6528), v9);
  OZTransformNode::~OZTransformNode((OZTransformNode *)this);
}

uint64_t OZElement::operator=(uint64_t a1, const void *a2)
{
  char *v4;
  char *v5;
  _WORD *v6;
  char *v7;
  uint64_t result;

  OZTransformNode::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  v6 = v4 + 18744;
  v7 = v4 + 13800;
  OZChannelFolder::operator=(a1 + 6552);
  OZChannelBase::operator=(a1 + 6680, (uint64_t)(v5 + 6680));
  OZChannelBase::operator=(a1 + 6832, (uint64_t)(v5 + 6832));
  OZChannelFolder::operator=(a1 + 7088);
  OZChannelBase::operator=(a1 + 7824, (uint64_t)(v5 + 7824));
  OZChannelBase::operator=(a1 + 7216, (uint64_t)(v5 + 7216));
  OZChannelBase::operator=(a1 + 7368, (uint64_t)(v5 + 7368));
  OZChannelBase::operator=(a1 + 7520, (uint64_t)(v5 + 7520));
  OZChannelBase::operator=(a1 + 7672, (uint64_t)(v5 + 7672));
  OZChannelBase::operator=(a1 + 8080, (uint64_t)(v5 + 8080));
  OZChannelBase::operator=(a1 + 8232, (uint64_t)(v5 + 8232));
  OZChannelBase::operator=(a1 + 10064, (uint64_t)(v5 + 10064));
  OZChannelFolder::operator=(a1 + 9936);
  OZChannelBase::operator=(a1 + 10064, (uint64_t)(v5 + 10064));
  OZChannelBase::operator=(a1 + 10216, (uint64_t)(v5 + 10216));
  OZChannelFolder::operator=(a1 + 10368);
  OZChannelBase::operator=(a1 + 10496, (uint64_t)(v5 + 10496));
  OZChannelBase::operator=(a1 + 10648, (uint64_t)(v5 + 10648));
  OZChannelBase::operator=(a1 + 10800, (uint64_t)(v5 + 10800));
  OZChannelBase::operator=(a1 + 10952, (uint64_t)(v5 + 10952));
  OZChannelFolder::operator=(a1 + 11464);
  OZChannelBase::operator=(a1 + 11592, (uint64_t)(v5 + 11592));
  OZChannelBase::operator=(a1 + 11744, (uint64_t)(v5 + 11744));
  OZChannelBase::operator=(a1 + 12000, (uint64_t)(v5 + 12000));
  OZChannelBase::operator=(a1 + 12256, (uint64_t)(v5 + 12256));
  OZChannelBase::operator=(a1 + 12512, (uint64_t)(v5 + 12512));
  OZChannelFolder::operator=(a1 + 12672);
  OZChannelFolder::operator=(a1 + 12800);
  OZChannelBase::operator=(a1 + 12936, (uint64_t)(v5 + 12936));
  OZChannelBase::operator=(a1 + 13088, (uint64_t)(v5 + 13088));
  OZChannelBase::operator=(a1 + 13240, (uint64_t)(v5 + 13240));
  OZChannelBase::operator=(a1 + 13392, (uint64_t)(v5 + 13392));
  OZChannelBase::operator=(a1 + 13544, (uint64_t)(v5 + 13544));
  *(_BYTE *)(a1 + 13800) = *v7;
  OZChannelBase::operator=(a1 + 13808, (uint64_t)(v5 + 13808));
  OZChannelBase::operator=(a1 + 13960, (uint64_t)(v5 + 13960));
  OZChannelBase::operator=(a1 + 14112, (uint64_t)(v5 + 14112));
  OZChannelBase::operator=(a1 + 14264, (uint64_t)(v5 + 14264));
  OZChannelBase::operator=(a1 + 14416, (uint64_t)(v5 + 14416));
  OZChannelFolder::operator=(a1 + 14568);
  OZChannelPosition::operator=(a1 + 14704, (uint64_t)(v5 + 14704));
  OZChannelPosition::operator=(a1 + 15408, (uint64_t)(v5 + 15408));
  OZChannelPosition::operator=(a1 + 16112, (uint64_t)(v5 + 16112));
  OZChannelPosition::operator=(a1 + 16816, (uint64_t)(v5 + 16816));
  OZChannelFolder::operator=(a1 + 17520);
  OZChannelBase::operator=(a1 + 17656, (uint64_t)(v5 + 17656));
  OZChannelBase::operator=(a1 + 17808, (uint64_t)(v5 + 17808));
  OZChannelBase::operator=(a1 + 17960, (uint64_t)(v5 + 17960));
  OZChannelBase::operator=(a1 + 18112, (uint64_t)(v5 + 18112));
  OZChannelFolder::operator=(a1 + 18264);
  *(_QWORD *)(a1 + 18392) = *((_QWORD *)v5 + 2299);
  *(_DWORD *)(a1 + 18400) = *((_DWORD *)v7 + 1150);
  OZChanSceneNodeRef::operator=(a1 + 18560, (uint64_t)(v5 + 18560));
  *(_OWORD *)(a1 + 18720) = *((_OWORD *)v5 + 1170);
  OZLightingFolder::operator=(a1 + 8384, (uint64_t)(v5 + 8384));
  result = OZFolderElementShadows::operator=(a1 + 9352, (uint64_t)(v5 + 9352));
  *(_WORD *)(a1 + 18744) = *v6;
  return result;
}

CGColorSpace **OZElement::copyAtTime(OZElement *this, const OZSceneNode *a2, CMTime *a3)
{
  const OZSceneNode *v4;
  __n128 v6;
  int v7;
  int v8;
  uint64_t v9;
  int isEnabled;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  double v25;
  int ValueAsInt;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v50;
  double v51;
  double v52;
  double v53;
  PCColor v54;
  _BYTE v55[24];
  CMTime v56;

  v4 = a2;
  v56 = *a3;
  v6.n128_f64[0] = OZTransformNode::copyAtTime((OZTransformNode *)this, a2, &v56);
  if (v4)
  v7 = (*(uint64_t (**)(const OZSceneNode *, __n128))(*(_QWORD *)v4 + 1608))(v4, v6);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 17520), v7, 0);
  v8 = (*(uint64_t (**)(const OZSceneNode *))(*(_QWORD *)v4 + 1600))(v4);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 14568), v8, 0);
  v9 = (*(uint64_t (**)(const OZSceneNode *))(*(_QWORD *)v4 + 1624))(v4);
  (*(void (**)(OZElement *, uint64_t, _BYTE *))(*(_QWORD *)this + 1744))(this, v9, v55);
  isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)v4 + 9936), 0, 1);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 9936), isEnabled, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 6680), 0);
  OZChannelBase::reset((OZChannelBase *)this + 61, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7824), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7216), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7368), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7520), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7672), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 8080), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 8232), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10064), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10216), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10496), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10648), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10800), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10952), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 12800), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 13808), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 13960), 0);
  OZChannelBase::reset((OZChannelBase *)this + 126, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 14264), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 14416), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 14568), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 17520), 0);
  OZLightingFolder::reset((OZLightingFolder *)((char *)this + 8384), 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 6680), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 6680), a3, v11, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 6832), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 6832), a3, v12, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7824), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7824), a3, v13, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7216), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7216), a3, v14, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7368), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7368), a3, v15, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7520), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7520), a3, v16, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7672), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7672), a3, v17, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 8080), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 8080), a3, v18, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 8232), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 8232), a3, v19, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10064), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10064), a3, v20, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10216), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10216), a3, v21, 0);
  v22 = OZChannelBase::isEnabled((OZChannelBase *)((char *)v4 + 10368), 1, 1);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 10368), v22, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10496), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10496), a3, v23, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10648), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10648), a3, v24, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10800), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10800), a3, v25, 0);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 10952), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10952), a3, (double)ValueAsInt, 0);
  v27 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 11592), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 11592), a3, (double)v27, 0);
  v28 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 11744), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 11744), a3, (double)v28, 0);
  v29 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 12000), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 12000), a3, (double)v29, 0);
  v30 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 12256), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 12256), a3, (double)v30, 0);
  v31 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 12512), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 12512), a3, (double)v31, 0);
  PCColor::PCColor(&v54);
  OZChannelColorNoAlpha::getColor((const OZSceneNode *)((char *)v4 + 12800), a3, &v54, 0.0);
  OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)((char *)this + 12800), a3, &v54, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 13808), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 13808), a3, v32, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 13960), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 13960), a3, v33, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14112), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 14112), a3, v34, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14264), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 14264), a3, v35, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14416), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 14416), a3, v36, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14840), a3, 0.0);
  v38 = v37;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14992), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 14704), a3, v38, v39, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 15544), a3, 0.0);
  v41 = v40;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 15696), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 15408), a3, v41, v42, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 16248), a3, 0.0);
  v44 = v43;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 16400), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 16112), a3, v44, v45, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 16952), a3, 0.0);
  v47 = v46;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 17104), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 16816), a3, v47, v48, 0);
  v52 = 0.0;
  v53 = 0.0;
  v50 = 0.0;
  v51 = 0.0;
  OZChannelCrop::getValue((const OZSceneNode *)((char *)v4 + 17520), a3, &v53, &v52, &v51, &v50, 0.0);
  OZChannelCrop::setValue((OZChannelCrop *)((char *)this + 17520), a3, v53, v52, v51, v50);
  *((_QWORD *)this + 2299) = *((_QWORD *)v4 + 2299);
  *((_DWORD *)this + 4600) = *((_DWORD *)v4 + 4600);
  OZChanSceneNodeRef::operator=((uint64_t)this + 18560, (uint64_t)v4 + 18560);
  *((_OWORD *)this + 1170) = *((_OWORD *)v4 + 1170);
  (*(void (**)(char *, uint64_t, CMTime *))(*((_QWORD *)this + 1048) + 712))((char *)this + 8384, (uint64_t)v4 + 8384, a3);
  (*(void (**)(char *, uint64_t, CMTime *))(*((_QWORD *)this + 1169) + 720))((char *)this + 9352, (uint64_t)v4 + 9352, a3);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v54.var1._obj);
}

void sub_1B2E16750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CGColorSpace *a35)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a35);
  _Unwind_Resume(a1);
}

uint64_t OZElement::isLit(OZElement *this, const OZRenderParams *a2)
{
  uint64_t result;
  const void *v5;
  void *v6;
  CMTime v7;

  if (!*((_BYTE *)a2 + 514))
    return 0;
  v7 = *(CMTime *)a2;
  result = OZChannel::getValueAsInt((OZChannel *)this + 56, &v7, 0.0);
  if ((_DWORD)result == 2)
    return 0;
  if ((_DWORD)result == 1)
    return result;
  if ((_DWORD)result)
    return 0;
  v5 = (const void *)*((_QWORD *)this + 120);
  if (v5
  {
    return (*(uint64_t (**)(void *, const OZRenderParams *))(*(_QWORD *)v6 + 1840))(v6, a2);
  }
  else
  {
    return 1;
  }
}

uint64_t OZElement::canBeExported(OZElement *this)
{
  return 1;
}

uint64_t OZElement::isFreezable(OZElement *this)
{
  return 0;
}

const void *OZElement::getFreezeFootage(OZElement *this)
{
  const void *result;

  result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 18560));
  if (result)
  return result;
}

uint64_t OZElement::hasValidFreezeFootage(OZElement *this)
{
  return 0;
}

uint64_t OZElement::hasEnabledMasks(OZElement *this)
{
  char *v1;
  uint64_t v2;
  uint64_t result;

  if ((*((_BYTE *)this + 1024) & 4) != 0)
    return 0;
  v1 = (char *)this + 18408;
  v2 = *((_QWORD *)this + 2302);
  if ((OZElement *)v2 == (OZElement *)((char *)this + 18408))
    return 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16) + 24))(*(_QWORD *)(v2 + 16) + 16, 0, 1);
    if ((_DWORD)result)
      break;
    v2 = *(_QWORD *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return result;
}

uint64_t OZElement::hasActiveMasks(OZElement *this, const OZRenderState *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  int64_t var3;

  v2 = (char *)this + 18408;
  v3 = *((_QWORD *)this + 2302);
  if ((OZElement *)v3 == (OZElement *)((char *)this + 18408))
    return 0;
  do
  {
    v5 = *(_QWORD *)(v3 + 16);
    var3 = a2->var0.var3;
    v7 = *(_OWORD *)&a2->var0.var0;
    result = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 104))(v5 + 16, &v7, 0, 1, 1);
    if ((_DWORD)result)
      break;
    v3 = *(_QWORD *)(v3 + 8);
  }
  while ((char *)v3 != v2);
  return result;
}

uint64_t OZElement::hasStencilMask(OZElement *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  BOOL v5;

  if ((*((_BYTE *)this + 1024) & 4) != 0)
    return 0;
  v1 = (char *)this + 18408;
  v2 = *((_QWORD *)this + 2302);
  if ((OZElement *)v2 == (OZElement *)((char *)this + 18408))
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 16);
    v4 = v3
    v5 = !(*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 + 16) + 24))(v3 + 16, 0, 1)
      || v4 == 0;
    if (!v5 && ((*(uint64_t (**)(void *))(*(_QWORD *)v4 + 1248))(v4) & 1) != 0)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if ((char *)v2 == v1)
      return 0;
  }
  return 1;
}

OZScene *OZElement::addMaskAfter(OZElement *this, OZSceneNode *a2, OZSceneNode *a3)
{
  char *v6;
  uint64_t i;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const OZChannelBase *v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  OZScene *result;

  if (a3)
  {
    v6 = (char *)this + 18408;
    for (i = *((_QWORD *)this + 2302); (char *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        if ((char *)i == v6)
          break;
        v8 = *(uint64_t **)(i + 8);
        v9 = operator new(0x18uLL);
        v9[2] = a2;
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v9;
        *v9 = v10;
        *v8 = (uint64_t)v9;
        v9[1] = v8;
        goto LABEL_9;
      }
    }
  }
  v11 = operator new(0x18uLL);
  v12 = (_QWORD *)*((_QWORD *)this + 2302);
  *v11 = (char *)this + 18408;
  v11[1] = v12;
  v11[2] = a2;
  *v12 = v11;
  *((_QWORD *)this + 2302) = v11;
LABEL_9:
  ++*((_QWORD *)this + 2303);
  if (a3)
  {
    v13 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
    v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 18432), v13, v14);
  }
  else
  {
    v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18432), v15);
  }
  (*(void (**)(OZSceneNode *, OZElement *))(*(_QWORD *)a2 + 256))(a2, this);
  (*(void (**)(OZSceneNode *))(*(_QWORD *)a2 + 1040))(a2);
  result = (OZScene *)*((_QWORD *)this + 121);
  if (result)
  {
    OZScene::registerNode(result, a2);
    return (OZScene *)OZScene::addAllDependencies(*((_QWORD *)this + 121), a2);
  }
  return result;
}

OZScene *OZElement::addMaskBefore(OZElement *this, OZSceneNode *a2, OZSceneNode *a3)
{
  uint64_t *v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  const OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  OZScene *result;

  v6 = (uint64_t *)((char *)this + 18408);
  if (a3)
  {
    for (i = *((_QWORD *)this + 2302); (uint64_t *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        v6 = (uint64_t *)i;
        break;
      }
    }
  }
  v8 = operator new(0x18uLL);
  v8[2] = a2;
  v9 = *v6;
  *(_QWORD *)(v9 + 8) = v8;
  *v8 = v9;
  *v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((_QWORD *)this + 2303);
  if (a3)
  {
    v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
    v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 18432), v10, v11);
  }
  else
  {
    v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 18432), v12);
  }
  (*(void (**)(OZSceneNode *, OZElement *))(*(_QWORD *)a2 + 256))(a2, this);
  (*(void (**)(OZSceneNode *))(*(_QWORD *)a2 + 1040))(a2);
  result = (OZScene *)*((_QWORD *)this + 121);
  if (result)
  {
    OZScene::registerNode(result, a2);
    return (OZScene *)OZScene::addAllDependencies(*((_QWORD *)this + 121), a2);
  }
  return result;
}

OZChannelFolder *OZElement::removeMask(OZElement *this, OZSceneNode *a2)
{
  OZSceneNode **v4;
  OZSceneNode **i;
  OZSceneNode *v6;
  OZScene *v7;
  OZChannelBase *v8;

  v4 = (OZSceneNode **)((char *)this + 18408);
  for (i = (OZSceneNode **)*((_QWORD *)this + 2302); i != v4; i = (OZSceneNode **)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v4)
      {
        (*(void (**)(OZSceneNode *, _QWORD))(*(_QWORD *)a2 + 256))(a2, 0);
        (*(void (**)(OZSceneNode *))(*(_QWORD *)a2 + 1048))(a2);
        v6 = *i;
        *((_QWORD *)v6 + 1) = i[1];
        *(_QWORD *)i[1] = v6;
        --*((_QWORD *)this + 2303);
        operator delete(i);
        v7 = (OZScene *)*((_QWORD *)this + 121);
        if (v7)
        {
          OZScene::unregisterNode(v7, a2);
          OZScene::removeAllDependencies(*((OZScene **)this + 121), a2);
        }
      }
      break;
    }
  }
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18432), v8);
}

_QWORD *OZElement::getMasks(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  PCAssertionException *exception;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1104))(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1112))(a1);
  if ((_QWORD *)v4 != result)
  {
    v6 = result;
    v7 = (_QWORD *)*a2;
    v8 = a2[2] + 1;
    do
    {
      v9 = *(const void **)(v4 + 16);
      if (!v9
      {
        exception = (PCAssertionException *)__cxa_allocate_exception(0x40uLL);
        PCAssertionException::PCAssertionException(exception);
      }
      result = operator new(0x18uLL);
      v10 = *(_QWORD *)(v4 + 16);
      result[1] = a2;
      result[2] = v10;
      *result = v7;
      v7[1] = result;
      *a2 = result;
      a2[2] = v8;
      v4 = *(_QWORD *)(v4 + 8);
      ++v8;
      v7 = result;
    }
    while ((_QWORD *)v4 != v6);
  }
  return result;
}

void sub_1B2E16E94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void PCAssertionException::PCAssertionException(PCAssertionException *this)
{
  _QWORD *v1;

  PCException::PCException(this);
  *v1 = &unk_1E656D028;
}

OZChannelBase *OZElement::setIsMask(OZElement *this)
{
  OZSceneNode::setIsMask((OZSceneNode *)this);
  if (*((_QWORD *)this + 1590))
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 320), (OZChannelBase *)((char *)this + 12672));
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11208), 2, 0);
}

char *OZElement::clearIsMask(OZElement *this)
{
  char *result;

  result = (char *)OZSceneNode::clearIsMask((OZSceneNode *)this);
  if (!*((_QWORD *)this + 1590))
    return OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 320), (const OZChannelBase *)((char *)this + 6552), (OZChannelBase *)((char *)this + 12672));
  return result;
}

uint64_t OZElement::acceptsShapeMasks(OZElement *this)
{
  return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
}

void OZElement::getImageBoundsWithDropShadow(uint64_t a1, float64x2_t *a2, const CMTime *a3)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
  OZElement::expandBoundsToIncludeDropShadow(a1, a2, a3);
}

void OZElement::expandBoundsToIncludeDropShadow(uint64_t a1, float64x2_t *a2, const CMTime *a3)
{
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  __double2 v13;
  double v14;
  _OWORD v15[3];
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  OZRenderState v33;
  float64x2_t v34[2];

  if (OZChannelBase::isEnabled((OZChannelBase *)(a1 + 12672), 0, 1))
  {
    v6 = a2[1];
    v34[0] = *a2;
    v34[1] = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14112), a3, 0.0);
    v14 = v7;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14264), a3, 0.0);
    v9 = v8;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 14416), a3, 0.0))
    {
      OZRenderState::OZRenderState(&v33);
      *(_OWORD *)&v33.var0.var0 = *(_OWORD *)&a3->value;
      v33.var0.var3 = a3->epoch;
      v31 = 0;
      v32 = 0.0;
      v30 = 0;
      (*(void (**)(uint64_t, double *, uint64_t *, uint64_t *, OZRenderState *, uint64_t))(*(_QWORD *)a1 + 1312))(a1, &v32, &v31, &v30, &v33, 1);
      v10 = v32;
      if (v32 <= 0.0)
        v10 = 1.0;
      v14 = v14 / v10;
      v29 = 0x3FF0000000000000;
      v26 = 0x3FF0000000000000;
      v23 = 0x3FF0000000000000;
      v20 = 0x3FF0000000000000;
      v21 = 0u;
      v22 = 0u;
      v24 = 0u;
      v25 = 0u;
      v27 = 0u;
      v28 = 0u;
      (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(_QWORD *)a1 + 1256))(a1, &v20, &v33);
      memset(v15, 0, sizeof(v15));
      v16 = 4;
      v17 = 0u;
      v18 = 0u;
      v19 = 0;
      PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v20, (uint64_t)v15);
    }
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 13960), a3, 0.0);
    if (v11.f64[0] > 0.0)
      PGImaging::gaussianBlurRect(0, a2, v34, v11);
    v13 = __sincos_stret(v9);
    v12.f64[0] = v13.__cosval;
    v12.f64[1] = v13.__sinval;
    v34[0] = vaddq_f64(vmulq_n_f64(v12, v14), v34[0]);
    PCRect<double>::operator|=(a2, v34);
  }
}

BOOL OZElement::isDropShadowFixedSource(OZElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 14416), a2, 0.0) != 0;
}

uint64_t `non-virtual thunk to'OZElement::dirty(OZElement *this)
{
  return OZSceneNode::dirty((OZSceneNode *)((char *)this - 16));
}

_QWORD *OZElement::hitCheck(_QWORD *a1, float32x2_t *a2, __int128 *a3, uint64_t a4, double *a5, char a6)
{
  _QWORD *v11;
  int v12;
  int v13;
  double v18;
  int v20;
  uint64_t v21;
  char v22;
  double v23;
  double *v24;
  uint64_t v25;
  unsigned int v26;
  double v27;
  double v28;
  BOOL v30;
  double v31[4];
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  unint64_t v35;
  double v36[3];
  double v37;
  double v38;
  double v39;
  float64x2_t v40;
  uint64_t v41;
  _BYTE v42[40];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v11 = a1;
  v57 = *MEMORY[0x1E0C80C00];
  if ((a6 & 4) == 0 || ((*(uint64_t (**)(_QWORD *))(*a1 + 680))(a1) & 1) == 0)
  {
    if ((a6 & 2) == 0
      || (v50 = *a3,
          v51 = *((_QWORD *)a3 + 2),
          (*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v11[2] + 104))(v11 + 2, &v50, 1, 1, 1)))
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      v12 = (*(uint64_t (**)(_QWORD *))(*v11 + 1600))(v11);
      v13 = *((_QWORD **)a3 + 7) == v11 ? 0 : v12;
      if (v13 == 1)
      {
        (*(void (**)(_QWORD *, __int128 *, __int128 *, __int128 *, __int128 *, __int128 *))(*v11 + 1720))(v11, a3, &v55, &v54, &v53, &v52);
      }
      else
      {
        *(_OWORD *)v42 = 0uLL;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)&v42[16] = _Q0;
        (*(void (**)(_QWORD *, _BYTE *, __int128 *))(*v11 + 1488))(v11, v42, a3);
        *(_QWORD *)&v52 = *(_QWORD *)v42;
        *((double *)&v52 + 1) = *(double *)&v42[8] + *(double *)&v42[24];
        *(double *)&v53 = *(double *)v42 + *(double *)&v42[16];
        *((double *)&v53 + 1) = *(double *)&v42[8] + *(double *)&v42[24];
        *(double *)&v54 = *(double *)v42 + *(double *)&v42[16];
        *((_QWORD *)&v54 + 1) = *(_QWORD *)&v42[8];
        v55 = *(_OWORD *)v42;
      }
      v56 = v52;
      v49 = 0x3FF0000000000000;
      v46 = 0x3FF0000000000000;
      v43 = 0x3FF0000000000000;
      *(_QWORD *)v42 = 0x3FF0000000000000;
      memset(&v42[8], 0, 32);
      v44 = 0u;
      v45 = 0u;
      v47 = 0u;
      v48 = 0u;
      (*(void (**)(_QWORD *, _BYTE *, __int128 *))(*v11 + 1256))(v11, v42, a3);
      v40 = vcvtq_f64_f32(*a2);
      v41 = 0;
      (*(void (**)(double *__return_ptr, _QWORD *, float64x2_t *, uint64_t, __int128 *, _QWORD))(*v11 + 1384))(v36, v11, &v40, a4, a3, 0);
      v18 = v37 * v37 + v38 * v38 + v39 * v39;
      if (v18 <= -0.0000001 || v18 >= 0.0000001)
      {
        memset(v33, 0, sizeof(v33));
        v34 = 0;
        v35 = 0xBFF0000000000000;
        PCIntersectRayWithPlane(v36, (double *)v33, a5);
        if (v20)
        {
          v21 = 0;
          v22 = 0;
          v23 = a5[1];
          v24 = (double *)&v52 + 1;
          LODWORD(v25) = 4;
          do
          {
            v26 = v25;
            v25 = v21;
            v27 = *v24;
            v28 = *((double *)&v52 + 2 * v26 + 1);
            _NF = *v24 <= v23 && v23 < v28;
            if (_NF || (v23 < v27 ? (v30 = v28 > v23) : (v30 = 1), !v30))
            {
              if (*a5 < *(v24 - 1) + (v23 - v27) * (*((double *)&v52 + 2 * v26) - *(v24 - 1)) / (v28 - v27))
                v22 ^= 1u;
            }
            ++v21;
            v24 += 2;
          }
          while (v25 != 4);
          if ((v22 & 1) != 0)
          {
            PCMatrix44Tmpl<double>::transform<double>((double *)v42, a5, a5);
            return v11;
          }
        }
        else
        {
          *(_QWORD *)&v31[0] = v52;
          *(_QWORD *)&v31[1] = v53;
          v31[2] = *((double *)&v54 + 1);
          v31[3] = *((double *)&v52 + 1);
          v32 = xmmword_1B355D500;
          if (PCRayIntersectsBox(v36, v31, a5))
          {
            PCMatrix44Tmpl<double>::transform<double>((double *)v42, a5, a5);
            return v11;
          }
        }
      }
    }
  }
  return 0;
}

BOOL OZElement::hitCheck(uint64_t a1, double *a2, uint64_t a3, const LiCamera *a4)
{
  int v8;
  int v9;
  OZScene *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float64x2_t v33;
  double v34[14];
  _BYTE v35[48];
  __int128 v36;
  __int128 v37;
  _BYTE v38[48];
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_QWORD *)&v38[40] = 0x3FF0000000000000;
  *(_QWORD *)v38 = 0x3FF0000000000000;
  *(_QWORD *)&v35[40] = 0x3FF0000000000000;
  *(_QWORD *)v35 = 0x3FF0000000000000;
  memset(&v35[8], 0, 32);
  v36 = 0u;
  v37 = 0u;
  memset(&v38[8], 0, 32);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 1256))(a1, v35);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1600))(a1);
  if (*(_QWORD *)(a3 + 56) == a1)
    v9 = 0;
  else
    v9 = v8;
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, float64x2_t *, float64x2_t *, float64x2_t *, float64x2_t *))(*(_QWORD *)a1 + 1720))(a1, a3, &v44, &v43, &v42, &v41);
  }
  else
  {
    v33 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v34 = _Q0;
    (*(void (**)(uint64_t, float64x2_t *, uint64_t))(*(_QWORD *)a1 + 1488))(a1, &v33, a3);
    v41.f64[0] = v33.f64[0];
    v41.f64[1] = v33.f64[1] + v34[1];
    v42.f64[0] = v33.f64[0] + v34[0];
    v42.f64[1] = v33.f64[1] + v34[1];
    v43.f64[0] = v33.f64[0] + v34[0];
    v43.f64[1] = v33.f64[1];
    v44 = v33;
  }
  v15 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v15, a4, &v33);
  v29 = v37;
  v30 = *(_OWORD *)v38;
  v31 = *(_OWORD *)&v38[16];
  v32 = *(_OWORD *)&v38[32];
  v25 = *(_OWORD *)v35;
  v26 = *(_OWORD *)&v35[16];
  v27 = *(_OWORD *)&v35[32];
  v28 = v36;
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v25, v33.f64);
  v16 = *((double *)&v32 + 1) + v41.f64[0] * *(double *)&v31 + v41.f64[1] * *((double *)&v31 + 1);
  v17 = (*((double *)&v28 + 1) + v41.f64[0] * *(double *)&v27 + v41.f64[1] * *((double *)&v27 + 1)) / v16;
  v41.f64[0] = (*((double *)&v26 + 1) + v41.f64[0] * *(double *)&v25 + v41.f64[1] * *((double *)&v25 + 1)) / v16;
  v41.f64[1] = v17;
  v18 = v42.f64[0];
  v19 = *((double *)&v32 + 1) + *(double *)&v31 * v42.f64[0] + *((double *)&v31 + 1) * v42.f64[1];
  v42.f64[0] = (*((double *)&v26 + 1) + *(double *)&v25 * v42.f64[0] + *((double *)&v25 + 1) * v42.f64[1]) / v19;
  v42.f64[1] = (*((double *)&v28 + 1) + *(double *)&v27 * v18 + *((double *)&v27 + 1) * v42.f64[1]) / v19;
  v20 = v43.f64[0];
  v21 = *((double *)&v32 + 1) + *(double *)&v31 * v43.f64[0] + *((double *)&v31 + 1) * v43.f64[1];
  v43.f64[0] = (*((double *)&v26 + 1) + *(double *)&v25 * v43.f64[0] + *((double *)&v25 + 1) * v43.f64[1]) / v21;
  v43.f64[1] = (*((double *)&v28 + 1) + *(double *)&v27 * v20 + *((double *)&v27 + 1) * v43.f64[1]) / v21;
  v22 = v44.f64[0];
  v23 = *((double *)&v32 + 1) + *(double *)&v31 * v44.f64[0] + *((double *)&v31 + 1) * v44.f64[1];
  v44.f64[0] = (*((double *)&v26 + 1) + *(double *)&v25 * v44.f64[0] + *((double *)&v25 + 1) * v44.f64[1]) / v23;
  v44.f64[1] = (*((double *)&v28 + 1) + *(double *)&v27 * v22 + *((double *)&v27 + 1) * v44.f64[1]) / v23;
  v39 = v42;
  v40 = v41;
  if (PCRect<double>::clipLine(a2, &v40, v39.f64))
    return 1;
  v39 = v43;
  v40 = v42;
  if (PCRect<double>::clipLine(a2, &v40, v39.f64))
    return 1;
  v39 = v44;
  v40 = v43;
  if (PCRect<double>::clipLine(a2, &v40, v39.f64))
    return 1;
  v39 = v41;
  v40 = v44;
  return PCRect<double>::clipLine(a2, &v40, v39.f64);
}

uint64_t OZElement::getDescendantAtIndex(OZElement *this, int a2)
{
  char *v2;
  char *v3;
  _BOOL4 v4;
  int v6;
  BOOL v8;
  uint64_t v9;

  if (!*((_QWORD *)this + 2303))
    return OZSceneNode::getDescendantAtIndex((OZSceneNode *)this, a2);
  v2 = (char *)this + 18408;
  v3 = (char *)*((_QWORD *)this + 2302);
  v4 = v3 != (char *)this + 18408;
  if (v3 != (char *)this + 18408 && a2 != 0)
  {
    v6 = a2 - 1;
    do
    {
      v3 = (char *)*((_QWORD *)v3 + 1);
      v8 = v6-- != 0;
      v4 = v3 != v2;
    }
    while (v3 != v2 && v8);
  }
  if (!v4)
    return OZSceneNode::getDescendantAtIndex((OZSceneNode *)this, a2);
  v9 = *((_QWORD *)v3 + 2);
  if (v9)
    return v9 + 16;
  else
    return 0;
}

uint64_t OZElement::canIsolateInViewer(OZElement *this)
{
  uint64_t result;
  OZScene *v3;
  int v4;

  result = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 272))(this);
  if (result)
  {
    v3 = (OZScene *)(*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 272))(this);
    v4 = OZScene::has3DObjects(v3, 0);
    result = 0;
    if (v4)
      return (*((_BYTE *)this + 1024) & 8) == 0;
  }
  return result;
}

uint64_t OZElement::writeBody(OZElement *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  PCString v16;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZElementScope);
  v10 = *((unsigned int *)this + 4598);
  if ((_DWORD)v10)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 400);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v10);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  if (*(_QWORD *)&vorr_s8(*(int8x8_t *)((char *)this + 18720), (int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)this + 1170), *((int8x16_t *)this + 1170), 8uLL))&& ((*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
  {
    PCHash128::getString((PCHash128 *)((char *)this + 18720), &v16);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 401);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v16);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v16);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  if (a4)
  {
    for (i = *((_QWORD *)this + 2302); (OZElement *)i != (OZElement *)((char *)this + 18408); i = *(_QWORD *)(i + 8))
    {
      v12 = *(_QWORD *)(i + 16);
      if (!OZChannelBase::testFlag((OZChannelBase *)(v12 + 56), 8))
      {
        v14 = *(_QWORD *)(v12 + 48);
        v13 = v12 + 48;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD))(v14 + 16))(v13, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 24))(v13, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      }
    }
  }
  return OZTransformNode::writeBody((OZTransformNode *)this, a2, a3, a4, a5);
}

void sub_1B2E17AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZElement::writeBody(OZElement *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZElement::writeBody((OZElement *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZElement::parseBegin(OZElement *this, PCSerializerReadStream *a2)
{
  OZChannel *v4;
  double DefaultValue;

  *((_DWORD *)this + 4598) = 0;
  v4 = (OZChannel *)((char *)this + 11592);
  DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 11592));
  OZChannel::setValue(v4, MEMORY[0x1E0CA2E68], DefaultValue, 0);
  OZTransformNode::parseBegin((OZTransformNode *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZElementScope);
  *((_QWORD *)this + 2342) = *((_QWORD *)a2 + 13);
  return 1;
}

uint64_t `non-virtual thunk to'OZElement::parseBegin(OZElement *this, PCSerializerReadStream *a2)
{
  OZElement::parseBegin((OZElement *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZElement::parseEnd(OZElement *this, PCSerializerReadStream *a2)
{
  OZTransformNode::parseEnd((OZTransformNode *)this, a2);
  if (*((_QWORD *)this + 124))
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 122) + 16) + 24) = (char *)this + 6528;
  if (*((_DWORD *)a2 + 26) <= 2u)
    (*(void (**)(char *, double))(*((_QWORD *)this + 1745) + 776))((char *)this + 13960, 2.0);
  return 1;
}

uint64_t `non-virtual thunk to'OZElement::parseEnd(OZElement *this, PCSerializerReadStream *a2)
{
  OZElement::parseEnd((OZElement *)((char *)this - 48), a2);
  return 1;
}

uint64_t OZElement::parseElement(OZElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  OZChannelBase *v13;
  OZScene *v14;
  __int128 v16;
  PCSharedCount v17;
  unsigned int v18[2];
  PCSharedCount v19;

  PCSharedCount::PCSharedCount(&v19);
  *(_QWORD *)v18 = 0;
  OZTransformNode::parseElement((OZTransformNode *)this, a2, a3);
  v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case 70:
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v18);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v19);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v18[1]);
      v7 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v18[0]);
      if (v7)
      {
        if (v8)
        {
          v9 = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v8 + 168))(v8, &v19, v18[1]);
          v10 = v9;
          if (v9)
          {
            OZChannelBase::setID((OZChannelBase *)(v9 + 56), v18[1]);
            (*(void (**)(uint64_t, OZElement *))(*(_QWORD *)v10 + 256))(v10, this);
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1040))(v10);
            v11 = operator new(0x18uLL);
            v11[1] = (char *)this + 18408;
            v11[2] = v10;
            v12 = *((_QWORD *)this + 2301);
            *v11 = v12;
            *(_QWORD *)(v12 + 8) = v11;
            *((_QWORD *)this + 2301) = v11;
            ++*((_QWORD *)this + 2303);
            v13 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
            OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 18432), v13);
            v14 = (OZScene *)*((_QWORD *)this + 121);
            if (v14)
            {
              OZScene::registerNode(v14, (OZSceneNode *)v10);
              OZScene::addAllDependencies(*((_QWORD *)this + 121), (OZSceneNode *)v10);
            }
            PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v10 + 48));
          }
        }
      }
      break;
    case 400:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 18392);
      break;
    case 401:
      PCSharedCount::PCSharedCount(&v17);
      (*(void (**)(PCStreamElement *, PCSharedCount *))(*(_QWORD *)a3 + 16))(a3, &v17);
      PCHash128::PCHash128((PCHash128 *)&v16, (const PCString *)&v17);
      *((_OWORD *)this + 1170) = v16;
      PCString::~PCString((PCString *)&v17);
      break;
  }
  PCString::~PCString((PCString *)&v19);
  return 1;
}

void sub_1B2E17E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a12);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZElement::parseElement(OZElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZElement::parseElement((OZElement *)((char *)this - 48), a2, a3);
  return 1;
}

uint64_t OZElement::didFinishLoadingIntoScene(OZElement *this)
{
  OZSceneNode::didFinishLoadingIntoScene((OZSceneNode *)this);
  return OZElement::convertOldColorConversionChannels(this);
}

uint64_t OZElement::convertOldColorConversionChannels(OZElement *this)
{
  uint64_t result;
  OZChannel *v3;
  double v4;
  double v5;
  OZChannel *v6;
  int ValueAsInt;
  double v8;
  const CMTime *v9;
  OZChannel *v10;
  const CMTime *v11;

  result = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 2240))(this);
  if ((_DWORD)result)
  {
    v3 = (OZChannel *)((char *)this + 11592);
    result = OZChannel::getValueAsUint((OZChannel *)((char *)this + 11592), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)result == 2)
    {
      v6 = (OZChannel *)((char *)this + 12256);
      ValueAsInt = OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0);
      if (ValueAsInt < 2)
        return OZChannel::setValue(v3, MEMORY[0x1E0CA2E68], 3.0, 0);
      v8 = (double)(ValueAsInt + 1);
      v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
      v10 = v6;
LABEL_14:
      OZChannel::setValue(v10, v9, v8, 0);
      return OZChannel::setValue(v3, MEMORY[0x1E0CA2E68], 3.0, 0);
    }
    if ((_DWORD)result == 1)
    {
      v4 = 0.0;
      v5 = 3.0;
      switch(OZChannel::getValueAsUint((OZChannel *)((char *)this + 11744), MEMORY[0x1E0CA2E68], 0.0))
      {
        case 0u:
          v5 = (double)(*(int (**)(OZElement *))(*(_QWORD *)this + 2232))(this);
          break;
        case 2u:
          v5 = 0.0;
          goto LABEL_12;
        case 3u:
          v4 = 1.0;
          v5 = 1.0;
          break;
        case 5u:
          v5 = 4.0;
LABEL_12:
          v4 = 1.0;
          break;
        default:
          break;
      }
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11744), 138, 0);
      v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setValue((OZChannel *)((char *)this + 12000), MEMORY[0x1E0CA2E68], v4, 0);
      v10 = (OZChannel *)((char *)this + 12256);
      v9 = v11;
      v8 = v5;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'OZElement::didFinishLoadingIntoScene(OZElement *this)
{
  OZElement *v1;

  v1 = (OZElement *)((char *)this - 16);
  OZSceneNode::didFinishLoadingIntoScene((OZSceneNode *)((char *)this - 16));
  return OZElement::convertOldColorConversionChannels(v1);
}

OZElement *OZElement::cachedTexture@<X0>(OZElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 2345);
  *a2 = *((_QWORD *)this + 2344);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *OZElement::setCachedTexture(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(a1 + 18752), a2);
  *(_BYTE *)(a1 + 18745) = 0;
  return result;
}

uint64_t OZElement::cachedMetalTexture@<X0>(OZElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 2346);
  *a2 = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t OZElement::setCachedMetalTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 18768);
  result = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      result = *a2;
    }
    *(_QWORD *)(a1 + 18768) = result;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  *(_BYTE *)(a1 + 18745) = 0;
  return result;
}

uint64_t OZElement::isCachedRenderDirty(OZElement *this)
{
  return *((unsigned __int8 *)this + 18745);
}

OZElement *OZElement::clearCachedRender(OZElement *this)
{
  *((_BYTE *)this + 18745) = 1;
  return this;
}

OZElement *OZElement::cacheRenders(OZElement *this, int a2)
{
  _BYTE *v2;

  v2 = (char *)this + 18744;
  if (a2 && !*v2)
    *((_BYTE *)this + 18745) = 1;
  *v2 = a2;
  return this;
}

uint64_t OZElement::shouldCacheRenders(OZElement *this)
{
  return *((unsigned __int8 *)this + 18744);
}

float OZElement::getDimensions(OZElement *this, float *a2, float *a3, const OZRenderState *a4)
{
  double v11;
  float v12;
  float result;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  (*(void (**)(OZElement *, _QWORD *, const OZRenderState *))(*(_QWORD *)this + 1488))(this, v14, a4);
  v11 = *((double *)&v15 + 1);
  v12 = *(double *)&v15;
  *a2 = v12;
  result = v11;
  *a3 = result;
  return result;
}

float `non-virtual thunk to'OZElement::getDimensions(OZElement *this, float *a2, float *a3, const OZRenderState *a4)
{
  double v11;
  float v12;
  float result;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  (*(void (**)(char *, _QWORD *, const OZRenderState *))(*((_QWORD *)this - 816) + 1488))((char *)this - 6528, v14, a4);
  v11 = *((double *)&v15 + 1);
  v12 = *(double *)&v15;
  *a2 = v12;
  result = v11;
  *a3 = result;
  return result;
}

float64x2_t OZElement::getImageBoundsWithEffectsAndCrop(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  float64x2_t result;
  float64x2_t v9;
  int v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v19;
  int64x2_t v20;
  double v21;
  int8x16_t v22;
  float64_t v23;
  float64_t v24;
  float64_t v25;
  float64x2_t v26;
  double v27;
  double v28;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 416))(a1))
  {
    v6 = *(_QWORD **)(a1[123] + 16);
    v7 = 10;
  }
  else
  {
    v7 = 190;
    v6 = a1;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
  result.f64[0] = *(float64_t *)(a2 + 16);
  if (result.f64[0] >= 0.0)
  {
    result.f64[0] = *(float64_t *)(a2 + 24);
    if (result.f64[0] >= 0.0)
    {
      if (*(_BYTE *)(a3 + 240))
      {
        OZElement::getMaskBounds(a1, (_OWORD *)a2, a3, (uint64_t)&v26);
        result.f64[0] = v27;
        if (v27 >= 0.0)
        {
          result.f64[0] = v28;
          if (v28 >= 0.0)
            result = PCRect<double>::operator&=((float64x2_t *)a2, &v26);
        }
      }
      v25 = 0.0;
      v26.f64[0] = 0.0;
      v23 = 0.0;
      v24 = 0.0;
      v9 = 0uLL;
      if (*(_BYTE *)(a3 + 232))
      {
        v10 = (*(uint64_t (**)(_QWORD *, float64x2_t, __n128))(*a1 + 1608))(a1, result, (__n128)0);
        v9 = 0uLL;
        v11 = 0uLL;
        if (v10)
        {
          OZChannelCrop::getValue((OZChannelCrop *)(a1 + 2190), (const CMTime *)a3, v26.f64, &v25, &v24, &v23, 0.0);
          v13.f64[0] = v25;
          v12.f64[0] = v26.f64[0];
          v12.f64[1] = v24;
          __asm { FMOV            V2.2D, #0.5 }
          v19 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          *(int32x2_t *)&v12.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v12, _Q2), v19))));
          v13.f64[1] = v23;
          *(int32x2_t *)&v13.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v13, _Q2), v19))));
          v20.i64[0] = SLODWORD(v13.f64[0]);
          v20.i64[1] = SHIDWORD(v13.f64[0]);
          v9 = vcvtq_f64_s64(v20);
          v20.i64[0] = SLODWORD(v12.f64[0]);
          v20.i64[1] = SHIDWORD(v12.f64[0]);
          v11 = vcvtq_f64_s64(v20);
        }
      }
      else
      {
        v11 = 0uLL;
      }
      v21 = *(double *)(a2 + 8);
      *(double *)a2 = v11.f64[0] + *(double *)a2;
      *(double *)(a2 + 8) = v11.f64[1] + v21;
      v22 = (int8x16_t)vsubq_f64(*(float64x2_t *)(a2 + 16), vaddq_f64(v9, v11));
      result = (float64x2_t)vbicq_s8(v22, (int8x16_t)vcltzq_f64((float64x2_t)v22));
      *(float64x2_t *)(a2 + 16) = result;
    }
  }
  return result;
}

void OZElement::getMaskBounds(_QWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v12;
  uint64_t v13;
  char i;
  uint64_t v15;
  OZImageMask *v16;
  OZImageMask *v17;
  const void *MaskSource;
  void *v19;
  int ValueAsInt;
  unint64_t v21;
  const void *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  float64x2_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v30 = _Q0;
  *(_OWORD *)(a4 + 16) = _Q0;
  if (a1[2303])
  {
    v12 = a1 + 2301;
    v51 = 0x3FF0000000000000;
    v48 = 0x3FF0000000000000;
    v45 = 0x3FF0000000000000;
    v42 = 0x3FF0000000000000;
    v43 = 0u;
    v44 = 0u;
    v46 = 0u;
    v47 = 0u;
    v49 = 0u;
    v50 = 0u;
    (*(void (**)(_QWORD *, uint64_t *))(*a1 + 1264))(a1, &v42);
    v13 = a1[2302];
    if ((_QWORD *)v13 != v12)
    {
      for (i = 1; ; i = 0)
      {
        v40 = 0uLL;
        v41 = v30;
        v15 = *(_QWORD *)(v13 + 16);
        if (v15)
        {
          if (v16)
            break;
        }
        if ((*(_BYTE *)(v15 + 1024) & 8) != 0)
        {
          v21 = *(_QWORD *)(v15 + 8);
          *(_OWORD *)v31 = xmmword_1B355CCA0;
          if (OZFactory::isKindOfClass(v21, (int32x4_t *)v31))
          {
            v22 = *(const void **)(v13 + 16);
            if (v22)
            else
              v23 = 0;
            v25 = v23[25];
            v24 = (char *)(v23 + 25);
            (*(void (**)(char *, float64x2_t *, uint64_t))(v25 + 1488))(v24, &v40, a3);
            v39 = 0x3FF0000000000000;
            v36 = 0x3FF0000000000000;
            v33 = 0x3FF0000000000000;
            *(_QWORD *)v31 = 0x3FF0000000000000;
            *(_OWORD *)&v31[8] = 0u;
            v32 = 0u;
            v34 = 0u;
            v35 = 0u;
            v37 = 0u;
            v38 = 0u;
            (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)v24 + 1256))(v24, v31, a3);
            PCMatrix44Tmpl<double>::transformRect<double>((double *)v31, v40.f64, (uint64_t)&v40);
            ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v24 + 31784), MEMORY[0x1E0CA2E68], 0.0);
LABEL_19:
            v26 = ValueAsInt;
            PCMatrix44Tmpl<double>::transformRect<double>((double *)&v42, v40.f64, (uint64_t)&v40);
            switch(v26)
            {
              case 0:
                goto LABEL_14;
              case 1:
                if ((i & 1) != 0)
                {
                  v27 = a2[1];
                  *(_OWORD *)a4 = *a2;
                  *(_OWORD *)(a4 + 16) = v27;
                }
                PCRect<double>::subtract(a4, v40.f64);
                break;
              case 2:
                v28 = v41;
                *(float64x2_t *)a4 = v40;
                *(_OWORD *)(a4 + 16) = v28;
                break;
              case 3:
                PCRect<double>::operator&=((float64x2_t *)a4, &v40);
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_15;
          }
        }
        PCMatrix44Tmpl<double>::transformRect<double>((double *)&v42, v40.f64, (uint64_t)&v40);
LABEL_14:
        PCRect<double>::operator|=((float64x2_t *)a4, &v40);
LABEL_15:
        v13 = *(_QWORD *)(v13 + 8);
        if ((_QWORD *)v13 == v12)
          return;
      }
      v17 = v16;
      (*(void (**)(OZImageMask *, float64x2_t *, uint64_t))(*(_QWORD *)v16 + 1200))(v16, &v40, a3);
      if ((*(unsigned int (**)(OZImageMask *))(*(_QWORD *)v17 + 1248))(v17))
      {
        MaskSource = OZImageMask::getMaskSource(v17);
        v39 = 0x3FF0000000000000;
        v36 = 0x3FF0000000000000;
        v33 = 0x3FF0000000000000;
        *(_QWORD *)v31 = 0x3FF0000000000000;
        *(_OWORD *)&v31[8] = 0u;
        v32 = 0u;
        v34 = 0u;
        v35 = 0u;
        v37 = 0u;
        v38 = 0u;
        (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)v19 + 1256))(v19, v31, a3);
        PCMatrix44Tmpl<double>::transformRect<double>((double *)v31, v40.f64, (uint64_t)&v40);
      }
      ValueAsInt = (*(uint64_t (**)(OZImageMask *))(*(_QWORD *)v17 + 1232))(v17);
      goto LABEL_19;
    }
  }
}

float64x2_t OZElement::getBounds(uint64_t a1, float64x2_t *a2, uint64_t a3)
{
  float64x2_t result;
  BOOL v7;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1560))(a1);
  result.f64[0] = a2[1].f64[0];
  if (result.f64[0] >= 0.0)
  {
    result.f64[0] = a2[1].f64[1];
    if (result.f64[0] >= 0.0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1600))(a1))
        v7 = *(_QWORD *)(a3 + 56) == a1;
      else
        v7 = 1;
      if (!v7 && *(_BYTE *)(a3 + 233) != 0)
      {
        v20 = 0uLL;
        v19 = 0uLL;
        v18 = 0uLL;
        v17 = 0uLL;
        OZElement::getFourCornerPointsInObjectSpace(a1, (CMTime *)a3, a2, v20.f64, v19.f64, &v18, v17.f64);
        v9 = vbslq_s8((int8x16_t)vcgtq_f64(v17, v18), (int8x16_t)v17, (int8x16_t)v18);
        v10 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v9, v19), v9, (int8x16_t)v19);
        v11 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v10, v20), v10, (int8x16_t)v20);
        v12 = vbslq_s8((int8x16_t)vcgtq_f64(v18, v17), (int8x16_t)v17, (int8x16_t)v18);
        v13 = vbslq_s8((int8x16_t)vcgtq_f64(v19, (float64x2_t)v12), v12, (int8x16_t)v19);
        v14 = vbslq_s8((int8x16_t)vcgtq_f64(v20, (float64x2_t)v13), v13, (int8x16_t)v20);
        v15 = (int8x16_t)vcgtq_f64((float64x2_t)v14, (float64x2_t)v11);
        v16 = (float64x2_t)vbslq_s8(v15, v14, v11);
        result = (float64x2_t)vbslq_s8(v15, v11, v14);
        *a2 = result;
        a2[1] = vsubq_f64(v16, result);
      }
    }
  }
  return result;
}

double OZElement::getFourCornerPointsInObjectSpace(uint64_t a1, CMTime *a2, float64x2_t *a3, double *a4, double *a5, float64x2_t *a6, double *a7)
{
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  float64_t v23;
  double v24;
  double v25;
  double v26;
  double result;
  float64_t v28;
  CMTime v29;

  v29 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 14840), &v29, 0.0);
  v14 = v13;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 14992), &v29, 0.0);
  v15 = a3->f64[1];
  *a4 = v14 + a3->f64[0];
  a4[1] = v16 + v15;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 15544), &v29, 0.0);
  v18 = v17;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 15696), &v29, 0.0);
  v19 = a3->f64[1];
  *a5 = v18 + a3->f64[0] + a3[1].f64[0];
  a5[1] = v20 + v19;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 16248), &v29, 0.0);
  v28 = v21;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 16400), &v29, 0.0);
  v22.f64[0] = v28;
  v22.f64[1] = v23;
  *a6 = vaddq_f64(v22, vaddq_f64(*a3, a3[1]));
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 16952), &v29, 0.0);
  v25 = v24;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 17104), &v29, 0.0);
  result = v26 + a3->f64[1] + a3[1].f64[1];
  *a7 = v25 + a3->f64[0];
  a7[1] = result;
  return result;
}

double `non-virtual thunk to'OZElement::getBounds(uint64_t a1, float64x2_t *a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&OZElement::getBounds(a1 - 6528, a2, a3);
  return result;
}

uint64_t OZElement::getBoundsForLinkBehavior@<X0>(OZElement *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  return (*(uint64_t (**)(OZElement *, uint64_t, const OZRenderState *))(*(_QWORD *)this + 1480))(this, a3, a2);
}

double PCRect<double>::subtract(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v20;
  double v21;
  double v23;
  double v27;
  double v29;
  double v30;

  *(_QWORD *)&_Q0 = *(_QWORD *)(a1 + 16);
  if (*(double *)&_Q0 < 0.0)
    return *(double *)&_Q0;
  v3 = *(double *)(a1 + 24);
  if (v3 < 0.0)
    return *(double *)&_Q0;
  v4 = a2[2];
  if (v4 < 0.0)
    return *(double *)&_Q0;
  v5 = a2[3];
  if (v5 < 0.0)
    return *(double *)&_Q0;
  v6 = *a2;
  v7 = *(double *)a1;
  if (*a2 <= *(double *)a1)
  {
    v14 = v4 + v6;
    v15 = *(double *)&_Q0 + v7;
    v16 = a2[1];
    v9 = *(double *)(a1 + 8);
    if (v16 <= v9)
    {
      v17 = v16 + v5;
      v12 = v9 + v3;
      if (v14 >= v15 && v17 >= v12)
      {
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 16) = _Q0;
        return *(double *)&_Q0;
      }
      if (v14 < v15)
      {
        if (v17 < v12)
          return *(double *)&_Q0;
        goto LABEL_35;
      }
    }
    else if (v14 < v15)
    {
      return *(double *)&_Q0;
    }
    if (v16 + v5 > v9 && v16 < v9)
      v20 = v16 + v5;
    else
      v20 = *(double *)(a1 + 8);
    v21 = v9 + v3;
    if (v16 + v5 > v21 && v16 < v21)
      v23 = a2[1];
    else
      v23 = v21;
    *(double *)&_Q0 = v23 - v20;
    *(double *)(a1 + 8) = v20;
    *(double *)(a1 + 16) = v15 - v7;
    *(_QWORD *)(a1 + 24) = _Q0;
  }
  else
  {
    v8 = a2[1];
    v9 = *(double *)(a1 + 8);
    v10 = v8 > v9;
    v11 = v8 + v5;
    v12 = v9 + v3;
    if (!v10 && v11 >= v12)
    {
LABEL_35:
      v27 = v4 + v6;
      if (v27 > v7 && v6 < v7)
        v29 = v27;
      else
        v29 = *(double *)a1;
      v30 = *(double *)&_Q0 + v7;
      if (v27 > v30 && v6 < v30)
        v30 = *a2;
      *(double *)&_Q0 = v30 - v29;
      *(double *)a1 = v29;
      *(_QWORD *)(a1 + 16) = _Q0;
      *(double *)(a1 + 24) = v12 - v9;
    }
  }
  return *(double *)&_Q0;
}

void OZElement::gridFitOffset(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL OZElement::getProjectedBounds(OZElement *a1, uint64_t a2, double *a3, uint64_t a4)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  double v27[2];
  __int128 v28;

  v27[0] = 0.0;
  v27[1] = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v28 = _Q0;
  (*(void (**)(OZElement *, double *, uint64_t))(*(_QWORD *)a1 + 1488))(a1, v27, a4);
  v26 = 0x3FF0000000000000;
  v23 = 0x3FF0000000000000;
  v20 = 0x3FF0000000000000;
  v17 = 0x3FF0000000000000;
  v18 = 0u;
  v19 = 0u;
  v21 = 0u;
  v22 = 0u;
  v24 = 0u;
  v25 = 0u;
  if (OZElement::isOwner360(a1))
  {
    v15 = 0;
    v16 = 0;
    v14 = 0;
    (*(void (**)(OZElement *, uint64_t *, uint64_t *, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a1 + 1312))(a1, &v16, &v15, &v14, a4, 0);
    v18 = 0u;
    v19 = 0u;
    v17 = v16;
    v20 = v15;
    v21 = 0u;
    v22 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0x3FF0000000000000;
    v26 = 0x3FF0000000000000;
  }
  else
  {
    (*(void (**)(OZElement *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1256))(a1, &v17, a4);
  }
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v17, a3);
  return PCMatrix44Tmpl<double>::transformRect<double>((double *)&v17, v27, a2);
}

BOOL OZElement::isOwner360(OZElement *this)
{
  const void *v1;
  OZGroup *v2;

  v1 = (const void *)*((_QWORD *)this + 120);
  return v1
}

BOOL OZElement::getDocumentSpaceCorners(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  float64x2_t v23[2];

  v23[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v23[1] = _Q0;
  (*(void (**)(_QWORD *, float64x2_t *))(a1[816] + 32))(a1 + 816, v23);
  corners<double>(v23, a2);
  v11 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  if ((_DWORD)v11)
  {
    v22 = 0x3FF0000000000000;
    v19 = 0x3FF0000000000000;
    v16 = 0x3FF0000000000000;
    v13 = 0x3FF0000000000000;
    v14 = 0u;
    v15 = 0u;
    v17 = 0u;
    v18 = 0u;
    v20 = 0u;
    v21 = 0u;
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 1256))(a1, &v13, a3);
    transform<double>((double *)&v13, a2, a2);
  }
  return v11 != 0;
}

void corners<double>(float64x2_t *a1, uint64_t *a2)
{
  float64_t v4;
  float64_t v5;
  float64x2_t v6;
  uint64_t v7;

  std::vector<PCVector3<double>>::resize(a2, 0);
  if (a1[1].f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    std::vector<PCVector3<double>>::reserve(a2, 4uLL);
    v4 = a1->f64[1] + a1[1].f64[1];
    v6.f64[0] = a1->f64[0];
    v6.f64[1] = v4;
    v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
    v6 = vaddq_f64(*a1, a1[1]);
    v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
    v5 = a1->f64[1];
    v6.f64[0] = a1->f64[0] + a1[1].f64[0];
    v6.f64[1] = v5;
    v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
    v6 = *a1;
    v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
  }
}

void transform<double>(double *a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  v6 = -1431655765 * ((uint64_t)(a2[1] - *a2) >> 3);
  std::vector<PCVector3<double>>::resize(a3, v6);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = 24 * v6;
    do
    {
      PCMatrix44Tmpl<double>::transform<double>(a1, (double *)(*a2 + v7), (double *)(*a3 + v7));
      v7 += 24;
    }
    while (v8 != v7);
  }
}

BOOL OZElement::getDocumentSpaceBoundary(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  _BOOL8 DocumentSpaceCorners;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  DocumentSpaceCorners = OZElement::getDocumentSpaceCorners(a1, (uint64_t *)&__p, a3);
  if (DocumentSpaceCorners)
  {
    bounds<double>((uint64_t *)&__p, (uint64_t)a2);
  }
  else
  {
    a2[1] = xmmword_1B304F270;
    a2[2] = xmmword_1B304F270;
    *a2 = xmmword_1B304F270;
  }
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return DocumentSpaceCorners;
}

void sub_1B2E18EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *bounds<double>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v14;

  v2 = *result;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((result[1] - *result) >> 3);
  *(_OWORD *)(a2 + 16) = xmmword_1B304F270;
  *(_OWORD *)(a2 + 32) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  if ((int)v3 >= 1)
  {
    v3 = v3;
    v4 = (double *)(v2 + 16);
    v5 = -1.0;
    v6 = 1.0;
    v7 = 1.0;
    v8 = -1.0;
    v9 = 1.0;
    v10 = -1.0;
    do
    {
      v11 = *(v4 - 2);
      if (v6 <= v5 && v7 <= v8 && v9 <= v10)
      {
        if (v6 >= v11)
          v6 = *(v4 - 2);
        if (v5 > v11)
          v11 = v5;
        v14 = *(v4 - 1);
        if (v7 >= v14)
          v7 = *(v4 - 1);
        if (v8 <= v14)
          v8 = *(v4 - 1);
        if (v9 >= *v4)
          v9 = *v4;
        if (v10 <= *v4)
          v10 = *v4;
      }
      else
      {
        v8 = *(v4 - 1);
        v10 = *v4;
        v6 = *(v4 - 2);
        v7 = v8;
        v9 = *v4;
      }
      *(double *)a2 = v6;
      *(double *)(a2 + 8) = v11;
      *(double *)(a2 + 16) = v7;
      *(double *)(a2 + 24) = v8;
      v4 += 3;
      v5 = v11;
      *(double *)(a2 + 32) = v9;
      *(double *)(a2 + 40) = v10;
      --v3;
    }
    while (v3);
  }
  return result;
}

double OZElement::getLocalVolume(uint64_t a1, uint64_t a2)
{
  double result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;

  v12 = 0.0;
  v13 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v14 = _Q0;
  (*(void (**)(uint64_t, double *))(*(_QWORD *)a1 + 1488))(a1, &v12);
  result = v12;
  v9 = v13;
  v10 = v12 + *(double *)&v14;
  v11 = v13 + *((double *)&v14 + 1);
  *(double *)a2 = v12;
  *(double *)(a2 + 8) = v10;
  *(double *)(a2 + 16) = v9;
  *(double *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t OZElement::getImageBoundsWithEffects(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = a1;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 416))(a1))
  {
    v5 = *(_QWORD **)(v5[123] + 16);
    v6 = 10;
  }
  else
  {
    v6 = 190;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v5 + 8 * v6))(v5, a2, a3);
}

uint64_t `non-virtual thunk to'OZElement::getImageBoundsWithEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)(a1 - 6528);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 - 6528) + 416))(a1 - 6528))
  {
    v6 = *(_QWORD **)(*(_QWORD *)(a1 - 5544) + 16);
    v7 = 10;
  }
  else
  {
    v7 = 190;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v6 + 8 * v7))(v6, a2, a3);
}

void OZElement::getFourCornerPointsInObjectSpace(uint64_t a1, __int128 *a2, double *a3, double *a4, float64x2_t *a5, double *a6)
{
  __int128 v12;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  CMTime v40;

  v12 = *a2;
  v40.epoch = *((_QWORD *)a2 + 2);
  v38 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v39 = _Q0;
  *(_OWORD *)&v40.value = v12;
  (*(void (**)(uint64_t, float64x2_t *, __int128 *))(*(_QWORD *)a1 + 1560))(a1, &v38, a2);
  if (*((_BYTE *)a2 + 233))
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14840), &v40, 0.0);
    v19 = v18;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14992), &v40, 0.0);
    v21 = v20 + v38.f64[1];
    *a3 = v19 + v38.f64[0];
    a3[1] = v21;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15544), &v40, 0.0);
    v23 = v22;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15696), &v40, 0.0);
    v25 = v24 + v38.f64[1];
    *a4 = v23 + v38.f64[0] + v39.f64[0];
    a4[1] = v25;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16248), &v40, 0.0);
    v37 = v26;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16400), &v40, 0.0);
    v27.f64[0] = v37;
    v27.f64[1] = v28;
    *a5 = vaddq_f64(v27, vaddq_f64(v38, v39));
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16952), &v40, 0.0);
    v30 = v29;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 17104), &v40, 0.0);
    v31 = v30 + v38.f64[0];
    v33 = v32 + v38.f64[1] + v39.f64[1];
  }
  else
  {
    v34 = v38.f64[1];
    v31 = v38.f64[0];
    *a3 = v38.f64[0];
    a3[1] = v34;
    v35 = v39.f64[1];
    v36 = v31 + v39.f64[0];
    *a4 = v31 + v39.f64[0];
    a4[1] = v34;
    v33 = v34 + v35;
    a5->f64[0] = v36;
    a5->f64[1] = v33;
  }
  *a6 = v31;
  a6[1] = v33;
}

uint64_t OZElement::getFourCornerMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 v17;
  double v18[2];
  double v19[2];
  double v20[2];
  double v21[2];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1600))(a1))
    _ZF = *(_BYTE *)(a3 + 233) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    result = 1;
    *(_OWORD *)(a2 + 104) = 0u;
  }
  else
  {
    v21[0] = 0.0;
    v21[1] = 0.0;
    v20[0] = 0.0;
    v20[1] = 0.0;
    v19[0] = 0.0;
    v19[1] = 0.0;
    v18[0] = 0.0;
    v18[1] = 0.0;
    (*(void (**)(uint64_t, uint64_t, double *, double *, double *, double *))(*(_QWORD *)a1 + 1720))(a1, a3, v21, v20, v19, v18);
    v16 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v17 = _Q0;
    (*(void (**)(uint64_t, float64x2_t *, uint64_t))(*(_QWORD *)a1 + 1560))(a1, &v16, a3);
    v15 = v16;
    v14.f64[0] = v16.f64[0] + *(double *)&v17;
    v14.f64[1] = v16.f64[1];
    v13.f64[0] = v16.f64[0] + *(double *)&v17;
    v13.f64[1] = v16.f64[1] + *((double *)&v17 + 1);
    v12.f64[0] = v16.f64[0];
    v12.f64[1] = v16.f64[1] + *((double *)&v17 + 1);
    return PCComputeQuadToQuadProjectionMatrix(&v15, &v14, &v13, &v12, v21, v20, v19, v18, a2);
  }
  return result;
}

void OZElement::getCrop(OZElement *this, const CMTime *a2, double *a3, double *a4, double *a5, double *a6)
{
  OZChannelCrop::getValue((OZChannelCrop *)((char *)this + 17520), a2, a3, a4, a5, a6, 0.0);
}

void OZElement::getScale(OZElement *this, double *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  const void *v12;
  OZGroup *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v12 = (const void *)*((_QWORD *)this + 120);
  if (v12
  {
    v14 = *((_QWORD *)this + 121);
    v15 = *(_DWORD *)(v14 + 344);
    v16 = *(_DWORD *)(v14 + 348);
    v17 = 0;
    (*(void (**)(OZElement *, char *, uint64_t *, const CMTime *))(*(_QWORD *)this + 1472))(this, (char *)&v17 + 4, &v17, a5);
    *a2 = (double)v15 / *((float *)&v17 + 1);
    *a3 = (double)v16 / *(float *)&v17;
    *a4 = 1.0;
  }
  else
  {
    OZTransformNode::getScale((OZTransformNode *)this, a2, a3, a4, a5, a6);
  }
}

uint64_t OZElement::getScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1312))(a1, a2, a2 + 8, a2 + 16, a3, a4);
}

uint64_t *OZElement::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, uint64_t a4, int a5, int a6)
{
  OZScene *v17;
  uint64_t *result;
  double v19;
  double v20;
  double v21;
  double v22;
  _BYTE v23[16];
  double v24[16];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  double v35;
  double v36;
  __int128 v37;

  v35 = 0.0;
  v36 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v37 = _Q0;
  (*(void (**)(uint64_t, double *, uint64_t))(*(_QWORD *)a1 + 1488))(a1, &v35, a4);
  v34 = 0x3FF0000000000000;
  v31 = 0x3FF0000000000000;
  v28 = 0x3FF0000000000000;
  v25 = 0x3FF0000000000000;
  v26 = 0u;
  v27 = 0u;
  v29 = 0u;
  v30 = 0u;
  v32 = 0u;
  v33 = 0u;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1256))(a1, &v25, a4);
  v17 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v17, a2, v24);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v25, v24);
  result = (uint64_t *)PCMatrix44Tmpl<double>::transformRect<double>((double *)&v25, &v35, (uint64_t)&v35);
  if ((_DWORD)result)
  {
    if (v35 >= -2147483650.0 && v35 <= 2147483650.0)
    {
      v19 = v35 + *(double *)&v37;
      if (v35 + *(double *)&v37 >= -2147483650.0 && v19 <= 2147483650.0 && v36 >= -2147483650.0 && v36 <= 2147483650.0)
      {
        v20 = v36 + *((double *)&v37 + 1);
        if (v36 + *((double *)&v37 + 1) >= -2147483650.0
          && *((double *)&v37 + 1) >= 0.0
          && *(double *)&v37 >= 0.0
          && v20 <= 2147483650.0)
        {
          if (a5)
          {
            OZSnap::OZSnap((OZSnap *)v23, 258, (v35 + v19) * 0.5, v36, v20);
            std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
            OZSnap::OZSnap((OZSnap *)v23, 514, (v36 + v36 + *((double *)&v37 + 1)) * 0.5, v35, v35 + *(double *)&v37);
            result = std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
          }
          if (a6)
          {
            v21 = *(double *)&v37;
            if (*(double *)&v37 > 2.0)
            {
              v21 = *(double *)&v37 - (v35 + 1.0 - v35) + -2.0;
              v35 = v35 + 1.0;
              *(double *)&v37 = v21;
            }
            v22 = *((double *)&v37 + 1);
            if (*((double *)&v37 + 1) > 2.0)
            {
              v22 = *((double *)&v37 + 1) - (v36 + 1.0 - v36) + -2.0;
              v36 = v36 + 1.0;
              *((double *)&v37 + 1) = v22;
            }
            if (v21 >= 0.0 && v22 >= 0.0)
            {
              OZSnap::OZSnap((OZSnap *)v23, 257, v35, v36, v36 + v22);
              std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
              OZSnap::OZSnap((OZSnap *)v23, 260, v35 + *(double *)&v37, v36, v36 + *((double *)&v37 + 1));
              std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
              OZSnap::OZSnap((OZSnap *)v23, 513, v36, v35, v35 + *(double *)&v37);
              std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
              OZSnap::OZSnap((OZSnap *)v23, 516, v36 + *((double *)&v37 + 1), v35, v35 + *(double *)&v37);
              return std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
            }
          }
        }
      }
    }
  }
  return result;
}

void OZElement::getOpacity(OZElement *this, const CMTime *a2, const OZRenderNode *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6680), a2, 0.0);
}

uint64_t OZElement::setOpacity(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 6680), a3, a2, 0);
}

uint64_t OZElement::getBlendMode(OZElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 6832), a2, 0.0);
}

_QWORD *OZElement::getBlendOptions@<X0>(OZElement *this@<X0>, CMTime *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int ValueAsInt;
  int v10;
  double v11;
  float v12;
  double v13;
  float v14;
  double v15;
  float v16;
  double v17;
  float v18;
  PCBlendOptions *v19;
  PC_Sp_counted_base *v20;
  PCSharedCount v22;
  PCSharedCount v23;
  CMTime v24;
  CMTime v25;
  PC_Sp_counted_base *var0;
  PCSharedCount v27;
  uint64_t v28;
  uint64_t *v29;
  PCSharedCount v30;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 2096))(&v28);
  var0 = 0;
  PCSharedCount::PCSharedCount(&v27);
  v25 = *a2;
  if (&v28 != v29)
  {
    v6 = &v28;
    do
    {
      v7 = *(_QWORD *)(*v6 + 16);
      v24 = v25;
      if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 280))(v7, &v24, 0, 1, 1))
      {
        (*(void (**)(PCSharedCount *__return_ptr, _QWORD, CMTime *))(**(_QWORD **)(*v6 + 16) + 688))(&v22, *(_QWORD *)(*v6 + 16), a2);
        var0 = v22.var0;
        PCSharedCount::PCSharedCount(&v30, &v23);
        PCSharedCount::operator=((uint64_t *)&v27, (uint64_t *)&v30);
        PCSharedCount::~PCSharedCount(&v30);
        PCSharedCount::~PCSharedCount(&v23);
        if (var0)
          goto LABEL_20;
      }
      v6 = (uint64_t *)*v6;
    }
    while (v6 != v29);
  }
  if ((*(unsigned int (**)(OZElement *, CMTime *))(*(_QWORD *)this + 1576))(this, &v25) != 35)
  {
LABEL_20:
    a3->var0 = var0;
    PCSharedCount::PCSharedCount(a3 + 1, &v27);
    goto LABEL_21;
  }
  v8 = operator new();
  *(_QWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 1;
  *(_QWORD *)v8 = &unk_1E658C800;
  *(_QWORD *)(v8 + 32) = &unk_1E658C830;
  v22.var0 = (PC_Sp_counted_base *)v8;
  PCSharedCount::PCSharedCount(&v23, (PCShared_base *)(v8 + 32));
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 7824), &v25, 0.0);
  v10 = PCBlend::lrBlendToPCBlend(ValueAsInt);
  if (!v22.var0)
    throw_PCNullPointerException(1);
  *((_DWORD *)v22.var0 + 2) = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7216), &v25, 0.0);
  if (!v22.var0)
    throw_PCNullPointerException(1);
  v12 = v11 * 0.5;
  *((float *)v22.var0 + 3) = v12;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7368), &v25, 0.0);
  if (!v22.var0)
    throw_PCNullPointerException(1);
  v14 = v13;
  *((float *)v22.var0 + 4) = v14;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7520), &v25, 0.0);
  if (!v22.var0)
    throw_PCNullPointerException(1);
  v16 = v15;
  *((float *)v22.var0 + 5) = v16;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 7672), &v25, 0.0);
  if (!v22.var0)
    throw_PCNullPointerException(1);
  v18 = v17;
  *((float *)v22.var0 + 6) = v18;
  v19 = (PCBlendOptions *)operator new();
  PCBlendOptions::PCBlendOptions(v19);
  a3->var0 = (PC_Sp_counted_base *)v19;
  PCSharedCount::PCSharedCount(a3 + 1, (PCBlendOptions *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
  v20 = a3->var0;
  if (!a3->var0)
    throw_PCNullPointerException(1);
  *((_DWORD *)v20 + 2) = 35;
  PCPtr<void>::operator=<PCLightWrapOptions>((_QWORD *)v20 + 2, &v22);
  PCSharedCount::~PCSharedCount(&v23);
LABEL_21:
  PCSharedCount::~PCSharedCount(&v27);
  return std::__list_imp<unsigned int>::clear(&v28);
}

void sub_1B2E19B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  PCSharedCount *v13;
  va_list va;

  va_start(va, a13);
  PCSharedCount::~PCSharedCount(v13);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PCBlendOptions::PCBlendOptions(PCBlendOptions *this)
{
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 1;
  *(_QWORD *)this = &unk_1E658C878;
  *((_QWORD *)this + 4) = &unk_1E658C8A8;
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_DWORD *)this + 2) = 0;
}

void sub_1B2E19C88(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;

  *(_QWORD *)(v1 + 32) = &off_1E65EB048;
  *(_BYTE *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

_QWORD *PCPtr<void>::operator=<PCLightWrapOptions>(_QWORD *a1, const PCSharedCount *a2)
{
  PCSharedCount *v3;
  PCSharedCount v5;
  PCSharedCount v6;

  if (a2->var0)
  {
    *a1 = (char *)a2->var0 + *(_QWORD *)(*(_QWORD *)a2->var0 - 16);
    v3 = &v5;
    PCSharedCount::PCSharedCount(&v5, a2 + 1);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v5);
  }
  else
  {
    *a1 = 0;
    v3 = &v6;
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v6);
  }
  PCSharedCount::~PCSharedCount(v3);
  return a1;
}

void sub_1B2E19D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void OZElement::setBlendMode(uint64_t a1, unsigned int a2, CMTime *a3)
{
  unsigned int v8;
  OZChannel *v9;
  int ValueAsInt;
  uint64_t v11;

  if (a2 == 50 || a2 == 43 || a2 == 40 || (a2 & 0xFFFFFFFB) == 41)
    v8 = 0;
  else
    v8 = a2;
  v9 = (OZChannel *)(a1 + 6832);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 6832), a3, 0.0);
  OZChannel::setValue(v9, a3, (double)v8, 0);
  if (v8 == 35)
  {
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7088), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7824), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7216), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7368), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7520), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7672), 2, 0);
  }
  else
  {
    if (ValueAsInt != 35)
      return;
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7088), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7824), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7216), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7368), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7520), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7672), 2, 0);
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
  {
    if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) + 1584))
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
      OZDocument::postNotification(*(OZDocument **)(v11 + 1584), 32);
    }
  }
}

BOOL OZElement::getPreserveTransparency(OZElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 8232), a2, 0.0) != 0;
}

BOOL OZElement::isFourCornerPinned(OZElement *this)
{
  OZChannelBase *v1;
  int isEnabled;
  _BOOL8 result;

  v1 = (OZChannelBase *)((char *)this + 14568);
  isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 14568), 0, 1);
  result = 0;
  if (isEnabled)
    return !OZChannelBase::testFlag(v1, 2);
  return result;
}

BOOL OZElement::isCropped(OZElement *this)
{
  OZChannelBase *v1;
  int isEnabled;
  _BOOL8 result;

  v1 = (OZChannelBase *)((char *)this + 17520);
  isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 17520), 0, 1);
  result = 0;
  if (isEnabled)
    return !OZChannelBase::testFlag(v1, 2);
  return result;
}

uint64_t OZElement::alwaysCrop()
{
  return 0;
}

BOOL OZElement::isDropShadowEnabled(OZElement *this)
{
  OZChannelBase *v1;
  int isEnabled;
  _BOOL8 result;

  v1 = (OZChannelBase *)((char *)this + 12672);
  isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 12672), 0, 1);
  result = 0;
  if (isEnabled)
    return !OZChannelBase::testFlag(v1, 2);
  return result;
}

uint64_t OZElement::isFlattened(OZElement *this)
{
  return 1;
}

uint64_t OZElement::getDimensionType(OZElement *this)
{
  return 0;
}

uint64_t OZElement::doEffectsForcePrecomp(OZElement *this, CMTime *a2)
{
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v12;
  CMTimeEpoch epoch;
  _QWORD v14[3];

  v14[0] = v14;
  v14[1] = v14;
  v14[2] = 0;
  v4 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1640))(this);
  v5 = (char *)this + 976;
  if ((OZElement *)((char *)this + 976) == *((OZElement **)this + 123))
  {
LABEL_9:
    v10 = 0;
  }
  else
  {
    v6 = v4;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v5 + 16);
      if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 272))(v7, 0, 1) & 1) != 0)
      {
        v12 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        v8 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 696))(v7, &v12);
        v9 = v6 ? v8 : 0;
        if ((v9 & 1) == 0)
          break;
      }
      v5 = *(char **)v5;
      if (v5 == *((char **)this + 123))
        goto LABEL_9;
    }
    v10 = 1;
  }
  std::__list_imp<unsigned int>::clear(v14);
  return v10;
}

void sub_1B2E1A148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZElement::isPrecomposed(OZElement *this, const CMTime *a2)
{
  return 0;
}

BOOL OZElement::canReflect(OZElement *this)
{
  const void *v2;
  void *v3;

  if ((*((_BYTE *)this + 1024) & 8) != 0)
    return 0;
  v2 = (const void *)*((_QWORD *)this + 120);
  if (v2
  {
    return (*(unsigned int (**)(void *))(*(_QWORD *)v3 + 1640))(v3) == 1;
  }
  else
  {
    return (*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1640))(this) != 2;
  }
}

uint64_t OZElement::canFourCorner(OZElement *this)
{
  return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
}

uint64_t OZElement::canCrop(OZElement *this)
{
  return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
}

uint64_t OZElement::canCastReflection(OZElement *this)
{
  if ((*((_BYTE *)this + 1024) & 8) != 0)
    return 0;
  else
    return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
}

uint64_t OZElement::updateHiddenChannels(OZElement *this, char a2)
{
  int v4;
  int v5;
  int updated;
  int v7;

  v4 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1832))(this);
  v5 = OZElement::setReflectionChannels(this);
  updated = OZElement::updateHiddenFourCornerChannels(this, a2);
  v7 = OZElement::updateHiddenCropChannels(this, a2);
  return OZElement::updateHiddenCastsReflectionChannel(this, a2) | v7 | updated | v5 | v4;
}

uint64_t OZElement::setReflectionChannels(OZElement *this)
{
  OZChannelBase *v2;
  _BOOL4 v3;
  int v4;
  int v5;

  v2 = (OZChannelBase *)((char *)this + 9936);
  v3 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9936), 2);
  v4 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1672))(this);
  v5 = v3 ^ v4;
  if (((v3 ^ v4) & 1) == 0)
  {
    if ((v4 & 1) != 0)
      OZChannelBase::resetFlag(v2, 2, 0);
    else
      OZChannelBase::setFlag(v2, 2, 0);
  }
  return v5 ^ 1u;
}

uint64_t OZElement::updateHiddenFourCornerChannels(OZElement *this, char a2)
{
  OZChannelBase *v4;
  _BOOL4 v5;
  int v6;
  int v7;

  v4 = (OZChannelBase *)((char *)this + 14568);
  v5 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 14568), 2);
  v6 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1680))(this);
  v7 = v5 ^ v6;
  if (((v5 ^ v6) & 1) == 0)
  {
    if ((v6 & 1) != 0)
      OZChannelBase::resetFlag(v4, 2, a2);
    else
      OZChannelBase::setFlag(v4, 2, a2);
  }
  return v7 ^ 1u;
}

uint64_t OZElement::updateHiddenCropChannels(OZElement *this, char a2)
{
  OZChannelBase *v4;
  _BOOL4 v5;
  int v6;
  int v7;

  v4 = (OZChannelBase *)((char *)this + 17520);
  v5 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 17520), 2);
  v6 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1688))(this);
  v7 = v5 ^ v6;
  if (((v5 ^ v6) & 1) == 0)
  {
    if ((v6 & 1) != 0)
      OZChannelBase::resetFlag(v4, 2, a2);
    else
      OZChannelBase::setFlag(v4, 2, a2);
  }
  return v7 ^ 1u;
}

uint64_t OZElement::updateHiddenCastsReflectionChannel(OZElement *this, char a2)
{
  OZChannelBase *v4;
  _BOOL4 v5;
  int v6;
  int v7;

  v4 = (OZChannelBase *)((char *)this + 11208);
  v5 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 11208), 2);
  v6 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1696))(this);
  v7 = v5 ^ v6;
  if (((v5 ^ v6) & 1) == 0)
  {
    if ((v6 & 1) != 0)
      OZChannelBase::resetFlag(v4, 2, a2);
    else
      OZChannelBase::setFlag(v4, 2, a2);
  }
  return v7 ^ 1u;
}

uint64_t OZElement::getColorConversionType(OZElement *this)
{
  int ValueAsInt;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 12000), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 1)
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 12256), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt)
    return 3;
  return (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 2232))(this);
}

void OZElement::getColorConversionPeakNits(OZElement *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 12512), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t OZElement::wantsColorHeadingVisible(OZElement *this)
{
  return 0;
}

uint64_t OZElement::getAutomaticConversionType(OZElement *this)
{
  return 3;
}

void OZElement::getDropShadowDistance(OZElement *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 14112), a2, 0.0);
}

void OZElement::getDropShadowBlur(OZElement *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 13960), a2, 0.0);
}

void OZElement::getDropShadowAngle(OZElement *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 14264), a2, 0.0);
}

void OZElement::getDropShadowOpacity(OZElement *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 13808), a2, 0.0);
}

CGColorSpace **OZElement::getDropShadowColor@<X0>(OZElement *this@<X0>, const CMTime *a2@<X1>, PCColor *a3@<X8>)
{
  PCColor::PCColor(a3);
  return OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)((char *)this + 12800), a2, a3, 0.0);
}

void sub_1B2E1A608(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

OZChannelBase *OZElement::setDropShadowEnable(OZElement *this, int a2, const CMTime *a3)
{
  return OZChannelBase::enable((OZChannelBase *)((char *)this + 12672), a2, 0);
}

uint64_t OZElement::setDropShadowDistance(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 14112), a3, a2, 0);
}

uint64_t OZElement::setDropShadowBlur(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 13960), a3, a2, 0);
}

uint64_t OZElement::setDropShadowAngle(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 14264), a3, a2, 0);
}

uint64_t OZElement::setDropShadowColor(OZElement *this, PCColor *a2, const CMTime *a3)
{
  return OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)((char *)this + 12800), a3, a2, 0);
}

double OZElement::projectPointToObject(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, double *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  double v11;
  double result;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  unint64_t v16;
  double v17[3];
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _QWORD v24[3];

  v10 = *a4;
  v11 = *a5;
  v24[0] = *a3;
  v24[1] = v10;
  *(double *)&v24[2] = v11;
  v21 = 0;
  v22 = 0;
  v23 = 0.0;
  (*(void (**)(double *__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1384))(v17, a1, v24, a2, a6, a7);
  result = v18 * v18 + v19 * v19 + v20 * v20;
  if (result <= -0.0000001 || result >= 0.0000001)
  {
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    v16 = 0xBFF0000000000000;
    PCIntersectRayWithPlane(v17, (double *)v14, (double *)&v21);
    v13 = v22;
    *a3 = v21;
    *a4 = v13;
    result = v23;
    *a5 = v23;
  }
  return result;
}

double OZElement::calcTranslationRelativeToCamera(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, OZRenderState *a5, float64x2_t *a6)
{
  float v11;
  PCShared_base *v12;
  double v13;
  double v14;
  double result;
  _BYTE v16[48];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  float64x2_t v23;
  double v24;
  double v25;
  float64x2_t v26;
  double v27;
  _BYTE v28[40];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  CGColorSpace *v36[149];
  _BYTE v37[40];
  unint64_t v38;
  float64x2_t v39;
  double v40;
  _OWORD v41[3];
  OZRenderState v42;

  OZRenderState::OZRenderState(&v42, a5);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD *, OZRenderState *, _QWORD))(*(_QWORD *)a1 + 1384))(v41, a1, a2, a4, &v42, 0);
  v39 = 0uLL;
  v40 = 0.0;
  memset(v37, 0, sizeof(v37));
  v38 = 0xBFF0000000000000;
  PCIntersectRayWithPlane((double *)v41, (double *)v37, v39.f64);
  OZRenderParams::OZRenderParams((OZRenderParams *)v36);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 288))(v28, a1);
  OZRenderParams::setWorkingColorDescription(v36, (const FxColorDescription *)v28);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v28);
  v11 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  OZRenderParams::setBlendingGamma((uint64_t)v36, v11);
  OZRenderParams::setState((OZRenderParams *)v36, &v42);
  *(_QWORD *)v28 = a4;
  if (a4)
    v12 = (PCShared_base *)((char *)a4 + *(_QWORD *)(*a4 - 24));
  else
    v12 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v28[8], v12);
  OZRenderParams::setCamera((uint64_t)v36, (const PCSharedCount *)v28);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v28[8]);
  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29 = 0x3FF0000000000000;
  *(_QWORD *)v28 = 0x3FF0000000000000;
  memset(&v28[8], 0, 32);
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  (*(void (**)(uint64_t, _BYTE *, CGColorSpace **))(*(_QWORD *)a1 + 1288))(a1, v28, v36);
  v26 = v39;
  v27 = v40;
  PCMatrix44Tmpl<double>::transform<double>((double *)v28, v26.f64, v26.f64);
  v23 = 0uLL;
  v24 = -1.0;
  v25 = v27;
  PCMatrix44Tmpl<double>::transform_row<double>((double *)v28, v23.f64, v23.f64);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, _QWORD *, OZRenderState *, _QWORD))(*(_QWORD *)a1 + 1384))(v16, a1, a3, a4, &v42, 0);
  v41[0] = *(_OWORD *)v16;
  v41[1] = *(_OWORD *)&v16[16];
  v41[2] = *(_OWORD *)&v16[32];
  v13 = vaddvq_f64(vmulq_f64(v23, v23)) + v24 * v24;
  if (v13 <= -1.0e-24 || v13 >= 1.0e-24)
  {
    *(float64x2_t *)&v37[24] = v23;
    v38 = *(_QWORD *)&v24;
    *(float64x2_t *)v37 = vdivq_f64(vmulq_n_f64(v23, -v25), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0));
    *(double *)&v37[16] = -(v25 * v24) / v13;
  }
  PCIntersectRayWithPlane((double *)v41, (double *)v37, v26.f64);
  v42.var4 = 1;
  v42.var6 = 0;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  *(_QWORD *)&v16[40] = 0x3FF0000000000000;
  *(_QWORD *)v16 = 0x3FF0000000000000;
  memset(&v16[8], 0, 32);
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  (*(void (**)(uint64_t, _BYTE *, OZRenderState *))(*(_QWORD *)a1 + 1256))(a1, v16, &v42);
  PCMatrix44Tmpl<double>::transform<double>((double *)v16, v39.f64, v39.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)v16, v26.f64, v26.f64);
  v14 = v27 - v40;
  *a6 = vsubq_f64(v26, v39);
  a6[1].f64[0] = v14;
  OZRenderParams::~OZRenderParams((OZRenderParams *)v36);
  return result;
}

void sub_1B2E1AA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a49);
  _Unwind_Resume(a1);
}

void OZElement::allowDrag(OZElement *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZElement *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  int v18;
  __int128 v19;

  *a5 = 0;
  if (!lpsrc
    && ((*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1872))(this) & 1) == 0
    && ((*a6 & 0xFFFFFFFE) != 2 || (*((_BYTE *)v14 + 1024) & 8) == 0))
  {
    OZSceneNode::allowDrag((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7);
    return;
  }
  if (!(*(uint64_t (**)(OZElement *))(*(_QWORD *)v14 + 272))(v14))
  {
    v18 = a4 & 1;
    goto LABEL_19;
  }
  if ((OZChannelBase *)(*(uint64_t (**)(OZElement *))(*(_QWORD *)v14 + 640))(v14) != a3)
  {
    v18 = a4 & 2;
LABEL_19:
    *a5 = v18;
  }
}

void `non-virtual thunk to'OZElement::allowDrag(OZElement *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  OZElement::allowDrag((OZElement *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

uint64_t OZElement::performDragOperation(OZElement *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  OZSceneNode *v16;
  OZSceneNode *v17;
  unint64_t v18;
  int isKindOfClass;
  uint64_t v20;
  uint64_t v21;
  OZChannelBase *v22;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  const PCString *v29;
  uint64_t v30;
  __int128 v31;

  if (!lpsrc)
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  if (!v16)
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  if ((*((_BYTE *)this + 1024) & 8) != 0)
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  v17 = v16;
  if ((*((_BYTE *)v16 + 1024) & 8) == 0)
  {
    v18 = *((_QWORD *)v16 + 1);
    v31 = xmmword_1B355CCA0;
    isKindOfClass = OZFactory::isKindOfClass(v18, (int32x4_t *)&v31);
    if ((a7 & 0x18) == 0 || !isKindOfClass)
      return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  v20 = *((_QWORD *)v17 + 120);
  v21 = *((_QWORD *)this + 121);
  if (v21)
  {
    v22 = *(OZChannelBase **)(v21 + 1584);
    if (v20)
      PCURL::PCURL((PCURL *)&v31, CFSTR("Undo Reorder"));
    else
      PCURL::PCURL((PCURL *)&v31, CFSTR("Undo Drop"));
    OZChannelBase::setRangeName(v22, (const PCString *)&v31);
    PCString::~PCString((PCString *)&v31);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&v31);
  v24 = (_QWORD *)((char *)v17 + 16);
  (*(void (**)(_QWORD *, __int128 *, _QWORD))(*((_QWORD *)v17 + 2) + 176))((_QWORD *)v17 + 2, &v31, 0);
  PCString::~PCString((PCString *)&v31);
  if (v20)
  {
    v25 = *((_QWORD *)v17 + 1);
    v31 = xmmword_1B355CCA0;
    if (!OZFactory::isKindOfClass(v25, (int32x4_t *)&v31) || (*((_BYTE *)v17 + 1024) & 8) != 0)
    {
      PCURL::PCURL((PCURL *)&v31, CFSTR("Undo Reorder"));
      (*(void (**)(_QWORD *, __int128 *, uint64_t))(*v24 + 176))((_QWORD *)v17 + 2, &v31, 3);
    }
    else
    {
      PCURL::PCURL((PCURL *)&v31, CFSTR("Undo Reorder"));
      (*(void (**)(_QWORD *, __int128 *, uint64_t))(*v24 + 176))((_QWORD *)v17 + 2, &v31, 5);
    }
    PCString::~PCString((PCString *)&v31);
  }
  OZSceneNode::removeFromParent(v17);
  v26 = *((_QWORD *)this + 2302);
  if ((OZElement *)v26 != (OZElement *)((char *)this + 18408))
  {
    v27 = (uint64_t *)(v26 + 16);
    if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 640))(*(_QWORD *)(v26 + 16)) == a3)
    {
      v28 = 0;
LABEL_26:
      if (a5 == 3)
        v28 = *v27;
      goto LABEL_28;
    }
    while (1)
    {
      v26 = *(_QWORD *)(v26 + 8);
      if ((OZElement *)v26 == (OZElement *)((char *)this + 18408))
        break;
      v28 = *v27;
      v27 = (uint64_t *)(v26 + 16);
      if ((OZChannelBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 640))(*(_QWORD *)(v26 + 16)) == a3)
        goto LABEL_26;
    }
  }
  v28 = 0;
LABEL_28:
  (*(void (**)(OZElement *, OZSceneNode *, uint64_t))(*(_QWORD *)this + 1080))(this, v17, v28);
  (*(void (**)(OZElement *))(*(_QWORD *)this + 496))(this);
  if (!v20)
  {
    PCURL::PCURL((PCURL *)&v31, CFSTR("Undo Drop"));
    (*(void (**)(_QWORD *, __int128 *, uint64_t))(*v24 + 176))((_QWORD *)v17 + 2, &v31, 1);
    PCString::~PCString((PCString *)&v31);
  }
  v30 = *((_QWORD *)this + 121);
  if (v30)
  {
    OZChannelBase::setRangeName(*(OZChannelBase **)(v30 + 1584), v29);
    OZDocument::postNotification(*(OZDocument **)(*((_QWORD *)this + 121) + 1584), 16);
  }
  return 1;
}

void sub_1B2E1AFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZElement::performDragOperation(OZElement *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZElement::performDragOperation((OZElement *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZElement::variesOverTime(OZElement *this)
{
  return (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 416))(this);
}

uint64_t OZElement::setLithiumTransform(OZElement *this, LiSceneObject *a2, OZRenderState *a3)
{
  uint64_t result;
  uint64_t v6;
  double v7;
  double v8;
  OZRenderState v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v13 = 0x3FF0000000000000;
  v10 = 0x3FF0000000000000;
  v11 = 0u;
  v12 = 0u;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v18 = 0u;
  OZRenderState::OZRenderState(&v9, a3);
  v9.var4 = 1;
  (*(void (**)(OZElement *, uint64_t *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v10, &v9);
  v7 = 0.0;
  v8 = 0.0;
  v6 = 0;
  (*(void (**)(OZElement *, double *, double *, uint64_t *, OZRenderState *, _QWORD))(*(_QWORD *)this + 1312))(this, &v8, &v7, &v6, &v9, 0);
  if (OZElement::isOwner360(this))
  {
    v11 = 0u;
    v12 = 0u;
    v10 = *(_QWORD *)&v8;
    v13 = *(_QWORD *)&v7;
    v14 = 0u;
    v15 = 0u;
    v17 = 0u;
    v18 = 0u;
    v16 = 0x3FF0000000000000;
    v19 = 0x3FF0000000000000;
  }
  result = (*(uint64_t (**)(LiSceneObject *, uint64_t *))(*(_QWORD *)a2 + 16))(a2, &v10);
  *((_BYTE *)a2 + 564) = v8 * v7 < 0.0;
  return result;
}

void OZElement::cropImageSourceIfNecessary(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  int v9;
  int v10;
  uint64_t v16;
  __int128 v17;
  PCSharedCount v18;
  PCSharedCount v19;
  __int128 v20;
  __int128 v21;
  double v22;
  double v23;
  double v24;
  double v25;

  a5->var0 = a2->var0;
  PCSharedCount::PCSharedCount(a5 + 1, a2 + 1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1616))(a1, a3);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1608))(a1);
  if (*(_BYTE *)(a4 + 256) && v10 | v9)
  {
    v25 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    v22 = 0.0;
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t, double *, double *, double *, double *))(*(_QWORD *)a1 + 1728))(a1, a3, &v25, &v24, &v23, &v22);
    }
    else
    {
      v23 = 0.0;
      v24 = 0.0;
      v25 = 0.0;
    }
    v20 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v21 = _Q0;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 1552))(a1, &v20, a3);
    *(double *)&v20 = v25 + *(double *)&v20;
    *((double *)&v20 + 1) = v23 + *((double *)&v20 + 1);
    *(double *)&v21 = *(double *)&v21 - (v25 + v24);
    *((double *)&v21 + 1) = *((double *)&v21 + 1) - (v23 + v22);
    v16 = operator new();
    OZCrop::OZCrop((OZCrop *)v16);
    v18.var0 = (PC_Sp_counted_base *)v16;
    PCSharedCount::PCSharedCount(&v19, (PCShared_base *)(v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
    if (!v16)
      throw_PCNullPointerException(1);
    v17 = v21;
    *(_OWORD *)((char *)v18.var0 + 40) = v20;
    *(_OWORD *)(v16 + 56) = v17;
    (*(void (**)(uint64_t, PC_Sp_counted_base *))(*(_QWORD *)v16 + 168))(v16, a5->var0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a5->var0, &v18);
    PCSharedCount::~PCSharedCount(&v19);
  }
}

void sub_1B2E1B2AC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZCrop::OZCrop(OZCrop *this)
{
  *((_QWORD *)this + 9) = &off_1E65EB048;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E65AECC8);
  *(_QWORD *)this = &unk_1E65AEBC0;
  *((_QWORD *)this + 9) = &unk_1E65AECA8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 56) = _Q0;
}

void sub_1B2E1B37C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 72) = v4;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t OZElement::makeRenderGraphOfElements(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2016))(a1);
}

void OZElement::makeProjectedImageSource(OZElement *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  LiGroup *v10;
  int v11;
  int v12;
  LiGraphBuilder *v13;
  LiSimpleCamera *v14;
  uint64_t v15;
  OZRenderState v21;
  PCSharedCount v22;
  uint64_t v23;
  __int128 v24;
  PCShared_base *var0;
  PCSharedCount v26;
  PCString v27;
  uint64_t v28[20];
  _BYTE v29[72];
  LiGraphBuilder *v30;
  LiGraphBuilder *v31;
  PCSharedCount v32;
  PCSharedCount v33;

  v10 = (LiGroup *)operator new();
  LiGroup::LiGroup(v10);
  v32.var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v33, (LiGroup *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  if (!v10)
    throw_PCNullPointerException(1);
  *((_DWORD *)v10 + 130) = *((_DWORD *)this + 20);
  (*(void (**)(LiGroup *, uint64_t))(*(_QWORD *)v10 + 192))(v10, 1);
  v11 = ((*(unsigned int (**)(OZElement *, OZRenderParams *))(*(_QWORD *)this + 2072))(this, a2) == 0) & ~(_DWORD)a4;
  if (*((_BYTE *)a3 + 257))
    v12 = 0;
  else
    v12 = v11;
  if (v12 == 1)
  {
    if (*((_QWORD *)a3 + 37))
    {
      v13 = (LiGraphBuilder *)operator new();
      LiGraphBuilder::LiGraphBuilder(v13, *((const LiGraphBuilder **)a3 + 37));
    }
    else
    {
      v13 = (LiGraphBuilder *)(*(uint64_t (**)(OZElement *, OZRenderParams *))(*(_QWORD *)this + 1984))(this, a2);
    }
    LiGraphBuilder::addGroupAndMakeCurrent((PCSharedCount *)v13, &v32);
  }
  else
  {
    OZChannelBase::setRangeName((OZChannelBase *)a2, &v27);
    v13 = (LiGraphBuilder *)operator new();
    LiGraphBuilder::LiGraphBuilder(v13, &v32, &v27);
  }
  v31 = v13;
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v27, a3);
  v30 = v13;
  v21.var0.var0 = (int64_t)&v21;
  *(_QWORD *)&v21.var0.var1 = &v21;
  v21.var0.var3 = 0;
  std::list<OZEffect *>::__move_assign(v28, &v21);
  std::__list_imp<unsigned int>::clear(&v21);
  v29[33] = 0;
  (*(void (**)(OZElement *, OZRenderParams *, LiGraphBuilder *, PCString *, uint64_t))(*(_QWORD *)this + 1952))(this, a2, v13, &v27, a4);
  LiGraphBuilder::render((const PCSharedCount *)v13, (PCSharedCount *)&v21);
  PCPtr<LiRenderer>::PCPtr<LiRendererBase>(a5, (const PCSharedCount *)&v21);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v21.var0.var1);
  var0 = 0;
  PCSharedCount::PCSharedCount(&v26);
  if ((*(unsigned int (**)(OZElement *, _QWORD))(*(_QWORD *)this + 1656))(this, MEMORY[0x1E0CA2E68]))
  {
    (*(void (**)(OZRenderState *__return_ptr, OZElement *, OZRenderParams *, uint64_t))(*(_QWORD *)this
                                                                                                + 2088))(&v21, this, a2, a4);
    var0 = (PCShared_base *)v21.var0.var0;
    PCSharedCount::PCSharedCount(&v22, (const PCSharedCount *)&v21.var0.var1);
    PCSharedCount::operator=((uint64_t *)&v26, (uint64_t *)&v22);
    PCSharedCount::~PCSharedCount(&v22);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v21.var0.var1);
  }
  else
  {
    v14 = (LiSimpleCamera *)operator new();
    LiSimpleCamera::LiSimpleCamera(v14);
    PCPtr<LiImageSource>::operator=<LiImageSource>(&var0, v14);
    v15 = *((_QWORD *)a2 + 160);
    if (v15)
    {
      (*(void (**)(OZRenderState *__return_ptr))(*(_QWORD *)v15 + 272))(&v21);
      if (!var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PCShared_base *, OZRenderState *))(*(_QWORD *)var0 + 288))(var0, &v21);
    }
    if (!a5->var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, PCShared_base *))(*(_QWORD *)a5->var0 + 184))(a5->var0, var0);
  }
  if (!var0)
    PCPtr<LiImageSource>::operator=<LiImageSource>(&var0, *((PCShared_base **)a2 + 160));
  if ((v12 & 1) == 0)
  {
    if (!a5->var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, PCShared_base *))(*(_QWORD *)a5->var0 + 184))(a5->var0, var0);
    v22.var0 = 0;
    v23 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v24 = _Q0;
    OZRenderState::OZRenderState(&v21, (const OZRenderState *)a2);
    v21.var5 = (OZTransformNode *)this;
    (*(void (**)(OZElement *, PCSharedCount *, OZRenderState *))(*(_QWORD *)this + 1480))(this, &v22, &v21);
    if (!a5->var0)
      throw_PCNullPointerException(1);
    LiRenderer::setBoundary((uint64_t)a5->var0, (uint64_t)&v22);
  }
  PCSharedCount::~PCSharedCount(&v26);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v29);
  std::__list_imp<unsigned int>::clear(v28);
  if (v31)
  {
    LiGraphBuilder::~LiGraphBuilder(v31);
    MEMORY[0x1B5E29170]();
  }
  PCSharedCount::~PCSharedCount(&v33);
}

void sub_1B2E1B794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,PCSharedCount a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  PCSharedCount *v48;
  uint64_t v49;

  MEMORY[0x1B5E29170](v49, 0x10A0C403FC0B694);
  PCSharedCount::~PCSharedCount(v48);
  _Unwind_Resume(a1);
}

void OZElement::makeImageSource(OZElement *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v7;
  double v8;
  double v9;
  PCSharedCount v10;
  PCSharedCount v11;
  LiImageSource *v12;
  PCSharedCount v13;

  (*(void (**)(LiImageSource **__return_ptr))(*(_QWORD *)this + 1936))(&v12);
  v7 = operator new();
  LiImageTransform::LiImageTransform((LiImageTransform *)v7, v12);
  v10.var0 = (PC_Sp_counted_base *)v7;
  PCSharedCount::PCSharedCount(&v11, (PCShared_base *)(v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
  v8 = (*(double (**)(OZElement *))(*(_QWORD *)this + 1328))(this);
  if (!v7)
    throw_PCNullPointerException(1);
  v9 = v8 / *((double *)a2 + 5);
  if (v9 != 1.0)
  {
    *(float64x2_t *)((char *)v10.var0 + 40) = vmulq_n_f64(*(float64x2_t *)((char *)v10.var0 + 40), v9);
    *(float64x2_t *)(v7 + 56) = vmulq_n_f64(*(float64x2_t *)(v7 + 56), v9);
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3, &v10);
  PCSharedCount::~PCSharedCount(&v11);
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2E1B9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1B5E29170](v4, 0x10B1C40DE3F20C5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZElement::makeImageSource(OZElement *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZElement::makeImageSource((OZElement *)((char *)this - 6528), a2, a3);
}

PCSharedCount *OZElement::makeRenderImageSource@<X0>(OZElement *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZElementRender *v7;
  OZImageNode *v8;
  uint64_t v9;

  v7 = (OZElementRender *)operator new();
  v8 = (OZImageNode *)(*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 2160))(this);
  OZElementRender::OZElementRender(v7, this, v8, a2);
  v9 = *(_QWORD *)v7;
  a3->var0 = (PC_Sp_counted_base *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24));
  return PCSharedCount::PCSharedCount(a3 + 1, (OZElementRender *)((char *)v7 + *(_QWORD *)(v9 - 32)));
}

void sub_1B2E1BA8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40EB6C5396);
  _Unwind_Resume(a1);
}

PCSharedCount *`non-virtual thunk to'OZElement::makeRenderImageSource@<X0>(OZElement *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  return OZElement::makeRenderImageSource((OZElement *)((char *)this - 6528), a2, a3);
}

void OZElement::makeRender(OZElement *this@<X0>, const OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  OZMaskComp *v10;
  PC_Sp_counted_base *v11;
  LiImageTransform *v12;
  PC_Sp_counted_base *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t i;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  PCSharedCount v27;
  PCSharedCount v28;
  PC_Sp_counted_base *var0;
  PCSharedCount v30;

  (*(void (**)(OZElement *))(*(_QWORD *)this + 1712))(this);
  (*(void (**)(char *, const OZRenderState *, const OZRenderGraphState *, uint64_t))(*((_QWORD *)this + 816)
                                                                                             + 160))((char *)this + 6528, a2, a3, a4);
  if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 416))(this))
  {
    var0 = a5->var0;
    PCSharedCount::PCSharedCount(&v30, a5 + 1);
    (*(void (**)(uint64_t *__return_ptr, OZElement *, const OZRenderState *, const OZRenderGraphState *, PC_Sp_counted_base **))(*(_QWORD *)this + 2032))(&v18, this, a2, a3, &var0);
    a5->var0 = (PC_Sp_counted_base *)v18;
    PCSharedCount::PCSharedCount(&v27, (const PCSharedCount *)v19);
    PCSharedCount::operator=((uint64_t *)&a5[1], (uint64_t *)&v27);
    PCSharedCount::~PCSharedCount(&v27);
    PCSharedCount::~PCSharedCount((PCSharedCount *)v19);
    PCSharedCount::~PCSharedCount(&v30);
  }
  (*(void (**)(uint64_t *__return_ptr, OZElement *, PCSharedCount *, const OZRenderState *, const OZRenderGraphState *))(*(_QWORD *)this + 1920))(&v18, this, a5, a2, a3);
  a5->var0 = (PC_Sp_counted_base *)v18;
  PCSharedCount::PCSharedCount(&v27, (const PCSharedCount *)v19);
  PCSharedCount::operator=((uint64_t *)&a5[1], (uint64_t *)&v27);
  PCSharedCount::~PCSharedCount(&v27);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v19);
  if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1864))(this)
    && OZElement::hasActiveMasks(this, a2)
    && !OZElement::isOwner360(this))
  {
    v10 = (OZMaskComp *)operator new();
    OZMaskComp::OZMaskComp(v10);
    v27.var0 = (PC_Sp_counted_base *)v10;
    PCSharedCount::PCSharedCount(&v28, (OZMaskComp *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    if (!v27.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, const OZRenderState *))(*(_QWORD *)v27.var0 + 200))(v27.var0, a2);
    (*(void (**)(OZElement *, const OZRenderState *))(*(_QWORD *)this + 2008))(this, a2);
    v18 = (uint64_t)&v18;
    v19[0] = (unint64_t)&v18;
    (*(void (**)(OZElement *, uint64_t *))(*(_QWORD *)this + 1904))(this, &v18);
    if (!v27.var0)
      throw_PCNullPointerException(1);
    OZMaskComp::setMasks((uint64_t)v27.var0, (uint64_t)&v18);
    if (!v27.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v27.var0 + 168))(v27.var0, a5->var0);
    v11 = v27.var0;
    if (!v27.var0)
      throw_PCNullPointerException(1);
    *((_QWORD *)v27.var0 + 12) = this;
    *((_BYTE *)v11 + 104) = OZElement::isOwner360(this);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a5->var0, &v27);
    std::__list_imp<unsigned int>::clear(&v18);
    PCSharedCount::~PCSharedCount(&v28);
  }
  if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1600))(this)
    && (OZElement *)a2->var5 != this
    && a2->var19)
  {
    v26 = 0x3FF0000000000000;
    v23 = 0x3FF0000000000000;
    v20 = 0x3FF0000000000000;
    v18 = 0x3FF0000000000000;
    memset(v19, 0, sizeof(v19));
    v21 = 0u;
    v22 = 0u;
    v24 = 0u;
    v25 = 0u;
    if (((*(uint64_t (**)(OZElement *, uint64_t *, const OZRenderState *))(*(_QWORD *)this + 1280))(this, &v18, a2) & 1) == 0)
    {
      PCPtr<LiImageSource>::reset(a5);
      return;
    }
    v12 = (LiImageTransform *)operator new();
    LiImageTransform::LiImageTransform(v12);
    v27.var0 = (PC_Sp_counted_base *)v12;
    PCSharedCount::PCSharedCount(&v28, (LiImageTransform *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
    v13 = v27.var0;
    if (!v27.var0)
      throw_PCNullPointerException(1);
    v14 = (char *)v27.var0 + 40;
    if (&v18 != (uint64_t *)v27.var0 + 5)
    {
      v15 = 0;
      v16 = &v18;
      do
      {
        for (i = 0; i != 4; ++i)
          *(_QWORD *)&v14[i * 8] = v16[i];
        ++v15;
        v14 += 32;
        v16 += 4;
      }
      while (v15 != 4);
    }
    (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v13 + 168))(v13, a5->var0);
    PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a5->var0, &v27);
    PCSharedCount::~PCSharedCount(&v28);
  }
  (*(void (**)(uint64_t *__return_ptr, OZElement *, const OZRenderState *, PCSharedCount *))(*(_QWORD *)this + 1944))(&v18, this, a2, a5);
  a5->var0 = (PC_Sp_counted_base *)v18;
  PCSharedCount::PCSharedCount(&v27, (const PCSharedCount *)v19);
  PCSharedCount::operator=((uint64_t *)&a5[1], (uint64_t *)&v27);
  PCSharedCount::~PCSharedCount(&v27);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v19);
}

void sub_1B2E1BF20(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZElement::makeRender(OZElement *this@<X0>, const OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  OZElement::makeRender((OZElement *)((char *)this - 6528), a2, a3, a4, a5);
}

void OZElement::addPostEffects(const PCSharedCount *a1@<X2>, PCSharedCount *a2@<X8>)
{
  a2->var0 = a1->var0;
  PCSharedCount::PCSharedCount(a2 + 1, a1 + 1);
}

_QWORD *OZElement::buildFilterRenderGraph@<X0>(PCSharedCount *a1@<X3>, uint64_t a2@<X0>, __int128 *a3@<X1>, PCSharedCount *a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  PCSharedCount v10;
  PCSharedCount v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  a4->var0 = a1->var0;
  PCSharedCount::PCSharedCount(a4 + 1, a1 + 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 2096))(&v14, a2);
  if (&v14 != v15)
  {
    v7 = &v14;
    do
    {
      v8 = *(_QWORD *)(*v7 + 16);
      v12 = *a3;
      v13 = *((_QWORD *)a3 + 2);
      if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 280))(v8, &v12, 0, 1, 1))
      {
        (*(void (**)(PCSharedCount *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(*v7 + 16) + 648))(&v10, *(_QWORD *)(*v7 + 16), a3);
        if (v10.var0)
        {
          (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v10.var0 + 168))(v10.var0, a4->var0);
          PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a4->var0, &v10);
        }
        PCSharedCount::~PCSharedCount(&v11);
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v15);
  }
  return std::__list_imp<unsigned int>::clear(&v14);
}

void sub_1B2E1C13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  PCSharedCount *v14;

  PCSharedCount::~PCSharedCount(v14);
  _Unwind_Resume(a1);
}

uint64_t OZElement::doesTransformFromLocalToScreenSpace(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2224))(a1);
}

uint64_t OZElement::doesAppliedEffectTransormFromLocalToScreenSpace(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2096))(&v9);
  v2 = v10;
  if (&v9 == v10)
  {
LABEL_6:
    v5 = 0;
  }
  else
  {
    v3 = &v9;
    while (1)
    {
      v4 = *(_QWORD *)(*v3 + 16);
      v7 = v11;
      v8 = v12;
      if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 280))(v4, &v7, 0, 1, 1))
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v3 + 16) + 640))(*(_QWORD *)(*v3 + 16)) & 1) != 0)
          break;
      }
      v3 = (uint64_t *)*v3;
      if (v3 == v2)
        goto LABEL_6;
    }
    v5 = 1;
  }
  std::__list_imp<unsigned int>::clear(&v9);
  return v5;
}

void sub_1B2E1C248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZElement::makeGraphBuilder(OZElement *this, OZChannelBase *a2)
{
  LiGroup *v4;
  uint64_t v5;
  PCString v7[2];
  LiGroup *v8;
  PCSharedCount v9;

  v4 = (LiGroup *)operator new();
  LiGroup::LiGroup(v4);
  v8 = v4;
  PCSharedCount::PCSharedCount(&v9, (LiGroup *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  OZChannelBase::setRangeName(a2, v7);
  v5 = operator new();
  LiGraphBuilder::LiGraphBuilder(v5, &v8, v7);
  (*(void (**)(OZElement *, uint64_t, OZChannelBase *))(*(_QWORD *)this + 1992))(this, v5, a2);
  PCSharedCount::~PCSharedCount(&v9);
  return v5;
}

void sub_1B2E1C328(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x10A0C403FC0B694);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void *OZElement::setupGraphBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *result;

  result = *(void **)(a1 + 960);
  if (result)
  {
    if (result)
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 1992))(result, a2, a3);
  }
  return result;
}

CGColorSpace **OZElement::makeDropShadow@<X0>(uint64_t a1@<X0>, LiImageSource **a2@<X1>, const PCSharedCount *a3@<X2>, CMTime *a4@<X3>, LiGraphBuilder *a5@<X4>, uint64_t a6@<X5>, PCSharedCount *a7@<X8>)
{
  double v14;
  double v15;
  PCSharedCount *v17;
  double v18;
  double v19;
  double v20;
  __double2 v21;
  int ValueAsInt;
  unsigned int v23;
  CGColorSpace *WorkingColorSpace;
  double v25;
  double v26;
  PCSharedCount *v27;
  FxColorDescription *v28;
  uint64_t v29;
  uint64_t v30;
  FxColorDescription *WorkingColorDescription;
  PCToneMapMethod *ToneMapMethod;
  CGColorSpace *v33;
  double v34;
  double v35;
  LiDropShadow *v36;
  LiDropShadow *v37;
  uint64_t i;
  _OWORD *v39;
  CGColorSpace *v40;
  float v41;
  double *v42;
  PCSharedCount *p_timescale;
  LiGeode *v44;
  CMTimeValue value;
  char v46;
  LiImageTransform *v47;
  double v48;
  double v49;
  double v50;
  LiImageAlphaFill *v51;
  LiImageAlphaFill *v52;
  LiGaussianBlur *v53;
  double *v54;
  CMTimeValue v55;
  LiGroup *v56;
  unint64_t v57;
  LiGraphBuilder *v58;
  __n128 v59;
  CGColorSpace *v60;
  CMTime v61;
  CMTime v62;
  _BYTE v63[24];
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  LiDropShadow *v70;
  PCSharedCount v71;
  __n128 v72;
  CGColorSpace *v73;

  v62 = *a4;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 13808), &v62, 0.0);
  v15 = v14;
  if (v14 > -0.0000001 && v14 < 0.0000001)
    return (CGColorSpace **)PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a7, a3);
  v58 = a5;
  v17 = a7;
  v62 = *a4;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 14112), &v62, 0.0);
  v19 = v18;
  v62 = *a4;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 14264), &v62, 0.0);
  v21 = __sincos_stret(v20);
  v62 = *a4;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 14416), &v62, 0.0);
  v62 = *a4;
  v23 = (*(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)a1 + 1576))(a1, &v62);
  v61 = *a4;
  OZElement::getDropShadowColor((OZElement *)a1, &v61, (PCColor *)&v62);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
  PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v72, (const PCColor *)&v62, WorkingColorSpace);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v64);
  v62 = *a4;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 13960), &v62, 0.0);
  v26 = v25;
  v27 = a7;
  if (OZRenderParams::isDynamicRangeTrackingRender((FxColorDescription *)a4)
    && (v28 = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a4),
        FxColorDescription::isHDR(v28)))
  {
    v61.value = v72.n128_u64[0];
    v61.timescale = v72.n128_i32[2];
    v29 = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
    v30 = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
    WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a4);
    ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod(WorkingColorDescription);
    PCColorUtil::transform(ToneMapMethod, &v61.value, v29, 0, v30, 1, (uint64_t)&v62);
    PCWorkingColor::setRGB((float *)&v72, *(float *)&v62.value, *((float *)&v62.value + 1), *(float *)&v62.timescale);
    v27 = v17;
  }
  else if (OZRenderParams::isRenderForHDR_Deprecated((OZRenderParams *)a4))
  {
    v61.value = v72.n128_u64[0];
    v61.timescale = v72.n128_i32[2];
    v33 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
    FxApplyBT2446A((float *)&v61, v33, (float *)&v62);
    PCWorkingColor::setRGB((float *)&v72, *(float *)&v62.value, *((float *)&v62.value + 1), *(float *)&v62.timescale);
  }
  v34 = v19 * v21.__cosval;
  v35 = v19 * v21.__sinval;
  if (v23
    && (!PCBlend::treatsBlackLikeNormal(v23)
     || v72.n128_f32[0] <= -0.00001
     || v72.n128_f32[0] >= 0.00001
     || v72.n128_f32[1] <= -0.00001
     || v72.n128_f32[1] >= 0.00001
     || v72.n128_f32[2] <= -0.00001
     || v72.n128_f32[2] >= 0.00001))
  {
    if (!*a2)
      throw_PCNullPointerException(1);
    *((_BYTE *)*a2 + 12) = 1;
    v44 = (LiGeode *)operator new();
    LiGeode::LiGeode(v44, *a2);
    v61.value = (CMTimeValue)v44;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v61.timescale, (LiGeode *)((char *)v44 + *(_QWORD *)(*(_QWORD *)v44 - 24)));
    value = v61.value;
    if (!v61.value)
      throw_PCNullPointerException(1);
    *(_DWORD *)(v61.value + 520) = *(_DWORD *)(a1 + 80);
    *(double *)(value + 544) = v15;
    if (!a3->var0)
      throw_PCNullPointerException(1);
    v46 = LiSceneObject::preserveOpacity((LiSceneObject *)a3->var0);
    LiSceneObject::setPreserveOpacity(value, v46);
    if (!v61.value)
      throw_PCNullPointerException(1);
    *(_BYTE *)(v61.value + 696) = *(_BYTE *)(a6 + 88);
    if (ValueAsInt)
    {
      v47 = (LiImageTransform *)operator new();
      LiImageTransform::LiImageTransform(v47);
      v62.value = (CMTimeValue)v47;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v62.timescale, (LiImageTransform *)((char *)v47 + *(_QWORD *)(*(_QWORD *)v47 - 24)));
      if (!v62.value)
        throw_PCNullPointerException(1);
      PCMatrix44Tmpl<double>::rightTranslate((double *)(v62.value + 40), v34, v35, 0.0);
      if (!v61.value)
        throw_PCNullPointerException(1);
      LiImageFilterChain::append((LiImageFilterChain *)(v61.value + 608), (LiImageFilter *)v62.value);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v62.timescale);
    }
    else
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
        v48 = *(double *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) + 384);
      else
        v48 = 1.0;
      v49 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1328))(a1);
      v69 = 0x3FF0000000000000;
      v66 = 0x3FF0000000000000;
      *(_QWORD *)&v63[16] = 0x3FF0000000000000;
      v62.value = 0x3FF0000000000000;
      *(_OWORD *)&v62.timescale = 0u;
      *(_OWORD *)v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      v67 = 0u;
      v68 = 0u;
      v50 = PCMatrix44Tmpl<double>::rightTranslate((double *)&v62.value, v34 * (v48 / v49), v35, 0.0);
      if (!v61.value)
        throw_PCNullPointerException(1);
      (*(void (**)(CMTimeValue, CMTime *, double))(*(_QWORD *)v61.value + 16))(v61.value, &v62, v50);
    }
    v51 = (LiImageAlphaFill *)operator new();
    LiImageAlphaFill::LiImageAlphaFill(v51);
    v62.value = (CMTimeValue)v51;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v62.timescale, (LiImageAlphaFill *)((char *)v51 + *(_QWORD *)(*(_QWORD *)v51 - 24)));
    v72.n128_u32[3] = 1065353216;
    v52 = (LiImageAlphaFill *)v62.value;
    if (!v62.value)
      throw_PCNullPointerException(1);
    PCWorkingColor::operator=(&v59, &v72);
    LiImageAlphaFill::setColor(v52, &v59);
    if (!v61.value)
      throw_PCNullPointerException(1);
    LiImageFilterChain::append((LiImageFilterChain *)(v61.value + 608), (LiImageFilter *)v62.value);
    if (v26 > 0.0)
    {
      v53 = (LiGaussianBlur *)operator new();
      LiGaussianBlur::LiGaussianBlur(v53);
      v59.n128_u64[0] = (unint64_t)v53;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v59.n128_i8[8], (LiGaussianBlur *)((char *)v53 + *(_QWORD *)(*(_QWORD *)v53 - 24)));
      v54 = (double *)v59.n128_u64[0];
      if (!v59.n128_u64[0])
        throw_PCNullPointerException(1);
      *(double *)(v59.n128_u64[0] + 40) = v26;
      v54[6] = v26;
      if (!v61.value)
        throw_PCNullPointerException(1);
      LiImageFilterChain::append((LiImageFilterChain *)(v61.value + 608), (LiImageFilter *)v54);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v59.n128_i8[8]);
    }
    v55 = v61.value;
    if (!v61.value)
      throw_PCNullPointerException(1);
    *(_DWORD *)(v55 + 528) = LiGraphBuilder::getAndIncrementCompositeOrder(v58);
    if (!v61.value)
      throw_PCNullPointerException(1);
    *(_WORD *)(v61.value + 552) = *(_WORD *)(a6 + 288);
    (*(void (**)(uint64_t, CMTime *, uint64_t))(*(_QWORD *)a1 + 2048))(a1, a4, a6);
    v56 = (LiGroup *)operator new();
    LiGroup::LiGroup(v56);
    v59.n128_u64[0] = (unint64_t)v56;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v59.n128_i8[8], (LiGroup *)((char *)v56 + *(_QWORD *)(*(_QWORD *)v56 - 24)));
    v57 = v59.n128_u64[0];
    if (!v59.n128_u64[0])
      throw_PCNullPointerException(1);
    *(_DWORD *)(v59.n128_u64[0] + 520) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(v57 + 528) = LiGraphBuilder::getAndIncrementCompositeOrder(v58);
    if (!v59.n128_u64[0])
      throw_PCNullPointerException(1);
    (*(void (**)(unint64_t, CMTimeValue))(*(_QWORD *)v59.n128_u64[0] + 152))(v59.n128_u64[0], v61.value);
    if (!v59.n128_u64[0])
      throw_PCNullPointerException(1);
    (*(void (**)(unint64_t, PC_Sp_counted_base *))(*(_QWORD *)v59.n128_u64[0] + 152))(v59.n128_u64[0], a3->var0);
    if (!v59.n128_u64[0])
      throw_PCNullPointerException(1);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v59.n128_u64[0] + 192))(v59.n128_u64[0], 1);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(v27, (const PCSharedCount *)&v59);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v59.n128_i8[8]);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v62.timescale);
    p_timescale = (PCSharedCount *)&v61.timescale;
  }
  else
  {
    v36 = (LiDropShadow *)operator new();
    LiDropShadow::LiDropShadow(v36);
    v70 = v36;
    PCSharedCount::PCSharedCount(&v71, (LiDropShadow *)((char *)v36 + *(_QWORD *)(*(_QWORD *)v36 - 24)));
    *(_QWORD *)&v62.timescale = 0;
    v62.epoch = 0;
    v62.value = 0x3FF0000000000000;
    *(double *)v63 = v34;
    *(_OWORD *)&v63[8] = xmmword_1B304EEE0;
    *(_QWORD *)&v64 = 0;
    *((double *)&v64 + 1) = v35;
    v65 = 0uLL;
    v67 = 0u;
    v68 = 0u;
    v66 = 0x3FF0000000000000;
    v69 = 0x3FF0000000000000;
    v37 = v70;
    if (!v70)
      throw_PCNullPointerException(1);
    for (i = 0; i != 128; i += 32)
    {
      v39 = (_OWORD *)((char *)v37 + i + 40);
      *v39 = *(_OWORD *)((char *)&v62.value + i);
      v39[1] = *(_OWORD *)((char *)&v62.epoch + i);
    }
    *((_BYTE *)v37 + 168) = ValueAsInt != 0;
    v40 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
    v41 = v15;
    PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v59, 1.0, 1.0, 1.0, v41, v40);
    operator*((uint64_t)&v72, (float32x4_t *)&v59, (float32x4_t *)&v61);
    if (!v70)
      throw_PCNullPointerException(1);
    PCWorkingColor::operator=((__n128 *)((char *)v70 + 172), (__n128 *)&v61);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v61.epoch);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v60);
    v42 = (double *)v70;
    if (!v70)
      throw_PCNullPointerException(1);
    *((double *)v70 + 24) = v26;
    v42[25] = v26;
    if (!a3->var0)
      throw_PCNullPointerException(1);
    LiImageFilterChain::append((LiImageFilterChain *)((char *)a3->var0 + 608), (LiImageFilter *)v42);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(v27, a3);
    p_timescale = &v71;
  }
  PCSharedCount::~PCSharedCount(p_timescale);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v73);
}

void sub_1B2E1CD04(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  PCSharedCount::~PCSharedCount(v1);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v2 - 168));
  _Unwind_Resume(a1);
}

uint64_t OZElement::imageSpace(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2216))(a1))
    return 2;
  else
    return 1;
}

void OZElement::buildRenderGraph(OZElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  double v8;
  double v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  __n128 v16;
  char v17;
  char v18;
  LiGeode *v19;
  const void *v20;
  OZGroup *v21;
  LiImageSource *v22;
  uint64_t v23;
  int v24;
  LiSceneObject *v25;
  int ValueAsInt;
  LiSceneObject *v27;
  CMTimeValue v28;
  PCSharedCount v29;
  PCSharedCount v30;
  PCSharedCount v31;
  PC_Sp_counted_base *v32;
  PCSharedCount v33;
  CMTime v34;
  LiSceneObject *v35;
  PCSharedCount v36;
  CMTime v37;
  _QWORD v38[3];
  char v39;
  uint64_t v40;
  LiImageSource *v41;
  PCSharedCount v42;
  double v43;
  double v44;
  double v45;
  OZRenderState v46;
  PCSharedCount v47;

  v37 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6680), &v37, 0.0);
  v9 = v8;
  if (v8 <= -0.0000001 || v8 >= 0.0000001)
  {
    OZRenderState::OZRenderState(&v46, (const OZRenderState *)a2);
    if (!v46.var31)
      goto LABEL_53;
    v10 = (_QWORD *)*((_QWORD *)v46.var31 + 1);
    if (!v10)
      goto LABEL_53;
    v11 = (char *)v46.var31 + 8;
    do
    {
      v12 = v10[4];
      v13 = v12 >= (unint64_t)this;
      if (v12 >= (unint64_t)this)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 == (_QWORD *)v46.var31 + 1
      || (v15 = v11[4], v15 > (unint64_t)this)
      || v15 == *((_QWORD *)v46.var31 + 5))
    {
LABEL_53:
      if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1440))(this))
      {
        (*(void (**)(OZElement *, CMTime *, LiGraphBuilder *))(*(_QWORD *)this + 1976))(this, a2, a3);
      }
      else
      {
        v44 = 0.0;
        v45 = 0.0;
        v43 = 0.0;
        (*(void (**)(OZElement *, double *, double *, double *, CMTime *, _QWORD))(*(_QWORD *)this + 1312))(this, &v45, &v44, &v43, a2, 0);
        v16.n128_f64[0] = v45;
        if ((v45 <= -0.0000001 || v45 >= 0.0000001) && ((v16.n128_f64[0] = v44, v44 <= -0.0000001) || v44 >= 0.0000001)
          || ((*(uint64_t (**)(OZElement *, __n128))(*(_QWORD *)this + 1632))(this, v16) & 1) == 0
          && ((v16.n128_f64[0] = v43, v43 <= -0.0000001) || v43 >= 0.0000001))
        {
          v17 = (*(uint64_t (**)(OZElement *, __n128))(*(_QWORD *)this + 2024))(this, v16);
          (*(void (**)(LiImageSource **__return_ptr, OZElement *, CMTime *, const OZRenderGraphState *, _QWORD))(*(_QWORD *)this + 1936))(&v41, this, a2, a4, 0);
          if (v41)
          {
            OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v37, a4);
            (*(void (**)(OZElement *, CMTime *, CMTime *))(*(_QWORD *)this + 2064))(this, a2, &v37);
            if (v39)
              v18 = v17;
            else
              v18 = 0;
            v39 = v18;
            v19 = (LiGeode *)operator new();
            LiGeode::LiGeode(v19, v41);
            v35 = v19;
            PCSharedCount::PCSharedCount(&v36, (LiGeode *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
            if (!v19)
              throw_PCNullPointerException(1);
            *((_DWORD *)v35 + 130) = *((_DWORD *)this + 20);
            v20 = (const void *)*((_QWORD *)this + 120);
            if (v20)
            {
              if (v21)
              {
                if (OZGroup::is360Group(v21))
                {
                  if (!v35)
                    throw_PCNullPointerException(1);
                  *((_BYTE *)v35 + 698) = 0;
                }
              }
            }
            v22 = v41;
            if (!v41)
              throw_PCNullPointerException(1);
            v23 = (*(uint64_t (**)(OZElement *, CMTime *))(*(_QWORD *)this + 2008))(this, a2);
            (*(void (**)(LiImageSource *, uint64_t))(*(_QWORD *)v22 + 88))(v22, v23);
            v34 = *a2;
            v24 = (*(uint64_t (**)(OZElement *, CMTime *))(*(_QWORD *)this + 1576))(this, &v34);
            (*(void (**)(PC_Sp_counted_base **__return_ptr, OZElement *, CMTime *))(*(_QWORD *)this + 1584))(&v32, this, a2);
            v25 = v35;
            if (!v35)
              throw_PCNullPointerException(1);
            v30.var0 = v32;
            PCSharedCount::PCSharedCount(&v31, &v33);
            LiSceneObject::setBlendMode((uint64_t)v25, v24, &v30);
            PCSharedCount::~PCSharedCount(&v31);
            v34 = *a2;
            ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 8232), &v34, 0.0);
            if (!v35)
              throw_PCNullPointerException(1);
            LiSceneObject::setPreserveOpacity((uint64_t)v35, ValueAsInt != 0);
            v27 = v35;
            if (!v35)
              throw_PCNullPointerException(1);
            *((_DWORD *)v27 + 132) = LiGraphBuilder::getAndIncrementCompositeOrder(a3);
            PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v34, (const PCSharedCount *)&v35);
            if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1624))(this))
            {
              (*(void (**)(CMTimeValue *__return_ptr, OZElement *, LiImageSource **, LiSceneObject **, CMTime *, LiGraphBuilder *, CMTime *))(*(_QWORD *)this + 2000))(&v28, this, &v41, &v35, a2, a3, &v37);
              v34.value = v28;
              PCSharedCount::PCSharedCount(&v47, &v29);
              PCSharedCount::operator=((uint64_t *)&v34.timescale, (uint64_t *)&v47);
              PCSharedCount::~PCSharedCount(&v47);
              PCSharedCount::~PCSharedCount(&v29);
            }
            (*(void (**)(OZElement *, CMTimeValue, CMTime *))(*(_QWORD *)this + 1912))(this, v34.value, a2);
            if (!v34.value)
              throw_PCNullPointerException(1);
            *(double *)(v34.value + 544) = v9;
            (*(void (**)(OZElement *, CMTime *, CMTime *, LiSceneObject *))(*(_QWORD *)this + 2040))(this, a2, &v37, v35);
            LiGraphBuilder::add2d((PCSharedCount *)a3, &v34);
            PCSharedCount::~PCSharedCount((PCSharedCount *)&v34.timescale);
            PCSharedCount::~PCSharedCount(&v33);
            PCSharedCount::~PCSharedCount(&v36);
            PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v40);
            std::__list_imp<unsigned int>::clear(v38);
          }
          PCSharedCount::~PCSharedCount(&v42);
        }
      }
    }
  }
}

void sub_1B2E1D3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,PCSharedCount a61)
{
  PCSharedCount *v61;

  PCSharedCount::~PCSharedCount(v61);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a49);
  std::__list_imp<unsigned int>::clear(&a29);
  PCSharedCount::~PCSharedCount(&a61);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZElement::buildRenderGraph(OZElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  OZElement::buildRenderGraph((OZElement *)((char *)this - 6528), a2, a3, a4);
}

uint64_t OZElement::shouldDepthClip(OZElement *this)
{
  return 1;
}

void OZElement::setGeodeProperties(OZElement *this, const OZRenderParams *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  uint64_t DoHighQualityResampling;
  double v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  _QWORD *v15;
  LiImageProjection *v16;
  uint64_t v17;
  OZLiFilter *v18;
  PCShared_base *v19;
  OZLiFilter *v20;
  PCSharedCount v21;
  __int128 v22;
  uint64_t v23;

  DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(a2);
  (*(void (**)(LiGeode *, uint64_t))(*(_QWORD *)a4 + 280))(a4, DoHighQualityResampling);
  v9 = 0.0;
  if (!*(_BYTE *)a3 || !(*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1632))(this))
  {
    v10 = 24;
    goto LABEL_8;
  }
  (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 192))(a4, *((double *)a3 + 1));
  *((_DWORD *)a4 + 170) = *((_DWORD *)a3 + 12);
  if (*((_BYTE *)a3 + 16))
  {
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 208))(a4, *((double *)a3 + 3));
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 224))(a4, *((double *)a3 + 4));
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 240))(a4, *((double *)a3 + 5));
  }
  v9 = *((double *)a3 + 7);
  if (v9 > 0.0)
  {
    v10 = 32;
LABEL_8:
    (*(void (**)(LiGeode *, double))(*(_QWORD *)a4 + 8 * v10))(a4, v9);
  }
  if (*((_BYTE *)a4 + 552))
    v11 = *((_BYTE *)a3 + 288) == 0;
  else
    v11 = 1;
  v12 = !v11;
  *((_BYTE *)a4 + 552) = v12;
  if (*((_BYTE *)a4 + 553))
    v13 = *((_BYTE *)a3 + 289) == 0;
  else
    v13 = 1;
  v14 = !v13;
  *((_BYTE *)a4 + 553) = v14;
  *((_BYTE *)a4 + 696) = *((_BYTE *)a3 + 88);
  v15 = (_QWORD *)*((_QWORD *)a3 + 9);
  if (v15 != (_QWORD *)((char *)a3 + 64))
  {
    v16 = (LiImageProjection *)operator new();
    LiImageProjection::LiImageProjection(v16);
    LiImageFilterChain::append((LiGeode *)((char *)a4 + 608), v16);
    do
    {
      v17 = v15[2];
      v22 = *(_OWORD *)a2;
      v23 = *((_QWORD *)a2 + 2);
      if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v17 + 280))(v17, &v22, 0, 1, 1))
      {
        (*(void (**)(OZLiFilter **__return_ptr, _QWORD, const OZRenderParams *))(*(_QWORD *)v15[2] + 648))(&v20, v15[2], a2);
        if (v20)
        {
          OZLiFilter::setFilmSpace(v20, 1);
          LiImageFilterChain::append((LiGeode *)((char *)a4 + 608), v20);
        }
        PCSharedCount::~PCSharedCount(&v21);
      }
      v15 = (_QWORD *)v15[1];
    }
    while (v15 != (_QWORD *)((char *)a3 + 64));
  }
  v18 = (OZLiFilter *)*((_QWORD *)a2 + 160);
  v20 = v18;
  if (v18)
    v19 = (OZLiFilter *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 24));
  else
    v19 = 0;
  PCSharedCount::PCSharedCount(&v21, v19);
  (*(void (**)(OZElement *, LiGeode *, char *, const OZRenderParams *))(*(_QWORD *)this + 2112))(this, a4, (char *)a3 + 224, a2);
  (*(void (**)(OZElement *, const OZRenderParams *, const OZRenderGraphState *, LiGeode *))(*(_QWORD *)this + 2048))(this, a2, a3, a4);
  PCSharedCount::~PCSharedCount(&v21);
}

void sub_1B2E1D744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40FDFE64BCLL);
  _Unwind_Resume(a1);
}

uint64_t OZElement::producesDepth(OZElement *this)
{
  return 0;
}

uint64_t OZElement::isDescendantOfRootLevel3DGroup(OZElement *this)
{
  const void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  v2 = (const void *)*((_QWORD *)this + 120);
  if (v2)
  {
    while (1)
    {
      do
      {
        if (!v3)
          return 1;
        v4 = v3;
        v2 = (const void *)v3[120];
      }
      while (v2);
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 1640))(v4) != 1)
        break;
      v2 = (const void *)v4[120];
      if (!v2)
        return 1;
    }
    return 0;
  }
  else
  {
    if (result)
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 1640))(result) == 1;
  }
  return result;
}

uint64_t OZElement::setGeodeProperties3D(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int ShowDepth;
  uint64_t result;
  char v8;

  ShowDepth = LiRenderingTechnology::getShowDepth((LiRenderingTechnology *)(a2 + 1316));
  if (ShowDepth)
    LOBYTE(ShowDepth) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2104))(a1);
  a4[555] = ShowDepth;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2056))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2104))(a1);
    v8 = result ^ 1;
  }
  else
  {
    v8 = 0;
  }
  a4[554] = v8;
  a4[556] = 0;
  return result;
}

uint64_t OZElement::modifyGraphState(OZElement *this, CMTime *a2, OZRenderGraphState *a3)
{
  OZChannelBase *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  OZChannel *v12;
  uint64_t result;
  BOOL v15;
  BOOL v17;
  CMTime v18;

  v18 = *a2;
  v5 = (OZChannelBase *)((char *)this + 9936);
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 9936), 0, 1))
  {
    v6 = OZChannelBase::testFlag(v5, 2);
    if (!v6 && !*(_BYTE *)a3)
    {
      *(_BYTE *)a3 = !v6;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10064), &v18, 0.0);
      *((_QWORD *)a3 + 1) = v7;
      *((_DWORD *)a3 + 12) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 10952), &v18, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10216), &v18, 0.0);
      *((_QWORD *)a3 + 7) = v8;
      *((_BYTE *)a3 + 16) = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 10368), 1, 1);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10496), &v18, 0.0);
      *((_QWORD *)a3 + 3) = v9;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10648), &v18, 0.0);
      *((_QWORD *)a3 + 4) = v10;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10800), &v18, 0.0);
      *((_QWORD *)a3 + 5) = v11;
    }
  }
  v12 = (OZChannel *)((char *)this + 11208);
  if (OZChannelBase::testFlag((OZChannelBase *)v12, 2))
    result = 1;
  else
    result = OZChannel::getValueAsInt(v12, &v18, 0.0);
  v15 = (result & 0xFFFFFFFD) == 0 && *((_BYTE *)a3 + 288) != 0;
  *((_BYTE *)a3 + 288) = v15;
  v17 = result < 2 && *((_BYTE *)a3 + 289) != 0;
  *((_BYTE *)a3 + 289) = v17;
  return result;
}

float64x2_t OZElement::getFilmback@<Q0>(OZElement *this@<X0>, const OZRenderState *a2@<X1>, float64x2_t *a3@<X8>)
{
  int32x2_t *v4;
  float64x2_t result;

  a3->f64[0] = 0.0;
  a3->f64[1] = 0.0;
  v4 = (int32x2_t *)(*(uint64_t (**)(OZElement *, const OZRenderState *))(*(_QWORD *)this + 272))(this, a2);
  if (v4)
  {
    result = vcvtq_f64_f32(vcvt_f32_s32(v4[43]));
    *a3 = result;
  }
  return result;
}

void OZElement::getPrecompCamera(OZElement *this@<X0>, CMTime *a2@<X1>, int a3@<W2>, PCSharedCount *a4@<X8>)
{
  int v8;
  int v9;
  LiSimpleCamera *v10;
  PCShared_base *v11;
  LiSimpleCamera *v12;
  OZScene *v13;
  unsigned int ActiveCamera;
  void *Node;
  OZCamera *v16;
  CMTime v17;
  CMTime v18;

  v8 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 2072))(this);
  a4->var0 = 0;
  PCSharedCount::PCSharedCount(a4 + 1);
  PCPtr<LiImageSource>::reset(a4);
  if (a3)
    v9 = 2;
  else
    v9 = 0;
  if (v8)
    v9 = v8;
  if (v9)
  {
    if (v9 == 1)
    {
      v12 = (LiSimpleCamera *)operator new();
      LiSimpleCamera::LiSimpleCamera(v12);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a4, v12);
      if (!a4->var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)a4->var0 + 640))(a4->var0, 1);
      if (!a4->var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)a4->var0 + 512))(a4->var0, 0.0);
    }
    else if (v9 == 2)
    {
      v10 = (LiSimpleCamera *)operator new();
      LiSimpleCamera::LiSimpleCamera(v10);
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a4, v10);
      (*(void (**)(CMTime *__return_ptr, OZElement *, CMTime *))(*(_QWORD *)this + 2080))(&v18, this, a2);
      if (!a4->var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, CMTime *))(*(_QWORD *)a4->var0 + 288))(a4->var0, &v18);
    }
    else
    {
      PCPtr<LiImageSource>::reset(a4);
    }
  }
  else
  {
    v11 = *(PCShared_base **)&a2[53].timescale;
    if (v11)
    {
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a4, v11);
    }
    else
    {
      v13 = (OZScene *)*((_QWORD *)this + 121);
      if (v13)
      {
        v18 = *a2;
        ActiveCamera = OZScene::getActiveCamera(v13, &v18);
        Node = OZScene::getNode(v13, ActiveCamera);
        if (Node)
        {
          if (v16)
          {
            v17 = *a2;
            OZCamera::cameraAtTime(v16, &v17, (PCSharedCount *)&v18);
            PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a4->var0, (const PCSharedCount *)&v18);
            PCSharedCount::~PCSharedCount((PCSharedCount *)&v18.timescale);
          }
        }
      }
    }
  }
}

void sub_1B2E1DCA0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;

  PCSharedCount::~PCSharedCount(v2 + 1);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t isChannelNondefault(OZChannelBase *a1)
{
  uint64_t result;
  OZChannel *v2;
  const void *v3;
  OZRigBehavior *v4;
  OZChannelBase *v5;
  void **var0;
  OZChannelBase **v7;
  OZChannelBase **v8;
  OZChannelBase *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if ((a1->var7 & 0x1000) != 0)
  {
    if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v5, 0x20000))
      return !OZChannelBase::testFlag(v5, 0x8000);
    var0 = v5[1].var0;
    if (var0)
    {
      v7 = (OZChannelBase **)*var0;
      v8 = (OZChannelBase **)var0[1];
      while (v7 != v8)
      {
        v9 = *v7;
        if (!OZChannelBase::testFlag(*v7, 0x2000)
          && !OZChannelBase::testFlag(v9, 2)
          && (isChannelNondefault(v9) & 1) != 0)
        {
          return 1;
        }
        ++v7;
      }
    }
    return 0;
  }
  if (!result)
    return result;
  v2 = (OZChannel *)result;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 560))(result) & 1) != 0
    || ((*((uint64_t (**)(OZChannel *))v2->var0 + 83))(v2) & 1) != 0)
  {
    return 1;
  }
  v12 = (uint64_t)&v12;
  v13 = &v12;
  v14 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(v2, &v12, 1);
  if (!v14
    || v14 == 1
    && (v3 = (const void *)v13[2]) != 0
  {
    OZChannel::getValueAsDouble(v2, MEMORY[0x1E0CA2E68], 0.0);
    v11 = vabdd_f64(v10, OZChannel::getDefaultValue(v2));
    std::__list_imp<unsigned int>::clear(&v12);
    return v11 >= 0.0000001;
  }
  std::__list_imp<unsigned int>::clear(&v12);
  return 1;
}

void sub_1B2E1DEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZElement::checkForForcedPrecompose(OZElement *this, OZChannelBase *a2, OZChannelBase *a3)
{
  OZChannelBase ***v7;
  OZChannelBase **v8;
  OZChannelBase **v9;
  OZChannelBase *v10;

  if ((a2->var7 & 0x1000) != 0)
  {
    if (v7)
    {
      v8 = *v7;
      v9 = v7[1];
      while (v8 != v9)
      {
        v10 = *v8;
        if (!OZChannelBase::testFlag(*v8, 0x2000) && !OZChannelBase::testFlag(v10, 2))
        {
          if (OZChannelBase::testFlag(v10, 2048))
          {
            if (v10 != a3 && OZChannelBase::testFlag(v10, 2048) && (isChannelNondefault(v10) & 1) != 0)
              return 1;
          }
          else if ((OZElement::checkForForcedPrecompose(this, v10, a3) & 1) != 0)
          {
            return 1;
          }
        }
        ++v8;
      }
    }
  }
  else if (a2 != a3
         && OZChannelBase::testFlag(a2, 2048)
         && isChannelNondefault(a2)
         && !OZChannelBase::testFlag(a2, 2))
  {
    return 1;
  }
  return 0;
}

uint64_t OZElement::setOwner(OZElement *this, OZSceneNode *a2)
{
  OZTransformNode::setOwner((OZTransformNode *)this, a2);
  (*(void (**)(OZElement *))(*(_QWORD *)this + 1832))(this);
  return (*(uint64_t (**)(OZElement *, _QWORD))(*(_QWORD *)this + 1704))(this, 0);
}

BOOL OZElement::isValidToLightOutside(OZElement *this)
{
  const void *v1;
  OZGroup *v2;

  v1 = (const void *)*((_QWORD *)this + 120);
  return v1
}

uint64_t OZElement::isValidLightClipPlane(OZElement *this)
{
  return (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1848))(this);
}

BOOL OZElement::setLightChannels(OZElement *this)
{
  OZChannelBase *v2;
  _BOOL4 v3;
  _BOOL4 v4;

  v2 = (OZChannelBase *)((char *)this + 8384);
  v3 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8384), 2);
  v4 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9352), 2);
  if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 1848))(this))
  {
    if (v3)
      OZChannelBase::resetFlag(v2, 2, 0);
    if (v4)
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
    return v3 || v4;
  }
  else
  {
    if (!v3)
      OZChannelBase::setFlag(v2, 2, 0);
    if (!v4)
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
    return !v3 || !v4;
  }
}

OZElement *OZElement::isInWorldPartition(OZElement *this)
{
  const void *v2;
  OZElement *v3;

  while (1)
  {
    v2 = (const void *)*((_QWORD *)this + 120);
    if (!v2)
      break;
    this = v3;
    if (!v3 || (*(unsigned int (**)(OZElement *))(*(_QWORD *)v3 + 1424))(v3))
      return this;
  }
  return 0;
}

OZElement *OZElement::isInPrecomposedWorld(OZElement *this)
{
  uint64_t v2;
  const void *v3;
  OZElement *v4;

  v2 = MEMORY[0x1E0CA2E68];
  while (1)
  {
    v3 = (const void *)*((_QWORD *)this + 120);
    if (!v3)
      break;
    this = v4;
    if (!v4 || (*(unsigned int (**)(OZElement *, uint64_t))(*(_QWORD *)v4 + 1656))(v4, v2))
      return this;
  }
  return 0;
}

uint64_t OZElement::canBeAffectedByShadows(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  int ValueAsInt;
  CMTime v15;

  if (!*(_DWORD *)(a2 + 12))
    return 0;
  v6 = *(unsigned __int8 *)(a3 + 515);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1840))(a1, a3);
  if (!v6 && v7 == 0)
    return 0;
  v9 = *(unsigned int *)(a2 + 12);
  if ((int)v9 < 1)
    return 0;
  v10 = 0;
  v11 = *(_QWORD *)(a2 + 16) + 656;
  do
  {
    v12 = (*(_DWORD *)v11 - 1) <= 2 && *(_BYTE *)(v11 + 65) != 0;
    v11 += 944;
    v10 |= v12;
    --v9;
  }
  while (v9);
  if ((v10 & 1) != 0
    && ((v15 = *(CMTime *)a3, !(*(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)a1 + 1656))(a1, &v15))
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1632))(a1))
    && (ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 9480), &v15, 0.0),
        ValueAsInt | OZChannel::getValueAsInt((OZChannel *)(a1 + 9632), &v15, 0.0)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

void OZElement::buildLighting(OZElement *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  OZElement *v12;
  OZElement *v13;
  char v14;
  _QWORD v15[50];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _BYTE v36[56];
  OZElement *v37;
  char v38;
  char v39;
  __int128 v40;
  __int128 v41;

  if (!*((_DWORD *)a3 + 3)
    || ((v8 = *((unsigned __int8 *)a4 + 515),
         v9 = (*(uint64_t (**)(OZElement *, const OZRenderParams *))(*(_QWORD *)this + 1840))(this, a4),
         !v8)
      ? (v10 = (_DWORD)v9 == 0)
      : (v10 = 0),
        v10))
  {
    LiGeode::setLit((uint64_t)a2, 0);
  }
  else
  {
    v11 = v9;
    v12 = OZElement::isInWorldPartition(this);
    OZRenderParams::OZRenderParams((OZRenderParams *)v36, a4);
    v35 = 0x3FF0000000000000;
    v32 = 0x3FF0000000000000;
    v29 = 0x3FF0000000000000;
    v26 = 0x3FF0000000000000;
    v27 = 0u;
    v28 = 0u;
    v30 = 0u;
    v31 = 0u;
    v33 = 0u;
    v34 = 0u;
    v25 = 0x3FF0000000000000;
    v22 = 0x3FF0000000000000;
    v19 = 0x3FF0000000000000;
    v16 = 0x3FF0000000000000;
    v17 = 0u;
    v18 = 0u;
    v20 = 0u;
    v21 = 0u;
    v23 = 0u;
    v24 = 0u;
    v38 = 0;
    v40 = 0u;
    v41 = 0u;
    v13 = OZElement::isInWorldPartition(this);
    if (v13)
    {
      v14 = v39;
      v39 = 1;
      if (v12)
        (*(void (**)(OZElement *, uint64_t *, _BYTE *))(*(_QWORD *)v12 + 1256))(v12, &v16, v36);
      PCMatrix44Tmpl<double>::invert((double *)&v16, (double *)&v16, 0.0);
      v39 = v14;
      if (OZElement::isInPrecomposedWorld(this) == v12)
        v37 = v12;
    }
    (*(void (**)(OZElement *, uint64_t *, _BYTE *))(*(_QWORD *)this + 1256))(this, &v26, v36);
    (*(void (**)(_QWORD *__return_ptr, OZElement *, _BYTE *, const LiLightSet *, LiGeode *))(*(_QWORD *)this + 2120))(v15, this, v36, a3, a2);
    (*(void (**)(LiGeode *, uint64_t, const LiLightSet *, _QWORD *, uint64_t *, BOOL, uint64_t *))(*(_QWORD *)a2 + 264))(a2, v11, a3, v15, &v26, v13 != 0, &v16);
    LiMaterialProperties::~LiMaterialProperties((LiMaterialProperties *)v15);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v36);
  }
}

void sub_1B2E1E558(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

_QWORD *OZElement::buildMaterials@<X0>(OZElement *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  char v15;
  BOOL v16;
  _BOOL4 v17;
  BOOL v18;
  _QWORD *result;
  OZElement *v20;
  OZElement *v21;
  double v22;
  uint64_t i;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  CMTime v28;

  v9 = *(unsigned int *)(a3 + 12);
  if ((int)v9 < 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(a3 + 16) + 656;
    do
    {
      v12 = (*(_DWORD *)v11 - 1) <= 2 && *(_BYTE *)(v11 + 65) != 0;
      v11 += 944;
      v10 |= v12;
      --v9;
    }
    while (v9);
  }
  v13 = v10 & (*((_BYTE *)a2 + 515) != 0);
  v28 = *(CMTime *)a2;
  v26 = *a2;
  v27 = *((_QWORD *)a2 + 2);
  if (((*(uint64_t (**)(OZElement *, __int128 *))(*(_QWORD *)a1 + 1656))(a1, &v26) & 1) != 0)
    v14 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)a1 + 1632))(a1) ^ 1;
  else
    LOBYTE(v14) = 0;
  v15 = v13 ^ 1 | v14;
  v16 = (v15 & 1) == 0 && OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 9480), &v28, 0.0) != 0;
  OZLightingFolder::buildLiMaterialProperties((OZLightingFolder *)((char *)a1 + 8384), &v28, a5);
  *(_BYTE *)(a5 + 98) = (*(uint64_t (**)(OZElement *, __int128 *))(*(_QWORD *)a1 + 1840))(a1, a2);
  if ((v15 & 1) != 0)
  {
    v17 = 0;
    if (v13)
    {
LABEL_17:
      v18 = OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 9784), &v28, 0.0) != 0;
      goto LABEL_20;
    }
  }
  else
  {
    v17 = OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 9632), &v28, 0.0) != 0;
    if (v13)
      goto LABEL_17;
  }
  v18 = 0;
LABEL_20:
  *(_BYTE *)(a5 + 101) = v16;
  *(_BYTE *)(a5 + 102) = v17;
  *(_BYTE *)(a5 + 103) = v18;
  *(_BYTE *)(a5 + 104) = 0;
  *(double *)(a5 + 112) = (*(double (**)(OZElement *, __int128 *))(*(_QWORD *)a1 + 2144))(a1, a2);
  result = (_QWORD *)(*(uint64_t (**)(OZElement *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 2128))(a1, a2, a5, a4);
  if (v17)
  {
    v20 = OZElement::isInPrecomposedWorld(a1);
    v21 = OZElement::isInWorldPartition(a1);
    if (v20 && v20 == v21)
    {
      v22 = *((double *)a2 + 5);
      *(double *)(a5 + 120) = v22 / (*(double (**)(OZElement *))(*(_QWORD *)v20 + 1328))(v20);
    }
    result = (*(_QWORD *(**)(__int128 *__return_ptr, OZElement *, __int128 *))(*(_QWORD *)a1 + 2136))(&v26, a1, a2);
    if ((__int128 *)(a5 + 272) != &v26)
    {
      for (i = 0; i != 128; i += 32)
      {
        v24 = (_OWORD *)(a5 + 272 + i);
        v25 = *(__int128 *)((char *)&v26 + i + 16);
        *v24 = *(__int128 *)((char *)&v26 + i);
        v24[1] = v25;
      }
    }
  }
  return result;
}

void sub_1B2E1E80C(_Unwind_Exception *a1)
{
  LiMaterialProperties *v1;

  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

double OZElement::castShadowMaxScale(OZElement *this, const OZRenderParams *a2)
{
  int RenderQuality;
  double result;

  RenderQuality = OZRenderParams::getRenderQuality(a2);
  result = 2.0;
  if (RenderQuality == 6)
    return 5.0;
  return result;
}

__n128 OZElement::setShadowBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v5;

  if (*(unsigned __int8 *)(a3 + 101) | *(unsigned __int8 *)(a3 + 102))
  {
    result = *(__n128 *)(a4 + 704);
    v5 = *(_OWORD *)(a4 + 720);
    *(__n128 *)(a3 + 128) = result;
    *(_OWORD *)(a3 + 144) = v5;
  }
  return result;
}

__n128 OZElement::getShadowMat@<Q0>(OZElement *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t var0;
  const void *v6;
  void *v7;
  double *v8;
  double v9;
  double v10;
  float64x2_t v11;
  double v12;
  __n128 result;
  uint64_t i;
  uint64_t v15;
  __int128 v16;
  float64x2_t v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  float64x2_t v29;
  double v30;
  __int128 v31;
  double v32;
  OZRenderState v33;

  OZRenderState::OZRenderState(&v33, a2);
  v31 = 0uLL;
  v32 = 0.0;
  v29 = 0uLL;
  v30 = 1.0;
  v28 = 0x3FF0000000000000;
  v25 = 0x3FF0000000000000;
  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v24 = 0u;
  v26 = 0u;
  v27 = 0u;
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  OZRenderState::TransformSet::shear((uint64_t *)&v33.var30, 0);
  var0 = v33.var30.var0 & 0xFFFFFFFFFFFFFF3FLL;
  v33.var30.var0 &= 0xFFFFFFFFFFFFFF3FLL;
  v6 = (const void *)*((_QWORD *)this + 120);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(void *, uint64_t, OZRenderState *))(*(_QWORD *)v7 + 1256))(v7, a3, &v33);
      var0 = v33.var30.var0;
    }
  }
  v33.var4 = 1;
  v33.var30.var0 = var0 & 0xFFFFFFFFFFFFFFDFLL;
  (*(void (**)(OZElement *, uint64_t *, OZRenderState *))(*(_QWORD *)this + 1256))(this, &v19, &v33);
  v8 = PCMatrix44Tmpl<double>::transform<double>((double *)&v19, (double *)&v31, (double *)&v31);
  v9 = v8[2];
  v31 = *(_OWORD *)v8;
  v32 = v9;
  PCMatrix44Tmpl<double>::transform_normal<double>((uint64_t)&v19, v29.f64, &v17);
  v30 = v18;
  v29 = v17;
  v10 = sqrt(v17.f64[0] * v17.f64[0] + v17.f64[1] * v17.f64[1] + v18 * v18);
  if (v10 <= -0.000000100000001 || v10 >= 0.000000100000001)
  {
    v29.f64[0] = v17.f64[0] / v10;
    v29.f64[1] = v17.f64[1] / v10;
    v30 = v18 / v10;
  }
  *(_QWORD *)&v17.f64[0] = &v33.var30;
  LODWORD(v17.f64[1]) = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v17, 0xEuLL);
  v33.var30.var0 |= 0x18uLL;
  v11 = (float64x2_t)((__n128 (*)(OZElement *, uint64_t *, OZRenderState *))*(_QWORD *)(*(_QWORD *)this
                                                                                                + 1256))(this, &v19, &v33);
  v12 = -(*(double *)&v31 * v29.f64[0] + *((double *)&v31 + 1) * v29.f64[1] + v32 * v30)
      / (v29.f64[0] * v29.f64[0] + v29.f64[1] * v29.f64[1] + v30 * v30);
  v11.f64[0] = *(double *)&v31 - (*(double *)&v31 + v29.f64[0] * v12);
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v19, v11, *((double *)&v31 + 1) - (*((double *)&v31 + 1) + v29.f64[1] * v12), v32 - (v32 + v30 * v12));
  PCMatrix44Tmpl<double>::operator*(a3, (__int128 *)&v19, (uint64_t)&v17);
  if (&v17 != (float64x2_t *)a3)
  {
    for (i = 0; i != 128; i += 32)
    {
      v15 = a3 + i;
      result = *(__n128 *)((char *)&v17 + i);
      v16 = *(__int128 *)((char *)&v17 + i + 16);
      *(__n128 *)v15 = result;
      *(_OWORD *)(v15 + 16) = v16;
    }
  }
  return result;
}

uint64_t OZElement::isVisibleInRig(OZElement *this)
{
  _BYTE *v2;
  double v3;
  float v4;
  char v5;
  uint64_t result;
  uint64_t *v7;
  char v8;
  char v9;
  unint64_t v10;
  const void *v11;
  OZSingleChannelBehavior *v12;
  uint64_t ChanBase;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;

  v2 = (char *)this + 6680;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6680), MEMORY[0x1E0CA2E68], 0.0);
  v4 = v3;
  v5 = (*(uint64_t (**)(_BYTE *))(*((_QWORD *)this + 835) + 560))(v2);
  result = 1;
  if (v4 > -0.00001 && v4 < 0.00001 && (v5 & 1) == 0)
  {
    v14 = (uint64_t)&v14;
    v15 = &v14;
    v16 = 0;
    OZBehavior::GetBehaviorsAffectingChannel(v2, &v14, 1);
    v7 = v15;
    if (v15 == &v14)
      goto LABEL_14;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7[2] + 344))(v7[2]) + 8);
      v17 = xmmword_1B3053B30;
      if (OZFactory::isKindOfClass(v10, (int32x4_t *)&v17))
      {
        v11 = (const void *)v7[2];
        if (v11)
        {
          if (v12)
          {
            ChanBase = OZSingleChannelBehavior::getChanBase(v12);
            if (ChanBase)
              v9 |= ChanBase == (_QWORD)v2;
          }
        }
      }
      else
      {
        v8 |= (*((_BYTE *)this + 1024) & 2) == 0;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7 != &v14);
    if (v8 & 1 | ((v9 & 1) == 0))
    {
LABEL_14:
      std::__list_imp<unsigned int>::clear(&v14);
      return 1;
    }
    else
    {
      std::__list_imp<unsigned int>::clear(&v14);
      return 0;
    }
  }
  return result;
}

void sub_1B2E1ECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrSizeImpl::getInstance(OZElement::OZElement_lrSizeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_lrSizeImpl::getInstance(void)::OZElement_lrSizeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_lrSizeImpl::getInstance(void)::OZElement_lrSizeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrSizeImpl::_OZElement_lrSize;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_lrSizeImpl *v0;

  if (!OZElement::OZElement_lrSizeImpl::_OZElement_lrSize)
  {
    v0 = (OZElement::OZElement_lrSizeImpl *)operator new();
    OZElement::OZElement_lrSizeImpl::OZElement_lrSizeImpl(v0);
    OZElement::OZElement_lrSizeImpl::_OZElement_lrSize = (uint64_t)v0;
  }
}

void sub_1B2E1ED70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_lrSizeImpl *OZElement::OZElement_lrSizeImpl::OZElement_lrSizeImpl(OZElement::OZElement_lrSizeImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 10.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 10.0, 1, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_lrSizeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658BDA8;
  *((_QWORD *)this + 5) = &unk_1E658BDC8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 200.0);
  return this;
}

void sub_1B2E1EE20(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrSizeInfo::getInstance(OZElement::OZElement_lrSizeInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_lrSizeInfo::getInstance(void)::OZElement_lrSizeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_lrSizeInfo::getInstance(void)::OZElement_lrSizeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrSizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrSizeInfo::_OZElement_lrSizeInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrSizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_lrSizeInfo *v0;

  if (!OZElement::OZElement_lrSizeInfo::_OZElement_lrSizeInfo)
  {
    v0 = (OZElement::OZElement_lrSizeInfo *)operator new();
    OZElement::OZElement_lrSizeInfo::OZElement_lrSizeInfo(v0);
    OZElement::OZElement_lrSizeInfo::_OZElement_lrSizeInfo = (uint64_t)v0;
  }
}

void sub_1B2E1EEEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_lrSizeInfo *OZElement::OZElement_lrSizeInfo::OZElement_lrSizeInfo(OZElement::OZElement_lrSizeInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 50.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_lrSizeInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658BE20;
  *((_QWORD *)this + 10) = &unk_1E658BE40;
  return this;
}

void sub_1B2E1EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrIntensityImpl::getInstance(OZElement::OZElement_lrIntensityImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_lrIntensityImpl::getInstance(void)::OZElement_lrIntensityImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_lrIntensityImpl::getInstance(void)::OZElement_lrIntensityImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrIntensityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrIntensityImpl::_OZElement_lrIntensity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrIntensityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!OZElement::OZElement_lrIntensityImpl::_OZElement_lrIntensity)
  {
    v0 = (OZChannelPercent *)operator new();
    OZElement::OZElement_lrIntensityImpl::OZElement_lrIntensityImpl(v0);
    OZElement::OZElement_lrIntensityImpl::_OZElement_lrIntensity = (uint64_t)v0;
  }
}

void sub_1B2E1F068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *OZElement::OZElement_lrIntensityImpl::OZElement_lrIntensityImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658BE98;
  this->var5 = (PCString *)&unk_1E658BEB8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.001);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E1F118(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrIntensityScaleImpl::getInstance(OZElement::OZElement_lrIntensityScaleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::OZElement_lrIntensityScaleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::OZElement_lrIntensityScaleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrIntensityScaleImpl::_OZElement_lrIntensityScale;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!OZElement::OZElement_lrIntensityScaleImpl::_OZElement_lrIntensityScale)
  {
    v0 = (OZChannelPercent *)operator new();
    OZElement::OZElement_lrIntensityScaleImpl::OZElement_lrIntensityScaleImpl(v0);
    OZElement::OZElement_lrIntensityScaleImpl::_OZElement_lrIntensityScale = (uint64_t)v0;
  }
}

void sub_1B2E1F1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *OZElement::OZElement_lrIntensityScaleImpl::OZElement_lrIntensityScaleImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658BF10;
  this->var5 = (PCString *)&unk_1E658BF30;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.001);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E1F294(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrOpacityImpl::getInstance(OZElement::OZElement_lrOpacityImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_lrOpacityImpl::getInstance(void)::OZElement_lrOpacityImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_lrOpacityImpl::getInstance(void)::OZElement_lrOpacityImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrOpacityImpl::_OZElement_lrOpacity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!OZElement::OZElement_lrOpacityImpl::_OZElement_lrOpacity)
  {
    v0 = (OZChannelPercent *)operator new();
    OZElement::OZElement_lrOpacityImpl::OZElement_lrOpacityImpl(v0);
    OZElement::OZElement_lrOpacityImpl::_OZElement_lrOpacity = (uint64_t)v0;
  }
}

void sub_1B2E1F360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *OZElement::OZElement_lrOpacityImpl::OZElement_lrOpacityImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658BF88;
  this->var5 = (PCString *)&unk_1E658BFA8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E1F40C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectivityImpl::getInstance(OZElement::OZElement_reflectivityImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectivityImpl::getInstance(void)::OZElement_reflectivityImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectivityImpl::getInstance(void)::OZElement_reflectivityImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectivityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectivityImpl::_OZElement_reflectivity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectivityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!OZElement::OZElement_reflectivityImpl::_OZElement_reflectivity)
  {
    v0 = (OZChannelPercent *)operator new();
    OZElement::OZElement_reflectivityImpl::OZElement_reflectivityImpl(v0);
    OZElement::OZElement_reflectivityImpl::_OZElement_reflectivity = (uint64_t)v0;
  }
}

void sub_1B2E1F4D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *OZElement::OZElement_reflectivityImpl::OZElement_reflectivityImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.8);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.8, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658C000;
  this->var5 = (PCString *)&unk_1E658C020;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E1F594(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionBlurImpl::getInstance(OZElement::OZElement_reflectionBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectionBlurImpl::getInstance(void)::OZElement_reflectionBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectionBlurImpl::getInstance(void)::OZElement_reflectionBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionBlurImpl::_OZElement_reflectionBlur;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_reflectionBlurImpl *v0;

  if (!OZElement::OZElement_reflectionBlurImpl::_OZElement_reflectionBlur)
  {
    v0 = (OZElement::OZElement_reflectionBlurImpl *)operator new();
    OZElement::OZElement_reflectionBlurImpl::OZElement_reflectionBlurImpl(v0);
    OZElement::OZElement_reflectionBlurImpl::_OZElement_reflectionBlur = (uint64_t)v0;
  }
}

void sub_1B2E1F660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionBlurImpl *OZElement::OZElement_reflectionBlurImpl::OZElement_reflectionBlurImpl(OZElement::OZElement_reflectionBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C078;
  *((_QWORD *)this + 5) = &unk_1E658C098;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E1F710(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(OZElement::OZElement_reflectionBeginFalloffImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::OZElement_reflectionBeginFalloffImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::OZElement_reflectionBeginFalloffImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionBeginFalloffImpl::_OZElement_reflectionBeginFalloff;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_reflectionBeginFalloffImpl *v0;

  if (!OZElement::OZElement_reflectionBeginFalloffImpl::_OZElement_reflectionBeginFalloff)
  {
    v0 = (OZElement::OZElement_reflectionBeginFalloffImpl *)operator new();
    OZElement::OZElement_reflectionBeginFalloffImpl::OZElement_reflectionBeginFalloffImpl(v0);
    OZElement::OZElement_reflectionBeginFalloffImpl::_OZElement_reflectionBeginFalloff = (uint64_t)v0;
  }
}

void sub_1B2E1F7DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionBeginFalloffImpl *OZElement::OZElement_reflectionBeginFalloffImpl::OZElement_reflectionBeginFalloffImpl(OZElement::OZElement_reflectionBeginFalloffImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 1, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionBeginFalloffImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C0F0;
  *((_QWORD *)this + 5) = &unk_1E658C110;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E1F88C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(OZElement::OZElement_reflectionBeginFalloffInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::OZElement_reflectionBeginFalloffInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::OZElement_reflectionBeginFalloffInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionBeginFalloffInfo::_OZElement_reflectionBeginFalloffInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_reflectionBeginFalloffInfo *v0;

  if (!OZElement::OZElement_reflectionBeginFalloffInfo::_OZElement_reflectionBeginFalloffInfo)
  {
    v0 = (OZElement::OZElement_reflectionBeginFalloffInfo *)operator new();
    OZElement::OZElement_reflectionBeginFalloffInfo::OZElement_reflectionBeginFalloffInfo(v0);
    OZElement::OZElement_reflectionBeginFalloffInfo::_OZElement_reflectionBeginFalloffInfo = (uint64_t)v0;
  }
}

void sub_1B2E1F958(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionBeginFalloffInfo *OZElement::OZElement_reflectionBeginFalloffInfo::OZElement_reflectionBeginFalloffInfo(OZElement::OZElement_reflectionBeginFalloffInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionBeginFalloffInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658C168;
  *((_QWORD *)this + 10) = &unk_1E658C188;
  return this;
}

void sub_1B2E1FA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionEndFalloffImpl::getInstance(OZElement::OZElement_reflectionEndFalloffImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::OZElement_reflectionEndFalloffImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::OZElement_reflectionEndFalloffImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionEndFalloffImpl::_OZElement_reflectionEndFalloff;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_reflectionEndFalloffImpl *v0;

  if (!OZElement::OZElement_reflectionEndFalloffImpl::_OZElement_reflectionEndFalloff)
  {
    v0 = (OZElement::OZElement_reflectionEndFalloffImpl *)operator new();
    OZElement::OZElement_reflectionEndFalloffImpl::OZElement_reflectionEndFalloffImpl(v0);
    OZElement::OZElement_reflectionEndFalloffImpl::_OZElement_reflectionEndFalloff = (uint64_t)v0;
  }
}

void sub_1B2E1FAD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionEndFalloffImpl *OZElement::OZElement_reflectionEndFalloffImpl::OZElement_reflectionEndFalloffImpl(OZElement::OZElement_reflectionEndFalloffImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 500.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 500.0, 1, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionEndFalloffImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C1E0;
  *((_QWORD *)this + 5) = &unk_1E658C200;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E1FB94(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionEndFalloffInfo::getInstance(OZElement::OZElement_reflectionEndFalloffInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::OZElement_reflectionEndFalloffInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::OZElement_reflectionEndFalloffInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionEndFalloffInfo::_OZElement_reflectionEndFalloffInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_reflectionEndFalloffInfo *v0;

  if (!OZElement::OZElement_reflectionEndFalloffInfo::_OZElement_reflectionEndFalloffInfo)
  {
    v0 = (OZElement::OZElement_reflectionEndFalloffInfo *)operator new();
    OZElement::OZElement_reflectionEndFalloffInfo::OZElement_reflectionEndFalloffInfo(v0);
    OZElement::OZElement_reflectionEndFalloffInfo::_OZElement_reflectionEndFalloffInfo = (uint64_t)v0;
  }
}

void sub_1B2E1FC60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionEndFalloffInfo *OZElement::OZElement_reflectionEndFalloffInfo::OZElement_reflectionEndFalloffInfo(OZElement::OZElement_reflectionEndFalloffInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionEndFalloffInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658C258;
  *((_QWORD *)this + 10) = &unk_1E658C278;
  return this;
}

void sub_1B2E1FD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(OZElement::OZElement_reflectionFalloffExponentImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::OZElement_reflectionFalloffExponentImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::OZElement_reflectionFalloffExponentImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionFalloffExponentImpl::_OZElement_reflectionFalloffExponent;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_reflectionFalloffExponentImpl *v0;

  if (!OZElement::OZElement_reflectionFalloffExponentImpl::_OZElement_reflectionFalloffExponent)
  {
    v0 = (OZElement::OZElement_reflectionFalloffExponentImpl *)operator new();
    OZElement::OZElement_reflectionFalloffExponentImpl::OZElement_reflectionFalloffExponentImpl(v0);
    OZElement::OZElement_reflectionFalloffExponentImpl::_OZElement_reflectionFalloffExponent = (uint64_t)v0;
  }
}

void sub_1B2E1FDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionFalloffExponentImpl *OZElement::OZElement_reflectionFalloffExponentImpl::OZElement_reflectionFalloffExponentImpl(OZElement::OZElement_reflectionFalloffExponentImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.8);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.8, 1, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionFalloffExponentImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C2D0;
  *((_QWORD *)this + 5) = &unk_1E658C2F0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E1FE9C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(OZElement::OZElement_reflectionFalloffExponentInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::OZElement_reflectionFalloffExponentInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::OZElement_reflectionFalloffExponentInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionFalloffExponentInfo::_OZElement_reflectionFalloffExponentInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_reflectionFalloffExponentInfo *v0;

  if (!OZElement::OZElement_reflectionFalloffExponentInfo::_OZElement_reflectionFalloffExponentInfo)
  {
    v0 = (OZElement::OZElement_reflectionFalloffExponentInfo *)operator new();
    OZElement::OZElement_reflectionFalloffExponentInfo::OZElement_reflectionFalloffExponentInfo(v0);
    OZElement::OZElement_reflectionFalloffExponentInfo::_OZElement_reflectionFalloffExponentInfo = (uint64_t)v0;
  }
}

void sub_1B2E1FF68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionFalloffExponentInfo *OZElement::OZElement_reflectionFalloffExponentInfo::OZElement_reflectionFalloffExponentInfo(OZElement::OZElement_reflectionFalloffExponentInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 8.0, 0.1, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionFalloffExponentInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658C348;
  *((_QWORD *)this + 10) = &unk_1E658C368;
  return this;
}

void sub_1B2E20018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_castsReflectionImpl::getInstance(OZElement::OZElement_castsReflectionImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_castsReflectionImpl::getInstance(void)::OZElement_castsReflectionImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_castsReflectionImpl::getInstance(void)::OZElement_castsReflectionImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_castsReflectionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_castsReflectionImpl::_OZElement_castsReflection;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_castsReflectionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_castsReflectionImpl *v0;

  if (!OZElement::OZElement_castsReflectionImpl::_OZElement_castsReflection)
  {
    v0 = (OZElement::OZElement_castsReflectionImpl *)operator new();
    OZElement::OZElement_castsReflectionImpl::OZElement_castsReflectionImpl(v0);
    OZElement::OZElement_castsReflectionImpl::_OZElement_castsReflection = (uint64_t)v0;
  }
}

void sub_1B2E200E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_castsReflectionImpl *OZElement::OZElement_castsReflectionImpl::OZElement_castsReflectionImpl(OZElement::OZElement_castsReflectionImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_castsReflectionImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C3C0;
  *((_QWORD *)this + 5) = &unk_1E658C3E0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E20194(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_conversionImpl::getInstance(OZElement::OZElement_conversionImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_conversionImpl::getInstance(void)::OZElement_conversionImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_conversionImpl::getInstance(void)::OZElement_conversionImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_conversionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_conversionImpl::_OZElement_conversion;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_conversionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_conversionImpl *v0;

  if (!OZElement::OZElement_conversionImpl::_OZElement_conversion)
  {
    v0 = (OZElement::OZElement_conversionImpl *)operator new();
    OZElement::OZElement_conversionImpl::OZElement_conversionImpl(v0);
    OZElement::OZElement_conversionImpl::_OZElement_conversion = (uint64_t)v0;
  }
}

void sub_1B2E20260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_conversionImpl *OZElement::OZElement_conversionImpl::OZElement_conversionImpl(OZElement::OZElement_conversionImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_conversionImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C438;
  *((_QWORD *)this + 5) = &unk_1E658C458;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E20310(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_conversionTypeImpl::getInstance(OZElement::OZElement_conversionTypeImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_conversionTypeImpl::getInstance(void)::OZElement_conversionTypeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_conversionTypeImpl::getInstance(void)::OZElement_conversionTypeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_conversionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_conversionTypeImpl::_OZElement_conversionType;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_conversionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_conversionTypeImpl *v0;

  if (!OZElement::OZElement_conversionTypeImpl::_OZElement_conversionType)
  {
    v0 = (OZElement::OZElement_conversionTypeImpl *)operator new();
    OZElement::OZElement_conversionTypeImpl::OZElement_conversionTypeImpl(v0);
    OZElement::OZElement_conversionTypeImpl::_OZElement_conversionType = (uint64_t)v0;
  }
}

void sub_1B2E203DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_conversionTypeImpl *OZElement::OZElement_conversionTypeImpl::OZElement_conversionTypeImpl(OZElement::OZElement_conversionTypeImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 3.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 3.0, 0, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_conversionTypeImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C4B0;
  *((_QWORD *)this + 5) = &unk_1E658C4D0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E2048C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowOpacityImpl::getInstance(OZElement::OZElement_dropShadowOpacityImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::OZElement_dropShadowOpacityImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::OZElement_dropShadowOpacityImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowOpacityImpl::_OZElement_dropShadowOpacity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelPercent *v0;

  if (!OZElement::OZElement_dropShadowOpacityImpl::_OZElement_dropShadowOpacity)
  {
    v0 = (OZChannelPercent *)operator new();
    OZElement::OZElement_dropShadowOpacityImpl::OZElement_dropShadowOpacityImpl(v0);
    OZElement::OZElement_dropShadowOpacityImpl::_OZElement_dropShadowOpacity = (uint64_t)v0;
  }
}

void sub_1B2E20558(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelPercent *OZElement::OZElement_dropShadowOpacityImpl::OZElement_dropShadowOpacityImpl(OZChannelPercent *this)
{
  OZCurve *OZChannelPercentCurve;

  OZChannelPercentCurve = (OZCurve *)OZChannelPercent::createOZChannelPercentCurve(this, 0.75);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelPercentCurve, 0.75, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658C528;
  this->var5 = (PCString *)&unk_1E658C548;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E20604(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowBlurImpl::getInstance(OZElement::OZElement_dropShadowBlurImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::OZElement_dropShadowBlurImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::OZElement_dropShadowBlurImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowBlurImpl::_OZElement_dropShadowBlur;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_dropShadowBlurImpl *v0;

  if (!OZElement::OZElement_dropShadowBlurImpl::_OZElement_dropShadowBlur)
  {
    v0 = (OZElement::OZElement_dropShadowBlurImpl *)operator new();
    OZElement::OZElement_dropShadowBlurImpl::OZElement_dropShadowBlurImpl(v0);
    OZElement::OZElement_dropShadowBlurImpl::_OZElement_dropShadowBlur = (uint64_t)v0;
  }
}

void sub_1B2E206D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_dropShadowBlurImpl *OZElement::OZElement_dropShadowBlurImpl::OZElement_dropShadowBlurImpl(OZElement::OZElement_dropShadowBlurImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 5.0, 1, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_dropShadowBlurImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C5A0;
  *((_QWORD *)this + 5) = &unk_1E658C5C0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E20780(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowBlurInfo::getInstance(OZElement::OZElement_dropShadowBlurInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::OZElement_dropShadowBlurInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::OZElement_dropShadowBlurInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowBlurInfo::_OZElement_dropShadowBlurInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_dropShadowBlurInfo *v0;

  if (!OZElement::OZElement_dropShadowBlurInfo::_OZElement_dropShadowBlurInfo)
  {
    v0 = (OZElement::OZElement_dropShadowBlurInfo *)operator new();
    OZElement::OZElement_dropShadowBlurInfo::OZElement_dropShadowBlurInfo(v0);
    OZElement::OZElement_dropShadowBlurInfo::_OZElement_dropShadowBlurInfo = (uint64_t)v0;
  }
}

void sub_1B2E2084C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_dropShadowBlurInfo *OZElement::OZElement_dropShadowBlurInfo::OZElement_dropShadowBlurInfo(OZElement::OZElement_dropShadowBlurInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_dropShadowBlurInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658C618;
  *((_QWORD *)this + 10) = &unk_1E658C638;
  return this;
}

void sub_1B2E208FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowDistanceImpl::getInstance(OZElement::OZElement_dropShadowDistanceImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::OZElement_dropShadowDistanceImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::OZElement_dropShadowDistanceImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowDistanceImpl::_OZElement_dropShadowDistance;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_dropShadowDistanceImpl *v0;

  if (!OZElement::OZElement_dropShadowDistanceImpl::_OZElement_dropShadowDistance)
  {
    v0 = (OZElement::OZElement_dropShadowDistanceImpl *)operator new();
    OZElement::OZElement_dropShadowDistanceImpl::OZElement_dropShadowDistanceImpl(v0);
    OZElement::OZElement_dropShadowDistanceImpl::_OZElement_dropShadowDistance = (uint64_t)v0;
  }
}

void sub_1B2E209C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZElement::OZElement_dropShadowDistanceImpl *OZElement::OZElement_dropShadowDistanceImpl::OZElement_dropShadowDistanceImpl(OZElement::OZElement_dropShadowDistanceImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 5.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 5.0, 1, 1);
  PCSingleton::PCSingleton((OZElement::OZElement_dropShadowDistanceImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658C690;
  *((_QWORD *)this + 5) = &unk_1E658C6B0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E20A7C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowAngleImpl::getInstance(OZElement::OZElement_dropShadowAngleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::OZElement_dropShadowAngleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::OZElement_dropShadowAngleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowAngleImpl::_OZElement_dropShadowAngle;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelAngle *v0;

  if (!OZElement::OZElement_dropShadowAngleImpl::_OZElement_dropShadowAngle)
  {
    v0 = (OZChannelAngle *)operator new();
    OZElement::OZElement_dropShadowAngleImpl::OZElement_dropShadowAngleImpl(v0);
    OZElement::OZElement_dropShadowAngleImpl::_OZElement_dropShadowAngle = (uint64_t)v0;
  }
}

void sub_1B2E20B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelAngle *OZElement::OZElement_dropShadowAngleImpl::OZElement_dropShadowAngleImpl(OZChannelAngle *this)
{
  OZCurve *OZChannelAngleCurve;

  OZChannelAngleCurve = (OZCurve *)OZChannelAngle::createOZChannelAngleCurve(this, 5.49778714);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelAngleCurve, 5.49778714, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658C708;
  this->var5 = (PCString *)&unk_1E658C728;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E20C0C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_cropInfo::getInstance(OZElement::OZElement_cropInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement::OZElement_cropInfo::getInstance(void)::OZElement_cropInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement::OZElement_cropInfo::getInstance(void)::OZElement_cropInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_cropInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_cropInfo::_OZElement_cropInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_cropInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement::OZElement_cropInfo *v0;

  if (!OZElement::OZElement_cropInfo::_OZElement_cropInfo)
  {
    v0 = (OZElement::OZElement_cropInfo *)operator new();
    OZElement::OZElement_cropInfo::OZElement_cropInfo(v0);
    OZElement::OZElement_cropInfo::_OZElement_cropInfo = (uint64_t)v0;
  }
}

void sub_1B2E20CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_cropInfo *OZElement::OZElement_cropInfo::OZElement_cropInfo(OZElement::OZElement_cropInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 200.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_cropInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658C780;
  *((_QWORD *)this + 10) = &unk_1E658C7A0;
  return this;
}

void sub_1B2E20D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void PCLightWrapOptions::~PCLightWrapOptions(PCLightWrapOptions *this)
{
  *((_QWORD *)this + 4) = &off_1E65EB048;
  *((_BYTE *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'PCLightWrapOptions::~PCLightWrapOptions(PCLightWrapOptions *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 4) = &off_1E65EB048;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);
  JUMPOUT(0x1B5E29170);
}

void PCBlendOptions::~PCBlendOptions(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&unk_1E658C878;
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E658C8A8;
  PCSharedCount::~PCSharedCount(this + 3);
  this[4].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[6].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[5].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&unk_1E658C878;
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E658C8A8;
  PCSharedCount::~PCSharedCount(this + 3);
  this[4].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[6].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[5].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'PCBlendOptions::~PCBlendOptions(PCBlendOptions *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E658C878;
  v1[4].var0 = (PC_Sp_counted_base *)&unk_1E658C8A8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  v1[4].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[6].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[5].var0);
}

{
  PCBlendOptions::~PCBlendOptions((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void std::vector<PCVector3<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 24 * v6;
    std::vector<PCVector3<double>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1B2E21054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::list<OZEffect *>::__move_assign(uint64_t *a1, _QWORD *a2)
{
  std::__list_imp<unsigned int>::clear(a1);
  return std::list<OZShapeBehaviorVertexCacheEntry *>::splice((uint64_t)a1, a1, a2);
}

PCSharedCount *PCPtr<LiRenderer>::PCPtr<LiRendererBase>(PCSharedCount *a1, const PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  PCSharedCount v6;

  var0 = a2->var0;
  if (a2->var0)
  a1->var0 = var0;
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B2E21164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

uint64_t FloatRetrieval()
{
  return 0;
}

uint64_t IntRetrieval()
{
  return 0;
}

uint64_t BoolRetrieval()
{
  return 0;
}

uint64_t RGBARetrieval()
{
  return 0;
}

uint64_t RGBRetrieval()
{
  return 0;
}

uint64_t PointRetrieval()
{
  return 0;
}

uint64_t StringRetrieval()
{
  return 0;
}

uint64_t FontRetrieval()
{
  return 0;
}

uint64_t CustomRetrieval()
{
  return 0;
}

uint64_t HistogramRetrieval()
{
  return 0;
}

uint64_t NoOpRetrieval()
{
  return 0;
}

uint64_t getMaterialPlist(void)
{
  unsigned __int8 v0;

  {
    getMaterialPlist(void)::materialPlist = loadMaterialPlist();
  }
  return getMaterialPlist(void)::materialPlist;
}

void sub_1B2E21238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OZGetSubstanceLayerDictionary(void)
{
  return objc_msgSend((id)getMaterialPlist(), "objectForKey:", CFSTR("substance"));
}

uint64_t OZGetImageAsset(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKey:", CFSTR("image asset"));
}

uint64_t OZGetSpecularShininessAsset(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKey:", CFSTR("specular shininess asset"));
}

uint64_t OZGetSpecularIntensityAsset(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKey:", CFSTR("specular intensity asset"));
}

id OZCreateURLForAssetLayer(NSDictionary *a1)
{
  NSDictionary *v2;
  id v3;
  id v5;

  v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("image asset"));
  if (!v2)
  {
    v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("mask asset"));
    if (!v2)
    {
      v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("specular angle asset"));
      if (!v2)
      {
        v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("specular shininess asset"));
        if (!v2)
        {
          v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("specular intensity asset"));
          if (!v2)
          {
            v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("gradient asset"));
            if (!v2)
              return 0;
          }
        }
      }
    }
  }
  OZGetAssetURL(v2, (PCURL *)&v5);
  v3 = v5;
  PCURL::~PCURL((PCURL *)&v5);
  return v3;
}

void sub_1B2E213B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZGetAssetURL(NSDictionary *a1@<X0>, PCURL *a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  const __CFString *v7;
  void *v8;
  id v9;

  v4 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("name"));
  v5 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("extension"));
  v6 = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("subdir"));
  if (v6)
    v7 = (const __CFString *)objc_msgSend(CFSTR("PhysicalLayerAssets/"), "stringByAppendingString:", v6);
  else
    v7 = CFSTR("PhysicalLayerAssets");
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.ozone.framework"));
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v9);
  PCURL::PCURL(a2, (CFTypeRef)objc_msgSend(v8, "URLForResource:withExtension:subdirectory:", v4, v5, v7));
  PCAutoreleasePool::~PCAutoreleasePool(&v9);
}

void sub_1B2E214B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va);
  _Unwind_Resume(a1);
}

id OZGetAssetWidth(NSDictionary *a1)
{
  id result;

  result = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("width"));
  if (result)
    return (id)objc_msgSend(result, "unsignedIntValue");
  return result;
}

id OZGetAssetHeight(NSDictionary *a1)
{
  id result;

  result = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("height"));
  if (result)
    return (id)objc_msgSend(result, "unsignedIntValue");
  return result;
}

id OZGetAssetIsTransparent(NSDictionary *a1)
{
  id result;

  result = -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("transparent"));
  if (result)
    return (id)objc_msgSend(result, "BOOLValue");
  return result;
}

uint64_t loadMaterialPlist(void)
{
  __CFBundle *BundleWithIdentifier;
  CFURLRef v1;
  uint64_t v2;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.ozone.framework"));
  v1 = CFBundleCopyResourceURL(BundleWithIdentifier, CFSTR("OZMaterials"), CFSTR("plist"), 0);
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfURL:", v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

void OZGradientSource::OZGradientSource(OZGradientSource *this)
{
  *((_QWORD *)this + 11) = &off_1E65EB048;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E658C9F8);
  *(_QWORD *)this = &off_1E658C8F0;
  *((_QWORD *)this + 11) = &unk_1E658C9D8;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
}

void sub_1B2E21620(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 88) = v4;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

CGColorSpace **OZGradientSource::getHelium@<X0>(OZGradientSource *this@<X0>, LiAgent *a2@<X1>, HGradientBlend **a3@<X8>)
{
  const FxColorDescription *RequestedColorDescription;
  CGColorSpace *CGColorSpace;
  float64x2_t v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  FxColorDescription v14;
  uint64_t v15;
  float32x4_t v16[8];
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  HGNode *v20;
  FxColorDescription v21;

  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  FxColorDescription::FxColorDescription(&v21, RequestedColorDescription, CGColorSpace);
  LiAgent::getHeliumInColorDescription(a2, *((LiImageSource **)this + 2), &v21, &v20);
  if (v20)
  {
    v8 = *(float64x2_t *)((char *)this + 40);
    v18 = *(float64x2_t *)((char *)this + 56);
    v19 = v8;
    v17 = 0x3FF0000000000000;
    LiAgent::getInversePixelTransform(a2, 0.0, (uint64_t)v16);
    v9 = (float32x4_t *)*((_QWORD *)this + 9);
    v10 = FxColorDescription::getCGColorSpace(&v21);
    OZGradient1D::getHeliumGradientTexture(v9, v16, &v17, &v19, &v18, v10);
    if (FxColorDescription::isHDR(&v21))
    {
      FxColorDescription::FxColorDescription((uint64_t)&v14, (uint64_t)&v21, 0);
      FxApplyColorConform(&v15, &v14, &v21, &v13);
      v11 = v13;
      if (v15 == v13)
      {
        if (v15)
          (*(void (**)(void))(*(_QWORD *)v15 + 24))();
      }
      else
      {
        if (v15)
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 24))();
          v11 = v13;
        }
        v15 = v11;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v14._pcColorDesc._colorSpaceRef._obj);
    }
    FxApplyGradientBlendRequest(&v20, &v15, a3);
    LiAgent::setActualColorDescription((CGColorSpace **)a2, &v21);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    if (v20)
      (*(void (**)(HGNode *))(*(_QWORD *)v20 + 24))(v20);
  }
  else
  {
    *a3 = 0;
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v21._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2E217E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CGColorSpace *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a11);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  v17 = *(_QWORD *)(v15 - 88);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v15 - 80));
  _Unwind_Resume(a1);
}

void OZGradientSource::~OZGradientSource(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E658CA48;
  this[11].var0 = (PC_Sp_counted_base *)off_1E658CB30;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E658CA00);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)off_1E658CA48;
  this[11].var0 = (PC_Sp_counted_base *)off_1E658CB30;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E658CA00);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZGradientSource::~OZGradientSource(OZGradientSource *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)off_1E658CA48;
  v1[11].var0 = (PC_Sp_counted_base *)off_1E658CB30;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E658CA00);
  v1[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)off_1E658CA48;
  v1[11].var0 = (PC_Sp_counted_base *)off_1E658CB30;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E658CA00);
  v1[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);
  JUMPOUT(0x1B5E29170);
}

OZChannelBase *OZElement::updateColorConversionChannels(OZElement *this)
{
  OZChannelBase *result;
  OZScene *v3;
  unsigned int v4;
  int ValueAsInt;
  unsigned int v6;
  OZChannelBase *v7;

  result = (OZChannelBase *)(*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 2240))(this);
  if ((_DWORD)result)
  {
    v3 = (OZScene *)(*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 272))(this);
    v4 = llround(OZScene::getSceneWhiteLevel(v3) * 100.0);
    if (*((_DWORD *)this + 3166) != v4)
      *((_DWORD *)this + 3166) = v4;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 12000), MEMORY[0x1E0CA2E68], 0.0))
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 12256), 1, 1);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 12256), MEMORY[0x1E0CA2E68], 0.0);
      return OZChannelBase::enable((OZChannelBase *)((char *)this + 12512), ValueAsInt == 2, 1);
    }
    else
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 12256), 0, 1);
      v6 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 2232))(this);
      OZChannel::setValue((OZChannel *)((char *)this + 12256), MEMORY[0x1E0CA2E68], (double)v6, 1);
      v7 = (OZChannelBase *)((char *)this + 12512);
      OZChannelBase::enable(v7, 0, 1);
      return (OZChannelBase *)OZChannel::resetToDefault((OZChannel *)v7, 1);
    }
  }
  return result;
}

void OZImageNode::OZImageNode(OZImageNode *this)
{
  *(_QWORD *)this = &unk_1E658CDC8;
  PCWorkingColorVector::PCWorkingColorVector((OZImageNode *)((char *)this + 8));
  *(_QWORD *)this = off_1E658CCC8;
}

void OZImageNode::getHeliumGraph()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "subclass must implement");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageNode.cpp");
  PCException::PCException(exception, &v2, &v1, 49);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2E21C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

float OZImageNode::getDimensions(OZImageNode *this, float *a2, float *a3, const OZRenderState *a4)
{
  double v11;
  float v12;
  float result;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  (*(void (**)(OZImageNode *, _QWORD *, const OZRenderState *))(*(_QWORD *)this + 16))(this, v14, a4);
  v11 = *((double *)&v15 + 1);
  v12 = *(double *)&v15;
  *a2 = v12;
  result = v11;
  *a3 = result;
  return result;
}

uint64_t OZImageNode::makeImageSource(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

PCSharedCount *OZImageNode::makeRender@<X0>(OZImageNode *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZImageNodeRender *v7;
  uint64_t v8;

  v7 = (OZImageNodeRender *)operator new();
  OZImageNodeRender::OZImageNodeRender(v7, this, a2);
  v8 = *(_QWORD *)v7;
  a3->var0 = (PC_Sp_counted_base *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24));
  return PCSharedCount::PCSharedCount(a3 + 1, (OZImageNodeRender *)((char *)v7 + *(_QWORD *)(v8 - 32)));
}

void sub_1B2E21D88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E56B8860);
  _Unwind_Resume(a1);
}

PCSharedCount *OZImageNode::makeRenderImageSource@<X0>(OZImageNode *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZImageNodeRender *v7;
  uint64_t v8;

  v7 = (OZImageNodeRender *)operator new();
  OZImageNodeRender::OZImageNodeRender(v7, this, a2);
  v8 = *(_QWORD *)v7;
  a3->var0 = (PC_Sp_counted_base *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24));
  return PCSharedCount::PCSharedCount(a3 + 1, (OZImageNodeRender *)((char *)v7 + *(_QWORD *)(v8 - 32)));
}

void sub_1B2E21E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E56B8860);
  _Unwind_Resume(a1);
}

void OZImageNode::makeRenderTemporalSource(OZImageNode *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  PC_Sp_counted_base *v8;
  PCSharedCount v9;
  PCSharedCount v10;
  PC_Sp_counted_base *v11;
  PCSharedCount v12;

  (*(void (**)(PC_Sp_counted_base **__return_ptr))(*(_QWORD *)this + 168))(&v11);
  if (v11)
  {
    v8 = (PC_Sp_counted_base *)operator new();
    v9.var0 = v11;
    PCSharedCount::PCSharedCount(&v10, &v12);
    OZLiElementTimeRender::OZLiElementTimeRender((uint64_t)v8, (uint64_t)this, (uint64_t)a2, a3, &v9);
    a4->var0 = v8;
    PCSharedCount::PCSharedCount(a4 + 1, (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
    PCSharedCount::~PCSharedCount(&v10);
  }
  else
  {
    a4->var0 = 0;
    PCSharedCount::PCSharedCount(a4 + 1);
  }
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2E21F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(v12);
  PCSharedCount::~PCSharedCount(&a12);
  _Unwind_Resume(a1);
}

uint64_t OZLiElementTimeRender::OZLiElementTimeRender(uint64_t a1, uint64_t a2, uint64_t a3, const OZRenderGraphState *a4, const PCSharedCount *a5)
{
  *(_QWORD *)(a1 + 344) = &off_1E65EB048;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1E65AF090);
  *(_QWORD *)a1 = &off_1E65AEFA0;
  *(_QWORD *)(a1 + 344) = &unk_1E65AF070;
  *(_QWORD *)(a1 + 16) = a2;
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)(a1 + 24), a4);
  *(PCSharedCount *)(a1 + 328) = (PCSharedCount)a5->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 336), a5 + 1);
  *(_QWORD *)(a1 + 320) = 0;
  return a1;
}

void sub_1B2E22024(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const PCString *v3;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1 + 248);
  std::__list_imp<unsigned int>::clear((_QWORD *)(v1 + 88));
  OZChannelBase::setRangeName((OZChannelBase *)v1, v3 + 1);
  *(_QWORD *)(v1 + 344) = v2 + 16;
  *(_BYTE *)(v1 + 360) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 352));
  _Unwind_Resume(a1);
}

void OZImageNode::buildRenderGraph(OZImageNode *this, OZRenderParams *a2, PCSharedCount *a3, const OZRenderGraphState *a4)
{
  LiGeode *v5;
  PCSharedCount v6;
  PCSharedCount v7;
  PCSharedCount v8;
  PCSharedCount v9;
  LiImageSource *v10;
  PCSharedCount v11;

  (*(void (**)(LiImageSource **__return_ptr))(*(_QWORD *)this + 152))(&v10);
  v5 = (LiGeode *)operator new();
  LiGeode::LiGeode(v5, v10);
  v8.var0 = (PC_Sp_counted_base *)v5;
  PCSharedCount::PCSharedCount(&v9, (LiGeode *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v6, &v8);
  LiGraphBuilder::add2d(a3, &v6);
  PCSharedCount::~PCSharedCount(&v7);
  PCSharedCount::~PCSharedCount(&v9);
  PCSharedCount::~PCSharedCount(&v11);
}

void sub_1B2E22130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  PCSharedCount *v6;
  PCSharedCount *v7;
  va_list va;

  va_start(va, a6);
  PCSharedCount::~PCSharedCount(v7 + 1);
  PCSharedCount::~PCSharedCount(v6);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

__n128 OZRenderNode::getBounds(uint64_t a1, __n128 *a2)
{
  __n128 result;

  __asm { FMOV            V0.2D, #-1.0 }
  a2[1] = result;
  return result;
}

void OZImageElement::registerRetiming(OZImageElement *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      OZRetimingUtil::RetimingExaminer::RetimingExaminer((uint64_t)&OZImageElement::registerRetiming(void)::sRetimer);
      OZImageElement::registerRetiming(void)::sRetimer = (uint64_t)&unk_1E658F1F0;
      __cxa_atexit((void (*)(void *))OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate, &OZImageElement::registerRetiming(void)::sRetimer, &dword_1B2737000);
    }
  }
}

void sub_1B2E22618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement(OZImageElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCURL *v6;
  PCURL *v7;
  PCURL *v8;
  OZImageElement::OZImageElement_pageNumberImpl *v9;
  OZImageElement::OZImageElement_pageNumberInfo *Instance;
  OZChannelInfo *v11;
  PCURL *v12;
  PCURL *v13;
  OZImageElement::OZImageElement_timeScaleImpl *v14;
  OZChannelImpl *v15;
  PCURL *v16;
  PCURL *v17;
  PCURL *v18;
  PCURL *v19;
  OZImageElement::OZImageElement_retimeFrameCacheImpl *v20;
  OZChannelImpl *v21;
  PCURL *v22;
  PCURL *v23;
  PCURL *v24;
  OZImageElement::OZImageElement_loopDurationImpl *v25;
  OZChannelImpl *v26;
  PCURL *v27;
  PCSharedCount *v28;
  OZImageElement::OZImageElement_layerImpl *v29;
  OZImageElement::OZImageElement_layerInfo *v30;
  OZChannelInfo *v31;
  PCURL *v32;
  PCURL *v33;
  PCString *v34;
  PCString *v35;
  OZImageElement::OZImageElement_dropInputIDImpl *v36;
  OZImageElement::OZImageElement_dropInputIDInfo *v37;
  OZChannelInfo *v38;
  PCURL *v39;
  PCURL *v40;
  PCURL *v41;
  PCURL *v42;
  PCURL *v43;
  PCURL *v44;
  PCURL *v45;
  PCURL *v46;
  PCURL *v47;
  PCURL *v48;
  PCURL *v49;
  PCURL *v50;
  PCURL *v51;
  PCURL *v52;
  OZImageElement::OZImageElement_dropPanImpl *v53;
  OZImageElement::OZImageElement_dropPanInfo *v54;
  OZChannelInfo *v55;
  PCURL *v56;
  OZImageElement::OZImageElement_dropScaleImpl *v57;
  OZChannelImpl *v58;
  PCURL *v59;
  OZImageElement::OZImageElement_dropFillOpaqueImpl *v60;
  OZChannelImpl *v61;
  PCURL *v62;
  PCURL *v63;
  PCURL *v64;
  OZImageElement::OZImageElement_dropWidthImpl *v65;
  OZImageElement::OZImageElement_dropWidthInfo *v66;
  OZChannelInfo *v67;
  PCURL *v68;
  OZImageElement::OZImageElement_dropHeightImpl *v69;
  OZImageElement::OZImageElement_dropHeightInfo *v70;
  OZChannelInfo *v71;
  PCString *v72;
  PCString *v73;
  PCString *v74;
  PCString *v75;
  uint64_t v76;
  PCURL *v82;
  PCURL *v83;
  PCURL *v84;
  PCURL *v85;
  PCURL *v86;
  PCURL *v87;
  PCURL *v88;
  PCURL *v89;
  const PCString *v90;
  PCString *v91;
  __CFString *v92;
  PCURL *v93;
  __int128 v94;
  PCString v95;
  PCString v96[2];

  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  *v5 = &off_1E658CE28;
  v5[2] = &unk_1E658D758;
  v5[6] = &unk_1E658D9B0;
  v5[816] = &unk_1E658DA08;
  PCURL::PCURL((PCURL *)v96, CFSTR("Channel Image Element Footage Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18776), v96, (OZChannelFolder *)((char *)this + 320), 0x144u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v6, CFSTR("Channel Image Element Footage"));
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 18904), v96, (OZChannelFolder *)((char *)this + 18776), 0x12Cu, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v7, CFSTR("Channel Image Element Footage"));
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 19112), v96, (OZChannelFolder *)((char *)this + 320), 0x12Cu, 0xAu);
  PCString::~PCString(v96);
  PCURL::PCURL(v8, CFSTR("Channel Image Element Page Number"));
  Instance = (OZImageElement::OZImageElement_pageNumberInfo *)OZImageElement::OZImageElement_pageNumberImpl::getInstance(v9);
  v11 = (OZChannelInfo *)OZImageElement::OZImageElement_pageNumberInfo::getInstance(Instance);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19320), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x12Du, 0, (OZChannelImpl *)Instance, v11);
  PCString::~PCString(v96);
  PCURL::PCURL(v12, CFSTR("Channel Image Element Background Color"));
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 19472), 1.0, 1.0, 1.0, 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x12Eu, 0x10002u, 6u);
  PCString::~PCString(v96);
  PCURL::PCURL(v13, CFSTR("Channel Image Element Time Scale"));
  v15 = (OZChannelImpl *)OZImageElement::OZImageElement_timeScaleImpl::getInstance(v14);
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 20632), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x135u, 4259840, v15, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v16, CFSTR("Channel Image Element Time Reverse"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20784), 0, v96, (OZChannelFolder *)((char *)this + 320), 0x136u, 0x410000u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v17, CFSTR("Channel Image Element Time Remap Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Time Remap Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 20936), 0, v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x12Fu, 2, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v18, CFSTR("Channel Image Element Retime Frame"));
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZImageElement *)((char *)this + 21192), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x130u, 131074);
  PCString::~PCString(v96);
  PCURL::PCURL(v19, CFSTR("Channel Image Element Retime Frame Cache"));
  v21 = (OZChannelImpl *)OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(v20);
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 21344), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x13Fu, 131074, v21, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v22, CFSTR("Channel Image Element Retime Sampling Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Retime Sampling Label"));
  OZChannelEnumRetime::OZChannelEnumRetime((OZImageElement *)((char *)this + 21496), v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x131u, 2u);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v23, CFSTR("Channel Image Element End Condition Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element End Condition Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 21752), v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x132u, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v24, CFSTR("Channel Image Element Loop Duration"));
  v26 = (OZChannelImpl *)OZImageElement::OZImageElement_loopDurationImpl::getInstance(v25);
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 22008), 0.0, v96, (OZChannelFolder *)((char *)this + 320), 0x133u, 32770, v26, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v27, CFSTR("Channel Image Element Duration Cache"));
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 22160), 0.0, v96, (OZChannelFolder *)((char *)this + 320), 0x140u, 2, 0, 0);
  PCString::~PCString(v96);
  PCSharedCount::PCSharedCount(v28);
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Layer Number"));
  v30 = (OZImageElement::OZImageElement_layerInfo *)OZImageElement::OZImageElement_layerImpl::getInstance(v29);
  v31 = (OZChannelInfo *)OZImageElement::OZImageElement_layerInfo::getInstance(v30);
  OZChannelEnumLayer::OZChannelEnumLayer((OZImageElement *)((char *)this + 22312), v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x134u, 2u, (OZChannelImpl *)v30, v31);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v32, CFSTR("Channel Image Element Drop Zone"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22568), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x137u, 0x80u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v33, CFSTR("Channel Image Element Drop Fit Mode Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Fit Mode Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 22720), v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x13Du, 0, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCString::PCString(v34, "Passthrough Placeholder");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22976), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x153u, 0, 0, 0);
  PCString::~PCString(v96);
  v36 = (OZImageElement::OZImageElement_dropInputIDImpl *)PCString::PCString(v35, "Source ID");
  v37 = (OZImageElement::OZImageElement_dropInputIDInfo *)OZImageElement::OZImageElement_dropInputIDImpl::getInstance(v36);
  v38 = (OZChannelInfo *)OZImageElement::OZImageElement_dropInputIDInfo::getInstance(v37);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 23128), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x154u, 2, (OZChannelImpl *)v37, v38);
  PCString::~PCString(v96);
  PCURL::PCURL(v39, CFSTR("Channel Image Element Drop Use Display Aspect"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23280), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x143u, 0, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v40, CFSTR("Channel Image Element Drop Type Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23432), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x141u, 0, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v41, CFSTR("Channel Image Element Drop Type Enum (Composition)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23688), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Bu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v42, CFSTR("Channel Image Element Drop Type Enum (Generator)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23944), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Cu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v43, CFSTR("Channel Image Element Drop Type Enum (Effect)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24200), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Du, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v44, CFSTR("Channel Image Element Drop Type Enum (Effect, No Off)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24456), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Eu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v45, CFSTR("Channel Image Element Drop Type Enum (Title)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24712), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Fu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v46, CFSTR("Channel Image Element Drop Type Enum (Title, No Off)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24968), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x150u, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v47, CFSTR("Channel Image Element Drop Type Enum (Transition)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25224), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x151u, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v48, CFSTR("Channel Image Element Drop Type Enum (Transition, No Off)"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25480), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x152u, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v49, CFSTR("Channel Image Element Drop Media Type Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Drop Media Type Label"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25736), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x142u, 0, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v50, CFSTR("Channel Image Element Drop Replaced"));
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 171, 0, v96, (OZChannelFolder *)((char *)this + 448), 0x138u, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v51, CFSTR("Channel Image Element Drop Fit Factor"));
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 26144), 1.0, 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x13Eu, 2u, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v52, CFSTR("Channel Image Element Drop Pan"));
  v54 = (OZImageElement::OZImageElement_dropPanInfo *)OZImageElement::OZImageElement_dropPanImpl::getInstance(v53);
  v55 = (OZChannelInfo *)OZImageElement::OZImageElement_dropPanInfo::getInstance(v54);
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 26584), 0.0, 0.0, v96, (OZChannelFolder *)((char *)this + 448), 0x146u, 0, 2u, (OZChannelImpl *)v54, v55);
  PCString::~PCString(v96);
  PCURL::PCURL(v56, CFSTR("Channel Image Element Drop Scale"));
  v58 = (OZChannelImpl *)OZImageElement::OZImageElement_dropScaleImpl::getInstance(v57);
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 27288), 1.0, 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x147u, 0, 2u, v58, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v59, CFSTR("Channel Image Element Drop Fill Opaque"));
  v61 = (OZChannelImpl *)OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(v60);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27728), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x148u, 0, v61, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v62, CFSTR("Channel Image Element Drop Fill Color"));
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 27880), 0.0, 0.0, 0.0, 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x149u, 0, 6u);
  PCString::~PCString(v96);
  PCURL::PCURL(v63, CFSTR("Channel Image Element Drop Clear"));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 29040), (void (*)(void *))OZImageElement::clearDropZoneCallbackStub, this, v96, (OZChannelFolder *)((char *)this + 448), 0x13Bu, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v64, CFSTR("Channel Image Element Drop Width"));
  v66 = (OZImageElement::OZImageElement_dropWidthInfo *)OZImageElement::OZImageElement_dropWidthImpl::getInstance(v65);
  v67 = (OZChannelInfo *)OZImageElement::OZImageElement_dropWidthInfo::getInstance(v66);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29232), 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x139u, 2, (OZChannelImpl *)v66, v67);
  PCString::~PCString(v96);
  PCURL::PCURL(v68, CFSTR("Channel Image Element Drop Height"));
  v70 = (OZImageElement::OZImageElement_dropHeightInfo *)OZImageElement::OZImageElement_dropHeightImpl::getInstance(v69);
  v71 = (OZChannelInfo *)OZImageElement::OZImageElement_dropHeightInfo::getInstance(v70);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29384), 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x13Au, 2, (OZChannelImpl *)v70, v71);
  PCString::~PCString(v96);
  PCString::PCString(v72, "Remove Background");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29536), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x155u, 0, 0, 0);
  PCString::~PCString(v96);
  PCString::PCString(v73, "Apply Motion Lights To Subject");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29688), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x156u, 0, 0, 0);
  PCString::~PCString(v96);
  PCString::PCString(v74, "Use Camera Source");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29840), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x157u, 0, 0, 0);
  PCString::~PCString(v96);
  PCString::PCString(v75, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29992), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x14Au, 0xAu, 0, 0);
  PCString::~PCString(v96);
  *((_BYTE *)this + 30144) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30148));
  PCURL::PCURL((OZImageElement *)((char *)this + 30168), "", 0);
  v76 = MEMORY[0x1E0CA2E68];
  *((_OWORD *)this + 1886) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 3774) = *(_QWORD *)(v76 + 16);
  *((_DWORD *)this + 7550) = 0;
  *((_QWORD *)this + 3776) = 0;
  *((_QWORD *)this + 3778) = 0;
  *((_QWORD *)this + 3777) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v94 = _Q0;
  *(_OWORD *)((char *)this + 30232) = _Q0;
  *((_DWORD *)this + 7562) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30252));
  *((_BYTE *)this + 30268) = 0;
  *((_QWORD *)this + 3784) = 0;
  *(_WORD *)((char *)this + 30289) = 0;
  *((_QWORD *)this + 3793) = 0;
  *(_OWORD *)((char *)this + 30296) = 0u;
  *(_OWORD *)((char *)this + 30312) = 0u;
  *(_OWORD *)((char *)this + 30328) = 0u;
  PCURL::PCURL((PCURL *)v96, CFSTR("Channel Image Element Cinematography Folder"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30352), v96, (OZChannelFolder *)((char *)this + 320), 0x158u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v82, CFSTR("Channel Image Element Focus Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Focus"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 30480), v96, &v95, (OZChannelFolder *)((char *)this + 30352), 0x159u, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v83, CFSTR("Channel Image Element Aperture"));
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 30736), 1.4, v96, (OZChannelFolder *)((char *)this + 30352), 0x15Au, 0, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v84, CFSTR("Channel Image Element Disparity"));
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 30888), 0.0, v96, (OZChannelFolder *)((char *)this + 30352), 0x15Bu, 2, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v85, CFSTR("Channel Image Element FX Type Mode Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element FX Type"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 31040), v96, &v95, (OZChannelFolder *)((char *)this + 30352), 0x15Du, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v86, CFSTR("Channel Image Element User Focus Points"));
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 31296), v96, (OZChannelFolder *)((char *)this + 30352), 0x15Cu, 0, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v87, CFSTR("Channel Image Element Display Mode Enum"));
  PCURL::PCURL((PCURL *)&v95, CFSTR("Channel Image Element Display Mode"));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 32000), v96, &v95, (OZChannelFolder *)((char *)this + 30352), 0x15Eu, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v88, CFSTR("Channel Image Element Initialized"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32256), 0, v96, (OZChannelFolder *)((char *)this + 30352), 0x15Fu, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v89, CFSTR("Channel Image Element Retimed"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32408), 0, v96, (OZChannelFolder *)((char *)this + 30352), 0x160u, 2u, 0, 0);
  PCString::~PCString(v96);
  *((_QWORD *)this + 4072) = 0;
  *((_OWORD *)this + 2035) = 0u;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 18904, 0);
  OZChanObjectManipRef::setAlwaysUpdateDefaultValue((uint64_t)this + 18904, 1);
  *((_BYTE *)this + 19096) = 1;
  *(_QWORD *)((char *)this + 18396) = 0x100000002;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 29040), 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 21192), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 20784), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 20936), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 21496), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 21752), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21192), 128, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21344), 128, 0);
  *((_BYTE *)this + 30145) = 0;
  OZImageElement::getRetimingHash(this);
  *(_OWORD *)((char *)this + 30148) = *(_OWORD *)&v96[0].var0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 128, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 128, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 26584), 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 27288), 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 27880), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 23688), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23688), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23688), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 23944), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23944), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23944), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24200), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24200), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24200), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24456), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24456), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24456), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24712), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24712), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24712), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24968), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24968), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24968), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 25224), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25224), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25224), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 25480), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25480), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25480), 0x2000000000, 0);
  OZImageElement::showHideDropZoneChannels(this, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 22568));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23432));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23688));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23944));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24200));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24456));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24712));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24968));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25224));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25480));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25736));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 22720));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 26584));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 27288));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 27728));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 27880));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23280));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 29040));
  OZChannelBase::setRangeName((OZChannelBase *)this, v90);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 30352), 131076);
  OZChannelBase::setResetCallback((OZChannelBase *)this + 271, (void (*)(OZChannelBase *, void *))OZImageElementCinematographyResetCallback, (uint64_t *)this, 0);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 320), (OZChannelBase *)this + 271);
  OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 320), (const OZChannelBase *)((char *)this + 6552), (OZChannelBase *)this + 271);
  OZChannel::setMin((OZChannel *)((char *)this + 30736), 2.0);
  OZChannel::setMax((OZChannel *)((char *)this + 30736), 16.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 30736), 2.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 30736), 16.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 30736), 0.1);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 30736), 0.01);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 30736), 1);
  v91 = PCString::PCString(v96, "PISliderTransformerAperture");
  v92 = PCString::cf_str(v91);
  OZChannel::setSliderTransformerName((OZChannel *)((char *)this + 30736), v92);
  PCString::~PCString(v96);
  PCURL::PCURL(v93, CFSTR("Channel Image Element Aperture Suffix"));
  OZChannel::setSuffix((OZChannel *)((char *)this + 30736), v96);
  PCString::~PCString(v96);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 30888), 0x20000000000, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 30480));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 30888));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 31296));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 32000));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 31040));
  *((_DWORD *)this + 8146) = 0;
  *(_OWORD *)((char *)this + 30232) = v94;
  *((_QWORD *)this + 3785) = 0;
  *((_BYTE *)this + 30288) = 0;
}

void sub_1B2E23EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelBool *a11, PCURL *a12, OZChannelBool *a13, OZChannelBool *a14, OZChannelBool *a15, OZChannelBool *a16, OZChannelColor *a17, OZChannel *a18, OZChanObjectRefWithPicker *a19, OZChannelFolder *a20,OZChannel *a21,OZChannel *a22,OZChannel2D *a23,OZChannelBool *a24,OZChannel *a25,PCString *a26,OZChannel *a27,OZChannel *a28,uint64_t a29,uint64_t a30,OZChannelPosition *a31,OZChannelEnum *a32,OZChannelEnum *a33,OZChannelBool *a34,OZChannelEnum *a35,OZChannelBool *a36,OZChannelEnum *a37,OZChannelEnum *a38,OZChannelBool *a39,OZChannelEnum *a40,PCString *a41,OZChannel *a42)
{
  uint64_t v42;
  OZChannel *v43;
  OZChannel *v44;
  OZChannelFolder *v45;
  OZChannelEnum *v46;
  uint64_t v47;
  void *v49;

  PCString::~PCString((PCString *)(v47 - 104));
  v49 = *(void **)(v42 + 32560);
  if (v49)
  {
    *(_QWORD *)(v42 + 32568) = v49;
    operator delete(v49);
  }
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelEnum::~OZChannelEnum(v46);
  OZChannelPosition::~OZChannelPosition(a31);
  OZChannelEnum::~OZChannelEnum(a32);
  OZChannel::~OZChannel(v44);
  OZChannel::~OZChannel(v43);
  OZChannelEnum::~OZChannelEnum(a33);
  OZChannelFolder::~OZChannelFolder(v45);
  PCURL::~PCURL(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannelButton::~OZChannelButton(*(OZChannelButton **)(v47 - 232));
  OZChannelColor::~OZChannelColor(*(OZChannelColor **)(v47 - 240));
  OZChannelBool::~OZChannelBool(a34);
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v47 - 224));
  OZChannelPosition::~OZChannelPosition(*(OZChannelPosition **)(v47 - 216));
  OZChannel2D::~OZChannel2D(a23);
  OZChannelBool::~OZChannelBool(a24);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 192));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 184));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 176));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 168));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 160));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 152));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 136));
  OZChannelEnum::~OZChannelEnum(a37);
  OZChannelBool::~OZChannelBool(a36);
  OZChannel::~OZChannel(*(OZChannel **)(v47 - 128));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v47 - 120));
  OZChannelEnum::~OZChannelEnum(a38);
  OZChannelBool::~OZChannelBool(a39);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel::~OZChannel(a27);
  OZChannel::~OZChannel(a28);
  OZChannelEnum::~OZChannelEnum(a40);
  OZChannelEnum::~OZChannelEnum(a41);
  OZChannel::~OZChannel(a42);
  OZChannelRetimeFrame::~OZChannelRetimeFrame(*(OZChannelRetimeFrame **)(v47 - 208));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 256));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v47 - 248));
  OZChannel::~OZChannel(a25);
  OZChannelColor::~OZChannelColor(a17);
  OZChannel::~OZChannel(a18);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(a19);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v47 - 200));
  OZChannelFolder::~OZChannelFolder(a20);
  OZElement::~OZElement((OZElement *)v42);
  _Unwind_Resume(a1);
}

void OZImageElement::clearDropZoneCallbackStub(OZImageElement *this, void *a2)
{
  if (this)
  {
    if (OZImageElement::isDropZone(this))
      OZImageElement::clearDropZoneCallback(this);
  }
}

OZChannelBase *OZImageElement::showHideDropZoneChannels(OZImageElement *this, char a2)
{
  OZChannelBase *v4;
  uint64_t v5;
  uint64_t v6;
  void *Footage;
  int v8;
  char v9;
  OZChannelBase *v10;
  int ValueAsInt;
  OZChannelBase *v12;
  uint64_t v13;
  uint64_t v14;
  OZChannelBase *result;
  uint64_t v16;
  int isDefaultDropZoneFootage;
  uint64_t v18;

  *((_BYTE *)this + 30249) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22568), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23432), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23688), 2, a2);
  v4 = (OZChannelBase *)((char *)this + 23944);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23944), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24200), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24456), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24712), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24968), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25224), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25480), 2, a2);
  v5 = *((_QWORD *)this + 121);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 1584);
    if (v6)
    {
      if (OZImageElement::isDropZone(this) && OZImageElement::getFootage(this))
      {
        Footage = OZImageElement::getFootage(this);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)Footage + 1232))(&v18);
        isDefaultDropZoneFootage = OZImageElement::isDefaultDropZoneFootage((const PCURL *)&v18);
        PCURL::~PCURL((PCURL *)&v18);
        switch(*(_DWORD *)(v6 + 320))
        {
          case 1:
            if ((isDefaultDropZoneFootage & 1) == 0)
              goto LABEL_20;
            break;
          case 2:
            v4 = (OZChannelBase *)((char *)this + 25480);
            if ((isDefaultDropZoneFootage & 1) != 0)
              goto LABEL_20;
            goto LABEL_9;
          case 3:
            v4 = (OZChannelBase *)((char *)this + 24456);
            if ((isDefaultDropZoneFootage & 1) == 0)
              goto LABEL_15;
            goto LABEL_20;
          case 4:
            v4 = (OZChannelBase *)((char *)this + 24968);
            if ((isDefaultDropZoneFootage & 1) == 0)
              goto LABEL_17;
            goto LABEL_20;
          default:
            v9 = isDefaultDropZoneFootage;
            if (!isDefaultDropZoneFootage)
              goto LABEL_19;
            break;
        }
      }
      else
      {
        v8 = *(_DWORD *)(v6 + 320);
        switch(v8)
        {
          case 1:
            goto LABEL_20;
          case 2:
LABEL_9:
            v4 = (OZChannelBase *)((char *)this + 25224);
            goto LABEL_20;
          case 3:
LABEL_15:
            v4 = (OZChannelBase *)((char *)this + 24200);
            goto LABEL_20;
          case 4:
LABEL_17:
            v4 = (OZChannelBase *)((char *)this + 24712);
            goto LABEL_20;
          default:
            v9 = 0;
            if (v8)
              break;
LABEL_19:
            v4 = (OZChannelBase *)((char *)this + 23688);
            if ((v9 & 1) == 0)
LABEL_20:
              OZChannelBase::resetFlag(v4, 2, a2);
            break;
        }
      }
    }
  }
  v10 = (OZChannelBase *)((char *)this + 25736);
  if (!OZImageElement::isDropZone(this))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25736), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22720), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26584), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27288), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27728), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27880), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23280), 2, a2);
    v10 = (OZChannelBase *)((char *)this + 29040);
LABEL_33:
    result = OZChannelBase::setFlag(v10, 2, a2);
    goto LABEL_34;
  }
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 25736), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 22720), 2, a2);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)this + 171, MEMORY[0x1E0CA2E68], 0.0);
  v12 = (OZChannelBase *)((char *)this + 26584);
  if (ValueAsInt)
  {
    OZChannelBase::resetFlag(v12, 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 27288), 2, a2);
  }
  else
  {
    OZChannelBase::setFlag(v12, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27288), 2, a2);
  }
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 27728), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 27880), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 23280), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 29040), 2, a2);
  if ((OZImageElement::isInputSource(this) & 1) != 0
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E0CA2E68], 0.0))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22720), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23280), 2, a2);
  }
  v13 = *((_QWORD *)this + 121);
  if (!v13)
    goto LABEL_33;
  v14 = *(_QWORD *)(v13 + 1584);
  if (!v14)
    goto LABEL_33;
  if (*(_DWORD *)(v14 + 320) != 2)
    goto LABEL_33;
  result = (OZChannelBase *)OZImageElement::isBackgroundDropZone(this);
  if ((result & 1) == 0)
    goto LABEL_33;
LABEL_34:
  v16 = *((_QWORD *)this + 121);
  if (v16)
  {
    if (*(_QWORD *)(v16 + 1584))
      return (OZChannelBase *)OZImageElement::updateDropZoneTypeChannels(this, a2);
  }
  return result;
}

void sub_1B2E24BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZImageElementCinematographyResetCallback(OZChannelBase *result, void *a2)
{
  OZChannelBase *v2;

  if (result)
  {
    v2 = result;
    (*((void (**)(OZChannelBase *, _QWORD))result->var0 + 35))(result, 0);
    result = (OZChannelBase *)OZChannelBase::getObjectManipulator(v2);
    if (result)
    {
      if (result)
        return OZImageElement::didResetCinematography((OZImageElement *)result);
    }
  }
  return result;
}

void OZImageElement::OZImageElement(OZImageElement *this, const OZImageElement *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  OZChannelFolder *v7;
  __int128 v8;
  __int128 v14;
  __int128 v15;

  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *(_QWORD *)v5 = &off_1E658CE28;
  *(_QWORD *)(v5 + 16) = &unk_1E658D758;
  *(_QWORD *)(v5 + 48) = &unk_1E658D9B0;
  *(_QWORD *)(v5 + 6528) = &unk_1E658DA08;
  v6 = (OZChannelFolder *)(v5 + 18776);
  v7 = (OZChannelFolder *)(v5 + 320);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 18776), (const OZChannelFolder *)((char *)a2 + 18776), (OZChannelFolder *)(v5 + 320));
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 18904), (const OZImageElement *)((char *)a2 + 18904), v6);
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 19112), (const OZImageElement *)((char *)a2 + 19112), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 19320), (const OZChannelBase *)((char *)a2 + 19320), v7);
  *((_QWORD *)this + 2415) = &off_1E6551AF8;
  *((_QWORD *)this + 2417) = &unk_1E6551E58;
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 19472), (const OZImageElement *)((char *)a2 + 19472), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 20632), (const OZChannelBase *)((char *)a2 + 20632), v7);
  *((_QWORD *)this + 2579) = &off_1E6551358;
  *((_QWORD *)this + 2581) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20784), (const OZChannelBase *)((char *)a2 + 20784), v7);
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 20936), (const OZImageElement *)((char *)a2 + 20936), v7);
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZImageElement *)((char *)this + 21192), (const OZChannelBase *)((char *)a2 + 21192), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 21344), (const OZChannelBase *)((char *)a2 + 21344), v7);
  *((_QWORD *)this + 2668) = &off_1E6551358;
  *((_QWORD *)this + 2670) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 21496), (const OZImageElement *)((char *)a2 + 21496), v7);
  *((_QWORD *)this + 2687) = &unk_1E658E9B8;
  *((_QWORD *)this + 2689) = &unk_1E658ED28;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 21752), (const OZImageElement *)((char *)a2 + 21752), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 22008), (const OZChannelBase *)((char *)a2 + 22008), v7);
  *((_QWORD *)this + 2751) = &off_1E6551358;
  *((_QWORD *)this + 2753) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 22160), (const OZChannelBase *)((char *)a2 + 22160), v7);
  *((_QWORD *)this + 2770) = &off_1E6551358;
  *((_QWORD *)this + 2772) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 22312), (const OZImageElement *)((char *)a2 + 22312), v7);
  *((_QWORD *)this + 2789) = &unk_1E658ED98;
  *((_QWORD *)this + 2791) = &unk_1E658F108;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22568), (const OZChannelBase *)((char *)a2 + 22568), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 22720), (const OZImageElement *)((char *)a2 + 22720), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22976), (const OZChannelBase *)((char *)a2 + 22976), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 23128), (const OZChannelBase *)((char *)a2 + 23128), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 2891) = &off_1E6551AF8;
  *((_QWORD *)this + 2893) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23280), (const OZChannelBase *)((char *)a2 + 23280), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23432), (const OZImageElement *)((char *)a2 + 23432), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23688), (const OZImageElement *)((char *)a2 + 23688), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23944), (const OZImageElement *)((char *)a2 + 23944), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24200), (const OZImageElement *)((char *)a2 + 24200), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24456), (const OZImageElement *)((char *)a2 + 24456), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24712), (const OZImageElement *)((char *)a2 + 24712), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24968), (const OZImageElement *)((char *)a2 + 24968), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25224), (const OZImageElement *)((char *)a2 + 25224), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25480), (const OZImageElement *)((char *)a2 + 25480), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25736), (const OZImageElement *)((char *)a2 + 25736), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 171, (const OZChannelBase *)((char *)a2 + 25992), (OZChannelFolder *)((char *)this + 448));
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 26144), (const OZImageElement *)((char *)a2 + 26144), (OZChannelFolder *)((char *)this + 448));
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 26584), (const OZImageElement *)((char *)a2 + 26584), (OZChannelFolder *)((char *)this + 448));
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 27288), (const OZImageElement *)((char *)a2 + 27288), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27728), (const OZChannelBase *)((char *)a2 + 27728), (OZChannelFolder *)((char *)this + 448));
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 27880), (const OZImageElement *)((char *)a2 + 27880), (OZChannelFolder *)((char *)this + 448));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 29040), (const OZChannelButton *)((char *)a2 + 29040), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 29232), (const OZChannelBase *)a2 + 261, (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 3654) = &off_1E6551AF8;
  *((_QWORD *)this + 3656) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 29384), (const OZChannelBase *)((char *)a2 + 29384), (OZChannelFolder *)((char *)this + 448));
  *((_QWORD *)this + 3673) = &off_1E6551AF8;
  *((_QWORD *)this + 3675) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29536), (const OZChannelBase *)((char *)a2 + 29536), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29688), (const OZChannelBase *)((char *)a2 + 29688), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29840), (const OZChannelBase *)((char *)a2 + 29840), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29992), (const OZChannelBase *)((char *)a2 + 29992), (OZChannelFolder *)((char *)this + 448));
  *((_BYTE *)this + 30144) = *((_BYTE *)a2 + 30144);
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30148));
  PCURL::PCURL((OZImageElement *)((char *)this + 30168), (const OZImageElement *)((char *)a2 + 30168));
  v8 = *((_OWORD *)a2 + 1886);
  *((_QWORD *)this + 3774) = *((_QWORD *)a2 + 3774);
  *((_OWORD *)this + 1886) = v8;
  *((_DWORD *)this + 7550) = *((_DWORD *)a2 + 7550);
  *((_QWORD *)this + 3777) = 0;
  *((_QWORD *)this + 3778) = 0;
  *((_QWORD *)this + 3776) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v14 = _Q0;
  *(_OWORD *)((char *)this + 30232) = _Q0;
  *((_BYTE *)this + 30248) = *((_BYTE *)a2 + 30248);
  *((_BYTE *)this + 30250) = *((_BYTE *)a2 + 30250);
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30252));
  *((_BYTE *)this + 30268) = 0;
  *((_QWORD *)this + 3784) = 0;
  *((_BYTE *)this + 30289) = *((_BYTE *)a2 + 30289);
  *((_BYTE *)this + 30290) = 0;
  *((_QWORD *)this + 3793) = 0;
  *(_OWORD *)((char *)this + 30312) = 0u;
  *(_OWORD *)((char *)this + 30328) = 0u;
  *(_OWORD *)((char *)this + 30296) = 0u;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30352), (const OZChannelFolder *)((char *)a2 + 30352), v7);
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 30480), (const OZImageElement *)((char *)a2 + 30480), (OZChannelFolder *)((char *)this + 30352));
  OZChannel::OZChannel((OZChannel *)((char *)this + 30736), (const OZChannelBase *)((char *)a2 + 30736), (OZChannelFolder *)((char *)this + 30352));
  *((_QWORD *)this + 3842) = &off_1E6551358;
  *((_QWORD *)this + 3844) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 30888), (const OZChannelBase *)((char *)a2 + 30888), (OZChannelFolder *)((char *)this + 30352));
  *((_QWORD *)this + 3861) = &off_1E6551358;
  *((_QWORD *)this + 3863) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 31040), (const OZImageElement *)((char *)a2 + 31040), (OZChannelFolder *)((char *)this + 30352));
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 31296), (const OZImageElement *)((char *)a2 + 31296), (OZChannelFolder *)((char *)this + 30352));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 32000), (const OZImageElement *)((char *)a2 + 32000), (OZChannelFolder *)((char *)this + 30352));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32256), (const OZChannelBase *)a2 + 288, (OZChannelFolder *)((char *)this + 30352));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32408), (const OZChannelBase *)((char *)a2 + 32408), (OZChannelFolder *)((char *)this + 30352));
  *((_QWORD *)this + 4072) = 0;
  *((_OWORD *)this + 2035) = 0u;
  *(_OWORD *)((char *)this + 30148) = *(_OWORD *)((char *)a2 + 30148);
  OZChannelButton::setPrivateData((OZChannelButton *)((char *)this + 29040), this);
  *((_BYTE *)this + 30145) = *((_BYTE *)a2 + 30145);
  if ((OZImageElement::hasBeenRetimedFromLastHash(a2) & 1) == 0)
  {
    OZImageElement::getRetimingHash(this);
    *(_OWORD *)((char *)this + 30148) = v15;
  }
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)a2);
  *(_OWORD *)((char *)this + 30232) = v14;
  *((_BYTE *)this + 30249) = 0;
  *((_BYTE *)this + 30251) = 0;
  *((_QWORD *)this + 3785) = 0;
  *((_BYTE *)this + 30288) = 0;
  *((_DWORD *)this + 8146) = 0;
  if (this != a2)
    std::vector<OZPtcDecisionInfo>::__assign_with_size[abi:ne180100]<OZPtcDecisionInfo*,OZPtcDecisionInfo*>((char *)this + 32560, *((char **)a2 + 4070), *((_QWORD *)a2 + 4071), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4071) - *((_QWORD *)a2 + 4070)) >> 4));
  OZChannelFolder::removeDescendant(v7, (OZChannelBase *)this + 271);
  OZChannelFolder::insertDescendantAfter(v7, (const OZChannelBase *)((char *)this + 6552), (OZChannelBase *)this + 271);
  OZChannelBase::setResetCallback((OZChannelBase *)this + 271, (void (*)(OZChannelBase *, void *))OZImageElementCinematographyResetCallback, (uint64_t *)this, 0);
  OZImageElement::ptcCopyScriptData(this, (id *)a2);
}

void sub_1B2E25448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannelPosition *a11, OZChannelEnum *a12, OZChannel *a13, OZChannel *a14, OZChannelEnum *a15, PCURL *a16, OZChannelBool *a17, OZChannelBool *a18, OZChannelBool *a19, OZChannelBool *a20,OZChannel *a21,OZChannel *a22,OZChannelColor *a23,OZChannelBool *a24,OZChannel2D *a25,OZChannelPosition *a26,OZChannel2D *a27,OZChannelBool *a28,OZChannelEnum *a29,OZChannelEnum *a30,OZChannelEnum *a31,OZChannelEnum *a32,OZChannelEnum *a33,OZChannelEnum *a34,OZChannelEnum *a35,OZChannelEnum *a36,OZChannelEnum *a37,OZChannelEnum *a38,OZChannelBool *a39,OZChannel *a40,OZChannelBool *a41,OZChannelEnum *a42)
{
  OZElement *v42;
  OZChannelBool *v43;
  OZChannelFolder *v44;
  uint64_t v45;

  OZChannelBool::~OZChannelBool(v43);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelPosition::~OZChannelPosition(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelFolder::~OZChannelFolder(v44);
  PCURL::~PCURL(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannelBool::~OZChannelBool(a19);
  OZChannelBool::~OZChannelBool(a20);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannelButton::~OZChannelButton(*(OZChannelButton **)(v45 - 112));
  OZChannelColor::~OZChannelColor(a23);
  OZChannelBool::~OZChannelBool(a24);
  OZChannel2D::~OZChannel2D(a25);
  OZChannelPosition::~OZChannelPosition(a26);
  OZChannel2D::~OZChannel2D(a27);
  OZChannelBool::~OZChannelBool(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannelEnum::~OZChannelEnum(a30);
  OZChannelEnum::~OZChannelEnum(a31);
  OZChannelEnum::~OZChannelEnum(a32);
  OZChannelEnum::~OZChannelEnum(a33);
  OZChannelEnum::~OZChannelEnum(a34);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelEnum::~OZChannelEnum(a36);
  OZChannelEnum::~OZChannelEnum(a37);
  OZChannelEnum::~OZChannelEnum(a38);
  OZChannelBool::~OZChannelBool(a39);
  OZChannel::~OZChannel(a40);
  OZChannelBool::~OZChannelBool(a41);
  OZChannelEnum::~OZChannelEnum(a42);
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v45 - 256));
  OZChannelEnum::~OZChannelEnum(*(PCString **)(v45 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 240));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 232));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v45 - 224));
  OZChannelEnum::~OZChannelEnum(*(PCString **)(v45 - 216));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 208));
  OZChannelRetimeFrame::~OZChannelRetimeFrame(*(OZChannelRetimeFrame **)(v45 - 200));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v45 - 192));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v45 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 176));
  OZChannelColor::~OZChannelColor(*(OZChannelColor **)(v45 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 160));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v45 - 152));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v45 - 144));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v45 - 136));
  OZElement::~OZElement(v42);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::hasBeenRetimedFromLastHash(OZImageElement *this)
{
  int32x4_t v3;

  OZImageElement::getRetimingHash(this);
  return vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)this + 30148), v3)))) & 1;
}

void OZImageElement::~OZImageElement(OZImageElement *this, const PCString *a2)
{
  __CVBuffer *v3;
  void *v4;

  *(_QWORD *)this = &off_1E658CE28;
  *((_QWORD *)this + 2) = &unk_1E658D758;
  *((_QWORD *)this + 6) = &unk_1E658D9B0;
  *((_QWORD *)this + 816) = &unk_1E658DA08;
  OZChannelBase::setRangeName((OZChannelBase *)this, a2);
  v3 = (__CVBuffer *)*((_QWORD *)this + 3785);
  if (v3)
    CVPixelBufferRelease(v3);
  OZImageElement::ptcDeleteScriptData(this);
  v4 = (void *)*((_QWORD *)this + 4070);
  if (v4)
  {
    *((_QWORD *)this + 4071) = v4;
    operator delete(v4);
  }
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 32408));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 32256));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 32000));
  OZChannelPosition::~OZChannelPosition((OZImageElement *)((char *)this + 31296));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 31040));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30888));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30736));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 30480));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 30352));
  PCURL::~PCURL((OZImageElement *)((char *)this + 30168));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29992));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29840));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29688));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29384));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29232));
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this + 29040));
  *((_QWORD *)this + 3485) = &off_1E6557D88;
  *((_QWORD *)this + 3487) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 28888));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZImageElement *)((char *)this + 27880));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 27728));
  OZChannel2D::~OZChannel2D((OZImageElement *)((char *)this + 27288));
  OZChannelPosition::~OZChannelPosition((OZImageElement *)((char *)this + 26584));
  OZChannel2D::~OZChannel2D((OZImageElement *)((char *)this + 26144));
  OZChannelBool::~OZChannelBool((OZChannelBool *)this + 171);
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 25736));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 25480));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 25224));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24968));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24712));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24456));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24200));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 23944));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 23688));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 23432));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 23280));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23128));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22976));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 22720));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22568));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2789);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22008));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 21752));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2687);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21344));
  OZChannelRetimeFrame::~OZChannelRetimeFrame((OZImageElement *)((char *)this + 21192));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 20936));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 20784));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20632));
  *((_QWORD *)this + 2434) = &off_1E6557D88;
  *((_QWORD *)this + 2436) = &unk_1E65580F8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20480));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZImageElement *)((char *)this + 19472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19320));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZImageElement *)((char *)this + 19112));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZImageElement *)((char *)this + 18904));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18776));
  OZElement::~OZElement((OZElement *)this);
}

{
  OZImageElement::~OZImageElement(this, a2);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZImageElement::~OZImageElement(OZImageElement *this, const PCString *a2)
{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 16), a2);
}

{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 48), a2);
}

{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 6528), a2);
}

{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 16), a2);
  JUMPOUT(0x1B5E29170);
}

{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 48), a2);
  JUMPOUT(0x1B5E29170);
}

{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 6528), a2);
  JUMPOUT(0x1B5E29170);
}

void OZImageElement::operator=(uint64_t a1, const void *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 v8;
  __int128 v9;

  OZElement::operator=(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  v6 = v4 + 28880;
  v7 = v4 + 18736;
  OZChanObjectRefWithPicker::operator=(a1 + 18904, (uint64_t)(v4 + 18904));
  OZChanObjectRefWithPicker::operator=(a1 + 19112, (uint64_t)(v5 + 19112));
  OZChannelBase::operator=(a1 + 19320, (uint64_t)(v5 + 19320));
  OZChannelFolder::operator=(a1 + 19472);
  OZChannelBase::operator=(a1 + 19608, (uint64_t)(v5 + 19608));
  OZChannelBase::operator=(a1 + 19760, (uint64_t)(v5 + 19760));
  OZChannelBase::operator=(a1 + 19912, (uint64_t)(v5 + 19912));
  OZChannelBase::operator=(a1 + 20064, (uint64_t)(v5 + 20064));
  OZChannelBase::operator=(a1 + 20216, (uint64_t)(v5 + 20216));
  *(_BYTE *)(a1 + 20472) = v7[1736];
  OZChannelBase::operator=(a1 + 20480, (uint64_t)(v5 + 20480));
  OZChannelBase::operator=(a1 + 20632, (uint64_t)(v5 + 20632));
  OZChannelBase::operator=(a1 + 20784, (uint64_t)(v5 + 20784));
  OZChannelBase::operator=(a1 + 20936, (uint64_t)(v5 + 20936));
  OZChannelBase::operator=(a1 + 21192, (uint64_t)(v5 + 21192));
  OZChannelBase::operator=(a1 + 21344, (uint64_t)(v5 + 21344));
  OZChannelBase::operator=(a1 + 21496, (uint64_t)(v5 + 21496));
  OZChannelBase::operator=(a1 + 21752, (uint64_t)(v5 + 21752));
  OZChannelBase::operator=(a1 + 22008, (uint64_t)(v5 + 22008));
  OZChannelBase::operator=(a1 + 22160, (uint64_t)(v5 + 22160));
  OZChannelBase::operator=(a1 + 22312, (uint64_t)(v5 + 22312));
  OZChannelBase::operator=(a1 + 22568, (uint64_t)(v5 + 22568));
  OZChannelBase::operator=(a1 + 22720, (uint64_t)(v5 + 22720));
  OZChannelBase::operator=(a1 + 22976, (uint64_t)(v5 + 22976));
  OZChannelBase::operator=(a1 + 23128, (uint64_t)(v5 + 23128));
  OZChannelBase::operator=(a1 + 23280, (uint64_t)(v5 + 23280));
  OZChannelBase::operator=(a1 + 23432, (uint64_t)(v5 + 23432));
  OZChannelBase::operator=(a1 + 25736, (uint64_t)(v5 + 25736));
  OZChannelBase::operator=(a1 + 29040, (uint64_t)(v5 + 29040));
  *(_QWORD *)(a1 + 29192) = *((_QWORD *)v5 + 3649);
  PCString::set((PCString *)(a1 + 29200), (const PCString *)v5 + 3650);
  *(_QWORD *)(a1 + 29208) = *((_QWORD *)v5 + 3651);
  PCString::set((PCString *)(a1 + 29216), (const PCString *)v5 + 3652);
  *(_BYTE *)(a1 + 29224) = v6[344];
  OZChannelButton::setPrivateData((OZChannelButton *)(a1 + 29040), (void *)a1);
  OZChannelBase::operator=(a1 + 25992, (uint64_t)(v5 + 25992));
  OZChannelFolder::operator=(a1 + 26144);
  OZChannelBase::operator=(a1 + 26280, (uint64_t)(v5 + 26280));
  OZChannelBase::operator=(a1 + 26432, (uint64_t)(v5 + 26432));
  OZChannelPosition::operator=(a1 + 26584, (uint64_t)(v5 + 26584));
  OZChannelFolder::operator=(a1 + 27288);
  OZChannelBase::operator=(a1 + 27424, (uint64_t)(v5 + 27424));
  OZChannelBase::operator=(a1 + 27576, (uint64_t)(v5 + 27576));
  OZChannelBase::operator=(a1 + 27728, (uint64_t)(v5 + 27728));
  OZChannelFolder::operator=(a1 + 27880);
  OZChannelBase::operator=(a1 + 28016, (uint64_t)(v5 + 28016));
  OZChannelBase::operator=(a1 + 28168, (uint64_t)(v5 + 28168));
  OZChannelBase::operator=(a1 + 28320, (uint64_t)(v5 + 28320));
  OZChannelBase::operator=(a1 + 28472, (uint64_t)(v5 + 28472));
  OZChannelBase::operator=(a1 + 28624, (uint64_t)(v5 + 28624));
  *(_BYTE *)(a1 + 28880) = *v6;
  OZChannelBase::operator=(a1 + 28888, (uint64_t)(v5 + 28888));
  OZChannelBase::operator=(a1 + 29232, (uint64_t)(v5 + 29232));
  OZChannelBase::operator=(a1 + 29384, (uint64_t)(v5 + 29384));
  OZChannelBase::operator=(a1 + 29536, (uint64_t)(v5 + 29536));
  OZChannelBase::operator=(a1 + 29688, (uint64_t)(v5 + 29688));
  OZChannelBase::operator=(a1 + 29840, (uint64_t)(v5 + 29840));
  *(_OWORD *)(a1 + 30148) = *(_OWORD *)(v5 + 30148);
  *(_BYTE *)(a1 + 30145) = v6[1265];
  PCURL::operator=((const void **)(a1 + 30168), (const __CFURL **)v5 + 3771);
  v8 = *((_OWORD *)v5 + 1886);
  *(_QWORD *)(a1 + 30192) = *((_QWORD *)v5 + 3774);
  *(_OWORD *)(a1 + 30176) = v8;
  *(_DWORD *)(a1 + 30200) = *((_DWORD *)v6 + 330);
  *(_DWORD *)(a1 + 18736) = *(_DWORD *)v7;
  OZChannelBase::operator=(a1 + 29992, (uint64_t)(v5 + 29992));
  *(_BYTE *)(a1 + 30144) = v6[1264];
  *(_QWORD *)(a1 + 30208) = 0;
  *(_BYTE *)(a1 + 30248) = v6[1368];
  *(_BYTE *)(a1 + 30249) = 0;
  *(_WORD *)(a1 + 30250) = v6[1370];
  if ((OZImageElement::hasBeenRetimedFromLastHash((OZImageElement *)v5) & 1) == 0)
  {
    OZImageElement::getRetimingHash((OZImageElement *)a1);
    *(_OWORD *)(a1 + 30148) = v9;
  }
  OZChannelFolder::operator=(a1 + 30352);
  OZChannelBase::operator=(a1 + 30480, (uint64_t)(v5 + 30480));
  OZChannelBase::operator=(a1 + 30736, (uint64_t)(v5 + 30736));
  OZChannelBase::operator=(a1 + 30888, (uint64_t)(v5 + 30888));
  OZChannelPosition::operator=(a1 + 31296, (uint64_t)(v5 + 31296));
  OZChannelBase::operator=(a1 + 31040, (uint64_t)(v5 + 31040));
  OZChannelBase::operator=(a1 + 32000, (uint64_t)(v5 + 32000));
  OZChannelBase::operator=(a1 + 32256, (uint64_t)(v5 + 32256));
  OZChannelBase::operator=(a1 + 32408, (uint64_t)(v5 + 32408));
  *(_DWORD *)(a1 + 32584) = 0;
  if (v5 != (char *)a1)
    std::vector<OZPtcDecisionInfo>::__assign_with_size[abi:ne180100]<OZPtcDecisionInfo*,OZPtcDecisionInfo*>((char *)(a1 + 32560), *((char **)v5 + 4070), *((_QWORD *)v5 + 4071), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 4071) - *((_QWORD *)v5 + 4070)) >> 4));
  OZImageElement::ptcCopyScriptData((OZImageElement *)a1, (id *)v5);
}

void *OZImageElement::getFootage(OZImageElement *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 3776);
  if (!result)
  {
    result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 18904));
    if (result)
    *((_QWORD *)this + 3776) = result;
    *((_QWORD *)this + 3780) = 0xBFF0000000000000;
    *((_QWORD *)this + 3779) = 0xBFF0000000000000;
  }
  return result;
}

BOOL OZImageElement::shouldHideRetiming(OZImageElement *this)
{
  _BOOL8 result;
  OZFootage *Footage;
  OZFootage *v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)this + 30290))
    return 0;
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    v4 = Footage;
    if (OZFootage::isStill(Footage))
    {
      if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)v4 + 1376))(v4) < 2)
        return 1;
    }
  }
  result = OZImageElement::isDropZone(this);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)this + 121);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 1584);
      if (v6)
        return *(_DWORD *)(v6 + 320) > 1u;
    }
    return 0;
  }
  return result;
}

BOOL OZImageElement::isDropZone(OZImageElement *this)
{
  char *v1;
  _BOOL8 result;

  v1 = (char *)this + 30248;
  if (*((_BYTE *)this + 30249))
    return *v1 != 0;
  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22568), MEMORY[0x1E0CA2E68], 0.0) != 0;
  *v1 = result;
  v1[1] = 1;
  return result;
}

uint64_t OZImageElement::canDelete(OZImageElement *this)
{
  if (((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 56))((char *)this + 16, 1) & 1) != 0)
    return 0;
  else
    return OZImageElement::isLockedDropZone(this) ^ 1;
}

uint64_t OZImageElement::isLockedDropZone(OZImageElement *this)
{
  if (OZImageElement::isEffectSource(this)
    && *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this) + 1584)
                 + 320) == 3)
  {
    return 1;
  }
  else
  {
    return OZImageElement::isTransitionSource(this);
  }
}

uint64_t `non-virtual thunk to'OZImageElement::canDelete(OZImageElement *this)
{
  if (((*(uint64_t (**)(OZImageElement *, uint64_t))(*(_QWORD *)this + 56))(this, 1) & 1) != 0)
    return 0;
  else
    return OZImageElement::isLockedDropZone((OZImageElement *)((char *)this - 16)) ^ 1;
}

uint64_t OZImageElement::canCopy(OZImageElement *this)
{
  if (OZImageElement::isEffectSource(this))
    return 0;
  else
    return OZImageElement::isTransitionSource(this) ^ 1;
}

BOOL OZImageElement::isEffectSource(OZImageElement *this)
{
  _BOOL8 result;

  result = OZImageElement::isDropZone(this);
  if ((_DWORD)result)
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E0CA2E68], 0.0) == 3;
  return result;
}

uint64_t OZImageElement::isTransitionSource(OZImageElement *this)
{
  uint64_t result;
  OZChannel *v3;

  result = OZImageElement::isDropZone(this);
  if ((_DWORD)result)
  {
    v3 = (OZChannel *)((char *)this + 23432);
    result = OZChannel::getValueAsInt(v3, MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)result != 1)
      return OZChannel::getValueAsInt(v3, MEMORY[0x1E0CA2E68], 0.0) == 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'OZImageElement::canCopy(OZImageElement *this)
{
  OZImageElement *v1;

  v1 = (OZImageElement *)((char *)this - 16);
  if (OZImageElement::isEffectSource((OZImageElement *)((char *)this - 16)))
    return 0;
  else
    return OZImageElement::isTransitionSource(v1) ^ 1;
}

uint64_t OZImageElement::replaceFootage(OZImageElement *this, const __CFURL **a2, uint64_t a3)
{
  uint64_t v3;
  OZChannelBase *v7;
  PMMediaManager *Instance;
  uint64_t result;
  OZChannelBase *v10;
  uint64_t NextUniqueID;
  OZFootage *SceneNode;
  OZScene *v13;
  OZGroup **v14;
  __n128 TimeOffset;
  OZChannelBase *v16;
  const CMTime *v17;
  OZChannelBase *v18;
  const PCString *v19;
  OZChannelBase **v20;
  CMTime v21;
  CMTime v22;
  CMTime v23[2];
  PMClip *v24;

  v3 = *((_QWORD *)this + 121);
  if (!v3)
    return 0;
  v7 = *(OZChannelBase **)(v3 + 1504);
  if (v7)
    v7 = (OZChannelBase *)OZChannelBase::setRangeName(v7, (const PCString *)1);
  Instance = (PMMediaManager *)PMMediaManager::getInstance((PMMediaManager *)v7);
  result = PMMediaManager::findReader(Instance, a2);
  if (result)
  {
    v24 = 0;
    if (!PMMediaManager::open(Instance, (const PCURL *)a2, &v24, 0))
    {
      PCURL::getShortFilename(a2, (PCString *)&v22);
      NextUniqueID = OZChannelBase::getNextUniqueID(v10);
      *(_OWORD *)&v23[0].value = xmmword_1B355DB10;
      SceneNode = (OZFootage *)OZApplication::createSceneNode(theApp, (unsigned int *)v23, (uint64_t)&v22, NextUniqueID);
      PCString::~PCString((PCString *)&v22);
      if (SceneNode)
      {
        OZFootage::setClip(SceneNode, v24, 1, 1, 0);
        PMClip::close(v24);
        v13 = (OZScene *)*((_QWORD *)this + 121);
        PCURL::PCURL((PCURL *)v23, CFSTR("Undo Footage Replace"));
        OZScene::startCaptureModifiedChannels(v13, (const PCString *)v23);
        PCString::~PCString((PCString *)v23);
        PCURL::PCURL((PCURL *)v23, CFSTR("Undo Footage Replace"));
        (*(void (**)(char *, CMTime *, _QWORD))(*((_QWORD *)this + 2) + 176))((char *)this + 16, v23, 0);
        PCString::~PCString((PCString *)v23);
        v14 = (OZGroup **)*((_QWORD *)this + 121);
        PCURL::PCURL((PCURL *)v23, CFSTR("Undo Footage Replace"));
        OZScene::addNode(v14, SceneNode, (PCString *)v23, 16, 0, 0);
        PCString::~PCString((PCString *)v23);
        (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(_QWORD *)this + 1128))(v23, this);
        memset(&v22, 0, sizeof(v22));
        TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v22);
        (*(void (**)(OZImageElement *, OZFootage *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 1448))(this, SceneNode, a3, 0, TimeOffset);
        v16 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((_QWORD *)this + 121) + 336), (__n128 *)&v21);
        OZRetimingUtil::SetTimeOffsetAndExtent(v16, &v22, v23, &v21, v17);
        v18 = (OZChannelBase *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 120) + 640))(*((_QWORD *)this + 120));
        OZChannelObjectRoot::recomputeTimeRangeFromChildren(v18, 1, 1, 1, 1, 0);
        v20 = (OZChannelBase **)*((_QWORD *)this + 121);
        if (v20[188])
        {
          OZChannelBase::setRangeName(v20[188], (const PCString *)1);
          v20 = (OZChannelBase **)*((_QWORD *)this + 121);
        }
        OZScene::endCaptureModifiedChannels(v20, v19);
        if ((_DWORD)a3)
          OZScene::recalcDependencies(*((OZScene **)this + 121));
        OZImageElement::showHideDropZoneChannels(this, 0);
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_1B2E26728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, uint64_t a14, PCString a15)
{
  PCString::~PCString(&a15);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::setFootage(OZImageElement *this, OZSceneNodeFile *lpsrc, int a3, unsigned int a4)
{
  OZSceneNode *v7;
  void *Footage;
  void *v9;
  double v10;
  OZChannelFolder *v11;
  unsigned int *v12;
  unsigned int *i;
  _QWORD *Node;
  _QWORD *v15;
  char *v16;
  OZChannelFolder *v17;
  uint64_t v18;
  unsigned int Pages;
  unint64_t v20;
  double v21;
  CMTime *v22;
  uint64_t v23;
  uint64_t v24;
  OZPreferenceManager *v25;
  CMTimeEpoch epoch;
  OZChannelBase *v27;
  const CMTime *v28;
  OZChannelBase *v29;
  OZChannelObjectRoot *v30;
  uint64_t result;
  double MasteringMaxLuminance;
  double v33;
  OZChannel *v34;
  CMTime v35;
  CMTime time2;
  CMTime time1;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;

  if (lpsrc)
  else
    v7 = 0;
  Footage = OZImageElement::getFootage(this);
  v9 = Footage;
  if (!Footage)
  {
    v10 = 1.0;
    if (a3)
      goto LABEL_6;
LABEL_17:
    OZSceneNode::removeFromLinked(this);
    goto LABEL_18;
  }
  v10 = (*(double (**)(void *))(*(_QWORD *)Footage + 1368))(Footage);
  OZImageElement::ptcResetCinematographyAllChannels(this);
  if (!a3)
    goto LABEL_17;
LABEL_6:
  v11 = (OZChannelFolder *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
  if (OZChannelFolder::testFoldFlag(v11, 0x4000))
  {
    v12 = (unsigned int *)*((_QWORD *)this + 133);
    for (i = (unsigned int *)*((_QWORD *)this + 132); i != v12; ++i)
    {
      Node = OZScene::getNode(*((OZScene **)this + 121), *i);
      if (Node)
      {
        v15 = Node;
        v16 = (char *)(Node + 2);
        if (((*(uint64_t (**)(_QWORD *, uint64_t))(Node[2] + 56))(Node + 2, 1) & 1) == 0)
        {
          v17 = (OZChannelFolder *)(*(uint64_t (**)(_QWORD *))(*v15 + 640))(v15);
          if (OZChannelFolder::testFoldFlag(v17, 0x4000))
          {
            if ((*(unsigned int (**)(_QWORD *))(*v15 + 744))(v15))
            {
              OZSceneNode::removeFromLinked(v15);
              (*(void (**)(_QWORD *))(*v15 + 760))(v15);
            }
            PCURL::PCURL((PCURL *)&time1, CFSTR("Undo Footage Replace"));
            (*(void (**)(char *, CMTime *, uint64_t))(*(_QWORD *)v16 + 176))(v16, &time1, 2);
            PCString::~PCString((PCString *)&time1);
            v18 = (*(uint64_t (**)(_QWORD *))(*v15 + 640))(v15);
            (*(void (**)(_QWORD *, uint64_t))(*v15 + 608))(v15, v18);
          }
        }
      }
    }
  }
LABEL_18:
  OZChanSceneNodeRef::setNode((OZImageElement *)((char *)this + 18904), v7);
  *((_QWORD *)this + 3776) = 0;
  *((_QWORD *)this + 3780) = 0xBFF0000000000000;
  *((_QWORD *)this + 3779) = 0xBFF0000000000000;
  *((_BYTE *)this + 30251) = 0;
  Pages = OZFootage::getPages(v7);
  *((_DWORD *)this + 7550) = Pages;
  if (Pages)
  {
    OZChannel::setMax((OZChannel *)((char *)this + 19320), (double)Pages);
    LODWORD(v20) = *((_DWORD *)this + 7550);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 19320), (double)v20);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19320), 2, 0);
  }
  else
  {
    OZChannel::setMax((OZChannel *)((char *)this + 19320), 1.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 19320), 1.0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19320), 2, 0);
  }
  OZImageElement::updateLayerChannel(this, 0);
  v21 = (double)a4;
  v22 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::setValue((OZChannel *)((char *)this + 22312), MEMORY[0x1E0CA2E68], v21, 0);
  memset(&v40, 0, sizeof(v40));
  (*(void (**)(CMTime *__return_ptr, OZSceneNode *))(*(_QWORD *)v7 + 1648))(&v40, v7);
  memset(&v39, 0, sizeof(v39));
  CMTimeMake(&v39, 1, 30);
  if ((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this))
  {
    v23 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v23 + 336), (__n128 *)&time1);
    v39 = time1;
  }
  time1 = v40;
  time2 = v39;
  if (!CMTimeCompare(&time1, &time2)
    && ((*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 288))((_QWORD *)v7 + 2) & 1) == 0)
  {
    v24 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
    v25 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)v24);
    if (v24 && OZPreferenceManager::getUseProjectDurationForStills(v25))
    {
      *(_OWORD *)&v40.value = *(_OWORD *)(v24 + 1376);
      epoch = *(_QWORD *)(v24 + 1392);
    }
    else
    {
      OZPreferenceManager::getDefaultStillDuration(&v39, (uint64_t)&time1);
      *(_OWORD *)&v40.value = *(_OWORD *)&time1.value;
      epoch = time1.epoch;
    }
    v40.epoch = epoch;
  }
  if (v9)
  {
    (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(_QWORD *)this + 1128))(&time2, this);
    time1 = time2;
    v38 = v40;
    v27 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
    time2 = time1;
    OZRetimingUtil::SetTimeOffsetAndExtent(v27, &time2, &time1, &v39, v28);
  }
  else
  {
    memset(&v42, 0, sizeof(v42));
    operator*(&v39, &v42, 0.5);
    time1 = v40;
    time2 = v42;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
    time1 = v41;
    time2 = v39;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v35);
    time1 = *v22;
    v38 = v35;
    OZChannelObjectRootBase::setTimeExtent((OZImageElement *)((char *)this + 56), (const PCTimeRange *)&time1, 0);
  }
  if (OZImageElement::isDropZone(this))
    OZChannel::setValue((OZChannel *)this + 171, MEMORY[0x1E0CA2E68], (double)(a3 ^ 1u), 0);
  OZImageElement::resetFitMode(this, v10);
  if (!v9)
  {
    v29 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
    OZRetimingUtil::SetDefaultRetimingState(v29, v30);
  }
  OZChannel::getValueAsInt((OZChannel *)((char *)this + 21496), MEMORY[0x1E0CA2E68], 0.0);
  OZImageElement::ptcLoadCinematicScript(this);
  OZImageElement::ptcFillCinematographyDataChannels(this);
  (*(void (**)(OZImageElement *, OZSceneNode *))(*(_QWORD *)this + 2272))(this, v7);
  OZImageElement::showHideDropZoneChannels(this, 0);
  OZDocument::postNotification(*(OZDocument **)(*((_QWORD *)this + 121) + 1584), 0x80000);
  OZElement::updateColorConversionChannels((OZElement *)this);
  result = OZFootage::getDynamicRangeType((PMClip **)v7);
  if ((_DWORD)result == 2)
  {
    MasteringMaxLuminance = OZFootage::getMasteringMaxLuminance(v7);
    if (MasteringMaxLuminance == 0.0)
      v33 = 1000.0;
    else
      v33 = MasteringMaxLuminance;
    v34 = (OZChannel *)((char *)this + 12512);
    OZChannel::setDefaultValue(v34, v33);
    return OZChannel::setValue(v34, MEMORY[0x1E0CA2E68], v33, 0);
  }
  return result;
}

void sub_1B2E26D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
  PCString::~PCString(&a19);
  _Unwind_Resume(a1);
}

void OZImageElement::updateLayerChannel(OZImageElement *this, char a2)
{
  void *Footage;
  void *v5;
  OZChannelBase *v6;
  _BOOL4 v7;
  uint64_t v8;
  unsigned int ValueAsInt;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  PCString v16;

  Footage = OZImageElement::getFootage(this);
  if (!Footage)
    return;
  v5 = Footage;
  if (((*(uint64_t (**)(void *))(*(_QWORD *)Footage + 1432))(Footage) & 1) != 0)
    return;
  v6 = (OZChannelBase *)((char *)this + 22312);
  v7 = OZChannelBase::testFlag(v6, 4);
  if (v7)
    OZChannelBase::resetFlag(v6, 4, 1);
  v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 1352))(v5);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)v6, MEMORY[0x1E0CA2E68], 0.0);
  if (v8 <= ValueAsInt)
    v10 = ValueAsInt;
  else
    v10 = v8;
  if (v10 < 2)
  {
    OZChannel::setMax((OZChannel *)v6, 0.0);
    OZChannel::setSliderMax((OZChannel *)v6, 0.0);
    OZChannelBase::setFlag(v6, 2, 1);
    OZChannelEnum::clearStrings((PCString *)v6);
    if (!v7)
      return;
    goto LABEL_18;
  }
  v11 = ValueAsInt;
  OZChannel::setMax((OZChannel *)v6, (double)v10);
  OZChannel::setSliderMax((OZChannel *)v6, (double)v10);
  OZChannelBase::resetFlag(v6, 2, a2);
  OZChannelEnum::clearStrings((PCString *)v6);
  v12 = (char *)operator new[]();
  PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Image Element Merged Layer"));
  OZChannelEnum::addString((PCString *)v6, &v16);
  PCString::~PCString(&v16);
  PCString::PCString(&v16, "-");
  OZChannelEnum::addString((PCString *)v6, &v16);
  PCString::~PCString(&v16);
  v13 = v12 + 8;
  *(_QWORD *)v12 = 0;
  if ((_DWORD)v8)
  {
    v14 = v8;
    do
    {
      (*(void (**)(PCString *__return_ptr, void *, uint64_t))(*(_QWORD *)v5 + 1584))(&v16, v5, v14);
      OZChannelEnum::addString((PCString *)v6, &v16);
      PCString::~PCString(&v16);
      *v13++ = v14;
      v14 = (v14 - 1);
    }
    while ((_DWORD)v14);
  }
  if (v8 < v11)
  {
    PCString::PCString(&v16, "-");
    OZChannelEnum::addString((PCString *)v6, &v16);
    PCString::~PCString(&v16);
    *v13 = 0;
    v15 = v13 + 1;
    do
    {
      PCURL::PCURL((PCURL *)&v16, CFSTR("Channel Image Element Missing Layer"));
      OZChannelEnum::addString((PCString *)v6, &v16);
      PCString::~PCString(&v16);
      LODWORD(v8) = v8 + 1;
      *v15++ = v8;
    }
    while (v10 != (_DWORD)v8);
  }
  OZChannelEnum::setTags((OZChannelEnum *)v6, v12, v10 + 3);
  MEMORY[0x1B5E2914C](v12, 0x1000C8052888210);
  if (v7)
LABEL_18:
    OZChannelBase::setFlag(v6, 4, 1);
}

void sub_1B2E27000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

CGColorSpace **OZImageElement::resetFitMode(OZImageElement *this, double a2)
{
  CGColorSpace **result;
  CGColorSpace **v5;
  __int128 v12;
  double v13;
  OZChannel *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int ValueAsInt;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  BOOL v35;
  double v36;
  double v37;
  double v38;
  int v39;
  int v40;
  double v41;
  int v42;
  double v43;
  double v44;
  double v45;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  _BOOL4 v56;
  uint64_t *v57;
  unint64_t v58;
  OZScene *v59;
  void *Node;
  _QWORD *v61;
  _QWORD *v62;
  __n128 *v63;
  __n128 *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  __n128 v87;
  int64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  int v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  char v110;
  CGColorSpace *v111;
  CGColorSpace *v112;
  __int16 v113;
  uint64_t v114;
  char v115;
  int v116;
  char v117;
  uint64_t v118;
  __int128 v119;
  OZRenderState v120;
  _QWORD v121[2];
  __int128 v122;

  result = (CGColorSpace **)OZImageElement::getFootage(this);
  if (result)
  {
    v5 = result;
    v121[0] = 0;
    v121[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v122 = _Q0;
    OZRenderState::OZRenderState(&v120);
    v89 = xmmword_1B30503B0;
    v90 = 0x3FF0000000000000;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0x3FF0000000000000;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v102 = 0;
    v99 = 0;
    v100 = 0;
    v98 = 0x3FF0000000000000;
    v101 = 0;
    v103 = *MEMORY[0x1E0CA2E68];
    v104 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0x100000000;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 768;
    v114 = 0x408F400000000000;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v118 = -1;
    __asm { FMOV            V0.2D, #1.0 }
    v119 = _Q0;
    OZScene::getCurrentTime(*((OZScene **)this + 121), &v87);
    *(__n128 *)&v120.var0.var0 = v87;
    v120.var0.var3 = v88;
    HIDWORD(v99) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22312), MEMORY[0x1E0CA2E68], 0.0);
    OZFootage::getTextureResolution(v5, (uint64_t)v121, (const CMTime *)&v120, (uint64_t)&v89);
    v12 = v122;
    v13 = (*((double (**)(CGColorSpace **))*v5 + 171))(v5);
    if (!OZImageElement::isDropZone(this))
    {
      OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E0CA2E68], *(double *)&v12, 0);
      OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E0CA2E68], *((double *)&v12 + 1), 0);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), MEMORY[0x1E0CA2E68], 1.0, 1.0, 0);
      goto LABEL_8;
    }
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E0CA2E68], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E0CA2E68], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E0CA2E68], 0.0))
    {
      v14 = (OZChannel *)((char *)this + 29232);
      OZChannel::getValueAsDouble(v14, MEMORY[0x1E0CA2E68], 0.0);
      OZChannel::setValue(v14, MEMORY[0x1E0CA2E68], v15 * a2 / v13, 0);
LABEL_8:
      PCCFRef<CGColorSpace *>::~PCCFRef(&v112);
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v111);
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), MEMORY[0x1E0CA2E68], 0.0);
    v17 = v16;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), MEMORY[0x1E0CA2E68], 0.0);
    v71 = v18;
    v74 = v17;
    v85 = 0.0;
    v86 = 0.0;
    v83 = 0.0;
    v84 = 0.0;
    v81 = 0.0;
    v82 = 0.0;
    v80 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26280), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26432), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27424), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27576), MEMORY[0x1E0CA2E68], 0.0);
    if ((*(unsigned int (**)(OZImageElement *))(*(_QWORD *)this + 1608))(this))
      (*(void (**)(OZImageElement *, OZRenderState *, double *, double *, double *, double *))(*(_QWORD *)this + 1728))(this, &v120, &v86, &v85, &v84, &v83);
    OZTransformNode::getPivot((OZTransformNode *)this, &v82, &v81, &v80, (const CMTime *)&v120);
    v20 = v85;
    v19 = v86;
    v21 = v83;
    v22 = v84;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22720), MEMORY[0x1E0CA2E68], 0.0);
    v24 = v74 - v19 - v20;
    v25 = v71 - v22 - v21;
    if (ValueAsInt != 1)
    {
      v26 = v24 * a2;
      if (ValueAsInt == 2)
      {
        v27 = v26 / v13;
        v28 = v26 / v13 / *(double *)&v12;
        v29 = 0.0;
        v69 = 1.0;
        v70 = 1.0;
        v30 = v25;
        v31 = 0.0;
        v72 = v25 / *((double *)&v12 + 1);
      }
      else
      {
        v45 = *(double *)&v12 * v13 / *((double *)&v12 + 1);
        v46 = v45 > v26 / v25;
        v47 = v45 * v25 / v13;
        v48 = v25 / *((double *)&v12 + 1);
        v49 = v26 / v45;
        if (v46)
          v27 = v47;
        else
          v27 = v26 / v13;
        if (v46)
          v50 = v71 - v22 - v21;
        else
          v50 = v49;
        if (!v46)
          v48 = v26 / v13 / *(double *)&v12;
        v29 = 0.0;
        if (v13 * v27 > v26)
          v29 = (v13 * v27 - v26) / v13 * 0.5;
        v30 = v50;
        if (v50 <= v25)
          v31 = 0.0;
        else
          v31 = (v50 - v25) * 0.5;
        v70 = 1.0;
        v72 = v48;
        v28 = v48;
        v69 = 1.0;
      }
LABEL_66:
      v53 = v85;
      v52 = v86;
      v67 = v82;
      v68 = v81;
      v65 = v84;
      v66 = v83;
      v76 = v80;
      OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E0CA2E68], v27, 0);
      OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E0CA2E68], v30, 0);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), MEMORY[0x1E0CA2E68], v28, v72, 0);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 27288), MEMORY[0x1E0CA2E68], 1.0 / v70, 1.0 / v69, 0);
      OZChannelPosition::setPosition((OZImageElement *)((char *)this + 26584), MEMORY[0x1E0CA2E68], 0.0, 0.0, 0);
      v54 = (v67 + (v53 - v52) * 0.5) * a2 / v13;
      v55 = v68 + (v66 - v65) * 0.5;
      v56 = v31 != 0.0 || v29 != 0.0;
      if (v56 && ((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 1608))(this) & 1) == 0)
      {
        OZChannelBase::enable((OZChannelBase *)((char *)this + 17520), 1, 0);
        OZChannelCrop::setValue((OZImageElement *)((char *)this + 17520), (const CMTime *)&v120, v29, v29, v31, v31);
        OZTransformNode::setPivot((OZTransformNode *)this, v54, v55, v76, (const CMTime *)&v120);
      }
      else
      {
        (*(void (**)(char *, OZRenderState *, double))(*((_QWORD *)this + 2207) + 768))((char *)this + 17656, &v120, v29);
        (*(void (**)(char *, OZRenderState *, double))(*((_QWORD *)this + 2226) + 768))((char *)this + 17808, &v120, v29);
        (*(void (**)(char *, OZRenderState *, double))(*((_QWORD *)this + 2245) + 768))((char *)this + 17960, &v120, v31);
        (*(void (**)(char *, OZRenderState *, double))(*((_QWORD *)this + 2264) + 768))((char *)this + 18112, &v120, v31);
        (*(void (**)(char *, OZRenderState *, double))(*((_QWORD *)this + 701) + 768))((char *)this + 5608, &v120, v54);
        (*(void (**)(char *, OZRenderState *, double))(*((_QWORD *)this + 720) + 768))((char *)this + 5760, &v120, v55);
        (*(void (**)(char *, OZRenderState *, double))(*((_QWORD *)this + 776) + 768))((char *)this + 6208, &v120, v76);
      }
      v87.n128_u64[1] = 0;
      v88 = 0;
      v87.n128_u64[0] = (unint64_t)&v87.n128_u64[1];
      v57 = (uint64_t *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
      OZScene::getCloneNodes(v57, *((_DWORD *)this + 20), (uint64_t **)&v87);
      v58 = v87.n128_u64[0];
      if ((__int8 *)v87.n128_u64[0] != &v87.n128_i8[8])
      {
        do
        {
          v59 = (OZScene *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
          Node = OZScene::getNode(v59, *(_DWORD *)(v58 + 28));
          if (Node)
          {
            if (v61)
            {
              v62 = v61;
              if (v56 && (*(unsigned int (**)(OZImageElement *))(*(_QWORD *)this + 1608))(this))
              {
                (*(void (**)(_QWORD *, uint64_t, _QWORD))(v62[2190] + 104))(v62 + 2190, 1, 0);
                OZChannelCrop::setValue((OZChannelCrop *)(v62 + 2190), (const CMTime *)&v120, v29, v29, v31, v31);
                OZTransformNode::setPivot((OZTransformNode *)v62, v54, v55, v76, (const CMTime *)&v120);
              }
              else
              {
                (*(void (**)(_QWORD *, OZRenderState *, double))(v62[2207] + 768))(v62 + 2207, &v120, v29);
                (*(void (**)(_QWORD *, OZRenderState *, double))(v62[2226] + 768))(v62 + 2226, &v120, v29);
                (*(void (**)(_QWORD *, OZRenderState *, double))(v62[2245] + 768))(v62 + 2245, &v120, v31);
                (*(void (**)(_QWORD *, OZRenderState *, double))(v62[2264] + 768))(v62 + 2264, &v120, v31);
                (*(void (**)(_QWORD *, OZRenderState *, double))(v62[701] + 768))(v62 + 701, &v120, v54);
                (*(void (**)(_QWORD *, OZRenderState *, double))(v62[720] + 768))(v62 + 720, &v120, v55);
                (*(void (**)(_QWORD *, OZRenderState *, double))(v62[776] + 768))(v62 + 776, &v120, v76);
              }
            }
          }
          v63 = *(__n128 **)(v58 + 8);
          if (v63)
          {
            do
            {
              v64 = v63;
              v63 = (__n128 *)v63->n128_u64[0];
            }
            while (v63);
          }
          else
          {
            do
            {
              v64 = *(__n128 **)(v58 + 16);
              _ZF = v64->n128_u64[0] == v58;
              v58 = (unint64_t)v64;
            }
            while (!_ZF);
          }
          v58 = (unint64_t)v64;
        }
        while (v64 != (__n128 *)&v87.n128_i8[8]);
      }
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v87, (_QWORD *)v87.n128_u64[1]);
      goto LABEL_8;
    }
    v32 = v24;
    v78 = 0.0;
    v79 = 0.0;
    v77 = 0;
    (*(void (**)(OZImageElement *, double *, double *, uint64_t *, OZRenderState *, uint64_t))(*(_QWORD *)this + 1312))(this, &v79, &v78, &v77, &v120, 1);
    if (v79 >= 1.0 || v79 <= 0.0)
      v34 = 1.0;
    else
      v34 = 1.0 / v79;
    v35 = v78 >= 1.0 || v78 <= 0.0;
    v36 = 1.0 / v78;
    if (v35)
      v36 = 1.0;
    v73 = v36;
    v75 = v34;
    v37 = v32;
    v38 = v25;
    if (v5[1009])
    {
      PGGetCurrentPGContext(&v87);
      v37 = v32;
      v38 = v25;
      if (v87.n128_u64[0])
      {
        v39 = (int)v32;
        v40 = (int)v25;
        if ((int)v32 > 4096 || (v37 = v32, v38 = v25, v40 > 4096))
        {
          if (v39 <= v40)
            v39 = (int)v25;
          if (v39 <= 1)
            v39 = 1;
          v41 = 4096.0 / (double)v39;
          v37 = floor(v32 * v41);
          v38 = floor(v25 * v41);
        }
      }
      std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&v87);
    }
    v42 = OZChannel::getValueAsInt((OZChannel *)this + 171, MEMORY[0x1E0CA2E68], 0.0);
    v27 = v37;
    v43 = v38;
    if (v42)
    {
      v69 = v38 / *((double *)&v12 + 1);
      v70 = v37 / *(double *)&v12;
      v44 = v75;
LABEL_60:
      v51 = v73;
      goto LABEL_61;
    }
    v44 = v75;
    if (*(double *)&v12 >= *((double *)&v12 + 1))
    {
      v70 = 1.0;
      if (v37 < v32)
      {
        v44 = v32 * v75 / v37;
        goto LABEL_58;
      }
    }
    else
    {
      v70 = 1.0;
      if (v38 < v25)
      {
        v44 = v25 * v73 / v38;
LABEL_58:
        v27 = *(double *)&v12 * v44;
        v43 = *((double *)&v12 + 1) * v44;
        v51 = v44;
        v69 = 1.0;
LABEL_61:
        v72 = v51;
        v29 = 0.0;
        if (v13 * v27 > v32 * a2)
          v29 = (v13 * v27 - v32 * a2) / v13 * 0.5;
        v28 = v44;
        v30 = v43;
        if (v43 <= v25)
          v31 = 0.0;
        else
          v31 = (v43 - v25) * 0.5;
        goto LABEL_66;
      }
    }
    v69 = 1.0;
    goto LABEL_60;
  }
  return result;
}

void sub_1B2E27AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,CGColorSpace *a54)
{
  CGColorSpace **v54;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a54);
  PCCFRef<CGColorSpace *>::~PCCFRef(v54);
  _Unwind_Resume(a1);
}

void OZImageElement::didAddToScene(OZImageElement *this, OZScene *a2)
{
  unsigned int epoch;
  signed int flags;
  CMTimeScale timescale;
  double v7;
  double v8;
  double v9;
  CMTime *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  const CMTime *v16;
  CMTime v17[2];
  double v18;
  CGColorSpace *v19;
  PCString v20;
  CMTime v21;
  CMTime time2;
  CMTime time1;

  v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  OZTransformNode::didAddToScene((OZTransformNode *)this, a2);
  if (a2)
  {
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)v17, (OZScene *)((char *)a2 + 336));
    epoch = v17[0].epoch;
    flags = v17[0].flags;
    timescale = v17[0].timescale;
    v7 = v18;
    OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)&time2);
    operator*(&time2, &time1, (double)epoch);
    v8 = (float)timescale;
    v9 = (float)flags;
    v21 = time1;
    v17[0].value = (CMTimeValue)&off_1E658F368;
    PCString::~PCString(&v20);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v19);
  }
  else
  {
    v7 = 1.0;
    v8 = 720.0;
    v9 = 486.0;
  }
  v10 = (CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), MEMORY[0x1E0CA2E68], 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), v10, 0.0);
  v14 = v13;
  if (OZImageElement::isDropZone(this) && (v12 == 1.0 || v14 == 1.0))
  {
    OZChannel::setValue((OZChannel *)((char *)this + 29232), v10, v7 * v8, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 29384), v10, v9, 0);
    OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), v10, 1.0 / v7, 1.0, 0);
    v17[0] = *(CMTime *)((char *)this + 208);
    time1 = *(CMTime *)((char *)this + 232);
    time2 = *v10;
    if (!CMTimeCompare(&time1, &time2))
    {
      v17[1] = v21;
      if (a2)
      {
        OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)&time1);
        OZRetimingUtil::SetTimeExtent((OZChannelBase *)((char *)this + 56), v17, &time1, v16);
      }
    }
  }
  OZImageElement::showHideDropZoneChannels(this, 0);
  if (a2)
  {
    if (!*((_BYTE *)a2 + 1576))
      OZImageElement::ptcLoadCinematicScript(this);
  }
}

void sub_1B2E27D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 + 184));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 128));
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::updateHiddenChannels(OZImageElement *this, char a2)
{
  uint64_t updated;
  unsigned int v4;
  _BOOL4 v5;
  int ValueAsInt;
  OZChannelBase *v7;
  _BOOL4 v8;

  updated = OZElement::updateHiddenChannels((OZElement *)this, a2);
  v4 = OZImageElement::isCinematographyAvailable(this);
  v5 = OZChannelBase::testFlag((OZChannelBase *)this + 271, 2);
  if (v4)
  {
    if (!v5)
      goto LABEL_7;
    OZChannelBase::resetFlag((OZChannelBase *)this + 271, 2, 0);
  }
  else
  {
    if (v5)
      goto LABEL_7;
    OZChannelBase::setFlag((OZChannelBase *)this + 271, 2, 0);
  }
  updated = 1;
LABEL_7:
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 30480), MEMORY[0x1E0CA2E68], 0.0);
  v7 = (OZChannelBase *)((char *)this + 31296);
  v8 = OZChannelBase::testFlag(v7, 2);
  if (ValueAsInt)
  {
    if (v8)
    {
      OZChannelBase::resetFlag(v7, 2, 0);
      return 1;
    }
  }
  else if (!v8)
  {
    OZChannelBase::setFlag(v7, 2, 0);
    return 1;
  }
  return updated;
}

uint64_t OZImageElement::updateRetimingState(OZImageElement *this, OZChannelObjectRoot *a2)
{
  OZChannelBase *v3;
  OZChannelObjectRoot *v4;
  OZChannel *v5;
  uint64_t result;
  const CMTime *v7;
  double v8;

  v3 = (OZChannelBase *)((char *)this + 56);
  if (OZRetimingUtil::IsAtDefaultRetimingState((OZChannelBase *)((char *)this + 56), a2)
    && !OZRetimingUtil::IsUsingRetimingBehaviors(v3, v4))
  {
    v5 = (OZChannel *)((char *)this + 32408);
    result = OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0);
    if (!(_DWORD)result)
      return result;
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v8 = 0.0;
  }
  else
  {
    v5 = (OZChannel *)((char *)this + 32408);
    if (OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0))
      return 0;
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v8 = 1.0;
  }
  OZChannel::setValue(v5, v7, v8, 0);
  return 1;
}

float64x2_t OZImageElement::gridFitOffset@<Q0>(OZImageElement *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result;
  int32x2_t v6;
  int64x2_t v7;
  float64x2_t v13;

  if (OZImageElement::isDropZone(a1))
  {
    a3->f64[0] = 0.0;
    a3->f64[1] = 0.0;
  }
  else
  {
    v6 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(*a2)));
    v7.i64[0] = v6.i32[0];
    v7.i64[1] = v6.i32[1];
    __asm { FMOV            V1.2D, #1.0 }
    v13 = vaddq_f64(vsubq_f64(*a2, vcvtq_f64_s64(v7)), _Q1);
    *(int32x2_t *)&_Q1.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v13)));
    v7.i64[0] = SLODWORD(_Q1.f64[0]);
    v7.i64[1] = SHIDWORD(_Q1.f64[0]);
    result = vsubq_f64(v13, vcvtq_f64_s64(v7));
    *a3 = result;
  }
  return result;
}

_QWORD *OZImageElement::gridFit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  float v6;
  _QWORD *result;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  double v13;
  double v14;
  CMTime v15;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v5 = (float)*(int *)(v4 + 344);
  v6 = (float)*(int *)(v4 + 348);
  result = (*(_QWORD *(**)(CMTime *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 1512))(&v15, a1, a2);
  v8 = *(double *)&v15.value
     - (float)(v5 * 0.5)
     - (double)(int)vcvtmd_s64_f64(*(double *)&v15.value - (float)(v5 * 0.5))
     + 1.0;
  v9 = *(double *)&v15.timescale
     - (float)(v6 * 0.5)
     - (double)(int)vcvtmd_s64_f64(*(double *)&v15.timescale - (float)(v6 * 0.5))
     + 1.0;
  v10 = v9 - (double)(int)vcvtmd_s64_f64(v9);
  v11 = v8 - (double)(int)vcvtmd_s64_f64(v8);
  v12 = v10;
  if (v11 <= -0.00001 || v11 >= 0.00001 || v12 <= -0.00001 || v12 >= 0.00001)
  {
    v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v13 = v11;
    v14 = v12;
    OZChannelPosition3D::offsetPosition((OZChannelPosition3D *)(a1 + 5472), &v15, v11, v12, 0.0, 1);
    OZChannel::setDefaultValue((OZChannel *)(a1 + 5608), v13);
    OZChannel::setDefaultValue((OZChannel *)(a1 + 5760), v14);
    return (_QWORD *)OZChannel::setDefaultValue((OZChannel *)(a1 + 6208), 0.0);
  }
  return result;
}

CGColorSpace **OZImageElement::gridFit(CGColorSpace **this, OZFootage *a2)
{
  uint64_t v3;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  CGColorSpace *v33;
  CGColorSpace *v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  OZRenderState v42;
  float64x2_t v43;
  float64x2_t v44;

  if (a2)
  {
    v3 = (uint64_t)this;
    v43 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v44 = _Q0;
    OZRenderState::OZRenderState(&v42);
    v11 = xmmword_1B30503B0;
    v12 = 0x3FF0000000000000;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0x3FF0000000000000;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v24 = 0;
    v21 = 0;
    v22 = 0;
    v20 = 0x3FF0000000000000;
    v23 = 0;
    v25 = *MEMORY[0x1E0CA2E68];
    v26 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0x100000000;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 768;
    v36 = 0x408F400000000000;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    __asm { FMOV            V0.2D, #1.0 }
    v41 = _Q0;
    (*(void (**)(OZFootage *, float64x2_t *, OZRenderState *, __int128 *))(*(_QWORD *)a2 + 1568))(a2, &v43, &v42, &v11);
    __asm { FMOV            V2.2D, #0.5 }
    v43 = vsubq_f64(v43, vaddq_f64(v43, vmulq_f64(v44, _Q2)));
    (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v3 + 2264))(v3, &v43);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v34);
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v33);
  }
  return this;
}

void sub_1B2E28224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32)
{
  CGColorSpace **v32;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v32);
  _Unwind_Resume(a1);
}

void OZImageElement::getOriginalBounds(uint64_t a1, double *a2, const OZRenderState *a3)
{
  void *Footage;
  const CMTime *v7;
  double v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  _OWORD *v13;
  float64x2_t v20;
  __int128 v22;
  __int128 v24;
  CMTime var0;
  __int128 v26;
  int64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  CGColorSpace *v50;
  CGColorSpace *v51;
  __int16 v52;
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  OZRenderState v59;
  _QWORD v60[2];
  float64x2_t v61;

  Footage = OZImageElement::getFootage((OZImageElement *)a1);
  if (OZImageElement::isDropZone((OZImageElement *)a1))
  {
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 29232), MEMORY[0x1E0CA2E68], 0.0);
    v9 = vcvtmd_s64_f64(v8 + 0.00001 + 0.0000001);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 29384), v7, 0.0);
    v11 = (double)(uint64_t)((v9 & 1) + v9);
    v12 = (double)(uint64_t)floor(v10 + 0.00001 + 0.0000001);
    *a2 = v11 * -0.5;
    a2[1] = v12 * -0.5;
    a2[2] = v11;
    a2[3] = v12;
  }
  else if (Footage)
  {
    v13 = (_OWORD *)(a1 + 30216);
    if (*(double *)(a1 + 30232) >= 0.0 && *(double *)(a1 + 30240) >= 0.0)
    {
      v24 = *(_OWORD *)(a1 + 30232);
      *(_OWORD *)a2 = *v13;
      *((_OWORD *)a2 + 1) = v24;
    }
    else
    {
      v60[0] = 0;
      v60[1] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      v61 = _Q0;
      OZRenderState::OZRenderState(&v59, a3);
      v28 = xmmword_1B30503B0;
      v29 = 0x3FF0000000000000;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0x3FF0000000000000;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v41 = 0;
      v38 = 0;
      v39 = 0;
      v37 = 0x3FF0000000000000;
      v40 = 0;
      v42 = *MEMORY[0x1E0CA2E68];
      v43 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0x100000000;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 768;
      v53 = 0x408F400000000000;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = -1;
      __asm { FMOV            V0.2D, #1.0 }
      v58 = _Q0;
      var0 = (CMTime)v59.var0;
      OZImageElement::globalToFootageTime((OZImageElement *)a1, &var0, (uint64_t)&v26);
      *(_OWORD *)&v59.var0.var0 = v26;
      v59.var0.var3 = v27;
      HIDWORD(v38) = OZChannel::getValueAsInt((OZChannel *)(a1 + 22312), MEMORY[0x1E0CA2E68], 0.0);
      (*(void (**)(void *, _QWORD *, OZRenderState *, __int128 *))(*(_QWORD *)Footage + 1568))(Footage, v60, &v59, &v28);
      v20 = v61;
      __asm { FMOV            V1.2D, #-0.5 }
      *(float64x2_t *)a2 = vmulq_f64(v61, _Q1);
      *((float64x2_t *)a2 + 1) = v20;
      v22 = *((_OWORD *)a2 + 1);
      *v13 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 30232) = v22;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v51);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v50);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *((_OWORD *)a2 + 1) = _Q0;
  }
}

void sub_1B2E284B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  CGColorSpace **v38;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(v38);
  _Unwind_Resume(a1);
}

void OZImageElement::globalToFootageTime(OZImageElement *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  void *Footage;
  uint64_t v7;
  uint64_t v8;
  OZChannelBase *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  CMTimeEpoch v13;
  __int128 v14;
  uint64_t v15;
  CMTime v16;
  CMTime time2;
  CMTime time1;

  Footage = OZImageElement::getFootage(this);
  if (Footage && (*(unsigned int (**)(void *))(*(_QWORD *)Footage + 1376))(Footage) == 1)
  {
    v7 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
    v8 = *(_QWORD *)(v7 + 16);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v9 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
    OZRetimingUtil::RemapTimeValue(v9, (OZChannelObjectRoot *)a2, (uint64_t *)a3);
    memset(&v16, 0, sizeof(v16));
    (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(_QWORD *)this + 2304))(&v16, this);
    time1 = *(CMTime *)a3;
    v10 = MEMORY[0x1E0CA2E68];
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)v10;
      v8 = *(_QWORD *)(v10 + 16);
    }
    else
    {
      time1 = *(CMTime *)a3;
      time2 = v16;
      if (CMTimeCompare(&time1, &time2) < 0)
        return;
      v11 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v12);
      time1 = v16;
      *(__n128 *)&time2.value = v12;
      time2.epoch = v13;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
      *(_OWORD *)a3 = v14;
      v8 = v15;
    }
  }
  *(_QWORD *)(a3 + 16) = v8;
}

void OZImageElement::getRetimedHeliumGraphNoInterpolation(_anonymous_namespace_ *this@<X1>, const OZRenderParams *a2@<X2>, uint64_t a3@<X3>, const void *a4@<X4>, double *a5@<X5>, BOOL *a6@<X6>, _QWORD *a7@<X7>, HGBitmapLoader **a8@<X8>)
{
  CMTime v16;
  CMTime v17;
  CMTime v18;

  v16 = *(CMTime *)a2;
  v17.value = 0;
  *(CMTime *)a2 = v18;
  *((_QWORD *)a2 + 49) = 0;
  *((_QWORD *)a2 + 50) = 0;
  OZFootage::getHeliumGraph(this, a2, a3, a4, (FxColorDescription *)a5, (double *)a6, a7, a8);
}

double `anonymous namespace'::GetBlendingParams(_anonymous_namespace_ *this, const CMTime *a2, CMTime *a3, CMTime *a4, CMTime *a5, double *a6, BOOL *a7)
{
  double v11;
  CMTimeEpoch epoch;
  double result;
  CMTime v14;
  __int128 v15;
  CMTimeEpoch v16;
  __int128 v17;
  CMTimeEpoch v18;
  CMTime v19;
  CMTime time;
  __int128 v21;
  uint64_t v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;

  OZFootage::getFootageTime(this, a2, a3);
  memset(&v24, 0, sizeof(v24));
  OZFootage::getFrameDuration(this, &v24);
  memset(&v23, 0, sizeof(v23));
  v26 = *a3;
  v25 = v24;
  PC_CMTimeFloorToSampleDuration(&v26, &v25, (uint64_t)&v23);
  v21 = 0uLL;
  v22 = 0;
  v26 = *a3;
  v25 = v23;
  PC_CMTimeSaferSubtract(&v26, &v25, (uint64_t)&v21);
  operator/(&v21, (uint64_t)&v24, (uint64_t)&time);
  *(Float64 *)&a5->value = CMTimeGetSeconds(&time);
  v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (OZFootage::getFieldDominance(this, &v19))
  {
    v11 = *(double *)&a5->value;
    if (*(double *)&a5->value >= 0.5)
      v11 = *(double *)&a5->value + -0.5;
    *(double *)&a5->value = v11 + v11;
    v14 = v24;
    PC_CMTimeHalve(&v14, (uint64_t)&v15);
    v26 = *a3;
    *(_OWORD *)&v25.value = v15;
    epoch = v16;
  }
  else
  {
    v26 = *a3;
    *(_OWORD *)&v25.value = *(_OWORD *)&v24.value;
    epoch = v24.epoch;
  }
  v25.epoch = epoch;
  PC_CMTimeSaferAdd(&v26, &v25, (uint64_t)&v17);
  result = *(double *)&v17;
  *(_OWORD *)&a4->value = v17;
  a4->epoch = v18;
  return result;
}

void getMotionBlurTimes(CMTime *a1, int a2, int a3, OZImageElement *a4, OZFootage *this, uint64_t a6, char **a7, double a8)
{
  int v15;
  int v16;
  double v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  double *v42;
  char *v43;
  char *v44;
  double *v45;
  __int128 v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime v51;
  void *__p;
  char *v53;
  char *v54;
  CMTime v55;
  CMTime v56;

  a7[1] = *a7;
  __p = 0;
  v53 = 0;
  v54 = 0;
  if (a3)
    v15 = a2;
  else
    v15 = 1;
  memset(&v51, 0, sizeof(v51));
  OZFootage::getFrameDuration(this, &v51);
  memset(&v50, 0, sizeof(v50));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(a6 + 336), (__n128 *)&v50);
  if (a2)
  {
    v16 = 0;
    v17 = a8 / (double)(v15 * a2);
    v18 = 1.0 / (double)a2;
    do
    {
      memset(&v49, 0, sizeof(v49));
      operator*(&v50, &v47, v17 * (double)v16);
      v56 = *a1;
      v55 = v47;
      PC_CMTimeSaferAdd(&v56, &v55, (uint64_t)&v48);
      OZImageElement::globalToFootageTime(a4, &v48, (uint64_t)&v49);
      OZFootage::getFootageTime(this, &v49, &v56);
      LOBYTE(v47.value) = 0;
      v19 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CMTime *>,std::__wrap_iter<CMTime *>,CMTime,std::__identity,std::__less<void,void>>((uint64_t)__p, (uint64_t)v53, &v56);
      if (v53 == (char *)v19)
      {
        if ((unint64_t)v54 <= v19)
        {
          v23 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (_BYTE *)__p) >> 3);
          v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v54 - (_BYTE *)__p) >> 3) > v24)
            v24 = 0x5555555555555556 * ((v54 - (_BYTE *)__p) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v54 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
            v25 = 0xAAAAAAAAAAAAAAALL;
          else
            v25 = v24;
          if (v25)
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v54, v25);
          else
            v26 = 0;
          v27 = &v26[24 * v23];
          v28 = *(_OWORD *)&v56.value;
          *((_QWORD *)v27 + 2) = v56.epoch;
          *(_OWORD *)v27 = v28;
          v30 = (char *)__p;
          v29 = v53;
          v31 = v27;
          if (v53 != __p)
          {
            do
            {
              v32 = *(_OWORD *)(v29 - 24);
              *((_QWORD *)v31 - 1) = *((_QWORD *)v29 - 1);
              *(_OWORD *)(v31 - 24) = v32;
              v31 -= 24;
              v29 -= 24;
            }
            while (v29 != v30);
            v29 = (char *)__p;
          }
          v22 = v27 + 24;
          __p = v31;
          v53 = v27 + 24;
          v54 = &v26[24 * v25];
          if (v29)
            operator delete(v29);
        }
        else
        {
          v21 = *(_OWORD *)&v56.value;
          *(_QWORD *)(v19 + 16) = v56.epoch;
          *(_OWORD *)v19 = v21;
          v22 = (char *)(v19 + 24);
        }
        v53 = v22;
        v55 = v56;
        v33 = (unint64_t)a7[1];
        v34 = (unint64_t)a7[2];
        if (v33 >= v34)
        {
          v37 = (uint64_t)(v33 - (_QWORD)*a7) >> 5;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 59)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v39 = v34 - (_QWORD)*a7;
          if (v39 >> 4 > v38)
            v38 = v39 >> 4;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
            v40 = 0x7FFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a7 + 2), v40);
          else
            v41 = 0;
          v42 = (double *)&v41[32 * v37];
          *(CMTime *)v42 = v55;
          v42[3] = v18;
          v44 = *a7;
          v43 = a7[1];
          v45 = v42;
          if (v43 != *a7)
          {
            do
            {
              v46 = *((_OWORD *)v43 - 1);
              *((_OWORD *)v45 - 2) = *((_OWORD *)v43 - 2);
              *((_OWORD *)v45 - 1) = v46;
              v45 -= 4;
              v43 -= 32;
            }
            while (v43 != v44);
            v43 = *a7;
          }
          v36 = (char *)(v42 + 4);
          *a7 = (char *)v45;
          a7[1] = (char *)(v42 + 4);
          a7[2] = &v41[32 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v35 = *(_OWORD *)&v56.value;
          *(_QWORD *)(v33 + 16) = v56.epoch;
          *(_OWORD *)v33 = v35;
          *(double *)(v33 + 24) = v18;
          v36 = (char *)(v33 + 32);
        }
        a7[1] = v36;
      }
      else
      {
        v20 = (uint64_t)&(*a7)[0x5555555555555560 * ((v19 - (unint64_t)__p) >> 3)];
        *(double *)(v20 + 24) = v18 + *(double *)(v20 + 24);
      }
      ++v16;
    }
    while (v16 != a2);
  }
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B2E28C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OZImageElement::getRetimedHeliumGraphMotionBlur(OZFootage *this@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, OZRenderParams *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X6>, double *a8@<X7>, uint64_t *a9@<X8>, _QWORD *a10)
{
  unint64_t v17;
  uint64_t WorkingColorDescription;
  CGColorSpace *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  void ***v24;
  void **v25;
  uint64_t v26;
  double *v27;
  double *v28;
  uint64_t v29;
  void **v30;
  uint64_t *v31;
  unint64_t v32;
  HGBitmapLoader *v33;
  void **v34[2];
  HGBitmapLoader *v35;
  double *v36;
  void ***v37;
  unint64_t v38;
  FxColorDescription v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v40 = 0;
  v41 = 0;
  v42 = 0;
  *(_OWORD *)&v39._pcColorDesc._colorSpaceRef._obj = *(_OWORD *)a3;
  *(_QWORD *)&v39._pcColorDesc._toneMapMethod._gain = *(_QWORD *)(a3 + 16);
  getMotionBlurTimes((CMTime *)&v39, *(_DWORD *)(a3 + 500), *(unsigned __int8 *)(a3 + 496), (OZImageElement *)a2, this, a2[121], &v40, *(double *)(a3 + 504));
  v17 = v41 - v40;
  WorkingColorDescription = a7;
  if ((unint64_t)(v41 - v40) >= 0x21)
    WorkingColorDescription = OZRenderParams::getWorkingColorDescription(a4);
  v19 = *(CGColorSpace **)WorkingColorDescription;
  v39._pcColorDesc._colorSpaceRef._obj = v19;
  if (v19)
    PCCFRefTraits<CGColorSpace *>::retain(v19);
  v32 = v17;
  v20 = *(_QWORD *)(WorkingColorDescription + 8);
  v39._pcColorDesc._toneMapMethod._gain = *(float *)(WorkingColorDescription + 16);
  *(_QWORD *)&v39._pcColorDesc._dynamicRange = v20;
  v39._isPremultiplied = *(_BYTE *)(WorkingColorDescription + 24);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v22 = v40;
  v21 = v41;
  if (v40 == v41)
  {
    v28 = 0;
    v27 = 0;
  }
  else
  {
    v31 = a9;
    do
    {
      v23 = *(_OWORD *)v22;
      *((_QWORD *)a4 + 2) = *((_QWORD *)v22 + 2);
      *(_OWORD *)a4 = v23;
      *((_QWORD *)a4 + 49) = 0;
      *((_QWORD *)a4 + 50) = 0;
      OZFootage::getHeliumGraph(this, a4, a5, a6, &v39, a8, a10, &v35);
      v33 = v35;
      if (v35)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v35 + 16))(v35);
      FxBalancedBlendRecord::FxBalancedBlendRecord((uint64_t)v34, (uint64_t *)&v33, *((double *)v22 + 3));
      if (v33)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v33 + 24))(v33);
      v24 = v37;
      if ((unint64_t)v37 >= v38)
      {
        v26 = std::vector<FxBalancedBlendRecord>::__push_back_slow_path<FxBalancedBlendRecord const&>((uint64_t *)&v36, (uint64_t *)v34);
      }
      else
      {
        v25 = v34[0];
        *v37 = v34[0];
        if (v25)
          (*((void (**)(void **))*v25 + 2))(v25);
        v24[1] = v34[1];
        v26 = (uint64_t)(v24 + 2);
      }
      v37 = (void ***)v26;
      if (v34[0])
        (*((void (**)(void **))*v34[0] + 3))(v34[0]);
      if (v35)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v35 + 24))(v35);
      v22 += 32;
    }
    while (v22 != v21);
    v27 = v36;
    v28 = (double *)v37;
    a9 = v31;
  }
  makeBalancedBlendTree_RetimeAddBlend6<std::__wrap_iter<FxBalancedBlendRecord *>>(v27, v28, a9);
  if (v32 < 0x21)
  {
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a7, &v39._pcColorDesc._colorSpaceRef._obj);
    *(_QWORD *)(a7 + 8) = *(_QWORD *)&v39._pcColorDesc._dynamicRange;
    *(float *)(a7 + 16) = v39._pcColorDesc._toneMapMethod._gain;
    *(_BYTE *)(a7 + 24) = v39._isPremultiplied;
  }
  else
  {
    FxApplyColorConform(a9, &v39, (FxColorDescription *)a7, (uint64_t *)v34);
    v29 = *a9;
    v30 = v34[0];
    if ((void **)*a9 == v34[0])
    {
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    }
    else
    {
      if (v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
        v30 = v34[0];
      }
      *a9 = (uint64_t)v30;
    }
  }
  *a10 = 0;
  v34[0] = (void **)&v36;
  std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100](v34);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v39._pcColorDesc._colorSpaceRef._obj);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
}

void sub_1B2E28F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  void *v8;
  void (***v9)(void **);
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, void (***)(void **));
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  if (v9)
    (*v9)[3]((void **)v9);
  if (*v5)
    (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
  va_copy((va_list)v9, va1);
  std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va2);
  v8 = *(void **)(v6 - 104);
  if (v8)
  {
    *(_QWORD *)(v6 - 96) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void OZImageElement::getRetimedHeliumGraph(uint64_t a1@<X0>, uint64_t a2@<X1>, OZFootage *a3@<X2>, OZRenderParams *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, double *a7@<X6>, double *a8@<X7>, _QWORD *a9@<X8>, _QWORD *a10)
{
  int ValueAsInt;
  int v20;
  HGBitmapLoader *v21;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 21496), MEMORY[0x1E0CA2E68], 0.0);
  if (*(_BYTE *)(a2 + 513))
    v20 = ValueAsInt;
  else
    v20 = 0;
  *a9 = 0;
  if (v20 == 2)
  {
    OZImageElement::getRetimedHeliumGraphMotionBlur(a3, (uint64_t *)a1, a2, a4, a5, a6, (uint64_t)a7, a8, (uint64_t *)&v21, a10);
  }
  else
  {
    if (v20)
      return;
    OZImageElement::getRetimedHeliumGraphNoInterpolation(a3, a4, a5, a6, a7, (BOOL *)a8, a10, &v21);
  }
  if (v21)
    *a9 = v21;
}

void OZImageElement::createDropZoneGridHeliumGraph(_anonymous_namespace_ *a1@<X0>, const void *a2@<X1>, FxColorDescription *a3@<X2>, uint64_t a4@<X3>, HGBitmapLoader **a5@<X8>)
{
  const OZRenderParams *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const OZRenderParams *CGColorSpace;
  void *v20;
  unsigned int v21;
  CGColorSpace *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  __int128 v27;
  CGColorSpaceRef v28;
  __int128 v29;
  uint64_t v30;
  CGColorSpaceRef space;
  int v32;
  uint64_t v33;
  uint64_t ImageContext;
  __int128 v35;

  FxColorDescription::setDynamicRange(a3, 0);
  *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  if (*((_DWORD *)a1 + 80) != 1)
  {
    CGColorSpace = (const OZRenderParams *)FxColorDescription::getCGColorSpace(a3);
    if (*((_DWORD *)a1 + 80) == 1)
    {
      v27 = v35;
      if (!a2)
      {
LABEL_16:
        v20 = 0;
LABEL_26:
        *(_QWORD *)&v29 = 0;
        PGHelium::createTextureNode(&v27, (uint64_t)v20, (unsigned int *)&v29, 0, 0, a5);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (!*((_QWORD *)&v27 + 1))
          return;
        v26 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v18 = __ldaxr(v26);
        while (__stlxr(v18 - 1, v26));
        goto LABEL_29;
      }
    }
    else
    {
      PCImageAttributes::PCImageAttributes((PCImageAttributes *)&v29);
      LODWORD(v29) = 2;
      DWORD1(v29) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v35 + 16))(v35);
      v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v35 + 24))(v35);
      *((_QWORD *)&v29 + 1) = __PAIR64__(*(_DWORD *)(v35 + 36), v21);
      v30 = 0x300000004;
      PCImage::getColorSpace((PCImage *)v35, &v28);
      v22 = v28;
      if (space && space != v28)
      {
        PCCFRefTraits<CGColorSpace *>::release(space);
        v22 = v28;
      }
      space = v22;
      v28 = 0;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v28);
      v32 = 3553;
      v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 64) + 16))(*(_QWORD *)(v35 + 64));
      ImageContext = OZRenderParams::getImageContext(a1);
      PGCreateImage((const PCImageAttributes *)&v29, (uint64_t *)&v27);
      PCCFRef<CGColorSpace *>::~PCCFRef(&space);
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (!*((_QWORD *)&v35 + 1))
        goto LABEL_24;
      v24 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!a2)
          goto LABEL_16;
      }
      else
      {
LABEL_24:
        if (!a2)
          goto LABEL_16;
      }
    }
    goto LABEL_26;
  }
  v10 = (const OZRenderParams *)FxColorDescription::getCGColorSpace(a3);
  v35 = v29;
  if (*((_QWORD *)&v29 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)&v27 = 0;
  PGHelium::createBitmapNode(&v35, (unsigned int *)&v27, 0, 0, a5);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
LABEL_29:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1B2E29448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  CGColorSpace *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, CGColorSpace *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v3 - 64);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::createDropZoneGridBitmap(_anonymous_namespace_ *this@<X0>, const OZRenderParams *a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 Resolution;
  __n128 v8;
  double v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  PCColorSpaceCache *BytesPerRow;
  int v19;
  CGColorSpace *v20;
  uint64_t i;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  long double v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  __n128 v31;

  Resolution = OZRenderParams::getResolution(this, &v31);
  v8 = v31;
  Resolution.n128_u32[0] = *((_DWORD *)this + 81);
  v9 = v31.n128_f64[0] * (double)Resolution.n128_u64[0];
  if ((int)v9 <= 1)
    v10 = 1;
  else
    v10 = (int)v9;
  LODWORD(v9) = *((_DWORD *)this + 82);
  v11 = (int)(v31.n128_f64[1] * (double)*(unint64_t *)&v9);
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = v11;
  v13 = (_QWORD *)operator new();
  PCBitmap::PCBitmap((uint64_t)v13, v10, v12, 3, (uint64_t)a2, 1);
  *v13 = &unk_1E6511830;
  std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,void>(a3, (uint64_t)v13);
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 64) + 16))(*(_QWORD *)(*a3 + 64));
  if ((int)(v8.n128_f64[0] * 50.0) <= 1)
    v14 = 1;
  else
    v14 = (int)(v8.n128_f64[0] * 50.0);
  if ((int)(v8.n128_f64[1] * 50.0) <= 1)
    v15 = 1;
  else
    v15 = (int)(v8.n128_f64[1] * 50.0);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3);
  BytesPerRow = (PCColorSpaceCache *)PCBitmap::getBytesPerRow((PCBitmap *)*a3);
  v19 = (int)BytesPerRow;
  v31.n128_u8[0] = -106;
  v30 = -106;
  v29 = -106;
  v20 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(BytesPerRow);
  PCGetColorInColorSpace<unsigned char,unsigned char>(v20, 0x96u, (CGColorSpace *)0x96, 0x96u, a2, &v31, &v30, &v29);
  if (v17 >= 1)
  {
    for (i = 0; i != v17; ++i)
    {
      if (v16 >= 1)
      {
        v22 = fmod((double)(int)i, (double)v15);
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = v28 + i * v19 + (v24 & 0xFFFFFFFC);
          v26 = fmod((double)v23, (double)v14);
          *(_BYTE *)v25 = -1;
          if (v26 == 0.0 || v22 == 0.0)
          {
            *(_WORD *)(v25 + 1) = -1;
            v27 = -1;
          }
          else
          {
            *(_BYTE *)(v25 + 1) = v31.n128_u8[0];
            *(_BYTE *)(v25 + 2) = v30;
            v27 = v29;
          }
          *(_BYTE *)(v25 + 3) = v27;
          v24 += 4;
          ++v23;
        }
        while (4 * v16 != v24);
      }
    }
  }
}

void sub_1B2E296F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void OZImageElement::clearDropZoneCallback(OZImageElement *this)
{
  unsigned int ValueAsInt;
  OZPreferenceManager *v3;
  OZPreferenceManager *v4;
  _DWORD *Footage;
  OZPreferenceManager *v6;
  OZPreferenceManager *v7;
  OZScene *v8;
  PCSharedCount v9;
  uint64_t *v10;
  _QWORD *v11[2];
  const __CFURL *v12;

  OZImageElement::isEffectSource(this);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E0CA2E68], 0.0);
  OZImageElement::defaultDropZoneFootageForType(ValueAsInt, (PCURL *)&v12);
  v11[0] = 0;
  v11[1] = 0;
  v10 = (uint64_t *)v11;
  v4 = (OZPreferenceManager *)OZPreferenceManager::Instance(v3);
  if (OZPreferenceManager::getRemoveUnusedMedia(v4))
  {
    Footage = OZImageElement::getFootage(this);
    if (Footage)
    {
      LODWORD(v9.var0) = Footage[20];
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v10, (unsigned int *)&v9, &v9);
    }
  }
  v6 = (OZPreferenceManager *)OZImageElement::replaceFootage(this, &v12, 1);
  if ((_DWORD)v6)
  {
    v7 = (OZPreferenceManager *)OZPreferenceManager::Instance(v6);
    if (OZPreferenceManager::getRemoveUnusedMedia(v7))
    {
      v8 = (OZScene *)*((_QWORD *)this + 121);
      PCSharedCount::PCSharedCount(&v9);
      OZScene::deleteUnusedSceneNodeFilesForNodes(v8, &v10, (uint64_t)&v9);
      PCString::~PCString((PCString *)&v9);
    }
    OZDocument::postNotification(*(OZDocument **)(*((_QWORD *)this + 121) + 1584), 24);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v10, v11[0]);
  PCURL::~PCURL((PCURL *)&v12);
}

void sub_1B2E2982C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, _QWORD *a12)
{
  uint64_t v12;

  PCString::~PCString(&a10);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a11, a12);
  PCURL::~PCURL((PCURL *)(v12 - 24));
  _Unwind_Resume(a1);
}

void OZImageElement::defaultDropZoneFootageForType(unsigned int a1@<W0>, PCURL *a2@<X8>)
{
  const __CFString *v3;
  CFURLRef v4;

  if (a1 > 3)
    v3 = 0;
  else
    v3 = off_1E658F260[a1];
  v4 = CFBundleCopyResourceURL(*(CFBundleRef *)(theApp + 72), v3, 0, 0);
  PCURL::PCURL(a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B2E298D8(_Unwind_Exception *a1)
{
  PCURL *v1;

  PCURL::~PCURL(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::getDropZoneType(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E0CA2E68], 0.0);
}

void OZImageElement::setDropZonePlaceholder(OZImageElement *this)
{
  unsigned int ValueAsInt;
  PMMediaManager *v3;
  PMMediaManager *Instance;
  OZFootage *Footage;
  PMClip *v6;
  const __CFURL *v7;

  OZImageElement::isEffectSource(this);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E0CA2E68], 0.0);
  OZImageElement::defaultDropZoneFootageForType(ValueAsInt, (PCURL *)&v7);
  Instance = (PMMediaManager *)PMMediaManager::getInstance(v3);
  if (PMMediaManager::findReader(Instance, &v7))
  {
    v6 = 0;
    if (!PMMediaManager::open(Instance, (const PCURL *)&v7, &v6, 0))
    {
      Footage = (OZFootage *)OZImageElement::getFootage(this);
      if (Footage)
        OZFootage::setClip(Footage, v6, 1, 1, 1);
      OZImageElement::showHideDropZoneChannels(this, 0);
    }
  }
  PCURL::~PCURL((PCURL *)&v7);
}

void sub_1B2E299BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

BOOL OZImageElement::addExtraLighting(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 29688), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL OZImageElement::removeBackground(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 29536), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL OZImageElement::resizeToMatchInputSource(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t *OZScene::begin_t<OZFootageLayer,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E29AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL OZImageElement::isDefaultDropZoneFootageForType(const __CFURL **a1, unsigned int a2)
{
  _BOOL8 v3;
  __CFString *v4;
  PCString v6;
  PCString v7;

  PCURL::getAsFileSystemString(a1, &v7);
  if (PCString::empty(&v7))
  {
    v3 = 0;
  }
  else
  {
    if (a2 > 3)
      v4 = 0;
    else
      v4 = off_1E658F260[a2];
    PCURL::PCURL((PCURL *)&v6, v4);
    v3 = (int)PCString::find(&v7, &v6) >= 0;
    PCString::~PCString(&v6);
  }
  PCString::~PCString(&v7);
  return v3;
}

void sub_1B2E29B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::isDefaultDropZoneFootage(const PCURL *a1)
{
  const __CFURL **v2;
  BOOL isDefaultDropZoneFootageForType;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  _BOOL8 v7;
  const __CFURL *v9;
  const __CFURL *v10;
  const __CFURL *v11;
  const __CFURL *v12;
  _BYTE v13[8];

  v2 = (const __CFURL **)PCURL::PCURL((PCURL *)v13, a1);
  isDefaultDropZoneFootageForType = OZImageElement::isDefaultDropZoneFootageForType(v2, 0);
  PCURL::~PCURL((PCURL *)v13);
  if (isDefaultDropZoneFootageForType)
    return 1;
  PCURL::PCURL((PCURL *)&v12, a1);
  v4 = OZImageElement::isDefaultDropZoneFootageForType(&v12, 3u);
  PCURL::~PCURL((PCURL *)&v12);
  if (v4)
    return 1;
  PCURL::PCURL((PCURL *)&v11, a1);
  v5 = OZImageElement::isDefaultDropZoneFootageForType(&v11, 3u);
  PCURL::~PCURL((PCURL *)&v11);
  if (v5)
    return 1;
  PCURL::PCURL((PCURL *)&v10, a1);
  v6 = OZImageElement::isDefaultDropZoneFootageForType(&v10, 1u);
  PCURL::~PCURL((PCURL *)&v10);
  if (v6)
    return 1;
  PCURL::PCURL((PCURL *)&v9, a1);
  v7 = OZImageElement::isDefaultDropZoneFootageForType(&v9, 2u);
  PCURL::~PCURL((PCURL *)&v9);
  return v7;
}

void sub_1B2E29CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

CMTime *OZImageElement::globalToLocalTime@<X0>(OZImageElement *this@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  double v6;
  Float64 v7;
  OZChannelBase var60;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20632), MEMORY[0x1E0CA2E68], 0.0);
  v7 = v6;
  *(_OWORD *)&var60.var0 = *(_OWORD *)&a2->value;
  var60.var2 = (void **)a2->epoch;
  OZSceneNode::globalToLocalTime(this, &var60, (uint64_t)&var60.var3);
  return operator*((CMTime *)&var60.var3, a3, v7);
}

double OZImageElement::localToGlobalTime@<D0>(OZImageElement *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  CMTime v8;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20632), MEMORY[0x1E0CA2E68], 0.0);
  operator/((__int128 *)&a2->value, (uint64_t)&v8, v6);
  return OZSceneNode::localToGlobalTime(this, (OZChannelBase *)&v8, a3);
}

void OZImageElement::calculateFrameRequestSettings(OZImageElement *this, const OZRenderParams *a2, FxColorDescription *a3, OZFootage *a4, OZRenderParams **a5, __n128 *a6, float *a7, float *a8)
{
  OZRenderParams *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  CGColorSpace *WorkingColorSpace;
  OZFactoryBase *v26;
  CGColorSpace *Instance;
  char isDynamicRangeManaged;
  const PCString *v29;
  PMFrameRequest *v30;
  char v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int ValueAsInt;
  unsigned int v38;
  __n128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;

  v16 = (OZRenderParams *)operator new();
  OZRenderParams::OZRenderParams(v16, a2);
  *a5 = v16;
  v45 = *(CMTime *)a2;
  memset(&v44, 0, sizeof(v44));
  v43 = *(CMTime *)a2;
  OZImageElement::globalToFootageTime(this, &v43, (uint64_t)&v44);
  v17 = (uint64_t)*a5;
  v18 = *(_OWORD *)&v44.value;
  *(_QWORD *)(v17 + 16) = v44.epoch;
  *(_OWORD *)v17 = v18;
  *(_QWORD *)(v17 + 392) = 0;
  *(_QWORD *)(v17 + 400) = 0;
  a6[5].n128_u32[3] = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22312), MEMORY[0x1E0CA2E68], 0.0);
  if (OZFootage::getPages(a4))
    a6[6].n128_u32[0] = OZChannel::getValueAsInt((OZChannel *)((char *)this + 19320), &v45, 0.0) - 1;
  v42 = 0;
  (*(void (**)(OZFootage *, char *, uint64_t *, const OZRenderParams *, __n128 *))(*(_QWORD *)a4 + 1576))(a4, (char *)&v42 + 4, &v42, a2, a6);
  *a7 = *((float *)&v42 + 1);
  *(_DWORD *)a8 = v42;
  if (OZFootage::isResolutionIndependent(a4))
  {
    v20 = v42;
    if (__PAIR128__(*((unsigned int *)a2 + 82), *((unsigned int *)a2 + 81)) != __PAIR128__((uint64_t)*(float *)&v42, (uint64_t)*((float *)&v42 + 1)))
    {
      a6[1].n128_u64[1] = 0;
      a6[2].n128_u64[0] = 0;
      a6[2].n128_u64[1] = 0;
      a6[3].n128_u64[1] = 0;
      a6[4].n128_u64[0] = 0;
      a6[4].n128_u64[1] = 0;
      a6[5].n128_u64[0] = 0x3FF0000000000000;
      LODWORD(v19) = *((_DWORD *)a2 + 81);
      *(double *)&v21 = (double)v19;
      v22 = *(double *)&v21 / *((float *)&v20 + 1);
      LODWORD(v21) = *((_DWORD *)a2 + 82);
      v23 = (double)v21 / *(float *)&v20;
      a6[1].n128_f64[0] = v22;
      a6[1].n128_f64[1] = v22 * 0.0;
      a6[2].n128_f64[0] = v22 * 0.0;
      a6[2].n128_f64[1] = v23 * 0.0;
      a6[3].n128_f64[0] = v23;
      a6[3].n128_f64[1] = v23 * 0.0;
    }
  }
  a6[6].n128_u8[8] = *((_BYTE *)a2 + 360);
  v24 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v24 + 336), &v39);
  a6[7] = v39;
  a6[8].n128_u64[0] = v40;
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  PMFrameRequest::setWorkingColorSpace((CGColorSpace **)a6, WorkingColorSpace);
  Instance = (CGColorSpace *)TXParagraphStyleFolder_Factory::createInstance(a4, v26);
  PMFrameRequest::setOverrideColorSpace((CGColorSpace **)a6, Instance);
  isDynamicRangeManaged = FxColorDescription::isDynamicRangeManaged(a3);
  PMFrameRequest::setIsDynamicRangeTrackingRender((uint64_t)a6, isDynamicRangeManaged);
  switch(OZElement::getColorConversionType((OZElement *)this))
  {
    case 0u:
      v30 = (PMFrameRequest *)a6;
      v31 = 1;
      goto LABEL_12;
    case 1u:
      v30 = (PMFrameRequest *)a6;
      v31 = 0;
      goto LABEL_12;
    case 2u:
      PMFrameRequest::setConversionMethod((uint64_t)a6, 2);
      OZElement::getColorConversionPeakNits((OZElement *)this);
      PMFrameRequest::setPQPeakNits((uint64_t)a6, v32);
      break;
    case 3u:
      v30 = (PMFrameRequest *)a6;
      v31 = 3;
      goto LABEL_12;
    case 4u:
      v30 = (PMFrameRequest *)a6;
      v31 = 4;
LABEL_12:
      PMFrameRequest::setConversionMethod((uint64_t)v30, v31);
      break;
    default:
      break;
  }
  if (*((_QWORD *)a4 + 1009) && OZFootage::isCinematographyAvailable(a4, v29) && *((_BYTE *)a2 + 1212))
  {
    if (OZChannelBase::isEnabled((OZChannelBase *)this + 271, 0, 1))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 30888), &v44, 0.0);
      v34 = v33;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 30736), &v44, 0.0);
      v36 = v35;
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32000), &v44, 0.0);
      v38 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31040), &v44, 0.0);
      v39.n128_u8[0] = 1;
      *(unint64_t *)((char *)v39.n128_u64 + 4) = __PAIR64__(ValueAsInt, v38);
      v40 = v34;
      v41 = v36;
      PMFrameRequest::setCinematography((uint64_t)a6, (uint64_t)&v39);
    }
  }
}

void sub_1B2E2A158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E0C40DE5FDD4ELL);
  _Unwind_Resume(a1);
}

OZChannelBase *OZImageElement::didResetCinematography(OZImageElement *this)
{
  OZImageElement::ptcResetCinematographyAllChannels(this);
  OZImageElement::ptcDeleteScriptData(this);
  OZImageElement::ptcLoadCinematicScript(this);
  return OZImageElement::ptcFillCinematographyDataChannels(this);
}

unint64_t OZImageElement::estimateRenderMemory(OZImageElement *a1, uint64_t a2, unsigned int *a3)
{
  OZFootage *Footage;
  OZFootage *v6;
  uint64_t v7;
  FxColorDescription *WorkingColorDescription;
  OZRenderParams *v14;
  unint64_t v15;
  float v17;
  float v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  char v40;
  CGColorSpace *v41;
  CGColorSpace *v42;
  __int16 v43;
  uint64_t v44;
  char v45;
  int v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  OZRenderParams *v50;

  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  if (!Footage)
    return a3[82] * (unint64_t)a3[81] * a3[84] * ((unint64_t)a3[83] >> 3);
  v6 = Footage;
  v50 = 0;
  v19 = xmmword_1B30503B0;
  v20 = 0x3FF0000000000000;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0x3FF0000000000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0x3FF0000000000000;
  v31 = 0;
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v33 = *MEMORY[0x1E0CA2E68];
  v34 = v7;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0x100000000;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 768;
  v44 = 0x408F400000000000;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  v49 = _Q0;
  WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a3);
  OZImageElement::calculateFrameRequestSettings(a1, (const OZRenderParams *)a3, WorkingColorDescription, v6, &v50, (__n128 *)&v19, &v18, &v17);
  v14 = v50;
  v15 = OZFootage::estimateRenderMemory((uint64_t)v6);
  OZRenderParams::~OZRenderParams(v14);
  MEMORY[0x1B5E29170]();
  PCCFRef<CGColorSpace *>::~PCCFRef(&v42);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v41);
  return v15;
}

void sub_1B2E2A33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34)
{
  CGColorSpace **v34;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  PCCFRef<CGColorSpace *>::~PCCFRef(v34);
  _Unwind_Resume(a1);
}

void *OZImageElement::reloadResources(OZImageElement *this, PGContext *a2)
{
  void *result;

  result = OZImageElement::getFootage(this);
  if (result)
    return (void *)(*(uint64_t (**)(void *, PGContext *))(*(_QWORD *)result + 1624))(result, a2);
  return result;
}

void *OZImageElement::eval(OZImageElement *this, OZRenderParams *a2)
{
  void *result;

  result = OZImageElement::getFootage(this);
  if (result)
    return (void *)(*(uint64_t (**)(void *, OZRenderParams *))(*(_QWORD *)result + 96))(result, a2);
  return result;
}

OZImageElement *OZImageElement::hitCheckForDropZoneSource(OZImageElement *a1, float32x2_t *a2, const OZRenderState *a3, uint64_t a4, double *a5, char a6)
{
  OZImageElement *v11;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  int v21;
  uint64_t v22;
  char v23;
  double v24;
  double *v25;
  uint64_t v26;
  unsigned int v27;
  double v28;
  double v29;
  BOOL v31;
  double v32[4];
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  unint64_t v36;
  double v37[3];
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  float64x2_t v53;
  __int128 v54;
  _BYTE v55[1424];
  __int128 v56;
  int64_t var3;
  __int128 v58;
  double v59;
  double v60;
  double v61;
  float64_t v62;
  float64x2_t v63;
  __int128 v64;
  uint64_t v65;

  v11 = a1;
  v65 = *MEMORY[0x1E0C80C00];
  if ((a6 & 4) != 0 && ((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)a1 + 680))(a1) & 1) != 0)
    return 0;
  if ((a6 & 2) != 0)
  {
    v56 = *(_OWORD *)&a3->var0.var0;
    var3 = a3->var0.var3;
    if (!(*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v11 + 2) + 104))((_QWORD *)v11 + 2, &v56, 1, 1, 1))return 0;
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)v55);
  OZRenderParams::setState((OZRenderParams *)v55, a3);
  v64 = 0uLL;
  v53 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v54 = _Q0;
  OZImageElement::getDropZoneSourceBounds(v11, &v53, (OZRenderParams *)v55, 0);
  v16 = v53;
  v17 = v53.f64[1] + *((double *)&v54 + 1);
  *(float64_t *)&v58 = v53.f64[0];
  *((double *)&v58 + 1) = v53.f64[1] + *((double *)&v54 + 1);
  v18 = v53.f64[0] + *(double *)&v54;
  v59 = v53.f64[0] + *(double *)&v54;
  v60 = v53.f64[1] + *((double *)&v54 + 1);
  v61 = v53.f64[0] + *(double *)&v54;
  v62 = v53.f64[1];
  v63 = v53;
  v64 = v58;
  v52 = 0x3FF0000000000000;
  v49 = 0x3FF0000000000000;
  v46 = 0x3FF0000000000000;
  v43 = 0x3FF0000000000000;
  v44 = 0u;
  v45 = 0u;
  v47 = 0u;
  v48 = 0u;
  v50 = 0u;
  v51 = 0u;
  (*(void (**)(OZImageElement *, uint64_t *, const OZRenderState *))(*(_QWORD *)v11 + 1256))(v11, &v43, a3);
  v41 = vcvtq_f64_f32(*a2);
  v42 = 0;
  (*(void (**)(double *__return_ptr, OZImageElement *, float64x2_t *, uint64_t, const OZRenderState *, _QWORD))(*(_QWORD *)v11 + 1384))(v37, v11, &v41, a4, a3, 0);
  v19 = v38 * v38 + v39 * v39 + v40 * v40;
  if (v19 <= -0.0000001 || v19 >= 0.0000001)
  {
    memset(v34, 0, sizeof(v34));
    v35 = 0;
    v36 = 0xBFF0000000000000;
    PCIntersectRayWithPlane(v37, (double *)v34, a5);
    if (v21)
    {
      v22 = 0;
      v23 = 0;
      v24 = a5[1];
      v25 = (double *)&v58 + 1;
      LODWORD(v26) = 4;
      do
      {
        v27 = v26;
        v26 = v22;
        v28 = *v25;
        v29 = *((double *)&v58 + 2 * v27 + 1);
        _NF = *v25 <= v24 && v24 < v29;
        if (_NF || (v24 < v28 ? (v31 = v29 > v24) : (v31 = 1), !v31))
        {
          if (*a5 < *(v25 - 1) + (v24 - v28) * (*((double *)&v58 + 2 * v27) - *(v25 - 1)) / (v29 - v28))
            v23 ^= 1u;
        }
        ++v22;
        v25 += 2;
      }
      while (v26 != 4);
      if ((v23 & 1) != 0)
      {
        PCMatrix44Tmpl<double>::transform<double>((double *)&v43, a5, a5);
        goto LABEL_8;
      }
    }
    else
    {
      v32[0] = v16.f64[0];
      v32[1] = v18;
      v32[2] = v16.f64[1];
      v32[3] = v17;
      v33 = xmmword_1B355D500;
      if (PCRayIntersectsBox(v37, v32, a5))
      {
        PCMatrix44Tmpl<double>::transform<double>((double *)&v43, a5, a5);
        goto LABEL_8;
      }
    }
  }
  v11 = 0;
LABEL_8:
  OZRenderParams::~OZRenderParams((OZRenderParams *)v55);
  return v11;
}

void sub_1B2E2A6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a51);
  _Unwind_Resume(a1);
}

void OZImageElement::calcHashForState(OZImageElement *a1, const void *a2, const PCString *a3, uint64_t **a4, uint64_t a5)
{
  char *Footage;
  char *v11;
  _OWORD *v12;
  int8x8_t *v13;
  int8x8_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int8x8_t *Hash;
  __int128 v20;
  CMTime v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;

  Footage = (char *)OZImageElement::getFootage(a1);
  if (!Footage
    || (v11 = Footage, OZImageElement::isDropZone(a1))
    || (v12 = v11 + 16, OZObjectManipulator::isInObjectList((uint64_t)(v11 + 16), (uint64_t)a4)))
  {
    {
      OZChannelBase::setRangeName((OZChannelBase *)a1, a3);
      OZTransformNode::calcHashForState(a1, a2, a3, a4, a5);
      return;
    }
LABEL_8:
    __cxa_bad_cast();
  }
  if (!v13)
    goto LABEL_8;
  v14 = v13;
  v28 = *(__n128 *)PCHashWriteStream::getHash(v13)->i8;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v24, (const OZRenderParams *)a3);
  v22 = 0uLL;
  v23 = 0;
  v21 = *(CMTime *)&a3->var0;
  OZImageElement::globalToFootageTime(a1, &v21, (uint64_t)&v22);
  v24 = v22;
  v26 = 0;
  v27 = 0;
  v25 = v23;
  OZObjectManipulator::getHashForState(v12, a2, (OZRenderParams *)&v24, a4, &v20);
  PCHash128::operator+=((int *)&v28, (int *)&v20);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v14 + 40))(v14);
  v15 = (uint64_t *)operator new(0x18uLL);
  v15[1] = (uint64_t)a4;
  v15[2] = (uint64_t)v12;
  v16 = *a4;
  *v15 = (uint64_t)*a4;
  v16[1] = (uint64_t)v15;
  *a4 = v15;
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  OZTransformNode::calcHashForState(a1, a2, a3, a4, a5);
  v17 = *a4;
  v18 = **a4;
  *(_QWORD *)(v18 + 8) = (*a4)[1];
  *(_QWORD *)v17[1] = v18;
  a4[2] = (uint64_t *)((char *)a4[2] - 1);
  operator delete(v17);
  Hash = PCHashWriteStream::getHash(v14);
  PCHash128::operator+=((int *)&v28, (int *)Hash);
  PCHashWriteStream::setHash((__n128 *)v14, &v28);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v24);
}

void sub_1B2E2A930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZImageElement::updatePropertiesFromFootage(OZImageElement *this, OZFootage *a2)
{
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  OZChannelBase *v14;
  OZChannelObjectRoot *v15;
  OZChannelObjectRoot *ValueAsInt;
  OZRetimingUtil *v17;
  int v18;
  OZChannel *v19;
  OZChannelBase *v20;
  const CMTime *v21;
  OZRetimingUtil *v22;
  uint64_t v23;
  const CMTime *v24;
  OZChannelFolder *v25;
  __int32 *v26;
  __int32 *i;
  OZRetimingUtil *v28;
  uint64_t v29;
  const CMTime *v30;
  BOOL v31;
  const PCString *v32;
  _BYTE *Footage;
  _BYTE *v34;
  char v35;
  __n128 v37;
  double v38;
  CMTime v39;
  CMTime v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  char v62;
  CGColorSpace *v63;
  CGColorSpace *v64;
  __int16 v65;
  uint64_t v66;
  char v67;
  int v68;
  char v69;
  uint64_t v70;
  __int128 v71;
  OZRenderState v72;

  OZImageElement::updateLayerChannel(this, 1);
  (*(void (**)(OZRenderState *__return_ptr, OZFootage *))(*(_QWORD *)a2 + 1232))(&v72, a2);
  PCURL::operator=((const void **)this + 3771, (const __CFURL **)&v72);
  PCURL::~PCURL((PCURL *)&v72);
  (*(void (**)(OZRenderState *__return_ptr, OZImageElement *))(*(_QWORD *)this + 1128))(&v72, this);
  *((_OWORD *)this + 1886) = *(_OWORD *)&v72.var1;
  *((_QWORD *)this + 3774) = *(_QWORD *)&v72.var3;
  if (OZImageElement::isInputSource(this))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26584), 0x1000000000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27288), 0x1000000000, 1);
  }
  OZRenderState::OZRenderState(&v72);
  v42 = xmmword_1B30503B0;
  v43 = 0x3FF0000000000000;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0x3FF0000000000000;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v54 = 0;
  v52 = 0uLL;
  v51 = 0x3FF0000000000000;
  v53 = 0;
  v55 = *MEMORY[0x1E0CA2E68];
  v56 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0x100000000;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 768;
  v66 = 0x408F400000000000;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  v71 = _Q0;
  *(_QWORD *)((char *)&v52 + 4) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22312), MEMORY[0x1E0CA2E68], 0.0);
  v41 = 0;
  (*(void (**)(OZFootage *, char *, uint64_t *, OZRenderState *, __int128 *))(*(_QWORD *)a2 + 1576))(a2, (char *)&v41 + 4, &v41, &v72, &v42);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), (const CMTime *)&v72, 0.0);
  v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), (const CMTime *)&v72, 0.0);
  v12 = v11;
  if (OZImageElement::isDropZone(this) && (v10 == 1.0 || v12 == 1.0))
  {
    OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E0CA2E68], *((float *)&v41 + 1), 0);
    OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E0CA2E68], *(float *)&v41, 0);
  }
  v13 = *((_DWORD *)this + 4684);
  if (v13 > 2)
  {
    if (v13 == 4)
    {
      v25 = (OZChannelFolder *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
      if (OZChannelFolder::testFoldFlag(v25, 0x4000))
      {
        v26 = (__int32 *)*((_QWORD *)this + 133);
        for (i = (__int32 *)*((_QWORD *)this + 132); i != v26; ++i)
        {
          if (!OZScene::getNode(*((OZScene **)this + 121), *i))
            OZSceneNode::removeLinkedID(this, *i);
        }
      }
    }
    else if (v13 == 3)
    {
      v22 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
      v23 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v23 + 336), &v37);
      OZRetimingUtil::FixLoadedRetimingState(v22, (OZChannelObjectRoot *)&v37, v24);
    }
  }
  else
  {
    v14 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
    OZRetimingUtil::SetDefaultRetimingState(v14, v15);
    ValueAsInt = (OZChannelObjectRoot *)OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 3960), MEMORY[0x1E0CA2E68], 0.0);
    v17 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
    OZRetimingUtil::SetEndCondition(v17, ValueAsInt);
    v18 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 4216), MEMORY[0x1E0CA2E68], 0.0);
    v19 = (OZChannel *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
    OZRetimingUtil::SetReverse(v19, (OZChannelObjectRoot *)(v18 != 0));
    if (((_DWORD)ValueAsInt - 1) < 3)
    {
      v20 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
      (*(void (**)(__n128 *__return_ptr, OZFootage *))(*(_QWORD *)a2 + 1128))(&v37, a2);
      v40 = v39;
      OZRetimingUtil::SetLoopOffset(v20, &v40, v21);
    }
    v38 = *((float *)&v41 + 1);
    *(double *)&v39.value = *(float *)&v41;
    v37.n128_f64[0] = 0.0 - (*((float *)&v41 + 1) * 0.5 + 0.0);
    v37.n128_f64[1] = 0.0 - (*(float *)&v41 * 0.5 + 0.0);
    (*(void (**)(OZImageElement *, __n128 *))(*(_QWORD *)this + 2264))(this, &v37);
  }
  v28 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
  v29 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v29 + 336), &v37);
  OZRetimingUtil::FixLoopOffset(v28, (OZChannelObjectRoot *)&v37, v30);
  if (*((_BYTE *)this + 30145))
  {
    OZImageElement::getRetimingHash(this);
    *(__n128 *)((char *)this + 30148) = v37;
  }
  v31 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this)
     && *(_QWORD *)((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this) + 1584)
     && *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this) + 1584)
                 + 160) != 0;
  if (OZImageElement::isDropZone(this))
  {
    Footage = OZImageElement::getFootage(this);
    v34 = Footage;
    if (Footage)
    {
      if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)Footage + 1432))(Footage) & 1) != 0
        || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v34 + 1616))(v34)
        && OZImageElement::isBackgroundDropZone(this))
      {
        if (v34[1540])
          v35 = 1;
        else
          v35 = v31;
        if ((v35 & 1) == 0)
        {
          if (*((_DWORD *)this + 4684) > 4u)
            OZImageElement::clearDropZoneCallback(this);
          else
            OZImageElement::setDropZonePlaceholder(this);
        }
      }
    }
  }
  OZChannelBase::setRangeName((OZChannelBase *)this, v32);
  OZImageElement::showHideDropZoneChannels(this, 1);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v64);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v63);
}

void sub_1B2E2AEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CGColorSpace *a42)
{
  CGColorSpace **v42;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a42);
  PCCFRef<CGColorSpace *>::~PCCFRef(v42);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::isInputSource(OZImageElement *this)
{
  uint64_t result;
  OZChannel *v3;

  result = OZImageElement::isDropZone(this);
  if ((_DWORD)result)
  {
    v3 = (OZChannel *)((char *)this + 23432);
    if (OZChannel::getValueAsInt(v3, MEMORY[0x1E0CA2E68], 0.0) == 3)
    {
      return 1;
    }
    else
    {
      result = OZChannel::getValueAsInt(v3, MEMORY[0x1E0CA2E68], 0.0);
      if ((_DWORD)result != 1)
        return OZChannel::getValueAsInt(v3, MEMORY[0x1E0CA2E68], 0.0) == 2;
    }
  }
  return result;
}

BOOL OZImageElement::isBackgroundDropZone(OZImageElement *this)
{
  _BOOL8 result;

  result = OZImageElement::isDropZone(this);
  if ((_DWORD)result)
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E0CA2E68], 0.0) == 0;
  return result;
}

__n128 OZImageElement::getNaturalDuration@<Q0>(OZImageElement *this@<X0>, uint64_t a2@<X8>)
{
  void *Footage;
  __n128 result;
  uint64_t v5;

  Footage = OZImageElement::getFootage(this);
  if (Footage)
  {
    (*(void (**)(void *))(*(_QWORD *)Footage + 1648))(Footage);
  }
  else
  {
    v5 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  }
  return result;
}

__n128 `non-virtual thunk to'OZImageElement::getNaturalDuration@<Q0>(OZImageElement *this@<X0>, uint64_t a2@<X8>)
{
  void *Footage;
  __n128 result;
  uint64_t v5;

  Footage = OZImageElement::getFootage((OZImageElement *)((char *)this - 16));
  if (Footage)
  {
    (*(void (**)(void *))(*(_QWORD *)Footage + 1648))(Footage);
  }
  else
  {
    v5 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  }
  return result;
}

uint64_t OZImageElement::getNaturalDurationFlags(OZImageElement *this)
{
  void *Footage;
  int v3;
  OZRetimingUtil *v4;
  OZChannelObjectRoot *v5;

  Footage = OZImageElement::getFootage(this);
  if (!Footage)
    return 6;
  v3 = (*(uint64_t (**)(void *))(*(_QWORD *)Footage + 1656))(Footage);
  v4 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 640))(this);
  return OZRetimingUtil::GetRetimeNaturalDurationFlags(v4, v5) | v3;
}

uint64_t `non-virtual thunk to'OZImageElement::getNaturalDurationFlags(OZImageElement *this)
{
  return OZImageElement::getNaturalDurationFlags((OZImageElement *)((char *)this - 16));
}

BOOL OZImageElement::evaluateAlwaysCrop(OZImageElement *this, const OZRenderParams *a2)
{
  _BOOL8 result;
  float64x2_t v10[2];
  double v11[2];
  float64x2_t v12;

  result = OZImageElement::isBackgroundDropZone(this);
  if ((_DWORD)result)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E0CA2E68], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E0CA2E68], 0.0))
    {
      return 0;
    }
    else
    {
      v11[0] = 0.0;
      v11[1] = 0.0;
      __asm { FMOV            V0.2D, #-1.0 }
      v12 = _Q0;
      v10[0] = 0uLL;
      v10[1] = _Q0;
      (*(void (**)(OZImageElement *, double *, const OZRenderParams *))(*(_QWORD *)this + 1488))(this, v11, a2);
      OZImageElement::getDropZoneSourceBounds(this, v10, a2, 0);
      return !PCRect<double>::contains(v11, v10[0].f64);
    }
  }
  return result;
}

BOOL OZImageElement::isPassthroughPlaceholder(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t OZImageElement::alwaysCrop(_BYTE *a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = a1 + 30250;
  if (a1[30251])
    return *v1 != 0;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 2328))(a1);
  *v1 = result;
  v1[1] = 1;
  return result;
}

BOOL OZImageElement::isDropZoneReplaced(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 171, MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t OZImageElement::getDropZoneTypeValue(OZImageElement *this)
{
  if (OZImageElement::isDropZone(this))
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E0CA2E68], 0.0);
  else
    return 0xFFFFFFFFLL;
}

uint64_t OZImageElement::updateDropZoneTypeChannels(OZImageElement *this, char a2)
{
  unsigned int DropZoneTypeValue;
  OZChannel *v5;
  double v6;
  double v7;
  const CMTime *v8;
  unsigned int v9;
  double v10;
  unsigned int DropTypeIndexForDropZoneTypeValue;
  unsigned int v12;

  DropZoneTypeValue = OZImageElement::getDropZoneTypeValue(this);
  v5 = (OZChannel *)((char *)this + 23688);
  if (DropZoneTypeValue == -1)
  {
    v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v10 = 0.0;
    OZChannel::setValue(v5, MEMORY[0x1E0CA2E68], 0.0, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 23944), v8, 0.0, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 24200), v8, 0.0, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 24456), v8, 0.0, a2);
    v6 = 0.0;
  }
  else
  {
    v6 = 0.0;
    if (DropZoneTypeValue)
      v7 = 0.0;
    else
      v7 = 1.0;
    v8 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::setValue(v5, MEMORY[0x1E0CA2E68], v7, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 23944), v8, v7, a2);
    if (DropZoneTypeValue == 3)
      v9 = 2;
    else
      v9 = DropZoneTypeValue == 0;
    v10 = (double)v9;
    if (DropZoneTypeValue == 3)
      v6 = 1.0;
    OZChannel::setValue((OZChannel *)((char *)this + 24200), v8, v10, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 24456), v8, v6, a2);
  }
  OZChannel::setValue((OZChannel *)((char *)this + 24712), v8, v10, a2);
  OZChannel::setValue((OZChannel *)((char *)this + 24968), v8, v6, a2);
  DropTypeIndexForDropZoneTypeValue = OZImageElement::getDropTypeIndexForDropZoneTypeValue(this, (OZImageElement *)((char *)this + 25224), DropZoneTypeValue);
  OZChannel::setValue((OZChannel *)((char *)this + 25224), v8, (double)DropTypeIndexForDropZoneTypeValue, a2);
  v12 = DropZoneTypeValue == 1;
  if (DropZoneTypeValue == 2)
    v12 = 2;
  return OZChannel::setValue((OZChannel *)((char *)this + 25480), v8, (double)v12, a2);
}

uint64_t OZImageElement::getDropTypeIndexForDropZoneTypeValue(OZImageElement *this, const OZChannelEnum *a2, unsigned int a3)
{
  if (a3 == -1)
    return 0;
  if ((OZImageElement *)((char *)this + 23688) == a2 || (OZImageElement *)((char *)this + 23944) == a2)
    return a3 == 0;
  if ((OZImageElement *)((char *)this + 24200) == a2 || (OZImageElement *)((char *)this + 24712) == a2)
  {
    if (a3 == 3)
      return 2;
    else
      return a3 == 0;
  }
  if ((OZImageElement *)((char *)this + 24456) == a2 || (OZImageElement *)((char *)this + 24968) == a2)
    return a3 == 3;
  if ((OZImageElement *)((char *)this + 25224) == a2)
  {
    if (a3 < 3)
      return a3 + 1;
    else
      return 0;
  }
  else
  {
    if ((OZImageElement *)((char *)this + 25480) != a2)
      return 0;
    if (a3 == 2)
      return 2;
    else
      return a3 == 1;
  }
}

uint64_t OZImageElement::getDropZoneInputID(OZImageElement *this)
{
  return OZChannel::getValueAsUint((OZChannel *)((char *)this + 23128), MEMORY[0x1E0CA2E68], 0.0);
}

BOOL OZImageElement::useDisplayAspect(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23280), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

CGColorSpace **OZImageElement::resetFitMode(OZImageElement *this)
{
  void *Footage;
  double v3;

  Footage = OZImageElement::getFootage(this);
  if (Footage)
    (*(void (**)(void *))(*(_QWORD *)Footage + 1368))(Footage);
  else
    v3 = 1.0;
  return OZImageElement::resetFitMode(this, v3);
}

uint64_t OZImageElement::resetFitModeToSceneDims(OZImageElement *this, double a2, double a3)
{
  uint64_t result;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  const CMTime *v11;
  void (**v12)(OZSceneSettings *__hidden);
  int v13;
  int v14;
  double v15;
  CGColorSpace *v16;
  PCString v17;

  result = OZImageElement::isDropZone(this);
  if ((_DWORD)result)
  {
    v7 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
    if (v7)
    {
      OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v12, (const OZSceneSettings *)(v7 + 336));
      v8 = (float)v13;
      v9 = (float)v14;
      v10 = v15;
      v12 = &off_1E658F368;
      PCString::~PCString(&v17);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
    }
    else
    {
      v10 = 1.0;
      v9 = 486.0;
      v8 = 720.0;
    }
    if ((OZImageElement::isInputSource(this) & 1) != 0
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E0CA2E68], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E0CA2E68], 0.0))
    {
      v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E0CA2E68], v8 * v10, 1);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), v11, 1.0 / v10, 1.0, 1);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), v11, 0.0))
        OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E0CA2E68], v9, 1);
      return (uint64_t)OZImageElement::resetFitMode(this);
    }
    else
    {
      result = OZImageElement::isBackgroundDropZone(this);
      if ((_DWORD)result)
      {
        result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 23280), MEMORY[0x1E0CA2E68], 0.0);
        if (a3 != a2)
        {
          if ((_DWORD)result)
            return (uint64_t)OZImageElement::resetFitMode(this, a3 / a2);
        }
      }
    }
  }
  return result;
}

void OZImageElement::getIconName(OZImageElement *this@<X0>, PCURL *a2@<X8>)
{
  _QWORD *Footage;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  PMMediaManager *v7;
  PMMediaManager *Instance;
  uint64_t Reader;
  const __CFString *v10;
  const __CFURL *v11;

  Footage = OZImageElement::getFootage(this);
  if (!Footage)
    goto LABEL_3;
  v4 = Footage;
  if (((*(uint64_t (**)(_QWORD *))(*Footage + 1432))(Footage) & 1) != 0)
    goto LABEL_3;
  v5 = (uint64_t *)v4[1009];
  if (*((_BYTE *)v5 + 1240)
    || ((v6 = *v5) == 0 || (*(unsigned int (**)(void))(v6 + 336))())
    && (*(unsigned int (**)(_QWORD *))(*v4 + 1376))(v4) >= 2)
  {
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconColor-ImageSequence"));
    return;
  }
  v7 = (PMMediaManager *)(*(_QWORD *(**)(const __CFURL **__return_ptr, _QWORD *))(*v4 + 1232))(&v11, v4);
  Instance = (PMMediaManager *)PMMediaManager::getInstance(v7);
  Reader = PMMediaManager::findReader(Instance, &v11);
  if (!Reader)
  {
    PCURL::~PCURL((PCURL *)&v11);
LABEL_3:
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconColor-MissingObject"));
    return;
  }
  if ((*(unsigned int (**)(void))(Reader + 232))())
    v10 = CFSTR("M_LayersList_ObjectIconColor-Movie");
  else
    v10 = CFSTR("M_LayersList_ObjectIconColor-Image");
  PCURL::PCURL(a2, v10);
  PCURL::~PCURL((PCURL *)&v11);
}

void sub_1B2E2B8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZImageElement::getIconNameBW(OZImageElement *this@<X0>, PCURL *a2@<X8>)
{
  _QWORD *Footage;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  PMMediaManager *v7;
  PMMediaManager *Instance;
  uint64_t Reader;
  const __CFString *v10;
  const __CFURL *v11;

  Footage = OZImageElement::getFootage(this);
  if (!Footage)
    goto LABEL_3;
  v4 = Footage;
  if (((*(uint64_t (**)(_QWORD *))(*Footage + 1432))(Footage) & 1) != 0)
    goto LABEL_3;
  v5 = (uint64_t *)v4[1009];
  if (*((_BYTE *)v5 + 1240)
    || ((v6 = *v5) == 0 || (*(unsigned int (**)(void))(v6 + 336))())
    && (*(unsigned int (**)(_QWORD *))(*v4 + 1376))(v4) >= 2)
  {
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconGrey-ImageSequence"));
    return;
  }
  v7 = (PMMediaManager *)(*(_QWORD *(**)(const __CFURL **__return_ptr, _QWORD *))(*v4 + 1232))(&v11, v4);
  Instance = (PMMediaManager *)PMMediaManager::getInstance(v7);
  Reader = PMMediaManager::findReader(Instance, &v11);
  if (!Reader)
  {
    PCURL::~PCURL((PCURL *)&v11);
LABEL_3:
    PCURL::PCURL(a2, CFSTR("M_LayersList_ObjectIconGrey-MissingObject"));
    return;
  }
  if ((*(unsigned int (**)(void))(Reader + 232))())
    v10 = CFSTR("M_LayersList_ObjectIconGrey-Movie");
  else
    v10 = CFSTR("M_LayersList_ObjectIconGrey-Image");
  PCURL::PCURL(a2, v10);
  PCURL::~PCURL((PCURL *)&v11);
}

void sub_1B2E2B9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::getIconID(OZImageElement *this)
{
  _QWORD *Footage;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  PMMediaManager *v7;
  PMMediaManager *Instance;
  uint64_t Reader;
  const __CFURL *v10;

  Footage = OZImageElement::getFootage(this);
  if (!Footage)
    return 18;
  v2 = Footage;
  if (((*(uint64_t (**)(_QWORD *))(*Footage + 1432))(Footage) & 1) != 0)
    return 18;
  v4 = (uint64_t *)v2[1009];
  if (*((_BYTE *)v4 + 1240))
    return 5;
  v6 = *v4;
  if ((!v6 || (*(unsigned int (**)(void))(v6 + 336))())
    && (*(unsigned int (**)(_QWORD *))(*v2 + 1376))(v2) > 1)
  {
    return 5;
  }
  v7 = (PMMediaManager *)(*(_QWORD *(**)(const __CFURL **__return_ptr, _QWORD *))(*v2 + 1232))(&v10, v2);
  Instance = (PMMediaManager *)PMMediaManager::getInstance(v7);
  Reader = PMMediaManager::findReader(Instance, &v10);
  if (!Reader)
  {
    PCURL::~PCURL((PCURL *)&v10);
    return 18;
  }
  if ((*(unsigned int (**)(void))(Reader + 232))())
    v3 = 4;
  else
    v3 = 6;
  PCURL::~PCURL((PCURL *)&v10);
  return v3;
}

void sub_1B2E2BAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void *OZImageElement::getInput(OZImageElement *this)
{
  void *result;

  result = OZImageElement::getFootage(this);
  if (!result)
    return (void *)OZSceneNode::getSuccessor(this);
  return result;
}

BOOL OZImageElement::canCrop(OZElement *this)
{
  return (OZElement::canCrop(this) & 1) != 0 || OZImageElement::isDropZone((OZImageElement *)this);
}

double OZImageElement::getPixelAspectRatio(OZImageElement *this)
{
  const void *v2;
  void *v3;
  double result;
  _BOOL4 isDropZone;

  v2 = (const void *)(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 2296))(this);
  if (v2
  {
    (*(void (**)(void *))(*(_QWORD *)v3 + 1368))(v3);
  }
  else
  {
    isDropZone = OZImageElement::isDropZone(this);
    result = 1.0;
    if (isDropZone)
      return *(double *)(*((_QWORD *)this + 121) + 384);
  }
  return result;
}

BOOL OZImageElement::variesOverTime(OZImageElement *this)
{
  void *Footage;

  Footage = OZImageElement::getFootage(this);
  if ((OZElement::variesOverTime((OZElement *)this) & 1) != 0)
    return 1;
  if (Footage)
    return (*(unsigned int (**)(void *))(*(_QWORD *)Footage + 1376))(Footage) > 1;
  return 0;
}

void OZImageElement::getRetimingHash(OZImageElement *this)
{
  _QWORD *v1;
  _OWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int32x4_t v9;
  int8x8_t v10[521];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v10[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v10);
  PCHashWriteStream::reset((uint64_t)v10);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v1[2581] + 16))(v1 + 2581, v10, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(v1[2581] + 24))(v1 + 2581, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v1[2600] + 16))(v1 + 2600, v10, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(v1[2600] + 24))(v1 + 2600, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v1[2619] + 16))(v1 + 2619, v10, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(v1[2619] + 24))(v1 + 2619, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v1[2651] + 16))(v1 + 2651, v10, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(v1[2651] + 24))(v1 + 2651, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v1[2689] + 16))(v1 + 2689, v10, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(v1[2689] + 24))(v1 + 2689, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v1[2721] + 16))(v1 + 2721, v10, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(v1[2721] + 24))(v1 + 2721, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v1[2753] + 16))(v1 + 2753, v10, 0);
  (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(v1[2753] + 24))(v1 + 2753, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
  v4 = v1 + 125;
  v5 = (_QWORD *)v1[126];
  if (v5 != v1 + 125)
  {
    do
    {
      v6 = *(_QWORD *)(v5[2] + 8);
      v9 = (int32x4_t)xmmword_1B355DB20;
      if (OZFactory::isKindOfClass(v6, &v9))
      {
        v7 = (_QWORD *)v5[2];
        v8 = v7[6];
        v7 += 6;
        (*(void (**)(_QWORD *, int8x8_t *, _QWORD))(v8 + 16))(v7, v10, 0);
        (*(void (**)(_QWORD *, int8x8_t *, _QWORD, uint64_t, uint64_t))(*v7 + 24))(v7, v10, 0, 1, 1);
        (*(void (**)(int8x8_t *))(*(_QWORD *)v10 + 24))(v10);
      }
      v5 = (_QWORD *)v5[1];
    }
    while (v5 != v4);
  }
  *v3 = *(_OWORD *)PCHashWriteStream::getHash(v10)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v10);
}

void sub_1B2E2BF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::getMatteBuffer(OZImageElement *this)
{
  return *((_QWORD *)this + 3785);
}

uint64_t OZImageElement::shouldRotateMatteBuffer(OZImageElement *this)
{
  return *((unsigned __int8 *)this + 30288);
}

_QWORD *HGLazyPDFBitmapLoaderCache::Instance(HGLazyPDFBitmapLoaderCache *this)
{
  unsigned __int8 v1;
  _QWORD *v2;

  if ((v1 & 1) == 0
  {
    pthread_key_create((pthread_key_t *)&HGLazyPDFBitmapLoaderCache::Instance(void)::perThreadInstance, (void (__cdecl *)(void *))PCThreadSpecific<HGLazyPDFBitmapLoaderCache>::destroy);
  }
  v2 = pthread_getspecific(HGLazyPDFBitmapLoaderCache::Instance(void)::perThreadInstance);
  if (!v2)
  {
    v2 = (_QWORD *)operator new();
    v2[2] = 0;
    v2[1] = 0;
    *v2 = v2 + 1;
    pthread_setspecific(HGLazyPDFBitmapLoaderCache::Instance(void)::perThreadInstance, v2);
  }
  return v2;
}

void sub_1B2E2C078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HGLazyPDFBitmapLoaderCache::addNode(uint64_t **a1, _DWORD *a2, uint64_t *a3)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t result;
  _DWORD *v7;

  v7 = a2;
  v4 = std::__tree<std::__value_type<PCHash128,ProShade::Snippet *>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,ProShade::Snippet *>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,ProShade::Snippet *>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(a1, (const PCHash128 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  v5 = *((_QWORD *)v4 + 6);
  result = *a3;
  if (v5 != *a3)
  {
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      result = *a3;
    }
    *((_QWORD *)v4 + 6) = result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void OZImageElementFinalizer::~OZImageElementFinalizer(OZImageElementFinalizer *this)
{
  _QWORD *v1;

  v1 = HGLazyPDFBitmapLoaderCache::Instance(this);
  std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy((uint64_t)v1, (_QWORD *)v1[1]);
  *v1 = v1 + 1;
  v1[2] = 0;
  v1[1] = 0;
}

void OZPDFRender::OZPDFRender(OZPDFRender *this, OZImageElement *a2, const OZRenderParams *a3)
{
  *((_QWORD *)this + 182) = &off_1E65EB048;
  *((_QWORD *)this + 183) = 0;
  *((_BYTE *)this + 1472) = 1;
  LiImageSource::LiImageSource((LiImageSource *)((char *)this + 1440), (uint64_t *)&off_1E658DCF8);
  *((_QWORD *)this + 180) = &unk_1E658DC00;
  *((_QWORD *)this + 182) = &unk_1E658DCC8;
  *(_QWORD *)this = &off_1E658DB08;
  *((_QWORD *)this + 1) = a2;
  OZRenderParams::OZRenderParams((OZPDFRender *)((char *)this + 16), a3);
}

void sub_1B2E2C1EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZChannelBase *v2;
  uint64_t v3;

  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E658DCF8);
  *(_QWORD *)(v1 + 1456) = v3 + 16;
  *(_BYTE *)(v1 + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1464));
  _Unwind_Resume(a1);
}

uint64_t OZPDFRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 1488))(*(_QWORD *)(a1 + 8), a3, a1 + 16);
  return 1;
}

uint64_t `virtual thunk to'OZPDFRender::getBoundary(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 48) + 8) + 1488))(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 48) + 8), a3, (uint64_t)a1 + *(_QWORD *)(*a1 - 48) + 16);
  return 1;
}

uint64_t OZPDFRender::filteredEdges(OZPDFRender *this)
{
  return 0;
}

uint64_t `virtual thunk to'OZPDFRender::filteredEdges(OZPDFRender *this)
{
  return 0;
}

uint64_t OZPDFRender::pixelTransformSupport(OZImageElement **this, const LiRenderParameters *a2)
{
  OZFootage *Footage;

  if (*((_BYTE *)a2 + 144))
    return 0;
  Footage = (OZFootage *)OZImageElement::getFootage(this[1]);
  if (Footage && OZFootage::isRenderedAtFixedResolution(Footage))
    return 0;
  else
    return 6;
}

uint64_t `virtual thunk to'OZPDFRender::pixelTransformSupport(OZPDFRender *this, const LiRenderParameters *a2)
{
  return OZPDFRender::pixelTransformSupport((OZImageElement **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)), a2);
}

void OZPDFRender::fixPixelTransform(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  OZFootage *Footage;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v27;
  double *v28;
  uint64_t i;
  _OWORD *v30;
  __int128 v31;
  int v32;
  double v33;
  int v34;
  HGTransformUtils *v35;
  uint64_t v36;
  uint64_t v37;
  HGTransformUtils *v38;
  float v39;
  uint64_t ROI;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  char v49;
  char v50;
  int v51;
  __int128 v52;
  __n128 v53;
  __int128 v54;
  HGTransform *v55;
  uint64_t v56;
  float64x2_t v57;
  uint64_t v58;
  _BYTE v59[24];
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  float64x2_t v68;
  double v69;
  double v70;
  _BYTE v71[32];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t *v78[11];
  _QWORD *v79;
  __n128 v80;
  __int128 v81;
  HGRect v82;

  LiImageSource::fixPixelTransform(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)a2, a3, a4);
  if (!*(_BYTE *)(a4 + 144))
  {
    Footage = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(a1 + 8));
    v80 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v81 = _Q0;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = a1 + 16;
    (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)v14 + 1480))(v14, &v80, v15);
    if (Footage)
    {
      if (OZFootage::isRenderedAtFixedResolution(Footage))
      {
        *(_DWORD *)v59 = 0;
        LODWORD(v57.f64[0]) = 0;
        *(_OWORD *)v71 = *(_OWORD *)v15;
        *(_QWORD *)&v71[16] = *(_QWORD *)(v15 + 16);
        OZFootage::getFixedResolution(Footage, (unsigned int *)v59, (unsigned int *)&v57, (const CMTime *)v71);
        LODWORD(v16) = *(_DWORD *)v59;
        PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, (double)v16 / *(double *)&v81, (double)__PAIR64__(DWORD1(v81), LODWORD(v57.f64[0])) / *((double *)&v81 + 1), 1.0);
        return;
      }
      LiImagePolygon::LiImagePolygon((LiImagePolygon *)v78);
      LiImagePolygon::set((uint64_t)v78, v80.n128_f64, 0);
      v17 = *(_OWORD *)(a3 + 80);
      v74 = *(_OWORD *)(a3 + 64);
      v75 = v17;
      v18 = *(_OWORD *)(a3 + 112);
      v76 = *(_OWORD *)(a3 + 96);
      v77 = v18;
      v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v71 = *(_OWORD *)a3;
      *(_OWORD *)&v71[16] = v19;
      v20 = *(_OWORD *)(a3 + 48);
      v72 = *(_OWORD *)(a3 + 32);
      v73 = v20;
      LiAgent::getROI(a2, (__n128 *)v59);
      v21.i64[0] = *(int *)v59;
      v21.i64[1] = *(int *)&v59[4];
      v68 = vcvtq_f64_s64(v21);
      v69 = (double)*(int *)&v59[8];
      v70 = (double)*(int *)&v59[12];
      if ((*(_DWORD *)&v59[8] & 0x80000000) == 0 && (*(_DWORD *)&v59[12] & 0x80000000) == 0)
      {
        liTransformAndClip(v68.f64, (double *)a3, v78);
        v22 = v79[1] - *v79;
        if ((int)(v22 >> 5) < 1)
        {
          v27 = 2.22507386e-308;
          v25 = 2.22507386e-308;
        }
        else
        {
          v23 = 0;
          v24 = v22 & 0x1FFFFFFFE0;
          v25 = 2.22507386e-308;
          __asm { FMOV            V0.2D, #1.0 }
          v52 = _Q0;
          v27 = 2.22507386e-308;
          do
          {
            v28 = (double *)(*v79 + v23);
            *(_OWORD *)v59 = v52;
            *(_QWORD *)&v59[16] = 0x3FF0000000000000;
            v57 = 0uLL;
            v58 = 0;
            getScale((float64x2_t *)a3, v28, (double *)v59, (uint64_t)&v57, 0);
            if (v25 < v57.f64[0])
              v25 = v57.f64[0];
            if (v27 < v57.f64[1])
              v27 = v57.f64[1];
            v23 += 32;
          }
          while (v24 != v23);
        }
        if (*(_BYTE *)(a4 + 132))
          v32 = 2950;
        else
          v32 = 1950;
        v51 = v32;
        v33 = (double)v32;
        v34 = 9;
        while (1)
        {
          *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
          *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
          *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
          *(_QWORD *)a3 = 0x3FF0000000000000;
          *(_OWORD *)(a3 + 8) = 0u;
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 88) = 0u;
          *(_OWORD *)(a3 + 104) = 0u;
          PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v25, v27, 1.0);
          v67 = 0x3FF0000000000000;
          v64 = 0x3FF0000000000000;
          v61 = 0x3FF0000000000000;
          *(_QWORD *)v59 = 0x3FF0000000000000;
          *(_OWORD *)&v59[8] = 0u;
          v60 = 0u;
          v62 = 0u;
          v63 = 0u;
          v65 = 0u;
          v66 = 0u;
          if (!PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v59, (double *)a3, 0.0))
            goto LABEL_43;
          PCMatrix44Tmpl<double>::operator*((uint64_t)v71, (__int128 *)v59, (uint64_t)&v57);
          v53.n128_u64[0] = 0;
          LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)&v57, &v56);
          if (!v56)
            goto LABEL_43;
          PGHelium::convertPCMatrix44((__int128 *)&v57, &v55);
          (*(void (**)(HGTransform *))(*(_QWORD *)v55 + 184))(v55);
          (*(void (**)(HGTransform *))(*(_QWORD *)v55 + 168))(v55);
          LiAgent::getROI(a2, &v53);
          v35 = (HGTransformUtils *)HGRectMake4i(v53.n128_u32[0], v53.n128_u32[1], v53.n128_u32[2] + v53.n128_u32[0], v53.n128_u32[3] + v53.n128_u32[1]);
          v37 = v36;
          v38 = v55;
          v39 = HGTransformUtils::MinW(v35);
          *(_QWORD *)&v82.var0 = v37;
          ROI = HGTransformUtils::GetROI(v38, (unint64_t)v35, v82, 1.0, v39);
          v42 = v41;
          v53 = v80;
          v54 = v81;
          if (PCMatrix44Tmpl<double>::transformRect<double>((double *)a3, v53.n128_f64, (uint64_t)&v53))
          {
            v43 = HGRectMake4i((int)v53.n128_f64[0], (int)v53.n128_f64[1], (int)*(double *)&v54 + (int)v53.n128_f64[0], (int)*((double *)&v54 + 1) + (int)v53.n128_f64[1]);
            v45 = HGRectIntersection(ROI, v42, v43, v44);
            if (v46 - (int)v45 > v51)
            {
              v25 = v25 / ((double)(v46 - (int)v45) / v33);
              v48 = v47 - HIDWORD(v45);
LABEL_32:
              v49 = 0;
              if (v48 > v51)
                v27 = v27 / ((double)v48 / v33);
              goto LABEL_35;
            }
            v48 = v47 - HIDWORD(v45);
            if (v47 - HIDWORD(v45) > v51)
              goto LABEL_32;
          }
          v49 = 1;
LABEL_35:
          if (v55)
            (*(void (**)(HGTransform *))(*(_QWORD *)v55 + 24))(v55);
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
          if (v34)
            v50 = v49;
          else
            v50 = 1;
          --v34;
          if ((v50 & 1) != 0)
            goto LABEL_43;
        }
      }
      if (fabs(*((double *)&v77 + 1) + -1.0) >= 0.0000001)
      {
        v57 = 0uLL;
        v58 = 0;
        v67 = 0x3FF0000000000000;
        v64 = 0x3FF0000000000000;
        v61 = 0x3FF0000000000000;
        *(_QWORD *)v59 = 0x3FF0000000000000;
        *(_OWORD *)&v59[8] = 0u;
        v60 = 0u;
        v62 = 0u;
        v63 = 0u;
        v65 = 0u;
        v66 = 0u;
        perspectiveToAffine((float64x2_t *)a3, v57.f64, (double *)v59);
        if (v59 != (_BYTE *)a3)
        {
          for (i = 0; i != 128; i += 32)
          {
            v30 = (_OWORD *)(a3 + i);
            v31 = *(_OWORD *)&v59[i + 16];
            *v30 = *(_OWORD *)&v59[i];
            v30[1] = v31;
          }
        }
      }
      memset(v59, 0, sizeof(v59));
      v57 = 0uLL;
      v58 = 0;
      getScaleTranslate((float64x2_t *)a3, (uint64_t)v59, &v57);
      *(_QWORD *)&v59[16] = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, *(double *)v59, *(double *)&v59[8], 1.0);
LABEL_43:
      LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v78);
    }
  }
}

void sub_1B2E2C86C(_Unwind_Exception *a1)
{
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void `virtual thunk to'OZPDFRender::fixPixelTransform(_QWORD *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  OZPDFRender::fixPixelTransform((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2, a3, a4);
}

CGColorSpace **OZPDFRender::getHelium(OZPDFRender *this, LiAgent *a2)
{
  uint64_t v2;
  LiAgent *v3;
  LiAgent *v4;
  uint64_t v5;
  int32x2_t **v6;
  int32x2_t **v7;
  OZFootage *Footage;
  CGColorSpace *CGColorSpace;
  uint64_t RequestedColorDescription;
  CGColorSpace *v11;
  uint64_t v12;
  CGColorSpace *v13;
  int v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t HeliumRenderer;
  __int128 *v29;
  OZFootage *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t i;
  HGLazyPDFBitmapLoaderCache *Hash;
  _QWORD *v35;
  _QWORD *v36;
  int32x2_t *v37;
  CGColorSpace *v38;
  uint64_t v39;
  int32x2_t v40;
  int32x2_t *v41;
  OZFootage *v42;
  HGLazyPDFBitmapLoaderCache *isStill;
  uint64_t **v44;
  unsigned int v46[4];
  int32x2_t *v47;
  unsigned int v48[4];
  _QWORD v49[2];
  float64x2_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  FxColorDescription v59;
  CMTime v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = v2;
  v7 = v6;
  v64 = *MEMORY[0x1E0C80C00];
  Footage = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(v2 + 8));
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)v4 + 6) + 160));
  OZRenderParams::setWorkingColorSpace((FxColorDescription *)(v5 + 16), CGColorSpace);
  OZRenderParams::setBlendingGamma(v5 + 16, *(float *)(*((_QWORD *)v4 + 6) + 192));
  *v7 = 0;
  RequestedColorDescription = LiAgent::getRequestedColorDescription(v4);
  v11 = *(CGColorSpace **)RequestedColorDescription;
  v59._pcColorDesc._colorSpaceRef._obj = v11;
  if (v11)
    PCCFRefTraits<CGColorSpace *>::retain(v11);
  v12 = *(_QWORD *)(RequestedColorDescription + 8);
  v59._pcColorDesc._toneMapMethod._gain = *(float *)(RequestedColorDescription + 16);
  *(_QWORD *)&v59._pcColorDesc._dynamicRange = v12;
  v59._isPremultiplied = *(_BYTE *)(RequestedColorDescription + 24);
  if (!FxColorDescription::getCGColorSpace(&v59))
  {
    v13 = (CGColorSpace *)PCColorSpaceCache::cgsRGB(0);
    FxColorDescription::setCGColorSpace(&v59, v13);
  }
  FxColorDescription::setDynamicRange(&v59, 0);
  if (!Footage || !OZFootage::isRenderedAtFixedResolution(Footage))
  {
    v49[0] = 0;
    v49[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v50 = _Q0;
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v5 + 8) + 1480))(*(_QWORD *)(v5 + 8), v49, v5 + 16);
    v29 = (__int128 *)*((_QWORD *)v4 + 20);
    v55 = v29[4];
    v56 = v29[5];
    v57 = v29[6];
    v58 = v29[7];
    v51 = *v29;
    v52 = v29[1];
    v53 = v29[2];
    v54 = v29[3];
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v48);
    v47 = 0;
    v30 = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(v5 + 8));
    if (v30 && OZFootage::isStill(v30))
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v60);
      PCHashWriteStream::writeValue((int8x8_t *)&v60, *(const void **)(v5 + 8));
      OZRenderParams::getHashWithoutTime((_DWORD *)(v5 + 16), v46);
      PCHashWriteStream::writeValue((int8x8_t *)&v60, (const PCHash128 *)v46);
      FxHashColorDescription((int8x8_t *)&v60, &v59);
      PCHashWriteStream::writeValue((int8x8_t *)&v60, vcvtpd_s64_f64(v50.f64[0]));
      PCHashWriteStream::writeValue((int8x8_t *)&v60, vcvtpd_s64_f64(v50.f64[1]));
      v31 = 0;
      v32 = &v51;
      do
      {
        for (i = 0; i != 32; i += 8)
          PCHashWriteStream::writeValue((int8x8_t *)&v60, *(double *)((char *)v32 + i));
        ++v31;
        v32 += 2;
      }
      while (v31 != 4);
      Hash = (HGLazyPDFBitmapLoaderCache *)PCHashWriteStream::getHash((int8x8_t *)&v60);
      *(_OWORD *)v48 = *(_OWORD *)Hash;
      v35 = HGLazyPDFBitmapLoaderCache::Instance(Hash);
      v36 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)v35, (const PCHash128 *)v48);
      if (v35 + 1 != v36)
      {
        v37 = (int32x2_t *)v36[6];
        if (v37)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v37 + 16))(v36[6]);
          v47 = v37;
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v60);
LABEL_29:
          *v7 = v37;
          (*(void (**)(int32x2_t *))(*(_QWORD *)v37 + 16))(v37);
          (*(void (**)(int32x2_t *))(*(_QWORD *)v37 + 24))(v37);
          goto LABEL_30;
        }
      }
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v60);
    }
    v38 = (CGColorSpace *)FxColorDescription::getCGColorSpace(&v59);
    v37 = (int32x2_t *)HGObject::operator new(0x890uLL);
    HGLazyPDFBitmapLoader::HGLazyPDFBitmapLoader((HGLazyPDFBitmapLoader *)v37, *(OZImageElement **)(v5 + 8), (const OZRenderParams *)(v5 + 16), v38);
    v39 = 0;
    v40 = vshr_n_s32(vadd_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v50))), (int32x2_t)0x100000001), 1uLL);
    v37[61] = vneg_s32(v40);
    v37[62] = v40;
    do
    {
      v41 = &v37[v39];
      *(_OWORD *)v41[66].i8 = *(__int128 *)((char *)&v51 + v39 * 8);
      *(_OWORD *)v41[68].i8 = *(__int128 *)((char *)&v51 + v39 * 8 + 16);
      v39 += 4;
    }
    while (v39 != 16);
    v47 = v37;
    (*(void (**)(int32x2_t *))(*(_QWORD *)v37 + 16))(v37);
    v42 = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(v5 + 8));
    if (v42)
    {
      isStill = (HGLazyPDFBitmapLoaderCache *)OZFootage::isStill(v42);
      if ((_DWORD)isStill)
      {
        v44 = (uint64_t **)HGLazyPDFBitmapLoaderCache::Instance(isStill);
        HGLazyPDFBitmapLoaderCache::addNode(v44, v48, (uint64_t *)&v47);
      }
    }
    (*(void (**)(int32x2_t *))(*(_QWORD *)v37 + 24))(v37);
    goto LABEL_29;
  }
  v48[0] = 0;
  v46[0] = 0;
  v60 = *(CMTime *)(v5 + 16);
  OZFootage::getFixedResolution(Footage, v48, v46, &v60);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v60, (const OZRenderParams *)(v5 + 16));
  if (*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)(v5 + 16)) + 8))
    v14 = 2;
  else
    v14 = 1;
  OZRenderParams::setImageType((uint64_t)&v60, v14);
  v61 = 1;
  v62 = 0u;
  v63 = 0u;
  OZRenderParams::setWidth((OZRenderParams *)&v60, v48[0]);
  OZRenderParams::setHeight((OZRenderParams *)&v60, v46[0]);
  v15 = (__int128 *)*((_QWORD *)v4 + 20);
  v16 = v15[3];
  v18 = *v15;
  v17 = v15[1];
  v53 = v15[2];
  v54 = v16;
  v51 = v18;
  v52 = v17;
  v19 = v15[7];
  v21 = v15[4];
  v20 = v15[5];
  v57 = v15[6];
  v58 = v19;
  v55 = v21;
  v56 = v20;
  v22 = *(_QWORD *)(v5 + 8);
  HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)v4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, CMTime *, uint64_t, FxColorDescription *, __int128 *))(*(_QWORD *)v22 + 2280))(v49, v22, &v60, HeliumRenderer, &v59, &v51);
  if (v49[0])
    *v7 = (int32x2_t *)v49[0];
  LiAgent::setPixelTransform((uint64_t)v4, (uint64_t)&v51);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v60);
LABEL_30:
  LiAgent::setActualColorDescription((CGColorSpace **)v4, &v59);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v59._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2E2CDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CGColorSpace *a35)
{
  _QWORD *v35;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a35);
  if (*v35)
    (*(void (**)(_QWORD))(*(_QWORD *)*v35 + 24))(*v35);
  _Unwind_Resume(a1);
}

CGColorSpace **`virtual thunk to'OZPDFRender::getHelium(OZPDFRender *this, LiAgent *a2)
{
  return OZPDFRender::getHelium((OZPDFRender *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 184)), a2);
}

unint64_t OZPDFRender::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  OZFootage *Footage;
  OZFootage *v5;
  int v6;
  unint64_t v7;
  CMTime v9[15];
  char v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13[2];

  Footage = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(a1 + 8));
  if (!Footage)
    return OZImageElement::estimateRenderMemory(*(OZImageElement **)(a1 + 8), a2, (unsigned int *)(a1 + 16));
  v5 = Footage;
  if (!OZFootage::isRenderedAtFixedResolution(Footage))
    return OZImageElement::estimateRenderMemory(*(OZImageElement **)(a1 + 8), a2, (unsigned int *)(a1 + 16));
  *(_QWORD *)v13 = 0;
  v9[0] = *(CMTime *)(a1 + 16);
  OZFootage::getFixedResolution(v5, &v13[1], v13, v9);
  OZRenderParams::OZRenderParams((OZRenderParams *)v9, (const OZRenderParams *)(a1 + 16));
  if (*(_DWORD *)(*(_QWORD *)HGRenderJob::GetRenderNodeList((HGRenderJob *)(a1 + 16)) + 8))
    v6 = 2;
  else
    v6 = 1;
  OZRenderParams::setImageType((uint64_t)v9, v6);
  v10 = 1;
  v11 = 0u;
  v12 = 0u;
  OZRenderParams::setWidth((OZRenderParams *)v9, v13[1]);
  OZRenderParams::setHeight((OZRenderParams *)v9, v13[0]);
  v7 = OZImageElement::estimateRenderMemory(*(OZImageElement **)(a1 + 8), a2, (unsigned int *)v9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v9);
  return v7;
}

void sub_1B2E2CFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

unint64_t `virtual thunk to'OZPDFRender::estimateRenderMemory(_QWORD *a1, uint64_t a2)
{
  return OZPDFRender::estimateRenderMemory((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2);
}

PCSharedCount *OZImageElement::makeRenderImageSource@<X0>(OZImageElement *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZFootage *Footage;
  OZPDFRender *v8;
  uint64_t v9;
  PCShared_base *v10;
  PCSharedCount *v11;

  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (!Footage)
  {
    a3->var0 = 0;
    v11 = a3 + 1;
    v10 = 0;
    return PCSharedCount::PCSharedCount(v11, v10);
  }
  if (OZFootage::isResolutionIndependent(Footage))
  {
    v8 = (OZPDFRender *)operator new();
    OZPDFRender::OZPDFRender(v8, this, a2);
    v9 = *(_QWORD *)v8;
    a3->var0 = (PC_Sp_counted_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
    v10 = (OZPDFRender *)((char *)v8 + *(_QWORD *)(v9 - 32));
    v11 = a3 + 1;
    return PCSharedCount::PCSharedCount(v11, v10);
  }
  return OZElement::makeRenderImageSource((OZElement *)this, a2, a3);
}

void sub_1B2E2D0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E56B8860);
  _Unwind_Resume(a1);
}

PCSharedCount *`non-virtual thunk to'OZImageElement::makeRenderImageSource@<X0>(OZImageElement *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  return OZImageElement::makeRenderImageSource((OZImageElement *)((char *)this - 6528), a2, a3);
}

void HGLazyPDFBitmapLoader::HGLazyPDFBitmapLoader(HGLazyPDFBitmapLoader *this, OZImageElement *a2, const OZRenderParams *a3, CGColorSpace *a4)
{
  uint64_t v8;

  HGBitmapLoader::HGBitmapLoader(this);
  *(_QWORD *)v8 = off_1E658DD28;
  *(_QWORD *)(v8 + 520) = a2;
  *(_QWORD *)(v8 + 648) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 608) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 568) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 528) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 632) = 0u;
  OZRenderParams::OZRenderParams((OZRenderParams *)(v8 + 656), a3);
  PCColorSpaceHandle::PCColorSpaceHandle((HGLazyPDFBitmapLoader *)((char *)this + 2080), a4);
  *(_OWORD *)((char *)this + 2088) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 2104));
  HGLazyPDFBitmapLoader::generatePlaceHolderBitmap(this);
}

void sub_1B2E2D198(_Unwind_Exception *a1)
{
  HGNode *v1;
  OZRenderParams *v2;
  CGColorSpace **v3;
  PCMutex *v4;
  uint64_t v5;
  PCMutex *v6;

  v6 = v4;
  PCMutex::~PCMutex(v6);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v5);
  PCCFRef<CGColorSpace *>::~PCCFRef(v3);
  OZRenderParams::~OZRenderParams(v2);
  HGBitmapLoader::~HGBitmapLoader(v1);
  _Unwind_Resume(a1);
}

void HGLazyPDFBitmapLoader::generatePlaceHolderBitmap(HGLazyPDFBitmapLoader *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;
  int Format;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[392];
  __int128 v21;
  __int128 v22;

  OZRenderParams::OZRenderParams((OZRenderParams *)v20, (HGLazyPDFBitmapLoader *)((char *)this + 656));
  OZRenderParams::setWidth((OZRenderParams *)v20, 0);
  OZRenderParams::setHeight((OZRenderParams *)v20, 0);
  OZRenderParams::setImageType((uint64_t)v20, 1);
  v20[360] = 1;
  v21 = 0u;
  v22 = 0u;
  PCColorSpaceHandle::getCGColorSpace((HGLazyPDFBitmapLoader *)((char *)this + 2080));
  v18 = 0;
  v19 = 0;
  PCDynamicCast<PCBitmap,PCImage>((uint64_t)&v18, &v17);
  v2 = (char *)this + 2088;
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)this + 2088, &v17);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v2 + 64) + 48))(*(_QWORD *)(*(_QWORD *)v2 + 64));
  Format = PGHelium::makeFormat(v6);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v2 + 64) + 16))(*(_QWORD *)(*(_QWORD *)v2 + 64));
  v9 = HGRectMake4i(0, 0, 0, 0);
  v11 = v10;
  v12 = HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap((uint64_t)v12, v9, v11, Format, v8);
  v13 = (void *)*((_QWORD *)this + 51);
  if (v13 == v12)
  {
    if (v12)
      (*(void (**)(void *))(*(_QWORD *)v12 + 24))(v12);
  }
  else
  {
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 24))(v13);
    *((_QWORD *)this + 51) = v12;
  }
  *((_BYTE *)this + 2176) = 1;
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)v20);
}

void sub_1B2E2D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  _Unwind_Resume(a1);
}

void HGLazyPDFBitmapLoader::~HGLazyPDFBitmapLoader(HGLazyPDFBitmapLoader *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  *(_QWORD *)this = off_1E658DD28;
  v6 = 0uLL;
  v2 = (char *)this + 2088;
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)this + 2088, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 2104));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 260);
  OZRenderParams::~OZRenderParams((HGLazyPDFBitmapLoader *)((char *)this + 656));
  HGBitmapLoader::~HGBitmapLoader((HGNode *)this);
}

{
  void *v1;

  HGLazyPDFBitmapLoader::~HGLazyPDFBitmapLoader(this);
  HGObject::operator delete(v1);
}

uint64_t HGLazyPDFBitmapLoader::GetDOD(HGLazyPDFBitmapLoader *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  double v5;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;

  if (!a3)
  {
    v5 = (double)*((int *)this + 122);
    v6 = (double)*((int *)this + 123);
    v7 = (double)*((int *)this + 124);
    v8 = *((_DWORD *)this + 125);
    v9 = *((double *)this + 78);
    v10 = v9 * v5;
    v11 = *((double *)this + 79);
    v12 = v11 * v6;
    v13 = *((double *)this + 81);
    v14 = v13 + v9 * v5 + v11 * v6;
    v15 = *((double *)this + 66);
    v16 = v15 * v5;
    v17 = *((double *)this + 67);
    v18 = v17 * v6;
    v19 = *((double *)this + 69);
    v20 = (v19 + v15 * v5 + v17 * v6) / v14;
    v21 = *((double *)this + 70);
    v22 = v21 * v5;
    v23 = *((double *)this + 71);
    v24 = v23 * v6;
    v25 = *((double *)this + 73);
    v26 = (v25 + v22 + v24) / v14;
    v27 = v9 * v7;
    v28 = v13 + v27 + v12;
    v29 = v15 * v7;
    v30 = (v19 + v29 + v18) / v28;
    v31 = v21 * v7;
    v32 = (v25 + v31 + v24) / v28;
    v33 = v11 * (double)v8;
    v34 = v13 + v27 + v33;
    v35 = v17 * (double)v8;
    v36 = (v19 + v29 + v35) / v34;
    v37 = v23 * (double)v8;
    v38 = (v25 + v31 + v37) / v34;
    v39 = v13 + v10 + v33;
    v40 = (v19 + v16 + v35) / v39;
    v41 = v25 + v22 + v37;
    if (v20 <= v30)
      v42 = v20;
    else
      v42 = v30;
    v43 = 0.0;
    if (v20 + 0.0 >= v30)
      v44 = v20 + 0.0;
    else
      v44 = v30;
    if (v26 <= v32)
      v45 = v26;
    else
      v45 = v32;
    v46 = v26 + 0.0;
    if (v26 + 0.0 < v32)
      v46 = v32;
    v47 = v44 - v42;
    v48 = v41 / v39;
    if (v47 < 0.0 || (v49 = v46 - v45, v46 - v45 < 0.0))
    {
      v51 = v38;
      v53 = 0.0;
      v50 = v36;
    }
    else
    {
      if (v42 <= v36)
        v50 = v42;
      else
        v50 = v36;
      if (v42 + v47 >= v36)
        v36 = v42 + v47;
      if (v45 <= v38)
        v51 = v45;
      else
        v51 = v38;
      v52 = v45 + v49;
      if (v45 + v49 < v38)
        v52 = v38;
      v53 = v36 - v50;
      v54 = 0.0;
      if (v53 < 0.0 || (v43 = v52 - v51, v43 < 0.0))
      {
        v55 = 0.0;
LABEL_41:
        v4 = (__int128 *)((char *)this + 504);
        *((_DWORD *)this + 126) = vcvtmd_s64_f64(v40 + 0.0000001);
        *((_DWORD *)this + 127) = vcvtmd_s64_f64(v48 + 0.0000001);
        *((_DWORD *)this + 128) = vcvtpd_s64_f64(v55 + v40);
        *((_DWORD *)this + 129) = vcvtpd_s64_f64(v54 + v48);
        return *(_QWORD *)v4;
      }
    }
    if (v50 <= v40)
      v56 = v50;
    else
      v56 = v40;
    if (v53 + v50 >= v40)
      v40 = v53 + v50;
    if (v51 <= v48)
      v57 = v51;
    else
      v57 = v41 / v39;
    if (v43 + v51 >= v48)
      v48 = v43 + v51;
    v55 = v40 - v56;
    v54 = v48 - v57;
    v48 = v57;
    v40 = v56;
    goto LABEL_41;
  }
  v4 = &HGRectNull;
  return *(_QWORD *)v4;
}

uint64_t HGLazyPDFBitmapLoader::RenderPDF(uint64_t this, HGRenderer *a2)
{
  OZRenderParams *v3;
  HGNode *v4;
  unint64_t ROI;
  uint64_t v6;
  uint64_t v7;
  int DoHighQualityResampling;
  unint64_t v9;
  __int128 v10;
  int v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  int v15;
  int v16;
  double v17;
  double v18;
  HGNode *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[392];
  __int128 v29;
  __int128 v30;

  if (*(_BYTE *)(this + 2176) || !*(_QWORD *)(this + 408))
  {
    v3 = (OZRenderParams *)(this + 656);
    v4 = (HGNode *)this;
    OZRenderParams::OZRenderParams((OZRenderParams *)v28, (const OZRenderParams *)(this + 656));
    v19 = v4;
    ROI = HGRenderer::GetROI(a2, v4);
    v7 = v6;
    DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(v3);
    v9 = HIDWORD(ROI);
    v10 = *((_OWORD *)v19 + 38);
    if (DoHighQualityResampling)
      v11 = 3000;
    else
      v11 = 2000;
    v24 = *((_OWORD *)v19 + 37);
    v25 = v10;
    v12 = *((_OWORD *)v19 + 40);
    v26 = *((_OWORD *)v19 + 39);
    v27 = v12;
    v13 = *((float64x2_t *)v19 + 34);
    v20 = *((float64x2_t *)v19 + 33);
    v21 = v13;
    v14 = *((float64x2_t *)v19 + 36);
    v15 = v7 - ROI;
    v16 = HIDWORD(v7) - HIDWORD(ROI);
    v22 = *((float64x2_t *)v19 + 35);
    v23 = v14;
    if ((int)v7 - (int)ROI > v11 || v16 > v11)
    {
      v17 = (double)v11 / (double)v15;
      if (v17 > 1.0)
        v17 = 1.0;
      v18 = (double)v11 / (double)v16;
      LODWORD(ROI) = (int)(v17 * (double)(int)ROI);
      if (v18 > 1.0)
        v18 = 1.0;
      LODWORD(v9) = (int)(v18 * (double)(int)v9);
      v15 = (int)(v17 * (double)(int)v7) - ROI;
      v16 = (int)(v18 * (double)SHIDWORD(v7)) - v9;
      if (v17 != 1.0)
      {
        v20 = vmulq_n_f64(v20, v17);
        v21 = vmulq_n_f64(v21, v17);
      }
      if (v18 != 1.0)
      {
        v22 = vmulq_n_f64(v22, v18);
        v23 = vmulq_n_f64(v23, v18);
      }
    }
    OZRenderParams::setWidth((OZRenderParams *)v28, v15);
    OZRenderParams::setHeight((OZRenderParams *)v28, v16);
    OZRenderParams::setImageType((uint64_t)v28, 1);
    v28[360] = 1;
    v29 = 0u;
    v30 = 0u;
    PCMatrix44Tmpl<double>::leftTranslate(&v20, (float64x2_t)COERCE_UNSIGNED_INT64((double)-(int)ROI), (double)-(int)v9, 0.0);
    this = PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)((char *)v19 + 2080));
    __break(1u);
  }
  return this;
}

void sub_1B2E2D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a27);
  _Unwind_Resume(a1);
}

uint64_t HGLazyPDFBitmapLoader::RenderPage(HGLazyPDFBitmapLoader *this, HGPage *a2)
{
  HGRenderer *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t ROI;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  double v16;
  double v17;
  uint64_t v18;

  v4 = *(HGRenderer **)a2;
  v5 = *((_QWORD *)this + 51);
  if (!v5 || *((_BYTE *)this + 2176))
  {
    HGLazyPDFBitmapLoader::RenderPDF((uint64_t)this, *(HGRenderer **)a2);
    v5 = *((_QWORD *)this + 51);
  }
  v7 = *((_DWORD *)a2 + 4);
  v6 = *((_DWORD *)a2 + 5);
  v9 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v5)
      return *((_QWORD *)a2 + 1);
  }
  else
  {
    *((_QWORD *)a2 + 1) = HGGPURenderer::CreateBuffer((uint64_t)v4, *((HGRect *)a2 + 1), *((unsigned int *)a2 + 8), 0, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
    if (!v5)
      return *((_QWORD *)a2 + 1);
  }
  ROI = HGRenderer::GetROI(v4, (HGNode *)this);
  v13 = v12;
  v14 = HIDWORD(ROI);
  v16 = (double)(v15 - (int)ROI)
      / (double)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 261) + 16))(*((_QWORD *)this + 261));
  v17 = (double)(v13 - (int)v14)
      / (double)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 261) + 24))(*((_QWORD *)this + 261));
  v18 = (*(uint64_t (**)(HGRenderer *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v4 + 352))(v4, (int)((double)v7 / v16) | ((unint64_t)(int)((double)v6 / v17) << 32), (int)((double)v9 / v16) | ((unint64_t)(int)((double)v8 / v17) << 32), v5);
  (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v4 + 144))(v4, *((_QWORD *)a2 + 1));
  (*(void (**)(HGRenderer *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 152))(v4, 0, v18, 0, 0);
  if (fabs(v16 + -1.0) < 0.0000001 && fabs(v17 + -1.0) < 0.0000001)
    HGGPURenderer::Rect(v4, *((HGRect *)a2 + 1));
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  return *((_QWORD *)a2 + 1);
}

uint64_t HGLazyPDFBitmapLoader::RenderPageMetal(HGLazyPDFBitmapLoader *this, HGPage *a2)
{
  HGRenderer *v4;
  HGBitmap *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t ROI;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  HGBitmap *v23;
  const void *v24;
  HGMetalHandler *v25;
  HGMetalTexture ***v26;
  __n128 v27;
  double v28;
  uint64_t TextureRect;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v39;
  int v40;
  _OWORD v41[4];
  _OWORD v42[4];
  uint64_t v43;
  HGRect v44;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *(HGRenderer **)a2;
  v5 = (HGBitmap *)*((_QWORD *)this + 51);
  if (!v5 || *((_BYTE *)this + 2176))
  {
    HGLazyPDFBitmapLoader::RenderPDF((uint64_t)this, *(HGRenderer **)a2);
    v5 = (HGBitmap *)*((_QWORD *)this + 51);
  }
  v7 = *((_DWORD *)a2 + 4);
  v6 = *((_DWORD *)a2 + 5);
  v9 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v10 = *((_QWORD *)a2 + 1);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  else
    *((_QWORD *)a2 + 1) = HGGPURenderer::CreateBuffer((uint64_t)v4, *((HGRect *)a2 + 1), *((unsigned int *)a2 + 8), 1, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
  (*(void (**)(HGRenderer *, _QWORD))(*(_QWORD *)v4 + 144))(v4, 0);
  if (v5)
  {
    ROI = HGRenderer::GetROI(v4, (HGNode *)this);
    v13 = v12;
    v14 = HIDWORD(ROI);
    v16 = (double)(v15 - (int)ROI)
        / (double)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 261) + 16))(*((_QWORD *)this + 261));
    v17 = (double)(v13 - (int)v14);
    v18 = (int)((double)v7 / v16);
    v39 = v9;
    v40 = v6;
    v19 = v17
        / (double)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 261) + 24))(*((_QWORD *)this + 261));
    v20 = (int)((double)v6 / v19);
    v21 = (int)((double)v9 / v16);
    *(_QWORD *)&v44.var0 = v18 | (v20 << 32);
    v22 = (int)((double)v8 / v19);
    *(_QWORD *)&v44.var2 = v21 | (v22 << 32);
    v23 = HGGPURenderer::ConvertToMetalTexture(*(HGMetalTexture ***)a2, v44, v5);
    v24 = (const void *)(*(uint64_t (**)(HGRenderer *, _QWORD, HGLazyPDFBitmapLoader *))(*(_QWORD *)v4 + 368))(v4, *((_QWORD *)this + 8), this);
    if (v24)
    {
      if (v25)
      {
        v26 = (HGMetalTexture ***)v25;
        HGMetalHandler::BindBuffer(v25, *((HGBitmap **)a2 + 1));
        v27 = HGMetalHandler::BindTexture(v26, 0, v23);
        ((void (*)(HGMetalTexture ***, _QWORD, _QWORD, __n128))(*v26)[9])(v26, 0, 0, v27);
        ((void (*)(HGMetalTexture ***, _QWORD, _QWORD))(*v26)[6])(v26, 0, 0);
        ((void (*)(HGMetalTexture ***, _QWORD))(*v26)[10])(v26, 0);
        ((void (*)(HGMetalTexture ***))(*v26)[11])(v26);
        v28 = (double)-(int)HGMetalTexture::GetTextureRect((HGMetalTexture *)v23);
        TextureRect = HGMetalTexture::GetTextureRect((HGMetalTexture *)v23);
        ((void (*)(HGMetalTexture ***, double, double, double))(*v26)[12])(v26, v28, (double)-HIDWORD(TextureRect), 0.0);
        v30 = xmmword_1B304EFF0;
        v31 = xmmword_1B304EFF0;
        *(float *)&v31 = (float)v7;
        v32 = v31;
        *((float *)&v32 + 1) = (float)v8;
        v33 = xmmword_1B304EFF0;
        *(float *)&v33 = (float)v39;
        v34 = v33;
        *((float *)&v34 + 1) = (float)v8;
        *((float *)&v31 + 1) = (float)v40;
        *((float *)&v33 + 1) = (float)v40;
        v42[0] = v32;
        v42[1] = v31;
        v35 = xmmword_1B304EFF0;
        *(float *)&v35 = (float)(int)v18;
        v36 = v35;
        *((float *)&v36 + 1) = (float)(int)v22;
        v42[2] = v34;
        v42[3] = v33;
        *((float *)&v35 + 1) = (float)(int)v20;
        v41[0] = v36;
        v41[1] = v35;
        *(float *)&v30 = (float)(int)v21;
        v37 = v30;
        *((float *)&v37 + 1) = (float)(int)v22;
        *((float *)&v30 + 1) = (float)(int)v20;
        v41[2] = v37;
        v41[3] = v30;
        HGMetalHandler::PrimitivesDraw((uint64_t)v26, 4u, v42, 4u, v41);
        (*(void (**)(HGRenderer *, HGMetalTexture ***))(*(_QWORD *)v4 + 392))(v4, v26);
      }
    }
    (*(void (**)(HGBitmap *))(*(_QWORD *)v23 + 24))(v23);
  }
  return *((_QWORD *)a2 + 1);
}

string_t HGLazyPDFBitmapLoader::GetProgram(HGLazyPDFBitmapLoader *this, HGRenderer *a2)
{
  double v2;
  double v3;
  uint32x4_t v4;
  string_t v5;
  string_t v7[6];

  if (HGRenderer::GetTarget(a2, 393216) <= 0x60B0F)
    return 0;
  HGString::sample2d((HGString *)0x60B10, 0, 0, (HGString *)v7);
  v5 = HGString::c_str(v7, v2, v3, v4);
  HGString::~HGString((HGString *)v7);
  return v5;
}

void sub_1B2E2DE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGString::~HGString((HGString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGLazyPDFBitmapLoader::RenderTile(HGLazyPDFBitmapLoader *this, HGTile *a2)
{
  HGRenderer *v4;
  uint64_t ROI;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  HGTransform *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (HGRenderer *)HGTile::Renderer(a2);
  PCMutex::lock((PCMutex *)((char *)this + 2104));
  if (!*((_QWORD *)this + 51) || *((_BYTE *)this + 2176))
    HGLazyPDFBitmapLoader::RenderPDF((uint64_t)this, v4);
  PCMutex::unlock((PCMutex *)((char *)this + 2104));
  ROI = HGRenderer::GetROI(v4, (HGNode *)this);
  v7 = v6;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 261) + 16))(*((_QWORD *)this + 261));
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 261) + 24))(*((_QWORD *)this + 261));
  v10 = HGGetTBC();
  v11 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v11);
  (*(void (**)(HGTransform *, double, double))(*(_QWORD *)v11 + 144))(v11, 1.0 / ((double)((int)v7 - (int)ROI) / (double)v8), 1.0 / ((double)(HIDWORD(v7) - HIDWORD(ROI)) / (double)v9));
  HGSampler::ReadTile(*((_QWORD *)a2 + 42));
  (*(void (**)(HGTransform *))(*(_QWORD *)v11 + 24))(v11);
  v12 = HGGetTBC();
  v13 = (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1)) * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
  v14 = *(_QWORD **)(*((_QWORD *)a2 + 42) + 416);
  v15 = v14[2];
  v16 = v14[3] + v12 - v10;
  v14[6] -= v12 - v10;
  *v14 += *(_QWORD *)(*((_QWORD *)this + 51) + 56) * v13;
  v14[2] = v15 - v13;
  v14[3] = v16;
  return 0;
}

void sub_1B2E2E048(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

double OZImageElement::castShadowMaxScale(OZImageElement *this, const OZRenderParams *a2)
{
  OZFootage *Footage;
  double v5;

  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (!Footage || !OZFootage::hasAlpha(Footage))
    return OZElement::castShadowMaxScale((OZElement *)this, a2);
  v5 = OZElement::castShadowMaxScale((OZElement *)this, a2);
  return v5 + v5;
}

uint64_t OZImageElement::wantsColorHeadingVisible(OZImageElement *this)
{
  return 1;
}

uint64_t OZImageElement::getAutomaticConversionType(OZImageElement *this)
{
  PMClip **Footage;
  uint64_t result;

  Footage = (PMClip **)OZImageElement::getFootage(this);
  if (!Footage)
    return OZElement::getAutomaticConversionType((OZElement *)this);
  result = OZFootage::getDynamicRangeType(Footage);
  if ((_DWORD)result == 2)
    return result;
  if ((_DWORD)result)
    return 0;
  else
    return OZElement::getAutomaticConversionType((OZElement *)this);
}

uint64_t OZImageElement::prerollBegin(OZImageElement *a1, CMTime *a2, uint64_t a3, uint64_t a4, double a5)
{
  OZFootage *Footage;
  OZFootage *v11;
  uint64_t v12;
  FxColorDescription *WorkingColorDescription;
  OZRenderParams *v14;
  CMTimeEpoch v15;
  __int128 v16;
  CMTime v18;
  CMTime v19;
  float v20;
  float v21;
  __n128 v22[11];
  CGColorSpace *v23;
  CGColorSpace *v24;
  OZRenderParams *v25;
  CMTime v26;

  OZSceneNode::prerollBegin((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  if (!Footage)
    return 0;
  v11 = Footage;
  v26 = *a2;
  if (OZImageElement::hasSourceObjectForTime(a1, &v26))
    return 0;
  v25 = 0;
  PMFrameRequest::PMFrameRequest((uint64_t)v22, a3);
  WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
  OZImageElement::calculateFrameRequestSettings(a1, (const OZRenderParams *)a2, WorkingColorDescription, v11, &v25, v22, &v21, &v20);
  v14 = v25;
  v15 = *((_QWORD *)v25 + 2);
  *(_OWORD *)&v19.value = *(_OWORD *)v25;
  v19.epoch = v15;
  OZFootage::getFootageTime(v11, &v19, &v18);
  v16 = *(_OWORD *)&v18.value;
  v19 = v18;
  *((_QWORD *)v14 + 2) = v18.epoch;
  *(_OWORD *)v14 = v16;
  *((_QWORD *)v14 + 49) = 0;
  *((_QWORD *)v14 + 50) = 0;
  v12 = (*(uint64_t (**)(OZFootage *, OZRenderParams *, __n128 *, uint64_t, double))(*(_QWORD *)v11 + 112))(v11, v14, v22, a4, a5);
  OZRenderParams::~OZRenderParams(v14);
  MEMORY[0x1B5E29170]();
  PCCFRef<CGColorSpace *>::~PCCFRef(&v24);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v23);
  return v12;
}

void sub_1B2E2E25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CGColorSpace *a39,CGColorSpace *a40)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a40);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a39);
  _Unwind_Resume(a1);
}

OZFootage *OZImageElement::prerollEnd(OZImageElement *this, CMTime *a2, PMFrameRequest *a3)
{
  OZFootage *Footage;
  FxColorDescription *WorkingColorDescription;
  OZRenderParams *v8;
  float v10;
  float v11;
  __n128 v12[11];
  CGColorSpace *v13;
  CGColorSpace *v14;
  OZRenderParams *v15;
  CMTime v16;

  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    v16 = *a2;
    if (OZImageElement::hasSourceObjectForTime(this, &v16))
    {
      return 0;
    }
    else
    {
      v15 = 0;
      PMFrameRequest::PMFrameRequest((uint64_t)v12, (uint64_t)a3);
      WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
      OZImageElement::calculateFrameRequestSettings(this, (const OZRenderParams *)a2, WorkingColorDescription, Footage, &v15, v12, &v11, &v10);
      v8 = v15;
      Footage = (OZFootage *)(*(uint64_t (**)(OZFootage *, OZRenderParams *, __n128 *))(*(_QWORD *)Footage
                                                                                                + 120))(Footage, v15, v12);
      if (v8)
      {
        OZRenderParams::~OZRenderParams(v8);
        MEMORY[0x1B5E29170]();
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
    }
  }
  return Footage;
}

void sub_1B2E2E390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CGColorSpace *a33,CGColorSpace *a34)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  _Unwind_Resume(a1);
}

OZFootage *OZImageElement::setRate(OZImageElement *this, CMTime *a2, PMFrameRequest *a3, double a4)
{
  OZFootage *Footage;
  FxColorDescription *WorkingColorDescription;
  OZRenderParams *v10;
  CMTimeEpoch v11;
  __int128 v12;
  CMTime v14;
  CMTime v15;
  float v16;
  float v17;
  __n128 v18[11];
  CGColorSpace *v19;
  CGColorSpace *v20;
  OZRenderParams *v21;
  CMTime v22;

  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    v22 = *a2;
    if (OZImageElement::hasSourceObjectForTime(this, &v22))
    {
      return 0;
    }
    else
    {
      v21 = 0;
      PMFrameRequest::PMFrameRequest((uint64_t)v18, (uint64_t)a3);
      WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
      OZImageElement::calculateFrameRequestSettings(this, (const OZRenderParams *)a2, WorkingColorDescription, Footage, &v21, v18, &v17, &v16);
      v10 = v21;
      v11 = *((_QWORD *)v21 + 2);
      *(_OWORD *)&v15.value = *(_OWORD *)v21;
      v15.epoch = v11;
      OZFootage::getFootageTime(Footage, &v15, &v14);
      v12 = *(_OWORD *)&v14.value;
      v15 = v14;
      *((_QWORD *)v10 + 2) = v14.epoch;
      *(_OWORD *)v10 = v12;
      *((_QWORD *)v10 + 49) = 0;
      *((_QWORD *)v10 + 50) = 0;
      Footage = (OZFootage *)(*(uint64_t (**)(OZFootage *, OZRenderParams *, __n128 *, double))(*(_QWORD *)Footage + 128))(Footage, v10, v18, a4);
      OZRenderParams::~OZRenderParams(v10);
      MEMORY[0x1B5E29170]();
      PCCFRef<CGColorSpace *>::~PCCFRef(&v20);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v19);
    }
  }
  return Footage;
}

void sub_1B2E2E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CGColorSpace *a39,CGColorSpace *a40)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a40);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a39);
  _Unwind_Resume(a1);
}

void OZImageElement::remapTokens(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  int ValueAsInt;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  double *v12;
  BOOL *v13;
  _OWORD *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  CMTimeValue v24;
  CMTimeValue v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  CMTimeValue v33;
  CMTimeValue v34;
  __int128 v35;
  CMTimeValue v36;
  CMTimeEpoch v37;
  CMTimeEpoch v38;
  _QWORD *v39;
  _QWORD *v40;
  CMTime *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  __int128 v46;
  CMTime *v47;
  uint64_t v48;
  CMTimeValue value;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  CMTimeValue v59;
  CMTimeValue v60;
  __int128 v61;
  CMTimeEpoch epoch;
  CMTimeEpoch v63;
  _QWORD *v64;
  CMTime *v66;
  uint64_t v67;
  _anonymous_namespace_ *Footage;
  CMTime v69;
  CMTime v70;
  CMTime v71;
  uint64_t v72;
  CMTime v73;
  CMTime v74;
  CMTime v75;

  v5 = a1;
  OZSceneNode::remapTokens(a1, a2, (uint64_t)a3, a4);
  Footage = (_anonymous_namespace_ *)OZImageElement::getFootage((OZImageElement *)v5);
  if (Footage)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v5 + 21496), MEMORY[0x1E0CA2E68], 0.0);
    if (*(_BYTE *)(a2 + 513))
      v7 = ValueAsInt;
    else
      v7 = 0;
    v67 = v5;
    switch(v7)
    {
      case 0:
        v40 = (_QWORD *)*a3;
        v39 = (_QWORD *)a3[1];
        if ((_QWORD *)*a3 != v39)
        {
          do
          {
            v41 = (CMTime *)v40[3];
            if (v41 != (CMTime *)v40[4])
            {
              do
              {
                v42 = *(_OWORD *)&v41->value;
                v74.epoch = v41->epoch;
                *(_OWORD *)&v74.value = v42;
                OZImageElement::globalToFootageTime((OZImageElement *)v5, &v74, (uint64_t)&v75);
                v43 = *(_OWORD *)&v75.value;
                v41->epoch = v75.epoch;
                *(_OWORD *)&v41->value = v43;
                OZFootage::getFootageTime(Footage, v41, &v75);
                v44 = *(_OWORD *)&v75.value;
                v41->epoch = v75.epoch;
                *(_OWORD *)&v41->value = v44;
                ++v41;
              }
              while (v41 != (CMTime *)v40[4]);
              v39 = (_QWORD *)a3[1];
            }
            v40 += 6;
          }
          while (v40 != v39);
        }
        return;
      case 1:
      case 3:
        v8 = (_QWORD *)*a3;
        if (*a3 == a3[1])
          return;
        break;
      case 2:
        memset(&v75, 0, sizeof(v75));
        v45 = (_QWORD *)*a3;
        if (*a3 != a3[1])
        {
          do
          {
            v46 = 0uLL;
            memset(&v73, 0, sizeof(v73));
            v47 = (CMTime *)v45[3];
            v66 = (CMTime *)v45[4];
            if (v47 == v66)
            {
              epoch = 0;
            }
            else
            {
              v64 = v45;
              do
              {
                getMotionBlurTimes(v47, *(_DWORD *)(a2 + 500), *(unsigned __int8 *)(a2 + 496), (OZImageElement *)v5, Footage, *(_QWORD *)(v5 + 968), (char **)&v75, *(double *)(a2 + 504));
                value = v75.value;
                v48 = *(_QWORD *)&v75.timescale;
                if (v75.value != *(_QWORD *)&v75.timescale)
                {
                  v50 = *(_QWORD *)&v73.timescale;
                  do
                  {
                    if (v50 >= v73.epoch)
                    {
                      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - v73.value) >> 3);
                      v53 = v52 + 1;
                      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<double>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * ((v73.epoch - v73.value) >> 3) > v53)
                        v53 = 0x5555555555555556 * ((v73.epoch - v73.value) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((v73.epoch - v73.value) >> 3) >= 0x555555555555555)
                        v54 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v54 = v53;
                      if (v54)
                        v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v73.epoch, v54);
                      else
                        v55 = 0;
                      v56 = &v55[24 * v52];
                      v57 = *(_OWORD *)value;
                      *((_QWORD *)v56 + 2) = *(_QWORD *)(value + 16);
                      *(_OWORD *)v56 = v57;
                      v59 = v73.value;
                      v58 = *(char **)&v73.timescale;
                      v60 = (CMTimeValue)v56;
                      if (*(_QWORD *)&v73.timescale != v73.value)
                      {
                        do
                        {
                          v61 = *(_OWORD *)(v58 - 24);
                          *(_QWORD *)(v60 - 8) = *((_QWORD *)v58 - 1);
                          *(_OWORD *)(v60 - 24) = v61;
                          v60 -= 24;
                          v58 -= 24;
                        }
                        while (v58 != (char *)v59);
                        v58 = (char *)v73.value;
                      }
                      v50 = (unint64_t)(v56 + 24);
                      v73.value = v60;
                      *(_QWORD *)&v73.timescale = v56 + 24;
                      v73.epoch = (CMTimeEpoch)&v55[24 * v54];
                      if (v58)
                        operator delete(v58);
                    }
                    else
                    {
                      v51 = *(_OWORD *)value;
                      *(_QWORD *)(v50 + 16) = *(_QWORD *)(value + 16);
                      *(_OWORD *)v50 = v51;
                      v50 += 24;
                    }
                    *(_QWORD *)&v73.timescale = v50;
                    value += 32;
                  }
                  while (value != v48);
                }
                ++v47;
                v5 = v67;
              }
              while (v47 != v66);
              v45 = v64;
              v47 = (CMTime *)v64[3];
              v46 = *(_OWORD *)&v73.value;
              epoch = v73.epoch;
            }
            *(_OWORD *)(v45 + 3) = v46;
            v63 = v45[5];
            v45[5] = epoch;
            v73.value = (CMTimeValue)v47;
            v73.epoch = v63;
            if (v47)
            {
              *(_QWORD *)&v73.timescale = v47;
              operator delete(v47);
            }
            v45 += 6;
          }
          while (v45 != (_QWORD *)a3[1]);
          if (v75.value)
          {
            *(_QWORD *)&v75.timescale = v75.value;
            operator delete((void *)v75.value);
          }
        }
        return;
      default:
        return;
    }
    do
    {
      memset(&v75, 0, sizeof(v75));
      v10 = (_QWORD *)v8[3];
      v9 = (_QWORD *)v8[4];
      if (v10 == v9)
      {
        v37 = 0;
        v16 = 0;
        v36 = 0;
      }
      else
      {
        do
        {
          v71.value = 0;
          v11 = *(_OWORD *)v10;
          v69.epoch = v10[2];
          *(_OWORD *)&v69.value = v11;
          OZImageElement::globalToFootageTime((OZImageElement *)v5, &v69, (uint64_t)&v70);
          v14 = *(_OWORD **)&v75.timescale;
          if (*(_QWORD *)&v75.timescale >= v75.epoch)
          {
            v17 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&v75.timescale - v75.value) >> 3);
            v18 = v17 + 1;
            if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_92;
            if (0x5555555555555556 * ((v75.epoch - v75.value) >> 3) > v18)
              v18 = 0x5555555555555556 * ((v75.epoch - v75.value) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v75.epoch - v75.value) >> 3) >= 0x555555555555555)
              v19 = 0xAAAAAAAAAAAAAAALL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v75.epoch, v19);
            else
              v20 = 0;
            v21 = &v20[24 * v17];
            v22 = *(_OWORD *)&v73.value;
            *((_QWORD *)v21 + 2) = v73.epoch;
            *(_OWORD *)v21 = v22;
            v24 = v75.value;
            v23 = *(char **)&v75.timescale;
            v25 = (CMTimeValue)v21;
            if (*(_QWORD *)&v75.timescale == v75.value)
            {
              v5 = v67;
            }
            else
            {
              v5 = v67;
              do
              {
                v26 = *(_OWORD *)(v23 - 24);
                *(_QWORD *)(v25 - 8) = *((_QWORD *)v23 - 1);
                *(_OWORD *)(v25 - 24) = v26;
                v25 -= 24;
                v23 -= 24;
              }
              while (v23 != (char *)v24);
              v23 = (char *)v75.value;
            }
            v16 = (unint64_t)(v21 + 24);
            v75.value = v25;
            *(_QWORD *)&v75.timescale = v21 + 24;
            v75.epoch = (CMTimeEpoch)&v20[24 * v19];
            if (v23)
              operator delete(v23);
          }
          else
          {
            v15 = *(_OWORD *)&v73.value;
            *(_QWORD *)(*(_QWORD *)&v75.timescale + 16) = v73.epoch;
            *v14 = v15;
            v16 = (unint64_t)v14 + 24;
          }
          *(_QWORD *)&v75.timescale = v16;
          if (*(double *)&v71.value <= -0.0000001 || *(double *)&v71.value >= 0.0000001)
          {
            if (v16 >= v75.epoch)
            {
              v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v75.value) >> 3);
              v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_92:
                std::vector<double>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v75.epoch - v75.value) >> 3) > v28)
                v28 = 0x5555555555555556 * ((v75.epoch - v75.value) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v75.epoch - v75.value) >> 3) >= 0x555555555555555)
                v29 = 0xAAAAAAAAAAAAAAALL;
              else
                v29 = v28;
              if (v29)
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v75.epoch, v29);
              else
                v30 = 0;
              v31 = &v30[24 * v27];
              *(_OWORD *)v31 = *(_OWORD *)&v71.timescale;
              *((_QWORD *)v31 + 2) = v72;
              v33 = v75.value;
              v32 = *(char **)&v75.timescale;
              v34 = (CMTimeValue)v31;
              if (*(_QWORD *)&v75.timescale == v75.value)
              {
                v5 = v67;
              }
              else
              {
                v5 = v67;
                do
                {
                  v35 = *(_OWORD *)(v32 - 24);
                  *(_QWORD *)(v34 - 8) = *((_QWORD *)v32 - 1);
                  *(_OWORD *)(v34 - 24) = v35;
                  v34 -= 24;
                  v32 -= 24;
                }
                while (v32 != (char *)v33);
                v32 = (char *)v75.value;
              }
              v16 = (unint64_t)(v31 + 24);
              v75.value = v34;
              *(_QWORD *)&v75.timescale = v31 + 24;
              v75.epoch = (CMTimeEpoch)&v30[24 * v29];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_OWORD *)v16 = *(_OWORD *)&v71.timescale;
              *(_QWORD *)(v16 + 16) = v72;
              v16 += 24;
            }
            *(_QWORD *)&v75.timescale = v16;
          }
          v10 += 3;
        }
        while (v10 != v9);
        v10 = (_QWORD *)v8[3];
        v36 = v75.value;
        v37 = v75.epoch;
      }
      v8[3] = v36;
      v8[4] = v16;
      v38 = v8[5];
      v8[5] = v37;
      v75.value = (CMTimeValue)v10;
      v75.epoch = v38;
      if (v10)
      {
        *(_QWORD *)&v75.timescale = v10;
        operator delete(v10);
      }
      v8 += 6;
    }
    while (v8 != (_QWORD *)a3[1]);
  }
}

void sub_1B2E2EB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(_QWORD *)(v26 - 128) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

OZFootage *OZImageElement::hintTokensWillImage(OZImageElement *a1, OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  OZFootage *Footage;
  FxColorDescription *WorkingColorDescription;
  OZRenderParams *v10;
  _QWORD v12[3];
  float v13;
  float v14;
  __n128 v15[11];
  CGColorSpace *v16;
  CGColorSpace *v17;
  OZRenderParams *v18;
  void **v19;

  OZSceneNode::hintTokensWillImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  if (Footage)
  {
    v18 = 0;
    PMFrameRequest::PMFrameRequest((uint64_t)v15, a4);
    WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription(a2);
    OZImageElement::calculateFrameRequestSettings(a1, a2, WorkingColorDescription, Footage, &v18, v15, &v14, &v13);
    memset(v12, 0, sizeof(v12));
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v12, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
    v10 = v18;
    (*(void (**)(OZImageElement *, OZRenderParams *, _QWORD *, __n128 *))(*(_QWORD *)a1 + 184))(a1, v18, v12, v15);
    Footage = (OZFootage *)(*(uint64_t (**)(OZFootage *, OZRenderParams *, _QWORD *, __n128 *))(*(_QWORD *)Footage + 144))(Footage, v10, v12, v15);
    if (v10)
    {
      OZRenderParams::~OZRenderParams(v10);
      MEMORY[0x1B5E29170]();
    }
    v19 = (void **)v12;
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v19);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
  }
  return Footage;
}

void sub_1B2E2ECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CGColorSpace *a36,CGColorSpace *a37)
{
  uint64_t v37;

  *(_QWORD *)(v37 - 56) = &a10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a36);
  _Unwind_Resume(a1);
}

OZFootage *OZImageElement::getTokensImage(OZImageElement *a1, OZRenderParams *a2, __int128 **a3, uint64_t a4)
{
  OZFootage *Footage;
  OZFootage *v9;
  FxColorDescription *WorkingColorDescription;
  OZRenderParams *v11;
  _QWORD v13[3];
  float v14;
  float v15;
  __n128 v16[11];
  CGColorSpace *v17;
  CGColorSpace *v18;
  OZRenderParams *v19;
  void **v20;

  OZSceneNode::getTokensImage((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  v9 = Footage;
  if (Footage)
  {
    if (*((_QWORD *)Footage + 1009))
    {
      v19 = 0;
      PMFrameRequest::PMFrameRequest((uint64_t)v16, a4);
      WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription(a2);
      OZImageElement::calculateFrameRequestSettings(a1, a2, WorkingColorDescription, v9, &v19, v16, &v15, &v14);
      memset(v13, 0, sizeof(v13));
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
      v11 = v19;
      (*(void (**)(OZImageElement *, OZRenderParams *, _QWORD *, __n128 *))(*(_QWORD *)a1 + 184))(a1, v19, v13, v16);
      v9 = (OZFootage *)(*(uint64_t (**)(OZFootage *, OZRenderParams *, _QWORD *, __n128 *))(*(_QWORD *)v9 + 152))(v9, v11, v13, v16);
      if (v11)
      {
        OZRenderParams::~OZRenderParams(v11);
        MEMORY[0x1B5E29170]();
      }
      v20 = (void **)v13;
      std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v20);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v18);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void sub_1B2E2EE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CGColorSpace *a36,CGColorSpace *a37)
{
  uint64_t v37;

  *(_QWORD *)(v37 - 56) = &a10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a36);
  _Unwind_Resume(a1);
}

void *OZImageElement::pruneTokensAtTime(OZImageElement *this, CMTime *a2, const char *a3)
{
  void *result;
  __int128 v7;
  CMTimeEpoch epoch;
  CMTime v9;

  v9 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v9, a3);
  result = OZImageElement::getFootage(this);
  if (result)
  {
    v7 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 160))(result, &v7, a3);
  }
  return result;
}

void *OZImageElement::pruneTokensExceptAtTime(OZImageElement *this, CMTime *a2, const char *a3)
{
  void *result;
  __int128 v7;
  CMTimeEpoch epoch;
  CMTime v9;

  v9 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v9, a3);
  result = OZImageElement::getFootage(this);
  if (result)
  {
    v7 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    return (void *)(*(uint64_t (**)(void *, __int128 *, const char *))(*(_QWORD *)result + 168))(result, &v7, a3);
  }
  return result;
}

void *OZImageElement::pruneAllTokens(OZImageElement *this, const char *a2)
{
  void *result;

  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  result = OZImageElement::getFootage(this);
  if (result)
    return (void *)(*(uint64_t (**)(void *, const char *))(*(_QWORD *)result + 176))(result, a2);
  return result;
}

void OZPDFRender::~OZPDFRender(OZPDFRender *this)
{
  OZChannelBase *v2;

  *(_QWORD *)this = &off_1E658DB08;
  v2 = (OZChannelBase *)((char *)this + 1440);
  *((_QWORD *)this + 180) = &unk_1E658DC00;
  *((_QWORD *)this + 182) = &unk_1E658DCC8;
  OZRenderParams::~OZRenderParams((OZPDFRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E658DCF8);
  *((_QWORD *)this + 182) = &off_1E65EB048;
  *((_BYTE *)this + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);
}

{
  OZChannelBase *v2;

  *(_QWORD *)this = &off_1E658DB08;
  v2 = (OZChannelBase *)((char *)this + 1440);
  *((_QWORD *)this + 180) = &unk_1E658DC00;
  *((_QWORD *)this + 182) = &unk_1E658DCC8;
  OZRenderParams::~OZRenderParams((OZPDFRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1E658DCF8);
  *((_QWORD *)this + 182) = &off_1E65EB048;
  *((_BYTE *)this + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'OZPDFRender::~OZPDFRender(OZPDFRender *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *(_QWORD *)v1 = &off_1E658DB08;
  *((_QWORD *)v1 + 180) = &unk_1E658DC00;
  *((_QWORD *)v1 + 182) = &unk_1E658DCC8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E658DCF8);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *(_QWORD *)v1 = &off_1E658DB08;
  *((_QWORD *)v1 + 180) = &unk_1E658DC00;
  *((_QWORD *)v1 + 182) = &unk_1E658DCC8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E658DCF8);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
  JUMPOUT(0x1B5E29170);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E658DB08;
  *((_QWORD *)v1 + 180) = &unk_1E658DC00;
  *((_QWORD *)v1 + 182) = &unk_1E658DCC8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E658DCF8);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E658DB08;
  *((_QWORD *)v1 + 180) = &unk_1E658DC00;
  *((_QWORD *)v1 + 182) = &unk_1E658DCC8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1E658DCF8);
  *((_QWORD *)v1 + 182) = &off_1E65EB048;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZImageElement::OZImageElement_pageNumberImpl::getInstance(OZImageElement::OZImageElement_pageNumberImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::OZImageElement_pageNumberImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::OZImageElement_pageNumberImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_pageNumberImpl::_OZImageElement_pageNumber;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZImageElement::OZImageElement_pageNumberImpl::_OZImageElement_pageNumber)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZImageElement::OZImageElement_pageNumberImpl::OZImageElement_pageNumberImpl(v0);
    OZImageElement::OZImageElement_pageNumberImpl::_OZImageElement_pageNumber = (uint64_t)v0;
  }
}

void sub_1B2E2F390(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZImageElement::OZImageElement_pageNumberImpl::OZImageElement_pageNumberImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658E1C0;
  this->var5 = (PCString *)&unk_1E658E1E0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 1.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E2F43C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_pageNumberInfo::getInstance(OZImageElement::OZImageElement_pageNumberInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::OZImageElement_pageNumberInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::OZImageElement_pageNumberInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_pageNumberInfo::_OZImageElement_pageNumberInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_pageNumberInfo *v0;

  if (!OZImageElement::OZImageElement_pageNumberInfo::_OZImageElement_pageNumberInfo)
  {
    v0 = (OZImageElement::OZImageElement_pageNumberInfo *)operator new();
    OZImageElement::OZImageElement_pageNumberInfo::OZImageElement_pageNumberInfo(v0);
    OZImageElement::OZImageElement_pageNumberInfo::_OZImageElement_pageNumberInfo = (uint64_t)v0;
  }
}

void sub_1B2E2F508(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_pageNumberInfo *OZImageElement::OZImageElement_pageNumberInfo::OZImageElement_pageNumberInfo(OZImageElement::OZImageElement_pageNumberInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 1.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_pageNumberInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658E238;
  *((_QWORD *)this + 10) = &unk_1E658E258;
  return this;
}

void sub_1B2E2F5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_timeScaleImpl::getInstance(OZImageElement::OZImageElement_timeScaleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::OZImageElement_timeScaleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::OZImageElement_timeScaleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_timeScaleImpl::_OZImageElement_timeScale;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_timeScaleImpl *v0;

  if (!OZImageElement::OZImageElement_timeScaleImpl::_OZImageElement_timeScale)
  {
    v0 = (OZImageElement::OZImageElement_timeScaleImpl *)operator new();
    OZImageElement::OZImageElement_timeScaleImpl::OZImageElement_timeScaleImpl(v0);
    OZImageElement::OZImageElement_timeScaleImpl::_OZImageElement_timeScale = (uint64_t)v0;
  }
}

void sub_1B2E2F67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_timeScaleImpl *OZImageElement::OZImageElement_timeScaleImpl::OZImageElement_timeScaleImpl(OZImageElement::OZImageElement_timeScaleImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_timeScaleImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658E2B0;
  *((_QWORD *)this + 5) = &unk_1E658E2D0;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E2F730(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(OZImageElement::OZImageElement_retimeFrameCacheImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::OZImageElement_retimeFrameCacheImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::OZImageElement_retimeFrameCacheImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_retimeFrameCacheImpl::_OZImageElement_retimeFrameCache;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_retimeFrameCacheImpl *v0;

  if (!OZImageElement::OZImageElement_retimeFrameCacheImpl::_OZImageElement_retimeFrameCache)
  {
    v0 = (OZImageElement::OZImageElement_retimeFrameCacheImpl *)operator new();
    OZImageElement::OZImageElement_retimeFrameCacheImpl::OZImageElement_retimeFrameCacheImpl(v0);
    OZImageElement::OZImageElement_retimeFrameCacheImpl::_OZImageElement_retimeFrameCache = (uint64_t)v0;
  }
}

void sub_1B2E2F7FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_retimeFrameCacheImpl *OZImageElement::OZImageElement_retimeFrameCacheImpl::OZImageElement_retimeFrameCacheImpl(OZImageElement::OZImageElement_retimeFrameCacheImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 1, 1);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_retimeFrameCacheImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658E328;
  *((_QWORD *)this + 5) = &unk_1E658E348;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E2F8B0(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_loopDurationImpl::getInstance(OZImageElement::OZImageElement_loopDurationImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::OZImageElement_loopDurationImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::OZImageElement_loopDurationImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_loopDurationImpl::_OZImageElement_loopDuration;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_loopDurationImpl *v0;

  if (!OZImageElement::OZImageElement_loopDurationImpl::_OZImageElement_loopDuration)
  {
    v0 = (OZImageElement::OZImageElement_loopDurationImpl *)operator new();
    OZImageElement::OZImageElement_loopDurationImpl::OZImageElement_loopDurationImpl(v0);
    OZImageElement::OZImageElement_loopDurationImpl::_OZImageElement_loopDuration = (uint64_t)v0;
  }
}

void sub_1B2E2F97C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_loopDurationImpl *OZImageElement::OZImageElement_loopDurationImpl::OZImageElement_loopDurationImpl(OZImageElement::OZImageElement_loopDurationImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_loopDurationImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658E3A0;
  *((_QWORD *)this + 5) = &unk_1E658E3C0;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 3.40282347e38);
  return this;
}

void sub_1B2E2FA2C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_layerImpl::getInstance(OZImageElement::OZImageElement_layerImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_layerImpl::getInstance(void)::OZImageElement_layerImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_layerImpl::getInstance(void)::OZImageElement_layerImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_layerImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_layerImpl::_OZImageElement_layer;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_layerImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_layerImpl *v0;

  if (!OZImageElement::OZImageElement_layerImpl::_OZImageElement_layer)
  {
    v0 = (OZImageElement::OZImageElement_layerImpl *)operator new();
    OZImageElement::OZImageElement_layerImpl::OZImageElement_layerImpl(v0);
    OZImageElement::OZImageElement_layerImpl::_OZImageElement_layer = (uint64_t)v0;
  }
}

void sub_1B2E2FAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_layerImpl *OZImageElement::OZImageElement_layerImpl::OZImageElement_layerImpl(OZImageElement::OZImageElement_layerImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_layerImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658E418;
  *((_QWORD *)this + 5) = &unk_1E658E438;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 0.0);
  return this;
}

void sub_1B2E2FBA4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_layerInfo::getInstance(OZImageElement::OZImageElement_layerInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_layerInfo::getInstance(void)::OZImageElement_layerInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_layerInfo::getInstance(void)::OZImageElement_layerInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_layerInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_layerInfo::_OZImageElement_layerInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_layerInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_layerInfo *v0;

  if (!OZImageElement::OZImageElement_layerInfo::_OZImageElement_layerInfo)
  {
    v0 = (OZImageElement::OZImageElement_layerInfo *)operator new();
    OZImageElement::OZImageElement_layerInfo::OZImageElement_layerInfo(v0);
    OZImageElement::OZImageElement_layerInfo::_OZImageElement_layerInfo = (uint64_t)v0;
  }
}

void sub_1B2E2FC70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_layerInfo *OZImageElement::OZImageElement_layerInfo::OZImageElement_layerInfo(OZImageElement::OZImageElement_layerInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.0, 0.01, 0.0001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_layerInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658E490;
  *((_QWORD *)this + 10) = &unk_1E658E4B0;
  return this;
}

void sub_1B2E2FD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropInputIDImpl::getInstance(OZImageElement::OZImageElement_dropInputIDImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::OZImageElement_dropInputIDImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::OZImageElement_dropInputIDImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropInputIDImpl::_OZImageElement_dropInputID;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZImageElement::OZImageElement_dropInputIDImpl::_OZImageElement_dropInputID)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZImageElement::OZImageElement_dropInputIDImpl::OZImageElement_dropInputIDImpl(v0);
    OZImageElement::OZImageElement_dropInputIDImpl::_OZImageElement_dropInputID = (uint64_t)v0;
  }
}

void sub_1B2E2FDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZImageElement::OZImageElement_dropInputIDImpl::OZImageElement_dropInputIDImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658E508;
  this->var5 = (PCString *)&unk_1E658E528;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E2FE9C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropInputIDInfo::getInstance(OZImageElement::OZImageElement_dropInputIDInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::OZImageElement_dropInputIDInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::OZImageElement_dropInputIDInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropInputIDInfo::_OZImageElement_dropInputIDInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_dropInputIDInfo *v0;

  if (!OZImageElement::OZImageElement_dropInputIDInfo::_OZImageElement_dropInputIDInfo)
  {
    v0 = (OZImageElement::OZImageElement_dropInputIDInfo *)operator new();
    OZImageElement::OZImageElement_dropInputIDInfo::OZImageElement_dropInputIDInfo(v0);
    OZImageElement::OZImageElement_dropInputIDInfo::_OZImageElement_dropInputIDInfo = (uint64_t)v0;
  }
}

void sub_1B2E2FF68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropInputIDInfo *OZImageElement::OZImageElement_dropInputIDInfo::OZImageElement_dropInputIDInfo(OZImageElement::OZImageElement_dropInputIDInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 7.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropInputIDInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658E580;
  *((_QWORD *)this + 10) = &unk_1E658E5A0;
  return this;
}

void sub_1B2E30010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropPanImpl::getInstance(OZImageElement::OZImageElement_dropPanImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::OZImageElement_dropPanImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::OZImageElement_dropPanImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropPanImpl::_OZImageElement_dropPan;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_dropPanImpl *v0;

  if (!OZImageElement::OZImageElement_dropPanImpl::_OZImageElement_dropPan)
  {
    v0 = (OZImageElement::OZImageElement_dropPanImpl *)operator new();
    OZImageElement::OZImageElement_dropPanImpl::OZImageElement_dropPanImpl(v0);
    OZImageElement::OZImageElement_dropPanImpl::_OZImageElement_dropPan = (uint64_t)v0;
  }
}

void sub_1B2E300DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropPanImpl *OZImageElement::OZImageElement_dropPanImpl::OZImageElement_dropPanImpl(OZImageElement::OZImageElement_dropPanImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropPanImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658E5F8;
  *((_QWORD *)this + 5) = &unk_1E658E618;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E30190(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropPanInfo::getInstance(OZImageElement::OZImageElement_dropPanInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::OZImageElement_dropPanInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::OZImageElement_dropPanInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropPanInfo::_OZImageElement_dropPanInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_dropPanInfo *v0;

  if (!OZImageElement::OZImageElement_dropPanInfo::_OZImageElement_dropPanInfo)
  {
    v0 = (OZImageElement::OZImageElement_dropPanInfo *)operator new();
    OZImageElement::OZImageElement_dropPanInfo::OZImageElement_dropPanInfo(v0);
    OZImageElement::OZImageElement_dropPanInfo::_OZImageElement_dropPanInfo = (uint64_t)v0;
  }
}

void sub_1B2E3025C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropPanInfo *OZImageElement::OZImageElement_dropPanInfo::OZImageElement_dropPanInfo(OZImageElement::OZImageElement_dropPanInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -500.0, 500.0, 5.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropPanInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658E670;
  *((_QWORD *)this + 10) = &unk_1E658E690;
  return this;
}

void sub_1B2E3030C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropScaleImpl::getInstance(OZImageElement::OZImageElement_dropScaleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::OZImageElement_dropScaleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::OZImageElement_dropScaleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropScaleImpl::_OZImageElement_dropScale;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_dropScaleImpl *v0;

  if (!OZImageElement::OZImageElement_dropScaleImpl::_OZImageElement_dropScale)
  {
    v0 = (OZImageElement::OZImageElement_dropScaleImpl *)operator new();
    OZImageElement::OZImageElement_dropScaleImpl::OZImageElement_dropScaleImpl(v0);
    OZImageElement::OZImageElement_dropScaleImpl::_OZImageElement_dropScale = (uint64_t)v0;
  }
}

void sub_1B2E303D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropScaleImpl *OZImageElement::OZImageElement_dropScaleImpl::OZImageElement_dropScaleImpl(OZImageElement::OZImageElement_dropScaleImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 1.0, 0, 1);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropScaleImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E658E6E8;
  *((_QWORD *)this + 5) = &unk_1E658E708;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2E3048C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(OZImageElement::OZImageElement_dropFillOpaqueImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::OZImageElement_dropFillOpaqueImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::OZImageElement_dropFillOpaqueImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropFillOpaqueImpl::_OZImageElement_dropFillOpaque;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBool *v0;

  if (!OZImageElement::OZImageElement_dropFillOpaqueImpl::_OZImageElement_dropFillOpaque)
  {
    v0 = (OZChannelBool *)operator new();
    OZImageElement::OZImageElement_dropFillOpaqueImpl::OZImageElement_dropFillOpaqueImpl(v0);
    OZImageElement::OZImageElement_dropFillOpaqueImpl::_OZImageElement_dropFillOpaque = (uint64_t)v0;
  }
}

void sub_1B2E30558(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelBool *OZImageElement::OZImageElement_dropFillOpaqueImpl::OZImageElement_dropFillOpaqueImpl(OZChannelBool *this)
{
  OZCurve *OZChannelBoolCurve;

  OZChannelBoolCurve = (OZCurve *)OZChannelBool::createOZChannelBoolCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelBoolCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658E760;
  this->var5 = (PCString *)&unk_1E658E780;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.0);
  return this;
}

void sub_1B2E30604(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropWidthImpl::getInstance(OZImageElement::OZImageElement_dropWidthImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::OZImageElement_dropWidthImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::OZImageElement_dropWidthImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropWidthImpl::_OZImageElement_dropWidth;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZImageElement::OZImageElement_dropWidthImpl::_OZImageElement_dropWidth)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZImageElement::OZImageElement_dropWidthImpl::OZImageElement_dropWidthImpl(v0);
    OZImageElement::OZImageElement_dropWidthImpl::_OZImageElement_dropWidth = (uint64_t)v0;
  }
}

void sub_1B2E306D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZImageElement::OZImageElement_dropWidthImpl::OZImageElement_dropWidthImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658E7D8;
  this->var5 = (PCString *)&unk_1E658E7F8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 1.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E30780(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropWidthInfo::getInstance(OZImageElement::OZImageElement_dropWidthInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::OZImageElement_dropWidthInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::OZImageElement_dropWidthInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropWidthInfo::_OZImageElement_dropWidthInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_dropWidthInfo *v0;

  if (!OZImageElement::OZImageElement_dropWidthInfo::_OZImageElement_dropWidthInfo)
  {
    v0 = (OZImageElement::OZImageElement_dropWidthInfo *)operator new();
    OZImageElement::OZImageElement_dropWidthInfo::OZImageElement_dropWidthInfo(v0);
    OZImageElement::OZImageElement_dropWidthInfo::_OZImageElement_dropWidthInfo = (uint64_t)v0;
  }
}

void sub_1B2E3084C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropWidthInfo *OZImageElement::OZImageElement_dropWidthInfo::OZImageElement_dropWidthInfo(OZImageElement::OZImageElement_dropWidthInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 4294967300.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropWidthInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658E850;
  *((_QWORD *)this + 10) = &unk_1E658E870;
  return this;
}

void sub_1B2E308F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropHeightImpl::getInstance(OZImageElement::OZImageElement_dropHeightImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::OZImageElement_dropHeightImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::OZImageElement_dropHeightImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropHeightImpl::_OZImageElement_dropHeight;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelUint32 *v0;

  if (!OZImageElement::OZImageElement_dropHeightImpl::_OZImageElement_dropHeight)
  {
    v0 = (OZChannelUint32 *)operator new();
    OZImageElement::OZImageElement_dropHeightImpl::OZImageElement_dropHeightImpl(v0);
    OZImageElement::OZImageElement_dropHeightImpl::_OZImageElement_dropHeight = (uint64_t)v0;
  }
}

void sub_1B2E309C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

OZChannelUint32 *OZImageElement::OZImageElement_dropHeightImpl::OZImageElement_dropHeightImpl(OZChannelUint32 *this)
{
  OZCurve *OZChannelUint32Curve;

  OZChannelUint32Curve = (OZCurve *)OZChannelUint32::createOZChannelUint32Curve(this, 1.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelUint32Curve, 1.0, 1, 1);
  PCSingleton::PCSingleton((PCSingleton *)&this->var5, 50);
  this->var0 = (void **)&unk_1E658E8C8;
  this->var5 = (PCString *)&unk_1E658E8E8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 1.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2E30A74(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropHeightInfo::getInstance(OZImageElement::OZImageElement_dropHeightInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::OZImageElement_dropHeightInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::OZImageElement_dropHeightInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropHeightInfo::_OZImageElement_dropHeightInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement::OZImageElement_dropHeightInfo *v0;

  if (!OZImageElement::OZImageElement_dropHeightInfo::_OZImageElement_dropHeightInfo)
  {
    v0 = (OZImageElement::OZImageElement_dropHeightInfo *)operator new();
    OZImageElement::OZImageElement_dropHeightInfo::OZImageElement_dropHeightInfo(v0);
    OZImageElement::OZImageElement_dropHeightInfo::_OZImageElement_dropHeightInfo = (uint64_t)v0;
  }
}

void sub_1B2E30B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropHeightInfo *OZImageElement::OZImageElement_dropHeightInfo::OZImageElement_dropHeightInfo(OZImageElement::OZImageElement_dropHeightInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 4294967300.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropHeightInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E658E940;
  *((_QWORD *)this + 10) = &unk_1E658E960;
  return this;
}

void sub_1B2E30BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

CGColorSpace **PCGetColorInColorSpace<unsigned char,unsigned char>(CGColorSpace *a1, unsigned int a2, CGColorSpace *a3, unsigned int a4, CGColorSpace *a5, _BYTE *a6, _BYTE *a7, _BYTE *a8)
{
  unsigned int v13;
  CGColorSpace **result;
  int v17;
  float v18;
  char v19;
  int v20;
  float v21;
  char v22;
  int v23;
  float v24;
  char v25;
  float v26;
  uint64_t v27;
  PCColor v28;

  v13 = a3;
  result = (CGColorSpace **)PCColorSpaceHandle::isSameColorSpace(a1, a5, a3);
  if ((_DWORD)result)
  {
    *a6 = a2;
    *a7 = v13;
    *a8 = a4;
  }
  else
  {
    PCColor::PCColor(&v28, (float)a2 / 255.0, (float)v13 / 255.0, (float)a4 / 255.0, a1);
    v27 = 0;
    v26 = 0.0;
    PCColor::getRGB(&v28, (float *)&v27 + 1, (float *)&v27, &v26, a5);
    v17 = vcvtmd_s64_f64((float)(*((float *)&v27 + 1) * 255.0) + 0.5 + 0.0000001);
    v18 = (float)v17;
    if ((float)v17 > 255.0)
      v18 = 255.0;
    if (v17 >= 0)
      v19 = (int)v18;
    else
      v19 = 0;
    *a6 = v19;
    v20 = vcvtmd_s64_f64((float)(*(float *)&v27 * 255.0) + 0.5 + 0.0000001);
    v21 = (float)v20;
    if ((float)v20 > 255.0)
      v21 = 255.0;
    if (v20 >= 0)
      v22 = (int)v21;
    else
      v22 = 0;
    *a7 = v22;
    v23 = vcvtmd_s64_f64((float)(v26 * 255.0) + 0.5 + 0.0000001);
    v24 = (float)v23;
    if ((float)v23 > 255.0)
      v24 = 255.0;
    if (v23 >= 0)
      v25 = (int)v24;
    else
      v25 = 0;
    *a8 = v25;
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v28.var1._obj);
  }
  return result;
}

void sub_1B2E30D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E658F178;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1B2E30E10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t PMFrameRequest::PMFrameRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  v5 = *(_OWORD *)(a2 + 120);
  v6 = *(_OWORD *)(a2 + 136);
  v7 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 165) = *(_QWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  v8 = *(CGColorSpace **)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v8;
  if (v8)
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  v9 = *(CGColorSpace **)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v9;
  if (v9)
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  v10 = *(_OWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 192) = v10;
  return a1;
}

void sub_1B2E30F70(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate(OZRetimingUtil::RetimingExaminer *a1)
{
  OZRetimingUtil::RetimingExaminer::~RetimingExaminer(a1);
  JUMPOUT(0x1B5E29170);
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimingGroupChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (v3)
      return v3 + 18264;
    else
      return 0;
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimeScaleChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 20632;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimeReverseChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 20784;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimeRemapChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 20936;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getRetimeFrameChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 21192;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getRetimeFrameCacheChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 21344;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getEndConditionChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 21752;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getLoopDurationChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 22008;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getDurationCacheChannel(uint64_t a1, uint64_t a2)
{
  char *result;
  char *v3;

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result))
        return 0;
      else
        return v3 + 22160;
    }
  }
  return result;
}

char *std::vector<OZPtcDecisionInfo>::__assign_with_size[abi:ne180100]<OZPtcDecisionInfo*,OZPtcDecisionInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    result = std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4)
    goto LABEL_16;
  v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CMTime *>,std::__wrap_iter<CMTime *>,CMTime,std::__identity,std::__less<void,void>>(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  __int128 v7;
  int32_t v8;
  CMTime v10;
  CMTime time1;

  v3 = a1;
  if (a2 != a1)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
    do
    {
      v6 = (__int128 *)(v3 + 24 * (v5 >> 1));
      v7 = *v6;
      time1.epoch = *((_QWORD *)v6 + 2);
      *(_OWORD *)&time1.value = v7;
      v10 = *a3;
      v8 = CMTimeCompare(&time1, &v10);
      if (v8 >= 0)
        v5 >>= 1;
      else
        v5 += ~(v5 >> 1);
      if (v8 < 0)
        v3 = (uint64_t)v6 + 24;
    }
    while (v5);
  }
  return v3;
}

void std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<FxBalancedBlendRecord>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<FxBalancedBlendRecord>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 16)
  {
    v5 = *(_QWORD **)(i - 16);
    result = v5;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::vector<FxBalancedBlendRecord>::__push_back_slow_path<FxBalancedBlendRecord const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[16 * v9];
  v12 = *a2;
  *(_QWORD *)v11 = *a2;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    v13 = v17;
  }
  else
  {
    v13 = v11;
  }
  *((_QWORD *)v11 + 1) = a2[1];
  v17 = v13 + 16;
  std::vector<FxBalancedBlendRecord>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer(v16);
  return v14;
}

void sub_1B2E31664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<FxBalancedBlendRecord>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v12 = *(_QWORD *)(v10 - 16);
      v10 -= 16;
      v11 = v12;
      *(_QWORD *)(v7 - 16) = v12;
      v13 = v7;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        v13 = *((_QWORD *)&v19 + 1);
      }
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 - 8);
      v7 = v13 - 16;
      *((_QWORD *)&v19 + 1) = v13 - 16;
      v9 = v10;
    }
    while (v10 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1B2E317AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<std::reverse_iterator<FxBalancedBlendRecord*>>,std::reverse_iterator<std::reverse_iterator<FxBalancedBlendRecord*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<std::reverse_iterator<FxBalancedBlendRecord*>>,std::reverse_iterator<std::reverse_iterator<FxBalancedBlendRecord*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *i;

  for (i = *(_QWORD **)(a2 + 32); i != *(_QWORD **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*i)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      i = *(_QWORD **)(a2 + 32);
    }
    i += 2;
  }
}

void **std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer(void **a1)
{
  std::__split_buffer<FxBalancedBlendRecord>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<FxBalancedBlendRecord>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD **)(v2 - 16);
      v2 -= 16;
      result = v5;
      v4[2] = v2;
      if (v5)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
        v2 = v4[2];
      }
    }
    while (v2 != a2);
  }
  return result;
}

void makeBalancedBlendTree_RetimeAddBlend6<std::__wrap_iter<FxBalancedBlendRecord *>>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  float InitialValue;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  FxBalancedBlendRecord *v27;
  float v28;
  HgcRetimeAddBlend6 *v29;
  int v30;
  HGNode *v31;
  _BOOL4 v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD **v35;
  int v36;
  HgcRetimeAddBlend6 *v37;
  HgcRetimeAddBlend6 *v38;
  uint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  double v42[3];

  v33 = a3;
  v42[2] = *(double *)MEMORY[0x1E0C80C00];
  v40 = 0;
  v41 = 0;
  v39 = (uint64_t *)&v40;
  *(_QWORD *)&v42[0] = &v39;
  *(_QWORD *)&v42[1] = &v40;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      v5 = std::insert_iterator<std::multiset<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>>::operator=[abi:ne180100]((uint64_t)v42, v4);
      v4 += 2;
    }
    while (v4 != a2);
    v6 = v41;
    if (v41 >= 2)
    {
      v34 = v41 - 5 * (v41 / 6);
      v7 = 1;
      do
      {
        v8 = v39;
        if (v6 >= 6)
          v9 = 6;
        else
          v9 = v6;
        v10 = 16 * v9;
        MEMORY[0x1E0C80A78](v5);
        v11 = &(&v33)[-2 * v9];
        v12 = 0;
        do
        {
          PCSharedCount::PCSharedCount((PCSharedCount *)&v11[v12 / 8]);
          v12 += 16;
        }
        while (v10 != v12);
        v35 = &v33;
        v36 = v7;
        MEMORY[0x1E0C80A78](v13);
        v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        v16 = 0;
        if (v9 <= 1)
          v17 = 1;
        else
          v17 = v9;
        v18 = 0.0;
        do
        {
          v19 = v8[4];
          v20 = (uint64_t *)&v11[2 * v16];
          v21 = *v20;
          if (*v20 != v19)
          {
            if (v21)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(*v20);
              v19 = v8[4];
            }
            *v20 = v19;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
          }
          v20[1] = v8[5];
          InitialValue = OZConstantNode::getInitialValue((OZConstantNode *)(v8 + 4));
          *(float *)&v15[4 * v16] = InitialValue;
          v23 = (uint64_t *)v8[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (uint64_t *)v8[2];
              v25 = *v24 == (_QWORD)v8;
              v8 = v24;
            }
            while (!v25);
          }
          v18 = v18 + InitialValue;
          ++v16;
          v8 = v24;
        }
        while (v16 != v17);
        FxSupport::makeRetimeAddBlend6(&v38);
        v26 = 0;
        v27 = (FxBalancedBlendRecord *)&(&v33)[-2 * v9];
        do
        {
          v28 = *(float *)&v15[4 * v26];
          v29 = v38;
          FxBalancedBlendRecord::node(v27, v42);
          (*(void (**)(HgcRetimeAddBlend6 *, uint64_t, _QWORD))(*(_QWORD *)v29 + 120))(v29, v26, *(_QWORD *)&v42[0]);
          if (*(_QWORD *)&v42[0])
            (*(void (**)(_QWORD))(**(_QWORD **)&v42[0] + 24))(*(_QWORD *)&v42[0]);
          (*(void (**)(HgcRetimeAddBlend6 *, uint64_t, float, float, float, float))(*(_QWORD *)v38 + 96))(v38, v26, v28 / v18, v28 / v18, v28 / v18, v28 / v18);
          std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::erase(&v39, v39);
          ++v26;
          v27 = (FxBalancedBlendRecord *)((char *)v27 + 16);
        }
        while (v17 != v26);
        v30 = v36;
        if (v9 <= 5)
        {
          do
          {
            v31 = (HGNode *)HGObject::operator new(0x1A0uLL);
            HGNode::HGNode(v31);
            (*(void (**)(HgcRetimeAddBlend6 *, unint64_t, HGNode *))(*(_QWORD *)v38 + 120))(v38, v9, v31);
            (*(void (**)(HgcRetimeAddBlend6 *, unint64_t, float, float, float, float))(*(_QWORD *)v38 + 96))(v38, v9, 0.0, 0.0, 0.0, 0.0);
            if (v31)
              (*(void (**)(HGNode *))(*(_QWORD *)v31 + 24))(v31);
            v9 = (v9 + 1);
          }
          while ((_DWORD)v9 != 6);
        }
        if ((v30 & 1) != 0)
          (*(void (**)(HgcRetimeAddBlend6 *, uint64_t, uint64_t))(*(_QWORD *)v38 + 136))(v38, 0xFFFFFFFFLL, 2);
        v37 = v38;
        if (v38)
          (*(void (**)(HgcRetimeAddBlend6 *))(*(_QWORD *)v38 + 16))(v38);
        FxBalancedBlendRecord::FxBalancedBlendRecord((uint64_t)v42, (uint64_t *)&v37, v18);
        if (v37)
          (*(void (**)(HgcRetimeAddBlend6 *))(*(_QWORD *)v37 + 24))(v37);
        std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_multi<FxBalancedBlendRecord const&>(&v39, v42);
        v32 = v41 > v34;
        if (*(_QWORD *)&v42[0])
          (*(void (**)(_QWORD))(**(_QWORD **)&v42[0] + 24))(*(_QWORD *)&v42[0]);
        if (v38)
          (*(void (**)(HgcRetimeAddBlend6 *))(*(_QWORD *)v38 + 24))(v38);
        v7 = v32 & v30;
        do
        {
          v5 = (uint64_t)v11[(unint64_t)v10 / 8 - 2];
          if (v5)
            v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
          v10 -= 16;
        }
        while (v10);
        v6 = v41;
      }
      while (v41 > 1);
    }
  }
  FxBalancedBlendRecord::node((FxBalancedBlendRecord *)(v39 + 4), v33);
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy((uint64_t)&v39, v40);
}

void sub_1B2E31D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(v1 - 144, *(_QWORD **)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t std::insert_iterator<std::multiset<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>>::operator=[abi:ne180100](uint64_t a1, double *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_hint_multi<FxBalancedBlendRecord const&>(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_hint_multi<FxBalancedBlendRecord const&>(uint64_t **a1, _QWORD *a2, double *a3)
{
  uint64_t **leaf;
  uint64_t v7;
  uint64_t *v8;

  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__construct_node<FxBalancedBlendRecord const&>((uint64_t)a1, a3, (uint64_t)&v8);
  leaf = (uint64_t **)std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf(a1, a2, &v7, (OZConstantNode *)(v8 + 4));
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v7, leaf, v8);
  return v8;
}

void sub_1B2E31F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

double std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__construct_node<FxBalancedBlendRecord const&>@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double *v6;
  double v7;
  double result;

  v5 = a1 + 8;
  v6 = (double *)operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  v6[4] = *a2;
  if (v7 != 0.0)
    (*(void (**)(double))(**(_QWORD **)&v7 + 16))(COERCE_DOUBLE(*(_QWORD *)&v7));
  result = a2[1];
  v6[5] = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2E32020(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf(_QWORD *a1, _QWORD *a2, _QWORD *a3, OZConstantNode *this)
{
  _QWORD *v6;
  double InitialValue;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  double v14;

  v6 = a2;
  if (a1 + 1 != a2)
  {
    InitialValue = OZConstantNode::getInitialValue((OZConstantNode *)(a2 + 4));
    if (InitialValue < OZConstantNode::getInitialValue(this))
      return std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_low((uint64_t)a1, a3, this);
  }
  if ((_QWORD *)*a1 == v6)
  {
    v11 = v6;
  }
  else
  {
    v10 = (_QWORD *)*v6;
    if (*v6)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[1];
      }
      while (v10);
    }
    else
    {
      v12 = v6;
      do
      {
        v11 = (_QWORD *)v12[2];
        v13 = *v11 == (_QWORD)v12;
        v12 = v11;
      }
      while (v13);
    }
    v14 = OZConstantNode::getInitialValue(this);
    if (v14 < OZConstantNode::getInitialValue((OZConstantNode *)(v11 + 4)))
      return std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_high((uint64_t)a1, a3, this);
  }
  if (*v6)
  {
    *a3 = v11;
    return v11 + 1;
  }
  else
  {
    *a3 = v6;
  }
  return v6;
}

_QWORD *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_high(uint64_t a1, _QWORD *a2, OZConstantNode *this)
{
  _QWORD *v4;
  _QWORD *v5;
  OZConstantNode *v7;
  double InitialValue;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = v4;
        v7 = (OZConstantNode *)(v4 + 4);
        InitialValue = OZConstantNode::getInitialValue(this);
        if (InitialValue >= OZConstantNode::getInitialValue(v7))
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_low(uint64_t a1, _QWORD *a2, OZConstantNode *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  double InitialValue;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = v4;
        InitialValue = OZConstantNode::getInitialValue((OZConstantNode *)(v4 + 4));
        if (InitialValue < OZConstantNode::getInitialValue(a3))
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[4];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, a2);
  v4 = a2[4];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  operator delete(a2);
  return v3;
}

uint64_t *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_multi<FxBalancedBlendRecord const&>(uint64_t **a1, double *a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__construct_node<FxBalancedBlendRecord const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_high((uint64_t)a1, &v5, (OZConstantNode *)(v6 + 4));
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_1B2E3236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(a1, *a2);
    std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(a1, a2[1]);
    v4 = a2[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

uint64_t *OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

_QWORD *OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

void std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(a1, a2[1]);
    v4 = a2[6];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    operator delete(a2);
  }
}

uint64_t PCThreadSpecific<HGLazyPDFBitmapLoaderCache>::destroy(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = (_QWORD *)(result + 8);
    std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(result, *(_QWORD **)(result + 8));
    *v1 = v2;
    v1[2] = 0;
    *v2 = 0;
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void sub_1B2E32C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v11 - 56);
  _Unwind_Resume(a1);
}

void sub_1B2E32CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2E33118(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 104);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZ3DEngineSceneElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E331BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *result;
  const void *v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = 0u;
  while (1)
  {
    result = OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment((_QWORD *)a1);
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 16))
      break;
    v4 = *(const void **)(*(_QWORD *)a1 + 16);
    if (v4)
    {
      if (result)
        break;
    }
  }
  return result;
}

void sub_1B2E33268(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1B2E33474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void sub_1B2E335E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  uint64_t v10;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 48));
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

_QWORD *OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

BOOL OZImageElement::hasSourceObjectForTime(OZImageElement *this, CMTime *a2)
{
  _BOOL8 result;

  result = OZImageElement::isDropZone(this);
  if (result)
    return *(_BYTE *)(theApp + 81) && !OZImageElement::isBackgroundDropZone(this);
  return result;
}

uint64_t OZImageElement::openMedia(OZImageElement *this)
{
  OZFootage *Footage;
  OZFootage *v3;
  uint64_t v4;
  _BOOL4 v5;

  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (!Footage)
    return 0;
  v3 = Footage;
  if (*((_QWORD *)Footage + 1009)
    || (!(*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this)
     || !*(_QWORD *)((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this) + 1584)
      ? (v5 = 0)
      : (v5 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this) + 1584)
                       + 160) != 0),
        OZImageElement::isBackgroundDropZone(this) && (v5 | OZImageElement::isDropZoneReplaced((OZChannel *)this)) != 1))
  {
    v4 = 0;
  }
  else
  {
    v4 = (*(uint64_t (**)(OZFootage *))(*(_QWORD *)v3 + 104))(v3);
  }
  OZImageElement::updatePropertiesFromFootage(this, v3);
  return v4;
}

CGColorSpace **OZImageElement::appendFillOpaqueNodes@<X0>(uint64_t a1@<X0>, HGHWMultiBlend **a2@<X1>, uint64_t a3@<X2>, FxColorDescription *a4@<X3>, double *a5@<X4>, HGHWMultiBlend **a6@<X8>)
{
  HGHWMultiBlend *v12;
  double Color;
  HGHWMultiBlend *v19;
  HGHWMultiBlend *v20;
  HGHWMultiBlend *v21;
  HGHWMultiBlend *v22;
  HGHWMultiBlend *v24;
  HGHWMultiBlend *v25;
  HGHWMultiBlend *v26;
  _BYTE v27[32];
  PCColor v28;

  v12 = *a2;
  *a6 = *a2;
  if (v12)
    (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v12 + 16))(v12);
  PCColor::PCColor(&v28);
  *(_OWORD *)v27 = *(_OWORD *)a3;
  *(_QWORD *)&v27[16] = *(_QWORD *)(a3 + 16);
  Color = OZChannelColor::getColor((OZChannelColor *)(a1 + 27880), (const CMTime *)v27, &v28, 0.0);
  if (a5)
  {
    *(_OWORD *)v27 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v27[16] = _Q0;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 1488))(a1, v27, a3);
    if (PCMatrix44Tmpl<double>::transformRect<double>(a5, (double *)v27, (uint64_t)v27))
    {
      v19 = *a2;
      v25 = v19;
      if (v19)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v19 + 16))(v19);
      appendFillOpaqueNodesHelper(&v28, a4, &v25, (double *)v27, &v26);
      v20 = v26;
      if (v12 == v26)
      {
        if (v12)
          (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v12 + 24))(v12);
      }
      else
      {
        if (v12)
          (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v12 + 24))(v12);
        *a6 = v20;
        v26 = 0;
      }
      if (v19)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v19 + 24))(v19);
    }
  }
  else
  {
    v21 = *a2;
    v24 = v21;
    if (v21)
      (*(void (**)(HGHWMultiBlend *, double))(*(_QWORD *)v21 + 16))(v21, Color);
    appendFillOpaqueNodesHelper(&v28, a4, &v24, 0, (HGHWMultiBlend **)v27);
    v22 = *(HGHWMultiBlend **)v27;
    if (v12 == *(HGHWMultiBlend **)v27)
    {
      if (v12)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v12 + 24))(v12);
    }
    else
    {
      if (v12)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v12 + 24))(v12);
      *a6 = v22;
      *(_QWORD *)v27 = 0;
    }
    if (v21)
      (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v21 + 24))(v21);
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v28.var1._obj);
}

void sub_1B2E33CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a16);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  _Unwind_Resume(a1);
}

uint64_t appendFillOpaqueNodesHelper@<X0>(PCColor *a1@<X1>, FxColorDescription *this@<X2>, _QWORD *a3@<X0>, double *a4@<X3>, HGHWMultiBlend **a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  HGSolidColor *v11;
  HGHWMultiBlend *v12;
  uint64_t v14;
  uint64_t v15;
  HGRect v16;

  v14 = 0;
  v15 = 0;
  FxGetRGBAForRenderingCGI(a1, this, (float *)&v15 + 1, (float *)&v15, (float *)&v14 + 1, (float *)&v14);
  if (a4)
  {
    v8 = HGRectMake4i((int)*a4, (int)a4[1], (int)a4[2] + (int)*a4, (int)a4[3] + (int)a4[1]);
    v10 = v9;
    v11 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    *(_QWORD *)&v16.var0 = v8;
    *(_QWORD *)&v16.var2 = v10;
    HGSolidColor::HGSolidColor(v11, v16);
  }
  else
  {
    v11 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v11);
  }
  (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v11 + 96))(v11, 0, *((float *)&v15 + 1), *(float *)&v15, *((float *)&v14 + 1), *(float *)&v14);
  v12 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v12);
  (*(void (**)(HGHWMultiBlend *, _QWORD, HGSolidColor *, uint64_t, float))(*(_QWORD *)v12 + 624))(v12, 0, v11, 9, 1.0);
  (*(void (**)(HGHWMultiBlend *, uint64_t, _QWORD, uint64_t, float))(*(_QWORD *)v12 + 624))(v12, 1, *a3, 9, 1.0);
  *a5 = v12;
  return (*(uint64_t (**)(HGSolidColor *))(*(_QWORD *)v11 + 24))(v11);
}

void sub_1B2E33EAC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void OZImageElement::getHeliumGraph(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  OZFootage *Footage;
  CGColorSpace *WorkingColorSpace;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGColorSpace *v20;
  unsigned int v21;
  uint64_t v22;
  CGColorSpace *v23;
  CGColorSpace *obj;
  unsigned int PVInputIndex;
  int ValueAsInt;
  HGHWMultiBlend *v27;
  uint64_t i;
  __n128 *v29;
  __n128 v30;
  CGColorSpace *CGColorSpace;
  FxColorDescription *WorkingColorDescription;
  HGHWMultiBlend *v33;
  HGHWMultiBlend *v34;
  HGHWMultiBlend *v35;
  FxColorDescription *v36;
  uint64_t v37;
  int v43;
  CGColorSpace *v44;
  _BOOL4 isDropZone;
  _BOOL4 v46;
  CGColorSpace *v47;
  uint64_t DynamicRange;
  const PCToneMapMethod *ToneMapMethod;
  double v50;
  double v51;
  const void *v52;
  const void *v53;
  HGHWMultiBlend *v54;
  CGColorSpace *v55;
  HGNode *v56;
  CGColorSpace *v57;
  FxColorDescription *v58;
  HGHWMultiBlend *v59;
  int v60;
  HGHWMultiBlend *v62;
  _BYTE v63[40];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  FxColorDescription v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  CGColorSpace *v97;
  __int16 v98;
  uint64_t v99;
  char v100;
  int v101;
  char v102;
  uint64_t v103;
  __int128 v104;
  OZRenderParams *v105;
  HGHWMultiBlend *v106;
  HGHWMultiBlend *v107;
  FxColorDescription v108;

  Footage = (OZFootage *)OZImageElement::getFootage((OZImageElement *)a1);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  if (!Footage && OZImageElement::isDropZone((OZImageElement *)a1))
  {
    if (!FxColorDescription::getCGColorSpace((FxColorDescription *)a4))
      FxColorDescription::setCGColorSpace((FxColorDescription *)a4, WorkingColorSpace);
    OZImageElement::createDropZoneGridHeliumGraph((_anonymous_namespace_ *)a2, a3, (FxColorDescription *)a4, (uint64_t)a5, a6);
    return;
  }
  v107 = 0;
  if (!OZImageElement::isDropZone((OZImageElement *)a1))
    goto LABEL_63;
  if (*(_QWORD *)(a1 + 30272))
  {
    v20 = *(CGColorSpace **)a4;
    *(_QWORD *)&v74 = v20;
    if (v20)
      PCCFRefTraits<CGColorSpace *>::retain(v20);
    *((_QWORD *)&v74 + 1) = *(_QWORD *)(a4 + 8);
    LODWORD(v75) = *(_DWORD *)(a4 + 16);
    LOBYTE(v76) = *(_BYTE *)(a4 + 24);
    PCPrint("File %s, line %d should not have been reached:\n\t", v13, v14, v15, v16, v17, v18, v19, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageElement.mm");
    pcAbortImpl();
  }
  if (!OZImageElement::isBackgroundDropZone((OZImageElement *)a1))
  {
    PVInputIndex = OZImageElement::getDropZoneType((OZImageElement *)a1) == 2;
    if (OZImageElement::isPassthroughPlaceholder((OZImageElement *)a1))
      PVInputIndex = OZRenderParams::getPVInputIndex((OZRenderParams *)a2, *(_DWORD *)(a1 + 80));
    if (OZImageElement::resizeToMatchInputSource((OZImageElement *)a1))
      PVInputIndex = 0;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 27728), MEMORY[0x1E0CA2E68], 0.0);
    v108._pcColorDesc._colorSpaceRef._obj = *(CGColorSpace **)a4;
    if (v108._pcColorDesc._colorSpaceRef._obj)
      PCCFRefTraits<CGColorSpace *>::retain(v108._pcColorDesc._colorSpaceRef._obj);
    *(_QWORD *)&v108._pcColorDesc._dynamicRange = *(_QWORD *)(a4 + 8);
    v108._pcColorDesc._toneMapMethod._gain = *(float *)(a4 + 16);
    v108._isPremultiplied = *(_BYTE *)(a4 + 24);
    if (ValueAsInt)
      FxColorDescription::setCGColorSpace(&v108, WorkingColorSpace);
    OZRenderParams::getFFInputNode((_QWORD *)a2, PVInputIndex, &v74);
    v27 = (HGHWMultiBlend *)v74;
    if (v107 == (HGHWMultiBlend *)v74)
    {
      if (!v107 || ((*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107), v60 = ValueAsInt, !v107))
      {
LABEL_61:
        v36 = &v108;
LABEL_62:
        PCCFRef<CGColorSpace *>::~PCCFRef(&v36->_pcColorDesc._colorSpaceRef._obj);
        goto LABEL_63;
      }
    }
    else
    {
      if (v107)
      {
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
        v27 = (HGHWMultiBlend *)v74;
      }
      v60 = ValueAsInt;
      v107 = v27;
      if (!v27)
        goto LABEL_61;
    }
    OZRenderParams::getFFInputPixelTransform((OZRenderParams *)a2, PVInputIndex, (uint64_t)&v74);
    if (&v74 != (__int128 *)a5)
    {
      for (i = 0; i != 8; i += 2)
      {
        v29 = &a5[i];
        v30 = *(__n128 *)((char *)&v74 + i * 16 + 16);
        *v29 = *(__n128 *)((char *)&v74 + i * 16);
        v29[1] = v30;
      }
    }
    OZPlaybackEngine::OZPlaybackEngine(v63, 0);
    if (OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), v63))
      PCMatrix44Tmpl<double>::rightScale(a5->n128_f64, *(double *)(a2 + 1072), *(double *)(a2 + 1072), 1.0);
    if (!FxColorDescription::getCGColorSpace((FxColorDescription *)a4))
      FxColorDescription::setCGColorSpace((FxColorDescription *)a4, WorkingColorSpace);
    if (!FxColorDescription::getCGColorSpace(&v108))
    {
      CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)a4);
      FxColorDescription::setCGColorSpace(&v108, CGColorSpace);
    }
    WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
    FxApplyColorConform((uint64_t *)&v107, WorkingColorDescription, &v108, (uint64_t *)v63);
    v33 = *(HGHWMultiBlend **)v63;
    if (v107 == *(HGHWMultiBlend **)v63)
    {
      if (v107)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
    }
    else
    {
      if (v107)
      {
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
        v33 = *(HGHWMultiBlend **)v63;
      }
      v107 = v33;
    }
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a4, &v108._pcColorDesc._colorSpaceRef._obj);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)&v108._pcColorDesc._dynamicRange;
    *(float *)(a4 + 16) = v108._pcColorDesc._toneMapMethod._gain;
    *(_BYTE *)(a4 + 24) = v108._isPremultiplied;
    v34 = v107;
    if (v107)
    {
      if (v60)
      {
        v106 = v107;
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 16))(v107);
        OZImageElement::appendFillOpaqueNodes(a1, &v106, a2, &v108, a5->n128_f64, (HGHWMultiBlend **)&v74);
        v35 = (HGHWMultiBlend *)v74;
        if (v107 == (HGHWMultiBlend *)v74)
        {
          if (v107)
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
        }
        else
        {
          if (v107)
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
          v107 = v35;
          *(_QWORD *)&v74 = 0;
        }
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v34 + 24))(v34);
        FxApplyColorConform((uint64_t *)&v107, &v108, (FxColorDescription *)a4, (uint64_t *)&v74);
        v59 = (HGHWMultiBlend *)v74;
        if (v107 == (HGHWMultiBlend *)v74)
        {
          if (v107)
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
        }
        else
        {
          if (v107)
          {
            (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
            v59 = (HGHWMultiBlend *)v74;
          }
          v107 = v59;
        }
      }
      OZPlaybackEngine::OZPlaybackEngine(&v74, 0);
      if (OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), &v74))
        OZImageElement::isEffectSource((OZImageElement *)a1);
      *a6 = v107;
      v107 = 0;
      v58 = &v108;
      goto LABEL_108;
    }
    goto LABEL_61;
  }
  OZPlaybackEngine::OZPlaybackEngine(&v74, 1);
  if (OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), &v74)
    || (OZPlaybackEngine::OZPlaybackEngine(&v108, 0), OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), &v108)))
  {
    v21 = OZRenderParams::getPVInputIndex((OZRenderParams *)a2, *(_DWORD *)(a1 + 80));
    if (OZImageElement::resizeToMatchInputSource((OZImageElement *)a1))
      v21 = 0;
    if ((v21 & 0x80000000) == 0)
    {
      v22 = *(_QWORD *)(a2 + 992);
      if (v22)
      {
        if (v21 < *(_DWORD *)(v22 + 16))
        {
          v23 = *(CGColorSpace **)a4;
          *(_QWORD *)&v74 = v23;
          if (v23)
            PCCFRefTraits<CGColorSpace *>::retain(v23);
          *((_QWORD *)&v74 + 1) = *(_QWORD *)(a4 + 8);
          LODWORD(v75) = *(_DWORD *)(a4 + 16);
          LOBYTE(v76) = *(_BYTE *)(a4 + 24);
          OZImageElement::getHeliumGraphFromInputRef((OZRenderParams *)a2, a1, v21, (uint64_t)&v74, a5, (uint64_t *)&v108);
          obj = v108._pcColorDesc._colorSpaceRef._obj;
          if (v107 == v108._pcColorDesc._colorSpaceRef._obj)
          {
            if (!v107)
            {
LABEL_127:
              v36 = (FxColorDescription *)&v74;
              goto LABEL_62;
            }
            (*(void (**)(void))(*(_QWORD *)v107 + 24))();
            obj = v107;
          }
          else
          {
            if (v107)
            {
              (*(void (**)(void))(*(_QWORD *)v107 + 24))();
              obj = v108._pcColorDesc._colorSpaceRef._obj;
            }
            v107 = obj;
          }
          if (obj)
          {
            PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a4, (CGColorSpace **)&v74);
            *(_QWORD *)(a4 + 8) = *((_QWORD *)&v74 + 1);
            *(_DWORD *)(a4 + 16) = v75;
            *(_BYTE *)(a4 + 24) = v76;
            *a6 = v107;
            v107 = 0;
            v58 = (FxColorDescription *)&v74;
            goto LABEL_108;
          }
          goto LABEL_127;
        }
      }
    }
  }
LABEL_63:
  if (!Footage)
  {
    OZFootage::getErrorHeliumGraph((_anonymous_namespace_ *)a2, a3, (FxColorDescription *)a4, a6);
    goto LABEL_109;
  }
  v105 = 0;
  v74 = xmmword_1B30503B0;
  v75 = 0x3FF0000000000000;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0x3FF0000000000000;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v87 = 0;
  v84 = 0;
  v85 = 0;
  v83 = 0x3FF0000000000000;
  v86 = 0;
  v37 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v88 = *MEMORY[0x1E0CA2E68];
  v89 = v37;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0x100000000;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 768;
  v99 = 0x408F400000000000;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  v104 = _Q0;
  v73 = 0;
  OZImageElement::calculateFrameRequestSettings((OZImageElement *)a1, (const OZRenderParams *)a2, (FxColorDescription *)a4, Footage, &v105, (__n128 *)&v74, (float *)&v73 + 1, (float *)&v73);
  v43 = OZChannel::getValueAsInt((OZChannel *)(a1 + 27728), MEMORY[0x1E0CA2E68], 0.0);
  v44 = *(CGColorSpace **)a4;
  v72._pcColorDesc._colorSpaceRef._obj = v44;
  if (v44)
    PCCFRefTraits<CGColorSpace *>::retain(v44);
  *(_QWORD *)&v72._pcColorDesc._dynamicRange = *(_QWORD *)(a4 + 8);
  v72._pcColorDesc._toneMapMethod._gain = *(float *)(a4 + 16);
  v72._isPremultiplied = *(_BYTE *)(a4 + 24);
  isDropZone = OZImageElement::isDropZone((OZImageElement *)a1);
  if (v43)
    v46 = isDropZone;
  else
    v46 = 0;
  if (v46)
    FxColorDescription::setCGColorSpace(&v72, WorkingColorSpace);
  v71 = 0;
  OZImageElement::getRetimedHeliumGraph(a1, a2, Footage, v105, (uint64_t)&v74, a3, (double *)&v72, a5->n128_f64, &v108, &v71);
  v47 = v108._pcColorDesc._colorSpaceRef._obj;
  if (v107 == v108._pcColorDesc._colorSpaceRef._obj)
  {
    if (v107)
      (*(void (**)(void))(*(_QWORD *)v107 + 24))();
  }
  else
  {
    if (v107)
    {
      (*(void (**)(void))(*(_QWORD *)v107 + 24))();
      v47 = v108._pcColorDesc._colorSpaceRef._obj;
    }
    v107 = v47;
  }
  if (!FxColorDescription::getCGColorSpace((FxColorDescription *)a4))
  {
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a4, &v72._pcColorDesc._colorSpaceRef._obj);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)&v72._pcColorDesc._dynamicRange;
    *(float *)(a4 + 16) = v72._pcColorDesc._toneMapMethod._gain;
    *(_BYTE *)(a4 + 24) = v72._isPremultiplied;
  }
  DynamicRange = FxColorDescription::getDynamicRange(&v72);
  FxColorDescription::setDynamicRange(a4, DynamicRange);
  ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(&v72);
  FxColorDescription::setToneMapMethod((FxColorDescription *)a4, ToneMapMethod);
  if (!OZImageElement::isDropZone((OZImageElement *)a1))
    goto LABEL_104;
  v70 = 0x3FF0000000000000;
  v67 = 0x3FF0000000000000;
  v64 = 0x3FF0000000000000;
  *(_QWORD *)v63 = 0x3FF0000000000000;
  memset(&v63[8], 0, 32);
  v65 = 0u;
  v66 = 0u;
  v68 = 0u;
  v69 = 0u;
  OZImageElement::getDropZoneTransform((OZImageElement *)a1, (OZRenderState *)a2, (uint64_t)&v108);
  if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v63, (double *)&v108, 0.0))
  {
    v50 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1328))(a1);
    v51 = 1.0 / v50;
    if (1.0 / v50 != 1.0)
    {
      *(double *)v63 = v51 * *(double *)v63;
      *(double *)&v63[32] = v51 * *(double *)&v63[32];
      *(double *)&v66 = v51 * *(double *)&v66;
      *((double *)&v68 + 1) = v51 * *((double *)&v68 + 1);
    }
    if (v50 != 1.0)
    {
      *(float64x2_t *)v63 = vmulq_n_f64(*(float64x2_t *)v63, v50);
      *(float64x2_t *)&v63[16] = vmulq_n_f64(*(float64x2_t *)&v63[16], v50);
    }
    PCMatrix44Tmpl<double>::rightMult((uint64_t)a5, (double *)v63);
    if (v43)
    {
      v52 = (const void *)FxColorDescription::getCGColorSpace(&v72);
      CFShow(v52);
      v53 = (const void *)FxColorDescription::getCGColorSpace((FxColorDescription *)a4);
      CFShow(v53);
      v54 = v107;
      v62 = v107;
      if (v107)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 16))(v107);
      OZImageElement::appendFillOpaqueNodes(a1, &v62, a2, &v72, a5->n128_f64, &v108._pcColorDesc._colorSpaceRef._obj);
      v55 = v108._pcColorDesc._colorSpaceRef._obj;
      if (v107 == v108._pcColorDesc._colorSpaceRef._obj)
      {
        if (v107)
          (*(void (**)(void))(*(_QWORD *)v107 + 24))();
      }
      else
      {
        if (v107)
          (*(void (**)(void))(*(_QWORD *)v107 + 24))();
        v107 = v55;
        v108._pcColorDesc._colorSpaceRef._obj = 0;
      }
      if (v54)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v54 + 24))(v54);
      FxApplyColorConform((uint64_t *)&v107, &v72, (FxColorDescription *)a4, (uint64_t *)&v108);
      v57 = v108._pcColorDesc._colorSpaceRef._obj;
      if (v107 == v108._pcColorDesc._colorSpaceRef._obj)
      {
        if (v107)
          (*(void (**)(void))(*(_QWORD *)v107 + 24))();
      }
      else
      {
        if (v107)
        {
          (*(void (**)(void))(*(_QWORD *)v107 + 24))();
          v57 = v108._pcColorDesc._colorSpaceRef._obj;
        }
        v107 = v57;
      }
    }
LABEL_104:
    if (v105)
    {
      OZRenderParams::~OZRenderParams(v105);
      MEMORY[0x1B5E29170]();
    }
    *a6 = v107;
    v107 = 0;
    goto LABEL_107;
  }
  v56 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v56);
  *a6 = (HGBitmapLoader *)v56;
LABEL_107:
  PCCFRef<CGColorSpace *>::~PCCFRef(&v72._pcColorDesc._colorSpaceRef._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v97);
  v58 = (FxColorDescription *)&v96;
LABEL_108:
  PCCFRef<CGColorSpace *>::~PCCFRef(&v58->_pcColorDesc._colorSpaceRef._obj);
LABEL_109:
  if (v107)
    (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v107 + 24))(v107);
}

void sub_1B2E34964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CGColorSpace *a37)
{
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v39 = *(_QWORD *)(v37 - 224);
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  v40 = *(_QWORD *)(v37 - 232);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
  _Unwind_Resume(a1);
}

uint64_t OZRenderParams::getPVInputIndex(OZRenderParams *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  _DWORD *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;

  v2 = *((_QWORD *)this + 132);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = (uint64_t *)*((_QWORD *)this + 132);
  while (1)
  {
    v4 = *((_DWORD *)v3 + 7);
    if (v4 <= a2)
      break;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return 0xFFFFFFFFLL;
  }
  if (v4 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = (_DWORD *)((char *)this + 1056);
  do
  {
    v7 = *(_DWORD *)(v2 + 28);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v2;
    else
      v9 = (uint64_t *)(v2 + 8);
    if (v8)
      v6 = (_DWORD *)v2;
    v2 = *v9;
  }
  while (*v9);
  if (v6 == (_DWORD *)((char *)this + 1056) || v6[7] > a2)
    v6 = (_DWORD *)((char *)this + 1056);
  return v6[8];
}

_QWORD *OZRenderParams::getFFInputNode@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t **v12;

  v3 = this[124];
  if (!v3 || (v6 = *(uint64_t **)(v3 + 8), v4 = (uint64_t *)(v3 + 8), (v5 = v6) == 0))
  {
LABEL_8:
    *a3 = 0;
    return this;
  }
  v7 = v5;
  while (1)
  {
    v8 = *((_DWORD *)v7 + 8);
    if (v8 <= a2)
      break;
LABEL_7:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_8;
  }
  if (v8 < a2)
  {
    ++v7;
    goto LABEL_7;
  }
  v9 = v4;
  do
  {
    v10 = *((_DWORD *)v5 + 8);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t **)v5;
    else
      v12 = (uint64_t **)(v5 + 1);
    if (v11)
      v9 = v5;
    v5 = *v12;
  }
  while (*v12);
  if (v9 == v4 || *((_DWORD *)v9 + 8) > a2)
    v9 = v4;
  this = (_QWORD *)v9[5];
  *a3 = this;
  if (this)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
  return this;
}

__n128 OZRenderParams::getFFInputPixelTransform@<Q0>(OZRenderParams *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *((_QWORD *)this + 155);
  if (!v4)
    throw_PCNullPointerException(1);
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
  {
LABEL_9:
    *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a3 = 0x3FF0000000000000;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    return result;
  }
  v6 = *(uint64_t **)(v4 + 72);
  while (1)
  {
    v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2)
      break;
LABEL_8:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_9;
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_8;
  }
  v9 = v4 + 72;
  v10 = v4 + 72;
  do
  {
    v11 = *(_DWORD *)(v5 + 32);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = (uint64_t *)v5;
    else
      v13 = (uint64_t *)(v5 + 8);
    if (v12)
      v10 = v5;
    v5 = *v13;
  }
  while (*v13);
  if (v10 == v9 || *(_DWORD *)(v10 + 32) > a2)
    v10 = v9;
  v14 = *(_OWORD *)(v10 + 40);
  v15 = *(_OWORD *)(v10 + 56);
  v16 = *(_OWORD *)(v10 + 88);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v10 + 72);
  *(_OWORD *)(a3 + 48) = v16;
  *(_OWORD *)a3 = v14;
  *(_OWORD *)(a3 + 16) = v15;
  result = *(__n128 *)(v10 + 104);
  v17 = *(_OWORD *)(v10 + 120);
  v18 = *(_OWORD *)(v10 + 152);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(v10 + 136);
  *(_OWORD *)(a3 + 112) = v18;
  *(__n128 *)(a3 + 64) = result;
  *(_OWORD *)(a3 + 80) = v17;
  return result;
}

uint64_t OZImageElement::getHeliumGraphFromInputRef@<X0>(OZRenderParams *this@<X1>, uint64_t a2@<X0>, unsigned int a3@<W2>, uint64_t a4@<X3>, __n128 *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t i;
  __n128 *v12;
  __n128 v13;
  int ValueAsInt;
  CGColorSpace *WorkingColorSpace;
  CGColorSpace *v16;
  FxColorDescription *WorkingColorDescription;
  uint64_t DynamicRange;
  const PCToneMapMethod *ToneMapMethod;
  CGColorSpace *CGColorSpace;
  _QWORD *v21;
  uint64_t v22;
  CGColorSpace *obj;
  uint64_t result;
  int shouldRotateMatteBuffer;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  OZHeMatteInt8 *v32;
  unint64_t v33;
  double v34;
  __n128 PVInputSize;
  __CVBuffer *MatteBuffer;
  size_t Width;
  size_t Height;
  HGCV *PixelFormatType;
  char *v40;
  int v41;
  HGBitmap *v42;
  HGBitmapLoader *v43;
  unint64_t v44;
  unint64_t v45;
  HGXForm *v46;
  _BOOL4 v47;
  uint64_t v48;
  OZHeMatteNormalCompositeNode *v49;
  _BOOL4 v50;
  _BOOL4 v51;
  _QWORD *v52;
  PCShared_base *v53;
  double v54;
  double v55;
  double v60;
  __int128 v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double *v69;
  double v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  HGBitmap *v80;
  HGBitmapLoader *v81;
  HGXForm *v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  PCArray_base *v88;
  uint64_t v89;
  __n128 v91;
  double v92;
  double v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101[16];
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  FxColorDescription v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  FxColorDescription v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __n128 v119;
  double v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  _QWORD *v126;
  PCSharedCount v127;
  OZHeMatteNormalCompositeNode *v128;
  __n128 v129;
  double v130;
  int v131;
  char v132;
  _QWORD v133[3];
  char v134;
  uint64_t v135;
  uint64_t v136[3];

  *a6 = 0;
  OZRenderParams::getFFInputNode(this, a3, &v129);
  if (v129.n128_u64[0])
  {
    *a6 = v129.n128_u64[0];
    OZRenderParams::getPVInputSize(this, a3, &v119);
    OZRenderParams::getFFInputPixelTransform(this, a3, (uint64_t)&v129);
    if (&v129 != a5)
    {
      for (i = 0; i != 8; i += 2)
      {
        v12 = &a5[i];
        v13 = *(__n128 *)((char *)&v129 + i * 16 + 16);
        *v12 = *(__n128 *)((char *)&v129 + i * 16);
        v12[1] = v13;
      }
    }
    OZImageElement::getDropZoneTransformForMediaRef(a2, &v119, (float64x2_t *)&v129, 1.0);
    PCMatrix44Tmpl<double>::rightMult((uint64_t)a5, v129.n128_f64);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a2 + 27728), MEMORY[0x1E0CA2E68], 0.0);
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)this);
    v16 = *(CGColorSpace **)a4;
    v112._pcColorDesc._colorSpaceRef._obj = v16;
    if (v16)
      PCCFRefTraits<CGColorSpace *>::retain(v16);
    *(_QWORD *)&v112._pcColorDesc._dynamicRange = *(_QWORD *)(a4 + 8);
    v112._pcColorDesc._toneMapMethod._gain = *(float *)(a4 + 16);
    v112._isPremultiplied = *(_BYTE *)(a4 + 24);
    if (ValueAsInt)
      FxColorDescription::setCGColorSpace(&v112, WorkingColorSpace);
    if (!FxColorDescription::getCGColorSpace((FxColorDescription *)a4))
      FxColorDescription::setCGColorSpace((FxColorDescription *)a4, WorkingColorSpace);
    WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription(this);
    DynamicRange = FxColorDescription::getDynamicRange(WorkingColorDescription);
    FxColorDescription::setDynamicRange(a4, DynamicRange);
    ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(WorkingColorDescription);
    FxColorDescription::setToneMapMethod((FxColorDescription *)a4, ToneMapMethod);
    if (!FxColorDescription::getCGColorSpace(&v112))
    {
      CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)a4);
      FxColorDescription::setCGColorSpace(&v112, CGColorSpace);
    }
    v21 = a6;
    FxApplyColorConform(a6, &v112, (FxColorDescription *)a4, (uint64_t *)&v105);
    v22 = *a6;
    obj = v105._pcColorDesc._colorSpaceRef._obj;
    if ((CGColorSpace *)*a6 == v105._pcColorDesc._colorSpaceRef._obj)
    {
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
    }
    else
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        obj = v105._pcColorDesc._colorSpaceRef._obj;
      }
      *a6 = (uint64_t)obj;
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v112._pcColorDesc._colorSpaceRef._obj);
  }
  else
  {
    v21 = a6;
  }
  if (OZImageElement::removeBackground((OZImageElement *)a2)
    || (result = OZImageElement::addExtraLighting((OZImageElement *)a2), (_DWORD)result))
  {
    shouldRotateMatteBuffer = OZImageElement::shouldRotateMatteBuffer((OZImageElement *)a2);
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) + 144) != 1)
      goto LABEL_107;
    OZRenderParams::getFFInputNode(this, 1u, &v129);
    if (!v129.n128_u64[0])
      goto LABEL_107;
    OZRenderParams::getFFInputNode(this, 2u, &v119);
    v26 = v119.n128_u64[0];
    if (v119.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v119.n128_u64[0] + 24))(v119.n128_u64[0]);
    if (v129.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v129.n128_u64[0] + 24))(v129.n128_u64[0]);
    if (v26)
    {
      OZRenderParams::getFFInputNode(this, 1u, v136);
      OZRenderParams::getFFInputNode(this, 2u, &v135);
      v133[1] = 0;
      v133[2] = 0;
      v133[0] = &unk_1E64FC250;
      v134 = 0;
      v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
      v28 = v27;
      if (v27)
      {
        OZScene::begin_t<OZLight,false,true>(v27, (uint64_t)&v119);
        v29 = v28[151];
        v113 = 0u;
        v114 = 0u;
        LODWORD(v115) = 1065353216;
        v112._pcColorDesc._colorSpaceRef._obj = (CGColorSpace *)(v28 + 150);
        *(_QWORD *)&v112._pcColorDesc._dynamicRange = v29;
        *(_QWORD *)&v112._pcColorDesc._toneMapMethod._gain = v28 + 150;
        v112._isPremultiplied = 0;
        while ((CGColorSpace *)v119.n128_u64[0] != v112._pcColorDesc._colorSpaceRef._obj)
        {
          if (v119.n128_u64[0] == *(_QWORD *)&v120)
          {
            v30 = 0;
          }
          else
          {
            v30 = *(void **)(v119.n128_u64[0] + 16);
            if (v30)
          }
          OZLight::buildLiLight((OZLight *)v30, (const OZRenderState *)this, (uint64_t)&v129);
          if (!*((_BYTE *)this + 515) && (v131 - 1) <= 2 && v132 != 0)
            v132 = 0;
          LiLightSet::add((uint64_t)v133, (const LiLight *)&v129);
          LiLight::~LiLight((PCSharedCount *)&v129);
          OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++((uint64_t *)&v119);
        }
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v113);
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v122);
      }
      v49 = (OZHeMatteNormalCompositeNode *)HGObject::operator new(0x1A0uLL);
      OZHeMatteNormalCompositeNode::OZHeMatteNormalCompositeNode(v49);
      v128 = v49;
      (*(void (**)(OZHeMatteNormalCompositeNode *, uint64_t, uint64_t))(*(_QWORD *)v49 + 120))(v49, 2, v135);
      (*(void (**)(OZHeMatteNormalCompositeNode *, _QWORD, _QWORD))(*(_QWORD *)v49 + 120))(v49, 0, *v21);
      (*(void (**)(OZHeMatteNormalCompositeNode *, uint64_t, uint64_t))(*(_QWORD *)v49 + 120))(v49, 1, v136[0]);
      v50 = OZImageElement::addExtraLighting((OZImageElement *)a2);
      (*(void (**)(OZHeMatteNormalCompositeNode *, uint64_t, float, float, float, float))(*(_QWORD *)v49 + 96))(v49, 11, (float)v50, 0.0, 0.0, 0.0);
      v51 = OZImageElement::removeBackground((OZImageElement *)a2);
      (*(void (**)(OZHeMatteNormalCompositeNode *, uint64_t, float, float, float, float))(*(_QWORD *)v49 + 96))(v49, 12, (float)v51, 0.0, 0.0, 0.0);
      v52 = (_QWORD *)*((_QWORD *)this + 160);
      v126 = v52;
      if (v52)
        v53 = (PCShared_base *)((char *)v52 + *(_QWORD *)(*v52 - 24));
      else
        v53 = 0;
      PCSharedCount::PCSharedCount(&v127, v53);
      if (!v126)
        throw_PCNullPointerException(1);
      v54 = (*(double (**)(_QWORD *))(*v126 + 112))(v126);
      if (!v126)
        throw_PCNullPointerException(1);
      v55 = (*(double (**)(_QWORD *, _QWORD))(*v126 + 248))(v126, 0);
      if (!v126)
        throw_PCNullPointerException(1);
      (*(void (**)(uint64_t *__return_ptr))(*v126 + 280))(&v123);
      if (!v126)
        throw_PCNullPointerException(1);
      (*(void (**)(__n128 *__return_ptr))(*v126 + 240))(&v119);
      if (!v126)
        throw_PCNullPointerException(1);
      (*(void (**)(FxColorDescription *__return_ptr))(*v126 + 56))(&v112);
      v108 = v115;
      v109 = v116;
      v110 = v117;
      v111 = v118;
      v105 = v112;
      v106 = v113;
      v107 = v114;
      PCMatrix44Tmpl<double>::invert((double *)&v105, (double *)&v105, 0.0);
      __asm { FMOV            V0.2D, #-1.0 }
      v104[0] = _Q0;
      v104[1] = xmmword_1B304F7C0;
      v102 = 0u;
      v103 = 0u;
      PCMatrix44Tmpl<double>::transform<double>((double *)&v105, (double *)v104, (double *)&v102);
      v60 = *((double *)&v103 + 1);
      v61 = v102;
      v62 = v124;
      v63 = v125;
      if (!v126)
        throw_PCNullPointerException(1);
      (*(void (**)(double *__return_ptr))(*v126 + 24))(v101);
      v64 = fabs(*(double *)&v61 / v60);
      v65 = fabs(*((double *)&v61 + 1) / v60);
      v94 = 0x3FF0000000000000uLL;
      v95 = 0;
      *(_QWORD *)&v96 = 0;
      *((_QWORD *)&v96 + 1) = 0x3FF0000000000000;
      v97 = 0;
      v66 = v63 * 0.5;
      v98 = 0;
      v99 = 0;
      v100 = 0x3FF0000000000000;
      if ((shouldRotateMatteBuffer & 1) != 0)
      {
        v94 = xmmword_1B355DB50;
        v96 = xmmword_1B355DB60;
      }
      v67 = 0;
      v68 = v64 / (v62 * 0.5);
      v69 = (double *)&v96;
      v70 = v65 / v66;
      do
      {
        v71 = *(v69 - 3);
        v72 = *v69;
        v73 = v69[3];
        (*(void (**)(OZHeMatteNormalCompositeNode *, uint64_t, float, float, float, float))(*(_QWORD *)v49 + 96))(v49, v67++, v71, v72, v73, 0.0);
        ++v69;
      }
      while (v67 != 3);
      v74 = v124;
      v75 = v125;
      (*(void (**)(OZHeMatteNormalCompositeNode *, uint64_t, float, float, float, float))(*(_QWORD *)v49 + 96))(v49, 13, v74, v75, 0.0, 0.0);
      if ((v76 & 1) == 0
      {
        OZImageElement::getHeliumGraphFromInputRef(OZRenderParams const&,int,FxColorDescription &,PCMatrix44Tmpl<double> *)::bits = (uint64_t)malloc_type_malloc(4uLL, 0x100004052888210uLL);
      }
      *(_DWORD *)OZImageElement::getHeliumGraphFromInputRef(OZRenderParams const&,int,FxColorDescription &,PCMatrix44Tmpl<double> *)::bits = 2139095039;
      v77 = HGRectMake4i(0, 0, 1u, 1u);
      v79 = v78;
      v80 = (HGBitmap *)HGObject::operator new(0x80uLL);
      HGBitmap::HGBitmap(v80, v77, v79, 7, OZImageElement::getHeliumGraphFromInputRef(OZRenderParams const&,int,FxColorDescription &,PCMatrix44Tmpl<double> *)::bits, 4);
      v81 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v81, v80);
      OZRenderParams::getPVInputSize(this, a3, &v91);
      HGTransform::HGTransform((HGTransform *)&v129);
      HGTransform::Scale((HGTransform *)&v129, v92, v93, 1.0);
      v82 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v82);
      (*(void (**)(HGXForm *, __n128 *))(*(_QWORD *)v82 + 576))(v82, &v129);
      (*(void (**)(HGXForm *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v82 + 120))(v82, 0, v81);
      v83 = (uint64_t)v128;
      (*(void (**)(OZHeMatteNormalCompositeNode *, uint64_t, HGXForm *))(*(_QWORD *)v128 + 120))(v128, 3, v82);
      (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)v83 + 96))(v83, 14, 0.35, 0.35, 0.35, 1.0);
      (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)v83 + 96))(v83, 15, 4.0, 0.0, 0.0, 0.0);
      v84 = v68;
      v85 = v70;
      v86 = v54;
      v87 = v55;
      v88 = (PCArray_base *)(*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)v83 + 96))(v83, 16, v84, v85, -v86, v87);
      OZImageElement::setLightParameters(v88, (uint64_t)v133, &v128, v101, (uint64_t)&v119);
      v89 = *a6;
      if (*a6 != v83)
      {
        if (v89)
          (*(void (**)(uint64_t))(*(_QWORD *)v89 + 24))(v89);
        *a6 = v83;
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
      }
      (*(void (**)(HGXForm *))(*(_QWORD *)v82 + 24))(v82);
      HGTransform::~HGTransform((HGTransform *)&v129);
      if (v81)
        (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v81 + 24))(v81);
      PCSharedCount::~PCSharedCount(&v127);
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
      PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v133);
      if (v135)
        (*(void (**)(uint64_t))(*(_QWORD *)v135 + 24))(v135);
      result = v136[0];
      if (v136[0])
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v136[0] + 24))(v136[0]);
    }
    else
    {
LABEL_107:
      if (!OZImageElement::getMatteBuffer((OZImageElement *)a2))
      {
        OZRenderParams::getFFInputNode(this, 1u, &v129);
        result = v129.n128_u64[0];
        if (!v129.n128_u64[0])
          return result;
        (*(void (**)(unint64_t))(*(_QWORD *)v129.n128_u64[0] + 24))(v129.n128_u64[0]);
      }
      v32 = (OZHeMatteInt8 *)HGObject::operator new(0x1B0uLL);
      OZHeMatteInt8::OZHeMatteInt8(v32);
      OZRenderParams::getFFInputNode(this, 1u, &v129);
      v33 = v129.n128_u64[0];
      if (v129.n128_u64[0])
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v129.n128_u64[0] + 24))(v129.n128_u64[0]);
        OZRenderParams::getPVInputSize(this, a3, &v129);
        v34 = v130;
        PVInputSize = OZRenderParams::getPVInputSize(this, 1u, &v119);
        PVInputSize.n128_u32[0] = 1.0;
        if (v120 > 0.0 && v34 > 0.0)
        {
          PVInputSize.n128_f64[0] = v120 / v34;
          PVInputSize.n128_f32[0] = v120 / v34;
        }
        (*(void (**)(OZHeMatteInt8 *, uint64_t, __n128, float, float, float))(*(_QWORD *)v32 + 96))(v32, 1, PVInputSize, 0.0, 0.0, 0.0);
        (*(void (**)(OZHeMatteInt8 *, uint64_t, unint64_t))(*(_QWORD *)v32 + 120))(v32, 1, v33);
      }
      else
      {
        MatteBuffer = (__CVBuffer *)OZImageElement::getMatteBuffer((OZImageElement *)a2);
        Width = CVPixelBufferGetWidth(MatteBuffer);
        Height = CVPixelBufferGetHeight(MatteBuffer);
        PixelFormatType = (HGCV *)CVPixelBufferGetPixelFormatType(MatteBuffer);
        v41 = HGCV::HGFormatForCVPixelFormat(PixelFormatType, 0, v40);
        HGCVPixelBuffer::create((HGCVPixelBuffer *)MatteBuffer, (HGObject **)&v129);
        HGCVBitmap::create((HGCVPixelBuffer **)&v129, v41, 0, &v119);
        v42 = (HGBitmap *)v119.n128_u64[0];
        v43 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v43, v42);
        if (v119.n128_u64[0])
          (*(void (**)(unint64_t))(*(_QWORD *)v119.n128_u64[0] + 24))(v119.n128_u64[0]);
        if (v129.n128_u64[0])
          (*(void (**)(unint64_t))(*(_QWORD *)v129.n128_u64[0] + 24))(v129.n128_u64[0]);
        if (shouldRotateMatteBuffer)
          v44 = Height;
        else
          v44 = Width;
        if (shouldRotateMatteBuffer)
          v45 = Width;
        else
          v45 = Height;
        OZRenderParams::getPVInputSize(this, a3, &v119);
        HGTransform::HGTransform((HGTransform *)&v129);
        if (shouldRotateMatteBuffer)
        {
          HGTransform::Translate((HGTransform *)&v129, (float)-(float)Width * 0.5, (float)-(float)Height * 0.5, 0.0);
          HGTransform::Rotate((HGTransform *)&v129, -90.0, 0.0, 0.0, 1.0);
          HGTransform::Translate((HGTransform *)&v129, (float)Height * 0.5, (float)Width * 0.5, 0.0);
        }
        HGTransform::Scale((HGTransform *)&v129, v120 / (double)v44, v121 / (double)v45, 1.0);
        v46 = (HGXForm *)HGObject::operator new(0x210uLL);
        v21 = a6;
        HGXForm::HGXForm(v46);
        (*(void (**)(HGXForm *, __n128 *))(*(_QWORD *)v46 + 576))(v46, &v129);
        (*(void (**)(HGXForm *, _QWORD, HGBitmapLoader *))(*(_QWORD *)v46 + 120))(v46, 0, v43);
        (*(void (**)(OZHeMatteInt8 *, uint64_t, float, float, float, float))(*(_QWORD *)v32 + 96))(v32, 1, 1.0, 0.0, 0.0, 0.0);
        (*(void (**)(OZHeMatteInt8 *, uint64_t, HGXForm *))(*(_QWORD *)v32 + 120))(v32, 1, v46);
        (*(void (**)(HGXForm *))(*(_QWORD *)v46 + 24))(v46);
        HGTransform::~HGTransform((HGTransform *)&v129);
        if (v43)
          (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v43 + 24))(v43);
      }
      (*(void (**)(OZHeMatteInt8 *, _QWORD, _QWORD))(*(_QWORD *)v32 + 120))(v32, 0, *v21);
      v47 = OZImageElement::removeBackground((OZImageElement *)a2);
      (*(void (**)(OZHeMatteInt8 *, _QWORD, float, float, float, float))(*(_QWORD *)v32 + 96))(v32, 0, (float)v47, 0.0, 0.0, 0.0);
      v48 = *v21;
      if ((OZHeMatteInt8 *)*v21 != v32)
      {
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
        *v21 = v32;
        (*(void (**)(OZHeMatteInt8 *))(*(_QWORD *)v32 + 16))(v32);
      }
      return (*(uint64_t (**)(OZHeMatteInt8 *))(*(_QWORD *)v32 + 24))(v32);
    }
  }
  return result;
}

void sub_1B2E35A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  PCSharedCount *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = STACK[0x2F8];
  PCSharedCount::~PCSharedCount(v10);
  if (v13)
    (*(void (**)(unint64_t))(*(_QWORD *)v13 + 24))(v13);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v11 - 208);
  v14 = *(_QWORD *)(v11 - 176);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v15 = *(_QWORD *)(v11 - 168);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  if (*a10)
    (*(void (**)(_QWORD))(*(_QWORD *)*a10 + 24))(*a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZImageElement::getHeliumGraph(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, HGBitmapLoader **a6@<X8>)
{
  OZImageElement::getHeliumGraph(a1 - 6528, a2, a3, a4, a5, a6);
}

OZFootage *OZImageElement::getElementFieldDominance(OZImageElement *this, CMTime *a2, const OZRenderParams *a3)
{
  OZFootage *result;
  CMTime v5;

  result = (OZFootage *)OZImageElement::getFootage(this);
  if (result)
  {
    v5 = *a2;
    return (OZFootage *)OZFootage::getFieldDominance(result, &v5);
  }
  return result;
}

void OZImageElement::getFitScale(OZImageElement *this@<X0>, const OZRenderState *a2@<X1>, double *a3@<X8>)
{
  double *v10;
  OZFootage *Footage;
  OZFootage *v12;
  const CMTime *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v21;
  uint64_t v22;

  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)a3 = _Q0;
  v10 = a3 + 1;
  if (OZImageElement::getDropZoneType(this))
  {
    Footage = (OZFootage *)OZImageElement::getFootage(this);
    if (Footage)
    {
      v12 = Footage;
      v13 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), MEMORY[0x1E0CA2E68], 0.0);
      v15 = v14;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), v13, 0.0);
      v17 = v16;
      v22 = 0;
      (*(void (**)(OZFootage *, char *, uint64_t *, const OZRenderState *))(*(_QWORD *)v12 + 1504))(v12, (char *)&v22 + 4, &v22, a2);
      if (!OZFootage::isResolutionIndependent(v12))
      {
        v18 = vcvtmd_s64_f64(v15 + 0.00001 + 0.0000001);
        v19 = vcvtmd_s64_f64(v17 + 0.00001 + 0.0000001);
        if (v18 != (uint64_t)*((float *)&v22 + 1) || v19 != (uint64_t)*(float *)&v22)
        {
          v21 = (float)((float)v19 / *(float *)&v22);
          *a3 = (float)((float)v18 / *((float *)&v22 + 1));
          a3[1] = v21;
        }
      }
    }
  }
  else
  {
    OZChannelPosition::getPosition((OZImageElement *)((char *)this + 26144), MEMORY[0x1E0CA2E68], a3, v10, 0.0);
  }
}

void OZImageElement::getDropZoneTransform(OZImageElement *this@<X0>, OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  const CMTime *v6;
  double v7;
  float64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int PVInputIndex;
  uint64_t v16;
  uint64_t i;
  _OWORD *v23;
  __int128 v24;
  float64x2_t v25;
  _OWORD v26[2];
  double v27[16];
  float64x2_t v28;
  __int128 v29;
  OZRenderState v30;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  OZRenderState::OZRenderState(&v30, a2);
  v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26720), MEMORY[0x1E0CA2E68], 0.0);
  v8 = v7;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26872), v6, 0.0);
  v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27424), v6, 0.0);
  v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27576), v6, 0.0);
  v14 = v13;
  PVInputIndex = OZRenderParams::getPVInputIndex((OZRenderParams *)a2, *((_DWORD *)this + 20));
  v16 = *(_QWORD *)&a2[3].var8;
  if (!v16 || (PVInputIndex & 0x80000000) != 0 || PVInputIndex >= *(_DWORD *)(v16 + 16))
  {
    OZImageElement::getFitScale(this, &v30, v27);
    PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v27[0], v27[1], 1.0);
  }
  else
  {
    v28 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v29 = _Q0;
    OZImageElement::getFootageBounds((uint64_t)this, &v28, (OZRenderParams *)a2, 0);
    v26[0] = v28;
    v26[1] = v29;
    OZImageElement::getFitMatrixForMediaRef((uint64_t)this, (uint64_t)v26, (uint64_t)v27, 1.0);
    if (v27 != (double *)a3)
    {
      for (i = 0; i != 16; i += 4)
      {
        v23 = (_OWORD *)(a3 + i * 8);
        v24 = *(_OWORD *)&v27[i + 2];
        *v23 = *(_OWORD *)&v27[i];
        v23[1] = v24;
      }
    }
  }
  v25 = PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v12, v14, 1.0);
  v25.f64[0] = v8;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, v25, v10, 0.0);
}

void OZImageElement::getFootageBounds(uint64_t a1, float64x2_t *a2, OZRenderParams *a3, int a4)
{
  unsigned int PVInputIndex;
  uint64_t v9;
  float64x2_t v10;
  _QWORD *Footage;
  _QWORD *v17;
  CMTime var0;
  __int128 v22;
  int64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  char v45;
  CGColorSpace *v46;
  CGColorSpace *v47;
  __int16 v48;
  uint64_t v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  OZRenderState v55;
  OZRenderState v56;

  if (OZImageElement::isDropZone((OZImageElement *)a1)
    && *(_BYTE *)(theApp + 81)
    && (PVInputIndex = OZRenderParams::getPVInputIndex(a3, *(_DWORD *)(a1 + 80)), (v9 = *((_QWORD *)a3 + 124)) != 0)
    && (PVInputIndex & 0x80000000) == 0
    && PVInputIndex < *(_DWORD *)(v9 + 16))
  {
    OZRenderParams::getPVInputSize(a3, PVInputIndex, (__n128 *)&v56);
    v10 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)&v56.var0.var3));
    __asm { FMOV            V1.2D, #0.5 }
    *a2 = vsubq_f64((float64x2_t)0, vaddq_f64(vmulq_f64(v10, _Q1), (float64x2_t)0));
    a2[1] = v10;
  }
  else
  {
    Footage = OZImageElement::getFootage((OZImageElement *)a1);
    if (Footage)
    {
      v17 = Footage;
      OZRenderState::OZRenderState(&v56, (const OZRenderState *)a3);
      OZRenderState::OZRenderState(&v55, &v56);
      v24 = xmmword_1B30503B0;
      v25 = 0x3FF0000000000000;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0x3FF0000000000000;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v37 = 0;
      v34 = 0;
      v35 = 0;
      v33 = 0x3FF0000000000000;
      v36 = 0;
      v38 = *MEMORY[0x1E0CA2E68];
      v39 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0x100000000;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 768;
      v49 = 0x408F400000000000;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = -1;
      __asm { FMOV            V0.2D, #1.0 }
      v54 = _Q0;
      var0 = (CMTime)v55.var0;
      OZImageElement::globalToFootageTime((OZImageElement *)a1, &var0, (uint64_t)&v22);
      *(_OWORD *)&v55.var0.var0 = v22;
      v55.var0.var3 = v23;
      HIDWORD(v34) = OZChannel::getValueAsInt((OZChannel *)(a1 + 22312), MEMORY[0x1E0CA2E68], 0.0);
      if (a4)
        (*(void (**)(_QWORD *, float64x2_t *, OZRenderState *, __int128 *))(*v17 + 1568))(v17, a2, &v55, &v24);
      else
        OZFootage::getTextureResolution(v17, (uint64_t)a2, (const CMTime *)&v55, (uint64_t)&v24);
      __asm { FMOV            V2.2D, #0.5 }
      *a2 = vsubq_f64(*a2, vaddq_f64(*a2, vmulq_f64(a2[1], _Q2)));
      PCCFRef<CGColorSpace *>::~PCCFRef(&v47);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v46);
    }
    else
    {
      __asm { FMOV            V0.2D, #-1.0 }
      a2[1] = _Q0;
    }
  }
}

void sub_1B2E363E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  CGColorSpace **v38;

  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(v38);
  _Unwind_Resume(a1);
}

void OZImageElement::getFitMatrixForMediaRef(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  void *Footage;
  double v9;
  double v10;
  double v11;
  const CMTime *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int ValueAsInt;
  double v21;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __n128 v39;
  int64_t v40;
  OZRenderState v41;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  Footage = OZImageElement::getFootage((OZImageElement *)a1);
  if (Footage)
  {
    v9 = (*(double (**)(void *))(*(_QWORD *)Footage + 1368))(Footage);
    OZRenderState::OZRenderState(&v41);
    OZScene::getCurrentTime(*(OZScene **)(a1 + 968), &v39);
    *(__n128 *)&v41.var0.var0 = v39;
    v41.var0.var3 = v40;
    v10 = *(double *)(a2 + 16);
    v11 = *(double *)(a2 + 24);
    if (OZImageElement::isBackgroundDropZone((OZImageElement *)a1)
      && !OZImageElement::isPassthroughPlaceholder((OZImageElement *)a1)
      && !OZImageElement::resizeToMatchInputSource((OZImageElement *)a1))
    {
      v12 = (const CMTime *)MEMORY[0x1E0CA2E68];
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 29232), MEMORY[0x1E0CA2E68], 0.0);
      v14 = v13;
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 29384), v12, 0.0);
      v16 = v15;
      v38 = 0.0;
      v39.n128_u64[0] = 0;
      v36 = 0.0;
      v37 = 0.0;
      v34 = 0.0;
      v35 = 0.0;
      v33 = 0.0;
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 26280), v12, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 26432), v12, 0.0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1608))(a1))
        (*(void (**)(uint64_t, OZRenderState *, __n128 *, double *, double *, double *))(*(_QWORD *)a1 + 1728))(a1, &v41, &v39, &v38, &v37, &v36);
      OZTransformNode::getPivot((OZTransformNode *)a1, &v35, &v34, &v33, (const CMTime *)&v41);
      v17 = v14 - v39.n128_f64[0] - v38;
      v18 = v16 - v37 - v36;
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 22720), MEMORY[0x1E0CA2E68], 0.0);
      if (ValueAsInt == 2)
      {
        v21 = v9 * v17 / a4 / v10;
        v23 = v18 / v11;
        goto LABEL_37;
      }
      if (ValueAsInt == 1)
      {
        v29 = v17;
        v31 = 0.0;
        v32 = 0.0;
        v30 = 0;
        (*(void (**)(uint64_t, double *, double *, uint64_t *, OZRenderState *, uint64_t))(*(_QWORD *)a1 + 1312))(a1, &v32, &v31, &v30, &v41, 1);
        if (v32 >= 1.0 || v32 <= 0.0)
          v21 = 1.0;
        else
          v21 = 1.0 / v32;
        if (v31 >= 1.0 || v31 <= 0.0)
          v23 = 1.0;
        else
          v23 = 1.0 / v31;
        v24 = v10 * v21;
        v25 = v11 * v23;
        v26 = (int)(v10 * v21);
        v27 = (int)(v11 * v23);
        if (v26 > 4096 || v27 > 4096)
        {
          if (v26 <= v27)
            v26 = (int)(v11 * v23);
          if (v26 <= 1)
            v26 = 1;
          v28 = 4096.0 / (double)v26;
          v24 = floor(v24 * v28);
          v25 = floor(v25 * v28);
        }
        if (OZImageElement::isDropZoneReplaced((OZChannel *)a1))
          goto LABEL_37;
        if (v10 >= v11)
        {
          if (v24 >= v29)
          {
LABEL_37:
            PCMatrix44Tmpl<double>::rightScale((double *)a3, 1.0 / v21, 1.0 / v23, 1.0);
            if (a4 != 1.0)
            {
              *(double *)a3 = *(double *)a3 * a4;
              *(double *)(a3 + 32) = *(double *)(a3 + 32) * a4;
              *(double *)(a3 + 64) = *(double *)(a3 + 64) * a4;
              *(double *)(a3 + 96) = *(double *)(a3 + 96) * a4;
            }
            return;
          }
          v21 = v29 * v21 / v24;
        }
        else
        {
          if (v25 >= v18)
            goto LABEL_37;
          v21 = v18 * v23 / v25;
        }
      }
      else if (v10 * a4 / v11 <= v9 * v17 / v18)
      {
        v21 = v9 * v17 / a4 / v10;
      }
      else
      {
        v21 = v18 / v11;
      }
      v23 = v21;
      goto LABEL_37;
    }
  }
}

double OZImageElement::getDropZoneTransformForMediaRef@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  __int128 v6;
  const CMTime *v7;
  double v8;
  float64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double result;
  _OWORD v17[2];

  v6 = a2[1];
  v17[0] = *a2;
  v17[1] = v6;
  OZImageElement::getFitMatrixForMediaRef(a1, (uint64_t)v17, (uint64_t)a3, a4);
  v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 26720), MEMORY[0x1E0CA2E68], 0.0);
  v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 26872), v7, 0.0);
  v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 27424), v7, 0.0);
  v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 27576), v7, 0.0);
  v15 = PCMatrix44Tmpl<double>::leftScale(a3, v13, v14, 1.0);
  v15.f64[0] = v9;
  *(_QWORD *)&result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftTranslate(a3, v15, v11, 0.0);
  return result;
}

__n128 OZRenderParams::getPVInputSize@<Q0>(OZRenderParams *this@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  char *v3;
  uint64_t *v4;
  unsigned int v5;
  __n128 result;
  char *v10;
  unsigned int v11;
  char **v13;
  __n128 v14;

  v3 = (char *)*((_QWORD *)this + 126);
  if (!v3)
  {
LABEL_7:
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    a3[1] = result;
    return result;
  }
  v4 = (uint64_t *)*((_QWORD *)this + 126);
  while (1)
  {
    v5 = *((_DWORD *)v4 + 8);
    if (v5 <= a2)
      break;
LABEL_6:
    v4 = (uint64_t *)*v4;
    if (!v4)
      goto LABEL_7;
  }
  if (v5 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  v10 = (char *)this + 1008;
  do
  {
    v11 = *((_DWORD *)v3 + 8);
    _CF = v11 >= a2;
    if (v11 >= a2)
      v13 = (char **)v3;
    else
      v13 = (char **)(v3 + 8);
    if (_CF)
      v10 = v3;
    v3 = *v13;
  }
  while (*v13);
  if (v10 == (char *)this + 1008 || *((_DWORD *)v10 + 8) > a2)
    v10 = (char *)this + 1008;
  result = *(__n128 *)(v10 + 40);
  v14 = *(__n128 *)(v10 + 56);
  *a3 = result;
  a3[1] = v14;
  return result;
}

BOOL OZImageElement::getDropZoneSourceBounds(OZImageElement *a1, float64x2_t *a2, OZRenderParams *a3, int a4)
{
  double v8[16];

  OZImageElement::getFootageBounds((uint64_t)a1, a2, a3, a4);
  OZImageElement::getDropZoneTransform(a1, (OZRenderState *)a3, (uint64_t)v8);
  return PCMatrix44Tmpl<double>::transformRect<double>(v8, a2->f64, (uint64_t)a2);
}

uint64_t OZImageElement::scheduleTokens()
{
  return 0;
}

uint64_t OZImageElement::setLightParameters(PCArray_base *a1, uint64_t a2, _QWORD *a3, double *a4, uint64_t a5)
{
  int v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __n128 v13;
  double v14;
  float v15;
  float v16;
  float v17;
  PC_Sp_counted_base *var0;
  float v19;
  float v20;
  float v21;
  double v22;
  double v23;
  double v24;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float64x2_t v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  PCSharedCount v41[76];
  float v42;
  float v43;
  float v44;
  double v45[4];
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6 < 1)
  {
    v10 = 0;
LABEL_22:
    v31 = (v10 + 3);
    do
    {
      (*(void (**)(_QWORD, uint64_t, float, float, float, float))(*(_QWORD *)*a3 + 96))(*a3, v31, 0.0, 0.0, 0.0, 0.0);
      v31 = (v31 + 1);
    }
    while ((_DWORD)v31 != 7);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if (v6 >= 4)
      v11 = 4;
    else
      v11 = v6;
    do
    {
      if (v9 >= *(int *)(a2 + 12))
        PCArray_base::badIndex(a1);
      LiLight::LiLight((LiLight *)v41, (const LiLight *)(*(_QWORD *)(a2 + 16) + 944 * v9));
      v12 = v46;
      if (v46 != 3)
      {
        v39 = v48;
        v40 = 0x3FF0000000000000;
        v37 = 0u;
        v38 = v47;
        v36 = 0u;
        PCMatrix44Tmpl<double>::transform<double>(a4, (double *)&v38, (double *)&v36);
        PCMatrix44Tmpl<double>::transform_normal<double>(a5, v45, &v34);
        v14 = v45[3];
        v15 = v42;
        v16 = v43;
        v17 = v44;
        var0 = v41[75].var0;
        if (v12 == 2)
        {
          v19 = *(double *)&v41[72].var0;
          v20 = *(double *)&v41[73].var0;
          v21 = *(double *)&v41[74].var0;
          (*(void (**)(_QWORD, uint64_t, float, float, float, float))(*(_QWORD *)*a3 + 96))(*a3, 19, v19, v20, v21, 1.0);
          v23 = *((double *)&v36 + 1);
          v22 = *(double *)&v36;
          v13.n128_u32[0] = 1.0;
          v24 = *(double *)&v37;
        }
        else
        {
          v13.n128_f64[0] = sqrt(v34.f64[0] * v34.f64[0] + v34.f64[1] * v34.f64[1] + v35 * v35);
          if (v13.n128_f64[0] < 0.000000100000001 && v13.n128_f64[0] > -0.000000100000001)
            v13.n128_f64[0] = 1.0;
          v24 = v35 / v13.n128_f64[0];
          v23 = v34.f64[1] / v13.n128_f64[0];
          v22 = v34.f64[0] / v13.n128_f64[0];
          v13.n128_u32[0] = 0;
        }
        v26 = v24;
        v27 = v23;
        v28 = v22;
        (*(void (**)(_QWORD, _QWORD, float, float, float, __n128))(*(_QWORD *)*a3 + 96))(*a3, (v10 + 7), v28, v27, v26, v13);
        v29 = v14;
        (*(void (**)(_QWORD, _QWORD, float, float, float, float))(*(_QWORD *)*a3 + 96))(*a3, (v10 + 3), v15 * v29, v16 * v29, v17 * v29, 1.0);
        v30 = *(double *)&var0;
        *((_DWORD *)&v51 + v10) = v12;
        *((float *)&v49 + v10) = v30;
        if (v10 >= 4)
        {
          LiLight::~LiLight(v41);
          goto LABEL_26;
        }
        ++v10;
      }
      LiLight::~LiLight(v41);
      ++v9;
    }
    while (v9 != v11);
    if (v10 <= 3)
      goto LABEL_22;
  }
LABEL_26:
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(*(_QWORD *)*a3 + 96))(*a3, 17, (float)(int)v51, (float)SHIDWORD(v51), (float)(int)v52, (float)SHIDWORD(v52));
  return (*(uint64_t (**)(_QWORD, uint64_t, float, float, float, float))(*(_QWORD *)*a3 + 96))(*a3, 18, *(float *)&v49, *((float *)&v49 + 1), *(float *)&v50, *((float *)&v50 + 1));
}

void sub_1B2E36C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  LiLight::~LiLight((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZLight,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E36C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void OZImageElement::didFinishLoadingIntoScene(OZImageElement *this)
{
  OZFootage *Footage;
  OZFootage *v3;

  OZElement::didFinishLoadingIntoScene((OZElement *)this);
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    v3 = Footage;
    if ((*(unsigned int (**)(OZFootage *))(*(_QWORD *)Footage + 1432))(Footage))
      OZChannel::setMax((OZChannel *)((char *)this + 22312), 3.40282347e38);
    OZImageElement::updatePropertiesFromFootage(this, v3);
    OZImageElement::ptcLoadCinematicScript(this);
  }
}

void OZImageElement::ptcLoadCinematicScript(OZImageElement *this)
{
  OZFootage *Footage;
  const PCString *v3;
  OZFootage *v4;
  const PCString *v5;
  OZChannelBase *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  PCSemaphore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  PCSemaphore *v17;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  PCSemaphore *v26;
  uint64_t v27;

  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    v4 = Footage;
    if (OZFootage::isCinematographyAvailable(Footage, v3))
    {
      v6 = (OZChannelBase *)*((_QWORD *)v4 + 1009);
      v7 = OZChannelBase::setRangeName(v6, v5);
      OZFootage::ensureClipIsOpen(v4);
      if ((*(unsigned int (**)(uint64_t *, __CFString *))(*(_QWORD *)v7 + 344))(&v27, v6[10].var12))
      {
        *((_QWORD *)this + 3787) = v27;
        v8 = 1;
        v9 = MEMORY[0x1E0C809B0];
        do
        {
          v10 = v8;
          v11 = objc_alloc_init(MEMORY[0x1E0D7F540]);
          v23 = 0;
          v24 = &v23;
          v25 = 0x2020000000;
          v26 = 0;
          v12 = (PCSemaphore *)operator new();
          PCSemaphore::PCSemaphore(v12, 0);
          v26 = v12;
          v19 = 0;
          v20 = &v19;
          v21 = 0x2020000000;
          v22 = 0;
          v13 = 30320;
          if (!*((_QWORD *)this + 3789))
            v13 = 30328;
          v14 = *(_QWORD *)((char *)this + v13);
          v15 = *((_QWORD *)this + 3787);
          v18[0] = v9;
          v18[1] = 3221225472;
          v18[2] = ___ZN14OZImageElement22ptcLoadCinematicScriptEv_block_invoke;
          v18[3] = &unk_1E658F2D0;
          v18[4] = &v19;
          v18[5] = &v23;
          objc_msgSend(v11, "loadWithAsset:changesDictionary:completion:", v15, v14, v18);
          PCSemaphore::wait((PCSemaphore *)v24[3]);
          if (*((_BYTE *)v20 + 24))
          {
            if (*((_QWORD *)this + 3789))
            {
              *((_QWORD *)this + 3788) = v11;
              OZImageElement::ptcRefreshCinematographyDataChannels(this);
            }
            else
            {
              *((_QWORD *)this + 3789) = v11;
            }
          }
          v16 = v24;
          v17 = (PCSemaphore *)v24[3];
          if (v17)
          {
            PCSemaphore::~PCSemaphore(v17);
            MEMORY[0x1B5E29170]();
            v16 = v24;
          }
          v16[3] = 0;
          _Block_object_dispose(&v19, 8);
          _Block_object_dispose(&v23, 8);
          v8 = 0;
        }
        while ((v10 & 1) != 0);
      }
    }
  }
}

void sub_1B2E36F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1000C40A9FC9F90);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZImageElement::didFinishLoadingIntoScene(OZImageElement *this)
{
  OZImageElement::didFinishLoadingIntoScene((OZImageElement *)((char *)this - 16));
}

uint64_t OZImageElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  PCString v17;
  PCString v18;
  _BYTE v19[88];
  uint64_t v20;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZImageElementScope);
  if (OZImageElement::getFootage((OZImageElement *)this))
  {
    v10 = *((unsigned int *)this + 7550);
    if ((_DWORD)v10)
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v10);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  v11 = OZImageElement::hasBeenRetimedFromLastHash((OZImageElement *)this) ^ 1;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  if (this[3789])
  {
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v19);
    v12 = objc_msgSend(this[3789], "changesDictionary");
    v20 = 0;
    v13 = (void *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v12, 1, &v20);
    PCAsciiStream::write((PCAsciiStream *)v19, (_BYTE *)objc_msgSend(v13, "bytes"), objc_msgSend(v13, "length"));
    PCAsciiStream::close((PCAsciiStream *)v19);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
    (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCAsciiStream::getString((PCAsciiStream *)v19, &v18);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v18);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v18);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v19);
  }
  if (this[3788])
  {
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v19);
    v14 = objc_msgSend(this[3788], "changesDictionary");
    v20 = 0;
    v15 = (void *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v14, 1, &v20);
    PCAsciiStream::write((PCAsciiStream *)v19, (_BYTE *)objc_msgSend(v15, "bytes"), objc_msgSend(v15, "length"));
    PCAsciiStream::close((PCAsciiStream *)v19);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCAsciiStream::getString((PCAsciiStream *)v19, &v17);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v17);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v17);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v19);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZElement::writeBody((OZElement *)this, a2, a3, a4, a5);
}

void sub_1B2E372EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
  PCString::~PCString((PCString *)&a9);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZImageElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZImageElement::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZImageElement::parseBegin(OZImageElement *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 30290) = 1;
  *((_DWORD *)this + 8146) = 0;
  OZElement::parseBegin((OZElement *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZImageElementScope);
  return 1;
}

uint64_t `non-virtual thunk to'OZImageElement::parseBegin(OZImageElement *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 30242) = 1;
  *((_DWORD *)this + 8134) = 0;
  OZElement::parseBegin((OZElement *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZImageElementScope);
  return 1;
}

uint64_t OZImageElement::parseEnd(OZImageElement *this, PCSerializerReadStream *a2)
{
  BOOL *v4;
  const CMTime *v5;
  const __CFString *v6;
  uint64_t v7;
  const __CFURL **v8;
  const PCURL *v9;
  uint64_t v11;
  PCString v12;

  v4 = (BOOL *)this + 30144;
  OZElement::parseEnd((OZElement *)this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21192), 0x20000, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21344), 0x20000, 1);
  if (OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 19112))
    && !OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 18904)))
  {
    OZChanObjectRefWithPicker::assign((OZImageElement *)((char *)this + 18904), (const OZChannelBase *)((char *)this + 19112));
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 18904), 10, 0);
    OZChanObjectManipRef::setObjectID((OZChannelBase *)((char *)this + 19112), 0, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19112), 10, 0);
  }
  v4[146] = 0;
  if (*((_DWORD *)a2 + 26) == 5 && *((_DWORD *)a2 + 27) >= 7u)
    OZChannel::setValue((OZChannel *)((char *)this + 29992), MEMORY[0x1E0CA2E68], 1.0, 0);
  v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::setValue((OZChannel *)((char *)this + 29992), MEMORY[0x1E0CA2E68], 0.0, 0);
  *v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29992), v5, 0.0) != 0;
  if (OZImageElement::isBackgroundDropZone(this))
  {
    v6 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
    if (v6 && CFStringCompare(v6, CFSTR("com.apple.FinalCutApp"), 1uLL) == kCFCompareEqualTo)
    {
      (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
      return 0;
    }
    v7 = (*(uint64_t (**)(OZImageElement *))(*(_QWORD *)this + 272))(this);
    if (v7)
    {
      v8 = *(const __CFURL ***)(v7 + 1584);
      if (v8)
      {
        OZDocument::getFilename(v8, (PCURL *)&v12);
        PCURL::PCURL((PCURL *)&v11, &v12, 0);
        if (OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)&v11, v9))
        {
          (*(void (**)(PCSerializerReadStream *))(*(_QWORD *)a2 + 24))(a2);
          PCURL::~PCURL((PCURL *)&v11);
          PCString::~PCString(&v12);
          return 0;
        }
        PCURL::~PCURL((PCURL *)&v11);
        PCString::~PCString(&v12);
      }
    }
  }
  return 1;
}

void sub_1B2E375CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'OZImageElement::parseEnd(OZImageElement *this, PCSerializerReadStream *a2)
{
  return OZImageElement::parseEnd((OZImageElement *)((char *)this - 48), a2);
}

uint64_t OZImageElement::parseElement(OZImageElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  _DWORD *v6;
  __n128 v7;
  double v8;
  unint64_t v9;
  OZChannel *v10;
  unint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  char *CStr;
  unsigned int v15;
  unint64_t v16;
  NSData *v17;
  int v18;
  OZImageElement *v19;
  OZImageElement *v20;
  double v22[11];
  PCSharedCount v23;
  uint64_t v24;

  v6 = (_DWORD *)((char *)this + 30200);
  v24 = 0;
  OZElement::parseElement((OZElement *)this, a2, a3);
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)&v24 + 4);
      v22[0] = 0.0;
      v7 = ((__n128 (*)(_QWORD, double *))*(_QWORD *)(**(_QWORD **)(*((_QWORD *)this + 2803) + 8) + 256))(*(_QWORD *)(*((_QWORD *)this + 2803) + 8), v22);
      v7.n128_u32[0] = HIDWORD(v24);
      v8 = (double)v7.n128_u64[0];
      if (v22[0] < v8)
      {
        OZChannel::setMax((OZChannel *)((char *)this + 22312), v8);
        LODWORD(v9) = HIDWORD(v24);
        v8 = (double)v9;
      }
      OZChannel::setValue((OZChannel *)((char *)this + 22312), MEMORY[0x1E0CA2E68], v8, 0);
      break;
    case 2:
      (*(void (**)(PCStreamElement *, uint64_t *))(*(_QWORD *)a3 + 32))(a3, &v24);
      v10 = (OZChannel *)((char *)this + 19320);
      if ((_DWORD)v24)
      {
        OZChannel::setMax(v10, (double)v24);
        LODWORD(v11) = v24;
        OZChannel::setSliderMax(v10, (double)v11);
        OZChannelBase::resetFlag((OZChannelBase *)v10, 2, 0);
      }
      else
      {
        OZChannel::setMax(v10, 1.0);
        OZChannel::setSliderMax(v10, 1.0);
        OZChannelBase::setFlag((OZChannelBase *)v10, 2, 0);
      }
      break;
    case 3:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, (char *)this + 30145);
      break;
    case 5:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 32584);
      break;
    case 6:
      PCSharedCount::PCSharedCount(&v23);
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v23);
      PCAsciiStream::PCAsciiStream((PCAsciiStream *)v22);
      v12 = PCString::size((PCString *)&v23);
      v13 = malloc_type_malloc(v12, 0xC651110DuLL);
      CStr = PCString::createCStr((PCString *)&v23);
      PCAsciiStream::open((PCAsciiStream *)v22, CStr);
      v15 = PCString::size((PCString *)&v23);
      v16 = PCAsciiStream::read((PCAsciiStream *)v22, v13, v15);
      PCAsciiStream::close((PCAsciiStream *)v22);
      free(CStr);
      v17 = (NSData *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v13, v16);
      v18 = v6[596];
      if (v18 == 1)
      {

        *((_QWORD *)this + 3790) = (id)OZImageElement::decodeScriptFromData(v20, v17);
      }
      else if (!v18)
      {

        *((_QWORD *)this + 3791) = (id)OZImageElement::decodeScriptFromData(v19, v17);
      }
      PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v22);
      PCString::~PCString((PCString *)&v23);
      break;
    default:
      break;
  }
  *v6 = v24;
  return 1;
}

void sub_1B2E37888(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::decodeScriptFromData(OZImageElement *this, NSData *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a2, &v6);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v2, "decodePropertyListForKey:", *MEMORY[0x1E0CB2CD0]);
  objc_msgSend(v3, "finishDecoding");

  return v4;
}

uint64_t `non-virtual thunk to'OZImageElement::parseElement(OZImageElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZImageElement::parseElement((OZImageElement *)((char *)this - 48), a2, a3);
  return 1;
}

OZChannelBase *OZImageElement::isCinematographyAvailable(OZImageElement *this)
{
  OZChannelBase *result;
  const PCString *v2;

  result = (OZChannelBase *)OZImageElement::getFootage(this);
  if (result)
    return OZFootage::isCinematographyAvailable((OZFootage *)result, v2);
  return result;
}

void OZImageElement::ptcRefreshCinematographyInternalDataFromScript(OZImageElement *this)
{
  void *v1;
  OZCurrentThread *v3;
  OZCurrentThread *v4;
  char **v5;
  uint64_t v6;
  OZCurrentThread *v7;
  void *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  OZDocument *v28;
  OZCurrentThread *Instance;
  id obj;
  _QWORD block[5];
  _BYTE v32[48];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CMTimeRange v37;
  CMTime duration;
  CMTime start;
  CMTimeRange v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = (void *)*((_QWORD *)this + 3789);
  if (v1)
  {
    *((_QWORD *)this + 4071) = *((_QWORD *)this + 4070);
    memset(&v40, 0, sizeof(v40));
    start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
    CMTimeRangeMake(&v40, &start, &duration);
    v37 = v40;
    obj = (id)objc_msgSend(v1, "decisionsInTimeRange:", &v37);
    v36 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    v3 = (OZCurrentThread *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    v4 = v3;
    if (v3)
    {
      v5 = (char **)((char *)this + 32560);
      v6 = *(_QWORD *)v34;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v34 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v7);
          memset(&v32[8], 0, 40);
          *(_QWORD *)v32 = objc_msgSend(v8, "trackIdentifier");
          *(_QWORD *)&v32[8] = objc_msgSend(v8, "groupIdentifier");
          if (v8)
            objc_msgSend(v8, "time");
          else
            memset(&v32[16], 0, 24);
          v32[40] = objc_msgSend(v8, "isUserDecision");
          v32[41] = objc_msgSend(v8, "isStrongDecision");
          v32[42] = objc_msgSend(v8, "isGroupDecision");
          v9 = (_OWORD *)*((_QWORD *)this + 4071);
          v10 = *((_QWORD *)this + 4072);
          if ((unint64_t)v9 >= v10)
          {
            v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - *v5) >> 4);
            v15 = v14 + 1;
            if (v14 + 1 > 0x555555555555555)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*v5) >> 4);
            if (2 * v16 > v15)
              v15 = 2 * v16;
            if (v16 >= 0x2AAAAAAAAAAAAAALL)
              v17 = 0x555555555555555;
            else
              v17 = v15;
            if (v17)
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)this + 32576, v17);
            else
              v18 = 0;
            v19 = &v18[48 * v14];
            v20 = *(_OWORD *)v32;
            v21 = *(_OWORD *)&v32[32];
            *((_OWORD *)v19 + 1) = *(_OWORD *)&v32[16];
            *((_OWORD *)v19 + 2) = v21;
            *(_OWORD *)v19 = v20;
            v22 = (char *)*((_QWORD *)this + 4071);
            v23 = (char *)*((_QWORD *)this + 4070);
            v24 = v19;
            if (v22 != v23)
            {
              do
              {
                v25 = *((_OWORD *)v22 - 3);
                v26 = *((_OWORD *)v22 - 1);
                *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
                *((_OWORD *)v24 - 1) = v26;
                *((_OWORD *)v24 - 3) = v25;
                v24 -= 48;
                v22 -= 48;
              }
              while (v22 != v23);
              v22 = *v5;
            }
            *((_QWORD *)this + 4070) = v24;
            v13 = v19 + 48;
            *((_QWORD *)this + 4071) = v19 + 48;
            *((_QWORD *)this + 4072) = &v18[48 * v17];
            if (v22)
              operator delete(v22);
          }
          else
          {
            v11 = *(_OWORD *)v32;
            v12 = *(_OWORD *)&v32[32];
            v9[1] = *(_OWORD *)&v32[16];
            v9[2] = v12;
            *v9 = v11;
            v13 = v9 + 3;
          }
          *((_QWORD *)this + 4071) = v13;
          v7 = (OZCurrentThread *)((char *)v7 + 1);
        }
        while (v7 != v4);
        v3 = (OZCurrentThread *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
        v4 = v3;
      }
      while (v3);
    }
    v27 = *((_QWORD *)this + 121);
    if (v27)
    {
      v28 = *(OZDocument **)(v27 + 1584);
      if (v28)
      {
        Instance = OZCurrentThread::getInstance(v3);
        if (PCThread::isSelf(*((_opaque_pthread_t ***)Instance + 1)))
        {
          OZDocument::postNotification(v28, 8);
        }
        else
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = ___ZN14OZImageElement46ptcRefreshCinematographyInternalDataFromScriptEv_block_invoke;
          block[3] = &__block_descriptor_40_e5_v8__0l;
          block[4] = v28;
          dispatch_async(MEMORY[0x1E0C80D38], block);
        }
      }
    }
  }
}

void ___ZN14OZImageElement46ptcRefreshCinematographyInternalDataFromScriptEv_block_invoke(uint64_t a1)
{
  OZDocument::postNotification(*(OZDocument **)(a1 + 32), 8);
}

OZChannelBase *OZImageElement::ptcRefreshCinematographyDataChannels(OZImageElement *this)
{
  OZFootage *Footage;
  const PCString *v3;
  OZChannelBase *result;
  void *v5;
  OZChannel *v6;
  void *v7;
  OZChannelBase *v8;
  uint64_t v9;
  OZChannelBase *v10;
  void *v11;
  float v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CMTimeRange v17;
  _QWORD v18[3];
  CMTime v19;
  CMTime duration;
  CMTime v21;
  CMTime v22;
  CMTime start;
  CMTimeRange v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (!Footage || (OZFootage::isCinematographyAvailable(Footage, v3) & 1) == 0)
    return OZChannelBase::setFlag((OZChannelBase *)this + 271, 2, 1);
  result = OZChannelBase::resetFlag((OZChannelBase *)this + 271, 2, 1);
  v5 = (void *)*((_QWORD *)this + 3789);
  if (v5)
  {
    OZImageElement::ptcSyncChangesDictionaryFromScript(this);
    OZImageElement::ptcRefreshCinematographyInternalDataFromScript(this);
    v6 = (OZChannel *)((char *)this + 30888);
    OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 30888), MEMORY[0x1E0CA2E68]);
    memset(&v24, 0, sizeof(v24));
    (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(_QWORD *)this + 1128))(&v21, this);
    v22 = v21;
    (*(void (**)(CMTime *__return_ptr, OZImageElement *, CMTime *))(*(_QWORD *)this + 1144))(&start, this, &v22);
    (*(void (**)(_QWORD *__return_ptr, OZImageElement *))(*(_QWORD *)this + 1128))(v18, this);
    duration = v19;
    CMTimeRangeMake(&v24, &start, &duration);
    v17 = v24;
    v7 = (void *)objc_msgSend(v5, "framesInTimeRange:", &v17);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    result = (OZChannelBase *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v25, 16);
    if (result)
    {
      v8 = result;
      v9 = *(_QWORD *)v14;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v7);
          v11 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v10);
          memset(&v21, 0, sizeof(v21));
          if (v11)
            objc_msgSend(v11, "time");
          objc_msgSend(v11, "focusDistance");
          OZChannel::appendKeyframe(v6, &v21, v12);
          v10 = (OZChannelBase *)((char *)v10 + 1);
        }
        while (v8 != v10);
        result = (OZChannelBase *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v25, 16);
        v8 = result;
      }
      while (result);
    }
  }
  return result;
}

void OZImageElement::ptcResetCinematographyDataChannels(OZImageElement *this)
{
  OZChannelBase::reset((OZChannelBase *)this + 288, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 30736), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0);
  *((_QWORD *)this + 4071) = *((_QWORD *)this + 4070);
}

void OZImageElement::ptcResetCinematographyUserChannels(OZImageElement *this)
{
  OZChannelBase::reset((OZChannelBase *)((char *)this + 31296), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 31040), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 32000), 0);
}

void OZImageElement::ptcResetCinematographyAllChannels(OZImageElement *this)
{
  OZImageElement::ptcResetCinematographyDataChannels(this);
  OZImageElement::ptcResetCinematographyUserChannels(this);
}

uint64_t ___ZN14OZImageElement22ptcLoadCinematicScriptEv_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0)
    NSLog(CFSTR("ScriptEngine error during prepare:%@"), a3);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return PCSemaphore::signal(*(PCSemaphore **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

OZChannelBase *OZImageElement::ptcFillCinematographyDataChannels(OZImageElement *this)
{
  OZFootage *Footage;
  const PCString *v3;
  OZChannelBase **v4;
  unsigned __int8 v5;
  OZChannelBase *v6;
  OZChannelBase *result;
  const PCString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t i;
  void *v16;
  float v17;
  double v18;
  OZChannel *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CMTimeRange v24;
  CMTime v25;
  CMTime v26;
  CMTime duration;
  CMTime v28;
  CMTime v29;
  CMTime start;
  CMTimeRange v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (!Footage)
  {
    v6 = (OZChannelBase *)((char *)this + 30352);
    return OZChannelBase::setFlag(v6, 2, 0);
  }
  v4 = (OZChannelBase **)Footage;
  v5 = OZFootage::isCinematographyAvailable(Footage, v3);
  v6 = (OZChannelBase *)((char *)this + 30352);
  if ((v5 & 1) == 0)
    return OZChannelBase::setFlag(v6, 2, 0);
  OZChannelBase::resetFlag(v6, 2, 0);
  result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 32256), MEMORY[0x1E0CA2E68], 0.0);
  if (!(_DWORD)result)
  {
    OZChannelBase::setRangeName(v4[1009], v8);
    result = (OZChannelBase *)OZFootage::ensureClipIsOpen((OZFootage *)v4);
    v9 = (void *)*((_QWORD *)this + 3789);
    if (v9)
    {
      memset(&v31, 0, sizeof(v31));
      (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(_QWORD *)this + 1128))(&v28, this);
      v29 = v28;
      (*(void (**)(CMTime *__return_ptr, OZImageElement *, CMTime *))(*(_QWORD *)this + 1144))(&start, this, &v29);
      (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(_QWORD *)this + 1128))(&v25, this);
      duration = v26;
      CMTimeRangeMake(&v31, &start, &duration);
      v24 = v31;
      v10 = (void *)objc_msgSend(v9, "framesInTimeRange:", &v24);
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v21;
        v14 = 0.0;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v21 != v13)
              objc_enumerationMutation(v10);
            v16 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
            memset(&v25, 0, sizeof(v25));
            if (v16)
              objc_msgSend(v16, "time");
            objc_msgSend(v16, "aperture");
            v18 = v17;
            if (vabdd_f64(v14, v17) >= 0.0000001)
            {
              OZChannel::appendKeyframe((OZChannel *)((char *)this + 30736), &v25, v18);
              v28 = v25;
              v14 = v18;
            }
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
        }
        while (v12);
      }
      v19 = (OZChannel *)((char *)this + 30736);
      if (OZChannel::getNumberOfKeyframes(v19) == 1)
        OZChannel::deleteAllKeyframes(v19, &v28);
      return (OZChannelBase *)OZChannel::setDefaultToCurrentValue(v19);
    }
  }
  return result;
}

uint64_t OZImageElement::ptcSyncChangesDictionaryFromScript(OZImageElement *this)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = (void *)*((_QWORD *)this + 3790);
  if (v2)
  {

    *((_QWORD *)this + 3790) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 3791);
  if (v3)
  {

    *((_QWORD *)this + 3791) = 0;
  }
  *((_QWORD *)this + 3790) = objc_msgSend((id)objc_msgSend(*((id *)this + 3788), "changesDictionary"), "copy");
  result = objc_msgSend((id)objc_msgSend(*((id *)this + 3789), "changesDictionary"), "copy");
  *((_QWORD *)this + 3791) = result;
  return result;
}

void OZImageElement::ptcCopyScriptData(OZImageElement *this, id *a2)
{
  OZImageElement::ptcDeleteScriptData(this);
  *((_QWORD *)this + 3792) = objc_msgSend(a2[3792], "copy");
  *((_QWORD *)this + 3793) = objc_msgSend(a2[3793], "copy");
  *((_QWORD *)this + 3790) = objc_msgSend(a2[3790], "copy");
  *((_QWORD *)this + 3791) = objc_msgSend(a2[3791], "copy");
  OZImageElement::ptcLoadCinematicScript(this);
}

void OZImageElement::ptcDeleteScriptData(OZImageElement *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 3792);
  if (v2)
  {

    *((_QWORD *)this + 3792) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 3793);
  if (v3)
  {

    *((_QWORD *)this + 3793) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 3790);
  if (v4)
  {

    *((_QWORD *)this + 3790) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 3791);
  if (v5)
  {

    *((_QWORD *)this + 3791) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 3788);
  if (v6)
  {

    *((_QWORD *)this + 3788) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 3789);
  if (v7)
  {

    *((_QWORD *)this + 3789) = 0;
  }
}

_QWORD *OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

void initializeMotionInternal(void)
{
  OZApplication *v0;
  const PCString *v1;
  _BYTE v2[32];
  id v3;

  OZCacheManager::setHosted((OZCacheManager *)1);
  PGInitPGContext();
  PGInitTextures();
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v3);
  if (!theApp)
  {
    v0 = (OZApplication *)operator new();
    OZApplication::OZApplication(v0, 0);
    theApp = (uint64_t)v0;
    *((_WORD *)v0 + 40) = 257;
    OZApplication::initialize((OZChannelBase *)v0, v1);
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v2);
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v2);
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v3);
}

void sub_1B2E38700(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCAutoreleasePool::~PCAutoreleasePool((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

uint64_t OZXWaitForAsyncInitialization()
{
  {
  }
  else
  {
    initializeMotionInternal();
  }
}

void sub_1B2E387E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZXSetHostDelegate(void *a1)
{
  uint64_t v2;

  v2 = 1;
  {
    OZApplication::setHostApplicationDelegate((OZChannelBase **)theApp, a1);
    v2 = 0;
  }
  return v2;
}

void sub_1B2E38874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZXCopyDocument(const OZDocument **a1, _QWORD *a2)
{
  const OZDocument *v2;
  void *v4;
  PCMutex *RenderEngineMutex;
  OZDocument *v6;
  _QWORD *v7;
  uint64_t v9;

  *a2 = 0;
  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      v4 = (void *)objc_opt_new();
      RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
      PCMutex::lock(RenderEngineMutex);
      LOBYTE(v9) = 1;
      v6 = (OZDocument *)operator new();
      OZDocument::OZDocument(v6, v2, 1);
      v7 = (_QWORD *)operator new();
      v7[1] = 0;
      v7[2] = 0;
      *v7 = v6;
      *a2 = v7;
      objc_msgSend(v4, "drain", RenderEngineMutex, v9);
      PCMutex::unlock(RenderEngineMutex);
    }
  }
  return 0;
}

void sub_1B2E3895C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2E3892CLL);
}

void sub_1B2E38994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZXLoadDocument(void *a1, _QWORD *a2, double *a3, int a4, int a5)
{
  PCMutex *RenderEngineMutex;
  OZApplication *v11;
  OZDocument *CurrentDoc;
  OZDocument *v13;
  OZDocument *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  const PCString *v19;
  _QWORD *v20;
  OZNotificationManager *v21;
  uint64_t v22;
  const PCString *v23;
  int v25;
  _BYTE v26[8];
  OZChannelBase v27;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v27.var10);
  RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
  v27.var8 = (unint64_t)RenderEngineMutex;
  PCMutex::lock(RenderEngineMutex);
  LOBYTE(v27.var9) = 1;
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&v27.var4);
  v11 = (OZApplication *)theApp;
  v25 = *(unsigned __int8 *)(theApp + 80);
  if (!*(_BYTE *)(theApp + 80))
    *(_BYTE *)(theApp + 80) = 1;
  CurrentDoc = (OZDocument *)OZApplication::getCurrentDoc(v11);
  OZApplication::setPerThreadCurrentDoc((OZApplication *)theApp, CurrentDoc);
  v13 = OZApplication::newDocument((OZApplication *)theApp);
  v14 = v13;
  *a2 = 0;
  if (a3)
    *a3 = 0.0;
  if (!v13)
    goto LABEL_22;
  OZApplication::setCurrentDoc((OZApplication *)theApp, v13);
  v15 = *((_QWORD *)v14 + 3);
  if (v15)
  {
    v16 = v15 + 336;
    Li3DEngineImageSource::setVideoOrientation(v15 + 336, a4);
    OZSceneSettings::setHostAppProjectHeight(v16, a5);
  }
  if (objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("moef")))
  {
    v17 = 3;
LABEL_17:
    *((_DWORD *)v14 + 80) = v17;
    goto LABEL_18;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("motr")))
  {
    v17 = 2;
    goto LABEL_17;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("moti")))
  {
    v17 = 4;
    goto LABEL_17;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "path"), "rangeOfString:", CFSTR("Generators.localized")) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v17 = 1;
    goto LABEL_17;
  }
  *((_DWORD *)v14 + 80) = 0;
LABEL_18:
  PCTimer::PCTimer((PCTimer *)&v27);
  PCTimer::start((PCTimer *)&v27);
  PCURL::PCURL((PCURL *)v26, a1);
  v18 = OZDocument::open((OZChannelBase *)v14, (const PCURL *)v26);
  PCURL::~PCURL((PCURL *)v26);
  PCTimer::stop((PCTimer *)&v27);
  if (a3)
    *a3 = PCTimer::getSeconds((PCTimer *)&v27);
  if (!v18)
  {
    OZApplication::setCurrentDoc((OZApplication *)theApp, CurrentDoc);
    (*(void (**)(OZDocument *))(*(_QWORD *)v14 + 8))(v14);
    OZApplication::setPerThreadCurrentDoc((OZApplication *)theApp, 0);
    OZChannelBase::setRangeName(&v27, v23);
    v22 = 4;
    goto LABEL_27;
  }
  OZChannelBase::setRangeName(&v27, v19);
LABEL_22:
  OZApplication::setPerThreadCurrentDoc((OZApplication *)theApp, 0);
  v20 = (_QWORD *)operator new();
  v20[1] = 0;
  v20[2] = 0;
  *v20 = v14;
  if (v14)
  {
    v21 = (OZNotificationManager *)*((_QWORD *)v14 + 21);
    if (v21)
      OZNotificationManager::processNotifications(v21);
  }
  v22 = 0;
  *a2 = v20;
LABEL_27:
  if (!v25)
    *(_BYTE *)(theApp + 80) = 0;
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&v27.var4);
  if (RenderEngineMutex)
    PCMutex::unlock(RenderEngineMutex);
  PCAutoreleasePool::~PCAutoreleasePool((id *)&v27.var10);
  return v22;
}

void sub_1B2E38C44(void *a1, int a2, int a3, char a4, OZChannelBase *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  if (!a11)
    *(_BYTE *)(*(_QWORD *)v21 + 80) = 0;
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a21)
    JUMPOUT(0x1B2E38C18);
  JUMPOUT(0x1B2E38C0CLL);
}

void sub_1B2E38CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  JUMPOUT(0x1B2E38C90);
}

uint64_t OZXOpenDocumentMedia(uint64_t a1)
{
  PCMutex *RenderEngineMutex;
  uint64_t v3;
  OZScene *v4;
  id v6;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v6);
  if (a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    PCMutex::lock(RenderEngineMutex);
    v3 = 1;
    v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
    if (v4)
    {
      v3 = OZScene::openMedia(v4) != 0;
      if (!RenderEngineMutex)
        goto LABEL_8;
      goto LABEL_7;
    }
    if (RenderEngineMutex)
LABEL_7:
      PCMutex::unlock(RenderEngineMutex);
  }
  else
  {
    v3 = 7;
  }
LABEL_8:
  PCAutoreleasePool::~PCAutoreleasePool(&v6);
  return v3;
}

void sub_1B2E38D98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a10)
    JUMPOUT(0x1B2E38D74);
  JUMPOUT(0x1B2E38D68);
}

void sub_1B2E38DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  PCMutex *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, PCMutex *);
  v5 = va_arg(va1, _QWORD);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va1);
  _Unwind_Resume(a1);
}

_QWORD *OZScene::begin_t<OZFootageLayer,false,false>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2E38E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZSceneNode::begin_t<OZFootage,false,true>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *result;
  const void *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  if ((uint64_t *)v4 != result)
  {
    v6 = *(const void **)(v4 + 16);
    if (!v6)
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E38F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void OZXFreeDocument(_QWORD *a1, int a2)
{
  PCMutex *RenderEngineMutex;
  const PCString *v5;
  OZChannelBase *v6;
  uint64_t v7;
  _BYTE v8[32];
  PCMutex *v9;
  char v10;
  id v11;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v11);
  if (a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    v9 = RenderEngineMutex;
    PCMutex::lock(RenderEngineMutex);
    v10 = 1;
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v8);
    v6 = (OZChannelBase *)a1[1];
    if (v6)
    {
      v7 = OZChannelBase::setRangeName(v6, v5);
      MEMORY[0x1B5E29170](v7, 0xC400A2AC0F1);
    }
    a1[1] = 0;
    if (a2)
    {
      if (*a1)
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
      *a1 = 0;
    }
    MEMORY[0x1B5E29170](a1, 0xA0C40E93CF5C4);
    -[PMObjectCache clearCache](+[PMObjectCache sharedInstance](PMObjectCache, "sharedInstance"), "clearCache");
    +[PMObjectCache releaseSharedInstance](PMObjectCache, "releaseSharedInstance");
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v8);
    if (RenderEngineMutex)
      PCMutex::unlock(RenderEngineMutex);
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v11);
}

void sub_1B2E39014(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a14)
    JUMPOUT(0x1B2E38FF4);
  JUMPOUT(0x1B2E38FE8);
}

void sub_1B2E39060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  JUMPOUT(0x1B2E39020);
}

void OZXGetRenderGraph(OZScene *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, GLRenderer *a4@<X3>, PCString *a5@<X5>, HGSolidColor **a6@<X8>)
{
  LiHelium *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  int BitsPerChannel;
  int isRenderForHDR_Deprecated;
  PCRenderModel *RenderModel;
  uint64_t WorkingColorDescription;
  CGColorSpace *v52;
  char *OutputColorDescription;
  CGColorSpace *v54;
  uint64_t v55;
  HGSolidColor *v56;
  HGNode *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  FxColorDescription v61;
  FxColorDescription v62;
  uint64_t obj;
  std::__shared_weak_count *v64;
  __int128 v65;

  v65 = 0uLL;
  OZRenderParams::setFFInputContext(a2, a3);
  if (a5)
  {
    if (v11)
    {
      LiHelium::getDefaultGPU(v11, &v62);
      *(_OWORD *)&v61._pcColorDesc._colorSpaceRef._obj = *(_OWORD *)&v62._pcColorDesc._colorSpaceRef._obj;
      if (*(_QWORD *)&v62._pcColorDesc._dynamicRange)
      {
        v12 = (unint64_t *)(*(_QWORD *)&v62._pcColorDesc._dynamicRange + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      OZRenderParams::setRenderDevice(a2, (uint64_t *)&v61);
      v14 = *(std::__shared_weak_count **)&v61._pcColorDesc._dynamicRange;
      if (*(_QWORD *)&v61._pcColorDesc._dynamicRange)
      {
        v15 = (unint64_t *)(*(_QWORD *)&v61._pcColorDesc._dynamicRange + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = *(std::__shared_weak_count **)&v62._pcColorDesc._dynamicRange;
      if (*(_QWORD *)&v62._pcColorDesc._dynamicRange)
      {
        v18 = (unint64_t *)(*(_QWORD *)&v62._pcColorDesc._dynamicRange + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      goto LABEL_49;
    }
  }
  HGComputeDeviceManager::GetCPUComputeDevice(v11, &v62);
  *(_OWORD *)&v61._pcColorDesc._colorSpaceRef._obj = *(_OWORD *)&v62._pcColorDesc._colorSpaceRef._obj;
  if (*(_QWORD *)&v62._pcColorDesc._dynamicRange)
  {
    v20 = (unint64_t *)(*(_QWORD *)&v62._pcColorDesc._dynamicRange + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  OZRenderParams::setRenderDevice(a2, (uint64_t *)&v61);
  v28 = *(std::__shared_weak_count **)&v61._pcColorDesc._dynamicRange;
  if (*(_QWORD *)&v61._pcColorDesc._dynamicRange)
  {
    v29 = (unint64_t *)(*(_QWORD *)&v61._pcColorDesc._dynamicRange + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_DWORD *)(a2 + 320) = 1;
  if (!a5)
  {
    obj = (uint64_t)v62._pcColorDesc._colorSpaceRef._obj;
    v64 = *(std::__shared_weak_count **)&v62._pcColorDesc._dynamicRange;
    if (*(_QWORD *)&v62._pcColorDesc._dynamicRange)
    {
      v31 = (unint64_t *)(*(_QWORD *)&v62._pcColorDesc._dynamicRange + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    PGHelium::acquireRenderer(&obj, v22, v23, v24, v25, v26, v27, &v61);
    v33 = *(_OWORD *)&v61._pcColorDesc._colorSpaceRef._obj;
    *(_OWORD *)&v61._pcColorDesc._colorSpaceRef._obj = 0uLL;
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    v65 = v33;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(std::__shared_weak_count **)&v61._pcColorDesc._dynamicRange;
    if (*(_QWORD *)&v61._pcColorDesc._dynamicRange)
    {
      v38 = (unint64_t *)(*(_QWORD *)&v61._pcColorDesc._dynamicRange + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v64;
    if (v64)
    {
      v41 = (unint64_t *)&v64->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    a5 = (PCString *)v65;
  }
  v43 = *(std::__shared_weak_count **)&v62._pcColorDesc._dynamicRange;
  if (*(_QWORD *)&v62._pcColorDesc._dynamicRange)
  {
    v44 = (unint64_t *)(*(_QWORD *)&v62._pcColorDesc._dynamicRange + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if (a5)
        goto LABEL_49;
LABEL_69:
      v56 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
      HGSolidColor::HGSolidColor(v56);
      (*(void (**)(HGSolidColor *, _QWORD, float, float, float, float))(*(_QWORD *)v56 + 96))(v56, 0, 1.0, 0.0, 1.0, 1.0);
      goto LABEL_70;
    }
  }
  if (!a5)
    goto LABEL_69;
LABEL_49:
  v46 = ((uint64_t (*)(PCString *, uint64_t))a5->var0[4].isa)(a5, 19);
  switch(v46)
  {
    case 24:
      HGUserJob::SetPriority(a2 + 1316, 0);
      v47 = 5;
      break;
    case 27:
      HGUserJob::SetPriority(a2 + 1316, 2);
      v47 = 13;
      break;
    case 28:
      HGUserJob::SetPriority(a2 + 1316, 3);
      v47 = 16;
      break;
    default:
      v47 = 3;
      break;
  }
  *(_DWORD *)(a2 + 216) = v47;
  *(_DWORD *)(a2 + 340) = v47;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_OWORD *)(a2 + 408) = 0u;
  BitsPerChannel = PCPixelFormat::getBitsPerChannel(v47);
  OZRenderParams::setDepth((OZRenderParams *)a2, BitsPerChannel);
  isRenderForHDR_Deprecated = OZRenderParams::isRenderForHDR_Deprecated((OZRenderParams *)a2);
  OZScene::setRawWorkingGamut((uint64_t)a1, isRenderForHDR_Deprecated);
  obj = 0;
  RenderModel = (PCRenderModel *)OZScene::getRenderModel(a1);
  if (!PCRenderModel::is_iOS(RenderModel))
  {
    WorkingColorDescription = OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
    (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(_QWORD *)a1 + 136))(&v62, a1);
    LODWORD(WorkingColorDescription) = operator!=(WorkingColorDescription, (uint64_t)&v62, v52);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v62._pcColorDesc._colorSpaceRef._obj);
    if ((_DWORD)WorkingColorDescription)
    {
      OutputColorDescription = OZRenderParams::getOutputColorDescription((OZRenderParams *)a2);
      v54 = *(CGColorSpace **)OutputColorDescription;
      v62._pcColorDesc._colorSpaceRef._obj = v54;
      if (v54)
        PCCFRefTraits<CGColorSpace *>::retain(v54);
      v55 = *((_QWORD *)OutputColorDescription + 1);
      v62._pcColorDesc._toneMapMethod._gain = *((float *)OutputColorDescription + 4);
      *(_QWORD *)&v62._pcColorDesc._dynamicRange = v55;
      v62._isPremultiplied = OutputColorDescription[24];
      (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(_QWORD *)a1 + 136))(&v61, a1);
      OZRenderParams::setWorkingColorDescription((CGColorSpace **)a2, &v61);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v61._pcColorDesc._colorSpaceRef._obj);
      OZRenderParams::setOutputColorDescription((CGColorSpace **)a2, &v62);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v62._pcColorDesc._colorSpaceRef._obj);
    }
  }
  GLRenderer::getFrameNode(a4, a1, (HGRenderJob *)a2, a5, &obj, (uint64_t *)&v62);
  v56 = v62._pcColorDesc._colorSpaceRef._obj;
  if (obj)
  {
    v57 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v57);
    if (v56 == (HGSolidColor *)v57)
    {
      if (v56)
        (*(void (**)(HGSolidColor *))(*(_QWORD *)v56 + 24))(v56);
    }
    else
    {
      if (v56)
        (*(void (**)(HGSolidColor *))(*(_QWORD *)v56 + 24))(v56);
      v56 = (HGSolidColor *)v57;
    }
  }
LABEL_70:
  *a6 = v56;
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_1B2E3957C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v3 - 64);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void OZXGetDocInfo(uint64_t a1, uint64_t a2)
{
  PCMutex *RenderEngineMutex;
  uint64_t v5;
  _BOOL8 v6;
  int BitDepth;
  int v8;
  int v9;
  id v10;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v10);
  if (a1 && *(_QWORD *)a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    PCMutex::lock(RenderEngineMutex);
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)(a2 + 144) = 0;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_QWORD *)(a2 + 4) = *(_QWORD *)(v5 + 344);
    v6 = OZSceneSettings::is360Project((OZSceneSettings *)(v5 + 336));
    *(_DWORD *)(a2 + 12) = v6;
    BitDepth = OZSceneSettings::getBitDepth((OZSceneSettings *)v6);
    *(_DWORD *)(a2 + 16) = PCBitDepth::getBitsPerChannel(BitDepth);
    *(_DWORD *)(a2 + 20) = 4;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(v5 + 352);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v5 + 368);
    *(_DWORD *)(a2 + 40) = *(unsigned __int8 *)(v5 + 376);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(v5 + 384);
    *(_DWORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 160) || (v8 = *(_DWORD *)(v5 + 688)) == 0 || v8 == 2 && *(_DWORD *)(v5 + 480))
    {
      v9 = *(_DWORD *)(v5 + 480);
      if ((v9 - 1) < 2)
        *(_DWORD *)(a2 + 56) = v9;
    }
    *(_QWORD *)(a2 + 60) = *(_QWORD *)(v5 + 528);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(v5 + 536);
    *(_DWORD *)a2 = 1;
    if (RenderEngineMutex)
      PCMutex::unlock(RenderEngineMutex);
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v10);
}

void sub_1B2E397DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B2E397F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a10)
    JUMPOUT(0x1B2E397BCLL);
  JUMPOUT(0x1B2E397B0);
}

void sub_1B2E39810(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  JUMPOUT(0x1B2E397E0);
}

uint64_t OZXGetSceneDuration(uint64_t a1, _DWORD *a2, _QWORD *a3, __n128 *a4)
{
  PCMutex *RenderEngineMutex;
  uint64_t v9;
  uint64_t v10;
  __n128 v12;
  unint64_t v13;
  PCMutex *v14;
  char v15;
  id v16;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v16);
  if (a1 && *(_QWORD *)a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    v14 = RenderEngineMutex;
    PCMutex::lock(RenderEngineMutex);
    v15 = 1;
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    *a2 = *(_DWORD *)(v9 + 352);
    *a3 = *(_QWORD *)(v9 + 368);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), &v12);
    v10 = 0;
    *a4 = v12;
    a4[1].n128_u64[0] = v13;
    if (RenderEngineMutex)
      PCMutex::unlock(RenderEngineMutex);
  }
  else
  {
    v10 = 7;
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v16);
  return v10;
}

void sub_1B2E398F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a12)
    JUMPOUT(0x1B2E398C8);
  JUMPOUT(0x1B2E398B4);
}

void sub_1B2E39914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  PCMutex *v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, PCMutex *);
  v7 = va_arg(va1, _QWORD);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va1);
  _Unwind_Resume(a1);
}

_QWORD *OZXSetTargetDisplayAspectRatio(_QWORD *result, double a2)
{
  _QWORD *v2;
  PCMutex *RenderEngineMutex;
  uint64_t v5;

  if (result)
  {
    v2 = result;
    if (*result)
    {
      RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
      PCMutex::lock(RenderEngineMutex);
      v5 = *(_QWORD *)(*v2 + 24);
      if (v5)
        OZScene::setTargetDisplayAspectRatio(v5, a2, 0, 0);
      return (_QWORD *)PCMutex::unlock(RenderEngineMutex);
    }
  }
  return result;
}

void sub_1B2E399B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2E39994);
}

void sub_1B2E399BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

_QWORD *OZXSetTargetDisplayAspectRatioWithNativeSize(_QWORD *result, double a2, double a3, double a4)
{
  _QWORD *v4;
  PCMutex *RenderEngineMutex;
  uint64_t v9;

  if (result)
  {
    v4 = result;
    if (*result)
    {
      RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
      PCMutex::lock(RenderEngineMutex);
      v9 = *(_QWORD *)(*v4 + 24);
      if (v9)
        OZScene::setTargetDisplayAspectRatioWithNativeSize(v9, a2, a3, a4, 0);
      return (_QWORD *)PCMutex::unlock(RenderEngineMutex);
    }
  }
  return result;
}

void sub_1B2E39A60(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2E39A40);
}

void sub_1B2E39A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZXMarkerCount(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)result)
      return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 24) + 1136) + 24);
    else
      return 0;
  }
  return result;
}

uint64_t OZXGetMarkerFigTimeOfType(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v8;
  _QWORD *v9;
  _BOOL4 v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  PCString *Label;
  __CFString *v19;
  __CFString *v20;
  CFStringRef Copy;
  __n128 v22;
  uint64_t v23;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD **)(v4 + 1136);
  if (v5[3] <= (unint64_t)a2)
    return 11;
  v8 = (_QWORD *)v5[1];
  v9 = v5 + 2;
  v10 = v8 != v9;
  v11 = v8 == v9 || a2 == 0;
  if (!v11)
  {
    do
    {
      v12 = (_QWORD *)v8[1];
      v13 = v8;
      if (v12)
      {
        do
        {
          v8 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v13[2];
          v11 = *v8 == (_QWORD)v13;
          v13 = v8;
        }
        while (!v11);
      }
      v10 = v8 != v9;
      if (v8 == v9)
        break;
      --a2;
    }
    while (a2);
  }
  if (!v10)
    return 11;
  v22 = 0uLL;
  v23 = 0;
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), &v22);
  v14 = *((_DWORD *)v8 + 27);
  if (a3 != -1 && v14 != a3)
    return 11;
  v16 = *(_OWORD *)(v8 + 5);
  *(_QWORD *)(a4 + 16) = v8[7];
  *(_OWORD *)a4 = v16;
  v17 = *((_OWORD *)v8 + 4);
  *(_QWORD *)(a4 + 40) = v8[10];
  *(_OWORD *)(a4 + 24) = v17;
  *(_DWORD *)(a4 + 64) = *((_DWORD *)v8 + 26);
  *(_DWORD *)(a4 + 68) = v14;
  Label = (PCString *)OZTimeMarker::getLabel((OZTimeMarker *)(v8 + 4));
  v19 = PCString::cf_str(Label);
  *(_QWORD *)(a4 + 48) = CFStringCreateCopy(0, v19);
  v20 = PCString::cf_str((PCString *)v8 + 12);
  Copy = CFStringCreateCopy(0, v20);
  result = 0;
  *(_QWORD *)(a4 + 56) = Copy;
  return result;
}

void sub_1B2E39BFC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2E39B6CLL);
}

uint64_t OZXGetMarkerFigTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return OZXGetMarkerFigTimeOfType(a1, a2, -1, a3);
}

uint64_t OZXGetDropZone(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  OZScene *v3;
  char *v6;
  char *v8;
  char *v9;

  *a3 = 0;
  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v3)
    return 7;
  OZScene::getAllDropZones(v3, &v8);
  v6 = v8;
  if (a2 >= (unint64_t)((v9 - v8) >> 2))
  {
    if (v8)
    {
      v9 = v8;
      operator delete(v8);
    }
    return 11;
  }
  else
  {
    *a3 = *(_DWORD *)&v8[4 * a2];
    v9 = v6;
    operator delete(v6);
    return 0;
  }
}

void sub_1B2E39CA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2E39C9CLL);
}

uint64_t OZXGetDropZoneIDMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a2 && v3)
  {
    OZScene::getAllDropZonesMap(*(OZScene **)(*(_QWORD *)a1 + 24), (uint64_t)&v8);
    v4 = a2 + 8;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a2, *(_QWORD **)(a2 + 8));
    v5 = v9;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v5;
    v6 = v10;
    *(_QWORD *)(a2 + 16) = v10;
    if (v6)
    {
      v5[2] = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v5 = 0;
    }
    else
    {
      *(_QWORD *)a2 = v4;
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v8, v5);
  }
  if (v3)
    return 0;
  else
    return 7;
}

void sub_1B2E39D6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2E39D58);
}

uint64_t OZXIsValidImageSequencePath(uint64_t a1)
{
  PCMutex *RenderEngineMutex;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const __CFURL **v10;
  int SequenceStart;
  id *URLforIndex;
  uint64_t v14;
  _OWORD v15[2];
  int v16;
  uint64_t v17[4];
  _QWORD v18[8];
  char v19;
  _OWORD v20[2];
  int v21;
  _QWORD v22[4];
  _QWORD v23[6];
  char v24;
  id v25;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v25);
  if (a1 && *(_QWORD *)a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    v23[5] = RenderEngineMutex;
    PCMutex::lock(RenderEngineMutex);
    v24 = 1;
    v3 = *(_QWORD **)(*(_QWORD *)a1 + 24);
    if (!v3)
    {
      v7 = 7;
      if (!RenderEngineMutex)
        goto LABEL_28;
      goto LABEL_27;
    }
    OZScene::begin_t<OZFootageLayer,false,false>(v3, (uint64_t)v22);
    v4 = v3[151];
    memset(v20, 0, sizeof(v20));
    v21 = 1065353216;
    v18[5] = v3 + 150;
    v18[6] = v4;
    v18[7] = v3 + 150;
    v19 = 0;
    if ((_QWORD *)v22[0] == v3 + 150)
    {
      v7 = 0;
    }
    else
    {
      if (v22[0] == v22[2] || (v5 = *(const void **)(v22[0] + 16)) == 0)
        v6 = 0;
      else
      OZSceneNode::begin_t<OZFootage,false,true>((uint64_t)v6, (uint64_t)v17);
      (*(void (**)(void *))(*(_QWORD *)v6 + 1024))(v6);
      v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 1032))(v6);
      v7 = 0;
      memset(v15, 0, sizeof(v15));
      v16 = 1065353216;
      v14 = v8;
      while (!(_DWORD)v7 && v17[0] != v14)
      {
        v10 = (const __CFURL **)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 1408))(v9);
        v7 = (uint64_t)v10;
        if (v10)
        {
          if (PCURL::isSequence(v10))
          {
            SequenceStart = PCURL::getSequenceStart((const __CFURL **)v7);
            URLforIndex = (id *)PCURL::getURLforIndex((const __CFURL **)v7, SequenceStart);
            if (URLforIndex)
            {
              if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "isReadableFileAtPath:", objc_msgSend(*URLforIndex, "path")))v7 = 0;
              else
                v7 = 3;
            }
            else
            {
              v7 = 3;
            }
          }
          else
          {
            v7 = 0;
          }
        }
        OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v17);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
    if (RenderEngineMutex)
LABEL_27:
      PCMutex::unlock(RenderEngineMutex);
  }
  else
  {
    v7 = 7;
  }
LABEL_28:
  PCAutoreleasePool::~PCAutoreleasePool(&v25);
  return v7;
}

void sub_1B2E39FFC(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 144);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(_QWORD *)(v2 - 104))
    JUMPOUT(0x1B2E39FD0);
  JUMPOUT(0x1B2E39FC4);
}

void sub_1B2E3A08C()
{
  uint64_t v0;

  PCConsoleLock::~PCConsoleLock((PCMutex **)(v0 - 104));
  JUMPOUT(0x1B2E3A01CLL);
}

uint64_t OZXSetImageSequencePath(uint64_t a1, PCString *a2)
{
  uint64_t v4;
  PCMutex *RenderEngineMutex;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const __CFURL **v14;
  const __CFURL **v15;
  uint64_t v16;
  PCString v17;
  PCString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  int v24;
  uint64_t v25[4];
  _QWORD v26[8];
  char v27;
  _BYTE v28[32];
  int v29;
  _QWORD v30[4];
  _QWORD v31[6];
  char v32;
  id v33;

  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v33);
  if (!a1 || !*(_QWORD *)a1)
  {
    v4 = 7;
    goto LABEL_6;
  }
  if (PCString::empty(a2))
  {
    v4 = 11;
    goto LABEL_6;
  }
  RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
  v31[5] = RenderEngineMutex;
  PCMutex::lock(RenderEngineMutex);
  v32 = 1;
  v7 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  if (!v7)
  {
    v4 = 7;
    if (!RenderEngineMutex)
      goto LABEL_6;
    goto LABEL_23;
  }
  OZScene::begin_t<OZFootageLayer,false,false>(v7, (uint64_t)v30);
  v8 = v7[151];
  memset(v28, 0, sizeof(v28));
  v29 = 1065353216;
  v26[5] = v7 + 150;
  v26[6] = v8;
  v26[7] = v7 + 150;
  v27 = 0;
  if ((_QWORD *)v30[0] != v7 + 150)
  {
    if (v30[0] == v30[2] || (v9 = *(const void **)(v30[0] + 16)) == 0)
      v10 = 0;
    else
    OZSceneNode::begin_t<OZFootage,false,true>((uint64_t)v10, (uint64_t)v25);
    v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 1024))(v10);
    v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 1032))(v10);
    memset(v23, 0, sizeof(v23));
    v24 = 1065353216;
    v19 = v12;
    v20 = v11;
    v21 = v12;
    v22 = 0;
    while (v25[0] != v19)
    {
      v14 = (const __CFURL **)(*(uint64_t (**)(void *))(*(_QWORD *)v13 + 1424))(v13);
      v15 = v14;
      if (v14 && PCURL::isSequence(v14))
      {
        PCURL::getFilename(v15, &v18);
        PCString::PCString(&v17, a2);
        PCString::append(&v17, "/");
        PCString::append(&v17, &v18);
        PCURL::PCURL((PCURL *)&v16, &v17, 0);
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v13 + 1400))(v13, &v16);
        PCURL::~PCURL((PCURL *)&v16);
        PCString::~PCString(&v17);
        PCString::~PCString(&v18);
      }
      OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v25);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v26);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v28);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v31);
  v4 = 0;
  if (RenderEngineMutex)
LABEL_23:
    PCMutex::unlock(RenderEngineMutex);
LABEL_6:
  PCAutoreleasePool::~PCAutoreleasePool(&v33);
  return v4;
}

void sub_1B2E3A344(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v22 - 144);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(_QWORD *)(v22 - 104))
    JUMPOUT(0x1B2E3A0F0);
  JUMPOUT(0x1B2E3A334);
}

void sub_1B2E3A408()
{
  uint64_t v0;

  PCConsoleLock::~PCConsoleLock((PCMutex **)(v0 - 104));
  JUMPOUT(0x1B2E3A368);
}

uint64_t OZXSetDropZoneOpacityAnimation(uint64_t a1, unsigned int a2, double a3, double a4)
{
  OZScene *v4;
  const void *Object;
  char *v8;
  OZChannel *v9;
  void *FirstEnabledKeyframe;
  void *LastEnabledKeyframe;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  Object = (const void *)OZScene::getObject(v4, a2);
  if (!Object)
    return 11;
  if (!v8)
    return 11;
  v9 = (OZChannel *)(v8 + 6680);
  FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe((OZChannel *)(v8 + 6680));
  OZChannel::setKeyframeValue(v9, FirstEnabledKeyframe, a3);
  LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v9);
  OZChannel::setKeyframeValue(v9, LastEnabledKeyframe, a4);
  return 0;
}

uint64_t OZXSetDropZoneScaleAnimation(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  OZScene *v6;
  const void *Object;
  char *v12;
  OZChannel *v13;
  OZChannel *v14;
  void *FirstEnabledKeyframe;
  void *v16;
  void *LastEnabledKeyframe;
  void *v18;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v6 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v6)
    return 7;
  Object = (const void *)OZScene::getObject(v6, a2);
  if (!Object)
    return 11;
  if (!v12)
    return 11;
  v13 = (OZChannel *)v12;
  v14 = (OZChannel *)(v12 + 4576);
  FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe((OZChannel *)(v12 + 4576));
  OZChannel::setKeyframeValue(v14, FirstEnabledKeyframe, a3);
  v13 = (OZChannel *)((char *)v13 + 4728);
  v16 = (void *)OZChannel::getFirstEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v16, a4);
  LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v14);
  OZChannel::setKeyframeValue(v14, LastEnabledKeyframe, a5);
  v18 = (void *)OZChannel::getLastEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v18, a6);
  return 0;
}

uint64_t OZXSetDropZoneTranslationAnimation(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  OZScene *v6;
  const void *Object;
  char *v12;
  OZChannel *v13;
  OZChannel *v14;
  void *FirstEnabledKeyframe;
  void *v16;
  void *LastEnabledKeyframe;
  void *v18;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v6 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v6)
    return 7;
  Object = (const void *)OZScene::getObject(v6, a2);
  if (!Object)
    return 11;
  if (!v12)
    return 11;
  v13 = (OZChannel *)v12;
  v14 = (OZChannel *)(v12 + 1352);
  FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe((OZChannel *)(v12 + 1352));
  OZChannel::setKeyframeValue(v14, FirstEnabledKeyframe, a3);
  v13 = (OZChannel *)((char *)v13 + 1504);
  v16 = (void *)OZChannel::getFirstEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v16, a4);
  LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v14);
  OZChannel::setKeyframeValue(v14, LastEnabledKeyframe, a5);
  v18 = (void *)OZChannel::getLastEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v18, a6);
  return 0;
}

uint64_t OZXSetShapeRGBColor(uint64_t a1, double a2, double a3, double a4)
{
  OZScene *v4;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _QWORD *v14;
  _QWORD *v15;
  CGColorSpace *DeviceRGB;
  PCColor v18;
  uint64_t v19[4];
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;

  if (!a1)
    return 7;
  if (!*(_QWORD *)a1)
    return 7;
  v4 = *(OZScene **)(*(_QWORD *)a1 + 24);
  if (!v4)
    return 7;
  OZScene::begin(*(OZScene **)(*(_QWORD *)a1 + 24), (uint64_t)v21);
  OZScene::end_sel(v4, (uint64_t)v19);
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = 4;
  v12 = MEMORY[0x1E0CA2E68];
  while (v21[0] != v19[0])
  {
    if (v21[0] != v21[2])
    {
      v13 = *(const void **)(v21[0] + 16);
      if (v13)
      {
        if (v14)
        {
          v15 = v14;
          DeviceRGB = CGColorSpaceCreateDeviceRGB();
          PCColor::PCColor(&v18, v8, v9, v10, 1.0, DeviceRGB);
          (*(void (**)(_QWORD *, uint64_t, PCColor *, uint64_t))(v15[3270] + 840))(v15 + 3270, v12, &v18, 1);
          CGColorSpaceRelease(DeviceRGB);
          PCCFRef<CGColorSpace *>::~PCCFRef(&v18.var1._obj);
          v11 = 0;
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
  return v11;
}

void sub_1B2E3A85C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a30);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2E3A834);
}

_QWORD *OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_OZRenderEngine_mm()
{
}

uint64_t OZX_getRenderEngineMutex(void)
{
}

void OZX_prepareForRender(_QWORD *a1, CMTime *a2, int a3, int a4, int a5, float a6, float a7, uint64_t a8, uint64_t a9, char a10, unsigned int a11, int a12, char a13, unsigned int a14, HGComputeDeviceManager *a15)
{
  _BOOL8 MemoryInfo;
  OZCacheManager *v21;
  OZCacheManager *v22;
  OZCacheManager *v23;
  OZSceneList *v24;
  ProShade::Snippet *v25;
  PCMutex *v26;
  OZSceneList *v27;
  OZChannelBase *v28;
  __CFString *LabelCtlrClassName;
  CMTime *v30;
  OZSceneList *v31;
  uint64_t v32;
  OZScene *isa;
  PGContext *v34;
  char *info;
  char *data;
  BOOL v37;
  ProGL *v38;
  OZScene *v39;
  OZChannelBase *v40;
  int v41;
  int BitsPerChannel;
  int v43;
  CMTimeEpoch epoch;
  _OWORD *v45;
  __int128 v46;
  CGColorSpace **v47;
  __int128 v48;
  HGComputeDeviceManager *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *GPUComputeDeviceList;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  float v65;
  int v66;
  uint64_t v67;
  int RenderQuality;
  int v69;
  char v70;
  int v71;
  int v72;
  char *v73;
  char *v74;
  int v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  unsigned int v82;
  void *v83;
  OZSceneCamera *v84;
  unsigned int ActiveCamera;
  void *Node;
  OZCamera *v87;
  PCSharedCount *v88;
  OZNodeCamera *v89;
  METimeRemap *v90;
  METimeRemap *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  CMTime *v95;
  CMTime *v96;
  CMTime v100;
  PCSharedCount v101;
  uint64_t v102;
  CMTime v103;
  void *lpsrc;
  PCSharedCount v105;
  unint64_t v106[5];
  int v107;
  unsigned __int8 v108;
  _BYTE v109[7];
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  FxColorDescription v117;
  FxColorDescription space;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  int v122;
  PCString *v123;
  uint64_t v124;
  int v125;
  CGColorSpace *v126;
  int v127;
  void (**v128)(OZSceneSettings *__hidden);
  PCString *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  CGColorSpace *v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  char v139;
  PCString v140;
  _BYTE v141[48];

  OZCacheManager::setConservative(1);
  if ((a13 & 1) == 0)
  {
    v106[0] = 0;
    MemoryInfo = PCInfo::getMemoryInfo(0, 0, 0, 0, 0, 0, 0, v106, (unint64_t *)v95);
    if (v106[0] >= 0xC0000001)
    {
      v21 = (OZCacheManager *)OZCacheManager::Instance((OZCacheManager *)MemoryInfo);
      OZCacheManager::clearTextureCache(v21);
      v23 = (OZCacheManager *)OZCacheManager::Instance(v22);
      OZCacheManager::clearMetalTextureCache(v23);
      v25 = OZSceneList::instance(v24);
      v26 = (PCMutex *)ProShade::Snippet::code(v25);
      v128 = (void (**)(OZSceneSettings *__hidden))v26;
      v27 = (OZSceneList *)PCMutex::lock(v26);
      LOBYTE(v129) = 1;
      v28 = (OZChannelBase *)OZSceneList::instance(v27);
      LabelCtlrClassName = OZChannelBase::getLabelCtlrClassName(v28);
      v30 = a2;
      v31 = OZSceneList::instance((OZSceneList *)LabelCtlrClassName);
      v32 = OZSceneList::end(v31);
      if (LabelCtlrClassName != (__CFString *)v32)
      {
        do
        {
          isa = (OZScene *)LabelCtlrClassName[1].isa;
          v34 = (PGContext *)PGGetPerThreadContext();
          OZScene::reloadResources(isa, v34);
          info = (char *)LabelCtlrClassName->info;
          if (info)
          {
            do
            {
              data = info;
              info = *(char **)info;
            }
            while (info);
          }
          else
          {
            do
            {
              data = LabelCtlrClassName->data;
              v37 = *(_QWORD *)data == (_QWORD)LabelCtlrClassName;
              LabelCtlrClassName = (__CFString *)data;
            }
            while (!v37);
          }
          LabelCtlrClassName = (__CFString *)data;
        }
        while (data != (char *)v32);
      }
      v38 = (ProGL *)PCMutex::unlock(v26);
      ProGL::clearTexturePool(v38);
      a2 = v30;
    }
  }
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v141);
  v39 = *(OZScene **)(*a1 + 24);
  OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v128, (OZScene *)((char *)v39 + 336));
  if (!a1[1])
  {
    v40 = (OZChannelBase *)operator new();
    OZChannelBase::setRangeName(v40, (const PCString *)v129);
    a1[1] = v40;
  }
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)&v122);
  if (a12)
    v41 = 2;
  else
    v41 = 1;
  v123 = v129;
  v124 = 0x400000008;
  v122 = v41;
  v125 = 3;
  v127 = 3553;
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)&v120);
  switch(a5)
  {
    case 0:
      BitsPerChannel = PCBitDepth::getBitsPerChannel(0);
      v43 = 3;
      goto LABEL_22;
    case 1:
      BitsPerChannel = PCBitDepth::getBitsPerChannel(2);
      v43 = 13;
      goto LABEL_22;
    case 2:
      BitsPerChannel = PCBitDepth::getBitsPerChannel(3);
      v43 = 16;
LABEL_22:
      LODWORD(v124) = BitsPerChannel;
      goto LABEL_24;
  }
  v43 = 3;
LABEL_24:
  v125 = v43;
  epoch = a2->epoch;
  v96 = a2;
  *(_OWORD *)a15 = *(_OWORD *)&a2->value;
  *((_QWORD *)a15 + 2) = epoch;
  *(_OWORD *)((char *)a15 + 392) = 0uLL;
  *(double *)v106 = a6;
  *(double *)&v106[1] = a7;
  OZRenderParams::setResolution(a15, v106);
  OZRenderParams::setImageAttr((uint64_t)a15, (uint64_t)&v122);
  v45 = (_OWORD *)((char *)a15 + 392);
  *((_BYTE *)a15 + 488) = a4;
  *((_QWORD *)a15 + 5) = v130;
  v46 = v132;
  *(_OWORD *)((char *)a15 + 520) = v131;
  *(_OWORD *)((char *)a15 + 536) = v46;
  *(_OWORD *)((char *)a15 + 552) = v133;
  *(_OWORD *)((char *)a15 + 392) = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  v47 = PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a15 + 71, &v134);
  *((_DWORD *)a15 + 144) = v135;
  v48 = v121[0];
  *(_OWORD *)((char *)a15 + 1316) = v120;
  *(_OWORD *)((char *)a15 + 1332) = v48;
  *(_OWORD *)((char *)a15 + 1346) = *(_OWORD *)((char *)v121 + 14);
  *((_DWORD *)a15 + 54) = v43;
  *(_OWORD *)((char *)a15 + 392) = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  v119 = 0uLL;
  if (a12)
  {
    HGComputeDeviceManager::GetGPUComputeDeviceForCGLVirtualScreen((HGComputeDeviceManager *)a14, v106);
    v50 = *(_OWORD *)v106;
    v106[0] = 0;
    v106[1] = 0;
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    v119 = v50;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)v106[1];
    if (v106[1])
    {
      v55 = (unint64_t *)(v106[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (!(_QWORD)v119)
    {
      GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList(v49);
      std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>(&v119, (uint64_t *)*GPUComputeDeviceList);
    }
  }
  else
  {
    HGComputeDeviceManager::GetCPUComputeDevice((HGComputeDeviceManager *)v47, v106);
    v58 = *(_OWORD *)v106;
    v106[0] = 0;
    v106[1] = 0;
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    v119 = v58;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)v106[1];
    if (v106[1])
    {
      v63 = (unint64_t *)(v106[1] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  OZRenderParams::setRenderDevice((uint64_t)a15, (uint64_t *)&v119);
  (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(_QWORD *)v39 + 136))(&space, v39);
  v117._pcColorDesc._colorSpaceRef._obj = space._pcColorDesc._colorSpaceRef._obj;
  if (space._pcColorDesc._colorSpaceRef._obj)
    PCCFRefTraits<CGColorSpace *>::retain(space._pcColorDesc._colorSpaceRef._obj);
  *(_QWORD *)&v117._pcColorDesc._dynamicRange = *(_QWORD *)&space._pcColorDesc._dynamicRange;
  v117._pcColorDesc._toneMapMethod._gain = space._pcColorDesc._toneMapMethod._gain;
  v117._isPremultiplied = space._isPremultiplied;
  OZRenderParams::setOutputColorDescription((CGColorSpace **)a15, &v117);
  OZRenderParams::setWorkingColorDescription((CGColorSpace **)a15, &space);
  v65 = (*(float (**)(OZScene *))(*(_QWORD *)v39 + 144))(v39);
  OZRenderParams::setBlendingGamma((uint64_t)a15, v65);
  OZRenderParams::setRenderIsForHDR_Deprecated((uint64_t)a15, a10);
  if (a11 >= 2)
    v66 = 2;
  else
    v66 = a11;
  OZRenderParams::setStillImageInverseToneMapOperator_Deprecated((uint64_t)a15, v66);
  *((_QWORD *)a15 + 81) = 0;
  *((int32x2_t *)a15 + 82) = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), vcvt_f32_s32((int32x2_t)v129))), (float64x2_t)0))));
  v67 = *(_QWORD *)(*a1 + 8 * *(int *)(*(_QWORD *)(*a1 + 224) + 12) + 192);
  OZExportSettings::OZExportSettings((OZExportSettings *)v106, (OZScene *)((char *)v39 + 640));
  if (!*(_BYTE *)(*a1 + 160))
  {
    if (a3 == 1)
    {
      v75 = 2;
      OZRenderParams::setRenderQuality((uint64_t)a15, 2);
    }
    else
    {
      if (a3 == 2)
      {
        OZRenderParams::setRenderQuality((uint64_t)a15, 6);
        OZRenderParams::setTextRenderQuality((uint64_t)a15, 6);
        OZRenderParams::setDoHighQualityResampling(a15, 1);
        v70 = 1;
        OZRenderParams::setDoShapeAntialiasing(a15, 1);
LABEL_73:
        OZRenderParams::setDo3DIntersectionAntialiasing(a15, v70);
        goto LABEL_74;
      }
      OZRenderParams::setRenderQuality((uint64_t)a15, 0);
      v75 = 0;
    }
    OZRenderParams::setTextRenderQuality((uint64_t)a15, v75);
    OZRenderParams::setDoHighQualityResampling(a15, 0);
    OZRenderParams::setDoShapeAntialiasing(a15, 1);
    v70 = 0;
    goto LABEL_73;
  }
  RenderQuality = OZExportSettings::getRenderQuality((OZExportSettings *)v106);
  if (RenderQuality == 10)
    v69 = *(_DWORD *)(v67 + 64);
  else
    v69 = OZExportSettings::getRenderQuality((OZExportSettings *)v106);
  OZRenderParams::setRenderQuality((uint64_t)a15, v69);
  if (RenderQuality == 10)
    v71 = *(_DWORD *)(v67 + 68);
  else
    v71 = v107;
  OZRenderParams::setTextRenderQuality((uint64_t)a15, v71);
  if (RenderQuality == 10)
    v72 = *(unsigned __int8 *)(v67 + 72);
  else
    v72 = v108;
  OZRenderParams::setDoHighQualityResampling(a15, v72 != 0);
  v73 = (char *)(v67 + 73);
  if (RenderQuality != 10)
    v73 = v109;
  OZRenderParams::setDoShapeAntialiasing(a15, *v73);
  v74 = (char *)(v67 + 74);
  if (RenderQuality != 10)
    v74 = &v109[1];
  OZRenderParams::setDo3DIntersectionAntialiasing(a15, *v74);
LABEL_74:
  if (v110 == 2)
    v76 = *(_BYTE *)(v67 + 76) != 0;
  else
    v76 = v110 == 0;
  *((_BYTE *)a15 + 496) = v76;
  *((_DWORD *)a15 + 125) = v137;
  *((_QWORD *)a15 + 63) = v138;
  *v45 = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  if (v111 == 2)
    v77 = *(_BYTE *)(v67 + 77) != 0;
  else
    v77 = v111 == 0;
  *((_BYTE *)a15 + 513) = v77;
  if (v113 == 2)
    v78 = *(_BYTE *)(v67 + 78) != 0;
  else
    v78 = v113 == 0;
  *((_BYTE *)a15 + 514) = v78;
  if (v114 == 2)
    v79 = *(_BYTE *)(v67 + 79) != 0;
  else
    v79 = v114 == 0;
  *((_BYTE *)a15 + 515) = v79;
  if (v115 == 2)
    v80 = *(_BYTE *)(v67 + 80) != 0;
  else
    v80 = v115 == 0;
  *((_BYTE *)a15 + 516) = v80;
  if (OZScene::isDepthOfFieldSupported(v39))
  {
    if (v116 == 2)
      v81 = *(_BYTE *)(v67 + 81) != 0;
    else
      v81 = v116 == 0;
  }
  else
  {
    v81 = 0;
  }
  *((_BYTE *)a15 + 517) = v81;
  *((_BYTE *)a15 + 512) = v139;
  *v45 = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  if (a4)
  {
    *((_DWORD *)a15 + 123) = v136;
    *((_BYTE *)a15 + 488) = (*(_DWORD *)&v109[3] & 0xFFFFFFFD) == 0;
    *v45 = 0uLL;
    *(_OWORD *)((char *)a15 + 408) = 0uLL;
  }
  if (*(_BYTE *)(*a1 + 160))
  {
    v82 = v112;
    if (v112 == 20)
    {
      lpsrc = *(void **)(v67 + 96);
      PCSharedCount::PCSharedCount(&v105, (const PCSharedCount *)(v67 + 104));
      OZRenderParams::setCamera((uint64_t)a15, (const PCSharedCount *)&lpsrc);
    }
    else
    {
      if (v112 < 0xB)
      {
        ActiveCamera = OZScene::getActiveCamera(v39, v96);
        Node = OZScene::getNode(v39, ActiveCamera);
        if (!Node)
          goto LABEL_113;
        if (!v87)
          goto LABEL_113;
        v100 = *v96;
        OZCamera::cameraAtTime(v87, &v100, &v101);
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&lpsrc, &v101);
        OZRenderParams::setCamera((uint64_t)a15, (const PCSharedCount *)&lpsrc);
        PCSharedCount::~PCSharedCount(&v105);
        v88 = (PCSharedCount *)&v102;
LABEL_112:
        PCSharedCount::~PCSharedCount(v88);
LABEL_113:
        *((_BYTE *)a15 + 1312) = 0;
        *v45 = 0u;
        *(_OWORD *)((char *)a15 + 408) = 0u;
        goto LABEL_114;
      }
      lpsrc = 0;
      PCSharedCount::PCSharedCount(&v105);
      v83 = OZScene::getNode(v39, v82);
      if (v83
      {
        v84 = (OZSceneCamera *)operator new();
        OZSceneCamera::OZSceneCamera(v84, v39, v82);
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&lpsrc, v84);
      }
      else
      {
        v89 = (OZNodeCamera *)operator new();
        OZNodeCamera::OZNodeCamera(v89, v39, v82, 0);
        PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&lpsrc, v89);
      }
      if (lpsrc)
      {
        if (v90)
        {
          v91 = v90;
          LiRenderingTechnology::setRasterizeEdges((uint64_t)v90, 0);
          v103 = *v96;
          METimeRemap::setOutroDuration(v91, &v103);
        }
      }
      OZRenderParams::setCamera((uint64_t)a15, (const PCSharedCount *)&lpsrc);
    }
    v88 = &v105;
    goto LABEL_112;
  }
LABEL_114:
  *((_BYTE *)a15 + 242) = OZSceneSettings::is360Project((OZSceneSettings *)&v128);
  OZExportSettings::~OZExportSettings((OZExportSettings *)v106);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v117._pcColorDesc._colorSpaceRef._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef(&space._pcColorDesc._colorSpaceRef._obj);
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v126);
  v128 = &off_1E658F368;
  PCString::~PCString(&v140);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v134);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v141);
}

void sub_1B2E3B41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CGColorSpace *a37,uint64_t a38,uint64_t a39,uint64_t a40,CGColorSpace *a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,CGColorSpace *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void (**a63)(OZSceneSettings *__hidden this))
{
  PCSharedCount *v63;
  uint64_t v64;

  PCSharedCount::~PCSharedCount(v63 + 1);
  PCSharedCount::~PCSharedCount(&a20);
  OZExportSettings::~OZExportSettings((OZExportSettings *)&a27);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a41);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a57);
  a63 = &off_1E658F368;
  PCString::~PCString((PCString *)&STACK[0x268]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x230]);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)(v64 - 128));
  _Unwind_Resume(a1);
}

void ___ZN17PCSingletonObjectI16PCRecursiveMutexN12_GLOBAL__N_122PCSingletonObjectTag26ELi0EE6objectEv_block_invoke()
{
  uint64_t v0;

  v0 = operator new();
  PCSingleton::PCSingleton((PCSingleton *)v0, 0);
  *(_QWORD *)v0 = &off_1E658F320;
  PCMutex::PCMutex((PCMutex *)(v0 + 8), 1);
  *(_QWORD *)(v0 + 8) = &unk_1E64E2000;
}

void sub_1B2E3B5F8(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  MEMORY[0x1B5E29170](v1, 0x1081C40EAC9FDC4);
  _Unwind_Resume(a1);
}

void PCSingletonObject<PCRecursiveMutex,`anonymous namespace'::PCSingletonObjectTag26,0>::~PCSingletonObject(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E658F320;
  PCMutex::~PCMutex((PCMutex *)(a1 + 8));
  PCSingleton::~PCSingleton((PCSingleton *)a1);
}

{
  *(_QWORD *)a1 = &off_1E658F320;
  PCMutex::~PCMutex((PCMutex *)(a1 + 8));
  PCSingleton::~PCSingleton((PCSingleton *)a1);
  JUMPOUT(0x1B5E29170);
}

void OZFontManagerBase::getDefaultSystemFont(PCString *a1@<X8>)
{
  const __CFString *v3;

  v3 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA5E8], "systemFontOfSize:weight:", 48.0, *MEMORY[0x1E0CEB5D0]), "fontName");
  a1->var0 = 0;
  PCString::set(a1, v3);
}

void OZFontManagerBase::getDefaultSystemFontFace(OZFontManagerBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  const __CFString *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  PCString v13;
  __int128 v14;

  v5 = (uint64_t *)((char *)this + 144);
  v4 = *((_QWORD *)this + 18);
  if (!v4)
  {
    v6 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA5E8], "systemFontOfSize:weight:", 48.0, *MEMORY[0x1E0CEB5D0]), "fontName");
    v13.var0 = 0;
    PCString::set(&v13, v6);
    (*(void (**)(__int128 *__return_ptr, OZFontManagerBase *, PCString *))(*(_QWORD *)this + 56))(&v14, this, &v13);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v5, &v14);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    PCString::~PCString(&v13);
    v4 = *v5;
  }
  v10 = *((_QWORD *)this + 19);
  *a2 = v4;
  a2[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
}

void sub_1B2E3B7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZFontManagerBase::getDefaultFontSize(OZFontManagerBase *this)
{
  void *v2;
  const __CFString *v3;
  uint64_t result;
  PCString v5;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  (*(void (**)(PCString *__return_ptr, OZFontManagerBase *))(*(_QWORD *)this + 40))(&v5, this);
  v3 = PCString::ns_str(&v5);
  PCString::~PCString(&v5);
  result = objc_msgSend(v2, "integerForKey:", v3);
  if (!(_DWORD)result)
  {
    objc_msgSend(v2, "setObject:forKey:", CFSTR("48"), v3);
    return objc_msgSend(v2, "integerForKey:", v3);
  }
  return result;
}

void sub_1B2E3B894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZFontManagerBase::initFonts(OZFontManagerBase *this)
{
  PCMutex *v2;

  v2 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  if (!*((_BYTE *)this + 136))
    *((_BYTE *)this + 136) = 1;
  return PCMutex::unlock(v2);
}

void OZDocument::getFilename(const __CFURL **this@<X0>, PCURL *a2@<X8>)
{
  PCURL::getAbsoluteString(this + 43, a2);
}

void OZNotificationManager::OZNotificationManager(OZNotificationManager *this, OZDocument *a2, int a3)
{
  *(_QWORD *)this = this;
  *((_QWORD *)this + 1) = this;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 14) = a2;
  *((_WORD *)this + 60) = 0;
  *((_QWORD *)this + 13) = -[OZNotificationStub initWithOZDocument:useTimer:]([OZNotificationStub alloc], "initWithOZDocument:useTimer:", a2, 0);
  *((_QWORD *)this + 16) = 0;
  OZNotificationManager::setIsProcessingAutomatically(this, a3);
}

void sub_1B2E3BEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  a10 = (void **)(v10 + 72);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(v11, *(void ***)(v10 + 32));
  std::__list_imp<unsigned int>::clear((_QWORD *)v10);
  _Unwind_Resume(a1);
}

void OZNotificationManager::setIsProcessingAutomatically(OZNotificationManager *this, int a2)
{
  char v2;
  void *v4;

  if (*((unsigned __int8 *)this + 121) != a2)
  {
    v2 = a2;
    v4 = (void *)*((_QWORD *)this + 13);
    if (a2)
    {
      objc_msgSend(v4, "createTimer");
      OZNotificationManager::createRunLoopObserver(this);
    }
    else
    {
      objc_msgSend(v4, "releaseTimer");
      OZNotificationManager::deleteRunLoopObserver(this);
    }
    *((_BYTE *)this + 121) = v2;
  }
}

void OZNotificationManager::~OZNotificationManager(OZNotificationManager *this)
{
  void **v2;

  OZNotificationManager::deleteRunLoopObserver(this);
  objc_msgSend(*((id *)this + 13), "releaseTimer");

  v2 = (void **)((char *)this + 72);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 48);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy((uint64_t)this + 24, *((void ***)this + 4));
  std::__list_imp<unsigned int>::clear(this);
}

void OZNotificationManager::deleteRunLoopObserver(OZNotificationManager *this)
{
  __CFRunLoopObserver *v2;

  v2 = (__CFRunLoopObserver *)*((_QWORD *)this + 16);
  if (v2)
  {
    CFRunLoopObserverInvalidate(v2);
    CFRelease(*((CFTypeRef *)this + 16));
    *((_QWORD *)this + 16) = 0;
  }
}

_QWORD *OZNotificationManager::addObserver(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v8 = a1;
  while (1)
  {
    v8 = (uint64_t *)v8[1];
    if (v8 == a1)
      break;
    if (v8[3] < a3)
    {
      result = operator new(0x30uLL);
      result[2] = a2;
      result[3] = a3;
      *((_DWORD *)result + 9) = 0;
      *((_DWORD *)result + 10) = 0;
      *((_DWORD *)result + 8) = a4;
      v10 = *v8;
      *(_QWORD *)(v10 + 8) = result;
      *result = v10;
      *v8 = (uint64_t)result;
      result[1] = v8;
      goto LABEL_6;
    }
  }
  result = operator new(0x30uLL);
  result[2] = a2;
  result[3] = a3;
  *((_DWORD *)result + 9) = 0;
  *((_DWORD *)result + 10) = 0;
  *((_DWORD *)result + 8) = a4;
  v11 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v11 + 8) = result;
  *a1 = (uint64_t)result;
LABEL_6:
  ++a1[2];
  if (a4)
  {
    result = *(_QWORD **)(a1[14] + 176);
    if (result)
      return result;
  }
  return result;
}

_QWORD *OZNotificationManager::addCPPObserver(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return OZNotificationManager::addObserver(a1, a2, a3, 0);
}

void OZNotificationManager::removeObserver(OZNotificationManager *this, void *a2)
{
  OZNotificationManager *v2;
  int v3;
  uint64_t v4;
  void *v5;
  BOOL v6;

  v2 = this;
  while (1)
  {
    this = (OZNotificationManager *)*((_QWORD *)this + 1);
    if (this == v2)
      break;
    if (*((void **)this + 2) == a2)
    {
      if (this != v2)
      {
        v3 = *((_DWORD *)this + 8);
        v4 = *(_QWORD *)this;
        *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
        **((_QWORD **)this + 1) = v4;
        --*((_QWORD *)v2 + 2);
        operator delete(this);
        v5 = *(void **)(*((_QWORD *)v2 + 14) + 176);
        if (v5)
          v6 = v3 == 0;
        else
          v6 = 1;
        if (!v6)

      }
      return;
    }
  }
}

void OZNotificationManager::processNotifications(OZNotificationManager *this)
{
  __CFRunLoop *v2;
  int v3;
  std::string *v4;
  std::string *i;
  OZNotificationManager *v6;
  const OZChannelRef *v7;
  OZNotificationManager *v8;
  OZNotificationManager *v9;
  BOOL v10;
  uint64_t j;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  const OZChannelRef *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t m;
  uint64_t v30;
  uint64_t k;
  uint64_t v32;

  if (!*((_BYTE *)this + 136))
  {
    if (*((_BYTE *)this + 121))
    {
      objc_msgSend(*((id *)this + 13), "releaseTimer");
      objc_msgSend(*((id *)this + 13), "createTimer");
    }
    if (*((_QWORD *)this + 16))
    {
      v2 = (__CFRunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop"), "getCFRunLoop");
      CFRunLoopRemoveObserver(v2, *((CFRunLoopObserverRef *)this + 16), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    }
    v3 = *((_DWORD *)this + 24);
    if (v3)
    {
      *((_DWORD *)this + 24) = 0;
      if ((v3 & 0x20) != 0)
      {
        std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy((uint64_t)this + 24, *((void ***)this + 4));
        *((_QWORD *)this + 3) = (char *)this + 32;
        *((_QWORD *)this + 4) = 0;
        *((_QWORD *)this + 5) = 0;
        v4 = (std::string *)*((_QWORD *)this + 6);
        for (i = (std::string *)*((_QWORD *)this + 7);
              i != v4;
        *((_QWORD *)this + 7) = v4;
      }
      else
      {
        v4 = (std::string *)*((_QWORD *)this + 7);
      }
      if (*((std::string **)this + 6) == v4)
      {
        v6 = (OZNotificationManager *)*((_QWORD *)this + 3);
        if (v6 != (OZNotificationManager *)((char *)this + 32))
        {
          do
          {
            v7 = (OZNotificationManager *)((char *)v6 + 32);
            if ((unint64_t)v4 >= *((_QWORD *)this + 8))
            {
              v4 = (std::string *)std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>((uint64_t *)this + 6, v7);
            }
            else
            {
              OZChannelRef::OZChannelRef(v4++, v7);
              *((_QWORD *)this + 7) = v4;
            }
            *((_QWORD *)this + 7) = v4;
            v8 = (OZNotificationManager *)*((_QWORD *)v6 + 1);
            if (v8)
            {
              do
              {
                v9 = v8;
                v8 = *(OZNotificationManager **)v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                v9 = (OZNotificationManager *)*((_QWORD *)v6 + 2);
                v10 = *(_QWORD *)v9 == (_QWORD)v6;
                v6 = v9;
              }
              while (!v10);
            }
            v6 = v9;
          }
          while (v9 != (OZNotificationManager *)((char *)this + 32));
        }
      }
      for (j = *((_QWORD *)this + 1); (OZNotificationManager *)j != this; j = *(_QWORD *)(j + 8))
      {
        v12 = *(_DWORD *)(j + 40);
        v13 = v3;
        if (v12)
        {
          v13 = v3 & ~v12;
          *(_DWORD *)(j + 40) = 0;
        }
        v14 = *(_DWORD *)(j + 36);
        v15 = v13 & ~v14;
        if ((v13 & ~v14) != 0)
        {
          v16 = *(void **)(j + 16);
          if (*(_DWORD *)(j + 32) == 1)
            objc_msgSend(v16, "notify:", v15);
          else
            (*(void (**)(void *, uint64_t))(*(_QWORD *)v16 + 16))(v16, v15);
        }
      }
      if ((v3 & 0x800008) == 8)
      {
        if (*((_BYTE *)this + 120))
        {
          *((_BYTE *)this + 120) = 0;
LABEL_69:
          if ((v3 & 0xC) != 4)
          {
            std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy((uint64_t)this + 24, *((void ***)this + 4));
            *((_QWORD *)this + 3) = (char *)this + 32;
            *((_QWORD *)this + 4) = 0;
            *((_QWORD *)this + 5) = 0;
            v32 = *((_QWORD *)this + 6);
            for (k = *((_QWORD *)this + 7); k != v32; OZChannelRef::~OZChannelRef((void **)(k - 24)))
              ;
            *((_QWORD *)this + 7) = v32;
          }
          return;
        }
        v17 = (char *)*((_QWORD *)this + 3);
        v18 = (char *)this + 32;
        if (v17 != (char *)this + 32)
        {
          v19 = (char *)*((_QWORD *)this + 3);
          while (*((_DWORD *)v19 + 14) != 1)
          {
            v20 = (char *)*((_QWORD *)v19 + 1);
            if (v20)
            {
              do
              {
                v21 = v20;
                v20 = *(char **)v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                v21 = (char *)*((_QWORD *)v19 + 2);
                v10 = *(_QWORD *)v21 == (_QWORD)v19;
                v19 = v21;
              }
              while (!v10);
            }
            v19 = v21;
            if (v21 == v18)
              goto LABEL_51;
          }
          v23 = *((_QWORD *)this + 9);
          v22 = *((_QWORD *)this + 10);
          if (v22 != v23)
          {
            do
              OZChannelRef::~OZChannelRef((void **)(v22 - 24));
            while (v22 != v23);
            v17 = (char *)*((_QWORD *)this + 3);
          }
          *((_QWORD *)this + 10) = v23;
LABEL_51:
          if (v17 != v18)
          {
            do
            {
              if (*((_DWORD *)v17 + 14) == 1 && !*(_BYTE *)(*((_QWORD *)this + 14) + 101))
              {
                v24 = (const OZChannelRef *)(v17 + 32);
                v25 = *((_QWORD *)this + 10);
                if (v25 >= *((_QWORD *)this + 11))
                {
                  v26 = std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>((uint64_t *)this + 9, v24);
                }
                else
                {
                  OZChannelRef::OZChannelRef(*((std::string **)this + 10), v24);
                  v26 = v25 + 24;
                  *((_QWORD *)this + 10) = v25 + 24;
                }
                *((_QWORD *)this + 10) = v26;
              }
              v27 = (char *)*((_QWORD *)v17 + 1);
              if (v27)
              {
                do
                {
                  v28 = v27;
                  v27 = *(char **)v27;
                }
                while (v27);
              }
              else
              {
                do
                {
                  v28 = (char *)*((_QWORD *)v17 + 2);
                  v10 = *(_QWORD *)v28 == (_QWORD)v17;
                  v17 = v28;
                }
                while (!v10);
              }
              v17 = v28;
            }
            while (v28 != v18);
          }
        }
      }
      if ((v3 & 0x800000) != 0)
      {
        v30 = *((_QWORD *)this + 9);
        for (m = *((_QWORD *)this + 10); m != v30; OZChannelRef::~OZChannelRef((void **)(m - 24)))
          ;
        *((_QWORD *)this + 10) = v30;
      }
      goto LABEL_69;
    }
  }
}

void sub_1B2E3C4D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2E3C4D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void OZNotificationManager::postNotification(OZNotificationManager *this, int a2)
{
  int v4;
  __CFRunLoop *v5;
  OZCurrentThread *Instance;

  if (theApp)
  {
    if (*(_BYTE *)(theApp + 80)
      || !*((_BYTE *)this + 121)
      || (Instance = OZCurrentThread::getInstance(this), PCThread::isSelf(*((_opaque_pthread_t ***)Instance + 1))))
    {
      v4 = *((_DWORD *)this + 24);
      *((_DWORD *)this + 24) = v4 | a2;
      if (a2 && !v4)
      {
        if (*((_QWORD *)this + 16))
        {
          v5 = (__CFRunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop"), "getCFRunLoop");
          CFRunLoopAddObserver(v5, *((CFRunLoopObserverRef *)this + 16), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
        }
        objc_msgSend(*((id *)this + 13), "fire");
      }
    }
    else
    {
      NSLog(&CFSTR("Tried to post a notification from a thread other than the main thread. Is an FxPlug trying to change parame"
                   "ters during a render?").isa);
    }
  }
}

void OZNotificationManager::willModifyChannel(uint64_t **this, const OZChannelBase *a2, int a3)
{
  OZCurrentThread *Instance;
  std::string v7;
  int v8;
  void *v9[3];

  if (theApp)
  {
    if (*(_BYTE *)(theApp + 80)
      || !*((_BYTE *)this + 121)
      || (Instance = OZCurrentThread::getInstance((OZCurrentThread *)this),
          PCThread::isSelf(*((_opaque_pthread_t ***)Instance + 1))))
    {
      if (!*((_BYTE *)this[14] + 101))
      {
        OZChannelRef::OZChannelRef((OZChannelRef *)v9, a2, 0);
        OZChannelRef::OZChannelRef(&v7, (const OZChannelRef *)v9);
        v8 = a3;
        if (this + 4 == std::__tree<std::pair<OZChannelRef,unsigned int>>::find<std::pair<OZChannelRef,unsigned int>>((uint64_t)(this + 3), (uint64_t)&v7))std::__tree<std::pair<OZChannelRef,unsigned int>>::__emplace_unique_key_args<std::pair<OZChannelRef,unsigned int>,std::pair<OZChannelRef,unsigned int> const&>(this + 3, (uint64_t)&v7, (const OZChannelRef *)&v7);
        OZChannelRef::~OZChannelRef((void **)&v7.__r_.__value_.__l.__data_);
        OZChannelRef::~OZChannelRef(v9);
      }
    }
    else
    {
      NSLog(&CFSTR("Tried to post a notification from a thread other than the main thread. Is an FxPlug trying to change parame"
                   "ters during a render?").isa);
    }
  }
}

void sub_1B2E3C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZNotificationManager::clearLastModifiedChannels(OZNotificationManager *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 9);
  while (v2 != v3)
    OZChannelRef::~OZChannelRef((void **)(v2 - 24));
  *((_QWORD *)this + 10) = v3;
}

BOOL OZNotificationManager::wasChannelModified(OZNotificationManager *this, const OZChannelRef *a2)
{
  unsigned __int8 *v2;
  char *v3;
  _BOOL8 result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  BOOL v8;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v3 = (char *)this + 32;
  if (v2 == (unsigned __int8 *)((char *)this + 32))
    return 0;
  while (1)
  {
    result = OZChannelRef::operator==(v2 + 32, (unsigned __int8 *)a2);
    if (result)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
        v8 = *(_QWORD *)v7 == (_QWORD)v2;
        v2 = v7;
      }
      while (!v8);
    }
    v2 = v7;
    if (v7 == (unsigned __int8 *)v3)
      return result;
  }
  return 1;
}

BOOL OZNotificationManager::wasChannelModified(OZNotificationManager *this, const OZChannelBase *a2)
{
  _BOOL8 v3;
  void *v5[3];

  OZChannelRef::OZChannelRef((OZChannelRef *)v5, a2, 0);
  v3 = OZNotificationManager::wasChannelModified(this, (const OZChannelRef *)v5);
  OZChannelRef::~OZChannelRef(v5);
  return v3;
}

void sub_1B2E3C7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZNotificationManager::createRunLoopObserver(OZNotificationManager *this)
{
  __CFRunLoop *v2;
  __CFRunLoopObserver *v3;
  CFRunLoopObserverContext context;

  v2 = (__CFRunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop"), "getCFRunLoop");
  context.version = 0;
  context.info = this;
  memset(&context.retain, 0, 24);
  v3 = CFRunLoopObserverCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0xA0uLL, 1u, 0, (CFRunLoopObserverCallBack)updateRunLoopObserver, &context);
  *((_QWORD *)this + 16) = v3;
  if (v3)
    CFRunLoopAddObserver(v2, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
}

void updateRunLoopObserver(__CFRunLoopObserver *a1, unint64_t a2, OZNotificationManager *this)
{
  OZNotificationManager::processNotifications(this);
}

void std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(uint64_t a1, void **a2)
{
  if (a2)
  {
    std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(a1, *a2);
    std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(a1, a2[1]);
    OZChannelRef::~OZChannelRef(a2 + 4);
    operator delete(a2);
  }
}

_QWORD *std::__tree<std::pair<OZChannelRef,unsigned int>>::find<std::pair<OZChannelRef,unsigned int>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

BOOL std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (OZChannelRef::operator<((_QWORD *)a2, (_QWORD *)a3))
    return 1;
  if (OZChannelRef::operator<((_QWORD *)a3, (_QWORD *)a2))
    return 0;
  return *(_DWORD *)(a2 + 24) < *(_DWORD *)(a3 + 24);
}

uint64_t *std::__tree<std::pair<OZChannelRef,unsigned int>>::__emplace_unique_key_args<std::pair<OZChannelRef,unsigned int>,std::pair<OZChannelRef,unsigned int> const&>(uint64_t **a1, uint64_t a2, const OZChannelRef *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::pair<OZChannelRef,unsigned int>>::__find_equal<std::pair<OZChannelRef,unsigned int>>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::pair<OZChannelRef,unsigned int>>::__construct_node<std::pair<OZChannelRef,unsigned int> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::pair<OZChannelRef,unsigned int>>::__find_equal<std::pair<OZChannelRef,unsigned int>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::pair<OZChannelRef,unsigned int>>::__construct_node<std::pair<OZChannelRef,unsigned int> const&>(uint64_t a1@<X0>, const OZChannelRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  OZChannelRef::OZChannelRef((std::string *)(v6 + 32), a2);
  *((_DWORD *)v6 + 14) = *((_DWORD *)a2 + 6);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2E3CB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      OZChannelRef::~OZChannelRef(v2 + 4);
    operator delete(v2);
  }
}

PCString *std::list<PCString>::~list(PCString *a1)
{
  std::__list_imp<PCString>::clear(a1);
  return a1;
}

__CFString **OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(OZDocumentBundleFormatUtils *this)
{
  unsigned __int8 v1;
  uint64_t i;
  PCString v4;
  PCString v5;
  PCString v6;
  PCString v7;
  PCString v8;
  PCString v9[2];

  v9[1] = *(PCString *)MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    PCString::PCString(&v4, "52A68C6D-B49C-41AA-B3EA-03945D0C8EB4");
    PCString::PCString(&v5, "920273EF-948C-4556-8EB8-8EFEF7A34111");
    PCString::PCString(&v6, "23723AD7-62C4-4ED0-A8C6-FA5A2D7162E4");
    PCString::PCString(&v7, "14B39AEF-607D-42DF-98DD-DB3DD345E925");
    PCString::PCString(&v8, "9C13F991-BC99-4DC8-B150-381D7CCE183B");
    PCString::PCString(v9, "267EDBAB-297C-4BF4-B741-A166B5997C9B");
    std::list<PCString>::list(&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs, &v4, 6);
    for (i = 40; i != -8; i -= 8)
      PCString::~PCString((PCString *)((char *)&v4 + i));
    __cxa_atexit((void (*)(void *))std::list<PCString>::~list, &OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs, &dword_1B2737000);
  }
  return &OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs;
}

void sub_1B2E3CCDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 40; i != -8; i -= 8)
    PCString::~PCString((PCString *)(v1 + i));
  _Unwind_Resume(a1);
}

__CFString **OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(OZDocumentBundleFormatUtils *this)
{
  unsigned __int8 v1;
  PCString v3[2];

  v3[1] = *(PCString *)MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    PCString::PCString(v3, "50CDA38A-311B-493D-8BD3-AFD5ACE9DA4A");
    std::list<PCString>::list(&OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs, v3, 1);
    PCString::~PCString(v3);
    __cxa_atexit((void (*)(void *))std::list<PCString>::~list, &OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs, &dword_1B2737000);
  }
  return &OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs;
}

void sub_1B2E3CE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

CFComparisonResult OZDocumentBundleFormatUtils::isSupportedFxPlug(OZDocumentBundleFormatUtils *this, const PCString *a2, const PCString *a3, const PCString *a4)
{
  CFComparisonResult result;
  __CFString **v7;
  PCString *i;
  PCString *j;

  if ((this & 1) != 0)
    return 0;
  v7 = OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(this);
  OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs((OZDocumentBundleFormatUtils *)v7);
  for (i = (PCString *)qword_1EF076448;
        i != (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs;
        i = (PCString *)i[1].var0)
  {
    result = PCString::compare(i + 2, a2);
    if (!(_DWORD)result)
      return result;
  }
  for (j = (PCString *)qword_1EF076428;
        j != (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs;
        j = (PCString *)j[1].var0)
  {
    if (!PCString::compare(j + 2, a3))
      return (unint64_t)(j == (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs);
  }
  j = (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs;
  return (unint64_t)(j == (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs);
}

BOOL OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle(OZDocumentBundleFormatUtils *this, const PCURL *a2)
{
  return +[PCMotionBundle bundleURLForProjectFileURL:](PCMotionBundle, "bundleURLForProjectFileURL:", *(_QWORD *)this) != 0;
}

void std::__list_imp<PCString>::clear(PCString *a1)
{
  __CFString *var0;
  PCString *v3;
  __CFString *v4;
  __CFString *v5;

  if (a1[2].var0)
  {
    var0 = a1->var0;
    v3 = (PCString *)a1[1].var0;
    v4 = v3->var0;
    v4->info = a1->var0->info;
    *(_QWORD *)var0->info = v4;
    a1[2].var0 = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = v3[1].var0;
        PCString::~PCString(v3 + 2);
        operator delete(v3);
        v3 = (PCString *)v5;
      }
      while (v5 != (__CFString *)a1);
    }
  }
}

__n128 std::list<PCUUID>::push_back(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  unint64_t v6;

  v4 = (__n128 *)operator new(0x20uLL);
  result = *a2;
  v4[1] = *a2;
  v6 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

__CFString **std::list<PCString>::list(__CFString **a1, const PCString *a2, uint64_t a3)
{
  uint64_t v5;
  PCString *v6;
  __CFString *v7;

  *a1 = (__CFString *)a1;
  a1[1] = (__CFString *)a1;
  a1[2] = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v6 = std::__list_imp<PCString>::__create_node[abi:ne180100]<PCString const&>((uint64_t)a1, 0, 0, a2);
      v7 = *a1;
      v6->var0 = *a1;
      v6[1].var0 = (__CFString *)a1;
      v7->info = (uint64_t)v6;
      *a1 = (__CFString *)v6;
      a1[2] = (__CFString *)((char *)a1[2] + 1);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1B2E3D028(_Unwind_Exception *a1)
{
  PCString *v1;

  std::__list_imp<PCString>::clear(v1);
  _Unwind_Resume(a1);
}

PCString *std::__list_imp<PCString>::__create_node[abi:ne180100]<PCString const&>(uint64_t a1, __CFString *a2, __CFString *a3, const PCString *a4)
{
  PCString *v7;

  v7 = (PCString *)operator new(0x18uLL);
  v7->var0 = a2;
  v7[1].var0 = a3;
  PCString::PCString(v7 + 2, a4);
  return v7;
}

void sub_1B2E3D084(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void OZScene::destroyObjectiveCClasses(id *this)
{

}

uint64_t OZScene::setVideoOrientation(uint64_t a1, int a2)
{
  PCMutex *v4;

  v4 = (PCMutex *)(a1 + 160);
  PCMutex::lock((PCMutex *)(a1 + 160));
  *(_DWORD *)(a1 + 148) = a2;
  return PCMutex::unlock(v4);
}

uint64_t OZScene::setApplyMotionEffectScaleTo3DObjectRenders(uint64_t this, char a2)
{
  *(_BYTE *)(this + 152) = a2;
  return this;
}

uint64_t OZScene::setARFrameForObject(OZScene *this, Li3DEngineImageSource *a2)
{
  PCMutex *v4;

  v4 = (PCMutex *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  Li3DEngineImageSource::setVideoOrientation((uint64_t)a2, *((_DWORD *)this + 37));
  return PCMutex::unlock(v4);
}

void sub_1B2E3D14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getSceneComposer(OZScene *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 233);
  if (!result)
  {
    result = objc_opt_new();
    *((_QWORD *)this + 233) = result;
  }
  return result;
}

uint64_t *OZScene::begin_t<OZSceneNodeFile,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E3D210(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::operator++(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OZChannelBase *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::increment(a1);
          v2 = *((_DWORD *)a1 + 10);
          if (v2 < 2)
          {
            v3 = *a1;
            if (*a1 == a1[2])
              return a1;
            goto LABEL_6;
          }
          if (v2 != 2)
            break;
          v6 = *(_QWORD *)(a1[3] + 16);
          if (!v6)
            goto LABEL_13;
          v5 = v6 + 48;
LABEL_10:
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5))
          {
            v8 = 1;
            goto LABEL_16;
          }
          v7 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5);
          v8 = 1;
          if (OZChannelBase::testFlag(v7, 1))
            goto LABEL_16;
        }
        if (v2 != 3)
        {
          v8 = 0;
          goto LABEL_17;
        }
        v3 = a1[4];
LABEL_6:
        v4 = *(_QWORD *)(v3 + 16);
        if (v4)
        {
          v5 = v4 + 16;
          goto LABEL_10;
        }
LABEL_13:
        v8 = 0;
LABEL_16:
        v2 = *((_DWORD *)a1 + 10);
LABEL_17:
        if (v2 >= 2)
          break;
        v9 = *a1;
        if (*a1 != a1[2])
          goto LABEL_22;
      }
      if (v2 == 2)
        break;
      if (v2 == 3)
      {
        v9 = a1[4];
LABEL_22:
        v10 = *(_QWORD *)(v9 + 16);
        v11 = v10 + 16;
        goto LABEL_24;
      }
    }
    v10 = *(_QWORD *)(a1[3] + 16);
    v11 = v10 + 48;
LABEL_24:
    if (v10)
      v12 = v11;
    else
      v12 = 0;
    v13 = v12 == 0;
    v14 = v8 ^ 1;
    if (v13)
      v14 = 1;
  }
  while ((v14 & 1) != 0);
  return a1;
}

uint64_t OZScene::setupFxPlugRenderContext(OZScene *this, const OZRenderParams *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  _BYTE v15[48];
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  _DWORD v19[4];
  _BYTE v20[40];
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  OZScene::begin_all(this, (uint64_t)v21);
  while (1)
  {
    OZScene::end_all_sel(this, (uint64_t)v17);
    if (v24 != v19[2])
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
      goto LABEL_9;
    }
    if (v24 < 2)
    {
      v4 = (uint64_t *)v17;
      v3 = v21;
    }
    else
    {
      v3 = &v23;
      v4 = (uint64_t *)v19;
      if (v24 != 3)
      {
        v3 = &v22;
        v4 = &v18;
        if (v24 != 2)
          goto LABEL_6;
      }
    }
    v5 = *v3;
    v6 = *v4;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    if (v5 == v6)
      return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
LABEL_9:
    if (v24 < 2)
    {
      v7 = v21[0];
      if (v21[0] == v21[2])
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v24 != 2)
    {
      if (v24 != 3)
        goto LABEL_21;
      v7 = v23;
LABEL_14:
      v8 = *(_QWORD *)(v7 + 16);
      if (!v8)
        goto LABEL_21;
      v9 = (const void *)(v8 + 16);
      goto LABEL_18;
    }
    v10 = *(_QWORD *)(v22 + 16);
    if (!v10)
      goto LABEL_21;
    v9 = (const void *)(v10 + 48);
LABEL_18:
    if (v11)
    {
      v12 = objc_msgSend(v11[4], "contextManager");
      if (v12)
        OZFxPlugRenderContextManager::pushContext(v12, a2, 1);
    }
LABEL_21:
    OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++(v21, (uint64_t)v15);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  }
}

void sub_1B2E3D564(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _QWORD *result;
  unsigned int v5;
  uint64_t v6;

  v3 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_DWORD *)(a2 + 80) = 1065353216;
  *(_QWORD *)(a2 + 32) = a1[4];
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a1 + 10);
  *(_OWORD *)(a2 + 48) = 0u;
  do
  {
    while (1)
    {
      result = OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::increment(a1);
      v5 = *((_DWORD *)a1 + 10);
      if (v5 < 2)
        break;
      if (v5 == 2)
      {
        v6 = a1[3];
        goto LABEL_9;
      }
      if (v5 == 3)
      {
        v6 = a1[4];
        goto LABEL_9;
      }
    }
    v6 = *a1;
    if (*a1 == a1[2])
      return result;
LABEL_9:
    ;
  }
  while (!*(_QWORD *)(v6 + 16));
  return result;
}

void sub_1B2E3D61C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::teardownFxPlugRenderContext(OZScene *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  id *v10;
  OZFxPlugRenderContextManager *v11;
  _BYTE v13[48];
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  _DWORD v17[4];
  _BYTE v18[40];
  uint64_t v19[3];
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  OZScene::begin_all(this, (uint64_t)v19);
  while (1)
  {
    OZScene::end_all_sel(this, (uint64_t)v15);
    if (v22 != v17[2])
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
      goto LABEL_9;
    }
    if (v22 < 2)
    {
      v3 = (uint64_t *)v15;
      v2 = v19;
    }
    else
    {
      v2 = &v21;
      v3 = (uint64_t *)v17;
      if (v22 != 3)
      {
        v2 = &v20;
        v3 = &v16;
        if (v22 != 2)
          goto LABEL_6;
      }
    }
    v4 = *v2;
    v5 = *v3;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
    if (v4 == v5)
      return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
LABEL_9:
    if (v22 < 2)
    {
      v6 = v19[0];
      if (v19[0] == v19[2])
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v22 != 2)
    {
      if (v22 != 3)
        goto LABEL_21;
      v6 = v21;
LABEL_14:
      v7 = *(_QWORD *)(v6 + 16);
      if (!v7)
        goto LABEL_21;
      v8 = (const void *)(v7 + 16);
      goto LABEL_18;
    }
    v9 = *(_QWORD *)(v20 + 16);
    if (!v9)
      goto LABEL_21;
    v8 = (const void *)(v9 + 48);
LABEL_18:
    if (v10)
    {
      v11 = (OZFxPlugRenderContextManager *)objc_msgSend(v10[4], "contextManager");
      if (v11)
        OZFxPlugRenderContextManager::popContext(v11);
    }
LABEL_21:
    OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++(v19, (uint64_t)v13);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v14);
  }
}

void sub_1B2E3D7C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

_QWORD *OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
  {
    v3 = *(_QWORD *)(v3 + 8);
    *result = v3;
  }
  switch(*((_DWORD *)result + 10))
  {
    case 0:
      v4 = *(_QWORD **)(v3 + 16);
      if (((*(uint64_t (**)(_QWORD *))(*v4 + 960))(v4) & 1) == 0
        && ((*(uint64_t (**)(_QWORD *))(*v4 + 1056))(v4) & 1) == 0
        && !v4[124]
        && !v4[127])
      {
        result = (_QWORD *)v4[120];
        if (result)
        {
          v25 = *(_QWORD **)(*v1 + 8);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
          if (v25 == result && v25 != (_QWORD *)*v2)
            goto LABEL_24;
        }
        goto LABEL_30;
      }
      v5 = *v1;
      v28 = v4;
      v29 = &v28;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 6), &v28, (uint64_t)&std::piecewise_construct, &v29)[3] = v5;
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
        *v1 = (*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1056))(v4);
      if ((_DWORD)result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
        *v1 = result;
        v6 = 1;
        goto LABEL_49;
      }
      if (v4[124])
        goto LABEL_34;
      if (v4[127])
        goto LABEL_46;
      return result;
    case 1:
      v7 = *(_QWORD **)(v3 + 8);
      v28 = *(_QWORD **)(v3 + 16);
      v4 = v28;
      v8 = result + 6;
      v29 = &v28;
      result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(result + 6), &v28, (uint64_t)&std::piecewise_construct, &v29);
      result[3] = v3;
      if (v4[124])
      {
LABEL_34:
        v17 = v4[123];
        goto LABEL_35;
      }
      if (v4[127])
      {
LABEL_46:
        v23 = v4[126];
        goto LABEL_47;
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1112))(v4[120]);
      if (v7 != result || v7 == (_QWORD *)*v2)
        goto LABEL_30;
      v9 = (_QWORD *)v4[120];
      if (v9[124])
        goto LABEL_61;
      if (!v9[127])
      {
        *((_DWORD *)v1 + 10) = 0;
        goto LABEL_68;
      }
      goto LABEL_65;
    case 2:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[3] + 16) + 248))(*(_QWORD *)(result[3] + 16));
      v4 = result;
      v10 = *(_QWORD **)(v1[3] + 8);
      v1[3] = v10;
      if (v10 != result + 122)
        goto LABEL_24;
      v11 = (_QWORD *)result[126];
      v1[4] = v11;
      if (v11 != result + 125)
        goto LABEL_48;
LABEL_31:
      *((_DWORD *)v1 + 10) = 0;
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
        *v1 = result;
        return result;
      }
      v29 = v4;
      v8 = v1 + 6;
      result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
      v18 = result + 3;
      if (!result)
        v18 = v2;
      v19 = (_QWORD *)*v18;
      *v1 = *v18;
      v20 = (_QWORD *)v1[2];
      if (v19 == v20)
        return result;
      v21 = (_QWORD *)v19[1];
      result = (_QWORD *)v4[120];
      if (result)
        v22 = v21 == v20;
      else
        v22 = 1;
      if (v22)
      {
        *v1 = v21;
        return result;
      }
      v24 = *result;
      if ((v4[128] & 8) == 0)
      {
        result = (_QWORD *)(*(uint64_t (**)(void))(v24 + 1032))();
        if (v21 == result)
        {
          do
          {
LABEL_24:
            v4 = (_QWORD *)v4[120];
            if (!v4)
              return result;
            v29 = v4;
            v13 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
            v14 = v13 + 3;
            if (!v13)
              v14 = v2;
            v15 = *v14;
            *v1 = v15;
            result = (_QWORD *)v4[120];
            if (!result)
              break;
            v16 = *(_QWORD **)(v15 + 8);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
            if (v16 != result)
              break;
          }
          while (v16 != (_QWORD *)*v2);
        }
LABEL_30:
        *v1 = *(_QWORD *)(*v1 + 8);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(v24 + 1112))();
      if (v21 != result)
      {
        *((_DWORD *)v1 + 10) = 1;
        goto LABEL_30;
      }
      v9 = (_QWORD *)v4[120];
      if (v9[124])
      {
LABEL_61:
        v29 = v9;
        result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        v26 = result + 3;
        if (!result)
          v26 = v2;
        *v1 = *v26;
        v17 = v9[123];
LABEL_35:
        v1[3] = v17;
        v6 = 2;
LABEL_49:
        *((_DWORD *)v1 + 10) = v6;
        return result;
      }
      if (v9[127])
      {
LABEL_65:
        v29 = v9;
        result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        v27 = result + 3;
        if (!result)
          v27 = v2;
        *v1 = *v27;
        v23 = v9[126];
LABEL_47:
        v1[4] = v23;
LABEL_48:
        v6 = 3;
        goto LABEL_49;
      }
LABEL_68:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 960))(v9);
      if (!(_DWORD)result)
        goto LABEL_24;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
      *v1 = result;
      *((_DWORD *)v1 + 10) = 0;
      return result;
    case 3:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[4] + 16) + 320))(*(_QWORD *)(result[4] + 16));
      v4 = result;
      v12 = *(_QWORD **)(v1[4] + 8);
      v1[4] = v12;
      if (v12 != result + 125)
        goto LABEL_24;
      goto LABEL_31;
    default:
      v4 = 0;
      goto LABEL_24;
  }
}

_QWORD *OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
  {
    v3 = *(_QWORD *)(v3 + 8);
    *result = v3;
  }
  switch(*((_DWORD *)result + 10))
  {
    case 0:
      v4 = *(_QWORD **)(v3 + 16);
      if (((*(uint64_t (**)(_QWORD *))(*v4 + 960))(v4) & 1) == 0
        && ((*(uint64_t (**)(_QWORD *))(*v4 + 1056))(v4) & 1) == 0
        && !v4[124]
        && !v4[127])
      {
        result = (_QWORD *)v4[120];
        if (result)
        {
          v25 = *(_QWORD **)(*v1 + 8);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
          if (v25 == result && v25 != (_QWORD *)*v2)
            goto LABEL_24;
        }
        goto LABEL_30;
      }
      v5 = *v1;
      v28 = v4;
      v29 = &v28;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 6), &v28, (uint64_t)&std::piecewise_construct, &v29)[3] = v5;
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
        *v1 = (*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1056))(v4);
      if ((_DWORD)result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
        *v1 = result;
        v6 = 1;
        goto LABEL_49;
      }
      if (v4[124])
        goto LABEL_34;
      if (v4[127])
        goto LABEL_46;
      return result;
    case 1:
      v7 = *(_QWORD **)(v3 + 8);
      v28 = *(_QWORD **)(v3 + 16);
      v4 = v28;
      v8 = result + 6;
      v29 = &v28;
      result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(result + 6), &v28, (uint64_t)&std::piecewise_construct, &v29);
      result[3] = v3;
      if (v4[124])
      {
LABEL_34:
        v17 = v4[123];
        goto LABEL_35;
      }
      if (v4[127])
      {
LABEL_46:
        v23 = v4[126];
        goto LABEL_47;
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1112))(v4[120]);
      if (v7 != result || v7 == (_QWORD *)*v2)
        goto LABEL_30;
      v9 = (_QWORD *)v4[120];
      if (v9[124])
        goto LABEL_61;
      if (!v9[127])
      {
        *((_DWORD *)v1 + 10) = 0;
        goto LABEL_68;
      }
      goto LABEL_65;
    case 2:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[3] + 16) + 248))(*(_QWORD *)(result[3] + 16));
      v4 = result;
      v10 = *(_QWORD **)(v1[3] + 8);
      v1[3] = v10;
      if (v10 != result + 122)
        goto LABEL_24;
      v11 = (_QWORD *)result[126];
      v1[4] = v11;
      if (v11 != result + 125)
        goto LABEL_48;
LABEL_31:
      *((_DWORD *)v1 + 10) = 0;
      if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
        *v1 = result;
        return result;
      }
      v29 = v4;
      v8 = v1 + 6;
      result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
      v18 = result + 3;
      if (!result)
        v18 = v2;
      v19 = (_QWORD *)*v18;
      *v1 = *v18;
      v20 = (_QWORD *)v1[2];
      if (v19 == v20)
        return result;
      v21 = (_QWORD *)v19[1];
      result = (_QWORD *)v4[120];
      if (result)
        v22 = v21 == v20;
      else
        v22 = 1;
      if (v22)
      {
        *v1 = v21;
        return result;
      }
      v24 = *result;
      if ((v4[128] & 8) == 0)
      {
        result = (_QWORD *)(*(uint64_t (**)(void))(v24 + 1032))();
        if (v21 == result)
        {
          do
          {
LABEL_24:
            v4 = (_QWORD *)v4[120];
            if (!v4)
              return result;
            v29 = v4;
            v13 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
            v14 = v13 + 3;
            if (!v13)
              v14 = v2;
            v15 = *v14;
            *v1 = v15;
            result = (_QWORD *)v4[120];
            if (!result)
              break;
            v16 = *(_QWORD **)(v15 + 8);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
            if (v16 != result)
              break;
          }
          while (v16 != (_QWORD *)*v2);
        }
LABEL_30:
        *v1 = *(_QWORD *)(*v1 + 8);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(v24 + 1112))();
      if (v21 != result)
      {
        *((_DWORD *)v1 + 10) = 1;
        goto LABEL_30;
      }
      v9 = (_QWORD *)v4[120];
      if (v9[124])
      {
LABEL_61:
        v29 = v9;
        result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        v26 = result + 3;
        if (!result)
          v26 = v2;
        *v1 = *v26;
        v17 = v9[123];
LABEL_35:
        v1[3] = v17;
        v6 = 2;
LABEL_49:
        *((_DWORD *)v1 + 10) = v6;
        return result;
      }
      if (v9[127])
      {
LABEL_65:
        v29 = v9;
        result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        v27 = result + 3;
        if (!result)
          v27 = v2;
        *v1 = *v27;
        v23 = v9[126];
LABEL_47:
        v1[4] = v23;
LABEL_48:
        v6 = 3;
        goto LABEL_49;
      }
LABEL_68:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 960))(v9);
      if (!(_DWORD)result)
        goto LABEL_24;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
      *v1 = result;
      *((_DWORD *)v1 + 10) = 0;
      return result;
    case 3:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[4] + 16) + 320))(*(_QWORD *)(result[4] + 16));
      v4 = result;
      v12 = *(_QWORD **)(v1[4] + 8);
      v1[4] = v12;
      if (v12 != result + 125)
        goto LABEL_24;
      goto LABEL_31;
    default:
      v4 = 0;
      goto LABEL_24;
  }
}

void OZSceneSettings::OZSceneSettings(OZSceneSettings *this)
{
  char *v2;
  OZPreferenceManager *v3;
  CGColorSpace *v4;
  __int128 v5;
  CGColorSpace *v6;
  CGColorSpace *obj;
  int v8;
  OZPreferenceManager *v9;
  CGColorSpace *v10;
  __int128 v11;
  CGColorSpace *v12;
  CGColorSpace *v13;
  uint64_t v14;
  uint64_t v15;
  PCColor v16;

  *(_QWORD *)this = &off_1E658F368;
  *((_QWORD *)this + 7) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 16) = -1;
  *((_WORD *)this + 34) = 0;
  *((_DWORD *)this + 18) = -1;
  v2 = (char *)this + 80;
  PCColor::PCColor((PCColor *)((char *)this + 80));
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 23);
  if (*(_BYTE *)(theApp + 81))
  {
    *((_QWORD *)this + 1) = 0x1E0000002D0;
    *((_QWORD *)this + 32) = -1;
    v4 = (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
    PCColor::PCColor(&v16, 0.0, 0.0, 0.0, 0.0, v4);
    v5 = *(_OWORD *)&v16.var0.var1[1];
    *(_OWORD *)v2 = *(_OWORD *)&v16.var0.var0;
    *((_OWORD *)v2 + 1) = v5;
    *((_OWORD *)v2 + 2) = *(_OWORD *)&v16.var0.var1[3];
    v6 = (CGColorSpace *)*((_QWORD *)this + 16);
    obj = v16.var1._obj;
    if (v6 && v6 != v16.var1._obj)
    {
      PCCFRefTraits<CGColorSpace *>::release(v6);
      obj = v16.var1._obj;
    }
    *((_QWORD *)this + 16) = obj;
    v16.var1._obj = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v16.var1._obj);
    v8 = *((_DWORD *)this + 2);
  }
  else
  {
    v9 = (OZPreferenceManager *)OZPreferenceManager::Instance(v3);
    *((_DWORD *)this + 2) = OZPreferenceManager::getDefaultProjectWidth(v9);
    *((_DWORD *)this + 3) = OZPreferenceManager::getDefaultProjectHeight(v9);
    OZChannelBase::setRangeName((OZChannelBase *)v9, (const PCString *)v2);
    v10 = (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
    PCColor::PCColor(&v16, (const PCColor *)v2, v10);
    v11 = *(_OWORD *)&v16.var0.var1[1];
    *(_OWORD *)v2 = *(_OWORD *)&v16.var0.var0;
    *((_OWORD *)v2 + 1) = v11;
    *((_OWORD *)v2 + 2) = *(_OWORD *)&v16.var0.var1[3];
    v12 = (CGColorSpace *)*((_QWORD *)this + 16);
    v13 = v16.var1._obj;
    if (v12 && v12 != v16.var1._obj)
    {
      PCCFRefTraits<CGColorSpace *>::release(v12);
      v13 = v16.var1._obj;
    }
    *((_QWORD *)this + 16) = v13;
    v16.var1._obj = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v16.var1._obj);
    v14 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 32) = v14;
    v8 = v14;
  }
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 140) = 1;
  *((_DWORD *)this + 4) = 150;
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0x403E000000000000;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_QWORD *)this + 24) = 0x400000002;
  *((_QWORD *)this + 25) = 0x40E5888000000000;
  v15 = MEMORY[0x1E0CA2E68];
  *((_OWORD *)this + 17) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 36) = *(_QWORD *)(v15 + 16);
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 18) = 0x800000002;
  *((_QWORD *)this + 19) = 0x3FF0000000000000;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 21) = 0x4000000000000000;
  *((_DWORD *)this + 44) = 2;
  *((_DWORD *)this + 53) = 0;
  *((_BYTE *)this + 220) = 0;
  *((_DWORD *)this + 57) = 3;
  *((_BYTE *)this + 232) = 0;
  *((_DWORD *)this + 59) = v8;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 264) = 1;
  *((_QWORD *)this + 31) = 0x4059000000000000;
  *((_DWORD *)this + 67) = 0;
}

void sub_1B2E3E4F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PCString *v2;
  CGColorSpace **v3;
  CGColorSpace **v4;

  v4 = v3;
  PCCFRef<CGColorSpace *>::~PCCFRef(v4);
  PCString::~PCString(v2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 128));
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::OZSceneSettings(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  CGColorSpace *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_1E658F368;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 69) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(_OWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v4;
  v6 = *(CGColorSpace **)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  v7 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v7;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  PCString::PCString((PCString *)(a1 + 184), (const PCString *)(a2 + 184));
  v8 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v8;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v9 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v9;
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  v10 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(a1 + 272) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(v10 + 16);
  *(_BYTE *)(a1 + 296) = 0;
  return a1;
}

void sub_1B2E3E69C(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::setFrameRate(uint64_t this, double a2, char a3)
{
  int v3;
  double v4;
  double v6;

  *(double *)(this + 32) = a2;
  v3 = vcvtmd_s64_f64(a2 + 0.5 + 0.0000001);
  *(_BYTE *)(this + 40) = a3;
  v4 = a2 - (double)v3;
  if (v4 > -0.1 && v3 == 30)
  {
    v6 = 30.0;
    if (v4 < 0.0)
      goto LABEL_17;
  }
  if (v4 > -0.1 && v3 == 24)
  {
    v6 = 24.0;
    if (v4 < 0.0)
      goto LABEL_17;
  }
  if (v4 > -0.1 && v3 == 60 && v4 < 0.0)
  {
    v6 = 60.0;
LABEL_17:
    *(double *)(this + 32) = v6;
    *(_BYTE *)(this + 40) = 1;
  }
  return this;
}

CMTime *OZSceneSettings::GetFrameDuration@<X0>(OZSceneSettings *this@<X0>, double a2@<D0>, CMTime *a3@<X8>)
{
  int32_t v3;
  signed int v4;
  int64_t v5;

  v3 = 120000;
  v4 = vcvtmd_s64_f64(a2 + 0.5 + 0.0000001);
  if (v4 == 30 && (this & 1) != 0)
  {
    v5 = 4004;
  }
  else if (v4 == 24 && (this & 1) != 0)
  {
    v5 = 5005;
  }
  else if (v4 == 60 && (this & 1) != 0)
  {
    v5 = 2002;
  }
  else
  {
    if (v4)
    {
      if (600 / v4 * v4 == 600)
      {
        v5 = (uint64_t)(600 / v4) << 8;
        v3 = 153600;
        return CMTimeMake(a3, v5, v3);
      }
      v3 = v4 << 8;
    }
    else
    {
      v3 = 7680;
    }
    v5 = 256;
  }
  return CMTimeMake(a3, v5, v3);
}

uint64_t OZSceneSettings::setHostAppProjectHeight(uint64_t this, int a2)
{
  *(_DWORD *)(this + 260) = a2;
  return this;
}

uint64_t OZSceneSettings::getHostAppProjectHeight(OZSceneSettings *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 65);
  if ((_DWORD)result == -1)
    return *((unsigned int *)this + 3);
  return result;
}

__n128 OZSceneSettings::getFrameDuration@<Q0>(OZSceneSettings *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  CMTime v5;

  if (!*((_BYTE *)this + 296))
  {
    OZSceneSettings::GetFrameDuration((OZSceneSettings *)*((unsigned __int8 *)this + 40), (double)(int)vcvtmd_s64_f64(*((double *)this + 4) + 0.5 + 0.0000001), &v5);
    *(CMTime *)((char *)this + 272) = v5;
    *((_BYTE *)this + 296) = 1;
  }
  result = *((__n128 *)this + 17);
  *a2 = result;
  a2[1].n128_u64[0] = *((_QWORD *)this + 36);
  return result;
}

double OZSceneSettings::getDisplayFrameRate(OZSceneSettings *this)
{
  double result;

  result = *((double *)this + 4);
  if (*((_BYTE *)this + 40))
    return (double)(int)vcvtmd_s64_f64(result * 100.0 + 0.5 + 0.0000001) * 0.01;
  return result;
}

uint64_t OZSceneSettings::getBitDepth(OZSceneSettings *this)
{
  OZPreferenceManager *v2;
  _BYTE v3[48];

  if (*(_BYTE *)(theApp + 81))
    return 2;
  v2 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  OZPreferenceManager::getRenderingTechnology(v2, (uint64_t)v3);
  return HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)v3);
}

uint64_t OZSceneSettings::dynamicRangeTrackingEnabled(OZSceneSettings *this)
{
  return *((unsigned __int8 *)this + 68);
}

uint64_t OZSceneSettings::setFieldRenderingMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 144) = a2;
  return result;
}

uint64_t OZSceneSettings::getAnimateFlag(OZSceneSettings *this)
{
  return *((unsigned __int8 *)this + 220);
}

uint64_t OZSceneSettings::setAnimateFlag(OZSceneSettings *this, char a2)
{
  uint64_t result;

  *((_BYTE *)this + 220) = a2;
  result = OZCoreGlobals::getInstance(this);
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t OZSceneSettings::get360ProjectMode(OZSceneSettings *this)
{
  return *((unsigned int *)this + 67);
}

BOOL OZSceneSettings::is360Project(OZSceneSettings *this)
{
  return *((_DWORD *)this + 67) != 0;
}

uint64_t OZSceneSettings::setRawWorkingGamut(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  if (a2 != 1)
    *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t OZSceneSettings::writeHeader(OZSceneSettings *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 74);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZSceneSettings::writeBody(OZSceneSettings *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  OZPreferenceManager *v21;
  TXParagraphStyleFolder_Factory *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const PCString *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  PCString v35;
  CGColorSpace *v36;
  uint64_t v37;
  uint64_t v38;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneSettingsScope);
  v4 = *((unsigned int *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned int *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((unsigned int *)this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v7 = *((unsigned __int8 *)this + 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v8 = *((double *)this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v9 = *((unsigned __int8 *)this + 40);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v10 = *((double *)this + 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 9);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *((unsigned int *)this + 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 47);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v12 = *((unsigned int *)this + 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 48);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v13 = *((unsigned int *)this + 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 50);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 10);
  v37 = 0;
  v38 = 0;
  PCColor::getColorSpace((PCColor *)((char *)this + 80), &v36);
  PCColor::getRGBA((PCColor *)((char *)this + 80), (float *)&v38 + 1, (float *)&v38, (float *)&v37 + 1, (float *)&v37, (const PCColorSpaceHandle *)&v36);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(_QWORD *)a2 + 176))(a2, 1, *((float *)&v38 + 1));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(_QWORD *)a2 + 176))(a2, 2, *(float *)&v38);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(_QWORD *)a2 + 176))(a2, 3, *((float *)&v37 + 1));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(_QWORD *)a2 + 176))(a2, 4, *(float *)&v37);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v14 = *((unsigned int *)this + 48);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v15 = (8 * *((_DWORD *)this + 49));
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v16 = *((unsigned int *)this + 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v17 = *((unsigned int *)this + 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v18 = *((double *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 18);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v19 = *((unsigned __int8 *)this + 160);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 45);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v20 = *((unsigned int *)this + 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v20);
  v21 = (OZPreferenceManager *)(*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v22 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance(v21);
  if (TXParagraphStyleFolder_Factory::version(v22))
  {
    PCString::PCString(&v35, (const PCString *)this + 23);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 25);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(_QWORD *)a2 + 104))(a2, &v35);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    PCString::~PCString(&v35);
  }
  v23 = *((unsigned int *)this + 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 38);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v23);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v24 = *((unsigned int *)this + 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 35);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v24);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v25 = *((unsigned int *)this + 53);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v25);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v26 = *((unsigned __int8 *)this + 220);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 39);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v26);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v28 = OZChannelBase::setRangeName((OZChannelBase *)*((unsigned int *)this + 57), v27);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 41);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v28);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v29 = *((unsigned __int8 *)this + 240);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v29);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v30 = *((double *)this + 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 51);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v30);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v31 = *((unsigned __int8 *)this + 68);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 52);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v31);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v32 = *((unsigned __int8 *)this + 69);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 53);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v32);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  if (!*((_BYTE *)this + 264))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 44);
    (*(void (**)(PCSerializerWriteStream *, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  v33 = *((unsigned int *)this + 67);
  if ((_DWORD)v33)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 49);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v33);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B2E3F1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::parseBegin(OZSceneSettings *this, PCSerializerReadStream *a2)
{
  *((_BYTE *)this + 140) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 264) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZSceneSettingsScope);
  return 1;
}

uint64_t OZSceneSettings::parseEnd(OZSceneSettings *this, PCSerializerReadStream *a2)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  CGColorSpace *v8;
  uint64_t v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 140))
  {
    v9 = 0;
    v10 = 0;
    PCColor::getColorSpace((PCColor *)((char *)this + 80), &v8);
    PCColor::getRGBA((PCColor *)((char *)this + 80), (float *)&v10 + 1, (float *)&v10, (float *)&v9 + 1, (float *)&v9, (const PCColorSpaceHandle *)&v8);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
    if (*(float *)&v9 <= 0.0)
    {
      v4 = 0;
    }
    else
    {
      v4 = 2;
      if (*((float *)&v10 + 1) <= 0.0 && *(float *)&v10 <= 0.0)
        v4 = 2 * (*((float *)&v9 + 1) > 0.0);
    }
    *((_DWORD *)this + 34) = v4;
    *((_BYTE *)this + 140) = 1;
    PCColor::setAlpha((PCColor *)((char *)this + 80), 1.0);
  }
  v5 = *((_DWORD *)a2 + 26);
  if (v5 < 5 || (v5 == 5 ? (v6 = *((_DWORD *)a2 + 27) > 0xAu) : (v6 = 1), !v6))
  {
    if (*((_DWORD *)this + 15) == -1 && *((_DWORD *)this + 14) == 1)
      *((_DWORD *)this + 15) = 3;
    *((_DWORD *)this + 16) = 0;
  }
  if (*((_DWORD *)this + 14) != 1)
    *((_DWORD *)this + 16) = 0;
  return 1;
}

void sub_1B2E3F33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::parseElement(OZSceneSettings *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  void (*v11)(PCStreamElement *, PCColor *);
  int v12;
  PCColor *v13;
  int var0;
  CGColorSpace *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  CGColorSpace *v21;
  __int128 v22;
  CGColorSpace *v23;
  CGColorSpace *obj;
  PCColor v25;
  double v26;
  double v27;
  double v28;
  double v29;

  switch(*((_DWORD *)a3 + 2))
  {
    case 2:
      v6 = (char *)this + 8;
      goto LABEL_28;
    case 3:
      v6 = (char *)this + 12;
      goto LABEL_28;
    case 4:
      v7 = (char *)this + 16;
      goto LABEL_32;
    case 5:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 64))(a3, (char *)this + 32);
      goto LABEL_7;
    case 6:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, (char *)this + 40);
LABEL_7:
      if (*((_DWORD *)a2 + 26) <= 4u)
      {
        OZSceneSettings::getFrameDuration(this, (__n128 *)&v25);
        PCSerializerReadStream::setTimeScale(a2, (const CMTime *)&v25);
      }
      return 1;
    case 9:
      v8 = (char *)this + 48;
      goto LABEL_49;
    case 0xA:
      v28 = 0.0;
      v29 = 0.0;
      v27 = 0.0;
      v26 = 1.0;
      if (*((_DWORD *)a2 + 26) > 3u)
        v9 = PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
      else
        v9 = PCColorSpaceCache::cgGenericRGB(this);
      v16 = (CGColorSpace *)v9;
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(_QWORD *)a3 + 144))(a3, 1, &v29);
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(_QWORD *)a3 + 144))(a3, 2, &v28);
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(_QWORD *)a3 + 144))(a3, 3, &v27);
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(_QWORD *)a3 + 144))(a3, 4, &v26);
      v17 = v29;
      v18 = v28;
      v19 = v27;
      v20 = v26;
      PCColor::setRGBA((PCColor *)((char *)this + 80), v17, v18, v19, v20, v16);
      if (v16 != (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14)))
      {
        v21 = (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
        PCColor::PCColor(&v25, (const PCColor *)((char *)this + 80), v21);
        v22 = *(_OWORD *)&v25.var0.var1[1];
        *((_OWORD *)this + 5) = *(_OWORD *)&v25.var0.var0;
        *((_OWORD *)this + 6) = v22;
        *((_OWORD *)this + 7) = *(_OWORD *)&v25.var0.var1[3];
        v23 = (CGColorSpace *)*((_QWORD *)this + 16);
        obj = v25.var1._obj;
        if (v23 && v23 != v25.var1._obj)
        {
          PCCFRefTraits<CGColorSpace *>::release(v23);
          obj = v25.var1._obj;
        }
        *((_QWORD *)this + 16) = obj;
        v25.var1._obj = 0;
        PCCFRef<CGColorSpace *>::~PCCFRef(&v25.var1._obj);
      }
      return 1;
    case 0xB:
      v7 = (char *)this + 192;
      goto LABEL_32;
    case 0xC:
      v10 = (_DWORD *)((char *)this + 196);
      if ((*(unsigned int (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 196))
        *v10 >>= 3;
      return 1;
    case 0xF:
      v7 = (char *)this + 144;
      goto LABEL_32;
    case 0x11:
      v7 = (char *)this + 148;
      goto LABEL_32;
    case 0x12:
      v8 = (char *)this + 152;
      goto LABEL_49;
    case 0x13:
      v25.var0.var0 = 0;
      v11 = *(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 32);
      goto LABEL_36;
    case 0x14:
      v7 = (char *)this + 24;
      goto LABEL_32;
    case 0x19:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 16))(a3, (char *)this + 184);
      return 1;
    case 0x1D:
      LOBYTE(v25.var0.var0) = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 72))(a3, &v25);
      if (LOBYTE(v25.var0.var0))
      {
        if (*((_BYTE *)this + 140))
        {
          v12 = *((_DWORD *)this + 34);
          if (v12 <= 1)
            v12 = 1;
        }
        else
        {
          v12 = 1;
        }
LABEL_64:
        *((_DWORD *)this + 34) = v12;
      }
      else if (!*((_BYTE *)this + 140))
      {
        *((_DWORD *)this + 34) = 0;
      }
LABEL_65:
      *((_BYTE *)this + 140) = 1;
      return 1;
    case 0x1E:
      v7 = (char *)this + 208;
      goto LABEL_32;
    case 0x22:
      v7 = (char *)this + 212;
      goto LABEL_32;
    case 0x23:
      v6 = (char *)this + 176;
LABEL_28:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 24))(a3, v6);
      return 1;
    case 0x24:
      LOBYTE(v25.var0.var0) = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 72))(a3, &v25);
      if (!LOBYTE(v25.var0.var0))
        return 1;
      v12 = 2;
      goto LABEL_64;
    case 0x25:
      v7 = (char *)this + 216;
LABEL_32:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, v7);
      return 1;
    case 0x26:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)this + 136);
      goto LABEL_65;
    case 0x27:
      v13 = (PCColor *)((char *)this + 220);
      goto LABEL_52;
    case 0x28:
      v25.var0.var0 = 0;
      v11 = *(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 56);
LABEL_36:
      v13 = &v25;
      goto LABEL_53;
    case 0x29:
      v25.var0.var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 32))(a3, &v25);
      *((_DWORD *)this + 57) = PCColorSpaceCache::intToColorSpaceID(v25.var0.var0, 3u);
      return 1;
    case 0x2A:
      v13 = (PCColor *)((char *)this + 20);
      goto LABEL_52;
    case 0x2B:
      v13 = (PCColor *)((char *)this + 240);
      goto LABEL_52;
    case 0x2C:
      v13 = (PCColor *)((char *)this + 264);
      goto LABEL_52;
    case 0x2D:
      v13 = (PCColor *)((char *)this + 160);
      goto LABEL_52;
    case 0x2E:
      v25.var0.var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 24))(a3, &v25);
      var0 = v25.var0.var0 > 2;
      goto LABEL_44;
    case 0x2F:
      v25.var0.var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 24))(a3, &v25);
      var0 = v25.var0.var0;
LABEL_44:
      *((_DWORD *)this + 14) = var0;
      return 1;
    case 0x30:
      v25.var0.var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 24))(a3, &v25);
      *((_DWORD *)this + 15) = v25.var0.var0;
      return 1;
    case 0x31:
      v25.var0.var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 32))(a3, &v25);
      *((_DWORD *)this + 67) = v25.var0.var0;
      return 1;
    case 0x32:
      v25.var0.var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 24))(a3, &v25);
      *((_DWORD *)this + 16) = v25.var0.var0;
      return 1;
    case 0x33:
      v8 = (char *)this + 248;
LABEL_49:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 64))(a3, v8);
      return 1;
    case 0x34:
      v13 = (PCColor *)((char *)this + 68);
      goto LABEL_52;
    case 0x35:
      v13 = (PCColor *)((char *)this + 69);
LABEL_52:
      v11 = *(void (**)(PCStreamElement *, PCColor *))(*(_QWORD *)a3 + 72);
LABEL_53:
      v11(a3, v13);
      break;
    default:
      return 1;
  }
  return 1;
}

void sub_1B2E3F7D4(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void OZSceneSettings::~OZSceneSettings(PCString *this)
{
  CGColorSpace **v1;

  this->var0 = (__CFString *)&off_1E658F368;
  v1 = (CGColorSpace **)&this[16];
  PCString::~PCString(this + 23);
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
}

{
  CGColorSpace **v1;

  this->var0 = (__CFString *)&off_1E658F368;
  v1 = (CGColorSpace **)&this[16];
  PCString::~PCString(this + 23);
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  JUMPOUT(0x1B5E29170);
}

OZImageElement *OZRetimingBehavior::didAddToNode(OZRetimingBehavior *this, OZSceneNode *a2)
{
  OZImageElement *result;
  OZChannelObjectRoot *v5;

  result = (OZImageElement *)OZChannelBehavior::didAddToNode(this, a2);
  if (!*((_BYTE *)this + 544))
  {
    result = (OZImageElement *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 272))(a2);
    if (result)
    {
      OZRetimingBehavior::addRetimingNode(this, a2);
      if (result)
        result = (OZImageElement *)OZImageElement::updateRetimingState(result, v5);
      *((_BYTE *)this + 544) = 1;
    }
  }
  return result;
}

void OZMaterialLayerSequenceFolder::getImagePosition(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

__n128 OZMaterialLayerSequenceFolder::getImageScale(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  *a3 = result;
  return result;
}

void OZMaterialLayerSequenceFolder::getImageRotation(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this)
{
  *(_QWORD *)this = &off_1E6594040;
  *((_QWORD *)this + 2) = &unk_1E6594398;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6152));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 5744));
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 1584));
  OZChannelImageWithOptions::~OZChannelImageWithOptions(this);
}

{
  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(this);
  JUMPOUT(0x1B5E29170);
}

void sub_1B2E3FB08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void sub_1B2E3FC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  PCURL::~PCURL((PCURL *)&a13);
  _Unwind_Resume(a1);
}

PCURL *std::unique_ptr<PCURL>::reset[abi:ne180100](PCURL **a1, PCURL *a2)
{
  PCURL *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCURL::~PCURL(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void METimeRemap::METimeRemap(METimeRemap *this)
{
  CMTimeMakeWithSeconds((CMTime *)this, 0.0, 30);
  CMTimeMakeWithSeconds((CMTime *)&this->_outroDuration, 0.0, 30);
  CMTimeMakeWithSeconds((CMTime *)&this->_scaleableDuration, 0.0, 30);
  *(_DWORD *)&this->_isEndTimeAligned = 0;
  *(_DWORD *)&this->_isIntroOptional = 0;
  this->_pBuildInEnableChan = 0;
  this->_pBuildOutEnableChan = 0;
}

__n128 METimeRemap::setIntroDuration(METimeRemap *this, const CMTime *a2)
{
  __n128 result;

  result = *(__n128 *)&a2->value;
  this->_introDuration.epoch = a2->epoch;
  *(__n128 *)&this->_introDuration.value = result;
  return result;
}

__n128 METimeRemap::setOutroDuration(METimeRemap *this, const CMTime *a2)
{
  __n128 result;

  result = *(__n128 *)&a2->value;
  this->_outroDuration.epoch = a2->epoch;
  *(__n128 *)&this->_outroDuration.value = result;
  return result;
}

__n128 METimeRemap::setScaleableDuration(METimeRemap *this, const CMTime *a2)
{
  __n128 result;

  result = *(__n128 *)&a2->value;
  this->_scaleableDuration.epoch = a2->epoch;
  *(__n128 *)&this->_scaleableDuration.value = result;
  return result;
}

METimeRemap *METimeRemap::setIsOutroOptional(METimeRemap *this, BOOL a2)
{
  this->_isOutroOptional = a2;
  return this;
}

METimeRemap *METimeRemap::setIsLoop(METimeRemap *this, BOOL a2)
{
  this->_isLoop = a2;
  return this;
}

METimeRemap *METimeRemap::setForceDisableLoop(METimeRemap *this, BOOL a2)
{
  this->_forceDisableLoop = a2;
  return this;
}

BOOL METimeRemap::forceDisableLoop(METimeRemap *this)
{
  return this->_forceDisableLoop;
}

METimeRemap *METimeRemap::setForceDisableBuildAnimation(METimeRemap *this, BOOL a2)
{
  this->_forceDisableBuildAnimation = a2;
  return this;
}

BOOL METimeRemap::forceDisableBuildAnimation(METimeRemap *this)
{
  return this->_forceDisableBuildAnimation;
}

METimeRemap *METimeRemap::setBuildEnableChannels(METimeRemap *this, OZChannelBool *a2, OZChannelBool *a3)
{
  this->_pBuildInEnableChan = a2;
  this->_pBuildOutEnableChan = a3;
  return this;
}

uint64_t METimeRemap::shouldShowIntro(METimeRemap *this)
{
  OZChannelBool *pBuildInEnableChan;
  uint64_t result;
  CMTime v4;
  CMTime v5;
  CMTime time2;
  CMTime time1;

  if (this->_isIntroOptional)
  {
    pBuildInEnableChan = this->_pBuildInEnableChan;
    if (!pBuildInEnableChan)
      return 0;
    CMTimeMakeWithSeconds(&v5, 0.0, 30);
    result = OZChannel::getValueAsInt((OZChannel *)pBuildInEnableChan, &v5, 0.0);
    if (!(_DWORD)result)
      return result;
  }
  CMTimeMakeWithSeconds(&v4, 0.0, 30);
  time1 = (CMTime)this->_introDuration;
  time2 = v4;
  result = CMTimeCompare(&time1, &time2);
  if ((_DWORD)result)
    return !this->_forceDisableBuildAnimation;
  return result;
}

uint64_t METimeRemap::shouldShowOutro(METimeRemap *this)
{
  OZChannelBool *pBuildOutEnableChan;
  uint64_t result;
  CMTime v4;
  CMTime v5;
  CMTime time2;
  CMTime time1;

  if (this->_isOutroOptional)
  {
    pBuildOutEnableChan = this->_pBuildOutEnableChan;
    if (!pBuildOutEnableChan)
      return 0;
    CMTimeMakeWithSeconds(&v5, 0.0, 30);
    result = OZChannel::getValueAsInt((OZChannel *)pBuildOutEnableChan, &v5, 0.0);
    if (!(_DWORD)result)
      return result;
  }
  CMTimeMakeWithSeconds(&v4, 0.0, 30);
  time1 = (CMTime)this->_outroDuration;
  time2 = v4;
  result = CMTimeCompare(&time1, &time2);
  if ((_DWORD)result)
    return !this->_forceDisableBuildAnimation;
  return result;
}

double METimeRemap::motionTimeFromComponentTime@<D0>(METimeRemap *this@<X0>, const CMTime *a2@<X1>, const CMTimeRange *a3@<X2>, CMTime *a4@<X3>, uint64_t a5@<X8>)
{
  int shouldShowIntro;
  CMTimeEpoch v11;
  double result;
  CMTimeEpoch epoch;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTime time1;

  shouldShowIntro = METimeRemap::shouldShowIntro(this);
  memset(&v21, 0, sizeof(v21));
  time1 = *a2;
  time2 = a3->start;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
  if (this->_isLoop && !this->_forceDisableLoop)
  {
    if (a4)
    {
      CMTimeMake(&time1, 1, 1);
      *a4 = time1;
    }
    if (!shouldShowIntro)
    {
      memset(&v20, 0, sizeof(v20));
      operator/((__int128 *)&v21.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v20);
      CMTimeMake(&v15, 1, 1);
      time1 = v20;
      time2 = v15;
      PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v16);
      time1 = v20;
      time2 = v16;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
      operator*((__int128 *)&v17.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v18);
      time1 = (CMTime)this->_introDuration;
      time2 = v18;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
      epoch = v19.epoch;
      v21 = v19;
      result = *(double *)&v19.value;
      *(_OWORD *)a5 = *(_OWORD *)&v19.value;
LABEL_35:
      *(_QWORD *)(a5 + 16) = epoch;
      return result;
    }
    time1 = v21;
    time2 = (CMTime)this->_introDuration;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      memset(&v20, 0, sizeof(v20));
      time1 = v21;
      time2 = (CMTime)this->_introDuration;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
      time1 = v20;
      time2 = (CMTime)this->_scaleableDuration;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        memset(&v19, 0, sizeof(v19));
        operator/((__int128 *)&v20.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v19);
        CMTimeMake(&v14, 1, 1);
        time1 = v19;
        time2 = v14;
        PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v15);
        time1 = v19;
        time2 = v15;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
        operator*((__int128 *)&v16.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v17);
        time1 = (CMTime)this->_introDuration;
        time2 = v17;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
        v21 = v18;
      }
    }
LABEL_34:
    result = *(double *)&v21.value;
    *(_OWORD *)a5 = *(_OWORD *)&v21.value;
    epoch = v21.epoch;
    goto LABEL_35;
  }
  if ((METimeRemap::shouldShowIntro(this) & 1) == 0 && (METimeRemap::shouldShowOutro(this) & 1) == 0)
  {
    if (a4)
    {
      operator/((__int128 *)&a3->duration.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
      *a4 = time1;
    }
    operator*((__int128 *)&this->_scaleableDuration.value, (uint64_t)&v21, (uint64_t)&v19);
    operator/((__int128 *)&v19.value, (uint64_t)&a3->duration, (uint64_t)&v20);
    time1 = (CMTime)this->_introDuration;
    *(_OWORD *)&time2.value = *(_OWORD *)&v20.value;
    v11 = v20.epoch;
    goto LABEL_39;
  }
  if ((METimeRemap::shouldShowIntro(this) & 1) == 0 && METimeRemap::shouldShowOutro(this))
  {
    memset(&v20, 0, sizeof(v20));
    time1 = a3->duration;
    time2 = (CMTime)this->_outroDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
    time1 = v21;
    time2 = v20;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      if (a4)
      {
        operator/((__int128 *)&v20.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
        *a4 = time1;
      }
      operator*((__int128 *)&this->_scaleableDuration.value, (uint64_t)&v21, (uint64_t)&v18);
      operator/((__int128 *)&v18.value, (uint64_t)&v20, (uint64_t)&v19);
      time1 = (CMTime)this->_introDuration;
      *(_OWORD *)&time2.value = *(_OWORD *)&v19.value;
      v11 = v19.epoch;
LABEL_39:
      time2.epoch = v11;
      return PC_CMTimeSaferAdd(&time1, &time2, a5);
    }
    goto LABEL_15;
  }
  if (METimeRemap::shouldShowIntro(this) && (METimeRemap::shouldShowOutro(this) & 1) == 0)
  {
    time1 = v21;
    time2 = (CMTime)this->_introDuration;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      memset(&v20, 0, sizeof(v20));
      time1 = a3->duration;
      time2 = (CMTime)this->_introDuration;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
      memset(&v19, 0, sizeof(v19));
      time1 = v21;
      time2 = (CMTime)this->_introDuration;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
      memset(&v18, 0, sizeof(v18));
      operator*((__int128 *)&this->_scaleableDuration.value, (uint64_t)&v19, (uint64_t)&time1);
      operator/((__int128 *)&time1.value, (uint64_t)&v20, (uint64_t)&v18);
      if (a4)
      {
        operator/((__int128 *)&v20.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
        *a4 = time1;
      }
      time1 = (CMTime)this->_introDuration;
      *(_OWORD *)&time2.value = *(_OWORD *)&v18.value;
      v11 = v18.epoch;
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  time1 = v21;
  time2 = (CMTime)this->_introDuration;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
LABEL_32:
    if (a4)
    {
      CMTimeMake(&time1, 1, 1);
      *a4 = time1;
    }
    goto LABEL_34;
  }
  memset(&v20, 0, sizeof(v20));
  time1 = a3->duration;
  time2 = (CMTime)this->_outroDuration;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
  time1 = v21;
  time2 = v20;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    memset(&v19, 0, sizeof(v19));
    time1 = a3->duration;
    time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
    time1 = v18;
    time2 = (CMTime)this->_outroDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    memset(&v18, 0, sizeof(v18));
    time1 = v21;
    time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
    if (a4)
    {
      operator/((__int128 *)&v19.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
      *a4 = time1;
    }
    operator*((__int128 *)&this->_scaleableDuration.value, (uint64_t)&v18, (uint64_t)&v16);
    operator/((__int128 *)&v16.value, (uint64_t)&v19, (uint64_t)&v17);
    time1 = (CMTime)this->_introDuration;
    *(_OWORD *)&time2.value = *(_OWORD *)&v17.value;
    v11 = v17.epoch;
    goto LABEL_39;
  }
LABEL_15:
  if (a4)
  {
    CMTimeMake(&time1, 1, 1);
    *a4 = time1;
  }
  time1 = (CMTime)this->_introDuration;
  time2 = (CMTime)this->_scaleableDuration;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
  time1 = v18;
  time2 = v21;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
  time1 = v19;
  time2 = v20;
  return PC_CMTimeSaferSubtract(&time1, &time2, a5);
}

double METimeRemap::componentTimeFromMotionTime@<D0>(METimeRemap *this@<X0>, const CMTime *a2@<X1>, const CMTimeRange *a3@<X2>, uint64_t a4@<X8>)
{
  CMTime *v8;
  $95D729B680665BEAEFA1D6FCA8238556 *p_scaleableDuration;
  CMTimeEpoch v10;
  CMTimeEpoch epoch;
  _BYTE v13[24];
  __int128 v14;
  CMTime v15;
  CMTime v16;
  __int128 v17;
  CMTimeEpoch v18;
  CMTime v19;
  CMTime time2;
  CMTime time1;

  if (this->_isLoop && !this->_forceDisableLoop)
    goto LABEL_18;
  if ((METimeRemap::shouldShowIntro(this) & 1) == 0 && (METimeRemap::shouldShowOutro(this) & 1) == 0)
  {
    time1 = *a2;
    time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
    operator*((__int128 *)&a3->duration.value, (uint64_t)&v17, (uint64_t)&time1);
    p_scaleableDuration = &this->_scaleableDuration;
    goto LABEL_15;
  }
  if ((METimeRemap::shouldShowIntro(this) & 1) != 0 || !METimeRemap::shouldShowOutro(this))
  {
    if (METimeRemap::shouldShowIntro(this) && (METimeRemap::shouldShowOutro(this) & 1) == 0)
    {
      time1 = *a2;
      time2 = (CMTime)this->_introDuration;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        v17 = 0uLL;
        v18 = 0;
        time1 = a3->duration;
        time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
        time1 = *a2;
        time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
        operator*(&v17, (uint64_t)&v14, (uint64_t)&v15);
        operator/((__int128 *)&v15.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v16);
        *(_OWORD *)&time1.value = *(_OWORD *)&v16.value;
        epoch = v16.epoch;
        goto LABEL_20;
      }
    }
    else
    {
      time1 = *a2;
      time2 = (CMTime)this->_introDuration;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        v17 = 0uLL;
        v18 = 0;
        time1 = a3->duration;
        time2 = (CMTime)this->_outroDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
        v8 = (CMTime *)&this->_scaleableDuration;
        time1 = (CMTime)this->_introDuration;
        time2 = (CMTime)this->_scaleableDuration;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
        time1 = *a2;
        time2 = v19;
        if (CMTimeCompare(&time1, &time2) >= 1)
          goto LABEL_13;
        memset(&v16, 0, sizeof(v16));
        time1 = a3->duration;
        time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
        time1 = v19;
        time2 = (CMTime)this->_outroDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
        time1 = *a2;
        time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v13);
        operator*((__int128 *)&v16.value, (uint64_t)v13, (uint64_t)&v14);
        operator/(&v14, (uint64_t)&this->_scaleableDuration, (uint64_t)&v15);
        *(_OWORD *)&time1.value = *(_OWORD *)&v15.value;
        epoch = v15.epoch;
LABEL_20:
        time1.epoch = epoch;
        *(_OWORD *)&time2.value = *(_OWORD *)&this->_introDuration.value;
        v10 = this->_introDuration.epoch;
        goto LABEL_21;
      }
    }
LABEL_18:
    v19 = *a2;
    goto LABEL_22;
  }
  v17 = 0uLL;
  v18 = 0;
  time1 = a3->duration;
  time2 = (CMTime)this->_outroDuration;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
  v8 = (CMTime *)&this->_scaleableDuration;
  time1 = (CMTime)this->_introDuration;
  time2 = (CMTime)this->_scaleableDuration;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
  time1 = *a2;
  time2 = v19;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
LABEL_13:
    time1 = *a2;
    time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
    time1 = v15;
    time2 = *v8;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
    time1 = v16;
    *(_OWORD *)&time2.value = v17;
    v10 = v18;
LABEL_21:
    time2.epoch = v10;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
    goto LABEL_22;
  }
  time1 = *a2;
  time2 = (CMTime)this->_introDuration;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
  operator*(&v17, (uint64_t)&v16, (uint64_t)&time1);
  p_scaleableDuration = &this->_scaleableDuration;
LABEL_15:
  operator/((__int128 *)&time1.value, (uint64_t)p_scaleableDuration, (uint64_t)&v19);
LABEL_22:
  time1 = v19;
  time2 = a3->start;
  return PC_CMTimeSaferAdd(&time1, &time2, a4);
}

void OZApplication::OZApplication(OZApplication *this, void *a2)
{
  HGComputeDeviceManager *v4;
  uint64_t **v5;
  HGGLContextPtr *v6;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 13);
  PCMutex::PCMutex((PCMutex *)((char *)this + 112));
  v4 = (HGComputeDeviceManager *)PCMutex::PCMutex((PCMutex *)((char *)this + 184));
  v5 = FxDeviceComputeActiveGPUsSet(v4);
  *((_QWORD *)this + 32) = v5;
  if (OZChannelBase::isObjectRef((OZChannelBase *)v5))
    FxDeviceLogActiveSet(*((_QWORD **)this + 32));
  v6 = (HGGLContextPtr *)operator new();
  HGGLContextPtr::HGGLContextPtr(v6, a2);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v6;
  *((_QWORD *)this + 9) = 0;
  *(_DWORD *)((char *)this + 79) = 0;
  *((_QWORD *)this + 11) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
}

void sub_1B2E411D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PCString *v2;
  PCMutex *v3;
  PCMutex *v4;
  uint64_t v5;
  void **v6;
  void *v8;

  MEMORY[0x1B5E29170](v5, 0x80C40B8603338);
  PCMutex::~PCMutex(v4);
  PCMutex::~PCMutex(v3);
  PCString::~PCString(v2);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 48) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void OZApplication::initialize(OZChannelBase *this, const PCString *a2)
{
  OZChannelBase *v2;
  OZPreferenceManager *v3;
  OZFactories *ContentPath;
  OZSceneNode_Factory *Instance;
  OZFactory *v6;
  OZTransformNode_Factory *v7;
  OZFactory *v8;
  OZElement_Factory *v9;
  OZFactory *v10;
  OZRotoshape_Factory *v11;
  OZFactory *v12;
  OZFootage_Factory *v13;
  OZFactory *v14;
  OZLayer_Factory *v15;
  OZFactory *v16;
  OZFootageLayer_Factory *v17;
  OZFactory *v18;
  OZGroup_Factory *v19;
  OZFactory *v20;
  OZImageElement_Factory *v21;
  OZFactory *v22;
  OZImageMask_Factory *v23;
  OZFactory *v24;
  OZCamera_Factory *v25;
  OZFactory *v26;
  OZLight_Factory *v27;
  OZFactory *v28;
  OZBehavior_Factory *v29;
  OZFactory *v30;
  OZNULLBehavior_Factory *v31;
  OZFactory *v32;
  OZSimulationBehavior_Factory *v33;
  OZFactory *v34;
  OZShapeBehavior_Factory *v35;
  OZFactory *v36;
  OZWriteOnBehavior_Factory *v37;
  OZFactory *v38;
  OZReflexiveBehavior_Factory *v39;
  OZFactory *v40;
  OZTransitiveBehavior_Factory *v41;
  OZFactory *v42;
  OZChannelBehavior_Factory *v43;
  OZFactory *v44;
  OZSingleChannelBehavior_Factory *v45;
  OZFactory *v46;
  OZMotionToForcesBehavior_Factory *v47;
  OZFactory *v48;
  OZSimSystemMoToFoBehavior_Factory *v49;
  OZFactory *v50;
  OZCollisionBehavior_Factory *v51;
  OZFactory *v52;
  OZRetimingBehavior_Factory *v53;
  OZFactory *v54;
  OZRig_Factory *v55;
  OZFactory *v56;
  OZRigWidget_Factory *v57;
  OZFactory *v58;
  OZRigWidgetAspectRatio_Factory *v59;
  OZFactory *v60;
  OZRigBehavior_Factory *v61;
  OZFactory *v62;
  OZProjectNode_Factory *v63;
  OZFactory *v64;
  OZLinkBehavior_Factory *v65;
  OZFactory *v66;
  OZMotionPathBehavior_Factory *v67;
  OZFactory *v68;
  OZFxGenerator_Factory *v69;
  OZFactory *v70;
  OZGradientGenerator_Factory *v71;
  OZFactory *v72;
  OZCloneGenerator_Factory *v73;
  OZFactory *v74;
  OZEffect_Factory *v75;
  OZFactory *v76;
  OZFxFilter_Factory *v77;
  OZFactory *v78;
  OZChanElementOrFootageRef_Factory *v79;
  OZFactory *v80;
  OZChanRotoshapeRef_Factory *v81;
  OZFactory *v82;
  OZChannelImageWithOptions_Factory *v83;
  OZFactory *v84;
  OZChanRotoshapeRefWithPicker_Factory *v85;
  OZFactory *v86;
  OZ3DEngineSceneElement_Factory *v87;
  OZFactory *v88;
  OZ3DEngineSceneFile_Factory *v89;
  OZFactory *v90;
  OZARFaceAnchorElement_Factory *v91;
  OZFactory *v92;
  OZ3DEnginePlaneElement_Factory *v93;
  OZFactory *v94;
  OZARPlaneAnchorElement_Factory *v95;
  OZFactory *v96;
  OZEnvironmentMeshSceneElement_Factory *v97;
  OZFactory *v98;
  OZARPersonAnchorElement_Factory *v99;
  OZFactory *v100;
  OZImageElement *v101;
  OZ3DEngineSceneElement *v102;
  OZCloneGenerator *v103;

  v2 = this;
  if (!LOBYTE(this->var10))
    this = (OZChannelBase *)OZChannelBase::setRangeName(this, a2);
  v3 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)this);
  ContentPath = (OZFactories *)OZPreferenceManager::getContentPath(v3);
  Instance = (OZSceneNode_Factory *)OZFactories::getInstance(ContentPath);
  v2->var4.var0 = (__CFString *)Instance;
  v6 = (OZFactory *)OZSceneNode_Factory::getInstance(Instance);
  v7 = (OZTransformNode_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v6);
  v8 = (OZFactory *)OZTransformNode_Factory::getInstance(v7);
  v9 = (OZElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v8);
  v10 = (OZFactory *)OZElement_Factory::getInstance(v9);
  v11 = (OZRotoshape_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v10);
  v12 = (OZFactory *)OZRotoshape_Factory::getInstance(v11);
  v13 = (OZFootage_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v12);
  v14 = (OZFactory *)OZFootage_Factory::getInstance(v13);
  v15 = (OZLayer_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v14);
  v16 = (OZFactory *)OZLayer_Factory::getInstance(v15);
  v17 = (OZFootageLayer_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v16);
  v18 = (OZFactory *)OZFootageLayer_Factory::getInstance(v17);
  v19 = (OZGroup_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v18);
  v20 = (OZFactory *)OZGroup_Factory::getInstance(v19);
  v21 = (OZImageElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v20);
  v22 = (OZFactory *)OZImageElement_Factory::getInstance(v21);
  v23 = (OZImageMask_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v22);
  v24 = (OZFactory *)OZImageMask_Factory::getInstance(v23);
  v25 = (OZCamera_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v24);
  v26 = (OZFactory *)OZCamera_Factory::getInstance(v25);
  v27 = (OZLight_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v26);
  v28 = (OZFactory *)OZLight_Factory::getInstance(v27);
  v29 = (OZBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v28);
  v30 = (OZFactory *)OZBehavior_Factory::getInstance(v29);
  v31 = (OZNULLBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v30);
  v32 = (OZFactory *)OZNULLBehavior_Factory::getInstance(v31);
  v33 = (OZSimulationBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v32);
  v34 = (OZFactory *)OZSimulationBehavior_Factory::getInstance(v33);
  v35 = (OZShapeBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v34);
  v36 = (OZFactory *)OZShapeBehavior_Factory::getInstance(v35);
  v37 = (OZWriteOnBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v36);
  v38 = (OZFactory *)OZWriteOnBehavior_Factory::getInstance(v37);
  v39 = (OZReflexiveBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v38);
  v40 = (OZFactory *)OZReflexiveBehavior_Factory::getInstance(v39);
  v41 = (OZTransitiveBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v40);
  v42 = (OZFactory *)OZTransitiveBehavior_Factory::getInstance(v41);
  v43 = (OZChannelBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v42);
  v44 = (OZFactory *)OZChannelBehavior_Factory::getInstance(v43);
  v45 = (OZSingleChannelBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v44);
  v46 = (OZFactory *)OZSingleChannelBehavior_Factory::getInstance(v45);
  v47 = (OZMotionToForcesBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v46);
  v48 = (OZFactory *)OZMotionToForcesBehavior_Factory::getInstance(v47);
  v49 = (OZSimSystemMoToFoBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v48);
  v50 = (OZFactory *)OZSimSystemMoToFoBehavior_Factory::getInstance(v49);
  v51 = (OZCollisionBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v50);
  v52 = (OZFactory *)OZCollisionBehavior_Factory::getInstance(v51);
  v53 = (OZRetimingBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v52);
  v54 = (OZFactory *)OZRetimingBehavior_Factory::getInstance(v53);
  v55 = (OZRig_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v54);
  v56 = (OZFactory *)OZRig_Factory::getInstance(v55);
  v57 = (OZRigWidget_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v56);
  v58 = (OZFactory *)OZRigWidget_Factory::getInstance(v57);
  v59 = (OZRigWidgetAspectRatio_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v58);
  v60 = (OZFactory *)OZRigWidgetAspectRatio_Factory::getInstance(v59);
  v61 = (OZRigBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v60);
  v62 = (OZFactory *)OZRigBehavior_Factory::getInstance(v61);
  v63 = (OZProjectNode_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v62);
  v64 = (OZFactory *)OZProjectNode_Factory::getInstance(v63);
  v65 = (OZLinkBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v64);
  v66 = (OZFactory *)OZLinkBehavior_Factory::getInstance(v65);
  v67 = (OZMotionPathBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v66);
  v68 = (OZFactory *)OZMotionPathBehavior_Factory::getInstance(v67);
  v69 = (OZFxGenerator_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v68);
  v70 = (OZFactory *)OZFxGenerator_Factory::getInstance(v69);
  v71 = (OZGradientGenerator_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v70);
  v72 = (OZFactory *)OZGradientGenerator_Factory::getInstance(v71);
  v73 = (OZCloneGenerator_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v72);
  v74 = (OZFactory *)OZCloneGenerator_Factory::getInstance(v73);
  v75 = (OZEffect_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v74);
  v76 = (OZFactory *)OZEffect_Factory::getInstance(v75);
  v77 = (OZFxFilter_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v76);
  v78 = (OZFactory *)OZFxFilter_Factory::getInstance(v77);
  v79 = (OZChanElementOrFootageRef_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v78);
  v80 = (OZFactory *)OZChanElementOrFootageRef_Factory::getInstance(v79);
  v81 = (OZChanRotoshapeRef_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v80);
  v82 = (OZFactory *)OZChanRotoshapeRef_Factory::getInstance(v81);
  v83 = (OZChannelImageWithOptions_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v82);
  v84 = (OZFactory *)OZChannelImageWithOptions_Factory::getInstance(v83);
  v85 = (OZChanRotoshapeRefWithPicker_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v84);
  v86 = (OZFactory *)OZChanRotoshapeRefWithPicker_Factory::getInstance(v85);
  v87 = (OZ3DEngineSceneElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v86);
  v88 = (OZFactory *)OZ3DEngineSceneElement_Factory::getInstance(v87);
  v89 = (OZ3DEngineSceneFile_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v88);
  v90 = (OZFactory *)OZ3DEngineSceneFile_Factory::getInstance(v89);
  v91 = (OZARFaceAnchorElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v90);
  v92 = (OZFactory *)OZARFaceAnchorElement_Factory::getInstance(v91);
  v93 = (OZ3DEnginePlaneElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v92);
  v94 = (OZFactory *)OZ3DEnginePlaneElement_Factory::getInstance(v93);
  v95 = (OZARPlaneAnchorElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v94);
  v96 = (OZFactory *)OZARPlaneAnchorElement_Factory::getInstance(v95);
  v97 = (OZEnvironmentMeshSceneElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v96);
  v98 = (OZFactory *)OZEnvironmentMeshSceneElement_Factory::getInstance(v97);
  v99 = (OZARPersonAnchorElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v98);
  v100 = (OZFactory *)OZARPersonAnchorElement_Factory::getInstance(v99);
  v101 = (OZImageElement *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v100);
  OZImageElement::registerRetiming(v101);
  OZ3DEngineSceneElement::registerRetiming(v102);
  OZCloneGenerator::registerRetiming(v103);
}

uint64_t OZSceneNode_Factory::getInstance(OZSceneNode_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZSceneNode_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZSceneNode_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSceneNode_Factory::_instance;
}

uint64_t OZTransformNode_Factory::getInstance(OZTransformNode_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZTransformNode_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZTransformNode_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZTransformNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZTransformNode_Factory::_instance;
}

uint64_t OZElement_Factory::getInstance(OZElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement_Factory::_instance;
}

uint64_t OZRotoshape_Factory::getInstance(OZRotoshape_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRotoshape_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRotoshape_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRotoshape_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRotoshape_Factory::_instance;
}

uint64_t OZFootage_Factory::getInstance(OZFootage_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootage_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootage_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage_Factory::_instance;
}

uint64_t OZLayer_Factory::getInstance(OZLayer_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLayer_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLayer_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLayer_Factory::_instance;
}

uint64_t OZFootageLayer_Factory::getInstance(OZFootageLayer_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZFootageLayer_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZFootageLayer_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootageLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootageLayer_Factory::_instance;
}

uint64_t OZGroup_Factory::getInstance(OZGroup_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGroup_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGroup_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup_Factory::_instance;
}

uint64_t OZImageElement_Factory::getInstance(OZImageElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement_Factory::_instance;
}

uint64_t OZImageMask_Factory::getInstance(OZImageMask_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZImageMask_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZImageMask_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageMask_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageMask_Factory::_instance;
}

uint64_t OZCamera_Factory::getInstance(OZCamera_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCamera_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCamera_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera_Factory::_instance;
}

uint64_t OZLight_Factory::getInstance(OZLight_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLight_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLight_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLight_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLight_Factory::_instance;
}

uint64_t OZBehavior_Factory::getInstance(OZBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBehavior_Factory::_instance;
}

uint64_t OZNULLBehavior_Factory::getInstance(OZNULLBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZNULLBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZNULLBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZNULLBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZNULLBehavior_Factory::_instance;
}

uint64_t OZSimulationBehavior_Factory::getInstance(OZSimulationBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZSimulationBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZSimulationBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSimulationBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSimulationBehavior_Factory::_instance;
}

uint64_t OZShapeBehavior_Factory::getInstance(OZShapeBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZShapeBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZShapeBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZShapeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZShapeBehavior_Factory::_instance;
}

uint64_t OZWriteOnBehavior_Factory::getInstance(OZWriteOnBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZWriteOnBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZWriteOnBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZWriteOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZWriteOnBehavior_Factory::_instance;
}

uint64_t OZReflexiveBehavior_Factory::getInstance(OZReflexiveBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZReflexiveBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZReflexiveBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZReflexiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZReflexiveBehavior_Factory::_instance;
}

uint64_t OZTransitiveBehavior_Factory::getInstance(OZTransitiveBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZTransitiveBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZTransitiveBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZTransitiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZTransitiveBehavior_Factory::_instance;
}

uint64_t OZChannelBehavior_Factory::getInstance(OZChannelBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBehavior_Factory::_instance;
}

uint64_t OZSingleChannelBehavior_Factory::getInstance(OZSingleChannelBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZSingleChannelBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZSingleChannelBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSingleChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSingleChannelBehavior_Factory::_instance;
}

uint64_t OZMotionToForcesBehavior_Factory::getInstance(OZMotionToForcesBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionToForcesBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionToForcesBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionToForcesBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionToForcesBehavior_Factory::_instance;
}

uint64_t OZSimSystemMoToFoBehavior_Factory::getInstance(OZSimSystemMoToFoBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZSimSystemMoToFoBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZSimSystemMoToFoBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSimSystemMoToFoBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSimSystemMoToFoBehavior_Factory::_instance;
}

uint64_t OZCollisionBehavior_Factory::getInstance(OZCollisionBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCollisionBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCollisionBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCollisionBehavior_Factory::_instance;
}

uint64_t OZRetimingBehavior_Factory::getInstance(OZRetimingBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRetimingBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRetimingBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRetimingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRetimingBehavior_Factory::_instance;
}

uint64_t OZRig_Factory::getInstance(OZRig_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRig_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRig_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRig_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRig_Factory::_instance;
}

uint64_t OZRigWidget_Factory::getInstance(OZRigWidget_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidget_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidget_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget_Factory::_instance;
}

uint64_t OZRigWidgetAspectRatio_Factory::getInstance(OZRigWidgetAspectRatio_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigWidgetAspectRatio_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigWidgetAspectRatio_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidgetAspectRatio_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidgetAspectRatio_Factory::_instance;
}

uint64_t OZRigBehavior_Factory::getInstance(OZRigBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZRigBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZRigBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigBehavior_Factory::_instance;
}

uint64_t OZProjectNode_Factory::getInstance(OZProjectNode_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZProjectNode_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZProjectNode_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZProjectNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZProjectNode_Factory::_instance;
}

uint64_t OZLinkBehavior_Factory::getInstance(OZLinkBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZLinkBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZLinkBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior_Factory::_instance;
}

uint64_t OZMotionPathBehavior_Factory::getInstance(OZMotionPathBehavior_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZMotionPathBehavior_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZMotionPathBehavior_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior_Factory::_instance;
}

OZFxGenerator_Factory *OZFxGenerator_Factory::getInstance(OZFxGenerator_Factory *this)
{
  OZFxGenerator_Factory *v1;

  v1 = (OZFxGenerator_Factory *)OZFxGenerator_Factory::_instance;
  if (!OZFxGenerator_Factory::_instance)
  {
    v1 = (OZFxGenerator_Factory *)operator new();
    OZFxGenerator_Factory::OZFxGenerator_Factory(v1);
    OZFxGenerator_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B2E421D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

uint64_t OZGradientGenerator_Factory::getInstance(OZGradientGenerator_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZGradientGenerator_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZGradientGenerator_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGradientGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGradientGenerator_Factory::_instance;
}

uint64_t OZCloneGenerator_Factory::getInstance(OZCloneGenerator_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCloneGenerator_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCloneGenerator_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCloneGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCloneGenerator_Factory::_instance;
}

uint64_t OZEffect_Factory::getInstance(OZEffect_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZEffect_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZEffect_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZEffect_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZEffect_Factory::_instance;
}

OZFxFilter_Factory *OZFxFilter_Factory::getInstance(OZFxFilter_Factory *this)
{
  OZFxFilter_Factory *v1;

  v1 = (OZFxFilter_Factory *)OZFxFilter_Factory::_instance;
  if (!OZFxFilter_Factory::_instance)
  {
    v1 = (OZFxFilter_Factory *)operator new();
    OZFxFilter_Factory::OZFxFilter_Factory(v1);
    OZFxFilter_Factory::_instance = (uint64_t)v1;
  }
  return v1;
}

void sub_1B2E42368(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

uint64_t OZChanElementOrFootageRef_Factory::getInstance(OZChanElementOrFootageRef_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChanElementOrFootageRef_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChanElementOrFootageRef_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanElementOrFootageRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanElementOrFootageRef_Factory::_instance;
}

uint64_t OZChanRotoshapeRef_Factory::getInstance(OZChanRotoshapeRef_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChanRotoshapeRef_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChanRotoshapeRef_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanRotoshapeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanRotoshapeRef_Factory::_instance;
}

uint64_t OZChannelImageWithOptions_Factory::getInstance(OZChannelImageWithOptions_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelImageWithOptions_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelImageWithOptions_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageWithOptions_Factory::_instance;
}

uint64_t OZ3DEngineSceneElement_Factory::getInstance(OZ3DEngineSceneElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DEngineSceneElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DEngineSceneElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineSceneElement_Factory::_instance;
}

uint64_t OZ3DEngineSceneFile_Factory::getInstance(OZ3DEngineSceneFile_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DEngineSceneFile_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DEngineSceneFile_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineSceneFile_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineSceneFile_Factory::_instance;
}

uint64_t OZARFaceAnchorElement_Factory::getInstance(OZARFaceAnchorElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZARFaceAnchorElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZARFaceAnchorElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZARFaceAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZARFaceAnchorElement_Factory::_instance;
}

uint64_t OZ3DEnginePlaneElement_Factory::getInstance(OZ3DEnginePlaneElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZ3DEnginePlaneElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZ3DEnginePlaneElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEnginePlaneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEnginePlaneElement_Factory::_instance;
}

uint64_t OZARPlaneAnchorElement_Factory::getInstance(OZARPlaneAnchorElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZARPlaneAnchorElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZARPlaneAnchorElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZARPlaneAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZARPlaneAnchorElement_Factory::_instance;
}

uint64_t OZEnvironmentMeshSceneElement_Factory::getInstance(OZEnvironmentMeshSceneElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZEnvironmentMeshSceneElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZEnvironmentMeshSceneElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZEnvironmentMeshSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZEnvironmentMeshSceneElement_Factory::_instance;
}

uint64_t OZARPersonAnchorElement_Factory::getInstance(OZARPersonAnchorElement_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZARPersonAnchorElement_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZARPersonAnchorElement_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZARPersonAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZARPersonAnchorElement_Factory::_instance;
}

uint64_t OZApplication::setHostApplicationDelegate(OZChannelBase **this, void *a2)
{
  PCMutex *v4;
  const PCString *v5;
  uint64_t v6;
  HGGLContextPtr *v7;

  v4 = (PCMutex *)(this + 23);
  PCMutex::lock((PCMutex *)(this + 23));
  if (*this)
  {
    v6 = OZChannelBase::setRangeName(*this, v5);
    MEMORY[0x1B5E29170](v6, 0x80C40B8603338);
    *this = 0;
  }
  v7 = (HGGLContextPtr *)operator new();
  HGGLContextPtr::HGGLContextPtr(v7, a2);
  *this = (OZChannelBase *)v7;
  return PCMutex::unlock(v4);
}

void sub_1B2E427EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1B5E29170](v9, 0x80C40B8603338);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZApplication::getHostApplicationDelegate(OZApplication *this)
{
  PCMutex *v2;
  uint64_t v3;

  v2 = (PCMutex *)((char *)this + 184);
  PCMutex::lock((PCMutex *)((char *)this + 184));
  v3 = *(_QWORD *)this;
  PCMutex::unlock(v2);
  return v3;
}

OZDocument *OZApplication::newDocument(OZApplication *this)
{
  OZDocument *v1;

  v1 = (OZDocument *)operator new();
  OZDocument::OZDocument(v1, 1);
  return v1;
}

void sub_1B2E4289C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40388DFA4ELL);
  _Unwind_Resume(a1);
}

uint64_t OZApplication::createSceneNode(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  const void *Factory;
  void *v7;

  Factory = (const void *)OZFactories::findFactory(*(_QWORD *)(a1 + 32), a2);
  if (Factory
  {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, a3, a4);
  }
  else
  {
    return 0;
  }
}

uint64_t OZApplication::createBehavior(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  const void *Factory;
  void *v7;

  Factory = (const void *)OZFactories::findFactory(*(_QWORD *)(a1 + 32), a2);
  if (Factory
  {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, a3, a4);
  }
  else
  {
    return 0;
  }
}

uint64_t OZApplication::createBehavior(uint64_t a1, unsigned int *a2)
{
  const void *Factory;
  void *v3;
  uint64_t v4;
  OZChannelBase *v5;
  uint64_t NextUniqueID;
  PCString v8;

  Factory = (const void *)OZFactories::findFactory(*(_QWORD *)(a1 + 32), a2);
  if (!Factory)
    return 0;
  v4 = (uint64_t)v3;
  if (v3)
  {
    v5 = (OZChannelBase *)(*(_QWORD *(**)(PCString *__return_ptr, void *))(*(_QWORD *)v3 + 40))(&v8, v3);
    NextUniqueID = OZChannelBase::getNextUniqueID(v5);
    v4 = (*(uint64_t (**)(uint64_t, PCString *, uint64_t))(*(_QWORD *)v4 + 168))(v4, &v8, NextUniqueID);
    PCString::~PCString(&v8);
  }
  return v4;
}

void sub_1B2E42A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZApplication::createStyle(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  const void *Factory;
  void *v7;

  Factory = (const void *)OZFactories::findFactory(*(_QWORD *)(a1 + 32), a2);
  if (Factory
  {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, a3, a4);
  }
  else
  {
    return 0;
  }
}

void std::__call_once_param<std::tuple<OZSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZSceneNode_Factory *v0;

  v0 = (OZSceneNode_Factory *)operator new();
  OZSceneNode_Factory::OZSceneNode_Factory(v0);
  OZSceneNode_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E42AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZSceneNode_Factory::OZSceneNode_Factory(OZSceneNode_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v4 = xmmword_1B355DCA0;
  v3 = 0uLL;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(_QWORD *)this = &unk_1E658F3F0;
  *((_QWORD *)this + 16) = &unk_1E658F4A8;
}

void sub_1B2E42B78(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *OZSceneNode_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-MissingObject");
}

PCString *OZSceneNode_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-MissingObject");
}

void std::__call_once_param<std::tuple<OZTransformNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZTransformNode_Factory *v0;

  v0 = (OZTransformNode_Factory *)operator new();
  OZTransformNode_Factory::OZTransformNode_Factory(v0);
  OZTransformNode_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E42BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZTransformNode_Factory::OZTransformNode_Factory(OZTransformNode_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B3054C60;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(_QWORD *)this = &unk_1E658F500;
  *((_QWORD *)this + 16) = &unk_1E658F5B8;
}

void sub_1B2E42C88(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZElement_Factory *v0;

  v0 = (OZElement_Factory *)operator new();
  OZElement_Factory::OZElement_Factory(v0);
  OZElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E42CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZElement_Factory::OZElement_Factory(OZElement_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054C60;
  v4 = xmmword_1B3054BC0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(_QWORD *)this = &unk_1E658F610;
  *((_QWORD *)this + 16) = &unk_1E658F6C8;
}

void sub_1B2E42D78(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZRotoshape_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRotoshape_Factory *v0;

  v0 = (OZRotoshape_Factory *)operator new();
  OZRotoshape_Factory::OZRotoshape_Factory(v0);
  OZRotoshape_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E42DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRotoshape_Factory::OZRotoshape_Factory(OZRotoshape_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BC0;
  v4 = xmmword_1B355CCA0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658F720;
  *((_QWORD *)this + 16) = &unk_1E658F7F0;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E42E74(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRotoshape_Factory::~OZRotoshape_Factory(OZRotoshape_Factory *this)
{
  OZRotoshape_Factory::~OZRotoshape_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658F720;
  *((_QWORD *)this + 16) = &unk_1E658F7F0;
  v2 = (OZRotoshape_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRotoshape_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZRotoshape *v6;
  const PCString *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelBase *v10;
  OZChannelBase *v11;
  OZChannelBase *v12;
  const PCString *v13;
  char v15;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZRotoshape *)operator new();
    OZRotoshape::OZRotoshape(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(_QWORD *))(*((_QWORD *)v6 + 25) + 88))((_QWORD *)v6 + 25);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v15, (const PCString *)CFSTR("Motion Effect"));
  v8 = *((_QWORD *)this + 17);
  if (v8)
    v9 = v8 + 200;
  else
    v9 = 0;
  v10 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v9, 40);
  v11 = v10;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v10);
  OZChannelBase::setID((OZChannelBase *)&v11->var7, NextUniqueID);
  v12 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v11->var0 + 80))(v11);
  OZChannelBase::setName(v12, a2, 0);
  (*((void (**)(OZChannelBase *))v11->var0 + 115))(v11);
  OZChannelBase::setRangeName((OZChannelBase *)&v15, v13);
  return v11;
}

void sub_1B2E43000(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C408B2AE773, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

_QWORD *OZRotoshape_Factory::createCopy(OZRotoshape_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZRotoshape *v5;
  const OZRotoshape *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (OZRotoshape *)operator new();
  OZRotoshape::OZRotoshape(v5, v6, a3);
  if (a2)
  else
    v7 = 0;
  v9 = *((_QWORD *)v5 + 25);
  v8 = (_QWORD *)((char *)v5 + 200);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 208))(v8, (uint64_t)v7 + 200, a3);
  return v8;
}

void sub_1B2E430F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408B2AE773);
  _Unwind_Resume(a1);
}

void OZRotoshape_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rotoshape Short Desc", "com.apple.ozone.framework");
}

PCString *OZRotoshape_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rotoshape Short Desc");
}

PCString *OZRotoshape_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-SplineShape");
}

PCString *OZRotoshape_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-SplineShape");
}

uint64_t OZRotoshape_Factory::getIconIDInternal(OZRotoshape_Factory *this)
{
  return 14;
}

PCString *OZRotoshape_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Shape_Icon");
}

uint64_t OZRotoshape_Factory::createNodeCopy(OZRotoshape_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZRotoshape *v5;
  const OZRotoshape *v6;

  v5 = (OZRotoshape *)operator new();
  OZRotoshape::OZRotoshape(v5, v6, a3);
  return (uint64_t)v5 + 200;
}

void sub_1B2E431EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408B2AE773);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRotoshape_Factory::~OZRotoshape_Factory(OZRotoshape_Factory *this)
{
  OZRotoshape_Factory::~OZRotoshape_Factory((OZRotoshape_Factory *)((char *)this - 128));
}

{
  OZRotoshape_Factory::~OZRotoshape_Factory((OZRotoshape_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZFootage_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootage_Factory *v0;

  v0 = (OZFootage_Factory *)operator new();
  OZFootage_Factory::OZFootage_Factory(v0);
  OZFootage_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E432E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZFootage_Factory::OZFootage_Factory(OZFootage_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCB0;
  v4 = xmmword_1B355DB10;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658F848;
  *((_QWORD *)this + 16) = &unk_1E658F918;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E43384(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFootage_Factory::~OZFootage_Factory(OZFootage_Factory *this)
{
  OZFootage_Factory::~OZFootage_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658F848;
  *((_QWORD *)this + 16) = &unk_1E658F918;
  v2 = (OZFootage_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZFootage_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZFootage *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZFootage *)operator new();
    OZFootage::OZFootage(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZFootage *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E43504(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C405F7C6635, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZFootage *OZFootage_Factory::createCopy(OZFootage_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZFootage *v5;
  OZFootage *v6;
  void *v7;

  v5 = (OZFootage *)operator new();
  OZFootage::OZFootage(v5, v6, a3);
  (*(void (**)(OZFootage *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E435EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405F7C6635);
  _Unwind_Resume(a1);
}

void OZFootage_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Footage Short Desc", "com.apple.ozone.framework");
}

PCString *OZFootage_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Footage Short Desc");
}

OZFootage *OZFootage_Factory::createNodeCopy(OZFootage_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZFootage *v5;
  OZFootage *v6;

  v5 = (OZFootage *)operator new();
  OZFootage::OZFootage(v5, v6, a3);
  return v5;
}

void sub_1B2E436AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C405F7C6635);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZFootage_Factory::~OZFootage_Factory(OZFootage_Factory *this)
{
  OZFootage_Factory::~OZFootage_Factory((OZFootage_Factory *)((char *)this - 128));
}

{
  OZFootage_Factory::~OZFootage_Factory((OZFootage_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLayer_Factory *v0;

  v0 = (OZLayer_Factory *)operator new();
  OZLayer_Factory::OZLayer_Factory(v0);
  OZLayer_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E437A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZLayer_Factory::OZLayer_Factory(OZLayer_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCD0;
  v4 = xmmword_1B355DCC0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658F970;
  *((_QWORD *)this + 16) = &unk_1E658FA40;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E43844(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLayer_Factory::~OZLayer_Factory(OZLayer_Factory *this)
{
  OZLayer_Factory::~OZLayer_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658F970;
  *((_QWORD *)this + 16) = &unk_1E658FA40;
  v2 = (OZLayer_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZLayer_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZLayer *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZLayer *)operator new();
    OZLayer::OZLayer(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZLayer *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E439C4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40017E444ALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZLayer *OZLayer_Factory::createCopy(OZLayer_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZLayer *v5;
  const OZLayer *v6;
  void *v7;

  v5 = (OZLayer *)operator new();
  OZLayer::OZLayer(v5, v6, a3);
  (*(void (**)(OZLayer *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E43AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void OZLayer_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Layer Short Desc", "com.apple.ozone.framework");
}

PCString *OZLayer_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Layer Short Desc");
}

PCString *OZLayer_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-3DGroup");
}

PCString *OZLayer_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-3DGroup");
}

OZLayer *OZLayer_Factory::createNodeCopy(OZLayer_Factory *this, OZSceneNode *a2, uint64_t a3)
{
  OZLayer *v5;
  const OZLayer *v6;

  v5 = (OZLayer *)operator new();
  OZLayer::OZLayer(v5, v6, a3);
  return v5;
}

void sub_1B2E43B8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZLayer_Factory::~OZLayer_Factory(OZLayer_Factory *this)
{
  OZLayer_Factory::~OZLayer_Factory((OZLayer_Factory *)((char *)this - 128));
}

{
  OZLayer_Factory::~OZLayer_Factory((OZLayer_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZFootageLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZFootageLayer_Factory *v0;

  v0 = (OZFootageLayer_Factory *)operator new();
  OZFootageLayer_Factory::OZFootageLayer_Factory(v0);
  OZFootageLayer_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E43C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZFootageLayer_Factory::OZFootageLayer_Factory(OZFootageLayer_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B355DCE0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658FA98;
  *((_QWORD *)this + 16) = &unk_1E658FB68;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E43D24(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFootageLayer_Factory::~OZFootageLayer_Factory(OZFootageLayer_Factory *this)
{
  OZFootageLayer_Factory::~OZFootageLayer_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658FA98;
  *((_QWORD *)this + 16) = &unk_1E658FB68;
  v2 = (OZFootageLayer_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZFootageLayer_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZFootageLayer *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZFootageLayer *)operator new();
    OZFootageLayer::OZFootageLayer(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZFootageLayer *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E43EA4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40A27F4032, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZFootageLayer *OZFootageLayer_Factory::createCopy(OZFootageLayer_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZFootageLayer *v5;
  const OZFootageLayer *v6;
  void *v7;

  v5 = (OZFootageLayer *)operator new();
  OZFootageLayer::OZFootageLayer(v5, v6, a3);
  (*(void (**)(OZFootageLayer *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E43F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A27F4032);
  _Unwind_Resume(a1);
}

void OZFootageLayer_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Footage Layer Short Desc", "com.apple.ozone.framework");
}

PCString *OZFootageLayer_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Footage Layer Short Desc");
}

OZFootageLayer *OZFootageLayer_Factory::createNodeCopy(OZFootageLayer_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZFootageLayer *v5;
  const OZFootageLayer *v6;

  v5 = (OZFootageLayer *)operator new();
  OZFootageLayer::OZFootageLayer(v5, v6, a3);
  return v5;
}

void sub_1B2E4404C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40A27F4032);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZFootageLayer_Factory::~OZFootageLayer_Factory(OZFootageLayer_Factory *this)
{
  OZFootageLayer_Factory::~OZFootageLayer_Factory((OZFootageLayer_Factory *)((char *)this - 128));
}

{
  OZFootageLayer_Factory::~OZFootageLayer_Factory((OZFootageLayer_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZGroup_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGroup_Factory *v0;

  v0 = (OZGroup_Factory *)operator new();
  OZGroup_Factory::OZGroup_Factory(v0);
  OZGroup_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E44144(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZGroup_Factory::OZGroup_Factory(OZGroup_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BC0;
  v4 = xmmword_1B355DCD0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658FBC0;
  *((_QWORD *)this + 16) = &unk_1E658FC90;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E441E4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGroup_Factory::~OZGroup_Factory(OZGroup_Factory *this)
{
  OZGroup_Factory::~OZGroup_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658FBC0;
  *((_QWORD *)this + 16) = &unk_1E658FC90;
  v2 = (OZGroup_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZGroup_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZGroup *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZGroup *)operator new();
    OZGroup::OZGroup(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZGroup *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E44364(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40017E444ALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZGroup *OZGroup_Factory::createCopy(OZGroup_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZGroup *v5;
  const OZGroup *v6;
  void *v7;

  v5 = (OZGroup *)operator new();
  OZGroup::OZGroup(v5, v6, a3);
  (*(void (**)(OZGroup *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4444C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void OZGroup_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Group Short Desc", "com.apple.ozone.framework");
}

PCString *OZGroup_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Group Short Desc");
}

OZGroup *OZGroup_Factory::createNodeCopy(OZGroup_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZGroup *v5;
  const OZGroup *v6;

  v5 = (OZGroup *)operator new();
  OZGroup::OZGroup(v5, v6, a3);
  return v5;
}

void sub_1B2E4450C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZGroup_Factory::~OZGroup_Factory(OZGroup_Factory *this)
{
  OZGroup_Factory::~OZGroup_Factory((OZGroup_Factory *)((char *)this - 128));
}

{
  OZGroup_Factory::~OZGroup_Factory((OZGroup_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZImageElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageElement_Factory *v0;

  v0 = (OZImageElement_Factory *)operator new();
  OZImageElement_Factory::OZImageElement_Factory(v0);
  OZImageElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E44604(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZImageElement_Factory::OZImageElement_Factory(OZImageElement_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BC0;
  v4 = xmmword_1B355DCF0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658FCE8;
  *((_QWORD *)this + 16) = &unk_1E658FDB8;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E446A4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZImageElement_Factory::~OZImageElement_Factory(OZImageElement_Factory *this)
{
  OZImageElement_Factory::~OZImageElement_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658FCE8;
  *((_QWORD *)this + 16) = &unk_1E658FDB8;
  v2 = (OZImageElement_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZImageElement_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZImageElement *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZImageElement *)operator new();
    OZImageElement::OZImageElement(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZImageElement *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E44824(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40804CB178, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZImageElement *OZImageElement_Factory::createCopy(OZImageElement_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZImageElement *v5;
  const OZImageElement *v6;
  void *v7;

  v5 = (OZImageElement *)operator new();
  OZImageElement::OZImageElement(v5, v6, a3);
  (*(void (**)(OZImageElement *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4490C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40804CB178);
  _Unwind_Resume(a1);
}

void OZImageElement_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Image Element Short Desc", "com.apple.ozone.framework");
}

PCString *OZImageElement_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Image Element Short Desc");
}

PCString *OZImageElement_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Movie");
}

PCString *OZImageElement_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Movie");
}

OZImageElement *OZImageElement_Factory::createNodeCopy(OZImageElement_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZImageElement *v5;
  const OZImageElement *v6;

  v5 = (OZImageElement *)operator new();
  OZImageElement::OZImageElement(v5, v6, a3);
  return v5;
}

void sub_1B2E449EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40804CB178);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZImageElement_Factory::~OZImageElement_Factory(OZImageElement_Factory *this)
{
  OZImageElement_Factory::~OZImageElement_Factory((OZImageElement_Factory *)((char *)this - 128));
}

{
  OZImageElement_Factory::~OZImageElement_Factory((OZImageElement_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZImageMask_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZImageMask_Factory *v0;

  v0 = (OZImageMask_Factory *)operator new();
  OZImageMask_Factory::OZImageMask_Factory(v0);
  OZImageMask_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E44AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZImageMask_Factory::OZImageMask_Factory(OZImageMask_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B355DD00;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658FE10;
  *((_QWORD *)this + 16) = &unk_1E658FEE0;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E44B84(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZImageMask_Factory::~OZImageMask_Factory(OZImageMask_Factory *this)
{
  OZImageMask_Factory::~OZImageMask_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658FE10;
  *((_QWORD *)this + 16) = &unk_1E658FEE0;
  v2 = (OZImageMask_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZImageMask_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZImageMask *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZImageMask *)operator new();
    OZImageMask::OZImageMask(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZImageMask *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E44D04(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C402CA23E7BLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZImageMask *OZImageMask_Factory::createCopy(OZImageMask_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZImageMask *v5;
  const OZImageMask *v6;
  void *v7;

  v5 = (OZImageMask *)operator new();
  OZImageMask::OZImageMask(v5, v6, a3);
  (*(void (**)(OZImageMask *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E44DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C402CA23E7BLL);
  _Unwind_Resume(a1);
}

void OZImageMask_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Image Mask Short Desc", "com.apple.ozone.framework");
}

PCString *OZImageMask_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Image Mask Short Desc");
}

PCString *OZImageMask_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-ImageMask");
}

PCString *OZImageMask_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-ImageMask");
}

uint64_t OZImageMask_Factory::getIconIDInternal(OZImageMask_Factory *this)
{
  return 16;
}

OZImageMask *OZImageMask_Factory::createNodeCopy(OZImageMask_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZImageMask *v5;
  const OZImageMask *v6;

  v5 = (OZImageMask *)operator new();
  OZImageMask::OZImageMask(v5, v6, a3);
  return v5;
}

void sub_1B2E44ED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C402CA23E7BLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZImageMask_Factory::~OZImageMask_Factory(OZImageMask_Factory *this)
{
  OZImageMask_Factory::~OZImageMask_Factory((OZImageMask_Factory *)((char *)this - 128));
}

{
  OZImageMask_Factory::~OZImageMask_Factory((OZImageMask_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZCamera_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCamera_Factory *v0;

  v0 = (OZCamera_Factory *)operator new();
  OZCamera_Factory::OZCamera_Factory(v0);
  OZCamera_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E44FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZCamera_Factory::OZCamera_Factory(OZCamera_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054C60;
  v4 = xmmword_1B355CF40;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E658FF38;
  *((_QWORD *)this + 16) = &unk_1E6590008;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4506C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZCamera_Factory::~OZCamera_Factory(OZCamera_Factory *this)
{
  OZCamera_Factory::~OZCamera_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E658FF38;
  *((_QWORD *)this + 16) = &unk_1E6590008;
  v2 = (OZCamera_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZCamera_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZCamera *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZCamera *)operator new();
    OZCamera::OZCamera(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZCamera *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E451EC(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4059BDEAAALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZCamera *OZCamera_Factory::createCopy(OZCamera_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZCamera *v5;
  const OZCamera *v6;
  void *v7;

  v5 = (OZCamera *)operator new();
  OZCamera::OZCamera(v5, v6, a3);
  (*(void (**)(OZCamera *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E452D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4059BDEAAALL);
  _Unwind_Resume(a1);
}

void OZCamera_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Camera Short Desc", "com.apple.ozone.framework");
}

PCString *OZCamera_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Camera Short Desc");
}

PCString *OZCamera_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Camera");
}

PCString *OZCamera_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Camera");
}

uint64_t OZCamera_Factory::getIconIDInternal(OZCamera_Factory *this)
{
  return 21;
}

OZCamera *OZCamera_Factory::createNodeCopy(OZCamera_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZCamera *v5;
  const OZCamera *v6;

  v5 = (OZCamera *)operator new();
  OZCamera::OZCamera(v5, v6, a3);
  return v5;
}

void sub_1B2E453BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4059BDEAAALL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZCamera_Factory::~OZCamera_Factory(OZCamera_Factory *this)
{
  OZCamera_Factory::~OZCamera_Factory((OZCamera_Factory *)((char *)this - 128));
}

{
  OZCamera_Factory::~OZCamera_Factory((OZCamera_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZLight_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLight_Factory *v0;

  v0 = (OZLight_Factory *)operator new();
  OZLight_Factory::OZLight_Factory(v0);
  OZLight_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E454B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZLight_Factory::OZLight_Factory(OZLight_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054C60;
  v4 = xmmword_1B355DD10;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6590060;
  *((_QWORD *)this + 16) = &unk_1E6590130;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E45554(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLight_Factory::~OZLight_Factory(OZLight_Factory *this)
{
  OZLight_Factory::~OZLight_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6590060;
  *((_QWORD *)this + 16) = &unk_1E6590130;
  v2 = (OZLight_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZLight_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZLight *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZLight *)operator new();
    OZLight::OZLight(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZLight *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E456D4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40CC0084FBLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZLight *OZLight_Factory::createCopy(OZLight_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZLight *v5;
  const OZLight *v6;
  void *v7;

  v5 = (OZLight *)operator new();
  OZLight::OZLight(v5, v6, a3);
  (*(void (**)(OZLight *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E457BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CC0084FBLL);
  _Unwind_Resume(a1);
}

void OZLight_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Light Short Desc", "com.apple.ozone.framework");
}

PCString *OZLight_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Light Short Desc");
}

PCString *OZLight_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Light");
}

PCString *OZLight_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Light");
}

uint64_t OZLight_Factory::getIconIDInternal(OZLight_Factory *this)
{
  return 22;
}

OZLight *OZLight_Factory::createNodeCopy(OZLight_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZLight *v5;
  const OZLight *v6;

  v5 = (OZLight *)operator new();
  OZLight::OZLight(v5, v6, a3);
  return v5;
}

void sub_1B2E458A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40CC0084FBLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZLight_Factory::~OZLight_Factory(OZLight_Factory *this)
{
  OZLight_Factory::~OZLight_Factory((OZLight_Factory *)((char *)this - 128));
}

{
  OZLight_Factory::~OZLight_Factory((OZLight_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZBehavior_Factory *v0;

  v0 = (OZBehavior_Factory *)operator new();
  OZBehavior_Factory::OZBehavior_Factory(v0);
  OZBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4599C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZBehavior_Factory::OZBehavior_Factory(OZBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v4 = xmmword_1B355CFF0;
  v3 = 0uLL;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(_QWORD *)this = &unk_1E6590188;
  *((_QWORD *)this + 16) = &unk_1E6590240;
}

void sub_1B2E45A2C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *OZBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Behavior");
}

PCString *OZBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Behavior");
}

PCString *OZBehavior_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Behavior_Icon");
}

void std::__call_once_param<std::tuple<OZNULLBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZNULLBehavior_Factory *v0;

  v0 = (OZNULLBehavior_Factory *)operator new();
  OZNULLBehavior_Factory::OZNULLBehavior_Factory(v0);
  OZNULLBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E45AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::OZNULLBehavior_Factory(OZNULLBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355CFF0;
  v4 = xmmword_1B355CFD0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355DCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590298;
  *((_QWORD *)this + 18) = &unk_1E6590378;
}

void sub_1B2E45B68(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZNULLBehavior *OZNULLBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZNULLBehavior *v6;

  v6 = (OZNULLBehavior *)operator new();
  OZNULLBehavior::OZNULLBehavior(v6, this, a2, a3);
  (*(void (**)(OZNULLBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E45BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

OZNULLBehavior *OZNULLBehavior_Factory::createCopy(OZNULLBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZNULLBehavior *v5;
  const OZNULLBehavior *v6;

  v5 = (OZNULLBehavior *)operator new();
  OZNULLBehavior::OZNULLBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E45C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "NULL", "com.apple.ozone.framework");
}

PCString *OZNULLBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "NULL");
}

void OZNULLBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Nothing", "com.apple.ozone.framework");
}

PCString *OZNULLBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Nothing");
}

OZNULLBehavior *OZNULLBehavior_Factory::createBehaviorCopy(OZNULLBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZNULLBehavior *v5;
  const OZNULLBehavior *v6;

  v5 = (OZNULLBehavior *)operator new();
  OZNULLBehavior::OZNULLBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E45D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "NULL Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZSimulationBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZSimulationBehavior_Factory *v0;

  v0 = (OZSimulationBehavior_Factory *)operator new();
  OZSimulationBehavior_Factory::OZSimulationBehavior_Factory(v0);
  OZSimulationBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E45DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::OZSimulationBehavior_Factory(OZSimulationBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355CFF0;
  v4 = xmmword_1B355DD20;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65903D0;
  *((_QWORD *)this + 18) = &unk_1E65904B0;
}

void sub_1B2E45E9C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZSimulationBehavior *OZSimulationBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZSimulationBehavior *v6;

  v6 = (OZSimulationBehavior *)operator new();
  OZSimulationBehavior::OZSimulationBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2E45F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

OZSimulationBehavior *OZSimulationBehavior_Factory::createCopy(OZSimulationBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZSimulationBehavior *v5;
  OZSimulationBehavior *v6;

  v5 = (OZSimulationBehavior *)operator new();
  OZSimulationBehavior::OZSimulationBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E45FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Simulation Behavior", "com.apple.ozone.framework");
}

PCString *OZSimulationBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Simulation Behavior");
}

void OZSimulationBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Simulations Behavior Category", "com.apple.ozone.framework");
}

PCString *OZSimulationBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Simulations");
}

OZSimulationBehavior *OZSimulationBehavior_Factory::createBehaviorCopy(OZSimulationBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZSimulationBehavior *v5;
  OZSimulationBehavior *v6;

  v5 = (OZSimulationBehavior *)operator new();
  OZSimulationBehavior::OZSimulationBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E4608C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Simulation Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZShapeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZShapeBehavior_Factory *v0;

  v0 = (OZShapeBehavior_Factory *)operator new();
  OZShapeBehavior_Factory::OZShapeBehavior_Factory(v0);
  OZShapeBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E46110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::OZShapeBehavior_Factory(OZShapeBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355CFF0;
  v4 = xmmword_1B355DD30;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590508;
  *((_QWORD *)this + 18) = &unk_1E65905E8;
}

void sub_1B2E461C0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZShapeBehavior *OZShapeBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZShapeBehavior *v6;

  v6 = (OZShapeBehavior *)operator new();
  OZShapeBehavior::OZShapeBehavior(v6, this, a2, a3);
  (*(void (**)(OZShapeBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E46240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408986AE54);
  _Unwind_Resume(a1);
}

OZShapeBehavior *OZShapeBehavior_Factory::createCopy(OZShapeBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZShapeBehavior *v5;
  OZShapeBehavior *v6;

  v5 = (OZShapeBehavior *)operator new();
  OZShapeBehavior::OZShapeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E462D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408986AE54);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Shape Behavior", "com.apple.ozone.framework");
}

PCString *OZShapeBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Shape Behavior");
}

void OZShapeBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Shape Behavior Category", "com.apple.ozone.framework");
}

PCString *OZShapeBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Shape");
}

OZShapeBehavior *OZShapeBehavior_Factory::createBehaviorCopy(OZShapeBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZShapeBehavior *v5;
  OZShapeBehavior *v6;

  v5 = (OZShapeBehavior *)operator new();
  OZShapeBehavior::OZShapeBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E463C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408986AE54);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Shape Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZWriteOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZWriteOnBehavior_Factory *v0;

  v0 = (OZWriteOnBehavior_Factory *)operator new();
  OZWriteOnBehavior_Factory::OZWriteOnBehavior_Factory(v0);
  OZWriteOnBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E46444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::OZWriteOnBehavior_Factory(OZWriteOnBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B355DD40;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B355CCA0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590640;
  *((_QWORD *)this + 18) = &unk_1E6590720;
}

void sub_1B2E464F4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZWriteOnBehavior *OZWriteOnBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZWriteOnBehavior *v6;

  v6 = (OZWriteOnBehavior *)operator new();
  OZWriteOnBehavior::OZWriteOnBehavior(v6, this, a2, a3);
  (*(void (**)(OZWriteOnBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E46574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40873BD1AELL);
  _Unwind_Resume(a1);
}

OZWriteOnBehavior *OZWriteOnBehavior_Factory::createCopy(OZWriteOnBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZWriteOnBehavior *v5;
  const OZWriteOnBehavior *v6;

  v5 = (OZWriteOnBehavior *)operator new();
  OZWriteOnBehavior::OZWriteOnBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E4660C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40873BD1AELL);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Write On Behavior", "com.apple.ozone.framework");
}

PCString *OZWriteOnBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Write On Behavior");
}

OZWriteOnBehavior *OZWriteOnBehavior_Factory::createBehaviorCopy(OZWriteOnBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZWriteOnBehavior *v5;
  const OZWriteOnBehavior *v6;

  v5 = (OZWriteOnBehavior *)operator new();
  OZWriteOnBehavior::OZWriteOnBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E466CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40873BD1AELL);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Write On Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZReflexiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZReflexiveBehavior_Factory *v0;

  v0 = (OZReflexiveBehavior_Factory *)operator new();
  OZReflexiveBehavior_Factory::OZReflexiveBehavior_Factory(v0);
  OZReflexiveBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E46750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::OZReflexiveBehavior_Factory(OZReflexiveBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD20;
  v4 = xmmword_1B355DD50;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590778;
  *((_QWORD *)this + 18) = &unk_1E6590858;
}

void sub_1B2E46800(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZReflexiveBehavior *OZReflexiveBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZReflexiveBehavior *v6;

  v6 = (OZReflexiveBehavior *)operator new();
  OZReflexiveBehavior::OZReflexiveBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2E46870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

OZReflexiveBehavior *OZReflexiveBehavior_Factory::createCopy(OZReflexiveBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZReflexiveBehavior *v5;
  OZReflexiveBehavior *v6;

  v5 = (OZReflexiveBehavior *)operator new();
  OZReflexiveBehavior::OZReflexiveBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E46908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Reflexive Behavior", "com.apple.ozone.framework");
}

PCString *OZReflexiveBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Reflexive Behavior");
}

OZReflexiveBehavior *OZReflexiveBehavior_Factory::createBehaviorCopy(OZReflexiveBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZReflexiveBehavior *v5;
  OZReflexiveBehavior *v6;

  v5 = (OZReflexiveBehavior *)operator new();
  OZReflexiveBehavior::OZReflexiveBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E469C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Reflexive Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZTransitiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZTransitiveBehavior_Factory *v0;

  v0 = (OZTransitiveBehavior_Factory *)operator new();
  OZTransitiveBehavior_Factory::OZTransitiveBehavior_Factory(v0);
  OZTransitiveBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E46A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::OZTransitiveBehavior_Factory(OZTransitiveBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD20;
  v4 = xmmword_1B355DD60;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65908B0;
  *((_QWORD *)this + 18) = &unk_1E6590990;
}

void sub_1B2E46AFC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZTransitiveBehavior *OZTransitiveBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZTransitiveBehavior *v6;

  v6 = (OZTransitiveBehavior *)operator new();
  OZTransitiveBehavior::OZTransitiveBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2E46B6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FECF0589);
  _Unwind_Resume(a1);
}

OZTransitiveBehavior *OZTransitiveBehavior_Factory::createCopy(OZTransitiveBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZTransitiveBehavior *v5;
  OZTransitiveBehavior *v6;

  v5 = (OZTransitiveBehavior *)operator new();
  OZTransitiveBehavior::OZTransitiveBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E46C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FECF0589);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Transitive Behavior", "com.apple.ozone.framework");
}

PCString *OZTransitiveBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Transitive Behavior");
}

OZTransitiveBehavior *OZTransitiveBehavior_Factory::createBehaviorCopy(OZTransitiveBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZTransitiveBehavior *v5;
  OZTransitiveBehavior *v6;

  v5 = (OZTransitiveBehavior *)operator new();
  OZTransitiveBehavior::OZTransitiveBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E46CC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FECF0589);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Transitive Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelBehavior_Factory *v0;

  v0 = (OZChannelBehavior_Factory *)operator new();
  OZChannelBehavior_Factory::OZChannelBehavior_Factory(v0);
  OZChannelBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E46D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::OZChannelBehavior_Factory(OZChannelBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355CFF0;
  v4 = xmmword_1B3054BE0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054BC0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E65909E8;
  *((_QWORD *)this + 18) = &unk_1E6590AC8;
}

void sub_1B2E46DF8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelBehavior *OZChannelBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelBehavior *v6;

  v6 = (OZChannelBehavior *)operator new();
  OZChannelBehavior::OZChannelBehavior(v6, this, a2, a3);
  (*(void (**)(OZChannelBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E46E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C401116CFA0);
  _Unwind_Resume(a1);
}

OZChannelBehavior *OZChannelBehavior_Factory::createCopy(OZChannelBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZChannelBehavior *v5;
  const OZChannelBehavior *v6;

  v5 = (OZChannelBehavior *)operator new();
  OZChannelBehavior::OZChannelBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E46F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C401116CFA0);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Channel Behavior", "com.apple.ozone.framework");
}

PCString *OZChannelBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Channel Behavior");
}

void OZChannelBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Parameter Behavior Category", "com.apple.ozone.framework");
}

PCString *OZChannelBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Parameter");
}

PCString *OZChannelBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-ParameterBehavior");
}

PCString *OZChannelBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-ParameterBehavior");
}

uint64_t OZChannelBehavior_Factory::getIconIDInternal(OZChannelBehavior_Factory *this)
{
  return 11;
}

OZChannelBehavior *OZChannelBehavior_Factory::createBehaviorCopy(OZChannelBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZChannelBehavior *v5;
  const OZChannelBehavior *v6;

  v5 = (OZChannelBehavior *)operator new();
  OZChannelBehavior::OZChannelBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47020(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C401116CFA0);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Channel Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZSingleChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZSingleChannelBehavior_Factory *v0;

  v0 = (OZSingleChannelBehavior_Factory *)operator new();
  OZSingleChannelBehavior_Factory::OZSingleChannelBehavior_Factory(v0);
  OZSingleChannelBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E470A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::OZSingleChannelBehavior_Factory(OZSingleChannelBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B355D000;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054BC0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590B20;
  *((_QWORD *)this + 18) = &unk_1E6590C00;
}

void sub_1B2E47154(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZSingleChannelBehavior *OZSingleChannelBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZSingleChannelBehavior *v6;

  v6 = (OZSingleChannelBehavior *)operator new();
  OZSingleChannelBehavior::OZSingleChannelBehavior(v6, this, a2, a3);
  (*(void (**)(OZSingleChannelBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E471D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

OZSingleChannelBehavior *OZSingleChannelBehavior_Factory::createCopy(OZSingleChannelBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZSingleChannelBehavior *v5;
  const OZSingleChannelBehavior *v6;

  v5 = (OZSingleChannelBehavior *)operator new();
  OZSingleChannelBehavior::OZSingleChannelBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E4726C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Single Channel Behavior", "com.apple.ozone.framework");
}

PCString *OZSingleChannelBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Single Channel Behavior");
}

PCString *OZSingleChannelBehavior_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_ParameterBehavior_Icon");
}

OZSingleChannelBehavior *OZSingleChannelBehavior_Factory::createBehaviorCopy(OZSingleChannelBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZSingleChannelBehavior *v5;
  const OZSingleChannelBehavior *v6;

  v5 = (OZSingleChannelBehavior *)operator new();
  OZSingleChannelBehavior::OZSingleChannelBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E4733C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Single Channel Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZMotionToForcesBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionToForcesBehavior_Factory *v0;

  v0 = (OZMotionToForcesBehavior_Factory *)operator new();
  OZMotionToForcesBehavior_Factory::OZMotionToForcesBehavior_Factory(v0);
  OZMotionToForcesBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E473C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::OZMotionToForcesBehavior_Factory(OZMotionToForcesBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD20;
  v4 = xmmword_1B355CD10;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590C58;
  *((_QWORD *)this + 18) = &unk_1E6590D38;
}

void sub_1B2E47470(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZMotionToForcesBehavior *OZMotionToForcesBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZMotionToForcesBehavior *v6;

  v6 = (OZMotionToForcesBehavior *)operator new();
  OZMotionToForcesBehavior::OZMotionToForcesBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2E474E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4081481180);
  _Unwind_Resume(a1);
}

OZMotionToForcesBehavior *OZMotionToForcesBehavior_Factory::createCopy(OZMotionToForcesBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZMotionToForcesBehavior *v5;
  OZMotionToForcesBehavior *v6;

  v5 = (OZMotionToForcesBehavior *)operator new();
  OZMotionToForcesBehavior::OZMotionToForcesBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47578(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4081481180);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Motion To Forces Behavior", "com.apple.ozone.framework");
}

PCString *OZMotionToForcesBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Motion To Forces Behavior");
}

OZMotionToForcesBehavior *OZMotionToForcesBehavior_Factory::createBehaviorCopy(OZMotionToForcesBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZMotionToForcesBehavior *v5;
  OZMotionToForcesBehavior *v6;

  v5 = (OZMotionToForcesBehavior *)operator new();
  OZMotionToForcesBehavior::OZMotionToForcesBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C4081481180);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Motion To Forces Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZSimSystemMoToFoBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZSimSystemMoToFoBehavior_Factory *v0;

  v0 = (OZSimSystemMoToFoBehavior_Factory *)operator new();
  OZSimSystemMoToFoBehavior_Factory::OZSimSystemMoToFoBehavior_Factory(v0);
  OZSimSystemMoToFoBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E476BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::OZSimSystemMoToFoBehavior_Factory(OZSimSystemMoToFoBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD20;
  v4 = xmmword_1B355DD70;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590D90;
  *((_QWORD *)this + 18) = &unk_1E6590E70;
}

void sub_1B2E4776C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZSimSystemMoToFoBehavior *OZSimSystemMoToFoBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZSimSystemMoToFoBehavior *v6;

  v6 = (OZSimSystemMoToFoBehavior *)operator new();
  OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2E477DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C18A6D9DLL);
  _Unwind_Resume(a1);
}

OZSimSystemMoToFoBehavior *OZSimSystemMoToFoBehavior_Factory::createCopy(OZSimSystemMoToFoBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZSimSystemMoToFoBehavior *v5;
  OZSimSystemMoToFoBehavior *v6;

  v5 = (OZSimSystemMoToFoBehavior *)operator new();
  OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47874(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C18A6D9DLL);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Sim System Motion To Forces Behavior", "com.apple.ozone.framework");
}

PCString *OZSimSystemMoToFoBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Sim System Motion To Forces Behavior");
}

OZSimSystemMoToFoBehavior *OZSimSystemMoToFoBehavior_Factory::createBehaviorCopy(OZSimSystemMoToFoBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZSimSystemMoToFoBehavior *v5;
  OZSimSystemMoToFoBehavior *v6;

  v5 = (OZSimSystemMoToFoBehavior *)operator new();
  OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47934(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C18A6D9DLL);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Sim System Motion To Forces Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCollisionBehavior_Factory *v0;

  v0 = (OZCollisionBehavior_Factory *)operator new();
  OZCollisionBehavior_Factory::OZCollisionBehavior_Factory(v0);
  OZCollisionBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E479B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::OZCollisionBehavior_Factory(OZCollisionBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DD50;
  v4 = xmmword_1B355DD80;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6590EC8;
  *((_QWORD *)this + 18) = &unk_1E6590FA8;
}

void sub_1B2E47A68(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZCollisionBehavior *OZCollisionBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZCollisionBehavior *v6;

  v6 = (OZCollisionBehavior *)operator new();
  OZCollisionBehavior::OZCollisionBehavior(v6, this, a2, a3);
  return v6;
}

void sub_1B2E47AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

OZCollisionBehavior *OZCollisionBehavior_Factory::createCopy(OZCollisionBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZCollisionBehavior *v5;
  OZCollisionBehavior *v6;

  v5 = (OZCollisionBehavior *)operator new();
  OZCollisionBehavior::OZCollisionBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Collision Behavior", "com.apple.ozone.framework");
}

PCString *OZCollisionBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Collision Behavior");
}

OZCollisionBehavior *OZCollisionBehavior_Factory::createBehaviorCopy(OZCollisionBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZCollisionBehavior *v5;
  OZCollisionBehavior *v6;

  v5 = (OZCollisionBehavior *)operator new();
  OZCollisionBehavior::OZCollisionBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Collision Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZRetimingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRetimingBehavior_Factory *v0;

  v0 = (OZRetimingBehavior_Factory *)operator new();
  OZRetimingBehavior_Factory::OZRetimingBehavior_Factory(v0);
  OZRetimingBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E47CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRetimingBehavior_Factory::OZRetimingBehavior_Factory(OZRetimingBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B355DB20;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054BC0;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6591000;
  *((_QWORD *)this + 18) = &unk_1E65910E0;
}

void sub_1B2E47D64(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRetimingBehavior *OZRetimingBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRetimingBehavior *v6;

  v6 = (OZRetimingBehavior *)operator new();
  OZRetimingBehavior::OZRetimingBehavior(v6, this, a2, a3);
  (*(void (**)(OZRetimingBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E47DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40AC65C9CALL);
  _Unwind_Resume(a1);
}

OZRetimingBehavior *OZRetimingBehavior_Factory::createCopy(OZRetimingBehavior_Factory *this, OZFactoryBase *a2, char a3)
{
  OZRetimingBehavior *v5;
  const OZRetimingBehavior *v6;

  v5 = (OZRetimingBehavior *)operator new();
  OZRetimingBehavior::OZRetimingBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40AC65C9CALL);
  _Unwind_Resume(a1);
}

PCString *OZRetimingBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "NULL Desc");
}

void OZRetimingBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Retiming Behavior Category", "com.apple.ozone.framework");
}

PCString *OZRetimingBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Retiming");
}

OZRetimingBehavior *OZRetimingBehavior_Factory::createBehaviorCopy(OZRetimingBehavior_Factory *this, OZBehavior *a2, char a3)
{
  OZRetimingBehavior *v5;
  const OZRetimingBehavior *v6;

  v5 = (OZRetimingBehavior *)operator new();
  OZRetimingBehavior::OZRetimingBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E47F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40AC65C9CALL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZRig_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRig_Factory *v0;

  v0 = (OZRig_Factory *)operator new();
  OZRig_Factory::OZRig_Factory(v0);
  OZRig_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E47FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRig_Factory::OZRig_Factory(OZRig_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B355CF30;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591138;
  *((_QWORD *)this + 16) = &unk_1E6591208;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E48058(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRig_Factory::~OZRig_Factory(OZRig_Factory *this)
{
  OZRig_Factory::~OZRig_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6591138;
  *((_QWORD *)this + 16) = &unk_1E6591208;
  v2 = (OZRig_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRig_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZRig *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZRig *)operator new();
    OZRig::OZRig(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZRig *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E481D8(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4029BB6CCDLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZRig *OZRig_Factory::createCopy(OZRig_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZRig *v5;
  const OZRig *v6;
  void *v7;

  v5 = (OZRig *)operator new();
  OZRig::OZRig(v5, v6, a3);
  (*(void (**)(OZRig *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E482C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4029BB6CCDLL);
  _Unwind_Resume(a1);
}

void OZRig_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rig Short Desc", "com.apple.ozone.framework");
}

PCString *OZRig_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rig Short Desc");
}

PCString *OZRig_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Rig");
}

PCString *OZRig_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Rig");
}

uint64_t OZRig_Factory::getIconIDInternal(OZRig_Factory *this)
{
  return 31;
}

OZRig *OZRig_Factory::createNodeCopy(OZRig_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZRig *v5;
  const OZRig *v6;

  v5 = (OZRig *)operator new();
  OZRig::OZRig(v5, v6, a3);
  return v5;
}

void sub_1B2E483A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4029BB6CCDLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRig_Factory::~OZRig_Factory(OZRig_Factory *this)
{
  OZRig_Factory::~OZRig_Factory((OZRig_Factory *)((char *)this - 128));
}

{
  OZRig_Factory::~OZRig_Factory((OZRig_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZRigWidget_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidget_Factory *v0;

  v0 = (OZRigWidget_Factory *)operator new();
  OZRigWidget_Factory::OZRigWidget_Factory(v0);
  OZRigWidget_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E484A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRigWidget_Factory::OZRigWidget_Factory(OZRigWidget_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B3053B20;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591260;
  *((_QWORD *)this + 16) = &unk_1E6591330;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E48540(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRigWidget_Factory::~OZRigWidget_Factory(OZRigWidget_Factory *this)
{
  OZRigWidget_Factory::~OZRigWidget_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6591260;
  *((_QWORD *)this + 16) = &unk_1E6591330;
  v2 = (OZRigWidget_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRigWidget_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZRigWidget *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZRigWidget *)operator new();
    OZRigWidget::OZRigWidget(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZRigWidget *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E486C0(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40FCF65154, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZRigWidget *OZRigWidget_Factory::createCopy(OZRigWidget_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZRigWidget *v5;
  const OZRigWidget *v6;
  void *v7;

  v5 = (OZRigWidget *)operator new();
  OZRigWidget::OZRigWidget(v5, v6, a3);
  (*(void (**)(OZRigWidget *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E487A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

void OZRigWidget_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rig Widget Short Desc", "com.apple.ozone.framework");
}

PCString *OZRigWidget_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rig Widget Short Desc");
}

PCString *OZRigWidget_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-RigSlider");
}

PCString *OZRigWidget_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-RigSlider");
}

uint64_t OZRigWidget_Factory::getIconIDInternal(OZRigWidget_Factory *this)
{
  return 32;
}

OZRigWidget *OZRigWidget_Factory::createNodeCopy(OZRigWidget_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZRigWidget *v5;
  const OZRigWidget *v6;

  v5 = (OZRigWidget *)operator new();
  OZRigWidget::OZRigWidget(v5, v6, a3);
  return v5;
}

void sub_1B2E48890(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRigWidget_Factory::~OZRigWidget_Factory(OZRigWidget_Factory *this)
{
  OZRigWidget_Factory::~OZRigWidget_Factory((OZRigWidget_Factory *)((char *)this - 128));
}

{
  OZRigWidget_Factory::~OZRigWidget_Factory((OZRigWidget_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZRigWidgetAspectRatio_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigWidgetAspectRatio_Factory *v0;

  v0 = (OZRigWidgetAspectRatio_Factory *)operator new();
  OZRigWidgetAspectRatio_Factory::OZRigWidgetAspectRatio_Factory(v0);
  OZRigWidgetAspectRatio_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E48988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio_Factory::OZRigWidgetAspectRatio_Factory(OZRigWidgetAspectRatio_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053B20;
  v4 = xmmword_1B355DD90;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591388;
  *((_QWORD *)this + 16) = &unk_1E6591458;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E48A28(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory(OZRigWidgetAspectRatio_Factory *this)
{
  OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6591388;
  *((_QWORD *)this + 16) = &unk_1E6591458;
  v2 = (OZRigWidgetAspectRatio_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRigWidgetAspectRatio_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZRigWidgetAspectRatio *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZRigWidgetAspectRatio *)operator new();
    OZRigWidgetAspectRatio::OZRigWidgetAspectRatio(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZRigWidgetAspectRatio *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E48BA8(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40FCF65154, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZRigWidgetAspectRatio *OZRigWidgetAspectRatio_Factory::createCopy(OZRigWidgetAspectRatio_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZRigWidgetAspectRatio *v5;
  const OZRigWidgetAspectRatio *v6;
  void *v7;

  v5 = (OZRigWidgetAspectRatio *)operator new();
  OZRigWidgetAspectRatio::OZRigWidgetAspectRatio(v5, v6, a3);
  (*(void (**)(OZRigWidgetAspectRatio *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E48C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

OZRigWidgetAspectRatio *OZRigWidgetAspectRatio_Factory::createNodeCopy(OZRigWidgetAspectRatio_Factory *this, OZSceneNode *a2, char a3)
{
  OZRigWidgetAspectRatio *v5;
  const OZRigWidgetAspectRatio *v6;

  v5 = (OZRigWidgetAspectRatio *)operator new();
  OZRigWidgetAspectRatio::OZRigWidgetAspectRatio(v5, v6, a3);
  return v5;
}

void sub_1B2E48D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory(OZRigWidgetAspectRatio_Factory *this)
{
  OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory((OZRigWidgetAspectRatio_Factory *)((char *)this - 128));
}

{
  OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory((OZRigWidgetAspectRatio_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZRigBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZRigBehavior_Factory *v0;

  v0 = (OZRigBehavior_Factory *)operator new();
  OZRigBehavior_Factory::OZRigBehavior_Factory(v0);
  OZRigBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E48E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::OZRigBehavior_Factory(OZRigBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B3053B30;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E65914B0;
  *((_QWORD *)this + 18) = &unk_1E6591590;
}

void sub_1B2E48EC4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZRigBehavior *OZRigBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZRigBehavior *v6;

  v6 = (OZRigBehavior *)operator new();
  OZRigBehavior::OZRigBehavior(v6, this, a2, a3);
  (*(void (**)(OZRigBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E48F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E5612C0BLL);
  _Unwind_Resume(a1);
}

OZRigBehavior *OZRigBehavior_Factory::createCopy(OZRigBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZRigBehavior *v5;
  const OZRigBehavior *v6;

  v5 = (OZRigBehavior *)operator new();
  OZRigBehavior::OZRigBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E48FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E5612C0BLL);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rig Behavior Name", "com.apple.ozone.framework");
}

PCString *OZRigBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rig Behavior Name");
}

OZRigBehavior *OZRigBehavior_Factory::createBehaviorCopy(OZRigBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZRigBehavior *v5;
  const OZRigBehavior *v6;

  v5 = (OZRigBehavior *)operator new();
  OZRigBehavior::OZRigBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E4909C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40E5612C0BLL);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Rig Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZProjectNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZProjectNode_Factory *v0;

  v0 = (OZProjectNode_Factory *)operator new();
  OZProjectNode_Factory::OZProjectNode_Factory(v0);
  OZProjectNode_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E49120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZProjectNode_Factory::OZProjectNode_Factory(OZProjectNode_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B355CF20;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65915E8;
  *((_QWORD *)this + 16) = &unk_1E65916B8;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E491C0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZProjectNode_Factory::~OZProjectNode_Factory(OZProjectNode_Factory *this)
{
  OZProjectNode_Factory::~OZProjectNode_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65915E8;
  *((_QWORD *)this + 16) = &unk_1E65916B8;
  v2 = (OZProjectNode_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZProjectNode_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZProjectNode *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZProjectNode *)operator new();
    OZProjectNode::OZProjectNode(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZProjectNode *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E49340(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40692255DDLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZProjectNode *OZProjectNode_Factory::createCopy(OZProjectNode_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZProjectNode *v5;
  OZProjectNode *v6;
  void *v7;

  v5 = (OZProjectNode *)operator new();
  OZProjectNode::OZProjectNode(v5, v6, a3);
  (*(void (**)(OZProjectNode *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E49428(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40692255DDLL);
  _Unwind_Resume(a1);
}

void OZProjectNode_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Project Node Name", "com.apple.ozone.framework");
}

PCString *OZProjectNode_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Project Node Name");
}

PCString *OZProjectNode_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_MotionDocument-Small");
}

OZProjectNode *OZProjectNode_Factory::createNodeCopy(OZProjectNode_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZProjectNode *v5;
  OZProjectNode *v6;

  v5 = (OZProjectNode *)operator new();
  OZProjectNode::OZProjectNode(v5, v6, a3);
  return v5;
}

void sub_1B2E494F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40692255DDLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZProjectNode_Factory::~OZProjectNode_Factory(OZProjectNode_Factory *this)
{
  OZProjectNode_Factory::~OZProjectNode_Factory((OZProjectNode_Factory *)((char *)this - 128));
}

{
  OZProjectNode_Factory::~OZProjectNode_Factory((OZProjectNode_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZLinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZLinkBehavior_Factory *v0;

  v0 = (OZLinkBehavior_Factory *)operator new();
  OZLinkBehavior_Factory::OZLinkBehavior_Factory(v0);
  OZLinkBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E495F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::OZLinkBehavior_Factory(OZLinkBehavior_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355D000;
  v4 = xmmword_1B355DDA0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  v2[16] = 0;
  v2[17] = 0;
  *v2 = &unk_1E64FD348;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 18), 0);
  *(_QWORD *)this = &unk_1E6591710;
  *((_QWORD *)this + 18) = &unk_1E65917F0;
}

void sub_1B2E49694(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZLinkBehavior *OZLinkBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZLinkBehavior *v6;

  v6 = (OZLinkBehavior *)operator new();
  OZLinkBehavior::OZLinkBehavior(v6, this, a2, a3);
  (*(void (**)(OZLinkBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E49714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C400454B7C1);
  _Unwind_Resume(a1);
}

OZLinkBehavior *OZLinkBehavior_Factory::createCopy(OZLinkBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZLinkBehavior *v5;
  const OZLinkBehavior *v6;

  v5 = (OZLinkBehavior *)operator new();
  OZLinkBehavior::OZLinkBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E497AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C400454B7C1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Link Behavior", "com.apple.ozone.framework");
}

PCString *OZLinkBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Link Behavior");
}

OZLinkBehavior *OZLinkBehavior_Factory::createBehaviorCopy(OZLinkBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZLinkBehavior *v5;
  const OZLinkBehavior *v6;

  v5 = (OZLinkBehavior *)operator new();
  OZLinkBehavior::OZLinkBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E4986C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C400454B7C1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Link Behavior Desc", "com.apple.ozone.framework");
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZMotionPathBehavior_Factory *v0;

  v0 = (OZMotionPathBehavior_Factory *)operator new();
  OZMotionPathBehavior_Factory::OZMotionPathBehavior_Factory(v0);
  OZMotionPathBehavior_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E498F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::OZMotionPathBehavior_Factory(OZMotionPathBehavior_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BE0;
  v4 = xmmword_1B355DDB0;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *(_QWORD *)v2 = &unk_1E64FCB00;
  *(_OWORD *)(v2 + 128) = xmmword_1B3054C60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(_QWORD *)this = &unk_1E6591848;
  *((_QWORD *)this + 18) = &unk_1E6591928;
}

void sub_1B2E499A0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior *OZMotionPathBehavior_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZMotionPathBehavior *v6;

  v6 = (OZMotionPathBehavior *)operator new();
  OZMotionPathBehavior::OZMotionPathBehavior(v6, this, a2, a3);
  (*(void (**)(OZMotionPathBehavior *))(*(_QWORD *)v6 + 88))(v6);
  return v6;
}

void sub_1B2E49A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4077FEC95DLL);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior *OZMotionPathBehavior_Factory::createCopy(OZMotionPathBehavior_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZMotionPathBehavior *v5;
  const OZMotionPathBehavior *v6;

  v5 = (OZMotionPathBehavior *)operator new();
  OZMotionPathBehavior::OZMotionPathBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E49AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4077FEC95DLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Motion Path Behavior", "com.apple.ozone.framework");
}

PCString *OZMotionPathBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Motion Path Behavior");
}

void OZMotionPathBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Basic Motion Behavior Category", "com.apple.ozone.framework");
}

PCString *OZMotionPathBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Basic Motion");
}

OZMotionPathBehavior *OZMotionPathBehavior_Factory::createBehaviorCopy(OZMotionPathBehavior_Factory *this, OZBehavior *a2, unsigned int a3)
{
  OZMotionPathBehavior *v5;
  const OZMotionPathBehavior *v6;

  v5 = (OZMotionPathBehavior *)operator new();
  OZMotionPathBehavior::OZMotionPathBehavior(v5, v6, a3);
  return v5;
}

void sub_1B2E49BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4077FEC95DLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::longDescription(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Motion Path Behavior Desc", "com.apple.ozone.framework");
}

void OZFxGenerator_Factory::OZFxGenerator_Factory(OZFxGenerator_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DDD0;
  v4 = xmmword_1B355DDC0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591980;
  *((_QWORD *)this + 16) = &unk_1E6591A60;
}

void sub_1B2E49C58(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZFxGenerator *OZFxGenerator_Factory::createCopy(OZFxGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZFxGenerator *v5;
  const OZFxGenerator *v6;
  void *v7;

  v5 = (OZFxGenerator *)operator new();
  OZFxGenerator::OZFxGenerator(v5, v6, a3);
  (*(void (**)(OZFxGenerator *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E49D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void OZFxGenerator_Factory::description(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("Generator Short Desc"));
}

PCString *OZFxGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Generator Short Desc");
}

OZFxGenerator *OZFxGenerator_Factory::createNodeCopy(OZFxGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZFxGenerator *v5;
  const OZFxGenerator *v6;

  v5 = (OZFxGenerator *)operator new();
  OZFxGenerator::OZFxGenerator(v5, v6, a3);
  return v5;
}

void sub_1B2E49DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

OZFxGenerator *OZFxGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3, int a4, BOOL a5)
{
  OZFxGenerator *v10;

  v10 = (OZFxGenerator *)operator new();
  OZFxGenerator::OZFxGenerator(v10, this, a2, a3, a4, a5);
  return v10;
}

void sub_1B2E49E74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZGradientGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZGradientGenerator_Factory *v0;

  v0 = (OZGradientGenerator_Factory *)operator new();
  OZGradientGenerator_Factory::OZGradientGenerator_Factory(v0);
  OZGradientGenerator_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E49EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZGradientGenerator_Factory::OZGradientGenerator_Factory(OZGradientGenerator_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DDC0;
  v4 = xmmword_1B355DDE0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591AB8;
  *((_QWORD *)this + 16) = &unk_1E6591B88;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E49F80(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGradientGenerator_Factory::~OZGradientGenerator_Factory(OZGradientGenerator_Factory *this)
{
  OZGradientGenerator_Factory::~OZGradientGenerator_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6591AB8;
  *((_QWORD *)this + 16) = &unk_1E6591B88;
  v2 = (OZGradientGenerator_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZGradientGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZGradientGenerator *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZGradientGenerator *)operator new();
    OZGradientGenerator::OZGradientGenerator(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZGradientGenerator *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4A100(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F3C40A32CEB6FLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZFxGenerator *OZGradientGenerator_Factory::createCopy(OZGradientGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZFxGenerator *v5;
  const OZFxGenerator *v6;
  void *v7;

  v5 = (OZFxGenerator *)operator new();
  OZGradientGenerator::OZGradientGenerator(v5, v6, a3);
  (*(void (**)(OZFxGenerator *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4A1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void OZGradientGenerator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Generator Short Desc", "com.apple.ozone.framework");
}

OZFxGenerator *OZGradientGenerator_Factory::createNodeCopy(OZGradientGenerator_Factory *this, OZSceneNode *a2, uint64_t a3)
{
  OZFxGenerator *v5;
  const OZFxGenerator *v6;

  v5 = (OZFxGenerator *)operator new();
  OZGradientGenerator::OZGradientGenerator(v5, v6, a3);
  return v5;
}

void sub_1B2E4A298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZGradientGenerator_Factory::~OZGradientGenerator_Factory(OZGradientGenerator_Factory *this)
{
  OZGradientGenerator_Factory::~OZGradientGenerator_Factory((OZGradientGenerator_Factory *)((char *)this - 128));
}

{
  OZGradientGenerator_Factory::~OZGradientGenerator_Factory((OZGradientGenerator_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZCloneGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZCloneGenerator_Factory *v0;

  v0 = (OZCloneGenerator_Factory *)operator new();
  OZCloneGenerator_Factory::OZCloneGenerator_Factory(v0);
  OZCloneGenerator_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4A390(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZCloneGenerator_Factory::OZCloneGenerator_Factory(OZCloneGenerator_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BC0;
  v4 = xmmword_1B355DDF0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591BE0;
  *((_QWORD *)this + 16) = &unk_1E6591CB0;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4A430(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZCloneGenerator_Factory::~OZCloneGenerator_Factory(OZCloneGenerator_Factory *this)
{
  OZCloneGenerator_Factory::~OZCloneGenerator_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6591BE0;
  *((_QWORD *)this + 16) = &unk_1E6591CB0;
  v2 = (OZCloneGenerator_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZCloneGenerator_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZCloneGenerator *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZCloneGenerator *)operator new();
    OZCloneGenerator::OZCloneGenerator(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZCloneGenerator *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4A5B0(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40EA6D2BFALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZCloneGenerator *OZCloneGenerator_Factory::createCopy(OZCloneGenerator_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZCloneGenerator *v5;
  const OZCloneGenerator *v6;
  void *v7;

  v5 = (OZCloneGenerator *)operator new();
  OZCloneGenerator::OZCloneGenerator(v5, v6, a3);
  (*(void (**)(OZCloneGenerator *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4A698(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EA6D2BFALL);
  _Unwind_Resume(a1);
}

void OZCloneGenerator_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "Clone Short Desc", "com.apple.ozone.framework");
}

PCString *OZCloneGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Clone Short Desc");
}

PCString *OZCloneGenerator_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Generator");
}

PCString *OZCloneGenerator_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Generator");
}

PCString *OZCloneGenerator_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Generator_Icon");
}

OZCloneGenerator *OZCloneGenerator_Factory::createNodeCopy(OZCloneGenerator_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZCloneGenerator *v5;
  const OZCloneGenerator *v6;

  v5 = (OZCloneGenerator *)operator new();
  OZCloneGenerator::OZCloneGenerator(v5, v6, a3);
  return v5;
}

void sub_1B2E4A788(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EA6D2BFALL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZCloneGenerator_Factory::~OZCloneGenerator_Factory(OZCloneGenerator_Factory *this)
{
  OZCloneGenerator_Factory::~OZCloneGenerator_Factory((OZCloneGenerator_Factory *)((char *)this - 128));
}

{
  OZCloneGenerator_Factory::~OZCloneGenerator_Factory((OZCloneGenerator_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZEffect_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZEffect_Factory *v0;

  v0 = (OZEffect_Factory *)operator new();
  OZEffect_Factory::OZEffect_Factory(v0);
  OZEffect_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4A880(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZEffect_Factory::OZEffect_Factory(OZEffect_Factory *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v4 = xmmword_1B355CFE0;
  v3 = 0uLL;
  v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(_QWORD *)this = &unk_1E6591D08;
  *((_QWORD *)this + 16) = &unk_1E6591DC0;
}

void sub_1B2E4A910(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *OZEffect_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Filter");
}

PCString *OZEffect_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Filter");
}

uint64_t OZEffect_Factory::getIconIDInternal(OZEffect_Factory *this)
{
  return 13;
}

PCString *OZEffect_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Filter_Icon");
}

void OZFxFilter_Factory::OZFxFilter_Factory(OZFxFilter_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355CFE0;
  v4 = xmmword_1B355DE00;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E6591F18;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591E18;
  *((_QWORD *)this + 16) = &unk_1E6591EF8;
}

void sub_1B2E4A9D8(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter_Factory::createCopy(OZFxFilter_Factory *this, OZFactoryBase *a2, unsigned int a3)
{
  OZFxFilter *v5;
  const OZFxFilter *v6;

  v5 = (OZFxFilter *)operator new();
  OZFxFilter::OZFxFilter(v5, v6, a3);
  return (uint64_t)v5 + 32;
}

void sub_1B2E4AA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

void OZFxFilter_Factory::description(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("ProPlug Filter Desc"));
}

PCString *OZFxFilter_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "ProPlug Filter Desc");
}

OZFxFilter *OZFxFilter_Factory::createEffectCopy(OZFxFilter_Factory *this, OZEffect *a2, unsigned int a3)
{
  OZFxFilter *v5;
  const OZFxFilter *v6;

  v5 = (OZFxFilter *)operator new();
  OZFxFilter::OZFxFilter(v5, v6, a3);
  return v5;
}

void sub_1B2E4AB28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

uint64_t OZFxFilter_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3, int a4, BOOL a5)
{
  OZFxFilter *v10;

  v10 = (OZFxFilter *)operator new();
  OZFxFilter::OZFxFilter(v10, this, a2, a3, a4, a5);
  (*(void (**)(OZFxFilter *))(*(_QWORD *)v10 + 200))(v10);
  return (uint64_t)v10 + 32;
}

void sub_1B2E4ABD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

OZFxFilter *OZFxFilter_Factory::createEffect(OZFactory *this, const PCString *a2, unsigned int a3, int a4, BOOL a5)
{
  OZFxFilter *v10;

  v10 = (OZFxFilter *)operator new();
  OZFxFilter::OZFxFilter(v10, this, a2, a3, a4, a5);
  (*(void (**)(OZFxFilter *))(*(_QWORD *)v10 + 200))(v10);
  return v10;
}

void sub_1B2E4AC7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanElementOrFootageRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChanElementOrFootageRef_Factory *v0;

  v0 = (OZChanElementOrFootageRef_Factory *)operator new();
  OZChanElementOrFootageRef_Factory::OZChanElementOrFootageRef_Factory(v0);
  OZChanElementOrFootageRef_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4ACE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanElementOrFootageRef_Factory::OZChanElementOrFootageRef_Factory(OZChanElementOrFootageRef_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DE20;
  v4 = xmmword_1B355DE10;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6591FE8;
  *((_QWORD *)this + 16) = &unk_1E65920B8;
}

void sub_1B2E4AD88(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChanElementOrFootageRef *OZChanElementOrFootageRef_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChanElementOrFootageRef *v6;

  v6 = (OZChanElementOrFootageRef *)operator new();
  OZChanElementOrFootageRef::OZChanElementOrFootageRef(v6, this, a2, a3);
  return v6;
}

void sub_1B2E4ADF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

OZChanElementOrFootageRef *OZChanElementOrFootageRef_Factory::createCopy(OZChanElementOrFootageRef_Factory *this, OZFactoryBase *a2)
{
  OZChanElementOrFootageRef *v3;
  const OZChanSceneNodeRef *v4;

  v3 = (OZChanElementOrFootageRef *)operator new();
  OZChanElementOrFootageRef::OZChanElementOrFootageRef(v3, v4, 0);
  return v3;
}

void sub_1B2E4AE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

OZChanElementOrFootageRef *OZChanElementOrFootageRef_Factory::createChannelCopy(OZChanElementOrFootageRef_Factory *this, OZChannelBase *a2)
{
  OZChanElementOrFootageRef *v3;
  const OZChanSceneNodeRef *v4;

  v3 = (OZChanElementOrFootageRef *)operator new();
  OZChanElementOrFootageRef::OZChanElementOrFootageRef(v3, v4, 0);
  return v3;
}

void sub_1B2E4AF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanRotoshapeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChanRotoshapeRef_Factory *v0;

  v0 = (OZChanRotoshapeRef_Factory *)operator new();
  OZChanRotoshapeRef_Factory::OZChanRotoshapeRef_Factory(v0);
  OZChanRotoshapeRef_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4AF7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRef_Factory::OZChanRotoshapeRef_Factory(OZChanRotoshapeRef_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3555760;
  v4 = xmmword_1B355DE30;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6592110;
  *((_QWORD *)this + 16) = &unk_1E65921E0;
}

void sub_1B2E4B01C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChanRotoshapeRef *OZChanRotoshapeRef_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChanRotoshapeRef *v6;

  v6 = (OZChanRotoshapeRef *)operator new();
  OZChanRotoshapeRef::OZChanRotoshapeRef(v6, this, a2, a3);
  return v6;
}

void sub_1B2E4B08C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

OZChanRotoshapeRef *OZChanRotoshapeRef_Factory::createCopy(OZChanRotoshapeRef_Factory *this, OZFactoryBase *a2)
{
  OZChanRotoshapeRef *v3;
  const OZChanSceneNodeRef *v4;

  v3 = (OZChanRotoshapeRef *)operator new();
  OZChanRotoshapeRef::OZChanRotoshapeRef(v3, v4, 0);
  return v3;
}

void sub_1B2E4B118(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

OZChanRotoshapeRef *OZChanRotoshapeRef_Factory::createChannelCopy(OZChanRotoshapeRef_Factory *this, OZChannelBase *a2)
{
  OZChanRotoshapeRef *v3;
  const OZChanSceneNodeRef *v4;

  v3 = (OZChanRotoshapeRef *)operator new();
  OZChanRotoshapeRef::OZChanRotoshapeRef(v3, v4, 0);
  return v3;
}

void sub_1B2E4B1A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelImageWithOptions_Factory *v0;

  v0 = (OZChannelImageWithOptions_Factory *)operator new();
  OZChannelImageWithOptions_Factory::OZChannelImageWithOptions_Factory(v0);
  OZChannelImageWithOptions_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4B210(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions_Factory::OZChannelImageWithOptions_Factory(OZChannelImageWithOptions_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B355DE40;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6592238;
  *((_QWORD *)this + 16) = &unk_1E6592308;
}

void sub_1B2E4B2B0(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

OZChannelImageWithOptions *OZChannelImageWithOptions_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  OZChannelImageWithOptions *v6;

  v6 = (OZChannelImageWithOptions *)operator new();
  OZChannelImageWithOptions::OZChannelImageWithOptions(v6, this, a2, a3);
  return v6;
}

void sub_1B2E4B320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

OZChannelImageWithOptions *OZChannelImageWithOptions_Factory::createCopy(OZChannelImageWithOptions_Factory *this, OZFactoryBase *a2)
{
  OZChannelImageWithOptions *v3;
  const OZChannelImageWithOptions *v4;

  v3 = (OZChannelImageWithOptions *)operator new();
  OZChannelImageWithOptions::OZChannelImageWithOptions(v3, v4, 0);
  return v3;
}

void sub_1B2E4B3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

OZChannelImageWithOptions *OZChannelImageWithOptions_Factory::createChannelCopy(OZChannelImageWithOptions_Factory *this, OZChannelBase *a2)
{
  OZChannelImageWithOptions *v3;
  const OZChannelImageWithOptions *v4;

  v3 = (OZChannelImageWithOptions *)operator new();
  OZChannelImageWithOptions::OZChannelImageWithOptions(v3, v4, 0);
  return v3;
}

void sub_1B2E4B438(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZ3DEngineSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DEngineSceneElement_Factory *v0;

  v0 = (OZ3DEngineSceneElement_Factory *)operator new();
  OZ3DEngineSceneElement_Factory::OZ3DEngineSceneElement_Factory(v0);
  OZ3DEngineSceneElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4B4A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement_Factory::OZ3DEngineSceneElement_Factory(OZ3DEngineSceneElement_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3054BC0;
  v4 = xmmword_1B355DB30;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6592360;
  *((_QWORD *)this + 16) = &unk_1E6592430;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4B544(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory(OZ3DEngineSceneElement_Factory *this)
{
  OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6592360;
  *((_QWORD *)this + 16) = &unk_1E6592430;
  v2 = (OZ3DEngineSceneElement_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZ3DEngineSceneElement_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZ3DEngineSceneElement *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZ3DEngineSceneElement *)operator new();
    OZ3DEngineSceneElement::OZ3DEngineSceneElement(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZ3DEngineSceneElement *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4B6C4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C408C1AE853, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZ3DEngineSceneElement *OZ3DEngineSceneElement_Factory::createCopy(OZ3DEngineSceneElement_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZ3DEngineSceneElement *v5;
  const OZ3DEngineSceneElement *v6;
  void *v7;

  v5 = (OZ3DEngineSceneElement *)operator new();
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(v5, v6, a3);
  (*(void (**)(OZ3DEngineSceneElement *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4B7AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C1AE853);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "3D Scene Element Short Desc", "com.apple.ozone.framework");
}

PCString *OZ3DEngineSceneElement_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene Element Short Desc");
}

PCString *OZ3DEngineSceneElement_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-SplineShape");
}

PCString *OZ3DEngineSceneElement_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-3DObject");
}

PCString *OZ3DEngineSceneElement_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_3DObject_Icon");
}

OZ3DEngineSceneElement *OZ3DEngineSceneElement_Factory::createNodeCopy(OZ3DEngineSceneElement_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZ3DEngineSceneElement *v5;
  const OZ3DEngineSceneElement *v6;

  v5 = (OZ3DEngineSceneElement *)operator new();
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(v5, v6, a3);
  return v5;
}

void sub_1B2E4B89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C408C1AE853);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory(OZ3DEngineSceneElement_Factory *this)
{
  OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory((OZ3DEngineSceneElement_Factory *)((char *)this - 128));
}

{
  OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory((OZ3DEngineSceneElement_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZ3DEngineSceneFile_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DEngineSceneFile_Factory *v0;

  v0 = (OZ3DEngineSceneFile_Factory *)operator new();
  OZ3DEngineSceneFile_Factory::OZ3DEngineSceneFile_Factory(v0);
  OZ3DEngineSceneFile_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4B994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile_Factory::OZ3DEngineSceneFile_Factory(OZ3DEngineSceneFile_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DCA0;
  v4 = xmmword_1B355DE50;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6592488;
  *((_QWORD *)this + 16) = &unk_1E6592558;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4BA34(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory(OZ3DEngineSceneFile_Factory *this)
{
  OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6592488;
  *((_QWORD *)this + 16) = &unk_1E6592558;
  v2 = (OZ3DEngineSceneFile_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZ3DEngineSceneFile_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZ3DEngineSceneFile *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZ3DEngineSceneFile *)operator new();
    OZ3DEngineSceneFile::OZ3DEngineSceneFile(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZ3DEngineSceneFile *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4BBB4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C402CAECB46, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZ3DEngineSceneFile *OZ3DEngineSceneFile_Factory::createCopy(OZ3DEngineSceneFile_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZ3DEngineSceneFile *v5;
  OZ3DEngineSceneFile *v6;
  void *v7;

  v5 = (OZ3DEngineSceneFile *)operator new();
  OZ3DEngineSceneFile::OZ3DEngineSceneFile(v5, v6, a3);
  (*(void (**)(OZ3DEngineSceneFile *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4BC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C402CAECB46);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile_Factory::description(PCString *a1@<X8>)
{
  PCString::PCString(a1, "3D Scene File Short Desc", "com.apple.ozone.framework");
}

PCString *OZ3DEngineSceneFile_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene File Short Desc");
}

OZ3DEngineSceneFile *OZ3DEngineSceneFile_Factory::createNodeCopy(OZ3DEngineSceneFile_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZ3DEngineSceneFile *v5;
  OZ3DEngineSceneFile *v6;

  v5 = (OZ3DEngineSceneFile *)operator new();
  OZ3DEngineSceneFile::OZ3DEngineSceneFile(v5, v6, a3);
  return v5;
}

void sub_1B2E4BD5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C402CAECB46);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory(OZ3DEngineSceneFile_Factory *this)
{
  OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory((OZ3DEngineSceneFile_Factory *)((char *)this - 128));
}

{
  OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory((OZ3DEngineSceneFile_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZARFaceAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZARFaceAnchorElement_Factory *v0;

  v0 = (OZARFaceAnchorElement_Factory *)operator new();
  OZARFaceAnchorElement_Factory::OZARFaceAnchorElement_Factory(v0);
  OZARFaceAnchorElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4BE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZARFaceAnchorElement_Factory::OZARFaceAnchorElement_Factory(OZARFaceAnchorElement_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DB30;
  v4 = xmmword_1B355DE60;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65925B0;
  *((_QWORD *)this + 16) = &unk_1E6592680;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4BEF4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory(OZARFaceAnchorElement_Factory *this)
{
  OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65925B0;
  *((_QWORD *)this + 16) = &unk_1E6592680;
  v2 = (OZARFaceAnchorElement_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZARFaceAnchorElement_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZARFaceAnchorElement *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZARFaceAnchorElement *)operator new();
    OZARFaceAnchorElement::OZARFaceAnchorElement(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZARFaceAnchorElement *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4C074(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40ED398990, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZARFaceAnchorElement *OZARFaceAnchorElement_Factory::createCopy(OZARFaceAnchorElement_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZARFaceAnchorElement *v5;
  const OZARFaceAnchorElement *v6;
  void *v7;

  v5 = (OZARFaceAnchorElement *)operator new();
  OZARFaceAnchorElement::OZARFaceAnchorElement(v5, v6, a3);
  (*(void (**)(OZARFaceAnchorElement *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4C15C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40ED398990);
  _Unwind_Resume(a1);
}

PCString *OZARFaceAnchorElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Plane");
}

PCString *OZARFaceAnchorElement_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-SplineShape");
}

PCString *OZARFaceAnchorElement_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Shape_Icon");
}

OZARFaceAnchorElement *OZARFaceAnchorElement_Factory::createNodeCopy(OZARFaceAnchorElement_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZARFaceAnchorElement *v5;
  const OZARFaceAnchorElement *v6;

  v5 = (OZARFaceAnchorElement *)operator new();
  OZARFaceAnchorElement::OZARFaceAnchorElement(v5, v6, a3);
  return v5;
}

void sub_1B2E4C224(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40ED398990);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory(OZARFaceAnchorElement_Factory *this)
{
  OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory((OZARFaceAnchorElement_Factory *)((char *)this - 128));
}

{
  OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory((OZARFaceAnchorElement_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZ3DEnginePlaneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZ3DEnginePlaneElement_Factory *v0;

  v0 = (OZ3DEnginePlaneElement_Factory *)operator new();
  OZ3DEnginePlaneElement_Factory::OZ3DEnginePlaneElement_Factory(v0);
  OZ3DEnginePlaneElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4C31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZ3DEnginePlaneElement_Factory::OZ3DEnginePlaneElement_Factory(OZ3DEnginePlaneElement_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DB30;
  v4 = xmmword_1B355DE70;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E65926D8;
  *((_QWORD *)this + 16) = &unk_1E65927A8;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4C3BC(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory(OZ3DEnginePlaneElement_Factory *this)
{
  OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E65926D8;
  *((_QWORD *)this + 16) = &unk_1E65927A8;
  v2 = (OZ3DEnginePlaneElement_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZ3DEnginePlaneElement_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZ3DEnginePlaneElement *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZ3DEnginePlaneElement *)operator new();
    OZ3DEnginePlaneElement::OZ3DEnginePlaneElement(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZ3DEnginePlaneElement *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4C53C(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4098A97AEELL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZ3DEnginePlaneElement *OZ3DEnginePlaneElement_Factory::createCopy(OZ3DEnginePlaneElement_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZ3DEnginePlaneElement *v5;
  const OZ3DEnginePlaneElement *v6;
  void *v7;

  v5 = (OZ3DEnginePlaneElement *)operator new();
  OZ3DEnginePlaneElement::OZ3DEnginePlaneElement(v5, v6, a3);
  (*(void (**)(OZ3DEnginePlaneElement *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4C624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4098A97AEELL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePlaneElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Plane Element Short Desc");
}

OZ3DEnginePlaneElement *OZ3DEnginePlaneElement_Factory::createNodeCopy(OZ3DEnginePlaneElement_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZ3DEnginePlaneElement *v5;
  const OZ3DEnginePlaneElement *v6;

  v5 = (OZ3DEnginePlaneElement *)operator new();
  OZ3DEnginePlaneElement::OZ3DEnginePlaneElement(v5, v6, a3);
  return v5;
}

void sub_1B2E4C6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4098A97AEELL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory(OZ3DEnginePlaneElement_Factory *this)
{
  OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory((OZ3DEnginePlaneElement_Factory *)((char *)this - 128));
}

{
  OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory((OZ3DEnginePlaneElement_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZARPlaneAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZARPlaneAnchorElement_Factory *v0;

  v0 = (OZARPlaneAnchorElement_Factory *)operator new();
  OZARPlaneAnchorElement_Factory::OZARPlaneAnchorElement_Factory(v0);
  OZARPlaneAnchorElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4C7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement_Factory::OZARPlaneAnchorElement_Factory(OZARPlaneAnchorElement_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DB30;
  v4 = xmmword_1B355DE80;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6592800;
  *((_QWORD *)this + 16) = &unk_1E65928D0;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4C864(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory(OZARPlaneAnchorElement_Factory *this)
{
  OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6592800;
  *((_QWORD *)this + 16) = &unk_1E65928D0;
  v2 = (OZARPlaneAnchorElement_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZARPlaneAnchorElement_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZARPlaneAnchorElement *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZARPlaneAnchorElement *)operator new();
    OZARPlaneAnchorElement::OZARPlaneAnchorElement(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZARPlaneAnchorElement *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4C9E4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40245721ACLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZARPlaneAnchorElement *OZARPlaneAnchorElement_Factory::createCopy(OZARPlaneAnchorElement_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZARPlaneAnchorElement *v5;
  const OZARPlaneAnchorElement *v6;
  void *v7;

  v5 = (OZARPlaneAnchorElement *)operator new();
  OZARPlaneAnchorElement::OZARPlaneAnchorElement(v5, v6, a3);
  (*(void (**)(OZARPlaneAnchorElement *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4CACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40245721ACLL);
  _Unwind_Resume(a1);
}

PCString *OZARPlaneAnchorElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Plane Anchor");
}

OZARPlaneAnchorElement *OZARPlaneAnchorElement_Factory::createNodeCopy(OZARPlaneAnchorElement_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZARPlaneAnchorElement *v5;
  const OZARPlaneAnchorElement *v6;

  v5 = (OZARPlaneAnchorElement *)operator new();
  OZARPlaneAnchorElement::OZARPlaneAnchorElement(v5, v6, a3);
  return v5;
}

void sub_1B2E4CB74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40245721ACLL);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory(OZARPlaneAnchorElement_Factory *this)
{
  OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory((OZARPlaneAnchorElement_Factory *)((char *)this - 128));
}

{
  OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory((OZARPlaneAnchorElement_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZEnvironmentMeshSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZEnvironmentMeshSceneElement_Factory *v0;

  v0 = (OZEnvironmentMeshSceneElement_Factory *)operator new();
  OZEnvironmentMeshSceneElement_Factory::OZEnvironmentMeshSceneElement_Factory(v0);
  OZEnvironmentMeshSceneElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4CC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement_Factory::OZEnvironmentMeshSceneElement_Factory(OZEnvironmentMeshSceneElement_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DB30;
  v4 = xmmword_1B355DE90;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6592928;
  *((_QWORD *)this + 16) = &unk_1E65929F8;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4CD0C(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory(OZEnvironmentMeshSceneElement_Factory *this)
{
  OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6592928;
  *((_QWORD *)this + 16) = &unk_1E65929F8;
  v2 = (OZEnvironmentMeshSceneElement_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZEnvironmentMeshSceneElement_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZEnvironmentMeshSceneElement *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZEnvironmentMeshSceneElement *)operator new();
    OZEnvironmentMeshSceneElement::OZEnvironmentMeshSceneElement(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZEnvironmentMeshSceneElement *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4CE8C(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C4079491FA7, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZEnvironmentMeshSceneElement *OZEnvironmentMeshSceneElement_Factory::createCopy(OZEnvironmentMeshSceneElement_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZEnvironmentMeshSceneElement *v5;
  const OZEnvironmentMeshSceneElement *v6;
  void *v7;

  v5 = (OZEnvironmentMeshSceneElement *)operator new();
  OZEnvironmentMeshSceneElement::OZEnvironmentMeshSceneElement(v5, v6, a3);
  (*(void (**)(OZEnvironmentMeshSceneElement *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4CF74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4079491FA7);
  _Unwind_Resume(a1);
}

PCString *OZEnvironmentMeshSceneElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Environment Mesh");
}

OZEnvironmentMeshSceneElement *OZEnvironmentMeshSceneElement_Factory::createNodeCopy(OZEnvironmentMeshSceneElement_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZEnvironmentMeshSceneElement *v5;
  const OZEnvironmentMeshSceneElement *v6;

  v5 = (OZEnvironmentMeshSceneElement *)operator new();
  OZEnvironmentMeshSceneElement::OZEnvironmentMeshSceneElement(v5, v6, a3);
  return v5;
}

void sub_1B2E4D01C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4079491FA7);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory(OZEnvironmentMeshSceneElement_Factory *this)
{
  OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory((OZEnvironmentMeshSceneElement_Factory *)((char *)this - 128));
}

{
  OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory((OZEnvironmentMeshSceneElement_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void std::__call_once_param<std::tuple<OZARPersonAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZARPersonAnchorElement_Factory *v0;

  v0 = (OZARPersonAnchorElement_Factory *)operator new();
  OZARPersonAnchorElement_Factory::OZARPersonAnchorElement_Factory(v0);
  OZARPersonAnchorElement_Factory::_instance = (uint64_t)v0;
}

void sub_1B2E4D114(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZARPersonAnchorElement_Factory::OZARPersonAnchorElement_Factory(OZARPersonAnchorElement_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B355DB30;
  v4 = xmmword_1B355DEA0;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *v2 = &unk_1E64FC6A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E6592A50;
  *((_QWORD *)this + 16) = &unk_1E6592B20;
  *((_QWORD *)this + 17) = 0;
}

void sub_1B2E4D1B4(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory(OZARPersonAnchorElement_Factory *this)
{
  OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory(this);
  JUMPOUT(0x1B5E29170);
}

{
  PCSingleton *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_1E6592A50;
  *((_QWORD *)this + 16) = &unk_1E6592B20;
  v2 = (OZARPersonAnchorElement_Factory *)((char *)this + 128);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);
  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZARPersonAnchorElement_Factory::create(OZFactory *this, const PCString *a2, unsigned int NextUniqueID)
{
  OZARPersonAnchorElement *v6;
  const PCString *v7;
  OZChannelBase *v8;
  OZChannelBase *v9;
  OZChannelBase *v10;
  const PCString *v11;
  char v13;
  _BYTE _F[65];

  if (!*((_QWORD *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)_F, (const PCString *)CFSTR("Motion Effect"));
    v6 = (OZARPersonAnchorElement *)operator new();
    OZARPersonAnchorElement::OZARPersonAnchorElement(v6, this, a2, NextUniqueID);
    *((_QWORD *)this + 17) = v6;
    (*(void (**)(OZARPersonAnchorElement *))(*(_QWORD *)v6 + 88))(v6);
    OZChannelBase::setRangeName((OZChannelBase *)_F, v7);
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)CFSTR("Motion Effect"));
  v8 = (OZChannelBase *)(*(uint64_t (**)(OZFactory *, _QWORD, uint64_t))(*(_QWORD *)this + 24))(this, *((_QWORD *)this + 17), 40);
  v9 = v8;
  if (!NextUniqueID)
    NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B2E4D334(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  const PCString *v15;

  MEMORY[0x1B5E29170](v13, 0x10F1C40324BC503, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

OZARPersonAnchorElement *OZARPersonAnchorElement_Factory::createCopy(OZARPersonAnchorElement_Factory *this, OZFactoryBase *a2, uint64_t a3)
{
  OZARPersonAnchorElement *v5;
  const OZARPersonAnchorElement *v6;
  void *v7;

  v5 = (OZARPersonAnchorElement *)operator new();
  OZARPersonAnchorElement::OZARPersonAnchorElement(v5, v6, a3);
  (*(void (**)(OZARPersonAnchorElement *, void *, uint64_t))(*(_QWORD *)v5 + 208))(v5, v7, a3);
  return v5;
}

void sub_1B2E4D41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40324BC503);
  _Unwind_Resume(a1);
}

PCString *OZARPersonAnchorElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Person Anchor");
}

OZARPersonAnchorElement *OZARPersonAnchorElement_Factory::createNodeCopy(OZARPersonAnchorElement_Factory *this, OZSceneNode *a2, unsigned int a3)
{
  OZARPersonAnchorElement *v5;
  const OZARPersonAnchorElement *v6;

  v5 = (OZARPersonAnchorElement *)operator new();
  OZARPersonAnchorElement::OZARPersonAnchorElement(v5, v6, a3);
  return v5;
}

void sub_1B2E4D4C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40324BC503);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory(OZARPersonAnchorElement_Factory *this)
{
  OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory((OZARPersonAnchorElement_Factory *)((char *)this - 128));
}

{
  OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory((OZARPersonAnchorElement_Factory *)((char *)this - 128));
  JUMPOUT(0x1B5E29170);
}

void OZ3DEngineScenePlacementBehavior::OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCString v6;
  PCString v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OZBehavior::OZBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(_QWORD *)this = &off_1E6592B78;
  *((_QWORD *)this + 2) = &unk_1E6592E10;
  *((_QWORD *)this + 6) = &unk_1E6593068;
  *((_QWORD *)this + 42) = &unk_1E65930C0;
  PCString::PCString(&v7, "Relative To");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineScenePlacementBehavior *)((char *)this + 536), &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Left;Center;Right");
  PCString::PCString(&v6, "Alignment");
  OZChannelEnum::OZChannelEnum((OZ3DEngineScenePlacementBehavior *)((char *)this + 696), 4u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Distance");
  OZChannelDouble::OZChannelDouble((OZ3DEngineScenePlacementBehavior *)((char *)this + 952), 1000.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Face Camera");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1104), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Fix Y");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1256), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 952), -2000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 952), 2000.0);
  v8 = 2;
  v7.var0 = (__CFString *)0x400000001;
  OZChannelEnum::setTags((OZ3DEngineScenePlacementBehavior *)((char *)this + 696), (char *)&v7, 3);
}

void sub_1B2E4D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  uint64_t v12;
  OZChanTransformNodeRef *v13;
  OZChannelEnum *v14;
  OZChannel *v15;
  OZChannelBool *v16;
  OZChannelBool *v17;

  OZChannelBool::~OZChannelBool(v17);
  OZChannelBool::~OZChannelBool(v16);
  OZChannel::~OZChannel(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v13);
  *(_QWORD *)(v12 + 336) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v12 + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v12 + 344));
  OZBehavior::~OZBehavior((OZBehavior *)v12);
  _Unwind_Resume(a1);
}

void OZ3DEngineScenePlacementBehavior::OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this, const OZ3DEngineScenePlacementBehavior *a2, char a3)
{
  uint64_t v5;

  OZBehavior::OZBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(_QWORD *)this = &off_1E6592B78;
  *((_QWORD *)this + 2) = &unk_1E6592E10;
  *((_QWORD *)this + 6) = &unk_1E6593068;
  *((_QWORD *)this + 42) = &unk_1E65930C0;
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineScenePlacementBehavior *)((char *)this + 536), (const OZ3DEngineScenePlacementBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZ3DEngineScenePlacementBehavior *)((char *)this + 696), (const OZ3DEngineScenePlacementBehavior *)((char *)a2 + 696), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 952), (const OZChannelBase *)((char *)a2 + 952), (OZChannelFolder *)((char *)this + 56));
  *((_QWORD *)this + 119) = &off_1E6551358;
  *((_QWORD *)this + 121) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1104), (const OZChannelBase *)((char *)a2 + 1104), (OZChannelFolder *)((char *)this + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1256), (const OZChannelBase *)((char *)a2 + 1256), (OZChannelFolder *)((char *)this + 56));
}

void sub_1B2E4D98C(_Unwind_Exception *a1)
{
  uint64_t v1;
  OZChanTransformNodeRef *v2;
  OZChannelEnum *v3;
  OZChannel *v4;
  OZChannelBool *v5;

  OZChannelBool::~OZChannelBool(v5);
  OZChannel::~OZChannel(v4);
  OZChannelEnum::~OZChannelEnum(v3);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v2);
  *(_QWORD *)(v1 + 336) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v1 + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v1 + 344));
  OZBehavior::~OZBehavior((OZBehavior *)v1);
  _Unwind_Resume(a1);
}

void sub_1B2E4DA00()
{
  JUMPOUT(0x1B2E4D9F0);
}

void OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this)
{
  *(_QWORD *)this = &off_1E6592B78;
  *((_QWORD *)this + 2) = &unk_1E6592E10;
  *((_QWORD *)this + 6) = &unk_1E6593068;
  *((_QWORD *)this + 42) = &unk_1E65930C0;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1256));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1104));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 952));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineScenePlacementBehavior *)((char *)this + 696));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZ3DEngineScenePlacementBehavior *)((char *)this + 536));
  *((_QWORD *)this + 42) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 344));
  OZBehavior::~OZBehavior(this);
}

{
  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this)
{
  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior((OZ3DEngineScenePlacementBehavior *)((char *)this - 16));
}

{
  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior((OZ3DEngineScenePlacementBehavior *)((char *)this - 48));
}

{
  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior((OZ3DEngineScenePlacementBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior((OZ3DEngineScenePlacementBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

uint64_t OZ3DEngineScenePlacementBehavior::operator=(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;

  OZBehavior::operator=(a1, (uint64_t)a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 536, (uint64_t)v4 + 536);
  return OZChannelBase::operator=(a1 + 952, (uint64_t)v5 + 952);
}

void *OZ3DEngineScenePlacementBehavior::didAddToNode(void *this, OZSceneNode *lpsrc)
{
  uint64_t v3;

  if (lpsrc)
  {
    v3 = (uint64_t)this;
    if (this)
      *(_QWORD *)(v3 + 328) = lpsrc;
  }
  return this;
}

uint64_t OZ3DEngineScenePlacementBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _QWORD *i;
  unint64_t v9;
  OZScene *v10;
  char *v11;

  v6 = result;
  v7 = (char *)(result + 336);
  for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
  {
    v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7)
        return result;
      ++i;
    }
  }
  v11 = (char *)(result + 336);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t `non-virtual thunk to'OZ3DEngineScenePlacementBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEngineScenePlacementBehavior::getLockDependencies(a1 - 336, a2, a3, a4);
}

uint64_t OZ3DEngineScenePlacementBehavior::getLockingGroups(OZ3DEngineScenePlacementBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(OZ3DEngineScenePlacementBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return (*(uint64_t (**)(OZ3DEngineScenePlacementBehavior *))(*(_QWORD *)this + 336))(this) + 1784;
  return result;
}

uint64_t `non-virtual thunk to'OZ3DEngineScenePlacementBehavior::getLockingGroups(OZ3DEngineScenePlacementBehavior *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 336;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 42) + 336))((char *)this - 336);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 336))(v1) + 1784;
  return result;
}

void OZMaterialLayersFolder::OZMaterialLayersFolder(OZMaterialLayersFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  uint64_t v6;

  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v6 = &off_1E6593140;
  *(_QWORD *)(v6 + 16) = &unk_1E6593418;
  *(_QWORD *)(v6 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v6);
}

void sub_1B2E4DD44(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder::OZMaterialLayersFolder(OZMaterialLayersFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_1E6593140;
  *(_QWORD *)(v4 + 16) = &unk_1E6593418;
  *(_QWORD *)(v4 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B2E4DDA4(_Unwind_Exception *a1)
{
  OZChannelFolder *v1;

  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder::OZMaterialLayersFolder(OZMaterialLayersFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3);
  *v3 = &off_1E6593140;
  v3[2] = &unk_1E6593418;
}

OZChannelVaryingFolder *OZMaterialLayersFolder::clone(const OZChannelBase *this)
{
  OZChannelVaryingFolder *v2;

  v2 = (OZChannelVaryingFolder *)operator new();
  OZChannelVaryingFolder::OZChannelVaryingFolder(v2, this, 0);
  *(_QWORD *)v2 = &off_1E6593140;
  *((_QWORD *)v2 + 2) = &unk_1E6593418;
  return v2;
}

void sub_1B2E4DE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZMaterialLayersFolder::~OZMaterialLayersFolder(OZMaterialLayersFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

void OZMaterialLayersFolder::~OZMaterialLayersFolder(OZChannelFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZMaterialLayersFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelVaryingFolder::writeBody(this, a2, a3, a4);
}

uint64_t `non-virtual thunk to'OZMaterialLayersFolder::writeBody(OZMaterialLayersFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelVaryingFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4);
}

void OZMaterialLayersFolder::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  OZChannelBase *v8;
  uint64_t v9;
  void *v10;

  OZChannelFolder::copy(this, a2);
  OZChannelVaryingFolder::resetToDefault((OZChannelVaryingFolder *)this);
  if (v4)
  {
    v5 = *v4;
    v6 = v4[1];
    while (v5 != v6)
    {
      v7 = *v5++;
      v8 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 248))(v7);
      v8->var6 = this;
      OZChannelFolder::push_back(this, v8);
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 14);
    if (v9)
    {
      v10 = *(void **)v9;
      if (*(_QWORD *)v9)
      {
        *(_QWORD *)(v9 + 8) = v10;
        operator delete(v10);
      }
      MEMORY[0x1B5E29170](v9, 0x80C40D6874129);
    }
    *((_QWORD *)this + 14) = 0;
  }
}

void OZMaterialLayersFolder::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  const OZChannelBase *v2;
  void **var0;
  uint64_t *v5;
  uint64_t *v6;
  OZChannelBase *v7;
  uint64_t v8;
  void **v9;
  void *v10;

  v2 = a2;
  OZChannelBase::assign(this, a2);
  if (v2)
  OZChannelVaryingFolder::resetToDefault((OZChannelVaryingFolder *)this);
  var0 = v2[1].var0;
  if (var0)
  {
    v5 = (uint64_t *)*var0;
    v6 = (uint64_t *)var0[1];
    while (v5 != v6)
    {
      v7 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v5 + 248))(*v5);
      v7->var6 = (OZChannelFolder *)this;
      v8 = *v5++;
      (*((void (**)(OZChannelBase *, uint64_t))v7->var0 + 32))(v7, v8);
      OZChannelFolder::push_back((OZChannelFolder *)this, v7);
    }
  }
  else
  {
    v9 = this[1].var0;
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v9[1] = v10;
        operator delete(v10);
      }
      MEMORY[0x1B5E29170](v9, 0x80C40D6874129);
    }
    this[1].var0 = 0;
  }
}

char *OZMaterialLayersFolder::resetToDefault(OZMaterialLayersFolder *this)
{
  char *result;

  OZChannelVaryingFolder::resetToDefault(this);
  result = (char *)OZChannelBase::getObjectManipulator((OZChannelBase *)this);
  if (result)
  {
    if (result)
      return OZLayeredMaterial::addDefaultLayer(result);
  }
  return result;
}

uint64_t *OZMaterialLayersFolder::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t *result;
  uint64_t Instance;
  OZFactory *Factory;
  __int128 v7;

  result = OZChannelFolder::markFactoriesForSerialization(this, a2);
  if (a3)
  {
    Instance = OZFactories::getInstance((OZFactories *)result);
    v7 = xmmword_1B355D070;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v7);
    return OZFactory::setNeedsSaving(Factory, (const OZFactory *)1);
  }
  return result;
}

uint64_t *`non-virtual thunk to'OZMaterialLayersFolder::markFactoriesForSerialization(OZMaterialLayersFolder *this, PCSerializerWriteStream *a2, int a3)
{
  return OZMaterialLayersFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZMaterialLayersFolder::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  uint64_t Instance;
  OZFactory *Factory;
  OZFactory *var1;
  const OZFactory *v8;
  const OZFactory *v9;
  __int128 v11;

  if (a3)
  {
    Instance = OZFactories::getInstance((OZFactories *)this);
    v11 = xmmword_1B355D070;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v11);
    var1 = this->var1;
    v9 = (const OZFactory *)OZFactory::fileRefID(Factory, v8);
    OZFactory::setFileRefID(var1, v9);
  }
  return OZChannelBase::writeHeader(this, a2, 1);
}

uint64_t `non-virtual thunk to'OZMaterialLayersFolder::writeHeader(OZMaterialLayersFolder *this, OZFactory *a2, int a3)
{
  return OZMaterialLayersFolder::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t OZMaterialLayersFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = OZChannelVaryingFolder::parseBegin(this, a2);
  if ((_DWORD)v3)
    OZChannelVaryingFolder::resetToDefault((OZChannelVaryingFolder *)this);
  return v3;
}

uint64_t `non-virtual thunk to'OZMaterialLayersFolder::parseBegin(OZMaterialLayersFolder *this, PCSerializerReadStream *a2)
{
  OZChannelVaryingFolder *v2;
  uint64_t v3;

  v2 = (OZMaterialLayersFolder *)((char *)this - 16);
  v3 = OZChannelVaryingFolder::parseBegin((OZChannelFolder *)((char *)this - 16), a2);
  if ((_DWORD)v3)
    OZChannelVaryingFolder::resetToDefault(v2);
  return v3;
}

uint64_t OZMaterialLayersFolder::parseEnd(OZMaterialLayersFolder *this, PCSerializerReadStream *a2)
{
  const void ***v4;
  const void **v5;
  const void **v6;

  *((_QWORD *)this + 7) &= ~0x10000uLL;
  v4 = (const void ***)*((_QWORD *)this + 14);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      if (*v5)
      ++v5;
    }
    while (v5 != v6);
  }
  return OZChannelVaryingFolder::parseEnd((OZChannelFolder *)this, a2);
}

uint64_t `non-virtual thunk to'OZMaterialLayersFolder::parseEnd(OZMaterialLayersFolder *this, PCSerializerReadStream *a2)
{
  return OZMaterialLayersFolder::parseEnd((OZMaterialLayersFolder *)((char *)this - 16), a2);
}

unint64_t OZMaterialLayersFolder::indexOfDescendant(OZMaterialLayersFolder *this, OZChannelBase *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  OZChannelBase **v5;

  v2 = (OZChannelBase ***)*((_QWORD *)this + 14);
  v3 = *v2;
  v4 = v2[1];
  v5 = v3;
  if (v3 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        v5 = v4;
        return (unint64_t)((char *)v5 - (char *)v3) >> 3;
      }
    }
  }
  return (unint64_t)((char *)v5 - (char *)v3) >> 3;
}

void OZTimelineState::OZTimelineState(OZTimelineState *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  OZPreferenceManager *v5;

  *(_QWORD *)this = &off_1E6593488;
  v2 = MEMORY[0x1E0CA2E68];
  v3 = *MEMORY[0x1E0CA2E68];
  *((_OWORD *)this + 2) = *MEMORY[0x1E0CA2E68];
  v4 = *(_QWORD *)(v2 + 16);
  *((_QWORD *)this + 6) = v4;
  *(_OWORD *)((char *)this + 56) = v3;
  *((_QWORD *)this + 9) = v4;
  v5 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  *((_BYTE *)this + 8) = OZPreferenceManager::getTimelineDisplayVideo(v5);
  *((_BYTE *)this + 9) = OZPreferenceManager::getTimelineDisplayAudio(v5);
  *((_BYTE *)this + 10) = OZPreferenceManager::getTimelineDisplayKeyframes(v5);
  *((_BYTE *)this + 11) = OZPreferenceManager::getTimelineDisplayMasks(v5);
  *((_BYTE *)this + 12) = OZPreferenceManager::getTimelineDisplayBehaviors(v5);
  *((_BYTE *)this + 13) = OZPreferenceManager::getTimelineDisplayEffects(v5);
  *((double *)this + 2) = OZPreferenceManager::getTimelineVideoVerticalZoom(v5);
  *((double *)this + 3) = OZPreferenceManager::getTimelineAudioVerticalZoom(v5);
}

__n128 OZTimelineState::OZTimelineState(uint64_t a1, __n128 *a2)
{
  __n128 result;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E6593488;
  *(_DWORD *)(a1 + 8) = a2->n128_u32[2];
  *(_WORD *)(a1 + 12) = a2->n128_u16[6];
  result = a2[1];
  v3 = MEMORY[0x1E0CA2E68];
  v4 = *MEMORY[0x1E0CA2E68];
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  return result;
}

uint64_t OZTimelineState::writeHeader(OZTimelineState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimelineStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 81);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimelineState::writeBody(OZTimelineState *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  _BYTE v14[24];
  CMTime v15;
  CMTime v16;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimelineStateScope);
  v4 = *((unsigned __int8 *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v5 = *((unsigned __int8 *)this + 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v6 = *((unsigned __int8 *)this + 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v7 = *((unsigned __int8 *)this + 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v8 = *((unsigned __int8 *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v9 = *((unsigned __int8 *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v10 = *((double *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 7);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *((double *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 8);
  (*(void (**)(PCSerializerWriteStream *, double))(*(_QWORD *)a2 + 88))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 9);
  v16 = *(CMTime *)((char *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, CMTime *))(*(_QWORD *)a2 + 208))(a2, 1, &v16);
  v16 = *(CMTime *)((char *)this + 32);
  v15 = *(CMTime *)((char *)this + 56);
  v12 = PC_CMTimeSaferAdd(&v16, &v15, (uint64_t)v14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, _BYTE *, double))(*(_QWORD *)a2 + 208))(a2, 2, v14, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimelineState::parseBegin(OZTimelineState *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTimelineStateScope);
  return 1;
}

uint64_t OZTimelineState::parseEnd(OZTimelineState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTimelineState::parseElement(OZTimelineState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  char *v5;
  char *v6;
  CMTimeEpoch epoch;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  double v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;

  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      v5 = (char *)this + 8;
      goto LABEL_8;
    case 2:
      v5 = (char *)this + 9;
      goto LABEL_8;
    case 3:
      v5 = (char *)this + 10;
      goto LABEL_8;
    case 4:
      v5 = (char *)this + 11;
      goto LABEL_8;
    case 5:
      v5 = (char *)this + 12;
      goto LABEL_8;
    case 6:
      v5 = (char *)this + 13;
LABEL_8:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 72))(a3, v5);
      return 0;
    case 7:
      v6 = (char *)this + 16;
      goto LABEL_11;
    case 8:
      v6 = (char *)this + 24;
LABEL_11:
      (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 64))(a3, v6);
      return 0;
    case 9:
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        v13 = 0.0;
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, double *))(*(_QWORD *)a3 + 144))(a3, 1, &v13))
        {
          v16 = *(CMTime *)((char *)a2 + 112);
          operator*(&v16, &v17, v13);
          *(CMTime *)((char *)this + 32) = v17;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, double *))(*(_QWORD *)a3 + 144))(a3, 2, &v13))
        {
          v11 = *(CMTime *)((char *)a2 + 112);
          operator*(&v11, &v12, v13 + -1.0);
          *(_OWORD *)&v10.value = *((_OWORD *)a2 + 7);
          v10.epoch = *((_QWORD *)a2 + 16);
          v17 = v12;
          v16 = *(CMTime *)((char *)this + 32);
          PC_CMTimeSaferSubtract(&v17, &v16, (uint64_t)&v14);
          v17 = v14;
          v16 = v10;
          PC_CMTimeSaferAdd(&v17, &v16, (uint64_t)&v15);
          *(_OWORD *)((char *)this + 56) = *(_OWORD *)&v15.value;
          epoch = v15.epoch;
          goto LABEL_22;
        }
      }
      else
      {
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(_QWORD *)a3 + 168))(a3, 1, &v15))
        {
          *(CMTime *)((char *)this + 32) = v15;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(_QWORD *)a3 + 168))(a3, 2, &v15))
        {
          v16 = *(CMTime *)((char *)this + 32);
          v17 = v15;
          PC_CMTimeSaferSubtract(&v17, &v16, (uint64_t)&v14);
          *(_OWORD *)((char *)this + 56) = *(_OWORD *)&v14.value;
          epoch = v14.epoch;
LABEL_22:
          *((_QWORD *)this + 9) = epoch;
        }
      }
      return 0;
    default:
      return 0;
  }
}

void OZTimelineState::~OZTimelineState(OZTimelineState *this)
{
  JUMPOUT(0x1B5E29170);
}

void OZScene::OZScene(OZScene *this, OZDocument *a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  OZPreferenceManager *v7;
  OZPreferenceManager *v8;
  OZPreferenceManager *RecordWhilePlayback;
  OZPreferenceManager *v10;
  OZPreferenceManager *RecordingOptions;
  OZPreferenceManager *v12;
  OZPreferenceManager *v13;
  int v14;
  OZPreferenceManager *v15;
  OZTimeMarkerSet *v16;
  OZChannelBase *v17;
  const PCString *NextUniqueID;
  OZSceneNode *v19;
  OZChannelBase *v20;
  OZSceneList *v21;
  uint64_t **v22;
  const PCString *v23;
  PCString v24;

  *(_QWORD *)this = &unk_1E64F6BA8;
  *((_QWORD *)this + 1) = &unk_1E658CDC8;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 16));
  *(_QWORD *)this = &off_1E65934F8;
  *((_QWORD *)this + 1) = &unk_1E65935A0;
  *((_DWORD *)this + 8) = -1;
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 40));
  PCMutex::PCMutex((PCMutex *)((char *)this + 160));
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 232));
  OZSceneSettings::OZSceneSettings((OZScene *)((char *)this + 336));
  OZExportSettings::OZExportSettings((OZScene *)((char *)this + 640));
  OZPublishSettings::OZPublishSettings((OZScene *)((char *)this + 720), this);
  PCURL::PCURL((PCURL *)&v24, CFSTR("Channel Scene Root"));
  OZChannelObjectRoot::OZChannelObjectRoot((OZScene *)((char *)this + 920), &v24, 0, 0x270Fu, 0);
  PCString::~PCString(&v24);
  *((_QWORD *)this + 150) = (char *)this + 1200;
  *((_QWORD *)this + 151) = (char *)this + 1200;
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_QWORD *)this + 156) = 0;
  *((_QWORD *)this + 155) = (char *)this + 1248;
  *((_QWORD *)this + 160) = 0;
  *((_QWORD *)this + 159) = 0;
  *((_QWORD *)this + 158) = (char *)this + 1272;
  *((_DWORD *)this + 322) = 0;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 332) = 1065353216;
  *((_DWORD *)this + 334) = 0;
  *((_QWORD *)this + 168) = 0;
  v4 = (__int128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 1352) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 171) = *((_QWORD *)v4 + 2);
  v5 = *v4;
  *((_OWORD *)this + 86) = *v4;
  v6 = *((_QWORD *)v4 + 2);
  *((_QWORD *)this + 174) = v6;
  *(_OWORD *)((char *)this + 1400) = v5;
  *((_QWORD *)this + 177) = v6;
  *((_OWORD *)this + 89) = v5;
  *((_QWORD *)this + 180) = v6;
  *(_OWORD *)((char *)this + 1448) = v5;
  *((_QWORD *)this + 183) = v6;
  *((_OWORD *)this + 92) = v5;
  *((_QWORD *)this + 186) = v6;
  *((_DWORD *)this + 374) = 0;
  *((_BYTE *)this + 1500) = 0;
  OZGuideSet::OZGuideSet((OZScene *)((char *)this + 1512));
  *((_QWORD *)this + 196) = 0;
  *((_OWORD *)this + 97) = 0u;
  *(_WORD *)((char *)this + 1577) = 256;
  *((_QWORD *)this + 198) = a2;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 1596));
  PCMutex::PCMutex((PCMutex *)((char *)this + 1616));
  *((_QWORD *)this + 213) = 0;
  *((_QWORD *)this + 212) = 0;
  *((_QWORD *)this + 211) = (char *)this + 1696;
  *((_DWORD *)this + 428) = 0;
  *((_QWORD *)this + 215) = (char *)this + 1720;
  *((_QWORD *)this + 216) = (char *)this + 1720;
  *((_QWORD *)this + 217) = 0;
  *((_QWORD *)this + 220) = 0;
  *((_QWORD *)this + 219) = 0;
  *((_QWORD *)this + 218) = (char *)this + 1752;
  *((_BYTE *)this + 1776) = 0;
  *((_DWORD *)this + 445) = 2;
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 225) = 0;
  *((_QWORD *)this + 224) = 0;
  *((_BYTE *)this + 1809) = 0;
  v7 = (OZPreferenceManager *)PCRenderModel::PCRenderModel((char *)this + 1816, 0);
  *((_WORD *)this + 924) = 0;
  *((_QWORD *)this + 193) = 0;
  *((_BYTE *)this + 1576) = 0;
  *((_WORD *)this + 789) = 0;
  *((_QWORD *)this + 188) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_QWORD *)this + 232) = 0;
  *((_QWORD *)this + 234) = 0;
  *((_QWORD *)this + 233) = 0;
  *(_OWORD *)((char *)this + 1176) = *v4;
  *((_QWORD *)this + 149) = *((_QWORD *)v4 + 2);
  *((_DWORD *)this + 398) = 0;
  *((_DWORD *)this + 443) = 0;
  atomic_store(0, (unsigned __int8 *)this + 1808);
  if (!*(_BYTE *)(theApp + 80))
  {
    v8 = (OZPreferenceManager *)OZPreferenceManager::Instance(v7);
    RecordWhilePlayback = (OZPreferenceManager *)OZPreferenceManager::getRecordWhilePlayback(v8);
    if ((_DWORD)RecordWhilePlayback)
      *((_DWORD *)this + 398) |= 1u;
    v10 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordWhilePlayback);
    RecordingOptions = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v10);
    if ((_DWORD)RecordingOptions)
    {
      v12 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordingOptions);
      v13 = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v12);
      if ((_DWORD)v13 == 1)
      {
        v14 = 2;
LABEL_9:
        *((_DWORD *)this + 398) = *((_DWORD *)this + 398) & 0xFFFFFFF9 | v14;
        goto LABEL_10;
      }
      v15 = (OZPreferenceManager *)OZPreferenceManager::Instance(v13);
      if (OZPreferenceManager::getRecordingOptions(v15) == 2)
      {
        v14 = 4;
        goto LABEL_9;
      }
    }
  }
LABEL_10:
  v16 = (OZTimeMarkerSet *)operator new();
  OZTimeMarkerSet::OZTimeMarkerSet(v16);
  OZChannelObjectRoot::setTimeMarkers((_QWORD *)this + 115, (uint64_t)v16);
  *((_BYTE *)this + 1768) = 0;
  PCURL::PCURL((PCURL *)&v24, CFSTR("Project Node Name"));
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v17);
  v19 = (OZSceneNode *)OZProjectNode::create((OZProjectNode *)&v24, NextUniqueID);
  PCString::~PCString(&v24);
  v20 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v19 + 640))(v19);
  OZChannelBase::setNameUnset(v20, 0);
  v21 = (OZSceneList *)OZScene::addRootNode(this, v19);
  v22 = (uint64_t **)OZSceneList::instance(v21);
  OZSceneList::addScene(v22, this);
  *((_BYTE *)this + 1578) = 1;
  *((_BYTE *)this + 152) = 1;
  *((_DWORD *)this + 36) = 0;
  OZChannelBase::setRangeName((OZChannelBase *)this, v23);
}

void sub_1B2E4ED4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSpinLock *a10, uint64_t a11, _QWORD **a12, OZPublishSettings *a13, OZExportSettings *a14, std::mutex *a15, PCMutex *a16, std::mutex *a17, PCString a18)
{
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  _QWORD **v21;
  OZChannelObjectRoot *v22;
  _QWORD *v23;
  PCMutex *v24;
  _QWORD *v25;
  void *v27;
  void *v28;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v18 + 1832));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v18 + 1824));
  v27 = *(void **)(v18 + 1784);
  if (v27)
  {
    *(_QWORD *)(v18 + 1792) = v27;
    operator delete(v27);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18 + 1744, *v21);
  std::__list_imp<unsigned int>::clear(v25);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v18 + 1712));
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v18 + 1688, *v20);
  PCMutex::~PCMutex(v24);
  v28 = *(void **)(v18 + 1552);
  if (v28)
  {
    *(_QWORD *)(v18 + 1560) = v28;
    operator delete(v28);
  }
  std::__tree<OZGuide>::destroy(v18 + 1520, *(_QWORD **)(v18 + 1528));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v18 + 1296);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v18 + 1288));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18 + 1264, *v19);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18 + 1240, *a12);
  std::__list_imp<unsigned int>::clear(v23);
  OZChannelObjectRoot::~OZChannelObjectRoot(v22);
  OZPublishSettings::~OZPublishSettings(a13);
  OZExportSettings::~OZExportSettings(a14);
  *(_QWORD *)(v18 + 336) = &off_1E658F368;
  PCString::~PCString((PCString *)(v18 + 520));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v18 + 464));
  PCSharedMutex::~PCSharedMutex(a15);
  PCMutex::~PCMutex(a16);
  PCSharedMutex::~PCSharedMutex(a17);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setFlag(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1592) |= a2;
  return this;
}

void *OZScene::addRootNode(OZScene *this, OZSceneNode *a2)
{
  void *result;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  OZChannelBase *v9;
  __int128 v10;

  result = OZScene::getNode(this, *((_DWORD *)a2 + 20));
  if (!result)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 151) + 16);
    if (v5
      && (v6 = *(_QWORD *)(v5 + 8),
          v10 = xmmword_1B355CF20,
          OZFactory::isKindOfClass(v6, (int32x4_t *)&v10)))
    {
      return OZScene::addRootNodeAfter(this, a2, *(OZSceneNode **)(*((_QWORD *)this + 151) + 16));
    }
    else
    {
      v7 = operator new(0x18uLL);
      v8 = (_QWORD *)*((_QWORD *)this + 151);
      *v7 = (char *)this + 1200;
      v7[1] = v8;
      v7[2] = a2;
      *v8 = v7;
      *((_QWORD *)this + 151) = v7;
      ++*((_QWORD *)this + 152);
      v9 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
      OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 920), v9);
      OZScene::registerNode(this, a2);
      return (void *)OZScene::addAllDependencies((uint64_t)this, a2);
    }
  }
  return result;
}

OZSceneList *OZSceneList::instance(OZSceneList *this)
{
  OZSceneList *v1;

  {
    v1 = (OZSceneList *)operator new();
    OZSceneList::OZSceneList(v1);
  }
  return v1;
}

void sub_1B2E4F038(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A64E3564);
  _Unwind_Resume(a1);
}

uint64_t OZSceneList::addScene(uint64_t **this, OZScene *a2)
{
  PCMutex *v3;
  OZScene *v5;

  v5 = a2;
  v3 = (PCMutex *)(this + 1);
  PCMutex::lock((PCMutex *)(this + 1));
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(this + 10, (unint64_t *)&v5, (uint64_t *)&v5);
  return PCMutex::unlock(v3);
}

void sub_1B2E4F0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZScene::OZScene(OZScene *this, const OZScene *a2, OZDocument *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  OZPreferenceManager *v12;
  unsigned int v13;
  OZPreferenceManager *v14;
  OZPreferenceManager *RecordWhilePlayback;
  OZPreferenceManager *v16;
  OZPreferenceManager *RecordingOptions;
  OZPreferenceManager *v18;
  OZPreferenceManager *v19;
  OZPreferenceManager *v20;
  int v21;
  OZChannelBase *v22;
  const PCString *NextUniqueID;
  OZSceneNode *v24;
  OZSceneList *v25;
  uint64_t **v26;
  const PCString *v27;
  PCString v28;

  *(_QWORD *)this = &unk_1E64F6BA8;
  *((_QWORD *)this + 1) = &unk_1E658CDC8;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 16));
  *(_QWORD *)this = &off_1E65934F8;
  *((_QWORD *)this + 1) = &unk_1E65935A0;
  *((_DWORD *)this + 8) = -1;
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 40));
  PCMutex::PCMutex((PCMutex *)((char *)this + 160));
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 232));
  OZSceneSettings::OZSceneSettings((OZScene *)((char *)this + 336), (const OZScene *)((char *)a2 + 336));
  OZExportSettings::OZExportSettings((OZScene *)((char *)this + 640));
  OZPublishSettings::OZPublishSettings((OZScene *)((char *)this + 720), (const OZScene *)((char *)a2 + 720), this);
  OZChannelObjectRoot::OZChannelObjectRoot((OZScene *)((char *)this + 920), (const OZScene *)((char *)a2 + 920), 0);
  *((_QWORD *)this + 150) = (char *)this + 1200;
  *((_QWORD *)this + 151) = (char *)this + 1200;
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_QWORD *)this + 156) = 0;
  *((_QWORD *)this + 155) = (char *)this + 1248;
  *((_QWORD *)this + 160) = 0;
  *((_QWORD *)this + 159) = 0;
  *((_QWORD *)this + 158) = (char *)this + 1272;
  *((_DWORD *)this + 322) = 0;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 332) = 1065353216;
  *((_DWORD *)this + 334) = 0;
  *((_QWORD *)this + 168) = 0;
  v6 = *(_OWORD *)((char *)a2 + 1352);
  *((_QWORD *)this + 171) = *((_QWORD *)a2 + 171);
  *(_OWORD *)((char *)this + 1352) = v6;
  v7 = *((_OWORD *)a2 + 86);
  *((_QWORD *)this + 174) = *((_QWORD *)a2 + 174);
  *((_OWORD *)this + 86) = v7;
  v8 = *(_OWORD *)((char *)a2 + 1400);
  *((_QWORD *)this + 177) = *((_QWORD *)a2 + 177);
  *(_OWORD *)((char *)this + 1400) = v8;
  v9 = *((_OWORD *)a2 + 89);
  *((_QWORD *)this + 180) = *((_QWORD *)a2 + 180);
  *((_OWORD *)this + 89) = v9;
  v10 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)((char *)this + 1448) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)this + 183) = *(_QWORD *)(v10 + 16);
  *((_OWORD *)this + 92) = *(_OWORD *)v10;
  *((_QWORD *)this + 186) = *(_QWORD *)(v10 + 16);
  *((_DWORD *)this + 374) = *((_DWORD *)a2 + 374);
  *((_BYTE *)this + 1500) = *((_BYTE *)a2 + 1500);
  OZGuideSet::OZGuideSet((OZScene *)((char *)this + 1512));
  *((_QWORD *)this + 196) = 0;
  *((_OWORD *)this + 97) = 0u;
  *(_WORD *)((char *)this + 1577) = 256;
  *((_QWORD *)this + 198) = a3;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 1596));
  PCMutex::PCMutex((PCMutex *)((char *)this + 1616));
  *((_QWORD *)this + 213) = 0;
  *((_QWORD *)this + 212) = 0;
  *((_QWORD *)this + 211) = (char *)this + 1696;
  *((_DWORD *)this + 428) = 0;
  *((_QWORD *)this + 215) = (char *)this + 1720;
  *((_QWORD *)this + 216) = (char *)this + 1720;
  *((_QWORD *)this + 217) = 0;
  *((_QWORD *)this + 220) = 0;
  *((_QWORD *)this + 219) = 0;
  *((_QWORD *)this + 218) = (char *)this + 1752;
  v11 = atomic_load((unsigned __int8 *)a2 + 1776);
  *((_BYTE *)this + 1776) = v11 & 1;
  *((_DWORD *)this + 445) = *((_DWORD *)a2 + 445);
  *((_QWORD *)this + 224) = 0;
  *((_QWORD *)this + 225) = 0;
  *((_QWORD *)this + 223) = 0;
  *((_BYTE *)this + 1809) = 0;
  PCRenderModel::PCRenderModel((OZScene *)((char *)this + 1816), (const OZScene *)((char *)a2 + 1816));
  v13 = 0;
  *((_WORD *)this + 924) = 0;
  *((_QWORD *)this + 193) = 0;
  *((_BYTE *)this + 1576) = 0;
  *((_BYTE *)this + 1579) = 0;
  *((_QWORD *)this + 188) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_QWORD *)this + 232) = 0;
  *((_QWORD *)this + 234) = 0;
  *((_QWORD *)this + 233) = 0;
  *(_OWORD *)((char *)this + 1176) = *(_OWORD *)v10;
  *((_QWORD *)this + 149) = *(_QWORD *)(v10 + 16);
  *((_DWORD *)this + 398) = 0;
  *((_DWORD *)this + 443) = *((_DWORD *)a2 + 443);
  atomic_store(0, (unsigned __int8 *)this + 1808);
  if (!*(_BYTE *)(theApp + 80))
  {
    v14 = (OZPreferenceManager *)OZPreferenceManager::Instance(v12);
    RecordWhilePlayback = (OZPreferenceManager *)OZPreferenceManager::getRecordWhilePlayback(v14);
    if ((_DWORD)RecordWhilePlayback)
      *((_DWORD *)this + 398) |= 1u;
    v16 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordWhilePlayback);
    RecordingOptions = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v16);
    if ((_DWORD)RecordingOptions)
    {
      v18 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordingOptions);
      v19 = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v18);
      if ((_DWORD)v19 == 1)
      {
        v13 = *((_DWORD *)this + 398) & 0xFFFFFFF9 | 2;
LABEL_10:
        *((_DWORD *)this + 398) = v13;
        goto LABEL_11;
      }
      v20 = (OZPreferenceManager *)OZPreferenceManager::Instance(v19);
      v21 = OZPreferenceManager::getRecordingOptions(v20);
      v13 = *((_DWORD *)this + 398);
      if (v21 == 2)
      {
        v13 = v13 & 0xFFFFFFF9 | 4;
        goto LABEL_10;
      }
    }
    else
    {
      v13 = *((_DWORD *)this + 398);
    }
  }
LABEL_11:
  *((_DWORD *)this + 398) = v13 | *((_DWORD *)a2 + 398) & 0xFFFFFE68;
  *((_BYTE *)this + 1768) = 0;
  PCURL::PCURL((PCURL *)&v28, CFSTR("Project Node Name"));
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v22);
  v24 = (OZSceneNode *)OZProjectNode::create((OZProjectNode *)&v28, NextUniqueID);
  PCString::~PCString(&v28);
  v25 = (OZSceneList *)OZScene::addRootNode(this, v24);
  v26 = (uint64_t **)OZSceneList::instance(v25);
  OZSceneList::addScene(v26, this);
  *((_BYTE *)this + 152) = 1;
  *((_DWORD *)this + 36) = 0;
  OZChannelBase::setRangeName((OZChannelBase *)this, v27);
}

void sub_1B2E4F49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSpinLock *a10, uint64_t a11, OZChannelObjectRoot *a12, OZPublishSettings *a13, OZExportSettings *a14, std::mutex *a15, PCMutex *a16, std::mutex *a17, PCString a18)
{
  _QWORD *v18;
  _QWORD **v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  _QWORD **v23;
  _QWORD *v24;
  PCMutex *v25;
  void *v27;
  void *v28;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v20 + 1832));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v20 + 1824));
  v27 = *(void **)(v20 + 1784);
  if (v27)
  {
    *(_QWORD *)(v20 + 1792) = v27;
    operator delete(v27);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 1744, *v23);
  std::__list_imp<unsigned int>::clear(v18);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v20 + 1712));
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v20 + 1688, *v22);
  PCMutex::~PCMutex(v25);
  v28 = *(void **)(v20 + 1552);
  if (v28)
  {
    *(_QWORD *)(v20 + 1560) = v28;
    operator delete(v28);
  }
  std::__tree<OZGuide>::destroy(v20 + 1520, *(_QWORD **)(v20 + 1528));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v20 + 1296);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v20 + 1288));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 1264, *v21);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v20 + 1240, *v19);
  std::__list_imp<unsigned int>::clear(v24);
  OZChannelObjectRoot::~OZChannelObjectRoot(a12);
  OZPublishSettings::~OZPublishSettings(a13);
  OZExportSettings::~OZExportSettings(a14);
  *(_QWORD *)(v20 + 336) = &off_1E658F368;
  PCString::~PCString((PCString *)(v20 + 520));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v20 + 464));
  PCSharedMutex::~PCSharedMutex(a15);
  PCMutex::~PCMutex(a16);
  PCSharedMutex::~PCSharedMutex(a17);
  _Unwind_Resume(a1);
}

void OZScene::~OZScene(OZScene *this)
{
  OZSceneList *v2;
  OZRenderManager *v3;
  uint64_t *v4;
  OZSceneNode *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = &off_1E65934F8;
  *((_QWORD *)this + 1) = &unk_1E65935A0;
  *((_BYTE *)this + 1848) = 1;
  *((_BYTE *)this + 1578) = 0;
  v2 = OZSceneList::instance(this);
  OZSceneList::removeScene(v2, this);
  OZScene::clearLockingGroups(this);
  v3 = (OZRenderManager *)*((_QWORD *)this + 188);
  if (v3)
  {
    OZRenderManager::~OZRenderManager(v3);
    MEMORY[0x1B5E29170]();
    *((_QWORD *)this + 188) = 0;
  }
  while (1)
  {
    v7 = *((_QWORD *)this + 152);
    if (!v7)
      break;
    v4 = (uint64_t *)*((_QWORD *)this + 151);
    v5 = (OZSceneNode *)v4[2];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = v4[1];
    *(_QWORD *)v4[1] = v6;
    *((_QWORD *)this + 152) = v7 - 1;
    operator delete(v4);
    OZScene::unregisterNode(this, v5);
    OZScene::removeAllDependencies(this, v5);
    if (v5)
      (*(void (**)(OZSceneNode *))(*(_QWORD *)v5 + 8))(v5);
  }
  v8 = (uint64_t **)((char *)this + 1264);
  while (*((_QWORD *)this + 160))
  {
    v9 = *v8;
    v10 = (*v8)[5];
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, *v8);
    operator delete(v9);
    if (v10)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v10, *(_QWORD **)(v10 + 8));
      MEMORY[0x1B5E29170](v10, 0x1020C4062D53EE8);
    }
  }
  OZScene::destroyObjectiveCClasses((id *)this);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 229);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 228);
  v11 = (void *)*((_QWORD *)this + 223);
  if (v11)
  {
    *((_QWORD *)this + 224) = v11;
    operator delete(v11);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1744, *((_QWORD **)this + 219));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 215);
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 428);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy((uint64_t)this + 1688, *((_QWORD **)this + 212));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 1616));
  v12 = (void *)*((_QWORD *)this + 194);
  if (v12)
  {
    *((_QWORD *)this + 195) = v12;
    operator delete(v12);
  }
  std::__tree<OZGuide>::destroy((uint64_t)this + 1520, *((_QWORD **)this + 191));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)this + 1296);
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 322);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1264, *((_QWORD **)this + 159));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1240, *((_QWORD **)this + 156));
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 150);
  OZChannelObjectRoot::~OZChannelObjectRoot((OZScene *)((char *)this + 920));
  OZPublishSettings::~OZPublishSettings((OZScene *)((char *)this + 720));
  OZExportSettings::~OZExportSettings((OZScene *)((char *)this + 640));
  *((_QWORD *)this + 42) = &off_1E658F368;
  PCString::~PCString((PCString *)this + 65);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 58);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 232));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 160));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 40));
}

{
  OZScene::~OZScene(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSceneList::removeScene(OZSceneList *this, OZScene *a2)
{
  PCMutex *v3;
  OZScene *v5;

  v5 = a2;
  v3 = (PCMutex *)((char *)this + 8);
  PCMutex::lock((PCMutex *)((char *)this + 8));
  std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)this + 80, (unint64_t *)&v5);
  return PCMutex::unlock(v3);
}

void sub_1B2E4F8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZScene::clearLockingGroups(OZScene *this)
{
  std::mutex *v2;
  OZLockingGroup **v3;
  OZLockingGroup **v4;
  uint64_t v5;
  _QWORD *v6;
  OZLocking *v7;
  _QWORD *v8;
  _QWORD *i;
  const void *v10;
  OZLocking *v11;
  _OWORD v12[2];
  int v13;
  _QWORD v14[3];
  char v15;
  _OWORD v16[2];
  int v17;

  v2 = (std::mutex *)((char *)this + 40);
  PCSharedMutex::lock((std::mutex *)((char *)this + 40));
  v3 = (OZLockingGroup **)*((_QWORD *)this + 223);
  v4 = (OZLockingGroup **)*((_QWORD *)this + 224);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
      {
        OZLockingGroup::~OZLockingGroup(*v3);
        MEMORY[0x1B5E29170]();
      }
      ++v3;
    }
    while (v3 != v4);
    v3 = (OZLockingGroup **)*((_QWORD *)this + 223);
  }
  *((_QWORD *)this + 224) = v3;
  v5 = *((_QWORD *)this + 151);
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v14[0] = v5;
  v14[1] = v5;
  v14[2] = (char *)this + 1200;
  v15 = 0;
  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  while ((OZScene *)v14[0] != (OZScene *)((char *)this + 1200))
  {
    v6 = *(_QWORD **)(v14[0] + 16);
    if (v7)
      OZLocking::reset(v7);
    v8 = v6 + 125;
    for (i = (_QWORD *)v6[126]; i != v8; i = (_QWORD *)i[1])
    {
      v10 = (const void *)i[2];
      if (v10)
      {
        if (v11)
          OZLocking::reset(v11);
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v14);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  PCSharedMutex::unlock(v2);
}

void sub_1B2E4FA38(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

OZObjectManipulator ***OZScene::unregisterNode(OZScene *this, OZSceneNode *a2)
{
  unint64_t v4;
  char *v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  OZObjectManipulator *v14;
  _QWORD *j;
  uint64_t v16;
  OZObjectManipulator *v17;
  uint64_t k;
  OZSceneNode *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;

  (*(void (**)(OZSceneNode *, OZScene *))(*(_QWORD *)a2 + 872))(a2, this);
  if (OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, *((_DWORD *)a2 + 20)))
  {
    v4 = *(_QWORD *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2) + 8);
    v24 = xmmword_1B30541C0;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v24))
    {
      if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)a2 + 248))(a2)
        && (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2))
      {
        --*((_DWORD *)this + 443);
      }
    }
  }
  OZScene::OZNodeMap::removeNode((os_unfair_lock_s *)this + 322, (OZSceneNode *)((char *)a2 + 16));
  v5 = (char *)*((_QWORD *)this + 159);
  if (v5)
  {
    v6 = *((_DWORD *)a2 + 20);
    v7 = (char *)this + 1272;
    do
    {
      v8 = *((_DWORD *)v5 + 8);
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = (char **)v5;
      else
        v10 = (char **)(v5 + 8);
      if (v9)
        v7 = v5;
      v5 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 1272 && v6 >= *((_DWORD *)v7 + 8))
    {
      v11 = *((_QWORD *)v7 + 5);
      std::__tree<unsigned int>::erase((uint64_t **)v11, *(uint64_t **)v11, (uint64_t *)(v11 + 8));
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, (uint64_t *)v7);
      operator delete(v7);
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(_QWORD **)(v11 + 8));
      MEMORY[0x1B5E29170](v11, 0x1020C4062D53EE8);
    }
  }
  for (i = (_QWORD *)*((_QWORD *)a2 + 123); i != (_QWORD *)((char *)a2 + 976); i = (_QWORD *)i[1])
  {
    v13 = i[2];
    if (v13)
      v14 = (OZObjectManipulator *)(v13 + 48);
    else
      v14 = 0;
    OZScene::unregisterObject(this, v14);
  }
  for (j = (_QWORD *)*((_QWORD *)a2 + 126); j != (_QWORD *)((char *)a2 + 1000); j = (_QWORD *)j[1])
  {
    v16 = j[2];
    if (v16)
      v17 = (OZObjectManipulator *)(v16 + 16);
    else
      v17 = 0;
    OZScene::unregisterObject(this, v17);
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)a2 + 1056))(a2))
  {
    for (k = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 1104))(a2);
          k != (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 1112))(a2);
          k = *(_QWORD *)(k + 8))
    {
      v19 = *(OZSceneNode **)(k + 16);
      OZScene::unregisterNode(this, v19);
      OZScene::removeAllDependencies(this, v19);
    }
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)a2 + 960))(a2))
  {
    v20 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 1032))(a2);
    v21 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 1024))(a2);
    if (v21 != v20)
    {
      v22 = v21;
      do
      {
        OZScene::unregisterNode(this, *(OZSceneNode **)(v22 + 16));
        v22 = *(_QWORD *)(v22 + 8);
      }
      while (v22 != v20);
    }
  }
  if (*((_BYTE *)this + 1578))
    atomic_store(1u, (unsigned __int8 *)this + 1808);
  if (*((OZSceneNode **)this + 153) == a2)
  {
    OZScene::clearSelection(this);
    *((_QWORD *)this + 153) = 0;
  }
  if (*((OZSceneNode **)this + 154) == a2)
    *((_QWORD *)this + 154) = 0;
  return OZScene::removeObjectFromLoadObjectsWithDuplicateIDs((OZObjectManipulator ***)this, (OZSceneNode *)((char *)a2 + 16));
}

OZScene *OZScene::removeAllDependencies(OZScene *this, OZSceneNode *a2)
{
  OZScene *v3;
  OZChannelFolder *v4;

  if (a2)
  {
    v3 = this;
    OZScene::removeAllDependencies(this, *((_DWORD *)a2 + 20));
    v4 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    return OZScene::removeAllDependencies(v3, v4, *((_DWORD *)a2 + 20));
  }
  return this;
}

void `non-virtual thunk to'OZScene::~OZScene(OZScene *this)
{
  OZScene::~OZScene((OZScene *)((char *)this - 8));
}

{
  OZScene::~OZScene((OZScene *)((char *)this - 8));
  JUMPOUT(0x1B5E29170);
}

double OZScene::getTimeForFrame@<D0>(OZScene *this@<X0>, double a2@<D0>, __n128 *a3@<X8>)
{
  double result;

  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), a3);
  result = (double)a3->n128_i64[0] * a2;
  a3->n128_u64[0] = (uint64_t)result;
  return result;
}

__n128 OZScene::getSceneSettings(OZScene *this, OZExportSettings *a2)
{
  uint64_t v3;
  int v4;
  __n128 result;

  v3 = *(_QWORD *)(*((_QWORD *)this + 198) + 8 * *(int *)(*(_QWORD *)(*((_QWORD *)this + 198) + 224) + 12) + 192);
  *((_DWORD *)a2 + 4) = *(_DWORD *)(v3 + 32);
  *((_BYTE *)a2 + 32) = 1;
  OZExportSettings::setRenderQuality((uint64_t)a2, *(_DWORD *)(v3 + 64));
  *((_DWORD *)a2 + 10) = *(_DWORD *)(v3 + 68);
  *((_BYTE *)a2 + 44) = *(_BYTE *)(v3 + 72);
  *(_WORD *)((char *)a2 + 45) = *(_WORD *)(v3 + 73);
  *((_QWORD *)a2 + 6) = 0x200000002;
  v4 = *(_DWORD *)(v3 + 240);
  *((_DWORD *)a2 + 14) = 2;
  *((_DWORD *)a2 + 15) = v4;
  result.n128_u64[0] = 0x200000002;
  result.n128_u64[1] = 0x200000002;
  *((__n128 *)a2 + 4) = result;
  return result;
}

uint64_t OZScene::isChannelPublished(OZScene *this, OZChannelBase *a2)
{
  return OZPublishSettings::isChannelPublished((OZScene *)((char *)this + 720), a2);
}

void *OZScene::getNode(OZScene *this, unsigned int a2)
{
  void *result;

  result = (void *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a2);
  if (result)
  return result;
}

float64x2_t OZScene::getSceneBounds(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2;
  int64x2_t v3;
  float64x2_t result;

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 344);
    v3.i64[0] = (int)v2;
    v3.i64[1] = SHIDWORD(v2);
    result = vcvtq_f64_s64(v3);
    __asm { FMOV            V1.2D, #-0.5 }
    *a2 = vmulq_f64(result, _Q1);
    a2[1] = result;
  }
  return result;
}

void OZScene::setTimeRange(OZScene *this, const PCTimeRange *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned int Seconds;
  __n128 v7;
  CMTime time;
  __n128 v9;
  uint64_t v10;

  if ((OZScene *)((char *)this + 1352) != a2)
  {
    v4 = *(_OWORD *)a2;
    *((_QWORD *)this + 171) = *((_QWORD *)a2 + 2);
    *(_OWORD *)((char *)this + 1352) = v4;
    v5 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 174) = *((_QWORD *)a2 + 5);
    *((_OWORD *)this + 86) = v5;
  }
  if (*((double *)this + 46) <= 0.0)
    goto LABEL_8;
  if ((*((_DWORD *)a2 + 9) & 0x1D) != 1
    || (OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v9), (v9.n128_u8[12] & 0x1D) != 1))
  {
    puts("OZScene::setTimeRange range is not numeric, setting num frames to 1.");
LABEL_8:
    Seconds = 1;
    goto LABEL_9;
  }
  v9 = *(__n128 *)((char *)a2 + 24);
  v10 = *((_QWORD *)a2 + 5);
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v7);
  operator/((__int128 *)&v9, (uint64_t)&v7, (uint64_t)&time);
  Seconds = CMTimeGetSeconds(&time);
LABEL_9:
  *((_DWORD *)this + 88) = Seconds;
}

uint64_t OZScene::getPlayRange(OZScene *this)
{
  if (*((_DWORD *)this + 8) == -1)
    return (uint64_t)this + 1400;
  else
    return (uint64_t)this + 1448;
}

__n128 OZScene::setPlayRange(__n128 *this, const PCTimeRange *a2)
{
  __n128 v2;
  __n128 result;
  __n128 v4;

  if (this[2].n128_u32[0] == -1)
  {
    if (&this[87].n128_i8[8] != (__int8 *)a2)
    {
      v4 = *(__n128 *)a2;
      this[88].n128_u64[1] = *((_QWORD *)a2 + 2);
      *(__n128 *)((char *)this + 1400) = v4;
      result = *(__n128 *)((char *)a2 + 24);
      this[90].n128_u64[0] = *((_QWORD *)a2 + 5);
      this[89] = result;
    }
  }
  else if (&this[90].n128_i8[8] != (__int8 *)a2)
  {
    v2 = *(__n128 *)a2;
    this[91].n128_u64[1] = *((_QWORD *)a2 + 2);
    *(__n128 *)((char *)this + 1448) = v2;
    result = *(__n128 *)((char *)a2 + 24);
    this[93].n128_u64[0] = *((_QWORD *)a2 + 5);
    this[92] = result;
  }
  return result;
}

__n128 OZScene::getCurrentTime@<Q0>(OZScene *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2[1].n128_u64[0] = *((_QWORD *)this + 149);
  result = *(__n128 *)((char *)this + 1176);
  *a2 = result;
  return result;
}

uint64_t OZScene::setTargetDisplayAspectRatio(uint64_t this, double a2, int a3, BOOL *a4)
{
  int v5;
  double v6;
  double v7;
  double v8;
  unsigned int v9;
  char v10;

  v5 = *(_DWORD *)(this + 344);
  v6 = *(double *)(this + 384);
  v7 = (float)*(int *)(this + 348);
  v8 = v6 * (float)v5 / v7;
  if (vabdd_f64(a2, v8) >= 0.0000001)
  {
    v9 = vcvtmd_s64_f64(v7 * a2 / v6 + 0.5 + 0.0000001);
    if (v5 == v9)
    {
      if (a4)
        goto LABEL_3;
      return this;
    }
    if (a4)
      *a4 = 1;
    if (*(_BYTE *)(this + 568))
    {
      if (*(_DWORD *)(this + 572) != v9)
      {
LABEL_14:
        *(_DWORD *)(this + 344) = v9;
        return OZScene::targetDisplayAspectRatioHasChanged((OZScene *)this, v8, a2, a3);
      }
      v10 = 0;
    }
    else
    {
      *(_DWORD *)(this + 572) = v5;
      v10 = 1;
    }
    *(_BYTE *)(this + 568) = v10;
    goto LABEL_14;
  }
  if (a4)
LABEL_3:
    *a4 = 0;
  return this;
}

uint64_t OZScene::targetDisplayAspectRatioHasChanged(OZScene *this, double a2, double a3, int a4)
{
  uint64_t v8;
  const void *v9;
  OZImageElement *v10;
  uint64_t v11;
  uint64_t v12;
  OZRigWidgetAspectRatio **v13;
  _OWORD v15[2];
  __n128 *v16[4];
  int v17;
  _BYTE v18[25];
  __int128 v19;
  __int128 v20;
  int v21;
  _BYTE v22[25];
  _QWORD v23[4];
  int v24;
  _BYTE v25[25];
  __int128 v26;
  __int128 v27;
  int v28;
  _BYTE v29[25];
  _QWORD v30[4];
  int v31;
  _BYTE v32[25];
  _QWORD v33[4];
  int v34;

  memset(v33, 0, sizeof(v33));
  memset(v32, 0, 24);
  v34 = 1065353216;
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, 24);
  v31 = 1065353216;
  OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v25);
  *(_OWORD *)v32 = *(_OWORD *)v25;
  *(_OWORD *)&v32[9] = *(_OWORD *)&v25[9];
  v34 = v28;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v33, (__n128 *)v27, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  v8 = *((_QWORD *)this + 151);
  v26 = 0u;
  v27 = 0u;
  v28 = 1065353216;
  *(_QWORD *)v25 = (char *)this + 1200;
  *(_QWORD *)&v25[8] = v8;
  *(_QWORD *)&v25[16] = (char *)this + 1200;
  v25[24] = 0;
  *(_OWORD *)v29 = *(_OWORD *)v25;
  *(_OWORD *)&v29[9] = *(_OWORD *)&v25[9];
  v31 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v30, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  while (*(_QWORD *)v32 != *(_QWORD *)v29)
  {
    if (*(_QWORD *)v32 == *(_QWORD *)&v32[16] || (v9 = *(const void **)(*(_QWORD *)v32 + 16)) == 0)
      v10 = 0;
    else
    if ((OZImageElement::isInputSource(v10) & 1) != 0
      || OZImageElement::isPassthroughPlaceholder(v10)
      || OZImageElement::isBackgroundDropZone(v10) && OZImageElement::useDisplayAspect(v10)
      || OZImageElement::resizeToMatchInputSource(v10))
    {
      OZImageElement::resetFitModeToSceneDims(v10, a2, a3);
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)v32);
  }
  v26 = 0u;
  v27 = 0u;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, 24);
  v24 = 1065353216;
  v11 = *((_QWORD *)this + 151);
  v19 = 0u;
  v20 = 0u;
  v21 = 1065353216;
  *(_QWORD *)v18 = v11;
  *(_QWORD *)&v18[8] = v11;
  *(_QWORD *)&v18[16] = (char *)this + 1200;
  v18[24] = 0;
  *(_OWORD *)&v25[9] = *(_OWORD *)&v18[9];
  *(_OWORD *)v25 = *(_OWORD *)v18;
  v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v26, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  v12 = *((_QWORD *)this + 151);
  v19 = 0u;
  v20 = 0u;
  v21 = 1065353216;
  *(_QWORD *)v18 = (char *)this + 1200;
  *(_QWORD *)&v18[8] = v12;
  *(_QWORD *)&v18[16] = (char *)this + 1200;
  v18[24] = 0;
  *(_OWORD *)v22 = *(_OWORD *)v18;
  *(_OWORD *)&v22[9] = *(_OWORD *)&v18[9];
  v24 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v23, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  while (*(_QWORD *)v25 != *(_QWORD *)v22)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v25 + 16) + 912))(*(_QWORD *)(*(_QWORD *)v25 + 16));
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v25);
  }
  v19 = 0u;
  v20 = 0u;
  memset(v18, 0, 24);
  v21 = 1065353216;
  OZScene::begin_t<OZProjectNode,false,true>((uint64_t *)this, (uint64_t)v15);
  *(_OWORD *)v18 = v15[0];
  *(_OWORD *)&v18[9] = *(_OWORD *)((char *)v15 + 9);
  v21 = v17;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v19, v16[2], 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  OZRigWidgetAspectRatio::setTargetDisplayAspectRatio(v13[136], a3, a4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v30);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v33);
}

void sub_1B2E504AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setTargetDisplayAspectRatioWithNativeSize(uint64_t this, double a2, double a3, double a4, int a5)
{
  int v6;
  double v7;
  int v8;
  int v9;

  v6 = *(_DWORD *)(this + 344);
  v7 = *(double *)(this + 384);
  v8 = *(_DWORD *)(this + 348);
  if (a2 <= 1.0)
    a3 = floor(a2 * a4 / v7 + 0.5 + 0.0000001);
  else
    a4 = floor(a3 / a2 / v7 + 0.5 + 0.0000001);
  v9 = (int)a4;
  if (v6 != (int)a3 || v8 != v9)
  {
    *(_DWORD *)(this + 344) = (int)a3;
    *(_DWORD *)(this + 348) = v9;
    return OZScene::targetDisplayAspectRatioHasChanged((OZScene *)this, v7 * (float)v6 / (float)v8, a2, a5);
  }
  return this;
}

uint64_t *OZScene::begin_t<OZImageElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E50650(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *OZScene::begin_t<OZProjectNode,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZProjectNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZProjectNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E50760(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setCurrentObject(OZScene *this, OZSceneNode *a2)
{
  uint64_t result;

  result = OZScene::clearSelection(this);
  if (a2)
    result = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 688))(a2);
  *((_QWORD *)this + 153) = a2;
  return result;
}

uint64_t OZScene::clearSelection(OZScene *this)
{
  OZNotificationManager *v2;
  _OWORD v4[2];
  int v5;
  _QWORD v6[4];
  uint64_t v7;

  OZScene::begin_sel(this, (uint64_t)v6);
  memset(v4, 0, sizeof(v4));
  v5 = 1065353216;
  while ((OZScene *)v6[0] != (OZScene *)((char *)this + 1200))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v6[0] + 16) + 696))(*(_QWORD *)(v6[0] + 16));
    OZObject::iterator_t<OZSceneNode,true,true,OZObject::defaultValidator>::operator++(v6);
  }
  v2 = *(OZNotificationManager **)(*((_QWORD *)this + 198) + 168);
  if (v2)
    OZNotificationManager::clearLastModifiedChannels(v2);
  *((_QWORD *)this + 153) = 0;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v7);
}

void sub_1B2E5085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setActiveLayer(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1232) = a2;
  return result;
}

uint64_t *OZScene::begin_all_sel@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  OZChannelBase *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v3 = (uint64_t *)this[151];
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 80) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = this + 150;
  *(_DWORD *)(a2 + 40) = 0;
  if (v3 == this + 150)
    return this;
  v4 = v3[2];
  if (v4)
  {
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 16) + 216))(v4 + 16);
    if (this)
    {
      v5 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 16) + 216))(v4 + 16);
      this = (uint64_t *)OZChannelBase::testFlag(v5, 1);
      if (!(_DWORD)this)
        return OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::operator++((uint64_t *)a2);
    }
  }
  v6 = *(_DWORD *)(a2 + 40);
  if (v6 < 2)
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 16))
      goto LABEL_10;
    return OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::operator++((uint64_t *)a2);
  }
  if (v6 != 2)
  {
    if (v6 == 3)
    {
      v7 = *(_QWORD *)(a2 + 32);
LABEL_10:
      v8 = *(_QWORD *)(v7 + 16);
      v9 = v8 + 16;
      goto LABEL_12;
    }
    return OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::operator++((uint64_t *)a2);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  v9 = v8 + 48;
LABEL_12:
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  if (v4)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
    return OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::operator++((uint64_t *)a2);
  return this;
}

void sub_1B2E50998(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

double OZScene::end_all_sel@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 151);
  result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 80) = 1065353216;
  *(_QWORD *)a2 = (char *)this + 1200;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = (char *)this + 1200;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

OZScene *OZScene::selectObject(OZScene *this, OZObjectManipulator *a2, char a3, char a4)
{
  OZScene *v7;
  uint64_t v8;
  uint64_t v9;
  OZChannelFolder *v10;
  OZScene *v11;

  if (!a2)
    return this;
  v7 = this;
  if ((a3 & 1) == 0)
    OZScene::clearSelection(this);
  (*(void (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 304))(a2);
  if (this)
  {
    v8 = 40;
LABEL_8:
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v8))();
    v10 = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 640))(v9);
    this = (OZScene *)OZChannelFolder::setFoldFlag(v10, 0x2000);
    goto LABEL_9;
  }
  if (this)
  {
    v8 = 31;
    goto LABEL_8;
  }
LABEL_9:
  *((_QWORD *)v7 + 153) = 0;
  if ((a3 & 1) == 0)
  {
    this = (OZScene *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 232))(a2);
    *((_QWORD *)v7 + 153) = this;
    if ((a4 & 1) == 0)
    {
      v11 = this;
      if (this
      {
LABEL_15:
        *((_QWORD *)v7 + 154) = this;
      }
      else
      {
        while (1)
        {
          v11 = (OZScene *)*((_QWORD *)v11 + 120);
          if (!v11)
            break;
          if (this)
            goto LABEL_15;
        }
      }
    }
  }
  return this;
}

_QWORD *OZScene::begin_sel@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = this[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = this + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if ((_QWORD *)v3 != this + 150)
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 680))(*(_QWORD *)(v3 + 16));
    if (!(_DWORD)this || *(_QWORD *)a2 == *(_QWORD *)(a2 + 16) || !*(_QWORD *)(*(_QWORD *)a2 + 16))
      return OZObject::iterator_t<OZSceneNode,true,true,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return this;
}

void sub_1B2E50B94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

double OZScene::end_sel@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 151);
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = (char *)this + 1200;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = (char *)this + 1200;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t OZScene::startCaptureModifiedChannels(OZScene *this, const PCString *a2)
{
  return OZDocument::startCaptureModifiedChannels(*((_QWORD *)this + 198), a2);
}

OZChannelBase *OZScene::endCaptureModifiedChannels(OZChannelBase **this, const PCString *a2)
{
  return OZDocument::endCaptureModifiedChannels(this[198], a2);
}

uint64_t OZScene::updateSoloFlag(OZScene *this, OZSceneNode *a2)
{
  uint64_t v3;
  OZSceneNode *v4;
  uint64_t v5;
  OZChannelBase *v6;
  uint64_t v7;
  OZSceneNode *v8;
  int v9;
  uint64_t v10;
  OZChannelBase *v11;
  _BYTE v13[25];
  __int128 v14;
  __int128 v15;
  int v16;
  _BYTE v17[25];
  _OWORD v18[2];
  int v19;
  _BYTE v20[25];
  __int128 v21;
  __int128 v22;
  int v23;
  _BYTE v24[25];
  _QWORD v25[4];
  int v26;
  _BYTE v27[25];
  _QWORD v28[4];
  int v29;

  memset(v28, 0, sizeof(v28));
  memset(v27, 0, 24);
  v29 = 1065353216;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, 24);
  v26 = 1065353216;
  OZScene::begin_v<OZSceneNode,false,true,OZSoloChildNodeValidator>(this, a2, (uint64_t)v20);
  *(_OWORD *)v27 = *(_OWORD *)v20;
  *(_OWORD *)&v27[9] = *(_OWORD *)&v20[9];
  v29 = v23;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v28, (__n128 *)v22, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  v3 = *((_QWORD *)this + 151);
  v21 = 0u;
  v22 = 0u;
  v23 = 1065353216;
  *(_QWORD *)v20 = (char *)this + 1200;
  *(_QWORD *)&v20[8] = v3;
  *(_QWORD *)&v20[16] = (char *)this + 1200;
  v20[24] = 0;
  *(_OWORD *)v24 = *(_OWORD *)v20;
  *(_OWORD *)&v24[9] = *(_OWORD *)&v20[9];
  v26 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v25, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  while (*(_QWORD *)v27 != *(_QWORD *)v24)
  {
    if (*(_QWORD *)v27 != *(_QWORD *)&v27[16])
    {
      v5 = *(_QWORD *)(*(_QWORD *)v27 + 16);
      if (v5)
      {
        v6 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 640))(v5);
        OZChannelBase::resetFlag(v6, 0x100000, 0);
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++(v27, v4);
  }
  v21 = 0u;
  v22 = 0u;
  memset(v20, 0, 24);
  v23 = 1065353216;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, 24);
  v19 = 1065353216;
  OZScene::begin_v<OZSceneNode,false,true,OZSoloNodeValidator>((uint64_t)this, v4, (uint64_t)v13);
  *(_OWORD *)v20 = *(_OWORD *)v13;
  *(_OWORD *)&v20[9] = *(_OWORD *)&v13[9];
  v23 = v16;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v21, (__n128 *)v15, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v14);
  v7 = *((_QWORD *)this + 151);
  v14 = 0u;
  v15 = 0u;
  v16 = 1065353216;
  *(_QWORD *)v13 = (char *)this + 1200;
  *(_QWORD *)&v13[8] = v7;
  *(_QWORD *)&v13[16] = (char *)this + 1200;
  v13[24] = 0;
  *(_OWORD *)v17 = *(_OWORD *)v13;
  *(_OWORD *)&v17[9] = *(_OWORD *)&v13[9];
  v19 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v18, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v14);
  v9 = *((_DWORD *)this + 398);
  if (*(_QWORD *)v20 == *(_QWORD *)v17)
  {
    *((_DWORD *)this + 398) = v9 & 0xFFFFFFDF;
  }
  else
  {
    *((_DWORD *)this + 398) = v9 | 0x20;
    while (*(_QWORD *)v20 != *(_QWORD *)v17)
    {
      if (*(_QWORD *)v20 != *(_QWORD *)&v20[16])
      {
        v10 = *(_QWORD *)(*(_QWORD *)v20 + 16);
        if (v10)
        {
          v11 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
          OZChannelBase::setChildSolo(v11, 1);
        }
      }
      OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++(v20, v8);
    }
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v28);
}

void sub_1B2E50E84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::begin_v<OZSceneNode,false,true,OZSoloNodeValidator>@<X0>(uint64_t result@<X0>, OZSceneNode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  OZChannelBase *v6;

  v4 = *(_QWORD *)(result + 1208);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 1065353216;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = result + 1200;
  *(_BYTE *)(a3 + 24) = 0;
  if (v4 != result + 1200)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (!v5)
      return (uint64_t)OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++((_QWORD *)a3, a2);
    v6 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 640))(v5);
    result = OZChannelBase::isSolo(v6);
    if ((result & 1) == 0)
      return (uint64_t)OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++((_QWORD *)a3, a2);
  }
  return result;
}

void sub_1B2E50F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++(_QWORD *a1, OZSceneNode *a2)
{
  _QWORD *i;
  uint64_t v3;
  OZChannelBase *v4;

  for (i = a1; ; a1 = i)
  {
    OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::increment(a1, a2);
    if (*i == i[2])
      break;
    v3 = *(_QWORD *)(*i + 16);
    if (v3)
    {
      v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 640))(v3);
      if ((OZChannelBase::isSolo(v4) & 1) != 0)
        break;
    }
  }
  return i;
}

_QWORD *OZScene::begin_v<OZSceneNode,false,true,OZSoloChildNodeValidator>@<X0>(_QWORD *result@<X0>, OZSceneNode *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  OZChannelBase *v6;

  v4 = (_QWORD *)result[151];
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 1065353216;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = result + 150;
  *(_BYTE *)(a3 + 24) = 0;
  if (v4 != result + 150)
  {
    v5 = v4[2];
    if (!v5)
      return OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++((_QWORD *)a3, a2);
    v6 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 640))(v5);
    result = (_QWORD *)OZChannelBase::testFlag(v6, 0x100000);
    if ((result & 1) == 0)
      return OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++((_QWORD *)a3, a2);
  }
  return result;
}

void sub_1B2E51058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++(_QWORD *a1, OZSceneNode *a2)
{
  _QWORD *i;
  uint64_t v3;
  OZChannelBase *v4;

  for (i = a1; ; a1 = i)
  {
    OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::increment(a1, a2);
    if (*i == i[2])
      break;
    v3 = *(_QWORD *)(*i + 16);
    if (v3)
    {
      v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 640))(v3);
      if (OZChannelBase::testFlag(v4, 0x100000))
        break;
    }
  }
  return i;
}

void *OZScene::addRootNodeAfter(OZScene *this, OZSceneNode *a2, OZSceneNode *a3)
{
  void *result;
  char *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  const OZChannelBase *v12;
  OZChannelBase *v13;

  result = OZScene::getNode(this, *((_DWORD *)a2 + 20));
  if (!result)
  {
    v7 = (char *)*((_QWORD *)this + 151);
    if (!a3)
      a3 = (OZSceneNode *)*((_QWORD *)v7 + 2);
    v8 = (char *)this + 1200;
    if (v7 != (char *)this + 1200)
    {
      while (*((OZSceneNode **)v7 + 2) != a3)
      {
        v7 = (char *)*((_QWORD *)v7 + 1);
        if (v7 == v8)
          goto LABEL_10;
      }
    }
    if (v7 != v8)
    {
      v9 = (uint64_t *)*((_QWORD *)v7 + 1);
      v10 = operator new(0x18uLL);
      v10[2] = a2;
      v11 = *v9;
      *(_QWORD *)(v11 + 8) = v10;
      *v10 = v11;
      *v9 = (uint64_t)v10;
      v10[1] = v9;
      ++*((_QWORD *)this + 152);
      v12 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
      v13 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
      OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 920), v12, v13);
    }
LABEL_10:
    OZScene::registerNode(this, a2);
    return (void *)OZScene::addAllDependencies((uint64_t)this, a2);
  }
  return result;
}

void *OZScene::registerNode(OZScene *this, OZSceneNode *a2)
{
  os_unfair_lock_s *v4;
  OZSceneNode *v5;
  OZSceneNode *v6;
  BOOL v7;
  char *v8;
  char **v9;
  char **v10;
  char **v11;
  char **v12;
  void *result;
  OZObjectManipulator *v14;
  unint64_t v15;
  _QWORD *i;
  uint64_t v17;
  OZObjectManipulator *v18;
  _QWORD *j;
  uint64_t v20;
  OZObjectManipulator *v21;
  uint64_t k;
  OZSceneNode *v23;
  OZSceneNode *v24;
  OZChannelBase *v25;
  OZChannelBase *ObjectManipulator;
  const PCString *v27;
  OZChannelBase *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char **v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  _OWORD v41[2];
  __n128 *v42[4];
  int v43;
  uint64_t v44[4];
  uint64_t v45;
  _BYTE v46[25];
  _OWORD v47[2];
  int v48;

  v4 = (os_unfair_lock_s *)((char *)this + 1288);
  v5 = (OZSceneNode *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, *((_DWORD *)a2 + 20));
  v6 = v5;
  if (*((_BYTE *)this + 1576))
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_12;
  v8 = (char *)a2 + 16;
  if (v5 == (OZSceneNode *)((char *)a2 + 16))
    goto LABEL_13;
  v9 = (char **)*((_QWORD *)this + 195);
  v10 = (char **)*((_QWORD *)this + 194);
  if (v10 == v9)
  {
LABEL_10:
    v11 = (char **)*((_QWORD *)this + 195);
  }
  else
  {
    v11 = (char **)*((_QWORD *)this + 194);
    v12 = v11;
    while (*v12 != v8)
    {
      ++v12;
      ++v11;
      if (v12 == v9)
        goto LABEL_10;
    }
  }
  if (v9 == v11)
  {
    v29 = *((_QWORD *)this + 196);
    if ((unint64_t)v9 >= v29)
    {
      v31 = v9 - v10;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v32 = v29 - (_QWORD)v10;
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1568, v34);
      else
        v35 = 0;
      v36 = (char **)&v35[8 * v31];
      v37 = &v35[8 * v34];
      *v36 = v8;
      v30 = v36 + 1;
      v38 = (char *)*((_QWORD *)this + 195);
      v39 = (char *)*((_QWORD *)this + 194);
      if (v38 != v39)
      {
        do
        {
          v40 = (char *)*((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = (char *)*((_QWORD *)this + 194);
      }
      *((_QWORD *)this + 194) = v36;
      *((_QWORD *)this + 195) = v30;
      *((_QWORD *)this + 196) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v9 = v8;
      v30 = v9 + 1;
    }
    *((_QWORD *)this + 195) = v30;
    if (v6)
    {
LABEL_13:
      if (result)
        return result;
    }
  }
  else
  {
LABEL_12:
    if (v5)
      goto LABEL_13;
  }
  if (a2)
    v14 = (OZSceneNode *)((char *)a2 + 16);
  else
    v14 = 0;
  OZScene::OZNodeMap::setNode(v4, v14);
  (*(void (**)(OZSceneNode *, OZScene *))(*(_QWORD *)a2 + 280))(a2, this);
  (*(void (**)(OZSceneNode *, OZScene *))(*(_QWORD *)a2 + 864))(a2, this);
  v15 = *(_QWORD *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2) + 8);
  *(_OWORD *)v46 = xmmword_1B30541C0;
  if (OZFactory::isKindOfClass(v15, (int32x4_t *)v46)
    && (*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)a2 + 248))(a2)
    && (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 664))(a2))
  {
    ++*((_DWORD *)this + 443);
  }
  for (i = (_QWORD *)*((_QWORD *)a2 + 123); i != (_QWORD *)((char *)a2 + 976); i = (_QWORD *)i[1])
  {
    v17 = i[2];
    if (v17)
      v18 = (OZObjectManipulator *)(v17 + 48);
    else
      v18 = 0;
    OZScene::registerObject(this, v18);
  }
  for (j = (_QWORD *)*((_QWORD *)a2 + 126); j != (_QWORD *)((char *)a2 + 1000); j = (_QWORD *)j[1])
  {
    v20 = j[2];
    if (v20)
      v21 = (OZObjectManipulator *)(v20 + 16);
    else
      v21 = 0;
    OZScene::registerObject(this, v21);
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)a2 + 1056))(a2))
  {
    for (k = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 1104))(a2);
          k != (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 1112))(a2);
          k = *(_QWORD *)(k + 8))
    {
      v23 = *(OZSceneNode **)(k + 16);
      OZScene::registerNode(this, v23);
      OZScene::addAllDependencies((uint64_t)this, v23);
    }
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)a2 + 960))(a2))
  {
    memset(v47, 0, sizeof(v47));
    memset(v46, 0, 24);
    v48 = 1065353216;
    OZSceneNode::end(a2, (uint64_t)v44);
    OZSceneNode::begin(a2, (uint64_t)v41);
    *(_OWORD *)v46 = v41[0];
    *(_OWORD *)&v46[9] = *(_OWORD *)((char *)v41 + 9);
    v48 = v43;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v47, v42[2], 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v42);
    while (*(_QWORD *)v46 != v44[0])
    {
      if (*(_QWORD *)v46 == *(_QWORD *)&v46[16])
        v24 = 0;
      else
        v24 = *(OZSceneNode **)(*(_QWORD *)v46 + 16);
      OZScene::registerNode(this, v24);
      OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v46);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v45);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v47);
  }
  if ((*(_BYTE *)((*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2) + 56) & 0x40) != 0)
  {
    if (!*(_BYTE *)(theApp + 80))
    {
      v25 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
      ObjectManipulator = (OZChannelBase *)OZChannelBase::getObjectManipulator(v25);
      OZChannelBase::setRangeName(ObjectManipulator, v27);
    }
    v28 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
    OZChannelBase::setNameUnset(v28, 0);
  }
  if (*((_BYTE *)this + 1578))
    atomic_store(1u, (unsigned __int8 *)this + 1808);
  return (void *)OZScene::sceneDidChange(this);
}

void sub_1B2E51600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  _Unwind_Resume(a1);
}

uint64_t OZScene::addAllDependencies(uint64_t this, OZSceneNode *a2)
{
  uint64_t v2;
  uint64_t v4;
  OZChannelFolder *v5;

  if (a2)
  {
    v2 = this;
    if ((*(_DWORD *)(this + 1592) & 0x10) == 0)
    {
      v4 = *((_QWORD *)a2 + 120);
      if (v4)
        OZScene::addNodeDependency(this, *((_DWORD *)a2 + 20), *(_DWORD *)(v4 + 80));
      v5 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
      return OZScene::addAllDependencies(v2, v5, *((_DWORD *)a2 + 20));
    }
  }
  return this;
}

void *OZScene::addRootNodeBefore(OZScene *this, OZSceneNode *a2, OZSceneNode *a3)
{
  void *result;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  const OZChannelBase *v12;
  OZChannelBase *v13;
  _QWORD *v14;
  uint64_t v15;
  OZChannelBase *v16;

  result = OZScene::getNode(this, *((_DWORD *)a2 + 20));
  if (!result)
  {
    if (!a3)
      goto LABEL_14;
    v7 = (char *)this + 1200;
    v8 = (char *)*((_QWORD *)this + 151);
    if (v8 == (char *)this + 1200)
    {
      v8 = (char *)this + 1200;
    }
    else
    {
      v9 = (char *)*((_QWORD *)this + 151);
      while (*((OZSceneNode **)v9 + 2) != a3)
      {
        v9 = (char *)*((_QWORD *)v9 + 1);
        if (v9 == v7)
        {
          v9 = (char *)this + 1200;
          break;
        }
      }
      if (v9 != v8)
      {
LABEL_12:
        if (v9 != v7)
        {
          v10 = operator new(0x18uLL);
          v10[2] = a2;
          v11 = *(_QWORD *)v9;
          *(_QWORD *)(v11 + 8) = v10;
          *v10 = v11;
          *(_QWORD *)v9 = v10;
          v10[1] = v9;
          ++*((_QWORD *)this + 152);
          v12 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a3 + 640))(a3);
          v13 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
          OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 920), v12, v13);
LABEL_15:
          OZScene::registerNode(this, a2);
          return (void *)OZScene::addAllDependencies((uint64_t)this, a2);
        }
LABEL_14:
        v14 = operator new(0x18uLL);
        v14[1] = (char *)this + 1200;
        v14[2] = a2;
        v15 = *((_QWORD *)this + 150);
        *v14 = v15;
        *(_QWORD *)(v15 + 8) = v14;
        *((_QWORD *)this + 150) = v14;
        ++*((_QWORD *)this + 152);
        v16 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
        OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 920), v16);
        goto LABEL_15;
      }
    }
    v9 = (char *)*((_QWORD *)v8 + 1);
    goto LABEL_12;
  }
  return result;
}

OZChannelFolder *OZScene::removeRootNode(OZScene *this, OZSceneNode *a2)
{
  OZSceneNode **v4;
  OZSceneNode **i;
  OZSceneNode *v6;
  OZChannelBase *v7;

  v4 = (OZSceneNode **)((char *)this + 1200);
  for (i = (OZSceneNode **)*((_QWORD *)this + 151); i != v4; i = (OZSceneNode **)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v4)
      {
        v6 = *i;
        *((_QWORD *)v6 + 1) = i[1];
        *(_QWORD *)i[1] = v6;
        --*((_QWORD *)this + 152);
        operator delete(i);
      }
      break;
    }
  }
  OZScene::unregisterNode(this, a2);
  v7 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)a2 + 640))(a2);
  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 920), v7);
}

void OZScene::addNode(OZGroup **this, OZSceneNode *a2, PCString *a3, __int16 a4, int a5, OZSceneNode *a6)
{
  void *Node;
  void *v13;
  const void *v14;
  const void *v15;
  OZSceneNode *SceneNode;
  OZChannelBase *v17;
  uint64_t NextUniqueID;
  OZSceneNode *v19;
  OZChannelBase *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  PMClip **v24;
  PMClip **v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;
  OZGroup *v29;
  uint64_t v30;
  OZChannelBase *v31;
  unint64_t v32;
  unint64_t v33;
  OZGroup *v34;
  uint64_t v35;
  OZChannelBase *v36;
  uint64_t v37;
  OZChannelBase *v38;
  _BOOL4 v39;
  OZChannelBase *v40;
  uint64_t v41;
  OZSceneNode *v42;
  OZGroup *v43;
  OZGroup *v44;
  OZGroup *v45;
  OZGroup *v46;
  OZGroup *v47;
  uint64_t v48;
  OZChannelBase *v49;
  __int128 v50;
  __int128 v51;
  PCString v52;
  OZChannelBase v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  Node = OZScene::getNode((OZScene *)this, *((_DWORD *)a2 + 20));
  if (v13)
  {
    v14 = v13;
    OZScene::begin_t<OZFootageLayer,false,true>((uint64_t *)this, (uint64_t)&v53.var1);
    if (v53.var1 == *(OZFactory **)&v53.var3
      || (v15 = (const void *)*((_QWORD *)v53.var1 + 2)) == 0
    {
      PCURL::PCURL((PCURL *)&v53, CFSTR("Footage Layer Name"));
      NextUniqueID = OZChannelBase::getNextUniqueID(v17);
      *(_OWORD *)&v53.var11 = xmmword_1B355DCE0;
      SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v53.var11, (uint64_t)&v53, NextUniqueID);
      PCString::~PCString((PCString *)&v53);
      if (!SceneNode)
      {
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v53.var5);
        return;
      }
      OZScene::addRootNodeAfter((OZScene *)this, SceneNode, *((OZSceneNode **)this[150] + 2));
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var11, CFSTR("Undo Paste"));
        else
          PCString::PCString((PCString *)&v53.var11, a3);
        (*(void (**)(_QWORD *, __CFString **, uint64_t))(*((_QWORD *)SceneNode + 2) + 176))((_QWORD *)SceneNode + 2, &v53.var11, 1);
        PCString::~PCString((PCString *)&v53.var11);
      }
    }
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var11, CFSTR("Undo Reorder"));
        else
          PCString::PCString((PCString *)&v53.var11, a3);
        (*(void (**)(char *, __CFString **, uint64_t))(*((_QWORD *)a2 + 2) + 176))((char *)a2 + 16, &v53.var11, 3);
        PCString::~PCString((PCString *)&v53.var11);
      }
      OZSceneNode::removeFromParent(a2);
    }
    v23 = 984;
    if (a5)
      v23 = 992;
    (*(void (**)(OZSceneNode *, const void *, OZSceneNode *))(*(_QWORD *)SceneNode + v23))(SceneNode, v14, a6);
    if (v24)
    {
      v25 = v24;
      (*((void (**)(__CFString **__return_ptr))*v24 + 160))(&v53.var11);
      OZFootage::getFormatName(v25, (PCSharedCount *)&v53);
      (*((void (**)(PCString *__return_ptr, PMClip **))*v25 + 161))(&v52, v25);
      OZFootage::getDisplayWidth((OZFootage *)v25);
      OZFootage::getDisplayHeight((OZFootage *)v25);
      OZChannelBase::setRangeName((OZChannelBase *)&v53.var11, (const PCString *)&v53);
      PCString::~PCString(&v52);
      PCString::~PCString((PCString *)&v53);
      PCString::~PCString((PCString *)&v53.var11);
    }
    if (v26)
    {
      v27 = v26;
      v28 = (*(uint64_t (**)(_QWORD *))(v26[2] + 288))(v26 + 2);
      snprintf((char *)&v53.var11, 0x40uLL, "%d", v28 & 1);
      (*(void (**)(OZChannelBase *__return_ptr, _QWORD *))(*v27 + 1280))(&v53, v27);
      (*(void (**)(PCString *__return_ptr, _QWORD *))(*v27 + 1288))(&v52, v27);
      OZChannelBase::setRangeName(&v53, &v52);
      PCString::~PCString(&v52);
      PCString::~PCString((PCString *)&v53);
    }
    goto LABEL_36;
  }
  {
    if ((a4 & 0x20) == 0 || (v19 = this[154]) == 0)
    {
      PCURL::PCURL((PCURL *)&v53.var11, CFSTR("Layer Name"));
      v21 = OZChannelBase::getNextUniqueID(v20);
      *(_OWORD *)&v53.var1 = xmmword_1B355DCC0;
      v19 = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v53.var1, (uint64_t)&v53.var11, v21);
      PCString::~PCString((PCString *)&v53.var11);
      if (!v19)
        return;
      if (a5)
        OZScene::addRootNodeBefore((OZScene *)this, v19, a6);
      else
        OZScene::addRootNodeAfter((OZScene *)this, v19, a6);
      if (!this[154])
      {
        this[154] = v19;
        OZScene::clearSelection((OZScene *)this);
        (*(void (**)(OZSceneNode *))(*(_QWORD *)v19 + 688))(v19);
        this[153] = v19;
      }
      OZGroup::setToDefaultDimensionType(v19, 0);
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Paste"));
        else
          PCString::PCString((PCString *)&v53.var1, a3);
        (*(void (**)(_QWORD *, OZFactory **, uint64_t))(*((_QWORD *)v19 + 2) + 176))((_QWORD *)v19 + 2, &v53.var1, 1);
        PCString::~PCString((PCString *)&v53.var1);
      }
    }
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Reorder"));
        else
          PCString::PCString((PCString *)&v53.var1, a3);
        (*(void (**)(char *, OZFactory **, uint64_t))(*((_QWORD *)a2 + 2) + 176))((char *)a2 + 16, &v53.var1, 3);
        PCString::~PCString((PCString *)&v53.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    v30 = 984;
    if (a5)
      v30 = 992;
    (*(void (**)(OZSceneNode *, OZSceneNode *, _QWORD))(*(_QWORD *)v19 + v30))(v19, a2, 0);
    v31 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v19 + 640))(v19);
    OZChannelObjectRoot::recomputeTimeRangeFromChildren(v31, 1, 1, 1, 1, 0);
    OZDocument::postNotification(this[198], 32);
    goto LABEL_58;
  }
  {
    OZScene::begin_t<OZAudioLayer,false,true>((uint64_t *)this, (uint64_t)&v53.var1);
    if (v53.var1 == *(OZFactory **)&v53.var3
      || (v22 = (const void *)*((_QWORD *)v53.var1 + 2)) == 0
    {
      OZScene::addRootNode((OZScene *)this, a2);
    }
LABEL_36:
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v53.var5);
LABEL_58:
    if ((a4 & 0x10) != 0 && !Node)
    {
      if (PCString::empty(a3))
        PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Paste"));
      else
        PCString::PCString((PCString *)&v53.var1, a3);
      (*(void (**)(char *, OZFactory **, uint64_t))(*((_QWORD *)a2 + 2) + 176))((char *)a2 + 16, &v53.var1, 1);
      PCString::~PCString((PCString *)&v53.var1);
    }
LABEL_64:
    OZScene::addAllDependencies((uint64_t)this, a2);
    return;
  }
  {
    if ((a4 & 0x20) != 0)
      v29 = this[154];
    else
      v29 = 0;
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Reorder"));
        else
          PCString::PCString((PCString *)&v53.var1, a3);
        (*(void (**)(char *, OZFactory **, uint64_t))(*((_QWORD *)a2 + 2) + 176))((char *)a2 + 16, &v53.var1, 3);
        PCString::~PCString((PCString *)&v53.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (v29)
    {
      v35 = 984;
      if (a5)
        v35 = 992;
      (*(void (**)(OZGroup *, OZSceneNode *, OZSceneNode *))(*(_QWORD *)v29 + v35))(v29, a2, a6);
      v36 = (OZChannelBase *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)v29 + 640))(v29);
      OZChannelObjectRoot::recomputeTimeRangeFromChildren(v36, 1, 1, 1, 1, 0);
    }
    else
    {
      OZScene::addRootNodeAfter((OZScene *)this, a2, a6);
    }
    goto LABEL_58;
  }
  v32 = *((_QWORD *)a2 + 1);
  v51 = xmmword_1B355DD10;
  if ((OZFactory::isKindOfClass(v32, (int32x4_t *)&v51) & 1) != 0
    || (v33 = *((_QWORD *)a2 + 1),
        v50 = xmmword_1B355CF30,
        OZFactory::isKindOfClass(v33, (int32x4_t *)&v50)))
  {
    if ((a4 & 0x20) != 0)
      v34 = this[154];
    else
      v34 = 0;
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Reorder"));
        else
          PCString::PCString((PCString *)&v53.var1, a3);
        (*(void (**)(char *, OZFactory **, uint64_t))(*((_QWORD *)a2 + 2) + 176))((char *)a2 + 16, &v53.var1, 3);
        PCString::~PCString((PCString *)&v53.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (v34)
    {
      v37 = 984;
      if (a5)
        v37 = 992;
LABEL_97:
      (*(void (**)(OZGroup *, OZSceneNode *, OZSceneNode *))(*(_QWORD *)v34 + v37))(v34, a2, a6);
      v38 = (OZChannelBase *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)v34 + 640))(v34);
      OZChannelObjectRoot::recomputeTimeRangeFromChildren(v38, 1, 1, 1, 1, 0);
      goto LABEL_58;
    }
    if (a5)
      goto LABEL_99;
    goto LABEL_124;
  }
  {
    if ((a4 & 0x20) != 0)
      v34 = this[154];
    else
      v34 = 0;
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Reorder"));
        else
          PCString::PCString((PCString *)&v53.var1, a3);
        (*(void (**)(char *, OZFactory **, uint64_t))(*((_QWORD *)a2 + 2) + 176))((char *)a2 + 16, &v53.var1, 3);
        PCString::~PCString((PCString *)&v53.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (v34)
    {
      v37 = 984;
      if (a5)
        v37 = 992;
      goto LABEL_97;
    }
    if (a5)
    {
LABEL_99:
      OZScene::addRootNodeBefore((OZScene *)this, a2, a6);
      goto LABEL_58;
    }
LABEL_124:
    OZScene::addRootNodeAfter((OZScene *)this, a2, a6);
    goto LABEL_58;
  }
  v39 = 0;
  if ((a4 & 0x20) != 0)
  {
    v43 = this[154];
    if ((a4 & 0x400) != 0 && v43)
      v39 = OZGroup::is360Group(this[154]);
    if (v43 && !v39)
    {
      v44 = 0;
      goto LABEL_136;
    }
  }
  PCURL::PCURL((PCURL *)&v53.var11, CFSTR("Layer Name"));
  v41 = OZChannelBase::getNextUniqueID(v40);
  *(_OWORD *)&v53.var1 = xmmword_1B355DCC0;
  v42 = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v53.var1, (uint64_t)&v53.var11, v41);
  PCString::~PCString((PCString *)&v53.var11);
  if (v42)
  {
    v43 = v42;
    if (v39)
    {
      OZScene::addRootNode((OZScene *)this, v42);
    }
    else if (a5)
    {
      OZScene::addRootNodeBefore((OZScene *)this, v42, a6);
    }
    else
    {
      OZScene::addRootNodeAfter((OZScene *)this, v42, a6);
    }
    v45 = v42;
    this[154] = v42;
    if ((a4 & 0x140) == 0)
    {
      OZScene::clearSelection((OZScene *)this);
      (*(void (**)(OZSceneNode *))(*(_QWORD *)v42 + 688))(v42);
      this[153] = v42;
      OZDocument::postNotification(this[198], 32);
      v45 = v42;
    }
    OZGroup::setToDefaultDimensionType(v45, 0);
    if ((a4 & 0x10) != 0)
    {
      if (PCString::empty(a3))
        PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Paste"));
      else
        PCString::PCString((PCString *)&v53.var1, a3);
      (*(void (**)(_QWORD *, OZFactory **, uint64_t))(*((_QWORD *)v42 + 2) + 176))((_QWORD *)v42 + 2, &v53.var1, 1);
      PCString::~PCString((PCString *)&v53.var1);
    }
    v44 = v42;
LABEL_136:
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3))
          PCURL::PCURL((PCURL *)&v53.var1, CFSTR("Undo Reorder"));
        else
          PCString::PCString((PCString *)&v53.var1, a3);
        (*(void (**)(char *, OZFactory **, uint64_t))(*((_QWORD *)a2 + 2) + 176))((char *)a2 + 16, &v53.var1, 3);
        PCString::~PCString((PCString *)&v53.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (!v44)
    {
      v46 = this[153];
      while (v46)
      {
        v47 = (OZGroup *)*((_QWORD *)v46 + 120);
        if (!v47)
          break;
        v46 = v47;
        if (v44)
          goto LABEL_150;
      }
      v44 = 0;
    }
LABEL_150:
    if (v44)
      v43 = v44;
    v48 = 984;
    if (a5)
      v48 = 992;
    (*(void (**)(OZGroup *, OZSceneNode *, OZSceneNode *))(*(_QWORD *)v43 + v48))(v43, a2, a6);
    v49 = (OZChannelBase *)(*(uint64_t (**)(OZGroup *))(*(_QWORD *)v43 + 640))(v43);
    OZChannelObjectRoot::recomputeTimeRangeFromChildren(v49, 1, 1, 1, 1, 0);
    if (Node)
      goto LABEL_64;
    goto LABEL_58;
  }
}

void sub_1B2E52548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15, PCString a16, PCString a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  PCString::~PCString(&a17);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZAudioLayer,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZAudioLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZAudioLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E52694(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getObject(OZScene *this, unsigned int a2)
{
  return OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a2);
}

void OZScene::OZNodeMap::setNode(os_unfair_lock_s *this, OZObjectManipulator *a2)
{
  uint64_t v4;
  OZChannelBase *v5;
  uint32_t v6;
  unsigned int *v7;

  v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  v5 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v6 = v5;
  PCSpinLock::lock(this);
  OZChannelBase::updateIDGenerator(v5);
  v7 = &v6;
  std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&this[2], &v6, (uint64_t)&std::piecewise_construct, &v7)[3] = a2;
  this[12]._os_unfair_lock_opaque = v6;
  *(_QWORD *)&this[14]._os_unfair_lock_opaque = a2;
  PCSpinLock::unlock(this);
}

void sub_1B2E52758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::incNum3DTextObjects(uint64_t this)
{
  ++*(_DWORD *)(this + 1772);
  return this;
}

void OZScene::registerObject(OZScene *this, OZObjectManipulator *a2)
{
  uint64_t v4;
  unsigned int v5;
  OZObjectManipulator *v6;
  OZObjectManipulator *v7;
  BOOL v8;
  OZObjectManipulator **v10;
  OZObjectManipulator **v11;
  OZObjectManipulator **v12;
  OZObjectManipulator **v13;
  const PCString *v14;
  OZChannelBase *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v6 = (OZObjectManipulator *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, v5);
  v7 = v6;
  if (!*((_BYTE *)this + 1576))
    goto LABEL_15;
  v8 = *(_BYTE *)(theApp + 80) || v6 == 0;
  if (v8 || v6 == a2)
    goto LABEL_15;
  v10 = (OZObjectManipulator **)*((_QWORD *)this + 195);
  v11 = (OZObjectManipulator **)*((_QWORD *)this + 194);
  if (v11 == v10)
  {
LABEL_13:
    v12 = (OZObjectManipulator **)*((_QWORD *)this + 195);
  }
  else
  {
    v12 = (OZObjectManipulator **)*((_QWORD *)this + 194);
    v13 = v12;
    while (*v13 != a2)
    {
      ++v13;
      ++v12;
      if (v13 == v10)
        goto LABEL_13;
    }
  }
  if (v10 != v12)
  {
LABEL_15:
    if (v6)
      return;
    goto LABEL_16;
  }
  v16 = *((_QWORD *)this + 196);
  if ((unint64_t)v10 >= v16)
  {
    v18 = v10 - v11;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v19 = v16 - (_QWORD)v11;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1568, v21);
    else
      v22 = 0;
    v23 = &v22[8 * v18];
    v24 = &v22[8 * v21];
    *(_QWORD *)v23 = a2;
    v17 = v23 + 8;
    v25 = (char *)*((_QWORD *)this + 195);
    v26 = (char *)*((_QWORD *)this + 194);
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v23 - 1) = v27;
        v23 -= 8;
      }
      while (v25 != v26);
      v25 = (char *)*((_QWORD *)this + 194);
    }
    *((_QWORD *)this + 194) = v23;
    *((_QWORD *)this + 195) = v17;
    *((_QWORD *)this + 196) = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v10 = a2;
    v17 = v10 + 1;
  }
  *((_QWORD *)this + 195) = v17;
  if (!v7)
  {
LABEL_16:
    OZScene::OZNodeMap::setNode((os_unfair_lock_s *)this + 322, a2);
    if ((*(_BYTE *)((*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 216))(a2) + 56) & 0x40) != 0)
    {
      OZChannelBase::setRangeName((OZChannelBase *)a2, v14);
      v15 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 216))(a2);
      OZChannelBase::setNameUnset(v15, 0);
    }
  }
}

uint64_t OZScene::dirtyLockDependencies(uint64_t this)
{
  if (*(_BYTE *)(this + 1578))
    atomic_store(1u, (unsigned __int8 *)(this + 1808));
  return this;
}

uint64_t OZScene::sceneDidChange(OZScene *this)
{
  uint64_t v1;
  OZSceneNode *v2;
  _QWORD *i;
  _QWORD *j;
  uint64_t k;
  uint64_t v6;
  _OWORD v8[2];
  __n128 *v9[4];
  int v10;
  _QWORD v11[4];
  uint64_t v12;
  _BYTE v13[25];
  _QWORD v14[4];
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  _OWORD v20[2];
  int v21;
  _QWORD v22[2];
  char *v23;
  char v24;
  _BYTE v25[32];
  int v26;

  v1 = *((_QWORD *)this + 151);
  memset(v25, 0, sizeof(v25));
  v26 = 1065353216;
  v22[0] = v1;
  v22[1] = v1;
  v23 = (char *)this + 1200;
  v24 = 0;
  memset(v20, 0, sizeof(v20));
  v21 = 1065353216;
  v16 = (char *)this + 1200;
  v17 = v1;
  v18 = (char *)this + 1200;
  v19 = 0;
  while ((char *)v22[0] != v16)
  {
    if ((char *)v22[0] == v23)
      v2 = 0;
    else
      v2 = *(OZSceneNode **)(v22[0] + 16);
    for (i = (_QWORD *)*((_QWORD *)v2 + 123); i != (_QWORD *)((char *)v2 + 976); i = (_QWORD *)i[1])
      (*(void (**)(uint64_t))(*(_QWORD *)(i[2] + 48) + 376))(i[2] + 48);
    for (j = (_QWORD *)*((_QWORD *)v2 + 126); j != (_QWORD *)((char *)v2 + 1000); j = (_QWORD *)j[1])
      (*(void (**)(uint64_t))(*(_QWORD *)(j[2] + 16) + 376))(j[2] + 16);
    if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)v2 + 1056))(v2))
    {
      for (k = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v2 + 1104))(v2);
            k != (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v2 + 1112))(v2);
            k = *(_QWORD *)(k + 8))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(k + 16) + 16) + 376))(*(_QWORD *)(k + 16) + 16);
      }
    }
    if ((*(unsigned int (**)(OZSceneNode *))(*(_QWORD *)v2 + 960))(v2))
    {
      memset(v14, 0, sizeof(v14));
      memset(v13, 0, 24);
      v15 = 1065353216;
      OZSceneNode::end(v2, (uint64_t)v11);
      OZSceneNode::begin(v2, (uint64_t)v8);
      *(_OWORD *)v13 = v8[0];
      *(_OWORD *)&v13[9] = *(_OWORD *)((char *)v8 + 9);
      v15 = v10;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v14, v9[2], 0);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v9);
      while (*(_QWORD *)v13 != v11[0])
      {
        if (*(_QWORD *)v13 != *(_QWORD *)&v13[16])
        {
          v6 = *(_QWORD *)(*(_QWORD *)v13 + 16);
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 16) + 376))(v6 + 16);
        }
        OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v13);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v14);
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v22);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
}

void sub_1B2E52BB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::decNum3DTextObjects(uint64_t this)
{
  --*(_DWORD *)(this + 1772);
  return this;
}

void OZScene::OZNodeMap::removeNode(os_unfair_lock_s *this, OZObjectManipulator *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;

  v3 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  PCSpinLock::lock(this);
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>(&this[2]._os_unfair_lock_opaque, &v5);
  if (v4)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::erase(&this[2]._os_unfair_lock_opaque, v4);
    this[12]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&this[14]._os_unfair_lock_opaque = 0;
  }
  else if (!this)
  {
    return;
  }
  PCSpinLock::unlock(this);
}

void sub_1B2E52CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a9);
  _Unwind_Resume(a1);
}

void OZScene::unregisterObject(OZScene *this, OZObjectManipulator *a2)
{
  uint64_t v4;
  unsigned int v5;
  OZObjectManipulator **v6;
  OZObjectManipulator **v7;
  int64_t v8;
  char *v9;
  uint64_t **v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  uint64_t v16;

  v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(_QWORD *)a2 + 256))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v6 = (OZObjectManipulator **)*((_QWORD *)this + 194);
  v7 = (OZObjectManipulator **)*((_QWORD *)this + 195);
  if (v6 != v7)
  {
    while (*v6 != a2)
    {
      if (++v6 == v7)
      {
        v6 = (OZObjectManipulator **)*((_QWORD *)this + 195);
        break;
      }
    }
  }
  if (v6 == v7)
  {
    OZScene::OZNodeMap::removeNode((os_unfair_lock_s *)this + 322, a2);
    v9 = (char *)*((_QWORD *)this + 159);
    if (v9)
    {
      v10 = (uint64_t **)((char *)this + 1264);
      v11 = (char *)this + 1272;
      v12 = (char *)this + 1272;
      do
      {
        v13 = *((_DWORD *)v9 + 8);
        v14 = v13 >= v5;
        if (v13 >= v5)
          v15 = (char **)v9;
        else
          v15 = (char **)(v9 + 8);
        if (v14)
          v12 = v9;
        v9 = *v15;
      }
      while (*v15);
      if (v12 != v11 && v5 >= *((_DWORD *)v12 + 8))
      {
        v16 = *((_QWORD *)v12 + 5);
        std::__tree<unsigned int>::erase((uint64_t **)v16, *(uint64_t **)v16, (uint64_t *)(v16 + 8));
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v10, (uint64_t *)v12);
        operator delete(v12);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v16, *(_QWORD **)(v16 + 8));
        JUMPOUT(0x1B5E29170);
      }
    }
  }
  else
  {
    v8 = (char *)v7 - (char *)(v6 + 1);
    if (v7 != v6 + 1)
      memmove(v6, v6 + 1, (char *)v7 - (char *)(v6 + 1));
    *((_QWORD *)this + 195) = (char *)v6 + v8;
  }
}

OZObjectManipulator ***OZScene::removeObjectFromLoadObjectsWithDuplicateIDs(OZObjectManipulator ***this, OZObjectManipulator *a2)
{
  OZObjectManipulator ***v2;
  OZObjectManipulator **v3;
  OZObjectManipulator **v4;
  int64_t v5;

  v2 = this;
  v3 = this[194];
  v4 = this[195];
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4)
      {
        v3 = this[195];
        break;
      }
    }
  }
  if (v3 != v4)
  {
    v5 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1)
      this = (OZObjectManipulator ***)memmove(v3, v3 + 1, (char *)v4 - (char *)(v3 + 1));
    v2[195] = (OZObjectManipulator **)((char *)v3 + v5);
  }
  return this;
}

uint64_t OZScene::addNodeDependency(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  const void *v10;
  const void *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;

  v12 = a3;
  v13 = a2;
  if ((*(_BYTE *)(this + 1592) & 0x10) == 0)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 1272);
    if (!v4)
      goto LABEL_13;
    v5 = this + 1272;
    do
    {
      v6 = *(_DWORD *)(v4 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v4;
      else
        v8 = (uint64_t *)(v4 + 8);
      if (v7)
        v5 = v4;
      v4 = *v8;
    }
    while (*v8);
    if (v5 != this + 1272 && *(_DWORD *)(v5 + 32) <= a2)
    {
      v9 = *(uint64_t **)(v5 + 40);
    }
    else
    {
LABEL_13:
      v9 = (uint64_t *)operator new();
      v9[2] = 0;
      v9[1] = 0;
      *v9 = (uint64_t)(v9 + 1);
      v14 = &v13;
      std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)(v3 + 1264), &v13, (uint64_t)&std::piecewise_construct, &v14)[5] = v9;
    }
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v9, &v12, &v12);
    v10 = (const void *)OZScene::OZNodeMap::operator[](v3 + 1288, v13);
    this = OZScene::OZNodeMap::operator[](v3 + 1288, v12);
    if (v10)
    {
      v11 = (const void *)this;
      if (this)
      {
        if (this)
        {
          if (this)
          {
            if (*(_BYTE *)(v3 + 1578))
              atomic_store(1u, (unsigned __int8 *)(v3 + 1808));
          }
        }
      }
    }
  }
  return this;
}

BOOL OZScene::testFlag(OZScene *this, int a2)
{
  return (*((_DWORD *)this + 398) & a2) != 0;
}

uint64_t OZScene::addAllDependencies(uint64_t this, OZChannelFolder *a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;
  int isKindOfClass;
  _QWORD *v11;
  OZChannel *v12;
  OZChannelFolder *v13;
  OZScene *v14;
  unsigned int v15;
  OZChannelFolder *v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t Object;
  unsigned int ObjectID;
  __int128 v23;

  if ((*(_BYTE *)(this + 1592) & 0x10) == 0)
  {
    v3 = (uint64_t *)*((_QWORD *)a2 + 14);
    if (v3)
    {
      v4 = *v3;
      if (*v3 != v3[1])
      {
        v6 = this;
        do
        {
          v7 = *(const void **)v4;
          v8 = *(_QWORD *)(*(_QWORD *)v4 + 56);
          if ((v8 & 0x1000) != 0)
          {
            if ((v8 & 0x2000) != 0)
            {
              OZScene::addNodeDependency(v6, *((_DWORD *)v16 + 6), a3);
              v15 = *((_DWORD *)v16 + 6);
              v14 = (OZScene *)v6;
              v13 = v16;
            }
            else
            {
              v14 = (OZScene *)v6;
              v15 = a3;
            }
            this = OZScene::addAllDependencies(v14, v13, v15);
            goto LABEL_14;
          }
          this = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 112))(v7);
          if ((_DWORD)this)
          {
            v9 = *(_QWORD *)(*(_QWORD *)v4 + 8);
            v23 = xmmword_1B355DE20;
            isKindOfClass = OZFactory::isKindOfClass(v9, (int32x4_t *)&v23);
            v11 = *(_QWORD **)v4;
            if (isKindOfClass)
            {
              if (v11)
              else
                v12 = 0;
              if (!OZChanObjectManipRef::getObjectID(v12)
                || !OZChanObjectManipRef::getObject((OZChannelBase *)v12))
              {
                goto LABEL_29;
              }
            }
            else
            {
              v17 = v11[1];
              v23 = xmmword_1B355E3F0;
              v18 = OZFactory::isKindOfClass(v17, (int32x4_t *)&v23);
              v19 = *(_QWORD **)v4;
              if (!v18)
              {
                v20 = v19[1];
                v23 = xmmword_1B355E400;
                this = OZFactory::isKindOfClass(v20, (int32x4_t *)&v23);
                if (!(_DWORD)this)
                  goto LABEL_14;
                v19 = *(_QWORD **)v4;
              }
              if (v19)
              else
                v12 = 0;
              if (!OZChanObjectManipRef::getObjectID(v12))
              {
LABEL_29:
                this = OZChanObjectManipRef::getObject((OZChannelBase *)v12);
                if (this)
                  this = (*((uint64_t (**)(OZChannel *, _QWORD, _QWORD))v12->var0 + 108))(v12, 0, 0);
                goto LABEL_14;
              }
            }
            Object = OZChanObjectManipRef::getObject((OZChannelBase *)v12);
            if (!(*((unsigned int (**)(OZChannel *, uint64_t))v12->var0 + 109))(v12, Object))
              goto LABEL_29;
            ObjectID = OZChanObjectManipRef::getObjectID(v12);
            this = OZScene::addNodeDependency(v6, ObjectID, a3);
          }
LABEL_14:
          v4 += 8;
        }
        while (v4 != v3[1]);
      }
    }
  }
  return this;
}

void OZScene::removeAllDependencies(OZScene *this, unsigned int a2)
{
  uint64_t **v2;
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t *v15;
  unsigned int v16;

  v16 = a2;
  v2 = (uint64_t **)((char *)this + 1264);
  v3 = (uint64_t *)((char *)this + 1272);
  v4 = (char *)*((_QWORD *)this + 159);
  if (v4)
  {
    v5 = (uint64_t *)((char *)this + 1272);
    do
    {
      v6 = *((_DWORD *)v4 + 8);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (char **)v4;
      else
        v8 = (char **)(v4 + 8);
      if (v7)
        v5 = (uint64_t *)v4;
      v4 = *v8;
    }
    while (*v8);
    if (v5 != v3 && *((_DWORD *)v5 + 8) <= a2)
    {
      v9 = v5[5];
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, v5);
      operator delete(v5);
      if (v9)
      {
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v9, *(_QWORD **)(v9 + 8));
        MEMORY[0x1B5E29170](v9, 0x1020C4062D53EE8);
      }
    }
  }
  v10 = *v2;
  if (*v2 != v3)
  {
    do
    {
      v11 = v10[5];
      std::__tree<unsigned int>::__erase_unique<unsigned int>(v11, &v16);
      v12 = (uint64_t *)v10[1];
      if (*(_QWORD *)(v11 + 16))
      {
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (uint64_t *)v10[2];
            v14 = *v13 == (_QWORD)v10;
            v10 = v13;
          }
          while (!v14);
        }
      }
      else
      {
        v15 = v10;
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (uint64_t *)v15[2];
            v14 = *v13 == (_QWORD)v15;
            v15 = v13;
          }
          while (!v14);
        }
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v2, v10);
        operator delete(v10);
        if (v11)
        {
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(_QWORD **)(v11 + 8));
          MEMORY[0x1B5E29170](v11, 0x1020C4062D53EE8);
        }
      }
      v10 = v13;
    }
    while (v13 != v3);
  }
}

OZScene *OZScene::removeAllDependencies(OZScene *this, OZChannelFolder *a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  OZScene *v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;
  int isKindOfClass;
  _QWORD *v11;
  const struct __class_type_info *v12;
  OZChannelFolder *v13;
  OZScene *v14;
  unsigned int v15;
  OZChannelFolder *v16;
  unint64_t v17;
  OZChannel *v18;
  unsigned int ObjectID;
  __int128 v20;

  v3 = (uint64_t *)*((_QWORD *)a2 + 14);
  if (v3)
  {
    v4 = *v3;
    if (*v3 != v3[1])
    {
      v6 = this;
      do
      {
        v7 = *(const void **)v4;
        v8 = *(_QWORD *)(*(_QWORD *)v4 + 56);
        if ((v8 & 0x1000) != 0)
        {
          if ((v8 & 0x2000) != 0)
          {
            OZScene::removeAllDependencies(v6, *((_DWORD *)v16 + 6));
            v15 = *((_DWORD *)v16 + 6);
            v14 = v6;
            v13 = v16;
          }
          else
          {
            v14 = v6;
            v15 = a3;
          }
          this = (OZScene *)OZScene::removeAllDependencies(v14, v13, v15);
          goto LABEL_13;
        }
        this = (OZScene *)(*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 112))(v7);
        if ((_DWORD)this)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v4 + 8);
          v20 = xmmword_1B355DE20;
          isKindOfClass = OZFactory::isKindOfClass(v9, (int32x4_t *)&v20);
          v11 = *(_QWORD **)v4;
          if (isKindOfClass)
          {
            if (v11)
            {
              goto LABEL_18;
            }
            goto LABEL_19;
          }
          v17 = v11[1];
          v20 = xmmword_1B355E410;
          this = (OZScene *)OZFactory::isKindOfClass(v17, (int32x4_t *)&v20);
          if ((_DWORD)this)
          {
            v11 = *(_QWORD **)v4;
            if (*(_QWORD *)v4)
            {
LABEL_18:
LABEL_20:
              this = (OZScene *)OZChanObjectManipRef::getObjectID(v18);
              if ((_DWORD)this)
              {
                ObjectID = OZChanObjectManipRef::getObjectID(v18);
                this = (OZScene *)OZScene::removeNodeDependency(v6, ObjectID, a3);
              }
              goto LABEL_13;
            }
LABEL_19:
            v18 = 0;
            goto LABEL_20;
          }
        }
LABEL_13:
        v4 += 8;
      }
      while (v4 != v3[1]);
    }
  }
  return this;
}

const void *OZScene::removeNodeDependency(OZScene *this, unsigned int a2, unsigned int a3)
{
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  const void *v17;
  const void *result;
  const void *v19;
  BOOL v20;

  v6 = (char *)*((_QWORD *)this + 159);
  if (v6)
  {
    v7 = (char *)this + 1272;
    do
    {
      v8 = *((_DWORD *)v6 + 8);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (char **)v6;
      else
        v10 = (char **)(v6 + 8);
      if (v9)
        v7 = v6;
      v6 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 1272 && *((_DWORD *)v7 + 8) <= a2)
    {
      v11 = *((_QWORD *)v7 + 5);
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = v11 + 8;
        do
        {
          v14 = *(_DWORD *)(v12 + 28);
          v15 = v14 >= a3;
          if (v14 >= a3)
            v16 = (uint64_t *)v12;
          else
            v16 = (uint64_t *)(v12 + 8);
          if (v15)
            v13 = v12;
          v12 = *v16;
        }
        while (*v16);
        if (v13 != v11 + 8 && *(_DWORD *)(v13 + 28) <= a3)
        {
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(*((uint64_t ***)v7 + 5), (uint64_t *)v13);
          operator delete((void *)v13);
        }
      }
      if (!*(_QWORD *)(v11 + 16))
      {
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, (uint64_t *)v7);
        operator delete(v7);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(_QWORD **)(v11 + 8));
        MEMORY[0x1B5E29170](v11, 0x1020C4062D53EE8);
      }
    }
  }
  v17 = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a2);
  result = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a3);
  if (v17)
  {
    v19 = result;
    if (result)
      v20 = v19 == 0;
    else
      v20 = 1;
    if (!v20)
    {
      if (result)
      {
        if (*((_BYTE *)this + 1578))
          atomic_store(1u, (unsigned __int8 *)this + 1808);
      }
    }
  }
  return result;
}

uint64_t OZScene::recalcDependencies(OZScene *this)
{
  char v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  OZSceneNode *v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  _OWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  _OWORD v18[2];
  int v19;

  v2 = *((_BYTE *)this + 1578);
  *((_BYTE *)this + 1578) = 0;
  if (*((_QWORD *)this + 160))
  {
    v3 = (uint64_t **)((char *)this + 1264);
    do
    {
      v4 = *v3;
      v5 = (*v3)[5];
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, *v3);
      operator delete(v4);
      if (v5)
      {
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v5, *(_QWORD **)(v5 + 8));
        MEMORY[0x1B5E29170](v5, 0x1020C4062D53EE8);
      }
    }
    while (*((_QWORD *)this + 160));
  }
  v6 = (char *)this + 1200;
  v7 = *((_QWORD *)this + 151);
  memset(v18, 0, sizeof(v18));
  v19 = 1065353216;
  v14 = v7;
  v15 = v7;
  v16 = (char *)this + 1200;
  v17 = 0;
  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  while ((char *)v7 != v6)
  {
    if ((char *)v7 == v16)
      v8 = 0;
    else
      v8 = *(OZSceneNode **)(v7 + 16);
    OZScene::addAllDependencies((uint64_t)this, v8);
    v7 = *(_QWORD *)(v14 + 8);
    v14 = v7;
    v6 = (char *)this + 1200;
  }
  *((_BYTE *)this + 1578) = v2;
  v9 = (unsigned __int8 *)this + 1808;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(0, v9));
  if ((v10 & 1) != 0)
    OZScene::computeLockDependencies(this);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v12);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
}

void sub_1B2E53884(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getDependantNodes(OZScene *this, unsigned int a2)
{
  char *v2;
  char *v3;
  unsigned int v4;
  BOOL v5;
  char **v6;

  v2 = (char *)*((_QWORD *)this + 159);
  if (!v2)
    return 0;
  v3 = (char *)this + 1272;
  do
  {
    v4 = *((_DWORD *)v2 + 8);
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = (char **)v2;
    else
      v6 = (char **)(v2 + 8);
    if (v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != (char *)this + 1272 && *((_DWORD *)v3 + 8) <= a2)
    return *((_QWORD *)v3 + 5);
  else
    return 0;
}

const void *OZScene::getCloneNodes(uint64_t *a1, unsigned int a2, uint64_t **a3)
{
  const void *result;
  void *v6;
  uint64_t v7;
  uint64_t **v8;
  const void *v9;
  OZCloneGenerator *v10;
  OZCloneGenerator *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t **v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  _OWORD v27[2];
  int v28;
  uint64_t v29[4];
  uint64_t v30;

  result = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)(a1 + 161), a2);
  if (result)
  {
    if (result)
    {
      v6 = (void *)result;
      OZScene::begin_t<OZCloneGenerator,false,true>(a1, (uint64_t)v29);
      v7 = a1[151];
      memset(v27, 0, sizeof(v27));
      v28 = 1065353216;
      v23 = a1 + 150;
      v24 = v7;
      v25 = a1 + 150;
      v26 = 0;
      v8 = a3 + 1;
      while ((uint64_t *)v29[0] != v23)
      {
        if (v29[0] != v29[2])
        {
          v9 = *(const void **)(v29[0] + 16);
          if (v9)
          {
            if (v10)
            {
              v11 = v10;
              if (OZCloneGenerator::getSourceNode(v10) == v6)
              {
                v12 = *((_DWORD *)v11 + 20);
                v13 = *v8;
                if (!*v8)
                  goto LABEL_20;
                v14 = a3 + 1;
                do
                {
                  v15 = *((_DWORD *)v13 + 7);
                  v16 = v15 >= v12;
                  if (v15 >= v12)
                    v17 = v13;
                  else
                    v17 = v13 + 1;
                  if (v16)
                    v14 = (uint64_t **)v13;
                  v13 = (uint64_t *)*v17;
                }
                while (*v17);
                if (v14 == v8 || v12 < *((_DWORD *)v14 + 7))
                {
LABEL_20:
                  v22 = *((_DWORD *)v11 + 20);
                  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a3, &v22, &v22);
                  OZScene::getCloneNodes(a1, *((unsigned int *)v11 + 20), a3);
                }
              }
            }
          }
        }
        OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++(v29);
      }
      if (v18)
      {
        v19 = v18;
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 1024))(v18);
        v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 1032))(v19);
        while (v20 != v21)
        {
          OZScene::getCloneNodes(a1, *(unsigned int *)(*(_QWORD *)(v20 + 16) + 80), a3);
          v20 = *(_QWORD *)(v20 + 8);
        }
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v27);
      return (const void *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
    }
  }
  return result;
}

void sub_1B2E53AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZCloneGenerator,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B2E53B94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZScene::getReferencedNodes(uint64_t result, int a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;

  v3 = *(_QWORD **)(result + 1264);
  v4 = (_QWORD *)(result + 1272);
  if (v3 != (_QWORD *)(result + 1272))
  {
    v7 = result;
    v8 = a3 + 1;
    do
    {
      v9 = (_QWORD *)v3[5];
      v12 = (_QWORD *)*v9;
      v10 = v9 + 1;
      v11 = v12;
      if (v12 != v10)
      {
        v13 = *((_DWORD *)v3 + 8);
        while (1)
        {
          v24 = v13;
          if (*((_DWORD *)v11 + 7) == a2)
          {
            v14 = *v8;
            if (!*v8)
              break;
            v15 = v8;
            do
            {
              v16 = *(_DWORD *)(v14 + 28);
              v17 = v16 >= v13;
              if (v16 >= v13)
                v18 = (uint64_t *)v14;
              else
                v18 = (uint64_t *)(v14 + 8);
              if (v17)
                v15 = (_QWORD *)v14;
              v14 = *v18;
            }
            while (*v18);
            if (v15 == v8 || v13 < *((_DWORD *)v15 + 7))
              break;
          }
          v19 = (_QWORD *)v11[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (_QWORD *)v11[2];
              v21 = *v20 == (_QWORD)v11;
              v11 = v20;
            }
            while (!v21);
          }
          v11 = v20;
          if (v20 == v10)
            goto LABEL_25;
        }
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a3, &v24, &v24);
        result = OZScene::getReferencedNodes(v7, v24, a3);
      }
LABEL_25:
      v22 = (_QWORD *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v3[2];
          v21 = *v23 == (_QWORD)v3;
          v3 = v23;
        }
        while (!v21);
      }
      v3 = v23;
    }
    while (v23 != v4);
  }
  return result;
}

uint64_t **OZScene::getImmediatelyReferencedNodes(uint64_t **result, int a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t **v4;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;

  v3 = result[158];
  v4 = result + 159;
  if (v3 != (uint64_t *)(result + 159))
  {
    do
    {
      v7 = (_QWORD *)v3[5];
      v10 = (_QWORD *)*v7;
      v8 = v7 + 1;
      v9 = v10;
      if (v10 != v8)
      {
        while (*((_DWORD *)v9 + 7) != a2)
        {
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v9[2];
              v13 = *v12 == (_QWORD)v9;
              v9 = v12;
            }
            while (!v13);
          }
          v9 = v12;
          if (v12 == v8)
            goto LABEL_12;
        }
        result = std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a3, (unsigned int *)v3 + 8, (_DWORD *)v3 + 8);
      }
LABEL_12:
      v14 = (uint64_t *)v3[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v3[2];
          v13 = *v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v13);
      }
      v3 = v15;
    }
    while (v15 != (uint64_t *)v4);
  }
  return result;
}

_QWORD *OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;

  v3 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[2];
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == v3)
  {
LABEL_6:
    *a1 = v2;
  }
  else
  {
    while (1)
    {
      v4 = (_QWORD *)*v4;
      *a1 = v4;
      if (v4 == v2)
        break;
      v5 = (const void *)v4[2];
      if (v5)
      {
        {
          break;
        }
      }
      if (v4 == v3)
        goto LABEL_6;
    }
  }
  return a1;
}

float64x2_t OZScene::getBounds(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2;
  int64x2_t v3;
  float64x2_t result;

  v2 = *(_QWORD *)(a1 + 344);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  result = vcvtq_f64_s64(v3);
  __asm { FMOV            V1.2D, #-0.5 }
  *a2 = vmulq_f64(result, _Q1);
  a2[1] = result;
  return result;
}

float64x2_t `non-virtual thunk to'OZScene::getBounds(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2;
  int64x2_t v3;
  float64x2_t result;

  v2 = *(_QWORD *)(a1 + 336);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  result = vcvtq_f64_s64(v3);
  __asm { FMOV            V1.2D, #-0.5 }
  *a2 = vmulq_f64(result, _Q1);
  a2[1] = result;
  return result;
}

double OZScene::getPixelAspectRatioRN(OZScene *this)
{
  return *((double *)this + 48);
}

double `non-virtual thunk to'OZScene::getPixelAspectRatioRN(OZScene *this)
{
  return *((double *)this + 47);
}

void OZScene::getHashForState(OZScene *this, PCSerializerWriteStream *a2, const OZRenderParams *a3)
{
  uint64_t v3;
  OZRenderParams *v4;
  OZRenderParams *v5;
  PCSerializerWriteStream *v6;
  PCSerializerWriteStream *v7;
  uint64_t v8;
  PCWorkingColorVector *v9;
  PCWorkingColorVector *v10;
  __n128 *v11;
  __n128 *v12;
  char *Hash;
  int v14;
  int v15;
  os_unfair_lock_s *StaticHash;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  PCMutex *v24;
  _DWORD *v25;
  uint64_t v26;
  const void *v27;
  char *v28;
  uint64_t v29;
  _OWORD *v30;
  unsigned int ActiveCamera;
  _OWORD *Node;
  char *v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t **v38;
  CMTime v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _OWORD v49[2];
  int v50;
  _QWORD v51[4];
  uint64_t v52;
  PCMutex *v53;
  std::__shared_weak_count *v54;
  char v55[16];
  int v56[4];
  _DWORD v57[2];
  int v58;
  int v59;
  _DWORD *v60[522];

  v3 = MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v7 = v6;
  v8 = v3;
  v10 = v9;
  v60[520] = *(_DWORD **)MEMORY[0x1E0C80C00];
  if (!v11)
    __cxa_bad_cast();
  v12 = v11;
  Hash = OZRenderParams::getHash(v5);
  v14 = *((_DWORD *)Hash + 1);
  v57[0] = *(_DWORD *)Hash;
  v57[1] = v14;
  v15 = *((_DWORD *)Hash + 3);
  v58 = *((_DWORD *)Hash + 2);
  v59 = v15;
  v56[0] = v57[0];
  v56[1] = v14;
  v56[2] = v58;
  v56[3] = v15;
  StaticHash = OZScene::getStaticHash((OZScene *)v8, v7);
  PCHash128::operator+=(v56, (int *)StaticHash);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v55);
  PCMutex::lock((PCMutex *)(v8 + 1616));
  v38 = (uint64_t **)(v8 + 1688);
  v17 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(v8 + 1688, (const PCHash128 *)v57);
  if ((_QWORD *)(v8 + 1696) == v17)
  {
    PCMutex::unlock((PCMutex *)(v8 + 1616));
  }
  else
  {
    v19 = (_DWORD *)v17[6];
    v18 = (_DWORD *)v17[7];
    v60[0] = v19;
    v60[1] = v18;
    if (v18)
    {
      v20 = (unint64_t *)(v18 + 2);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    PCMutex::unlock((PCMutex *)(v8 + 1616));
    PCMutex::lock((PCMutex *)v19);
    PCMutex::unlock((PCMutex *)v19);
    if (v18)
    {
      v22 = (unint64_t *)(v18 + 2);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
      }
    }
  }
  v24 = (PCMutex *)operator new();
  PCMutex::PCMutex(v24);
  std::shared_ptr<PCMutex>::shared_ptr[abi:ne180100]<PCMutex,void>(&v53, (uint64_t)v24);
  PCMutex::lock(v53);
  PCMutex::lock((PCMutex *)(v8 + 1616));
  v60[0] = OZRenderParams::getHash(v5);
  v25 = std::__tree<std::__value_type<PCHash128,PCMutexRef>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCMutexRef>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCMutexRef>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(v38, (const PCHash128 *)v60[0], (uint64_t)&std::piecewise_construct, v60);
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)v25 + 6, (uint64_t *)&v53);
  PCMutex::unlock((PCMutex *)(v8 + 1616));
  (*(void (**)(__n128 *))(v12->n128_u64[0] + 40))(v12);
  PCWorkingColorVector::PCWorkingColorVector(v10);
  OZScene::begin_t<OZElement,false,false>((_QWORD *)v8, (uint64_t)v51);
  v26 = *(_QWORD *)(v8 + 1208);
  memset(v49, 0, sizeof(v49));
  v50 = 1065353216;
  v45 = v8 + 1200;
  v46 = v26;
  v47 = v8 + 1200;
  v48 = 0;
  while (v51[0] != v45)
  {
    if (v51[0] != v51[2])
    {
      v27 = *(const void **)(v51[0] + 16);
      if (v27)
      {
        if (v28)
        {
          v44 = *((_QWORD *)v5 + 2);
          v30 = v28 + 16;
          v29 = *((_QWORD *)v28 + 2);
          v43 = *(_OWORD *)v5;
          if ((*(unsigned int (**)(char *, __int128 *, uint64_t, uint64_t, uint64_t))(v29 + 104))(v28 + 16, &v43, 1, 1, 1))
          {
            PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v60);
            v40 = (uint64_t *)&v40;
            v41 = &v40;
            v42 = 0;
            OZObjectManipulator::getHashForState(v30, v60, v5, &v40, &v39);
            PCHash128::operator+=((int *)v10, (int *)&v39);
            std::__list_imp<unsigned int>::clear(&v40);
            PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v60);
          }
        }
      }
    }
    OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v51);
  }
  OZScene::getLightHashForState((uint64_t *)v60, (OZScene *)v8, v5);
  PCHash128::operator+=((int *)v10, (int *)v60);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v60);
  v40 = (uint64_t *)&v40;
  v41 = &v40;
  v42 = 0;
  v39 = *(CMTime *)v5;
  ActiveCamera = OZScene::getActiveCamera((OZScene *)v8, &v39);
  Node = OZScene::getNode((OZScene *)v8, ActiveCamera);
  if (Node)
  {
    OZObjectManipulator::getHashForState(Node + 1, v60, v5, &v40, &v39);
    PCHash128::operator+=((int *)v10, (int *)&v39);
  }
  PCHashWriteStream::setHash(v12, (__n128 *)v10);
  PCMutex::unlock(v53);
  PCMutex::lock((PCMutex *)(v8 + 1616));
  v33 = OZRenderParams::getHash(v5);
  v34 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)v38, (const PCHash128 *)v33);
  if ((uint64_t *)(v8 + 1696) != v34)
  {
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v38, v34);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v34 + 6));
    operator delete(v34);
  }
  PCMutex::unlock((PCMutex *)(v8 + 1616));
  std::__list_imp<unsigned int>::clear(&v40);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v60);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v49);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v52);
  v35 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1B2E543A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a34);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'OZScene::getHashForStateRN(uint64_t a1, PCSerializerWriteStream *a2, const OZRenderParams *a3)
{
  OZScene::getHashForState((OZScene *)(a1 - 8), a2, a3);
}

os_unfair_lock_s *OZScene::getStaticHash(OZScene *this, PCSerializerWriteStream *a2)
{
  os_unfair_lock_s *v2;
  const void *v3;
  const void *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  const void *v10;
  _OWORD *v11;
  _OWORD *v12;
  int *StaticHash;
  uint64_t *v15[3];
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  char v19;
  _OWORD v20[2];
  int v21;
  _QWORD v22[4];
  uint64_t v23;
  __n128 v24;
  os_unfair_lock_s *v25;
  uint64_t v26[521];

  v2 = (os_unfair_lock_s *)MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = v2;
  v26[520] = *MEMORY[0x1E0C80C00];
  v6 = v2 + 428;
  v25 = v2 + 428;
  PCSpinLock::lock(v2 + 428);
  if (!(v5[400]._os_unfair_lock_opaque | v5[399]._os_unfair_lock_opaque | v5[401]._os_unfair_lock_opaque | v5[402]._os_unfair_lock_opaque))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v24);
    if (!v7)
      __cxa_bad_cast();
    v8 = v7;
    OZScene::begin_t<OZElement,false,false>(v5, (uint64_t)v22);
    v9 = *(_QWORD *)&v5[302]._os_unfair_lock_opaque;
    memset(v20, 0, sizeof(v20));
    v21 = 1065353216;
    v16 = v5 + 300;
    v17 = v9;
    v18 = v5 + 300;
    v19 = 0;
    (*(void (**)(__n128 *))(v8->n128_u64[0] + 40))(v8);
    while ((os_unfair_lock_s *)v22[0] != v16)
    {
      if (v22[0] != v22[2])
      {
        v10 = *(const void **)(v22[0] + 16);
        if (v10)
        {
          if (v11)
          {
            v12 = v11;
            PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v26);
            v15[0] = (uint64_t *)v15;
            v15[1] = (uint64_t *)v15;
            v15[2] = 0;
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v12 + 1, v26, v15);
            PCHash128::operator+=((int *)&v24, StaticHash);
            std::__list_imp<unsigned int>::clear(v15);
            PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v26);
          }
        }
      }
      OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v22);
    }
    OZScene::getStaticLightHash(v26, (OZScene *)v5);
    PCHash128::operator+=((int *)&v24, (int *)v26);
    OZScene::getStaticCameraHash(v26, (OZScene *)v5);
    PCHash128::operator+=((int *)&v24, (int *)v26);
    OZScene::getStaticProjectNodeHash(v26, (OZScene *)v5);
    PCHash128::operator+=((int *)&v24, (int *)v26);
    PCHashWriteStream::setHash(v8, &v24);
    *(_OWORD *)&v5[399]._os_unfair_lock_opaque = *(_OWORD *)PCHashWriteStream::getHash((int8x8_t *)v8)->i8;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  }
  PCSpinLock::unlock(v6);
  return v5 + 399;
}

void sub_1B2E546A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,os_unfair_lock_s *a33)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a33);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *`non-virtual thunk to'OZScene::getStaticHashRN(uint64_t a1, PCSerializerWriteStream *a2)
{
  return OZScene::getStaticHash((OZScene *)(a1 - 8), a2);
}

uint64_t OZScene::hitCheckDepthOrdered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  _OWORD *v19;
  __int128 v20;
  double v21;
  double v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  float64x2_t v41;
  _BYTE v42[48];
  char *v43;
  char *v44;
  uint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::resize((uint64_t *)&v43, (a7[1] - *a7) >> 3);
  v13 = *a7;
  if ((int)((unint64_t)(a7[1] - *a7) >> 3) >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = (uint64_t)v43;
    do
    {
      v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 + 8 * v15)
                                                                                           + 936))(*(_QWORD *)(v13 + 8 * v15), a2, a3, a4, v16 + v14 + 8, a6);
      v16 = (uint64_t)v43;
      *(_QWORD *)&v43[v14] = v17;
      ++v15;
      v13 = *a7;
      v14 += 32;
    }
    while (v15 < (int)((unint64_t)(a7[1] - *a7) >> 3));
  }
  *(_QWORD *)&v42[40] = 0x3FF0000000000000;
  *(_QWORD *)v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v36 = 1.0;
  v37 = 0u;
  v38 = 0u;
  v40 = 0u;
  v41 = 0u;
  memset(&v42[8], 0, 32);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a4 + 24))(&v34, a4);
  for (i = 0; i != 128; i += 32)
  {
    v19 = (_OWORD *)((char *)&v36 + i);
    v20 = *(__int128 *)((char *)&v34 + i + 16);
    *v19 = *(__int128 *)((char *)&v34 + i);
    v19[1] = v20;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 632))(a4) == 1)
  {
    v21 = (*(double (**)(uint64_t))(*(_QWORD *)a4 + 504))(a4);
    if (v21 <= -0.0000001 || v21 >= 0.0000001)
    {
      v22 = (*(double (**)(uint64_t))(*(_QWORD *)a4 + 320))(a4);
      if (v22 != 0.0)
      {
        v41 = vsubq_f64(v41, vmulq_n_f64(*(float64x2_t *)&v42[16], v22));
        *(float64x2_t *)v42 = vsubq_f64(*(float64x2_t *)v42, vmulq_n_f64(*(float64x2_t *)&v42[32], v22));
      }
    }
  }
  v23 = v43;
  v24 = v44;
  if ((int)((unint64_t)(v44 - v43) >> 5) >= 1)
  {
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v28 = 3.40282347e38;
    do
    {
      if (*(_QWORD *)&v23[v25])
      {
        v34 = *(_OWORD *)&v23[v25 + 8];
        v35 = *(double *)&v23[v25 + 24];
        PCMatrix44Tmpl<double>::transform<double>(&v36, (double *)&v34, (double *)&v34);
        v29 = sqrt(*(double *)&v34 * *(double *)&v34 + *((double *)&v34 + 1) * *((double *)&v34 + 1) + v35 * v35);
        if (v29 < v28)
        {
          v28 = v29;
          v27 = v26;
        }
        v23 = v43;
        v24 = v44;
      }
      ++v26;
      v25 += 32;
    }
    while (v26 < (int)((unint64_t)(v24 - v23) >> 5));
    if (v27 != -1)
    {
      v30 = &v23[32 * v27];
      v31 = *(_OWORD *)(v30 + 8);
      *(_QWORD *)(a5 + 16) = *((_QWORD *)v30 + 3);
      *(_OWORD *)a5 = v31;
      v32 = *(_QWORD *)v30;
      if (!v23)
        return v32;
      goto LABEL_22;
    }
  }
  v32 = 0;
  if (v23)
  {
LABEL_22:
    v44 = v23;
    operator delete(v23);
  }
  return v32;
}

void sub_1B2E549CC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(_QWORD *)(v1 - 120))
    JUMPOUT(0x1B2E549A4);
  JUMPOUT(0x1B2E5499CLL);
}

void sub_1B2E549E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 32 * a2;
  }
  else
  {
    std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__append(a1, a2 - v2);
  }
}

uint64_t OZScene::OZNodeMap::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v7;

  v7 = a2;
  PCSpinLock::lock((os_unfair_lock_t)a1);
  if (*(_DWORD *)(a1 + 48) == a2)
  {
    v4 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>((_QWORD *)(a1 + 8), &v7);
    if (v5)
      v4 = v5[3];
    else
      v4 = 0;
    *(_DWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v4;
  }
  PCSpinLock::unlock((os_unfair_lock_t)a1);
  return v4;
}

void sub_1B2E54AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a9);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getAllDropZones@<X0>(OZScene *this@<X0>, char **a2@<X8>)
{
  const void *v4;
  OZImageElement *v5;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  _OWORD v19[2];
  int v20;
  uint64_t v21[4];
  uint64_t v22;

  OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v21);
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  while ((OZScene *)v21[0] != (OZScene *)((char *)this + 1200))
  {
    if (v21[0] == v21[2] || (v4 = *(const void **)(v21[0] + 16)) == 0)
      v5 = 0;
    else
    if (OZImageElement::isDropZone(v5))
    {
      v6 = *((_DWORD *)v5 + 20);
      v8 = a2[1];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = *a2;
        v11 = (v8 - *a2) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a2 + 2), v14);
          v10 = *a2;
          v8 = a2[1];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = v6;
        v9 = v16 + 4;
        while (v8 != v10)
        {
          v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v8 = v6;
        v9 = v8 + 4;
      }
      a2[1] = v9;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
}

void sub_1B2E54C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;
  va_list va;

  va_start(va, a14);
  v17 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    operator delete(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getAllDropZonesMap@<X0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  OZImageElement *v6;
  int v7;
  const void *v8;
  OZImageElement *v9;
  int v10;
  unsigned int DropZoneInputID;
  _BYTE v13[25];
  __n128 *v14[4];
  int v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  _OWORD v21[2];
  int v22;
  _BYTE v23[25];
  _QWORD v24[4];
  int v25;

  OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v23);
  v4 = *((_QWORD *)this + 151);
  memset(v21, 0, sizeof(v21));
  v22 = 1065353216;
  v17 = (char *)this + 1200;
  v18 = v4;
  v19 = (char *)this + 1200;
  v20 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v16 = 0;
  while (*(char **)v23 != v17)
  {
    if (*(_QWORD *)v23 == *(_QWORD *)&v23[16] || (v5 = *(const void **)(*(_QWORD *)v23 + 16)) == 0)
      v6 = 0;
    else
    if (OZImageElement::isDropZone(v6))
    {
      v7 = *((_DWORD *)v6 + 20);
      *(_QWORD *)v13 = &v16;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a2, &v16, (uint64_t)&std::piecewise_construct, (unsigned int **)v13)+ 8) = v7;
      if (OZImageElement::getDropZoneInputID(v6))
      {
        OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v13);
        *(_OWORD *)v23 = *(_OWORD *)v13;
        *(_OWORD *)&v23[9] = *(_OWORD *)&v13[9];
        v25 = v15;
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v24, v14[2], 0);
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v14);
        while (*(char **)v23 != v17)
        {
          if (*(_QWORD *)v23 == *(_QWORD *)&v23[16] || (v8 = *(const void **)(*(_QWORD *)v23 + 16)) == 0)
            v9 = 0;
          else
          if (OZImageElement::isDropZone(v9))
          {
            v10 = *((_DWORD *)v9 + 20);
            DropZoneInputID = OZImageElement::getDropZoneInputID(v9);
            *(_QWORD *)v13 = &DropZoneInputID;
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a2, &DropZoneInputID, (uint64_t)&std::piecewise_construct, (unsigned int **)v13)+ 8) = v10;
          }
          OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)v23);
        }
        break;
      }
      ++v16;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)v23);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v21);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v24);
}

void sub_1B2E54F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a14);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v33, *(_QWORD **)(v33 + 8));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v34);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t OZScene::reloadResources(OZScene *this, PGContext *a2)
{
  const void *v3;
  void *i;
  uint64_t *v5;
  const void *v6;
  uint64_t v8[4];
  uint64_t v9;

  OZScene::begin_t<OZElement,false,true>((uint64_t *)this, (uint64_t)v8);
  if (v8[0] != v8[2])
  {
    v3 = *(const void **)(v8[0] + 16);
    if (v3)
    {
            i;
      {
        (*(void (**)(void *, PGContext *))(*(_QWORD *)i + 1456))(i, a2);
        v5 = OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++(v8);
        if (*v5 == v5[2])
          break;
        v6 = *(const void **)(*v5 + 16);
        if (!v6)
          break;
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v9);
}

void sub_1B2E55020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::markFactoriesForSerialization(OZScene *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;
  char *v5;
  char *v7;
  _OWORD v8[2];
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  _OWORD v14[2];
  int v15;

  v4 = *((_QWORD *)this + 151);
  v5 = (char *)this + 1200;
  memset(v14, 0, sizeof(v14));
  v15 = 1065353216;
  v10 = v4;
  v11 = v4;
  v12 = (char *)this + 1200;
  v13 = 0;
  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  v7 = (char *)this + 1200;
  while ((char *)v4 != v5)
  {
    (*(void (**)(_QWORD, PCSerializerWriteStream *, _QWORD))(**(_QWORD **)(v4 + 16) + 456))(*(_QWORD *)(v4 + 16), a2, 0);
    v4 = *(_QWORD *)(v10 + 8);
    v10 = v4;
    v5 = v7;
  }
  OZPublishSettings::markFactoriesForSerialization((OZScene *)((char *)this + 720), a2, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v8);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v14);
}

void sub_1B2E55108(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::writeHeader(OZScene *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 60);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZScene::writeBody(OZScene *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  char *v8;
  int Size;
  PVPerfStats::FrameStats *v10;
  uint64_t v11;
  OZPreferenceManager *v12;
  TXParagraphStyleFolder_Factory *v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  const void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  const void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _OWORD v38[2];
  int v39;
  _QWORD v40[4];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char v45;
  _OWORD v46[2];
  int v47;
  _QWORD v48[4];
  uint64_t v49;
  const void **v50;
  const void **v51;
  char *v52;
  char v53;
  _BYTE v54[32];
  int v55;
  __int128 v56;
  const void **v57;
  char v58;
  _BYTE v59[32];
  int v60;
  __int128 v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;

  v63 = 0uLL;
  v64 = 0;
  v8 = (char *)this + 336;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v63);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneScope);
  Size = PVPerfStats::FrameStats::GetSize((OZScene *)((char *)this + 1816));
  v10 = (PVPerfStats::FrameStats *)PCGetDefaultRenderModel();
  if (Size != PVPerfStats::FrameStats::GetSize(v10))
  {
    v11 = PVPerfStats::FrameStats::GetSize((OZScene *)((char *)this + 1816));
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 10);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v11);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v8 + 16))(v8, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, a2, 0, 1, a5);
  v12 = (OZPreferenceManager *)(*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v13 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance(v12);
  if (TXParagraphStyleFolder_Factory::version(v13))
  {
    if ((v14 & 1) == 0
    {
      OZExportSettings::OZExportSettings((OZExportSettings *)&OZScene::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::defaultExportSettings);
      __cxa_atexit((void (*)(void *))OZExportSettings::~OZExportSettings, &OZScene::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::defaultExportSettings, &dword_1B2737000);
    }
    v15 = (char *)this + 640;
    if (OZExportSettings::operator!=((uint64_t)this + 640, (uint64_t)&OZScene::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::defaultExportSettings))
    {
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v15 + 16))((char *)this + 640, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v15 + 24))((char *)this + 640, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)this + 90) + 16))((char *)this + 720, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 90) + 24))((char *)this + 720, a2, 0, 1, a5);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v62 = *((_QWORD *)this + 149);
  v61 = *(_OWORD *)((char *)this + 1176);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v61);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v16 = *((_QWORD *)this + 153);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 + 80);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v17);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  v18 = *((_QWORD *)this + 154);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 + 80);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v19);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
  v56 = *(_OWORD *)((char *)this + 1352);
  v57 = (const void **)*((_QWORD *)this + 171);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, 1, &v56);
  v56 = *((_OWORD *)this + 86);
  v57 = (const void **)*((_QWORD *)this + 174);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, 2, &v56);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  v56 = *(_OWORD *)((char *)this + 1400);
  v57 = (const void **)*((_QWORD *)this + 177);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, 1, &v56);
  v56 = *((_OWORD *)this + 89);
  v57 = (const void **)*((_QWORD *)this + 180);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, 2, &v56);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v20 = *((unsigned int *)this + 398);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v20);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v21 = *((_QWORD *)this + 142);
  if (v21)
  {
    (*(void (**)(_QWORD, PCSerializerWriteStream *, _QWORD))(*(_QWORD *)v21 + 16))(*((_QWORD *)this + 142), a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, a2, 0, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)this + 189) + 16))((char *)this + 1512, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 189) + 24))((char *)this + 1512, a2, 0, 1, 1);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  v22 = (const void **)*((_QWORD *)this + 151);
  memset(v59, 0, sizeof(v59));
  v60 = 1065353216;
  *(_QWORD *)&v56 = v22;
  *((_QWORD *)&v56 + 1) = v22;
  v57 = (const void **)((char *)this + 1200);
  v58 = 0;
  memset(v54, 0, sizeof(v54));
  v55 = 1065353216;
  v50 = (const void **)((char *)this + 1200);
  v51 = v22;
  v52 = (char *)this + 1200;
  v53 = 0;
  if (v22 != (const void **)((char *)this + 1200))
  {
    while (v22 != v57)
    {
      v23 = (char *)v22[2];
      if (!v23
      {
        goto LABEL_20;
      }
LABEL_22:
      v22 = *(const void ***)(v56 + 8);
      *(_QWORD *)&v56 = v22;
      if (v22 == v50)
        goto LABEL_23;
    }
    v23 = 0;
LABEL_20:
    if (!OZChannelBase::testFlag((OZChannelBase *)(v23 + 56), 8))
    {
      v25 = *((_QWORD *)v23 + 6);
      v24 = v23 + 48;
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(v25 + 16))(v24, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
    goto LABEL_22;
  }
LABEL_23:
  OZScene::begin_t<OZAudioLayer,false,false>(this, (uint64_t)v48);
  v26 = 0;
  v27 = *((_QWORD *)this + 151);
  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  v42 = (char *)this + 1200;
  v43 = v27;
  v44 = (char *)this + 1200;
  v45 = 0;
  while ((char *)v48[0] != v42)
  {
    if (v48[0] == v48[2] || (v28 = *(const void **)(v48[0] + 16)) == 0)
    {
      v29 = 0;
      if ((v26 & 1) != 0)
        goto LABEL_31;
LABEL_30:
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
      goto LABEL_31;
    }
    if ((v26 & 1) == 0)
      goto LABEL_30;
LABEL_31:
    if (!OZChannelBase::testFlag((OZChannelBase *)(v29 + 56), 8))
    {
      v31 = *((_QWORD *)v29 + 6);
      v30 = v29 + 48;
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(v31 + 16))(v30, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v30 + 24))(v30, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
    v26 = 1;
    OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++(v48);
  }
  OZScene::begin_t<OZFootageLayer,false,false>(this, (uint64_t)v40);
  v32 = 0;
  v39 = 1065353216;
  memset(v38, 0, sizeof(v38));
  while ((OZScene *)v40[0] != (OZScene *)((char *)this + 1200))
  {
    if (v40[0] == v40[2] || (v33 = *(const void **)(v40[0] + 16)) == 0)
    {
      v34 = 0;
      if ((v32 & 1) != 0)
        goto LABEL_42;
LABEL_41:
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 224))(a2);
      goto LABEL_42;
    }
    if ((v32 & 1) == 0)
      goto LABEL_41;
LABEL_42:
    if (!OZChannelBase::testFlag((OZChannelBase *)(v34 + 56), 8))
    {
      v36 = *((_QWORD *)v34 + 6);
      v35 = v34 + 48;
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(v36 + 16))(v35, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v35 + 24))(v35, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
    }
    v32 = 1;
    OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++(v40);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v38);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v41);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v46);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v49);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v54);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v59);
}

void sub_1B2E559CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *OZScene::begin_t<OZAudioLayer,false,false>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2E55AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::parseBegin(OZScene *this, PCSerializerReadStream *a2)
{
  const void *v3;
  OZSceneNode *v4;
  OZSceneNode *v5;
  _QWORD v7[4];
  uint64_t v8;

  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZSceneScope);
  *((_QWORD *)this + 193) = 0;
  *((_BYTE *)this + 1576) = 1;
  *((_DWORD *)this + 443) = 0;
  OZScene::begin_t<OZProjectNode,false,false>(this, (uint64_t)v7);
  if (v7[0] != v7[2])
  {
    v3 = *(const void **)(v7[0] + 16);
    if (v3)
    {
      if (v4)
      {
        v5 = v4;
        OZScene::removeRootNode(this, v4);
        (*(void (**)(OZSceneNode *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v8);
  return 1;
}

void sub_1B2E55C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZScene::renumberObjectsWithDuplicateIDs(OZScene *this, const void ****a2)
{
  OZChannelBase *v4;
  OZChannelBase *v5;
  uint64_t v6;
  OZChannelBase *ObjectManipulator;
  unsigned int NextUniqueID;
  uint64_t v9;
  const void ***v10;
  const void **v11;
  const void **v12;
  OZChannelFolder *v13;
  uint64_t *v14;
  _QWORD *v15[2];
  unsigned int var3;
  unsigned int *p_var3;

  if (a2)
  {
    if (v4)
    {
      v5 = v4;
      var3 = v4->var3;
      v6 = OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, var3);
      ObjectManipulator = (OZChannelBase *)OZChannelBase::getObjectManipulator(v5);
      if ((OZChannelBase *)v6 != ObjectManipulator)
      {
        NextUniqueID = OZChannelBase::getNextUniqueID(ObjectManipulator);
        OZChannelBase::setID(v5, NextUniqueID);
        v15[0] = 0;
        v15[1] = 0;
        v14 = (uint64_t *)v15;
        p_var3 = &var3;
        *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(&v14, &var3, (uint64_t)&std::piecewise_construct, &p_var3)+ 8) = NextUniqueID;
        v9 = OZChannelBase::getObjectManipulator(v5);
        (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v9 + 360))(v9, &v14);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
      }
    }
    v10 = a2[14];
    if (v10)
    {
      v12 = *v10;
      v11 = v10[1];
      if (*v10 != v11)
      {
        do
        {
          if ((*((_BYTE *)*v12 + 57) & 0x10) != 0)
          {
            OZScene::renumberObjectsWithDuplicateIDs(this, v13);
            v11 = v10[1];
          }
          ++v12;
        }
        while (v12 != v11);
      }
    }
  }
}

void sub_1B2E55D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t OZScene::parseEnd(OZScene *this, const OZChannelFolder *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  const void ****v7;
  OZSceneNode *v8;
  void *Node;
  const void *v10;
  OZChannelBase *v11;
  const PCString *NextUniqueID;
  OZSceneNode *v13;
  uint64_t i;
  uint64_t ComputedWorkingGamut;
  uint64_t v16;
  PCString v18;
  _QWORD v19[4];
  uint64_t v20;
  void *__p;
  _QWORD *v22;
  uint64_t v23;

  v3 = (_QWORD *)((char *)this + 920);
  OZChannelBase::updateIDGenerator((OZChannelBase *)((char *)this + 920), a2);
  __p = 0;
  v22 = 0;
  v23 = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *((const void **)this + 194), *((_QWORD *)this + 195), (uint64_t)(*((_QWORD *)this + 195) - *((_QWORD *)this + 194)) >> 3);
  *((_QWORD *)this + 195) = *((_QWORD *)this + 194);
  v4 = __p;
  v5 = v22;
  if (__p != v22)
  {
    do
    {
      v6 = (void *)*v4;
      v7 = (const void ****)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 216))(*v4);
      OZScene::renumberObjectsWithDuplicateIDs(this, v7);
      if (v8)
        OZScene::registerNode(this, v8);
      else
        OZScene::registerObject(this, (OZObjectManipulator *)v6);
      ++v4;
    }
    while (v4 != v5);
  }
  *((_QWORD *)this + 153) = OZScene::getNode(this, *((_DWORD *)this + 386));
  Node = OZScene::getNode(this, *((_DWORD *)this + 387));
  if (Node)
  *((_QWORD *)this + 154) = Node;
  *((_BYTE *)this + 1576) = 0;
  OZScene::begin_t<OZProjectNode,false,false>(this, (uint64_t)v19);
  if (v19[0] == v19[2]
    || (v10 = *(const void **)(v19[0] + 16)) == 0
  {
    PCURL::PCURL((PCURL *)&v18, CFSTR("Project Node Name"));
    NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v11);
    v13 = (OZSceneNode *)OZProjectNode::create((OZProjectNode *)&v18, NextUniqueID);
    PCString::~PCString(&v18);
    OZScene::addRootNode(this, v13);
  }
  for (i = *((_QWORD *)this + 151); (OZScene *)i != (OZScene *)((char *)this + 1200); i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD))(**(_QWORD **)(i + 16) + 848))(*(_QWORD *)(i + 16));
  OZPublishSettings::didFinishLoadingIntoScene((OZScene *)((char *)this + 720));
  OZScene::has3DObjects(this, 1);
  OZScene::recalcDependencies(this);
  ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);
  v16 = OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336));
  OZScene::updateColorChannelsForWorkingGamut((char *)this, ComputedWorkingGamut, v16, v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v20);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1B2E55FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a15);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t OZScene::has3DObjects(OZScene *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  BOOL v10;
  _OWORD v12[2];
  int v13;
  uint64_t v14[4];
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  _OWORD v20[2];
  int v21;
  uint64_t v22[4];
  uint64_t v23;

  if (a2)
  {
    OZScene::begin_t<OZCamera,false,true>((uint64_t *)this, (uint64_t)v22);
    v3 = *((_QWORD *)this + 151);
    memset(v20, 0, sizeof(v20));
    v21 = 1065353216;
    v16 = (char *)this + 1200;
    v17 = v3;
    v18 = (char *)this + 1200;
    v19 = 0;
    while (1)
    {
      v4 = v22[0];
      v5 = v16;
      if ((char *)v22[0] == v16)
        break;
      if (v22[0] != v22[2])
      {
        v6 = *(const void **)(v22[0] + 16);
        if (v6)
        {
          {
            break;
          }
        }
      }
      OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(v22);
    }
    OZScene::begin_t<OZLight,false,true>((uint64_t *)this, (uint64_t)v14);
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    while (1)
    {
      v7 = v14[0];
      if ((OZScene *)v14[0] == (OZScene *)((char *)this + 1200))
        break;
      if (v14[0] != v14[2])
      {
        v8 = *(const void **)(v14[0] + 16);
        if (v8)
        {
          {
            break;
          }
        }
      }
      OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++(v14);
    }
    v10 = (char *)v4 != v5 || v7 != (_QWORD)this + 1200;
    *((_BYTE *)this + 1768) = v10;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v12);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v15);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  }
  return *((unsigned __int8 *)this + 1768);
}

void sub_1B2E561EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 120);
  _Unwind_Resume(a1);
}

char *OZScene::updateColorChannelsForWorkingGamut(char *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char *v7;
  char *v8;
  int v9;
  OZChannel *v10;
  double v11;
  OZChannel *v12;
  char ***v13;
  char **v14;
  char **v15;
  void *v16;

  if (a4)
  {
    v7 = result;
    if (result)
    {
      v8 = result;
      if ((_DWORD)a2)
        v9 = a3;
      else
        v9 = 1;
      v10 = (OZChannel *)(result + 136);
      OZChannel::setSliderMin((OZChannel *)(result + 136), 0.0);
      if (v9)
        v11 = 1.0;
      else
        v11 = 4.0;
      OZChannel::setSliderMax(v10, v11);
      OZChannel::setSliderMin((OZChannel *)(v8 + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)(v8 + 288), v11);
      v12 = (OZChannel *)(v8 + 440);
      OZChannel::setSliderMin(v12, 0.0);
      result = (char *)OZChannel::setSliderMax(v12, v11);
    }
    v13 = (char ***)a4[14];
    if (v13)
    {
      v15 = *v13;
      v14 = v13[1];
      if (*v13 != v14)
      {
        do
        {
          result = *v15;
          if (((*v15)[57] & 0x10) != 0)
          {
            result = (char *)OZScene::updateColorChannelsForWorkingGamut(v7, a2, a3, v16);
            v14 = v13[1];
          }
          ++v15;
        }
        while (v15 != v14);
      }
    }
  }
  return result;
}

uint64_t OZScene::getComputedWorkingGamut(OZScene *this)
{
  unsigned int SanitizedViewGamut;
  uint64_t v3;
  std::mutex *v4;

  if (OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336)))
  {
    SanitizedViewGamut = OZScene::getSanitizedViewGamut(this);
    if (SanitizedViewGamut >= 6)
      return 1;
    else
      return dword_1B355E5F8[SanitizedViewGamut];
  }
  else
  {
    v4 = (std::mutex *)((char *)this + 232);
    PCSharedMutex::lock_shared((std::mutex *)((char *)this + 232));
    v3 = *((unsigned int *)this + 98);
    PCSharedMutex::unlock_shared(v4);
  }
  return v3;
}

uint64_t OZScene::dynamicRangeTrackingEnabled(OZScene *this)
{
  return OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336));
}

uint64_t OZScene::parseElement(OZScene *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  double v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t SceneNode;
  PCSerializer *v11;
  char *v12;
  uint64_t v13;
  CMTimeEpoch epoch;
  const void *v15;
  void *v16;
  OZSceneNode *v17;
  _QWORD *v18;
  uint64_t v19;
  OZChannelBase *v20;
  OZChannelBase *v21;
  PCSerializer *v22;
  OZTimeMarkerSet *v23;
  uint64_t v25;
  CMTimeEpoch v26;
  CMTime v27;
  CMTime v28;
  __int128 v29;
  CMTimeEpoch v30;
  Float64 v31;
  uint64_t v32;
  PCSharedCount v33;

  PCSharedCount::PCSharedCount(&v33);
  v31 = 0.0;
  v32 = 0;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > 60)
  {
    switch(v6)
    {
      case '=':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v32 + 4);
        *(_OWORD *)&v28.value = xmmword_1B355DCC0;
        SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v28, (uint64_t)&v33, HIDWORD(v32));
        goto LABEL_26;
      case '>':
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v32);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v32 + 4);
        v15 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v32);
        if (!v15)
          break;
        if (!v16)
          break;
        SceneNode = (*(uint64_t (**)(void *, PCSharedCount *, _QWORD))(*(_QWORD *)v16 + 168))(v16, &v33, HIDWORD(v32));
LABEL_26:
        v17 = (OZSceneNode *)SceneNode;
        if (SceneNode)
        {
          OZChannelBase::setID((OZChannelBase *)(SceneNode + 56), HIDWORD(v32));
          v18 = operator new(0x18uLL);
          v18[1] = (char *)this + 1200;
          v18[2] = v17;
          v19 = *((_QWORD *)this + 150);
          *v18 = v19;
          *(_QWORD *)(v19 + 8) = v18;
          *((_QWORD *)this + 150) = v18;
          ++*((_QWORD *)this + 152);
          v20 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v17 + 640))(v17);
          OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 920), v20);
          v21 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)v17 + 640))(v17);
          OZChannelBase::resetFlag(v21, 64, 0);
          OZScene::registerNode(this, v17);
          OZScene::addAllDependencies((uint64_t)this, v17);
          v11 = (OZSceneNode *)((char *)v17 + 48);
LABEL_34:
          PCSerializerReadStream::pushHandler(a2, v11);
        }
        break;
      case '?':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v32 + 4);
        *(_OWORD *)&v28.value = xmmword_1B355DCD0;
        SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v28, (uint64_t)&v33, HIDWORD(v32));
        goto LABEL_26;
      case '@':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v32 + 4);
        *(_OWORD *)&v28.value = xmmword_1B355E420;
        SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v28, (uint64_t)&v33, HIDWORD(v32));
        goto LABEL_26;
      case 'B':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v32 + 4);
        *(_OWORD *)&v28.value = xmmword_1B355DCE0;
        SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v28, (uint64_t)&v33, HIDWORD(v32));
        goto LABEL_26;
      case 'H':
        v22 = (PCSerializer *)*((_QWORD *)this + 142);
        if (!v22)
        {
          v23 = (OZTimeMarkerSet *)operator new();
          OZTimeMarkerSet::OZTimeMarkerSet(v23);
          OZChannelObjectRoot::setTimeMarkers((_QWORD *)this + 115, (uint64_t)v23);
          v22 = (PCSerializer *)*((_QWORD *)this + 142);
        }
        PCSerializerReadStream::pushHandler(a2, v22);
        break;
      case 'J':
        v11 = (OZScene *)((char *)this + 336);
        goto LABEL_34;
      case 'K':
        v11 = (OZScene *)((char *)this + 1512);
        goto LABEL_34;
      default:
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        if (*((_DWORD *)a2 + 26) > 4u)
          goto LABEL_52;
        if ((*(unsigned int (**)(PCStreamElement *, Float64 *))(*(_QWORD *)a3 + 64))(a3, &v31))
        {
          v7 = v31;
          memset(&v28, 0, sizeof(v28));
          OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), (__n128 *)&v28);
          v28.value = (uint64_t)(v7 * (double)v28.value);
          v8 = (_OWORD *)((char *)this + 1176);
          *((_QWORD *)this + 149) = v28.epoch;
          v9 = *(_OWORD *)&v28.value;
LABEL_54:
          *v8 = v9;
          break;
        }
        if (*((_DWORD *)a2 + 26) < 5u)
          break;
LABEL_52:
        if ((*(unsigned int (**)(PCStreamElement *, __int128 *))(*(_QWORD *)a3 + 88))(a3, &v29))
        {
          v8 = (_OWORD *)((char *)this + 1176);
          *((_QWORD *)this + 149) = v30;
          v9 = v29;
          goto LABEL_54;
        }
        break;
      case 2:
        v12 = (char *)this + 1544;
        goto LABEL_19;
      case 3:
        v12 = (char *)this + 1548;
        goto LABEL_19;
      case 4:
        v13 = *(_QWORD *)a3;
        if (*((_DWORD *)a2 + 26) < 5u)
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(v13 + 144))(a3, 1, &v31))
          {
            v27 = *(CMTime *)((char *)a2 + 112);
            operator*(&v27, &v28, v31);
            *(CMTime *)((char *)this + 1352) = v28;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(_QWORD *)a3 + 144))(a3, 2, &v31))
          {
            v27 = *(CMTime *)((char *)a2 + 112);
            operator*(&v27, &v28, v31);
            *((_OWORD *)this + 86) = *(_OWORD *)&v28.value;
            epoch = v28.epoch;
            goto LABEL_40;
          }
        }
        else
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, __int128 *))(v13 + 168))(a3, 1, &v29))
          {
            *((_QWORD *)this + 171) = v30;
            *(_OWORD *)((char *)this + 1352) = v29;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, __int128 *))(*(_QWORD *)a3 + 168))(a3, 2, &v29))
          {
            *((_OWORD *)this + 86) = v29;
            epoch = v30;
LABEL_40:
            *((_QWORD *)this + 174) = epoch;
          }
        }
LABEL_41:
        v25 = *(_QWORD *)a3;
        if (*((_DWORD *)a2 + 26) < 5u)
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(v25 + 144))(a3, 1, &v31))
          {
            v27 = *(CMTime *)((char *)a2 + 112);
            operator*(&v27, &v28, v31);
            *(CMTime *)((char *)this + 1400) = v28;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(_QWORD *)a3 + 144))(a3, 2, &v31))
          {
            v27 = *(CMTime *)((char *)a2 + 112);
            operator*(&v27, &v28, v31);
            *((_OWORD *)this + 89) = *(_OWORD *)&v28.value;
            v26 = v28.epoch;
            goto LABEL_50;
          }
        }
        else
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, __int128 *))(v25 + 168))(a3, 1, &v29))
          {
            *((_QWORD *)this + 177) = v30;
            *(_OWORD *)((char *)this + 1400) = v29;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, __int128 *))(*(_QWORD *)a3 + 168))(a3, 2, &v29))
          {
            *((_OWORD *)this + 89) = v29;
            v26 = v30;
LABEL_50:
            *((_QWORD *)this + 180) = v26;
            break;
          }
        }
        break;
      case 5:
        goto LABEL_41;
      case 6:
      case 7:
      case 8:
        break;
      case 9:
        v12 = (char *)this + 1592;
LABEL_19:
        (*(void (**)(PCStreamElement *, char *))(*(_QWORD *)a3 + 32))(a3, v12);
        break;
      default:
        if (v6 == 33)
        {
          v11 = (OZScene *)((char *)this + 640);
        }
        else
        {
          if (v6 != 34)
            break;
          v11 = (OZScene *)((char *)this + 720);
        }
        goto LABEL_34;
    }
  }
  PCString::~PCString((PCString *)&v33);
  return 1;
}

void sub_1B2E56A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

double OZScene::begin@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 151);
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = (char *)this + 1200;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

double OZScene::begin_all@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 151);
  result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 80) = 1065353216;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = (char *)this + 1200;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

void OZScene::willModifyChannel(OZDocument **this, OZChannelBase *a2, int a3)
{
  OZDocument::willModifyChannel(this[198], a2, a3);
}

uint64_t OZScene::deleteUnusedSceneNodeFilesForNodes(OZScene *this, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *Node;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;

  __p = 0;
  v27 = 0;
  v28 = 0;
  if (!a2)
    return 0;
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      Node = OZScene::getNode(this, *((_DWORD *)v6 + 7));
      if (Node)
      {
        if (v8)
        {
          v9 = v8;
          if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 1336))(v8) & 1) == 0)
          {
            v10 = v9[20];
            v11 = v27;
            if (v27 >= v28)
            {
              v13 = (char *)__p;
              v14 = (v27 - (_BYTE *)__p) >> 2;
              v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 62)
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v16 = v28 - (_BYTE *)__p;
              if ((v28 - (_BYTE *)__p) >> 1 > v15)
                v15 = v16 >> 1;
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
                v17 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v17 = v15;
              if (v17)
              {
                v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v28, v17);
                v13 = (char *)__p;
                v11 = v27;
              }
              else
              {
                v18 = 0;
              }
              v19 = &v18[4 * v14];
              *(_DWORD *)v19 = v10;
              v12 = v19 + 4;
              while (v11 != v13)
              {
                v20 = *((_DWORD *)v11 - 1);
                v11 -= 4;
                *((_DWORD *)v19 - 1) = v20;
                v19 -= 4;
              }
              __p = v19;
              v27 = v12;
              v28 = &v18[4 * v17];
              if (v13)
                operator delete(v13);
            }
            else
            {
              *(_DWORD *)v27 = v10;
              v12 = v11 + 4;
            }
            v27 = v12;
          }
        }
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v6[2];
          v23 = *v22 == (_QWORD)v6;
          v6 = v22;
        }
        while (!v23);
      }
      v6 = v22;
    }
    while (v22 != v5);
  }
  v24 = OZScene::deleteSceneNodeFiles((OZDocument **)this, (__int32 **)&__p, a3);
  if (__p)
  {
    v27 = (char *)__p;
    operator delete(__p);
  }
  return v24;
}

void sub_1B2E56CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t OZScene::duplicateSelected(OZScene *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  const struct __class_type_info *v24;
  uint64_t v25;
  const void *v26;
  OZSceneNode *v27;
  _QWORD **v28;
  _QWORD **v29;
  _QWORD *v30;
  const void *v31;
  char *v32;
  OZSceneNode *v33;
  const void *v34;
  char *v35;
  char *v36;
  OZChannelBase *v37;
  const struct __class_type_info *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD **v45;
  uint64_t v46;
  const void *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  OZImageElement *v54;
  OZImageElement *v55;
  OZChannelBase *v56;
  char *v57;
  OZChannelBase *v58;
  OZObjectManipulator *v59;
  char *v60;
  OZChannelBase *v61;
  OZObjectManipulator *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD **v65;
  unint64_t v66;
  OZPublishSettings *v68;
  uint64_t v69;
  OZScene *v70;
  PCString v71;
  void *v72;
  char *v73;
  char *v74;
  _QWORD **v75;
  _QWORD *v76[2];
  void *__p;
  char *v78;
  char *v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  int v83;
  _OWORD v84[2];
  int v85;
  uint64_t v86[3];
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;

  OZScene::begin_all_sel((uint64_t *)this, (uint64_t)v86);
  v70 = this;
  v2 = *((_QWORD *)this + 151);
  memset(v84, 0, sizeof(v84));
  v81 = 0;
  v82 = 0;
  v85 = 1065353216;
  v80[0] = (char *)this + 1200;
  v80[1] = v2;
  v80[2] = (char *)this + 1200;
  v83 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  v76[0] = 0;
  v76[1] = 0;
  v74 = 0;
  v75 = v76;
  v72 = 0;
  v73 = 0;
  while (1)
  {
    if (v89 == v83)
    {
      if (v89 == 3)
        v3 = &v88;
      else
        v3 = &v87;
      if (v89 == 3)
        v4 = &v82;
      else
        v4 = &v81;
      if (v89 < 2)
      {
        v3 = v86;
        v4 = v80;
      }
      if (*v3 == *v4)
        break;
    }
    if (v89 >= 2)
    {
      if (v89 == 2)
      {
        v6 = *(_QWORD *)(v87 + 16);
        v7 = v6 + 48;
        goto LABEL_18;
      }
      v5 = v88;
    }
    else
    {
      v5 = v86[0];
    }
    v6 = *(_QWORD *)(v5 + 16);
    v7 = v6 + 16;
LABEL_18:
    if (v6)
      v8 = v7;
    else
      v8 = 0;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 256))(v8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    v11 = v10;
    v12 = v78;
    if (v78 >= v79)
    {
      v14 = (char *)__p;
      v15 = (v78 - (_BYTE *)__p) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v17 = v79 - (_BYTE *)__p;
      if ((v79 - (_BYTE *)__p) >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v79, v18);
        v14 = (char *)__p;
        v12 = v78;
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      *(_DWORD *)v20 = v11;
      v13 = v20 + 4;
      while (v12 != v14)
      {
        v21 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      __p = v20;
      v78 = v13;
      v79 = &v19[4 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v78 = v10;
      v13 = v12 + 4;
    }
    v78 = v13;
    OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::operator++(v86);
  }
  v69 = v78 - (_BYTE *)__p;
  if (v78 != __p)
  {
    OZChannelBase::setRangeName(*((OZChannelBase **)this + 188), (const PCString *)1);
    v22 = 0;
    v23 = (char *)this + 1288;
    v68 = (OZScene *)((char *)this + 720);
    if ((unint64_t)(v69 >> 2) <= 1)
      v25 = 1;
    else
      v25 = v69 >> 2;
    do
    {
      v26 = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)v23, *((_DWORD *)__p + v22));
      if (((*(uint64_t (**)(const void *))(*(_QWORD *)v26 + 96))(v26) & 1) != 0)
      {
        if (v27)
        {
          v30 = (_QWORD *)*((_QWORD *)v27 + 120);
          v31 = (const void *)(*(uint64_t (**)(_QWORD, OZSceneNode *, _QWORD))(**((_QWORD **)v27 + 1) + 24))(*((_QWORD *)v27 + 1), v27, 0);
          if (v31)
          else
            v32 = 0;
          v36 = v32 + 16;
          OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v32 + 16));
          v37 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v32 + 640))(v32);
          OZChannelBase::setNameUnset(v37, 1);
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(*((_QWORD *)v27 + 2) + 56))((_QWORD *)v27 + 2, 1))
            (*(void (**)(char *))(*(_QWORD *)v32 + 776))(v32);
          (*(void (**)(char *, _QWORD ***, _QWORD))(*(_QWORD *)v32 + 824))(v32, &v75, 0);
          v38 = v24;
          v39 = v73;
          if (v73 >= v74)
          {
            v41 = (v73 - (_BYTE *)v72) >> 3;
            if ((unint64_t)(v41 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v42 = (v74 - (_BYTE *)v72) >> 2;
            if (v42 <= v41 + 1)
              v42 = v41 + 1;
            if ((unint64_t)(v74 - (_BYTE *)v72) >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v74, v43);
            else
              v44 = 0;
            v49 = &v44[8 * v41];
            *(_QWORD *)v49 = v36;
            v40 = v49 + 8;
            v51 = (char *)v72;
            v50 = v73;
            if (v73 != v72)
            {
              do
              {
                v52 = *((_QWORD *)v50 - 1);
                v50 -= 8;
                *((_QWORD *)v49 - 1) = v52;
                v49 -= 8;
              }
              while (v50 != v51);
              v50 = (char *)v72;
            }
            v72 = v49;
            v73 = v40;
            v74 = &v44[8 * v43];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *(_QWORD *)v73 = v36;
            v40 = v39 + 8;
          }
          v73 = v40;
          if (v30)
          {
            v53 = 1088;
            if ((*((_DWORD *)v27 + 256) & 8) == 0)
              v53 = 992;
            (*(void (**)(_QWORD *, char *, OZSceneNode *))(*v30 + v53))(v30, v32, v27);
            v24 = v38;
          }
          else
          {
            OZScene::addRootNodeBefore(v70, (OZSceneNode *)v32, v27);
            v24 = v38;
          }
          PCURL::PCURL((PCURL *)&v71, CFSTR("Undo Duplicate"));
          (*(void (**)(char *, PCString *, uint64_t))(*(_QWORD *)v36 + 176))(v32 + 16, &v71, 1);
          PCString::~PCString(&v71);
          if (v69 == 4)
            OZScene::selectObject(v70, (OZObjectManipulator *)(v32 + 16), 0, 0);
          (*(void (**)(char *, OZSceneNode *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v32 + 224))(v32, v27, 0, 1, 0);
          if (v54)
          {
            v55 = v54;
            if (OZImageElement::isBackgroundDropZone(v54))
            {
              v56 = (OZChannelBase *)((char *)v55 + 18904);
              OZChannelBase::resetFlag(v56, 0x1000000000, 1);
              OZPublishSettings::addChannel(v68, v56);
              OZDocument::postNotification(*((OZDocument **)v70 + 198), 0x8000000);
            }
          }
        }
        else if (v28)
        {
          v33 = (OZSceneNode *)((uint64_t (*)(_QWORD **))(*v28)[40])(v28);
          v34 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD **, uint64_t))(*v28[1] + 24))(v28[1], v28, 2);
          if (v34)
          else
            v35 = 0;
          v57 = v35 + 16;
          OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v35 + 16));
          v58 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v35 + 312))(v35);
          OZChannelBase::setNameUnset(v58, 1);
          if (((unsigned int (*)(_QWORD **, uint64_t))v28[2][7])(v28 + 2, 1))
            (*(void (**)(char *))(*(_QWORD *)v57 + 80))(v35 + 16);
          if (v33)
          {
            OZSceneNode::insertBehaviorBefore(v33, (OZBehavior *)v35, (OZBehavior *)v28);
            PCURL::PCURL((PCURL *)&v71, CFSTR("Undo Duplicate"));
            (*(void (**)(char *, PCString *, uint64_t))(*(_QWORD *)v57 + 176))(v35 + 16, &v71, 1);
            PCString::~PCString(&v71);
            if (v69 == 4)
              OZScene::selectObject(v70, (OZObjectManipulator *)(v35 + 16), 0, 0);
          }
          OZRigBehavior::DuplicateAffectingRigBehaviors((OZRigBehavior *)(v28 + 2), (OZObjectManipulator *)(v35 + 16), v59);
        }
        else
        {
          v45 = v29;
          if (v29)
          {
            v46 = ((uint64_t (*)(_QWORD **))(*v29)[31])(v29);
            v47 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD **, uint64_t))(*v45[5] + 24))(v45[5], v45 + 4, 2);
            if (v47)
            else
              v48 = 0;
            v60 = v48 + 48;
            OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v48 + 48));
            v61 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(_QWORD *)v48 + 240))(v48);
            OZChannelBase::setNameUnset(v61, 1);
            if (((unsigned int (*)(_QWORD **, uint64_t))v45[6][7])(v45 + 6, 1))
              (*(void (**)(char *))(*(_QWORD *)v60 + 80))(v48 + 48);
            if (v46)
            {
              (*(void (**)(uint64_t, char *, _QWORD **))(*(_QWORD *)v46 + 344))(v46, v48, v45);
              PCURL::PCURL((PCURL *)&v71, CFSTR("Undo Duplicate"));
              (*(void (**)(char *, PCString *, uint64_t))(*(_QWORD *)v60 + 176))(v48 + 48, &v71, 1);
              PCString::~PCString(&v71);
              if (v69 == 4)
                OZScene::selectObject(v70, (OZObjectManipulator *)(v48 + 48), 0, 0);
            }
            OZRigBehavior::DuplicateAffectingRigBehaviors((OZRigBehavior *)(v45 + 6), (OZObjectManipulator *)(v48 + 48), v62);
          }
        }
      }
      ++v22;
    }
    while (v22 != v25);
    v63 = 0;
    do
    {
      v64 = OZScene::OZNodeMap::operator[]((uint64_t)v23, *((_DWORD *)__p + v63));
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 312))(v64);
      ++v63;
    }
    while (v25 != v63);
    v65 = (_QWORD **)v72;
    if (v73 != v72)
    {
      v66 = 0;
      do
      {
        (*(void (**)(_QWORD *, _QWORD ***))(*v65[v66] + 360))(v65[v66], &v75);
        ++v66;
        v65 = (_QWORD **)v72;
      }
      while (v66 < (v73 - (_BYTE *)v72) >> 3);
    }
    OZDocument::postNotification(*((OZDocument **)v70 + 198), 48);
  }
  if (v72)
  {
    v73 = (char *)v72;
    operator delete(v72);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v75, v76[0]);
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v84);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v90);
}

void sub_1B2E5756C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, void *__p, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;

  PCString::~PCString(&a14);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a18, a19);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v22 - 128);
  _Unwind_Resume(a1);
}

uint64_t OZScene::deleteSceneNodeFiles(OZDocument **this, __int32 **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *Node;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  OZDocument *v25;
  unsigned __int32 v26;
  _QWORD *v27;
  _QWORD **v28;
  _QWORD *v29;
  _QWORD **v30;
  unsigned __int32 v31;
  _QWORD *v32;
  __int32 *v33;
  __int32 *v34;
  BOOL v35;
  uint64_t v36;
  __int32 *v37;
  OZChannelBase *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int32x4_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;

  v55 = 0;
  v56 = 0;
  v54 = (uint64_t *)&v55;
  v3 = (char *)a2[1] - (char *)*a2;
  if (!v3)
  {
LABEL_69:
    v36 = 1;
    goto LABEL_70;
  }
  v5 = 0;
  v6 = v3 >> 2;
  v7 = this + 159;
  if (v6 <= 1)
    v8 = 1;
  else
    v8 = v6;
  do
  {
    v9 = *v7;
    if (*v7)
    {
      v10 = (*a2)[v5];
      v11 = v7;
      do
      {
        v12 = *(_DWORD *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = (_QWORD *)v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != v7 && *((_DWORD *)v11 + 8) <= v10)
      {
        v15 = (_QWORD *)v11[5];
        if (v15)
        {
          v18 = (_QWORD *)*v15;
          v16 = v15 + 1;
          v17 = v18;
          if (v18 != v16)
          {
            do
            {
              Node = OZScene::getNode((OZScene *)this, *((_DWORD *)v17 + 7));
              v20 = Node;
              if (Node)
              {
                {
                  v21 = v20[1];
                  v53 = (int32x4_t)xmmword_1B355E440;
                  if ((OZFactory::isKindOfClass(v21, &v53) & 1) == 0)
                    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v54, (unsigned int *)v17 + 7, (_DWORD *)v17 + 7);
                }
              }
              v22 = (_QWORD *)v17[1];
              if (v22)
              {
                do
                {
                  v23 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  v23 = (_QWORD *)v17[2];
                  v24 = *v23 == (_QWORD)v17;
                  v17 = v23;
                }
                while (!v24);
              }
              v17 = v23;
            }
            while (v23 != v16);
          }
        }
      }
    }
    ++v5;
  }
  while (v5 != v8);
  if (!v56 || (OZChannelBase::isObjectRef((OZChannelBase *)this) & 1) != 0)
  {
    v25 = this[153];
    if (v25)
    {
      v26 = *((_DWORD *)v25 + 20);
      v27 = v55;
      if (!v55)
        goto LABEL_41;
      v28 = &v55;
      do
      {
        v29 = v27;
        v30 = v28;
        v31 = *((_DWORD *)v27 + 7);
        v32 = v27 + 1;
        if (v31 >= v26)
        {
          v32 = v29;
          v28 = (_QWORD **)v29;
        }
        v27 = (_QWORD *)*v32;
      }
      while (v27);
      if (v28 == &v55)
        goto LABEL_41;
      if (v31 < v26)
        v29 = v30;
      if (v26 < *((_DWORD *)v29 + 7))
LABEL_41:
        v28 = &v55;
      v33 = a2[1];
      v34 = wmemchr(*a2, v26, v33 - *a2);
      if (v28 == &v55)
      {
        if (v34)
          v37 = v34;
        else
          v37 = v33;
        v35 = v37 != a2[1];
      }
      else
      {
        v35 = 1;
      }
    }
    else
    {
      v35 = 0;
    }
    v38 = (OZChannelBase *)this[188];
    if (v38)
      OZChannelBase::setRangeName(v38, (const PCString *)1);
    v39 = v54;
    if (v54 != (uint64_t *)&v55)
    {
      do
      {
        v40 = OZScene::OZNodeMap::operator[]((uint64_t)(this + 161), *((_DWORD *)v39 + 7));
        v41 = v40;
        if (v40)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 176))(v40, a3, 2);
          v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 216))(v41);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 184))(v41, v42);
        }
        v43 = (uint64_t *)v39[1];
        if (v43)
        {
          do
          {
            v44 = v43;
            v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            v44 = (uint64_t *)v39[2];
            v24 = *v44 == (_QWORD)v39;
            v39 = v44;
          }
          while (!v24);
        }
        v39 = v44;
      }
      while (v44 != (uint64_t *)&v55);
    }
    for (i = 0; i != v8; ++i)
    {
      v46 = OZScene::OZNodeMap::operator[]((uint64_t)(this + 161), (*a2)[i]);
      v47 = v46;
      if (v46)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 176))(v46, a3, 2);
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 216))(v47);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 184))(v47, v48);
      }
    }
    if (v35)
    {
      OZScene::clearSelection((OZScene *)this);
      this[153] = 0;
      v49 = 48;
    }
    else
    {
      v49 = 16;
    }
    OZDocument::postNotification(this[198], v49);
    goto LABEL_69;
  }
  v36 = 0;
LABEL_70:
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v54, v55);
  return v36;
}

void sub_1B2E579B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t OZScene::unusedSceneNodeFileIDs@<X0>(OZScene *this@<X0>, char **a2@<X8>)
{
  const void *v4;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  _OWORD v19[2];
  int v20;
  uint64_t v21[4];
  uint64_t v22;

  OZScene::begin_t<OZSceneNodeFile,false,true>((uint64_t *)this, (uint64_t)v21);
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  while ((OZScene *)v21[0] != (OZScene *)((char *)this + 1200))
  {
    if (v21[0] == v21[2] || (v4 = *(const void **)(v21[0] + 16)) == 0)
      v5 = 0;
    else
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 1336))(v5) & 1) == 0)
    {
      v6 = v5[20];
      v8 = a2[1];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = *a2;
        v11 = (v8 - *a2) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a2 + 2), v14);
          v10 = *a2;
          v8 = a2[1];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = v6;
        v9 = v16 + 4;
        while (v8 != v10)
        {
          v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v8 = v6;
        v9 = v8 + 4;
      }
      a2[1] = v9;
    }
    OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
}

void sub_1B2E57B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;
  va_list va;

  va_start(va, a14);
  v17 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    operator delete(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::dirty(OZScene *this)
{
  uint64_t v1;
  char *v3;
  _OWORD v4[2];
  int v5;
  _QWORD v6[3];
  char v7;
  _OWORD v8[2];
  int v9;

  v1 = *((_QWORD *)this + 151);
  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  v6[0] = v1;
  v6[1] = v1;
  v6[2] = (char *)this + 1200;
  v7 = 0;
  memset(v4, 0, sizeof(v4));
  v5 = 1065353216;
  v3 = (char *)this + 1200;
  while ((char *)v6[0] != v3)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v6[0] + 16) + 496))(*(_QWORD *)(v6[0] + 16));
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v6);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v8);
}

void sub_1B2E57C88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

double OZScene::invalidateStaticHash(OZScene *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 1596) = 0u;
  return result;
}

_QWORD *OZScene::begin_t<OZElement,false,false>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2E57D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::getStaticLightHash(OZScene *this)
{
  _QWORD *v1;
  PCWorkingColorVector *v2;
  int *v3;
  uint64_t v4;
  _OWORD *v5;
  int *StaticHash;
  uint64_t *v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  _OWORD v13[2];
  int v14;
  _QWORD v15[4];
  uint64_t v16;
  _BYTE v17[4160];
  uint64_t v18;

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v3 = (int *)v2;
  v18 = *MEMORY[0x1E0C80C00];
  PCWorkingColorVector::PCWorkingColorVector(v2);
  OZScene::begin_t<OZLight,false,false>(v1, (uint64_t)v15);
  v4 = v1[151];
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v9 = v1 + 150;
  v10 = v4;
  v11 = v1 + 150;
  v12 = 0;
  while ((_QWORD *)v15[0] != v9)
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
    v8[0] = (uint64_t *)v8;
    v8[1] = (uint64_t *)v8;
    v8[2] = 0;
    if (v15[0] == v15[2])
    {
      v5 = 0;
    }
    else
    {
      v5 = *(_OWORD **)(v15[0] + 16);
      if (v5)
    }
    StaticHash = (int *)OZObjectManipulator::getStaticHash(v5 + 1, v17, v8);
    PCHash128::operator+=(v3, StaticHash);
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v15);
    std::__list_imp<unsigned int>::clear(v8);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
}

void sub_1B2E57F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Unwind_Resume(exception_object);
}

uint64_t OZScene::getStaticCameraHash(OZScene *this)
{
  _QWORD *v1;
  PCWorkingColorVector *v2;
  int *v3;
  uint64_t v4;
  _OWORD *v5;
  int *StaticHash;
  uint64_t *v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  _OWORD v13[2];
  int v14;
  _QWORD v15[4];
  uint64_t v16;
  _BYTE v17[4160];
  uint64_t v18;

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v3 = (int *)v2;
  v18 = *MEMORY[0x1E0C80C00];
  PCWorkingColorVector::PCWorkingColorVector(v2);
  OZScene::begin_t<OZCamera,false,false>(v1, (uint64_t)v15);
  v4 = v1[151];
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v9 = v1 + 150;
  v10 = v4;
  v11 = v1 + 150;
  v12 = 0;
  while ((_QWORD *)v15[0] != v9)
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
    v8[0] = (uint64_t *)v8;
    v8[1] = (uint64_t *)v8;
    v8[2] = 0;
    if (v15[0] == v15[2])
    {
      v5 = 0;
    }
    else
    {
      v5 = *(_OWORD **)(v15[0] + 16);
      if (v5)
    }
    StaticHash = (int *)OZObjectManipulator::getStaticHash(v5 + 1, v17, v8);
    PCHash128::operator+=(v3, StaticHash);
    OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++(v15);
    std::__list_imp<unsigned int>::clear(v8);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
}

void sub_1B2E580FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Unwind_Resume(exception_object);
}

uint64_t OZScene::getStaticProjectNodeHash(OZScene *this)
{
  _QWORD *v1;
  PCWorkingColorVector *v2;
  int *v3;
  uint64_t v4;
  _OWORD *v5;
  int *StaticHash;
  uint64_t *v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  _OWORD v13[2];
  int v14;
  _QWORD v15[4];
  uint64_t v16;
  _BYTE v17[4160];
  uint64_t v18;

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v3 = (int *)v2;
  v18 = *MEMORY[0x1E0C80C00];
  PCWorkingColorVector::PCWorkingColorVector(v2);
  OZScene::begin_t<OZProjectNode,false,false>(v1, (uint64_t)v15);
  v4 = v1[151];
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v9 = v1 + 150;
  v10 = v4;
  v11 = v1 + 150;
  v12 = 0;
  while ((_QWORD *)v15[0] != v9)
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
    v8[0] = (uint64_t *)v8;
    v8[1] = (uint64_t *)v8;
    v8[2] = 0;
    if (v15[0] == v15[2])
    {
      v5 = 0;
    }
    else
    {
      v5 = *(_OWORD **)(v15[0] + 16);
      if (v5)
    }
    StaticHash = (int *)OZObjectManipulator::getStaticHash(v5 + 1, v17, v8);
    PCHash128::operator+=(v3, StaticHash);
    OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++(v15);
    std::__list_imp<unsigned int>::clear(v8);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
}

void sub_1B2E582B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Unwind_Resume(exception_object);
}

uint64_t OZScene::getLightHashForState(OZScene *this, const OZRenderParams *a2)
{
  uint64_t v2;
  OZRenderParams *v3;
  OZRenderParams *v4;
  _QWORD *v5;
  PCWorkingColorVector *v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  __int128 v12;
  uint64_t *v13[3];
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _OWORD v20[2];
  int v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[4160];
  uint64_t v26;

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = (_QWORD *)v2;
  v7 = (int *)v6;
  v26 = *MEMORY[0x1E0C80C00];
  PCWorkingColorVector::PCWorkingColorVector(v6);
  OZScene::begin_t<OZLight,false,false>(v5, (uint64_t)v22);
  v8 = v5[151];
  memset(v20, 0, sizeof(v20));
  v21 = 1065353216;
  v16 = v5 + 150;
  v17 = v8;
  v18 = v5 + 150;
  v19 = 0;
  while ((_QWORD *)v22[0] != v16)
  {
    if (v22[0] == v23)
    {
      v9 = 0;
    }
    else
    {
      v9 = *(_QWORD **)(v22[0] + 16);
      if (v9)
    }
    v15 = *((_QWORD *)v4 + 2);
    v14 = *(_OWORD *)v4;
    if ((*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v9[2] + 104))(v9 + 2, &v14, 1, 1, 1))
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v25);
      v13[0] = (uint64_t *)v13;
      v13[1] = (uint64_t *)v13;
      v13[2] = 0;
      if (v22[0] == v23)
      {
        v10 = 0;
      }
      else
      {
        v10 = *(_OWORD **)(v22[0] + 16);
        if (v10)
      }
      OZObjectManipulator::getHashForState(v10 + 1, v25, v4, v13, &v12);
      PCHash128::operator+=(v7, (int *)&v12);
      std::__list_imp<unsigned int>::clear(v13);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v25);
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v22);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v24);
}

void sub_1B2E584D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Unwind_Resume(exception_object);
}

uint64_t OZScene::getActiveCamera(OZScene *this, const CMTime *a2)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  CMTime v11[2];
  CMTime v12;
  __int128 v13;
  CMTimeEpoch epoch;
  __n128 v15;
  CMTimeEpoch v16;
  CMTime v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char v21;
  _BYTE v22[32];
  int v23;
  uint64_t v24[4];
  uint64_t v25;
  CMTime v26;
  CMTime v27;
  CMTime time2;

  OZScene::begin_t<OZCamera,false,true>((uint64_t *)this, (uint64_t)v24);
  v4 = *((_QWORD *)this + 151);
  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  v18 = (char *)this + 1200;
  v19 = v4;
  v20 = (char *)this + 1200;
  v21 = 0;
  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  v15 = 0uLL;
  v16 = 0;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v15);
  v5 = 0;
  while ((char *)v24[0] != v18)
  {
    if (v24[0] == v24[2] || (v6 = *(const void **)(v24[0] + 16)) == 0)
      v7 = 0;
    else
    epoch = a2->epoch;
    v8 = v7[2];
    v13 = *(_OWORD *)&a2->value;
    if (((*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v8 + 104))(v7 + 2, &v13, 1, 1, 1) & 1) != 0)
    {
      v5 = v7;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7[2] + 24))(v7 + 2, 1, 1))
    {
      memset(&v12, 0, sizeof(v12));
      (*(void (**)(CMTime *__return_ptr, _QWORD *))(*v7 + 1128))(v11, v7);
      time2 = v11[0];
      v27 = v11[1];
      PC_CMTimeSaferAdd(&time2, &v27, (uint64_t)&v26);
      time2 = v26;
      *(__n128 *)&v27.value = v15;
      v27.epoch = v16;
      PC_CMTimeSaferSubtract(&time2, &v27, (uint64_t)&v12);
      v11[0] = v12;
      time2 = v17;
      if (CMTimeCompare(v11, &time2) >= 1)
      {
        v17 = v12;
        v5 = v7;
      }
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(v24);
  }
  if (!v5)
  {
    v9 = 0;
    goto LABEL_16;
  }
LABEL_15:
  v9 = *((unsigned int *)v5 + 20);
LABEL_16:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
  return v9;
}

void sub_1B2E5876C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v41);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a41);
  _Unwind_Resume(a1);
}

_QWORD *OZScene::begin_t<OZLight,false,false>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2E58818(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

_QWORD *OZScene::begin_t<OZCamera,false,false>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2E5892C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::containsActiveLights(OZScene *this, const OZGroup *a2)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  const OZGroup *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  const void *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  _BYTE v24[32];
  int v25;
  _QWORD v26[4];
  uint64_t v27;

  OZScene::begin_t<OZLight,false,false>(this, (uint64_t)v26);
  v4 = *((_QWORD *)this + 151);
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  v20 = (char *)this + 1200;
  v21 = v4;
  v22 = (char *)this + 1200;
  v23 = 0;
  while ((char *)v26[0] != v20)
  {
    if (v26[0] == v26[2])
    {
      v5 = 0;
    }
    else
    {
      v5 = *(_QWORD **)(v26[0] + 16);
      if (v5)
    }
    v19 = *((_QWORD *)this + 149);
    v18 = *(_OWORD *)((char *)this + 1176);
    if (((*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v5[2] + 104))(v5 + 2, &v18, 1, 1, 1) & 1) != 0)
    {
      v13 = 1;
      goto LABEL_29;
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v26);
  }
  OZScene::begin_t<OZGroup,false,false>(this, (uint64_t)v15);
  if (v15[0] != v16
    && (v6 = *(const void **)(v15[0] + 16)) != 0
  {
    while (1)
    {
      if (v15[0] != v16)
      {
        v7 = *(const void **)(v15[0] + 16);
        v8 = v7
        if (v8 != a2)
        {
          if (((*(uint64_t (**)(void *))(*(_QWORD *)v9 + 1424))(v9) & 1) == 0)
          {
            if (v15[0] == v16)
            {
              v10 = 0;
            }
            else
            {
              v10 = *(void **)(v15[0] + 16);
              if (v10)
            }
            if ((OZGroup::containsActiveLights((OZGroup *)v10, a2) & 1) != 0)
              break;
          }
        }
      }
      v11 = OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v15);
      if (*v11 != v11[2])
      {
        v12 = *(const void **)(*v11 + 16);
        if (v12)
        {
          {
            continue;
          }
        }
      }
      goto LABEL_26;
    }
    v13 = 1;
  }
  else
  {
LABEL_26:
    v13 = 0;
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v17);
LABEL_29:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v24);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
  return v13;
}

void sub_1B2E58C1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 104);
  _Unwind_Resume(a1);
}

_QWORD *OZScene::begin_t<OZGroup,false,false>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
    if (!result)
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((_QWORD *)a2);
  }
  return result;
}

void sub_1B2E58CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::containsActiveShadowLights(OZScene *this, const OZGroup *a2)
{
  uint64_t v4;
  const CMTime *v5;
  _QWORD *v6;
  char *v7;
  const void *v8;
  const OZGroup *v9;
  const OZGroup *v10;
  _QWORD *v11;
  const void *v12;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  _BYTE v23[32];
  int v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  OZScene::begin_t<OZLight,false,false>(this, (uint64_t)v25);
  v4 = *((_QWORD *)this + 151);
  memset(v23, 0, sizeof(v23));
  v24 = 1065353216;
  v19 = (char *)this + 1200;
  v20 = v4;
  v21 = (char *)this + 1200;
  v22 = 0;
  v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
  while ((char *)v25[0] != v19)
  {
    if (v25[0] == v26)
    {
      v6 = 0;
    }
    else
    {
      v6 = *(_QWORD **)(v25[0] + 16);
      if (v6)
    }
    v18 = *((_QWORD *)this + 149);
    v17 = *(_OWORD *)((char *)this + 1176);
    if ((*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v6[2] + 104))(v6 + 2, &v17, 1, 1, 1))
    {
      if (v25[0] == v26)
      {
        v7 = 0;
      }
      else
      {
        v7 = *(char **)(v25[0] + 16);
        if (v7)
      }
      if ((OZFolderLightShadow::hasShadows((OZChannelBase *)(v7 + 8776), v5) & 1) != 0)
      {
        v13 = 1;
        goto LABEL_27;
      }
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v25);
  }
  OZScene::begin_t<OZGroup,false,false>(this, (uint64_t)v15);
  if (v15[0] != v15[2]
    && (v8 = *(const void **)(v15[0] + 16)) != 0
  {
    v10 = v9;
    while (v10 == a2
         || ((*(uint64_t (**)(const OZGroup *))(*(_QWORD *)v10 + 1424))(v10) & 1) != 0
         || (OZGroup::containsActiveShadowLights(v10, a2) & 1) == 0)
    {
      v11 = OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v15);
      if (*v11 != v11[2])
      {
        v12 = *(const void **)(*v11 + 16);
        if (v12)
        {
          if (v10)
            continue;
        }
      }
      goto LABEL_24;
    }
    v13 = 1;
  }
  else
  {
LABEL_24:
    v13 = 0;
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
LABEL_27:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v27);
  return v13;
}

void sub_1B2E58FAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 120);
  _Unwind_Resume(a1);
}

void OZScene::createGrid(OZScene *this, const LiCamera *a2, PCSharedCount *a3)
{
  OZPreferenceManager *v5;
  int GroundPlaneSpacing;
  uint64_t i;
  double v8;
  LiGrid *v9;
  int ComputedWorkingGamut;
  CGColorSpace *WorkingColorSpace;
  OZPreferenceManager *v12;
  OZChannelBase *v13;
  OZPreferenceManager *v14;
  OZChannelBase *v15;
  LiGeode *v16;
  PC_Sp_counted_base *var0;
  OZPreferenceManager *v18;
  PC_Sp_counted_base *v19;
  OZPreferenceManager *v20;
  int isGroundPlaneVisible;
  LiImageSource *v22;
  int v23;
  PCSharedCount v25;
  PCSharedCount v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  PCSharedCount v37;
  PCSharedCount v38;
  PCSharedCount v39;
  PCSharedCount v40;
  __n128 v41;
  CGColorSpace *v42;
  __n128 *v43;
  PCSharedCount v44;
  _QWORD v45[4];

  v5 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  GroundPlaneSpacing = OZPreferenceManager::getGroundPlaneSpacing(v5);
  memset(v45, 0, 24);
  addGrids(v45, a2, 1.0);
  for (i = 0; i != 3; ++i)
  {
    v8 = *(double *)&v45[i];
    if (v8 > -0.0000001 && v8 < 0.0000001)
      continue;
    v9 = (LiGrid *)operator new();
    LiGrid::LiGrid(v9);
    v43 = (__n128 *)v9;
    PCSharedCount::PCSharedCount(&v44, (LiGrid *)((char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 24)));
    if (!v43)
      throw_PCNullPointerException(1);
    LiGrid::setGeom((uint64_t)v43, 10 * GroundPlaneSpacing, GroundPlaneSpacing);
    ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);
    WorkingColorSpace = (CGColorSpace *)PCRenderModel::getWorkingColorSpace((uint64_t)this + 1816, ComputedWorkingGamut);
    PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v41, WorkingColorSpace);
    v13 = (OZChannelBase *)OZPreferenceManager::Instance(v12);
    OZChannelBase::setRangeName(v13, (const PCString *)&v41);
    if (!v43)
      throw_PCNullPointerException(1);
    PCWorkingColor::operator=(v43 + 2, &v41);
    v15 = (OZChannelBase *)OZPreferenceManager::Instance(v14);
    OZChannelBase::setRangeName(v15, (const PCString *)&v41);
    if (!v43)
      throw_PCNullPointerException(1);
    PCWorkingColor::operator=(v43 + 1, &v41);
    v16 = (LiGeode *)operator new();
    LiGeode::LiGeode(v16, (LiImageSource *)v43);
    v39.var0 = (PC_Sp_counted_base *)v16;
    PCSharedCount::PCSharedCount(&v40, (LiGeode *)((char *)v16 + *(_QWORD *)(*(_QWORD *)v16 - 24)));
    var0 = v39.var0;
    if (!v39.var0)
      throw_PCNullPointerException(1);
    *((_DWORD *)v39.var0 + 175) = 0;
    v37.var0 = 0;
    PCSharedCount::PCSharedCount(&v38);
    LiSceneObject::setBlendMode((uint64_t)var0, 0, &v37);
    PCSharedCount::~PCSharedCount(&v38);
    v19 = v39.var0;
    if (!v39.var0)
      throw_PCNullPointerException(1);
    *((double *)v39.var0 + 68) = v8;
    *((_BYTE *)v19 + 552) = 0;
    *((_BYTE *)v19 + 699) = 0;
    *((_BYTE *)v19 + 554) = 0;
    *((_BYTE *)v19 + 696) = 0;
    v20 = (OZPreferenceManager *)OZPreferenceManager::Instance(v18);
    isGroundPlaneVisible = OZPreferenceManager::isGroundPlaneVisible(v20);
    if (!v43)
      throw_PCNullPointerException(1);
    LiGrid::setGroundPlane((uint64_t)v43, isGroundPlaneVisible);
    if (isGroundPlaneVisible && (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 504))(a2) > 0.0)
    {
      if (!v39.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v39.var0 + 192))(v39.var0, 0.5);
      if (!v39.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v39.var0 + 208))(v39.var0, 0.0);
      if (!v39.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v39.var0 + 224))(v39.var0, 500.0);
      if (!v39.var0)
        throw_PCNullPointerException(1);
      *((_DWORD *)v39.var0 + 170) = 0;
    }
    v36 = 0x3FF0000000000000;
    v33 = 0x3FF0000000000000;
    v30 = 0x3FF0000000000000;
    v27 = 0x3FF0000000000000;
    v28 = 0u;
    v29 = 0u;
    v31 = 0u;
    v32 = 0u;
    v34 = 0u;
    v35 = 0u;
    switch((_DWORD)i)
    {
      case 2:
        v22 = (LiImageSource *)v43;
        if (!v43)
          throw_PCNullPointerException(1);
        v23 = 0;
        goto LABEL_39;
      case 1:
        PCMatrix44Tmpl<double>::leftRotate((double *)&v27, 0, 1.57079633);
        v22 = (LiImageSource *)v43;
        if (!v43)
          throw_PCNullPointerException(1);
        v23 = 1;
        goto LABEL_39;
      case 0:
        PCMatrix44Tmpl<double>::leftRotate((double *)&v27, 1, 1.57079633);
        v22 = (LiImageSource *)v43;
        if (!v43)
          throw_PCNullPointerException(1);
        v23 = 2;
LABEL_39:
        LiGrid::setPlane((uint64_t)v22, v23);
        break;
    }
    if (!v39.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, uint64_t *))(*(_QWORD *)v39.var0 + 16))(v39.var0, &v27);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v25, &v39);
    LiGraphBuilder::add2d(a3, &v25);
    PCSharedCount::~PCSharedCount(&v26);
    PCSharedCount::~PCSharedCount(&v40);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v42);
    PCSharedCount::~PCSharedCount(&v44);
  }
}

void sub_1B2E59464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, CGColorSpace **a12)
{
  PCSharedCount *v12;
  PCSharedCount *v13;

  PCSharedCount::~PCSharedCount(a10);
  PCSharedCount::~PCSharedCount(v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

_DWORD *addGrids(_DWORD *result, const void *a2, double a3)
{
  _DWORD *v4;
  double v5;
  uint64_t v6;
  LiAnimCamera *v7;
  LiAnimCamera *v8;
  double Time;
  int v10;

  v4 = result;
  if (a3 >= 0.0)
    v5 = a3;
  else
    v5 = 0.0;
  if (v5 <= -0.0000001 || v5 >= 0.0000001)
  {
    v6 = 1;
    while (a2)
    {
      if (!v7)
      {
        if (result && (v10 = result[124] - 2, v10 <= 5))
          v6 = qword_1B355E610[v10];
        else
          v6 = 1;
        break;
      }
      v8 = v7;
      Time = LiAnimCamera::getTime(v7);
      result = (_DWORD *)addGrids(v4, *((_QWORD *)v8 + 62), v5 * (1.0 - Time));
      a2 = (const void *)*((_QWORD *)v8 + 64);
      if (v5 * Time >= 0.0)
        v5 = v5 * Time;
      else
        v5 = 0.0;
      if (v5 > -0.0000001 && v5 < 0.0000001)
        return result;
    }
    *(double *)&v4[2 * v6] = fmin(v5 + *(double *)&v4[2 * v6], 1.0);
  }
  return result;
}

uint64_t OZScene::getWorkingColorSpace(OZScene *this)
{
  char *v1;
  int ComputedWorkingGamut;

  v1 = (char *)this + 1816;
  ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);
  return PCRenderModel::getWorkingColorSpace((uint64_t)v1, ComputedWorkingGamut);
}

void OZScene::buildSceneRenderGraph(int32x2_t *this@<X0>, OZRenderParams *a2@<X1>, PCSharedCount *a3@<X8>)
{
  PC_Sp_counted_base *var0;
  OZSceneCamera *v7;
  PCShared_base *v8;
  int64_t value;
  int64_t v10;
  __int128 v11;
  LiSimpleCamera *v12;
  PC_Sp_counted_base *v13;
  uint64_t v14;
  PC_Sp_counted_base *v15;
  int64_t v16;
  LiGroup *v17;
  PC_Sp_counted_base *v18;
  int32x2_t v19;
  void *v20;
  int32x2_t v22;
  const void *v23;
  _QWORD *v24;
  _QWORD *v25;
  OZGroup *v26;
  OZGroup *v27;
  int v28;
  OZGroup *v29;
  uint64_t v30;
  PC_Sp_counted_base **p_timescale;
  PCSharedCount *v32;
  void *v33;
  const struct __class_type_info *v34;
  ptrdiff_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  BOOL v48;
  _QWORD *v49;
  unint64_t v50;
  OZGroup *v51;
  OZGroup *v52;
  PC_Sp_counted_base **v54;
  int v55;
  LiGroup *v56;
  PC_Sp_counted_base *v58;
  PCShared_base *v59;
  double v60;
  _BOOL4 v61;
  LiGroup *v62;
  PC_Sp_counted_base **p_outroDuration;
  PCSharedCount *v64;
  std::mutex *v65;
  const struct __class_type_info *v66;
  ptrdiff_t v67;
  PCSharedCount *v68;
  _BOOL4 v69;
  OZScene *v70;
  OZGroup *v71;
  PC_Sp_counted_base **v72;
  _BYTE v73[48];
  __int128 v74;
  __n128 *v75;
  int v76;
  PCSharedCount v77;
  PCSharedCount v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  PCSharedCount v82;
  PCSharedCount v83;
  _QWORD v84[2];
  uint64_t v85;
  char v86;
  PCSharedCount v87;
  uint64_t v88;
  PC_Sp_counted_base *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _BYTE v93[32];
  int v94;
  __int128 v95;
  uint64_t v96;
  _BYTE v97[25];
  _OWORD v98[2];
  int v99;
  _BYTE v100[25];
  _QWORD v101[4];
  int v102;
  METimeRemap v103;
  int v104;
  char v105;
  int32x2_t *v106;
  int32x2_t v107;
  int32x2_t *v108;
  char v109;
  _OWORD v110[2];
  int v111;
  _QWORD v112[4];
  uint64_t v113;
  float64x2_t v114;
  uint64_t v115;
  uint64_t v116[20];
  _QWORD v117[10];
  LiCamera *v118;
  PCSharedCount v119[25];
  PCString v120;
  LiGroup *v121;
  PCSharedCount v122;
  CMTime v123;
  PCSharedCount v124;
  PCSharedCount v125;
  PCSharedCount v126;

  v72 = (PC_Sp_counted_base **)((char *)a2 + 1280);
  var0 = (PC_Sp_counted_base *)*((_QWORD *)a2 + 160);
  if (var0)
  {
    v124.var0 = (PC_Sp_counted_base *)*((_QWORD *)a2 + 160);
  }
  else
  {
    if (!this[187].i8[4])
    {
      *(_OWORD *)&v103._introDuration.value = *(_OWORD *)a2;
      v103._introDuration.epoch = *((_QWORD *)a2 + 2);
      this[187].i32[0] = OZScene::getActiveCamera((OZScene *)this, (const CMTime *)&v103);
      this[187].i8[4] = 1;
    }
    v7 = (OZSceneCamera *)operator new();
    OZSceneCamera::OZSceneCamera(v7, (OZScene *)this, this[187].i32[0]);
    v103._introDuration.value = (int64_t)v7;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v103._introDuration.timescale, (OZSceneCamera *)((char *)v7 + *(_QWORD *)(*(_QWORD *)v7 - 24)));
    OZRenderParams::setCamera((uint64_t)a2, (const PCSharedCount *)&v103);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v103._introDuration.timescale);
    v124.var0 = *v72;
    var0 = v124.var0;
    if (!v124.var0)
    {
      v8 = 0;
      goto LABEL_7;
    }
  }
  v8 = (PCShared_base *)((char *)var0 + *(_QWORD *)(*(_QWORD *)var0 - 24));
LABEL_7:
  PCSharedCount::PCSharedCount(&v125, v8);
  PCPtr<OZSceneCamera>::PCPtr<LiCamera>((PCSharedCount *)&v103, &v124);
  value = v103._introDuration.value;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v103._introDuration.timescale);
  if (value)
  {
    v118 = (LiCamera *)v124.var0;
    PCSharedCount::PCSharedCount(v119, &v125);
    if (OZSceneCamera::isValid((OZSceneCamera *)value))
    {
      *(_QWORD *)&v103._scaleableDuration.timescale = 0;
      LOBYTE(v103._scaleableDuration.epoch) = 1;
      v103._introDuration.value = (int64_t)&unk_1E659DEC0;
      v103._scaleableDuration.value = (int64_t)&unk_1E659DE50;
      v10 = *(_QWORD *)(value + 40);
      v11 = *(_OWORD *)(value + 24);
      *(_OWORD *)&v103._introDuration.timescale = *(_OWORD *)(value + 8);
      *(_OWORD *)&v103._outroDuration.value = v11;
      v103._introDuration.value = (int64_t)&off_1E659DB38;
      v103._outroDuration.epoch = v10;
      LiRenderingTechnology::setRasterizeEdges((uint64_t)&v103, 0);
      v123 = *(CMTime *)a2;
      METimeRemap::setOutroDuration(&v103, &v123);
      v12 = (LiSimpleCamera *)operator new();
      LiSimpleCamera::LiSimpleCamera(v12);
      *(_QWORD *)&v114.f64[0] = v12;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v114.f64[1], (LiSimpleCamera *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
      if (!*(_QWORD *)&v114.f64[0])
        throw_PCNullPointerException(1);
      (*(void (**)(_QWORD, METimeRemap *))(**(_QWORD **)&v114.f64[0] + 168))(*(_QWORD *)&v114.f64[0], &v103);
      OZRenderParams::setCamera((uint64_t)a2, (const PCSharedCount *)&v114);
      v124.var0 = *(PC_Sp_counted_base **)&v114.f64[0];
      PCSharedCount::PCSharedCount(&v87, (const PCSharedCount *)&v114.f64[1]);
      PCSharedCount::operator=((uint64_t *)&v125, (uint64_t *)&v87);
      PCSharedCount::~PCSharedCount(&v87);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v114.f64[1]);
      OZSceneCamera::~OZSceneCamera((OZSceneCamera *)&v103);
    }
    else
    {
      PCMakePtr<LiSimpleCamera>((PCSharedCount *)&v114);
      PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v103, (const PCSharedCount *)&v114);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v114.f64[1]);
      v114 = vcvtq_f64_f32(vcvt_f32_s32(this[43]));
      if (!v103._introDuration.value)
        throw_PCNullPointerException(1);
      (*(void (**)(int64_t, float64x2_t *))(*(_QWORD *)v103._introDuration.value + 288))(v103._introDuration.value, &v114);
      if (!v103._introDuration.value)
        throw_PCNullPointerException(1);
      (*(void (**)(int64_t, double))(*(_QWORD *)v103._introDuration.value + 696))(v103._introDuration.value, *(double *)&this[48]);
      OZRenderParams::setCamera((uint64_t)a2, (const PCSharedCount *)&v103);
      *((_BYTE *)a2 + 517) = 0;
      v124.var0 = (PC_Sp_counted_base *)v103._introDuration.value;
      PCSharedCount::PCSharedCount(&v87, (const PCSharedCount *)&v103._introDuration.timescale);
      PCSharedCount::operator=((uint64_t *)&v125, (uint64_t *)&v87);
      PCSharedCount::~PCSharedCount(&v87);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v103._introDuration.timescale);
    }
    if (*((_BYTE *)a2 + 1213))
    {
      v13 = v124.var0;
      if (!v124.var0)
        throw_PCNullPointerException(1);
      if (!v118)
        throw_PCNullPointerException(1);
      v14 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)v118 + 632))(v118);
      (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)v13 + 640))(v13, v14);
      v15 = v124.var0;
      if (!v124.var0)
        throw_PCNullPointerException(1);
      if (!v118)
        throw_PCNullPointerException(1);
      (*(void (**)(LiCamera *))(*(_QWORD *)v118 + 504))(v118);
      (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v15 + 512))(v15);
      v114 = 0uLL;
      v115 = 0;
      if (!v118)
        throw_PCNullPointerException(1);
      (*(void (**)(LiCamera *, float64x2_t *))(*(_QWORD *)v118 + 440))(v118, &v114);
      if (!v124.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, float64x2_t *))(*(_QWORD *)v124.var0 + 448))(v124.var0, &v114);
      v103._introDuration.value = 0x3FF0000000000000;
      memset(&v103._introDuration.timescale, 0, 24);
      if (!v118)
        throw_PCNullPointerException(1);
      (*(void (**)(LiCamera *, METimeRemap *))(*(_QWORD *)v118 + 472))(v118, &v103);
      if (!v124.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, METimeRemap *))(*(_QWORD *)v124.var0 + 480))(v124.var0, &v103);
      v87.var0 = 0;
      *(_QWORD *)v73 = 0;
      if (!v118)
        throw_PCNullPointerException(1);
      LiCamera::getNearFarPlanes(v118, (double *)&v87, (double *)v73);
      if (!v124.var0)
        throw_PCNullPointerException(1);
      LiCamera::setNearFarPlanes((LiCamera *)v124.var0, *(double *)&v87.var0, *(double *)v73);
    }
    PCSharedCount::~PCSharedCount(v119);
  }
  if (*((_BYTE *)a2 + 242))
  {
    *(_OWORD *)&v103._introDuration.value = *(_OWORD *)a2;
    v103._introDuration.epoch = *((_QWORD *)a2 + 2);
    OZScene::makeActiveCamera(this, (const CMTime *)&v103, (PCSharedCount *)&v114);
    OZRenderParams::setActiveCamera((uint64_t)a2, (const PCSharedCount *)&v114);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v114.f64[1]);
    PCMakePtr<LiSimpleCamera>((PCSharedCount *)&v114);
    if (!*(_QWORD *)&v114.f64[0])
      throw_PCNullPointerException(1);
    if (!v124.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD))(**(_QWORD **)&v114.f64[0] + 168))(*(_QWORD *)&v114.f64[0]);
    if (!*(_QWORD *)&v114.f64[0])
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v114.f64[0] + 384))(*(_QWORD *)&v114.f64[0], 0);
    if (!*(_QWORD *)&v114.f64[0])
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD, double))(**(_QWORD **)&v114.f64[0] + 512))(*(_QWORD *)&v114.f64[0], 90.0);
    if (!*(_QWORD *)&v114.f64[0])
      throw_PCNullPointerException(1);
    *(double *)&v16 = (double)this[43].i32[0] * 0.5;
    *(_QWORD *)&v103._introDuration.timescale = 0;
    v103._introDuration.value = 0;
    v103._introDuration.epoch = v16;
    (*(void (**)(_QWORD, METimeRemap *))(**(_QWORD **)&v114.f64[0] + 448))(*(_QWORD *)&v114.f64[0], &v103);
    v103._introDuration.value = 0x3FF0000000000000;
    memset(&v103._introDuration.timescale, 0, 24);
    if (!*(_QWORD *)&v114.f64[0])
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD, METimeRemap *))(**(_QWORD **)&v114.f64[0] + 480))(*(_QWORD *)&v114.f64[0], &v103);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v118, (const PCSharedCount *)&v114);
    OZRenderParams::setCamera((uint64_t)a2, (const PCSharedCount *)&v118);
    PCSharedCount::~PCSharedCount(v119);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v114.f64[1]);
  }
  *((_QWORD *)a2 + 32) = this + 155;
  *(_OWORD *)((char *)a2 + 392) = 0u;
  *(_OWORD *)((char *)a2 + 408) = 0u;
  v17 = (LiGroup *)operator new();
  LiGroup::LiGroup(v17);
  v121 = v17;
  PCSharedCount::PCSharedCount(&v122, (LiGroup *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24)));
  if (!v121)
    throw_PCNullPointerException(1);
  (*(void (**)(LiGroup *, uint64_t))(*(_QWORD *)v121 + 192))(v121, 1);
  OZChannelBase::setRangeName((OZChannelBase *)a2, &v120);
  LiGraphBuilder::LiGraphBuilder(&v118, &v121, &v120);
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v114);
  v117[9] = &v118;
  OZScene::begin_t<OZLight,false,false>(this, (uint64_t)v112);
  v18 = (PC_Sp_counted_base *)&this[150];
  v70 = (OZScene *)this;
  v19 = this[151];
  memset(v110, 0, sizeof(v110));
  v111 = 1065353216;
  v106 = this + 150;
  v107 = v19;
  v108 = this + 150;
  v109 = 0;
  while ((int32x2_t *)v112[0] != v106)
  {
    if (v112[0] == v112[2])
    {
      v20 = 0;
    }
    else
    {
      v20 = *(void **)(v112[0] + 16);
      if (v20)
    }
    OZLight::buildLiLight((OZLight *)v20, (const OZRenderState *)a2, (uint64_t)&v103);
    if (!*((_BYTE *)a2 + 515) && (v104 - 1) <= 2 && v105 != 0)
      v105 = 0;
    LiLightSet::add((uint64_t)v117, (const LiLight *)&v103);
    LiLight::~LiLight((PCSharedCount *)&v103);
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v112);
  }
  v68 = a3;
  OZScene::begin_t<OZElement,false,false>(this, (uint64_t)v100);
  v71 = 0;
  v22 = this[151];
  memset(v98, 0, sizeof(v98));
  v99 = 1065353216;
  *(_QWORD *)v97 = this + 150;
  *(int32x2_t *)&v97[8] = v22;
  *(_QWORD *)&v97[16] = this + 150;
  v97[24] = 0;
  while (*(_QWORD *)v100 != *(_QWORD *)v97)
  {
    if (*(_QWORD *)v100 != *(_QWORD *)&v100[16])
    {
      v23 = *(const void **)(*(_QWORD *)v100 + 16);
      if (v23)
      {
        if (v24)
        {
          v25 = v24;
          if (v26)
          {
            v27 = v26;
            OZGroup::returnGroupLights(v26, (const OZRenderState *)a2, (uint64_t)&v103);
            LiLightSet::add((uint64_t)v117, (uint64_t)&v103);
            PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v103);
            v96 = *((_QWORD *)a2 + 2);
            v95 = *(_OWORD *)a2;
            if ((*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v25[2] + 104))(v25 + 2, &v95, 1, 1, 1))
            {
              v28 = (*(uint64_t (**)(OZGroup *))(*(_QWORD *)v27 + 1640))(v27);
              v29 = v71;
              if (v28 == 1)
                v29 = v27;
              v71 = v29;
            }
          }
        }
      }
    }
    OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v100);
  }
  v69 = *((_BYTE *)a2 + 1312) && !*(_BYTE *)(theApp + 80) && *((_BYTE *)v70 + 1579) == 0;
  OZScene::begin_all_t<OZRigBehavior,false,true>(v70, (uint64_t)&v103);
  v30 = *((_QWORD *)v70 + 151);
  memset(v93, 0, sizeof(v93));
  v90 = 0;
  v91 = 0;
  v87.var0 = v18;
  v88 = v30;
  v89 = v18;
  v94 = 1065353216;
  v92 = 0;
  while (1)
  {
    if (LODWORD(v103._outroDuration.epoch) == v92)
    {
      if (LODWORD(v103._outroDuration.epoch) < 2)
      {
        v32 = &v87;
        p_timescale = (PC_Sp_counted_base **)&v103;
      }
      else if (LODWORD(v103._outroDuration.epoch) == 3)
      {
        v32 = (PCSharedCount *)&v91;
        p_timescale = (PC_Sp_counted_base **)&v103._outroDuration.timescale;
      }
      else
      {
        p_timescale = (PC_Sp_counted_base **)&v103._outroDuration;
        v32 = (PCSharedCount *)&v90;
        if (LODWORD(v103._outroDuration.epoch) != 2)
          goto LABEL_101;
      }
      if (*p_timescale == v32->var0)
        break;
    }
    if (LODWORD(v103._outroDuration.epoch) < 2)
    {
      if (v103._introDuration.value == v103._introDuration.epoch)
      {
LABEL_101:
        v33 = 0;
        goto LABEL_106;
      }
      v33 = *(void **)(v103._introDuration.value + 16);
      if (!v33)
        goto LABEL_106;
    }
    else
    {
      if (LODWORD(v103._outroDuration.epoch) != 2)
      {
        if (LODWORD(v103._outroDuration.epoch) != 3)
          goto LABEL_101;
        v33 = *(void **)(*(_QWORD *)&v103._outroDuration.timescale + 16);
        if (!v33)
          goto LABEL_106;
        v35 = 0;
        goto LABEL_105;
      }
      v33 = *(void **)(v103._outroDuration.value + 16);
      if (!v33)
        goto LABEL_106;
    }
    v35 = -2;
LABEL_105:
LABEL_106:
    *(_OWORD *)v73 = *(_OWORD *)a2;
    *(_QWORD *)&v73[16] = *((_QWORD *)a2 + 2);
    OZRigBehavior::cacheCurrentSnapshotID((OZRigBehavior *)v33, (const CMTime *)v73);
    OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::operator++((uint64_t)&v103);
  }
  v36 = *((_QWORD *)a2 + 155);
  if (!v36)
    throw_PCNullPointerException(1);
  v84[1] = 0;
  v85 = 0;
  v84[0] = &unk_1E64FC250;
  v37 = *(_DWORD *)(v36 + 44);
  if (v37 <= 0)
    v38 = 0;
  else
    v38 = (2 * v37) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)v84, v37, v38);
  if (*(int *)(v36 + 44) >= 1)
  {
    v39 = 0;
    v40 = 0;
    do
    {
      LiLight::operator=(v85 + v39, *(_QWORD *)(v36 + 48) + v39);
      ++v40;
      v39 += 944;
    }
    while (v40 < *(int *)(v36 + 44));
  }
  v86 = *(_BYTE *)(v36 + 56);
  OZRenderParams::setShadowLights(a2, (const LiLightSet *)v84);
  v82.var0 = 0;
  PCSharedCount::PCSharedCount(&v83);
  OZScene::begin_t<OZElement,false,false>(v70, (uint64_t)v73);
  *(_OWORD *)v100 = *(_OWORD *)v73;
  *(_OWORD *)&v100[9] = *(_OWORD *)&v73[9];
  v102 = (int)v75;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v101, (__n128 *)v74, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v73[32]);
  v41 = *((_QWORD *)v70 + 151);
  *(_OWORD *)&v73[32] = 0u;
  v74 = 0u;
  LODWORD(v75) = 1065353216;
  *(_QWORD *)v73 = v18;
  *(_QWORD *)&v73[8] = v41;
  *(_QWORD *)&v73[16] = v18;
  v73[24] = 0;
  *(_OWORD *)v97 = *(_OWORD *)v73;
  *(_OWORD *)&v97[9] = *(_OWORD *)&v73[9];
  v99 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v98, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v73[32]);
  while (2)
  {
    if (*(_QWORD *)v100 != *(_QWORD *)v97)
    {
      if (*(_QWORD *)v100 == *(_QWORD *)&v100[16] || (v42 = *(const void **)(*(_QWORD *)v100 + 16)) == 0)
        v43 = 0;
      else
      v81 = *((_QWORD *)a2 + 2);
      v80 = *(_OWORD *)a2;
      if ((*(unsigned int (**)(_QWORD *, __int128 *, uint64_t, uint64_t, uint64_t))(v43[2] + 104))(v43 + 2, &v80, 1, 1, 1))
      {
        v44 = *((_QWORD *)a2 + 32);
        if (!v44)
          goto LABEL_136;
        v45 = *(_QWORD **)(v44 + 8);
        if (!v45)
          goto LABEL_136;
        v46 = (_QWORD *)(v44 + 8);
        do
        {
          v47 = v45[4];
          v48 = v47 >= (unint64_t)v43;
          if (v47 >= (unint64_t)v43)
            v49 = v45;
          else
            v49 = v45 + 1;
          if (v48)
            v46 = v45;
          v45 = (_QWORD *)*v49;
        }
        while (*v49);
        if (v46 == (_QWORD *)(v44 + 8) || (v50 = v46[4], (unint64_t)v43 < v50) || v50 == *(_QWORD *)(v44 + 40))
        {
          if (v43)
          {
LABEL_136:
            v52 = v51;
            if (v51)
            {
              if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)v51 + 1640))(v51) == 1 && v82.var0 == 0)
              {
                if (*((_BYTE *)a2 + 242))
                {
                  v54 = v72;
                  if (*((_QWORD *)a2 + 162))
                    v54 = (PC_Sp_counted_base **)((char *)a2 + 1296);
                  v77.var0 = *v54;
                  LODWORD(v126.var0) = *((_DWORD *)v70 + 86);
                  v79 = *((_DWORD *)v70 + 87);
                  PCMakePtr<Li3DGroupForEquirect,LiCamera *,int,int>(&v77, (int *)&v126, &v79, (PCSharedCount *)v73);
                  PCPtr<LiImageSource>::operator=<TXTextureDecal>(&v82.var0, (const PCSharedCount *)v73);
                  PCSharedCount::~PCSharedCount((PCSharedCount *)&v73[8]);
                }
                else
                {
                  v56 = (LiGroup *)operator new();
                  LiGroup::LiGroup(v56);
                  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)&v82, v56);
                }
                if (!v82.var0)
                  throw_PCNullPointerException(1);
                (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v82.var0 + 192))(v82.var0, 0);
                LiGraphBuilder::addGroupAndMakeCurrent((PCSharedCount *)&v118, &v82);
              }
              if ((*(unsigned int (**)(OZGroup *))(*(_QWORD *)v52 + 1640))(v52) != 1 && v82.var0 != 0)
              {
                LiGraphBuilder::endInsertingIntoGroup((LiGraphBuilder *)&v118);
                PCPtr<LiImageSource>::reset(&v82);
              }
              v55 = 1;
            }
            else
            {
              v55 = 0;
            }
          }
          else
          {
            v55 = 0;
            v52 = 0;
          }
          v58 = *v72;
          *(_QWORD *)v73 = v58;
          if (v58)
            v59 = (PCShared_base *)((char *)v58 + *(_QWORD *)(*(_QWORD *)v58 - 24));
          else
            v59 = 0;
          PCSharedCount::PCSharedCount((PCSharedCount *)&v73[8], v59);
          if (!*(_QWORD *)v73)
            throw_PCNullPointerException(1);
          v60 = (*(double (**)(_QWORD))(**(_QWORD **)v73 + 504))(*(_QWORD *)v73);
          v61 = v60 >= 0.0000001 || v60 <= -0.0000001;
          if (!v52 || !OZGroup::is360Group(v52) || v61)
            (*(void (**)(_QWORD *, OZRenderParams *, LiCamera **, float64x2_t *))(*v43 + 2016))(v43, a2, &v118, &v114);
          if ((v69 & v55) == 1 && v52 == v71)
            OZScene::createGrid(v70, (const LiCamera *)*v72, (PCSharedCount *)&v118);
          if (v82.var0)
          {
            LiGraphBuilder::getCurrentInsertionGroup((LiGraphBuilder *)&v118, &v77);
            v82.var0 = v77.var0;
            PCSharedCount::PCSharedCount(&v126, &v78);
            PCSharedCount::operator=((uint64_t *)&v83, (uint64_t *)&v126);
            PCSharedCount::~PCSharedCount(&v126);
            PCSharedCount::~PCSharedCount(&v78);
          }
          PCSharedCount::~PCSharedCount((PCSharedCount *)&v73[8]);
        }
      }
      OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v100);
      continue;
    }
    break;
  }
  if (!v71)
  {
    v62 = (LiGroup *)operator new();
    LiGroup::LiGroup(v62);
    *(_QWORD *)v73 = v62;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v73[8], (LiGroup *)((char *)v62 + *(_QWORD *)(*(_QWORD *)v62 - 24)));
    if (!*(_QWORD *)v73)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v73 + 192))(*(_QWORD *)v73, 0);
    LiGraphBuilder::addGroupAndMakeCurrent((PCSharedCount *)&v118, (const PCSharedCount *)v73);
    if (v69)
      OZScene::createGrid(v70, (const LiCamera *)*v72, (PCSharedCount *)&v118);
    LiGraphBuilder::endInsertingIntoGroup((LiGraphBuilder *)&v118);
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v73[8]);
  }
  OZScene::begin_all_t<OZRigBehavior,false,true>(v70, (uint64_t)v73);
  *(_OWORD *)&v103._introDuration.value = *(_OWORD *)v73;
  *(_OWORD *)&v103._introDuration.epoch = *(_OWORD *)&v73[16];
  *(_OWORD *)((char *)&v103._outroDuration.value + 4) = *(_OWORD *)&v73[28];
  LODWORD(v103._pBuildInEnableChan) = v76;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v103._scaleableDuration.value, v75, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v74);
  while (2)
  {
    if (LODWORD(v103._outroDuration.epoch) != v92)
      goto LABEL_191;
    if (LODWORD(v103._outroDuration.epoch) < 2)
    {
      v64 = &v87;
      p_outroDuration = (PC_Sp_counted_base **)&v103;
    }
    else if (LODWORD(v103._outroDuration.epoch) == 3)
    {
      v64 = (PCSharedCount *)&v91;
      p_outroDuration = (PC_Sp_counted_base **)&v103._outroDuration.timescale;
    }
    else
    {
      p_outroDuration = (PC_Sp_counted_base **)&v103._outroDuration;
      v64 = (PCSharedCount *)&v90;
      if (LODWORD(v103._outroDuration.epoch) != 2)
      {
LABEL_199:
        v65 = 0;
        goto LABEL_204;
      }
    }
    if (*p_outroDuration != v64->var0)
    {
LABEL_191:
      if (LODWORD(v103._outroDuration.epoch) < 2)
      {
        if (v103._introDuration.value == v103._introDuration.epoch)
          goto LABEL_199;
        v65 = *(std::mutex **)(v103._introDuration.value + 16);
        if (!v65)
          goto LABEL_204;
      }
      else
      {
        if (LODWORD(v103._outroDuration.epoch) != 2)
        {
          if (LODWORD(v103._outroDuration.epoch) != 3)
            goto LABEL_199;
          v65 = *(std::mutex **)(*(_QWORD *)&v103._outroDuration.timescale + 16);
          if (v65)
          {
            v67 = 0;
LABEL_203:
          }
LABEL_204:
          OZRigBehavior::clearCurrentSnapshotIDCache(v65);
          OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::operator++((uint64_t)&v103);
          continue;
        }
        v65 = *(std::mutex **)(v103._outroDuration.value + 16);
        if (!v65)
          goto LABEL_204;
      }
      v67 = -2;
      goto LABEL_203;
    }
    break;
  }
  LiGraphBuilder::worldRoot((const PCSharedCount *)&v118, v68);
  PCSharedCount::~PCSharedCount(&v83);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v84);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v93);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v103._scaleableDuration);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v98);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v101);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v110);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v113);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v117);
  std::__list_imp<unsigned int>::clear(v116);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&v118);
  PCSharedCount::~PCSharedCount(&v122);
  PCSharedCount::~PCSharedCount(&v125);
}

void sub_1B2E5A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCSharedCount *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,PCSharedCount a48)
{
  PCSharedCount *v48;
  PCSharedCount *v49;

  PCSharedCount::~PCSharedCount(&a48);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x258]);
  PCSharedCount::~PCSharedCount(v48);
  PCSharedCount::~PCSharedCount(v49);
  _Unwind_Resume(a1);
}

double OZRenderParams::setActiveCamera(uint64_t a1, const PCSharedCount *a2)
{
  uint64_t *v3;
  double result;
  PCSharedCount v5;

  *(PCSharedCount *)(a1 + 1296) = (PCSharedCount)a2->var0;
  v3 = (uint64_t *)(a1 + 1304);
  PCSharedCount::PCSharedCount(&v5, a2 + 1);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

void sub_1B2E5AC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void OZScene::makeActiveCamera(int32x2_t *this@<X0>, const CMTime *a2@<X1>, PCSharedCount *a3@<X8>)
{
  OZChannelBool *pBuildInEnableChan;
  int ActiveCamera;
  PCString *var5;
  __int128 v9;
  __n128 v10;
  CMTime v11;
  METimeRemap v12;

  v12._introDuration.value = (int64_t)this;
  *(_DWORD *)&v12._isLoop = 0;
  PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>((OZScene **)&v12, (int *)&v12._isLoop, (PCSharedCount *)&v12._pBuildInEnableChan);
  PCMakePtr<LiSimpleCamera>((PCSharedCount *)&v12);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3, (const PCSharedCount *)&v12);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v12._introDuration.timescale);
  pBuildInEnableChan = v12._pBuildInEnableChan;
  if (!v12._pBuildInEnableChan)
    throw_PCNullPointerException(1);
  ActiveCamera = OZScene::getActiveCamera((OZScene *)this, a2);
  HGUserJob::SetState((uint64_t)pBuildInEnableChan, ActiveCamera);
  if (!v12._pBuildInEnableChan)
    throw_PCNullPointerException(1);
  if (OZSceneCamera::isValid((OZSceneCamera *)v12._pBuildInEnableChan))
  {
    if (!v12._pBuildInEnableChan)
      throw_PCNullPointerException(1);
    *(_QWORD *)&v12._scaleableDuration.timescale = 0;
    LOBYTE(v12._scaleableDuration.epoch) = 1;
    v12._introDuration.value = (int64_t)&off_1E659DB38;
    v12._scaleableDuration.value = (int64_t)&unk_1E659DE50;
    var5 = v12._pBuildInEnableChan->var5;
    v9 = *(_OWORD *)&v12._pBuildInEnableChan->var3;
    *(_OWORD *)&v12._introDuration.timescale = *(_OWORD *)&v12._pBuildInEnableChan->var1;
    *(_OWORD *)&v12._outroDuration.value = v9;
    v12._outroDuration.epoch = (int64_t)var5;
    LiRenderingTechnology::setRasterizeEdges((uint64_t)&v12, 0);
    v11 = *a2;
    v10 = METimeRemap::setOutroDuration(&v12, &v11);
    if (!a3->var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, METimeRemap *, __n128))(*(_QWORD *)a3->var0 + 168))(a3->var0, &v12, v10);
    OZSceneCamera::~OZSceneCamera((OZSceneCamera *)&v12);
  }
  else
  {
    *(float64x2_t *)&v12._introDuration.value = vcvtq_f64_f32(vcvt_f32_s32(this[43]));
    if (!a3->var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, METimeRemap *))(*(_QWORD *)a3->var0 + 288))(a3->var0, &v12);
    if (!a3->var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)a3->var0 + 696))(a3->var0, *(double *)&this[48]);
  }
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v12._pBuildOutEnableChan);
}

void sub_1B2E5AE24(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  PCSharedCount::~PCSharedCount(v1 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 40));
  _Unwind_Resume(a1);
}

_QWORD *OZScene::begin_all_t<OZRigBehavior,false,true>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const void *v4;

  *(_OWORD *)(a2 + 48) = 0u;
  v3 = (_QWORD *)result[151];
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 80) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_DWORD *)(a2 + 40) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return (_QWORD *)OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::operator++(a2);
    if (!result)
      return (_QWORD *)OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::operator++(a2);
  }
  return result;
}

void sub_1B2E5AEF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::operator++(uint64_t a1)
{
  unsigned int v2;
  const void *v3;
  const struct __class_type_info *v4;
  ptrdiff_t v5;

  while (1)
  {
    while (1)
    {
      OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::increment((_QWORD *)a1);
      v2 = *(_DWORD *)(a1 + 40);
      if (v2 < 2)
        break;
      if (v2 == 2)
      {
        v3 = *(const void **)(*(_QWORD *)(a1 + 24) + 16);
        if (v3)
        {
          goto LABEL_11;
        }
      }
      else if (v2 == 3)
      {
        v3 = *(const void **)(*(_QWORD *)(a1 + 32) + 16);
        if (v3)
        {
          v5 = 0;
          goto LABEL_12;
        }
      }
    }
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 16))
      return a1;
    v3 = *(const void **)(*(_QWORD *)a1 + 16);
    if (v3)
    {
LABEL_11:
      v5 = -2;
LABEL_12:
        return a1;
    }
  }
}

void OZRenderParams::setShadowLights(OZRenderParams *this, const LiLightSet *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 155);
  if (!v3)
    throw_PCNullPointerException(1);
  v4 = *((_DWORD *)a2 + 3);
  if (*(_DWORD *)(v3 + 40) >= v4)
    v5 = *(_DWORD *)(v3 + 40);
  else
    v5 = (2 * v4) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v3 + 32, v4, v5);
  if (*((int *)a2 + 3) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      LiLight::operator=(*(_QWORD *)(v3 + 48) + v6, *((_QWORD *)a2 + 2) + v6);
      ++v7;
      v6 += 944;
    }
    while (v7 < *((int *)a2 + 3));
  }
  *(_BYTE *)(v3 + 56) = *((_BYTE *)a2 + 24);
}

void PCMakePtr<Li3DGroupForEquirect,LiCamera *,int,int>(_QWORD **a1@<X0>, int *a2@<X1>, int *a3@<X2>, PCSharedCount *a4@<X8>)
{
  PC_Sp_counted_base *v8;
  _QWORD *v9;
  PCShared_base *v10;
  _QWORD *v11;
  PCSharedCount v12;

  v8 = (PC_Sp_counted_base *)operator new();
  v9 = *a1;
  v11 = v9;
  if (v9)
    v10 = (PCShared_base *)((char *)v9 + *(_QWORD *)(*v9 - 24));
  else
    v10 = 0;
  PCSharedCount::PCSharedCount(&v12, v10);
  Li3DGroupForEquirect::Li3DGroupForEquirect((uint64_t)v8, &v11, *a2, *a3);
  a4->var0 = v8;
  PCSharedCount::PCSharedCount(a4 + 1, (PCShared_base *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24)));
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2E5B130(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZScene::calcWorldToFilmSpaceMatrixForCamera(OZScene *this@<X0>, const LiCamera *a2@<X1>, _OWORD *a3@<X8>)
{
  OZSceneCamera *v6;
  float64x2_t v7;
  uint64_t i;
  __n128 *v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const PCString *v20;
  __n128 v21[8];
  _OWORD v22[2];
  uint64_t src;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[48];
  __int128 v34;
  __int128 v35;
  _BYTE v36[48];

  *(_QWORD *)&v36[40] = 0x3FF0000000000000;
  *(_QWORD *)v36 = 0x3FF0000000000000;
  *(_QWORD *)&v33[40] = 0x3FF0000000000000;
  *(_QWORD *)v33 = 0x3FF0000000000000;
  memset(&v33[8], 0, 32);
  v34 = 0u;
  v35 = 0u;
  memset(&v36[8], 0, 32);
  if (a2
  {
    LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)&src);
    v21[0] = (__n128)vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)((char *)this + 344)));
    LiSimpleCamera::setFilmback((__n128 *)&src, v21);
    LiSimpleCamera::setPixelAspectRatio((uint64_t)&src, *((double *)this + 48));
    OZScene::calcWorldToFilmSpaceMatrixForCamera(this, (const LiCamera *)&src);
    LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&src, v20);
  }
  else
  {
    v7 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)((char *)this + 344)));
    __asm { FMOV            V1.2D, #-0.5 }
    v22[0] = vmulq_f64(v7, _Q1);
    v22[1] = v7;
    v32 = 0x3FF0000000000000;
    v29 = 0x3FF0000000000000;
    v26 = 0x3FF0000000000000;
    src = 0x3FF0000000000000;
    v24 = 0u;
    v25 = 0u;
    v27 = 0u;
    v28 = 0u;
    v30 = 0u;
    v31 = 0u;
    (*(void (**)(const LiCamera *, _OWORD *, uint64_t *))(*(_QWORD *)a2 + 296))(a2, v22, &src);
    (*(void (**)(__n128 *__return_ptr, const LiCamera *))(*(_QWORD *)a2 + 48))(v21, a2);
    for (i = 0; i != 8; i += 2)
    {
      v14 = (__n128 *)&v33[i * 16];
      v15 = v21[i + 1];
      *v14 = v21[i];
      v14[1] = v15;
    }
    PCMatrix44Tmpl<double>::leftMult((uint64_t)v33, (double *)&src);
    v16 = *(_OWORD *)v36;
    a3[4] = v35;
    a3[5] = v16;
    v17 = *(_OWORD *)&v36[32];
    a3[6] = *(_OWORD *)&v36[16];
    a3[7] = v17;
    v18 = *(_OWORD *)&v33[16];
    *a3 = *(_OWORD *)v33;
    a3[1] = v18;
    v19 = v34;
    a3[2] = *(_OWORD *)&v33[32];
    a3[3] = v19;
  }
}

void sub_1B2E5B320(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&a30, a2);
  _Unwind_Resume(a1);
}

void sub_1B2E5B334(void *a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  __cxa_begin_catch(a1);
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 112) = 0u;
  *(_OWORD *)(v3 - 176) = 0u;
  *(_OWORD *)(v3 - 160) = 0u;
  *(_OWORD *)(v3 - 144) = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)(v3 - 96) = 0x3FF0000000000000;
  *(_QWORD *)(v3 - 56) = 0x3FF0000000000000;
  v4 = *(_OWORD *)(v3 - 96);
  v1[4] = *(_OWORD *)(v3 - 112);
  v1[5] = v4;
  v5 = *(_OWORD *)(v3 - 64);
  v1[6] = *(_OWORD *)(v3 - 80);
  v1[7] = v5;
  v6 = *(_OWORD *)(v3 - 160);
  *v1 = *(_OWORD *)(v3 - 176);
  v1[1] = v6;
  v7 = *(_OWORD *)(v3 - 128);
  v1[2] = *(_OWORD *)(v3 - 144);
  v1[3] = v7;
  __cxa_end_catch();
  JUMPOUT(0x1B2E5B2BCLL);
}

double *PCQuat<double>::setRotation(double *a1, double *a2, double *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a3;
  v7 = a3[1];
  v8 = a2[2];
  v9 = a3[2];
  v10 = v4 * v4 + v5 * v5 + v8 * v8;
  v11 = (*a2 * *a3 + v5 * v7 + v8 * v9) / sqrt(v10 * (v6 * v6 + v7 * v7 + v9 * v9));
  if (v11 <= 0.99999)
  {
    if (v11 >= -0.99999)
    {
      v22 = v5 * v9 - v7 * v8;
      v23 = v6 * v8 - v4 * v9;
      v24 = v4 * v7 - v6 * v5;
      v25 = sqrt((1.0 - v11) * 0.5 / (v22 * v22 + v23 * v23 + v24 * v24));
      *a1 = sqrt((v11 + 1.0) * 0.5);
      a1[1] = v22 * v25;
      a1[2] = v23 * v25;
      a1[3] = v24 * v25;
    }
    else
    {
      v12 = sqrt(v10);
      if (v12 < 0.000000100000001 && v12 > -0.000000100000001)
        v12 = 1.0;
      v14 = v4 / v12;
      v15 = v5 / v12;
      v16 = v8 / v12;
      v17 = v15 * 0.0;
      v18 = v15 * 0.0 - v16 * 0.0;
      v19 = v16 - v14 * 0.0;
      a1[1] = v18;
      a1[2] = v19;
      v20 = a1 + 1;
      v21 = v14 * 0.0 - v15;
      a1[3] = v21;
      if (sqrt(v21 * v21 + v18 * v18 + v19 * v19) < 0.00001)
      {
        a1[1] = v17 - v16;
        a1[2] = v16 * 0.0 - v14 * 0.0;
        a1[3] = v14 - v17;
      }
      *a1 = 0.0;
      PCVector3<double>::normalize(v20, 0.000000100000001);
    }
  }
  else
  {
    *a1 = 1.0;
    a1[1] = 0.0;
    a1[2] = 0.0;
    a1[3] = 0.0;
  }
  return a1;
}

BOOL OZScene::isDepthOfFieldSupported(OZScene *this)
{
  return OZSceneSettings::get360ProjectMode((OZScene *)((char *)this + 336)) == 0;
}

uint64_t OZScene::setNeedsDesperationMode(OZScene *this, unsigned __int8 a2)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;

  v2 = (unsigned __int8 *)this + 1776;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(a2, v2));
  return v3 & 1;
}

uint64_t OZScene::inDesperationMode(OZScene *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 1776);
  return v1 & 1;
}

uint64_t OZScene::openMedia(OZScene *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  OZElement *v5;
  OZElement *v6;
  OZFootage *v7;
  OZElement *v8;
  OZElement *v9;
  char v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  char v14;
  BOOL v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  _OWORD v21[2];
  int v22;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;

  OZScene::rbegin_t<OZSceneNode,false,true>((uint64_t *)this, (uint64_t)v23);
  v2 = 0;
  v3 = *((_QWORD *)this + 151);
  memset(v21, 0, sizeof(v21));
  v22 = 1065353216;
  v17 = (char *)this + 1200;
  v18 = v3;
  v19 = (char *)this + 1200;
  v20 = 0;
  while ((char *)v23[0] != v17)
  {
    if (v23[0] == v24 || (v4 = *(const void **)(v23[0] + 16)) == 0)
    {
      v16 = 0;
      goto LABEL_9;
    }
    v16 = 0;
    if (v7)
    {
      v10 = OZFootage::isInUseByUnreplacedDropZonesOnly(v7, &v16);
      if (v5)
        goto LABEL_15;
    }
    else
    {
      v10 = 0;
      if (v5)
      {
LABEL_15:
        if ((OZElement::isVisibleInRig(v5) & 1) != 0)
          goto LABEL_27;
      }
    }
    if (v7)
    {
      v14 = v16 ? 0 : v10;
      if ((v14 & 1) == 0)
      {
        OZFootage::setNeedsDZFileOpen((uint64_t)v7, 1);
        v5 = (OZElement *)v7;
LABEL_27:
        v13 = (*(uint64_t (**)(OZElement *))(*(_QWORD *)v5 + 104))(v5);
LABEL_28:
        v2 = v13;
        goto LABEL_29;
      }
    }
    if (v8)
    {
      v5 = v8;
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*((_QWORD *)v8 + 2) + 24))((uint64_t)v8 + 16, 1, 1) & 1) != 0)goto LABEL_27;
    }
    v5 = v9;
    if (v9)
      goto LABEL_27;
    v5 = v6;
    if (v6)
      goto LABEL_27;
LABEL_9:
    if ((TXParagraphStyleFolder_Factory::version(this) & 1) == 0 && v23[0] != v24)
    {
      v11 = *(const void **)(v23[0] + 16);
      if (v11)
      {
        if (v12)
        {
          v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 104))(v12);
          goto LABEL_28;
        }
      }
    }
LABEL_29:
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::decrement(v23);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
  return v2;
}

void sub_1B2E5B7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::rbegin_t<OZSceneNode,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = result + 150;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (result + 150 != v2)
    return OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::decrement((uint64_t *)a2);
  return result;
}

void sub_1B2E5B858(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZScene::addSimulator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v4 = a1 + 1720;
  result = operator new(0x18uLL);
  result[1] = v4;
  result[2] = a2;
  v6 = *(_QWORD *)(a1 + 1720);
  *result = v6;
  *(_QWORD *)(v6 + 8) = result;
  *(_QWORD *)(a1 + 1720) = result;
  ++*(_QWORD *)(a1 + 1736);
  return result;
}

_QWORD *OZScene::removeSimulator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return std::list<OZCPPObserver *>::remove(a1 + 1720, &v3);
}

_QWORD *std::list<OZCPPObserver *>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B2E5B9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

CGImageRef OZScene::setCustomEnvironmentMap(OZScene *this, CGImageRef image)
{
  CGImage *v4;

  v4 = (CGImage *)*((_QWORD *)this + 234);
  if (v4)
    CGImageRelease(v4);
  *((_QWORD *)this + 234) = image;
  return CGImageRetain(image);
}

uint64_t OZScene::getCustomEnvironmentMap(OZScene *this)
{
  return *((_QWORD *)this + 234);
}

void OZSceneList::OZSceneList(OZSceneList *this)
{
  uint64_t v2;

  PCSingleton::PCSingleton(this, 0);
  *(_QWORD *)v2 = &off_1E6593600;
  PCMutex::PCMutex((PCMutex *)(v2 + 8));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
}

void sub_1B2E5BA38(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void OZSceneList::~OZSceneList(OZSceneList *this)
{
  *(_QWORD *)this = &off_1E6593600;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 8));
  PCSingleton::~PCSingleton(this);
}

{
  OZSceneList::~OZSceneList(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZSceneList::end(OZSceneList *this)
{
  return (uint64_t)this + 88;
}

uint64_t OZScene::getSanitizedViewGamut(OZScene *this)
{
  uint64_t result;
  int RawWorkingGamut;

  result = *((unsigned int *)this + 99);
  if ((_DWORD)result == -1)
  {
    if (OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336)))
    {
      if (*((_BYTE *)this + 405))
        return 5;
      else
        return 0;
    }
    else
    {
      RawWorkingGamut = OZScene::getRawWorkingGamut(this);
      return PCGetColorGamut(RawWorkingGamut);
    }
  }
  return result;
}

uint64_t OZScene::getRawWorkingGamut(OZScene *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 232);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 232));
  v3 = *((unsigned int *)this + 98);
  PCSharedMutex::unlock_shared(v2);
  return v3;
}

void OZScene::setRawWorkingGamut(uint64_t a1, int a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 232);
  PCSharedMutex::lock((std::mutex *)(a1 + 232));
  OZSceneSettings::setRawWorkingGamut(a1 + 336, a2);
  PCSharedMutex::unlock(v4);
}

void sub_1B2E5BBA0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getWorkingColorDescription@<X0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  int ComputedWorkingGamut;
  CGColorSpace *WorkingColorSpace;
  int SceneDynamicRange;
  unint64_t SceneToneMapMethod;

  v4 = (char *)this + 1816;
  ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);
  WorkingColorSpace = (CGColorSpace *)PCRenderModel::getWorkingColorSpace((uint64_t)v4, ComputedWorkingGamut);
  SceneDynamicRange = OZScene::getSceneDynamicRange(this);
  SceneToneMapMethod = OZScene::getSceneToneMapMethod(this);
  return FxColorDescription::FxColorDescription(a2, WorkingColorSpace, SceneDynamicRange, &SceneToneMapMethod, 1);
}

uint64_t OZScene::getSceneDynamicRange(OZScene *this)
{
  uint64_t result;

  result = OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336));
  if ((_DWORD)result)
    return (OZScene::getSanitizedViewGamut(this) & 0xFFFFFFFE) == 4;
  return result;
}

unint64_t OZScene::getSceneToneMapMethod(OZScene *this)
{
  int32x2_t v2;
  PCColorUtil *v3;
  double WhiteGainForHLGLevel;
  uint64_t v5;

  if (OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336)))
  {
    *(float *)v2.i32 = OZScene::getSceneWhiteLevel(this);
    WhiteGainForHLGLevel = PCColorUtil::getWhiteGainForHLGLevel(v3, v2);
    v5 = 5;
  }
  else
  {
    v5 = 0;
    LODWORD(WhiteGainForHLGLevel) = 0;
  }
  return v5 | ((unint64_t)LODWORD(WhiteGainForHLGLevel) << 32);
}

uint64_t `non-virtual thunk to'OZScene::getWorkingColorDescription@<X0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  return OZScene::getWorkingColorDescription((OZScene *)((char *)this - 8), a2);
}

float OZScene::getSceneWhiteLevel(OZScene *this)
{
  float v1;
  const void *v2;
  OZProjectNode *v3;
  double v4;
  _OWORD v6[2];
  __n128 *v7[4];
  int v8;
  _BYTE v9[25];
  _OWORD v10[2];
  int v11;

  memset(v10, 0, sizeof(v10));
  memset(v9, 0, 24);
  v11 = 1065353216;
  OZScene::begin_t<OZProjectNode,false,true>((uint64_t *)this, (uint64_t)v6);
  *(_OWORD *)v9 = v6[0];
  *(_OWORD *)&v9[9] = *(_OWORD *)((char *)v6 + 9);
  v11 = v8;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v10, v7[2], 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v7);
  v1 = 0.75;
  if (*(_QWORD *)v9 != *(_QWORD *)&v9[16])
  {
    v2 = *(const void **)(*(_QWORD *)v9 + 16);
    if (v2)
    {
      if (v3)
      {
        OZProjectNode::getHDRWhiteLevel(v3);
        v1 = v4;
      }
    }
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  return v1;
}

void sub_1B2E5BD98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getRenderModel(OZScene *this)
{
  return (uint64_t)this + 1816;
}

float OZScene::getBlendingGamma(OZScene *this)
{
  char *v1;
  int ComputedWorkingGamut;

  v1 = (char *)this + 1816;
  ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);
  return PCRenderModel::getBlendingGamma((uint64_t)v1, ComputedWorkingGamut);
}

float `non-virtual thunk to'OZScene::getBlendingGamma(OZScene *this)
{
  char *v1;
  int ComputedWorkingGamut;

  v1 = (char *)this + 1808;
  ComputedWorkingGamut = OZScene::getComputedWorkingGamut((OZScene *)((char *)this - 8));
  return PCRenderModel::getBlendingGamma((uint64_t)v1, ComputedWorkingGamut);
}

void OZScene::computeLockDependencies(OZScene *this)
{
  OZChannelBase *v2;
  OZLockingGroup **v3;
  OZLockingGroup **v4;
  _QWORD v5[3];
  uint64_t v6;
  void **v7;

  v2 = (OZChannelBase *)*((_QWORD *)this + 188);
  if (v2)
    OZChannelBase::setRangeName(v2, (const PCString *)1);
  PCSharedMutex::lock((std::mutex *)((char *)this + 40));
  v3 = (OZLockingGroup **)*((_QWORD *)this + 223);
  v4 = (OZLockingGroup **)*((_QWORD *)this + 224);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
      {
        OZLockingGroup::~OZLockingGroup(*v3);
        MEMORY[0x1B5E29170]();
      }
      ++v3;
    }
    while (v3 != v4);
    v3 = (OZLockingGroup **)*((_QWORD *)this + 223);
  }
  *((_QWORD *)this + 224) = v3;
  OZScene::buildLockDependencyGraphForScene(this, v5);
  OZScene::buildLockingGroups(this, (uint64_t)v5);
  v7 = (void **)&v6;
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy((uint64_t)v5, (_QWORD *)v5[1]);
  PCSharedMutex::unlock((std::mutex *)((char *)this + 40));
}

void sub_1B2E5BEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  PCDirectedGraph<OZLocking *>::~PCDirectedGraph((uint64_t)va);
  PCSharedMutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t OZScene::buildLockDependencyGraphForScene@<X0>(OZScene *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v6;
  _OWORD v7[2];
  int v8;
  _QWORD v9[2];
  char *v10;
  char v11;
  _OWORD v12[2];
  int v13;

  a2[1] = 0;
  *a2 = a2 + 1;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  v3 = *((_QWORD *)this + 151);
  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  v9[0] = v3;
  v9[1] = v3;
  v10 = (char *)this + 1200;
  v11 = 0;
  memset(v7, 0, sizeof(v7));
  v8 = 1065353216;
  v6 = (char *)this + 1200;
  while ((char *)v9[0] != v6)
  {
    if ((char *)v9[0] == v10)
      v4 = 0;
    else
      v4 = *(char **)(v9[0] + 16);
    OZScene::addLockDependencyGraphForSceneNode((int)this, (uint64_t)a2, v4);
    LODWORD(this) = OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v9);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v7);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v12);
}

void sub_1B2E5BFF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  PCDirectedGraph<OZLocking *>::~PCDirectedGraph(v1);
  _Unwind_Resume(a1);
}

void OZScene::buildLockingGroups(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t **v4;
  char **v6;
  OZScene **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  OZScene ***v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  OZScene ***v20;
  char *v21;
  char *v22;
  OZScene **v23;

  v3 = *(uint64_t ***)(a2 + 24);
  v4 = *(uint64_t ***)(a2 + 32);
  if (v3 == v4)
  {
    PCDirectedGraph<OZLocking *>::findStronglyConnectedComponents((uint64_t **)a2);
    v3 = *(uint64_t ***)(a2 + 24);
    v4 = *(uint64_t ***)(a2 + 32);
  }
  if (v3 != v4)
  {
    v6 = (char **)(a1 + 223);
    do
    {
      v7 = (OZScene **)operator new();
      OZLockingGroup::OZLockingGroup((uint64_t)v7, (uint64_t)a1);
      v9 = *v3;
      v8 = v3[1];
      while (v9 != v8)
      {
        v10 = *v9++;
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
        OZLockingGroup::add(v7, v11);
        OZLocking::setLockingGroup(v10, (uint64_t)v7);
      }
      v12 = (OZScene ***)a1[224];
      v13 = a1[225];
      if ((unint64_t)v12 >= v13)
      {
        v15 = ((char *)v12 - *v6) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v16 = v13 - (_QWORD)*v6;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 225), v18);
        else
          v19 = 0;
        v20 = (OZScene ***)&v19[8 * v15];
        *v20 = v7;
        v14 = v20 + 1;
        v21 = (char *)a1[224];
        v22 = (char *)a1[223];
        if (v21 != v22)
        {
          do
          {
            v23 = (OZScene **)*((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = *v6;
        }
        a1[223] = v20;
        a1[224] = v14;
        a1[225] = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v12 = v7;
        v14 = v12 + 1;
      }
      a1[224] = v14;
      v3 += 3;
    }
    while (v3 != v4);
  }
}

